
Microros_F411RE.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00016a00  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000ea4  08016ba0  08016ba0  00017ba0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08017a44  08017a44  00019198  2**0
                  CONTENTS
  4 .ARM          00000008  08017a44  08017a44  00018a44  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08017a4c  08017a4c  00019198  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   0000000c  08017a4c  08017a4c  00018a4c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08017a58  08017a58  00018a58  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000198  20000000  08017a5c  00019000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000dc98  20000198  08017bf4  00019198  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  2000de30  08017bf4  00019e30  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00019198  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001b9a3  00000000  00000000  000191c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000400f  00000000  00000000  00034b6b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000016b0  00000000  00000000  00038b80  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001187  00000000  00000000  0003a230  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001c0b1  00000000  00000000  0003b3b7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001ab89  00000000  00000000  00057468  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a4c27  00000000  00000000  00071ff1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000076  00000000  00000000  00116c18  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006e4c  00000000  00000000  00116c90  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000049  00000000  00000000  0011dadc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000198 	.word	0x20000198
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08016b88 	.word	0x08016b88

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	2000019c 	.word	0x2000019c
 80001dc:	08016b88 	.word	0x08016b88

080001e0 <strcmp>:
 80001e0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001e4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001e8:	2a01      	cmp	r2, #1
 80001ea:	bf28      	it	cs
 80001ec:	429a      	cmpcs	r2, r3
 80001ee:	d0f7      	beq.n	80001e0 <strcmp>
 80001f0:	1ad0      	subs	r0, r2, r3
 80001f2:	4770      	bx	lr

080001f4 <strlen>:
 80001f4:	4603      	mov	r3, r0
 80001f6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001fa:	2a00      	cmp	r2, #0
 80001fc:	d1fb      	bne.n	80001f6 <strlen+0x2>
 80001fe:	1a18      	subs	r0, r3, r0
 8000200:	3801      	subs	r0, #1
 8000202:	4770      	bx	lr
	...

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_drsub>:
 80002b0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002b4:	e002      	b.n	80002bc <__adddf3>
 80002b6:	bf00      	nop

080002b8 <__aeabi_dsub>:
 80002b8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002bc <__adddf3>:
 80002bc:	b530      	push	{r4, r5, lr}
 80002be:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002c2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002c6:	ea94 0f05 	teq	r4, r5
 80002ca:	bf08      	it	eq
 80002cc:	ea90 0f02 	teqeq	r0, r2
 80002d0:	bf1f      	itttt	ne
 80002d2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002d6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002da:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002de:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002e2:	f000 80e2 	beq.w	80004aa <__adddf3+0x1ee>
 80002e6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ea:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ee:	bfb8      	it	lt
 80002f0:	426d      	neglt	r5, r5
 80002f2:	dd0c      	ble.n	800030e <__adddf3+0x52>
 80002f4:	442c      	add	r4, r5
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	ea82 0000 	eor.w	r0, r2, r0
 8000302:	ea83 0101 	eor.w	r1, r3, r1
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	2d36      	cmp	r5, #54	@ 0x36
 8000310:	bf88      	it	hi
 8000312:	bd30      	pophi	{r4, r5, pc}
 8000314:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000318:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800031c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000320:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000324:	d002      	beq.n	800032c <__adddf3+0x70>
 8000326:	4240      	negs	r0, r0
 8000328:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800032c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000330:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000334:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000338:	d002      	beq.n	8000340 <__adddf3+0x84>
 800033a:	4252      	negs	r2, r2
 800033c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000340:	ea94 0f05 	teq	r4, r5
 8000344:	f000 80a7 	beq.w	8000496 <__adddf3+0x1da>
 8000348:	f1a4 0401 	sub.w	r4, r4, #1
 800034c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000350:	db0d      	blt.n	800036e <__adddf3+0xb2>
 8000352:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000356:	fa22 f205 	lsr.w	r2, r2, r5
 800035a:	1880      	adds	r0, r0, r2
 800035c:	f141 0100 	adc.w	r1, r1, #0
 8000360:	fa03 f20e 	lsl.w	r2, r3, lr
 8000364:	1880      	adds	r0, r0, r2
 8000366:	fa43 f305 	asr.w	r3, r3, r5
 800036a:	4159      	adcs	r1, r3
 800036c:	e00e      	b.n	800038c <__adddf3+0xd0>
 800036e:	f1a5 0520 	sub.w	r5, r5, #32
 8000372:	f10e 0e20 	add.w	lr, lr, #32
 8000376:	2a01      	cmp	r2, #1
 8000378:	fa03 fc0e 	lsl.w	ip, r3, lr
 800037c:	bf28      	it	cs
 800037e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000382:	fa43 f305 	asr.w	r3, r3, r5
 8000386:	18c0      	adds	r0, r0, r3
 8000388:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800038c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000390:	d507      	bpl.n	80003a2 <__adddf3+0xe6>
 8000392:	f04f 0e00 	mov.w	lr, #0
 8000396:	f1dc 0c00 	rsbs	ip, ip, #0
 800039a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800039e:	eb6e 0101 	sbc.w	r1, lr, r1
 80003a2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003a6:	d31b      	bcc.n	80003e0 <__adddf3+0x124>
 80003a8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003ac:	d30c      	bcc.n	80003c8 <__adddf3+0x10c>
 80003ae:	0849      	lsrs	r1, r1, #1
 80003b0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003b4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003b8:	f104 0401 	add.w	r4, r4, #1
 80003bc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003c0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003c4:	f080 809a 	bcs.w	80004fc <__adddf3+0x240>
 80003c8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003cc:	bf08      	it	eq
 80003ce:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003d2:	f150 0000 	adcs.w	r0, r0, #0
 80003d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003da:	ea41 0105 	orr.w	r1, r1, r5
 80003de:	bd30      	pop	{r4, r5, pc}
 80003e0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003e4:	4140      	adcs	r0, r0
 80003e6:	eb41 0101 	adc.w	r1, r1, r1
 80003ea:	3c01      	subs	r4, #1
 80003ec:	bf28      	it	cs
 80003ee:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003f2:	d2e9      	bcs.n	80003c8 <__adddf3+0x10c>
 80003f4:	f091 0f00 	teq	r1, #0
 80003f8:	bf04      	itt	eq
 80003fa:	4601      	moveq	r1, r0
 80003fc:	2000      	moveq	r0, #0
 80003fe:	fab1 f381 	clz	r3, r1
 8000402:	bf08      	it	eq
 8000404:	3320      	addeq	r3, #32
 8000406:	f1a3 030b 	sub.w	r3, r3, #11
 800040a:	f1b3 0220 	subs.w	r2, r3, #32
 800040e:	da0c      	bge.n	800042a <__adddf3+0x16e>
 8000410:	320c      	adds	r2, #12
 8000412:	dd08      	ble.n	8000426 <__adddf3+0x16a>
 8000414:	f102 0c14 	add.w	ip, r2, #20
 8000418:	f1c2 020c 	rsb	r2, r2, #12
 800041c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000420:	fa21 f102 	lsr.w	r1, r1, r2
 8000424:	e00c      	b.n	8000440 <__adddf3+0x184>
 8000426:	f102 0214 	add.w	r2, r2, #20
 800042a:	bfd8      	it	le
 800042c:	f1c2 0c20 	rsble	ip, r2, #32
 8000430:	fa01 f102 	lsl.w	r1, r1, r2
 8000434:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000438:	bfdc      	itt	le
 800043a:	ea41 010c 	orrle.w	r1, r1, ip
 800043e:	4090      	lslle	r0, r2
 8000440:	1ae4      	subs	r4, r4, r3
 8000442:	bfa2      	ittt	ge
 8000444:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000448:	4329      	orrge	r1, r5
 800044a:	bd30      	popge	{r4, r5, pc}
 800044c:	ea6f 0404 	mvn.w	r4, r4
 8000450:	3c1f      	subs	r4, #31
 8000452:	da1c      	bge.n	800048e <__adddf3+0x1d2>
 8000454:	340c      	adds	r4, #12
 8000456:	dc0e      	bgt.n	8000476 <__adddf3+0x1ba>
 8000458:	f104 0414 	add.w	r4, r4, #20
 800045c:	f1c4 0220 	rsb	r2, r4, #32
 8000460:	fa20 f004 	lsr.w	r0, r0, r4
 8000464:	fa01 f302 	lsl.w	r3, r1, r2
 8000468:	ea40 0003 	orr.w	r0, r0, r3
 800046c:	fa21 f304 	lsr.w	r3, r1, r4
 8000470:	ea45 0103 	orr.w	r1, r5, r3
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f1c4 040c 	rsb	r4, r4, #12
 800047a:	f1c4 0220 	rsb	r2, r4, #32
 800047e:	fa20 f002 	lsr.w	r0, r0, r2
 8000482:	fa01 f304 	lsl.w	r3, r1, r4
 8000486:	ea40 0003 	orr.w	r0, r0, r3
 800048a:	4629      	mov	r1, r5
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	fa21 f004 	lsr.w	r0, r1, r4
 8000492:	4629      	mov	r1, r5
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f094 0f00 	teq	r4, #0
 800049a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800049e:	bf06      	itte	eq
 80004a0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004a4:	3401      	addeq	r4, #1
 80004a6:	3d01      	subne	r5, #1
 80004a8:	e74e      	b.n	8000348 <__adddf3+0x8c>
 80004aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ae:	bf18      	it	ne
 80004b0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004b4:	d029      	beq.n	800050a <__adddf3+0x24e>
 80004b6:	ea94 0f05 	teq	r4, r5
 80004ba:	bf08      	it	eq
 80004bc:	ea90 0f02 	teqeq	r0, r2
 80004c0:	d005      	beq.n	80004ce <__adddf3+0x212>
 80004c2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004c6:	bf04      	itt	eq
 80004c8:	4619      	moveq	r1, r3
 80004ca:	4610      	moveq	r0, r2
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	ea91 0f03 	teq	r1, r3
 80004d2:	bf1e      	ittt	ne
 80004d4:	2100      	movne	r1, #0
 80004d6:	2000      	movne	r0, #0
 80004d8:	bd30      	popne	{r4, r5, pc}
 80004da:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004de:	d105      	bne.n	80004ec <__adddf3+0x230>
 80004e0:	0040      	lsls	r0, r0, #1
 80004e2:	4149      	adcs	r1, r1
 80004e4:	bf28      	it	cs
 80004e6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ea:	bd30      	pop	{r4, r5, pc}
 80004ec:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004f0:	bf3c      	itt	cc
 80004f2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004f6:	bd30      	popcc	{r4, r5, pc}
 80004f8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004fc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000500:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000504:	f04f 0000 	mov.w	r0, #0
 8000508:	bd30      	pop	{r4, r5, pc}
 800050a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800050e:	bf1a      	itte	ne
 8000510:	4619      	movne	r1, r3
 8000512:	4610      	movne	r0, r2
 8000514:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000518:	bf1c      	itt	ne
 800051a:	460b      	movne	r3, r1
 800051c:	4602      	movne	r2, r0
 800051e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000522:	bf06      	itte	eq
 8000524:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000528:	ea91 0f03 	teqeq	r1, r3
 800052c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000530:	bd30      	pop	{r4, r5, pc}
 8000532:	bf00      	nop

08000534 <__aeabi_ui2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000548:	f04f 0500 	mov.w	r5, #0
 800054c:	f04f 0100 	mov.w	r1, #0
 8000550:	e750      	b.n	80003f4 <__adddf3+0x138>
 8000552:	bf00      	nop

08000554 <__aeabi_i2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000568:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800056c:	bf48      	it	mi
 800056e:	4240      	negmi	r0, r0
 8000570:	f04f 0100 	mov.w	r1, #0
 8000574:	e73e      	b.n	80003f4 <__adddf3+0x138>
 8000576:	bf00      	nop

08000578 <__aeabi_f2d>:
 8000578:	0042      	lsls	r2, r0, #1
 800057a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800057e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000582:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000586:	bf1f      	itttt	ne
 8000588:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800058c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000590:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000594:	4770      	bxne	lr
 8000596:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800059a:	bf08      	it	eq
 800059c:	4770      	bxeq	lr
 800059e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005a2:	bf04      	itt	eq
 80005a4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005a8:	4770      	bxeq	lr
 80005aa:	b530      	push	{r4, r5, lr}
 80005ac:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005b0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005b4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005b8:	e71c      	b.n	80003f4 <__adddf3+0x138>
 80005ba:	bf00      	nop

080005bc <__aeabi_ul2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f04f 0500 	mov.w	r5, #0
 80005ca:	e00a      	b.n	80005e2 <__aeabi_l2d+0x16>

080005cc <__aeabi_l2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005da:	d502      	bpl.n	80005e2 <__aeabi_l2d+0x16>
 80005dc:	4240      	negs	r0, r0
 80005de:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005e2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005e6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ea:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ee:	f43f aed8 	beq.w	80003a2 <__adddf3+0xe6>
 80005f2:	f04f 0203 	mov.w	r2, #3
 80005f6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005fa:	bf18      	it	ne
 80005fc:	3203      	addne	r2, #3
 80005fe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000602:	bf18      	it	ne
 8000604:	3203      	addne	r2, #3
 8000606:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800060a:	f1c2 0320 	rsb	r3, r2, #32
 800060e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000612:	fa20 f002 	lsr.w	r0, r0, r2
 8000616:	fa01 fe03 	lsl.w	lr, r1, r3
 800061a:	ea40 000e 	orr.w	r0, r0, lr
 800061e:	fa21 f102 	lsr.w	r1, r1, r2
 8000622:	4414      	add	r4, r2
 8000624:	e6bd      	b.n	80003a2 <__adddf3+0xe6>
 8000626:	bf00      	nop

08000628 <__aeabi_dmul>:
 8000628:	b570      	push	{r4, r5, r6, lr}
 800062a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800062e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000632:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000636:	bf1d      	ittte	ne
 8000638:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800063c:	ea94 0f0c 	teqne	r4, ip
 8000640:	ea95 0f0c 	teqne	r5, ip
 8000644:	f000 f8de 	bleq	8000804 <__aeabi_dmul+0x1dc>
 8000648:	442c      	add	r4, r5
 800064a:	ea81 0603 	eor.w	r6, r1, r3
 800064e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000652:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000656:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800065a:	bf18      	it	ne
 800065c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000660:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000664:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000668:	d038      	beq.n	80006dc <__aeabi_dmul+0xb4>
 800066a:	fba0 ce02 	umull	ip, lr, r0, r2
 800066e:	f04f 0500 	mov.w	r5, #0
 8000672:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000676:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800067a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800067e:	f04f 0600 	mov.w	r6, #0
 8000682:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000686:	f09c 0f00 	teq	ip, #0
 800068a:	bf18      	it	ne
 800068c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000690:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000694:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000698:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800069c:	d204      	bcs.n	80006a8 <__aeabi_dmul+0x80>
 800069e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006a2:	416d      	adcs	r5, r5
 80006a4:	eb46 0606 	adc.w	r6, r6, r6
 80006a8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006ac:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006b0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006b4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006b8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006bc:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006c0:	bf88      	it	hi
 80006c2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006c6:	d81e      	bhi.n	8000706 <__aeabi_dmul+0xde>
 80006c8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006cc:	bf08      	it	eq
 80006ce:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006d2:	f150 0000 	adcs.w	r0, r0, #0
 80006d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006e0:	ea46 0101 	orr.w	r1, r6, r1
 80006e4:	ea40 0002 	orr.w	r0, r0, r2
 80006e8:	ea81 0103 	eor.w	r1, r1, r3
 80006ec:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006f0:	bfc2      	ittt	gt
 80006f2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006f6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	popgt	{r4, r5, r6, pc}
 80006fc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000700:	f04f 0e00 	mov.w	lr, #0
 8000704:	3c01      	subs	r4, #1
 8000706:	f300 80ab 	bgt.w	8000860 <__aeabi_dmul+0x238>
 800070a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800070e:	bfde      	ittt	le
 8000710:	2000      	movle	r0, #0
 8000712:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000716:	bd70      	pople	{r4, r5, r6, pc}
 8000718:	f1c4 0400 	rsb	r4, r4, #0
 800071c:	3c20      	subs	r4, #32
 800071e:	da35      	bge.n	800078c <__aeabi_dmul+0x164>
 8000720:	340c      	adds	r4, #12
 8000722:	dc1b      	bgt.n	800075c <__aeabi_dmul+0x134>
 8000724:	f104 0414 	add.w	r4, r4, #20
 8000728:	f1c4 0520 	rsb	r5, r4, #32
 800072c:	fa00 f305 	lsl.w	r3, r0, r5
 8000730:	fa20 f004 	lsr.w	r0, r0, r4
 8000734:	fa01 f205 	lsl.w	r2, r1, r5
 8000738:	ea40 0002 	orr.w	r0, r0, r2
 800073c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000740:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000744:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000748:	fa21 f604 	lsr.w	r6, r1, r4
 800074c:	eb42 0106 	adc.w	r1, r2, r6
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 040c 	rsb	r4, r4, #12
 8000760:	f1c4 0520 	rsb	r5, r4, #32
 8000764:	fa00 f304 	lsl.w	r3, r0, r4
 8000768:	fa20 f005 	lsr.w	r0, r0, r5
 800076c:	fa01 f204 	lsl.w	r2, r1, r4
 8000770:	ea40 0002 	orr.w	r0, r0, r2
 8000774:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000778:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800077c:	f141 0100 	adc.w	r1, r1, #0
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f1c4 0520 	rsb	r5, r4, #32
 8000790:	fa00 f205 	lsl.w	r2, r0, r5
 8000794:	ea4e 0e02 	orr.w	lr, lr, r2
 8000798:	fa20 f304 	lsr.w	r3, r0, r4
 800079c:	fa01 f205 	lsl.w	r2, r1, r5
 80007a0:	ea43 0302 	orr.w	r3, r3, r2
 80007a4:	fa21 f004 	lsr.w	r0, r1, r4
 80007a8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007ac:	fa21 f204 	lsr.w	r2, r1, r4
 80007b0:	ea20 0002 	bic.w	r0, r0, r2
 80007b4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007bc:	bf08      	it	eq
 80007be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007c2:	bd70      	pop	{r4, r5, r6, pc}
 80007c4:	f094 0f00 	teq	r4, #0
 80007c8:	d10f      	bne.n	80007ea <__aeabi_dmul+0x1c2>
 80007ca:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007ce:	0040      	lsls	r0, r0, #1
 80007d0:	eb41 0101 	adc.w	r1, r1, r1
 80007d4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3c01      	subeq	r4, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1a6>
 80007de:	ea41 0106 	orr.w	r1, r1, r6
 80007e2:	f095 0f00 	teq	r5, #0
 80007e6:	bf18      	it	ne
 80007e8:	4770      	bxne	lr
 80007ea:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007ee:	0052      	lsls	r2, r2, #1
 80007f0:	eb43 0303 	adc.w	r3, r3, r3
 80007f4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3d01      	subeq	r5, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1c6>
 80007fe:	ea43 0306 	orr.w	r3, r3, r6
 8000802:	4770      	bx	lr
 8000804:	ea94 0f0c 	teq	r4, ip
 8000808:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800080c:	bf18      	it	ne
 800080e:	ea95 0f0c 	teqne	r5, ip
 8000812:	d00c      	beq.n	800082e <__aeabi_dmul+0x206>
 8000814:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000818:	bf18      	it	ne
 800081a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081e:	d1d1      	bne.n	80007c4 <__aeabi_dmul+0x19c>
 8000820:	ea81 0103 	eor.w	r1, r1, r3
 8000824:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000828:	f04f 0000 	mov.w	r0, #0
 800082c:	bd70      	pop	{r4, r5, r6, pc}
 800082e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000832:	bf06      	itte	eq
 8000834:	4610      	moveq	r0, r2
 8000836:	4619      	moveq	r1, r3
 8000838:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083c:	d019      	beq.n	8000872 <__aeabi_dmul+0x24a>
 800083e:	ea94 0f0c 	teq	r4, ip
 8000842:	d102      	bne.n	800084a <__aeabi_dmul+0x222>
 8000844:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000848:	d113      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800084a:	ea95 0f0c 	teq	r5, ip
 800084e:	d105      	bne.n	800085c <__aeabi_dmul+0x234>
 8000850:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000854:	bf1c      	itt	ne
 8000856:	4610      	movne	r0, r2
 8000858:	4619      	movne	r1, r3
 800085a:	d10a      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800085c:	ea81 0103 	eor.w	r1, r1, r3
 8000860:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000864:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000868:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800086c:	f04f 0000 	mov.w	r0, #0
 8000870:	bd70      	pop	{r4, r5, r6, pc}
 8000872:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000876:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800087a:	bd70      	pop	{r4, r5, r6, pc}

0800087c <__aeabi_ddiv>:
 800087c:	b570      	push	{r4, r5, r6, lr}
 800087e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000882:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000886:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800088a:	bf1d      	ittte	ne
 800088c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000890:	ea94 0f0c 	teqne	r4, ip
 8000894:	ea95 0f0c 	teqne	r5, ip
 8000898:	f000 f8a7 	bleq	80009ea <__aeabi_ddiv+0x16e>
 800089c:	eba4 0405 	sub.w	r4, r4, r5
 80008a0:	ea81 0e03 	eor.w	lr, r1, r3
 80008a4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008a8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008ac:	f000 8088 	beq.w	80009c0 <__aeabi_ddiv+0x144>
 80008b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008b4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008b8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008bc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008c0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008c4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008c8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008cc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008d0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008d4:	429d      	cmp	r5, r3
 80008d6:	bf08      	it	eq
 80008d8:	4296      	cmpeq	r6, r2
 80008da:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008de:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008e2:	d202      	bcs.n	80008ea <__aeabi_ddiv+0x6e>
 80008e4:	085b      	lsrs	r3, r3, #1
 80008e6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ea:	1ab6      	subs	r6, r6, r2
 80008ec:	eb65 0503 	sbc.w	r5, r5, r3
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008fa:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000928:	085b      	lsrs	r3, r3, #1
 800092a:	ea4f 0232 	mov.w	r2, r2, rrx
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000958:	ea55 0e06 	orrs.w	lr, r5, r6
 800095c:	d018      	beq.n	8000990 <__aeabi_ddiv+0x114>
 800095e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000962:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000966:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800096a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800096e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000972:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000976:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800097a:	d1c0      	bne.n	80008fe <__aeabi_ddiv+0x82>
 800097c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000980:	d10b      	bne.n	800099a <__aeabi_ddiv+0x11e>
 8000982:	ea41 0100 	orr.w	r1, r1, r0
 8000986:	f04f 0000 	mov.w	r0, #0
 800098a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800098e:	e7b6      	b.n	80008fe <__aeabi_ddiv+0x82>
 8000990:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000994:	bf04      	itt	eq
 8000996:	4301      	orreq	r1, r0
 8000998:	2000      	moveq	r0, #0
 800099a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800099e:	bf88      	it	hi
 80009a0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009a4:	f63f aeaf 	bhi.w	8000706 <__aeabi_dmul+0xde>
 80009a8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009ac:	bf04      	itt	eq
 80009ae:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009b2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009b6:	f150 0000 	adcs.w	r0, r0, #0
 80009ba:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009be:	bd70      	pop	{r4, r5, r6, pc}
 80009c0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009c4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009c8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009cc:	bfc2      	ittt	gt
 80009ce:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009d2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009d6:	bd70      	popgt	{r4, r5, r6, pc}
 80009d8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009dc:	f04f 0e00 	mov.w	lr, #0
 80009e0:	3c01      	subs	r4, #1
 80009e2:	e690      	b.n	8000706 <__aeabi_dmul+0xde>
 80009e4:	ea45 0e06 	orr.w	lr, r5, r6
 80009e8:	e68d      	b.n	8000706 <__aeabi_dmul+0xde>
 80009ea:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ee:	ea94 0f0c 	teq	r4, ip
 80009f2:	bf08      	it	eq
 80009f4:	ea95 0f0c 	teqeq	r5, ip
 80009f8:	f43f af3b 	beq.w	8000872 <__aeabi_dmul+0x24a>
 80009fc:	ea94 0f0c 	teq	r4, ip
 8000a00:	d10a      	bne.n	8000a18 <__aeabi_ddiv+0x19c>
 8000a02:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a06:	f47f af34 	bne.w	8000872 <__aeabi_dmul+0x24a>
 8000a0a:	ea95 0f0c 	teq	r5, ip
 8000a0e:	f47f af25 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a12:	4610      	mov	r0, r2
 8000a14:	4619      	mov	r1, r3
 8000a16:	e72c      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a18:	ea95 0f0c 	teq	r5, ip
 8000a1c:	d106      	bne.n	8000a2c <__aeabi_ddiv+0x1b0>
 8000a1e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a22:	f43f aefd 	beq.w	8000820 <__aeabi_dmul+0x1f8>
 8000a26:	4610      	mov	r0, r2
 8000a28:	4619      	mov	r1, r3
 8000a2a:	e722      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a2c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a30:	bf18      	it	ne
 8000a32:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a36:	f47f aec5 	bne.w	80007c4 <__aeabi_dmul+0x19c>
 8000a3a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a3e:	f47f af0d 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a42:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a46:	f47f aeeb 	bne.w	8000820 <__aeabi_dmul+0x1f8>
 8000a4a:	e712      	b.n	8000872 <__aeabi_dmul+0x24a>

08000a4c <__aeabi_d2uiz>:
 8000a4c:	004a      	lsls	r2, r1, #1
 8000a4e:	d211      	bcs.n	8000a74 <__aeabi_d2uiz+0x28>
 8000a50:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000a54:	d211      	bcs.n	8000a7a <__aeabi_d2uiz+0x2e>
 8000a56:	d50d      	bpl.n	8000a74 <__aeabi_d2uiz+0x28>
 8000a58:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000a5c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a60:	d40e      	bmi.n	8000a80 <__aeabi_d2uiz+0x34>
 8000a62:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a66:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000a6a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a6e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a72:	4770      	bx	lr
 8000a74:	f04f 0000 	mov.w	r0, #0
 8000a78:	4770      	bx	lr
 8000a7a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a7e:	d102      	bne.n	8000a86 <__aeabi_d2uiz+0x3a>
 8000a80:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000a84:	4770      	bx	lr
 8000a86:	f04f 0000 	mov.w	r0, #0
 8000a8a:	4770      	bx	lr

08000a8c <__aeabi_ldivmod>:
 8000a8c:	b97b      	cbnz	r3, 8000aae <__aeabi_ldivmod+0x22>
 8000a8e:	b972      	cbnz	r2, 8000aae <__aeabi_ldivmod+0x22>
 8000a90:	2900      	cmp	r1, #0
 8000a92:	bfbe      	ittt	lt
 8000a94:	2000      	movlt	r0, #0
 8000a96:	f04f 4100 	movlt.w	r1, #2147483648	@ 0x80000000
 8000a9a:	e006      	blt.n	8000aaa <__aeabi_ldivmod+0x1e>
 8000a9c:	bf08      	it	eq
 8000a9e:	2800      	cmpeq	r0, #0
 8000aa0:	bf1c      	itt	ne
 8000aa2:	f06f 4100 	mvnne.w	r1, #2147483648	@ 0x80000000
 8000aa6:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000aaa:	f000 b9b5 	b.w	8000e18 <__aeabi_idiv0>
 8000aae:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ab2:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ab6:	2900      	cmp	r1, #0
 8000ab8:	db09      	blt.n	8000ace <__aeabi_ldivmod+0x42>
 8000aba:	2b00      	cmp	r3, #0
 8000abc:	db1a      	blt.n	8000af4 <__aeabi_ldivmod+0x68>
 8000abe:	f000 f84d 	bl	8000b5c <__udivmoddi4>
 8000ac2:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000ac6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000aca:	b004      	add	sp, #16
 8000acc:	4770      	bx	lr
 8000ace:	4240      	negs	r0, r0
 8000ad0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000ad4:	2b00      	cmp	r3, #0
 8000ad6:	db1b      	blt.n	8000b10 <__aeabi_ldivmod+0x84>
 8000ad8:	f000 f840 	bl	8000b5c <__udivmoddi4>
 8000adc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000ae0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ae4:	b004      	add	sp, #16
 8000ae6:	4240      	negs	r0, r0
 8000ae8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000aec:	4252      	negs	r2, r2
 8000aee:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000af2:	4770      	bx	lr
 8000af4:	4252      	negs	r2, r2
 8000af6:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000afa:	f000 f82f 	bl	8000b5c <__udivmoddi4>
 8000afe:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b02:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b06:	b004      	add	sp, #16
 8000b08:	4240      	negs	r0, r0
 8000b0a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000b0e:	4770      	bx	lr
 8000b10:	4252      	negs	r2, r2
 8000b12:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000b16:	f000 f821 	bl	8000b5c <__udivmoddi4>
 8000b1a:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b1e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b22:	b004      	add	sp, #16
 8000b24:	4252      	negs	r2, r2
 8000b26:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000b2a:	4770      	bx	lr

08000b2c <__aeabi_uldivmod>:
 8000b2c:	b953      	cbnz	r3, 8000b44 <__aeabi_uldivmod+0x18>
 8000b2e:	b94a      	cbnz	r2, 8000b44 <__aeabi_uldivmod+0x18>
 8000b30:	2900      	cmp	r1, #0
 8000b32:	bf08      	it	eq
 8000b34:	2800      	cmpeq	r0, #0
 8000b36:	bf1c      	itt	ne
 8000b38:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000b3c:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000b40:	f000 b96a 	b.w	8000e18 <__aeabi_idiv0>
 8000b44:	f1ad 0c08 	sub.w	ip, sp, #8
 8000b48:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000b4c:	f000 f806 	bl	8000b5c <__udivmoddi4>
 8000b50:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b54:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b58:	b004      	add	sp, #16
 8000b5a:	4770      	bx	lr

08000b5c <__udivmoddi4>:
 8000b5c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000b60:	9d08      	ldr	r5, [sp, #32]
 8000b62:	460c      	mov	r4, r1
 8000b64:	2b00      	cmp	r3, #0
 8000b66:	d14e      	bne.n	8000c06 <__udivmoddi4+0xaa>
 8000b68:	4694      	mov	ip, r2
 8000b6a:	458c      	cmp	ip, r1
 8000b6c:	4686      	mov	lr, r0
 8000b6e:	fab2 f282 	clz	r2, r2
 8000b72:	d962      	bls.n	8000c3a <__udivmoddi4+0xde>
 8000b74:	b14a      	cbz	r2, 8000b8a <__udivmoddi4+0x2e>
 8000b76:	f1c2 0320 	rsb	r3, r2, #32
 8000b7a:	4091      	lsls	r1, r2
 8000b7c:	fa20 f303 	lsr.w	r3, r0, r3
 8000b80:	fa0c fc02 	lsl.w	ip, ip, r2
 8000b84:	4319      	orrs	r1, r3
 8000b86:	fa00 fe02 	lsl.w	lr, r0, r2
 8000b8a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000b8e:	fa1f f68c 	uxth.w	r6, ip
 8000b92:	fbb1 f4f7 	udiv	r4, r1, r7
 8000b96:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000b9a:	fb07 1114 	mls	r1, r7, r4, r1
 8000b9e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000ba2:	fb04 f106 	mul.w	r1, r4, r6
 8000ba6:	4299      	cmp	r1, r3
 8000ba8:	d90a      	bls.n	8000bc0 <__udivmoddi4+0x64>
 8000baa:	eb1c 0303 	adds.w	r3, ip, r3
 8000bae:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 8000bb2:	f080 8112 	bcs.w	8000dda <__udivmoddi4+0x27e>
 8000bb6:	4299      	cmp	r1, r3
 8000bb8:	f240 810f 	bls.w	8000dda <__udivmoddi4+0x27e>
 8000bbc:	3c02      	subs	r4, #2
 8000bbe:	4463      	add	r3, ip
 8000bc0:	1a59      	subs	r1, r3, r1
 8000bc2:	fa1f f38e 	uxth.w	r3, lr
 8000bc6:	fbb1 f0f7 	udiv	r0, r1, r7
 8000bca:	fb07 1110 	mls	r1, r7, r0, r1
 8000bce:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000bd2:	fb00 f606 	mul.w	r6, r0, r6
 8000bd6:	429e      	cmp	r6, r3
 8000bd8:	d90a      	bls.n	8000bf0 <__udivmoddi4+0x94>
 8000bda:	eb1c 0303 	adds.w	r3, ip, r3
 8000bde:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 8000be2:	f080 80fc 	bcs.w	8000dde <__udivmoddi4+0x282>
 8000be6:	429e      	cmp	r6, r3
 8000be8:	f240 80f9 	bls.w	8000dde <__udivmoddi4+0x282>
 8000bec:	4463      	add	r3, ip
 8000bee:	3802      	subs	r0, #2
 8000bf0:	1b9b      	subs	r3, r3, r6
 8000bf2:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000bf6:	2100      	movs	r1, #0
 8000bf8:	b11d      	cbz	r5, 8000c02 <__udivmoddi4+0xa6>
 8000bfa:	40d3      	lsrs	r3, r2
 8000bfc:	2200      	movs	r2, #0
 8000bfe:	e9c5 3200 	strd	r3, r2, [r5]
 8000c02:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c06:	428b      	cmp	r3, r1
 8000c08:	d905      	bls.n	8000c16 <__udivmoddi4+0xba>
 8000c0a:	b10d      	cbz	r5, 8000c10 <__udivmoddi4+0xb4>
 8000c0c:	e9c5 0100 	strd	r0, r1, [r5]
 8000c10:	2100      	movs	r1, #0
 8000c12:	4608      	mov	r0, r1
 8000c14:	e7f5      	b.n	8000c02 <__udivmoddi4+0xa6>
 8000c16:	fab3 f183 	clz	r1, r3
 8000c1a:	2900      	cmp	r1, #0
 8000c1c:	d146      	bne.n	8000cac <__udivmoddi4+0x150>
 8000c1e:	42a3      	cmp	r3, r4
 8000c20:	d302      	bcc.n	8000c28 <__udivmoddi4+0xcc>
 8000c22:	4290      	cmp	r0, r2
 8000c24:	f0c0 80f0 	bcc.w	8000e08 <__udivmoddi4+0x2ac>
 8000c28:	1a86      	subs	r6, r0, r2
 8000c2a:	eb64 0303 	sbc.w	r3, r4, r3
 8000c2e:	2001      	movs	r0, #1
 8000c30:	2d00      	cmp	r5, #0
 8000c32:	d0e6      	beq.n	8000c02 <__udivmoddi4+0xa6>
 8000c34:	e9c5 6300 	strd	r6, r3, [r5]
 8000c38:	e7e3      	b.n	8000c02 <__udivmoddi4+0xa6>
 8000c3a:	2a00      	cmp	r2, #0
 8000c3c:	f040 8090 	bne.w	8000d60 <__udivmoddi4+0x204>
 8000c40:	eba1 040c 	sub.w	r4, r1, ip
 8000c44:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000c48:	fa1f f78c 	uxth.w	r7, ip
 8000c4c:	2101      	movs	r1, #1
 8000c4e:	fbb4 f6f8 	udiv	r6, r4, r8
 8000c52:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000c56:	fb08 4416 	mls	r4, r8, r6, r4
 8000c5a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000c5e:	fb07 f006 	mul.w	r0, r7, r6
 8000c62:	4298      	cmp	r0, r3
 8000c64:	d908      	bls.n	8000c78 <__udivmoddi4+0x11c>
 8000c66:	eb1c 0303 	adds.w	r3, ip, r3
 8000c6a:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 8000c6e:	d202      	bcs.n	8000c76 <__udivmoddi4+0x11a>
 8000c70:	4298      	cmp	r0, r3
 8000c72:	f200 80cd 	bhi.w	8000e10 <__udivmoddi4+0x2b4>
 8000c76:	4626      	mov	r6, r4
 8000c78:	1a1c      	subs	r4, r3, r0
 8000c7a:	fa1f f38e 	uxth.w	r3, lr
 8000c7e:	fbb4 f0f8 	udiv	r0, r4, r8
 8000c82:	fb08 4410 	mls	r4, r8, r0, r4
 8000c86:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000c8a:	fb00 f707 	mul.w	r7, r0, r7
 8000c8e:	429f      	cmp	r7, r3
 8000c90:	d908      	bls.n	8000ca4 <__udivmoddi4+0x148>
 8000c92:	eb1c 0303 	adds.w	r3, ip, r3
 8000c96:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 8000c9a:	d202      	bcs.n	8000ca2 <__udivmoddi4+0x146>
 8000c9c:	429f      	cmp	r7, r3
 8000c9e:	f200 80b0 	bhi.w	8000e02 <__udivmoddi4+0x2a6>
 8000ca2:	4620      	mov	r0, r4
 8000ca4:	1bdb      	subs	r3, r3, r7
 8000ca6:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000caa:	e7a5      	b.n	8000bf8 <__udivmoddi4+0x9c>
 8000cac:	f1c1 0620 	rsb	r6, r1, #32
 8000cb0:	408b      	lsls	r3, r1
 8000cb2:	fa22 f706 	lsr.w	r7, r2, r6
 8000cb6:	431f      	orrs	r7, r3
 8000cb8:	fa20 fc06 	lsr.w	ip, r0, r6
 8000cbc:	fa04 f301 	lsl.w	r3, r4, r1
 8000cc0:	ea43 030c 	orr.w	r3, r3, ip
 8000cc4:	40f4      	lsrs	r4, r6
 8000cc6:	fa00 f801 	lsl.w	r8, r0, r1
 8000cca:	0c38      	lsrs	r0, r7, #16
 8000ccc:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000cd0:	fbb4 fef0 	udiv	lr, r4, r0
 8000cd4:	fa1f fc87 	uxth.w	ip, r7
 8000cd8:	fb00 441e 	mls	r4, r0, lr, r4
 8000cdc:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000ce0:	fb0e f90c 	mul.w	r9, lr, ip
 8000ce4:	45a1      	cmp	r9, r4
 8000ce6:	fa02 f201 	lsl.w	r2, r2, r1
 8000cea:	d90a      	bls.n	8000d02 <__udivmoddi4+0x1a6>
 8000cec:	193c      	adds	r4, r7, r4
 8000cee:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 8000cf2:	f080 8084 	bcs.w	8000dfe <__udivmoddi4+0x2a2>
 8000cf6:	45a1      	cmp	r9, r4
 8000cf8:	f240 8081 	bls.w	8000dfe <__udivmoddi4+0x2a2>
 8000cfc:	f1ae 0e02 	sub.w	lr, lr, #2
 8000d00:	443c      	add	r4, r7
 8000d02:	eba4 0409 	sub.w	r4, r4, r9
 8000d06:	fa1f f983 	uxth.w	r9, r3
 8000d0a:	fbb4 f3f0 	udiv	r3, r4, r0
 8000d0e:	fb00 4413 	mls	r4, r0, r3, r4
 8000d12:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000d16:	fb03 fc0c 	mul.w	ip, r3, ip
 8000d1a:	45a4      	cmp	ip, r4
 8000d1c:	d907      	bls.n	8000d2e <__udivmoddi4+0x1d2>
 8000d1e:	193c      	adds	r4, r7, r4
 8000d20:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 8000d24:	d267      	bcs.n	8000df6 <__udivmoddi4+0x29a>
 8000d26:	45a4      	cmp	ip, r4
 8000d28:	d965      	bls.n	8000df6 <__udivmoddi4+0x29a>
 8000d2a:	3b02      	subs	r3, #2
 8000d2c:	443c      	add	r4, r7
 8000d2e:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000d32:	fba0 9302 	umull	r9, r3, r0, r2
 8000d36:	eba4 040c 	sub.w	r4, r4, ip
 8000d3a:	429c      	cmp	r4, r3
 8000d3c:	46ce      	mov	lr, r9
 8000d3e:	469c      	mov	ip, r3
 8000d40:	d351      	bcc.n	8000de6 <__udivmoddi4+0x28a>
 8000d42:	d04e      	beq.n	8000de2 <__udivmoddi4+0x286>
 8000d44:	b155      	cbz	r5, 8000d5c <__udivmoddi4+0x200>
 8000d46:	ebb8 030e 	subs.w	r3, r8, lr
 8000d4a:	eb64 040c 	sbc.w	r4, r4, ip
 8000d4e:	fa04 f606 	lsl.w	r6, r4, r6
 8000d52:	40cb      	lsrs	r3, r1
 8000d54:	431e      	orrs	r6, r3
 8000d56:	40cc      	lsrs	r4, r1
 8000d58:	e9c5 6400 	strd	r6, r4, [r5]
 8000d5c:	2100      	movs	r1, #0
 8000d5e:	e750      	b.n	8000c02 <__udivmoddi4+0xa6>
 8000d60:	f1c2 0320 	rsb	r3, r2, #32
 8000d64:	fa20 f103 	lsr.w	r1, r0, r3
 8000d68:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d6c:	fa24 f303 	lsr.w	r3, r4, r3
 8000d70:	4094      	lsls	r4, r2
 8000d72:	430c      	orrs	r4, r1
 8000d74:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d78:	fa00 fe02 	lsl.w	lr, r0, r2
 8000d7c:	fa1f f78c 	uxth.w	r7, ip
 8000d80:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d84:	fb08 3110 	mls	r1, r8, r0, r3
 8000d88:	0c23      	lsrs	r3, r4, #16
 8000d8a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d8e:	fb00 f107 	mul.w	r1, r0, r7
 8000d92:	4299      	cmp	r1, r3
 8000d94:	d908      	bls.n	8000da8 <__udivmoddi4+0x24c>
 8000d96:	eb1c 0303 	adds.w	r3, ip, r3
 8000d9a:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 8000d9e:	d22c      	bcs.n	8000dfa <__udivmoddi4+0x29e>
 8000da0:	4299      	cmp	r1, r3
 8000da2:	d92a      	bls.n	8000dfa <__udivmoddi4+0x29e>
 8000da4:	3802      	subs	r0, #2
 8000da6:	4463      	add	r3, ip
 8000da8:	1a5b      	subs	r3, r3, r1
 8000daa:	b2a4      	uxth	r4, r4
 8000dac:	fbb3 f1f8 	udiv	r1, r3, r8
 8000db0:	fb08 3311 	mls	r3, r8, r1, r3
 8000db4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000db8:	fb01 f307 	mul.w	r3, r1, r7
 8000dbc:	42a3      	cmp	r3, r4
 8000dbe:	d908      	bls.n	8000dd2 <__udivmoddi4+0x276>
 8000dc0:	eb1c 0404 	adds.w	r4, ip, r4
 8000dc4:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 8000dc8:	d213      	bcs.n	8000df2 <__udivmoddi4+0x296>
 8000dca:	42a3      	cmp	r3, r4
 8000dcc:	d911      	bls.n	8000df2 <__udivmoddi4+0x296>
 8000dce:	3902      	subs	r1, #2
 8000dd0:	4464      	add	r4, ip
 8000dd2:	1ae4      	subs	r4, r4, r3
 8000dd4:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000dd8:	e739      	b.n	8000c4e <__udivmoddi4+0xf2>
 8000dda:	4604      	mov	r4, r0
 8000ddc:	e6f0      	b.n	8000bc0 <__udivmoddi4+0x64>
 8000dde:	4608      	mov	r0, r1
 8000de0:	e706      	b.n	8000bf0 <__udivmoddi4+0x94>
 8000de2:	45c8      	cmp	r8, r9
 8000de4:	d2ae      	bcs.n	8000d44 <__udivmoddi4+0x1e8>
 8000de6:	ebb9 0e02 	subs.w	lr, r9, r2
 8000dea:	eb63 0c07 	sbc.w	ip, r3, r7
 8000dee:	3801      	subs	r0, #1
 8000df0:	e7a8      	b.n	8000d44 <__udivmoddi4+0x1e8>
 8000df2:	4631      	mov	r1, r6
 8000df4:	e7ed      	b.n	8000dd2 <__udivmoddi4+0x276>
 8000df6:	4603      	mov	r3, r0
 8000df8:	e799      	b.n	8000d2e <__udivmoddi4+0x1d2>
 8000dfa:	4630      	mov	r0, r6
 8000dfc:	e7d4      	b.n	8000da8 <__udivmoddi4+0x24c>
 8000dfe:	46d6      	mov	lr, sl
 8000e00:	e77f      	b.n	8000d02 <__udivmoddi4+0x1a6>
 8000e02:	4463      	add	r3, ip
 8000e04:	3802      	subs	r0, #2
 8000e06:	e74d      	b.n	8000ca4 <__udivmoddi4+0x148>
 8000e08:	4606      	mov	r6, r0
 8000e0a:	4623      	mov	r3, r4
 8000e0c:	4608      	mov	r0, r1
 8000e0e:	e70f      	b.n	8000c30 <__udivmoddi4+0xd4>
 8000e10:	3e02      	subs	r6, #2
 8000e12:	4463      	add	r3, ip
 8000e14:	e730      	b.n	8000c78 <__udivmoddi4+0x11c>
 8000e16:	bf00      	nop

08000e18 <__aeabi_idiv0>:
 8000e18:	4770      	bx	lr
 8000e1a:	bf00      	nop

08000e1c <PWM_init>:
 *      Author: beamk
 */

#include "PWM.h"

void PWM_init(PWM* pwm, TIM_HandleTypeDef* htimx, uint16_t tim_chx){
 8000e1c:	b580      	push	{r7, lr}
 8000e1e:	b084      	sub	sp, #16
 8000e20:	af00      	add	r7, sp, #0
 8000e22:	60f8      	str	r0, [r7, #12]
 8000e24:	60b9      	str	r1, [r7, #8]
 8000e26:	4613      	mov	r3, r2
 8000e28:	80fb      	strh	r3, [r7, #6]
	pwm->CPU_FREQ = 170e6;
 8000e2a:	68fb      	ldr	r3, [r7, #12]
 8000e2c:	4a0b      	ldr	r2, [pc, #44]	@ (8000e5c <PWM_init+0x40>)
 8000e2e:	611a      	str	r2, [r3, #16]
	pwm->htimx = htimx;
 8000e30:	68fb      	ldr	r3, [r7, #12]
 8000e32:	68ba      	ldr	r2, [r7, #8]
 8000e34:	601a      	str	r2, [r3, #0]
	pwm->tim_chx = tim_chx;
 8000e36:	68fb      	ldr	r3, [r7, #12]
 8000e38:	88fa      	ldrh	r2, [r7, #6]
 8000e3a:	809a      	strh	r2, [r3, #4]
	pwm->OC = 0;
 8000e3c:	68fb      	ldr	r3, [r7, #12]
 8000e3e:	2200      	movs	r2, #0
 8000e40:	615a      	str	r2, [r3, #20]
	HAL_TIM_Base_Start(htimx);
 8000e42:	68b8      	ldr	r0, [r7, #8]
 8000e44:	f003 fad6 	bl	80043f4 <HAL_TIM_Base_Start>
	HAL_TIM_PWM_Start(htimx, tim_chx);
 8000e48:	88fb      	ldrh	r3, [r7, #6]
 8000e4a:	4619      	mov	r1, r3
 8000e4c:	68b8      	ldr	r0, [r7, #8]
 8000e4e:	f003 fbe7 	bl	8004620 <HAL_TIM_PWM_Start>
}
 8000e52:	bf00      	nop
 8000e54:	3710      	adds	r7, #16
 8000e56:	46bd      	mov	sp, r7
 8000e58:	bd80      	pop	{r7, pc}
 8000e5a:	bf00      	nop
 8000e5c:	0a21fe80 	.word	0x0a21fe80

08000e60 <PWM_write_duty>:

void PWM_write_duty(PWM* pwm, float freq, float percent_duty){
 8000e60:	b5b0      	push	{r4, r5, r7, lr}
 8000e62:	b084      	sub	sp, #16
 8000e64:	af00      	add	r7, sp, #0
 8000e66:	60f8      	str	r0, [r7, #12]
 8000e68:	ed87 0a02 	vstr	s0, [r7, #8]
 8000e6c:	edc7 0a01 	vstr	s1, [r7, #4]
    if (freq == 0) {
 8000e70:	edd7 7a02 	vldr	s15, [r7, #8]
 8000e74:	eef5 7a40 	vcmp.f32	s15, #0.0
 8000e78:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000e7c:	d123      	bne.n	8000ec6 <PWM_write_duty+0x66>
        __HAL_TIM_SET_COMPARE(pwm->htimx, pwm->tim_chx, 0);
 8000e7e:	68fb      	ldr	r3, [r7, #12]
 8000e80:	889b      	ldrh	r3, [r3, #4]
 8000e82:	2b00      	cmp	r3, #0
 8000e84:	d105      	bne.n	8000e92 <PWM_write_duty+0x32>
 8000e86:	68fb      	ldr	r3, [r7, #12]
 8000e88:	681b      	ldr	r3, [r3, #0]
 8000e8a:	681b      	ldr	r3, [r3, #0]
 8000e8c:	2200      	movs	r2, #0
 8000e8e:	635a      	str	r2, [r3, #52]	@ 0x34
    	pwm->OC = (uint16_t) (pwm->overflow * fabs(percent_duty) / 100.0);
        __HAL_TIM_SET_PRESCALER(pwm->htimx, pwm->prescaler);
        __HAL_TIM_SET_AUTORELOAD(pwm->htimx, pwm->overflow);
        __HAL_TIM_SET_COMPARE(pwm->htimx, pwm->tim_chx, pwm->OC);
    }
}
 8000e90:	e0b7      	b.n	8001002 <PWM_write_duty+0x1a2>
        __HAL_TIM_SET_COMPARE(pwm->htimx, pwm->tim_chx, 0);
 8000e92:	68fb      	ldr	r3, [r7, #12]
 8000e94:	889b      	ldrh	r3, [r3, #4]
 8000e96:	2b04      	cmp	r3, #4
 8000e98:	d105      	bne.n	8000ea6 <PWM_write_duty+0x46>
 8000e9a:	68fb      	ldr	r3, [r7, #12]
 8000e9c:	681b      	ldr	r3, [r3, #0]
 8000e9e:	681a      	ldr	r2, [r3, #0]
 8000ea0:	2300      	movs	r3, #0
 8000ea2:	6393      	str	r3, [r2, #56]	@ 0x38
 8000ea4:	e0ad      	b.n	8001002 <PWM_write_duty+0x1a2>
 8000ea6:	68fb      	ldr	r3, [r7, #12]
 8000ea8:	889b      	ldrh	r3, [r3, #4]
 8000eaa:	2b08      	cmp	r3, #8
 8000eac:	d105      	bne.n	8000eba <PWM_write_duty+0x5a>
 8000eae:	68fb      	ldr	r3, [r7, #12]
 8000eb0:	681b      	ldr	r3, [r3, #0]
 8000eb2:	681a      	ldr	r2, [r3, #0]
 8000eb4:	2300      	movs	r3, #0
 8000eb6:	63d3      	str	r3, [r2, #60]	@ 0x3c
 8000eb8:	e0a3      	b.n	8001002 <PWM_write_duty+0x1a2>
 8000eba:	68fb      	ldr	r3, [r7, #12]
 8000ebc:	681b      	ldr	r3, [r3, #0]
 8000ebe:	681a      	ldr	r2, [r3, #0]
 8000ec0:	2300      	movs	r3, #0
 8000ec2:	6413      	str	r3, [r2, #64]	@ 0x40
}
 8000ec4:	e09d      	b.n	8001002 <PWM_write_duty+0x1a2>
    	pwm->period_cyc = (uint32_t) (pwm->CPU_FREQ / freq);
 8000ec6:	68fb      	ldr	r3, [r7, #12]
 8000ec8:	691b      	ldr	r3, [r3, #16]
 8000eca:	ee07 3a90 	vmov	s15, r3
 8000ece:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8000ed2:	ed97 7a02 	vldr	s14, [r7, #8]
 8000ed6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000eda:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000ede:	ee17 2a90 	vmov	r2, s15
 8000ee2:	68fb      	ldr	r3, [r7, #12]
 8000ee4:	609a      	str	r2, [r3, #8]
    	pwm->prescaler = (uint16_t) ((pwm->period_cyc + 65535 - 1) / 65535) - 1; // Subtracting 1 since prescaler is zero-based
 8000ee6:	68fb      	ldr	r3, [r7, #12]
 8000ee8:	689b      	ldr	r3, [r3, #8]
 8000eea:	f503 437f 	add.w	r3, r3, #65280	@ 0xff00
 8000eee:	33fe      	adds	r3, #254	@ 0xfe
 8000ef0:	4a46      	ldr	r2, [pc, #280]	@ (800100c <PWM_write_duty+0x1ac>)
 8000ef2:	fba2 2303 	umull	r2, r3, r2, r3
 8000ef6:	0bdb      	lsrs	r3, r3, #15
 8000ef8:	b29b      	uxth	r3, r3
 8000efa:	3b01      	subs	r3, #1
 8000efc:	b29a      	uxth	r2, r3
 8000efe:	68fb      	ldr	r3, [r7, #12]
 8000f00:	819a      	strh	r2, [r3, #12]
    	pwm->overflow = (uint16_t) ((pwm->CPU_FREQ / (float)(pwm->prescaler + 1) / freq) - 1);
 8000f02:	68fb      	ldr	r3, [r7, #12]
 8000f04:	691b      	ldr	r3, [r3, #16]
 8000f06:	ee07 3a90 	vmov	s15, r3
 8000f0a:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8000f0e:	68fb      	ldr	r3, [r7, #12]
 8000f10:	899b      	ldrh	r3, [r3, #12]
 8000f12:	3301      	adds	r3, #1
 8000f14:	ee07 3a90 	vmov	s15, r3
 8000f18:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000f1c:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8000f20:	ed97 7a02 	vldr	s14, [r7, #8]
 8000f24:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000f28:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8000f2c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8000f30:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000f34:	ee17 3a90 	vmov	r3, s15
 8000f38:	b29a      	uxth	r2, r3
 8000f3a:	68fb      	ldr	r3, [r7, #12]
 8000f3c:	81da      	strh	r2, [r3, #14]
    	pwm->OC = (uint16_t) (pwm->overflow * fabs(percent_duty) / 100.0);
 8000f3e:	68fb      	ldr	r3, [r7, #12]
 8000f40:	89db      	ldrh	r3, [r3, #14]
 8000f42:	4618      	mov	r0, r3
 8000f44:	f7ff fb06 	bl	8000554 <__aeabi_i2d>
 8000f48:	4604      	mov	r4, r0
 8000f4a:	460d      	mov	r5, r1
 8000f4c:	edd7 7a01 	vldr	s15, [r7, #4]
 8000f50:	eef0 7ae7 	vabs.f32	s15, s15
 8000f54:	ee17 0a90 	vmov	r0, s15
 8000f58:	f7ff fb0e 	bl	8000578 <__aeabi_f2d>
 8000f5c:	4602      	mov	r2, r0
 8000f5e:	460b      	mov	r3, r1
 8000f60:	4620      	mov	r0, r4
 8000f62:	4629      	mov	r1, r5
 8000f64:	f7ff fb60 	bl	8000628 <__aeabi_dmul>
 8000f68:	4602      	mov	r2, r0
 8000f6a:	460b      	mov	r3, r1
 8000f6c:	4610      	mov	r0, r2
 8000f6e:	4619      	mov	r1, r3
 8000f70:	f04f 0200 	mov.w	r2, #0
 8000f74:	4b26      	ldr	r3, [pc, #152]	@ (8001010 <PWM_write_duty+0x1b0>)
 8000f76:	f7ff fc81 	bl	800087c <__aeabi_ddiv>
 8000f7a:	4602      	mov	r2, r0
 8000f7c:	460b      	mov	r3, r1
 8000f7e:	4610      	mov	r0, r2
 8000f80:	4619      	mov	r1, r3
 8000f82:	f7ff fd63 	bl	8000a4c <__aeabi_d2uiz>
 8000f86:	4603      	mov	r3, r0
 8000f88:	b29b      	uxth	r3, r3
 8000f8a:	461a      	mov	r2, r3
 8000f8c:	68fb      	ldr	r3, [r7, #12]
 8000f8e:	615a      	str	r2, [r3, #20]
        __HAL_TIM_SET_PRESCALER(pwm->htimx, pwm->prescaler);
 8000f90:	68fb      	ldr	r3, [r7, #12]
 8000f92:	899a      	ldrh	r2, [r3, #12]
 8000f94:	68fb      	ldr	r3, [r7, #12]
 8000f96:	681b      	ldr	r3, [r3, #0]
 8000f98:	681b      	ldr	r3, [r3, #0]
 8000f9a:	629a      	str	r2, [r3, #40]	@ 0x28
        __HAL_TIM_SET_AUTORELOAD(pwm->htimx, pwm->overflow);
 8000f9c:	68fb      	ldr	r3, [r7, #12]
 8000f9e:	89da      	ldrh	r2, [r3, #14]
 8000fa0:	68fb      	ldr	r3, [r7, #12]
 8000fa2:	681b      	ldr	r3, [r3, #0]
 8000fa4:	681b      	ldr	r3, [r3, #0]
 8000fa6:	62da      	str	r2, [r3, #44]	@ 0x2c
 8000fa8:	68fb      	ldr	r3, [r7, #12]
 8000faa:	89da      	ldrh	r2, [r3, #14]
 8000fac:	68fb      	ldr	r3, [r7, #12]
 8000fae:	681b      	ldr	r3, [r3, #0]
 8000fb0:	60da      	str	r2, [r3, #12]
        __HAL_TIM_SET_COMPARE(pwm->htimx, pwm->tim_chx, pwm->OC);
 8000fb2:	68fb      	ldr	r3, [r7, #12]
 8000fb4:	889b      	ldrh	r3, [r3, #4]
 8000fb6:	2b00      	cmp	r3, #0
 8000fb8:	d106      	bne.n	8000fc8 <PWM_write_duty+0x168>
 8000fba:	68fb      	ldr	r3, [r7, #12]
 8000fbc:	681b      	ldr	r3, [r3, #0]
 8000fbe:	681b      	ldr	r3, [r3, #0]
 8000fc0:	68fa      	ldr	r2, [r7, #12]
 8000fc2:	6952      	ldr	r2, [r2, #20]
 8000fc4:	635a      	str	r2, [r3, #52]	@ 0x34
}
 8000fc6:	e01c      	b.n	8001002 <PWM_write_duty+0x1a2>
        __HAL_TIM_SET_COMPARE(pwm->htimx, pwm->tim_chx, pwm->OC);
 8000fc8:	68fb      	ldr	r3, [r7, #12]
 8000fca:	889b      	ldrh	r3, [r3, #4]
 8000fcc:	2b04      	cmp	r3, #4
 8000fce:	d106      	bne.n	8000fde <PWM_write_duty+0x17e>
 8000fd0:	68fb      	ldr	r3, [r7, #12]
 8000fd2:	681b      	ldr	r3, [r3, #0]
 8000fd4:	681a      	ldr	r2, [r3, #0]
 8000fd6:	68fb      	ldr	r3, [r7, #12]
 8000fd8:	695b      	ldr	r3, [r3, #20]
 8000fda:	6393      	str	r3, [r2, #56]	@ 0x38
}
 8000fdc:	e011      	b.n	8001002 <PWM_write_duty+0x1a2>
        __HAL_TIM_SET_COMPARE(pwm->htimx, pwm->tim_chx, pwm->OC);
 8000fde:	68fb      	ldr	r3, [r7, #12]
 8000fe0:	889b      	ldrh	r3, [r3, #4]
 8000fe2:	2b08      	cmp	r3, #8
 8000fe4:	d106      	bne.n	8000ff4 <PWM_write_duty+0x194>
 8000fe6:	68fb      	ldr	r3, [r7, #12]
 8000fe8:	681b      	ldr	r3, [r3, #0]
 8000fea:	681a      	ldr	r2, [r3, #0]
 8000fec:	68fb      	ldr	r3, [r7, #12]
 8000fee:	695b      	ldr	r3, [r3, #20]
 8000ff0:	63d3      	str	r3, [r2, #60]	@ 0x3c
}
 8000ff2:	e006      	b.n	8001002 <PWM_write_duty+0x1a2>
        __HAL_TIM_SET_COMPARE(pwm->htimx, pwm->tim_chx, pwm->OC);
 8000ff4:	68fb      	ldr	r3, [r7, #12]
 8000ff6:	681b      	ldr	r3, [r3, #0]
 8000ff8:	681a      	ldr	r2, [r3, #0]
 8000ffa:	68fb      	ldr	r3, [r7, #12]
 8000ffc:	695b      	ldr	r3, [r3, #20]
 8000ffe:	6413      	str	r3, [r2, #64]	@ 0x40
}
 8001000:	e7ff      	b.n	8001002 <PWM_write_duty+0x1a2>
 8001002:	bf00      	nop
 8001004:	3710      	adds	r7, #16
 8001006:	46bd      	mov	sp, r7
 8001008:	bdb0      	pop	{r4, r5, r7, pc}
 800100a:	bf00      	nop
 800100c:	80008001 	.word	0x80008001
 8001010:	40590000 	.word	0x40590000

08001014 <pvPortMallocMicroROS>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMallocMicroROS( size_t xWantedSize )
{
 8001014:	b580      	push	{r7, lr}
 8001016:	b08a      	sub	sp, #40	@ 0x28
 8001018:	af00      	add	r7, sp, #0
 800101a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800101c:	2300      	movs	r3, #0
 800101e:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8001020:	f006 fd6e 	bl	8007b00 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8001024:	4b5a      	ldr	r3, [pc, #360]	@ (8001190 <pvPortMallocMicroROS+0x17c>)
 8001026:	681b      	ldr	r3, [r3, #0]
 8001028:	2b00      	cmp	r3, #0
 800102a:	d101      	bne.n	8001030 <pvPortMallocMicroROS+0x1c>
		{
			prvHeapInit();
 800102c:	f000 f986 	bl	800133c <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8001030:	4b58      	ldr	r3, [pc, #352]	@ (8001194 <pvPortMallocMicroROS+0x180>)
 8001032:	681a      	ldr	r2, [r3, #0]
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	4013      	ands	r3, r2
 8001038:	2b00      	cmp	r3, #0
 800103a:	f040 8090 	bne.w	800115e <pvPortMallocMicroROS+0x14a>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	2b00      	cmp	r3, #0
 8001042:	d01e      	beq.n	8001082 <pvPortMallocMicroROS+0x6e>
			{
				xWantedSize += xHeapStructSize;
 8001044:	2208      	movs	r2, #8
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	4413      	add	r3, r2
 800104a:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	f003 0307 	and.w	r3, r3, #7
 8001052:	2b00      	cmp	r3, #0
 8001054:	d015      	beq.n	8001082 <pvPortMallocMicroROS+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	f023 0307 	bic.w	r3, r3, #7
 800105c:	3308      	adds	r3, #8
 800105e:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	f003 0307 	and.w	r3, r3, #7
 8001066:	2b00      	cmp	r3, #0
 8001068:	d00b      	beq.n	8001082 <pvPortMallocMicroROS+0x6e>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800106a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800106e:	f383 8811 	msr	BASEPRI, r3
 8001072:	f3bf 8f6f 	isb	sy
 8001076:	f3bf 8f4f 	dsb	sy
 800107a:	617b      	str	r3, [r7, #20]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800107c:	bf00      	nop
 800107e:	bf00      	nop
 8001080:	e7fd      	b.n	800107e <pvPortMallocMicroROS+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	2b00      	cmp	r3, #0
 8001086:	d06a      	beq.n	800115e <pvPortMallocMicroROS+0x14a>
 8001088:	4b43      	ldr	r3, [pc, #268]	@ (8001198 <pvPortMallocMicroROS+0x184>)
 800108a:	681b      	ldr	r3, [r3, #0]
 800108c:	687a      	ldr	r2, [r7, #4]
 800108e:	429a      	cmp	r2, r3
 8001090:	d865      	bhi.n	800115e <pvPortMallocMicroROS+0x14a>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8001092:	4b42      	ldr	r3, [pc, #264]	@ (800119c <pvPortMallocMicroROS+0x188>)
 8001094:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8001096:	4b41      	ldr	r3, [pc, #260]	@ (800119c <pvPortMallocMicroROS+0x188>)
 8001098:	681b      	ldr	r3, [r3, #0]
 800109a:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800109c:	e004      	b.n	80010a8 <pvPortMallocMicroROS+0x94>
				{
					pxPreviousBlock = pxBlock;
 800109e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80010a0:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80010a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80010a4:	681b      	ldr	r3, [r3, #0]
 80010a6:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80010a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80010aa:	685b      	ldr	r3, [r3, #4]
 80010ac:	687a      	ldr	r2, [r7, #4]
 80010ae:	429a      	cmp	r2, r3
 80010b0:	d903      	bls.n	80010ba <pvPortMallocMicroROS+0xa6>
 80010b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80010b4:	681b      	ldr	r3, [r3, #0]
 80010b6:	2b00      	cmp	r3, #0
 80010b8:	d1f1      	bne.n	800109e <pvPortMallocMicroROS+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80010ba:	4b35      	ldr	r3, [pc, #212]	@ (8001190 <pvPortMallocMicroROS+0x17c>)
 80010bc:	681b      	ldr	r3, [r3, #0]
 80010be:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80010c0:	429a      	cmp	r2, r3
 80010c2:	d04c      	beq.n	800115e <pvPortMallocMicroROS+0x14a>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80010c4:	6a3b      	ldr	r3, [r7, #32]
 80010c6:	681b      	ldr	r3, [r3, #0]
 80010c8:	2208      	movs	r2, #8
 80010ca:	4413      	add	r3, r2
 80010cc:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80010ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80010d0:	681a      	ldr	r2, [r3, #0]
 80010d2:	6a3b      	ldr	r3, [r7, #32]
 80010d4:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80010d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80010d8:	685a      	ldr	r2, [r3, #4]
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	1ad2      	subs	r2, r2, r3
 80010de:	2308      	movs	r3, #8
 80010e0:	005b      	lsls	r3, r3, #1
 80010e2:	429a      	cmp	r2, r3
 80010e4:	d920      	bls.n	8001128 <pvPortMallocMicroROS+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80010e6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	4413      	add	r3, r2
 80010ec:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80010ee:	69bb      	ldr	r3, [r7, #24]
 80010f0:	f003 0307 	and.w	r3, r3, #7
 80010f4:	2b00      	cmp	r3, #0
 80010f6:	d00b      	beq.n	8001110 <pvPortMallocMicroROS+0xfc>
	__asm volatile
 80010f8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80010fc:	f383 8811 	msr	BASEPRI, r3
 8001100:	f3bf 8f6f 	isb	sy
 8001104:	f3bf 8f4f 	dsb	sy
 8001108:	613b      	str	r3, [r7, #16]
}
 800110a:	bf00      	nop
 800110c:	bf00      	nop
 800110e:	e7fd      	b.n	800110c <pvPortMallocMicroROS+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8001110:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001112:	685a      	ldr	r2, [r3, #4]
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	1ad2      	subs	r2, r2, r3
 8001118:	69bb      	ldr	r3, [r7, #24]
 800111a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800111c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800111e:	687a      	ldr	r2, [r7, #4]
 8001120:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8001122:	69b8      	ldr	r0, [r7, #24]
 8001124:	f000 f96c 	bl	8001400 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8001128:	4b1b      	ldr	r3, [pc, #108]	@ (8001198 <pvPortMallocMicroROS+0x184>)
 800112a:	681a      	ldr	r2, [r3, #0]
 800112c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800112e:	685b      	ldr	r3, [r3, #4]
 8001130:	1ad3      	subs	r3, r2, r3
 8001132:	4a19      	ldr	r2, [pc, #100]	@ (8001198 <pvPortMallocMicroROS+0x184>)
 8001134:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8001136:	4b18      	ldr	r3, [pc, #96]	@ (8001198 <pvPortMallocMicroROS+0x184>)
 8001138:	681a      	ldr	r2, [r3, #0]
 800113a:	4b19      	ldr	r3, [pc, #100]	@ (80011a0 <pvPortMallocMicroROS+0x18c>)
 800113c:	681b      	ldr	r3, [r3, #0]
 800113e:	429a      	cmp	r2, r3
 8001140:	d203      	bcs.n	800114a <pvPortMallocMicroROS+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8001142:	4b15      	ldr	r3, [pc, #84]	@ (8001198 <pvPortMallocMicroROS+0x184>)
 8001144:	681b      	ldr	r3, [r3, #0]
 8001146:	4a16      	ldr	r2, [pc, #88]	@ (80011a0 <pvPortMallocMicroROS+0x18c>)
 8001148:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800114a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800114c:	685a      	ldr	r2, [r3, #4]
 800114e:	4b11      	ldr	r3, [pc, #68]	@ (8001194 <pvPortMallocMicroROS+0x180>)
 8001150:	681b      	ldr	r3, [r3, #0]
 8001152:	431a      	orrs	r2, r3
 8001154:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001156:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8001158:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800115a:	2200      	movs	r2, #0
 800115c:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800115e:	f006 fcdd 	bl	8007b1c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8001162:	69fb      	ldr	r3, [r7, #28]
 8001164:	f003 0307 	and.w	r3, r3, #7
 8001168:	2b00      	cmp	r3, #0
 800116a:	d00b      	beq.n	8001184 <pvPortMallocMicroROS+0x170>
	__asm volatile
 800116c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001170:	f383 8811 	msr	BASEPRI, r3
 8001174:	f3bf 8f6f 	isb	sy
 8001178:	f3bf 8f4f 	dsb	sy
 800117c:	60fb      	str	r3, [r7, #12]
}
 800117e:	bf00      	nop
 8001180:	bf00      	nop
 8001182:	e7fd      	b.n	8001180 <pvPortMallocMicroROS+0x16c>
	return pvReturn;
 8001184:	69fb      	ldr	r3, [r7, #28]
}
 8001186:	4618      	mov	r0, r3
 8001188:	3728      	adds	r7, #40	@ 0x28
 800118a:	46bd      	mov	sp, r7
 800118c:	bd80      	pop	{r7, pc}
 800118e:	bf00      	nop
 8001190:	20003dbc 	.word	0x20003dbc
 8001194:	20003dc8 	.word	0x20003dc8
 8001198:	20003dc0 	.word	0x20003dc0
 800119c:	20003db4 	.word	0x20003db4
 80011a0:	20003dc4 	.word	0x20003dc4

080011a4 <vPortFreeMicroROS>:
/*-----------------------------------------------------------*/

void vPortFreeMicroROS( void *pv )
{
 80011a4:	b580      	push	{r7, lr}
 80011a6:	b086      	sub	sp, #24
 80011a8:	af00      	add	r7, sp, #0
 80011aa:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	2b00      	cmp	r3, #0
 80011b4:	d04a      	beq.n	800124c <vPortFreeMicroROS+0xa8>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80011b6:	2308      	movs	r3, #8
 80011b8:	425b      	negs	r3, r3
 80011ba:	697a      	ldr	r2, [r7, #20]
 80011bc:	4413      	add	r3, r2
 80011be:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80011c0:	697b      	ldr	r3, [r7, #20]
 80011c2:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80011c4:	693b      	ldr	r3, [r7, #16]
 80011c6:	685a      	ldr	r2, [r3, #4]
 80011c8:	4b22      	ldr	r3, [pc, #136]	@ (8001254 <vPortFreeMicroROS+0xb0>)
 80011ca:	681b      	ldr	r3, [r3, #0]
 80011cc:	4013      	ands	r3, r2
 80011ce:	2b00      	cmp	r3, #0
 80011d0:	d10b      	bne.n	80011ea <vPortFreeMicroROS+0x46>
	__asm volatile
 80011d2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80011d6:	f383 8811 	msr	BASEPRI, r3
 80011da:	f3bf 8f6f 	isb	sy
 80011de:	f3bf 8f4f 	dsb	sy
 80011e2:	60fb      	str	r3, [r7, #12]
}
 80011e4:	bf00      	nop
 80011e6:	bf00      	nop
 80011e8:	e7fd      	b.n	80011e6 <vPortFreeMicroROS+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80011ea:	693b      	ldr	r3, [r7, #16]
 80011ec:	681b      	ldr	r3, [r3, #0]
 80011ee:	2b00      	cmp	r3, #0
 80011f0:	d00b      	beq.n	800120a <vPortFreeMicroROS+0x66>
	__asm volatile
 80011f2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80011f6:	f383 8811 	msr	BASEPRI, r3
 80011fa:	f3bf 8f6f 	isb	sy
 80011fe:	f3bf 8f4f 	dsb	sy
 8001202:	60bb      	str	r3, [r7, #8]
}
 8001204:	bf00      	nop
 8001206:	bf00      	nop
 8001208:	e7fd      	b.n	8001206 <vPortFreeMicroROS+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800120a:	693b      	ldr	r3, [r7, #16]
 800120c:	685a      	ldr	r2, [r3, #4]
 800120e:	4b11      	ldr	r3, [pc, #68]	@ (8001254 <vPortFreeMicroROS+0xb0>)
 8001210:	681b      	ldr	r3, [r3, #0]
 8001212:	4013      	ands	r3, r2
 8001214:	2b00      	cmp	r3, #0
 8001216:	d019      	beq.n	800124c <vPortFreeMicroROS+0xa8>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8001218:	693b      	ldr	r3, [r7, #16]
 800121a:	681b      	ldr	r3, [r3, #0]
 800121c:	2b00      	cmp	r3, #0
 800121e:	d115      	bne.n	800124c <vPortFreeMicroROS+0xa8>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8001220:	693b      	ldr	r3, [r7, #16]
 8001222:	685a      	ldr	r2, [r3, #4]
 8001224:	4b0b      	ldr	r3, [pc, #44]	@ (8001254 <vPortFreeMicroROS+0xb0>)
 8001226:	681b      	ldr	r3, [r3, #0]
 8001228:	43db      	mvns	r3, r3
 800122a:	401a      	ands	r2, r3
 800122c:	693b      	ldr	r3, [r7, #16]
 800122e:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8001230:	f006 fc66 	bl	8007b00 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8001234:	693b      	ldr	r3, [r7, #16]
 8001236:	685a      	ldr	r2, [r3, #4]
 8001238:	4b07      	ldr	r3, [pc, #28]	@ (8001258 <vPortFreeMicroROS+0xb4>)
 800123a:	681b      	ldr	r3, [r3, #0]
 800123c:	4413      	add	r3, r2
 800123e:	4a06      	ldr	r2, [pc, #24]	@ (8001258 <vPortFreeMicroROS+0xb4>)
 8001240:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8001242:	6938      	ldr	r0, [r7, #16]
 8001244:	f000 f8dc 	bl	8001400 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8001248:	f006 fc68 	bl	8007b1c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800124c:	bf00      	nop
 800124e:	3718      	adds	r7, #24
 8001250:	46bd      	mov	sp, r7
 8001252:	bd80      	pop	{r7, pc}
 8001254:	20003dc8 	.word	0x20003dc8
 8001258:	20003dc0 	.word	0x20003dc0

0800125c <getBlockSize>:
/*-----------------------------------------------------------*/

/*-----------------------------------------------------------*/
size_t getBlockSize( void *pv )
{
 800125c:	b480      	push	{r7}
 800125e:	b087      	sub	sp, #28
 8001260:	af00      	add	r7, sp, #0
 8001262:	6078      	str	r0, [r7, #4]

	uint8_t *puc = ( uint8_t * ) pv;
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	617b      	str	r3, [r7, #20]
	BlockLink_t *pxLink;

	puc -= xHeapStructSize;
 8001268:	2308      	movs	r3, #8
 800126a:	425b      	negs	r3, r3
 800126c:	697a      	ldr	r2, [r7, #20]
 800126e:	4413      	add	r3, r2
 8001270:	617b      	str	r3, [r7, #20]
	pxLink = ( void * ) puc;
 8001272:	697b      	ldr	r3, [r7, #20]
 8001274:	613b      	str	r3, [r7, #16]

	size_t count = pxLink->xBlockSize & ~xBlockAllocatedBit;
 8001276:	693b      	ldr	r3, [r7, #16]
 8001278:	685a      	ldr	r2, [r3, #4]
 800127a:	4b06      	ldr	r3, [pc, #24]	@ (8001294 <getBlockSize+0x38>)
 800127c:	681b      	ldr	r3, [r3, #0]
 800127e:	43db      	mvns	r3, r3
 8001280:	4013      	ands	r3, r2
 8001282:	60fb      	str	r3, [r7, #12]

	return count;
 8001284:	68fb      	ldr	r3, [r7, #12]
}
 8001286:	4618      	mov	r0, r3
 8001288:	371c      	adds	r7, #28
 800128a:	46bd      	mov	sp, r7
 800128c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001290:	4770      	bx	lr
 8001292:	bf00      	nop
 8001294:	20003dc8 	.word	0x20003dc8

08001298 <pvPortReallocMicroROS>:
/*-----------------------------------------------------------*/

void *pvPortReallocMicroROS( void *pv, size_t xWantedSize )
{
 8001298:	b580      	push	{r7, lr}
 800129a:	b084      	sub	sp, #16
 800129c:	af00      	add	r7, sp, #0
 800129e:	6078      	str	r0, [r7, #4]
 80012a0:	6039      	str	r1, [r7, #0]
	vTaskSuspendAll();
 80012a2:	f006 fc2d 	bl	8007b00 <vTaskSuspendAll>

	void * newmem = pvPortMallocMicroROS(xWantedSize);
 80012a6:	6838      	ldr	r0, [r7, #0]
 80012a8:	f7ff feb4 	bl	8001014 <pvPortMallocMicroROS>
 80012ac:	60b8      	str	r0, [r7, #8]
	if (newmem != NULL && pv != NULL)
 80012ae:	68bb      	ldr	r3, [r7, #8]
 80012b0:	2b00      	cmp	r3, #0
 80012b2:	d017      	beq.n	80012e4 <pvPortReallocMicroROS+0x4c>
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	2b00      	cmp	r3, #0
 80012b8:	d014      	beq.n	80012e4 <pvPortReallocMicroROS+0x4c>
	{
		size_t count = getBlockSize(pv) - xHeapStructSize;
 80012ba:	6878      	ldr	r0, [r7, #4]
 80012bc:	f7ff ffce 	bl	800125c <getBlockSize>
 80012c0:	4603      	mov	r3, r0
 80012c2:	2208      	movs	r2, #8
 80012c4:	1a9b      	subs	r3, r3, r2
 80012c6:	60fb      	str	r3, [r7, #12]
		if (xWantedSize < count)
 80012c8:	683a      	ldr	r2, [r7, #0]
 80012ca:	68fb      	ldr	r3, [r7, #12]
 80012cc:	429a      	cmp	r2, r3
 80012ce:	d201      	bcs.n	80012d4 <pvPortReallocMicroROS+0x3c>
		{
			count = xWantedSize;
 80012d0:	683b      	ldr	r3, [r7, #0]
 80012d2:	60fb      	str	r3, [r7, #12]
		}
		memcpy(newmem, pv, count);
 80012d4:	68fa      	ldr	r2, [r7, #12]
 80012d6:	6879      	ldr	r1, [r7, #4]
 80012d8:	68b8      	ldr	r0, [r7, #8]
 80012da:	f014 fd80 	bl	8015dde <memcpy>

		vPortFreeMicroROS(pv);
 80012de:	6878      	ldr	r0, [r7, #4]
 80012e0:	f7ff ff60 	bl	80011a4 <vPortFreeMicroROS>
	}

	( void ) xTaskResumeAll();
 80012e4:	f006 fc1a 	bl	8007b1c <xTaskResumeAll>

	return newmem;
 80012e8:	68bb      	ldr	r3, [r7, #8]
}
 80012ea:	4618      	mov	r0, r3
 80012ec:	3710      	adds	r7, #16
 80012ee:	46bd      	mov	sp, r7
 80012f0:	bd80      	pop	{r7, pc}

080012f2 <pvPortCallocMicroROS>:
/*-----------------------------------------------------------*/

void *pvPortCallocMicroROS( size_t num, size_t xWantedSize )
{
 80012f2:	b580      	push	{r7, lr}
 80012f4:	b086      	sub	sp, #24
 80012f6:	af00      	add	r7, sp, #0
 80012f8:	6078      	str	r0, [r7, #4]
 80012fa:	6039      	str	r1, [r7, #0]
	vTaskSuspendAll();
 80012fc:	f006 fc00 	bl	8007b00 <vTaskSuspendAll>
	size_t count = xWantedSize*num;
 8001300:	683b      	ldr	r3, [r7, #0]
 8001302:	687a      	ldr	r2, [r7, #4]
 8001304:	fb02 f303 	mul.w	r3, r2, r3
 8001308:	617b      	str	r3, [r7, #20]

	void * mem = pvPortMallocMicroROS(count);
 800130a:	6978      	ldr	r0, [r7, #20]
 800130c:	f7ff fe82 	bl	8001014 <pvPortMallocMicroROS>
 8001310:	60f8      	str	r0, [r7, #12]
  	char *in_dest = (char*)mem;
 8001312:	68fb      	ldr	r3, [r7, #12]
 8001314:	613b      	str	r3, [r7, #16]

  	while(count--)
 8001316:	e004      	b.n	8001322 <pvPortCallocMicroROS+0x30>
    	*in_dest++ = 0;
 8001318:	693b      	ldr	r3, [r7, #16]
 800131a:	1c5a      	adds	r2, r3, #1
 800131c:	613a      	str	r2, [r7, #16]
 800131e:	2200      	movs	r2, #0
 8001320:	701a      	strb	r2, [r3, #0]
  	while(count--)
 8001322:	697b      	ldr	r3, [r7, #20]
 8001324:	1e5a      	subs	r2, r3, #1
 8001326:	617a      	str	r2, [r7, #20]
 8001328:	2b00      	cmp	r3, #0
 800132a:	d1f5      	bne.n	8001318 <pvPortCallocMicroROS+0x26>

	( void ) xTaskResumeAll();
 800132c:	f006 fbf6 	bl	8007b1c <xTaskResumeAll>
  	return mem;
 8001330:	68fb      	ldr	r3, [r7, #12]
}
 8001332:	4618      	mov	r0, r3
 8001334:	3718      	adds	r7, #24
 8001336:	46bd      	mov	sp, r7
 8001338:	bd80      	pop	{r7, pc}
	...

0800133c <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800133c:	b480      	push	{r7}
 800133e:	b085      	sub	sp, #20
 8001340:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8001342:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 8001346:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8001348:	4b27      	ldr	r3, [pc, #156]	@ (80013e8 <prvHeapInit+0xac>)
 800134a:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800134c:	68fb      	ldr	r3, [r7, #12]
 800134e:	f003 0307 	and.w	r3, r3, #7
 8001352:	2b00      	cmp	r3, #0
 8001354:	d00c      	beq.n	8001370 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8001356:	68fb      	ldr	r3, [r7, #12]
 8001358:	3307      	adds	r3, #7
 800135a:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800135c:	68fb      	ldr	r3, [r7, #12]
 800135e:	f023 0307 	bic.w	r3, r3, #7
 8001362:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8001364:	68ba      	ldr	r2, [r7, #8]
 8001366:	68fb      	ldr	r3, [r7, #12]
 8001368:	1ad3      	subs	r3, r2, r3
 800136a:	4a1f      	ldr	r2, [pc, #124]	@ (80013e8 <prvHeapInit+0xac>)
 800136c:	4413      	add	r3, r2
 800136e:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8001370:	68fb      	ldr	r3, [r7, #12]
 8001372:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8001374:	4a1d      	ldr	r2, [pc, #116]	@ (80013ec <prvHeapInit+0xb0>)
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800137a:	4b1c      	ldr	r3, [pc, #112]	@ (80013ec <prvHeapInit+0xb0>)
 800137c:	2200      	movs	r2, #0
 800137e:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	68ba      	ldr	r2, [r7, #8]
 8001384:	4413      	add	r3, r2
 8001386:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8001388:	2208      	movs	r2, #8
 800138a:	68fb      	ldr	r3, [r7, #12]
 800138c:	1a9b      	subs	r3, r3, r2
 800138e:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8001390:	68fb      	ldr	r3, [r7, #12]
 8001392:	f023 0307 	bic.w	r3, r3, #7
 8001396:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8001398:	68fb      	ldr	r3, [r7, #12]
 800139a:	4a15      	ldr	r2, [pc, #84]	@ (80013f0 <prvHeapInit+0xb4>)
 800139c:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800139e:	4b14      	ldr	r3, [pc, #80]	@ (80013f0 <prvHeapInit+0xb4>)
 80013a0:	681b      	ldr	r3, [r3, #0]
 80013a2:	2200      	movs	r2, #0
 80013a4:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80013a6:	4b12      	ldr	r3, [pc, #72]	@ (80013f0 <prvHeapInit+0xb4>)
 80013a8:	681b      	ldr	r3, [r3, #0]
 80013aa:	2200      	movs	r2, #0
 80013ac:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80013b2:	683b      	ldr	r3, [r7, #0]
 80013b4:	68fa      	ldr	r2, [r7, #12]
 80013b6:	1ad2      	subs	r2, r2, r3
 80013b8:	683b      	ldr	r3, [r7, #0]
 80013ba:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80013bc:	4b0c      	ldr	r3, [pc, #48]	@ (80013f0 <prvHeapInit+0xb4>)
 80013be:	681a      	ldr	r2, [r3, #0]
 80013c0:	683b      	ldr	r3, [r7, #0]
 80013c2:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80013c4:	683b      	ldr	r3, [r7, #0]
 80013c6:	685b      	ldr	r3, [r3, #4]
 80013c8:	4a0a      	ldr	r2, [pc, #40]	@ (80013f4 <prvHeapInit+0xb8>)
 80013ca:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80013cc:	683b      	ldr	r3, [r7, #0]
 80013ce:	685b      	ldr	r3, [r3, #4]
 80013d0:	4a09      	ldr	r2, [pc, #36]	@ (80013f8 <prvHeapInit+0xbc>)
 80013d2:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80013d4:	4b09      	ldr	r3, [pc, #36]	@ (80013fc <prvHeapInit+0xc0>)
 80013d6:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 80013da:	601a      	str	r2, [r3, #0]
}
 80013dc:	bf00      	nop
 80013de:	3714      	adds	r7, #20
 80013e0:	46bd      	mov	sp, r7
 80013e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013e6:	4770      	bx	lr
 80013e8:	200001b4 	.word	0x200001b4
 80013ec:	20003db4 	.word	0x20003db4
 80013f0:	20003dbc 	.word	0x20003dbc
 80013f4:	20003dc4 	.word	0x20003dc4
 80013f8:	20003dc0 	.word	0x20003dc0
 80013fc:	20003dc8 	.word	0x20003dc8

08001400 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8001400:	b480      	push	{r7}
 8001402:	b085      	sub	sp, #20
 8001404:	af00      	add	r7, sp, #0
 8001406:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8001408:	4b28      	ldr	r3, [pc, #160]	@ (80014ac <prvInsertBlockIntoFreeList+0xac>)
 800140a:	60fb      	str	r3, [r7, #12]
 800140c:	e002      	b.n	8001414 <prvInsertBlockIntoFreeList+0x14>
 800140e:	68fb      	ldr	r3, [r7, #12]
 8001410:	681b      	ldr	r3, [r3, #0]
 8001412:	60fb      	str	r3, [r7, #12]
 8001414:	68fb      	ldr	r3, [r7, #12]
 8001416:	681b      	ldr	r3, [r3, #0]
 8001418:	687a      	ldr	r2, [r7, #4]
 800141a:	429a      	cmp	r2, r3
 800141c:	d8f7      	bhi.n	800140e <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800141e:	68fb      	ldr	r3, [r7, #12]
 8001420:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8001422:	68fb      	ldr	r3, [r7, #12]
 8001424:	685b      	ldr	r3, [r3, #4]
 8001426:	68ba      	ldr	r2, [r7, #8]
 8001428:	4413      	add	r3, r2
 800142a:	687a      	ldr	r2, [r7, #4]
 800142c:	429a      	cmp	r2, r3
 800142e:	d108      	bne.n	8001442 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8001430:	68fb      	ldr	r3, [r7, #12]
 8001432:	685a      	ldr	r2, [r3, #4]
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	685b      	ldr	r3, [r3, #4]
 8001438:	441a      	add	r2, r3
 800143a:	68fb      	ldr	r3, [r7, #12]
 800143c:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800143e:	68fb      	ldr	r3, [r7, #12]
 8001440:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	685b      	ldr	r3, [r3, #4]
 800144a:	68ba      	ldr	r2, [r7, #8]
 800144c:	441a      	add	r2, r3
 800144e:	68fb      	ldr	r3, [r7, #12]
 8001450:	681b      	ldr	r3, [r3, #0]
 8001452:	429a      	cmp	r2, r3
 8001454:	d118      	bne.n	8001488 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8001456:	68fb      	ldr	r3, [r7, #12]
 8001458:	681a      	ldr	r2, [r3, #0]
 800145a:	4b15      	ldr	r3, [pc, #84]	@ (80014b0 <prvInsertBlockIntoFreeList+0xb0>)
 800145c:	681b      	ldr	r3, [r3, #0]
 800145e:	429a      	cmp	r2, r3
 8001460:	d00d      	beq.n	800147e <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	685a      	ldr	r2, [r3, #4]
 8001466:	68fb      	ldr	r3, [r7, #12]
 8001468:	681b      	ldr	r3, [r3, #0]
 800146a:	685b      	ldr	r3, [r3, #4]
 800146c:	441a      	add	r2, r3
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8001472:	68fb      	ldr	r3, [r7, #12]
 8001474:	681b      	ldr	r3, [r3, #0]
 8001476:	681a      	ldr	r2, [r3, #0]
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	601a      	str	r2, [r3, #0]
 800147c:	e008      	b.n	8001490 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800147e:	4b0c      	ldr	r3, [pc, #48]	@ (80014b0 <prvInsertBlockIntoFreeList+0xb0>)
 8001480:	681a      	ldr	r2, [r3, #0]
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	601a      	str	r2, [r3, #0]
 8001486:	e003      	b.n	8001490 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8001488:	68fb      	ldr	r3, [r7, #12]
 800148a:	681a      	ldr	r2, [r3, #0]
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8001490:	68fa      	ldr	r2, [r7, #12]
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	429a      	cmp	r2, r3
 8001496:	d002      	beq.n	800149e <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8001498:	68fb      	ldr	r3, [r7, #12]
 800149a:	687a      	ldr	r2, [r7, #4]
 800149c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800149e:	bf00      	nop
 80014a0:	3714      	adds	r7, #20
 80014a2:	46bd      	mov	sp, r7
 80014a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014a8:	4770      	bx	lr
 80014aa:	bf00      	nop
 80014ac:	20003db4 	.word	0x20003db4
 80014b0:	20003dbc 	.word	0x20003dbc

080014b4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80014b4:	b580      	push	{r7, lr}
 80014b6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80014b8:	f001 fbbe 	bl	8002c38 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80014bc:	f000 f84e 	bl	800155c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80014c0:	f000 fa74 	bl	80019ac <MX_GPIO_Init>
  MX_DMA_Init();
 80014c4:	f000 fa4a 	bl	800195c <MX_DMA_Init>
  MX_USART2_UART_Init();
 80014c8:	f000 fa1e 	bl	8001908 <MX_USART2_UART_Init>
  MX_TIM2_Init();
 80014cc:	f000 f8b0 	bl	8001630 <MX_TIM2_Init>
  MX_TIM3_Init();
 80014d0:	f000 f92e 	bl	8001730 <MX_TIM3_Init>
  MX_TIM4_Init();
 80014d4:	f000 f9a2 	bl	800181c <MX_TIM4_Init>
  /* USER CODE BEGIN 2 */
  PWM_init(&StepperL, &htim2, TIM_CHANNEL_1);
 80014d8:	2200      	movs	r2, #0
 80014da:	4917      	ldr	r1, [pc, #92]	@ (8001538 <main+0x84>)
 80014dc:	4817      	ldr	r0, [pc, #92]	@ (800153c <main+0x88>)
 80014de:	f7ff fc9d 	bl	8000e1c <PWM_init>
  PWM_init(&StepperR, &htim2, TIM_CHANNEL_2);
 80014e2:	2204      	movs	r2, #4
 80014e4:	4914      	ldr	r1, [pc, #80]	@ (8001538 <main+0x84>)
 80014e6:	4816      	ldr	r0, [pc, #88]	@ (8001540 <main+0x8c>)
 80014e8:	f7ff fc98 	bl	8000e1c <PWM_init>
  PWM_init(&BrushMTR, &htim3, TIM_CHANNEL_1);
 80014ec:	2200      	movs	r2, #0
 80014ee:	4915      	ldr	r1, [pc, #84]	@ (8001544 <main+0x90>)
 80014f0:	4815      	ldr	r0, [pc, #84]	@ (8001548 <main+0x94>)
 80014f2:	f7ff fc93 	bl	8000e1c <PWM_init>

  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 80014f6:	2100      	movs	r1, #0
 80014f8:	480f      	ldr	r0, [pc, #60]	@ (8001538 <main+0x84>)
 80014fa:	f003 f891 	bl	8004620 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2);
 80014fe:	2104      	movs	r1, #4
 8001500:	480d      	ldr	r0, [pc, #52]	@ (8001538 <main+0x84>)
 8001502:	f003 f88d 	bl	8004620 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 8001506:	2100      	movs	r1, #0
 8001508:	480e      	ldr	r0, [pc, #56]	@ (8001544 <main+0x90>)
 800150a:	f003 f889 	bl	8004620 <HAL_TIM_PWM_Start>
  HAL_TIM_Base_Start(&htim4);
 800150e:	480f      	ldr	r0, [pc, #60]	@ (800154c <main+0x98>)
 8001510:	f002 ff70 	bl	80043f4 <HAL_TIM_Base_Start>
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_1);
 8001514:	2100      	movs	r1, #0
 8001516:	480d      	ldr	r0, [pc, #52]	@ (800154c <main+0x98>)
 8001518:	f003 f882 	bl	8004620 <HAL_TIM_PWM_Start>
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 800151c:	f005 f9d2 	bl	80068c4 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8001520:	4a0b      	ldr	r2, [pc, #44]	@ (8001550 <main+0x9c>)
 8001522:	2100      	movs	r1, #0
 8001524:	480b      	ldr	r0, [pc, #44]	@ (8001554 <main+0xa0>)
 8001526:	f005 fa17 	bl	8006958 <osThreadNew>
 800152a:	4603      	mov	r3, r0
 800152c:	4a0a      	ldr	r2, [pc, #40]	@ (8001558 <main+0xa4>)
 800152e:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8001530:	f005 f9ec 	bl	800690c <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001534:	bf00      	nop
 8001536:	e7fd      	b.n	8001534 <main+0x80>
 8001538:	20003dcc 	.word	0x20003dcc
 800153c:	20003fcc 	.word	0x20003fcc
 8001540:	20003fe4 	.word	0x20003fe4
 8001544:	20003e14 	.word	0x20003e14
 8001548:	20003ffc 	.word	0x20003ffc
 800154c:	20003e5c 	.word	0x20003e5c
 8001550:	08016c88 	.word	0x08016c88
 8001554:	08001e99 	.word	0x08001e99
 8001558:	20003fac 	.word	0x20003fac

0800155c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800155c:	b580      	push	{r7, lr}
 800155e:	b094      	sub	sp, #80	@ 0x50
 8001560:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001562:	f107 0320 	add.w	r3, r7, #32
 8001566:	2230      	movs	r2, #48	@ 0x30
 8001568:	2100      	movs	r1, #0
 800156a:	4618      	mov	r0, r3
 800156c:	f014 fb6e 	bl	8015c4c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001570:	f107 030c 	add.w	r3, r7, #12
 8001574:	2200      	movs	r2, #0
 8001576:	601a      	str	r2, [r3, #0]
 8001578:	605a      	str	r2, [r3, #4]
 800157a:	609a      	str	r2, [r3, #8]
 800157c:	60da      	str	r2, [r3, #12]
 800157e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001580:	2300      	movs	r3, #0
 8001582:	60bb      	str	r3, [r7, #8]
 8001584:	4b28      	ldr	r3, [pc, #160]	@ (8001628 <SystemClock_Config+0xcc>)
 8001586:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001588:	4a27      	ldr	r2, [pc, #156]	@ (8001628 <SystemClock_Config+0xcc>)
 800158a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800158e:	6413      	str	r3, [r2, #64]	@ 0x40
 8001590:	4b25      	ldr	r3, [pc, #148]	@ (8001628 <SystemClock_Config+0xcc>)
 8001592:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001594:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001598:	60bb      	str	r3, [r7, #8]
 800159a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800159c:	2300      	movs	r3, #0
 800159e:	607b      	str	r3, [r7, #4]
 80015a0:	4b22      	ldr	r3, [pc, #136]	@ (800162c <SystemClock_Config+0xd0>)
 80015a2:	681b      	ldr	r3, [r3, #0]
 80015a4:	4a21      	ldr	r2, [pc, #132]	@ (800162c <SystemClock_Config+0xd0>)
 80015a6:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80015aa:	6013      	str	r3, [r2, #0]
 80015ac:	4b1f      	ldr	r3, [pc, #124]	@ (800162c <SystemClock_Config+0xd0>)
 80015ae:	681b      	ldr	r3, [r3, #0]
 80015b0:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80015b4:	607b      	str	r3, [r7, #4]
 80015b6:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80015b8:	2302      	movs	r3, #2
 80015ba:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80015bc:	2301      	movs	r3, #1
 80015be:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80015c0:	2310      	movs	r3, #16
 80015c2:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80015c4:	2302      	movs	r3, #2
 80015c6:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80015c8:	2300      	movs	r3, #0
 80015ca:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 80015cc:	2310      	movs	r3, #16
 80015ce:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 80015d0:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 80015d4:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 80015d6:	2304      	movs	r3, #4
 80015d8:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80015da:	2304      	movs	r3, #4
 80015dc:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80015de:	f107 0320 	add.w	r3, r7, #32
 80015e2:	4618      	mov	r0, r3
 80015e4:	f002 f9ec 	bl	80039c0 <HAL_RCC_OscConfig>
 80015e8:	4603      	mov	r3, r0
 80015ea:	2b00      	cmp	r3, #0
 80015ec:	d001      	beq.n	80015f2 <SystemClock_Config+0x96>
  {
    Error_Handler();
 80015ee:	f000 fd9b 	bl	8002128 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80015f2:	230f      	movs	r3, #15
 80015f4:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80015f6:	2302      	movs	r3, #2
 80015f8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80015fa:	2300      	movs	r3, #0
 80015fc:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80015fe:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001602:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001604:	2300      	movs	r3, #0
 8001606:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001608:	f107 030c 	add.w	r3, r7, #12
 800160c:	2102      	movs	r1, #2
 800160e:	4618      	mov	r0, r3
 8001610:	f002 fc4e 	bl	8003eb0 <HAL_RCC_ClockConfig>
 8001614:	4603      	mov	r3, r0
 8001616:	2b00      	cmp	r3, #0
 8001618:	d001      	beq.n	800161e <SystemClock_Config+0xc2>
  {
    Error_Handler();
 800161a:	f000 fd85 	bl	8002128 <Error_Handler>
  }
}
 800161e:	bf00      	nop
 8001620:	3750      	adds	r7, #80	@ 0x50
 8001622:	46bd      	mov	sp, r7
 8001624:	bd80      	pop	{r7, pc}
 8001626:	bf00      	nop
 8001628:	40023800 	.word	0x40023800
 800162c:	40007000 	.word	0x40007000

08001630 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001630:	b580      	push	{r7, lr}
 8001632:	b08e      	sub	sp, #56	@ 0x38
 8001634:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001636:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800163a:	2200      	movs	r2, #0
 800163c:	601a      	str	r2, [r3, #0]
 800163e:	605a      	str	r2, [r3, #4]
 8001640:	609a      	str	r2, [r3, #8]
 8001642:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001644:	f107 0320 	add.w	r3, r7, #32
 8001648:	2200      	movs	r2, #0
 800164a:	601a      	str	r2, [r3, #0]
 800164c:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800164e:	1d3b      	adds	r3, r7, #4
 8001650:	2200      	movs	r2, #0
 8001652:	601a      	str	r2, [r3, #0]
 8001654:	605a      	str	r2, [r3, #4]
 8001656:	609a      	str	r2, [r3, #8]
 8001658:	60da      	str	r2, [r3, #12]
 800165a:	611a      	str	r2, [r3, #16]
 800165c:	615a      	str	r2, [r3, #20]
 800165e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001660:	4b32      	ldr	r3, [pc, #200]	@ (800172c <MX_TIM2_Init+0xfc>)
 8001662:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001666:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 169;
 8001668:	4b30      	ldr	r3, [pc, #192]	@ (800172c <MX_TIM2_Init+0xfc>)
 800166a:	22a9      	movs	r2, #169	@ 0xa9
 800166c:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800166e:	4b2f      	ldr	r3, [pc, #188]	@ (800172c <MX_TIM2_Init+0xfc>)
 8001670:	2200      	movs	r2, #0
 8001672:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 999;
 8001674:	4b2d      	ldr	r3, [pc, #180]	@ (800172c <MX_TIM2_Init+0xfc>)
 8001676:	f240 32e7 	movw	r2, #999	@ 0x3e7
 800167a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800167c:	4b2b      	ldr	r3, [pc, #172]	@ (800172c <MX_TIM2_Init+0xfc>)
 800167e:	2200      	movs	r2, #0
 8001680:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001682:	4b2a      	ldr	r3, [pc, #168]	@ (800172c <MX_TIM2_Init+0xfc>)
 8001684:	2200      	movs	r2, #0
 8001686:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001688:	4828      	ldr	r0, [pc, #160]	@ (800172c <MX_TIM2_Init+0xfc>)
 800168a:	f002 fe63 	bl	8004354 <HAL_TIM_Base_Init>
 800168e:	4603      	mov	r3, r0
 8001690:	2b00      	cmp	r3, #0
 8001692:	d001      	beq.n	8001698 <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 8001694:	f000 fd48 	bl	8002128 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001698:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800169c:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800169e:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80016a2:	4619      	mov	r1, r3
 80016a4:	4821      	ldr	r0, [pc, #132]	@ (800172c <MX_TIM2_Init+0xfc>)
 80016a6:	f003 fa1d 	bl	8004ae4 <HAL_TIM_ConfigClockSource>
 80016aa:	4603      	mov	r3, r0
 80016ac:	2b00      	cmp	r3, #0
 80016ae:	d001      	beq.n	80016b4 <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 80016b0:	f000 fd3a 	bl	8002128 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80016b4:	481d      	ldr	r0, [pc, #116]	@ (800172c <MX_TIM2_Init+0xfc>)
 80016b6:	f002 ff59 	bl	800456c <HAL_TIM_PWM_Init>
 80016ba:	4603      	mov	r3, r0
 80016bc:	2b00      	cmp	r3, #0
 80016be:	d001      	beq.n	80016c4 <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 80016c0:	f000 fd32 	bl	8002128 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80016c4:	2300      	movs	r3, #0
 80016c6:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80016c8:	2300      	movs	r3, #0
 80016ca:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80016cc:	f107 0320 	add.w	r3, r7, #32
 80016d0:	4619      	mov	r1, r3
 80016d2:	4816      	ldr	r0, [pc, #88]	@ (800172c <MX_TIM2_Init+0xfc>)
 80016d4:	f003 fdce 	bl	8005274 <HAL_TIMEx_MasterConfigSynchronization>
 80016d8:	4603      	mov	r3, r0
 80016da:	2b00      	cmp	r3, #0
 80016dc:	d001      	beq.n	80016e2 <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 80016de:	f000 fd23 	bl	8002128 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80016e2:	2360      	movs	r3, #96	@ 0x60
 80016e4:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80016e6:	2300      	movs	r3, #0
 80016e8:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80016ea:	2300      	movs	r3, #0
 80016ec:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80016ee:	2300      	movs	r3, #0
 80016f0:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80016f2:	1d3b      	adds	r3, r7, #4
 80016f4:	2200      	movs	r2, #0
 80016f6:	4619      	mov	r1, r3
 80016f8:	480c      	ldr	r0, [pc, #48]	@ (800172c <MX_TIM2_Init+0xfc>)
 80016fa:	f003 f931 	bl	8004960 <HAL_TIM_PWM_ConfigChannel>
 80016fe:	4603      	mov	r3, r0
 8001700:	2b00      	cmp	r3, #0
 8001702:	d001      	beq.n	8001708 <MX_TIM2_Init+0xd8>
  {
    Error_Handler();
 8001704:	f000 fd10 	bl	8002128 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001708:	1d3b      	adds	r3, r7, #4
 800170a:	2204      	movs	r2, #4
 800170c:	4619      	mov	r1, r3
 800170e:	4807      	ldr	r0, [pc, #28]	@ (800172c <MX_TIM2_Init+0xfc>)
 8001710:	f003 f926 	bl	8004960 <HAL_TIM_PWM_ConfigChannel>
 8001714:	4603      	mov	r3, r0
 8001716:	2b00      	cmp	r3, #0
 8001718:	d001      	beq.n	800171e <MX_TIM2_Init+0xee>
  {
    Error_Handler();
 800171a:	f000 fd05 	bl	8002128 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 800171e:	4803      	ldr	r0, [pc, #12]	@ (800172c <MX_TIM2_Init+0xfc>)
 8001720:	f000 fee6 	bl	80024f0 <HAL_TIM_MspPostInit>

}
 8001724:	bf00      	nop
 8001726:	3738      	adds	r7, #56	@ 0x38
 8001728:	46bd      	mov	sp, r7
 800172a:	bd80      	pop	{r7, pc}
 800172c:	20003dcc 	.word	0x20003dcc

08001730 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001730:	b580      	push	{r7, lr}
 8001732:	b08e      	sub	sp, #56	@ 0x38
 8001734:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001736:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800173a:	2200      	movs	r2, #0
 800173c:	601a      	str	r2, [r3, #0]
 800173e:	605a      	str	r2, [r3, #4]
 8001740:	609a      	str	r2, [r3, #8]
 8001742:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001744:	f107 0320 	add.w	r3, r7, #32
 8001748:	2200      	movs	r2, #0
 800174a:	601a      	str	r2, [r3, #0]
 800174c:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800174e:	1d3b      	adds	r3, r7, #4
 8001750:	2200      	movs	r2, #0
 8001752:	601a      	str	r2, [r3, #0]
 8001754:	605a      	str	r2, [r3, #4]
 8001756:	609a      	str	r2, [r3, #8]
 8001758:	60da      	str	r2, [r3, #12]
 800175a:	611a      	str	r2, [r3, #16]
 800175c:	615a      	str	r2, [r3, #20]
 800175e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001760:	4b2c      	ldr	r3, [pc, #176]	@ (8001814 <MX_TIM3_Init+0xe4>)
 8001762:	4a2d      	ldr	r2, [pc, #180]	@ (8001818 <MX_TIM3_Init+0xe8>)
 8001764:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 169;
 8001766:	4b2b      	ldr	r3, [pc, #172]	@ (8001814 <MX_TIM3_Init+0xe4>)
 8001768:	22a9      	movs	r2, #169	@ 0xa9
 800176a:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800176c:	4b29      	ldr	r3, [pc, #164]	@ (8001814 <MX_TIM3_Init+0xe4>)
 800176e:	2200      	movs	r2, #0
 8001770:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 999;
 8001772:	4b28      	ldr	r3, [pc, #160]	@ (8001814 <MX_TIM3_Init+0xe4>)
 8001774:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8001778:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800177a:	4b26      	ldr	r3, [pc, #152]	@ (8001814 <MX_TIM3_Init+0xe4>)
 800177c:	2200      	movs	r2, #0
 800177e:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001780:	4b24      	ldr	r3, [pc, #144]	@ (8001814 <MX_TIM3_Init+0xe4>)
 8001782:	2200      	movs	r2, #0
 8001784:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001786:	4823      	ldr	r0, [pc, #140]	@ (8001814 <MX_TIM3_Init+0xe4>)
 8001788:	f002 fde4 	bl	8004354 <HAL_TIM_Base_Init>
 800178c:	4603      	mov	r3, r0
 800178e:	2b00      	cmp	r3, #0
 8001790:	d001      	beq.n	8001796 <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 8001792:	f000 fcc9 	bl	8002128 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001796:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800179a:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800179c:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80017a0:	4619      	mov	r1, r3
 80017a2:	481c      	ldr	r0, [pc, #112]	@ (8001814 <MX_TIM3_Init+0xe4>)
 80017a4:	f003 f99e 	bl	8004ae4 <HAL_TIM_ConfigClockSource>
 80017a8:	4603      	mov	r3, r0
 80017aa:	2b00      	cmp	r3, #0
 80017ac:	d001      	beq.n	80017b2 <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 80017ae:	f000 fcbb 	bl	8002128 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80017b2:	4818      	ldr	r0, [pc, #96]	@ (8001814 <MX_TIM3_Init+0xe4>)
 80017b4:	f002 feda 	bl	800456c <HAL_TIM_PWM_Init>
 80017b8:	4603      	mov	r3, r0
 80017ba:	2b00      	cmp	r3, #0
 80017bc:	d001      	beq.n	80017c2 <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 80017be:	f000 fcb3 	bl	8002128 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80017c2:	2300      	movs	r3, #0
 80017c4:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80017c6:	2300      	movs	r3, #0
 80017c8:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80017ca:	f107 0320 	add.w	r3, r7, #32
 80017ce:	4619      	mov	r1, r3
 80017d0:	4810      	ldr	r0, [pc, #64]	@ (8001814 <MX_TIM3_Init+0xe4>)
 80017d2:	f003 fd4f 	bl	8005274 <HAL_TIMEx_MasterConfigSynchronization>
 80017d6:	4603      	mov	r3, r0
 80017d8:	2b00      	cmp	r3, #0
 80017da:	d001      	beq.n	80017e0 <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 80017dc:	f000 fca4 	bl	8002128 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80017e0:	2360      	movs	r3, #96	@ 0x60
 80017e2:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80017e4:	2300      	movs	r3, #0
 80017e6:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80017e8:	2300      	movs	r3, #0
 80017ea:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80017ec:	2300      	movs	r3, #0
 80017ee:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80017f0:	1d3b      	adds	r3, r7, #4
 80017f2:	2200      	movs	r2, #0
 80017f4:	4619      	mov	r1, r3
 80017f6:	4807      	ldr	r0, [pc, #28]	@ (8001814 <MX_TIM3_Init+0xe4>)
 80017f8:	f003 f8b2 	bl	8004960 <HAL_TIM_PWM_ConfigChannel>
 80017fc:	4603      	mov	r3, r0
 80017fe:	2b00      	cmp	r3, #0
 8001800:	d001      	beq.n	8001806 <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 8001802:	f000 fc91 	bl	8002128 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8001806:	4803      	ldr	r0, [pc, #12]	@ (8001814 <MX_TIM3_Init+0xe4>)
 8001808:	f000 fe72 	bl	80024f0 <HAL_TIM_MspPostInit>

}
 800180c:	bf00      	nop
 800180e:	3738      	adds	r7, #56	@ 0x38
 8001810:	46bd      	mov	sp, r7
 8001812:	bd80      	pop	{r7, pc}
 8001814:	20003e14 	.word	0x20003e14
 8001818:	40000400 	.word	0x40000400

0800181c <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 800181c:	b580      	push	{r7, lr}
 800181e:	b08e      	sub	sp, #56	@ 0x38
 8001820:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001822:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001826:	2200      	movs	r2, #0
 8001828:	601a      	str	r2, [r3, #0]
 800182a:	605a      	str	r2, [r3, #4]
 800182c:	609a      	str	r2, [r3, #8]
 800182e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001830:	f107 0320 	add.w	r3, r7, #32
 8001834:	2200      	movs	r2, #0
 8001836:	601a      	str	r2, [r3, #0]
 8001838:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800183a:	1d3b      	adds	r3, r7, #4
 800183c:	2200      	movs	r2, #0
 800183e:	601a      	str	r2, [r3, #0]
 8001840:	605a      	str	r2, [r3, #4]
 8001842:	609a      	str	r2, [r3, #8]
 8001844:	60da      	str	r2, [r3, #12]
 8001846:	611a      	str	r2, [r3, #16]
 8001848:	615a      	str	r2, [r3, #20]
 800184a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 800184c:	4b2c      	ldr	r3, [pc, #176]	@ (8001900 <MX_TIM4_Init+0xe4>)
 800184e:	4a2d      	ldr	r2, [pc, #180]	@ (8001904 <MX_TIM4_Init+0xe8>)
 8001850:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 169;
 8001852:	4b2b      	ldr	r3, [pc, #172]	@ (8001900 <MX_TIM4_Init+0xe4>)
 8001854:	22a9      	movs	r2, #169	@ 0xa9
 8001856:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001858:	4b29      	ldr	r3, [pc, #164]	@ (8001900 <MX_TIM4_Init+0xe4>)
 800185a:	2200      	movs	r2, #0
 800185c:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 19999;
 800185e:	4b28      	ldr	r3, [pc, #160]	@ (8001900 <MX_TIM4_Init+0xe4>)
 8001860:	f644 621f 	movw	r2, #19999	@ 0x4e1f
 8001864:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001866:	4b26      	ldr	r3, [pc, #152]	@ (8001900 <MX_TIM4_Init+0xe4>)
 8001868:	2200      	movs	r2, #0
 800186a:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800186c:	4b24      	ldr	r3, [pc, #144]	@ (8001900 <MX_TIM4_Init+0xe4>)
 800186e:	2200      	movs	r2, #0
 8001870:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8001872:	4823      	ldr	r0, [pc, #140]	@ (8001900 <MX_TIM4_Init+0xe4>)
 8001874:	f002 fd6e 	bl	8004354 <HAL_TIM_Base_Init>
 8001878:	4603      	mov	r3, r0
 800187a:	2b00      	cmp	r3, #0
 800187c:	d001      	beq.n	8001882 <MX_TIM4_Init+0x66>
  {
    Error_Handler();
 800187e:	f000 fc53 	bl	8002128 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001882:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001886:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8001888:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800188c:	4619      	mov	r1, r3
 800188e:	481c      	ldr	r0, [pc, #112]	@ (8001900 <MX_TIM4_Init+0xe4>)
 8001890:	f003 f928 	bl	8004ae4 <HAL_TIM_ConfigClockSource>
 8001894:	4603      	mov	r3, r0
 8001896:	2b00      	cmp	r3, #0
 8001898:	d001      	beq.n	800189e <MX_TIM4_Init+0x82>
  {
    Error_Handler();
 800189a:	f000 fc45 	bl	8002128 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 800189e:	4818      	ldr	r0, [pc, #96]	@ (8001900 <MX_TIM4_Init+0xe4>)
 80018a0:	f002 fe64 	bl	800456c <HAL_TIM_PWM_Init>
 80018a4:	4603      	mov	r3, r0
 80018a6:	2b00      	cmp	r3, #0
 80018a8:	d001      	beq.n	80018ae <MX_TIM4_Init+0x92>
  {
    Error_Handler();
 80018aa:	f000 fc3d 	bl	8002128 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80018ae:	2300      	movs	r3, #0
 80018b0:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80018b2:	2300      	movs	r3, #0
 80018b4:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80018b6:	f107 0320 	add.w	r3, r7, #32
 80018ba:	4619      	mov	r1, r3
 80018bc:	4810      	ldr	r0, [pc, #64]	@ (8001900 <MX_TIM4_Init+0xe4>)
 80018be:	f003 fcd9 	bl	8005274 <HAL_TIMEx_MasterConfigSynchronization>
 80018c2:	4603      	mov	r3, r0
 80018c4:	2b00      	cmp	r3, #0
 80018c6:	d001      	beq.n	80018cc <MX_TIM4_Init+0xb0>
  {
    Error_Handler();
 80018c8:	f000 fc2e 	bl	8002128 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80018cc:	2360      	movs	r3, #96	@ 0x60
 80018ce:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80018d0:	2300      	movs	r3, #0
 80018d2:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80018d4:	2300      	movs	r3, #0
 80018d6:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80018d8:	2300      	movs	r3, #0
 80018da:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80018dc:	1d3b      	adds	r3, r7, #4
 80018de:	2200      	movs	r2, #0
 80018e0:	4619      	mov	r1, r3
 80018e2:	4807      	ldr	r0, [pc, #28]	@ (8001900 <MX_TIM4_Init+0xe4>)
 80018e4:	f003 f83c 	bl	8004960 <HAL_TIM_PWM_ConfigChannel>
 80018e8:	4603      	mov	r3, r0
 80018ea:	2b00      	cmp	r3, #0
 80018ec:	d001      	beq.n	80018f2 <MX_TIM4_Init+0xd6>
  {
    Error_Handler();
 80018ee:	f000 fc1b 	bl	8002128 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 80018f2:	4803      	ldr	r0, [pc, #12]	@ (8001900 <MX_TIM4_Init+0xe4>)
 80018f4:	f000 fdfc 	bl	80024f0 <HAL_TIM_MspPostInit>

}
 80018f8:	bf00      	nop
 80018fa:	3738      	adds	r7, #56	@ 0x38
 80018fc:	46bd      	mov	sp, r7
 80018fe:	bd80      	pop	{r7, pc}
 8001900:	20003e5c 	.word	0x20003e5c
 8001904:	40000800 	.word	0x40000800

08001908 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001908:	b580      	push	{r7, lr}
 800190a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800190c:	4b11      	ldr	r3, [pc, #68]	@ (8001954 <MX_USART2_UART_Init+0x4c>)
 800190e:	4a12      	ldr	r2, [pc, #72]	@ (8001958 <MX_USART2_UART_Init+0x50>)
 8001910:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001912:	4b10      	ldr	r3, [pc, #64]	@ (8001954 <MX_USART2_UART_Init+0x4c>)
 8001914:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001918:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800191a:	4b0e      	ldr	r3, [pc, #56]	@ (8001954 <MX_USART2_UART_Init+0x4c>)
 800191c:	2200      	movs	r2, #0
 800191e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001920:	4b0c      	ldr	r3, [pc, #48]	@ (8001954 <MX_USART2_UART_Init+0x4c>)
 8001922:	2200      	movs	r2, #0
 8001924:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001926:	4b0b      	ldr	r3, [pc, #44]	@ (8001954 <MX_USART2_UART_Init+0x4c>)
 8001928:	2200      	movs	r2, #0
 800192a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800192c:	4b09      	ldr	r3, [pc, #36]	@ (8001954 <MX_USART2_UART_Init+0x4c>)
 800192e:	220c      	movs	r2, #12
 8001930:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001932:	4b08      	ldr	r3, [pc, #32]	@ (8001954 <MX_USART2_UART_Init+0x4c>)
 8001934:	2200      	movs	r2, #0
 8001936:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001938:	4b06      	ldr	r3, [pc, #24]	@ (8001954 <MX_USART2_UART_Init+0x4c>)
 800193a:	2200      	movs	r2, #0
 800193c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800193e:	4805      	ldr	r0, [pc, #20]	@ (8001954 <MX_USART2_UART_Init+0x4c>)
 8001940:	f003 fd1a 	bl	8005378 <HAL_UART_Init>
 8001944:	4603      	mov	r3, r0
 8001946:	2b00      	cmp	r3, #0
 8001948:	d001      	beq.n	800194e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800194a:	f000 fbed 	bl	8002128 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800194e:	bf00      	nop
 8001950:	bd80      	pop	{r7, pc}
 8001952:	bf00      	nop
 8001954:	20003ea4 	.word	0x20003ea4
 8001958:	40004400 	.word	0x40004400

0800195c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 800195c:	b580      	push	{r7, lr}
 800195e:	b082      	sub	sp, #8
 8001960:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001962:	2300      	movs	r3, #0
 8001964:	607b      	str	r3, [r7, #4]
 8001966:	4b10      	ldr	r3, [pc, #64]	@ (80019a8 <MX_DMA_Init+0x4c>)
 8001968:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800196a:	4a0f      	ldr	r2, [pc, #60]	@ (80019a8 <MX_DMA_Init+0x4c>)
 800196c:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001970:	6313      	str	r3, [r2, #48]	@ 0x30
 8001972:	4b0d      	ldr	r3, [pc, #52]	@ (80019a8 <MX_DMA_Init+0x4c>)
 8001974:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001976:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800197a:	607b      	str	r3, [r7, #4]
 800197c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 5, 0);
 800197e:	2200      	movs	r2, #0
 8001980:	2105      	movs	r1, #5
 8001982:	2010      	movs	r0, #16
 8001984:	f001 fa52 	bl	8002e2c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8001988:	2010      	movs	r0, #16
 800198a:	f001 fa6b 	bl	8002e64 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 5, 0);
 800198e:	2200      	movs	r2, #0
 8001990:	2105      	movs	r1, #5
 8001992:	2011      	movs	r0, #17
 8001994:	f001 fa4a 	bl	8002e2c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 8001998:	2011      	movs	r0, #17
 800199a:	f001 fa63 	bl	8002e64 <HAL_NVIC_EnableIRQ>

}
 800199e:	bf00      	nop
 80019a0:	3708      	adds	r7, #8
 80019a2:	46bd      	mov	sp, r7
 80019a4:	bd80      	pop	{r7, pc}
 80019a6:	bf00      	nop
 80019a8:	40023800 	.word	0x40023800

080019ac <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80019ac:	b580      	push	{r7, lr}
 80019ae:	b08a      	sub	sp, #40	@ 0x28
 80019b0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019b2:	f107 0314 	add.w	r3, r7, #20
 80019b6:	2200      	movs	r2, #0
 80019b8:	601a      	str	r2, [r3, #0]
 80019ba:	605a      	str	r2, [r3, #4]
 80019bc:	609a      	str	r2, [r3, #8]
 80019be:	60da      	str	r2, [r3, #12]
 80019c0:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80019c2:	2300      	movs	r3, #0
 80019c4:	613b      	str	r3, [r7, #16]
 80019c6:	4b39      	ldr	r3, [pc, #228]	@ (8001aac <MX_GPIO_Init+0x100>)
 80019c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80019ca:	4a38      	ldr	r2, [pc, #224]	@ (8001aac <MX_GPIO_Init+0x100>)
 80019cc:	f043 0304 	orr.w	r3, r3, #4
 80019d0:	6313      	str	r3, [r2, #48]	@ 0x30
 80019d2:	4b36      	ldr	r3, [pc, #216]	@ (8001aac <MX_GPIO_Init+0x100>)
 80019d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80019d6:	f003 0304 	and.w	r3, r3, #4
 80019da:	613b      	str	r3, [r7, #16]
 80019dc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80019de:	2300      	movs	r3, #0
 80019e0:	60fb      	str	r3, [r7, #12]
 80019e2:	4b32      	ldr	r3, [pc, #200]	@ (8001aac <MX_GPIO_Init+0x100>)
 80019e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80019e6:	4a31      	ldr	r2, [pc, #196]	@ (8001aac <MX_GPIO_Init+0x100>)
 80019e8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80019ec:	6313      	str	r3, [r2, #48]	@ 0x30
 80019ee:	4b2f      	ldr	r3, [pc, #188]	@ (8001aac <MX_GPIO_Init+0x100>)
 80019f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80019f2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80019f6:	60fb      	str	r3, [r7, #12]
 80019f8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80019fa:	2300      	movs	r3, #0
 80019fc:	60bb      	str	r3, [r7, #8]
 80019fe:	4b2b      	ldr	r3, [pc, #172]	@ (8001aac <MX_GPIO_Init+0x100>)
 8001a00:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a02:	4a2a      	ldr	r2, [pc, #168]	@ (8001aac <MX_GPIO_Init+0x100>)
 8001a04:	f043 0301 	orr.w	r3, r3, #1
 8001a08:	6313      	str	r3, [r2, #48]	@ 0x30
 8001a0a:	4b28      	ldr	r3, [pc, #160]	@ (8001aac <MX_GPIO_Init+0x100>)
 8001a0c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a0e:	f003 0301 	and.w	r3, r3, #1
 8001a12:	60bb      	str	r3, [r7, #8]
 8001a14:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a16:	2300      	movs	r3, #0
 8001a18:	607b      	str	r3, [r7, #4]
 8001a1a:	4b24      	ldr	r3, [pc, #144]	@ (8001aac <MX_GPIO_Init+0x100>)
 8001a1c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a1e:	4a23      	ldr	r2, [pc, #140]	@ (8001aac <MX_GPIO_Init+0x100>)
 8001a20:	f043 0302 	orr.w	r3, r3, #2
 8001a24:	6313      	str	r3, [r2, #48]	@ 0x30
 8001a26:	4b21      	ldr	r3, [pc, #132]	@ (8001aac <MX_GPIO_Init+0x100>)
 8001a28:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a2a:	f003 0302 	and.w	r3, r3, #2
 8001a2e:	607b      	str	r3, [r7, #4]
 8001a30:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7|GPIO_PIN_9, GPIO_PIN_RESET);
 8001a32:	2200      	movs	r2, #0
 8001a34:	f44f 7120 	mov.w	r1, #640	@ 0x280
 8001a38:	481d      	ldr	r0, [pc, #116]	@ (8001ab0 <MX_GPIO_Init+0x104>)
 8001a3a:	f001 ffa7 	bl	800398c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8, GPIO_PIN_RESET);
 8001a3e:	2200      	movs	r2, #0
 8001a40:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001a44:	481b      	ldr	r0, [pc, #108]	@ (8001ab4 <MX_GPIO_Init+0x108>)
 8001a46:	f001 ffa1 	bl	800398c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001a4a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001a4e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001a50:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8001a54:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a56:	2300      	movs	r3, #0
 8001a58:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001a5a:	f107 0314 	add.w	r3, r7, #20
 8001a5e:	4619      	mov	r1, r3
 8001a60:	4815      	ldr	r0, [pc, #84]	@ (8001ab8 <MX_GPIO_Init+0x10c>)
 8001a62:	f001 fe0f 	bl	8003684 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA7 PA9 */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_9;
 8001a66:	f44f 7320 	mov.w	r3, #640	@ 0x280
 8001a6a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a6c:	2301      	movs	r3, #1
 8001a6e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a70:	2300      	movs	r3, #0
 8001a72:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a74:	2300      	movs	r3, #0
 8001a76:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a78:	f107 0314 	add.w	r3, r7, #20
 8001a7c:	4619      	mov	r1, r3
 8001a7e:	480c      	ldr	r0, [pc, #48]	@ (8001ab0 <MX_GPIO_Init+0x104>)
 8001a80:	f001 fe00 	bl	8003684 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001a84:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001a88:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a8a:	2301      	movs	r3, #1
 8001a8c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a8e:	2300      	movs	r3, #0
 8001a90:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a92:	2300      	movs	r3, #0
 8001a94:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001a96:	f107 0314 	add.w	r3, r7, #20
 8001a9a:	4619      	mov	r1, r3
 8001a9c:	4805      	ldr	r0, [pc, #20]	@ (8001ab4 <MX_GPIO_Init+0x108>)
 8001a9e:	f001 fdf1 	bl	8003684 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001aa2:	bf00      	nop
 8001aa4:	3728      	adds	r7, #40	@ 0x28
 8001aa6:	46bd      	mov	sp, r7
 8001aa8:	bd80      	pop	{r7, pc}
 8001aaa:	bf00      	nop
 8001aac:	40023800 	.word	0x40023800
 8001ab0:	40020000 	.word	0x40020000
 8001ab4:	40020400 	.word	0x40020400
 8001ab8:	40020800 	.word	0x40020800

08001abc <StpperMotorControlled>:
    // Map from 1000-2010 to Min-Max
    return (int16_t)(((int32_t)(inputValue - 1000) * (Max - Min)) / 1010 + Min);
}

void StpperMotorControlled()
{
 8001abc:	b580      	push	{r7, lr}
 8001abe:	af00      	add	r7, sp, #0
//		}
//	}
	//############################# speed ramp
// ######################################Ramp each wheel############################################

	if (fabs(Speed_L) < 170.0)
 8001ac0:	4ba8      	ldr	r3, [pc, #672]	@ (8001d64 <StpperMotorControlled+0x2a8>)
 8001ac2:	edd3 7a00 	vldr	s15, [r3]
 8001ac6:	eef0 7ae7 	vabs.f32	s15, s15
 8001aca:	ed9f 7aa7 	vldr	s14, [pc, #668]	@ 8001d68 <StpperMotorControlled+0x2ac>
 8001ace:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001ad2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001ad6:	d503      	bpl.n	8001ae0 <StpperMotorControlled+0x24>
		Speed_L = 0;
 8001ad8:	4ba2      	ldr	r3, [pc, #648]	@ (8001d64 <StpperMotorControlled+0x2a8>)
 8001ada:	f04f 0200 	mov.w	r2, #0
 8001ade:	601a      	str	r2, [r3, #0]
	if (fabs(Speed_R) < 170.0)
 8001ae0:	4ba2      	ldr	r3, [pc, #648]	@ (8001d6c <StpperMotorControlled+0x2b0>)
 8001ae2:	edd3 7a00 	vldr	s15, [r3]
 8001ae6:	eef0 7ae7 	vabs.f32	s15, s15
 8001aea:	ed9f 7a9f 	vldr	s14, [pc, #636]	@ 8001d68 <StpperMotorControlled+0x2ac>
 8001aee:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001af2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001af6:	d503      	bpl.n	8001b00 <StpperMotorControlled+0x44>
		Speed_R = 0;
 8001af8:	4b9c      	ldr	r3, [pc, #624]	@ (8001d6c <StpperMotorControlled+0x2b0>)
 8001afa:	f04f 0200 	mov.w	r2, #0
 8001afe:	601a      	str	r2, [r3, #0]
	if (Speed_L-prev_Speed_L > 0){
 8001b00:	4b98      	ldr	r3, [pc, #608]	@ (8001d64 <StpperMotorControlled+0x2a8>)
 8001b02:	ed93 7a00 	vldr	s14, [r3]
 8001b06:	4b9a      	ldr	r3, [pc, #616]	@ (8001d70 <StpperMotorControlled+0x2b4>)
 8001b08:	edd3 7a00 	vldr	s15, [r3]
 8001b0c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001b10:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001b14:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001b18:	dd3f      	ble.n	8001b9a <StpperMotorControlled+0xde>
		if (i2 <= Speed_L){
 8001b1a:	4b96      	ldr	r3, [pc, #600]	@ (8001d74 <StpperMotorControlled+0x2b8>)
 8001b1c:	ed93 7a00 	vldr	s14, [r3]
 8001b20:	4b90      	ldr	r3, [pc, #576]	@ (8001d64 <StpperMotorControlled+0x2a8>)
 8001b22:	edd3 7a00 	vldr	s15, [r3]
 8001b26:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001b2a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001b2e:	d82b      	bhi.n	8001b88 <StpperMotorControlled+0xcc>
			if (i2 > 0)
 8001b30:	4b90      	ldr	r3, [pc, #576]	@ (8001d74 <StpperMotorControlled+0x2b8>)
 8001b32:	edd3 7a00 	vldr	s15, [r3]
 8001b36:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001b3a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001b3e:	dd06      	ble.n	8001b4e <StpperMotorControlled+0x92>
			{
				HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, SET);
 8001b40:	2201      	movs	r2, #1
 8001b42:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001b46:	488c      	ldr	r0, [pc, #560]	@ (8001d78 <StpperMotorControlled+0x2bc>)
 8001b48:	f001 ff20 	bl	800398c <HAL_GPIO_WritePin>
 8001b4c:	e005      	b.n	8001b5a <StpperMotorControlled+0x9e>
			}
			else
			{
				HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, RESET);
 8001b4e:	2200      	movs	r2, #0
 8001b50:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001b54:	4888      	ldr	r0, [pc, #544]	@ (8001d78 <StpperMotorControlled+0x2bc>)
 8001b56:	f001 ff19 	bl	800398c <HAL_GPIO_WritePin>
			}
			PWM_write_duty(&StepperL, fabs(i2), 50);
 8001b5a:	4b86      	ldr	r3, [pc, #536]	@ (8001d74 <StpperMotorControlled+0x2b8>)
 8001b5c:	edd3 7a00 	vldr	s15, [r3]
 8001b60:	eef0 7ae7 	vabs.f32	s15, s15
 8001b64:	eddf 0a85 	vldr	s1, [pc, #532]	@ 8001d7c <StpperMotorControlled+0x2c0>
 8001b68:	eeb0 0a67 	vmov.f32	s0, s15
 8001b6c:	4884      	ldr	r0, [pc, #528]	@ (8001d80 <StpperMotorControlled+0x2c4>)
 8001b6e:	f7ff f977 	bl	8000e60 <PWM_write_duty>
			i2 += 50.0;
 8001b72:	4b80      	ldr	r3, [pc, #512]	@ (8001d74 <StpperMotorControlled+0x2b8>)
 8001b74:	edd3 7a00 	vldr	s15, [r3]
 8001b78:	ed9f 7a80 	vldr	s14, [pc, #512]	@ 8001d7c <StpperMotorControlled+0x2c0>
 8001b7c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001b80:	4b7c      	ldr	r3, [pc, #496]	@ (8001d74 <StpperMotorControlled+0x2b8>)
 8001b82:	edc3 7a00 	vstr	s15, [r3]
 8001b86:	e054      	b.n	8001c32 <StpperMotorControlled+0x176>
		}
		else {
			prev_Speed_L = Speed_L;
 8001b88:	4b76      	ldr	r3, [pc, #472]	@ (8001d64 <StpperMotorControlled+0x2a8>)
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	4a78      	ldr	r2, [pc, #480]	@ (8001d70 <StpperMotorControlled+0x2b4>)
 8001b8e:	6013      	str	r3, [r2, #0]
			i2 = prev_Speed_L;
 8001b90:	4b77      	ldr	r3, [pc, #476]	@ (8001d70 <StpperMotorControlled+0x2b4>)
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	4a77      	ldr	r2, [pc, #476]	@ (8001d74 <StpperMotorControlled+0x2b8>)
 8001b96:	6013      	str	r3, [r2, #0]
 8001b98:	e04b      	b.n	8001c32 <StpperMotorControlled+0x176>
		}
	}
	else if (Speed_L-prev_Speed_L < 0){
 8001b9a:	4b72      	ldr	r3, [pc, #456]	@ (8001d64 <StpperMotorControlled+0x2a8>)
 8001b9c:	ed93 7a00 	vldr	s14, [r3]
 8001ba0:	4b73      	ldr	r3, [pc, #460]	@ (8001d70 <StpperMotorControlled+0x2b4>)
 8001ba2:	edd3 7a00 	vldr	s15, [r3]
 8001ba6:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001baa:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001bae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001bb2:	d53e      	bpl.n	8001c32 <StpperMotorControlled+0x176>
		if (i2 >= Speed_L){
 8001bb4:	4b6f      	ldr	r3, [pc, #444]	@ (8001d74 <StpperMotorControlled+0x2b8>)
 8001bb6:	ed93 7a00 	vldr	s14, [r3]
 8001bba:	4b6a      	ldr	r3, [pc, #424]	@ (8001d64 <StpperMotorControlled+0x2a8>)
 8001bbc:	edd3 7a00 	vldr	s15, [r3]
 8001bc0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001bc4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001bc8:	db2b      	blt.n	8001c22 <StpperMotorControlled+0x166>
			if (i2 > 0)
 8001bca:	4b6a      	ldr	r3, [pc, #424]	@ (8001d74 <StpperMotorControlled+0x2b8>)
 8001bcc:	edd3 7a00 	vldr	s15, [r3]
 8001bd0:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001bd4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001bd8:	dd06      	ble.n	8001be8 <StpperMotorControlled+0x12c>
			{
				HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, SET);
 8001bda:	2201      	movs	r2, #1
 8001bdc:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001be0:	4865      	ldr	r0, [pc, #404]	@ (8001d78 <StpperMotorControlled+0x2bc>)
 8001be2:	f001 fed3 	bl	800398c <HAL_GPIO_WritePin>
 8001be6:	e005      	b.n	8001bf4 <StpperMotorControlled+0x138>
			}

			else{
				HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, RESET);
 8001be8:	2200      	movs	r2, #0
 8001bea:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001bee:	4862      	ldr	r0, [pc, #392]	@ (8001d78 <StpperMotorControlled+0x2bc>)
 8001bf0:	f001 fecc 	bl	800398c <HAL_GPIO_WritePin>
			}
			PWM_write_duty(&StepperL, fabs(i2), 50);
 8001bf4:	4b5f      	ldr	r3, [pc, #380]	@ (8001d74 <StpperMotorControlled+0x2b8>)
 8001bf6:	edd3 7a00 	vldr	s15, [r3]
 8001bfa:	eef0 7ae7 	vabs.f32	s15, s15
 8001bfe:	eddf 0a5f 	vldr	s1, [pc, #380]	@ 8001d7c <StpperMotorControlled+0x2c0>
 8001c02:	eeb0 0a67 	vmov.f32	s0, s15
 8001c06:	485e      	ldr	r0, [pc, #376]	@ (8001d80 <StpperMotorControlled+0x2c4>)
 8001c08:	f7ff f92a 	bl	8000e60 <PWM_write_duty>
			i2 -= 50.0;
 8001c0c:	4b59      	ldr	r3, [pc, #356]	@ (8001d74 <StpperMotorControlled+0x2b8>)
 8001c0e:	edd3 7a00 	vldr	s15, [r3]
 8001c12:	ed9f 7a5a 	vldr	s14, [pc, #360]	@ 8001d7c <StpperMotorControlled+0x2c0>
 8001c16:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8001c1a:	4b56      	ldr	r3, [pc, #344]	@ (8001d74 <StpperMotorControlled+0x2b8>)
 8001c1c:	edc3 7a00 	vstr	s15, [r3]
 8001c20:	e007      	b.n	8001c32 <StpperMotorControlled+0x176>
		}
		else {
			prev_Speed_L = Speed_L;
 8001c22:	4b50      	ldr	r3, [pc, #320]	@ (8001d64 <StpperMotorControlled+0x2a8>)
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	4a52      	ldr	r2, [pc, #328]	@ (8001d70 <StpperMotorControlled+0x2b4>)
 8001c28:	6013      	str	r3, [r2, #0]
			i2 = prev_Speed_L;
 8001c2a:	4b51      	ldr	r3, [pc, #324]	@ (8001d70 <StpperMotorControlled+0x2b4>)
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	4a51      	ldr	r2, [pc, #324]	@ (8001d74 <StpperMotorControlled+0x2b8>)
 8001c30:	6013      	str	r3, [r2, #0]
//	}

///////////////////////// R ////////////////////////


	if (Speed_R-prev_Speed_R > 0){
 8001c32:	4b4e      	ldr	r3, [pc, #312]	@ (8001d6c <StpperMotorControlled+0x2b0>)
 8001c34:	ed93 7a00 	vldr	s14, [r3]
 8001c38:	4b52      	ldr	r3, [pc, #328]	@ (8001d84 <StpperMotorControlled+0x2c8>)
 8001c3a:	edd3 7a00 	vldr	s15, [r3]
 8001c3e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001c42:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001c46:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001c4a:	dd3d      	ble.n	8001cc8 <StpperMotorControlled+0x20c>
		if (i3 <= Speed_R){
 8001c4c:	4b4e      	ldr	r3, [pc, #312]	@ (8001d88 <StpperMotorControlled+0x2cc>)
 8001c4e:	ed93 7a00 	vldr	s14, [r3]
 8001c52:	4b46      	ldr	r3, [pc, #280]	@ (8001d6c <StpperMotorControlled+0x2b0>)
 8001c54:	edd3 7a00 	vldr	s15, [r3]
 8001c58:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001c5c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001c60:	d829      	bhi.n	8001cb6 <StpperMotorControlled+0x1fa>
			if (i3 > 0)
 8001c62:	4b49      	ldr	r3, [pc, #292]	@ (8001d88 <StpperMotorControlled+0x2cc>)
 8001c64:	edd3 7a00 	vldr	s15, [r3]
 8001c68:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001c6c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001c70:	dd05      	ble.n	8001c7e <StpperMotorControlled+0x1c2>
			{
				HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, RESET);
 8001c72:	2200      	movs	r2, #0
 8001c74:	2180      	movs	r1, #128	@ 0x80
 8001c76:	4840      	ldr	r0, [pc, #256]	@ (8001d78 <StpperMotorControlled+0x2bc>)
 8001c78:	f001 fe88 	bl	800398c <HAL_GPIO_WritePin>
 8001c7c:	e004      	b.n	8001c88 <StpperMotorControlled+0x1cc>
			}
			else
			{
				HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, SET);
 8001c7e:	2201      	movs	r2, #1
 8001c80:	2180      	movs	r1, #128	@ 0x80
 8001c82:	483d      	ldr	r0, [pc, #244]	@ (8001d78 <StpperMotorControlled+0x2bc>)
 8001c84:	f001 fe82 	bl	800398c <HAL_GPIO_WritePin>
			}
			PWM_write_duty(&StepperR, fabs(i3), 50);
 8001c88:	4b3f      	ldr	r3, [pc, #252]	@ (8001d88 <StpperMotorControlled+0x2cc>)
 8001c8a:	edd3 7a00 	vldr	s15, [r3]
 8001c8e:	eef0 7ae7 	vabs.f32	s15, s15
 8001c92:	eddf 0a3a 	vldr	s1, [pc, #232]	@ 8001d7c <StpperMotorControlled+0x2c0>
 8001c96:	eeb0 0a67 	vmov.f32	s0, s15
 8001c9a:	483c      	ldr	r0, [pc, #240]	@ (8001d8c <StpperMotorControlled+0x2d0>)
 8001c9c:	f7ff f8e0 	bl	8000e60 <PWM_write_duty>
			i3 += 50.0;
 8001ca0:	4b39      	ldr	r3, [pc, #228]	@ (8001d88 <StpperMotorControlled+0x2cc>)
 8001ca2:	edd3 7a00 	vldr	s15, [r3]
 8001ca6:	ed9f 7a35 	vldr	s14, [pc, #212]	@ 8001d7c <StpperMotorControlled+0x2c0>
 8001caa:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001cae:	4b36      	ldr	r3, [pc, #216]	@ (8001d88 <StpperMotorControlled+0x2cc>)
 8001cb0:	edc3 7a00 	vstr	s15, [r3]
//				PWM_write_duty(&StepperL, 0, 50);
//				PWM_write_duty(&StepperR, 0, 50);
//			}
//		}
//	}
}
 8001cb4:	e053      	b.n	8001d5e <StpperMotorControlled+0x2a2>
			prev_Speed_R = Speed_R;
 8001cb6:	4b2d      	ldr	r3, [pc, #180]	@ (8001d6c <StpperMotorControlled+0x2b0>)
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	4a32      	ldr	r2, [pc, #200]	@ (8001d84 <StpperMotorControlled+0x2c8>)
 8001cbc:	6013      	str	r3, [r2, #0]
			i3 = prev_Speed_R;
 8001cbe:	4b31      	ldr	r3, [pc, #196]	@ (8001d84 <StpperMotorControlled+0x2c8>)
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	4a31      	ldr	r2, [pc, #196]	@ (8001d88 <StpperMotorControlled+0x2cc>)
 8001cc4:	6013      	str	r3, [r2, #0]
}
 8001cc6:	e04a      	b.n	8001d5e <StpperMotorControlled+0x2a2>
	else if (Speed_R-prev_Speed_R < 0){
 8001cc8:	4b28      	ldr	r3, [pc, #160]	@ (8001d6c <StpperMotorControlled+0x2b0>)
 8001cca:	ed93 7a00 	vldr	s14, [r3]
 8001cce:	4b2d      	ldr	r3, [pc, #180]	@ (8001d84 <StpperMotorControlled+0x2c8>)
 8001cd0:	edd3 7a00 	vldr	s15, [r3]
 8001cd4:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001cd8:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001cdc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001ce0:	d400      	bmi.n	8001ce4 <StpperMotorControlled+0x228>
}
 8001ce2:	e03c      	b.n	8001d5e <StpperMotorControlled+0x2a2>
		if (i3 >= Speed_R){
 8001ce4:	4b28      	ldr	r3, [pc, #160]	@ (8001d88 <StpperMotorControlled+0x2cc>)
 8001ce6:	ed93 7a00 	vldr	s14, [r3]
 8001cea:	4b20      	ldr	r3, [pc, #128]	@ (8001d6c <StpperMotorControlled+0x2b0>)
 8001cec:	edd3 7a00 	vldr	s15, [r3]
 8001cf0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001cf4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001cf8:	db29      	blt.n	8001d4e <StpperMotorControlled+0x292>
			if (i3 > 0)
 8001cfa:	4b23      	ldr	r3, [pc, #140]	@ (8001d88 <StpperMotorControlled+0x2cc>)
 8001cfc:	edd3 7a00 	vldr	s15, [r3]
 8001d00:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001d04:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001d08:	dd05      	ble.n	8001d16 <StpperMotorControlled+0x25a>
				HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, RESET);
 8001d0a:	2200      	movs	r2, #0
 8001d0c:	2180      	movs	r1, #128	@ 0x80
 8001d0e:	481a      	ldr	r0, [pc, #104]	@ (8001d78 <StpperMotorControlled+0x2bc>)
 8001d10:	f001 fe3c 	bl	800398c <HAL_GPIO_WritePin>
 8001d14:	e004      	b.n	8001d20 <StpperMotorControlled+0x264>
				HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, SET);
 8001d16:	2201      	movs	r2, #1
 8001d18:	2180      	movs	r1, #128	@ 0x80
 8001d1a:	4817      	ldr	r0, [pc, #92]	@ (8001d78 <StpperMotorControlled+0x2bc>)
 8001d1c:	f001 fe36 	bl	800398c <HAL_GPIO_WritePin>
			PWM_write_duty(&StepperR, fabs(i3), 50);
 8001d20:	4b19      	ldr	r3, [pc, #100]	@ (8001d88 <StpperMotorControlled+0x2cc>)
 8001d22:	edd3 7a00 	vldr	s15, [r3]
 8001d26:	eef0 7ae7 	vabs.f32	s15, s15
 8001d2a:	eddf 0a14 	vldr	s1, [pc, #80]	@ 8001d7c <StpperMotorControlled+0x2c0>
 8001d2e:	eeb0 0a67 	vmov.f32	s0, s15
 8001d32:	4816      	ldr	r0, [pc, #88]	@ (8001d8c <StpperMotorControlled+0x2d0>)
 8001d34:	f7ff f894 	bl	8000e60 <PWM_write_duty>
			i3 -= 50.0;
 8001d38:	4b13      	ldr	r3, [pc, #76]	@ (8001d88 <StpperMotorControlled+0x2cc>)
 8001d3a:	edd3 7a00 	vldr	s15, [r3]
 8001d3e:	ed9f 7a0f 	vldr	s14, [pc, #60]	@ 8001d7c <StpperMotorControlled+0x2c0>
 8001d42:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8001d46:	4b10      	ldr	r3, [pc, #64]	@ (8001d88 <StpperMotorControlled+0x2cc>)
 8001d48:	edc3 7a00 	vstr	s15, [r3]
}
 8001d4c:	e007      	b.n	8001d5e <StpperMotorControlled+0x2a2>
			prev_Speed_R = Speed_R;
 8001d4e:	4b07      	ldr	r3, [pc, #28]	@ (8001d6c <StpperMotorControlled+0x2b0>)
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	4a0c      	ldr	r2, [pc, #48]	@ (8001d84 <StpperMotorControlled+0x2c8>)
 8001d54:	6013      	str	r3, [r2, #0]
			i3 = prev_Speed_R;
 8001d56:	4b0b      	ldr	r3, [pc, #44]	@ (8001d84 <StpperMotorControlled+0x2c8>)
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	4a0b      	ldr	r2, [pc, #44]	@ (8001d88 <StpperMotorControlled+0x2cc>)
 8001d5c:	6013      	str	r3, [r2, #0]
}
 8001d5e:	bf00      	nop
 8001d60:	bd80      	pop	{r7, pc}
 8001d62:	bf00      	nop
 8001d64:	20003fb0 	.word	0x20003fb0
 8001d68:	432a0000 	.word	0x432a0000
 8001d6c:	20003fb4 	.word	0x20003fb4
 8001d70:	20003fb8 	.word	0x20003fb8
 8001d74:	20003fc4 	.word	0x20003fc4
 8001d78:	40020000 	.word	0x40020000
 8001d7c:	42480000 	.word	0x42480000
 8001d80:	20003fcc 	.word	0x20003fcc
 8001d84:	20003fbc 	.word	0x20003fbc
 8001d88:	20003fc8 	.word	0x20003fc8
 8001d8c:	20003fe4 	.word	0x20003fe4

08001d90 <BrusheMotorControlled>:
void BrusheMotorControlled()
{
 8001d90:	b580      	push	{r7, lr}
 8001d92:	af00      	add	r7, sp, #0
	if (Brush)
 8001d94:	4b0d      	ldr	r3, [pc, #52]	@ (8001dcc <BrusheMotorControlled+0x3c>)
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	2b00      	cmp	r3, #0
 8001d9a:	d00d      	beq.n	8001db8 <BrusheMotorControlled+0x28>
	{
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8, RESET);
 8001d9c:	2200      	movs	r2, #0
 8001d9e:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001da2:	480b      	ldr	r0, [pc, #44]	@ (8001dd0 <BrusheMotorControlled+0x40>)
 8001da4:	f001 fdf2 	bl	800398c <HAL_GPIO_WritePin>
		PWM_write_duty(&BrushMTR, 2000, 100);
 8001da8:	eddf 0a0a 	vldr	s1, [pc, #40]	@ 8001dd4 <BrusheMotorControlled+0x44>
 8001dac:	ed9f 0a0a 	vldr	s0, [pc, #40]	@ 8001dd8 <BrusheMotorControlled+0x48>
 8001db0:	480a      	ldr	r0, [pc, #40]	@ (8001ddc <BrusheMotorControlled+0x4c>)
 8001db2:	f7ff f855 	bl	8000e60 <PWM_write_duty>
	}
	else
	{
		PWM_write_duty(&BrushMTR, 2000, 0);
	}
}
 8001db6:	e006      	b.n	8001dc6 <BrusheMotorControlled+0x36>
		PWM_write_duty(&BrushMTR, 2000, 0);
 8001db8:	eddf 0a09 	vldr	s1, [pc, #36]	@ 8001de0 <BrusheMotorControlled+0x50>
 8001dbc:	ed9f 0a06 	vldr	s0, [pc, #24]	@ 8001dd8 <BrusheMotorControlled+0x48>
 8001dc0:	4806      	ldr	r0, [pc, #24]	@ (8001ddc <BrusheMotorControlled+0x4c>)
 8001dc2:	f7ff f84d 	bl	8000e60 <PWM_write_duty>
}
 8001dc6:	bf00      	nop
 8001dc8:	bd80      	pop	{r7, pc}
 8001dca:	bf00      	nop
 8001dcc:	20003fc0 	.word	0x20003fc0
 8001dd0:	40020400 	.word	0x40020400
 8001dd4:	42c80000 	.word	0x42c80000
 8001dd8:	44fa0000 	.word	0x44fa0000
 8001ddc:	20003ffc 	.word	0x20003ffc
 8001de0:	00000000 	.word	0x00000000

08001de4 <ServoControlled>:
void ServoControlled()
{
 8001de4:	b480      	push	{r7}
 8001de6:	af00      	add	r7, sp, #0
	__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_1, Servo_switch);
 8001de8:	4b04      	ldr	r3, [pc, #16]	@ (8001dfc <ServoControlled+0x18>)
 8001dea:	681a      	ldr	r2, [r3, #0]
 8001dec:	4b04      	ldr	r3, [pc, #16]	@ (8001e00 <ServoControlled+0x1c>)
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	635a      	str	r2, [r3, #52]	@ 0x34
//	}
//	else
//	{
//		__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_1, 600);
//	}
}
 8001df2:	bf00      	nop
 8001df4:	46bd      	mov	sp, r7
 8001df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dfa:	4770      	bx	lr
 8001dfc:	20000000 	.word	0x20000000
 8001e00:	20003e5c 	.word	0x20003e5c

08001e04 <subscription_callback_L>:
void subscription_callback_L(const void * msgin)
{
 8001e04:	b480      	push	{r7}
 8001e06:	b085      	sub	sp, #20
 8001e08:	af00      	add	r7, sp, #0
 8001e0a:	6078      	str	r0, [r7, #4]
    const std_msgs__msg__Float32 * msg = (const std_msgs__msg__Float32 *)msgin;
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	60fb      	str	r3, [r7, #12]

//    Speed = msg->data;
    Speed_L = msg->data;
 8001e10:	68fb      	ldr	r3, [r7, #12]
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	4a03      	ldr	r2, [pc, #12]	@ (8001e24 <subscription_callback_L+0x20>)
 8001e16:	6013      	str	r3, [r2, #0]
}
 8001e18:	bf00      	nop
 8001e1a:	3714      	adds	r7, #20
 8001e1c:	46bd      	mov	sp, r7
 8001e1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e22:	4770      	bx	lr
 8001e24:	20003fb0 	.word	0x20003fb0

08001e28 <subscription_callback_R>:

void subscription_callback_R(const void * msgin)
{
 8001e28:	b480      	push	{r7}
 8001e2a:	b085      	sub	sp, #20
 8001e2c:	af00      	add	r7, sp, #0
 8001e2e:	6078      	str	r0, [r7, #4]
    const std_msgs__msg__Float32 * msg = (const std_msgs__msg__Float32 *)msgin;
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	60fb      	str	r3, [r7, #12]
    Speed_R = msg->data;  // Update Turn (or handle the message however you need)
 8001e34:	68fb      	ldr	r3, [r7, #12]
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	4a03      	ldr	r2, [pc, #12]	@ (8001e48 <subscription_callback_R+0x20>)
 8001e3a:	6013      	str	r3, [r2, #0]
}
 8001e3c:	bf00      	nop
 8001e3e:	3714      	adds	r7, #20
 8001e40:	46bd      	mov	sp, r7
 8001e42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e46:	4770      	bx	lr
 8001e48:	20003fb4 	.word	0x20003fb4

08001e4c <subscription_callback_servo>:

void subscription_callback_servo(const void * msgin)
{
 8001e4c:	b480      	push	{r7}
 8001e4e:	b085      	sub	sp, #20
 8001e50:	af00      	add	r7, sp, #0
 8001e52:	6078      	str	r0, [r7, #4]
	const std_msgs__msg__Int32 * msg = (const std_msgs__msg__Int32 *)msgin;
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	60fb      	str	r3, [r7, #12]
	Servo_switch = msg->data;
 8001e58:	68fb      	ldr	r3, [r7, #12]
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	4a03      	ldr	r2, [pc, #12]	@ (8001e6c <subscription_callback_servo+0x20>)
 8001e5e:	6013      	str	r3, [r2, #0]

}
 8001e60:	bf00      	nop
 8001e62:	3714      	adds	r7, #20
 8001e64:	46bd      	mov	sp, r7
 8001e66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e6a:	4770      	bx	lr
 8001e6c:	20000000 	.word	0x20000000

08001e70 <subscription_callback_Brush>:

void subscription_callback_Brush(const void * msgin)
{
 8001e70:	b480      	push	{r7}
 8001e72:	b085      	sub	sp, #20
 8001e74:	af00      	add	r7, sp, #0
 8001e76:	6078      	str	r0, [r7, #4]
	const std_msgs__msg__Int32 * msg = (const std_msgs__msg__Int32 *)msgin;
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	60fb      	str	r3, [r7, #12]
	Brush = msg->data;
 8001e7c:	68fb      	ldr	r3, [r7, #12]
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	4a03      	ldr	r2, [pc, #12]	@ (8001e90 <subscription_callback_Brush+0x20>)
 8001e82:	6013      	str	r3, [r2, #0]

}
 8001e84:	bf00      	nop
 8001e86:	3714      	adds	r7, #20
 8001e88:	46bd      	mov	sp, r7
 8001e8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e8e:	4770      	bx	lr
 8001e90:	20003fc0 	.word	0x20003fc0
 8001e94:	00000000 	.word	0x00000000

08001e98 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8001e98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001e9c:	b0d1      	sub	sp, #324	@ 0x144
 8001e9e:	af02      	add	r7, sp, #8
 8001ea0:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8001ea4:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8001ea8:	6018      	str	r0, [r3, #0]
//    msg.data++;
//    osDelay(10);
//    rclc_executor_spin_some(&executor, RCL_MS_TO_NS(100));
//  }
//
	 setenv("ROS_DOMAIN_ID", "1", 1);
 8001eaa:	2201      	movs	r2, #1
 8001eac:	497e      	ldr	r1, [pc, #504]	@ (80020a8 <StartDefaultTask+0x210>)
 8001eae:	487f      	ldr	r0, [pc, #508]	@ (80020ac <StartDefaultTask+0x214>)
 8001eb0:	f013 fc7c 	bl	80157ac <setenv>


	 rmw_uros_set_custom_transport(
 8001eb4:	4b7e      	ldr	r3, [pc, #504]	@ (80020b0 <StartDefaultTask+0x218>)
 8001eb6:	9301      	str	r3, [sp, #4]
 8001eb8:	4b7e      	ldr	r3, [pc, #504]	@ (80020b4 <StartDefaultTask+0x21c>)
 8001eba:	9300      	str	r3, [sp, #0]
 8001ebc:	4b7e      	ldr	r3, [pc, #504]	@ (80020b8 <StartDefaultTask+0x220>)
 8001ebe:	4a7f      	ldr	r2, [pc, #508]	@ (80020bc <StartDefaultTask+0x224>)
 8001ec0:	497f      	ldr	r1, [pc, #508]	@ (80020c0 <StartDefaultTask+0x228>)
 8001ec2:	2001      	movs	r0, #1
 8001ec4:	f008 fb4c 	bl	800a560 <rmw_uros_set_custom_transport>
	    cubemx_transport_open,
	    cubemx_transport_close,
	    cubemx_transport_write,
	    cubemx_transport_read);

	  rcl_allocator_t freeRTOS_allocator = rcutils_get_zero_initialized_allocator();
 8001ec8:	f507 7392 	add.w	r3, r7, #292	@ 0x124
 8001ecc:	4618      	mov	r0, r3
 8001ece:	f008 fa67 	bl	800a3a0 <rcutils_get_zero_initialized_allocator>
	  freeRTOS_allocator.allocate = microros_allocate;
 8001ed2:	4b7c      	ldr	r3, [pc, #496]	@ (80020c4 <StartDefaultTask+0x22c>)
 8001ed4:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
	  freeRTOS_allocator.deallocate = microros_deallocate;
 8001ed8:	4b7b      	ldr	r3, [pc, #492]	@ (80020c8 <StartDefaultTask+0x230>)
 8001eda:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
	  freeRTOS_allocator.reallocate = microros_reallocate;
 8001ede:	4b7b      	ldr	r3, [pc, #492]	@ (80020cc <StartDefaultTask+0x234>)
 8001ee0:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
	  freeRTOS_allocator.zero_allocate = microros_zero_allocate;
 8001ee4:	4b7a      	ldr	r3, [pc, #488]	@ (80020d0 <StartDefaultTask+0x238>)
 8001ee6:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130

	  if (!rcutils_set_default_allocator(&freeRTOS_allocator)) {
 8001eea:	f507 7392 	add.w	r3, r7, #292	@ 0x124
 8001eee:	4618      	mov	r0, r3
 8001ef0:	f008 fa64 	bl	800a3bc <rcutils_set_default_allocator>
 8001ef4:	4603      	mov	r3, r0
 8001ef6:	f083 0301 	eor.w	r3, r3, #1
 8001efa:	b2db      	uxtb	r3, r3
 8001efc:	2b00      	cmp	r3, #0
 8001efe:	d004      	beq.n	8001f0a <StartDefaultTask+0x72>
	      printf("Error on default allocators (line %d)\n", __LINE__);
 8001f00:	f240 31de 	movw	r1, #990	@ 0x3de
 8001f04:	4873      	ldr	r0, [pc, #460]	@ (80020d4 <StartDefaultTask+0x23c>)
 8001f06:	f013 fdb5 	bl	8015a74 <iprintf>
	  rclc_support_t support;
	  rcl_allocator_t allocator;
	  rcl_node_t node;
	  rclc_executor_t executor;

	  allocator = rcl_get_default_allocator();
 8001f0a:	463b      	mov	r3, r7
 8001f0c:	4618      	mov	r0, r3
 8001f0e:	f008 fa73 	bl	800a3f8 <rcutils_get_default_allocator>
 8001f12:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8001f16:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 8001f1a:	f107 06bc 	add.w	r6, r7, #188	@ 0xbc
 8001f1e:	469c      	mov	ip, r3
 8001f20:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8001f24:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8001f26:	f8dc 3000 	ldr.w	r3, [ip]
 8001f2a:	6033      	str	r3, [r6, #0]

	  rcl_init_options_t init_options = rcl_get_zero_initialized_init_options();
 8001f2c:	f007 fa74 	bl	8009418 <rcl_get_zero_initialized_init_options>
 8001f30:	4602      	mov	r2, r0
 8001f32:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8001f36:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8001f3a:	601a      	str	r2, [r3, #0]
	  rcl_init_options_init(&init_options, allocator);
 8001f3c:	f107 0624 	add.w	r6, r7, #36	@ 0x24
 8001f40:	466a      	mov	r2, sp
 8001f42:	f107 03c8 	add.w	r3, r7, #200	@ 0xc8
 8001f46:	e893 0003 	ldmia.w	r3, {r0, r1}
 8001f4a:	e882 0003 	stmia.w	r2, {r0, r1}
 8001f4e:	f107 03bc 	add.w	r3, r7, #188	@ 0xbc
 8001f52:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001f54:	4630      	mov	r0, r6
 8001f56:	f007 fa61 	bl	800941c <rcl_init_options_init>
	  rcl_init_options_set_domain_id(&init_options, 1);
 8001f5a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001f5e:	2101      	movs	r1, #1
 8001f60:	4618      	mov	r0, r3
 8001f62:	f007 fb57 	bl	8009614 <rcl_init_options_set_domain_id>

	  // Initialize rclc support object with custom options
//	  rclc_support_t support;
	  rclc_support_init_with_options(&support, 0, NULL, &init_options, &allocator);
 8001f66:	f107 0224 	add.w	r2, r7, #36	@ 0x24
 8001f6a:	f107 00d0 	add.w	r0, r7, #208	@ 0xd0
 8001f6e:	f107 03bc 	add.w	r3, r7, #188	@ 0xbc
 8001f72:	9300      	str	r3, [sp, #0]
 8001f74:	4613      	mov	r3, r2
 8001f76:	2200      	movs	r2, #0
 8001f78:	2100      	movs	r1, #0
 8001f7a:	f008 f965 	bl	800a248 <rclc_support_init_with_options>
	  // Create init_options
//	  rclc_support_init(&support, 0, NULL, &allocator);
//	  rclc_support_init_with_options(&support, 0, NULL, &init_options, &allocator);

	  // Create node
	  rclc_node_init_default(&node, "cubemx_node", "", &support);
 8001f7e:	f107 03d0 	add.w	r3, r7, #208	@ 0xd0
 8001f82:	f107 00b4 	add.w	r0, r7, #180	@ 0xb4
 8001f86:	4a54      	ldr	r2, [pc, #336]	@ (80020d8 <StartDefaultTask+0x240>)
 8001f88:	4954      	ldr	r1, [pc, #336]	@ (80020dc <StartDefaultTask+0x244>)
 8001f8a:	f008 f991 	bl	800a2b0 <rclc_node_init_default>

	  // Create subscriber
	  rclc_subscription_init_default(
 8001f8e:	f009 fbe3 	bl	800b758 <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Float32>
 8001f92:	4602      	mov	r2, r0
 8001f94:	f107 01b4 	add.w	r1, r7, #180	@ 0xb4
 8001f98:	f507 7090 	add.w	r0, r7, #288	@ 0x120
 8001f9c:	4b50      	ldr	r3, [pc, #320]	@ (80020e0 <StartDefaultTask+0x248>)
 8001f9e:	f008 f9c3 	bl	800a328 <rclc_subscription_init_default>
	    &subscriber_L,
	    &node,
	    ROSIDL_GET_MSG_TYPE_SUPPORT(std_msgs, msg, Float32),
	    "cubemx_publisher_L");

	    rclc_subscription_init_default(
 8001fa2:	f009 fbd9 	bl	800b758 <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Float32>
 8001fa6:	4602      	mov	r2, r0
 8001fa8:	f107 01b4 	add.w	r1, r7, #180	@ 0xb4
 8001fac:	f507 708c 	add.w	r0, r7, #280	@ 0x118
 8001fb0:	4b4c      	ldr	r3, [pc, #304]	@ (80020e4 <StartDefaultTask+0x24c>)
 8001fb2:	f008 f9b9 	bl	800a328 <rclc_subscription_init_default>
	        &subscriber_R,
	        &node,
	        ROSIDL_GET_MSG_TYPE_SUPPORT(std_msgs, msg, Float32),
	        "cubemx_publisher_R");

	    rclc_subscription_init_default(
 8001fb6:	f009 fbe7 	bl	800b788 <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Int32>
 8001fba:	4602      	mov	r2, r0
 8001fbc:	f107 01b4 	add.w	r1, r7, #180	@ 0xb4
 8001fc0:	f507 7088 	add.w	r0, r7, #272	@ 0x110
 8001fc4:	4b48      	ldr	r3, [pc, #288]	@ (80020e8 <StartDefaultTask+0x250>)
 8001fc6:	f008 f9af 	bl	800a328 <rclc_subscription_init_default>
	    	        &subscriber_servo,
	    	        &node,
	    	        ROSIDL_GET_MSG_TYPE_SUPPORT(std_msgs, msg, Int32),
	    	        "cubemx_publisher_servo");

	    rclc_subscription_init_default(
 8001fca:	f009 fbdd 	bl	800b788 <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Int32>
 8001fce:	4602      	mov	r2, r0
 8001fd0:	f107 01b4 	add.w	r1, r7, #180	@ 0xb4
 8001fd4:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8001fd8:	4b44      	ldr	r3, [pc, #272]	@ (80020ec <StartDefaultTask+0x254>)
 8001fda:	f008 f9a5 	bl	800a328 <rclc_subscription_init_default>
	    	    	        &node,
	    	    	        ROSIDL_GET_MSG_TYPE_SUPPORT(std_msgs, msg, Int32),
	    	    	        "cubemx_publisher_Brush");

	  // Initialize the executor
	  rclc_executor_init(&executor, &support.context, 4, &allocator);
 8001fde:	f107 03bc 	add.w	r3, r7, #188	@ 0xbc
 8001fe2:	f107 01d0 	add.w	r1, r7, #208	@ 0xd0
 8001fe6:	f107 0028 	add.w	r0, r7, #40	@ 0x28
 8001fea:	2204      	movs	r2, #4
 8001fec:	f007 fe64 	bl	8009cb8 <rclc_executor_init>

	  // Add the subscriber callback to the executor
	  rclc_executor_add_subscription(&executor, &subscriber_L, &msg_L, subscription_callback_L, ON_NEW_DATA);
 8001ff0:	f507 728e 	add.w	r2, r7, #284	@ 0x11c
 8001ff4:	f507 7190 	add.w	r1, r7, #288	@ 0x120
 8001ff8:	f107 0028 	add.w	r0, r7, #40	@ 0x28
 8001ffc:	2300      	movs	r3, #0
 8001ffe:	9300      	str	r3, [sp, #0]
 8002000:	4b3b      	ldr	r3, [pc, #236]	@ (80020f0 <StartDefaultTask+0x258>)
 8002002:	f007 fec9 	bl	8009d98 <rclc_executor_add_subscription>

	  rclc_executor_add_subscription(&executor, &subscriber_R, &msg_R, subscription_callback_R, ON_NEW_DATA);
 8002006:	f507 728a 	add.w	r2, r7, #276	@ 0x114
 800200a:	f507 718c 	add.w	r1, r7, #280	@ 0x118
 800200e:	f107 0028 	add.w	r0, r7, #40	@ 0x28
 8002012:	2300      	movs	r3, #0
 8002014:	9300      	str	r3, [sp, #0]
 8002016:	4b37      	ldr	r3, [pc, #220]	@ (80020f4 <StartDefaultTask+0x25c>)
 8002018:	f007 febe 	bl	8009d98 <rclc_executor_add_subscription>

	  rclc_executor_add_subscription(&executor, &subscriber_servo, &msg_servo, subscription_callback_servo, ON_NEW_DATA);
 800201c:	f507 7286 	add.w	r2, r7, #268	@ 0x10c
 8002020:	f507 7188 	add.w	r1, r7, #272	@ 0x110
 8002024:	f107 0028 	add.w	r0, r7, #40	@ 0x28
 8002028:	2300      	movs	r3, #0
 800202a:	9300      	str	r3, [sp, #0]
 800202c:	4b32      	ldr	r3, [pc, #200]	@ (80020f8 <StartDefaultTask+0x260>)
 800202e:	f007 feb3 	bl	8009d98 <rclc_executor_add_subscription>

	  rclc_executor_add_subscription(&executor, &subscriber_Brush, &msg_Brush, subscription_callback_Brush, ON_NEW_DATA);
 8002032:	f507 7282 	add.w	r2, r7, #260	@ 0x104
 8002036:	f507 7184 	add.w	r1, r7, #264	@ 0x108
 800203a:	f107 0028 	add.w	r0, r7, #40	@ 0x28
 800203e:	2300      	movs	r3, #0
 8002040:	9300      	str	r3, [sp, #0]
 8002042:	4b2e      	ldr	r3, [pc, #184]	@ (80020fc <StartDefaultTask+0x264>)
 8002044:	f007 fea8 	bl	8009d98 <rclc_executor_add_subscription>

	  for(;;)
	  {
	    // Spin the executor to handle incoming messages
		static uint64_t timestamp = 0;
		if (HAL_GetTick() - timestamp > 100){
 8002048:	f000 fe2c 	bl	8002ca4 <HAL_GetTick>
 800204c:	4603      	mov	r3, r0
 800204e:	2200      	movs	r2, #0
 8002050:	4698      	mov	r8, r3
 8002052:	4691      	mov	r9, r2
 8002054:	4b2a      	ldr	r3, [pc, #168]	@ (8002100 <StartDefaultTask+0x268>)
 8002056:	e9d3 2300 	ldrd	r2, r3, [r3]
 800205a:	ebb8 0402 	subs.w	r4, r8, r2
 800205e:	eb69 0503 	sbc.w	r5, r9, r3
 8002062:	2c65      	cmp	r4, #101	@ 0x65
 8002064:	f175 0300 	sbcs.w	r3, r5, #0
 8002068:	d30e      	bcc.n	8002088 <StartDefaultTask+0x1f0>
			StpperMotorControlled();
 800206a:	f7ff fd27 	bl	8001abc <StpperMotorControlled>
			BrusheMotorControlled();
 800206e:	f7ff fe8f 	bl	8001d90 <BrusheMotorControlled>
			ServoControlled();
 8002072:	f7ff feb7 	bl	8001de4 <ServoControlled>
			timestamp = HAL_GetTick();
 8002076:	f000 fe15 	bl	8002ca4 <HAL_GetTick>
 800207a:	4603      	mov	r3, r0
 800207c:	2200      	movs	r2, #0
 800207e:	469a      	mov	sl, r3
 8002080:	4693      	mov	fp, r2
 8002082:	4b1f      	ldr	r3, [pc, #124]	@ (8002100 <StartDefaultTask+0x268>)
 8002084:	e9c3 ab00 	strd	sl, fp, [r3]
		}
	    rclc_executor_spin_some(&executor, RCL_MS_TO_NS(100));
 8002088:	f107 0128 	add.w	r1, r7, #40	@ 0x28
 800208c:	a304      	add	r3, pc, #16	@ (adr r3, 80020a0 <StartDefaultTask+0x208>)
 800208e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002092:	4608      	mov	r0, r1
 8002094:	f008 f8a0 	bl	800a1d8 <rclc_executor_spin_some>
	    osDelay(10);
 8002098:	200a      	movs	r0, #10
 800209a:	f004 fcef 	bl	8006a7c <osDelay>
	  {
 800209e:	e7d3      	b.n	8002048 <StartDefaultTask+0x1b0>
 80020a0:	05f5e100 	.word	0x05f5e100
 80020a4:	00000000 	.word	0x00000000
 80020a8:	08016bac 	.word	0x08016bac
 80020ac:	08016bb0 	.word	0x08016bb0
 80020b0:	08002b3d 	.word	0x08002b3d
 80020b4:	08002ad5 	.word	0x08002ad5
 80020b8:	08002ab5 	.word	0x08002ab5
 80020bc:	08002a89 	.word	0x08002a89
 80020c0:	20003ea4 	.word	0x20003ea4
 80020c4:	08002135 	.word	0x08002135
 80020c8:	08002179 	.word	0x08002179
 80020cc:	080021b1 	.word	0x080021b1
 80020d0:	0800221d 	.word	0x0800221d
 80020d4:	08016bc0 	.word	0x08016bc0
 80020d8:	08016be8 	.word	0x08016be8
 80020dc:	08016bec 	.word	0x08016bec
 80020e0:	08016bf8 	.word	0x08016bf8
 80020e4:	08016c0c 	.word	0x08016c0c
 80020e8:	08016c20 	.word	0x08016c20
 80020ec:	08016c38 	.word	0x08016c38
 80020f0:	08001e05 	.word	0x08001e05
 80020f4:	08001e29 	.word	0x08001e29
 80020f8:	08001e4d 	.word	0x08001e4d
 80020fc:	08001e71 	.word	0x08001e71
 8002100:	20004018 	.word	0x20004018

08002104 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002104:	b580      	push	{r7, lr}
 8002106:	b082      	sub	sp, #8
 8002108:	af00      	add	r7, sp, #0
 800210a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	4a04      	ldr	r2, [pc, #16]	@ (8002124 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8002112:	4293      	cmp	r3, r2
 8002114:	d101      	bne.n	800211a <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8002116:	f000 fdb1 	bl	8002c7c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800211a:	bf00      	nop
 800211c:	3708      	adds	r7, #8
 800211e:	46bd      	mov	sp, r7
 8002120:	bd80      	pop	{r7, pc}
 8002122:	bf00      	nop
 8002124:	40010000 	.word	0x40010000

08002128 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002128:	b480      	push	{r7}
 800212a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800212c:	b672      	cpsid	i
}
 800212e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002130:	bf00      	nop
 8002132:	e7fd      	b.n	8002130 <Error_Handler+0x8>

08002134 <microros_allocate>:
void vPortFreeMicroROS( void *pv );
void *pvPortReallocMicroROS( void *pv, size_t xWantedSize );
size_t getBlockSize( void *pv );
void *pvPortCallocMicroROS( size_t num, size_t xWantedSize );

void * microros_allocate(size_t size, void * state){
 8002134:	b580      	push	{r7, lr}
 8002136:	b082      	sub	sp, #8
 8002138:	af00      	add	r7, sp, #0
 800213a:	6078      	str	r0, [r7, #4]
 800213c:	6039      	str	r1, [r7, #0]
  (void) state;
  // printf("-- Alloc %d (prev: %d B)\n",size, xPortGetFreeHeapSize());
  absoluteUsedMemory += size;
 800213e:	4b0c      	ldr	r3, [pc, #48]	@ (8002170 <microros_allocate+0x3c>)
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	461a      	mov	r2, r3
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	4413      	add	r3, r2
 8002148:	461a      	mov	r2, r3
 800214a:	4b09      	ldr	r3, [pc, #36]	@ (8002170 <microros_allocate+0x3c>)
 800214c:	601a      	str	r2, [r3, #0]
  usedMemory += size;
 800214e:	4b09      	ldr	r3, [pc, #36]	@ (8002174 <microros_allocate+0x40>)
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	461a      	mov	r2, r3
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	4413      	add	r3, r2
 8002158:	461a      	mov	r2, r3
 800215a:	4b06      	ldr	r3, [pc, #24]	@ (8002174 <microros_allocate+0x40>)
 800215c:	601a      	str	r2, [r3, #0]
  return pvPortMallocMicroROS(size);
 800215e:	6878      	ldr	r0, [r7, #4]
 8002160:	f7fe ff58 	bl	8001014 <pvPortMallocMicroROS>
 8002164:	4603      	mov	r3, r0
}
 8002166:	4618      	mov	r0, r3
 8002168:	3708      	adds	r7, #8
 800216a:	46bd      	mov	sp, r7
 800216c:	bd80      	pop	{r7, pc}
 800216e:	bf00      	nop
 8002170:	20004020 	.word	0x20004020
 8002174:	20004024 	.word	0x20004024

08002178 <microros_deallocate>:

void microros_deallocate(void * pointer, void * state){
 8002178:	b580      	push	{r7, lr}
 800217a:	b082      	sub	sp, #8
 800217c:	af00      	add	r7, sp, #0
 800217e:	6078      	str	r0, [r7, #4]
 8002180:	6039      	str	r1, [r7, #0]
  (void) state;
  // printf("-- Free %d (prev: %d B)\n",getBlockSize(pointer), xPortGetFreeHeapSize());
  if (NULL != pointer){
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	2b00      	cmp	r3, #0
 8002186:	d00c      	beq.n	80021a2 <microros_deallocate+0x2a>
    usedMemory -= getBlockSize(pointer);
 8002188:	6878      	ldr	r0, [r7, #4]
 800218a:	f7ff f867 	bl	800125c <getBlockSize>
 800218e:	4603      	mov	r3, r0
 8002190:	4a06      	ldr	r2, [pc, #24]	@ (80021ac <microros_deallocate+0x34>)
 8002192:	6812      	ldr	r2, [r2, #0]
 8002194:	1ad3      	subs	r3, r2, r3
 8002196:	461a      	mov	r2, r3
 8002198:	4b04      	ldr	r3, [pc, #16]	@ (80021ac <microros_deallocate+0x34>)
 800219a:	601a      	str	r2, [r3, #0]
    vPortFreeMicroROS(pointer);
 800219c:	6878      	ldr	r0, [r7, #4]
 800219e:	f7ff f801 	bl	80011a4 <vPortFreeMicroROS>
  }
}
 80021a2:	bf00      	nop
 80021a4:	3708      	adds	r7, #8
 80021a6:	46bd      	mov	sp, r7
 80021a8:	bd80      	pop	{r7, pc}
 80021aa:	bf00      	nop
 80021ac:	20004024 	.word	0x20004024

080021b0 <microros_reallocate>:

void * microros_reallocate(void * pointer, size_t size, void * state){
 80021b0:	b580      	push	{r7, lr}
 80021b2:	b084      	sub	sp, #16
 80021b4:	af00      	add	r7, sp, #0
 80021b6:	60f8      	str	r0, [r7, #12]
 80021b8:	60b9      	str	r1, [r7, #8]
 80021ba:	607a      	str	r2, [r7, #4]
  (void) state;
  // printf("-- Realloc %d -> %d (prev: %d B)\n",getBlockSize(pointer),size, xPortGetFreeHeapSize());
  absoluteUsedMemory += size;
 80021bc:	4b15      	ldr	r3, [pc, #84]	@ (8002214 <microros_reallocate+0x64>)
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	461a      	mov	r2, r3
 80021c2:	68bb      	ldr	r3, [r7, #8]
 80021c4:	4413      	add	r3, r2
 80021c6:	461a      	mov	r2, r3
 80021c8:	4b12      	ldr	r3, [pc, #72]	@ (8002214 <microros_reallocate+0x64>)
 80021ca:	601a      	str	r2, [r3, #0]
  usedMemory += size;
 80021cc:	4b12      	ldr	r3, [pc, #72]	@ (8002218 <microros_reallocate+0x68>)
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	461a      	mov	r2, r3
 80021d2:	68bb      	ldr	r3, [r7, #8]
 80021d4:	4413      	add	r3, r2
 80021d6:	461a      	mov	r2, r3
 80021d8:	4b0f      	ldr	r3, [pc, #60]	@ (8002218 <microros_reallocate+0x68>)
 80021da:	601a      	str	r2, [r3, #0]
  if (NULL == pointer){
 80021dc:	68fb      	ldr	r3, [r7, #12]
 80021de:	2b00      	cmp	r3, #0
 80021e0:	d104      	bne.n	80021ec <microros_reallocate+0x3c>
    return pvPortMallocMicroROS(size);
 80021e2:	68b8      	ldr	r0, [r7, #8]
 80021e4:	f7fe ff16 	bl	8001014 <pvPortMallocMicroROS>
 80021e8:	4603      	mov	r3, r0
 80021ea:	e00e      	b.n	800220a <microros_reallocate+0x5a>
  } else {
    usedMemory -= getBlockSize(pointer);
 80021ec:	68f8      	ldr	r0, [r7, #12]
 80021ee:	f7ff f835 	bl	800125c <getBlockSize>
 80021f2:	4603      	mov	r3, r0
 80021f4:	4a08      	ldr	r2, [pc, #32]	@ (8002218 <microros_reallocate+0x68>)
 80021f6:	6812      	ldr	r2, [r2, #0]
 80021f8:	1ad3      	subs	r3, r2, r3
 80021fa:	461a      	mov	r2, r3
 80021fc:	4b06      	ldr	r3, [pc, #24]	@ (8002218 <microros_reallocate+0x68>)
 80021fe:	601a      	str	r2, [r3, #0]
    return pvPortReallocMicroROS(pointer,size);
 8002200:	68b9      	ldr	r1, [r7, #8]
 8002202:	68f8      	ldr	r0, [r7, #12]
 8002204:	f7ff f848 	bl	8001298 <pvPortReallocMicroROS>
 8002208:	4603      	mov	r3, r0
  }
}
 800220a:	4618      	mov	r0, r3
 800220c:	3710      	adds	r7, #16
 800220e:	46bd      	mov	sp, r7
 8002210:	bd80      	pop	{r7, pc}
 8002212:	bf00      	nop
 8002214:	20004020 	.word	0x20004020
 8002218:	20004024 	.word	0x20004024

0800221c <microros_zero_allocate>:

void * microros_zero_allocate(size_t number_of_elements, size_t size_of_element, void * state){
 800221c:	b580      	push	{r7, lr}
 800221e:	b084      	sub	sp, #16
 8002220:	af00      	add	r7, sp, #0
 8002222:	60f8      	str	r0, [r7, #12]
 8002224:	60b9      	str	r1, [r7, #8]
 8002226:	607a      	str	r2, [r7, #4]
  (void) state;
  // printf("-- Calloc %d x %d = %d -> (prev: %d B)\n",number_of_elements,size_of_element, number_of_elements*size_of_element, xPortGetFreeHeapSize());
  absoluteUsedMemory += number_of_elements*size_of_element;
 8002228:	68fb      	ldr	r3, [r7, #12]
 800222a:	68ba      	ldr	r2, [r7, #8]
 800222c:	fb02 f303 	mul.w	r3, r2, r3
 8002230:	4a0c      	ldr	r2, [pc, #48]	@ (8002264 <microros_zero_allocate+0x48>)
 8002232:	6812      	ldr	r2, [r2, #0]
 8002234:	4413      	add	r3, r2
 8002236:	461a      	mov	r2, r3
 8002238:	4b0a      	ldr	r3, [pc, #40]	@ (8002264 <microros_zero_allocate+0x48>)
 800223a:	601a      	str	r2, [r3, #0]
  usedMemory += number_of_elements*size_of_element;
 800223c:	68fb      	ldr	r3, [r7, #12]
 800223e:	68ba      	ldr	r2, [r7, #8]
 8002240:	fb02 f303 	mul.w	r3, r2, r3
 8002244:	4a08      	ldr	r2, [pc, #32]	@ (8002268 <microros_zero_allocate+0x4c>)
 8002246:	6812      	ldr	r2, [r2, #0]
 8002248:	4413      	add	r3, r2
 800224a:	461a      	mov	r2, r3
 800224c:	4b06      	ldr	r3, [pc, #24]	@ (8002268 <microros_zero_allocate+0x4c>)
 800224e:	601a      	str	r2, [r3, #0]
  return pvPortCallocMicroROS(number_of_elements,size_of_element);
 8002250:	68b9      	ldr	r1, [r7, #8]
 8002252:	68f8      	ldr	r0, [r7, #12]
 8002254:	f7ff f84d 	bl	80012f2 <pvPortCallocMicroROS>
 8002258:	4603      	mov	r3, r0
 800225a:	4618      	mov	r0, r3
 800225c:	3710      	adds	r7, #16
 800225e:	46bd      	mov	sp, r7
 8002260:	bd80      	pop	{r7, pc}
 8002262:	bf00      	nop
 8002264:	20004020 	.word	0x20004020
 8002268:	20004024 	.word	0x20004024
 800226c:	00000000 	.word	0x00000000

08002270 <UTILS_NanosecondsToTimespec>:
#define NANOSECONDS_PER_SECOND     ( 1000000000LL )                                /**< Nanoseconds per second. */
#define NANOSECONDS_PER_TICK       ( NANOSECONDS_PER_SECOND / configTICK_RATE_HZ ) /**< Nanoseconds per FreeRTOS tick. */

void UTILS_NanosecondsToTimespec( int64_t llSource,
                                  struct timespec * const pxDestination )
{
 8002270:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8002274:	b086      	sub	sp, #24
 8002276:	af00      	add	r7, sp, #0
 8002278:	e9c7 0102 	strd	r0, r1, [r7, #8]
 800227c:	607a      	str	r2, [r7, #4]
    long lCarrySec = 0;
 800227e:	2300      	movs	r3, #0
 8002280:	617b      	str	r3, [r7, #20]

    /* Convert to timespec. */
    pxDestination->tv_sec = ( time_t ) ( llSource / NANOSECONDS_PER_SECOND );
 8002282:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8002286:	a320      	add	r3, pc, #128	@ (adr r3, 8002308 <UTILS_NanosecondsToTimespec+0x98>)
 8002288:	e9d3 2300 	ldrd	r2, r3, [r3]
 800228c:	f7fe fbfe 	bl	8000a8c <__aeabi_ldivmod>
 8002290:	4602      	mov	r2, r0
 8002292:	460b      	mov	r3, r1
 8002294:	6879      	ldr	r1, [r7, #4]
 8002296:	e9c1 2300 	strd	r2, r3, [r1]
    pxDestination->tv_nsec = ( long ) ( llSource % NANOSECONDS_PER_SECOND );
 800229a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800229e:	a31a      	add	r3, pc, #104	@ (adr r3, 8002308 <UTILS_NanosecondsToTimespec+0x98>)
 80022a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80022a4:	f7fe fbf2 	bl	8000a8c <__aeabi_ldivmod>
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	609a      	str	r2, [r3, #8]

    /* Subtract from tv_sec if tv_nsec < 0. */
    if( pxDestination->tv_nsec < 0L )
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	689b      	ldr	r3, [r3, #8]
 80022b0:	2b00      	cmp	r3, #0
 80022b2:	da20      	bge.n	80022f6 <UTILS_NanosecondsToTimespec+0x86>
    {
        /* Compute the number of seconds to carry. */
        lCarrySec = ( pxDestination->tv_nsec / ( long ) NANOSECONDS_PER_SECOND ) + 1L;
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	689b      	ldr	r3, [r3, #8]
 80022b8:	4a11      	ldr	r2, [pc, #68]	@ (8002300 <UTILS_NanosecondsToTimespec+0x90>)
 80022ba:	fb82 1203 	smull	r1, r2, r2, r3
 80022be:	1712      	asrs	r2, r2, #28
 80022c0:	17db      	asrs	r3, r3, #31
 80022c2:	1ad3      	subs	r3, r2, r3
 80022c4:	3301      	adds	r3, #1
 80022c6:	617b      	str	r3, [r7, #20]

        pxDestination->tv_sec -= ( time_t ) ( lCarrySec );
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80022ce:	6979      	ldr	r1, [r7, #20]
 80022d0:	17c8      	asrs	r0, r1, #31
 80022d2:	460c      	mov	r4, r1
 80022d4:	4605      	mov	r5, r0
 80022d6:	ebb2 0804 	subs.w	r8, r2, r4
 80022da:	eb63 0905 	sbc.w	r9, r3, r5
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	e9c3 8900 	strd	r8, r9, [r3]
        pxDestination->tv_nsec += lCarrySec * ( long ) NANOSECONDS_PER_SECOND;
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	689a      	ldr	r2, [r3, #8]
 80022e8:	697b      	ldr	r3, [r7, #20]
 80022ea:	4906      	ldr	r1, [pc, #24]	@ (8002304 <UTILS_NanosecondsToTimespec+0x94>)
 80022ec:	fb01 f303 	mul.w	r3, r1, r3
 80022f0:	441a      	add	r2, r3
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	609a      	str	r2, [r3, #8]
    }
}
 80022f6:	bf00      	nop
 80022f8:	3718      	adds	r7, #24
 80022fa:	46bd      	mov	sp, r7
 80022fc:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8002300:	44b82fa1 	.word	0x44b82fa1
 8002304:	3b9aca00 	.word	0x3b9aca00
 8002308:	3b9aca00 	.word	0x3b9aca00
 800230c:	00000000 	.word	0x00000000

08002310 <clock_gettime>:

int clock_gettime( int clock_id,
                   struct timespec * tp )
{
 8002310:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002314:	b08e      	sub	sp, #56	@ 0x38
 8002316:	af00      	add	r7, sp, #0
 8002318:	6278      	str	r0, [r7, #36]	@ 0x24
 800231a:	6239      	str	r1, [r7, #32]
    TimeOut_t xCurrentTime = { 0 };
 800231c:	f107 0228 	add.w	r2, r7, #40	@ 0x28
 8002320:	2300      	movs	r3, #0
 8002322:	6013      	str	r3, [r2, #0]
 8002324:	6053      	str	r3, [r2, #4]

    /* Intermediate variable used to convert TimeOut_t to struct timespec.
     * Also used to detect overflow issues. It must be unsigned because the
     * behavior of signed integer overflow is undefined. */
    uint64_t ullTickCount = 0ULL;
 8002326:	f04f 0200 	mov.w	r2, #0
 800232a:	f04f 0300 	mov.w	r3, #0
 800232e:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30
    /* Silence warnings about unused parameters. */
    ( void ) clock_id;

    /* Get the current tick count and overflow count. vTaskSetTimeOutState()
     * is used to get these values because they are both static in tasks.c. */
    vTaskSetTimeOutState( &xCurrentTime );
 8002332:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8002336:	4618      	mov	r0, r3
 8002338:	f005 fe6c 	bl	8008014 <vTaskSetTimeOutState>

    /* Adjust the tick count for the number of times a TickType_t has overflowed.
     * portMAX_DELAY should be the maximum value of a TickType_t. */
    ullTickCount = ( uint64_t ) ( xCurrentTime.xOverflowCount ) << ( sizeof( TickType_t ) * 8 );
 800233c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800233e:	17da      	asrs	r2, r3, #31
 8002340:	61bb      	str	r3, [r7, #24]
 8002342:	61fa      	str	r2, [r7, #28]
 8002344:	f04f 0200 	mov.w	r2, #0
 8002348:	f04f 0300 	mov.w	r3, #0
 800234c:	69b9      	ldr	r1, [r7, #24]
 800234e:	000b      	movs	r3, r1
 8002350:	2200      	movs	r2, #0
 8002352:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30

    /* Add the current tick count. */
    ullTickCount += xCurrentTime.xTimeOnEntering;
 8002356:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002358:	2200      	movs	r2, #0
 800235a:	461c      	mov	r4, r3
 800235c:	4615      	mov	r5, r2
 800235e:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 8002362:	1911      	adds	r1, r2, r4
 8002364:	60b9      	str	r1, [r7, #8]
 8002366:	416b      	adcs	r3, r5
 8002368:	60fb      	str	r3, [r7, #12]
 800236a:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 800236e:	e9c7 340c 	strd	r3, r4, [r7, #48]	@ 0x30

    /* Convert ullTickCount to timespec. */
    UTILS_NanosecondsToTimespec( ( int64_t ) ullTickCount * NANOSECONDS_PER_TICK, tp );
 8002372:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	@ 0x30
 8002376:	4602      	mov	r2, r0
 8002378:	460b      	mov	r3, r1
 800237a:	f04f 0400 	mov.w	r4, #0
 800237e:	f04f 0500 	mov.w	r5, #0
 8002382:	015d      	lsls	r5, r3, #5
 8002384:	ea45 65d2 	orr.w	r5, r5, r2, lsr #27
 8002388:	0154      	lsls	r4, r2, #5
 800238a:	4622      	mov	r2, r4
 800238c:	462b      	mov	r3, r5
 800238e:	ebb2 0800 	subs.w	r8, r2, r0
 8002392:	eb63 0901 	sbc.w	r9, r3, r1
 8002396:	f04f 0200 	mov.w	r2, #0
 800239a:	f04f 0300 	mov.w	r3, #0
 800239e:	ea4f 2349 	mov.w	r3, r9, lsl #9
 80023a2:	ea43 53d8 	orr.w	r3, r3, r8, lsr #23
 80023a6:	ea4f 2248 	mov.w	r2, r8, lsl #9
 80023aa:	4690      	mov	r8, r2
 80023ac:	4699      	mov	r9, r3
 80023ae:	eb18 0a00 	adds.w	sl, r8, r0
 80023b2:	eb49 0b01 	adc.w	fp, r9, r1
 80023b6:	f04f 0200 	mov.w	r2, #0
 80023ba:	f04f 0300 	mov.w	r3, #0
 80023be:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80023c2:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80023c6:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80023ca:	ebb2 040a 	subs.w	r4, r2, sl
 80023ce:	603c      	str	r4, [r7, #0]
 80023d0:	eb63 030b 	sbc.w	r3, r3, fp
 80023d4:	607b      	str	r3, [r7, #4]
 80023d6:	e9d7 4500 	ldrd	r4, r5, [r7]
 80023da:	4623      	mov	r3, r4
 80023dc:	181b      	adds	r3, r3, r0
 80023de:	613b      	str	r3, [r7, #16]
 80023e0:	462b      	mov	r3, r5
 80023e2:	eb41 0303 	adc.w	r3, r1, r3
 80023e6:	617b      	str	r3, [r7, #20]
 80023e8:	6a3a      	ldr	r2, [r7, #32]
 80023ea:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80023ee:	f7ff ff3f 	bl	8002270 <UTILS_NanosecondsToTimespec>

    return 0;
 80023f2:	2300      	movs	r3, #0
 80023f4:	4618      	mov	r0, r3
 80023f6:	3738      	adds	r7, #56	@ 0x38
 80023f8:	46bd      	mov	sp, r7
 80023fa:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
	...

08002400 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                            /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002400:	b580      	push	{r7, lr}
 8002402:	b082      	sub	sp, #8
 8002404:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002406:	2300      	movs	r3, #0
 8002408:	607b      	str	r3, [r7, #4]
 800240a:	4b12      	ldr	r3, [pc, #72]	@ (8002454 <HAL_MspInit+0x54>)
 800240c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800240e:	4a11      	ldr	r2, [pc, #68]	@ (8002454 <HAL_MspInit+0x54>)
 8002410:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002414:	6453      	str	r3, [r2, #68]	@ 0x44
 8002416:	4b0f      	ldr	r3, [pc, #60]	@ (8002454 <HAL_MspInit+0x54>)
 8002418:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800241a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800241e:	607b      	str	r3, [r7, #4]
 8002420:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002422:	2300      	movs	r3, #0
 8002424:	603b      	str	r3, [r7, #0]
 8002426:	4b0b      	ldr	r3, [pc, #44]	@ (8002454 <HAL_MspInit+0x54>)
 8002428:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800242a:	4a0a      	ldr	r2, [pc, #40]	@ (8002454 <HAL_MspInit+0x54>)
 800242c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002430:	6413      	str	r3, [r2, #64]	@ 0x40
 8002432:	4b08      	ldr	r3, [pc, #32]	@ (8002454 <HAL_MspInit+0x54>)
 8002434:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002436:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800243a:	603b      	str	r3, [r7, #0]
 800243c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800243e:	2200      	movs	r2, #0
 8002440:	210f      	movs	r1, #15
 8002442:	f06f 0001 	mvn.w	r0, #1
 8002446:	f000 fcf1 	bl	8002e2c <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800244a:	bf00      	nop
 800244c:	3708      	adds	r7, #8
 800244e:	46bd      	mov	sp, r7
 8002450:	bd80      	pop	{r7, pc}
 8002452:	bf00      	nop
 8002454:	40023800 	.word	0x40023800

08002458 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002458:	b480      	push	{r7}
 800245a:	b087      	sub	sp, #28
 800245c:	af00      	add	r7, sp, #0
 800245e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002468:	d10e      	bne.n	8002488 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800246a:	2300      	movs	r3, #0
 800246c:	617b      	str	r3, [r7, #20]
 800246e:	4b1d      	ldr	r3, [pc, #116]	@ (80024e4 <HAL_TIM_Base_MspInit+0x8c>)
 8002470:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002472:	4a1c      	ldr	r2, [pc, #112]	@ (80024e4 <HAL_TIM_Base_MspInit+0x8c>)
 8002474:	f043 0301 	orr.w	r3, r3, #1
 8002478:	6413      	str	r3, [r2, #64]	@ 0x40
 800247a:	4b1a      	ldr	r3, [pc, #104]	@ (80024e4 <HAL_TIM_Base_MspInit+0x8c>)
 800247c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800247e:	f003 0301 	and.w	r3, r3, #1
 8002482:	617b      	str	r3, [r7, #20]
 8002484:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8002486:	e026      	b.n	80024d6 <HAL_TIM_Base_MspInit+0x7e>
  else if(htim_base->Instance==TIM3)
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	4a16      	ldr	r2, [pc, #88]	@ (80024e8 <HAL_TIM_Base_MspInit+0x90>)
 800248e:	4293      	cmp	r3, r2
 8002490:	d10e      	bne.n	80024b0 <HAL_TIM_Base_MspInit+0x58>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002492:	2300      	movs	r3, #0
 8002494:	613b      	str	r3, [r7, #16]
 8002496:	4b13      	ldr	r3, [pc, #76]	@ (80024e4 <HAL_TIM_Base_MspInit+0x8c>)
 8002498:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800249a:	4a12      	ldr	r2, [pc, #72]	@ (80024e4 <HAL_TIM_Base_MspInit+0x8c>)
 800249c:	f043 0302 	orr.w	r3, r3, #2
 80024a0:	6413      	str	r3, [r2, #64]	@ 0x40
 80024a2:	4b10      	ldr	r3, [pc, #64]	@ (80024e4 <HAL_TIM_Base_MspInit+0x8c>)
 80024a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80024a6:	f003 0302 	and.w	r3, r3, #2
 80024aa:	613b      	str	r3, [r7, #16]
 80024ac:	693b      	ldr	r3, [r7, #16]
}
 80024ae:	e012      	b.n	80024d6 <HAL_TIM_Base_MspInit+0x7e>
  else if(htim_base->Instance==TIM4)
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	4a0d      	ldr	r2, [pc, #52]	@ (80024ec <HAL_TIM_Base_MspInit+0x94>)
 80024b6:	4293      	cmp	r3, r2
 80024b8:	d10d      	bne.n	80024d6 <HAL_TIM_Base_MspInit+0x7e>
    __HAL_RCC_TIM4_CLK_ENABLE();
 80024ba:	2300      	movs	r3, #0
 80024bc:	60fb      	str	r3, [r7, #12]
 80024be:	4b09      	ldr	r3, [pc, #36]	@ (80024e4 <HAL_TIM_Base_MspInit+0x8c>)
 80024c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80024c2:	4a08      	ldr	r2, [pc, #32]	@ (80024e4 <HAL_TIM_Base_MspInit+0x8c>)
 80024c4:	f043 0304 	orr.w	r3, r3, #4
 80024c8:	6413      	str	r3, [r2, #64]	@ 0x40
 80024ca:	4b06      	ldr	r3, [pc, #24]	@ (80024e4 <HAL_TIM_Base_MspInit+0x8c>)
 80024cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80024ce:	f003 0304 	and.w	r3, r3, #4
 80024d2:	60fb      	str	r3, [r7, #12]
 80024d4:	68fb      	ldr	r3, [r7, #12]
}
 80024d6:	bf00      	nop
 80024d8:	371c      	adds	r7, #28
 80024da:	46bd      	mov	sp, r7
 80024dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024e0:	4770      	bx	lr
 80024e2:	bf00      	nop
 80024e4:	40023800 	.word	0x40023800
 80024e8:	40000400 	.word	0x40000400
 80024ec:	40000800 	.word	0x40000800

080024f0 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80024f0:	b580      	push	{r7, lr}
 80024f2:	b08a      	sub	sp, #40	@ 0x28
 80024f4:	af00      	add	r7, sp, #0
 80024f6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80024f8:	f107 0314 	add.w	r3, r7, #20
 80024fc:	2200      	movs	r2, #0
 80024fe:	601a      	str	r2, [r3, #0]
 8002500:	605a      	str	r2, [r3, #4]
 8002502:	609a      	str	r2, [r3, #8]
 8002504:	60da      	str	r2, [r3, #12]
 8002506:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002510:	d11e      	bne.n	8002550 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002512:	2300      	movs	r3, #0
 8002514:	613b      	str	r3, [r7, #16]
 8002516:	4b34      	ldr	r3, [pc, #208]	@ (80025e8 <HAL_TIM_MspPostInit+0xf8>)
 8002518:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800251a:	4a33      	ldr	r2, [pc, #204]	@ (80025e8 <HAL_TIM_MspPostInit+0xf8>)
 800251c:	f043 0301 	orr.w	r3, r3, #1
 8002520:	6313      	str	r3, [r2, #48]	@ 0x30
 8002522:	4b31      	ldr	r3, [pc, #196]	@ (80025e8 <HAL_TIM_MspPostInit+0xf8>)
 8002524:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002526:	f003 0301 	and.w	r3, r3, #1
 800252a:	613b      	str	r3, [r7, #16]
 800252c:	693b      	ldr	r3, [r7, #16]
    /**TIM2 GPIO Configuration
    PA1     ------> TIM2_CH2
    PA5     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_5;
 800252e:	2322      	movs	r3, #34	@ 0x22
 8002530:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002532:	2302      	movs	r3, #2
 8002534:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002536:	2300      	movs	r3, #0
 8002538:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800253a:	2300      	movs	r3, #0
 800253c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800253e:	2301      	movs	r3, #1
 8002540:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002542:	f107 0314 	add.w	r3, r7, #20
 8002546:	4619      	mov	r1, r3
 8002548:	4828      	ldr	r0, [pc, #160]	@ (80025ec <HAL_TIM_MspPostInit+0xfc>)
 800254a:	f001 f89b 	bl	8003684 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 800254e:	e046      	b.n	80025de <HAL_TIM_MspPostInit+0xee>
  else if(htim->Instance==TIM3)
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	4a26      	ldr	r2, [pc, #152]	@ (80025f0 <HAL_TIM_MspPostInit+0x100>)
 8002556:	4293      	cmp	r3, r2
 8002558:	d11e      	bne.n	8002598 <HAL_TIM_MspPostInit+0xa8>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800255a:	2300      	movs	r3, #0
 800255c:	60fb      	str	r3, [r7, #12]
 800255e:	4b22      	ldr	r3, [pc, #136]	@ (80025e8 <HAL_TIM_MspPostInit+0xf8>)
 8002560:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002562:	4a21      	ldr	r2, [pc, #132]	@ (80025e8 <HAL_TIM_MspPostInit+0xf8>)
 8002564:	f043 0301 	orr.w	r3, r3, #1
 8002568:	6313      	str	r3, [r2, #48]	@ 0x30
 800256a:	4b1f      	ldr	r3, [pc, #124]	@ (80025e8 <HAL_TIM_MspPostInit+0xf8>)
 800256c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800256e:	f003 0301 	and.w	r3, r3, #1
 8002572:	60fb      	str	r3, [r7, #12]
 8002574:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8002576:	2340      	movs	r3, #64	@ 0x40
 8002578:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800257a:	2302      	movs	r3, #2
 800257c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800257e:	2300      	movs	r3, #0
 8002580:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002582:	2300      	movs	r3, #0
 8002584:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8002586:	2302      	movs	r3, #2
 8002588:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800258a:	f107 0314 	add.w	r3, r7, #20
 800258e:	4619      	mov	r1, r3
 8002590:	4816      	ldr	r0, [pc, #88]	@ (80025ec <HAL_TIM_MspPostInit+0xfc>)
 8002592:	f001 f877 	bl	8003684 <HAL_GPIO_Init>
}
 8002596:	e022      	b.n	80025de <HAL_TIM_MspPostInit+0xee>
  else if(htim->Instance==TIM4)
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	4a15      	ldr	r2, [pc, #84]	@ (80025f4 <HAL_TIM_MspPostInit+0x104>)
 800259e:	4293      	cmp	r3, r2
 80025a0:	d11d      	bne.n	80025de <HAL_TIM_MspPostInit+0xee>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80025a2:	2300      	movs	r3, #0
 80025a4:	60bb      	str	r3, [r7, #8]
 80025a6:	4b10      	ldr	r3, [pc, #64]	@ (80025e8 <HAL_TIM_MspPostInit+0xf8>)
 80025a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80025aa:	4a0f      	ldr	r2, [pc, #60]	@ (80025e8 <HAL_TIM_MspPostInit+0xf8>)
 80025ac:	f043 0302 	orr.w	r3, r3, #2
 80025b0:	6313      	str	r3, [r2, #48]	@ 0x30
 80025b2:	4b0d      	ldr	r3, [pc, #52]	@ (80025e8 <HAL_TIM_MspPostInit+0xf8>)
 80025b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80025b6:	f003 0302 	and.w	r3, r3, #2
 80025ba:	60bb      	str	r3, [r7, #8]
 80025bc:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80025be:	2340      	movs	r3, #64	@ 0x40
 80025c0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80025c2:	2302      	movs	r3, #2
 80025c4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025c6:	2300      	movs	r3, #0
 80025c8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80025ca:	2300      	movs	r3, #0
 80025cc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 80025ce:	2302      	movs	r3, #2
 80025d0:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80025d2:	f107 0314 	add.w	r3, r7, #20
 80025d6:	4619      	mov	r1, r3
 80025d8:	4807      	ldr	r0, [pc, #28]	@ (80025f8 <HAL_TIM_MspPostInit+0x108>)
 80025da:	f001 f853 	bl	8003684 <HAL_GPIO_Init>
}
 80025de:	bf00      	nop
 80025e0:	3728      	adds	r7, #40	@ 0x28
 80025e2:	46bd      	mov	sp, r7
 80025e4:	bd80      	pop	{r7, pc}
 80025e6:	bf00      	nop
 80025e8:	40023800 	.word	0x40023800
 80025ec:	40020000 	.word	0x40020000
 80025f0:	40000400 	.word	0x40000400
 80025f4:	40000800 	.word	0x40000800
 80025f8:	40020400 	.word	0x40020400

080025fc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80025fc:	b580      	push	{r7, lr}
 80025fe:	b08a      	sub	sp, #40	@ 0x28
 8002600:	af00      	add	r7, sp, #0
 8002602:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002604:	f107 0314 	add.w	r3, r7, #20
 8002608:	2200      	movs	r2, #0
 800260a:	601a      	str	r2, [r3, #0]
 800260c:	605a      	str	r2, [r3, #4]
 800260e:	609a      	str	r2, [r3, #8]
 8002610:	60da      	str	r2, [r3, #12]
 8002612:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	4a4d      	ldr	r2, [pc, #308]	@ (8002750 <HAL_UART_MspInit+0x154>)
 800261a:	4293      	cmp	r3, r2
 800261c:	f040 8093 	bne.w	8002746 <HAL_UART_MspInit+0x14a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8002620:	2300      	movs	r3, #0
 8002622:	613b      	str	r3, [r7, #16]
 8002624:	4b4b      	ldr	r3, [pc, #300]	@ (8002754 <HAL_UART_MspInit+0x158>)
 8002626:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002628:	4a4a      	ldr	r2, [pc, #296]	@ (8002754 <HAL_UART_MspInit+0x158>)
 800262a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800262e:	6413      	str	r3, [r2, #64]	@ 0x40
 8002630:	4b48      	ldr	r3, [pc, #288]	@ (8002754 <HAL_UART_MspInit+0x158>)
 8002632:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002634:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002638:	613b      	str	r3, [r7, #16]
 800263a:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800263c:	2300      	movs	r3, #0
 800263e:	60fb      	str	r3, [r7, #12]
 8002640:	4b44      	ldr	r3, [pc, #272]	@ (8002754 <HAL_UART_MspInit+0x158>)
 8002642:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002644:	4a43      	ldr	r2, [pc, #268]	@ (8002754 <HAL_UART_MspInit+0x158>)
 8002646:	f043 0301 	orr.w	r3, r3, #1
 800264a:	6313      	str	r3, [r2, #48]	@ 0x30
 800264c:	4b41      	ldr	r3, [pc, #260]	@ (8002754 <HAL_UART_MspInit+0x158>)
 800264e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002650:	f003 0301 	and.w	r3, r3, #1
 8002654:	60fb      	str	r3, [r7, #12]
 8002656:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8002658:	230c      	movs	r3, #12
 800265a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800265c:	2302      	movs	r3, #2
 800265e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002660:	2300      	movs	r3, #0
 8002662:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002664:	2303      	movs	r3, #3
 8002666:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002668:	2307      	movs	r3, #7
 800266a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800266c:	f107 0314 	add.w	r3, r7, #20
 8002670:	4619      	mov	r1, r3
 8002672:	4839      	ldr	r0, [pc, #228]	@ (8002758 <HAL_UART_MspInit+0x15c>)
 8002674:	f001 f806 	bl	8003684 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Stream5;
 8002678:	4b38      	ldr	r3, [pc, #224]	@ (800275c <HAL_UART_MspInit+0x160>)
 800267a:	4a39      	ldr	r2, [pc, #228]	@ (8002760 <HAL_UART_MspInit+0x164>)
 800267c:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Channel = DMA_CHANNEL_4;
 800267e:	4b37      	ldr	r3, [pc, #220]	@ (800275c <HAL_UART_MspInit+0x160>)
 8002680:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8002684:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002686:	4b35      	ldr	r3, [pc, #212]	@ (800275c <HAL_UART_MspInit+0x160>)
 8002688:	2200      	movs	r2, #0
 800268a:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800268c:	4b33      	ldr	r3, [pc, #204]	@ (800275c <HAL_UART_MspInit+0x160>)
 800268e:	2200      	movs	r2, #0
 8002690:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002692:	4b32      	ldr	r3, [pc, #200]	@ (800275c <HAL_UART_MspInit+0x160>)
 8002694:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002698:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800269a:	4b30      	ldr	r3, [pc, #192]	@ (800275c <HAL_UART_MspInit+0x160>)
 800269c:	2200      	movs	r2, #0
 800269e:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80026a0:	4b2e      	ldr	r3, [pc, #184]	@ (800275c <HAL_UART_MspInit+0x160>)
 80026a2:	2200      	movs	r2, #0
 80026a4:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_CIRCULAR;
 80026a6:	4b2d      	ldr	r3, [pc, #180]	@ (800275c <HAL_UART_MspInit+0x160>)
 80026a8:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80026ac:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 80026ae:	4b2b      	ldr	r3, [pc, #172]	@ (800275c <HAL_UART_MspInit+0x160>)
 80026b0:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 80026b4:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80026b6:	4b29      	ldr	r3, [pc, #164]	@ (800275c <HAL_UART_MspInit+0x160>)
 80026b8:	2200      	movs	r2, #0
 80026ba:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 80026bc:	4827      	ldr	r0, [pc, #156]	@ (800275c <HAL_UART_MspInit+0x160>)
 80026be:	f000 fbdf 	bl	8002e80 <HAL_DMA_Init>
 80026c2:	4603      	mov	r3, r0
 80026c4:	2b00      	cmp	r3, #0
 80026c6:	d001      	beq.n	80026cc <HAL_UART_MspInit+0xd0>
    {
      Error_Handler();
 80026c8:	f7ff fd2e 	bl	8002128 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	4a23      	ldr	r2, [pc, #140]	@ (800275c <HAL_UART_MspInit+0x160>)
 80026d0:	63da      	str	r2, [r3, #60]	@ 0x3c
 80026d2:	4a22      	ldr	r2, [pc, #136]	@ (800275c <HAL_UART_MspInit+0x160>)
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	6393      	str	r3, [r2, #56]	@ 0x38

    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA1_Stream6;
 80026d8:	4b22      	ldr	r3, [pc, #136]	@ (8002764 <HAL_UART_MspInit+0x168>)
 80026da:	4a23      	ldr	r2, [pc, #140]	@ (8002768 <HAL_UART_MspInit+0x16c>)
 80026dc:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Channel = DMA_CHANNEL_4;
 80026de:	4b21      	ldr	r3, [pc, #132]	@ (8002764 <HAL_UART_MspInit+0x168>)
 80026e0:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 80026e4:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80026e6:	4b1f      	ldr	r3, [pc, #124]	@ (8002764 <HAL_UART_MspInit+0x168>)
 80026e8:	2240      	movs	r2, #64	@ 0x40
 80026ea:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80026ec:	4b1d      	ldr	r3, [pc, #116]	@ (8002764 <HAL_UART_MspInit+0x168>)
 80026ee:	2200      	movs	r2, #0
 80026f0:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 80026f2:	4b1c      	ldr	r3, [pc, #112]	@ (8002764 <HAL_UART_MspInit+0x168>)
 80026f4:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80026f8:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80026fa:	4b1a      	ldr	r3, [pc, #104]	@ (8002764 <HAL_UART_MspInit+0x168>)
 80026fc:	2200      	movs	r2, #0
 80026fe:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002700:	4b18      	ldr	r3, [pc, #96]	@ (8002764 <HAL_UART_MspInit+0x168>)
 8002702:	2200      	movs	r2, #0
 8002704:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 8002706:	4b17      	ldr	r3, [pc, #92]	@ (8002764 <HAL_UART_MspInit+0x168>)
 8002708:	2200      	movs	r2, #0
 800270a:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 800270c:	4b15      	ldr	r3, [pc, #84]	@ (8002764 <HAL_UART_MspInit+0x168>)
 800270e:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8002712:	621a      	str	r2, [r3, #32]
    hdma_usart2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002714:	4b13      	ldr	r3, [pc, #76]	@ (8002764 <HAL_UART_MspInit+0x168>)
 8002716:	2200      	movs	r2, #0
 8002718:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 800271a:	4812      	ldr	r0, [pc, #72]	@ (8002764 <HAL_UART_MspInit+0x168>)
 800271c:	f000 fbb0 	bl	8002e80 <HAL_DMA_Init>
 8002720:	4603      	mov	r3, r0
 8002722:	2b00      	cmp	r3, #0
 8002724:	d001      	beq.n	800272a <HAL_UART_MspInit+0x12e>
    {
      Error_Handler();
 8002726:	f7ff fcff 	bl	8002128 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	4a0d      	ldr	r2, [pc, #52]	@ (8002764 <HAL_UART_MspInit+0x168>)
 800272e:	639a      	str	r2, [r3, #56]	@ 0x38
 8002730:	4a0c      	ldr	r2, [pc, #48]	@ (8002764 <HAL_UART_MspInit+0x168>)
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	6393      	str	r3, [r2, #56]	@ 0x38

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 8002736:	2200      	movs	r2, #0
 8002738:	2105      	movs	r1, #5
 800273a:	2026      	movs	r0, #38	@ 0x26
 800273c:	f000 fb76 	bl	8002e2c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8002740:	2026      	movs	r0, #38	@ 0x26
 8002742:	f000 fb8f 	bl	8002e64 <HAL_NVIC_EnableIRQ>

  /* USER CODE END USART2_MspInit 1 */

  }

}
 8002746:	bf00      	nop
 8002748:	3728      	adds	r7, #40	@ 0x28
 800274a:	46bd      	mov	sp, r7
 800274c:	bd80      	pop	{r7, pc}
 800274e:	bf00      	nop
 8002750:	40004400 	.word	0x40004400
 8002754:	40023800 	.word	0x40023800
 8002758:	40020000 	.word	0x40020000
 800275c:	20003eec 	.word	0x20003eec
 8002760:	40026088 	.word	0x40026088
 8002764:	20003f4c 	.word	0x20003f4c
 8002768:	400260a0 	.word	0x400260a0

0800276c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800276c:	b580      	push	{r7, lr}
 800276e:	b08c      	sub	sp, #48	@ 0x30
 8002770:	af00      	add	r7, sp, #0
 8002772:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 8002774:	2300      	movs	r3, #0
 8002776:	62bb      	str	r3, [r7, #40]	@ 0x28

  uint32_t              uwPrescalerValue = 0U;
 8002778:	2300      	movs	r3, #0
 800277a:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 800277c:	2300      	movs	r3, #0
 800277e:	60bb      	str	r3, [r7, #8]
 8002780:	4b2e      	ldr	r3, [pc, #184]	@ (800283c <HAL_InitTick+0xd0>)
 8002782:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002784:	4a2d      	ldr	r2, [pc, #180]	@ (800283c <HAL_InitTick+0xd0>)
 8002786:	f043 0301 	orr.w	r3, r3, #1
 800278a:	6453      	str	r3, [r2, #68]	@ 0x44
 800278c:	4b2b      	ldr	r3, [pc, #172]	@ (800283c <HAL_InitTick+0xd0>)
 800278e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002790:	f003 0301 	and.w	r3, r3, #1
 8002794:	60bb      	str	r3, [r7, #8]
 8002796:	68bb      	ldr	r3, [r7, #8]
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8002798:	f107 020c 	add.w	r2, r7, #12
 800279c:	f107 0310 	add.w	r3, r7, #16
 80027a0:	4611      	mov	r1, r2
 80027a2:	4618      	mov	r0, r3
 80027a4:	f001 fda4 	bl	80042f0 <HAL_RCC_GetClockConfig>
  /* Compute TIM1 clock */
      uwTimclock = HAL_RCC_GetPCLK2Freq();
 80027a8:	f001 fd8e 	bl	80042c8 <HAL_RCC_GetPCLK2Freq>
 80027ac:	62b8      	str	r0, [r7, #40]	@ 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80027ae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80027b0:	4a23      	ldr	r2, [pc, #140]	@ (8002840 <HAL_InitTick+0xd4>)
 80027b2:	fba2 2303 	umull	r2, r3, r2, r3
 80027b6:	0c9b      	lsrs	r3, r3, #18
 80027b8:	3b01      	subs	r3, #1
 80027ba:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 80027bc:	4b21      	ldr	r3, [pc, #132]	@ (8002844 <HAL_InitTick+0xd8>)
 80027be:	4a22      	ldr	r2, [pc, #136]	@ (8002848 <HAL_InitTick+0xdc>)
 80027c0:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 80027c2:	4b20      	ldr	r3, [pc, #128]	@ (8002844 <HAL_InitTick+0xd8>)
 80027c4:	f240 32e7 	movw	r2, #999	@ 0x3e7
 80027c8:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 80027ca:	4a1e      	ldr	r2, [pc, #120]	@ (8002844 <HAL_InitTick+0xd8>)
 80027cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80027ce:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 80027d0:	4b1c      	ldr	r3, [pc, #112]	@ (8002844 <HAL_InitTick+0xd8>)
 80027d2:	2200      	movs	r2, #0
 80027d4:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80027d6:	4b1b      	ldr	r3, [pc, #108]	@ (8002844 <HAL_InitTick+0xd8>)
 80027d8:	2200      	movs	r2, #0
 80027da:	609a      	str	r2, [r3, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80027dc:	4b19      	ldr	r3, [pc, #100]	@ (8002844 <HAL_InitTick+0xd8>)
 80027de:	2200      	movs	r2, #0
 80027e0:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim1);
 80027e2:	4818      	ldr	r0, [pc, #96]	@ (8002844 <HAL_InitTick+0xd8>)
 80027e4:	f001 fdb6 	bl	8004354 <HAL_TIM_Base_Init>
 80027e8:	4603      	mov	r3, r0
 80027ea:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  if (status == HAL_OK)
 80027ee:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80027f2:	2b00      	cmp	r3, #0
 80027f4:	d11b      	bne.n	800282e <HAL_InitTick+0xc2>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 80027f6:	4813      	ldr	r0, [pc, #76]	@ (8002844 <HAL_InitTick+0xd8>)
 80027f8:	f001 fe56 	bl	80044a8 <HAL_TIM_Base_Start_IT>
 80027fc:	4603      	mov	r3, r0
 80027fe:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    if (status == HAL_OK)
 8002802:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8002806:	2b00      	cmp	r3, #0
 8002808:	d111      	bne.n	800282e <HAL_InitTick+0xc2>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 800280a:	2019      	movs	r0, #25
 800280c:	f000 fb2a 	bl	8002e64 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	2b0f      	cmp	r3, #15
 8002814:	d808      	bhi.n	8002828 <HAL_InitTick+0xbc>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority, 0U);
 8002816:	2200      	movs	r2, #0
 8002818:	6879      	ldr	r1, [r7, #4]
 800281a:	2019      	movs	r0, #25
 800281c:	f000 fb06 	bl	8002e2c <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002820:	4a0a      	ldr	r2, [pc, #40]	@ (800284c <HAL_InitTick+0xe0>)
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	6013      	str	r3, [r2, #0]
 8002826:	e002      	b.n	800282e <HAL_InitTick+0xc2>
      }
      else
      {
        status = HAL_ERROR;
 8002828:	2301      	movs	r3, #1
 800282a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 800282e:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 8002832:	4618      	mov	r0, r3
 8002834:	3730      	adds	r7, #48	@ 0x30
 8002836:	46bd      	mov	sp, r7
 8002838:	bd80      	pop	{r7, pc}
 800283a:	bf00      	nop
 800283c:	40023800 	.word	0x40023800
 8002840:	431bde83 	.word	0x431bde83
 8002844:	20004028 	.word	0x20004028
 8002848:	40010000 	.word	0x40010000
 800284c:	2000000c 	.word	0x2000000c

08002850 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002850:	b480      	push	{r7}
 8002852:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002854:	bf00      	nop
 8002856:	e7fd      	b.n	8002854 <NMI_Handler+0x4>

08002858 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002858:	b480      	push	{r7}
 800285a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800285c:	bf00      	nop
 800285e:	e7fd      	b.n	800285c <HardFault_Handler+0x4>

08002860 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002860:	b480      	push	{r7}
 8002862:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002864:	bf00      	nop
 8002866:	e7fd      	b.n	8002864 <MemManage_Handler+0x4>

08002868 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002868:	b480      	push	{r7}
 800286a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800286c:	bf00      	nop
 800286e:	e7fd      	b.n	800286c <BusFault_Handler+0x4>

08002870 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002870:	b480      	push	{r7}
 8002872:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002874:	bf00      	nop
 8002876:	e7fd      	b.n	8002874 <UsageFault_Handler+0x4>

08002878 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002878:	b480      	push	{r7}
 800287a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800287c:	bf00      	nop
 800287e:	46bd      	mov	sp, r7
 8002880:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002884:	4770      	bx	lr
	...

08002888 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8002888:	b580      	push	{r7, lr}
 800288a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 800288c:	4802      	ldr	r0, [pc, #8]	@ (8002898 <DMA1_Stream5_IRQHandler+0x10>)
 800288e:	f000 fc8f 	bl	80031b0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 8002892:	bf00      	nop
 8002894:	bd80      	pop	{r7, pc}
 8002896:	bf00      	nop
 8002898:	20003eec 	.word	0x20003eec

0800289c <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 800289c:	b580      	push	{r7, lr}
 800289e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 80028a0:	4802      	ldr	r0, [pc, #8]	@ (80028ac <DMA1_Stream6_IRQHandler+0x10>)
 80028a2:	f000 fc85 	bl	80031b0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 80028a6:	bf00      	nop
 80028a8:	bd80      	pop	{r7, pc}
 80028aa:	bf00      	nop
 80028ac:	20003f4c 	.word	0x20003f4c

080028b0 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 80028b0:	b580      	push	{r7, lr}
 80028b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80028b4:	4802      	ldr	r0, [pc, #8]	@ (80028c0 <TIM1_UP_TIM10_IRQHandler+0x10>)
 80028b6:	f001 ff63 	bl	8004780 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 80028ba:	bf00      	nop
 80028bc:	bd80      	pop	{r7, pc}
 80028be:	bf00      	nop
 80028c0:	20004028 	.word	0x20004028

080028c4 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80028c4:	b580      	push	{r7, lr}
 80028c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80028c8:	4802      	ldr	r0, [pc, #8]	@ (80028d4 <USART2_IRQHandler+0x10>)
 80028ca:	f002 feb9 	bl	8005640 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80028ce:	bf00      	nop
 80028d0:	bd80      	pop	{r7, pc}
 80028d2:	bf00      	nop
 80028d4:	20003ea4 	.word	0x20003ea4

080028d8 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80028d8:	b480      	push	{r7}
 80028da:	af00      	add	r7, sp, #0
  return 1;
 80028dc:	2301      	movs	r3, #1
}
 80028de:	4618      	mov	r0, r3
 80028e0:	46bd      	mov	sp, r7
 80028e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028e6:	4770      	bx	lr

080028e8 <_kill>:

int _kill(int pid, int sig)
{
 80028e8:	b580      	push	{r7, lr}
 80028ea:	b082      	sub	sp, #8
 80028ec:	af00      	add	r7, sp, #0
 80028ee:	6078      	str	r0, [r7, #4]
 80028f0:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80028f2:	f013 fa3f 	bl	8015d74 <__errno>
 80028f6:	4603      	mov	r3, r0
 80028f8:	2216      	movs	r2, #22
 80028fa:	601a      	str	r2, [r3, #0]
  return -1;
 80028fc:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8002900:	4618      	mov	r0, r3
 8002902:	3708      	adds	r7, #8
 8002904:	46bd      	mov	sp, r7
 8002906:	bd80      	pop	{r7, pc}

08002908 <_exit>:

void _exit (int status)
{
 8002908:	b580      	push	{r7, lr}
 800290a:	b082      	sub	sp, #8
 800290c:	af00      	add	r7, sp, #0
 800290e:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002910:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8002914:	6878      	ldr	r0, [r7, #4]
 8002916:	f7ff ffe7 	bl	80028e8 <_kill>
  while (1) {}    /* Make sure we hang here */
 800291a:	bf00      	nop
 800291c:	e7fd      	b.n	800291a <_exit+0x12>

0800291e <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800291e:	b580      	push	{r7, lr}
 8002920:	b086      	sub	sp, #24
 8002922:	af00      	add	r7, sp, #0
 8002924:	60f8      	str	r0, [r7, #12]
 8002926:	60b9      	str	r1, [r7, #8]
 8002928:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800292a:	2300      	movs	r3, #0
 800292c:	617b      	str	r3, [r7, #20]
 800292e:	e00a      	b.n	8002946 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002930:	f3af 8000 	nop.w
 8002934:	4601      	mov	r1, r0
 8002936:	68bb      	ldr	r3, [r7, #8]
 8002938:	1c5a      	adds	r2, r3, #1
 800293a:	60ba      	str	r2, [r7, #8]
 800293c:	b2ca      	uxtb	r2, r1
 800293e:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002940:	697b      	ldr	r3, [r7, #20]
 8002942:	3301      	adds	r3, #1
 8002944:	617b      	str	r3, [r7, #20]
 8002946:	697a      	ldr	r2, [r7, #20]
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	429a      	cmp	r2, r3
 800294c:	dbf0      	blt.n	8002930 <_read+0x12>
  }

  return len;
 800294e:	687b      	ldr	r3, [r7, #4]
}
 8002950:	4618      	mov	r0, r3
 8002952:	3718      	adds	r7, #24
 8002954:	46bd      	mov	sp, r7
 8002956:	bd80      	pop	{r7, pc}

08002958 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002958:	b580      	push	{r7, lr}
 800295a:	b086      	sub	sp, #24
 800295c:	af00      	add	r7, sp, #0
 800295e:	60f8      	str	r0, [r7, #12]
 8002960:	60b9      	str	r1, [r7, #8]
 8002962:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002964:	2300      	movs	r3, #0
 8002966:	617b      	str	r3, [r7, #20]
 8002968:	e009      	b.n	800297e <_write+0x26>
  {
    __io_putchar(*ptr++);
 800296a:	68bb      	ldr	r3, [r7, #8]
 800296c:	1c5a      	adds	r2, r3, #1
 800296e:	60ba      	str	r2, [r7, #8]
 8002970:	781b      	ldrb	r3, [r3, #0]
 8002972:	4618      	mov	r0, r3
 8002974:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002978:	697b      	ldr	r3, [r7, #20]
 800297a:	3301      	adds	r3, #1
 800297c:	617b      	str	r3, [r7, #20]
 800297e:	697a      	ldr	r2, [r7, #20]
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	429a      	cmp	r2, r3
 8002984:	dbf1      	blt.n	800296a <_write+0x12>
  }
  return len;
 8002986:	687b      	ldr	r3, [r7, #4]
}
 8002988:	4618      	mov	r0, r3
 800298a:	3718      	adds	r7, #24
 800298c:	46bd      	mov	sp, r7
 800298e:	bd80      	pop	{r7, pc}

08002990 <_close>:

int _close(int file)
{
 8002990:	b480      	push	{r7}
 8002992:	b083      	sub	sp, #12
 8002994:	af00      	add	r7, sp, #0
 8002996:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002998:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 800299c:	4618      	mov	r0, r3
 800299e:	370c      	adds	r7, #12
 80029a0:	46bd      	mov	sp, r7
 80029a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029a6:	4770      	bx	lr

080029a8 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80029a8:	b480      	push	{r7}
 80029aa:	b083      	sub	sp, #12
 80029ac:	af00      	add	r7, sp, #0
 80029ae:	6078      	str	r0, [r7, #4]
 80029b0:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80029b2:	683b      	ldr	r3, [r7, #0]
 80029b4:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80029b8:	605a      	str	r2, [r3, #4]
  return 0;
 80029ba:	2300      	movs	r3, #0
}
 80029bc:	4618      	mov	r0, r3
 80029be:	370c      	adds	r7, #12
 80029c0:	46bd      	mov	sp, r7
 80029c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029c6:	4770      	bx	lr

080029c8 <_isatty>:

int _isatty(int file)
{
 80029c8:	b480      	push	{r7}
 80029ca:	b083      	sub	sp, #12
 80029cc:	af00      	add	r7, sp, #0
 80029ce:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80029d0:	2301      	movs	r3, #1
}
 80029d2:	4618      	mov	r0, r3
 80029d4:	370c      	adds	r7, #12
 80029d6:	46bd      	mov	sp, r7
 80029d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029dc:	4770      	bx	lr

080029de <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80029de:	b480      	push	{r7}
 80029e0:	b085      	sub	sp, #20
 80029e2:	af00      	add	r7, sp, #0
 80029e4:	60f8      	str	r0, [r7, #12]
 80029e6:	60b9      	str	r1, [r7, #8]
 80029e8:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80029ea:	2300      	movs	r3, #0
}
 80029ec:	4618      	mov	r0, r3
 80029ee:	3714      	adds	r7, #20
 80029f0:	46bd      	mov	sp, r7
 80029f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029f6:	4770      	bx	lr

080029f8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80029f8:	b580      	push	{r7, lr}
 80029fa:	b086      	sub	sp, #24
 80029fc:	af00      	add	r7, sp, #0
 80029fe:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002a00:	4a14      	ldr	r2, [pc, #80]	@ (8002a54 <_sbrk+0x5c>)
 8002a02:	4b15      	ldr	r3, [pc, #84]	@ (8002a58 <_sbrk+0x60>)
 8002a04:	1ad3      	subs	r3, r2, r3
 8002a06:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002a08:	697b      	ldr	r3, [r7, #20]
 8002a0a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002a0c:	4b13      	ldr	r3, [pc, #76]	@ (8002a5c <_sbrk+0x64>)
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	2b00      	cmp	r3, #0
 8002a12:	d102      	bne.n	8002a1a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002a14:	4b11      	ldr	r3, [pc, #68]	@ (8002a5c <_sbrk+0x64>)
 8002a16:	4a12      	ldr	r2, [pc, #72]	@ (8002a60 <_sbrk+0x68>)
 8002a18:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002a1a:	4b10      	ldr	r3, [pc, #64]	@ (8002a5c <_sbrk+0x64>)
 8002a1c:	681a      	ldr	r2, [r3, #0]
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	4413      	add	r3, r2
 8002a22:	693a      	ldr	r2, [r7, #16]
 8002a24:	429a      	cmp	r2, r3
 8002a26:	d207      	bcs.n	8002a38 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002a28:	f013 f9a4 	bl	8015d74 <__errno>
 8002a2c:	4603      	mov	r3, r0
 8002a2e:	220c      	movs	r2, #12
 8002a30:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002a32:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8002a36:	e009      	b.n	8002a4c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002a38:	4b08      	ldr	r3, [pc, #32]	@ (8002a5c <_sbrk+0x64>)
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002a3e:	4b07      	ldr	r3, [pc, #28]	@ (8002a5c <_sbrk+0x64>)
 8002a40:	681a      	ldr	r2, [r3, #0]
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	4413      	add	r3, r2
 8002a46:	4a05      	ldr	r2, [pc, #20]	@ (8002a5c <_sbrk+0x64>)
 8002a48:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002a4a:	68fb      	ldr	r3, [r7, #12]
}
 8002a4c:	4618      	mov	r0, r3
 8002a4e:	3718      	adds	r7, #24
 8002a50:	46bd      	mov	sp, r7
 8002a52:	bd80      	pop	{r7, pc}
 8002a54:	20020000 	.word	0x20020000
 8002a58:	00000400 	.word	0x00000400
 8002a5c:	20004074 	.word	0x20004074
 8002a60:	2000de30 	.word	0x2000de30

08002a64 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002a64:	b480      	push	{r7}
 8002a66:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002a68:	4b06      	ldr	r3, [pc, #24]	@ (8002a84 <SystemInit+0x20>)
 8002a6a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002a6e:	4a05      	ldr	r2, [pc, #20]	@ (8002a84 <SystemInit+0x20>)
 8002a70:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002a74:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002a78:	bf00      	nop
 8002a7a:	46bd      	mov	sp, r7
 8002a7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a80:	4770      	bx	lr
 8002a82:	bf00      	nop
 8002a84:	e000ed00 	.word	0xe000ed00

08002a88 <cubemx_transport_open>:
#define UART_DMA_BUFFER_SIZE 2048

static uint8_t dma_buffer[UART_DMA_BUFFER_SIZE];
static size_t dma_head = 0, dma_tail = 0;

bool cubemx_transport_open(struct uxrCustomTransport * transport){
 8002a88:	b580      	push	{r7, lr}
 8002a8a:	b084      	sub	sp, #16
 8002a8c:	af00      	add	r7, sp, #0
 8002a8e:	6078      	str	r0, [r7, #4]
    UART_HandleTypeDef * uart = (UART_HandleTypeDef*) transport->args;
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	f8d3 328c 	ldr.w	r3, [r3, #652]	@ 0x28c
 8002a96:	60fb      	str	r3, [r7, #12]
    HAL_UART_Receive_DMA(uart, dma_buffer, UART_DMA_BUFFER_SIZE);
 8002a98:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8002a9c:	4904      	ldr	r1, [pc, #16]	@ (8002ab0 <cubemx_transport_open+0x28>)
 8002a9e:	68f8      	ldr	r0, [r7, #12]
 8002aa0:	f002 fd2a 	bl	80054f8 <HAL_UART_Receive_DMA>
    return true;
 8002aa4:	2301      	movs	r3, #1
}
 8002aa6:	4618      	mov	r0, r3
 8002aa8:	3710      	adds	r7, #16
 8002aaa:	46bd      	mov	sp, r7
 8002aac:	bd80      	pop	{r7, pc}
 8002aae:	bf00      	nop
 8002ab0:	20004078 	.word	0x20004078

08002ab4 <cubemx_transport_close>:

bool cubemx_transport_close(struct uxrCustomTransport * transport){
 8002ab4:	b580      	push	{r7, lr}
 8002ab6:	b084      	sub	sp, #16
 8002ab8:	af00      	add	r7, sp, #0
 8002aba:	6078      	str	r0, [r7, #4]
    UART_HandleTypeDef * uart = (UART_HandleTypeDef*) transport->args;
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	f8d3 328c 	ldr.w	r3, [r3, #652]	@ 0x28c
 8002ac2:	60fb      	str	r3, [r7, #12]
    HAL_UART_DMAStop(uart);
 8002ac4:	68f8      	ldr	r0, [r7, #12]
 8002ac6:	f002 fd3c 	bl	8005542 <HAL_UART_DMAStop>
    return true;
 8002aca:	2301      	movs	r3, #1
}
 8002acc:	4618      	mov	r0, r3
 8002ace:	3710      	adds	r7, #16
 8002ad0:	46bd      	mov	sp, r7
 8002ad2:	bd80      	pop	{r7, pc}

08002ad4 <cubemx_transport_write>:

size_t cubemx_transport_write(struct uxrCustomTransport* transport, uint8_t * buf, size_t len, uint8_t * err){
 8002ad4:	b580      	push	{r7, lr}
 8002ad6:	b086      	sub	sp, #24
 8002ad8:	af00      	add	r7, sp, #0
 8002ada:	60f8      	str	r0, [r7, #12]
 8002adc:	60b9      	str	r1, [r7, #8]
 8002ade:	607a      	str	r2, [r7, #4]
 8002ae0:	603b      	str	r3, [r7, #0]
    UART_HandleTypeDef * uart = (UART_HandleTypeDef*) transport->args;
 8002ae2:	68fb      	ldr	r3, [r7, #12]
 8002ae4:	f8d3 328c 	ldr.w	r3, [r3, #652]	@ 0x28c
 8002ae8:	617b      	str	r3, [r7, #20]

    HAL_StatusTypeDef ret;
    if (uart->gState == HAL_UART_STATE_READY){
 8002aea:	697b      	ldr	r3, [r7, #20]
 8002aec:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002af0:	b2db      	uxtb	r3, r3
 8002af2:	2b20      	cmp	r3, #32
 8002af4:	d11c      	bne.n	8002b30 <cubemx_transport_write+0x5c>
        ret = HAL_UART_Transmit_DMA(uart, buf, len);
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	b29b      	uxth	r3, r3
 8002afa:	461a      	mov	r2, r3
 8002afc:	68b9      	ldr	r1, [r7, #8]
 8002afe:	6978      	ldr	r0, [r7, #20]
 8002b00:	f002 fc8a 	bl	8005418 <HAL_UART_Transmit_DMA>
 8002b04:	4603      	mov	r3, r0
 8002b06:	74fb      	strb	r3, [r7, #19]
        while (ret == HAL_OK && uart->gState != HAL_UART_STATE_READY){
 8002b08:	e002      	b.n	8002b10 <cubemx_transport_write+0x3c>
            osDelay(1);
 8002b0a:	2001      	movs	r0, #1
 8002b0c:	f003 ffb6 	bl	8006a7c <osDelay>
        while (ret == HAL_OK && uart->gState != HAL_UART_STATE_READY){
 8002b10:	7cfb      	ldrb	r3, [r7, #19]
 8002b12:	2b00      	cmp	r3, #0
 8002b14:	d105      	bne.n	8002b22 <cubemx_transport_write+0x4e>
 8002b16:	697b      	ldr	r3, [r7, #20]
 8002b18:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002b1c:	b2db      	uxtb	r3, r3
 8002b1e:	2b20      	cmp	r3, #32
 8002b20:	d1f3      	bne.n	8002b0a <cubemx_transport_write+0x36>
        }

        return (ret == HAL_OK) ? len : 0;
 8002b22:	7cfb      	ldrb	r3, [r7, #19]
 8002b24:	2b00      	cmp	r3, #0
 8002b26:	d101      	bne.n	8002b2c <cubemx_transport_write+0x58>
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	e002      	b.n	8002b32 <cubemx_transport_write+0x5e>
 8002b2c:	2300      	movs	r3, #0
 8002b2e:	e000      	b.n	8002b32 <cubemx_transport_write+0x5e>
    }else{
        return 0;
 8002b30:	2300      	movs	r3, #0
    }
}
 8002b32:	4618      	mov	r0, r3
 8002b34:	3718      	adds	r7, #24
 8002b36:	46bd      	mov	sp, r7
 8002b38:	bd80      	pop	{r7, pc}
	...

08002b3c <cubemx_transport_read>:

size_t cubemx_transport_read(struct uxrCustomTransport* transport, uint8_t* buf, size_t len, int timeout, uint8_t* err){
 8002b3c:	b580      	push	{r7, lr}
 8002b3e:	b088      	sub	sp, #32
 8002b40:	af00      	add	r7, sp, #0
 8002b42:	60f8      	str	r0, [r7, #12]
 8002b44:	60b9      	str	r1, [r7, #8]
 8002b46:	607a      	str	r2, [r7, #4]
 8002b48:	603b      	str	r3, [r7, #0]
    UART_HandleTypeDef * uart = (UART_HandleTypeDef*) transport->args;
 8002b4a:	68fb      	ldr	r3, [r7, #12]
 8002b4c:	f8d3 328c 	ldr.w	r3, [r3, #652]	@ 0x28c
 8002b50:	617b      	str	r3, [r7, #20]

    int ms_used = 0;
 8002b52:	2300      	movs	r3, #0
 8002b54:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
 8002b56:	b672      	cpsid	i
}
 8002b58:	bf00      	nop
    do
    {
        __disable_irq();
        dma_tail = UART_DMA_BUFFER_SIZE - __HAL_DMA_GET_COUNTER(uart->hdmarx);
 8002b5a:	697b      	ldr	r3, [r7, #20]
 8002b5c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	685b      	ldr	r3, [r3, #4]
 8002b62:	f5c3 6300 	rsb	r3, r3, #2048	@ 0x800
 8002b66:	4a1c      	ldr	r2, [pc, #112]	@ (8002bd8 <cubemx_transport_read+0x9c>)
 8002b68:	6013      	str	r3, [r2, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8002b6a:	b662      	cpsie	i
}
 8002b6c:	bf00      	nop
        __enable_irq();
        ms_used++;
 8002b6e:	69fb      	ldr	r3, [r7, #28]
 8002b70:	3301      	adds	r3, #1
 8002b72:	61fb      	str	r3, [r7, #28]
        osDelay(portTICK_RATE_MS);
 8002b74:	2001      	movs	r0, #1
 8002b76:	f003 ff81 	bl	8006a7c <osDelay>
    } while (dma_head == dma_tail && ms_used < timeout);
 8002b7a:	4b18      	ldr	r3, [pc, #96]	@ (8002bdc <cubemx_transport_read+0xa0>)
 8002b7c:	681a      	ldr	r2, [r3, #0]
 8002b7e:	4b16      	ldr	r3, [pc, #88]	@ (8002bd8 <cubemx_transport_read+0x9c>)
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	429a      	cmp	r2, r3
 8002b84:	d103      	bne.n	8002b8e <cubemx_transport_read+0x52>
 8002b86:	69fa      	ldr	r2, [r7, #28]
 8002b88:	683b      	ldr	r3, [r7, #0]
 8002b8a:	429a      	cmp	r2, r3
 8002b8c:	dbe3      	blt.n	8002b56 <cubemx_transport_read+0x1a>
    
    size_t wrote = 0;
 8002b8e:	2300      	movs	r3, #0
 8002b90:	61bb      	str	r3, [r7, #24]
    while ((dma_head != dma_tail) && (wrote < len)){
 8002b92:	e011      	b.n	8002bb8 <cubemx_transport_read+0x7c>
        buf[wrote] = dma_buffer[dma_head];
 8002b94:	4b11      	ldr	r3, [pc, #68]	@ (8002bdc <cubemx_transport_read+0xa0>)
 8002b96:	681a      	ldr	r2, [r3, #0]
 8002b98:	68b9      	ldr	r1, [r7, #8]
 8002b9a:	69bb      	ldr	r3, [r7, #24]
 8002b9c:	440b      	add	r3, r1
 8002b9e:	4910      	ldr	r1, [pc, #64]	@ (8002be0 <cubemx_transport_read+0xa4>)
 8002ba0:	5c8a      	ldrb	r2, [r1, r2]
 8002ba2:	701a      	strb	r2, [r3, #0]
        dma_head = (dma_head + 1) % UART_DMA_BUFFER_SIZE;
 8002ba4:	4b0d      	ldr	r3, [pc, #52]	@ (8002bdc <cubemx_transport_read+0xa0>)
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	3301      	adds	r3, #1
 8002baa:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002bae:	4a0b      	ldr	r2, [pc, #44]	@ (8002bdc <cubemx_transport_read+0xa0>)
 8002bb0:	6013      	str	r3, [r2, #0]
        wrote++;
 8002bb2:	69bb      	ldr	r3, [r7, #24]
 8002bb4:	3301      	adds	r3, #1
 8002bb6:	61bb      	str	r3, [r7, #24]
    while ((dma_head != dma_tail) && (wrote < len)){
 8002bb8:	4b08      	ldr	r3, [pc, #32]	@ (8002bdc <cubemx_transport_read+0xa0>)
 8002bba:	681a      	ldr	r2, [r3, #0]
 8002bbc:	4b06      	ldr	r3, [pc, #24]	@ (8002bd8 <cubemx_transport_read+0x9c>)
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	429a      	cmp	r2, r3
 8002bc2:	d003      	beq.n	8002bcc <cubemx_transport_read+0x90>
 8002bc4:	69ba      	ldr	r2, [r7, #24]
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	429a      	cmp	r2, r3
 8002bca:	d3e3      	bcc.n	8002b94 <cubemx_transport_read+0x58>
    }
    
    return wrote;
 8002bcc:	69bb      	ldr	r3, [r7, #24]
}
 8002bce:	4618      	mov	r0, r3
 8002bd0:	3720      	adds	r7, #32
 8002bd2:	46bd      	mov	sp, r7
 8002bd4:	bd80      	pop	{r7, pc}
 8002bd6:	bf00      	nop
 8002bd8:	2000487c 	.word	0x2000487c
 8002bdc:	20004878 	.word	0x20004878
 8002be0:	20004078 	.word	0x20004078

08002be4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8002be4:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8002c1c <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8002be8:	f7ff ff3c 	bl	8002a64 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002bec:	480c      	ldr	r0, [pc, #48]	@ (8002c20 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8002bee:	490d      	ldr	r1, [pc, #52]	@ (8002c24 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002bf0:	4a0d      	ldr	r2, [pc, #52]	@ (8002c28 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8002bf2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002bf4:	e002      	b.n	8002bfc <LoopCopyDataInit>

08002bf6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002bf6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002bf8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002bfa:	3304      	adds	r3, #4

08002bfc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002bfc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002bfe:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002c00:	d3f9      	bcc.n	8002bf6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002c02:	4a0a      	ldr	r2, [pc, #40]	@ (8002c2c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002c04:	4c0a      	ldr	r4, [pc, #40]	@ (8002c30 <LoopFillZerobss+0x22>)
  movs r3, #0
 8002c06:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002c08:	e001      	b.n	8002c0e <LoopFillZerobss>

08002c0a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002c0a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002c0c:	3204      	adds	r2, #4

08002c0e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002c0e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002c10:	d3fb      	bcc.n	8002c0a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002c12:	f013 f8b5 	bl	8015d80 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002c16:	f7fe fc4d 	bl	80014b4 <main>
  bx  lr    
 8002c1a:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8002c1c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002c20:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002c24:	20000198 	.word	0x20000198
  ldr r2, =_sidata
 8002c28:	08017a5c 	.word	0x08017a5c
  ldr r2, =_sbss
 8002c2c:	20000198 	.word	0x20000198
  ldr r4, =_ebss
 8002c30:	2000de30 	.word	0x2000de30

08002c34 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002c34:	e7fe      	b.n	8002c34 <ADC_IRQHandler>
	...

08002c38 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002c38:	b580      	push	{r7, lr}
 8002c3a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002c3c:	4b0e      	ldr	r3, [pc, #56]	@ (8002c78 <HAL_Init+0x40>)
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	4a0d      	ldr	r2, [pc, #52]	@ (8002c78 <HAL_Init+0x40>)
 8002c42:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002c46:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002c48:	4b0b      	ldr	r3, [pc, #44]	@ (8002c78 <HAL_Init+0x40>)
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	4a0a      	ldr	r2, [pc, #40]	@ (8002c78 <HAL_Init+0x40>)
 8002c4e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002c52:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002c54:	4b08      	ldr	r3, [pc, #32]	@ (8002c78 <HAL_Init+0x40>)
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	4a07      	ldr	r2, [pc, #28]	@ (8002c78 <HAL_Init+0x40>)
 8002c5a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002c5e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002c60:	2003      	movs	r0, #3
 8002c62:	f000 f8d8 	bl	8002e16 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002c66:	2000      	movs	r0, #0
 8002c68:	f7ff fd80 	bl	800276c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002c6c:	f7ff fbc8 	bl	8002400 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002c70:	2300      	movs	r3, #0
}
 8002c72:	4618      	mov	r0, r3
 8002c74:	bd80      	pop	{r7, pc}
 8002c76:	bf00      	nop
 8002c78:	40023c00 	.word	0x40023c00

08002c7c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002c7c:	b480      	push	{r7}
 8002c7e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002c80:	4b06      	ldr	r3, [pc, #24]	@ (8002c9c <HAL_IncTick+0x20>)
 8002c82:	781b      	ldrb	r3, [r3, #0]
 8002c84:	461a      	mov	r2, r3
 8002c86:	4b06      	ldr	r3, [pc, #24]	@ (8002ca0 <HAL_IncTick+0x24>)
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	4413      	add	r3, r2
 8002c8c:	4a04      	ldr	r2, [pc, #16]	@ (8002ca0 <HAL_IncTick+0x24>)
 8002c8e:	6013      	str	r3, [r2, #0]
}
 8002c90:	bf00      	nop
 8002c92:	46bd      	mov	sp, r7
 8002c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c98:	4770      	bx	lr
 8002c9a:	bf00      	nop
 8002c9c:	20000010 	.word	0x20000010
 8002ca0:	20004880 	.word	0x20004880

08002ca4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002ca4:	b480      	push	{r7}
 8002ca6:	af00      	add	r7, sp, #0
  return uwTick;
 8002ca8:	4b03      	ldr	r3, [pc, #12]	@ (8002cb8 <HAL_GetTick+0x14>)
 8002caa:	681b      	ldr	r3, [r3, #0]
}
 8002cac:	4618      	mov	r0, r3
 8002cae:	46bd      	mov	sp, r7
 8002cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cb4:	4770      	bx	lr
 8002cb6:	bf00      	nop
 8002cb8:	20004880 	.word	0x20004880

08002cbc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002cbc:	b480      	push	{r7}
 8002cbe:	b085      	sub	sp, #20
 8002cc0:	af00      	add	r7, sp, #0
 8002cc2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	f003 0307 	and.w	r3, r3, #7
 8002cca:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002ccc:	4b0c      	ldr	r3, [pc, #48]	@ (8002d00 <__NVIC_SetPriorityGrouping+0x44>)
 8002cce:	68db      	ldr	r3, [r3, #12]
 8002cd0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002cd2:	68ba      	ldr	r2, [r7, #8]
 8002cd4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002cd8:	4013      	ands	r3, r2
 8002cda:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002cdc:	68fb      	ldr	r3, [r7, #12]
 8002cde:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002ce0:	68bb      	ldr	r3, [r7, #8]
 8002ce2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002ce4:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002ce8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002cec:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002cee:	4a04      	ldr	r2, [pc, #16]	@ (8002d00 <__NVIC_SetPriorityGrouping+0x44>)
 8002cf0:	68bb      	ldr	r3, [r7, #8]
 8002cf2:	60d3      	str	r3, [r2, #12]
}
 8002cf4:	bf00      	nop
 8002cf6:	3714      	adds	r7, #20
 8002cf8:	46bd      	mov	sp, r7
 8002cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cfe:	4770      	bx	lr
 8002d00:	e000ed00 	.word	0xe000ed00

08002d04 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002d04:	b480      	push	{r7}
 8002d06:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002d08:	4b04      	ldr	r3, [pc, #16]	@ (8002d1c <__NVIC_GetPriorityGrouping+0x18>)
 8002d0a:	68db      	ldr	r3, [r3, #12]
 8002d0c:	0a1b      	lsrs	r3, r3, #8
 8002d0e:	f003 0307 	and.w	r3, r3, #7
}
 8002d12:	4618      	mov	r0, r3
 8002d14:	46bd      	mov	sp, r7
 8002d16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d1a:	4770      	bx	lr
 8002d1c:	e000ed00 	.word	0xe000ed00

08002d20 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002d20:	b480      	push	{r7}
 8002d22:	b083      	sub	sp, #12
 8002d24:	af00      	add	r7, sp, #0
 8002d26:	4603      	mov	r3, r0
 8002d28:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002d2a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d2e:	2b00      	cmp	r3, #0
 8002d30:	db0b      	blt.n	8002d4a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002d32:	79fb      	ldrb	r3, [r7, #7]
 8002d34:	f003 021f 	and.w	r2, r3, #31
 8002d38:	4907      	ldr	r1, [pc, #28]	@ (8002d58 <__NVIC_EnableIRQ+0x38>)
 8002d3a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d3e:	095b      	lsrs	r3, r3, #5
 8002d40:	2001      	movs	r0, #1
 8002d42:	fa00 f202 	lsl.w	r2, r0, r2
 8002d46:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002d4a:	bf00      	nop
 8002d4c:	370c      	adds	r7, #12
 8002d4e:	46bd      	mov	sp, r7
 8002d50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d54:	4770      	bx	lr
 8002d56:	bf00      	nop
 8002d58:	e000e100 	.word	0xe000e100

08002d5c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002d5c:	b480      	push	{r7}
 8002d5e:	b083      	sub	sp, #12
 8002d60:	af00      	add	r7, sp, #0
 8002d62:	4603      	mov	r3, r0
 8002d64:	6039      	str	r1, [r7, #0]
 8002d66:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002d68:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d6c:	2b00      	cmp	r3, #0
 8002d6e:	db0a      	blt.n	8002d86 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002d70:	683b      	ldr	r3, [r7, #0]
 8002d72:	b2da      	uxtb	r2, r3
 8002d74:	490c      	ldr	r1, [pc, #48]	@ (8002da8 <__NVIC_SetPriority+0x4c>)
 8002d76:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d7a:	0112      	lsls	r2, r2, #4
 8002d7c:	b2d2      	uxtb	r2, r2
 8002d7e:	440b      	add	r3, r1
 8002d80:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002d84:	e00a      	b.n	8002d9c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002d86:	683b      	ldr	r3, [r7, #0]
 8002d88:	b2da      	uxtb	r2, r3
 8002d8a:	4908      	ldr	r1, [pc, #32]	@ (8002dac <__NVIC_SetPriority+0x50>)
 8002d8c:	79fb      	ldrb	r3, [r7, #7]
 8002d8e:	f003 030f 	and.w	r3, r3, #15
 8002d92:	3b04      	subs	r3, #4
 8002d94:	0112      	lsls	r2, r2, #4
 8002d96:	b2d2      	uxtb	r2, r2
 8002d98:	440b      	add	r3, r1
 8002d9a:	761a      	strb	r2, [r3, #24]
}
 8002d9c:	bf00      	nop
 8002d9e:	370c      	adds	r7, #12
 8002da0:	46bd      	mov	sp, r7
 8002da2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002da6:	4770      	bx	lr
 8002da8:	e000e100 	.word	0xe000e100
 8002dac:	e000ed00 	.word	0xe000ed00

08002db0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002db0:	b480      	push	{r7}
 8002db2:	b089      	sub	sp, #36	@ 0x24
 8002db4:	af00      	add	r7, sp, #0
 8002db6:	60f8      	str	r0, [r7, #12]
 8002db8:	60b9      	str	r1, [r7, #8]
 8002dba:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002dbc:	68fb      	ldr	r3, [r7, #12]
 8002dbe:	f003 0307 	and.w	r3, r3, #7
 8002dc2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002dc4:	69fb      	ldr	r3, [r7, #28]
 8002dc6:	f1c3 0307 	rsb	r3, r3, #7
 8002dca:	2b04      	cmp	r3, #4
 8002dcc:	bf28      	it	cs
 8002dce:	2304      	movcs	r3, #4
 8002dd0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002dd2:	69fb      	ldr	r3, [r7, #28]
 8002dd4:	3304      	adds	r3, #4
 8002dd6:	2b06      	cmp	r3, #6
 8002dd8:	d902      	bls.n	8002de0 <NVIC_EncodePriority+0x30>
 8002dda:	69fb      	ldr	r3, [r7, #28]
 8002ddc:	3b03      	subs	r3, #3
 8002dde:	e000      	b.n	8002de2 <NVIC_EncodePriority+0x32>
 8002de0:	2300      	movs	r3, #0
 8002de2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002de4:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8002de8:	69bb      	ldr	r3, [r7, #24]
 8002dea:	fa02 f303 	lsl.w	r3, r2, r3
 8002dee:	43da      	mvns	r2, r3
 8002df0:	68bb      	ldr	r3, [r7, #8]
 8002df2:	401a      	ands	r2, r3
 8002df4:	697b      	ldr	r3, [r7, #20]
 8002df6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002df8:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8002dfc:	697b      	ldr	r3, [r7, #20]
 8002dfe:	fa01 f303 	lsl.w	r3, r1, r3
 8002e02:	43d9      	mvns	r1, r3
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002e08:	4313      	orrs	r3, r2
         );
}
 8002e0a:	4618      	mov	r0, r3
 8002e0c:	3724      	adds	r7, #36	@ 0x24
 8002e0e:	46bd      	mov	sp, r7
 8002e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e14:	4770      	bx	lr

08002e16 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002e16:	b580      	push	{r7, lr}
 8002e18:	b082      	sub	sp, #8
 8002e1a:	af00      	add	r7, sp, #0
 8002e1c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002e1e:	6878      	ldr	r0, [r7, #4]
 8002e20:	f7ff ff4c 	bl	8002cbc <__NVIC_SetPriorityGrouping>
}
 8002e24:	bf00      	nop
 8002e26:	3708      	adds	r7, #8
 8002e28:	46bd      	mov	sp, r7
 8002e2a:	bd80      	pop	{r7, pc}

08002e2c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002e2c:	b580      	push	{r7, lr}
 8002e2e:	b086      	sub	sp, #24
 8002e30:	af00      	add	r7, sp, #0
 8002e32:	4603      	mov	r3, r0
 8002e34:	60b9      	str	r1, [r7, #8]
 8002e36:	607a      	str	r2, [r7, #4]
 8002e38:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002e3a:	2300      	movs	r3, #0
 8002e3c:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002e3e:	f7ff ff61 	bl	8002d04 <__NVIC_GetPriorityGrouping>
 8002e42:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002e44:	687a      	ldr	r2, [r7, #4]
 8002e46:	68b9      	ldr	r1, [r7, #8]
 8002e48:	6978      	ldr	r0, [r7, #20]
 8002e4a:	f7ff ffb1 	bl	8002db0 <NVIC_EncodePriority>
 8002e4e:	4602      	mov	r2, r0
 8002e50:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002e54:	4611      	mov	r1, r2
 8002e56:	4618      	mov	r0, r3
 8002e58:	f7ff ff80 	bl	8002d5c <__NVIC_SetPriority>
}
 8002e5c:	bf00      	nop
 8002e5e:	3718      	adds	r7, #24
 8002e60:	46bd      	mov	sp, r7
 8002e62:	bd80      	pop	{r7, pc}

08002e64 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002e64:	b580      	push	{r7, lr}
 8002e66:	b082      	sub	sp, #8
 8002e68:	af00      	add	r7, sp, #0
 8002e6a:	4603      	mov	r3, r0
 8002e6c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002e6e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e72:	4618      	mov	r0, r3
 8002e74:	f7ff ff54 	bl	8002d20 <__NVIC_EnableIRQ>
}
 8002e78:	bf00      	nop
 8002e7a:	3708      	adds	r7, #8
 8002e7c:	46bd      	mov	sp, r7
 8002e7e:	bd80      	pop	{r7, pc}

08002e80 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002e80:	b580      	push	{r7, lr}
 8002e82:	b086      	sub	sp, #24
 8002e84:	af00      	add	r7, sp, #0
 8002e86:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002e88:	2300      	movs	r3, #0
 8002e8a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002e8c:	f7ff ff0a 	bl	8002ca4 <HAL_GetTick>
 8002e90:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	2b00      	cmp	r3, #0
 8002e96:	d101      	bne.n	8002e9c <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002e98:	2301      	movs	r3, #1
 8002e9a:	e099      	b.n	8002fd0 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	2202      	movs	r2, #2
 8002ea0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	2200      	movs	r2, #0
 8002ea8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	681a      	ldr	r2, [r3, #0]
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	f022 0201 	bic.w	r2, r2, #1
 8002eba:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002ebc:	e00f      	b.n	8002ede <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002ebe:	f7ff fef1 	bl	8002ca4 <HAL_GetTick>
 8002ec2:	4602      	mov	r2, r0
 8002ec4:	693b      	ldr	r3, [r7, #16]
 8002ec6:	1ad3      	subs	r3, r2, r3
 8002ec8:	2b05      	cmp	r3, #5
 8002eca:	d908      	bls.n	8002ede <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	2220      	movs	r2, #32
 8002ed0:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	2203      	movs	r2, #3
 8002ed6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 8002eda:	2303      	movs	r3, #3
 8002edc:	e078      	b.n	8002fd0 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	f003 0301 	and.w	r3, r3, #1
 8002ee8:	2b00      	cmp	r3, #0
 8002eea:	d1e8      	bne.n	8002ebe <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002ef4:	697a      	ldr	r2, [r7, #20]
 8002ef6:	4b38      	ldr	r3, [pc, #224]	@ (8002fd8 <HAL_DMA_Init+0x158>)
 8002ef8:	4013      	ands	r3, r2
 8002efa:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	685a      	ldr	r2, [r3, #4]
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	689b      	ldr	r3, [r3, #8]
 8002f04:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002f0a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	691b      	ldr	r3, [r3, #16]
 8002f10:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002f16:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	699b      	ldr	r3, [r3, #24]
 8002f1c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002f22:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	6a1b      	ldr	r3, [r3, #32]
 8002f28:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002f2a:	697a      	ldr	r2, [r7, #20]
 8002f2c:	4313      	orrs	r3, r2
 8002f2e:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f34:	2b04      	cmp	r3, #4
 8002f36:	d107      	bne.n	8002f48 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f40:	4313      	orrs	r3, r2
 8002f42:	697a      	ldr	r2, [r7, #20]
 8002f44:	4313      	orrs	r3, r2
 8002f46:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	697a      	ldr	r2, [r7, #20]
 8002f4e:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	695b      	ldr	r3, [r3, #20]
 8002f56:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002f58:	697b      	ldr	r3, [r7, #20]
 8002f5a:	f023 0307 	bic.w	r3, r3, #7
 8002f5e:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f64:	697a      	ldr	r2, [r7, #20]
 8002f66:	4313      	orrs	r3, r2
 8002f68:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f6e:	2b04      	cmp	r3, #4
 8002f70:	d117      	bne.n	8002fa2 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002f76:	697a      	ldr	r2, [r7, #20]
 8002f78:	4313      	orrs	r3, r2
 8002f7a:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002f80:	2b00      	cmp	r3, #0
 8002f82:	d00e      	beq.n	8002fa2 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002f84:	6878      	ldr	r0, [r7, #4]
 8002f86:	f000 fb01 	bl	800358c <DMA_CheckFifoParam>
 8002f8a:	4603      	mov	r3, r0
 8002f8c:	2b00      	cmp	r3, #0
 8002f8e:	d008      	beq.n	8002fa2 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	2240      	movs	r2, #64	@ 0x40
 8002f94:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	2201      	movs	r2, #1
 8002f9a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 8002f9e:	2301      	movs	r3, #1
 8002fa0:	e016      	b.n	8002fd0 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	697a      	ldr	r2, [r7, #20]
 8002fa8:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002faa:	6878      	ldr	r0, [r7, #4]
 8002fac:	f000 fab8 	bl	8003520 <DMA_CalcBaseAndBitshift>
 8002fb0:	4603      	mov	r3, r0
 8002fb2:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002fb8:	223f      	movs	r2, #63	@ 0x3f
 8002fba:	409a      	lsls	r2, r3
 8002fbc:	68fb      	ldr	r3, [r7, #12]
 8002fbe:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	2200      	movs	r2, #0
 8002fc4:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	2201      	movs	r2, #1
 8002fca:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8002fce:	2300      	movs	r3, #0
}
 8002fd0:	4618      	mov	r0, r3
 8002fd2:	3718      	adds	r7, #24
 8002fd4:	46bd      	mov	sp, r7
 8002fd6:	bd80      	pop	{r7, pc}
 8002fd8:	f010803f 	.word	0xf010803f

08002fdc <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002fdc:	b580      	push	{r7, lr}
 8002fde:	b086      	sub	sp, #24
 8002fe0:	af00      	add	r7, sp, #0
 8002fe2:	60f8      	str	r0, [r7, #12]
 8002fe4:	60b9      	str	r1, [r7, #8]
 8002fe6:	607a      	str	r2, [r7, #4]
 8002fe8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002fea:	2300      	movs	r3, #0
 8002fec:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002fee:	68fb      	ldr	r3, [r7, #12]
 8002ff0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002ff2:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8002ff4:	68fb      	ldr	r3, [r7, #12]
 8002ff6:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8002ffa:	2b01      	cmp	r3, #1
 8002ffc:	d101      	bne.n	8003002 <HAL_DMA_Start_IT+0x26>
 8002ffe:	2302      	movs	r3, #2
 8003000:	e040      	b.n	8003084 <HAL_DMA_Start_IT+0xa8>
 8003002:	68fb      	ldr	r3, [r7, #12]
 8003004:	2201      	movs	r2, #1
 8003006:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800300a:	68fb      	ldr	r3, [r7, #12]
 800300c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003010:	b2db      	uxtb	r3, r3
 8003012:	2b01      	cmp	r3, #1
 8003014:	d12f      	bne.n	8003076 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003016:	68fb      	ldr	r3, [r7, #12]
 8003018:	2202      	movs	r2, #2
 800301a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800301e:	68fb      	ldr	r3, [r7, #12]
 8003020:	2200      	movs	r2, #0
 8003022:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003024:	683b      	ldr	r3, [r7, #0]
 8003026:	687a      	ldr	r2, [r7, #4]
 8003028:	68b9      	ldr	r1, [r7, #8]
 800302a:	68f8      	ldr	r0, [r7, #12]
 800302c:	f000 fa4a 	bl	80034c4 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003030:	68fb      	ldr	r3, [r7, #12]
 8003032:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003034:	223f      	movs	r2, #63	@ 0x3f
 8003036:	409a      	lsls	r2, r3
 8003038:	693b      	ldr	r3, [r7, #16]
 800303a:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 800303c:	68fb      	ldr	r3, [r7, #12]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	681a      	ldr	r2, [r3, #0]
 8003042:	68fb      	ldr	r3, [r7, #12]
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	f042 0216 	orr.w	r2, r2, #22
 800304a:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 800304c:	68fb      	ldr	r3, [r7, #12]
 800304e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003050:	2b00      	cmp	r3, #0
 8003052:	d007      	beq.n	8003064 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8003054:	68fb      	ldr	r3, [r7, #12]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	681a      	ldr	r2, [r3, #0]
 800305a:	68fb      	ldr	r3, [r7, #12]
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	f042 0208 	orr.w	r2, r2, #8
 8003062:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003064:	68fb      	ldr	r3, [r7, #12]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	681a      	ldr	r2, [r3, #0]
 800306a:	68fb      	ldr	r3, [r7, #12]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	f042 0201 	orr.w	r2, r2, #1
 8003072:	601a      	str	r2, [r3, #0]
 8003074:	e005      	b.n	8003082 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8003076:	68fb      	ldr	r3, [r7, #12]
 8003078:	2200      	movs	r2, #0
 800307a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800307e:	2302      	movs	r3, #2
 8003080:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8003082:	7dfb      	ldrb	r3, [r7, #23]
}
 8003084:	4618      	mov	r0, r3
 8003086:	3718      	adds	r7, #24
 8003088:	46bd      	mov	sp, r7
 800308a:	bd80      	pop	{r7, pc}

0800308c <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800308c:	b580      	push	{r7, lr}
 800308e:	b084      	sub	sp, #16
 8003090:	af00      	add	r7, sp, #0
 8003092:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003098:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 800309a:	f7ff fe03 	bl	8002ca4 <HAL_GetTick>
 800309e:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80030a6:	b2db      	uxtb	r3, r3
 80030a8:	2b02      	cmp	r3, #2
 80030aa:	d008      	beq.n	80030be <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	2280      	movs	r2, #128	@ 0x80
 80030b0:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	2200      	movs	r2, #0
 80030b6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 80030ba:	2301      	movs	r3, #1
 80030bc:	e052      	b.n	8003164 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	681a      	ldr	r2, [r3, #0]
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	f022 0216 	bic.w	r2, r2, #22
 80030cc:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	695a      	ldr	r2, [r3, #20]
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80030dc:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80030e2:	2b00      	cmp	r3, #0
 80030e4:	d103      	bne.n	80030ee <HAL_DMA_Abort+0x62>
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80030ea:	2b00      	cmp	r3, #0
 80030ec:	d007      	beq.n	80030fe <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	681a      	ldr	r2, [r3, #0]
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	f022 0208 	bic.w	r2, r2, #8
 80030fc:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	681a      	ldr	r2, [r3, #0]
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	f022 0201 	bic.w	r2, r2, #1
 800310c:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800310e:	e013      	b.n	8003138 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003110:	f7ff fdc8 	bl	8002ca4 <HAL_GetTick>
 8003114:	4602      	mov	r2, r0
 8003116:	68bb      	ldr	r3, [r7, #8]
 8003118:	1ad3      	subs	r3, r2, r3
 800311a:	2b05      	cmp	r3, #5
 800311c:	d90c      	bls.n	8003138 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	2220      	movs	r2, #32
 8003122:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	2203      	movs	r2, #3
 8003128:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	2200      	movs	r2, #0
 8003130:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 8003134:	2303      	movs	r3, #3
 8003136:	e015      	b.n	8003164 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	f003 0301 	and.w	r3, r3, #1
 8003142:	2b00      	cmp	r3, #0
 8003144:	d1e4      	bne.n	8003110 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800314a:	223f      	movs	r2, #63	@ 0x3f
 800314c:	409a      	lsls	r2, r3
 800314e:	68fb      	ldr	r3, [r7, #12]
 8003150:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	2201      	movs	r2, #1
 8003156:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	2200      	movs	r2, #0
 800315e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 8003162:	2300      	movs	r3, #0
}
 8003164:	4618      	mov	r0, r3
 8003166:	3710      	adds	r7, #16
 8003168:	46bd      	mov	sp, r7
 800316a:	bd80      	pop	{r7, pc}

0800316c <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800316c:	b480      	push	{r7}
 800316e:	b083      	sub	sp, #12
 8003170:	af00      	add	r7, sp, #0
 8003172:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800317a:	b2db      	uxtb	r3, r3
 800317c:	2b02      	cmp	r3, #2
 800317e:	d004      	beq.n	800318a <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	2280      	movs	r2, #128	@ 0x80
 8003184:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8003186:	2301      	movs	r3, #1
 8003188:	e00c      	b.n	80031a4 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	2205      	movs	r2, #5
 800318e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	681a      	ldr	r2, [r3, #0]
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	f022 0201 	bic.w	r2, r2, #1
 80031a0:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80031a2:	2300      	movs	r3, #0
}
 80031a4:	4618      	mov	r0, r3
 80031a6:	370c      	adds	r7, #12
 80031a8:	46bd      	mov	sp, r7
 80031aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031ae:	4770      	bx	lr

080031b0 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80031b0:	b580      	push	{r7, lr}
 80031b2:	b086      	sub	sp, #24
 80031b4:	af00      	add	r7, sp, #0
 80031b6:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80031b8:	2300      	movs	r3, #0
 80031ba:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80031bc:	4b8e      	ldr	r3, [pc, #568]	@ (80033f8 <HAL_DMA_IRQHandler+0x248>)
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	4a8e      	ldr	r2, [pc, #568]	@ (80033fc <HAL_DMA_IRQHandler+0x24c>)
 80031c2:	fba2 2303 	umull	r2, r3, r2, r3
 80031c6:	0a9b      	lsrs	r3, r3, #10
 80031c8:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80031ce:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80031d0:	693b      	ldr	r3, [r7, #16]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80031da:	2208      	movs	r2, #8
 80031dc:	409a      	lsls	r2, r3
 80031de:	68fb      	ldr	r3, [r7, #12]
 80031e0:	4013      	ands	r3, r2
 80031e2:	2b00      	cmp	r3, #0
 80031e4:	d01a      	beq.n	800321c <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	f003 0304 	and.w	r3, r3, #4
 80031f0:	2b00      	cmp	r3, #0
 80031f2:	d013      	beq.n	800321c <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	681a      	ldr	r2, [r3, #0]
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	f022 0204 	bic.w	r2, r2, #4
 8003202:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003208:	2208      	movs	r2, #8
 800320a:	409a      	lsls	r2, r3
 800320c:	693b      	ldr	r3, [r7, #16]
 800320e:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003214:	f043 0201 	orr.w	r2, r3, #1
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003220:	2201      	movs	r2, #1
 8003222:	409a      	lsls	r2, r3
 8003224:	68fb      	ldr	r3, [r7, #12]
 8003226:	4013      	ands	r3, r2
 8003228:	2b00      	cmp	r3, #0
 800322a:	d012      	beq.n	8003252 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	695b      	ldr	r3, [r3, #20]
 8003232:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003236:	2b00      	cmp	r3, #0
 8003238:	d00b      	beq.n	8003252 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800323e:	2201      	movs	r2, #1
 8003240:	409a      	lsls	r2, r3
 8003242:	693b      	ldr	r3, [r7, #16]
 8003244:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800324a:	f043 0202 	orr.w	r2, r3, #2
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003256:	2204      	movs	r2, #4
 8003258:	409a      	lsls	r2, r3
 800325a:	68fb      	ldr	r3, [r7, #12]
 800325c:	4013      	ands	r3, r2
 800325e:	2b00      	cmp	r3, #0
 8003260:	d012      	beq.n	8003288 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	f003 0302 	and.w	r3, r3, #2
 800326c:	2b00      	cmp	r3, #0
 800326e:	d00b      	beq.n	8003288 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003274:	2204      	movs	r2, #4
 8003276:	409a      	lsls	r2, r3
 8003278:	693b      	ldr	r3, [r7, #16]
 800327a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003280:	f043 0204 	orr.w	r2, r3, #4
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800328c:	2210      	movs	r2, #16
 800328e:	409a      	lsls	r2, r3
 8003290:	68fb      	ldr	r3, [r7, #12]
 8003292:	4013      	ands	r3, r2
 8003294:	2b00      	cmp	r3, #0
 8003296:	d043      	beq.n	8003320 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	f003 0308 	and.w	r3, r3, #8
 80032a2:	2b00      	cmp	r3, #0
 80032a4:	d03c      	beq.n	8003320 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80032aa:	2210      	movs	r2, #16
 80032ac:	409a      	lsls	r2, r3
 80032ae:	693b      	ldr	r3, [r7, #16]
 80032b0:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80032bc:	2b00      	cmp	r3, #0
 80032be:	d018      	beq.n	80032f2 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80032ca:	2b00      	cmp	r3, #0
 80032cc:	d108      	bne.n	80032e0 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80032d2:	2b00      	cmp	r3, #0
 80032d4:	d024      	beq.n	8003320 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80032da:	6878      	ldr	r0, [r7, #4]
 80032dc:	4798      	blx	r3
 80032de:	e01f      	b.n	8003320 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80032e4:	2b00      	cmp	r3, #0
 80032e6:	d01b      	beq.n	8003320 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80032ec:	6878      	ldr	r0, [r7, #4]
 80032ee:	4798      	blx	r3
 80032f0:	e016      	b.n	8003320 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80032fc:	2b00      	cmp	r3, #0
 80032fe:	d107      	bne.n	8003310 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	681a      	ldr	r2, [r3, #0]
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	f022 0208 	bic.w	r2, r2, #8
 800330e:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003314:	2b00      	cmp	r3, #0
 8003316:	d003      	beq.n	8003320 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800331c:	6878      	ldr	r0, [r7, #4]
 800331e:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003324:	2220      	movs	r2, #32
 8003326:	409a      	lsls	r2, r3
 8003328:	68fb      	ldr	r3, [r7, #12]
 800332a:	4013      	ands	r3, r2
 800332c:	2b00      	cmp	r3, #0
 800332e:	f000 808f 	beq.w	8003450 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	f003 0310 	and.w	r3, r3, #16
 800333c:	2b00      	cmp	r3, #0
 800333e:	f000 8087 	beq.w	8003450 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003346:	2220      	movs	r2, #32
 8003348:	409a      	lsls	r2, r3
 800334a:	693b      	ldr	r3, [r7, #16]
 800334c:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003354:	b2db      	uxtb	r3, r3
 8003356:	2b05      	cmp	r3, #5
 8003358:	d136      	bne.n	80033c8 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	681a      	ldr	r2, [r3, #0]
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	f022 0216 	bic.w	r2, r2, #22
 8003368:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	695a      	ldr	r2, [r3, #20]
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8003378:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800337e:	2b00      	cmp	r3, #0
 8003380:	d103      	bne.n	800338a <HAL_DMA_IRQHandler+0x1da>
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003386:	2b00      	cmp	r3, #0
 8003388:	d007      	beq.n	800339a <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	681a      	ldr	r2, [r3, #0]
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	f022 0208 	bic.w	r2, r2, #8
 8003398:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800339e:	223f      	movs	r2, #63	@ 0x3f
 80033a0:	409a      	lsls	r2, r3
 80033a2:	693b      	ldr	r3, [r7, #16]
 80033a4:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	2201      	movs	r2, #1
 80033aa:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	2200      	movs	r2, #0
 80033b2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80033ba:	2b00      	cmp	r3, #0
 80033bc:	d07e      	beq.n	80034bc <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80033c2:	6878      	ldr	r0, [r7, #4]
 80033c4:	4798      	blx	r3
        }
        return;
 80033c6:	e079      	b.n	80034bc <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80033d2:	2b00      	cmp	r3, #0
 80033d4:	d01d      	beq.n	8003412 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80033e0:	2b00      	cmp	r3, #0
 80033e2:	d10d      	bne.n	8003400 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80033e8:	2b00      	cmp	r3, #0
 80033ea:	d031      	beq.n	8003450 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80033f0:	6878      	ldr	r0, [r7, #4]
 80033f2:	4798      	blx	r3
 80033f4:	e02c      	b.n	8003450 <HAL_DMA_IRQHandler+0x2a0>
 80033f6:	bf00      	nop
 80033f8:	20000008 	.word	0x20000008
 80033fc:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003404:	2b00      	cmp	r3, #0
 8003406:	d023      	beq.n	8003450 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800340c:	6878      	ldr	r0, [r7, #4]
 800340e:	4798      	blx	r3
 8003410:	e01e      	b.n	8003450 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800341c:	2b00      	cmp	r3, #0
 800341e:	d10f      	bne.n	8003440 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	681a      	ldr	r2, [r3, #0]
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	f022 0210 	bic.w	r2, r2, #16
 800342e:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	2201      	movs	r2, #1
 8003434:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	2200      	movs	r2, #0
 800343c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003444:	2b00      	cmp	r3, #0
 8003446:	d003      	beq.n	8003450 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800344c:	6878      	ldr	r0, [r7, #4]
 800344e:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003454:	2b00      	cmp	r3, #0
 8003456:	d032      	beq.n	80034be <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800345c:	f003 0301 	and.w	r3, r3, #1
 8003460:	2b00      	cmp	r3, #0
 8003462:	d022      	beq.n	80034aa <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	2205      	movs	r2, #5
 8003468:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	681a      	ldr	r2, [r3, #0]
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	f022 0201 	bic.w	r2, r2, #1
 800347a:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 800347c:	68bb      	ldr	r3, [r7, #8]
 800347e:	3301      	adds	r3, #1
 8003480:	60bb      	str	r3, [r7, #8]
 8003482:	697a      	ldr	r2, [r7, #20]
 8003484:	429a      	cmp	r2, r3
 8003486:	d307      	bcc.n	8003498 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	f003 0301 	and.w	r3, r3, #1
 8003492:	2b00      	cmp	r3, #0
 8003494:	d1f2      	bne.n	800347c <HAL_DMA_IRQHandler+0x2cc>
 8003496:	e000      	b.n	800349a <HAL_DMA_IRQHandler+0x2ea>
          break;
 8003498:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	2201      	movs	r2, #1
 800349e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	2200      	movs	r2, #0
 80034a6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80034ae:	2b00      	cmp	r3, #0
 80034b0:	d005      	beq.n	80034be <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80034b6:	6878      	ldr	r0, [r7, #4]
 80034b8:	4798      	blx	r3
 80034ba:	e000      	b.n	80034be <HAL_DMA_IRQHandler+0x30e>
        return;
 80034bc:	bf00      	nop
    }
  }
}
 80034be:	3718      	adds	r7, #24
 80034c0:	46bd      	mov	sp, r7
 80034c2:	bd80      	pop	{r7, pc}

080034c4 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80034c4:	b480      	push	{r7}
 80034c6:	b085      	sub	sp, #20
 80034c8:	af00      	add	r7, sp, #0
 80034ca:	60f8      	str	r0, [r7, #12]
 80034cc:	60b9      	str	r1, [r7, #8]
 80034ce:	607a      	str	r2, [r7, #4]
 80034d0:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80034d2:	68fb      	ldr	r3, [r7, #12]
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	681a      	ldr	r2, [r3, #0]
 80034d8:	68fb      	ldr	r3, [r7, #12]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 80034e0:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80034e2:	68fb      	ldr	r3, [r7, #12]
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	683a      	ldr	r2, [r7, #0]
 80034e8:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80034ea:	68fb      	ldr	r3, [r7, #12]
 80034ec:	689b      	ldr	r3, [r3, #8]
 80034ee:	2b40      	cmp	r3, #64	@ 0x40
 80034f0:	d108      	bne.n	8003504 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80034f2:	68fb      	ldr	r3, [r7, #12]
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	687a      	ldr	r2, [r7, #4]
 80034f8:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80034fa:	68fb      	ldr	r3, [r7, #12]
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	68ba      	ldr	r2, [r7, #8]
 8003500:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8003502:	e007      	b.n	8003514 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8003504:	68fb      	ldr	r3, [r7, #12]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	68ba      	ldr	r2, [r7, #8]
 800350a:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 800350c:	68fb      	ldr	r3, [r7, #12]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	687a      	ldr	r2, [r7, #4]
 8003512:	60da      	str	r2, [r3, #12]
}
 8003514:	bf00      	nop
 8003516:	3714      	adds	r7, #20
 8003518:	46bd      	mov	sp, r7
 800351a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800351e:	4770      	bx	lr

08003520 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003520:	b480      	push	{r7}
 8003522:	b085      	sub	sp, #20
 8003524:	af00      	add	r7, sp, #0
 8003526:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	b2db      	uxtb	r3, r3
 800352e:	3b10      	subs	r3, #16
 8003530:	4a14      	ldr	r2, [pc, #80]	@ (8003584 <DMA_CalcBaseAndBitshift+0x64>)
 8003532:	fba2 2303 	umull	r2, r3, r2, r3
 8003536:	091b      	lsrs	r3, r3, #4
 8003538:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800353a:	4a13      	ldr	r2, [pc, #76]	@ (8003588 <DMA_CalcBaseAndBitshift+0x68>)
 800353c:	68fb      	ldr	r3, [r7, #12]
 800353e:	4413      	add	r3, r2
 8003540:	781b      	ldrb	r3, [r3, #0]
 8003542:	461a      	mov	r2, r3
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8003548:	68fb      	ldr	r3, [r7, #12]
 800354a:	2b03      	cmp	r3, #3
 800354c:	d909      	bls.n	8003562 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8003556:	f023 0303 	bic.w	r3, r3, #3
 800355a:	1d1a      	adds	r2, r3, #4
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	659a      	str	r2, [r3, #88]	@ 0x58
 8003560:	e007      	b.n	8003572 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 800356a:	f023 0303 	bic.w	r3, r3, #3
 800356e:	687a      	ldr	r2, [r7, #4]
 8003570:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8003576:	4618      	mov	r0, r3
 8003578:	3714      	adds	r7, #20
 800357a:	46bd      	mov	sp, r7
 800357c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003580:	4770      	bx	lr
 8003582:	bf00      	nop
 8003584:	aaaaaaab 	.word	0xaaaaaaab
 8003588:	08016cc4 	.word	0x08016cc4

0800358c <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 800358c:	b480      	push	{r7}
 800358e:	b085      	sub	sp, #20
 8003590:	af00      	add	r7, sp, #0
 8003592:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003594:	2300      	movs	r3, #0
 8003596:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800359c:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	699b      	ldr	r3, [r3, #24]
 80035a2:	2b00      	cmp	r3, #0
 80035a4:	d11f      	bne.n	80035e6 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80035a6:	68bb      	ldr	r3, [r7, #8]
 80035a8:	2b03      	cmp	r3, #3
 80035aa:	d856      	bhi.n	800365a <DMA_CheckFifoParam+0xce>
 80035ac:	a201      	add	r2, pc, #4	@ (adr r2, 80035b4 <DMA_CheckFifoParam+0x28>)
 80035ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80035b2:	bf00      	nop
 80035b4:	080035c5 	.word	0x080035c5
 80035b8:	080035d7 	.word	0x080035d7
 80035bc:	080035c5 	.word	0x080035c5
 80035c0:	0800365b 	.word	0x0800365b
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80035c8:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80035cc:	2b00      	cmp	r3, #0
 80035ce:	d046      	beq.n	800365e <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80035d0:	2301      	movs	r3, #1
 80035d2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80035d4:	e043      	b.n	800365e <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80035da:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80035de:	d140      	bne.n	8003662 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80035e0:	2301      	movs	r3, #1
 80035e2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80035e4:	e03d      	b.n	8003662 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	699b      	ldr	r3, [r3, #24]
 80035ea:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80035ee:	d121      	bne.n	8003634 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80035f0:	68bb      	ldr	r3, [r7, #8]
 80035f2:	2b03      	cmp	r3, #3
 80035f4:	d837      	bhi.n	8003666 <DMA_CheckFifoParam+0xda>
 80035f6:	a201      	add	r2, pc, #4	@ (adr r2, 80035fc <DMA_CheckFifoParam+0x70>)
 80035f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80035fc:	0800360d 	.word	0x0800360d
 8003600:	08003613 	.word	0x08003613
 8003604:	0800360d 	.word	0x0800360d
 8003608:	08003625 	.word	0x08003625
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 800360c:	2301      	movs	r3, #1
 800360e:	73fb      	strb	r3, [r7, #15]
      break;
 8003610:	e030      	b.n	8003674 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003616:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800361a:	2b00      	cmp	r3, #0
 800361c:	d025      	beq.n	800366a <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800361e:	2301      	movs	r3, #1
 8003620:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003622:	e022      	b.n	800366a <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003628:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 800362c:	d11f      	bne.n	800366e <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800362e:	2301      	movs	r3, #1
 8003630:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8003632:	e01c      	b.n	800366e <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8003634:	68bb      	ldr	r3, [r7, #8]
 8003636:	2b02      	cmp	r3, #2
 8003638:	d903      	bls.n	8003642 <DMA_CheckFifoParam+0xb6>
 800363a:	68bb      	ldr	r3, [r7, #8]
 800363c:	2b03      	cmp	r3, #3
 800363e:	d003      	beq.n	8003648 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8003640:	e018      	b.n	8003674 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8003642:	2301      	movs	r3, #1
 8003644:	73fb      	strb	r3, [r7, #15]
      break;
 8003646:	e015      	b.n	8003674 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800364c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003650:	2b00      	cmp	r3, #0
 8003652:	d00e      	beq.n	8003672 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8003654:	2301      	movs	r3, #1
 8003656:	73fb      	strb	r3, [r7, #15]
      break;
 8003658:	e00b      	b.n	8003672 <DMA_CheckFifoParam+0xe6>
      break;
 800365a:	bf00      	nop
 800365c:	e00a      	b.n	8003674 <DMA_CheckFifoParam+0xe8>
      break;
 800365e:	bf00      	nop
 8003660:	e008      	b.n	8003674 <DMA_CheckFifoParam+0xe8>
      break;
 8003662:	bf00      	nop
 8003664:	e006      	b.n	8003674 <DMA_CheckFifoParam+0xe8>
      break;
 8003666:	bf00      	nop
 8003668:	e004      	b.n	8003674 <DMA_CheckFifoParam+0xe8>
      break;
 800366a:	bf00      	nop
 800366c:	e002      	b.n	8003674 <DMA_CheckFifoParam+0xe8>
      break;   
 800366e:	bf00      	nop
 8003670:	e000      	b.n	8003674 <DMA_CheckFifoParam+0xe8>
      break;
 8003672:	bf00      	nop
    }
  } 
  
  return status; 
 8003674:	7bfb      	ldrb	r3, [r7, #15]
}
 8003676:	4618      	mov	r0, r3
 8003678:	3714      	adds	r7, #20
 800367a:	46bd      	mov	sp, r7
 800367c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003680:	4770      	bx	lr
 8003682:	bf00      	nop

08003684 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003684:	b480      	push	{r7}
 8003686:	b089      	sub	sp, #36	@ 0x24
 8003688:	af00      	add	r7, sp, #0
 800368a:	6078      	str	r0, [r7, #4]
 800368c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800368e:	2300      	movs	r3, #0
 8003690:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003692:	2300      	movs	r3, #0
 8003694:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003696:	2300      	movs	r3, #0
 8003698:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800369a:	2300      	movs	r3, #0
 800369c:	61fb      	str	r3, [r7, #28]
 800369e:	e159      	b.n	8003954 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80036a0:	2201      	movs	r2, #1
 80036a2:	69fb      	ldr	r3, [r7, #28]
 80036a4:	fa02 f303 	lsl.w	r3, r2, r3
 80036a8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80036aa:	683b      	ldr	r3, [r7, #0]
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	697a      	ldr	r2, [r7, #20]
 80036b0:	4013      	ands	r3, r2
 80036b2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80036b4:	693a      	ldr	r2, [r7, #16]
 80036b6:	697b      	ldr	r3, [r7, #20]
 80036b8:	429a      	cmp	r2, r3
 80036ba:	f040 8148 	bne.w	800394e <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80036be:	683b      	ldr	r3, [r7, #0]
 80036c0:	685b      	ldr	r3, [r3, #4]
 80036c2:	f003 0303 	and.w	r3, r3, #3
 80036c6:	2b01      	cmp	r3, #1
 80036c8:	d005      	beq.n	80036d6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80036ca:	683b      	ldr	r3, [r7, #0]
 80036cc:	685b      	ldr	r3, [r3, #4]
 80036ce:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80036d2:	2b02      	cmp	r3, #2
 80036d4:	d130      	bne.n	8003738 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	689b      	ldr	r3, [r3, #8]
 80036da:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80036dc:	69fb      	ldr	r3, [r7, #28]
 80036de:	005b      	lsls	r3, r3, #1
 80036e0:	2203      	movs	r2, #3
 80036e2:	fa02 f303 	lsl.w	r3, r2, r3
 80036e6:	43db      	mvns	r3, r3
 80036e8:	69ba      	ldr	r2, [r7, #24]
 80036ea:	4013      	ands	r3, r2
 80036ec:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80036ee:	683b      	ldr	r3, [r7, #0]
 80036f0:	68da      	ldr	r2, [r3, #12]
 80036f2:	69fb      	ldr	r3, [r7, #28]
 80036f4:	005b      	lsls	r3, r3, #1
 80036f6:	fa02 f303 	lsl.w	r3, r2, r3
 80036fa:	69ba      	ldr	r2, [r7, #24]
 80036fc:	4313      	orrs	r3, r2
 80036fe:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	69ba      	ldr	r2, [r7, #24]
 8003704:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	685b      	ldr	r3, [r3, #4]
 800370a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800370c:	2201      	movs	r2, #1
 800370e:	69fb      	ldr	r3, [r7, #28]
 8003710:	fa02 f303 	lsl.w	r3, r2, r3
 8003714:	43db      	mvns	r3, r3
 8003716:	69ba      	ldr	r2, [r7, #24]
 8003718:	4013      	ands	r3, r2
 800371a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800371c:	683b      	ldr	r3, [r7, #0]
 800371e:	685b      	ldr	r3, [r3, #4]
 8003720:	091b      	lsrs	r3, r3, #4
 8003722:	f003 0201 	and.w	r2, r3, #1
 8003726:	69fb      	ldr	r3, [r7, #28]
 8003728:	fa02 f303 	lsl.w	r3, r2, r3
 800372c:	69ba      	ldr	r2, [r7, #24]
 800372e:	4313      	orrs	r3, r2
 8003730:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	69ba      	ldr	r2, [r7, #24]
 8003736:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003738:	683b      	ldr	r3, [r7, #0]
 800373a:	685b      	ldr	r3, [r3, #4]
 800373c:	f003 0303 	and.w	r3, r3, #3
 8003740:	2b03      	cmp	r3, #3
 8003742:	d017      	beq.n	8003774 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	68db      	ldr	r3, [r3, #12]
 8003748:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800374a:	69fb      	ldr	r3, [r7, #28]
 800374c:	005b      	lsls	r3, r3, #1
 800374e:	2203      	movs	r2, #3
 8003750:	fa02 f303 	lsl.w	r3, r2, r3
 8003754:	43db      	mvns	r3, r3
 8003756:	69ba      	ldr	r2, [r7, #24]
 8003758:	4013      	ands	r3, r2
 800375a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800375c:	683b      	ldr	r3, [r7, #0]
 800375e:	689a      	ldr	r2, [r3, #8]
 8003760:	69fb      	ldr	r3, [r7, #28]
 8003762:	005b      	lsls	r3, r3, #1
 8003764:	fa02 f303 	lsl.w	r3, r2, r3
 8003768:	69ba      	ldr	r2, [r7, #24]
 800376a:	4313      	orrs	r3, r2
 800376c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	69ba      	ldr	r2, [r7, #24]
 8003772:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003774:	683b      	ldr	r3, [r7, #0]
 8003776:	685b      	ldr	r3, [r3, #4]
 8003778:	f003 0303 	and.w	r3, r3, #3
 800377c:	2b02      	cmp	r3, #2
 800377e:	d123      	bne.n	80037c8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003780:	69fb      	ldr	r3, [r7, #28]
 8003782:	08da      	lsrs	r2, r3, #3
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	3208      	adds	r2, #8
 8003788:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800378c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800378e:	69fb      	ldr	r3, [r7, #28]
 8003790:	f003 0307 	and.w	r3, r3, #7
 8003794:	009b      	lsls	r3, r3, #2
 8003796:	220f      	movs	r2, #15
 8003798:	fa02 f303 	lsl.w	r3, r2, r3
 800379c:	43db      	mvns	r3, r3
 800379e:	69ba      	ldr	r2, [r7, #24]
 80037a0:	4013      	ands	r3, r2
 80037a2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80037a4:	683b      	ldr	r3, [r7, #0]
 80037a6:	691a      	ldr	r2, [r3, #16]
 80037a8:	69fb      	ldr	r3, [r7, #28]
 80037aa:	f003 0307 	and.w	r3, r3, #7
 80037ae:	009b      	lsls	r3, r3, #2
 80037b0:	fa02 f303 	lsl.w	r3, r2, r3
 80037b4:	69ba      	ldr	r2, [r7, #24]
 80037b6:	4313      	orrs	r3, r2
 80037b8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80037ba:	69fb      	ldr	r3, [r7, #28]
 80037bc:	08da      	lsrs	r2, r3, #3
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	3208      	adds	r2, #8
 80037c2:	69b9      	ldr	r1, [r7, #24]
 80037c4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80037ce:	69fb      	ldr	r3, [r7, #28]
 80037d0:	005b      	lsls	r3, r3, #1
 80037d2:	2203      	movs	r2, #3
 80037d4:	fa02 f303 	lsl.w	r3, r2, r3
 80037d8:	43db      	mvns	r3, r3
 80037da:	69ba      	ldr	r2, [r7, #24]
 80037dc:	4013      	ands	r3, r2
 80037de:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80037e0:	683b      	ldr	r3, [r7, #0]
 80037e2:	685b      	ldr	r3, [r3, #4]
 80037e4:	f003 0203 	and.w	r2, r3, #3
 80037e8:	69fb      	ldr	r3, [r7, #28]
 80037ea:	005b      	lsls	r3, r3, #1
 80037ec:	fa02 f303 	lsl.w	r3, r2, r3
 80037f0:	69ba      	ldr	r2, [r7, #24]
 80037f2:	4313      	orrs	r3, r2
 80037f4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	69ba      	ldr	r2, [r7, #24]
 80037fa:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80037fc:	683b      	ldr	r3, [r7, #0]
 80037fe:	685b      	ldr	r3, [r3, #4]
 8003800:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003804:	2b00      	cmp	r3, #0
 8003806:	f000 80a2 	beq.w	800394e <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800380a:	2300      	movs	r3, #0
 800380c:	60fb      	str	r3, [r7, #12]
 800380e:	4b57      	ldr	r3, [pc, #348]	@ (800396c <HAL_GPIO_Init+0x2e8>)
 8003810:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003812:	4a56      	ldr	r2, [pc, #344]	@ (800396c <HAL_GPIO_Init+0x2e8>)
 8003814:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003818:	6453      	str	r3, [r2, #68]	@ 0x44
 800381a:	4b54      	ldr	r3, [pc, #336]	@ (800396c <HAL_GPIO_Init+0x2e8>)
 800381c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800381e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003822:	60fb      	str	r3, [r7, #12]
 8003824:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003826:	4a52      	ldr	r2, [pc, #328]	@ (8003970 <HAL_GPIO_Init+0x2ec>)
 8003828:	69fb      	ldr	r3, [r7, #28]
 800382a:	089b      	lsrs	r3, r3, #2
 800382c:	3302      	adds	r3, #2
 800382e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003832:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003834:	69fb      	ldr	r3, [r7, #28]
 8003836:	f003 0303 	and.w	r3, r3, #3
 800383a:	009b      	lsls	r3, r3, #2
 800383c:	220f      	movs	r2, #15
 800383e:	fa02 f303 	lsl.w	r3, r2, r3
 8003842:	43db      	mvns	r3, r3
 8003844:	69ba      	ldr	r2, [r7, #24]
 8003846:	4013      	ands	r3, r2
 8003848:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	4a49      	ldr	r2, [pc, #292]	@ (8003974 <HAL_GPIO_Init+0x2f0>)
 800384e:	4293      	cmp	r3, r2
 8003850:	d019      	beq.n	8003886 <HAL_GPIO_Init+0x202>
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	4a48      	ldr	r2, [pc, #288]	@ (8003978 <HAL_GPIO_Init+0x2f4>)
 8003856:	4293      	cmp	r3, r2
 8003858:	d013      	beq.n	8003882 <HAL_GPIO_Init+0x1fe>
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	4a47      	ldr	r2, [pc, #284]	@ (800397c <HAL_GPIO_Init+0x2f8>)
 800385e:	4293      	cmp	r3, r2
 8003860:	d00d      	beq.n	800387e <HAL_GPIO_Init+0x1fa>
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	4a46      	ldr	r2, [pc, #280]	@ (8003980 <HAL_GPIO_Init+0x2fc>)
 8003866:	4293      	cmp	r3, r2
 8003868:	d007      	beq.n	800387a <HAL_GPIO_Init+0x1f6>
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	4a45      	ldr	r2, [pc, #276]	@ (8003984 <HAL_GPIO_Init+0x300>)
 800386e:	4293      	cmp	r3, r2
 8003870:	d101      	bne.n	8003876 <HAL_GPIO_Init+0x1f2>
 8003872:	2304      	movs	r3, #4
 8003874:	e008      	b.n	8003888 <HAL_GPIO_Init+0x204>
 8003876:	2307      	movs	r3, #7
 8003878:	e006      	b.n	8003888 <HAL_GPIO_Init+0x204>
 800387a:	2303      	movs	r3, #3
 800387c:	e004      	b.n	8003888 <HAL_GPIO_Init+0x204>
 800387e:	2302      	movs	r3, #2
 8003880:	e002      	b.n	8003888 <HAL_GPIO_Init+0x204>
 8003882:	2301      	movs	r3, #1
 8003884:	e000      	b.n	8003888 <HAL_GPIO_Init+0x204>
 8003886:	2300      	movs	r3, #0
 8003888:	69fa      	ldr	r2, [r7, #28]
 800388a:	f002 0203 	and.w	r2, r2, #3
 800388e:	0092      	lsls	r2, r2, #2
 8003890:	4093      	lsls	r3, r2
 8003892:	69ba      	ldr	r2, [r7, #24]
 8003894:	4313      	orrs	r3, r2
 8003896:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003898:	4935      	ldr	r1, [pc, #212]	@ (8003970 <HAL_GPIO_Init+0x2ec>)
 800389a:	69fb      	ldr	r3, [r7, #28]
 800389c:	089b      	lsrs	r3, r3, #2
 800389e:	3302      	adds	r3, #2
 80038a0:	69ba      	ldr	r2, [r7, #24]
 80038a2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80038a6:	4b38      	ldr	r3, [pc, #224]	@ (8003988 <HAL_GPIO_Init+0x304>)
 80038a8:	689b      	ldr	r3, [r3, #8]
 80038aa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80038ac:	693b      	ldr	r3, [r7, #16]
 80038ae:	43db      	mvns	r3, r3
 80038b0:	69ba      	ldr	r2, [r7, #24]
 80038b2:	4013      	ands	r3, r2
 80038b4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80038b6:	683b      	ldr	r3, [r7, #0]
 80038b8:	685b      	ldr	r3, [r3, #4]
 80038ba:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80038be:	2b00      	cmp	r3, #0
 80038c0:	d003      	beq.n	80038ca <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80038c2:	69ba      	ldr	r2, [r7, #24]
 80038c4:	693b      	ldr	r3, [r7, #16]
 80038c6:	4313      	orrs	r3, r2
 80038c8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80038ca:	4a2f      	ldr	r2, [pc, #188]	@ (8003988 <HAL_GPIO_Init+0x304>)
 80038cc:	69bb      	ldr	r3, [r7, #24]
 80038ce:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80038d0:	4b2d      	ldr	r3, [pc, #180]	@ (8003988 <HAL_GPIO_Init+0x304>)
 80038d2:	68db      	ldr	r3, [r3, #12]
 80038d4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80038d6:	693b      	ldr	r3, [r7, #16]
 80038d8:	43db      	mvns	r3, r3
 80038da:	69ba      	ldr	r2, [r7, #24]
 80038dc:	4013      	ands	r3, r2
 80038de:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80038e0:	683b      	ldr	r3, [r7, #0]
 80038e2:	685b      	ldr	r3, [r3, #4]
 80038e4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80038e8:	2b00      	cmp	r3, #0
 80038ea:	d003      	beq.n	80038f4 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80038ec:	69ba      	ldr	r2, [r7, #24]
 80038ee:	693b      	ldr	r3, [r7, #16]
 80038f0:	4313      	orrs	r3, r2
 80038f2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80038f4:	4a24      	ldr	r2, [pc, #144]	@ (8003988 <HAL_GPIO_Init+0x304>)
 80038f6:	69bb      	ldr	r3, [r7, #24]
 80038f8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80038fa:	4b23      	ldr	r3, [pc, #140]	@ (8003988 <HAL_GPIO_Init+0x304>)
 80038fc:	685b      	ldr	r3, [r3, #4]
 80038fe:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003900:	693b      	ldr	r3, [r7, #16]
 8003902:	43db      	mvns	r3, r3
 8003904:	69ba      	ldr	r2, [r7, #24]
 8003906:	4013      	ands	r3, r2
 8003908:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800390a:	683b      	ldr	r3, [r7, #0]
 800390c:	685b      	ldr	r3, [r3, #4]
 800390e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003912:	2b00      	cmp	r3, #0
 8003914:	d003      	beq.n	800391e <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8003916:	69ba      	ldr	r2, [r7, #24]
 8003918:	693b      	ldr	r3, [r7, #16]
 800391a:	4313      	orrs	r3, r2
 800391c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800391e:	4a1a      	ldr	r2, [pc, #104]	@ (8003988 <HAL_GPIO_Init+0x304>)
 8003920:	69bb      	ldr	r3, [r7, #24]
 8003922:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003924:	4b18      	ldr	r3, [pc, #96]	@ (8003988 <HAL_GPIO_Init+0x304>)
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800392a:	693b      	ldr	r3, [r7, #16]
 800392c:	43db      	mvns	r3, r3
 800392e:	69ba      	ldr	r2, [r7, #24]
 8003930:	4013      	ands	r3, r2
 8003932:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003934:	683b      	ldr	r3, [r7, #0]
 8003936:	685b      	ldr	r3, [r3, #4]
 8003938:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800393c:	2b00      	cmp	r3, #0
 800393e:	d003      	beq.n	8003948 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8003940:	69ba      	ldr	r2, [r7, #24]
 8003942:	693b      	ldr	r3, [r7, #16]
 8003944:	4313      	orrs	r3, r2
 8003946:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003948:	4a0f      	ldr	r2, [pc, #60]	@ (8003988 <HAL_GPIO_Init+0x304>)
 800394a:	69bb      	ldr	r3, [r7, #24]
 800394c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800394e:	69fb      	ldr	r3, [r7, #28]
 8003950:	3301      	adds	r3, #1
 8003952:	61fb      	str	r3, [r7, #28]
 8003954:	69fb      	ldr	r3, [r7, #28]
 8003956:	2b0f      	cmp	r3, #15
 8003958:	f67f aea2 	bls.w	80036a0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800395c:	bf00      	nop
 800395e:	bf00      	nop
 8003960:	3724      	adds	r7, #36	@ 0x24
 8003962:	46bd      	mov	sp, r7
 8003964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003968:	4770      	bx	lr
 800396a:	bf00      	nop
 800396c:	40023800 	.word	0x40023800
 8003970:	40013800 	.word	0x40013800
 8003974:	40020000 	.word	0x40020000
 8003978:	40020400 	.word	0x40020400
 800397c:	40020800 	.word	0x40020800
 8003980:	40020c00 	.word	0x40020c00
 8003984:	40021000 	.word	0x40021000
 8003988:	40013c00 	.word	0x40013c00

0800398c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800398c:	b480      	push	{r7}
 800398e:	b083      	sub	sp, #12
 8003990:	af00      	add	r7, sp, #0
 8003992:	6078      	str	r0, [r7, #4]
 8003994:	460b      	mov	r3, r1
 8003996:	807b      	strh	r3, [r7, #2]
 8003998:	4613      	mov	r3, r2
 800399a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800399c:	787b      	ldrb	r3, [r7, #1]
 800399e:	2b00      	cmp	r3, #0
 80039a0:	d003      	beq.n	80039aa <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80039a2:	887a      	ldrh	r2, [r7, #2]
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80039a8:	e003      	b.n	80039b2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80039aa:	887b      	ldrh	r3, [r7, #2]
 80039ac:	041a      	lsls	r2, r3, #16
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	619a      	str	r2, [r3, #24]
}
 80039b2:	bf00      	nop
 80039b4:	370c      	adds	r7, #12
 80039b6:	46bd      	mov	sp, r7
 80039b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039bc:	4770      	bx	lr
	...

080039c0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80039c0:	b580      	push	{r7, lr}
 80039c2:	b086      	sub	sp, #24
 80039c4:	af00      	add	r7, sp, #0
 80039c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	2b00      	cmp	r3, #0
 80039cc:	d101      	bne.n	80039d2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80039ce:	2301      	movs	r3, #1
 80039d0:	e267      	b.n	8003ea2 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	f003 0301 	and.w	r3, r3, #1
 80039da:	2b00      	cmp	r3, #0
 80039dc:	d075      	beq.n	8003aca <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80039de:	4b88      	ldr	r3, [pc, #544]	@ (8003c00 <HAL_RCC_OscConfig+0x240>)
 80039e0:	689b      	ldr	r3, [r3, #8]
 80039e2:	f003 030c 	and.w	r3, r3, #12
 80039e6:	2b04      	cmp	r3, #4
 80039e8:	d00c      	beq.n	8003a04 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80039ea:	4b85      	ldr	r3, [pc, #532]	@ (8003c00 <HAL_RCC_OscConfig+0x240>)
 80039ec:	689b      	ldr	r3, [r3, #8]
 80039ee:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80039f2:	2b08      	cmp	r3, #8
 80039f4:	d112      	bne.n	8003a1c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80039f6:	4b82      	ldr	r3, [pc, #520]	@ (8003c00 <HAL_RCC_OscConfig+0x240>)
 80039f8:	685b      	ldr	r3, [r3, #4]
 80039fa:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80039fe:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003a02:	d10b      	bne.n	8003a1c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003a04:	4b7e      	ldr	r3, [pc, #504]	@ (8003c00 <HAL_RCC_OscConfig+0x240>)
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003a0c:	2b00      	cmp	r3, #0
 8003a0e:	d05b      	beq.n	8003ac8 <HAL_RCC_OscConfig+0x108>
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	685b      	ldr	r3, [r3, #4]
 8003a14:	2b00      	cmp	r3, #0
 8003a16:	d157      	bne.n	8003ac8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003a18:	2301      	movs	r3, #1
 8003a1a:	e242      	b.n	8003ea2 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	685b      	ldr	r3, [r3, #4]
 8003a20:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003a24:	d106      	bne.n	8003a34 <HAL_RCC_OscConfig+0x74>
 8003a26:	4b76      	ldr	r3, [pc, #472]	@ (8003c00 <HAL_RCC_OscConfig+0x240>)
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	4a75      	ldr	r2, [pc, #468]	@ (8003c00 <HAL_RCC_OscConfig+0x240>)
 8003a2c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003a30:	6013      	str	r3, [r2, #0]
 8003a32:	e01d      	b.n	8003a70 <HAL_RCC_OscConfig+0xb0>
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	685b      	ldr	r3, [r3, #4]
 8003a38:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003a3c:	d10c      	bne.n	8003a58 <HAL_RCC_OscConfig+0x98>
 8003a3e:	4b70      	ldr	r3, [pc, #448]	@ (8003c00 <HAL_RCC_OscConfig+0x240>)
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	4a6f      	ldr	r2, [pc, #444]	@ (8003c00 <HAL_RCC_OscConfig+0x240>)
 8003a44:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003a48:	6013      	str	r3, [r2, #0]
 8003a4a:	4b6d      	ldr	r3, [pc, #436]	@ (8003c00 <HAL_RCC_OscConfig+0x240>)
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	4a6c      	ldr	r2, [pc, #432]	@ (8003c00 <HAL_RCC_OscConfig+0x240>)
 8003a50:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003a54:	6013      	str	r3, [r2, #0]
 8003a56:	e00b      	b.n	8003a70 <HAL_RCC_OscConfig+0xb0>
 8003a58:	4b69      	ldr	r3, [pc, #420]	@ (8003c00 <HAL_RCC_OscConfig+0x240>)
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	4a68      	ldr	r2, [pc, #416]	@ (8003c00 <HAL_RCC_OscConfig+0x240>)
 8003a5e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003a62:	6013      	str	r3, [r2, #0]
 8003a64:	4b66      	ldr	r3, [pc, #408]	@ (8003c00 <HAL_RCC_OscConfig+0x240>)
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	4a65      	ldr	r2, [pc, #404]	@ (8003c00 <HAL_RCC_OscConfig+0x240>)
 8003a6a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003a6e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	685b      	ldr	r3, [r3, #4]
 8003a74:	2b00      	cmp	r3, #0
 8003a76:	d013      	beq.n	8003aa0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003a78:	f7ff f914 	bl	8002ca4 <HAL_GetTick>
 8003a7c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003a7e:	e008      	b.n	8003a92 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003a80:	f7ff f910 	bl	8002ca4 <HAL_GetTick>
 8003a84:	4602      	mov	r2, r0
 8003a86:	693b      	ldr	r3, [r7, #16]
 8003a88:	1ad3      	subs	r3, r2, r3
 8003a8a:	2b64      	cmp	r3, #100	@ 0x64
 8003a8c:	d901      	bls.n	8003a92 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003a8e:	2303      	movs	r3, #3
 8003a90:	e207      	b.n	8003ea2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003a92:	4b5b      	ldr	r3, [pc, #364]	@ (8003c00 <HAL_RCC_OscConfig+0x240>)
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003a9a:	2b00      	cmp	r3, #0
 8003a9c:	d0f0      	beq.n	8003a80 <HAL_RCC_OscConfig+0xc0>
 8003a9e:	e014      	b.n	8003aca <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003aa0:	f7ff f900 	bl	8002ca4 <HAL_GetTick>
 8003aa4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003aa6:	e008      	b.n	8003aba <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003aa8:	f7ff f8fc 	bl	8002ca4 <HAL_GetTick>
 8003aac:	4602      	mov	r2, r0
 8003aae:	693b      	ldr	r3, [r7, #16]
 8003ab0:	1ad3      	subs	r3, r2, r3
 8003ab2:	2b64      	cmp	r3, #100	@ 0x64
 8003ab4:	d901      	bls.n	8003aba <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003ab6:	2303      	movs	r3, #3
 8003ab8:	e1f3      	b.n	8003ea2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003aba:	4b51      	ldr	r3, [pc, #324]	@ (8003c00 <HAL_RCC_OscConfig+0x240>)
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003ac2:	2b00      	cmp	r3, #0
 8003ac4:	d1f0      	bne.n	8003aa8 <HAL_RCC_OscConfig+0xe8>
 8003ac6:	e000      	b.n	8003aca <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003ac8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	f003 0302 	and.w	r3, r3, #2
 8003ad2:	2b00      	cmp	r3, #0
 8003ad4:	d063      	beq.n	8003b9e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003ad6:	4b4a      	ldr	r3, [pc, #296]	@ (8003c00 <HAL_RCC_OscConfig+0x240>)
 8003ad8:	689b      	ldr	r3, [r3, #8]
 8003ada:	f003 030c 	and.w	r3, r3, #12
 8003ade:	2b00      	cmp	r3, #0
 8003ae0:	d00b      	beq.n	8003afa <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003ae2:	4b47      	ldr	r3, [pc, #284]	@ (8003c00 <HAL_RCC_OscConfig+0x240>)
 8003ae4:	689b      	ldr	r3, [r3, #8]
 8003ae6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003aea:	2b08      	cmp	r3, #8
 8003aec:	d11c      	bne.n	8003b28 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003aee:	4b44      	ldr	r3, [pc, #272]	@ (8003c00 <HAL_RCC_OscConfig+0x240>)
 8003af0:	685b      	ldr	r3, [r3, #4]
 8003af2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003af6:	2b00      	cmp	r3, #0
 8003af8:	d116      	bne.n	8003b28 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003afa:	4b41      	ldr	r3, [pc, #260]	@ (8003c00 <HAL_RCC_OscConfig+0x240>)
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	f003 0302 	and.w	r3, r3, #2
 8003b02:	2b00      	cmp	r3, #0
 8003b04:	d005      	beq.n	8003b12 <HAL_RCC_OscConfig+0x152>
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	68db      	ldr	r3, [r3, #12]
 8003b0a:	2b01      	cmp	r3, #1
 8003b0c:	d001      	beq.n	8003b12 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003b0e:	2301      	movs	r3, #1
 8003b10:	e1c7      	b.n	8003ea2 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003b12:	4b3b      	ldr	r3, [pc, #236]	@ (8003c00 <HAL_RCC_OscConfig+0x240>)
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	691b      	ldr	r3, [r3, #16]
 8003b1e:	00db      	lsls	r3, r3, #3
 8003b20:	4937      	ldr	r1, [pc, #220]	@ (8003c00 <HAL_RCC_OscConfig+0x240>)
 8003b22:	4313      	orrs	r3, r2
 8003b24:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003b26:	e03a      	b.n	8003b9e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	68db      	ldr	r3, [r3, #12]
 8003b2c:	2b00      	cmp	r3, #0
 8003b2e:	d020      	beq.n	8003b72 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003b30:	4b34      	ldr	r3, [pc, #208]	@ (8003c04 <HAL_RCC_OscConfig+0x244>)
 8003b32:	2201      	movs	r2, #1
 8003b34:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b36:	f7ff f8b5 	bl	8002ca4 <HAL_GetTick>
 8003b3a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003b3c:	e008      	b.n	8003b50 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003b3e:	f7ff f8b1 	bl	8002ca4 <HAL_GetTick>
 8003b42:	4602      	mov	r2, r0
 8003b44:	693b      	ldr	r3, [r7, #16]
 8003b46:	1ad3      	subs	r3, r2, r3
 8003b48:	2b02      	cmp	r3, #2
 8003b4a:	d901      	bls.n	8003b50 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003b4c:	2303      	movs	r3, #3
 8003b4e:	e1a8      	b.n	8003ea2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003b50:	4b2b      	ldr	r3, [pc, #172]	@ (8003c00 <HAL_RCC_OscConfig+0x240>)
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	f003 0302 	and.w	r3, r3, #2
 8003b58:	2b00      	cmp	r3, #0
 8003b5a:	d0f0      	beq.n	8003b3e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003b5c:	4b28      	ldr	r3, [pc, #160]	@ (8003c00 <HAL_RCC_OscConfig+0x240>)
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	691b      	ldr	r3, [r3, #16]
 8003b68:	00db      	lsls	r3, r3, #3
 8003b6a:	4925      	ldr	r1, [pc, #148]	@ (8003c00 <HAL_RCC_OscConfig+0x240>)
 8003b6c:	4313      	orrs	r3, r2
 8003b6e:	600b      	str	r3, [r1, #0]
 8003b70:	e015      	b.n	8003b9e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003b72:	4b24      	ldr	r3, [pc, #144]	@ (8003c04 <HAL_RCC_OscConfig+0x244>)
 8003b74:	2200      	movs	r2, #0
 8003b76:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b78:	f7ff f894 	bl	8002ca4 <HAL_GetTick>
 8003b7c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003b7e:	e008      	b.n	8003b92 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003b80:	f7ff f890 	bl	8002ca4 <HAL_GetTick>
 8003b84:	4602      	mov	r2, r0
 8003b86:	693b      	ldr	r3, [r7, #16]
 8003b88:	1ad3      	subs	r3, r2, r3
 8003b8a:	2b02      	cmp	r3, #2
 8003b8c:	d901      	bls.n	8003b92 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003b8e:	2303      	movs	r3, #3
 8003b90:	e187      	b.n	8003ea2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003b92:	4b1b      	ldr	r3, [pc, #108]	@ (8003c00 <HAL_RCC_OscConfig+0x240>)
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	f003 0302 	and.w	r3, r3, #2
 8003b9a:	2b00      	cmp	r3, #0
 8003b9c:	d1f0      	bne.n	8003b80 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	f003 0308 	and.w	r3, r3, #8
 8003ba6:	2b00      	cmp	r3, #0
 8003ba8:	d036      	beq.n	8003c18 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	695b      	ldr	r3, [r3, #20]
 8003bae:	2b00      	cmp	r3, #0
 8003bb0:	d016      	beq.n	8003be0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003bb2:	4b15      	ldr	r3, [pc, #84]	@ (8003c08 <HAL_RCC_OscConfig+0x248>)
 8003bb4:	2201      	movs	r2, #1
 8003bb6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003bb8:	f7ff f874 	bl	8002ca4 <HAL_GetTick>
 8003bbc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003bbe:	e008      	b.n	8003bd2 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003bc0:	f7ff f870 	bl	8002ca4 <HAL_GetTick>
 8003bc4:	4602      	mov	r2, r0
 8003bc6:	693b      	ldr	r3, [r7, #16]
 8003bc8:	1ad3      	subs	r3, r2, r3
 8003bca:	2b02      	cmp	r3, #2
 8003bcc:	d901      	bls.n	8003bd2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003bce:	2303      	movs	r3, #3
 8003bd0:	e167      	b.n	8003ea2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003bd2:	4b0b      	ldr	r3, [pc, #44]	@ (8003c00 <HAL_RCC_OscConfig+0x240>)
 8003bd4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003bd6:	f003 0302 	and.w	r3, r3, #2
 8003bda:	2b00      	cmp	r3, #0
 8003bdc:	d0f0      	beq.n	8003bc0 <HAL_RCC_OscConfig+0x200>
 8003bde:	e01b      	b.n	8003c18 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003be0:	4b09      	ldr	r3, [pc, #36]	@ (8003c08 <HAL_RCC_OscConfig+0x248>)
 8003be2:	2200      	movs	r2, #0
 8003be4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003be6:	f7ff f85d 	bl	8002ca4 <HAL_GetTick>
 8003bea:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003bec:	e00e      	b.n	8003c0c <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003bee:	f7ff f859 	bl	8002ca4 <HAL_GetTick>
 8003bf2:	4602      	mov	r2, r0
 8003bf4:	693b      	ldr	r3, [r7, #16]
 8003bf6:	1ad3      	subs	r3, r2, r3
 8003bf8:	2b02      	cmp	r3, #2
 8003bfa:	d907      	bls.n	8003c0c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003bfc:	2303      	movs	r3, #3
 8003bfe:	e150      	b.n	8003ea2 <HAL_RCC_OscConfig+0x4e2>
 8003c00:	40023800 	.word	0x40023800
 8003c04:	42470000 	.word	0x42470000
 8003c08:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003c0c:	4b88      	ldr	r3, [pc, #544]	@ (8003e30 <HAL_RCC_OscConfig+0x470>)
 8003c0e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003c10:	f003 0302 	and.w	r3, r3, #2
 8003c14:	2b00      	cmp	r3, #0
 8003c16:	d1ea      	bne.n	8003bee <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	f003 0304 	and.w	r3, r3, #4
 8003c20:	2b00      	cmp	r3, #0
 8003c22:	f000 8097 	beq.w	8003d54 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003c26:	2300      	movs	r3, #0
 8003c28:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003c2a:	4b81      	ldr	r3, [pc, #516]	@ (8003e30 <HAL_RCC_OscConfig+0x470>)
 8003c2c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c2e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003c32:	2b00      	cmp	r3, #0
 8003c34:	d10f      	bne.n	8003c56 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003c36:	2300      	movs	r3, #0
 8003c38:	60bb      	str	r3, [r7, #8]
 8003c3a:	4b7d      	ldr	r3, [pc, #500]	@ (8003e30 <HAL_RCC_OscConfig+0x470>)
 8003c3c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c3e:	4a7c      	ldr	r2, [pc, #496]	@ (8003e30 <HAL_RCC_OscConfig+0x470>)
 8003c40:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003c44:	6413      	str	r3, [r2, #64]	@ 0x40
 8003c46:	4b7a      	ldr	r3, [pc, #488]	@ (8003e30 <HAL_RCC_OscConfig+0x470>)
 8003c48:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c4a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003c4e:	60bb      	str	r3, [r7, #8]
 8003c50:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003c52:	2301      	movs	r3, #1
 8003c54:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003c56:	4b77      	ldr	r3, [pc, #476]	@ (8003e34 <HAL_RCC_OscConfig+0x474>)
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003c5e:	2b00      	cmp	r3, #0
 8003c60:	d118      	bne.n	8003c94 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003c62:	4b74      	ldr	r3, [pc, #464]	@ (8003e34 <HAL_RCC_OscConfig+0x474>)
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	4a73      	ldr	r2, [pc, #460]	@ (8003e34 <HAL_RCC_OscConfig+0x474>)
 8003c68:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003c6c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003c6e:	f7ff f819 	bl	8002ca4 <HAL_GetTick>
 8003c72:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003c74:	e008      	b.n	8003c88 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003c76:	f7ff f815 	bl	8002ca4 <HAL_GetTick>
 8003c7a:	4602      	mov	r2, r0
 8003c7c:	693b      	ldr	r3, [r7, #16]
 8003c7e:	1ad3      	subs	r3, r2, r3
 8003c80:	2b02      	cmp	r3, #2
 8003c82:	d901      	bls.n	8003c88 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003c84:	2303      	movs	r3, #3
 8003c86:	e10c      	b.n	8003ea2 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003c88:	4b6a      	ldr	r3, [pc, #424]	@ (8003e34 <HAL_RCC_OscConfig+0x474>)
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003c90:	2b00      	cmp	r3, #0
 8003c92:	d0f0      	beq.n	8003c76 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	689b      	ldr	r3, [r3, #8]
 8003c98:	2b01      	cmp	r3, #1
 8003c9a:	d106      	bne.n	8003caa <HAL_RCC_OscConfig+0x2ea>
 8003c9c:	4b64      	ldr	r3, [pc, #400]	@ (8003e30 <HAL_RCC_OscConfig+0x470>)
 8003c9e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003ca0:	4a63      	ldr	r2, [pc, #396]	@ (8003e30 <HAL_RCC_OscConfig+0x470>)
 8003ca2:	f043 0301 	orr.w	r3, r3, #1
 8003ca6:	6713      	str	r3, [r2, #112]	@ 0x70
 8003ca8:	e01c      	b.n	8003ce4 <HAL_RCC_OscConfig+0x324>
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	689b      	ldr	r3, [r3, #8]
 8003cae:	2b05      	cmp	r3, #5
 8003cb0:	d10c      	bne.n	8003ccc <HAL_RCC_OscConfig+0x30c>
 8003cb2:	4b5f      	ldr	r3, [pc, #380]	@ (8003e30 <HAL_RCC_OscConfig+0x470>)
 8003cb4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003cb6:	4a5e      	ldr	r2, [pc, #376]	@ (8003e30 <HAL_RCC_OscConfig+0x470>)
 8003cb8:	f043 0304 	orr.w	r3, r3, #4
 8003cbc:	6713      	str	r3, [r2, #112]	@ 0x70
 8003cbe:	4b5c      	ldr	r3, [pc, #368]	@ (8003e30 <HAL_RCC_OscConfig+0x470>)
 8003cc0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003cc2:	4a5b      	ldr	r2, [pc, #364]	@ (8003e30 <HAL_RCC_OscConfig+0x470>)
 8003cc4:	f043 0301 	orr.w	r3, r3, #1
 8003cc8:	6713      	str	r3, [r2, #112]	@ 0x70
 8003cca:	e00b      	b.n	8003ce4 <HAL_RCC_OscConfig+0x324>
 8003ccc:	4b58      	ldr	r3, [pc, #352]	@ (8003e30 <HAL_RCC_OscConfig+0x470>)
 8003cce:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003cd0:	4a57      	ldr	r2, [pc, #348]	@ (8003e30 <HAL_RCC_OscConfig+0x470>)
 8003cd2:	f023 0301 	bic.w	r3, r3, #1
 8003cd6:	6713      	str	r3, [r2, #112]	@ 0x70
 8003cd8:	4b55      	ldr	r3, [pc, #340]	@ (8003e30 <HAL_RCC_OscConfig+0x470>)
 8003cda:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003cdc:	4a54      	ldr	r2, [pc, #336]	@ (8003e30 <HAL_RCC_OscConfig+0x470>)
 8003cde:	f023 0304 	bic.w	r3, r3, #4
 8003ce2:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	689b      	ldr	r3, [r3, #8]
 8003ce8:	2b00      	cmp	r3, #0
 8003cea:	d015      	beq.n	8003d18 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003cec:	f7fe ffda 	bl	8002ca4 <HAL_GetTick>
 8003cf0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003cf2:	e00a      	b.n	8003d0a <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003cf4:	f7fe ffd6 	bl	8002ca4 <HAL_GetTick>
 8003cf8:	4602      	mov	r2, r0
 8003cfa:	693b      	ldr	r3, [r7, #16]
 8003cfc:	1ad3      	subs	r3, r2, r3
 8003cfe:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003d02:	4293      	cmp	r3, r2
 8003d04:	d901      	bls.n	8003d0a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8003d06:	2303      	movs	r3, #3
 8003d08:	e0cb      	b.n	8003ea2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003d0a:	4b49      	ldr	r3, [pc, #292]	@ (8003e30 <HAL_RCC_OscConfig+0x470>)
 8003d0c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003d0e:	f003 0302 	and.w	r3, r3, #2
 8003d12:	2b00      	cmp	r3, #0
 8003d14:	d0ee      	beq.n	8003cf4 <HAL_RCC_OscConfig+0x334>
 8003d16:	e014      	b.n	8003d42 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003d18:	f7fe ffc4 	bl	8002ca4 <HAL_GetTick>
 8003d1c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003d1e:	e00a      	b.n	8003d36 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003d20:	f7fe ffc0 	bl	8002ca4 <HAL_GetTick>
 8003d24:	4602      	mov	r2, r0
 8003d26:	693b      	ldr	r3, [r7, #16]
 8003d28:	1ad3      	subs	r3, r2, r3
 8003d2a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003d2e:	4293      	cmp	r3, r2
 8003d30:	d901      	bls.n	8003d36 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8003d32:	2303      	movs	r3, #3
 8003d34:	e0b5      	b.n	8003ea2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003d36:	4b3e      	ldr	r3, [pc, #248]	@ (8003e30 <HAL_RCC_OscConfig+0x470>)
 8003d38:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003d3a:	f003 0302 	and.w	r3, r3, #2
 8003d3e:	2b00      	cmp	r3, #0
 8003d40:	d1ee      	bne.n	8003d20 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003d42:	7dfb      	ldrb	r3, [r7, #23]
 8003d44:	2b01      	cmp	r3, #1
 8003d46:	d105      	bne.n	8003d54 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003d48:	4b39      	ldr	r3, [pc, #228]	@ (8003e30 <HAL_RCC_OscConfig+0x470>)
 8003d4a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d4c:	4a38      	ldr	r2, [pc, #224]	@ (8003e30 <HAL_RCC_OscConfig+0x470>)
 8003d4e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003d52:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	699b      	ldr	r3, [r3, #24]
 8003d58:	2b00      	cmp	r3, #0
 8003d5a:	f000 80a1 	beq.w	8003ea0 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003d5e:	4b34      	ldr	r3, [pc, #208]	@ (8003e30 <HAL_RCC_OscConfig+0x470>)
 8003d60:	689b      	ldr	r3, [r3, #8]
 8003d62:	f003 030c 	and.w	r3, r3, #12
 8003d66:	2b08      	cmp	r3, #8
 8003d68:	d05c      	beq.n	8003e24 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	699b      	ldr	r3, [r3, #24]
 8003d6e:	2b02      	cmp	r3, #2
 8003d70:	d141      	bne.n	8003df6 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003d72:	4b31      	ldr	r3, [pc, #196]	@ (8003e38 <HAL_RCC_OscConfig+0x478>)
 8003d74:	2200      	movs	r2, #0
 8003d76:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003d78:	f7fe ff94 	bl	8002ca4 <HAL_GetTick>
 8003d7c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003d7e:	e008      	b.n	8003d92 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003d80:	f7fe ff90 	bl	8002ca4 <HAL_GetTick>
 8003d84:	4602      	mov	r2, r0
 8003d86:	693b      	ldr	r3, [r7, #16]
 8003d88:	1ad3      	subs	r3, r2, r3
 8003d8a:	2b02      	cmp	r3, #2
 8003d8c:	d901      	bls.n	8003d92 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8003d8e:	2303      	movs	r3, #3
 8003d90:	e087      	b.n	8003ea2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003d92:	4b27      	ldr	r3, [pc, #156]	@ (8003e30 <HAL_RCC_OscConfig+0x470>)
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003d9a:	2b00      	cmp	r3, #0
 8003d9c:	d1f0      	bne.n	8003d80 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	69da      	ldr	r2, [r3, #28]
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	6a1b      	ldr	r3, [r3, #32]
 8003da6:	431a      	orrs	r2, r3
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003dac:	019b      	lsls	r3, r3, #6
 8003dae:	431a      	orrs	r2, r3
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003db4:	085b      	lsrs	r3, r3, #1
 8003db6:	3b01      	subs	r3, #1
 8003db8:	041b      	lsls	r3, r3, #16
 8003dba:	431a      	orrs	r2, r3
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003dc0:	061b      	lsls	r3, r3, #24
 8003dc2:	491b      	ldr	r1, [pc, #108]	@ (8003e30 <HAL_RCC_OscConfig+0x470>)
 8003dc4:	4313      	orrs	r3, r2
 8003dc6:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003dc8:	4b1b      	ldr	r3, [pc, #108]	@ (8003e38 <HAL_RCC_OscConfig+0x478>)
 8003dca:	2201      	movs	r2, #1
 8003dcc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003dce:	f7fe ff69 	bl	8002ca4 <HAL_GetTick>
 8003dd2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003dd4:	e008      	b.n	8003de8 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003dd6:	f7fe ff65 	bl	8002ca4 <HAL_GetTick>
 8003dda:	4602      	mov	r2, r0
 8003ddc:	693b      	ldr	r3, [r7, #16]
 8003dde:	1ad3      	subs	r3, r2, r3
 8003de0:	2b02      	cmp	r3, #2
 8003de2:	d901      	bls.n	8003de8 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003de4:	2303      	movs	r3, #3
 8003de6:	e05c      	b.n	8003ea2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003de8:	4b11      	ldr	r3, [pc, #68]	@ (8003e30 <HAL_RCC_OscConfig+0x470>)
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003df0:	2b00      	cmp	r3, #0
 8003df2:	d0f0      	beq.n	8003dd6 <HAL_RCC_OscConfig+0x416>
 8003df4:	e054      	b.n	8003ea0 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003df6:	4b10      	ldr	r3, [pc, #64]	@ (8003e38 <HAL_RCC_OscConfig+0x478>)
 8003df8:	2200      	movs	r2, #0
 8003dfa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003dfc:	f7fe ff52 	bl	8002ca4 <HAL_GetTick>
 8003e00:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003e02:	e008      	b.n	8003e16 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003e04:	f7fe ff4e 	bl	8002ca4 <HAL_GetTick>
 8003e08:	4602      	mov	r2, r0
 8003e0a:	693b      	ldr	r3, [r7, #16]
 8003e0c:	1ad3      	subs	r3, r2, r3
 8003e0e:	2b02      	cmp	r3, #2
 8003e10:	d901      	bls.n	8003e16 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8003e12:	2303      	movs	r3, #3
 8003e14:	e045      	b.n	8003ea2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003e16:	4b06      	ldr	r3, [pc, #24]	@ (8003e30 <HAL_RCC_OscConfig+0x470>)
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003e1e:	2b00      	cmp	r3, #0
 8003e20:	d1f0      	bne.n	8003e04 <HAL_RCC_OscConfig+0x444>
 8003e22:	e03d      	b.n	8003ea0 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	699b      	ldr	r3, [r3, #24]
 8003e28:	2b01      	cmp	r3, #1
 8003e2a:	d107      	bne.n	8003e3c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003e2c:	2301      	movs	r3, #1
 8003e2e:	e038      	b.n	8003ea2 <HAL_RCC_OscConfig+0x4e2>
 8003e30:	40023800 	.word	0x40023800
 8003e34:	40007000 	.word	0x40007000
 8003e38:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003e3c:	4b1b      	ldr	r3, [pc, #108]	@ (8003eac <HAL_RCC_OscConfig+0x4ec>)
 8003e3e:	685b      	ldr	r3, [r3, #4]
 8003e40:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	699b      	ldr	r3, [r3, #24]
 8003e46:	2b01      	cmp	r3, #1
 8003e48:	d028      	beq.n	8003e9c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003e4a:	68fb      	ldr	r3, [r7, #12]
 8003e4c:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003e54:	429a      	cmp	r2, r3
 8003e56:	d121      	bne.n	8003e9c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003e58:	68fb      	ldr	r3, [r7, #12]
 8003e5a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003e62:	429a      	cmp	r2, r3
 8003e64:	d11a      	bne.n	8003e9c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003e66:	68fa      	ldr	r2, [r7, #12]
 8003e68:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8003e6c:	4013      	ands	r3, r2
 8003e6e:	687a      	ldr	r2, [r7, #4]
 8003e70:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8003e72:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003e74:	4293      	cmp	r3, r2
 8003e76:	d111      	bne.n	8003e9c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003e78:	68fb      	ldr	r3, [r7, #12]
 8003e7a:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003e82:	085b      	lsrs	r3, r3, #1
 8003e84:	3b01      	subs	r3, #1
 8003e86:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003e88:	429a      	cmp	r2, r3
 8003e8a:	d107      	bne.n	8003e9c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003e8c:	68fb      	ldr	r3, [r7, #12]
 8003e8e:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003e96:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003e98:	429a      	cmp	r2, r3
 8003e9a:	d001      	beq.n	8003ea0 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8003e9c:	2301      	movs	r3, #1
 8003e9e:	e000      	b.n	8003ea2 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003ea0:	2300      	movs	r3, #0
}
 8003ea2:	4618      	mov	r0, r3
 8003ea4:	3718      	adds	r7, #24
 8003ea6:	46bd      	mov	sp, r7
 8003ea8:	bd80      	pop	{r7, pc}
 8003eaa:	bf00      	nop
 8003eac:	40023800 	.word	0x40023800

08003eb0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003eb0:	b580      	push	{r7, lr}
 8003eb2:	b084      	sub	sp, #16
 8003eb4:	af00      	add	r7, sp, #0
 8003eb6:	6078      	str	r0, [r7, #4]
 8003eb8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	2b00      	cmp	r3, #0
 8003ebe:	d101      	bne.n	8003ec4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003ec0:	2301      	movs	r3, #1
 8003ec2:	e0cc      	b.n	800405e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003ec4:	4b68      	ldr	r3, [pc, #416]	@ (8004068 <HAL_RCC_ClockConfig+0x1b8>)
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	f003 0307 	and.w	r3, r3, #7
 8003ecc:	683a      	ldr	r2, [r7, #0]
 8003ece:	429a      	cmp	r2, r3
 8003ed0:	d90c      	bls.n	8003eec <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003ed2:	4b65      	ldr	r3, [pc, #404]	@ (8004068 <HAL_RCC_ClockConfig+0x1b8>)
 8003ed4:	683a      	ldr	r2, [r7, #0]
 8003ed6:	b2d2      	uxtb	r2, r2
 8003ed8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003eda:	4b63      	ldr	r3, [pc, #396]	@ (8004068 <HAL_RCC_ClockConfig+0x1b8>)
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	f003 0307 	and.w	r3, r3, #7
 8003ee2:	683a      	ldr	r2, [r7, #0]
 8003ee4:	429a      	cmp	r2, r3
 8003ee6:	d001      	beq.n	8003eec <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003ee8:	2301      	movs	r3, #1
 8003eea:	e0b8      	b.n	800405e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	f003 0302 	and.w	r3, r3, #2
 8003ef4:	2b00      	cmp	r3, #0
 8003ef6:	d020      	beq.n	8003f3a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	f003 0304 	and.w	r3, r3, #4
 8003f00:	2b00      	cmp	r3, #0
 8003f02:	d005      	beq.n	8003f10 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003f04:	4b59      	ldr	r3, [pc, #356]	@ (800406c <HAL_RCC_ClockConfig+0x1bc>)
 8003f06:	689b      	ldr	r3, [r3, #8]
 8003f08:	4a58      	ldr	r2, [pc, #352]	@ (800406c <HAL_RCC_ClockConfig+0x1bc>)
 8003f0a:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8003f0e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	f003 0308 	and.w	r3, r3, #8
 8003f18:	2b00      	cmp	r3, #0
 8003f1a:	d005      	beq.n	8003f28 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003f1c:	4b53      	ldr	r3, [pc, #332]	@ (800406c <HAL_RCC_ClockConfig+0x1bc>)
 8003f1e:	689b      	ldr	r3, [r3, #8]
 8003f20:	4a52      	ldr	r2, [pc, #328]	@ (800406c <HAL_RCC_ClockConfig+0x1bc>)
 8003f22:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8003f26:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003f28:	4b50      	ldr	r3, [pc, #320]	@ (800406c <HAL_RCC_ClockConfig+0x1bc>)
 8003f2a:	689b      	ldr	r3, [r3, #8]
 8003f2c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	689b      	ldr	r3, [r3, #8]
 8003f34:	494d      	ldr	r1, [pc, #308]	@ (800406c <HAL_RCC_ClockConfig+0x1bc>)
 8003f36:	4313      	orrs	r3, r2
 8003f38:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	f003 0301 	and.w	r3, r3, #1
 8003f42:	2b00      	cmp	r3, #0
 8003f44:	d044      	beq.n	8003fd0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	685b      	ldr	r3, [r3, #4]
 8003f4a:	2b01      	cmp	r3, #1
 8003f4c:	d107      	bne.n	8003f5e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003f4e:	4b47      	ldr	r3, [pc, #284]	@ (800406c <HAL_RCC_ClockConfig+0x1bc>)
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003f56:	2b00      	cmp	r3, #0
 8003f58:	d119      	bne.n	8003f8e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003f5a:	2301      	movs	r3, #1
 8003f5c:	e07f      	b.n	800405e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	685b      	ldr	r3, [r3, #4]
 8003f62:	2b02      	cmp	r3, #2
 8003f64:	d003      	beq.n	8003f6e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003f6a:	2b03      	cmp	r3, #3
 8003f6c:	d107      	bne.n	8003f7e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003f6e:	4b3f      	ldr	r3, [pc, #252]	@ (800406c <HAL_RCC_ClockConfig+0x1bc>)
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003f76:	2b00      	cmp	r3, #0
 8003f78:	d109      	bne.n	8003f8e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003f7a:	2301      	movs	r3, #1
 8003f7c:	e06f      	b.n	800405e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003f7e:	4b3b      	ldr	r3, [pc, #236]	@ (800406c <HAL_RCC_ClockConfig+0x1bc>)
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	f003 0302 	and.w	r3, r3, #2
 8003f86:	2b00      	cmp	r3, #0
 8003f88:	d101      	bne.n	8003f8e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003f8a:	2301      	movs	r3, #1
 8003f8c:	e067      	b.n	800405e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003f8e:	4b37      	ldr	r3, [pc, #220]	@ (800406c <HAL_RCC_ClockConfig+0x1bc>)
 8003f90:	689b      	ldr	r3, [r3, #8]
 8003f92:	f023 0203 	bic.w	r2, r3, #3
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	685b      	ldr	r3, [r3, #4]
 8003f9a:	4934      	ldr	r1, [pc, #208]	@ (800406c <HAL_RCC_ClockConfig+0x1bc>)
 8003f9c:	4313      	orrs	r3, r2
 8003f9e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003fa0:	f7fe fe80 	bl	8002ca4 <HAL_GetTick>
 8003fa4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003fa6:	e00a      	b.n	8003fbe <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003fa8:	f7fe fe7c 	bl	8002ca4 <HAL_GetTick>
 8003fac:	4602      	mov	r2, r0
 8003fae:	68fb      	ldr	r3, [r7, #12]
 8003fb0:	1ad3      	subs	r3, r2, r3
 8003fb2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003fb6:	4293      	cmp	r3, r2
 8003fb8:	d901      	bls.n	8003fbe <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003fba:	2303      	movs	r3, #3
 8003fbc:	e04f      	b.n	800405e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003fbe:	4b2b      	ldr	r3, [pc, #172]	@ (800406c <HAL_RCC_ClockConfig+0x1bc>)
 8003fc0:	689b      	ldr	r3, [r3, #8]
 8003fc2:	f003 020c 	and.w	r2, r3, #12
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	685b      	ldr	r3, [r3, #4]
 8003fca:	009b      	lsls	r3, r3, #2
 8003fcc:	429a      	cmp	r2, r3
 8003fce:	d1eb      	bne.n	8003fa8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003fd0:	4b25      	ldr	r3, [pc, #148]	@ (8004068 <HAL_RCC_ClockConfig+0x1b8>)
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	f003 0307 	and.w	r3, r3, #7
 8003fd8:	683a      	ldr	r2, [r7, #0]
 8003fda:	429a      	cmp	r2, r3
 8003fdc:	d20c      	bcs.n	8003ff8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003fde:	4b22      	ldr	r3, [pc, #136]	@ (8004068 <HAL_RCC_ClockConfig+0x1b8>)
 8003fe0:	683a      	ldr	r2, [r7, #0]
 8003fe2:	b2d2      	uxtb	r2, r2
 8003fe4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003fe6:	4b20      	ldr	r3, [pc, #128]	@ (8004068 <HAL_RCC_ClockConfig+0x1b8>)
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	f003 0307 	and.w	r3, r3, #7
 8003fee:	683a      	ldr	r2, [r7, #0]
 8003ff0:	429a      	cmp	r2, r3
 8003ff2:	d001      	beq.n	8003ff8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003ff4:	2301      	movs	r3, #1
 8003ff6:	e032      	b.n	800405e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	f003 0304 	and.w	r3, r3, #4
 8004000:	2b00      	cmp	r3, #0
 8004002:	d008      	beq.n	8004016 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004004:	4b19      	ldr	r3, [pc, #100]	@ (800406c <HAL_RCC_ClockConfig+0x1bc>)
 8004006:	689b      	ldr	r3, [r3, #8]
 8004008:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	68db      	ldr	r3, [r3, #12]
 8004010:	4916      	ldr	r1, [pc, #88]	@ (800406c <HAL_RCC_ClockConfig+0x1bc>)
 8004012:	4313      	orrs	r3, r2
 8004014:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	f003 0308 	and.w	r3, r3, #8
 800401e:	2b00      	cmp	r3, #0
 8004020:	d009      	beq.n	8004036 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004022:	4b12      	ldr	r3, [pc, #72]	@ (800406c <HAL_RCC_ClockConfig+0x1bc>)
 8004024:	689b      	ldr	r3, [r3, #8]
 8004026:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	691b      	ldr	r3, [r3, #16]
 800402e:	00db      	lsls	r3, r3, #3
 8004030:	490e      	ldr	r1, [pc, #56]	@ (800406c <HAL_RCC_ClockConfig+0x1bc>)
 8004032:	4313      	orrs	r3, r2
 8004034:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004036:	f000 f821 	bl	800407c <HAL_RCC_GetSysClockFreq>
 800403a:	4602      	mov	r2, r0
 800403c:	4b0b      	ldr	r3, [pc, #44]	@ (800406c <HAL_RCC_ClockConfig+0x1bc>)
 800403e:	689b      	ldr	r3, [r3, #8]
 8004040:	091b      	lsrs	r3, r3, #4
 8004042:	f003 030f 	and.w	r3, r3, #15
 8004046:	490a      	ldr	r1, [pc, #40]	@ (8004070 <HAL_RCC_ClockConfig+0x1c0>)
 8004048:	5ccb      	ldrb	r3, [r1, r3]
 800404a:	fa22 f303 	lsr.w	r3, r2, r3
 800404e:	4a09      	ldr	r2, [pc, #36]	@ (8004074 <HAL_RCC_ClockConfig+0x1c4>)
 8004050:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8004052:	4b09      	ldr	r3, [pc, #36]	@ (8004078 <HAL_RCC_ClockConfig+0x1c8>)
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	4618      	mov	r0, r3
 8004058:	f7fe fb88 	bl	800276c <HAL_InitTick>

  return HAL_OK;
 800405c:	2300      	movs	r3, #0
}
 800405e:	4618      	mov	r0, r3
 8004060:	3710      	adds	r7, #16
 8004062:	46bd      	mov	sp, r7
 8004064:	bd80      	pop	{r7, pc}
 8004066:	bf00      	nop
 8004068:	40023c00 	.word	0x40023c00
 800406c:	40023800 	.word	0x40023800
 8004070:	08016cac 	.word	0x08016cac
 8004074:	20000008 	.word	0x20000008
 8004078:	2000000c 	.word	0x2000000c

0800407c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800407c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004080:	b094      	sub	sp, #80	@ 0x50
 8004082:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8004084:	2300      	movs	r3, #0
 8004086:	647b      	str	r3, [r7, #68]	@ 0x44
 8004088:	2300      	movs	r3, #0
 800408a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800408c:	2300      	movs	r3, #0
 800408e:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8004090:	2300      	movs	r3, #0
 8004092:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004094:	4b79      	ldr	r3, [pc, #484]	@ (800427c <HAL_RCC_GetSysClockFreq+0x200>)
 8004096:	689b      	ldr	r3, [r3, #8]
 8004098:	f003 030c 	and.w	r3, r3, #12
 800409c:	2b08      	cmp	r3, #8
 800409e:	d00d      	beq.n	80040bc <HAL_RCC_GetSysClockFreq+0x40>
 80040a0:	2b08      	cmp	r3, #8
 80040a2:	f200 80e1 	bhi.w	8004268 <HAL_RCC_GetSysClockFreq+0x1ec>
 80040a6:	2b00      	cmp	r3, #0
 80040a8:	d002      	beq.n	80040b0 <HAL_RCC_GetSysClockFreq+0x34>
 80040aa:	2b04      	cmp	r3, #4
 80040ac:	d003      	beq.n	80040b6 <HAL_RCC_GetSysClockFreq+0x3a>
 80040ae:	e0db      	b.n	8004268 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80040b0:	4b73      	ldr	r3, [pc, #460]	@ (8004280 <HAL_RCC_GetSysClockFreq+0x204>)
 80040b2:	64bb      	str	r3, [r7, #72]	@ 0x48
       break;
 80040b4:	e0db      	b.n	800426e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80040b6:	4b73      	ldr	r3, [pc, #460]	@ (8004284 <HAL_RCC_GetSysClockFreq+0x208>)
 80040b8:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80040ba:	e0d8      	b.n	800426e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80040bc:	4b6f      	ldr	r3, [pc, #444]	@ (800427c <HAL_RCC_GetSysClockFreq+0x200>)
 80040be:	685b      	ldr	r3, [r3, #4]
 80040c0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80040c4:	647b      	str	r3, [r7, #68]	@ 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80040c6:	4b6d      	ldr	r3, [pc, #436]	@ (800427c <HAL_RCC_GetSysClockFreq+0x200>)
 80040c8:	685b      	ldr	r3, [r3, #4]
 80040ca:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80040ce:	2b00      	cmp	r3, #0
 80040d0:	d063      	beq.n	800419a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80040d2:	4b6a      	ldr	r3, [pc, #424]	@ (800427c <HAL_RCC_GetSysClockFreq+0x200>)
 80040d4:	685b      	ldr	r3, [r3, #4]
 80040d6:	099b      	lsrs	r3, r3, #6
 80040d8:	2200      	movs	r2, #0
 80040da:	63bb      	str	r3, [r7, #56]	@ 0x38
 80040dc:	63fa      	str	r2, [r7, #60]	@ 0x3c
 80040de:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80040e0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80040e4:	633b      	str	r3, [r7, #48]	@ 0x30
 80040e6:	2300      	movs	r3, #0
 80040e8:	637b      	str	r3, [r7, #52]	@ 0x34
 80040ea:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 80040ee:	4622      	mov	r2, r4
 80040f0:	462b      	mov	r3, r5
 80040f2:	f04f 0000 	mov.w	r0, #0
 80040f6:	f04f 0100 	mov.w	r1, #0
 80040fa:	0159      	lsls	r1, r3, #5
 80040fc:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004100:	0150      	lsls	r0, r2, #5
 8004102:	4602      	mov	r2, r0
 8004104:	460b      	mov	r3, r1
 8004106:	4621      	mov	r1, r4
 8004108:	1a51      	subs	r1, r2, r1
 800410a:	6139      	str	r1, [r7, #16]
 800410c:	4629      	mov	r1, r5
 800410e:	eb63 0301 	sbc.w	r3, r3, r1
 8004112:	617b      	str	r3, [r7, #20]
 8004114:	f04f 0200 	mov.w	r2, #0
 8004118:	f04f 0300 	mov.w	r3, #0
 800411c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004120:	4659      	mov	r1, fp
 8004122:	018b      	lsls	r3, r1, #6
 8004124:	4651      	mov	r1, sl
 8004126:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800412a:	4651      	mov	r1, sl
 800412c:	018a      	lsls	r2, r1, #6
 800412e:	4651      	mov	r1, sl
 8004130:	ebb2 0801 	subs.w	r8, r2, r1
 8004134:	4659      	mov	r1, fp
 8004136:	eb63 0901 	sbc.w	r9, r3, r1
 800413a:	f04f 0200 	mov.w	r2, #0
 800413e:	f04f 0300 	mov.w	r3, #0
 8004142:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004146:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800414a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800414e:	4690      	mov	r8, r2
 8004150:	4699      	mov	r9, r3
 8004152:	4623      	mov	r3, r4
 8004154:	eb18 0303 	adds.w	r3, r8, r3
 8004158:	60bb      	str	r3, [r7, #8]
 800415a:	462b      	mov	r3, r5
 800415c:	eb49 0303 	adc.w	r3, r9, r3
 8004160:	60fb      	str	r3, [r7, #12]
 8004162:	f04f 0200 	mov.w	r2, #0
 8004166:	f04f 0300 	mov.w	r3, #0
 800416a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800416e:	4629      	mov	r1, r5
 8004170:	024b      	lsls	r3, r1, #9
 8004172:	4621      	mov	r1, r4
 8004174:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8004178:	4621      	mov	r1, r4
 800417a:	024a      	lsls	r2, r1, #9
 800417c:	4610      	mov	r0, r2
 800417e:	4619      	mov	r1, r3
 8004180:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004182:	2200      	movs	r2, #0
 8004184:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004186:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004188:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800418c:	f7fc fcce 	bl	8000b2c <__aeabi_uldivmod>
 8004190:	4602      	mov	r2, r0
 8004192:	460b      	mov	r3, r1
 8004194:	4613      	mov	r3, r2
 8004196:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004198:	e058      	b.n	800424c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800419a:	4b38      	ldr	r3, [pc, #224]	@ (800427c <HAL_RCC_GetSysClockFreq+0x200>)
 800419c:	685b      	ldr	r3, [r3, #4]
 800419e:	099b      	lsrs	r3, r3, #6
 80041a0:	2200      	movs	r2, #0
 80041a2:	4618      	mov	r0, r3
 80041a4:	4611      	mov	r1, r2
 80041a6:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80041aa:	623b      	str	r3, [r7, #32]
 80041ac:	2300      	movs	r3, #0
 80041ae:	627b      	str	r3, [r7, #36]	@ 0x24
 80041b0:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80041b4:	4642      	mov	r2, r8
 80041b6:	464b      	mov	r3, r9
 80041b8:	f04f 0000 	mov.w	r0, #0
 80041bc:	f04f 0100 	mov.w	r1, #0
 80041c0:	0159      	lsls	r1, r3, #5
 80041c2:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80041c6:	0150      	lsls	r0, r2, #5
 80041c8:	4602      	mov	r2, r0
 80041ca:	460b      	mov	r3, r1
 80041cc:	4641      	mov	r1, r8
 80041ce:	ebb2 0a01 	subs.w	sl, r2, r1
 80041d2:	4649      	mov	r1, r9
 80041d4:	eb63 0b01 	sbc.w	fp, r3, r1
 80041d8:	f04f 0200 	mov.w	r2, #0
 80041dc:	f04f 0300 	mov.w	r3, #0
 80041e0:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80041e4:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80041e8:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80041ec:	ebb2 040a 	subs.w	r4, r2, sl
 80041f0:	eb63 050b 	sbc.w	r5, r3, fp
 80041f4:	f04f 0200 	mov.w	r2, #0
 80041f8:	f04f 0300 	mov.w	r3, #0
 80041fc:	00eb      	lsls	r3, r5, #3
 80041fe:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004202:	00e2      	lsls	r2, r4, #3
 8004204:	4614      	mov	r4, r2
 8004206:	461d      	mov	r5, r3
 8004208:	4643      	mov	r3, r8
 800420a:	18e3      	adds	r3, r4, r3
 800420c:	603b      	str	r3, [r7, #0]
 800420e:	464b      	mov	r3, r9
 8004210:	eb45 0303 	adc.w	r3, r5, r3
 8004214:	607b      	str	r3, [r7, #4]
 8004216:	f04f 0200 	mov.w	r2, #0
 800421a:	f04f 0300 	mov.w	r3, #0
 800421e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004222:	4629      	mov	r1, r5
 8004224:	028b      	lsls	r3, r1, #10
 8004226:	4621      	mov	r1, r4
 8004228:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800422c:	4621      	mov	r1, r4
 800422e:	028a      	lsls	r2, r1, #10
 8004230:	4610      	mov	r0, r2
 8004232:	4619      	mov	r1, r3
 8004234:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004236:	2200      	movs	r2, #0
 8004238:	61bb      	str	r3, [r7, #24]
 800423a:	61fa      	str	r2, [r7, #28]
 800423c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004240:	f7fc fc74 	bl	8000b2c <__aeabi_uldivmod>
 8004244:	4602      	mov	r2, r0
 8004246:	460b      	mov	r3, r1
 8004248:	4613      	mov	r3, r2
 800424a:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800424c:	4b0b      	ldr	r3, [pc, #44]	@ (800427c <HAL_RCC_GetSysClockFreq+0x200>)
 800424e:	685b      	ldr	r3, [r3, #4]
 8004250:	0c1b      	lsrs	r3, r3, #16
 8004252:	f003 0303 	and.w	r3, r3, #3
 8004256:	3301      	adds	r3, #1
 8004258:	005b      	lsls	r3, r3, #1
 800425a:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco/pllp;
 800425c:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800425e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004260:	fbb2 f3f3 	udiv	r3, r2, r3
 8004264:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004266:	e002      	b.n	800426e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004268:	4b05      	ldr	r3, [pc, #20]	@ (8004280 <HAL_RCC_GetSysClockFreq+0x204>)
 800426a:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800426c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800426e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8004270:	4618      	mov	r0, r3
 8004272:	3750      	adds	r7, #80	@ 0x50
 8004274:	46bd      	mov	sp, r7
 8004276:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800427a:	bf00      	nop
 800427c:	40023800 	.word	0x40023800
 8004280:	00f42400 	.word	0x00f42400
 8004284:	007a1200 	.word	0x007a1200

08004288 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004288:	b480      	push	{r7}
 800428a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800428c:	4b03      	ldr	r3, [pc, #12]	@ (800429c <HAL_RCC_GetHCLKFreq+0x14>)
 800428e:	681b      	ldr	r3, [r3, #0]
}
 8004290:	4618      	mov	r0, r3
 8004292:	46bd      	mov	sp, r7
 8004294:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004298:	4770      	bx	lr
 800429a:	bf00      	nop
 800429c:	20000008 	.word	0x20000008

080042a0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80042a0:	b580      	push	{r7, lr}
 80042a2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80042a4:	f7ff fff0 	bl	8004288 <HAL_RCC_GetHCLKFreq>
 80042a8:	4602      	mov	r2, r0
 80042aa:	4b05      	ldr	r3, [pc, #20]	@ (80042c0 <HAL_RCC_GetPCLK1Freq+0x20>)
 80042ac:	689b      	ldr	r3, [r3, #8]
 80042ae:	0a9b      	lsrs	r3, r3, #10
 80042b0:	f003 0307 	and.w	r3, r3, #7
 80042b4:	4903      	ldr	r1, [pc, #12]	@ (80042c4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80042b6:	5ccb      	ldrb	r3, [r1, r3]
 80042b8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80042bc:	4618      	mov	r0, r3
 80042be:	bd80      	pop	{r7, pc}
 80042c0:	40023800 	.word	0x40023800
 80042c4:	08016cbc 	.word	0x08016cbc

080042c8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80042c8:	b580      	push	{r7, lr}
 80042ca:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80042cc:	f7ff ffdc 	bl	8004288 <HAL_RCC_GetHCLKFreq>
 80042d0:	4602      	mov	r2, r0
 80042d2:	4b05      	ldr	r3, [pc, #20]	@ (80042e8 <HAL_RCC_GetPCLK2Freq+0x20>)
 80042d4:	689b      	ldr	r3, [r3, #8]
 80042d6:	0b5b      	lsrs	r3, r3, #13
 80042d8:	f003 0307 	and.w	r3, r3, #7
 80042dc:	4903      	ldr	r1, [pc, #12]	@ (80042ec <HAL_RCC_GetPCLK2Freq+0x24>)
 80042de:	5ccb      	ldrb	r3, [r1, r3]
 80042e0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80042e4:	4618      	mov	r0, r3
 80042e6:	bd80      	pop	{r7, pc}
 80042e8:	40023800 	.word	0x40023800
 80042ec:	08016cbc 	.word	0x08016cbc

080042f0 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80042f0:	b480      	push	{r7}
 80042f2:	b083      	sub	sp, #12
 80042f4:	af00      	add	r7, sp, #0
 80042f6:	6078      	str	r0, [r7, #4]
 80042f8:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	220f      	movs	r2, #15
 80042fe:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8004300:	4b12      	ldr	r3, [pc, #72]	@ (800434c <HAL_RCC_GetClockConfig+0x5c>)
 8004302:	689b      	ldr	r3, [r3, #8]
 8004304:	f003 0203 	and.w	r2, r3, #3
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 800430c:	4b0f      	ldr	r3, [pc, #60]	@ (800434c <HAL_RCC_GetClockConfig+0x5c>)
 800430e:	689b      	ldr	r3, [r3, #8]
 8004310:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8004318:	4b0c      	ldr	r3, [pc, #48]	@ (800434c <HAL_RCC_GetClockConfig+0x5c>)
 800431a:	689b      	ldr	r3, [r3, #8]
 800431c:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8004324:	4b09      	ldr	r3, [pc, #36]	@ (800434c <HAL_RCC_GetClockConfig+0x5c>)
 8004326:	689b      	ldr	r3, [r3, #8]
 8004328:	08db      	lsrs	r3, r3, #3
 800432a:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8004332:	4b07      	ldr	r3, [pc, #28]	@ (8004350 <HAL_RCC_GetClockConfig+0x60>)
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	f003 0207 	and.w	r2, r3, #7
 800433a:	683b      	ldr	r3, [r7, #0]
 800433c:	601a      	str	r2, [r3, #0]
}
 800433e:	bf00      	nop
 8004340:	370c      	adds	r7, #12
 8004342:	46bd      	mov	sp, r7
 8004344:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004348:	4770      	bx	lr
 800434a:	bf00      	nop
 800434c:	40023800 	.word	0x40023800
 8004350:	40023c00 	.word	0x40023c00

08004354 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004354:	b580      	push	{r7, lr}
 8004356:	b082      	sub	sp, #8
 8004358:	af00      	add	r7, sp, #0
 800435a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	2b00      	cmp	r3, #0
 8004360:	d101      	bne.n	8004366 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004362:	2301      	movs	r3, #1
 8004364:	e041      	b.n	80043ea <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800436c:	b2db      	uxtb	r3, r3
 800436e:	2b00      	cmp	r3, #0
 8004370:	d106      	bne.n	8004380 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	2200      	movs	r2, #0
 8004376:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800437a:	6878      	ldr	r0, [r7, #4]
 800437c:	f7fe f86c 	bl	8002458 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	2202      	movs	r2, #2
 8004384:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	681a      	ldr	r2, [r3, #0]
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	3304      	adds	r3, #4
 8004390:	4619      	mov	r1, r3
 8004392:	4610      	mov	r0, r2
 8004394:	f000 fc96 	bl	8004cc4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	2201      	movs	r2, #1
 800439c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	2201      	movs	r2, #1
 80043a4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	2201      	movs	r2, #1
 80043ac:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	2201      	movs	r2, #1
 80043b4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	2201      	movs	r2, #1
 80043bc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	2201      	movs	r2, #1
 80043c4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	2201      	movs	r2, #1
 80043cc:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	2201      	movs	r2, #1
 80043d4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	2201      	movs	r2, #1
 80043dc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	2201      	movs	r2, #1
 80043e4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80043e8:	2300      	movs	r3, #0
}
 80043ea:	4618      	mov	r0, r3
 80043ec:	3708      	adds	r7, #8
 80043ee:	46bd      	mov	sp, r7
 80043f0:	bd80      	pop	{r7, pc}
	...

080043f4 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80043f4:	b480      	push	{r7}
 80043f6:	b085      	sub	sp, #20
 80043f8:	af00      	add	r7, sp, #0
 80043fa:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004402:	b2db      	uxtb	r3, r3
 8004404:	2b01      	cmp	r3, #1
 8004406:	d001      	beq.n	800440c <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8004408:	2301      	movs	r3, #1
 800440a:	e03c      	b.n	8004486 <HAL_TIM_Base_Start+0x92>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	2202      	movs	r2, #2
 8004410:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	4a1e      	ldr	r2, [pc, #120]	@ (8004494 <HAL_TIM_Base_Start+0xa0>)
 800441a:	4293      	cmp	r3, r2
 800441c:	d018      	beq.n	8004450 <HAL_TIM_Base_Start+0x5c>
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004426:	d013      	beq.n	8004450 <HAL_TIM_Base_Start+0x5c>
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	4a1a      	ldr	r2, [pc, #104]	@ (8004498 <HAL_TIM_Base_Start+0xa4>)
 800442e:	4293      	cmp	r3, r2
 8004430:	d00e      	beq.n	8004450 <HAL_TIM_Base_Start+0x5c>
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	4a19      	ldr	r2, [pc, #100]	@ (800449c <HAL_TIM_Base_Start+0xa8>)
 8004438:	4293      	cmp	r3, r2
 800443a:	d009      	beq.n	8004450 <HAL_TIM_Base_Start+0x5c>
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	4a17      	ldr	r2, [pc, #92]	@ (80044a0 <HAL_TIM_Base_Start+0xac>)
 8004442:	4293      	cmp	r3, r2
 8004444:	d004      	beq.n	8004450 <HAL_TIM_Base_Start+0x5c>
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	4a16      	ldr	r2, [pc, #88]	@ (80044a4 <HAL_TIM_Base_Start+0xb0>)
 800444c:	4293      	cmp	r3, r2
 800444e:	d111      	bne.n	8004474 <HAL_TIM_Base_Start+0x80>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	689b      	ldr	r3, [r3, #8]
 8004456:	f003 0307 	and.w	r3, r3, #7
 800445a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800445c:	68fb      	ldr	r3, [r7, #12]
 800445e:	2b06      	cmp	r3, #6
 8004460:	d010      	beq.n	8004484 <HAL_TIM_Base_Start+0x90>
    {
      __HAL_TIM_ENABLE(htim);
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	681a      	ldr	r2, [r3, #0]
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	f042 0201 	orr.w	r2, r2, #1
 8004470:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004472:	e007      	b.n	8004484 <HAL_TIM_Base_Start+0x90>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	681a      	ldr	r2, [r3, #0]
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	f042 0201 	orr.w	r2, r2, #1
 8004482:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004484:	2300      	movs	r3, #0
}
 8004486:	4618      	mov	r0, r3
 8004488:	3714      	adds	r7, #20
 800448a:	46bd      	mov	sp, r7
 800448c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004490:	4770      	bx	lr
 8004492:	bf00      	nop
 8004494:	40010000 	.word	0x40010000
 8004498:	40000400 	.word	0x40000400
 800449c:	40000800 	.word	0x40000800
 80044a0:	40000c00 	.word	0x40000c00
 80044a4:	40014000 	.word	0x40014000

080044a8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80044a8:	b480      	push	{r7}
 80044aa:	b085      	sub	sp, #20
 80044ac:	af00      	add	r7, sp, #0
 80044ae:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80044b6:	b2db      	uxtb	r3, r3
 80044b8:	2b01      	cmp	r3, #1
 80044ba:	d001      	beq.n	80044c0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80044bc:	2301      	movs	r3, #1
 80044be:	e044      	b.n	800454a <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	2202      	movs	r2, #2
 80044c4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	68da      	ldr	r2, [r3, #12]
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	f042 0201 	orr.w	r2, r2, #1
 80044d6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	4a1e      	ldr	r2, [pc, #120]	@ (8004558 <HAL_TIM_Base_Start_IT+0xb0>)
 80044de:	4293      	cmp	r3, r2
 80044e0:	d018      	beq.n	8004514 <HAL_TIM_Base_Start_IT+0x6c>
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80044ea:	d013      	beq.n	8004514 <HAL_TIM_Base_Start_IT+0x6c>
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	4a1a      	ldr	r2, [pc, #104]	@ (800455c <HAL_TIM_Base_Start_IT+0xb4>)
 80044f2:	4293      	cmp	r3, r2
 80044f4:	d00e      	beq.n	8004514 <HAL_TIM_Base_Start_IT+0x6c>
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	4a19      	ldr	r2, [pc, #100]	@ (8004560 <HAL_TIM_Base_Start_IT+0xb8>)
 80044fc:	4293      	cmp	r3, r2
 80044fe:	d009      	beq.n	8004514 <HAL_TIM_Base_Start_IT+0x6c>
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	4a17      	ldr	r2, [pc, #92]	@ (8004564 <HAL_TIM_Base_Start_IT+0xbc>)
 8004506:	4293      	cmp	r3, r2
 8004508:	d004      	beq.n	8004514 <HAL_TIM_Base_Start_IT+0x6c>
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	4a16      	ldr	r2, [pc, #88]	@ (8004568 <HAL_TIM_Base_Start_IT+0xc0>)
 8004510:	4293      	cmp	r3, r2
 8004512:	d111      	bne.n	8004538 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	689b      	ldr	r3, [r3, #8]
 800451a:	f003 0307 	and.w	r3, r3, #7
 800451e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004520:	68fb      	ldr	r3, [r7, #12]
 8004522:	2b06      	cmp	r3, #6
 8004524:	d010      	beq.n	8004548 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	681a      	ldr	r2, [r3, #0]
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	f042 0201 	orr.w	r2, r2, #1
 8004534:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004536:	e007      	b.n	8004548 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	681a      	ldr	r2, [r3, #0]
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	f042 0201 	orr.w	r2, r2, #1
 8004546:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004548:	2300      	movs	r3, #0
}
 800454a:	4618      	mov	r0, r3
 800454c:	3714      	adds	r7, #20
 800454e:	46bd      	mov	sp, r7
 8004550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004554:	4770      	bx	lr
 8004556:	bf00      	nop
 8004558:	40010000 	.word	0x40010000
 800455c:	40000400 	.word	0x40000400
 8004560:	40000800 	.word	0x40000800
 8004564:	40000c00 	.word	0x40000c00
 8004568:	40014000 	.word	0x40014000

0800456c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800456c:	b580      	push	{r7, lr}
 800456e:	b082      	sub	sp, #8
 8004570:	af00      	add	r7, sp, #0
 8004572:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	2b00      	cmp	r3, #0
 8004578:	d101      	bne.n	800457e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800457a:	2301      	movs	r3, #1
 800457c:	e041      	b.n	8004602 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004584:	b2db      	uxtb	r3, r3
 8004586:	2b00      	cmp	r3, #0
 8004588:	d106      	bne.n	8004598 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	2200      	movs	r2, #0
 800458e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004592:	6878      	ldr	r0, [r7, #4]
 8004594:	f000 f839 	bl	800460a <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	2202      	movs	r2, #2
 800459c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	681a      	ldr	r2, [r3, #0]
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	3304      	adds	r3, #4
 80045a8:	4619      	mov	r1, r3
 80045aa:	4610      	mov	r0, r2
 80045ac:	f000 fb8a 	bl	8004cc4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	2201      	movs	r2, #1
 80045b4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	2201      	movs	r2, #1
 80045bc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	2201      	movs	r2, #1
 80045c4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	2201      	movs	r2, #1
 80045cc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	2201      	movs	r2, #1
 80045d4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	2201      	movs	r2, #1
 80045dc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	2201      	movs	r2, #1
 80045e4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	2201      	movs	r2, #1
 80045ec:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	2201      	movs	r2, #1
 80045f4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	2201      	movs	r2, #1
 80045fc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004600:	2300      	movs	r3, #0
}
 8004602:	4618      	mov	r0, r3
 8004604:	3708      	adds	r7, #8
 8004606:	46bd      	mov	sp, r7
 8004608:	bd80      	pop	{r7, pc}

0800460a <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800460a:	b480      	push	{r7}
 800460c:	b083      	sub	sp, #12
 800460e:	af00      	add	r7, sp, #0
 8004610:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8004612:	bf00      	nop
 8004614:	370c      	adds	r7, #12
 8004616:	46bd      	mov	sp, r7
 8004618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800461c:	4770      	bx	lr
	...

08004620 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004620:	b580      	push	{r7, lr}
 8004622:	b084      	sub	sp, #16
 8004624:	af00      	add	r7, sp, #0
 8004626:	6078      	str	r0, [r7, #4]
 8004628:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800462a:	683b      	ldr	r3, [r7, #0]
 800462c:	2b00      	cmp	r3, #0
 800462e:	d109      	bne.n	8004644 <HAL_TIM_PWM_Start+0x24>
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8004636:	b2db      	uxtb	r3, r3
 8004638:	2b01      	cmp	r3, #1
 800463a:	bf14      	ite	ne
 800463c:	2301      	movne	r3, #1
 800463e:	2300      	moveq	r3, #0
 8004640:	b2db      	uxtb	r3, r3
 8004642:	e022      	b.n	800468a <HAL_TIM_PWM_Start+0x6a>
 8004644:	683b      	ldr	r3, [r7, #0]
 8004646:	2b04      	cmp	r3, #4
 8004648:	d109      	bne.n	800465e <HAL_TIM_PWM_Start+0x3e>
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8004650:	b2db      	uxtb	r3, r3
 8004652:	2b01      	cmp	r3, #1
 8004654:	bf14      	ite	ne
 8004656:	2301      	movne	r3, #1
 8004658:	2300      	moveq	r3, #0
 800465a:	b2db      	uxtb	r3, r3
 800465c:	e015      	b.n	800468a <HAL_TIM_PWM_Start+0x6a>
 800465e:	683b      	ldr	r3, [r7, #0]
 8004660:	2b08      	cmp	r3, #8
 8004662:	d109      	bne.n	8004678 <HAL_TIM_PWM_Start+0x58>
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800466a:	b2db      	uxtb	r3, r3
 800466c:	2b01      	cmp	r3, #1
 800466e:	bf14      	ite	ne
 8004670:	2301      	movne	r3, #1
 8004672:	2300      	moveq	r3, #0
 8004674:	b2db      	uxtb	r3, r3
 8004676:	e008      	b.n	800468a <HAL_TIM_PWM_Start+0x6a>
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800467e:	b2db      	uxtb	r3, r3
 8004680:	2b01      	cmp	r3, #1
 8004682:	bf14      	ite	ne
 8004684:	2301      	movne	r3, #1
 8004686:	2300      	moveq	r3, #0
 8004688:	b2db      	uxtb	r3, r3
 800468a:	2b00      	cmp	r3, #0
 800468c:	d001      	beq.n	8004692 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 800468e:	2301      	movs	r3, #1
 8004690:	e068      	b.n	8004764 <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004692:	683b      	ldr	r3, [r7, #0]
 8004694:	2b00      	cmp	r3, #0
 8004696:	d104      	bne.n	80046a2 <HAL_TIM_PWM_Start+0x82>
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	2202      	movs	r2, #2
 800469c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80046a0:	e013      	b.n	80046ca <HAL_TIM_PWM_Start+0xaa>
 80046a2:	683b      	ldr	r3, [r7, #0]
 80046a4:	2b04      	cmp	r3, #4
 80046a6:	d104      	bne.n	80046b2 <HAL_TIM_PWM_Start+0x92>
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	2202      	movs	r2, #2
 80046ac:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80046b0:	e00b      	b.n	80046ca <HAL_TIM_PWM_Start+0xaa>
 80046b2:	683b      	ldr	r3, [r7, #0]
 80046b4:	2b08      	cmp	r3, #8
 80046b6:	d104      	bne.n	80046c2 <HAL_TIM_PWM_Start+0xa2>
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	2202      	movs	r2, #2
 80046bc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80046c0:	e003      	b.n	80046ca <HAL_TIM_PWM_Start+0xaa>
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	2202      	movs	r2, #2
 80046c6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	2201      	movs	r2, #1
 80046d0:	6839      	ldr	r1, [r7, #0]
 80046d2:	4618      	mov	r0, r3
 80046d4:	f000 fda8 	bl	8005228 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	4a23      	ldr	r2, [pc, #140]	@ (800476c <HAL_TIM_PWM_Start+0x14c>)
 80046de:	4293      	cmp	r3, r2
 80046e0:	d107      	bne.n	80046f2 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80046f0:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	4a1d      	ldr	r2, [pc, #116]	@ (800476c <HAL_TIM_PWM_Start+0x14c>)
 80046f8:	4293      	cmp	r3, r2
 80046fa:	d018      	beq.n	800472e <HAL_TIM_PWM_Start+0x10e>
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004704:	d013      	beq.n	800472e <HAL_TIM_PWM_Start+0x10e>
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	4a19      	ldr	r2, [pc, #100]	@ (8004770 <HAL_TIM_PWM_Start+0x150>)
 800470c:	4293      	cmp	r3, r2
 800470e:	d00e      	beq.n	800472e <HAL_TIM_PWM_Start+0x10e>
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	4a17      	ldr	r2, [pc, #92]	@ (8004774 <HAL_TIM_PWM_Start+0x154>)
 8004716:	4293      	cmp	r3, r2
 8004718:	d009      	beq.n	800472e <HAL_TIM_PWM_Start+0x10e>
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	4a16      	ldr	r2, [pc, #88]	@ (8004778 <HAL_TIM_PWM_Start+0x158>)
 8004720:	4293      	cmp	r3, r2
 8004722:	d004      	beq.n	800472e <HAL_TIM_PWM_Start+0x10e>
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	4a14      	ldr	r2, [pc, #80]	@ (800477c <HAL_TIM_PWM_Start+0x15c>)
 800472a:	4293      	cmp	r3, r2
 800472c:	d111      	bne.n	8004752 <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	689b      	ldr	r3, [r3, #8]
 8004734:	f003 0307 	and.w	r3, r3, #7
 8004738:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800473a:	68fb      	ldr	r3, [r7, #12]
 800473c:	2b06      	cmp	r3, #6
 800473e:	d010      	beq.n	8004762 <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	681a      	ldr	r2, [r3, #0]
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	f042 0201 	orr.w	r2, r2, #1
 800474e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004750:	e007      	b.n	8004762 <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	681a      	ldr	r2, [r3, #0]
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	f042 0201 	orr.w	r2, r2, #1
 8004760:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004762:	2300      	movs	r3, #0
}
 8004764:	4618      	mov	r0, r3
 8004766:	3710      	adds	r7, #16
 8004768:	46bd      	mov	sp, r7
 800476a:	bd80      	pop	{r7, pc}
 800476c:	40010000 	.word	0x40010000
 8004770:	40000400 	.word	0x40000400
 8004774:	40000800 	.word	0x40000800
 8004778:	40000c00 	.word	0x40000c00
 800477c:	40014000 	.word	0x40014000

08004780 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004780:	b580      	push	{r7, lr}
 8004782:	b084      	sub	sp, #16
 8004784:	af00      	add	r7, sp, #0
 8004786:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	68db      	ldr	r3, [r3, #12]
 800478e:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	691b      	ldr	r3, [r3, #16]
 8004796:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8004798:	68bb      	ldr	r3, [r7, #8]
 800479a:	f003 0302 	and.w	r3, r3, #2
 800479e:	2b00      	cmp	r3, #0
 80047a0:	d020      	beq.n	80047e4 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80047a2:	68fb      	ldr	r3, [r7, #12]
 80047a4:	f003 0302 	and.w	r3, r3, #2
 80047a8:	2b00      	cmp	r3, #0
 80047aa:	d01b      	beq.n	80047e4 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	f06f 0202 	mvn.w	r2, #2
 80047b4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	2201      	movs	r2, #1
 80047ba:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	699b      	ldr	r3, [r3, #24]
 80047c2:	f003 0303 	and.w	r3, r3, #3
 80047c6:	2b00      	cmp	r3, #0
 80047c8:	d003      	beq.n	80047d2 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80047ca:	6878      	ldr	r0, [r7, #4]
 80047cc:	f000 fa5b 	bl	8004c86 <HAL_TIM_IC_CaptureCallback>
 80047d0:	e005      	b.n	80047de <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80047d2:	6878      	ldr	r0, [r7, #4]
 80047d4:	f000 fa4d 	bl	8004c72 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80047d8:	6878      	ldr	r0, [r7, #4]
 80047da:	f000 fa5e 	bl	8004c9a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	2200      	movs	r2, #0
 80047e2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80047e4:	68bb      	ldr	r3, [r7, #8]
 80047e6:	f003 0304 	and.w	r3, r3, #4
 80047ea:	2b00      	cmp	r3, #0
 80047ec:	d020      	beq.n	8004830 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80047ee:	68fb      	ldr	r3, [r7, #12]
 80047f0:	f003 0304 	and.w	r3, r3, #4
 80047f4:	2b00      	cmp	r3, #0
 80047f6:	d01b      	beq.n	8004830 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	f06f 0204 	mvn.w	r2, #4
 8004800:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	2202      	movs	r2, #2
 8004806:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	699b      	ldr	r3, [r3, #24]
 800480e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004812:	2b00      	cmp	r3, #0
 8004814:	d003      	beq.n	800481e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004816:	6878      	ldr	r0, [r7, #4]
 8004818:	f000 fa35 	bl	8004c86 <HAL_TIM_IC_CaptureCallback>
 800481c:	e005      	b.n	800482a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800481e:	6878      	ldr	r0, [r7, #4]
 8004820:	f000 fa27 	bl	8004c72 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004824:	6878      	ldr	r0, [r7, #4]
 8004826:	f000 fa38 	bl	8004c9a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	2200      	movs	r2, #0
 800482e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8004830:	68bb      	ldr	r3, [r7, #8]
 8004832:	f003 0308 	and.w	r3, r3, #8
 8004836:	2b00      	cmp	r3, #0
 8004838:	d020      	beq.n	800487c <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800483a:	68fb      	ldr	r3, [r7, #12]
 800483c:	f003 0308 	and.w	r3, r3, #8
 8004840:	2b00      	cmp	r3, #0
 8004842:	d01b      	beq.n	800487c <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	f06f 0208 	mvn.w	r2, #8
 800484c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	2204      	movs	r2, #4
 8004852:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	69db      	ldr	r3, [r3, #28]
 800485a:	f003 0303 	and.w	r3, r3, #3
 800485e:	2b00      	cmp	r3, #0
 8004860:	d003      	beq.n	800486a <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004862:	6878      	ldr	r0, [r7, #4]
 8004864:	f000 fa0f 	bl	8004c86 <HAL_TIM_IC_CaptureCallback>
 8004868:	e005      	b.n	8004876 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800486a:	6878      	ldr	r0, [r7, #4]
 800486c:	f000 fa01 	bl	8004c72 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004870:	6878      	ldr	r0, [r7, #4]
 8004872:	f000 fa12 	bl	8004c9a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	2200      	movs	r2, #0
 800487a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800487c:	68bb      	ldr	r3, [r7, #8]
 800487e:	f003 0310 	and.w	r3, r3, #16
 8004882:	2b00      	cmp	r3, #0
 8004884:	d020      	beq.n	80048c8 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8004886:	68fb      	ldr	r3, [r7, #12]
 8004888:	f003 0310 	and.w	r3, r3, #16
 800488c:	2b00      	cmp	r3, #0
 800488e:	d01b      	beq.n	80048c8 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	f06f 0210 	mvn.w	r2, #16
 8004898:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	2208      	movs	r2, #8
 800489e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	69db      	ldr	r3, [r3, #28]
 80048a6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80048aa:	2b00      	cmp	r3, #0
 80048ac:	d003      	beq.n	80048b6 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80048ae:	6878      	ldr	r0, [r7, #4]
 80048b0:	f000 f9e9 	bl	8004c86 <HAL_TIM_IC_CaptureCallback>
 80048b4:	e005      	b.n	80048c2 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80048b6:	6878      	ldr	r0, [r7, #4]
 80048b8:	f000 f9db 	bl	8004c72 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80048bc:	6878      	ldr	r0, [r7, #4]
 80048be:	f000 f9ec 	bl	8004c9a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	2200      	movs	r2, #0
 80048c6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80048c8:	68bb      	ldr	r3, [r7, #8]
 80048ca:	f003 0301 	and.w	r3, r3, #1
 80048ce:	2b00      	cmp	r3, #0
 80048d0:	d00c      	beq.n	80048ec <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80048d2:	68fb      	ldr	r3, [r7, #12]
 80048d4:	f003 0301 	and.w	r3, r3, #1
 80048d8:	2b00      	cmp	r3, #0
 80048da:	d007      	beq.n	80048ec <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	f06f 0201 	mvn.w	r2, #1
 80048e4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80048e6:	6878      	ldr	r0, [r7, #4]
 80048e8:	f7fd fc0c 	bl	8002104 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 80048ec:	68bb      	ldr	r3, [r7, #8]
 80048ee:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80048f2:	2b00      	cmp	r3, #0
 80048f4:	d00c      	beq.n	8004910 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80048f6:	68fb      	ldr	r3, [r7, #12]
 80048f8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80048fc:	2b00      	cmp	r3, #0
 80048fe:	d007      	beq.n	8004910 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8004908:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800490a:	6878      	ldr	r0, [r7, #4]
 800490c:	f000 fd2a 	bl	8005364 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8004910:	68bb      	ldr	r3, [r7, #8]
 8004912:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004916:	2b00      	cmp	r3, #0
 8004918:	d00c      	beq.n	8004934 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800491a:	68fb      	ldr	r3, [r7, #12]
 800491c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004920:	2b00      	cmp	r3, #0
 8004922:	d007      	beq.n	8004934 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800492c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800492e:	6878      	ldr	r0, [r7, #4]
 8004930:	f000 f9bd 	bl	8004cae <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8004934:	68bb      	ldr	r3, [r7, #8]
 8004936:	f003 0320 	and.w	r3, r3, #32
 800493a:	2b00      	cmp	r3, #0
 800493c:	d00c      	beq.n	8004958 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800493e:	68fb      	ldr	r3, [r7, #12]
 8004940:	f003 0320 	and.w	r3, r3, #32
 8004944:	2b00      	cmp	r3, #0
 8004946:	d007      	beq.n	8004958 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	f06f 0220 	mvn.w	r2, #32
 8004950:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004952:	6878      	ldr	r0, [r7, #4]
 8004954:	f000 fcfc 	bl	8005350 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004958:	bf00      	nop
 800495a:	3710      	adds	r7, #16
 800495c:	46bd      	mov	sp, r7
 800495e:	bd80      	pop	{r7, pc}

08004960 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004960:	b580      	push	{r7, lr}
 8004962:	b086      	sub	sp, #24
 8004964:	af00      	add	r7, sp, #0
 8004966:	60f8      	str	r0, [r7, #12]
 8004968:	60b9      	str	r1, [r7, #8]
 800496a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800496c:	2300      	movs	r3, #0
 800496e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004970:	68fb      	ldr	r3, [r7, #12]
 8004972:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004976:	2b01      	cmp	r3, #1
 8004978:	d101      	bne.n	800497e <HAL_TIM_PWM_ConfigChannel+0x1e>
 800497a:	2302      	movs	r3, #2
 800497c:	e0ae      	b.n	8004adc <HAL_TIM_PWM_ConfigChannel+0x17c>
 800497e:	68fb      	ldr	r3, [r7, #12]
 8004980:	2201      	movs	r2, #1
 8004982:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	2b0c      	cmp	r3, #12
 800498a:	f200 809f 	bhi.w	8004acc <HAL_TIM_PWM_ConfigChannel+0x16c>
 800498e:	a201      	add	r2, pc, #4	@ (adr r2, 8004994 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8004990:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004994:	080049c9 	.word	0x080049c9
 8004998:	08004acd 	.word	0x08004acd
 800499c:	08004acd 	.word	0x08004acd
 80049a0:	08004acd 	.word	0x08004acd
 80049a4:	08004a09 	.word	0x08004a09
 80049a8:	08004acd 	.word	0x08004acd
 80049ac:	08004acd 	.word	0x08004acd
 80049b0:	08004acd 	.word	0x08004acd
 80049b4:	08004a4b 	.word	0x08004a4b
 80049b8:	08004acd 	.word	0x08004acd
 80049bc:	08004acd 	.word	0x08004acd
 80049c0:	08004acd 	.word	0x08004acd
 80049c4:	08004a8b 	.word	0x08004a8b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80049c8:	68fb      	ldr	r3, [r7, #12]
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	68b9      	ldr	r1, [r7, #8]
 80049ce:	4618      	mov	r0, r3
 80049d0:	f000 fa04 	bl	8004ddc <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80049d4:	68fb      	ldr	r3, [r7, #12]
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	699a      	ldr	r2, [r3, #24]
 80049da:	68fb      	ldr	r3, [r7, #12]
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	f042 0208 	orr.w	r2, r2, #8
 80049e2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80049e4:	68fb      	ldr	r3, [r7, #12]
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	699a      	ldr	r2, [r3, #24]
 80049ea:	68fb      	ldr	r3, [r7, #12]
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	f022 0204 	bic.w	r2, r2, #4
 80049f2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80049f4:	68fb      	ldr	r3, [r7, #12]
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	6999      	ldr	r1, [r3, #24]
 80049fa:	68bb      	ldr	r3, [r7, #8]
 80049fc:	691a      	ldr	r2, [r3, #16]
 80049fe:	68fb      	ldr	r3, [r7, #12]
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	430a      	orrs	r2, r1
 8004a04:	619a      	str	r2, [r3, #24]
      break;
 8004a06:	e064      	b.n	8004ad2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004a08:	68fb      	ldr	r3, [r7, #12]
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	68b9      	ldr	r1, [r7, #8]
 8004a0e:	4618      	mov	r0, r3
 8004a10:	f000 fa4a 	bl	8004ea8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004a14:	68fb      	ldr	r3, [r7, #12]
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	699a      	ldr	r2, [r3, #24]
 8004a1a:	68fb      	ldr	r3, [r7, #12]
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004a22:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004a24:	68fb      	ldr	r3, [r7, #12]
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	699a      	ldr	r2, [r3, #24]
 8004a2a:	68fb      	ldr	r3, [r7, #12]
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004a32:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004a34:	68fb      	ldr	r3, [r7, #12]
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	6999      	ldr	r1, [r3, #24]
 8004a3a:	68bb      	ldr	r3, [r7, #8]
 8004a3c:	691b      	ldr	r3, [r3, #16]
 8004a3e:	021a      	lsls	r2, r3, #8
 8004a40:	68fb      	ldr	r3, [r7, #12]
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	430a      	orrs	r2, r1
 8004a46:	619a      	str	r2, [r3, #24]
      break;
 8004a48:	e043      	b.n	8004ad2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004a4a:	68fb      	ldr	r3, [r7, #12]
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	68b9      	ldr	r1, [r7, #8]
 8004a50:	4618      	mov	r0, r3
 8004a52:	f000 fa95 	bl	8004f80 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004a56:	68fb      	ldr	r3, [r7, #12]
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	69da      	ldr	r2, [r3, #28]
 8004a5c:	68fb      	ldr	r3, [r7, #12]
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	f042 0208 	orr.w	r2, r2, #8
 8004a64:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004a66:	68fb      	ldr	r3, [r7, #12]
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	69da      	ldr	r2, [r3, #28]
 8004a6c:	68fb      	ldr	r3, [r7, #12]
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	f022 0204 	bic.w	r2, r2, #4
 8004a74:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004a76:	68fb      	ldr	r3, [r7, #12]
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	69d9      	ldr	r1, [r3, #28]
 8004a7c:	68bb      	ldr	r3, [r7, #8]
 8004a7e:	691a      	ldr	r2, [r3, #16]
 8004a80:	68fb      	ldr	r3, [r7, #12]
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	430a      	orrs	r2, r1
 8004a86:	61da      	str	r2, [r3, #28]
      break;
 8004a88:	e023      	b.n	8004ad2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004a8a:	68fb      	ldr	r3, [r7, #12]
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	68b9      	ldr	r1, [r7, #8]
 8004a90:	4618      	mov	r0, r3
 8004a92:	f000 fadf 	bl	8005054 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004a96:	68fb      	ldr	r3, [r7, #12]
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	69da      	ldr	r2, [r3, #28]
 8004a9c:	68fb      	ldr	r3, [r7, #12]
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004aa4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004aa6:	68fb      	ldr	r3, [r7, #12]
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	69da      	ldr	r2, [r3, #28]
 8004aac:	68fb      	ldr	r3, [r7, #12]
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004ab4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004ab6:	68fb      	ldr	r3, [r7, #12]
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	69d9      	ldr	r1, [r3, #28]
 8004abc:	68bb      	ldr	r3, [r7, #8]
 8004abe:	691b      	ldr	r3, [r3, #16]
 8004ac0:	021a      	lsls	r2, r3, #8
 8004ac2:	68fb      	ldr	r3, [r7, #12]
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	430a      	orrs	r2, r1
 8004ac8:	61da      	str	r2, [r3, #28]
      break;
 8004aca:	e002      	b.n	8004ad2 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8004acc:	2301      	movs	r3, #1
 8004ace:	75fb      	strb	r3, [r7, #23]
      break;
 8004ad0:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004ad2:	68fb      	ldr	r3, [r7, #12]
 8004ad4:	2200      	movs	r2, #0
 8004ad6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8004ada:	7dfb      	ldrb	r3, [r7, #23]
}
 8004adc:	4618      	mov	r0, r3
 8004ade:	3718      	adds	r7, #24
 8004ae0:	46bd      	mov	sp, r7
 8004ae2:	bd80      	pop	{r7, pc}

08004ae4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004ae4:	b580      	push	{r7, lr}
 8004ae6:	b084      	sub	sp, #16
 8004ae8:	af00      	add	r7, sp, #0
 8004aea:	6078      	str	r0, [r7, #4]
 8004aec:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004aee:	2300      	movs	r3, #0
 8004af0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004af8:	2b01      	cmp	r3, #1
 8004afa:	d101      	bne.n	8004b00 <HAL_TIM_ConfigClockSource+0x1c>
 8004afc:	2302      	movs	r3, #2
 8004afe:	e0b4      	b.n	8004c6a <HAL_TIM_ConfigClockSource+0x186>
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	2201      	movs	r2, #1
 8004b04:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	2202      	movs	r2, #2
 8004b0c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	689b      	ldr	r3, [r3, #8]
 8004b16:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004b18:	68bb      	ldr	r3, [r7, #8]
 8004b1a:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8004b1e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004b20:	68bb      	ldr	r3, [r7, #8]
 8004b22:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8004b26:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	68ba      	ldr	r2, [r7, #8]
 8004b2e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004b30:	683b      	ldr	r3, [r7, #0]
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004b38:	d03e      	beq.n	8004bb8 <HAL_TIM_ConfigClockSource+0xd4>
 8004b3a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004b3e:	f200 8087 	bhi.w	8004c50 <HAL_TIM_ConfigClockSource+0x16c>
 8004b42:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004b46:	f000 8086 	beq.w	8004c56 <HAL_TIM_ConfigClockSource+0x172>
 8004b4a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004b4e:	d87f      	bhi.n	8004c50 <HAL_TIM_ConfigClockSource+0x16c>
 8004b50:	2b70      	cmp	r3, #112	@ 0x70
 8004b52:	d01a      	beq.n	8004b8a <HAL_TIM_ConfigClockSource+0xa6>
 8004b54:	2b70      	cmp	r3, #112	@ 0x70
 8004b56:	d87b      	bhi.n	8004c50 <HAL_TIM_ConfigClockSource+0x16c>
 8004b58:	2b60      	cmp	r3, #96	@ 0x60
 8004b5a:	d050      	beq.n	8004bfe <HAL_TIM_ConfigClockSource+0x11a>
 8004b5c:	2b60      	cmp	r3, #96	@ 0x60
 8004b5e:	d877      	bhi.n	8004c50 <HAL_TIM_ConfigClockSource+0x16c>
 8004b60:	2b50      	cmp	r3, #80	@ 0x50
 8004b62:	d03c      	beq.n	8004bde <HAL_TIM_ConfigClockSource+0xfa>
 8004b64:	2b50      	cmp	r3, #80	@ 0x50
 8004b66:	d873      	bhi.n	8004c50 <HAL_TIM_ConfigClockSource+0x16c>
 8004b68:	2b40      	cmp	r3, #64	@ 0x40
 8004b6a:	d058      	beq.n	8004c1e <HAL_TIM_ConfigClockSource+0x13a>
 8004b6c:	2b40      	cmp	r3, #64	@ 0x40
 8004b6e:	d86f      	bhi.n	8004c50 <HAL_TIM_ConfigClockSource+0x16c>
 8004b70:	2b30      	cmp	r3, #48	@ 0x30
 8004b72:	d064      	beq.n	8004c3e <HAL_TIM_ConfigClockSource+0x15a>
 8004b74:	2b30      	cmp	r3, #48	@ 0x30
 8004b76:	d86b      	bhi.n	8004c50 <HAL_TIM_ConfigClockSource+0x16c>
 8004b78:	2b20      	cmp	r3, #32
 8004b7a:	d060      	beq.n	8004c3e <HAL_TIM_ConfigClockSource+0x15a>
 8004b7c:	2b20      	cmp	r3, #32
 8004b7e:	d867      	bhi.n	8004c50 <HAL_TIM_ConfigClockSource+0x16c>
 8004b80:	2b00      	cmp	r3, #0
 8004b82:	d05c      	beq.n	8004c3e <HAL_TIM_ConfigClockSource+0x15a>
 8004b84:	2b10      	cmp	r3, #16
 8004b86:	d05a      	beq.n	8004c3e <HAL_TIM_ConfigClockSource+0x15a>
 8004b88:	e062      	b.n	8004c50 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004b8e:	683b      	ldr	r3, [r7, #0]
 8004b90:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004b92:	683b      	ldr	r3, [r7, #0]
 8004b94:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004b96:	683b      	ldr	r3, [r7, #0]
 8004b98:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004b9a:	f000 fb25 	bl	80051e8 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	689b      	ldr	r3, [r3, #8]
 8004ba4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004ba6:	68bb      	ldr	r3, [r7, #8]
 8004ba8:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8004bac:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	68ba      	ldr	r2, [r7, #8]
 8004bb4:	609a      	str	r2, [r3, #8]
      break;
 8004bb6:	e04f      	b.n	8004c58 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004bbc:	683b      	ldr	r3, [r7, #0]
 8004bbe:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004bc0:	683b      	ldr	r3, [r7, #0]
 8004bc2:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004bc4:	683b      	ldr	r3, [r7, #0]
 8004bc6:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004bc8:	f000 fb0e 	bl	80051e8 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	689a      	ldr	r2, [r3, #8]
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8004bda:	609a      	str	r2, [r3, #8]
      break;
 8004bdc:	e03c      	b.n	8004c58 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004be2:	683b      	ldr	r3, [r7, #0]
 8004be4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004be6:	683b      	ldr	r3, [r7, #0]
 8004be8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004bea:	461a      	mov	r2, r3
 8004bec:	f000 fa82 	bl	80050f4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	2150      	movs	r1, #80	@ 0x50
 8004bf6:	4618      	mov	r0, r3
 8004bf8:	f000 fadb 	bl	80051b2 <TIM_ITRx_SetConfig>
      break;
 8004bfc:	e02c      	b.n	8004c58 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004c02:	683b      	ldr	r3, [r7, #0]
 8004c04:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004c06:	683b      	ldr	r3, [r7, #0]
 8004c08:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004c0a:	461a      	mov	r2, r3
 8004c0c:	f000 faa1 	bl	8005152 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	2160      	movs	r1, #96	@ 0x60
 8004c16:	4618      	mov	r0, r3
 8004c18:	f000 facb 	bl	80051b2 <TIM_ITRx_SetConfig>
      break;
 8004c1c:	e01c      	b.n	8004c58 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004c22:	683b      	ldr	r3, [r7, #0]
 8004c24:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004c26:	683b      	ldr	r3, [r7, #0]
 8004c28:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004c2a:	461a      	mov	r2, r3
 8004c2c:	f000 fa62 	bl	80050f4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	2140      	movs	r1, #64	@ 0x40
 8004c36:	4618      	mov	r0, r3
 8004c38:	f000 fabb 	bl	80051b2 <TIM_ITRx_SetConfig>
      break;
 8004c3c:	e00c      	b.n	8004c58 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	681a      	ldr	r2, [r3, #0]
 8004c42:	683b      	ldr	r3, [r7, #0]
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	4619      	mov	r1, r3
 8004c48:	4610      	mov	r0, r2
 8004c4a:	f000 fab2 	bl	80051b2 <TIM_ITRx_SetConfig>
      break;
 8004c4e:	e003      	b.n	8004c58 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8004c50:	2301      	movs	r3, #1
 8004c52:	73fb      	strb	r3, [r7, #15]
      break;
 8004c54:	e000      	b.n	8004c58 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8004c56:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	2201      	movs	r2, #1
 8004c5c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	2200      	movs	r2, #0
 8004c64:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8004c68:	7bfb      	ldrb	r3, [r7, #15]
}
 8004c6a:	4618      	mov	r0, r3
 8004c6c:	3710      	adds	r7, #16
 8004c6e:	46bd      	mov	sp, r7
 8004c70:	bd80      	pop	{r7, pc}

08004c72 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004c72:	b480      	push	{r7}
 8004c74:	b083      	sub	sp, #12
 8004c76:	af00      	add	r7, sp, #0
 8004c78:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004c7a:	bf00      	nop
 8004c7c:	370c      	adds	r7, #12
 8004c7e:	46bd      	mov	sp, r7
 8004c80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c84:	4770      	bx	lr

08004c86 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004c86:	b480      	push	{r7}
 8004c88:	b083      	sub	sp, #12
 8004c8a:	af00      	add	r7, sp, #0
 8004c8c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004c8e:	bf00      	nop
 8004c90:	370c      	adds	r7, #12
 8004c92:	46bd      	mov	sp, r7
 8004c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c98:	4770      	bx	lr

08004c9a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004c9a:	b480      	push	{r7}
 8004c9c:	b083      	sub	sp, #12
 8004c9e:	af00      	add	r7, sp, #0
 8004ca0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004ca2:	bf00      	nop
 8004ca4:	370c      	adds	r7, #12
 8004ca6:	46bd      	mov	sp, r7
 8004ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cac:	4770      	bx	lr

08004cae <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004cae:	b480      	push	{r7}
 8004cb0:	b083      	sub	sp, #12
 8004cb2:	af00      	add	r7, sp, #0
 8004cb4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004cb6:	bf00      	nop
 8004cb8:	370c      	adds	r7, #12
 8004cba:	46bd      	mov	sp, r7
 8004cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cc0:	4770      	bx	lr
	...

08004cc4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004cc4:	b480      	push	{r7}
 8004cc6:	b085      	sub	sp, #20
 8004cc8:	af00      	add	r7, sp, #0
 8004cca:	6078      	str	r0, [r7, #4]
 8004ccc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	4a3a      	ldr	r2, [pc, #232]	@ (8004dc0 <TIM_Base_SetConfig+0xfc>)
 8004cd8:	4293      	cmp	r3, r2
 8004cda:	d00f      	beq.n	8004cfc <TIM_Base_SetConfig+0x38>
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004ce2:	d00b      	beq.n	8004cfc <TIM_Base_SetConfig+0x38>
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	4a37      	ldr	r2, [pc, #220]	@ (8004dc4 <TIM_Base_SetConfig+0x100>)
 8004ce8:	4293      	cmp	r3, r2
 8004cea:	d007      	beq.n	8004cfc <TIM_Base_SetConfig+0x38>
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	4a36      	ldr	r2, [pc, #216]	@ (8004dc8 <TIM_Base_SetConfig+0x104>)
 8004cf0:	4293      	cmp	r3, r2
 8004cf2:	d003      	beq.n	8004cfc <TIM_Base_SetConfig+0x38>
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	4a35      	ldr	r2, [pc, #212]	@ (8004dcc <TIM_Base_SetConfig+0x108>)
 8004cf8:	4293      	cmp	r3, r2
 8004cfa:	d108      	bne.n	8004d0e <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004cfc:	68fb      	ldr	r3, [r7, #12]
 8004cfe:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004d02:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004d04:	683b      	ldr	r3, [r7, #0]
 8004d06:	685b      	ldr	r3, [r3, #4]
 8004d08:	68fa      	ldr	r2, [r7, #12]
 8004d0a:	4313      	orrs	r3, r2
 8004d0c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	4a2b      	ldr	r2, [pc, #172]	@ (8004dc0 <TIM_Base_SetConfig+0xfc>)
 8004d12:	4293      	cmp	r3, r2
 8004d14:	d01b      	beq.n	8004d4e <TIM_Base_SetConfig+0x8a>
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004d1c:	d017      	beq.n	8004d4e <TIM_Base_SetConfig+0x8a>
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	4a28      	ldr	r2, [pc, #160]	@ (8004dc4 <TIM_Base_SetConfig+0x100>)
 8004d22:	4293      	cmp	r3, r2
 8004d24:	d013      	beq.n	8004d4e <TIM_Base_SetConfig+0x8a>
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	4a27      	ldr	r2, [pc, #156]	@ (8004dc8 <TIM_Base_SetConfig+0x104>)
 8004d2a:	4293      	cmp	r3, r2
 8004d2c:	d00f      	beq.n	8004d4e <TIM_Base_SetConfig+0x8a>
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	4a26      	ldr	r2, [pc, #152]	@ (8004dcc <TIM_Base_SetConfig+0x108>)
 8004d32:	4293      	cmp	r3, r2
 8004d34:	d00b      	beq.n	8004d4e <TIM_Base_SetConfig+0x8a>
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	4a25      	ldr	r2, [pc, #148]	@ (8004dd0 <TIM_Base_SetConfig+0x10c>)
 8004d3a:	4293      	cmp	r3, r2
 8004d3c:	d007      	beq.n	8004d4e <TIM_Base_SetConfig+0x8a>
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	4a24      	ldr	r2, [pc, #144]	@ (8004dd4 <TIM_Base_SetConfig+0x110>)
 8004d42:	4293      	cmp	r3, r2
 8004d44:	d003      	beq.n	8004d4e <TIM_Base_SetConfig+0x8a>
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	4a23      	ldr	r2, [pc, #140]	@ (8004dd8 <TIM_Base_SetConfig+0x114>)
 8004d4a:	4293      	cmp	r3, r2
 8004d4c:	d108      	bne.n	8004d60 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004d4e:	68fb      	ldr	r3, [r7, #12]
 8004d50:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004d54:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004d56:	683b      	ldr	r3, [r7, #0]
 8004d58:	68db      	ldr	r3, [r3, #12]
 8004d5a:	68fa      	ldr	r2, [r7, #12]
 8004d5c:	4313      	orrs	r3, r2
 8004d5e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004d60:	68fb      	ldr	r3, [r7, #12]
 8004d62:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8004d66:	683b      	ldr	r3, [r7, #0]
 8004d68:	695b      	ldr	r3, [r3, #20]
 8004d6a:	4313      	orrs	r3, r2
 8004d6c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	68fa      	ldr	r2, [r7, #12]
 8004d72:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004d74:	683b      	ldr	r3, [r7, #0]
 8004d76:	689a      	ldr	r2, [r3, #8]
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004d7c:	683b      	ldr	r3, [r7, #0]
 8004d7e:	681a      	ldr	r2, [r3, #0]
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	4a0e      	ldr	r2, [pc, #56]	@ (8004dc0 <TIM_Base_SetConfig+0xfc>)
 8004d88:	4293      	cmp	r3, r2
 8004d8a:	d103      	bne.n	8004d94 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004d8c:	683b      	ldr	r3, [r7, #0]
 8004d8e:	691a      	ldr	r2, [r3, #16]
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	2201      	movs	r2, #1
 8004d98:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	691b      	ldr	r3, [r3, #16]
 8004d9e:	f003 0301 	and.w	r3, r3, #1
 8004da2:	2b01      	cmp	r3, #1
 8004da4:	d105      	bne.n	8004db2 <TIM_Base_SetConfig+0xee>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	691b      	ldr	r3, [r3, #16]
 8004daa:	f023 0201 	bic.w	r2, r3, #1
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	611a      	str	r2, [r3, #16]
  }
}
 8004db2:	bf00      	nop
 8004db4:	3714      	adds	r7, #20
 8004db6:	46bd      	mov	sp, r7
 8004db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dbc:	4770      	bx	lr
 8004dbe:	bf00      	nop
 8004dc0:	40010000 	.word	0x40010000
 8004dc4:	40000400 	.word	0x40000400
 8004dc8:	40000800 	.word	0x40000800
 8004dcc:	40000c00 	.word	0x40000c00
 8004dd0:	40014000 	.word	0x40014000
 8004dd4:	40014400 	.word	0x40014400
 8004dd8:	40014800 	.word	0x40014800

08004ddc <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004ddc:	b480      	push	{r7}
 8004dde:	b087      	sub	sp, #28
 8004de0:	af00      	add	r7, sp, #0
 8004de2:	6078      	str	r0, [r7, #4]
 8004de4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	6a1b      	ldr	r3, [r3, #32]
 8004dea:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	6a1b      	ldr	r3, [r3, #32]
 8004df0:	f023 0201 	bic.w	r2, r3, #1
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	685b      	ldr	r3, [r3, #4]
 8004dfc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	699b      	ldr	r3, [r3, #24]
 8004e02:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004e04:	68fb      	ldr	r3, [r7, #12]
 8004e06:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004e0a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004e0c:	68fb      	ldr	r3, [r7, #12]
 8004e0e:	f023 0303 	bic.w	r3, r3, #3
 8004e12:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004e14:	683b      	ldr	r3, [r7, #0]
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	68fa      	ldr	r2, [r7, #12]
 8004e1a:	4313      	orrs	r3, r2
 8004e1c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004e1e:	697b      	ldr	r3, [r7, #20]
 8004e20:	f023 0302 	bic.w	r3, r3, #2
 8004e24:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004e26:	683b      	ldr	r3, [r7, #0]
 8004e28:	689b      	ldr	r3, [r3, #8]
 8004e2a:	697a      	ldr	r2, [r7, #20]
 8004e2c:	4313      	orrs	r3, r2
 8004e2e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	4a1c      	ldr	r2, [pc, #112]	@ (8004ea4 <TIM_OC1_SetConfig+0xc8>)
 8004e34:	4293      	cmp	r3, r2
 8004e36:	d10c      	bne.n	8004e52 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004e38:	697b      	ldr	r3, [r7, #20]
 8004e3a:	f023 0308 	bic.w	r3, r3, #8
 8004e3e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004e40:	683b      	ldr	r3, [r7, #0]
 8004e42:	68db      	ldr	r3, [r3, #12]
 8004e44:	697a      	ldr	r2, [r7, #20]
 8004e46:	4313      	orrs	r3, r2
 8004e48:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004e4a:	697b      	ldr	r3, [r7, #20]
 8004e4c:	f023 0304 	bic.w	r3, r3, #4
 8004e50:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	4a13      	ldr	r2, [pc, #76]	@ (8004ea4 <TIM_OC1_SetConfig+0xc8>)
 8004e56:	4293      	cmp	r3, r2
 8004e58:	d111      	bne.n	8004e7e <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004e5a:	693b      	ldr	r3, [r7, #16]
 8004e5c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004e60:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004e62:	693b      	ldr	r3, [r7, #16]
 8004e64:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8004e68:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004e6a:	683b      	ldr	r3, [r7, #0]
 8004e6c:	695b      	ldr	r3, [r3, #20]
 8004e6e:	693a      	ldr	r2, [r7, #16]
 8004e70:	4313      	orrs	r3, r2
 8004e72:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004e74:	683b      	ldr	r3, [r7, #0]
 8004e76:	699b      	ldr	r3, [r3, #24]
 8004e78:	693a      	ldr	r2, [r7, #16]
 8004e7a:	4313      	orrs	r3, r2
 8004e7c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	693a      	ldr	r2, [r7, #16]
 8004e82:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	68fa      	ldr	r2, [r7, #12]
 8004e88:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004e8a:	683b      	ldr	r3, [r7, #0]
 8004e8c:	685a      	ldr	r2, [r3, #4]
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	697a      	ldr	r2, [r7, #20]
 8004e96:	621a      	str	r2, [r3, #32]
}
 8004e98:	bf00      	nop
 8004e9a:	371c      	adds	r7, #28
 8004e9c:	46bd      	mov	sp, r7
 8004e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ea2:	4770      	bx	lr
 8004ea4:	40010000 	.word	0x40010000

08004ea8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004ea8:	b480      	push	{r7}
 8004eaa:	b087      	sub	sp, #28
 8004eac:	af00      	add	r7, sp, #0
 8004eae:	6078      	str	r0, [r7, #4]
 8004eb0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	6a1b      	ldr	r3, [r3, #32]
 8004eb6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	6a1b      	ldr	r3, [r3, #32]
 8004ebc:	f023 0210 	bic.w	r2, r3, #16
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	685b      	ldr	r3, [r3, #4]
 8004ec8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	699b      	ldr	r3, [r3, #24]
 8004ece:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004ed0:	68fb      	ldr	r3, [r7, #12]
 8004ed2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004ed6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004ed8:	68fb      	ldr	r3, [r7, #12]
 8004eda:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004ede:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004ee0:	683b      	ldr	r3, [r7, #0]
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	021b      	lsls	r3, r3, #8
 8004ee6:	68fa      	ldr	r2, [r7, #12]
 8004ee8:	4313      	orrs	r3, r2
 8004eea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004eec:	697b      	ldr	r3, [r7, #20]
 8004eee:	f023 0320 	bic.w	r3, r3, #32
 8004ef2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004ef4:	683b      	ldr	r3, [r7, #0]
 8004ef6:	689b      	ldr	r3, [r3, #8]
 8004ef8:	011b      	lsls	r3, r3, #4
 8004efa:	697a      	ldr	r2, [r7, #20]
 8004efc:	4313      	orrs	r3, r2
 8004efe:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	4a1e      	ldr	r2, [pc, #120]	@ (8004f7c <TIM_OC2_SetConfig+0xd4>)
 8004f04:	4293      	cmp	r3, r2
 8004f06:	d10d      	bne.n	8004f24 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004f08:	697b      	ldr	r3, [r7, #20]
 8004f0a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004f0e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004f10:	683b      	ldr	r3, [r7, #0]
 8004f12:	68db      	ldr	r3, [r3, #12]
 8004f14:	011b      	lsls	r3, r3, #4
 8004f16:	697a      	ldr	r2, [r7, #20]
 8004f18:	4313      	orrs	r3, r2
 8004f1a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004f1c:	697b      	ldr	r3, [r7, #20]
 8004f1e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004f22:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	4a15      	ldr	r2, [pc, #84]	@ (8004f7c <TIM_OC2_SetConfig+0xd4>)
 8004f28:	4293      	cmp	r3, r2
 8004f2a:	d113      	bne.n	8004f54 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004f2c:	693b      	ldr	r3, [r7, #16]
 8004f2e:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8004f32:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004f34:	693b      	ldr	r3, [r7, #16]
 8004f36:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8004f3a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004f3c:	683b      	ldr	r3, [r7, #0]
 8004f3e:	695b      	ldr	r3, [r3, #20]
 8004f40:	009b      	lsls	r3, r3, #2
 8004f42:	693a      	ldr	r2, [r7, #16]
 8004f44:	4313      	orrs	r3, r2
 8004f46:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004f48:	683b      	ldr	r3, [r7, #0]
 8004f4a:	699b      	ldr	r3, [r3, #24]
 8004f4c:	009b      	lsls	r3, r3, #2
 8004f4e:	693a      	ldr	r2, [r7, #16]
 8004f50:	4313      	orrs	r3, r2
 8004f52:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	693a      	ldr	r2, [r7, #16]
 8004f58:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	68fa      	ldr	r2, [r7, #12]
 8004f5e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004f60:	683b      	ldr	r3, [r7, #0]
 8004f62:	685a      	ldr	r2, [r3, #4]
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	697a      	ldr	r2, [r7, #20]
 8004f6c:	621a      	str	r2, [r3, #32]
}
 8004f6e:	bf00      	nop
 8004f70:	371c      	adds	r7, #28
 8004f72:	46bd      	mov	sp, r7
 8004f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f78:	4770      	bx	lr
 8004f7a:	bf00      	nop
 8004f7c:	40010000 	.word	0x40010000

08004f80 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004f80:	b480      	push	{r7}
 8004f82:	b087      	sub	sp, #28
 8004f84:	af00      	add	r7, sp, #0
 8004f86:	6078      	str	r0, [r7, #4]
 8004f88:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	6a1b      	ldr	r3, [r3, #32]
 8004f8e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	6a1b      	ldr	r3, [r3, #32]
 8004f94:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	685b      	ldr	r3, [r3, #4]
 8004fa0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	69db      	ldr	r3, [r3, #28]
 8004fa6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004fa8:	68fb      	ldr	r3, [r7, #12]
 8004faa:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004fae:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004fb0:	68fb      	ldr	r3, [r7, #12]
 8004fb2:	f023 0303 	bic.w	r3, r3, #3
 8004fb6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004fb8:	683b      	ldr	r3, [r7, #0]
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	68fa      	ldr	r2, [r7, #12]
 8004fbe:	4313      	orrs	r3, r2
 8004fc0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004fc2:	697b      	ldr	r3, [r7, #20]
 8004fc4:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8004fc8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004fca:	683b      	ldr	r3, [r7, #0]
 8004fcc:	689b      	ldr	r3, [r3, #8]
 8004fce:	021b      	lsls	r3, r3, #8
 8004fd0:	697a      	ldr	r2, [r7, #20]
 8004fd2:	4313      	orrs	r3, r2
 8004fd4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	4a1d      	ldr	r2, [pc, #116]	@ (8005050 <TIM_OC3_SetConfig+0xd0>)
 8004fda:	4293      	cmp	r3, r2
 8004fdc:	d10d      	bne.n	8004ffa <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004fde:	697b      	ldr	r3, [r7, #20]
 8004fe0:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8004fe4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004fe6:	683b      	ldr	r3, [r7, #0]
 8004fe8:	68db      	ldr	r3, [r3, #12]
 8004fea:	021b      	lsls	r3, r3, #8
 8004fec:	697a      	ldr	r2, [r7, #20]
 8004fee:	4313      	orrs	r3, r2
 8004ff0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004ff2:	697b      	ldr	r3, [r7, #20]
 8004ff4:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8004ff8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	4a14      	ldr	r2, [pc, #80]	@ (8005050 <TIM_OC3_SetConfig+0xd0>)
 8004ffe:	4293      	cmp	r3, r2
 8005000:	d113      	bne.n	800502a <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005002:	693b      	ldr	r3, [r7, #16]
 8005004:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8005008:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800500a:	693b      	ldr	r3, [r7, #16]
 800500c:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8005010:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005012:	683b      	ldr	r3, [r7, #0]
 8005014:	695b      	ldr	r3, [r3, #20]
 8005016:	011b      	lsls	r3, r3, #4
 8005018:	693a      	ldr	r2, [r7, #16]
 800501a:	4313      	orrs	r3, r2
 800501c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800501e:	683b      	ldr	r3, [r7, #0]
 8005020:	699b      	ldr	r3, [r3, #24]
 8005022:	011b      	lsls	r3, r3, #4
 8005024:	693a      	ldr	r2, [r7, #16]
 8005026:	4313      	orrs	r3, r2
 8005028:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	693a      	ldr	r2, [r7, #16]
 800502e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	68fa      	ldr	r2, [r7, #12]
 8005034:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005036:	683b      	ldr	r3, [r7, #0]
 8005038:	685a      	ldr	r2, [r3, #4]
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	697a      	ldr	r2, [r7, #20]
 8005042:	621a      	str	r2, [r3, #32]
}
 8005044:	bf00      	nop
 8005046:	371c      	adds	r7, #28
 8005048:	46bd      	mov	sp, r7
 800504a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800504e:	4770      	bx	lr
 8005050:	40010000 	.word	0x40010000

08005054 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005054:	b480      	push	{r7}
 8005056:	b087      	sub	sp, #28
 8005058:	af00      	add	r7, sp, #0
 800505a:	6078      	str	r0, [r7, #4]
 800505c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	6a1b      	ldr	r3, [r3, #32]
 8005062:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	6a1b      	ldr	r3, [r3, #32]
 8005068:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	685b      	ldr	r3, [r3, #4]
 8005074:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	69db      	ldr	r3, [r3, #28]
 800507a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800507c:	68fb      	ldr	r3, [r7, #12]
 800507e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005082:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005084:	68fb      	ldr	r3, [r7, #12]
 8005086:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800508a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800508c:	683b      	ldr	r3, [r7, #0]
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	021b      	lsls	r3, r3, #8
 8005092:	68fa      	ldr	r2, [r7, #12]
 8005094:	4313      	orrs	r3, r2
 8005096:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005098:	693b      	ldr	r3, [r7, #16]
 800509a:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800509e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80050a0:	683b      	ldr	r3, [r7, #0]
 80050a2:	689b      	ldr	r3, [r3, #8]
 80050a4:	031b      	lsls	r3, r3, #12
 80050a6:	693a      	ldr	r2, [r7, #16]
 80050a8:	4313      	orrs	r3, r2
 80050aa:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	4a10      	ldr	r2, [pc, #64]	@ (80050f0 <TIM_OC4_SetConfig+0x9c>)
 80050b0:	4293      	cmp	r3, r2
 80050b2:	d109      	bne.n	80050c8 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80050b4:	697b      	ldr	r3, [r7, #20]
 80050b6:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80050ba:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80050bc:	683b      	ldr	r3, [r7, #0]
 80050be:	695b      	ldr	r3, [r3, #20]
 80050c0:	019b      	lsls	r3, r3, #6
 80050c2:	697a      	ldr	r2, [r7, #20]
 80050c4:	4313      	orrs	r3, r2
 80050c6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	697a      	ldr	r2, [r7, #20]
 80050cc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	68fa      	ldr	r2, [r7, #12]
 80050d2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80050d4:	683b      	ldr	r3, [r7, #0]
 80050d6:	685a      	ldr	r2, [r3, #4]
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	693a      	ldr	r2, [r7, #16]
 80050e0:	621a      	str	r2, [r3, #32]
}
 80050e2:	bf00      	nop
 80050e4:	371c      	adds	r7, #28
 80050e6:	46bd      	mov	sp, r7
 80050e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050ec:	4770      	bx	lr
 80050ee:	bf00      	nop
 80050f0:	40010000 	.word	0x40010000

080050f4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80050f4:	b480      	push	{r7}
 80050f6:	b087      	sub	sp, #28
 80050f8:	af00      	add	r7, sp, #0
 80050fa:	60f8      	str	r0, [r7, #12]
 80050fc:	60b9      	str	r1, [r7, #8]
 80050fe:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005100:	68fb      	ldr	r3, [r7, #12]
 8005102:	6a1b      	ldr	r3, [r3, #32]
 8005104:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005106:	68fb      	ldr	r3, [r7, #12]
 8005108:	6a1b      	ldr	r3, [r3, #32]
 800510a:	f023 0201 	bic.w	r2, r3, #1
 800510e:	68fb      	ldr	r3, [r7, #12]
 8005110:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005112:	68fb      	ldr	r3, [r7, #12]
 8005114:	699b      	ldr	r3, [r3, #24]
 8005116:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005118:	693b      	ldr	r3, [r7, #16]
 800511a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800511e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	011b      	lsls	r3, r3, #4
 8005124:	693a      	ldr	r2, [r7, #16]
 8005126:	4313      	orrs	r3, r2
 8005128:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800512a:	697b      	ldr	r3, [r7, #20]
 800512c:	f023 030a 	bic.w	r3, r3, #10
 8005130:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005132:	697a      	ldr	r2, [r7, #20]
 8005134:	68bb      	ldr	r3, [r7, #8]
 8005136:	4313      	orrs	r3, r2
 8005138:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800513a:	68fb      	ldr	r3, [r7, #12]
 800513c:	693a      	ldr	r2, [r7, #16]
 800513e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005140:	68fb      	ldr	r3, [r7, #12]
 8005142:	697a      	ldr	r2, [r7, #20]
 8005144:	621a      	str	r2, [r3, #32]
}
 8005146:	bf00      	nop
 8005148:	371c      	adds	r7, #28
 800514a:	46bd      	mov	sp, r7
 800514c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005150:	4770      	bx	lr

08005152 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005152:	b480      	push	{r7}
 8005154:	b087      	sub	sp, #28
 8005156:	af00      	add	r7, sp, #0
 8005158:	60f8      	str	r0, [r7, #12]
 800515a:	60b9      	str	r1, [r7, #8]
 800515c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800515e:	68fb      	ldr	r3, [r7, #12]
 8005160:	6a1b      	ldr	r3, [r3, #32]
 8005162:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005164:	68fb      	ldr	r3, [r7, #12]
 8005166:	6a1b      	ldr	r3, [r3, #32]
 8005168:	f023 0210 	bic.w	r2, r3, #16
 800516c:	68fb      	ldr	r3, [r7, #12]
 800516e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005170:	68fb      	ldr	r3, [r7, #12]
 8005172:	699b      	ldr	r3, [r3, #24]
 8005174:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005176:	693b      	ldr	r3, [r7, #16]
 8005178:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800517c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	031b      	lsls	r3, r3, #12
 8005182:	693a      	ldr	r2, [r7, #16]
 8005184:	4313      	orrs	r3, r2
 8005186:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005188:	697b      	ldr	r3, [r7, #20]
 800518a:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800518e:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005190:	68bb      	ldr	r3, [r7, #8]
 8005192:	011b      	lsls	r3, r3, #4
 8005194:	697a      	ldr	r2, [r7, #20]
 8005196:	4313      	orrs	r3, r2
 8005198:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800519a:	68fb      	ldr	r3, [r7, #12]
 800519c:	693a      	ldr	r2, [r7, #16]
 800519e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80051a0:	68fb      	ldr	r3, [r7, #12]
 80051a2:	697a      	ldr	r2, [r7, #20]
 80051a4:	621a      	str	r2, [r3, #32]
}
 80051a6:	bf00      	nop
 80051a8:	371c      	adds	r7, #28
 80051aa:	46bd      	mov	sp, r7
 80051ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051b0:	4770      	bx	lr

080051b2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80051b2:	b480      	push	{r7}
 80051b4:	b085      	sub	sp, #20
 80051b6:	af00      	add	r7, sp, #0
 80051b8:	6078      	str	r0, [r7, #4]
 80051ba:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	689b      	ldr	r3, [r3, #8]
 80051c0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80051c2:	68fb      	ldr	r3, [r7, #12]
 80051c4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80051c8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80051ca:	683a      	ldr	r2, [r7, #0]
 80051cc:	68fb      	ldr	r3, [r7, #12]
 80051ce:	4313      	orrs	r3, r2
 80051d0:	f043 0307 	orr.w	r3, r3, #7
 80051d4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	68fa      	ldr	r2, [r7, #12]
 80051da:	609a      	str	r2, [r3, #8]
}
 80051dc:	bf00      	nop
 80051de:	3714      	adds	r7, #20
 80051e0:	46bd      	mov	sp, r7
 80051e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051e6:	4770      	bx	lr

080051e8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80051e8:	b480      	push	{r7}
 80051ea:	b087      	sub	sp, #28
 80051ec:	af00      	add	r7, sp, #0
 80051ee:	60f8      	str	r0, [r7, #12]
 80051f0:	60b9      	str	r1, [r7, #8]
 80051f2:	607a      	str	r2, [r7, #4]
 80051f4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80051f6:	68fb      	ldr	r3, [r7, #12]
 80051f8:	689b      	ldr	r3, [r3, #8]
 80051fa:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80051fc:	697b      	ldr	r3, [r7, #20]
 80051fe:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8005202:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005204:	683b      	ldr	r3, [r7, #0]
 8005206:	021a      	lsls	r2, r3, #8
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	431a      	orrs	r2, r3
 800520c:	68bb      	ldr	r3, [r7, #8]
 800520e:	4313      	orrs	r3, r2
 8005210:	697a      	ldr	r2, [r7, #20]
 8005212:	4313      	orrs	r3, r2
 8005214:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005216:	68fb      	ldr	r3, [r7, #12]
 8005218:	697a      	ldr	r2, [r7, #20]
 800521a:	609a      	str	r2, [r3, #8]
}
 800521c:	bf00      	nop
 800521e:	371c      	adds	r7, #28
 8005220:	46bd      	mov	sp, r7
 8005222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005226:	4770      	bx	lr

08005228 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005228:	b480      	push	{r7}
 800522a:	b087      	sub	sp, #28
 800522c:	af00      	add	r7, sp, #0
 800522e:	60f8      	str	r0, [r7, #12]
 8005230:	60b9      	str	r1, [r7, #8]
 8005232:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005234:	68bb      	ldr	r3, [r7, #8]
 8005236:	f003 031f 	and.w	r3, r3, #31
 800523a:	2201      	movs	r2, #1
 800523c:	fa02 f303 	lsl.w	r3, r2, r3
 8005240:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005242:	68fb      	ldr	r3, [r7, #12]
 8005244:	6a1a      	ldr	r2, [r3, #32]
 8005246:	697b      	ldr	r3, [r7, #20]
 8005248:	43db      	mvns	r3, r3
 800524a:	401a      	ands	r2, r3
 800524c:	68fb      	ldr	r3, [r7, #12]
 800524e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005250:	68fb      	ldr	r3, [r7, #12]
 8005252:	6a1a      	ldr	r2, [r3, #32]
 8005254:	68bb      	ldr	r3, [r7, #8]
 8005256:	f003 031f 	and.w	r3, r3, #31
 800525a:	6879      	ldr	r1, [r7, #4]
 800525c:	fa01 f303 	lsl.w	r3, r1, r3
 8005260:	431a      	orrs	r2, r3
 8005262:	68fb      	ldr	r3, [r7, #12]
 8005264:	621a      	str	r2, [r3, #32]
}
 8005266:	bf00      	nop
 8005268:	371c      	adds	r7, #28
 800526a:	46bd      	mov	sp, r7
 800526c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005270:	4770      	bx	lr
	...

08005274 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005274:	b480      	push	{r7}
 8005276:	b085      	sub	sp, #20
 8005278:	af00      	add	r7, sp, #0
 800527a:	6078      	str	r0, [r7, #4]
 800527c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005284:	2b01      	cmp	r3, #1
 8005286:	d101      	bne.n	800528c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005288:	2302      	movs	r3, #2
 800528a:	e050      	b.n	800532e <HAL_TIMEx_MasterConfigSynchronization+0xba>
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	2201      	movs	r2, #1
 8005290:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	2202      	movs	r2, #2
 8005298:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	685b      	ldr	r3, [r3, #4]
 80052a2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	689b      	ldr	r3, [r3, #8]
 80052aa:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80052ac:	68fb      	ldr	r3, [r7, #12]
 80052ae:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80052b2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80052b4:	683b      	ldr	r3, [r7, #0]
 80052b6:	681b      	ldr	r3, [r3, #0]
 80052b8:	68fa      	ldr	r2, [r7, #12]
 80052ba:	4313      	orrs	r3, r2
 80052bc:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	681b      	ldr	r3, [r3, #0]
 80052c2:	68fa      	ldr	r2, [r7, #12]
 80052c4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	681b      	ldr	r3, [r3, #0]
 80052ca:	4a1c      	ldr	r2, [pc, #112]	@ (800533c <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 80052cc:	4293      	cmp	r3, r2
 80052ce:	d018      	beq.n	8005302 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80052d8:	d013      	beq.n	8005302 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	681b      	ldr	r3, [r3, #0]
 80052de:	4a18      	ldr	r2, [pc, #96]	@ (8005340 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 80052e0:	4293      	cmp	r3, r2
 80052e2:	d00e      	beq.n	8005302 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	681b      	ldr	r3, [r3, #0]
 80052e8:	4a16      	ldr	r2, [pc, #88]	@ (8005344 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 80052ea:	4293      	cmp	r3, r2
 80052ec:	d009      	beq.n	8005302 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	681b      	ldr	r3, [r3, #0]
 80052f2:	4a15      	ldr	r2, [pc, #84]	@ (8005348 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 80052f4:	4293      	cmp	r3, r2
 80052f6:	d004      	beq.n	8005302 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	681b      	ldr	r3, [r3, #0]
 80052fc:	4a13      	ldr	r2, [pc, #76]	@ (800534c <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 80052fe:	4293      	cmp	r3, r2
 8005300:	d10c      	bne.n	800531c <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005302:	68bb      	ldr	r3, [r7, #8]
 8005304:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005308:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800530a:	683b      	ldr	r3, [r7, #0]
 800530c:	685b      	ldr	r3, [r3, #4]
 800530e:	68ba      	ldr	r2, [r7, #8]
 8005310:	4313      	orrs	r3, r2
 8005312:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	681b      	ldr	r3, [r3, #0]
 8005318:	68ba      	ldr	r2, [r7, #8]
 800531a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	2201      	movs	r2, #1
 8005320:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	2200      	movs	r2, #0
 8005328:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800532c:	2300      	movs	r3, #0
}
 800532e:	4618      	mov	r0, r3
 8005330:	3714      	adds	r7, #20
 8005332:	46bd      	mov	sp, r7
 8005334:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005338:	4770      	bx	lr
 800533a:	bf00      	nop
 800533c:	40010000 	.word	0x40010000
 8005340:	40000400 	.word	0x40000400
 8005344:	40000800 	.word	0x40000800
 8005348:	40000c00 	.word	0x40000c00
 800534c:	40014000 	.word	0x40014000

08005350 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005350:	b480      	push	{r7}
 8005352:	b083      	sub	sp, #12
 8005354:	af00      	add	r7, sp, #0
 8005356:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005358:	bf00      	nop
 800535a:	370c      	adds	r7, #12
 800535c:	46bd      	mov	sp, r7
 800535e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005362:	4770      	bx	lr

08005364 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005364:	b480      	push	{r7}
 8005366:	b083      	sub	sp, #12
 8005368:	af00      	add	r7, sp, #0
 800536a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800536c:	bf00      	nop
 800536e:	370c      	adds	r7, #12
 8005370:	46bd      	mov	sp, r7
 8005372:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005376:	4770      	bx	lr

08005378 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005378:	b580      	push	{r7, lr}
 800537a:	b082      	sub	sp, #8
 800537c:	af00      	add	r7, sp, #0
 800537e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	2b00      	cmp	r3, #0
 8005384:	d101      	bne.n	800538a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005386:	2301      	movs	r3, #1
 8005388:	e042      	b.n	8005410 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005390:	b2db      	uxtb	r3, r3
 8005392:	2b00      	cmp	r3, #0
 8005394:	d106      	bne.n	80053a4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	2200      	movs	r2, #0
 800539a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800539e:	6878      	ldr	r0, [r7, #4]
 80053a0:	f7fd f92c 	bl	80025fc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	2224      	movs	r2, #36	@ 0x24
 80053a8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	681b      	ldr	r3, [r3, #0]
 80053b0:	68da      	ldr	r2, [r3, #12]
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	681b      	ldr	r3, [r3, #0]
 80053b6:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80053ba:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80053bc:	6878      	ldr	r0, [r7, #4]
 80053be:	f000 ffc9 	bl	8006354 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	681b      	ldr	r3, [r3, #0]
 80053c6:	691a      	ldr	r2, [r3, #16]
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80053d0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	681b      	ldr	r3, [r3, #0]
 80053d6:	695a      	ldr	r2, [r3, #20]
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	681b      	ldr	r3, [r3, #0]
 80053dc:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80053e0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	681b      	ldr	r3, [r3, #0]
 80053e6:	68da      	ldr	r2, [r3, #12]
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	681b      	ldr	r3, [r3, #0]
 80053ec:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80053f0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	2200      	movs	r2, #0
 80053f6:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	2220      	movs	r2, #32
 80053fc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	2220      	movs	r2, #32
 8005404:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	2200      	movs	r2, #0
 800540c:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800540e:	2300      	movs	r3, #0
}
 8005410:	4618      	mov	r0, r3
 8005412:	3708      	adds	r7, #8
 8005414:	46bd      	mov	sp, r7
 8005416:	bd80      	pop	{r7, pc}

08005418 <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8005418:	b580      	push	{r7, lr}
 800541a:	b08c      	sub	sp, #48	@ 0x30
 800541c:	af00      	add	r7, sp, #0
 800541e:	60f8      	str	r0, [r7, #12]
 8005420:	60b9      	str	r1, [r7, #8]
 8005422:	4613      	mov	r3, r2
 8005424:	80fb      	strh	r3, [r7, #6]
  const uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005426:	68fb      	ldr	r3, [r7, #12]
 8005428:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800542c:	b2db      	uxtb	r3, r3
 800542e:	2b20      	cmp	r3, #32
 8005430:	d156      	bne.n	80054e0 <HAL_UART_Transmit_DMA+0xc8>
  {
    if ((pData == NULL) || (Size == 0U))
 8005432:	68bb      	ldr	r3, [r7, #8]
 8005434:	2b00      	cmp	r3, #0
 8005436:	d002      	beq.n	800543e <HAL_UART_Transmit_DMA+0x26>
 8005438:	88fb      	ldrh	r3, [r7, #6]
 800543a:	2b00      	cmp	r3, #0
 800543c:	d101      	bne.n	8005442 <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 800543e:	2301      	movs	r3, #1
 8005440:	e04f      	b.n	80054e2 <HAL_UART_Transmit_DMA+0xca>
    }

    huart->pTxBuffPtr = pData;
 8005442:	68ba      	ldr	r2, [r7, #8]
 8005444:	68fb      	ldr	r3, [r7, #12]
 8005446:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8005448:	68fb      	ldr	r3, [r7, #12]
 800544a:	88fa      	ldrh	r2, [r7, #6]
 800544c:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 800544e:	68fb      	ldr	r3, [r7, #12]
 8005450:	88fa      	ldrh	r2, [r7, #6]
 8005452:	84da      	strh	r2, [r3, #38]	@ 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005454:	68fb      	ldr	r3, [r7, #12]
 8005456:	2200      	movs	r2, #0
 8005458:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800545a:	68fb      	ldr	r3, [r7, #12]
 800545c:	2221      	movs	r2, #33	@ 0x21
 800545e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8005462:	68fb      	ldr	r3, [r7, #12]
 8005464:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005466:	4a21      	ldr	r2, [pc, #132]	@ (80054ec <HAL_UART_Transmit_DMA+0xd4>)
 8005468:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 800546a:	68fb      	ldr	r3, [r7, #12]
 800546c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800546e:	4a20      	ldr	r2, [pc, #128]	@ (80054f0 <HAL_UART_Transmit_DMA+0xd8>)
 8005470:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 8005472:	68fb      	ldr	r3, [r7, #12]
 8005474:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005476:	4a1f      	ldr	r2, [pc, #124]	@ (80054f4 <HAL_UART_Transmit_DMA+0xdc>)
 8005478:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 800547a:	68fb      	ldr	r3, [r7, #12]
 800547c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800547e:	2200      	movs	r2, #0
 8005480:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Enable the UART transmit DMA stream */
    tmp = (const uint32_t *)&pData;
 8005482:	f107 0308 	add.w	r3, r7, #8
 8005486:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_DMA_Start_IT(huart->hdmatx, *(const uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 8005488:	68fb      	ldr	r3, [r7, #12]
 800548a:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 800548c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800548e:	6819      	ldr	r1, [r3, #0]
 8005490:	68fb      	ldr	r3, [r7, #12]
 8005492:	681b      	ldr	r3, [r3, #0]
 8005494:	3304      	adds	r3, #4
 8005496:	461a      	mov	r2, r3
 8005498:	88fb      	ldrh	r3, [r7, #6]
 800549a:	f7fd fd9f 	bl	8002fdc <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 800549e:	68fb      	ldr	r3, [r7, #12]
 80054a0:	681b      	ldr	r3, [r3, #0]
 80054a2:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80054a6:	601a      	str	r2, [r3, #0]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80054a8:	68fb      	ldr	r3, [r7, #12]
 80054aa:	681b      	ldr	r3, [r3, #0]
 80054ac:	3314      	adds	r3, #20
 80054ae:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80054b0:	69bb      	ldr	r3, [r7, #24]
 80054b2:	e853 3f00 	ldrex	r3, [r3]
 80054b6:	617b      	str	r3, [r7, #20]
   return(result);
 80054b8:	697b      	ldr	r3, [r7, #20]
 80054ba:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80054be:	62bb      	str	r3, [r7, #40]	@ 0x28
 80054c0:	68fb      	ldr	r3, [r7, #12]
 80054c2:	681b      	ldr	r3, [r3, #0]
 80054c4:	3314      	adds	r3, #20
 80054c6:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80054c8:	627a      	str	r2, [r7, #36]	@ 0x24
 80054ca:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80054cc:	6a39      	ldr	r1, [r7, #32]
 80054ce:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80054d0:	e841 2300 	strex	r3, r2, [r1]
 80054d4:	61fb      	str	r3, [r7, #28]
   return(result);
 80054d6:	69fb      	ldr	r3, [r7, #28]
 80054d8:	2b00      	cmp	r3, #0
 80054da:	d1e5      	bne.n	80054a8 <HAL_UART_Transmit_DMA+0x90>

    return HAL_OK;
 80054dc:	2300      	movs	r3, #0
 80054de:	e000      	b.n	80054e2 <HAL_UART_Transmit_DMA+0xca>
  }
  else
  {
    return HAL_BUSY;
 80054e0:	2302      	movs	r3, #2
  }
}
 80054e2:	4618      	mov	r0, r3
 80054e4:	3730      	adds	r7, #48	@ 0x30
 80054e6:	46bd      	mov	sp, r7
 80054e8:	bd80      	pop	{r7, pc}
 80054ea:	bf00      	nop
 80054ec:	08005be1 	.word	0x08005be1
 80054f0:	08005c7b 	.word	0x08005c7b
 80054f4:	08005dff 	.word	0x08005dff

080054f8 <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80054f8:	b580      	push	{r7, lr}
 80054fa:	b084      	sub	sp, #16
 80054fc:	af00      	add	r7, sp, #0
 80054fe:	60f8      	str	r0, [r7, #12]
 8005500:	60b9      	str	r1, [r7, #8]
 8005502:	4613      	mov	r3, r2
 8005504:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005506:	68fb      	ldr	r3, [r7, #12]
 8005508:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800550c:	b2db      	uxtb	r3, r3
 800550e:	2b20      	cmp	r3, #32
 8005510:	d112      	bne.n	8005538 <HAL_UART_Receive_DMA+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8005512:	68bb      	ldr	r3, [r7, #8]
 8005514:	2b00      	cmp	r3, #0
 8005516:	d002      	beq.n	800551e <HAL_UART_Receive_DMA+0x26>
 8005518:	88fb      	ldrh	r3, [r7, #6]
 800551a:	2b00      	cmp	r3, #0
 800551c:	d101      	bne.n	8005522 <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 800551e:	2301      	movs	r3, #1
 8005520:	e00b      	b.n	800553a <HAL_UART_Receive_DMA+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005522:	68fb      	ldr	r3, [r7, #12]
 8005524:	2200      	movs	r2, #0
 8005526:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8005528:	88fb      	ldrh	r3, [r7, #6]
 800552a:	461a      	mov	r2, r3
 800552c:	68b9      	ldr	r1, [r7, #8]
 800552e:	68f8      	ldr	r0, [r7, #12]
 8005530:	f000 fcb0 	bl	8005e94 <UART_Start_Receive_DMA>
 8005534:	4603      	mov	r3, r0
 8005536:	e000      	b.n	800553a <HAL_UART_Receive_DMA+0x42>
  }
  else
  {
    return HAL_BUSY;
 8005538:	2302      	movs	r3, #2
  }
}
 800553a:	4618      	mov	r0, r3
 800553c:	3710      	adds	r7, #16
 800553e:	46bd      	mov	sp, r7
 8005540:	bd80      	pop	{r7, pc}

08005542 <HAL_UART_DMAStop>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DMAStop(UART_HandleTypeDef *huart)
{
 8005542:	b580      	push	{r7, lr}
 8005544:	b090      	sub	sp, #64	@ 0x40
 8005546:	af00      	add	r7, sp, #0
 8005548:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 800554a:	2300      	movs	r3, #0
 800554c:	63fb      	str	r3, [r7, #60]	@ 0x3c
     when calling HAL_DMA_Abort() API the DMA TX/RX Transfer complete interrupt is generated
     and the correspond call back is executed HAL_UART_TxCpltCallback() / HAL_UART_RxCpltCallback()
     */

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	681b      	ldr	r3, [r3, #0]
 8005552:	695b      	ldr	r3, [r3, #20]
 8005554:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005558:	2b80      	cmp	r3, #128	@ 0x80
 800555a:	bf0c      	ite	eq
 800555c:	2301      	moveq	r3, #1
 800555e:	2300      	movne	r3, #0
 8005560:	b2db      	uxtb	r3, r3
 8005562:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800556a:	b2db      	uxtb	r3, r3
 800556c:	2b21      	cmp	r3, #33	@ 0x21
 800556e:	d128      	bne.n	80055c2 <HAL_UART_DMAStop+0x80>
 8005570:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005572:	2b00      	cmp	r3, #0
 8005574:	d025      	beq.n	80055c2 <HAL_UART_DMAStop+0x80>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	681b      	ldr	r3, [r3, #0]
 800557a:	3314      	adds	r3, #20
 800557c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800557e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005580:	e853 3f00 	ldrex	r3, [r3]
 8005584:	623b      	str	r3, [r7, #32]
   return(result);
 8005586:	6a3b      	ldr	r3, [r7, #32]
 8005588:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800558c:	63bb      	str	r3, [r7, #56]	@ 0x38
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	681b      	ldr	r3, [r3, #0]
 8005592:	3314      	adds	r3, #20
 8005594:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8005596:	633a      	str	r2, [r7, #48]	@ 0x30
 8005598:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800559a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800559c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800559e:	e841 2300 	strex	r3, r2, [r1]
 80055a2:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80055a4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80055a6:	2b00      	cmp	r3, #0
 80055a8:	d1e5      	bne.n	8005576 <HAL_UART_DMAStop+0x34>

    /* Abort the UART DMA Tx stream */
    if (huart->hdmatx != NULL)
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80055ae:	2b00      	cmp	r3, #0
 80055b0:	d004      	beq.n	80055bc <HAL_UART_DMAStop+0x7a>
    {
      HAL_DMA_Abort(huart->hdmatx);
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80055b6:	4618      	mov	r0, r3
 80055b8:	f7fd fd68 	bl	800308c <HAL_DMA_Abort>
    }
    UART_EndTxTransfer(huart);
 80055bc:	6878      	ldr	r0, [r7, #4]
 80055be:	f000 fd03 	bl	8005fc8 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	681b      	ldr	r3, [r3, #0]
 80055c6:	695b      	ldr	r3, [r3, #20]
 80055c8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80055cc:	2b40      	cmp	r3, #64	@ 0x40
 80055ce:	bf0c      	ite	eq
 80055d0:	2301      	moveq	r3, #1
 80055d2:	2300      	movne	r3, #0
 80055d4:	b2db      	uxtb	r3, r3
 80055d6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80055de:	b2db      	uxtb	r3, r3
 80055e0:	2b22      	cmp	r3, #34	@ 0x22
 80055e2:	d128      	bne.n	8005636 <HAL_UART_DMAStop+0xf4>
 80055e4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80055e6:	2b00      	cmp	r3, #0
 80055e8:	d025      	beq.n	8005636 <HAL_UART_DMAStop+0xf4>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	681b      	ldr	r3, [r3, #0]
 80055ee:	3314      	adds	r3, #20
 80055f0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80055f2:	693b      	ldr	r3, [r7, #16]
 80055f4:	e853 3f00 	ldrex	r3, [r3]
 80055f8:	60fb      	str	r3, [r7, #12]
   return(result);
 80055fa:	68fb      	ldr	r3, [r7, #12]
 80055fc:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005600:	637b      	str	r3, [r7, #52]	@ 0x34
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	681b      	ldr	r3, [r3, #0]
 8005606:	3314      	adds	r3, #20
 8005608:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800560a:	61fa      	str	r2, [r7, #28]
 800560c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800560e:	69b9      	ldr	r1, [r7, #24]
 8005610:	69fa      	ldr	r2, [r7, #28]
 8005612:	e841 2300 	strex	r3, r2, [r1]
 8005616:	617b      	str	r3, [r7, #20]
   return(result);
 8005618:	697b      	ldr	r3, [r7, #20]
 800561a:	2b00      	cmp	r3, #0
 800561c:	d1e5      	bne.n	80055ea <HAL_UART_DMAStop+0xa8>

    /* Abort the UART DMA Rx stream */
    if (huart->hdmarx != NULL)
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005622:	2b00      	cmp	r3, #0
 8005624:	d004      	beq.n	8005630 <HAL_UART_DMAStop+0xee>
    {
      HAL_DMA_Abort(huart->hdmarx);
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800562a:	4618      	mov	r0, r3
 800562c:	f7fd fd2e 	bl	800308c <HAL_DMA_Abort>
    }
    UART_EndRxTransfer(huart);
 8005630:	6878      	ldr	r0, [r7, #4]
 8005632:	f000 fcf1 	bl	8006018 <UART_EndRxTransfer>
  }

  return HAL_OK;
 8005636:	2300      	movs	r3, #0
}
 8005638:	4618      	mov	r0, r3
 800563a:	3740      	adds	r7, #64	@ 0x40
 800563c:	46bd      	mov	sp, r7
 800563e:	bd80      	pop	{r7, pc}

08005640 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005640:	b580      	push	{r7, lr}
 8005642:	b0ba      	sub	sp, #232	@ 0xe8
 8005644:	af00      	add	r7, sp, #0
 8005646:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	681b      	ldr	r3, [r3, #0]
 800564c:	681b      	ldr	r3, [r3, #0]
 800564e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	681b      	ldr	r3, [r3, #0]
 8005656:	68db      	ldr	r3, [r3, #12]
 8005658:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	681b      	ldr	r3, [r3, #0]
 8005660:	695b      	ldr	r3, [r3, #20]
 8005662:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8005666:	2300      	movs	r3, #0
 8005668:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 800566c:	2300      	movs	r3, #0
 800566e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8005672:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005676:	f003 030f 	and.w	r3, r3, #15
 800567a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 800567e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8005682:	2b00      	cmp	r3, #0
 8005684:	d10f      	bne.n	80056a6 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005686:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800568a:	f003 0320 	and.w	r3, r3, #32
 800568e:	2b00      	cmp	r3, #0
 8005690:	d009      	beq.n	80056a6 <HAL_UART_IRQHandler+0x66>
 8005692:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005696:	f003 0320 	and.w	r3, r3, #32
 800569a:	2b00      	cmp	r3, #0
 800569c:	d003      	beq.n	80056a6 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800569e:	6878      	ldr	r0, [r7, #4]
 80056a0:	f000 fd99 	bl	80061d6 <UART_Receive_IT>
      return;
 80056a4:	e25b      	b.n	8005b5e <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80056a6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80056aa:	2b00      	cmp	r3, #0
 80056ac:	f000 80de 	beq.w	800586c <HAL_UART_IRQHandler+0x22c>
 80056b0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80056b4:	f003 0301 	and.w	r3, r3, #1
 80056b8:	2b00      	cmp	r3, #0
 80056ba:	d106      	bne.n	80056ca <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80056bc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80056c0:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 80056c4:	2b00      	cmp	r3, #0
 80056c6:	f000 80d1 	beq.w	800586c <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80056ca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80056ce:	f003 0301 	and.w	r3, r3, #1
 80056d2:	2b00      	cmp	r3, #0
 80056d4:	d00b      	beq.n	80056ee <HAL_UART_IRQHandler+0xae>
 80056d6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80056da:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80056de:	2b00      	cmp	r3, #0
 80056e0:	d005      	beq.n	80056ee <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80056e6:	f043 0201 	orr.w	r2, r3, #1
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80056ee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80056f2:	f003 0304 	and.w	r3, r3, #4
 80056f6:	2b00      	cmp	r3, #0
 80056f8:	d00b      	beq.n	8005712 <HAL_UART_IRQHandler+0xd2>
 80056fa:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80056fe:	f003 0301 	and.w	r3, r3, #1
 8005702:	2b00      	cmp	r3, #0
 8005704:	d005      	beq.n	8005712 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800570a:	f043 0202 	orr.w	r2, r3, #2
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005712:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005716:	f003 0302 	and.w	r3, r3, #2
 800571a:	2b00      	cmp	r3, #0
 800571c:	d00b      	beq.n	8005736 <HAL_UART_IRQHandler+0xf6>
 800571e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005722:	f003 0301 	and.w	r3, r3, #1
 8005726:	2b00      	cmp	r3, #0
 8005728:	d005      	beq.n	8005736 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800572e:	f043 0204 	orr.w	r2, r3, #4
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8005736:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800573a:	f003 0308 	and.w	r3, r3, #8
 800573e:	2b00      	cmp	r3, #0
 8005740:	d011      	beq.n	8005766 <HAL_UART_IRQHandler+0x126>
 8005742:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005746:	f003 0320 	and.w	r3, r3, #32
 800574a:	2b00      	cmp	r3, #0
 800574c:	d105      	bne.n	800575a <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800574e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005752:	f003 0301 	and.w	r3, r3, #1
 8005756:	2b00      	cmp	r3, #0
 8005758:	d005      	beq.n	8005766 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800575e:	f043 0208 	orr.w	r2, r3, #8
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800576a:	2b00      	cmp	r3, #0
 800576c:	f000 81f2 	beq.w	8005b54 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005770:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005774:	f003 0320 	and.w	r3, r3, #32
 8005778:	2b00      	cmp	r3, #0
 800577a:	d008      	beq.n	800578e <HAL_UART_IRQHandler+0x14e>
 800577c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005780:	f003 0320 	and.w	r3, r3, #32
 8005784:	2b00      	cmp	r3, #0
 8005786:	d002      	beq.n	800578e <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8005788:	6878      	ldr	r0, [r7, #4]
 800578a:	f000 fd24 	bl	80061d6 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	681b      	ldr	r3, [r3, #0]
 8005792:	695b      	ldr	r3, [r3, #20]
 8005794:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005798:	2b40      	cmp	r3, #64	@ 0x40
 800579a:	bf0c      	ite	eq
 800579c:	2301      	moveq	r3, #1
 800579e:	2300      	movne	r3, #0
 80057a0:	b2db      	uxtb	r3, r3
 80057a2:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80057aa:	f003 0308 	and.w	r3, r3, #8
 80057ae:	2b00      	cmp	r3, #0
 80057b0:	d103      	bne.n	80057ba <HAL_UART_IRQHandler+0x17a>
 80057b2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80057b6:	2b00      	cmp	r3, #0
 80057b8:	d04f      	beq.n	800585a <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80057ba:	6878      	ldr	r0, [r7, #4]
 80057bc:	f000 fc2c 	bl	8006018 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	681b      	ldr	r3, [r3, #0]
 80057c4:	695b      	ldr	r3, [r3, #20]
 80057c6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80057ca:	2b40      	cmp	r3, #64	@ 0x40
 80057cc:	d141      	bne.n	8005852 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	681b      	ldr	r3, [r3, #0]
 80057d2:	3314      	adds	r3, #20
 80057d4:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80057d8:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80057dc:	e853 3f00 	ldrex	r3, [r3]
 80057e0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 80057e4:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80057e8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80057ec:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	681b      	ldr	r3, [r3, #0]
 80057f4:	3314      	adds	r3, #20
 80057f6:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 80057fa:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 80057fe:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005802:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8005806:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800580a:	e841 2300 	strex	r3, r2, [r1]
 800580e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8005812:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8005816:	2b00      	cmp	r3, #0
 8005818:	d1d9      	bne.n	80057ce <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800581e:	2b00      	cmp	r3, #0
 8005820:	d013      	beq.n	800584a <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005826:	4a7e      	ldr	r2, [pc, #504]	@ (8005a20 <HAL_UART_IRQHandler+0x3e0>)
 8005828:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800582e:	4618      	mov	r0, r3
 8005830:	f7fd fc9c 	bl	800316c <HAL_DMA_Abort_IT>
 8005834:	4603      	mov	r3, r0
 8005836:	2b00      	cmp	r3, #0
 8005838:	d016      	beq.n	8005868 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800583e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005840:	687a      	ldr	r2, [r7, #4]
 8005842:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8005844:	4610      	mov	r0, r2
 8005846:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005848:	e00e      	b.n	8005868 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800584a:	6878      	ldr	r0, [r7, #4]
 800584c:	f000 f9b2 	bl	8005bb4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005850:	e00a      	b.n	8005868 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005852:	6878      	ldr	r0, [r7, #4]
 8005854:	f000 f9ae 	bl	8005bb4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005858:	e006      	b.n	8005868 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800585a:	6878      	ldr	r0, [r7, #4]
 800585c:	f000 f9aa 	bl	8005bb4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	2200      	movs	r2, #0
 8005864:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8005866:	e175      	b.n	8005b54 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005868:	bf00      	nop
    return;
 800586a:	e173      	b.n	8005b54 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005870:	2b01      	cmp	r3, #1
 8005872:	f040 814f 	bne.w	8005b14 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8005876:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800587a:	f003 0310 	and.w	r3, r3, #16
 800587e:	2b00      	cmp	r3, #0
 8005880:	f000 8148 	beq.w	8005b14 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8005884:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005888:	f003 0310 	and.w	r3, r3, #16
 800588c:	2b00      	cmp	r3, #0
 800588e:	f000 8141 	beq.w	8005b14 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005892:	2300      	movs	r3, #0
 8005894:	60bb      	str	r3, [r7, #8]
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	681b      	ldr	r3, [r3, #0]
 800589a:	681b      	ldr	r3, [r3, #0]
 800589c:	60bb      	str	r3, [r7, #8]
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	681b      	ldr	r3, [r3, #0]
 80058a2:	685b      	ldr	r3, [r3, #4]
 80058a4:	60bb      	str	r3, [r7, #8]
 80058a6:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	681b      	ldr	r3, [r3, #0]
 80058ac:	695b      	ldr	r3, [r3, #20]
 80058ae:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80058b2:	2b40      	cmp	r3, #64	@ 0x40
 80058b4:	f040 80b6 	bne.w	8005a24 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80058bc:	681b      	ldr	r3, [r3, #0]
 80058be:	685b      	ldr	r3, [r3, #4]
 80058c0:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 80058c4:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 80058c8:	2b00      	cmp	r3, #0
 80058ca:	f000 8145 	beq.w	8005b58 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80058d2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80058d6:	429a      	cmp	r2, r3
 80058d8:	f080 813e 	bcs.w	8005b58 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80058e2:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80058e8:	69db      	ldr	r3, [r3, #28]
 80058ea:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80058ee:	f000 8088 	beq.w	8005a02 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	681b      	ldr	r3, [r3, #0]
 80058f6:	330c      	adds	r3, #12
 80058f8:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80058fc:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8005900:	e853 3f00 	ldrex	r3, [r3]
 8005904:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8005908:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800590c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005910:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	681b      	ldr	r3, [r3, #0]
 8005918:	330c      	adds	r3, #12
 800591a:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 800591e:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8005922:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005926:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800592a:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800592e:	e841 2300 	strex	r3, r2, [r1]
 8005932:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8005936:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800593a:	2b00      	cmp	r3, #0
 800593c:	d1d9      	bne.n	80058f2 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	681b      	ldr	r3, [r3, #0]
 8005942:	3314      	adds	r3, #20
 8005944:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005946:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8005948:	e853 3f00 	ldrex	r3, [r3]
 800594c:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800594e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8005950:	f023 0301 	bic.w	r3, r3, #1
 8005954:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	681b      	ldr	r3, [r3, #0]
 800595c:	3314      	adds	r3, #20
 800595e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8005962:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8005966:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005968:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800596a:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800596e:	e841 2300 	strex	r3, r2, [r1]
 8005972:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8005974:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8005976:	2b00      	cmp	r3, #0
 8005978:	d1e1      	bne.n	800593e <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	681b      	ldr	r3, [r3, #0]
 800597e:	3314      	adds	r3, #20
 8005980:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005982:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8005984:	e853 3f00 	ldrex	r3, [r3]
 8005988:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800598a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800598c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005990:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	681b      	ldr	r3, [r3, #0]
 8005998:	3314      	adds	r3, #20
 800599a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800599e:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80059a0:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80059a2:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 80059a4:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80059a6:	e841 2300 	strex	r3, r2, [r1]
 80059aa:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 80059ac:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80059ae:	2b00      	cmp	r3, #0
 80059b0:	d1e3      	bne.n	800597a <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	2220      	movs	r2, #32
 80059b6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	2200      	movs	r2, #0
 80059be:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	681b      	ldr	r3, [r3, #0]
 80059c4:	330c      	adds	r3, #12
 80059c6:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80059c8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80059ca:	e853 3f00 	ldrex	r3, [r3]
 80059ce:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80059d0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80059d2:	f023 0310 	bic.w	r3, r3, #16
 80059d6:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	681b      	ldr	r3, [r3, #0]
 80059de:	330c      	adds	r3, #12
 80059e0:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 80059e4:	65ba      	str	r2, [r7, #88]	@ 0x58
 80059e6:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80059e8:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80059ea:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80059ec:	e841 2300 	strex	r3, r2, [r1]
 80059f0:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80059f2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80059f4:	2b00      	cmp	r3, #0
 80059f6:	d1e3      	bne.n	80059c0 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80059fc:	4618      	mov	r0, r3
 80059fe:	f7fd fb45 	bl	800308c <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	2202      	movs	r2, #2
 8005a06:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8005a10:	b29b      	uxth	r3, r3
 8005a12:	1ad3      	subs	r3, r2, r3
 8005a14:	b29b      	uxth	r3, r3
 8005a16:	4619      	mov	r1, r3
 8005a18:	6878      	ldr	r0, [r7, #4]
 8005a1a:	f000 f8d5 	bl	8005bc8 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8005a1e:	e09b      	b.n	8005b58 <HAL_UART_IRQHandler+0x518>
 8005a20:	080060df 	.word	0x080060df
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8005a2c:	b29b      	uxth	r3, r3
 8005a2e:	1ad3      	subs	r3, r2, r3
 8005a30:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8005a38:	b29b      	uxth	r3, r3
 8005a3a:	2b00      	cmp	r3, #0
 8005a3c:	f000 808e 	beq.w	8005b5c <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8005a40:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8005a44:	2b00      	cmp	r3, #0
 8005a46:	f000 8089 	beq.w	8005b5c <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	681b      	ldr	r3, [r3, #0]
 8005a4e:	330c      	adds	r3, #12
 8005a50:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a52:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005a54:	e853 3f00 	ldrex	r3, [r3]
 8005a58:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8005a5a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005a5c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005a60:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	681b      	ldr	r3, [r3, #0]
 8005a68:	330c      	adds	r3, #12
 8005a6a:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8005a6e:	647a      	str	r2, [r7, #68]	@ 0x44
 8005a70:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a72:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8005a74:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005a76:	e841 2300 	strex	r3, r2, [r1]
 8005a7a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8005a7c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005a7e:	2b00      	cmp	r3, #0
 8005a80:	d1e3      	bne.n	8005a4a <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	681b      	ldr	r3, [r3, #0]
 8005a86:	3314      	adds	r3, #20
 8005a88:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a8a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a8c:	e853 3f00 	ldrex	r3, [r3]
 8005a90:	623b      	str	r3, [r7, #32]
   return(result);
 8005a92:	6a3b      	ldr	r3, [r7, #32]
 8005a94:	f023 0301 	bic.w	r3, r3, #1
 8005a98:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	681b      	ldr	r3, [r3, #0]
 8005aa0:	3314      	adds	r3, #20
 8005aa2:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8005aa6:	633a      	str	r2, [r7, #48]	@ 0x30
 8005aa8:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005aaa:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005aac:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005aae:	e841 2300 	strex	r3, r2, [r1]
 8005ab2:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8005ab4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005ab6:	2b00      	cmp	r3, #0
 8005ab8:	d1e3      	bne.n	8005a82 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	2220      	movs	r2, #32
 8005abe:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	2200      	movs	r2, #0
 8005ac6:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	681b      	ldr	r3, [r3, #0]
 8005acc:	330c      	adds	r3, #12
 8005ace:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ad0:	693b      	ldr	r3, [r7, #16]
 8005ad2:	e853 3f00 	ldrex	r3, [r3]
 8005ad6:	60fb      	str	r3, [r7, #12]
   return(result);
 8005ad8:	68fb      	ldr	r3, [r7, #12]
 8005ada:	f023 0310 	bic.w	r3, r3, #16
 8005ade:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	681b      	ldr	r3, [r3, #0]
 8005ae6:	330c      	adds	r3, #12
 8005ae8:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8005aec:	61fa      	str	r2, [r7, #28]
 8005aee:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005af0:	69b9      	ldr	r1, [r7, #24]
 8005af2:	69fa      	ldr	r2, [r7, #28]
 8005af4:	e841 2300 	strex	r3, r2, [r1]
 8005af8:	617b      	str	r3, [r7, #20]
   return(result);
 8005afa:	697b      	ldr	r3, [r7, #20]
 8005afc:	2b00      	cmp	r3, #0
 8005afe:	d1e3      	bne.n	8005ac8 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	2202      	movs	r2, #2
 8005b04:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8005b06:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8005b0a:	4619      	mov	r1, r3
 8005b0c:	6878      	ldr	r0, [r7, #4]
 8005b0e:	f000 f85b 	bl	8005bc8 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8005b12:	e023      	b.n	8005b5c <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8005b14:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005b18:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005b1c:	2b00      	cmp	r3, #0
 8005b1e:	d009      	beq.n	8005b34 <HAL_UART_IRQHandler+0x4f4>
 8005b20:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005b24:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005b28:	2b00      	cmp	r3, #0
 8005b2a:	d003      	beq.n	8005b34 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8005b2c:	6878      	ldr	r0, [r7, #4]
 8005b2e:	f000 faea 	bl	8006106 <UART_Transmit_IT>
    return;
 8005b32:	e014      	b.n	8005b5e <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8005b34:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005b38:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005b3c:	2b00      	cmp	r3, #0
 8005b3e:	d00e      	beq.n	8005b5e <HAL_UART_IRQHandler+0x51e>
 8005b40:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005b44:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005b48:	2b00      	cmp	r3, #0
 8005b4a:	d008      	beq.n	8005b5e <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8005b4c:	6878      	ldr	r0, [r7, #4]
 8005b4e:	f000 fb2a 	bl	80061a6 <UART_EndTransmit_IT>
    return;
 8005b52:	e004      	b.n	8005b5e <HAL_UART_IRQHandler+0x51e>
    return;
 8005b54:	bf00      	nop
 8005b56:	e002      	b.n	8005b5e <HAL_UART_IRQHandler+0x51e>
      return;
 8005b58:	bf00      	nop
 8005b5a:	e000      	b.n	8005b5e <HAL_UART_IRQHandler+0x51e>
      return;
 8005b5c:	bf00      	nop
  }
}
 8005b5e:	37e8      	adds	r7, #232	@ 0xe8
 8005b60:	46bd      	mov	sp, r7
 8005b62:	bd80      	pop	{r7, pc}

08005b64 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005b64:	b480      	push	{r7}
 8005b66:	b083      	sub	sp, #12
 8005b68:	af00      	add	r7, sp, #0
 8005b6a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8005b6c:	bf00      	nop
 8005b6e:	370c      	adds	r7, #12
 8005b70:	46bd      	mov	sp, r7
 8005b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b76:	4770      	bx	lr

08005b78 <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8005b78:	b480      	push	{r7}
 8005b7a:	b083      	sub	sp, #12
 8005b7c:	af00      	add	r7, sp, #0
 8005b7e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 8005b80:	bf00      	nop
 8005b82:	370c      	adds	r7, #12
 8005b84:	46bd      	mov	sp, r7
 8005b86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b8a:	4770      	bx	lr

08005b8c <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8005b8c:	b480      	push	{r7}
 8005b8e:	b083      	sub	sp, #12
 8005b90:	af00      	add	r7, sp, #0
 8005b92:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8005b94:	bf00      	nop
 8005b96:	370c      	adds	r7, #12
 8005b98:	46bd      	mov	sp, r7
 8005b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b9e:	4770      	bx	lr

08005ba0 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8005ba0:	b480      	push	{r7}
 8005ba2:	b083      	sub	sp, #12
 8005ba4:	af00      	add	r7, sp, #0
 8005ba6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8005ba8:	bf00      	nop
 8005baa:	370c      	adds	r7, #12
 8005bac:	46bd      	mov	sp, r7
 8005bae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bb2:	4770      	bx	lr

08005bb4 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005bb4:	b480      	push	{r7}
 8005bb6:	b083      	sub	sp, #12
 8005bb8:	af00      	add	r7, sp, #0
 8005bba:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8005bbc:	bf00      	nop
 8005bbe:	370c      	adds	r7, #12
 8005bc0:	46bd      	mov	sp, r7
 8005bc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bc6:	4770      	bx	lr

08005bc8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005bc8:	b480      	push	{r7}
 8005bca:	b083      	sub	sp, #12
 8005bcc:	af00      	add	r7, sp, #0
 8005bce:	6078      	str	r0, [r7, #4]
 8005bd0:	460b      	mov	r3, r1
 8005bd2:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8005bd4:	bf00      	nop
 8005bd6:	370c      	adds	r7, #12
 8005bd8:	46bd      	mov	sp, r7
 8005bda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bde:	4770      	bx	lr

08005be0 <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8005be0:	b580      	push	{r7, lr}
 8005be2:	b090      	sub	sp, #64	@ 0x40
 8005be4:	af00      	add	r7, sp, #0
 8005be6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005bec:	63fb      	str	r3, [r7, #60]	@ 0x3c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	681b      	ldr	r3, [r3, #0]
 8005bf2:	681b      	ldr	r3, [r3, #0]
 8005bf4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005bf8:	2b00      	cmp	r3, #0
 8005bfa:	d137      	bne.n	8005c6c <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0x00U;
 8005bfc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005bfe:	2200      	movs	r2, #0
 8005c00:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8005c02:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005c04:	681b      	ldr	r3, [r3, #0]
 8005c06:	3314      	adds	r3, #20
 8005c08:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c0a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005c0c:	e853 3f00 	ldrex	r3, [r3]
 8005c10:	623b      	str	r3, [r7, #32]
   return(result);
 8005c12:	6a3b      	ldr	r3, [r7, #32]
 8005c14:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005c18:	63bb      	str	r3, [r7, #56]	@ 0x38
 8005c1a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005c1c:	681b      	ldr	r3, [r3, #0]
 8005c1e:	3314      	adds	r3, #20
 8005c20:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8005c22:	633a      	str	r2, [r7, #48]	@ 0x30
 8005c24:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c26:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005c28:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005c2a:	e841 2300 	strex	r3, r2, [r1]
 8005c2e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8005c30:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005c32:	2b00      	cmp	r3, #0
 8005c34:	d1e5      	bne.n	8005c02 <UART_DMATransmitCplt+0x22>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8005c36:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005c38:	681b      	ldr	r3, [r3, #0]
 8005c3a:	330c      	adds	r3, #12
 8005c3c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c3e:	693b      	ldr	r3, [r7, #16]
 8005c40:	e853 3f00 	ldrex	r3, [r3]
 8005c44:	60fb      	str	r3, [r7, #12]
   return(result);
 8005c46:	68fb      	ldr	r3, [r7, #12]
 8005c48:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005c4c:	637b      	str	r3, [r7, #52]	@ 0x34
 8005c4e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005c50:	681b      	ldr	r3, [r3, #0]
 8005c52:	330c      	adds	r3, #12
 8005c54:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8005c56:	61fa      	str	r2, [r7, #28]
 8005c58:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c5a:	69b9      	ldr	r1, [r7, #24]
 8005c5c:	69fa      	ldr	r2, [r7, #28]
 8005c5e:	e841 2300 	strex	r3, r2, [r1]
 8005c62:	617b      	str	r3, [r7, #20]
   return(result);
 8005c64:	697b      	ldr	r3, [r7, #20]
 8005c66:	2b00      	cmp	r3, #0
 8005c68:	d1e5      	bne.n	8005c36 <UART_DMATransmitCplt+0x56>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8005c6a:	e002      	b.n	8005c72 <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 8005c6c:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 8005c6e:	f7ff ff79 	bl	8005b64 <HAL_UART_TxCpltCallback>
}
 8005c72:	bf00      	nop
 8005c74:	3740      	adds	r7, #64	@ 0x40
 8005c76:	46bd      	mov	sp, r7
 8005c78:	bd80      	pop	{r7, pc}

08005c7a <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8005c7a:	b580      	push	{r7, lr}
 8005c7c:	b084      	sub	sp, #16
 8005c7e:	af00      	add	r7, sp, #0
 8005c80:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005c86:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8005c88:	68f8      	ldr	r0, [r7, #12]
 8005c8a:	f7ff ff75 	bl	8005b78 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005c8e:	bf00      	nop
 8005c90:	3710      	adds	r7, #16
 8005c92:	46bd      	mov	sp, r7
 8005c94:	bd80      	pop	{r7, pc}

08005c96 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8005c96:	b580      	push	{r7, lr}
 8005c98:	b09c      	sub	sp, #112	@ 0x70
 8005c9a:	af00      	add	r7, sp, #0
 8005c9c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005ca2:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	681b      	ldr	r3, [r3, #0]
 8005ca8:	681b      	ldr	r3, [r3, #0]
 8005caa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005cae:	2b00      	cmp	r3, #0
 8005cb0:	d172      	bne.n	8005d98 <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 8005cb2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005cb4:	2200      	movs	r2, #0
 8005cb6:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005cb8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005cba:	681b      	ldr	r3, [r3, #0]
 8005cbc:	330c      	adds	r3, #12
 8005cbe:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005cc0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005cc2:	e853 3f00 	ldrex	r3, [r3]
 8005cc6:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8005cc8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005cca:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005cce:	66bb      	str	r3, [r7, #104]	@ 0x68
 8005cd0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005cd2:	681b      	ldr	r3, [r3, #0]
 8005cd4:	330c      	adds	r3, #12
 8005cd6:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8005cd8:	65ba      	str	r2, [r7, #88]	@ 0x58
 8005cda:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005cdc:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8005cde:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8005ce0:	e841 2300 	strex	r3, r2, [r1]
 8005ce4:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8005ce6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005ce8:	2b00      	cmp	r3, #0
 8005cea:	d1e5      	bne.n	8005cb8 <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005cec:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005cee:	681b      	ldr	r3, [r3, #0]
 8005cf0:	3314      	adds	r3, #20
 8005cf2:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005cf4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005cf6:	e853 3f00 	ldrex	r3, [r3]
 8005cfa:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8005cfc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005cfe:	f023 0301 	bic.w	r3, r3, #1
 8005d02:	667b      	str	r3, [r7, #100]	@ 0x64
 8005d04:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005d06:	681b      	ldr	r3, [r3, #0]
 8005d08:	3314      	adds	r3, #20
 8005d0a:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8005d0c:	647a      	str	r2, [r7, #68]	@ 0x44
 8005d0e:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d10:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8005d12:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005d14:	e841 2300 	strex	r3, r2, [r1]
 8005d18:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8005d1a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005d1c:	2b00      	cmp	r3, #0
 8005d1e:	d1e5      	bne.n	8005cec <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005d20:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005d22:	681b      	ldr	r3, [r3, #0]
 8005d24:	3314      	adds	r3, #20
 8005d26:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d28:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d2a:	e853 3f00 	ldrex	r3, [r3]
 8005d2e:	623b      	str	r3, [r7, #32]
   return(result);
 8005d30:	6a3b      	ldr	r3, [r7, #32]
 8005d32:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005d36:	663b      	str	r3, [r7, #96]	@ 0x60
 8005d38:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005d3a:	681b      	ldr	r3, [r3, #0]
 8005d3c:	3314      	adds	r3, #20
 8005d3e:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8005d40:	633a      	str	r2, [r7, #48]	@ 0x30
 8005d42:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d44:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005d46:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005d48:	e841 2300 	strex	r3, r2, [r1]
 8005d4c:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8005d4e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005d50:	2b00      	cmp	r3, #0
 8005d52:	d1e5      	bne.n	8005d20 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8005d54:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005d56:	2220      	movs	r2, #32
 8005d58:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005d5c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005d5e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005d60:	2b01      	cmp	r3, #1
 8005d62:	d119      	bne.n	8005d98 <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005d64:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005d66:	681b      	ldr	r3, [r3, #0]
 8005d68:	330c      	adds	r3, #12
 8005d6a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d6c:	693b      	ldr	r3, [r7, #16]
 8005d6e:	e853 3f00 	ldrex	r3, [r3]
 8005d72:	60fb      	str	r3, [r7, #12]
   return(result);
 8005d74:	68fb      	ldr	r3, [r7, #12]
 8005d76:	f023 0310 	bic.w	r3, r3, #16
 8005d7a:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8005d7c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005d7e:	681b      	ldr	r3, [r3, #0]
 8005d80:	330c      	adds	r3, #12
 8005d82:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8005d84:	61fa      	str	r2, [r7, #28]
 8005d86:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d88:	69b9      	ldr	r1, [r7, #24]
 8005d8a:	69fa      	ldr	r2, [r7, #28]
 8005d8c:	e841 2300 	strex	r3, r2, [r1]
 8005d90:	617b      	str	r3, [r7, #20]
   return(result);
 8005d92:	697b      	ldr	r3, [r7, #20]
 8005d94:	2b00      	cmp	r3, #0
 8005d96:	d1e5      	bne.n	8005d64 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
   In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005d98:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005d9a:	2200      	movs	r2, #0
 8005d9c:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005d9e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005da0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005da2:	2b01      	cmp	r3, #1
 8005da4:	d106      	bne.n	8005db4 <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005da6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005da8:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8005daa:	4619      	mov	r1, r3
 8005dac:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8005dae:	f7ff ff0b 	bl	8005bc8 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8005db2:	e002      	b.n	8005dba <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 8005db4:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8005db6:	f7ff fee9 	bl	8005b8c <HAL_UART_RxCpltCallback>
}
 8005dba:	bf00      	nop
 8005dbc:	3770      	adds	r7, #112	@ 0x70
 8005dbe:	46bd      	mov	sp, r7
 8005dc0:	bd80      	pop	{r7, pc}

08005dc2 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8005dc2:	b580      	push	{r7, lr}
 8005dc4:	b084      	sub	sp, #16
 8005dc6:	af00      	add	r7, sp, #0
 8005dc8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005dce:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 8005dd0:	68fb      	ldr	r3, [r7, #12]
 8005dd2:	2201      	movs	r2, #1
 8005dd4:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005dd6:	68fb      	ldr	r3, [r7, #12]
 8005dd8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005dda:	2b01      	cmp	r3, #1
 8005ddc:	d108      	bne.n	8005df0 <UART_DMARxHalfCplt+0x2e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8005dde:	68fb      	ldr	r3, [r7, #12]
 8005de0:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8005de2:	085b      	lsrs	r3, r3, #1
 8005de4:	b29b      	uxth	r3, r3
 8005de6:	4619      	mov	r1, r3
 8005de8:	68f8      	ldr	r0, [r7, #12]
 8005dea:	f7ff feed 	bl	8005bc8 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8005dee:	e002      	b.n	8005df6 <UART_DMARxHalfCplt+0x34>
    HAL_UART_RxHalfCpltCallback(huart);
 8005df0:	68f8      	ldr	r0, [r7, #12]
 8005df2:	f7ff fed5 	bl	8005ba0 <HAL_UART_RxHalfCpltCallback>
}
 8005df6:	bf00      	nop
 8005df8:	3710      	adds	r7, #16
 8005dfa:	46bd      	mov	sp, r7
 8005dfc:	bd80      	pop	{r7, pc}

08005dfe <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8005dfe:	b580      	push	{r7, lr}
 8005e00:	b084      	sub	sp, #16
 8005e02:	af00      	add	r7, sp, #0
 8005e04:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8005e06:	2300      	movs	r3, #0
 8005e08:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005e0e:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8005e10:	68bb      	ldr	r3, [r7, #8]
 8005e12:	681b      	ldr	r3, [r3, #0]
 8005e14:	695b      	ldr	r3, [r3, #20]
 8005e16:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005e1a:	2b80      	cmp	r3, #128	@ 0x80
 8005e1c:	bf0c      	ite	eq
 8005e1e:	2301      	moveq	r3, #1
 8005e20:	2300      	movne	r3, #0
 8005e22:	b2db      	uxtb	r3, r3
 8005e24:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8005e26:	68bb      	ldr	r3, [r7, #8]
 8005e28:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005e2c:	b2db      	uxtb	r3, r3
 8005e2e:	2b21      	cmp	r3, #33	@ 0x21
 8005e30:	d108      	bne.n	8005e44 <UART_DMAError+0x46>
 8005e32:	68fb      	ldr	r3, [r7, #12]
 8005e34:	2b00      	cmp	r3, #0
 8005e36:	d005      	beq.n	8005e44 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8005e38:	68bb      	ldr	r3, [r7, #8]
 8005e3a:	2200      	movs	r2, #0
 8005e3c:	84da      	strh	r2, [r3, #38]	@ 0x26
    UART_EndTxTransfer(huart);
 8005e3e:	68b8      	ldr	r0, [r7, #8]
 8005e40:	f000 f8c2 	bl	8005fc8 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8005e44:	68bb      	ldr	r3, [r7, #8]
 8005e46:	681b      	ldr	r3, [r3, #0]
 8005e48:	695b      	ldr	r3, [r3, #20]
 8005e4a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005e4e:	2b40      	cmp	r3, #64	@ 0x40
 8005e50:	bf0c      	ite	eq
 8005e52:	2301      	moveq	r3, #1
 8005e54:	2300      	movne	r3, #0
 8005e56:	b2db      	uxtb	r3, r3
 8005e58:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8005e5a:	68bb      	ldr	r3, [r7, #8]
 8005e5c:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8005e60:	b2db      	uxtb	r3, r3
 8005e62:	2b22      	cmp	r3, #34	@ 0x22
 8005e64:	d108      	bne.n	8005e78 <UART_DMAError+0x7a>
 8005e66:	68fb      	ldr	r3, [r7, #12]
 8005e68:	2b00      	cmp	r3, #0
 8005e6a:	d005      	beq.n	8005e78 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8005e6c:	68bb      	ldr	r3, [r7, #8]
 8005e6e:	2200      	movs	r2, #0
 8005e70:	85da      	strh	r2, [r3, #46]	@ 0x2e
    UART_EndRxTransfer(huart);
 8005e72:	68b8      	ldr	r0, [r7, #8]
 8005e74:	f000 f8d0 	bl	8006018 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8005e78:	68bb      	ldr	r3, [r7, #8]
 8005e7a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005e7c:	f043 0210 	orr.w	r2, r3, #16
 8005e80:	68bb      	ldr	r3, [r7, #8]
 8005e82:	645a      	str	r2, [r3, #68]	@ 0x44
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005e84:	68b8      	ldr	r0, [r7, #8]
 8005e86:	f7ff fe95 	bl	8005bb4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005e8a:	bf00      	nop
 8005e8c:	3710      	adds	r7, #16
 8005e8e:	46bd      	mov	sp, r7
 8005e90:	bd80      	pop	{r7, pc}
	...

08005e94 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005e94:	b580      	push	{r7, lr}
 8005e96:	b098      	sub	sp, #96	@ 0x60
 8005e98:	af00      	add	r7, sp, #0
 8005e9a:	60f8      	str	r0, [r7, #12]
 8005e9c:	60b9      	str	r1, [r7, #8]
 8005e9e:	4613      	mov	r3, r2
 8005ea0:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 8005ea2:	68ba      	ldr	r2, [r7, #8]
 8005ea4:	68fb      	ldr	r3, [r7, #12]
 8005ea6:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 8005ea8:	68fb      	ldr	r3, [r7, #12]
 8005eaa:	88fa      	ldrh	r2, [r7, #6]
 8005eac:	859a      	strh	r2, [r3, #44]	@ 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005eae:	68fb      	ldr	r3, [r7, #12]
 8005eb0:	2200      	movs	r2, #0
 8005eb2:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005eb4:	68fb      	ldr	r3, [r7, #12]
 8005eb6:	2222      	movs	r2, #34	@ 0x22
 8005eb8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8005ebc:	68fb      	ldr	r3, [r7, #12]
 8005ebe:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005ec0:	4a3e      	ldr	r2, [pc, #248]	@ (8005fbc <UART_Start_Receive_DMA+0x128>)
 8005ec2:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8005ec4:	68fb      	ldr	r3, [r7, #12]
 8005ec6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005ec8:	4a3d      	ldr	r2, [pc, #244]	@ (8005fc0 <UART_Start_Receive_DMA+0x12c>)
 8005eca:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 8005ecc:	68fb      	ldr	r3, [r7, #12]
 8005ece:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005ed0:	4a3c      	ldr	r2, [pc, #240]	@ (8005fc4 <UART_Start_Receive_DMA+0x130>)
 8005ed2:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 8005ed4:	68fb      	ldr	r3, [r7, #12]
 8005ed6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005ed8:	2200      	movs	r2, #0
 8005eda:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 8005edc:	f107 0308 	add.w	r3, r7, #8
 8005ee0:	65fb      	str	r3, [r7, #92]	@ 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8005ee2:	68fb      	ldr	r3, [r7, #12]
 8005ee4:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 8005ee6:	68fb      	ldr	r3, [r7, #12]
 8005ee8:	681b      	ldr	r3, [r3, #0]
 8005eea:	3304      	adds	r3, #4
 8005eec:	4619      	mov	r1, r3
 8005eee:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005ef0:	681a      	ldr	r2, [r3, #0]
 8005ef2:	88fb      	ldrh	r3, [r7, #6]
 8005ef4:	f7fd f872 	bl	8002fdc <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 8005ef8:	2300      	movs	r3, #0
 8005efa:	613b      	str	r3, [r7, #16]
 8005efc:	68fb      	ldr	r3, [r7, #12]
 8005efe:	681b      	ldr	r3, [r3, #0]
 8005f00:	681b      	ldr	r3, [r3, #0]
 8005f02:	613b      	str	r3, [r7, #16]
 8005f04:	68fb      	ldr	r3, [r7, #12]
 8005f06:	681b      	ldr	r3, [r3, #0]
 8005f08:	685b      	ldr	r3, [r3, #4]
 8005f0a:	613b      	str	r3, [r7, #16]
 8005f0c:	693b      	ldr	r3, [r7, #16]

  if (huart->Init.Parity != UART_PARITY_NONE)
 8005f0e:	68fb      	ldr	r3, [r7, #12]
 8005f10:	691b      	ldr	r3, [r3, #16]
 8005f12:	2b00      	cmp	r3, #0
 8005f14:	d019      	beq.n	8005f4a <UART_Start_Receive_DMA+0xb6>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005f16:	68fb      	ldr	r3, [r7, #12]
 8005f18:	681b      	ldr	r3, [r3, #0]
 8005f1a:	330c      	adds	r3, #12
 8005f1c:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f1e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005f20:	e853 3f00 	ldrex	r3, [r3]
 8005f24:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8005f26:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005f28:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005f2c:	65bb      	str	r3, [r7, #88]	@ 0x58
 8005f2e:	68fb      	ldr	r3, [r7, #12]
 8005f30:	681b      	ldr	r3, [r3, #0]
 8005f32:	330c      	adds	r3, #12
 8005f34:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8005f36:	64fa      	str	r2, [r7, #76]	@ 0x4c
 8005f38:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f3a:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 8005f3c:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8005f3e:	e841 2300 	strex	r3, r2, [r1]
 8005f42:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 8005f44:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005f46:	2b00      	cmp	r3, #0
 8005f48:	d1e5      	bne.n	8005f16 <UART_Start_Receive_DMA+0x82>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005f4a:	68fb      	ldr	r3, [r7, #12]
 8005f4c:	681b      	ldr	r3, [r3, #0]
 8005f4e:	3314      	adds	r3, #20
 8005f50:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f52:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005f54:	e853 3f00 	ldrex	r3, [r3]
 8005f58:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8005f5a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005f5c:	f043 0301 	orr.w	r3, r3, #1
 8005f60:	657b      	str	r3, [r7, #84]	@ 0x54
 8005f62:	68fb      	ldr	r3, [r7, #12]
 8005f64:	681b      	ldr	r3, [r3, #0]
 8005f66:	3314      	adds	r3, #20
 8005f68:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8005f6a:	63ba      	str	r2, [r7, #56]	@ 0x38
 8005f6c:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f6e:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8005f70:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8005f72:	e841 2300 	strex	r3, r2, [r1]
 8005f76:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8005f78:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005f7a:	2b00      	cmp	r3, #0
 8005f7c:	d1e5      	bne.n	8005f4a <UART_Start_Receive_DMA+0xb6>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005f7e:	68fb      	ldr	r3, [r7, #12]
 8005f80:	681b      	ldr	r3, [r3, #0]
 8005f82:	3314      	adds	r3, #20
 8005f84:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f86:	69bb      	ldr	r3, [r7, #24]
 8005f88:	e853 3f00 	ldrex	r3, [r3]
 8005f8c:	617b      	str	r3, [r7, #20]
   return(result);
 8005f8e:	697b      	ldr	r3, [r7, #20]
 8005f90:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005f94:	653b      	str	r3, [r7, #80]	@ 0x50
 8005f96:	68fb      	ldr	r3, [r7, #12]
 8005f98:	681b      	ldr	r3, [r3, #0]
 8005f9a:	3314      	adds	r3, #20
 8005f9c:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8005f9e:	627a      	str	r2, [r7, #36]	@ 0x24
 8005fa0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005fa2:	6a39      	ldr	r1, [r7, #32]
 8005fa4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005fa6:	e841 2300 	strex	r3, r2, [r1]
 8005faa:	61fb      	str	r3, [r7, #28]
   return(result);
 8005fac:	69fb      	ldr	r3, [r7, #28]
 8005fae:	2b00      	cmp	r3, #0
 8005fb0:	d1e5      	bne.n	8005f7e <UART_Start_Receive_DMA+0xea>

  return HAL_OK;
 8005fb2:	2300      	movs	r3, #0
}
 8005fb4:	4618      	mov	r0, r3
 8005fb6:	3760      	adds	r7, #96	@ 0x60
 8005fb8:	46bd      	mov	sp, r7
 8005fba:	bd80      	pop	{r7, pc}
 8005fbc:	08005c97 	.word	0x08005c97
 8005fc0:	08005dc3 	.word	0x08005dc3
 8005fc4:	08005dff 	.word	0x08005dff

08005fc8 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8005fc8:	b480      	push	{r7}
 8005fca:	b089      	sub	sp, #36	@ 0x24
 8005fcc:	af00      	add	r7, sp, #0
 8005fce:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	681b      	ldr	r3, [r3, #0]
 8005fd4:	330c      	adds	r3, #12
 8005fd6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005fd8:	68fb      	ldr	r3, [r7, #12]
 8005fda:	e853 3f00 	ldrex	r3, [r3]
 8005fde:	60bb      	str	r3, [r7, #8]
   return(result);
 8005fe0:	68bb      	ldr	r3, [r7, #8]
 8005fe2:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8005fe6:	61fb      	str	r3, [r7, #28]
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	681b      	ldr	r3, [r3, #0]
 8005fec:	330c      	adds	r3, #12
 8005fee:	69fa      	ldr	r2, [r7, #28]
 8005ff0:	61ba      	str	r2, [r7, #24]
 8005ff2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ff4:	6979      	ldr	r1, [r7, #20]
 8005ff6:	69ba      	ldr	r2, [r7, #24]
 8005ff8:	e841 2300 	strex	r3, r2, [r1]
 8005ffc:	613b      	str	r3, [r7, #16]
   return(result);
 8005ffe:	693b      	ldr	r3, [r7, #16]
 8006000:	2b00      	cmp	r3, #0
 8006002:	d1e5      	bne.n	8005fd0 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	2220      	movs	r2, #32
 8006008:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
}
 800600c:	bf00      	nop
 800600e:	3724      	adds	r7, #36	@ 0x24
 8006010:	46bd      	mov	sp, r7
 8006012:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006016:	4770      	bx	lr

08006018 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006018:	b480      	push	{r7}
 800601a:	b095      	sub	sp, #84	@ 0x54
 800601c:	af00      	add	r7, sp, #0
 800601e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	681b      	ldr	r3, [r3, #0]
 8006024:	330c      	adds	r3, #12
 8006026:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006028:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800602a:	e853 3f00 	ldrex	r3, [r3]
 800602e:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8006030:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006032:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006036:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	681b      	ldr	r3, [r3, #0]
 800603c:	330c      	adds	r3, #12
 800603e:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8006040:	643a      	str	r2, [r7, #64]	@ 0x40
 8006042:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006044:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8006046:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8006048:	e841 2300 	strex	r3, r2, [r1]
 800604c:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800604e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006050:	2b00      	cmp	r3, #0
 8006052:	d1e5      	bne.n	8006020 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	681b      	ldr	r3, [r3, #0]
 8006058:	3314      	adds	r3, #20
 800605a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800605c:	6a3b      	ldr	r3, [r7, #32]
 800605e:	e853 3f00 	ldrex	r3, [r3]
 8006062:	61fb      	str	r3, [r7, #28]
   return(result);
 8006064:	69fb      	ldr	r3, [r7, #28]
 8006066:	f023 0301 	bic.w	r3, r3, #1
 800606a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	681b      	ldr	r3, [r3, #0]
 8006070:	3314      	adds	r3, #20
 8006072:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006074:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8006076:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006078:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800607a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800607c:	e841 2300 	strex	r3, r2, [r1]
 8006080:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8006082:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006084:	2b00      	cmp	r3, #0
 8006086:	d1e5      	bne.n	8006054 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800608c:	2b01      	cmp	r3, #1
 800608e:	d119      	bne.n	80060c4 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	681b      	ldr	r3, [r3, #0]
 8006094:	330c      	adds	r3, #12
 8006096:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006098:	68fb      	ldr	r3, [r7, #12]
 800609a:	e853 3f00 	ldrex	r3, [r3]
 800609e:	60bb      	str	r3, [r7, #8]
   return(result);
 80060a0:	68bb      	ldr	r3, [r7, #8]
 80060a2:	f023 0310 	bic.w	r3, r3, #16
 80060a6:	647b      	str	r3, [r7, #68]	@ 0x44
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	681b      	ldr	r3, [r3, #0]
 80060ac:	330c      	adds	r3, #12
 80060ae:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80060b0:	61ba      	str	r2, [r7, #24]
 80060b2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80060b4:	6979      	ldr	r1, [r7, #20]
 80060b6:	69ba      	ldr	r2, [r7, #24]
 80060b8:	e841 2300 	strex	r3, r2, [r1]
 80060bc:	613b      	str	r3, [r7, #16]
   return(result);
 80060be:	693b      	ldr	r3, [r7, #16]
 80060c0:	2b00      	cmp	r3, #0
 80060c2:	d1e5      	bne.n	8006090 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	2220      	movs	r2, #32
 80060c8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	2200      	movs	r2, #0
 80060d0:	631a      	str	r2, [r3, #48]	@ 0x30
}
 80060d2:	bf00      	nop
 80060d4:	3754      	adds	r7, #84	@ 0x54
 80060d6:	46bd      	mov	sp, r7
 80060d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060dc:	4770      	bx	lr

080060de <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80060de:	b580      	push	{r7, lr}
 80060e0:	b084      	sub	sp, #16
 80060e2:	af00      	add	r7, sp, #0
 80060e4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80060ea:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80060ec:	68fb      	ldr	r3, [r7, #12]
 80060ee:	2200      	movs	r2, #0
 80060f0:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 80060f2:	68fb      	ldr	r3, [r7, #12]
 80060f4:	2200      	movs	r2, #0
 80060f6:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80060f8:	68f8      	ldr	r0, [r7, #12]
 80060fa:	f7ff fd5b 	bl	8005bb4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80060fe:	bf00      	nop
 8006100:	3710      	adds	r7, #16
 8006102:	46bd      	mov	sp, r7
 8006104:	bd80      	pop	{r7, pc}

08006106 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8006106:	b480      	push	{r7}
 8006108:	b085      	sub	sp, #20
 800610a:	af00      	add	r7, sp, #0
 800610c:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006114:	b2db      	uxtb	r3, r3
 8006116:	2b21      	cmp	r3, #33	@ 0x21
 8006118:	d13e      	bne.n	8006198 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	689b      	ldr	r3, [r3, #8]
 800611e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006122:	d114      	bne.n	800614e <UART_Transmit_IT+0x48>
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	691b      	ldr	r3, [r3, #16]
 8006128:	2b00      	cmp	r3, #0
 800612a:	d110      	bne.n	800614e <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	6a1b      	ldr	r3, [r3, #32]
 8006130:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8006132:	68fb      	ldr	r3, [r7, #12]
 8006134:	881b      	ldrh	r3, [r3, #0]
 8006136:	461a      	mov	r2, r3
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	681b      	ldr	r3, [r3, #0]
 800613c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006140:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	6a1b      	ldr	r3, [r3, #32]
 8006146:	1c9a      	adds	r2, r3, #2
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	621a      	str	r2, [r3, #32]
 800614c:	e008      	b.n	8006160 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	6a1b      	ldr	r3, [r3, #32]
 8006152:	1c59      	adds	r1, r3, #1
 8006154:	687a      	ldr	r2, [r7, #4]
 8006156:	6211      	str	r1, [r2, #32]
 8006158:	781a      	ldrb	r2, [r3, #0]
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	681b      	ldr	r3, [r3, #0]
 800615e:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8006164:	b29b      	uxth	r3, r3
 8006166:	3b01      	subs	r3, #1
 8006168:	b29b      	uxth	r3, r3
 800616a:	687a      	ldr	r2, [r7, #4]
 800616c:	4619      	mov	r1, r3
 800616e:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8006170:	2b00      	cmp	r3, #0
 8006172:	d10f      	bne.n	8006194 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	681b      	ldr	r3, [r3, #0]
 8006178:	68da      	ldr	r2, [r3, #12]
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	681b      	ldr	r3, [r3, #0]
 800617e:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8006182:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	681b      	ldr	r3, [r3, #0]
 8006188:	68da      	ldr	r2, [r3, #12]
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	681b      	ldr	r3, [r3, #0]
 800618e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8006192:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8006194:	2300      	movs	r3, #0
 8006196:	e000      	b.n	800619a <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8006198:	2302      	movs	r3, #2
  }
}
 800619a:	4618      	mov	r0, r3
 800619c:	3714      	adds	r7, #20
 800619e:	46bd      	mov	sp, r7
 80061a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061a4:	4770      	bx	lr

080061a6 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80061a6:	b580      	push	{r7, lr}
 80061a8:	b082      	sub	sp, #8
 80061aa:	af00      	add	r7, sp, #0
 80061ac:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	681b      	ldr	r3, [r3, #0]
 80061b2:	68da      	ldr	r2, [r3, #12]
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	681b      	ldr	r3, [r3, #0]
 80061b8:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80061bc:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	2220      	movs	r2, #32
 80061c2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80061c6:	6878      	ldr	r0, [r7, #4]
 80061c8:	f7ff fccc 	bl	8005b64 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80061cc:	2300      	movs	r3, #0
}
 80061ce:	4618      	mov	r0, r3
 80061d0:	3708      	adds	r7, #8
 80061d2:	46bd      	mov	sp, r7
 80061d4:	bd80      	pop	{r7, pc}

080061d6 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80061d6:	b580      	push	{r7, lr}
 80061d8:	b08c      	sub	sp, #48	@ 0x30
 80061da:	af00      	add	r7, sp, #0
 80061dc:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80061e4:	b2db      	uxtb	r3, r3
 80061e6:	2b22      	cmp	r3, #34	@ 0x22
 80061e8:	f040 80ae 	bne.w	8006348 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	689b      	ldr	r3, [r3, #8]
 80061f0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80061f4:	d117      	bne.n	8006226 <UART_Receive_IT+0x50>
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	691b      	ldr	r3, [r3, #16]
 80061fa:	2b00      	cmp	r3, #0
 80061fc:	d113      	bne.n	8006226 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80061fe:	2300      	movs	r3, #0
 8006200:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006206:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	681b      	ldr	r3, [r3, #0]
 800620c:	685b      	ldr	r3, [r3, #4]
 800620e:	b29b      	uxth	r3, r3
 8006210:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006214:	b29a      	uxth	r2, r3
 8006216:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006218:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800621e:	1c9a      	adds	r2, r3, #2
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	629a      	str	r2, [r3, #40]	@ 0x28
 8006224:	e026      	b.n	8006274 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800622a:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 800622c:	2300      	movs	r3, #0
 800622e:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	689b      	ldr	r3, [r3, #8]
 8006234:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006238:	d007      	beq.n	800624a <UART_Receive_IT+0x74>
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	689b      	ldr	r3, [r3, #8]
 800623e:	2b00      	cmp	r3, #0
 8006240:	d10a      	bne.n	8006258 <UART_Receive_IT+0x82>
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	691b      	ldr	r3, [r3, #16]
 8006246:	2b00      	cmp	r3, #0
 8006248:	d106      	bne.n	8006258 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	681b      	ldr	r3, [r3, #0]
 800624e:	685b      	ldr	r3, [r3, #4]
 8006250:	b2da      	uxtb	r2, r3
 8006252:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006254:	701a      	strb	r2, [r3, #0]
 8006256:	e008      	b.n	800626a <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	681b      	ldr	r3, [r3, #0]
 800625c:	685b      	ldr	r3, [r3, #4]
 800625e:	b2db      	uxtb	r3, r3
 8006260:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006264:	b2da      	uxtb	r2, r3
 8006266:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006268:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800626e:	1c5a      	adds	r2, r3, #1
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8006278:	b29b      	uxth	r3, r3
 800627a:	3b01      	subs	r3, #1
 800627c:	b29b      	uxth	r3, r3
 800627e:	687a      	ldr	r2, [r7, #4]
 8006280:	4619      	mov	r1, r3
 8006282:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8006284:	2b00      	cmp	r3, #0
 8006286:	d15d      	bne.n	8006344 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	681b      	ldr	r3, [r3, #0]
 800628c:	68da      	ldr	r2, [r3, #12]
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	681b      	ldr	r3, [r3, #0]
 8006292:	f022 0220 	bic.w	r2, r2, #32
 8006296:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	681b      	ldr	r3, [r3, #0]
 800629c:	68da      	ldr	r2, [r3, #12]
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	681b      	ldr	r3, [r3, #0]
 80062a2:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80062a6:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	681b      	ldr	r3, [r3, #0]
 80062ac:	695a      	ldr	r2, [r3, #20]
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	681b      	ldr	r3, [r3, #0]
 80062b2:	f022 0201 	bic.w	r2, r2, #1
 80062b6:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	2220      	movs	r2, #32
 80062bc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	2200      	movs	r2, #0
 80062c4:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80062ca:	2b01      	cmp	r3, #1
 80062cc:	d135      	bne.n	800633a <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	2200      	movs	r2, #0
 80062d2:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	681b      	ldr	r3, [r3, #0]
 80062d8:	330c      	adds	r3, #12
 80062da:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80062dc:	697b      	ldr	r3, [r7, #20]
 80062de:	e853 3f00 	ldrex	r3, [r3]
 80062e2:	613b      	str	r3, [r7, #16]
   return(result);
 80062e4:	693b      	ldr	r3, [r7, #16]
 80062e6:	f023 0310 	bic.w	r3, r3, #16
 80062ea:	627b      	str	r3, [r7, #36]	@ 0x24
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	681b      	ldr	r3, [r3, #0]
 80062f0:	330c      	adds	r3, #12
 80062f2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80062f4:	623a      	str	r2, [r7, #32]
 80062f6:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80062f8:	69f9      	ldr	r1, [r7, #28]
 80062fa:	6a3a      	ldr	r2, [r7, #32]
 80062fc:	e841 2300 	strex	r3, r2, [r1]
 8006300:	61bb      	str	r3, [r7, #24]
   return(result);
 8006302:	69bb      	ldr	r3, [r7, #24]
 8006304:	2b00      	cmp	r3, #0
 8006306:	d1e5      	bne.n	80062d4 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	681b      	ldr	r3, [r3, #0]
 800630c:	681b      	ldr	r3, [r3, #0]
 800630e:	f003 0310 	and.w	r3, r3, #16
 8006312:	2b10      	cmp	r3, #16
 8006314:	d10a      	bne.n	800632c <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8006316:	2300      	movs	r3, #0
 8006318:	60fb      	str	r3, [r7, #12]
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	681b      	ldr	r3, [r3, #0]
 800631e:	681b      	ldr	r3, [r3, #0]
 8006320:	60fb      	str	r3, [r7, #12]
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	681b      	ldr	r3, [r3, #0]
 8006326:	685b      	ldr	r3, [r3, #4]
 8006328:	60fb      	str	r3, [r7, #12]
 800632a:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8006330:	4619      	mov	r1, r3
 8006332:	6878      	ldr	r0, [r7, #4]
 8006334:	f7ff fc48 	bl	8005bc8 <HAL_UARTEx_RxEventCallback>
 8006338:	e002      	b.n	8006340 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800633a:	6878      	ldr	r0, [r7, #4]
 800633c:	f7ff fc26 	bl	8005b8c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8006340:	2300      	movs	r3, #0
 8006342:	e002      	b.n	800634a <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8006344:	2300      	movs	r3, #0
 8006346:	e000      	b.n	800634a <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8006348:	2302      	movs	r3, #2
  }
}
 800634a:	4618      	mov	r0, r3
 800634c:	3730      	adds	r7, #48	@ 0x30
 800634e:	46bd      	mov	sp, r7
 8006350:	bd80      	pop	{r7, pc}
	...

08006354 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006354:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006358:	b0c0      	sub	sp, #256	@ 0x100
 800635a:	af00      	add	r7, sp, #0
 800635c:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006360:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006364:	681b      	ldr	r3, [r3, #0]
 8006366:	691b      	ldr	r3, [r3, #16]
 8006368:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 800636c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006370:	68d9      	ldr	r1, [r3, #12]
 8006372:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006376:	681a      	ldr	r2, [r3, #0]
 8006378:	ea40 0301 	orr.w	r3, r0, r1
 800637c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800637e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006382:	689a      	ldr	r2, [r3, #8]
 8006384:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006388:	691b      	ldr	r3, [r3, #16]
 800638a:	431a      	orrs	r2, r3
 800638c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006390:	695b      	ldr	r3, [r3, #20]
 8006392:	431a      	orrs	r2, r3
 8006394:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006398:	69db      	ldr	r3, [r3, #28]
 800639a:	4313      	orrs	r3, r2
 800639c:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80063a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80063a4:	681b      	ldr	r3, [r3, #0]
 80063a6:	68db      	ldr	r3, [r3, #12]
 80063a8:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 80063ac:	f021 010c 	bic.w	r1, r1, #12
 80063b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80063b4:	681a      	ldr	r2, [r3, #0]
 80063b6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80063ba:	430b      	orrs	r3, r1
 80063bc:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80063be:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80063c2:	681b      	ldr	r3, [r3, #0]
 80063c4:	695b      	ldr	r3, [r3, #20]
 80063c6:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 80063ca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80063ce:	6999      	ldr	r1, [r3, #24]
 80063d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80063d4:	681a      	ldr	r2, [r3, #0]
 80063d6:	ea40 0301 	orr.w	r3, r0, r1
 80063da:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80063dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80063e0:	681a      	ldr	r2, [r3, #0]
 80063e2:	4b8f      	ldr	r3, [pc, #572]	@ (8006620 <UART_SetConfig+0x2cc>)
 80063e4:	429a      	cmp	r2, r3
 80063e6:	d005      	beq.n	80063f4 <UART_SetConfig+0xa0>
 80063e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80063ec:	681a      	ldr	r2, [r3, #0]
 80063ee:	4b8d      	ldr	r3, [pc, #564]	@ (8006624 <UART_SetConfig+0x2d0>)
 80063f0:	429a      	cmp	r2, r3
 80063f2:	d104      	bne.n	80063fe <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80063f4:	f7fd ff68 	bl	80042c8 <HAL_RCC_GetPCLK2Freq>
 80063f8:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 80063fc:	e003      	b.n	8006406 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80063fe:	f7fd ff4f 	bl	80042a0 <HAL_RCC_GetPCLK1Freq>
 8006402:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006406:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800640a:	69db      	ldr	r3, [r3, #28]
 800640c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006410:	f040 810c 	bne.w	800662c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8006414:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006418:	2200      	movs	r2, #0
 800641a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800641e:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8006422:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8006426:	4622      	mov	r2, r4
 8006428:	462b      	mov	r3, r5
 800642a:	1891      	adds	r1, r2, r2
 800642c:	65b9      	str	r1, [r7, #88]	@ 0x58
 800642e:	415b      	adcs	r3, r3
 8006430:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8006432:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8006436:	4621      	mov	r1, r4
 8006438:	eb12 0801 	adds.w	r8, r2, r1
 800643c:	4629      	mov	r1, r5
 800643e:	eb43 0901 	adc.w	r9, r3, r1
 8006442:	f04f 0200 	mov.w	r2, #0
 8006446:	f04f 0300 	mov.w	r3, #0
 800644a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800644e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8006452:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8006456:	4690      	mov	r8, r2
 8006458:	4699      	mov	r9, r3
 800645a:	4623      	mov	r3, r4
 800645c:	eb18 0303 	adds.w	r3, r8, r3
 8006460:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8006464:	462b      	mov	r3, r5
 8006466:	eb49 0303 	adc.w	r3, r9, r3
 800646a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800646e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006472:	685b      	ldr	r3, [r3, #4]
 8006474:	2200      	movs	r2, #0
 8006476:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800647a:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 800647e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8006482:	460b      	mov	r3, r1
 8006484:	18db      	adds	r3, r3, r3
 8006486:	653b      	str	r3, [r7, #80]	@ 0x50
 8006488:	4613      	mov	r3, r2
 800648a:	eb42 0303 	adc.w	r3, r2, r3
 800648e:	657b      	str	r3, [r7, #84]	@ 0x54
 8006490:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8006494:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8006498:	f7fa fb48 	bl	8000b2c <__aeabi_uldivmod>
 800649c:	4602      	mov	r2, r0
 800649e:	460b      	mov	r3, r1
 80064a0:	4b61      	ldr	r3, [pc, #388]	@ (8006628 <UART_SetConfig+0x2d4>)
 80064a2:	fba3 2302 	umull	r2, r3, r3, r2
 80064a6:	095b      	lsrs	r3, r3, #5
 80064a8:	011c      	lsls	r4, r3, #4
 80064aa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80064ae:	2200      	movs	r2, #0
 80064b0:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80064b4:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 80064b8:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 80064bc:	4642      	mov	r2, r8
 80064be:	464b      	mov	r3, r9
 80064c0:	1891      	adds	r1, r2, r2
 80064c2:	64b9      	str	r1, [r7, #72]	@ 0x48
 80064c4:	415b      	adcs	r3, r3
 80064c6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80064c8:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 80064cc:	4641      	mov	r1, r8
 80064ce:	eb12 0a01 	adds.w	sl, r2, r1
 80064d2:	4649      	mov	r1, r9
 80064d4:	eb43 0b01 	adc.w	fp, r3, r1
 80064d8:	f04f 0200 	mov.w	r2, #0
 80064dc:	f04f 0300 	mov.w	r3, #0
 80064e0:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80064e4:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80064e8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80064ec:	4692      	mov	sl, r2
 80064ee:	469b      	mov	fp, r3
 80064f0:	4643      	mov	r3, r8
 80064f2:	eb1a 0303 	adds.w	r3, sl, r3
 80064f6:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80064fa:	464b      	mov	r3, r9
 80064fc:	eb4b 0303 	adc.w	r3, fp, r3
 8006500:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8006504:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006508:	685b      	ldr	r3, [r3, #4]
 800650a:	2200      	movs	r2, #0
 800650c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8006510:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8006514:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8006518:	460b      	mov	r3, r1
 800651a:	18db      	adds	r3, r3, r3
 800651c:	643b      	str	r3, [r7, #64]	@ 0x40
 800651e:	4613      	mov	r3, r2
 8006520:	eb42 0303 	adc.w	r3, r2, r3
 8006524:	647b      	str	r3, [r7, #68]	@ 0x44
 8006526:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 800652a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 800652e:	f7fa fafd 	bl	8000b2c <__aeabi_uldivmod>
 8006532:	4602      	mov	r2, r0
 8006534:	460b      	mov	r3, r1
 8006536:	4611      	mov	r1, r2
 8006538:	4b3b      	ldr	r3, [pc, #236]	@ (8006628 <UART_SetConfig+0x2d4>)
 800653a:	fba3 2301 	umull	r2, r3, r3, r1
 800653e:	095b      	lsrs	r3, r3, #5
 8006540:	2264      	movs	r2, #100	@ 0x64
 8006542:	fb02 f303 	mul.w	r3, r2, r3
 8006546:	1acb      	subs	r3, r1, r3
 8006548:	00db      	lsls	r3, r3, #3
 800654a:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 800654e:	4b36      	ldr	r3, [pc, #216]	@ (8006628 <UART_SetConfig+0x2d4>)
 8006550:	fba3 2302 	umull	r2, r3, r3, r2
 8006554:	095b      	lsrs	r3, r3, #5
 8006556:	005b      	lsls	r3, r3, #1
 8006558:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 800655c:	441c      	add	r4, r3
 800655e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006562:	2200      	movs	r2, #0
 8006564:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8006568:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 800656c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8006570:	4642      	mov	r2, r8
 8006572:	464b      	mov	r3, r9
 8006574:	1891      	adds	r1, r2, r2
 8006576:	63b9      	str	r1, [r7, #56]	@ 0x38
 8006578:	415b      	adcs	r3, r3
 800657a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800657c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8006580:	4641      	mov	r1, r8
 8006582:	1851      	adds	r1, r2, r1
 8006584:	6339      	str	r1, [r7, #48]	@ 0x30
 8006586:	4649      	mov	r1, r9
 8006588:	414b      	adcs	r3, r1
 800658a:	637b      	str	r3, [r7, #52]	@ 0x34
 800658c:	f04f 0200 	mov.w	r2, #0
 8006590:	f04f 0300 	mov.w	r3, #0
 8006594:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8006598:	4659      	mov	r1, fp
 800659a:	00cb      	lsls	r3, r1, #3
 800659c:	4651      	mov	r1, sl
 800659e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80065a2:	4651      	mov	r1, sl
 80065a4:	00ca      	lsls	r2, r1, #3
 80065a6:	4610      	mov	r0, r2
 80065a8:	4619      	mov	r1, r3
 80065aa:	4603      	mov	r3, r0
 80065ac:	4642      	mov	r2, r8
 80065ae:	189b      	adds	r3, r3, r2
 80065b0:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80065b4:	464b      	mov	r3, r9
 80065b6:	460a      	mov	r2, r1
 80065b8:	eb42 0303 	adc.w	r3, r2, r3
 80065bc:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80065c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80065c4:	685b      	ldr	r3, [r3, #4]
 80065c6:	2200      	movs	r2, #0
 80065c8:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80065cc:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 80065d0:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 80065d4:	460b      	mov	r3, r1
 80065d6:	18db      	adds	r3, r3, r3
 80065d8:	62bb      	str	r3, [r7, #40]	@ 0x28
 80065da:	4613      	mov	r3, r2
 80065dc:	eb42 0303 	adc.w	r3, r2, r3
 80065e0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80065e2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80065e6:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 80065ea:	f7fa fa9f 	bl	8000b2c <__aeabi_uldivmod>
 80065ee:	4602      	mov	r2, r0
 80065f0:	460b      	mov	r3, r1
 80065f2:	4b0d      	ldr	r3, [pc, #52]	@ (8006628 <UART_SetConfig+0x2d4>)
 80065f4:	fba3 1302 	umull	r1, r3, r3, r2
 80065f8:	095b      	lsrs	r3, r3, #5
 80065fa:	2164      	movs	r1, #100	@ 0x64
 80065fc:	fb01 f303 	mul.w	r3, r1, r3
 8006600:	1ad3      	subs	r3, r2, r3
 8006602:	00db      	lsls	r3, r3, #3
 8006604:	3332      	adds	r3, #50	@ 0x32
 8006606:	4a08      	ldr	r2, [pc, #32]	@ (8006628 <UART_SetConfig+0x2d4>)
 8006608:	fba2 2303 	umull	r2, r3, r2, r3
 800660c:	095b      	lsrs	r3, r3, #5
 800660e:	f003 0207 	and.w	r2, r3, #7
 8006612:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006616:	681b      	ldr	r3, [r3, #0]
 8006618:	4422      	add	r2, r4
 800661a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800661c:	e106      	b.n	800682c <UART_SetConfig+0x4d8>
 800661e:	bf00      	nop
 8006620:	40011000 	.word	0x40011000
 8006624:	40011400 	.word	0x40011400
 8006628:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800662c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006630:	2200      	movs	r2, #0
 8006632:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8006636:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 800663a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 800663e:	4642      	mov	r2, r8
 8006640:	464b      	mov	r3, r9
 8006642:	1891      	adds	r1, r2, r2
 8006644:	6239      	str	r1, [r7, #32]
 8006646:	415b      	adcs	r3, r3
 8006648:	627b      	str	r3, [r7, #36]	@ 0x24
 800664a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800664e:	4641      	mov	r1, r8
 8006650:	1854      	adds	r4, r2, r1
 8006652:	4649      	mov	r1, r9
 8006654:	eb43 0501 	adc.w	r5, r3, r1
 8006658:	f04f 0200 	mov.w	r2, #0
 800665c:	f04f 0300 	mov.w	r3, #0
 8006660:	00eb      	lsls	r3, r5, #3
 8006662:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8006666:	00e2      	lsls	r2, r4, #3
 8006668:	4614      	mov	r4, r2
 800666a:	461d      	mov	r5, r3
 800666c:	4643      	mov	r3, r8
 800666e:	18e3      	adds	r3, r4, r3
 8006670:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8006674:	464b      	mov	r3, r9
 8006676:	eb45 0303 	adc.w	r3, r5, r3
 800667a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800667e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006682:	685b      	ldr	r3, [r3, #4]
 8006684:	2200      	movs	r2, #0
 8006686:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800668a:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800668e:	f04f 0200 	mov.w	r2, #0
 8006692:	f04f 0300 	mov.w	r3, #0
 8006696:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 800669a:	4629      	mov	r1, r5
 800669c:	008b      	lsls	r3, r1, #2
 800669e:	4621      	mov	r1, r4
 80066a0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80066a4:	4621      	mov	r1, r4
 80066a6:	008a      	lsls	r2, r1, #2
 80066a8:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 80066ac:	f7fa fa3e 	bl	8000b2c <__aeabi_uldivmod>
 80066b0:	4602      	mov	r2, r0
 80066b2:	460b      	mov	r3, r1
 80066b4:	4b60      	ldr	r3, [pc, #384]	@ (8006838 <UART_SetConfig+0x4e4>)
 80066b6:	fba3 2302 	umull	r2, r3, r3, r2
 80066ba:	095b      	lsrs	r3, r3, #5
 80066bc:	011c      	lsls	r4, r3, #4
 80066be:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80066c2:	2200      	movs	r2, #0
 80066c4:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80066c8:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 80066cc:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 80066d0:	4642      	mov	r2, r8
 80066d2:	464b      	mov	r3, r9
 80066d4:	1891      	adds	r1, r2, r2
 80066d6:	61b9      	str	r1, [r7, #24]
 80066d8:	415b      	adcs	r3, r3
 80066da:	61fb      	str	r3, [r7, #28]
 80066dc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80066e0:	4641      	mov	r1, r8
 80066e2:	1851      	adds	r1, r2, r1
 80066e4:	6139      	str	r1, [r7, #16]
 80066e6:	4649      	mov	r1, r9
 80066e8:	414b      	adcs	r3, r1
 80066ea:	617b      	str	r3, [r7, #20]
 80066ec:	f04f 0200 	mov.w	r2, #0
 80066f0:	f04f 0300 	mov.w	r3, #0
 80066f4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80066f8:	4659      	mov	r1, fp
 80066fa:	00cb      	lsls	r3, r1, #3
 80066fc:	4651      	mov	r1, sl
 80066fe:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006702:	4651      	mov	r1, sl
 8006704:	00ca      	lsls	r2, r1, #3
 8006706:	4610      	mov	r0, r2
 8006708:	4619      	mov	r1, r3
 800670a:	4603      	mov	r3, r0
 800670c:	4642      	mov	r2, r8
 800670e:	189b      	adds	r3, r3, r2
 8006710:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8006714:	464b      	mov	r3, r9
 8006716:	460a      	mov	r2, r1
 8006718:	eb42 0303 	adc.w	r3, r2, r3
 800671c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8006720:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006724:	685b      	ldr	r3, [r3, #4]
 8006726:	2200      	movs	r2, #0
 8006728:	67bb      	str	r3, [r7, #120]	@ 0x78
 800672a:	67fa      	str	r2, [r7, #124]	@ 0x7c
 800672c:	f04f 0200 	mov.w	r2, #0
 8006730:	f04f 0300 	mov.w	r3, #0
 8006734:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8006738:	4649      	mov	r1, r9
 800673a:	008b      	lsls	r3, r1, #2
 800673c:	4641      	mov	r1, r8
 800673e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006742:	4641      	mov	r1, r8
 8006744:	008a      	lsls	r2, r1, #2
 8006746:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 800674a:	f7fa f9ef 	bl	8000b2c <__aeabi_uldivmod>
 800674e:	4602      	mov	r2, r0
 8006750:	460b      	mov	r3, r1
 8006752:	4611      	mov	r1, r2
 8006754:	4b38      	ldr	r3, [pc, #224]	@ (8006838 <UART_SetConfig+0x4e4>)
 8006756:	fba3 2301 	umull	r2, r3, r3, r1
 800675a:	095b      	lsrs	r3, r3, #5
 800675c:	2264      	movs	r2, #100	@ 0x64
 800675e:	fb02 f303 	mul.w	r3, r2, r3
 8006762:	1acb      	subs	r3, r1, r3
 8006764:	011b      	lsls	r3, r3, #4
 8006766:	3332      	adds	r3, #50	@ 0x32
 8006768:	4a33      	ldr	r2, [pc, #204]	@ (8006838 <UART_SetConfig+0x4e4>)
 800676a:	fba2 2303 	umull	r2, r3, r2, r3
 800676e:	095b      	lsrs	r3, r3, #5
 8006770:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8006774:	441c      	add	r4, r3
 8006776:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800677a:	2200      	movs	r2, #0
 800677c:	673b      	str	r3, [r7, #112]	@ 0x70
 800677e:	677a      	str	r2, [r7, #116]	@ 0x74
 8006780:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8006784:	4642      	mov	r2, r8
 8006786:	464b      	mov	r3, r9
 8006788:	1891      	adds	r1, r2, r2
 800678a:	60b9      	str	r1, [r7, #8]
 800678c:	415b      	adcs	r3, r3
 800678e:	60fb      	str	r3, [r7, #12]
 8006790:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8006794:	4641      	mov	r1, r8
 8006796:	1851      	adds	r1, r2, r1
 8006798:	6039      	str	r1, [r7, #0]
 800679a:	4649      	mov	r1, r9
 800679c:	414b      	adcs	r3, r1
 800679e:	607b      	str	r3, [r7, #4]
 80067a0:	f04f 0200 	mov.w	r2, #0
 80067a4:	f04f 0300 	mov.w	r3, #0
 80067a8:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80067ac:	4659      	mov	r1, fp
 80067ae:	00cb      	lsls	r3, r1, #3
 80067b0:	4651      	mov	r1, sl
 80067b2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80067b6:	4651      	mov	r1, sl
 80067b8:	00ca      	lsls	r2, r1, #3
 80067ba:	4610      	mov	r0, r2
 80067bc:	4619      	mov	r1, r3
 80067be:	4603      	mov	r3, r0
 80067c0:	4642      	mov	r2, r8
 80067c2:	189b      	adds	r3, r3, r2
 80067c4:	66bb      	str	r3, [r7, #104]	@ 0x68
 80067c6:	464b      	mov	r3, r9
 80067c8:	460a      	mov	r2, r1
 80067ca:	eb42 0303 	adc.w	r3, r2, r3
 80067ce:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80067d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80067d4:	685b      	ldr	r3, [r3, #4]
 80067d6:	2200      	movs	r2, #0
 80067d8:	663b      	str	r3, [r7, #96]	@ 0x60
 80067da:	667a      	str	r2, [r7, #100]	@ 0x64
 80067dc:	f04f 0200 	mov.w	r2, #0
 80067e0:	f04f 0300 	mov.w	r3, #0
 80067e4:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 80067e8:	4649      	mov	r1, r9
 80067ea:	008b      	lsls	r3, r1, #2
 80067ec:	4641      	mov	r1, r8
 80067ee:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80067f2:	4641      	mov	r1, r8
 80067f4:	008a      	lsls	r2, r1, #2
 80067f6:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 80067fa:	f7fa f997 	bl	8000b2c <__aeabi_uldivmod>
 80067fe:	4602      	mov	r2, r0
 8006800:	460b      	mov	r3, r1
 8006802:	4b0d      	ldr	r3, [pc, #52]	@ (8006838 <UART_SetConfig+0x4e4>)
 8006804:	fba3 1302 	umull	r1, r3, r3, r2
 8006808:	095b      	lsrs	r3, r3, #5
 800680a:	2164      	movs	r1, #100	@ 0x64
 800680c:	fb01 f303 	mul.w	r3, r1, r3
 8006810:	1ad3      	subs	r3, r2, r3
 8006812:	011b      	lsls	r3, r3, #4
 8006814:	3332      	adds	r3, #50	@ 0x32
 8006816:	4a08      	ldr	r2, [pc, #32]	@ (8006838 <UART_SetConfig+0x4e4>)
 8006818:	fba2 2303 	umull	r2, r3, r2, r3
 800681c:	095b      	lsrs	r3, r3, #5
 800681e:	f003 020f 	and.w	r2, r3, #15
 8006822:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006826:	681b      	ldr	r3, [r3, #0]
 8006828:	4422      	add	r2, r4
 800682a:	609a      	str	r2, [r3, #8]
}
 800682c:	bf00      	nop
 800682e:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8006832:	46bd      	mov	sp, r7
 8006834:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006838:	51eb851f 	.word	0x51eb851f

0800683c <__NVIC_SetPriority>:
{
 800683c:	b480      	push	{r7}
 800683e:	b083      	sub	sp, #12
 8006840:	af00      	add	r7, sp, #0
 8006842:	4603      	mov	r3, r0
 8006844:	6039      	str	r1, [r7, #0]
 8006846:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006848:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800684c:	2b00      	cmp	r3, #0
 800684e:	db0a      	blt.n	8006866 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006850:	683b      	ldr	r3, [r7, #0]
 8006852:	b2da      	uxtb	r2, r3
 8006854:	490c      	ldr	r1, [pc, #48]	@ (8006888 <__NVIC_SetPriority+0x4c>)
 8006856:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800685a:	0112      	lsls	r2, r2, #4
 800685c:	b2d2      	uxtb	r2, r2
 800685e:	440b      	add	r3, r1
 8006860:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8006864:	e00a      	b.n	800687c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006866:	683b      	ldr	r3, [r7, #0]
 8006868:	b2da      	uxtb	r2, r3
 800686a:	4908      	ldr	r1, [pc, #32]	@ (800688c <__NVIC_SetPriority+0x50>)
 800686c:	79fb      	ldrb	r3, [r7, #7]
 800686e:	f003 030f 	and.w	r3, r3, #15
 8006872:	3b04      	subs	r3, #4
 8006874:	0112      	lsls	r2, r2, #4
 8006876:	b2d2      	uxtb	r2, r2
 8006878:	440b      	add	r3, r1
 800687a:	761a      	strb	r2, [r3, #24]
}
 800687c:	bf00      	nop
 800687e:	370c      	adds	r7, #12
 8006880:	46bd      	mov	sp, r7
 8006882:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006886:	4770      	bx	lr
 8006888:	e000e100 	.word	0xe000e100
 800688c:	e000ed00 	.word	0xe000ed00

08006890 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8006890:	b580      	push	{r7, lr}
 8006892:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8006894:	4b05      	ldr	r3, [pc, #20]	@ (80068ac <SysTick_Handler+0x1c>)
 8006896:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8006898:	f001 fd40 	bl	800831c <xTaskGetSchedulerState>
 800689c:	4603      	mov	r3, r0
 800689e:	2b01      	cmp	r3, #1
 80068a0:	d001      	beq.n	80068a6 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 80068a2:	f002 fb39 	bl	8008f18 <xPortSysTickHandler>
  }
}
 80068a6:	bf00      	nop
 80068a8:	bd80      	pop	{r7, pc}
 80068aa:	bf00      	nop
 80068ac:	e000e010 	.word	0xe000e010

080068b0 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 80068b0:	b580      	push	{r7, lr}
 80068b2:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 80068b4:	2100      	movs	r1, #0
 80068b6:	f06f 0004 	mvn.w	r0, #4
 80068ba:	f7ff ffbf 	bl	800683c <__NVIC_SetPriority>
#endif
}
 80068be:	bf00      	nop
 80068c0:	bd80      	pop	{r7, pc}
	...

080068c4 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 80068c4:	b480      	push	{r7}
 80068c6:	b083      	sub	sp, #12
 80068c8:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80068ca:	f3ef 8305 	mrs	r3, IPSR
 80068ce:	603b      	str	r3, [r7, #0]
  return(result);
 80068d0:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80068d2:	2b00      	cmp	r3, #0
 80068d4:	d003      	beq.n	80068de <osKernelInitialize+0x1a>
    stat = osErrorISR;
 80068d6:	f06f 0305 	mvn.w	r3, #5
 80068da:	607b      	str	r3, [r7, #4]
 80068dc:	e00c      	b.n	80068f8 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 80068de:	4b0a      	ldr	r3, [pc, #40]	@ (8006908 <osKernelInitialize+0x44>)
 80068e0:	681b      	ldr	r3, [r3, #0]
 80068e2:	2b00      	cmp	r3, #0
 80068e4:	d105      	bne.n	80068f2 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 80068e6:	4b08      	ldr	r3, [pc, #32]	@ (8006908 <osKernelInitialize+0x44>)
 80068e8:	2201      	movs	r2, #1
 80068ea:	601a      	str	r2, [r3, #0]
      stat = osOK;
 80068ec:	2300      	movs	r3, #0
 80068ee:	607b      	str	r3, [r7, #4]
 80068f0:	e002      	b.n	80068f8 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 80068f2:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80068f6:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80068f8:	687b      	ldr	r3, [r7, #4]
}
 80068fa:	4618      	mov	r0, r3
 80068fc:	370c      	adds	r7, #12
 80068fe:	46bd      	mov	sp, r7
 8006900:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006904:	4770      	bx	lr
 8006906:	bf00      	nop
 8006908:	20004884 	.word	0x20004884

0800690c <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800690c:	b580      	push	{r7, lr}
 800690e:	b082      	sub	sp, #8
 8006910:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006912:	f3ef 8305 	mrs	r3, IPSR
 8006916:	603b      	str	r3, [r7, #0]
  return(result);
 8006918:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800691a:	2b00      	cmp	r3, #0
 800691c:	d003      	beq.n	8006926 <osKernelStart+0x1a>
    stat = osErrorISR;
 800691e:	f06f 0305 	mvn.w	r3, #5
 8006922:	607b      	str	r3, [r7, #4]
 8006924:	e010      	b.n	8006948 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8006926:	4b0b      	ldr	r3, [pc, #44]	@ (8006954 <osKernelStart+0x48>)
 8006928:	681b      	ldr	r3, [r3, #0]
 800692a:	2b01      	cmp	r3, #1
 800692c:	d109      	bne.n	8006942 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800692e:	f7ff ffbf 	bl	80068b0 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8006932:	4b08      	ldr	r3, [pc, #32]	@ (8006954 <osKernelStart+0x48>)
 8006934:	2202      	movs	r2, #2
 8006936:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8006938:	f001 f87a 	bl	8007a30 <vTaskStartScheduler>
      stat = osOK;
 800693c:	2300      	movs	r3, #0
 800693e:	607b      	str	r3, [r7, #4]
 8006940:	e002      	b.n	8006948 <osKernelStart+0x3c>
    } else {
      stat = osError;
 8006942:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8006946:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8006948:	687b      	ldr	r3, [r7, #4]
}
 800694a:	4618      	mov	r0, r3
 800694c:	3708      	adds	r7, #8
 800694e:	46bd      	mov	sp, r7
 8006950:	bd80      	pop	{r7, pc}
 8006952:	bf00      	nop
 8006954:	20004884 	.word	0x20004884

08006958 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8006958:	b580      	push	{r7, lr}
 800695a:	b08e      	sub	sp, #56	@ 0x38
 800695c:	af04      	add	r7, sp, #16
 800695e:	60f8      	str	r0, [r7, #12]
 8006960:	60b9      	str	r1, [r7, #8]
 8006962:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8006964:	2300      	movs	r3, #0
 8006966:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006968:	f3ef 8305 	mrs	r3, IPSR
 800696c:	617b      	str	r3, [r7, #20]
  return(result);
 800696e:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8006970:	2b00      	cmp	r3, #0
 8006972:	d17e      	bne.n	8006a72 <osThreadNew+0x11a>
 8006974:	68fb      	ldr	r3, [r7, #12]
 8006976:	2b00      	cmp	r3, #0
 8006978:	d07b      	beq.n	8006a72 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 800697a:	2380      	movs	r3, #128	@ 0x80
 800697c:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 800697e:	2318      	movs	r3, #24
 8006980:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8006982:	2300      	movs	r3, #0
 8006984:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 8006986:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800698a:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	2b00      	cmp	r3, #0
 8006990:	d045      	beq.n	8006a1e <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	681b      	ldr	r3, [r3, #0]
 8006996:	2b00      	cmp	r3, #0
 8006998:	d002      	beq.n	80069a0 <osThreadNew+0x48>
        name = attr->name;
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	681b      	ldr	r3, [r3, #0]
 800699e:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	699b      	ldr	r3, [r3, #24]
 80069a4:	2b00      	cmp	r3, #0
 80069a6:	d002      	beq.n	80069ae <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	699b      	ldr	r3, [r3, #24]
 80069ac:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 80069ae:	69fb      	ldr	r3, [r7, #28]
 80069b0:	2b00      	cmp	r3, #0
 80069b2:	d008      	beq.n	80069c6 <osThreadNew+0x6e>
 80069b4:	69fb      	ldr	r3, [r7, #28]
 80069b6:	2b38      	cmp	r3, #56	@ 0x38
 80069b8:	d805      	bhi.n	80069c6 <osThreadNew+0x6e>
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	685b      	ldr	r3, [r3, #4]
 80069be:	f003 0301 	and.w	r3, r3, #1
 80069c2:	2b00      	cmp	r3, #0
 80069c4:	d001      	beq.n	80069ca <osThreadNew+0x72>
        return (NULL);
 80069c6:	2300      	movs	r3, #0
 80069c8:	e054      	b.n	8006a74 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	695b      	ldr	r3, [r3, #20]
 80069ce:	2b00      	cmp	r3, #0
 80069d0:	d003      	beq.n	80069da <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	695b      	ldr	r3, [r3, #20]
 80069d6:	089b      	lsrs	r3, r3, #2
 80069d8:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80069da:	687b      	ldr	r3, [r7, #4]
 80069dc:	689b      	ldr	r3, [r3, #8]
 80069de:	2b00      	cmp	r3, #0
 80069e0:	d00e      	beq.n	8006a00 <osThreadNew+0xa8>
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	68db      	ldr	r3, [r3, #12]
 80069e6:	2b5b      	cmp	r3, #91	@ 0x5b
 80069e8:	d90a      	bls.n	8006a00 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80069ee:	2b00      	cmp	r3, #0
 80069f0:	d006      	beq.n	8006a00 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	695b      	ldr	r3, [r3, #20]
 80069f6:	2b00      	cmp	r3, #0
 80069f8:	d002      	beq.n	8006a00 <osThreadNew+0xa8>
        mem = 1;
 80069fa:	2301      	movs	r3, #1
 80069fc:	61bb      	str	r3, [r7, #24]
 80069fe:	e010      	b.n	8006a22 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	689b      	ldr	r3, [r3, #8]
 8006a04:	2b00      	cmp	r3, #0
 8006a06:	d10c      	bne.n	8006a22 <osThreadNew+0xca>
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	68db      	ldr	r3, [r3, #12]
 8006a0c:	2b00      	cmp	r3, #0
 8006a0e:	d108      	bne.n	8006a22 <osThreadNew+0xca>
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	691b      	ldr	r3, [r3, #16]
 8006a14:	2b00      	cmp	r3, #0
 8006a16:	d104      	bne.n	8006a22 <osThreadNew+0xca>
          mem = 0;
 8006a18:	2300      	movs	r3, #0
 8006a1a:	61bb      	str	r3, [r7, #24]
 8006a1c:	e001      	b.n	8006a22 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8006a1e:	2300      	movs	r3, #0
 8006a20:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8006a22:	69bb      	ldr	r3, [r7, #24]
 8006a24:	2b01      	cmp	r3, #1
 8006a26:	d110      	bne.n	8006a4a <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8006a2c:	687a      	ldr	r2, [r7, #4]
 8006a2e:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8006a30:	9202      	str	r2, [sp, #8]
 8006a32:	9301      	str	r3, [sp, #4]
 8006a34:	69fb      	ldr	r3, [r7, #28]
 8006a36:	9300      	str	r3, [sp, #0]
 8006a38:	68bb      	ldr	r3, [r7, #8]
 8006a3a:	6a3a      	ldr	r2, [r7, #32]
 8006a3c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8006a3e:	68f8      	ldr	r0, [r7, #12]
 8006a40:	f000 fe1a 	bl	8007678 <xTaskCreateStatic>
 8006a44:	4603      	mov	r3, r0
 8006a46:	613b      	str	r3, [r7, #16]
 8006a48:	e013      	b.n	8006a72 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8006a4a:	69bb      	ldr	r3, [r7, #24]
 8006a4c:	2b00      	cmp	r3, #0
 8006a4e:	d110      	bne.n	8006a72 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8006a50:	6a3b      	ldr	r3, [r7, #32]
 8006a52:	b29a      	uxth	r2, r3
 8006a54:	f107 0310 	add.w	r3, r7, #16
 8006a58:	9301      	str	r3, [sp, #4]
 8006a5a:	69fb      	ldr	r3, [r7, #28]
 8006a5c:	9300      	str	r3, [sp, #0]
 8006a5e:	68bb      	ldr	r3, [r7, #8]
 8006a60:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8006a62:	68f8      	ldr	r0, [r7, #12]
 8006a64:	f000 fe68 	bl	8007738 <xTaskCreate>
 8006a68:	4603      	mov	r3, r0
 8006a6a:	2b01      	cmp	r3, #1
 8006a6c:	d001      	beq.n	8006a72 <osThreadNew+0x11a>
            hTask = NULL;
 8006a6e:	2300      	movs	r3, #0
 8006a70:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8006a72:	693b      	ldr	r3, [r7, #16]
}
 8006a74:	4618      	mov	r0, r3
 8006a76:	3728      	adds	r7, #40	@ 0x28
 8006a78:	46bd      	mov	sp, r7
 8006a7a:	bd80      	pop	{r7, pc}

08006a7c <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8006a7c:	b580      	push	{r7, lr}
 8006a7e:	b084      	sub	sp, #16
 8006a80:	af00      	add	r7, sp, #0
 8006a82:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006a84:	f3ef 8305 	mrs	r3, IPSR
 8006a88:	60bb      	str	r3, [r7, #8]
  return(result);
 8006a8a:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8006a8c:	2b00      	cmp	r3, #0
 8006a8e:	d003      	beq.n	8006a98 <osDelay+0x1c>
    stat = osErrorISR;
 8006a90:	f06f 0305 	mvn.w	r3, #5
 8006a94:	60fb      	str	r3, [r7, #12]
 8006a96:	e007      	b.n	8006aa8 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8006a98:	2300      	movs	r3, #0
 8006a9a:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	2b00      	cmp	r3, #0
 8006aa0:	d002      	beq.n	8006aa8 <osDelay+0x2c>
      vTaskDelay(ticks);
 8006aa2:	6878      	ldr	r0, [r7, #4]
 8006aa4:	f000 ff8e 	bl	80079c4 <vTaskDelay>
    }
  }

  return (stat);
 8006aa8:	68fb      	ldr	r3, [r7, #12]
}
 8006aaa:	4618      	mov	r0, r3
 8006aac:	3710      	adds	r7, #16
 8006aae:	46bd      	mov	sp, r7
 8006ab0:	bd80      	pop	{r7, pc}
	...

08006ab4 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8006ab4:	b480      	push	{r7}
 8006ab6:	b085      	sub	sp, #20
 8006ab8:	af00      	add	r7, sp, #0
 8006aba:	60f8      	str	r0, [r7, #12]
 8006abc:	60b9      	str	r1, [r7, #8]
 8006abe:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8006ac0:	68fb      	ldr	r3, [r7, #12]
 8006ac2:	4a07      	ldr	r2, [pc, #28]	@ (8006ae0 <vApplicationGetIdleTaskMemory+0x2c>)
 8006ac4:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8006ac6:	68bb      	ldr	r3, [r7, #8]
 8006ac8:	4a06      	ldr	r2, [pc, #24]	@ (8006ae4 <vApplicationGetIdleTaskMemory+0x30>)
 8006aca:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	2280      	movs	r2, #128	@ 0x80
 8006ad0:	601a      	str	r2, [r3, #0]
}
 8006ad2:	bf00      	nop
 8006ad4:	3714      	adds	r7, #20
 8006ad6:	46bd      	mov	sp, r7
 8006ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006adc:	4770      	bx	lr
 8006ade:	bf00      	nop
 8006ae0:	20004888 	.word	0x20004888
 8006ae4:	200048e4 	.word	0x200048e4

08006ae8 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8006ae8:	b480      	push	{r7}
 8006aea:	b085      	sub	sp, #20
 8006aec:	af00      	add	r7, sp, #0
 8006aee:	60f8      	str	r0, [r7, #12]
 8006af0:	60b9      	str	r1, [r7, #8]
 8006af2:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8006af4:	68fb      	ldr	r3, [r7, #12]
 8006af6:	4a07      	ldr	r2, [pc, #28]	@ (8006b14 <vApplicationGetTimerTaskMemory+0x2c>)
 8006af8:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8006afa:	68bb      	ldr	r3, [r7, #8]
 8006afc:	4a06      	ldr	r2, [pc, #24]	@ (8006b18 <vApplicationGetTimerTaskMemory+0x30>)
 8006afe:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8006b06:	601a      	str	r2, [r3, #0]
}
 8006b08:	bf00      	nop
 8006b0a:	3714      	adds	r7, #20
 8006b0c:	46bd      	mov	sp, r7
 8006b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b12:	4770      	bx	lr
 8006b14:	20004ae4 	.word	0x20004ae4
 8006b18:	20004b40 	.word	0x20004b40

08006b1c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8006b1c:	b480      	push	{r7}
 8006b1e:	b083      	sub	sp, #12
 8006b20:	af00      	add	r7, sp, #0
 8006b22:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	f103 0208 	add.w	r2, r3, #8
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8006b34:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	f103 0208 	add.w	r2, r3, #8
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	f103 0208 	add.w	r2, r3, #8
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	2200      	movs	r2, #0
 8006b4e:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8006b50:	bf00      	nop
 8006b52:	370c      	adds	r7, #12
 8006b54:	46bd      	mov	sp, r7
 8006b56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b5a:	4770      	bx	lr

08006b5c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8006b5c:	b480      	push	{r7}
 8006b5e:	b083      	sub	sp, #12
 8006b60:	af00      	add	r7, sp, #0
 8006b62:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	2200      	movs	r2, #0
 8006b68:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8006b6a:	bf00      	nop
 8006b6c:	370c      	adds	r7, #12
 8006b6e:	46bd      	mov	sp, r7
 8006b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b74:	4770      	bx	lr

08006b76 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8006b76:	b480      	push	{r7}
 8006b78:	b085      	sub	sp, #20
 8006b7a:	af00      	add	r7, sp, #0
 8006b7c:	6078      	str	r0, [r7, #4]
 8006b7e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	685b      	ldr	r3, [r3, #4]
 8006b84:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8006b86:	683b      	ldr	r3, [r7, #0]
 8006b88:	68fa      	ldr	r2, [r7, #12]
 8006b8a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8006b8c:	68fb      	ldr	r3, [r7, #12]
 8006b8e:	689a      	ldr	r2, [r3, #8]
 8006b90:	683b      	ldr	r3, [r7, #0]
 8006b92:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8006b94:	68fb      	ldr	r3, [r7, #12]
 8006b96:	689b      	ldr	r3, [r3, #8]
 8006b98:	683a      	ldr	r2, [r7, #0]
 8006b9a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8006b9c:	68fb      	ldr	r3, [r7, #12]
 8006b9e:	683a      	ldr	r2, [r7, #0]
 8006ba0:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8006ba2:	683b      	ldr	r3, [r7, #0]
 8006ba4:	687a      	ldr	r2, [r7, #4]
 8006ba6:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	681b      	ldr	r3, [r3, #0]
 8006bac:	1c5a      	adds	r2, r3, #1
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	601a      	str	r2, [r3, #0]
}
 8006bb2:	bf00      	nop
 8006bb4:	3714      	adds	r7, #20
 8006bb6:	46bd      	mov	sp, r7
 8006bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bbc:	4770      	bx	lr

08006bbe <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8006bbe:	b480      	push	{r7}
 8006bc0:	b085      	sub	sp, #20
 8006bc2:	af00      	add	r7, sp, #0
 8006bc4:	6078      	str	r0, [r7, #4]
 8006bc6:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8006bc8:	683b      	ldr	r3, [r7, #0]
 8006bca:	681b      	ldr	r3, [r3, #0]
 8006bcc:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8006bce:	68bb      	ldr	r3, [r7, #8]
 8006bd0:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8006bd4:	d103      	bne.n	8006bde <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	691b      	ldr	r3, [r3, #16]
 8006bda:	60fb      	str	r3, [r7, #12]
 8006bdc:	e00c      	b.n	8006bf8 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	3308      	adds	r3, #8
 8006be2:	60fb      	str	r3, [r7, #12]
 8006be4:	e002      	b.n	8006bec <vListInsert+0x2e>
 8006be6:	68fb      	ldr	r3, [r7, #12]
 8006be8:	685b      	ldr	r3, [r3, #4]
 8006bea:	60fb      	str	r3, [r7, #12]
 8006bec:	68fb      	ldr	r3, [r7, #12]
 8006bee:	685b      	ldr	r3, [r3, #4]
 8006bf0:	681b      	ldr	r3, [r3, #0]
 8006bf2:	68ba      	ldr	r2, [r7, #8]
 8006bf4:	429a      	cmp	r2, r3
 8006bf6:	d2f6      	bcs.n	8006be6 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8006bf8:	68fb      	ldr	r3, [r7, #12]
 8006bfa:	685a      	ldr	r2, [r3, #4]
 8006bfc:	683b      	ldr	r3, [r7, #0]
 8006bfe:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8006c00:	683b      	ldr	r3, [r7, #0]
 8006c02:	685b      	ldr	r3, [r3, #4]
 8006c04:	683a      	ldr	r2, [r7, #0]
 8006c06:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8006c08:	683b      	ldr	r3, [r7, #0]
 8006c0a:	68fa      	ldr	r2, [r7, #12]
 8006c0c:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8006c0e:	68fb      	ldr	r3, [r7, #12]
 8006c10:	683a      	ldr	r2, [r7, #0]
 8006c12:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8006c14:	683b      	ldr	r3, [r7, #0]
 8006c16:	687a      	ldr	r2, [r7, #4]
 8006c18:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	681b      	ldr	r3, [r3, #0]
 8006c1e:	1c5a      	adds	r2, r3, #1
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	601a      	str	r2, [r3, #0]
}
 8006c24:	bf00      	nop
 8006c26:	3714      	adds	r7, #20
 8006c28:	46bd      	mov	sp, r7
 8006c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c2e:	4770      	bx	lr

08006c30 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8006c30:	b480      	push	{r7}
 8006c32:	b085      	sub	sp, #20
 8006c34:	af00      	add	r7, sp, #0
 8006c36:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	691b      	ldr	r3, [r3, #16]
 8006c3c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	685b      	ldr	r3, [r3, #4]
 8006c42:	687a      	ldr	r2, [r7, #4]
 8006c44:	6892      	ldr	r2, [r2, #8]
 8006c46:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	689b      	ldr	r3, [r3, #8]
 8006c4c:	687a      	ldr	r2, [r7, #4]
 8006c4e:	6852      	ldr	r2, [r2, #4]
 8006c50:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8006c52:	68fb      	ldr	r3, [r7, #12]
 8006c54:	685b      	ldr	r3, [r3, #4]
 8006c56:	687a      	ldr	r2, [r7, #4]
 8006c58:	429a      	cmp	r2, r3
 8006c5a:	d103      	bne.n	8006c64 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	689a      	ldr	r2, [r3, #8]
 8006c60:	68fb      	ldr	r3, [r7, #12]
 8006c62:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	2200      	movs	r2, #0
 8006c68:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8006c6a:	68fb      	ldr	r3, [r7, #12]
 8006c6c:	681b      	ldr	r3, [r3, #0]
 8006c6e:	1e5a      	subs	r2, r3, #1
 8006c70:	68fb      	ldr	r3, [r7, #12]
 8006c72:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8006c74:	68fb      	ldr	r3, [r7, #12]
 8006c76:	681b      	ldr	r3, [r3, #0]
}
 8006c78:	4618      	mov	r0, r3
 8006c7a:	3714      	adds	r7, #20
 8006c7c:	46bd      	mov	sp, r7
 8006c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c82:	4770      	bx	lr

08006c84 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8006c84:	b580      	push	{r7, lr}
 8006c86:	b084      	sub	sp, #16
 8006c88:	af00      	add	r7, sp, #0
 8006c8a:	6078      	str	r0, [r7, #4]
 8006c8c:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8006c8e:	687b      	ldr	r3, [r7, #4]
 8006c90:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8006c92:	68fb      	ldr	r3, [r7, #12]
 8006c94:	2b00      	cmp	r3, #0
 8006c96:	d10b      	bne.n	8006cb0 <xQueueGenericReset+0x2c>
	__asm volatile
 8006c98:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006c9c:	f383 8811 	msr	BASEPRI, r3
 8006ca0:	f3bf 8f6f 	isb	sy
 8006ca4:	f3bf 8f4f 	dsb	sy
 8006ca8:	60bb      	str	r3, [r7, #8]
}
 8006caa:	bf00      	nop
 8006cac:	bf00      	nop
 8006cae:	e7fd      	b.n	8006cac <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8006cb0:	f002 f8a2 	bl	8008df8 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8006cb4:	68fb      	ldr	r3, [r7, #12]
 8006cb6:	681a      	ldr	r2, [r3, #0]
 8006cb8:	68fb      	ldr	r3, [r7, #12]
 8006cba:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006cbc:	68f9      	ldr	r1, [r7, #12]
 8006cbe:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8006cc0:	fb01 f303 	mul.w	r3, r1, r3
 8006cc4:	441a      	add	r2, r3
 8006cc6:	68fb      	ldr	r3, [r7, #12]
 8006cc8:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8006cca:	68fb      	ldr	r3, [r7, #12]
 8006ccc:	2200      	movs	r2, #0
 8006cce:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8006cd0:	68fb      	ldr	r3, [r7, #12]
 8006cd2:	681a      	ldr	r2, [r3, #0]
 8006cd4:	68fb      	ldr	r3, [r7, #12]
 8006cd6:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8006cd8:	68fb      	ldr	r3, [r7, #12]
 8006cda:	681a      	ldr	r2, [r3, #0]
 8006cdc:	68fb      	ldr	r3, [r7, #12]
 8006cde:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006ce0:	3b01      	subs	r3, #1
 8006ce2:	68f9      	ldr	r1, [r7, #12]
 8006ce4:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8006ce6:	fb01 f303 	mul.w	r3, r1, r3
 8006cea:	441a      	add	r2, r3
 8006cec:	68fb      	ldr	r3, [r7, #12]
 8006cee:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8006cf0:	68fb      	ldr	r3, [r7, #12]
 8006cf2:	22ff      	movs	r2, #255	@ 0xff
 8006cf4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8006cf8:	68fb      	ldr	r3, [r7, #12]
 8006cfa:	22ff      	movs	r2, #255	@ 0xff
 8006cfc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8006d00:	683b      	ldr	r3, [r7, #0]
 8006d02:	2b00      	cmp	r3, #0
 8006d04:	d114      	bne.n	8006d30 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006d06:	68fb      	ldr	r3, [r7, #12]
 8006d08:	691b      	ldr	r3, [r3, #16]
 8006d0a:	2b00      	cmp	r3, #0
 8006d0c:	d01a      	beq.n	8006d44 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006d0e:	68fb      	ldr	r3, [r7, #12]
 8006d10:	3310      	adds	r3, #16
 8006d12:	4618      	mov	r0, r3
 8006d14:	f001 f91a 	bl	8007f4c <xTaskRemoveFromEventList>
 8006d18:	4603      	mov	r3, r0
 8006d1a:	2b00      	cmp	r3, #0
 8006d1c:	d012      	beq.n	8006d44 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8006d1e:	4b0d      	ldr	r3, [pc, #52]	@ (8006d54 <xQueueGenericReset+0xd0>)
 8006d20:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006d24:	601a      	str	r2, [r3, #0]
 8006d26:	f3bf 8f4f 	dsb	sy
 8006d2a:	f3bf 8f6f 	isb	sy
 8006d2e:	e009      	b.n	8006d44 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8006d30:	68fb      	ldr	r3, [r7, #12]
 8006d32:	3310      	adds	r3, #16
 8006d34:	4618      	mov	r0, r3
 8006d36:	f7ff fef1 	bl	8006b1c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8006d3a:	68fb      	ldr	r3, [r7, #12]
 8006d3c:	3324      	adds	r3, #36	@ 0x24
 8006d3e:	4618      	mov	r0, r3
 8006d40:	f7ff feec 	bl	8006b1c <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8006d44:	f002 f88a 	bl	8008e5c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8006d48:	2301      	movs	r3, #1
}
 8006d4a:	4618      	mov	r0, r3
 8006d4c:	3710      	adds	r7, #16
 8006d4e:	46bd      	mov	sp, r7
 8006d50:	bd80      	pop	{r7, pc}
 8006d52:	bf00      	nop
 8006d54:	e000ed04 	.word	0xe000ed04

08006d58 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8006d58:	b580      	push	{r7, lr}
 8006d5a:	b08e      	sub	sp, #56	@ 0x38
 8006d5c:	af02      	add	r7, sp, #8
 8006d5e:	60f8      	str	r0, [r7, #12]
 8006d60:	60b9      	str	r1, [r7, #8]
 8006d62:	607a      	str	r2, [r7, #4]
 8006d64:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8006d66:	68fb      	ldr	r3, [r7, #12]
 8006d68:	2b00      	cmp	r3, #0
 8006d6a:	d10b      	bne.n	8006d84 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 8006d6c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006d70:	f383 8811 	msr	BASEPRI, r3
 8006d74:	f3bf 8f6f 	isb	sy
 8006d78:	f3bf 8f4f 	dsb	sy
 8006d7c:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8006d7e:	bf00      	nop
 8006d80:	bf00      	nop
 8006d82:	e7fd      	b.n	8006d80 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8006d84:	683b      	ldr	r3, [r7, #0]
 8006d86:	2b00      	cmp	r3, #0
 8006d88:	d10b      	bne.n	8006da2 <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 8006d8a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006d8e:	f383 8811 	msr	BASEPRI, r3
 8006d92:	f3bf 8f6f 	isb	sy
 8006d96:	f3bf 8f4f 	dsb	sy
 8006d9a:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8006d9c:	bf00      	nop
 8006d9e:	bf00      	nop
 8006da0:	e7fd      	b.n	8006d9e <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	2b00      	cmp	r3, #0
 8006da6:	d002      	beq.n	8006dae <xQueueGenericCreateStatic+0x56>
 8006da8:	68bb      	ldr	r3, [r7, #8]
 8006daa:	2b00      	cmp	r3, #0
 8006dac:	d001      	beq.n	8006db2 <xQueueGenericCreateStatic+0x5a>
 8006dae:	2301      	movs	r3, #1
 8006db0:	e000      	b.n	8006db4 <xQueueGenericCreateStatic+0x5c>
 8006db2:	2300      	movs	r3, #0
 8006db4:	2b00      	cmp	r3, #0
 8006db6:	d10b      	bne.n	8006dd0 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 8006db8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006dbc:	f383 8811 	msr	BASEPRI, r3
 8006dc0:	f3bf 8f6f 	isb	sy
 8006dc4:	f3bf 8f4f 	dsb	sy
 8006dc8:	623b      	str	r3, [r7, #32]
}
 8006dca:	bf00      	nop
 8006dcc:	bf00      	nop
 8006dce:	e7fd      	b.n	8006dcc <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	2b00      	cmp	r3, #0
 8006dd4:	d102      	bne.n	8006ddc <xQueueGenericCreateStatic+0x84>
 8006dd6:	68bb      	ldr	r3, [r7, #8]
 8006dd8:	2b00      	cmp	r3, #0
 8006dda:	d101      	bne.n	8006de0 <xQueueGenericCreateStatic+0x88>
 8006ddc:	2301      	movs	r3, #1
 8006dde:	e000      	b.n	8006de2 <xQueueGenericCreateStatic+0x8a>
 8006de0:	2300      	movs	r3, #0
 8006de2:	2b00      	cmp	r3, #0
 8006de4:	d10b      	bne.n	8006dfe <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 8006de6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006dea:	f383 8811 	msr	BASEPRI, r3
 8006dee:	f3bf 8f6f 	isb	sy
 8006df2:	f3bf 8f4f 	dsb	sy
 8006df6:	61fb      	str	r3, [r7, #28]
}
 8006df8:	bf00      	nop
 8006dfa:	bf00      	nop
 8006dfc:	e7fd      	b.n	8006dfa <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8006dfe:	2350      	movs	r3, #80	@ 0x50
 8006e00:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8006e02:	697b      	ldr	r3, [r7, #20]
 8006e04:	2b50      	cmp	r3, #80	@ 0x50
 8006e06:	d00b      	beq.n	8006e20 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 8006e08:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006e0c:	f383 8811 	msr	BASEPRI, r3
 8006e10:	f3bf 8f6f 	isb	sy
 8006e14:	f3bf 8f4f 	dsb	sy
 8006e18:	61bb      	str	r3, [r7, #24]
}
 8006e1a:	bf00      	nop
 8006e1c:	bf00      	nop
 8006e1e:	e7fd      	b.n	8006e1c <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8006e20:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8006e22:	683b      	ldr	r3, [r7, #0]
 8006e24:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 8006e26:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006e28:	2b00      	cmp	r3, #0
 8006e2a:	d00d      	beq.n	8006e48 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8006e2c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006e2e:	2201      	movs	r2, #1
 8006e30:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8006e34:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 8006e38:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006e3a:	9300      	str	r3, [sp, #0]
 8006e3c:	4613      	mov	r3, r2
 8006e3e:	687a      	ldr	r2, [r7, #4]
 8006e40:	68b9      	ldr	r1, [r7, #8]
 8006e42:	68f8      	ldr	r0, [r7, #12]
 8006e44:	f000 f805 	bl	8006e52 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8006e48:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 8006e4a:	4618      	mov	r0, r3
 8006e4c:	3730      	adds	r7, #48	@ 0x30
 8006e4e:	46bd      	mov	sp, r7
 8006e50:	bd80      	pop	{r7, pc}

08006e52 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8006e52:	b580      	push	{r7, lr}
 8006e54:	b084      	sub	sp, #16
 8006e56:	af00      	add	r7, sp, #0
 8006e58:	60f8      	str	r0, [r7, #12]
 8006e5a:	60b9      	str	r1, [r7, #8]
 8006e5c:	607a      	str	r2, [r7, #4]
 8006e5e:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8006e60:	68bb      	ldr	r3, [r7, #8]
 8006e62:	2b00      	cmp	r3, #0
 8006e64:	d103      	bne.n	8006e6e <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8006e66:	69bb      	ldr	r3, [r7, #24]
 8006e68:	69ba      	ldr	r2, [r7, #24]
 8006e6a:	601a      	str	r2, [r3, #0]
 8006e6c:	e002      	b.n	8006e74 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8006e6e:	69bb      	ldr	r3, [r7, #24]
 8006e70:	687a      	ldr	r2, [r7, #4]
 8006e72:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8006e74:	69bb      	ldr	r3, [r7, #24]
 8006e76:	68fa      	ldr	r2, [r7, #12]
 8006e78:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8006e7a:	69bb      	ldr	r3, [r7, #24]
 8006e7c:	68ba      	ldr	r2, [r7, #8]
 8006e7e:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8006e80:	2101      	movs	r1, #1
 8006e82:	69b8      	ldr	r0, [r7, #24]
 8006e84:	f7ff fefe 	bl	8006c84 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8006e88:	69bb      	ldr	r3, [r7, #24]
 8006e8a:	78fa      	ldrb	r2, [r7, #3]
 8006e8c:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8006e90:	bf00      	nop
 8006e92:	3710      	adds	r7, #16
 8006e94:	46bd      	mov	sp, r7
 8006e96:	bd80      	pop	{r7, pc}

08006e98 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8006e98:	b580      	push	{r7, lr}
 8006e9a:	b08e      	sub	sp, #56	@ 0x38
 8006e9c:	af00      	add	r7, sp, #0
 8006e9e:	60f8      	str	r0, [r7, #12]
 8006ea0:	60b9      	str	r1, [r7, #8]
 8006ea2:	607a      	str	r2, [r7, #4]
 8006ea4:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8006ea6:	2300      	movs	r3, #0
 8006ea8:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8006eaa:	68fb      	ldr	r3, [r7, #12]
 8006eac:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8006eae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006eb0:	2b00      	cmp	r3, #0
 8006eb2:	d10b      	bne.n	8006ecc <xQueueGenericSend+0x34>
	__asm volatile
 8006eb4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006eb8:	f383 8811 	msr	BASEPRI, r3
 8006ebc:	f3bf 8f6f 	isb	sy
 8006ec0:	f3bf 8f4f 	dsb	sy
 8006ec4:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8006ec6:	bf00      	nop
 8006ec8:	bf00      	nop
 8006eca:	e7fd      	b.n	8006ec8 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006ecc:	68bb      	ldr	r3, [r7, #8]
 8006ece:	2b00      	cmp	r3, #0
 8006ed0:	d103      	bne.n	8006eda <xQueueGenericSend+0x42>
 8006ed2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006ed4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006ed6:	2b00      	cmp	r3, #0
 8006ed8:	d101      	bne.n	8006ede <xQueueGenericSend+0x46>
 8006eda:	2301      	movs	r3, #1
 8006edc:	e000      	b.n	8006ee0 <xQueueGenericSend+0x48>
 8006ede:	2300      	movs	r3, #0
 8006ee0:	2b00      	cmp	r3, #0
 8006ee2:	d10b      	bne.n	8006efc <xQueueGenericSend+0x64>
	__asm volatile
 8006ee4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006ee8:	f383 8811 	msr	BASEPRI, r3
 8006eec:	f3bf 8f6f 	isb	sy
 8006ef0:	f3bf 8f4f 	dsb	sy
 8006ef4:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8006ef6:	bf00      	nop
 8006ef8:	bf00      	nop
 8006efa:	e7fd      	b.n	8006ef8 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8006efc:	683b      	ldr	r3, [r7, #0]
 8006efe:	2b02      	cmp	r3, #2
 8006f00:	d103      	bne.n	8006f0a <xQueueGenericSend+0x72>
 8006f02:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006f04:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006f06:	2b01      	cmp	r3, #1
 8006f08:	d101      	bne.n	8006f0e <xQueueGenericSend+0x76>
 8006f0a:	2301      	movs	r3, #1
 8006f0c:	e000      	b.n	8006f10 <xQueueGenericSend+0x78>
 8006f0e:	2300      	movs	r3, #0
 8006f10:	2b00      	cmp	r3, #0
 8006f12:	d10b      	bne.n	8006f2c <xQueueGenericSend+0x94>
	__asm volatile
 8006f14:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006f18:	f383 8811 	msr	BASEPRI, r3
 8006f1c:	f3bf 8f6f 	isb	sy
 8006f20:	f3bf 8f4f 	dsb	sy
 8006f24:	623b      	str	r3, [r7, #32]
}
 8006f26:	bf00      	nop
 8006f28:	bf00      	nop
 8006f2a:	e7fd      	b.n	8006f28 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8006f2c:	f001 f9f6 	bl	800831c <xTaskGetSchedulerState>
 8006f30:	4603      	mov	r3, r0
 8006f32:	2b00      	cmp	r3, #0
 8006f34:	d102      	bne.n	8006f3c <xQueueGenericSend+0xa4>
 8006f36:	687b      	ldr	r3, [r7, #4]
 8006f38:	2b00      	cmp	r3, #0
 8006f3a:	d101      	bne.n	8006f40 <xQueueGenericSend+0xa8>
 8006f3c:	2301      	movs	r3, #1
 8006f3e:	e000      	b.n	8006f42 <xQueueGenericSend+0xaa>
 8006f40:	2300      	movs	r3, #0
 8006f42:	2b00      	cmp	r3, #0
 8006f44:	d10b      	bne.n	8006f5e <xQueueGenericSend+0xc6>
	__asm volatile
 8006f46:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006f4a:	f383 8811 	msr	BASEPRI, r3
 8006f4e:	f3bf 8f6f 	isb	sy
 8006f52:	f3bf 8f4f 	dsb	sy
 8006f56:	61fb      	str	r3, [r7, #28]
}
 8006f58:	bf00      	nop
 8006f5a:	bf00      	nop
 8006f5c:	e7fd      	b.n	8006f5a <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8006f5e:	f001 ff4b 	bl	8008df8 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8006f62:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006f64:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006f66:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006f68:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006f6a:	429a      	cmp	r2, r3
 8006f6c:	d302      	bcc.n	8006f74 <xQueueGenericSend+0xdc>
 8006f6e:	683b      	ldr	r3, [r7, #0]
 8006f70:	2b02      	cmp	r3, #2
 8006f72:	d129      	bne.n	8006fc8 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8006f74:	683a      	ldr	r2, [r7, #0]
 8006f76:	68b9      	ldr	r1, [r7, #8]
 8006f78:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8006f7a:	f000 fa0f 	bl	800739c <prvCopyDataToQueue>
 8006f7e:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006f80:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006f82:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006f84:	2b00      	cmp	r3, #0
 8006f86:	d010      	beq.n	8006faa <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006f88:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006f8a:	3324      	adds	r3, #36	@ 0x24
 8006f8c:	4618      	mov	r0, r3
 8006f8e:	f000 ffdd 	bl	8007f4c <xTaskRemoveFromEventList>
 8006f92:	4603      	mov	r3, r0
 8006f94:	2b00      	cmp	r3, #0
 8006f96:	d013      	beq.n	8006fc0 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8006f98:	4b3f      	ldr	r3, [pc, #252]	@ (8007098 <xQueueGenericSend+0x200>)
 8006f9a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006f9e:	601a      	str	r2, [r3, #0]
 8006fa0:	f3bf 8f4f 	dsb	sy
 8006fa4:	f3bf 8f6f 	isb	sy
 8006fa8:	e00a      	b.n	8006fc0 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8006faa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006fac:	2b00      	cmp	r3, #0
 8006fae:	d007      	beq.n	8006fc0 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8006fb0:	4b39      	ldr	r3, [pc, #228]	@ (8007098 <xQueueGenericSend+0x200>)
 8006fb2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006fb6:	601a      	str	r2, [r3, #0]
 8006fb8:	f3bf 8f4f 	dsb	sy
 8006fbc:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8006fc0:	f001 ff4c 	bl	8008e5c <vPortExitCritical>
				return pdPASS;
 8006fc4:	2301      	movs	r3, #1
 8006fc6:	e063      	b.n	8007090 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	2b00      	cmp	r3, #0
 8006fcc:	d103      	bne.n	8006fd6 <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8006fce:	f001 ff45 	bl	8008e5c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8006fd2:	2300      	movs	r3, #0
 8006fd4:	e05c      	b.n	8007090 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8006fd6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006fd8:	2b00      	cmp	r3, #0
 8006fda:	d106      	bne.n	8006fea <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8006fdc:	f107 0314 	add.w	r3, r7, #20
 8006fe0:	4618      	mov	r0, r3
 8006fe2:	f001 f83f 	bl	8008064 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8006fe6:	2301      	movs	r3, #1
 8006fe8:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8006fea:	f001 ff37 	bl	8008e5c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8006fee:	f000 fd87 	bl	8007b00 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8006ff2:	f001 ff01 	bl	8008df8 <vPortEnterCritical>
 8006ff6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006ff8:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8006ffc:	b25b      	sxtb	r3, r3
 8006ffe:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8007002:	d103      	bne.n	800700c <xQueueGenericSend+0x174>
 8007004:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007006:	2200      	movs	r2, #0
 8007008:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800700c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800700e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8007012:	b25b      	sxtb	r3, r3
 8007014:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8007018:	d103      	bne.n	8007022 <xQueueGenericSend+0x18a>
 800701a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800701c:	2200      	movs	r2, #0
 800701e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8007022:	f001 ff1b 	bl	8008e5c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8007026:	1d3a      	adds	r2, r7, #4
 8007028:	f107 0314 	add.w	r3, r7, #20
 800702c:	4611      	mov	r1, r2
 800702e:	4618      	mov	r0, r3
 8007030:	f001 f82e 	bl	8008090 <xTaskCheckForTimeOut>
 8007034:	4603      	mov	r3, r0
 8007036:	2b00      	cmp	r3, #0
 8007038:	d124      	bne.n	8007084 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800703a:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800703c:	f000 faa6 	bl	800758c <prvIsQueueFull>
 8007040:	4603      	mov	r3, r0
 8007042:	2b00      	cmp	r3, #0
 8007044:	d018      	beq.n	8007078 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8007046:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007048:	3310      	adds	r3, #16
 800704a:	687a      	ldr	r2, [r7, #4]
 800704c:	4611      	mov	r1, r2
 800704e:	4618      	mov	r0, r3
 8007050:	f000 ff2a 	bl	8007ea8 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8007054:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8007056:	f000 fa31 	bl	80074bc <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800705a:	f000 fd5f 	bl	8007b1c <xTaskResumeAll>
 800705e:	4603      	mov	r3, r0
 8007060:	2b00      	cmp	r3, #0
 8007062:	f47f af7c 	bne.w	8006f5e <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 8007066:	4b0c      	ldr	r3, [pc, #48]	@ (8007098 <xQueueGenericSend+0x200>)
 8007068:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800706c:	601a      	str	r2, [r3, #0]
 800706e:	f3bf 8f4f 	dsb	sy
 8007072:	f3bf 8f6f 	isb	sy
 8007076:	e772      	b.n	8006f5e <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8007078:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800707a:	f000 fa1f 	bl	80074bc <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800707e:	f000 fd4d 	bl	8007b1c <xTaskResumeAll>
 8007082:	e76c      	b.n	8006f5e <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8007084:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8007086:	f000 fa19 	bl	80074bc <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800708a:	f000 fd47 	bl	8007b1c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800708e:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8007090:	4618      	mov	r0, r3
 8007092:	3738      	adds	r7, #56	@ 0x38
 8007094:	46bd      	mov	sp, r7
 8007096:	bd80      	pop	{r7, pc}
 8007098:	e000ed04 	.word	0xe000ed04

0800709c <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800709c:	b580      	push	{r7, lr}
 800709e:	b090      	sub	sp, #64	@ 0x40
 80070a0:	af00      	add	r7, sp, #0
 80070a2:	60f8      	str	r0, [r7, #12]
 80070a4:	60b9      	str	r1, [r7, #8]
 80070a6:	607a      	str	r2, [r7, #4]
 80070a8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80070aa:	68fb      	ldr	r3, [r7, #12]
 80070ac:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 80070ae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80070b0:	2b00      	cmp	r3, #0
 80070b2:	d10b      	bne.n	80070cc <xQueueGenericSendFromISR+0x30>
	__asm volatile
 80070b4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80070b8:	f383 8811 	msr	BASEPRI, r3
 80070bc:	f3bf 8f6f 	isb	sy
 80070c0:	f3bf 8f4f 	dsb	sy
 80070c4:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 80070c6:	bf00      	nop
 80070c8:	bf00      	nop
 80070ca:	e7fd      	b.n	80070c8 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80070cc:	68bb      	ldr	r3, [r7, #8]
 80070ce:	2b00      	cmp	r3, #0
 80070d0:	d103      	bne.n	80070da <xQueueGenericSendFromISR+0x3e>
 80070d2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80070d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80070d6:	2b00      	cmp	r3, #0
 80070d8:	d101      	bne.n	80070de <xQueueGenericSendFromISR+0x42>
 80070da:	2301      	movs	r3, #1
 80070dc:	e000      	b.n	80070e0 <xQueueGenericSendFromISR+0x44>
 80070de:	2300      	movs	r3, #0
 80070e0:	2b00      	cmp	r3, #0
 80070e2:	d10b      	bne.n	80070fc <xQueueGenericSendFromISR+0x60>
	__asm volatile
 80070e4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80070e8:	f383 8811 	msr	BASEPRI, r3
 80070ec:	f3bf 8f6f 	isb	sy
 80070f0:	f3bf 8f4f 	dsb	sy
 80070f4:	627b      	str	r3, [r7, #36]	@ 0x24
}
 80070f6:	bf00      	nop
 80070f8:	bf00      	nop
 80070fa:	e7fd      	b.n	80070f8 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80070fc:	683b      	ldr	r3, [r7, #0]
 80070fe:	2b02      	cmp	r3, #2
 8007100:	d103      	bne.n	800710a <xQueueGenericSendFromISR+0x6e>
 8007102:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007104:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007106:	2b01      	cmp	r3, #1
 8007108:	d101      	bne.n	800710e <xQueueGenericSendFromISR+0x72>
 800710a:	2301      	movs	r3, #1
 800710c:	e000      	b.n	8007110 <xQueueGenericSendFromISR+0x74>
 800710e:	2300      	movs	r3, #0
 8007110:	2b00      	cmp	r3, #0
 8007112:	d10b      	bne.n	800712c <xQueueGenericSendFromISR+0x90>
	__asm volatile
 8007114:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007118:	f383 8811 	msr	BASEPRI, r3
 800711c:	f3bf 8f6f 	isb	sy
 8007120:	f3bf 8f4f 	dsb	sy
 8007124:	623b      	str	r3, [r7, #32]
}
 8007126:	bf00      	nop
 8007128:	bf00      	nop
 800712a:	e7fd      	b.n	8007128 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800712c:	f001 ff44 	bl	8008fb8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8007130:	f3ef 8211 	mrs	r2, BASEPRI
 8007134:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007138:	f383 8811 	msr	BASEPRI, r3
 800713c:	f3bf 8f6f 	isb	sy
 8007140:	f3bf 8f4f 	dsb	sy
 8007144:	61fa      	str	r2, [r7, #28]
 8007146:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8007148:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800714a:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800714c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800714e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007150:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007152:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007154:	429a      	cmp	r2, r3
 8007156:	d302      	bcc.n	800715e <xQueueGenericSendFromISR+0xc2>
 8007158:	683b      	ldr	r3, [r7, #0]
 800715a:	2b02      	cmp	r3, #2
 800715c:	d12f      	bne.n	80071be <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800715e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007160:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8007164:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007168:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800716a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800716c:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800716e:	683a      	ldr	r2, [r7, #0]
 8007170:	68b9      	ldr	r1, [r7, #8]
 8007172:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8007174:	f000 f912 	bl	800739c <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8007178:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 800717c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8007180:	d112      	bne.n	80071a8 <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007182:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007184:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007186:	2b00      	cmp	r3, #0
 8007188:	d016      	beq.n	80071b8 <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800718a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800718c:	3324      	adds	r3, #36	@ 0x24
 800718e:	4618      	mov	r0, r3
 8007190:	f000 fedc 	bl	8007f4c <xTaskRemoveFromEventList>
 8007194:	4603      	mov	r3, r0
 8007196:	2b00      	cmp	r3, #0
 8007198:	d00e      	beq.n	80071b8 <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800719a:	687b      	ldr	r3, [r7, #4]
 800719c:	2b00      	cmp	r3, #0
 800719e:	d00b      	beq.n	80071b8 <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80071a0:	687b      	ldr	r3, [r7, #4]
 80071a2:	2201      	movs	r2, #1
 80071a4:	601a      	str	r2, [r3, #0]
 80071a6:	e007      	b.n	80071b8 <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80071a8:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80071ac:	3301      	adds	r3, #1
 80071ae:	b2db      	uxtb	r3, r3
 80071b0:	b25a      	sxtb	r2, r3
 80071b2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80071b4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 80071b8:	2301      	movs	r3, #1
 80071ba:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 80071bc:	e001      	b.n	80071c2 <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80071be:	2300      	movs	r3, #0
 80071c0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80071c2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80071c4:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80071c6:	697b      	ldr	r3, [r7, #20]
 80071c8:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80071cc:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80071ce:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 80071d0:	4618      	mov	r0, r3
 80071d2:	3740      	adds	r7, #64	@ 0x40
 80071d4:	46bd      	mov	sp, r7
 80071d6:	bd80      	pop	{r7, pc}

080071d8 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80071d8:	b580      	push	{r7, lr}
 80071da:	b08c      	sub	sp, #48	@ 0x30
 80071dc:	af00      	add	r7, sp, #0
 80071de:	60f8      	str	r0, [r7, #12]
 80071e0:	60b9      	str	r1, [r7, #8]
 80071e2:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80071e4:	2300      	movs	r3, #0
 80071e6:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80071e8:	68fb      	ldr	r3, [r7, #12]
 80071ea:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80071ec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80071ee:	2b00      	cmp	r3, #0
 80071f0:	d10b      	bne.n	800720a <xQueueReceive+0x32>
	__asm volatile
 80071f2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80071f6:	f383 8811 	msr	BASEPRI, r3
 80071fa:	f3bf 8f6f 	isb	sy
 80071fe:	f3bf 8f4f 	dsb	sy
 8007202:	623b      	str	r3, [r7, #32]
}
 8007204:	bf00      	nop
 8007206:	bf00      	nop
 8007208:	e7fd      	b.n	8007206 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800720a:	68bb      	ldr	r3, [r7, #8]
 800720c:	2b00      	cmp	r3, #0
 800720e:	d103      	bne.n	8007218 <xQueueReceive+0x40>
 8007210:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007212:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007214:	2b00      	cmp	r3, #0
 8007216:	d101      	bne.n	800721c <xQueueReceive+0x44>
 8007218:	2301      	movs	r3, #1
 800721a:	e000      	b.n	800721e <xQueueReceive+0x46>
 800721c:	2300      	movs	r3, #0
 800721e:	2b00      	cmp	r3, #0
 8007220:	d10b      	bne.n	800723a <xQueueReceive+0x62>
	__asm volatile
 8007222:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007226:	f383 8811 	msr	BASEPRI, r3
 800722a:	f3bf 8f6f 	isb	sy
 800722e:	f3bf 8f4f 	dsb	sy
 8007232:	61fb      	str	r3, [r7, #28]
}
 8007234:	bf00      	nop
 8007236:	bf00      	nop
 8007238:	e7fd      	b.n	8007236 <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800723a:	f001 f86f 	bl	800831c <xTaskGetSchedulerState>
 800723e:	4603      	mov	r3, r0
 8007240:	2b00      	cmp	r3, #0
 8007242:	d102      	bne.n	800724a <xQueueReceive+0x72>
 8007244:	687b      	ldr	r3, [r7, #4]
 8007246:	2b00      	cmp	r3, #0
 8007248:	d101      	bne.n	800724e <xQueueReceive+0x76>
 800724a:	2301      	movs	r3, #1
 800724c:	e000      	b.n	8007250 <xQueueReceive+0x78>
 800724e:	2300      	movs	r3, #0
 8007250:	2b00      	cmp	r3, #0
 8007252:	d10b      	bne.n	800726c <xQueueReceive+0x94>
	__asm volatile
 8007254:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007258:	f383 8811 	msr	BASEPRI, r3
 800725c:	f3bf 8f6f 	isb	sy
 8007260:	f3bf 8f4f 	dsb	sy
 8007264:	61bb      	str	r3, [r7, #24]
}
 8007266:	bf00      	nop
 8007268:	bf00      	nop
 800726a:	e7fd      	b.n	8007268 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800726c:	f001 fdc4 	bl	8008df8 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007270:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007272:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007274:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8007276:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007278:	2b00      	cmp	r3, #0
 800727a:	d01f      	beq.n	80072bc <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800727c:	68b9      	ldr	r1, [r7, #8]
 800727e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007280:	f000 f8f6 	bl	8007470 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8007284:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007286:	1e5a      	subs	r2, r3, #1
 8007288:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800728a:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800728c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800728e:	691b      	ldr	r3, [r3, #16]
 8007290:	2b00      	cmp	r3, #0
 8007292:	d00f      	beq.n	80072b4 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007294:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007296:	3310      	adds	r3, #16
 8007298:	4618      	mov	r0, r3
 800729a:	f000 fe57 	bl	8007f4c <xTaskRemoveFromEventList>
 800729e:	4603      	mov	r3, r0
 80072a0:	2b00      	cmp	r3, #0
 80072a2:	d007      	beq.n	80072b4 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80072a4:	4b3c      	ldr	r3, [pc, #240]	@ (8007398 <xQueueReceive+0x1c0>)
 80072a6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80072aa:	601a      	str	r2, [r3, #0]
 80072ac:	f3bf 8f4f 	dsb	sy
 80072b0:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80072b4:	f001 fdd2 	bl	8008e5c <vPortExitCritical>
				return pdPASS;
 80072b8:	2301      	movs	r3, #1
 80072ba:	e069      	b.n	8007390 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80072bc:	687b      	ldr	r3, [r7, #4]
 80072be:	2b00      	cmp	r3, #0
 80072c0:	d103      	bne.n	80072ca <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80072c2:	f001 fdcb 	bl	8008e5c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80072c6:	2300      	movs	r3, #0
 80072c8:	e062      	b.n	8007390 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 80072ca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80072cc:	2b00      	cmp	r3, #0
 80072ce:	d106      	bne.n	80072de <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80072d0:	f107 0310 	add.w	r3, r7, #16
 80072d4:	4618      	mov	r0, r3
 80072d6:	f000 fec5 	bl	8008064 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80072da:	2301      	movs	r3, #1
 80072dc:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80072de:	f001 fdbd 	bl	8008e5c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80072e2:	f000 fc0d 	bl	8007b00 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80072e6:	f001 fd87 	bl	8008df8 <vPortEnterCritical>
 80072ea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80072ec:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80072f0:	b25b      	sxtb	r3, r3
 80072f2:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80072f6:	d103      	bne.n	8007300 <xQueueReceive+0x128>
 80072f8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80072fa:	2200      	movs	r2, #0
 80072fc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8007300:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007302:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8007306:	b25b      	sxtb	r3, r3
 8007308:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800730c:	d103      	bne.n	8007316 <xQueueReceive+0x13e>
 800730e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007310:	2200      	movs	r2, #0
 8007312:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8007316:	f001 fda1 	bl	8008e5c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800731a:	1d3a      	adds	r2, r7, #4
 800731c:	f107 0310 	add.w	r3, r7, #16
 8007320:	4611      	mov	r1, r2
 8007322:	4618      	mov	r0, r3
 8007324:	f000 feb4 	bl	8008090 <xTaskCheckForTimeOut>
 8007328:	4603      	mov	r3, r0
 800732a:	2b00      	cmp	r3, #0
 800732c:	d123      	bne.n	8007376 <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800732e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007330:	f000 f916 	bl	8007560 <prvIsQueueEmpty>
 8007334:	4603      	mov	r3, r0
 8007336:	2b00      	cmp	r3, #0
 8007338:	d017      	beq.n	800736a <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800733a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800733c:	3324      	adds	r3, #36	@ 0x24
 800733e:	687a      	ldr	r2, [r7, #4]
 8007340:	4611      	mov	r1, r2
 8007342:	4618      	mov	r0, r3
 8007344:	f000 fdb0 	bl	8007ea8 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8007348:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800734a:	f000 f8b7 	bl	80074bc <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800734e:	f000 fbe5 	bl	8007b1c <xTaskResumeAll>
 8007352:	4603      	mov	r3, r0
 8007354:	2b00      	cmp	r3, #0
 8007356:	d189      	bne.n	800726c <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 8007358:	4b0f      	ldr	r3, [pc, #60]	@ (8007398 <xQueueReceive+0x1c0>)
 800735a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800735e:	601a      	str	r2, [r3, #0]
 8007360:	f3bf 8f4f 	dsb	sy
 8007364:	f3bf 8f6f 	isb	sy
 8007368:	e780      	b.n	800726c <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800736a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800736c:	f000 f8a6 	bl	80074bc <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8007370:	f000 fbd4 	bl	8007b1c <xTaskResumeAll>
 8007374:	e77a      	b.n	800726c <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8007376:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007378:	f000 f8a0 	bl	80074bc <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800737c:	f000 fbce 	bl	8007b1c <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8007380:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007382:	f000 f8ed 	bl	8007560 <prvIsQueueEmpty>
 8007386:	4603      	mov	r3, r0
 8007388:	2b00      	cmp	r3, #0
 800738a:	f43f af6f 	beq.w	800726c <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800738e:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8007390:	4618      	mov	r0, r3
 8007392:	3730      	adds	r7, #48	@ 0x30
 8007394:	46bd      	mov	sp, r7
 8007396:	bd80      	pop	{r7, pc}
 8007398:	e000ed04 	.word	0xe000ed04

0800739c <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800739c:	b580      	push	{r7, lr}
 800739e:	b086      	sub	sp, #24
 80073a0:	af00      	add	r7, sp, #0
 80073a2:	60f8      	str	r0, [r7, #12]
 80073a4:	60b9      	str	r1, [r7, #8]
 80073a6:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80073a8:	2300      	movs	r3, #0
 80073aa:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80073ac:	68fb      	ldr	r3, [r7, #12]
 80073ae:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80073b0:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80073b2:	68fb      	ldr	r3, [r7, #12]
 80073b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80073b6:	2b00      	cmp	r3, #0
 80073b8:	d10d      	bne.n	80073d6 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80073ba:	68fb      	ldr	r3, [r7, #12]
 80073bc:	681b      	ldr	r3, [r3, #0]
 80073be:	2b00      	cmp	r3, #0
 80073c0:	d14d      	bne.n	800745e <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80073c2:	68fb      	ldr	r3, [r7, #12]
 80073c4:	689b      	ldr	r3, [r3, #8]
 80073c6:	4618      	mov	r0, r3
 80073c8:	f000 ffc6 	bl	8008358 <xTaskPriorityDisinherit>
 80073cc:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80073ce:	68fb      	ldr	r3, [r7, #12]
 80073d0:	2200      	movs	r2, #0
 80073d2:	609a      	str	r2, [r3, #8]
 80073d4:	e043      	b.n	800745e <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80073d6:	687b      	ldr	r3, [r7, #4]
 80073d8:	2b00      	cmp	r3, #0
 80073da:	d119      	bne.n	8007410 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80073dc:	68fb      	ldr	r3, [r7, #12]
 80073de:	6858      	ldr	r0, [r3, #4]
 80073e0:	68fb      	ldr	r3, [r7, #12]
 80073e2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80073e4:	461a      	mov	r2, r3
 80073e6:	68b9      	ldr	r1, [r7, #8]
 80073e8:	f00e fcf9 	bl	8015dde <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80073ec:	68fb      	ldr	r3, [r7, #12]
 80073ee:	685a      	ldr	r2, [r3, #4]
 80073f0:	68fb      	ldr	r3, [r7, #12]
 80073f2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80073f4:	441a      	add	r2, r3
 80073f6:	68fb      	ldr	r3, [r7, #12]
 80073f8:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80073fa:	68fb      	ldr	r3, [r7, #12]
 80073fc:	685a      	ldr	r2, [r3, #4]
 80073fe:	68fb      	ldr	r3, [r7, #12]
 8007400:	689b      	ldr	r3, [r3, #8]
 8007402:	429a      	cmp	r2, r3
 8007404:	d32b      	bcc.n	800745e <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8007406:	68fb      	ldr	r3, [r7, #12]
 8007408:	681a      	ldr	r2, [r3, #0]
 800740a:	68fb      	ldr	r3, [r7, #12]
 800740c:	605a      	str	r2, [r3, #4]
 800740e:	e026      	b.n	800745e <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8007410:	68fb      	ldr	r3, [r7, #12]
 8007412:	68d8      	ldr	r0, [r3, #12]
 8007414:	68fb      	ldr	r3, [r7, #12]
 8007416:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007418:	461a      	mov	r2, r3
 800741a:	68b9      	ldr	r1, [r7, #8]
 800741c:	f00e fcdf 	bl	8015dde <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8007420:	68fb      	ldr	r3, [r7, #12]
 8007422:	68da      	ldr	r2, [r3, #12]
 8007424:	68fb      	ldr	r3, [r7, #12]
 8007426:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007428:	425b      	negs	r3, r3
 800742a:	441a      	add	r2, r3
 800742c:	68fb      	ldr	r3, [r7, #12]
 800742e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8007430:	68fb      	ldr	r3, [r7, #12]
 8007432:	68da      	ldr	r2, [r3, #12]
 8007434:	68fb      	ldr	r3, [r7, #12]
 8007436:	681b      	ldr	r3, [r3, #0]
 8007438:	429a      	cmp	r2, r3
 800743a:	d207      	bcs.n	800744c <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800743c:	68fb      	ldr	r3, [r7, #12]
 800743e:	689a      	ldr	r2, [r3, #8]
 8007440:	68fb      	ldr	r3, [r7, #12]
 8007442:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007444:	425b      	negs	r3, r3
 8007446:	441a      	add	r2, r3
 8007448:	68fb      	ldr	r3, [r7, #12]
 800744a:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	2b02      	cmp	r3, #2
 8007450:	d105      	bne.n	800745e <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8007452:	693b      	ldr	r3, [r7, #16]
 8007454:	2b00      	cmp	r3, #0
 8007456:	d002      	beq.n	800745e <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8007458:	693b      	ldr	r3, [r7, #16]
 800745a:	3b01      	subs	r3, #1
 800745c:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800745e:	693b      	ldr	r3, [r7, #16]
 8007460:	1c5a      	adds	r2, r3, #1
 8007462:	68fb      	ldr	r3, [r7, #12]
 8007464:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 8007466:	697b      	ldr	r3, [r7, #20]
}
 8007468:	4618      	mov	r0, r3
 800746a:	3718      	adds	r7, #24
 800746c:	46bd      	mov	sp, r7
 800746e:	bd80      	pop	{r7, pc}

08007470 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8007470:	b580      	push	{r7, lr}
 8007472:	b082      	sub	sp, #8
 8007474:	af00      	add	r7, sp, #0
 8007476:	6078      	str	r0, [r7, #4]
 8007478:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800747a:	687b      	ldr	r3, [r7, #4]
 800747c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800747e:	2b00      	cmp	r3, #0
 8007480:	d018      	beq.n	80074b4 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8007482:	687b      	ldr	r3, [r7, #4]
 8007484:	68da      	ldr	r2, [r3, #12]
 8007486:	687b      	ldr	r3, [r7, #4]
 8007488:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800748a:	441a      	add	r2, r3
 800748c:	687b      	ldr	r3, [r7, #4]
 800748e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8007490:	687b      	ldr	r3, [r7, #4]
 8007492:	68da      	ldr	r2, [r3, #12]
 8007494:	687b      	ldr	r3, [r7, #4]
 8007496:	689b      	ldr	r3, [r3, #8]
 8007498:	429a      	cmp	r2, r3
 800749a:	d303      	bcc.n	80074a4 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800749c:	687b      	ldr	r3, [r7, #4]
 800749e:	681a      	ldr	r2, [r3, #0]
 80074a0:	687b      	ldr	r3, [r7, #4]
 80074a2:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80074a4:	687b      	ldr	r3, [r7, #4]
 80074a6:	68d9      	ldr	r1, [r3, #12]
 80074a8:	687b      	ldr	r3, [r7, #4]
 80074aa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80074ac:	461a      	mov	r2, r3
 80074ae:	6838      	ldr	r0, [r7, #0]
 80074b0:	f00e fc95 	bl	8015dde <memcpy>
	}
}
 80074b4:	bf00      	nop
 80074b6:	3708      	adds	r7, #8
 80074b8:	46bd      	mov	sp, r7
 80074ba:	bd80      	pop	{r7, pc}

080074bc <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80074bc:	b580      	push	{r7, lr}
 80074be:	b084      	sub	sp, #16
 80074c0:	af00      	add	r7, sp, #0
 80074c2:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80074c4:	f001 fc98 	bl	8008df8 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80074c8:	687b      	ldr	r3, [r7, #4]
 80074ca:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80074ce:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80074d0:	e011      	b.n	80074f6 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80074d2:	687b      	ldr	r3, [r7, #4]
 80074d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80074d6:	2b00      	cmp	r3, #0
 80074d8:	d012      	beq.n	8007500 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80074da:	687b      	ldr	r3, [r7, #4]
 80074dc:	3324      	adds	r3, #36	@ 0x24
 80074de:	4618      	mov	r0, r3
 80074e0:	f000 fd34 	bl	8007f4c <xTaskRemoveFromEventList>
 80074e4:	4603      	mov	r3, r0
 80074e6:	2b00      	cmp	r3, #0
 80074e8:	d001      	beq.n	80074ee <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80074ea:	f000 fe35 	bl	8008158 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80074ee:	7bfb      	ldrb	r3, [r7, #15]
 80074f0:	3b01      	subs	r3, #1
 80074f2:	b2db      	uxtb	r3, r3
 80074f4:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80074f6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80074fa:	2b00      	cmp	r3, #0
 80074fc:	dce9      	bgt.n	80074d2 <prvUnlockQueue+0x16>
 80074fe:	e000      	b.n	8007502 <prvUnlockQueue+0x46>
					break;
 8007500:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8007502:	687b      	ldr	r3, [r7, #4]
 8007504:	22ff      	movs	r2, #255	@ 0xff
 8007506:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 800750a:	f001 fca7 	bl	8008e5c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800750e:	f001 fc73 	bl	8008df8 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8007512:	687b      	ldr	r3, [r7, #4]
 8007514:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8007518:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800751a:	e011      	b.n	8007540 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800751c:	687b      	ldr	r3, [r7, #4]
 800751e:	691b      	ldr	r3, [r3, #16]
 8007520:	2b00      	cmp	r3, #0
 8007522:	d012      	beq.n	800754a <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007524:	687b      	ldr	r3, [r7, #4]
 8007526:	3310      	adds	r3, #16
 8007528:	4618      	mov	r0, r3
 800752a:	f000 fd0f 	bl	8007f4c <xTaskRemoveFromEventList>
 800752e:	4603      	mov	r3, r0
 8007530:	2b00      	cmp	r3, #0
 8007532:	d001      	beq.n	8007538 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8007534:	f000 fe10 	bl	8008158 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8007538:	7bbb      	ldrb	r3, [r7, #14]
 800753a:	3b01      	subs	r3, #1
 800753c:	b2db      	uxtb	r3, r3
 800753e:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8007540:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007544:	2b00      	cmp	r3, #0
 8007546:	dce9      	bgt.n	800751c <prvUnlockQueue+0x60>
 8007548:	e000      	b.n	800754c <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800754a:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800754c:	687b      	ldr	r3, [r7, #4]
 800754e:	22ff      	movs	r2, #255	@ 0xff
 8007550:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 8007554:	f001 fc82 	bl	8008e5c <vPortExitCritical>
}
 8007558:	bf00      	nop
 800755a:	3710      	adds	r7, #16
 800755c:	46bd      	mov	sp, r7
 800755e:	bd80      	pop	{r7, pc}

08007560 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8007560:	b580      	push	{r7, lr}
 8007562:	b084      	sub	sp, #16
 8007564:	af00      	add	r7, sp, #0
 8007566:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8007568:	f001 fc46 	bl	8008df8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800756c:	687b      	ldr	r3, [r7, #4]
 800756e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007570:	2b00      	cmp	r3, #0
 8007572:	d102      	bne.n	800757a <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8007574:	2301      	movs	r3, #1
 8007576:	60fb      	str	r3, [r7, #12]
 8007578:	e001      	b.n	800757e <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800757a:	2300      	movs	r3, #0
 800757c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800757e:	f001 fc6d 	bl	8008e5c <vPortExitCritical>

	return xReturn;
 8007582:	68fb      	ldr	r3, [r7, #12]
}
 8007584:	4618      	mov	r0, r3
 8007586:	3710      	adds	r7, #16
 8007588:	46bd      	mov	sp, r7
 800758a:	bd80      	pop	{r7, pc}

0800758c <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800758c:	b580      	push	{r7, lr}
 800758e:	b084      	sub	sp, #16
 8007590:	af00      	add	r7, sp, #0
 8007592:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8007594:	f001 fc30 	bl	8008df8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8007598:	687b      	ldr	r3, [r7, #4]
 800759a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800759c:	687b      	ldr	r3, [r7, #4]
 800759e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80075a0:	429a      	cmp	r2, r3
 80075a2:	d102      	bne.n	80075aa <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80075a4:	2301      	movs	r3, #1
 80075a6:	60fb      	str	r3, [r7, #12]
 80075a8:	e001      	b.n	80075ae <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80075aa:	2300      	movs	r3, #0
 80075ac:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80075ae:	f001 fc55 	bl	8008e5c <vPortExitCritical>

	return xReturn;
 80075b2:	68fb      	ldr	r3, [r7, #12]
}
 80075b4:	4618      	mov	r0, r3
 80075b6:	3710      	adds	r7, #16
 80075b8:	46bd      	mov	sp, r7
 80075ba:	bd80      	pop	{r7, pc}

080075bc <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 80075bc:	b480      	push	{r7}
 80075be:	b085      	sub	sp, #20
 80075c0:	af00      	add	r7, sp, #0
 80075c2:	6078      	str	r0, [r7, #4]
 80075c4:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80075c6:	2300      	movs	r3, #0
 80075c8:	60fb      	str	r3, [r7, #12]
 80075ca:	e014      	b.n	80075f6 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80075cc:	4a0f      	ldr	r2, [pc, #60]	@ (800760c <vQueueAddToRegistry+0x50>)
 80075ce:	68fb      	ldr	r3, [r7, #12]
 80075d0:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80075d4:	2b00      	cmp	r3, #0
 80075d6:	d10b      	bne.n	80075f0 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80075d8:	490c      	ldr	r1, [pc, #48]	@ (800760c <vQueueAddToRegistry+0x50>)
 80075da:	68fb      	ldr	r3, [r7, #12]
 80075dc:	683a      	ldr	r2, [r7, #0]
 80075de:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 80075e2:	4a0a      	ldr	r2, [pc, #40]	@ (800760c <vQueueAddToRegistry+0x50>)
 80075e4:	68fb      	ldr	r3, [r7, #12]
 80075e6:	00db      	lsls	r3, r3, #3
 80075e8:	4413      	add	r3, r2
 80075ea:	687a      	ldr	r2, [r7, #4]
 80075ec:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 80075ee:	e006      	b.n	80075fe <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80075f0:	68fb      	ldr	r3, [r7, #12]
 80075f2:	3301      	adds	r3, #1
 80075f4:	60fb      	str	r3, [r7, #12]
 80075f6:	68fb      	ldr	r3, [r7, #12]
 80075f8:	2b07      	cmp	r3, #7
 80075fa:	d9e7      	bls.n	80075cc <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80075fc:	bf00      	nop
 80075fe:	bf00      	nop
 8007600:	3714      	adds	r7, #20
 8007602:	46bd      	mov	sp, r7
 8007604:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007608:	4770      	bx	lr
 800760a:	bf00      	nop
 800760c:	20004f40 	.word	0x20004f40

08007610 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8007610:	b580      	push	{r7, lr}
 8007612:	b086      	sub	sp, #24
 8007614:	af00      	add	r7, sp, #0
 8007616:	60f8      	str	r0, [r7, #12]
 8007618:	60b9      	str	r1, [r7, #8]
 800761a:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800761c:	68fb      	ldr	r3, [r7, #12]
 800761e:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8007620:	f001 fbea 	bl	8008df8 <vPortEnterCritical>
 8007624:	697b      	ldr	r3, [r7, #20]
 8007626:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800762a:	b25b      	sxtb	r3, r3
 800762c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8007630:	d103      	bne.n	800763a <vQueueWaitForMessageRestricted+0x2a>
 8007632:	697b      	ldr	r3, [r7, #20]
 8007634:	2200      	movs	r2, #0
 8007636:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800763a:	697b      	ldr	r3, [r7, #20]
 800763c:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8007640:	b25b      	sxtb	r3, r3
 8007642:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8007646:	d103      	bne.n	8007650 <vQueueWaitForMessageRestricted+0x40>
 8007648:	697b      	ldr	r3, [r7, #20]
 800764a:	2200      	movs	r2, #0
 800764c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8007650:	f001 fc04 	bl	8008e5c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8007654:	697b      	ldr	r3, [r7, #20]
 8007656:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007658:	2b00      	cmp	r3, #0
 800765a:	d106      	bne.n	800766a <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800765c:	697b      	ldr	r3, [r7, #20]
 800765e:	3324      	adds	r3, #36	@ 0x24
 8007660:	687a      	ldr	r2, [r7, #4]
 8007662:	68b9      	ldr	r1, [r7, #8]
 8007664:	4618      	mov	r0, r3
 8007666:	f000 fc45 	bl	8007ef4 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800766a:	6978      	ldr	r0, [r7, #20]
 800766c:	f7ff ff26 	bl	80074bc <prvUnlockQueue>
	}
 8007670:	bf00      	nop
 8007672:	3718      	adds	r7, #24
 8007674:	46bd      	mov	sp, r7
 8007676:	bd80      	pop	{r7, pc}

08007678 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8007678:	b580      	push	{r7, lr}
 800767a:	b08e      	sub	sp, #56	@ 0x38
 800767c:	af04      	add	r7, sp, #16
 800767e:	60f8      	str	r0, [r7, #12]
 8007680:	60b9      	str	r1, [r7, #8]
 8007682:	607a      	str	r2, [r7, #4]
 8007684:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8007686:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007688:	2b00      	cmp	r3, #0
 800768a:	d10b      	bne.n	80076a4 <xTaskCreateStatic+0x2c>
	__asm volatile
 800768c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007690:	f383 8811 	msr	BASEPRI, r3
 8007694:	f3bf 8f6f 	isb	sy
 8007698:	f3bf 8f4f 	dsb	sy
 800769c:	623b      	str	r3, [r7, #32]
}
 800769e:	bf00      	nop
 80076a0:	bf00      	nop
 80076a2:	e7fd      	b.n	80076a0 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 80076a4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80076a6:	2b00      	cmp	r3, #0
 80076a8:	d10b      	bne.n	80076c2 <xTaskCreateStatic+0x4a>
	__asm volatile
 80076aa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80076ae:	f383 8811 	msr	BASEPRI, r3
 80076b2:	f3bf 8f6f 	isb	sy
 80076b6:	f3bf 8f4f 	dsb	sy
 80076ba:	61fb      	str	r3, [r7, #28]
}
 80076bc:	bf00      	nop
 80076be:	bf00      	nop
 80076c0:	e7fd      	b.n	80076be <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80076c2:	235c      	movs	r3, #92	@ 0x5c
 80076c4:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80076c6:	693b      	ldr	r3, [r7, #16]
 80076c8:	2b5c      	cmp	r3, #92	@ 0x5c
 80076ca:	d00b      	beq.n	80076e4 <xTaskCreateStatic+0x6c>
	__asm volatile
 80076cc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80076d0:	f383 8811 	msr	BASEPRI, r3
 80076d4:	f3bf 8f6f 	isb	sy
 80076d8:	f3bf 8f4f 	dsb	sy
 80076dc:	61bb      	str	r3, [r7, #24]
}
 80076de:	bf00      	nop
 80076e0:	bf00      	nop
 80076e2:	e7fd      	b.n	80076e0 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80076e4:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80076e6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80076e8:	2b00      	cmp	r3, #0
 80076ea:	d01e      	beq.n	800772a <xTaskCreateStatic+0xb2>
 80076ec:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80076ee:	2b00      	cmp	r3, #0
 80076f0:	d01b      	beq.n	800772a <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80076f2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80076f4:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80076f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80076f8:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80076fa:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80076fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80076fe:	2202      	movs	r2, #2
 8007700:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8007704:	2300      	movs	r3, #0
 8007706:	9303      	str	r3, [sp, #12]
 8007708:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800770a:	9302      	str	r3, [sp, #8]
 800770c:	f107 0314 	add.w	r3, r7, #20
 8007710:	9301      	str	r3, [sp, #4]
 8007712:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007714:	9300      	str	r3, [sp, #0]
 8007716:	683b      	ldr	r3, [r7, #0]
 8007718:	687a      	ldr	r2, [r7, #4]
 800771a:	68b9      	ldr	r1, [r7, #8]
 800771c:	68f8      	ldr	r0, [r7, #12]
 800771e:	f000 f850 	bl	80077c2 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8007722:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8007724:	f000 f8de 	bl	80078e4 <prvAddNewTaskToReadyList>
 8007728:	e001      	b.n	800772e <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 800772a:	2300      	movs	r3, #0
 800772c:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800772e:	697b      	ldr	r3, [r7, #20]
	}
 8007730:	4618      	mov	r0, r3
 8007732:	3728      	adds	r7, #40	@ 0x28
 8007734:	46bd      	mov	sp, r7
 8007736:	bd80      	pop	{r7, pc}

08007738 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8007738:	b580      	push	{r7, lr}
 800773a:	b08c      	sub	sp, #48	@ 0x30
 800773c:	af04      	add	r7, sp, #16
 800773e:	60f8      	str	r0, [r7, #12]
 8007740:	60b9      	str	r1, [r7, #8]
 8007742:	603b      	str	r3, [r7, #0]
 8007744:	4613      	mov	r3, r2
 8007746:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8007748:	88fb      	ldrh	r3, [r7, #6]
 800774a:	009b      	lsls	r3, r3, #2
 800774c:	4618      	mov	r0, r3
 800774e:	f001 fc75 	bl	800903c <pvPortMalloc>
 8007752:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8007754:	697b      	ldr	r3, [r7, #20]
 8007756:	2b00      	cmp	r3, #0
 8007758:	d00e      	beq.n	8007778 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800775a:	205c      	movs	r0, #92	@ 0x5c
 800775c:	f001 fc6e 	bl	800903c <pvPortMalloc>
 8007760:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8007762:	69fb      	ldr	r3, [r7, #28]
 8007764:	2b00      	cmp	r3, #0
 8007766:	d003      	beq.n	8007770 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8007768:	69fb      	ldr	r3, [r7, #28]
 800776a:	697a      	ldr	r2, [r7, #20]
 800776c:	631a      	str	r2, [r3, #48]	@ 0x30
 800776e:	e005      	b.n	800777c <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8007770:	6978      	ldr	r0, [r7, #20]
 8007772:	f001 fd31 	bl	80091d8 <vPortFree>
 8007776:	e001      	b.n	800777c <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8007778:	2300      	movs	r3, #0
 800777a:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800777c:	69fb      	ldr	r3, [r7, #28]
 800777e:	2b00      	cmp	r3, #0
 8007780:	d017      	beq.n	80077b2 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8007782:	69fb      	ldr	r3, [r7, #28]
 8007784:	2200      	movs	r2, #0
 8007786:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800778a:	88fa      	ldrh	r2, [r7, #6]
 800778c:	2300      	movs	r3, #0
 800778e:	9303      	str	r3, [sp, #12]
 8007790:	69fb      	ldr	r3, [r7, #28]
 8007792:	9302      	str	r3, [sp, #8]
 8007794:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007796:	9301      	str	r3, [sp, #4]
 8007798:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800779a:	9300      	str	r3, [sp, #0]
 800779c:	683b      	ldr	r3, [r7, #0]
 800779e:	68b9      	ldr	r1, [r7, #8]
 80077a0:	68f8      	ldr	r0, [r7, #12]
 80077a2:	f000 f80e 	bl	80077c2 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80077a6:	69f8      	ldr	r0, [r7, #28]
 80077a8:	f000 f89c 	bl	80078e4 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80077ac:	2301      	movs	r3, #1
 80077ae:	61bb      	str	r3, [r7, #24]
 80077b0:	e002      	b.n	80077b8 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80077b2:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80077b6:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80077b8:	69bb      	ldr	r3, [r7, #24]
	}
 80077ba:	4618      	mov	r0, r3
 80077bc:	3720      	adds	r7, #32
 80077be:	46bd      	mov	sp, r7
 80077c0:	bd80      	pop	{r7, pc}

080077c2 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80077c2:	b580      	push	{r7, lr}
 80077c4:	b088      	sub	sp, #32
 80077c6:	af00      	add	r7, sp, #0
 80077c8:	60f8      	str	r0, [r7, #12]
 80077ca:	60b9      	str	r1, [r7, #8]
 80077cc:	607a      	str	r2, [r7, #4]
 80077ce:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80077d0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80077d2:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 80077d4:	687b      	ldr	r3, [r7, #4]
 80077d6:	009b      	lsls	r3, r3, #2
 80077d8:	461a      	mov	r2, r3
 80077da:	21a5      	movs	r1, #165	@ 0xa5
 80077dc:	f00e fa36 	bl	8015c4c <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80077e0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80077e2:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80077e4:	687b      	ldr	r3, [r7, #4]
 80077e6:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80077ea:	3b01      	subs	r3, #1
 80077ec:	009b      	lsls	r3, r3, #2
 80077ee:	4413      	add	r3, r2
 80077f0:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80077f2:	69bb      	ldr	r3, [r7, #24]
 80077f4:	f023 0307 	bic.w	r3, r3, #7
 80077f8:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80077fa:	69bb      	ldr	r3, [r7, #24]
 80077fc:	f003 0307 	and.w	r3, r3, #7
 8007800:	2b00      	cmp	r3, #0
 8007802:	d00b      	beq.n	800781c <prvInitialiseNewTask+0x5a>
	__asm volatile
 8007804:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007808:	f383 8811 	msr	BASEPRI, r3
 800780c:	f3bf 8f6f 	isb	sy
 8007810:	f3bf 8f4f 	dsb	sy
 8007814:	617b      	str	r3, [r7, #20]
}
 8007816:	bf00      	nop
 8007818:	bf00      	nop
 800781a:	e7fd      	b.n	8007818 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800781c:	68bb      	ldr	r3, [r7, #8]
 800781e:	2b00      	cmp	r3, #0
 8007820:	d01f      	beq.n	8007862 <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8007822:	2300      	movs	r3, #0
 8007824:	61fb      	str	r3, [r7, #28]
 8007826:	e012      	b.n	800784e <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8007828:	68ba      	ldr	r2, [r7, #8]
 800782a:	69fb      	ldr	r3, [r7, #28]
 800782c:	4413      	add	r3, r2
 800782e:	7819      	ldrb	r1, [r3, #0]
 8007830:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007832:	69fb      	ldr	r3, [r7, #28]
 8007834:	4413      	add	r3, r2
 8007836:	3334      	adds	r3, #52	@ 0x34
 8007838:	460a      	mov	r2, r1
 800783a:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800783c:	68ba      	ldr	r2, [r7, #8]
 800783e:	69fb      	ldr	r3, [r7, #28]
 8007840:	4413      	add	r3, r2
 8007842:	781b      	ldrb	r3, [r3, #0]
 8007844:	2b00      	cmp	r3, #0
 8007846:	d006      	beq.n	8007856 <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8007848:	69fb      	ldr	r3, [r7, #28]
 800784a:	3301      	adds	r3, #1
 800784c:	61fb      	str	r3, [r7, #28]
 800784e:	69fb      	ldr	r3, [r7, #28]
 8007850:	2b0f      	cmp	r3, #15
 8007852:	d9e9      	bls.n	8007828 <prvInitialiseNewTask+0x66>
 8007854:	e000      	b.n	8007858 <prvInitialiseNewTask+0x96>
			{
				break;
 8007856:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8007858:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800785a:	2200      	movs	r2, #0
 800785c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8007860:	e003      	b.n	800786a <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8007862:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007864:	2200      	movs	r2, #0
 8007866:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800786a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800786c:	2b37      	cmp	r3, #55	@ 0x37
 800786e:	d901      	bls.n	8007874 <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8007870:	2337      	movs	r3, #55	@ 0x37
 8007872:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8007874:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007876:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8007878:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800787a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800787c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800787e:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8007880:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007882:	2200      	movs	r2, #0
 8007884:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8007886:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007888:	3304      	adds	r3, #4
 800788a:	4618      	mov	r0, r3
 800788c:	f7ff f966 	bl	8006b5c <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8007890:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007892:	3318      	adds	r3, #24
 8007894:	4618      	mov	r0, r3
 8007896:	f7ff f961 	bl	8006b5c <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800789a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800789c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800789e:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80078a0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80078a2:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 80078a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80078a8:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80078aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80078ac:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80078ae:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80078b0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80078b2:	2200      	movs	r2, #0
 80078b4:	655a      	str	r2, [r3, #84]	@ 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80078b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80078b8:	2200      	movs	r2, #0
 80078ba:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80078be:	683a      	ldr	r2, [r7, #0]
 80078c0:	68f9      	ldr	r1, [r7, #12]
 80078c2:	69b8      	ldr	r0, [r7, #24]
 80078c4:	f001 f966 	bl	8008b94 <pxPortInitialiseStack>
 80078c8:	4602      	mov	r2, r0
 80078ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80078cc:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80078ce:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80078d0:	2b00      	cmp	r3, #0
 80078d2:	d002      	beq.n	80078da <prvInitialiseNewTask+0x118>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80078d4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80078d6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80078d8:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80078da:	bf00      	nop
 80078dc:	3720      	adds	r7, #32
 80078de:	46bd      	mov	sp, r7
 80078e0:	bd80      	pop	{r7, pc}
	...

080078e4 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80078e4:	b580      	push	{r7, lr}
 80078e6:	b082      	sub	sp, #8
 80078e8:	af00      	add	r7, sp, #0
 80078ea:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80078ec:	f001 fa84 	bl	8008df8 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80078f0:	4b2d      	ldr	r3, [pc, #180]	@ (80079a8 <prvAddNewTaskToReadyList+0xc4>)
 80078f2:	681b      	ldr	r3, [r3, #0]
 80078f4:	3301      	adds	r3, #1
 80078f6:	4a2c      	ldr	r2, [pc, #176]	@ (80079a8 <prvAddNewTaskToReadyList+0xc4>)
 80078f8:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80078fa:	4b2c      	ldr	r3, [pc, #176]	@ (80079ac <prvAddNewTaskToReadyList+0xc8>)
 80078fc:	681b      	ldr	r3, [r3, #0]
 80078fe:	2b00      	cmp	r3, #0
 8007900:	d109      	bne.n	8007916 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8007902:	4a2a      	ldr	r2, [pc, #168]	@ (80079ac <prvAddNewTaskToReadyList+0xc8>)
 8007904:	687b      	ldr	r3, [r7, #4]
 8007906:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8007908:	4b27      	ldr	r3, [pc, #156]	@ (80079a8 <prvAddNewTaskToReadyList+0xc4>)
 800790a:	681b      	ldr	r3, [r3, #0]
 800790c:	2b01      	cmp	r3, #1
 800790e:	d110      	bne.n	8007932 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8007910:	f000 fc46 	bl	80081a0 <prvInitialiseTaskLists>
 8007914:	e00d      	b.n	8007932 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8007916:	4b26      	ldr	r3, [pc, #152]	@ (80079b0 <prvAddNewTaskToReadyList+0xcc>)
 8007918:	681b      	ldr	r3, [r3, #0]
 800791a:	2b00      	cmp	r3, #0
 800791c:	d109      	bne.n	8007932 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800791e:	4b23      	ldr	r3, [pc, #140]	@ (80079ac <prvAddNewTaskToReadyList+0xc8>)
 8007920:	681b      	ldr	r3, [r3, #0]
 8007922:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007924:	687b      	ldr	r3, [r7, #4]
 8007926:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007928:	429a      	cmp	r2, r3
 800792a:	d802      	bhi.n	8007932 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800792c:	4a1f      	ldr	r2, [pc, #124]	@ (80079ac <prvAddNewTaskToReadyList+0xc8>)
 800792e:	687b      	ldr	r3, [r7, #4]
 8007930:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8007932:	4b20      	ldr	r3, [pc, #128]	@ (80079b4 <prvAddNewTaskToReadyList+0xd0>)
 8007934:	681b      	ldr	r3, [r3, #0]
 8007936:	3301      	adds	r3, #1
 8007938:	4a1e      	ldr	r2, [pc, #120]	@ (80079b4 <prvAddNewTaskToReadyList+0xd0>)
 800793a:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800793c:	4b1d      	ldr	r3, [pc, #116]	@ (80079b4 <prvAddNewTaskToReadyList+0xd0>)
 800793e:	681a      	ldr	r2, [r3, #0]
 8007940:	687b      	ldr	r3, [r7, #4]
 8007942:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8007944:	687b      	ldr	r3, [r7, #4]
 8007946:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007948:	4b1b      	ldr	r3, [pc, #108]	@ (80079b8 <prvAddNewTaskToReadyList+0xd4>)
 800794a:	681b      	ldr	r3, [r3, #0]
 800794c:	429a      	cmp	r2, r3
 800794e:	d903      	bls.n	8007958 <prvAddNewTaskToReadyList+0x74>
 8007950:	687b      	ldr	r3, [r7, #4]
 8007952:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007954:	4a18      	ldr	r2, [pc, #96]	@ (80079b8 <prvAddNewTaskToReadyList+0xd4>)
 8007956:	6013      	str	r3, [r2, #0]
 8007958:	687b      	ldr	r3, [r7, #4]
 800795a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800795c:	4613      	mov	r3, r2
 800795e:	009b      	lsls	r3, r3, #2
 8007960:	4413      	add	r3, r2
 8007962:	009b      	lsls	r3, r3, #2
 8007964:	4a15      	ldr	r2, [pc, #84]	@ (80079bc <prvAddNewTaskToReadyList+0xd8>)
 8007966:	441a      	add	r2, r3
 8007968:	687b      	ldr	r3, [r7, #4]
 800796a:	3304      	adds	r3, #4
 800796c:	4619      	mov	r1, r3
 800796e:	4610      	mov	r0, r2
 8007970:	f7ff f901 	bl	8006b76 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8007974:	f001 fa72 	bl	8008e5c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8007978:	4b0d      	ldr	r3, [pc, #52]	@ (80079b0 <prvAddNewTaskToReadyList+0xcc>)
 800797a:	681b      	ldr	r3, [r3, #0]
 800797c:	2b00      	cmp	r3, #0
 800797e:	d00e      	beq.n	800799e <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8007980:	4b0a      	ldr	r3, [pc, #40]	@ (80079ac <prvAddNewTaskToReadyList+0xc8>)
 8007982:	681b      	ldr	r3, [r3, #0]
 8007984:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007986:	687b      	ldr	r3, [r7, #4]
 8007988:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800798a:	429a      	cmp	r2, r3
 800798c:	d207      	bcs.n	800799e <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800798e:	4b0c      	ldr	r3, [pc, #48]	@ (80079c0 <prvAddNewTaskToReadyList+0xdc>)
 8007990:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007994:	601a      	str	r2, [r3, #0]
 8007996:	f3bf 8f4f 	dsb	sy
 800799a:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800799e:	bf00      	nop
 80079a0:	3708      	adds	r7, #8
 80079a2:	46bd      	mov	sp, r7
 80079a4:	bd80      	pop	{r7, pc}
 80079a6:	bf00      	nop
 80079a8:	20005454 	.word	0x20005454
 80079ac:	20004f80 	.word	0x20004f80
 80079b0:	20005460 	.word	0x20005460
 80079b4:	20005470 	.word	0x20005470
 80079b8:	2000545c 	.word	0x2000545c
 80079bc:	20004f84 	.word	0x20004f84
 80079c0:	e000ed04 	.word	0xe000ed04

080079c4 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80079c4:	b580      	push	{r7, lr}
 80079c6:	b084      	sub	sp, #16
 80079c8:	af00      	add	r7, sp, #0
 80079ca:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80079cc:	2300      	movs	r3, #0
 80079ce:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80079d0:	687b      	ldr	r3, [r7, #4]
 80079d2:	2b00      	cmp	r3, #0
 80079d4:	d018      	beq.n	8007a08 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80079d6:	4b14      	ldr	r3, [pc, #80]	@ (8007a28 <vTaskDelay+0x64>)
 80079d8:	681b      	ldr	r3, [r3, #0]
 80079da:	2b00      	cmp	r3, #0
 80079dc:	d00b      	beq.n	80079f6 <vTaskDelay+0x32>
	__asm volatile
 80079de:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80079e2:	f383 8811 	msr	BASEPRI, r3
 80079e6:	f3bf 8f6f 	isb	sy
 80079ea:	f3bf 8f4f 	dsb	sy
 80079ee:	60bb      	str	r3, [r7, #8]
}
 80079f0:	bf00      	nop
 80079f2:	bf00      	nop
 80079f4:	e7fd      	b.n	80079f2 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 80079f6:	f000 f883 	bl	8007b00 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80079fa:	2100      	movs	r1, #0
 80079fc:	6878      	ldr	r0, [r7, #4]
 80079fe:	f000 fd1b 	bl	8008438 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8007a02:	f000 f88b 	bl	8007b1c <xTaskResumeAll>
 8007a06:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8007a08:	68fb      	ldr	r3, [r7, #12]
 8007a0a:	2b00      	cmp	r3, #0
 8007a0c:	d107      	bne.n	8007a1e <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 8007a0e:	4b07      	ldr	r3, [pc, #28]	@ (8007a2c <vTaskDelay+0x68>)
 8007a10:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007a14:	601a      	str	r2, [r3, #0]
 8007a16:	f3bf 8f4f 	dsb	sy
 8007a1a:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8007a1e:	bf00      	nop
 8007a20:	3710      	adds	r7, #16
 8007a22:	46bd      	mov	sp, r7
 8007a24:	bd80      	pop	{r7, pc}
 8007a26:	bf00      	nop
 8007a28:	2000547c 	.word	0x2000547c
 8007a2c:	e000ed04 	.word	0xe000ed04

08007a30 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8007a30:	b580      	push	{r7, lr}
 8007a32:	b08a      	sub	sp, #40	@ 0x28
 8007a34:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8007a36:	2300      	movs	r3, #0
 8007a38:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8007a3a:	2300      	movs	r3, #0
 8007a3c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8007a3e:	463a      	mov	r2, r7
 8007a40:	1d39      	adds	r1, r7, #4
 8007a42:	f107 0308 	add.w	r3, r7, #8
 8007a46:	4618      	mov	r0, r3
 8007a48:	f7ff f834 	bl	8006ab4 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8007a4c:	6839      	ldr	r1, [r7, #0]
 8007a4e:	687b      	ldr	r3, [r7, #4]
 8007a50:	68ba      	ldr	r2, [r7, #8]
 8007a52:	9202      	str	r2, [sp, #8]
 8007a54:	9301      	str	r3, [sp, #4]
 8007a56:	2300      	movs	r3, #0
 8007a58:	9300      	str	r3, [sp, #0]
 8007a5a:	2300      	movs	r3, #0
 8007a5c:	460a      	mov	r2, r1
 8007a5e:	4922      	ldr	r1, [pc, #136]	@ (8007ae8 <vTaskStartScheduler+0xb8>)
 8007a60:	4822      	ldr	r0, [pc, #136]	@ (8007aec <vTaskStartScheduler+0xbc>)
 8007a62:	f7ff fe09 	bl	8007678 <xTaskCreateStatic>
 8007a66:	4603      	mov	r3, r0
 8007a68:	4a21      	ldr	r2, [pc, #132]	@ (8007af0 <vTaskStartScheduler+0xc0>)
 8007a6a:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8007a6c:	4b20      	ldr	r3, [pc, #128]	@ (8007af0 <vTaskStartScheduler+0xc0>)
 8007a6e:	681b      	ldr	r3, [r3, #0]
 8007a70:	2b00      	cmp	r3, #0
 8007a72:	d002      	beq.n	8007a7a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8007a74:	2301      	movs	r3, #1
 8007a76:	617b      	str	r3, [r7, #20]
 8007a78:	e001      	b.n	8007a7e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8007a7a:	2300      	movs	r3, #0
 8007a7c:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8007a7e:	697b      	ldr	r3, [r7, #20]
 8007a80:	2b01      	cmp	r3, #1
 8007a82:	d102      	bne.n	8007a8a <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8007a84:	f000 fd2c 	bl	80084e0 <xTimerCreateTimerTask>
 8007a88:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8007a8a:	697b      	ldr	r3, [r7, #20]
 8007a8c:	2b01      	cmp	r3, #1
 8007a8e:	d116      	bne.n	8007abe <vTaskStartScheduler+0x8e>
	__asm volatile
 8007a90:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007a94:	f383 8811 	msr	BASEPRI, r3
 8007a98:	f3bf 8f6f 	isb	sy
 8007a9c:	f3bf 8f4f 	dsb	sy
 8007aa0:	613b      	str	r3, [r7, #16]
}
 8007aa2:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8007aa4:	4b13      	ldr	r3, [pc, #76]	@ (8007af4 <vTaskStartScheduler+0xc4>)
 8007aa6:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8007aaa:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8007aac:	4b12      	ldr	r3, [pc, #72]	@ (8007af8 <vTaskStartScheduler+0xc8>)
 8007aae:	2201      	movs	r2, #1
 8007ab0:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8007ab2:	4b12      	ldr	r3, [pc, #72]	@ (8007afc <vTaskStartScheduler+0xcc>)
 8007ab4:	2200      	movs	r2, #0
 8007ab6:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8007ab8:	f001 f8fa 	bl	8008cb0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8007abc:	e00f      	b.n	8007ade <vTaskStartScheduler+0xae>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8007abe:	697b      	ldr	r3, [r7, #20]
 8007ac0:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8007ac4:	d10b      	bne.n	8007ade <vTaskStartScheduler+0xae>
	__asm volatile
 8007ac6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007aca:	f383 8811 	msr	BASEPRI, r3
 8007ace:	f3bf 8f6f 	isb	sy
 8007ad2:	f3bf 8f4f 	dsb	sy
 8007ad6:	60fb      	str	r3, [r7, #12]
}
 8007ad8:	bf00      	nop
 8007ada:	bf00      	nop
 8007adc:	e7fd      	b.n	8007ada <vTaskStartScheduler+0xaa>
}
 8007ade:	bf00      	nop
 8007ae0:	3718      	adds	r7, #24
 8007ae2:	46bd      	mov	sp, r7
 8007ae4:	bd80      	pop	{r7, pc}
 8007ae6:	bf00      	nop
 8007ae8:	08016c50 	.word	0x08016c50
 8007aec:	08008171 	.word	0x08008171
 8007af0:	20005478 	.word	0x20005478
 8007af4:	20005474 	.word	0x20005474
 8007af8:	20005460 	.word	0x20005460
 8007afc:	20005458 	.word	0x20005458

08007b00 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8007b00:	b480      	push	{r7}
 8007b02:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8007b04:	4b04      	ldr	r3, [pc, #16]	@ (8007b18 <vTaskSuspendAll+0x18>)
 8007b06:	681b      	ldr	r3, [r3, #0]
 8007b08:	3301      	adds	r3, #1
 8007b0a:	4a03      	ldr	r2, [pc, #12]	@ (8007b18 <vTaskSuspendAll+0x18>)
 8007b0c:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8007b0e:	bf00      	nop
 8007b10:	46bd      	mov	sp, r7
 8007b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b16:	4770      	bx	lr
 8007b18:	2000547c 	.word	0x2000547c

08007b1c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8007b1c:	b580      	push	{r7, lr}
 8007b1e:	b084      	sub	sp, #16
 8007b20:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8007b22:	2300      	movs	r3, #0
 8007b24:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8007b26:	2300      	movs	r3, #0
 8007b28:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8007b2a:	4b42      	ldr	r3, [pc, #264]	@ (8007c34 <xTaskResumeAll+0x118>)
 8007b2c:	681b      	ldr	r3, [r3, #0]
 8007b2e:	2b00      	cmp	r3, #0
 8007b30:	d10b      	bne.n	8007b4a <xTaskResumeAll+0x2e>
	__asm volatile
 8007b32:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007b36:	f383 8811 	msr	BASEPRI, r3
 8007b3a:	f3bf 8f6f 	isb	sy
 8007b3e:	f3bf 8f4f 	dsb	sy
 8007b42:	603b      	str	r3, [r7, #0]
}
 8007b44:	bf00      	nop
 8007b46:	bf00      	nop
 8007b48:	e7fd      	b.n	8007b46 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8007b4a:	f001 f955 	bl	8008df8 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8007b4e:	4b39      	ldr	r3, [pc, #228]	@ (8007c34 <xTaskResumeAll+0x118>)
 8007b50:	681b      	ldr	r3, [r3, #0]
 8007b52:	3b01      	subs	r3, #1
 8007b54:	4a37      	ldr	r2, [pc, #220]	@ (8007c34 <xTaskResumeAll+0x118>)
 8007b56:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007b58:	4b36      	ldr	r3, [pc, #216]	@ (8007c34 <xTaskResumeAll+0x118>)
 8007b5a:	681b      	ldr	r3, [r3, #0]
 8007b5c:	2b00      	cmp	r3, #0
 8007b5e:	d162      	bne.n	8007c26 <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8007b60:	4b35      	ldr	r3, [pc, #212]	@ (8007c38 <xTaskResumeAll+0x11c>)
 8007b62:	681b      	ldr	r3, [r3, #0]
 8007b64:	2b00      	cmp	r3, #0
 8007b66:	d05e      	beq.n	8007c26 <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8007b68:	e02f      	b.n	8007bca <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007b6a:	4b34      	ldr	r3, [pc, #208]	@ (8007c3c <xTaskResumeAll+0x120>)
 8007b6c:	68db      	ldr	r3, [r3, #12]
 8007b6e:	68db      	ldr	r3, [r3, #12]
 8007b70:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8007b72:	68fb      	ldr	r3, [r7, #12]
 8007b74:	3318      	adds	r3, #24
 8007b76:	4618      	mov	r0, r3
 8007b78:	f7ff f85a 	bl	8006c30 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007b7c:	68fb      	ldr	r3, [r7, #12]
 8007b7e:	3304      	adds	r3, #4
 8007b80:	4618      	mov	r0, r3
 8007b82:	f7ff f855 	bl	8006c30 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8007b86:	68fb      	ldr	r3, [r7, #12]
 8007b88:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007b8a:	4b2d      	ldr	r3, [pc, #180]	@ (8007c40 <xTaskResumeAll+0x124>)
 8007b8c:	681b      	ldr	r3, [r3, #0]
 8007b8e:	429a      	cmp	r2, r3
 8007b90:	d903      	bls.n	8007b9a <xTaskResumeAll+0x7e>
 8007b92:	68fb      	ldr	r3, [r7, #12]
 8007b94:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007b96:	4a2a      	ldr	r2, [pc, #168]	@ (8007c40 <xTaskResumeAll+0x124>)
 8007b98:	6013      	str	r3, [r2, #0]
 8007b9a:	68fb      	ldr	r3, [r7, #12]
 8007b9c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007b9e:	4613      	mov	r3, r2
 8007ba0:	009b      	lsls	r3, r3, #2
 8007ba2:	4413      	add	r3, r2
 8007ba4:	009b      	lsls	r3, r3, #2
 8007ba6:	4a27      	ldr	r2, [pc, #156]	@ (8007c44 <xTaskResumeAll+0x128>)
 8007ba8:	441a      	add	r2, r3
 8007baa:	68fb      	ldr	r3, [r7, #12]
 8007bac:	3304      	adds	r3, #4
 8007bae:	4619      	mov	r1, r3
 8007bb0:	4610      	mov	r0, r2
 8007bb2:	f7fe ffe0 	bl	8006b76 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8007bb6:	68fb      	ldr	r3, [r7, #12]
 8007bb8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007bba:	4b23      	ldr	r3, [pc, #140]	@ (8007c48 <xTaskResumeAll+0x12c>)
 8007bbc:	681b      	ldr	r3, [r3, #0]
 8007bbe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007bc0:	429a      	cmp	r2, r3
 8007bc2:	d302      	bcc.n	8007bca <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 8007bc4:	4b21      	ldr	r3, [pc, #132]	@ (8007c4c <xTaskResumeAll+0x130>)
 8007bc6:	2201      	movs	r2, #1
 8007bc8:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8007bca:	4b1c      	ldr	r3, [pc, #112]	@ (8007c3c <xTaskResumeAll+0x120>)
 8007bcc:	681b      	ldr	r3, [r3, #0]
 8007bce:	2b00      	cmp	r3, #0
 8007bd0:	d1cb      	bne.n	8007b6a <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8007bd2:	68fb      	ldr	r3, [r7, #12]
 8007bd4:	2b00      	cmp	r3, #0
 8007bd6:	d001      	beq.n	8007bdc <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8007bd8:	f000 fb80 	bl	80082dc <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8007bdc:	4b1c      	ldr	r3, [pc, #112]	@ (8007c50 <xTaskResumeAll+0x134>)
 8007bde:	681b      	ldr	r3, [r3, #0]
 8007be0:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8007be2:	687b      	ldr	r3, [r7, #4]
 8007be4:	2b00      	cmp	r3, #0
 8007be6:	d010      	beq.n	8007c0a <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8007be8:	f000 f846 	bl	8007c78 <xTaskIncrementTick>
 8007bec:	4603      	mov	r3, r0
 8007bee:	2b00      	cmp	r3, #0
 8007bf0:	d002      	beq.n	8007bf8 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 8007bf2:	4b16      	ldr	r3, [pc, #88]	@ (8007c4c <xTaskResumeAll+0x130>)
 8007bf4:	2201      	movs	r2, #1
 8007bf6:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8007bf8:	687b      	ldr	r3, [r7, #4]
 8007bfa:	3b01      	subs	r3, #1
 8007bfc:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8007bfe:	687b      	ldr	r3, [r7, #4]
 8007c00:	2b00      	cmp	r3, #0
 8007c02:	d1f1      	bne.n	8007be8 <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 8007c04:	4b12      	ldr	r3, [pc, #72]	@ (8007c50 <xTaskResumeAll+0x134>)
 8007c06:	2200      	movs	r2, #0
 8007c08:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8007c0a:	4b10      	ldr	r3, [pc, #64]	@ (8007c4c <xTaskResumeAll+0x130>)
 8007c0c:	681b      	ldr	r3, [r3, #0]
 8007c0e:	2b00      	cmp	r3, #0
 8007c10:	d009      	beq.n	8007c26 <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8007c12:	2301      	movs	r3, #1
 8007c14:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8007c16:	4b0f      	ldr	r3, [pc, #60]	@ (8007c54 <xTaskResumeAll+0x138>)
 8007c18:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007c1c:	601a      	str	r2, [r3, #0]
 8007c1e:	f3bf 8f4f 	dsb	sy
 8007c22:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8007c26:	f001 f919 	bl	8008e5c <vPortExitCritical>

	return xAlreadyYielded;
 8007c2a:	68bb      	ldr	r3, [r7, #8]
}
 8007c2c:	4618      	mov	r0, r3
 8007c2e:	3710      	adds	r7, #16
 8007c30:	46bd      	mov	sp, r7
 8007c32:	bd80      	pop	{r7, pc}
 8007c34:	2000547c 	.word	0x2000547c
 8007c38:	20005454 	.word	0x20005454
 8007c3c:	20005414 	.word	0x20005414
 8007c40:	2000545c 	.word	0x2000545c
 8007c44:	20004f84 	.word	0x20004f84
 8007c48:	20004f80 	.word	0x20004f80
 8007c4c:	20005468 	.word	0x20005468
 8007c50:	20005464 	.word	0x20005464
 8007c54:	e000ed04 	.word	0xe000ed04

08007c58 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8007c58:	b480      	push	{r7}
 8007c5a:	b083      	sub	sp, #12
 8007c5c:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8007c5e:	4b05      	ldr	r3, [pc, #20]	@ (8007c74 <xTaskGetTickCount+0x1c>)
 8007c60:	681b      	ldr	r3, [r3, #0]
 8007c62:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8007c64:	687b      	ldr	r3, [r7, #4]
}
 8007c66:	4618      	mov	r0, r3
 8007c68:	370c      	adds	r7, #12
 8007c6a:	46bd      	mov	sp, r7
 8007c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c70:	4770      	bx	lr
 8007c72:	bf00      	nop
 8007c74:	20005458 	.word	0x20005458

08007c78 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8007c78:	b580      	push	{r7, lr}
 8007c7a:	b086      	sub	sp, #24
 8007c7c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8007c7e:	2300      	movs	r3, #0
 8007c80:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007c82:	4b4f      	ldr	r3, [pc, #316]	@ (8007dc0 <xTaskIncrementTick+0x148>)
 8007c84:	681b      	ldr	r3, [r3, #0]
 8007c86:	2b00      	cmp	r3, #0
 8007c88:	f040 8090 	bne.w	8007dac <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8007c8c:	4b4d      	ldr	r3, [pc, #308]	@ (8007dc4 <xTaskIncrementTick+0x14c>)
 8007c8e:	681b      	ldr	r3, [r3, #0]
 8007c90:	3301      	adds	r3, #1
 8007c92:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8007c94:	4a4b      	ldr	r2, [pc, #300]	@ (8007dc4 <xTaskIncrementTick+0x14c>)
 8007c96:	693b      	ldr	r3, [r7, #16]
 8007c98:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8007c9a:	693b      	ldr	r3, [r7, #16]
 8007c9c:	2b00      	cmp	r3, #0
 8007c9e:	d121      	bne.n	8007ce4 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8007ca0:	4b49      	ldr	r3, [pc, #292]	@ (8007dc8 <xTaskIncrementTick+0x150>)
 8007ca2:	681b      	ldr	r3, [r3, #0]
 8007ca4:	681b      	ldr	r3, [r3, #0]
 8007ca6:	2b00      	cmp	r3, #0
 8007ca8:	d00b      	beq.n	8007cc2 <xTaskIncrementTick+0x4a>
	__asm volatile
 8007caa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007cae:	f383 8811 	msr	BASEPRI, r3
 8007cb2:	f3bf 8f6f 	isb	sy
 8007cb6:	f3bf 8f4f 	dsb	sy
 8007cba:	603b      	str	r3, [r7, #0]
}
 8007cbc:	bf00      	nop
 8007cbe:	bf00      	nop
 8007cc0:	e7fd      	b.n	8007cbe <xTaskIncrementTick+0x46>
 8007cc2:	4b41      	ldr	r3, [pc, #260]	@ (8007dc8 <xTaskIncrementTick+0x150>)
 8007cc4:	681b      	ldr	r3, [r3, #0]
 8007cc6:	60fb      	str	r3, [r7, #12]
 8007cc8:	4b40      	ldr	r3, [pc, #256]	@ (8007dcc <xTaskIncrementTick+0x154>)
 8007cca:	681b      	ldr	r3, [r3, #0]
 8007ccc:	4a3e      	ldr	r2, [pc, #248]	@ (8007dc8 <xTaskIncrementTick+0x150>)
 8007cce:	6013      	str	r3, [r2, #0]
 8007cd0:	4a3e      	ldr	r2, [pc, #248]	@ (8007dcc <xTaskIncrementTick+0x154>)
 8007cd2:	68fb      	ldr	r3, [r7, #12]
 8007cd4:	6013      	str	r3, [r2, #0]
 8007cd6:	4b3e      	ldr	r3, [pc, #248]	@ (8007dd0 <xTaskIncrementTick+0x158>)
 8007cd8:	681b      	ldr	r3, [r3, #0]
 8007cda:	3301      	adds	r3, #1
 8007cdc:	4a3c      	ldr	r2, [pc, #240]	@ (8007dd0 <xTaskIncrementTick+0x158>)
 8007cde:	6013      	str	r3, [r2, #0]
 8007ce0:	f000 fafc 	bl	80082dc <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8007ce4:	4b3b      	ldr	r3, [pc, #236]	@ (8007dd4 <xTaskIncrementTick+0x15c>)
 8007ce6:	681b      	ldr	r3, [r3, #0]
 8007ce8:	693a      	ldr	r2, [r7, #16]
 8007cea:	429a      	cmp	r2, r3
 8007cec:	d349      	bcc.n	8007d82 <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007cee:	4b36      	ldr	r3, [pc, #216]	@ (8007dc8 <xTaskIncrementTick+0x150>)
 8007cf0:	681b      	ldr	r3, [r3, #0]
 8007cf2:	681b      	ldr	r3, [r3, #0]
 8007cf4:	2b00      	cmp	r3, #0
 8007cf6:	d104      	bne.n	8007d02 <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007cf8:	4b36      	ldr	r3, [pc, #216]	@ (8007dd4 <xTaskIncrementTick+0x15c>)
 8007cfa:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8007cfe:	601a      	str	r2, [r3, #0]
					break;
 8007d00:	e03f      	b.n	8007d82 <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007d02:	4b31      	ldr	r3, [pc, #196]	@ (8007dc8 <xTaskIncrementTick+0x150>)
 8007d04:	681b      	ldr	r3, [r3, #0]
 8007d06:	68db      	ldr	r3, [r3, #12]
 8007d08:	68db      	ldr	r3, [r3, #12]
 8007d0a:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8007d0c:	68bb      	ldr	r3, [r7, #8]
 8007d0e:	685b      	ldr	r3, [r3, #4]
 8007d10:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8007d12:	693a      	ldr	r2, [r7, #16]
 8007d14:	687b      	ldr	r3, [r7, #4]
 8007d16:	429a      	cmp	r2, r3
 8007d18:	d203      	bcs.n	8007d22 <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8007d1a:	4a2e      	ldr	r2, [pc, #184]	@ (8007dd4 <xTaskIncrementTick+0x15c>)
 8007d1c:	687b      	ldr	r3, [r7, #4]
 8007d1e:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8007d20:	e02f      	b.n	8007d82 <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007d22:	68bb      	ldr	r3, [r7, #8]
 8007d24:	3304      	adds	r3, #4
 8007d26:	4618      	mov	r0, r3
 8007d28:	f7fe ff82 	bl	8006c30 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8007d2c:	68bb      	ldr	r3, [r7, #8]
 8007d2e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007d30:	2b00      	cmp	r3, #0
 8007d32:	d004      	beq.n	8007d3e <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8007d34:	68bb      	ldr	r3, [r7, #8]
 8007d36:	3318      	adds	r3, #24
 8007d38:	4618      	mov	r0, r3
 8007d3a:	f7fe ff79 	bl	8006c30 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8007d3e:	68bb      	ldr	r3, [r7, #8]
 8007d40:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007d42:	4b25      	ldr	r3, [pc, #148]	@ (8007dd8 <xTaskIncrementTick+0x160>)
 8007d44:	681b      	ldr	r3, [r3, #0]
 8007d46:	429a      	cmp	r2, r3
 8007d48:	d903      	bls.n	8007d52 <xTaskIncrementTick+0xda>
 8007d4a:	68bb      	ldr	r3, [r7, #8]
 8007d4c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007d4e:	4a22      	ldr	r2, [pc, #136]	@ (8007dd8 <xTaskIncrementTick+0x160>)
 8007d50:	6013      	str	r3, [r2, #0]
 8007d52:	68bb      	ldr	r3, [r7, #8]
 8007d54:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007d56:	4613      	mov	r3, r2
 8007d58:	009b      	lsls	r3, r3, #2
 8007d5a:	4413      	add	r3, r2
 8007d5c:	009b      	lsls	r3, r3, #2
 8007d5e:	4a1f      	ldr	r2, [pc, #124]	@ (8007ddc <xTaskIncrementTick+0x164>)
 8007d60:	441a      	add	r2, r3
 8007d62:	68bb      	ldr	r3, [r7, #8]
 8007d64:	3304      	adds	r3, #4
 8007d66:	4619      	mov	r1, r3
 8007d68:	4610      	mov	r0, r2
 8007d6a:	f7fe ff04 	bl	8006b76 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8007d6e:	68bb      	ldr	r3, [r7, #8]
 8007d70:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007d72:	4b1b      	ldr	r3, [pc, #108]	@ (8007de0 <xTaskIncrementTick+0x168>)
 8007d74:	681b      	ldr	r3, [r3, #0]
 8007d76:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007d78:	429a      	cmp	r2, r3
 8007d7a:	d3b8      	bcc.n	8007cee <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8007d7c:	2301      	movs	r3, #1
 8007d7e:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007d80:	e7b5      	b.n	8007cee <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8007d82:	4b17      	ldr	r3, [pc, #92]	@ (8007de0 <xTaskIncrementTick+0x168>)
 8007d84:	681b      	ldr	r3, [r3, #0]
 8007d86:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007d88:	4914      	ldr	r1, [pc, #80]	@ (8007ddc <xTaskIncrementTick+0x164>)
 8007d8a:	4613      	mov	r3, r2
 8007d8c:	009b      	lsls	r3, r3, #2
 8007d8e:	4413      	add	r3, r2
 8007d90:	009b      	lsls	r3, r3, #2
 8007d92:	440b      	add	r3, r1
 8007d94:	681b      	ldr	r3, [r3, #0]
 8007d96:	2b01      	cmp	r3, #1
 8007d98:	d901      	bls.n	8007d9e <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 8007d9a:	2301      	movs	r3, #1
 8007d9c:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8007d9e:	4b11      	ldr	r3, [pc, #68]	@ (8007de4 <xTaskIncrementTick+0x16c>)
 8007da0:	681b      	ldr	r3, [r3, #0]
 8007da2:	2b00      	cmp	r3, #0
 8007da4:	d007      	beq.n	8007db6 <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 8007da6:	2301      	movs	r3, #1
 8007da8:	617b      	str	r3, [r7, #20]
 8007daa:	e004      	b.n	8007db6 <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8007dac:	4b0e      	ldr	r3, [pc, #56]	@ (8007de8 <xTaskIncrementTick+0x170>)
 8007dae:	681b      	ldr	r3, [r3, #0]
 8007db0:	3301      	adds	r3, #1
 8007db2:	4a0d      	ldr	r2, [pc, #52]	@ (8007de8 <xTaskIncrementTick+0x170>)
 8007db4:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8007db6:	697b      	ldr	r3, [r7, #20]
}
 8007db8:	4618      	mov	r0, r3
 8007dba:	3718      	adds	r7, #24
 8007dbc:	46bd      	mov	sp, r7
 8007dbe:	bd80      	pop	{r7, pc}
 8007dc0:	2000547c 	.word	0x2000547c
 8007dc4:	20005458 	.word	0x20005458
 8007dc8:	2000540c 	.word	0x2000540c
 8007dcc:	20005410 	.word	0x20005410
 8007dd0:	2000546c 	.word	0x2000546c
 8007dd4:	20005474 	.word	0x20005474
 8007dd8:	2000545c 	.word	0x2000545c
 8007ddc:	20004f84 	.word	0x20004f84
 8007de0:	20004f80 	.word	0x20004f80
 8007de4:	20005468 	.word	0x20005468
 8007de8:	20005464 	.word	0x20005464

08007dec <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8007dec:	b480      	push	{r7}
 8007dee:	b085      	sub	sp, #20
 8007df0:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8007df2:	4b28      	ldr	r3, [pc, #160]	@ (8007e94 <vTaskSwitchContext+0xa8>)
 8007df4:	681b      	ldr	r3, [r3, #0]
 8007df6:	2b00      	cmp	r3, #0
 8007df8:	d003      	beq.n	8007e02 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8007dfa:	4b27      	ldr	r3, [pc, #156]	@ (8007e98 <vTaskSwitchContext+0xac>)
 8007dfc:	2201      	movs	r2, #1
 8007dfe:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8007e00:	e042      	b.n	8007e88 <vTaskSwitchContext+0x9c>
		xYieldPending = pdFALSE;
 8007e02:	4b25      	ldr	r3, [pc, #148]	@ (8007e98 <vTaskSwitchContext+0xac>)
 8007e04:	2200      	movs	r2, #0
 8007e06:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007e08:	4b24      	ldr	r3, [pc, #144]	@ (8007e9c <vTaskSwitchContext+0xb0>)
 8007e0a:	681b      	ldr	r3, [r3, #0]
 8007e0c:	60fb      	str	r3, [r7, #12]
 8007e0e:	e011      	b.n	8007e34 <vTaskSwitchContext+0x48>
 8007e10:	68fb      	ldr	r3, [r7, #12]
 8007e12:	2b00      	cmp	r3, #0
 8007e14:	d10b      	bne.n	8007e2e <vTaskSwitchContext+0x42>
	__asm volatile
 8007e16:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007e1a:	f383 8811 	msr	BASEPRI, r3
 8007e1e:	f3bf 8f6f 	isb	sy
 8007e22:	f3bf 8f4f 	dsb	sy
 8007e26:	607b      	str	r3, [r7, #4]
}
 8007e28:	bf00      	nop
 8007e2a:	bf00      	nop
 8007e2c:	e7fd      	b.n	8007e2a <vTaskSwitchContext+0x3e>
 8007e2e:	68fb      	ldr	r3, [r7, #12]
 8007e30:	3b01      	subs	r3, #1
 8007e32:	60fb      	str	r3, [r7, #12]
 8007e34:	491a      	ldr	r1, [pc, #104]	@ (8007ea0 <vTaskSwitchContext+0xb4>)
 8007e36:	68fa      	ldr	r2, [r7, #12]
 8007e38:	4613      	mov	r3, r2
 8007e3a:	009b      	lsls	r3, r3, #2
 8007e3c:	4413      	add	r3, r2
 8007e3e:	009b      	lsls	r3, r3, #2
 8007e40:	440b      	add	r3, r1
 8007e42:	681b      	ldr	r3, [r3, #0]
 8007e44:	2b00      	cmp	r3, #0
 8007e46:	d0e3      	beq.n	8007e10 <vTaskSwitchContext+0x24>
 8007e48:	68fa      	ldr	r2, [r7, #12]
 8007e4a:	4613      	mov	r3, r2
 8007e4c:	009b      	lsls	r3, r3, #2
 8007e4e:	4413      	add	r3, r2
 8007e50:	009b      	lsls	r3, r3, #2
 8007e52:	4a13      	ldr	r2, [pc, #76]	@ (8007ea0 <vTaskSwitchContext+0xb4>)
 8007e54:	4413      	add	r3, r2
 8007e56:	60bb      	str	r3, [r7, #8]
 8007e58:	68bb      	ldr	r3, [r7, #8]
 8007e5a:	685b      	ldr	r3, [r3, #4]
 8007e5c:	685a      	ldr	r2, [r3, #4]
 8007e5e:	68bb      	ldr	r3, [r7, #8]
 8007e60:	605a      	str	r2, [r3, #4]
 8007e62:	68bb      	ldr	r3, [r7, #8]
 8007e64:	685a      	ldr	r2, [r3, #4]
 8007e66:	68bb      	ldr	r3, [r7, #8]
 8007e68:	3308      	adds	r3, #8
 8007e6a:	429a      	cmp	r2, r3
 8007e6c:	d104      	bne.n	8007e78 <vTaskSwitchContext+0x8c>
 8007e6e:	68bb      	ldr	r3, [r7, #8]
 8007e70:	685b      	ldr	r3, [r3, #4]
 8007e72:	685a      	ldr	r2, [r3, #4]
 8007e74:	68bb      	ldr	r3, [r7, #8]
 8007e76:	605a      	str	r2, [r3, #4]
 8007e78:	68bb      	ldr	r3, [r7, #8]
 8007e7a:	685b      	ldr	r3, [r3, #4]
 8007e7c:	68db      	ldr	r3, [r3, #12]
 8007e7e:	4a09      	ldr	r2, [pc, #36]	@ (8007ea4 <vTaskSwitchContext+0xb8>)
 8007e80:	6013      	str	r3, [r2, #0]
 8007e82:	4a06      	ldr	r2, [pc, #24]	@ (8007e9c <vTaskSwitchContext+0xb0>)
 8007e84:	68fb      	ldr	r3, [r7, #12]
 8007e86:	6013      	str	r3, [r2, #0]
}
 8007e88:	bf00      	nop
 8007e8a:	3714      	adds	r7, #20
 8007e8c:	46bd      	mov	sp, r7
 8007e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e92:	4770      	bx	lr
 8007e94:	2000547c 	.word	0x2000547c
 8007e98:	20005468 	.word	0x20005468
 8007e9c:	2000545c 	.word	0x2000545c
 8007ea0:	20004f84 	.word	0x20004f84
 8007ea4:	20004f80 	.word	0x20004f80

08007ea8 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8007ea8:	b580      	push	{r7, lr}
 8007eaa:	b084      	sub	sp, #16
 8007eac:	af00      	add	r7, sp, #0
 8007eae:	6078      	str	r0, [r7, #4]
 8007eb0:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8007eb2:	687b      	ldr	r3, [r7, #4]
 8007eb4:	2b00      	cmp	r3, #0
 8007eb6:	d10b      	bne.n	8007ed0 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 8007eb8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007ebc:	f383 8811 	msr	BASEPRI, r3
 8007ec0:	f3bf 8f6f 	isb	sy
 8007ec4:	f3bf 8f4f 	dsb	sy
 8007ec8:	60fb      	str	r3, [r7, #12]
}
 8007eca:	bf00      	nop
 8007ecc:	bf00      	nop
 8007ece:	e7fd      	b.n	8007ecc <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8007ed0:	4b07      	ldr	r3, [pc, #28]	@ (8007ef0 <vTaskPlaceOnEventList+0x48>)
 8007ed2:	681b      	ldr	r3, [r3, #0]
 8007ed4:	3318      	adds	r3, #24
 8007ed6:	4619      	mov	r1, r3
 8007ed8:	6878      	ldr	r0, [r7, #4]
 8007eda:	f7fe fe70 	bl	8006bbe <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8007ede:	2101      	movs	r1, #1
 8007ee0:	6838      	ldr	r0, [r7, #0]
 8007ee2:	f000 faa9 	bl	8008438 <prvAddCurrentTaskToDelayedList>
}
 8007ee6:	bf00      	nop
 8007ee8:	3710      	adds	r7, #16
 8007eea:	46bd      	mov	sp, r7
 8007eec:	bd80      	pop	{r7, pc}
 8007eee:	bf00      	nop
 8007ef0:	20004f80 	.word	0x20004f80

08007ef4 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8007ef4:	b580      	push	{r7, lr}
 8007ef6:	b086      	sub	sp, #24
 8007ef8:	af00      	add	r7, sp, #0
 8007efa:	60f8      	str	r0, [r7, #12]
 8007efc:	60b9      	str	r1, [r7, #8]
 8007efe:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8007f00:	68fb      	ldr	r3, [r7, #12]
 8007f02:	2b00      	cmp	r3, #0
 8007f04:	d10b      	bne.n	8007f1e <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 8007f06:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007f0a:	f383 8811 	msr	BASEPRI, r3
 8007f0e:	f3bf 8f6f 	isb	sy
 8007f12:	f3bf 8f4f 	dsb	sy
 8007f16:	617b      	str	r3, [r7, #20]
}
 8007f18:	bf00      	nop
 8007f1a:	bf00      	nop
 8007f1c:	e7fd      	b.n	8007f1a <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8007f1e:	4b0a      	ldr	r3, [pc, #40]	@ (8007f48 <vTaskPlaceOnEventListRestricted+0x54>)
 8007f20:	681b      	ldr	r3, [r3, #0]
 8007f22:	3318      	adds	r3, #24
 8007f24:	4619      	mov	r1, r3
 8007f26:	68f8      	ldr	r0, [r7, #12]
 8007f28:	f7fe fe25 	bl	8006b76 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8007f2c:	687b      	ldr	r3, [r7, #4]
 8007f2e:	2b00      	cmp	r3, #0
 8007f30:	d002      	beq.n	8007f38 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 8007f32:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8007f36:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8007f38:	6879      	ldr	r1, [r7, #4]
 8007f3a:	68b8      	ldr	r0, [r7, #8]
 8007f3c:	f000 fa7c 	bl	8008438 <prvAddCurrentTaskToDelayedList>
	}
 8007f40:	bf00      	nop
 8007f42:	3718      	adds	r7, #24
 8007f44:	46bd      	mov	sp, r7
 8007f46:	bd80      	pop	{r7, pc}
 8007f48:	20004f80 	.word	0x20004f80

08007f4c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8007f4c:	b580      	push	{r7, lr}
 8007f4e:	b086      	sub	sp, #24
 8007f50:	af00      	add	r7, sp, #0
 8007f52:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007f54:	687b      	ldr	r3, [r7, #4]
 8007f56:	68db      	ldr	r3, [r3, #12]
 8007f58:	68db      	ldr	r3, [r3, #12]
 8007f5a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8007f5c:	693b      	ldr	r3, [r7, #16]
 8007f5e:	2b00      	cmp	r3, #0
 8007f60:	d10b      	bne.n	8007f7a <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 8007f62:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007f66:	f383 8811 	msr	BASEPRI, r3
 8007f6a:	f3bf 8f6f 	isb	sy
 8007f6e:	f3bf 8f4f 	dsb	sy
 8007f72:	60fb      	str	r3, [r7, #12]
}
 8007f74:	bf00      	nop
 8007f76:	bf00      	nop
 8007f78:	e7fd      	b.n	8007f76 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8007f7a:	693b      	ldr	r3, [r7, #16]
 8007f7c:	3318      	adds	r3, #24
 8007f7e:	4618      	mov	r0, r3
 8007f80:	f7fe fe56 	bl	8006c30 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007f84:	4b1d      	ldr	r3, [pc, #116]	@ (8007ffc <xTaskRemoveFromEventList+0xb0>)
 8007f86:	681b      	ldr	r3, [r3, #0]
 8007f88:	2b00      	cmp	r3, #0
 8007f8a:	d11d      	bne.n	8007fc8 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8007f8c:	693b      	ldr	r3, [r7, #16]
 8007f8e:	3304      	adds	r3, #4
 8007f90:	4618      	mov	r0, r3
 8007f92:	f7fe fe4d 	bl	8006c30 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8007f96:	693b      	ldr	r3, [r7, #16]
 8007f98:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007f9a:	4b19      	ldr	r3, [pc, #100]	@ (8008000 <xTaskRemoveFromEventList+0xb4>)
 8007f9c:	681b      	ldr	r3, [r3, #0]
 8007f9e:	429a      	cmp	r2, r3
 8007fa0:	d903      	bls.n	8007faa <xTaskRemoveFromEventList+0x5e>
 8007fa2:	693b      	ldr	r3, [r7, #16]
 8007fa4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007fa6:	4a16      	ldr	r2, [pc, #88]	@ (8008000 <xTaskRemoveFromEventList+0xb4>)
 8007fa8:	6013      	str	r3, [r2, #0]
 8007faa:	693b      	ldr	r3, [r7, #16]
 8007fac:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007fae:	4613      	mov	r3, r2
 8007fb0:	009b      	lsls	r3, r3, #2
 8007fb2:	4413      	add	r3, r2
 8007fb4:	009b      	lsls	r3, r3, #2
 8007fb6:	4a13      	ldr	r2, [pc, #76]	@ (8008004 <xTaskRemoveFromEventList+0xb8>)
 8007fb8:	441a      	add	r2, r3
 8007fba:	693b      	ldr	r3, [r7, #16]
 8007fbc:	3304      	adds	r3, #4
 8007fbe:	4619      	mov	r1, r3
 8007fc0:	4610      	mov	r0, r2
 8007fc2:	f7fe fdd8 	bl	8006b76 <vListInsertEnd>
 8007fc6:	e005      	b.n	8007fd4 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8007fc8:	693b      	ldr	r3, [r7, #16]
 8007fca:	3318      	adds	r3, #24
 8007fcc:	4619      	mov	r1, r3
 8007fce:	480e      	ldr	r0, [pc, #56]	@ (8008008 <xTaskRemoveFromEventList+0xbc>)
 8007fd0:	f7fe fdd1 	bl	8006b76 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8007fd4:	693b      	ldr	r3, [r7, #16]
 8007fd6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007fd8:	4b0c      	ldr	r3, [pc, #48]	@ (800800c <xTaskRemoveFromEventList+0xc0>)
 8007fda:	681b      	ldr	r3, [r3, #0]
 8007fdc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007fde:	429a      	cmp	r2, r3
 8007fe0:	d905      	bls.n	8007fee <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8007fe2:	2301      	movs	r3, #1
 8007fe4:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8007fe6:	4b0a      	ldr	r3, [pc, #40]	@ (8008010 <xTaskRemoveFromEventList+0xc4>)
 8007fe8:	2201      	movs	r2, #1
 8007fea:	601a      	str	r2, [r3, #0]
 8007fec:	e001      	b.n	8007ff2 <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 8007fee:	2300      	movs	r3, #0
 8007ff0:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8007ff2:	697b      	ldr	r3, [r7, #20]
}
 8007ff4:	4618      	mov	r0, r3
 8007ff6:	3718      	adds	r7, #24
 8007ff8:	46bd      	mov	sp, r7
 8007ffa:	bd80      	pop	{r7, pc}
 8007ffc:	2000547c 	.word	0x2000547c
 8008000:	2000545c 	.word	0x2000545c
 8008004:	20004f84 	.word	0x20004f84
 8008008:	20005414 	.word	0x20005414
 800800c:	20004f80 	.word	0x20004f80
 8008010:	20005468 	.word	0x20005468

08008014 <vTaskSetTimeOutState>:
	}
}
/*-----------------------------------------------------------*/

void vTaskSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8008014:	b580      	push	{r7, lr}
 8008016:	b084      	sub	sp, #16
 8008018:	af00      	add	r7, sp, #0
 800801a:	6078      	str	r0, [r7, #4]
	configASSERT( pxTimeOut );
 800801c:	687b      	ldr	r3, [r7, #4]
 800801e:	2b00      	cmp	r3, #0
 8008020:	d10b      	bne.n	800803a <vTaskSetTimeOutState+0x26>
	__asm volatile
 8008022:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008026:	f383 8811 	msr	BASEPRI, r3
 800802a:	f3bf 8f6f 	isb	sy
 800802e:	f3bf 8f4f 	dsb	sy
 8008032:	60fb      	str	r3, [r7, #12]
}
 8008034:	bf00      	nop
 8008036:	bf00      	nop
 8008038:	e7fd      	b.n	8008036 <vTaskSetTimeOutState+0x22>
	taskENTER_CRITICAL();
 800803a:	f000 fedd 	bl	8008df8 <vPortEnterCritical>
	{
		pxTimeOut->xOverflowCount = xNumOfOverflows;
 800803e:	4b07      	ldr	r3, [pc, #28]	@ (800805c <vTaskSetTimeOutState+0x48>)
 8008040:	681a      	ldr	r2, [r3, #0]
 8008042:	687b      	ldr	r3, [r7, #4]
 8008044:	601a      	str	r2, [r3, #0]
		pxTimeOut->xTimeOnEntering = xTickCount;
 8008046:	4b06      	ldr	r3, [pc, #24]	@ (8008060 <vTaskSetTimeOutState+0x4c>)
 8008048:	681a      	ldr	r2, [r3, #0]
 800804a:	687b      	ldr	r3, [r7, #4]
 800804c:	605a      	str	r2, [r3, #4]
	}
	taskEXIT_CRITICAL();
 800804e:	f000 ff05 	bl	8008e5c <vPortExitCritical>
}
 8008052:	bf00      	nop
 8008054:	3710      	adds	r7, #16
 8008056:	46bd      	mov	sp, r7
 8008058:	bd80      	pop	{r7, pc}
 800805a:	bf00      	nop
 800805c:	2000546c 	.word	0x2000546c
 8008060:	20005458 	.word	0x20005458

08008064 <vTaskInternalSetTimeOutState>:
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8008064:	b480      	push	{r7}
 8008066:	b083      	sub	sp, #12
 8008068:	af00      	add	r7, sp, #0
 800806a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800806c:	4b06      	ldr	r3, [pc, #24]	@ (8008088 <vTaskInternalSetTimeOutState+0x24>)
 800806e:	681a      	ldr	r2, [r3, #0]
 8008070:	687b      	ldr	r3, [r7, #4]
 8008072:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8008074:	4b05      	ldr	r3, [pc, #20]	@ (800808c <vTaskInternalSetTimeOutState+0x28>)
 8008076:	681a      	ldr	r2, [r3, #0]
 8008078:	687b      	ldr	r3, [r7, #4]
 800807a:	605a      	str	r2, [r3, #4]
}
 800807c:	bf00      	nop
 800807e:	370c      	adds	r7, #12
 8008080:	46bd      	mov	sp, r7
 8008082:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008086:	4770      	bx	lr
 8008088:	2000546c 	.word	0x2000546c
 800808c:	20005458 	.word	0x20005458

08008090 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8008090:	b580      	push	{r7, lr}
 8008092:	b088      	sub	sp, #32
 8008094:	af00      	add	r7, sp, #0
 8008096:	6078      	str	r0, [r7, #4]
 8008098:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800809a:	687b      	ldr	r3, [r7, #4]
 800809c:	2b00      	cmp	r3, #0
 800809e:	d10b      	bne.n	80080b8 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 80080a0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80080a4:	f383 8811 	msr	BASEPRI, r3
 80080a8:	f3bf 8f6f 	isb	sy
 80080ac:	f3bf 8f4f 	dsb	sy
 80080b0:	613b      	str	r3, [r7, #16]
}
 80080b2:	bf00      	nop
 80080b4:	bf00      	nop
 80080b6:	e7fd      	b.n	80080b4 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 80080b8:	683b      	ldr	r3, [r7, #0]
 80080ba:	2b00      	cmp	r3, #0
 80080bc:	d10b      	bne.n	80080d6 <xTaskCheckForTimeOut+0x46>
	__asm volatile
 80080be:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80080c2:	f383 8811 	msr	BASEPRI, r3
 80080c6:	f3bf 8f6f 	isb	sy
 80080ca:	f3bf 8f4f 	dsb	sy
 80080ce:	60fb      	str	r3, [r7, #12]
}
 80080d0:	bf00      	nop
 80080d2:	bf00      	nop
 80080d4:	e7fd      	b.n	80080d2 <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 80080d6:	f000 fe8f 	bl	8008df8 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80080da:	4b1d      	ldr	r3, [pc, #116]	@ (8008150 <xTaskCheckForTimeOut+0xc0>)
 80080dc:	681b      	ldr	r3, [r3, #0]
 80080de:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80080e0:	687b      	ldr	r3, [r7, #4]
 80080e2:	685b      	ldr	r3, [r3, #4]
 80080e4:	69ba      	ldr	r2, [r7, #24]
 80080e6:	1ad3      	subs	r3, r2, r3
 80080e8:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80080ea:	683b      	ldr	r3, [r7, #0]
 80080ec:	681b      	ldr	r3, [r3, #0]
 80080ee:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80080f2:	d102      	bne.n	80080fa <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80080f4:	2300      	movs	r3, #0
 80080f6:	61fb      	str	r3, [r7, #28]
 80080f8:	e023      	b.n	8008142 <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80080fa:	687b      	ldr	r3, [r7, #4]
 80080fc:	681a      	ldr	r2, [r3, #0]
 80080fe:	4b15      	ldr	r3, [pc, #84]	@ (8008154 <xTaskCheckForTimeOut+0xc4>)
 8008100:	681b      	ldr	r3, [r3, #0]
 8008102:	429a      	cmp	r2, r3
 8008104:	d007      	beq.n	8008116 <xTaskCheckForTimeOut+0x86>
 8008106:	687b      	ldr	r3, [r7, #4]
 8008108:	685b      	ldr	r3, [r3, #4]
 800810a:	69ba      	ldr	r2, [r7, #24]
 800810c:	429a      	cmp	r2, r3
 800810e:	d302      	bcc.n	8008116 <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8008110:	2301      	movs	r3, #1
 8008112:	61fb      	str	r3, [r7, #28]
 8008114:	e015      	b.n	8008142 <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8008116:	683b      	ldr	r3, [r7, #0]
 8008118:	681b      	ldr	r3, [r3, #0]
 800811a:	697a      	ldr	r2, [r7, #20]
 800811c:	429a      	cmp	r2, r3
 800811e:	d20b      	bcs.n	8008138 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8008120:	683b      	ldr	r3, [r7, #0]
 8008122:	681a      	ldr	r2, [r3, #0]
 8008124:	697b      	ldr	r3, [r7, #20]
 8008126:	1ad2      	subs	r2, r2, r3
 8008128:	683b      	ldr	r3, [r7, #0]
 800812a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800812c:	6878      	ldr	r0, [r7, #4]
 800812e:	f7ff ff99 	bl	8008064 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8008132:	2300      	movs	r3, #0
 8008134:	61fb      	str	r3, [r7, #28]
 8008136:	e004      	b.n	8008142 <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 8008138:	683b      	ldr	r3, [r7, #0]
 800813a:	2200      	movs	r2, #0
 800813c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800813e:	2301      	movs	r3, #1
 8008140:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8008142:	f000 fe8b 	bl	8008e5c <vPortExitCritical>

	return xReturn;
 8008146:	69fb      	ldr	r3, [r7, #28]
}
 8008148:	4618      	mov	r0, r3
 800814a:	3720      	adds	r7, #32
 800814c:	46bd      	mov	sp, r7
 800814e:	bd80      	pop	{r7, pc}
 8008150:	20005458 	.word	0x20005458
 8008154:	2000546c 	.word	0x2000546c

08008158 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8008158:	b480      	push	{r7}
 800815a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800815c:	4b03      	ldr	r3, [pc, #12]	@ (800816c <vTaskMissedYield+0x14>)
 800815e:	2201      	movs	r2, #1
 8008160:	601a      	str	r2, [r3, #0]
}
 8008162:	bf00      	nop
 8008164:	46bd      	mov	sp, r7
 8008166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800816a:	4770      	bx	lr
 800816c:	20005468 	.word	0x20005468

08008170 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8008170:	b580      	push	{r7, lr}
 8008172:	b082      	sub	sp, #8
 8008174:	af00      	add	r7, sp, #0
 8008176:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8008178:	f000 f852 	bl	8008220 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800817c:	4b06      	ldr	r3, [pc, #24]	@ (8008198 <prvIdleTask+0x28>)
 800817e:	681b      	ldr	r3, [r3, #0]
 8008180:	2b01      	cmp	r3, #1
 8008182:	d9f9      	bls.n	8008178 <prvIdleTask+0x8>
			{
				taskYIELD();
 8008184:	4b05      	ldr	r3, [pc, #20]	@ (800819c <prvIdleTask+0x2c>)
 8008186:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800818a:	601a      	str	r2, [r3, #0]
 800818c:	f3bf 8f4f 	dsb	sy
 8008190:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8008194:	e7f0      	b.n	8008178 <prvIdleTask+0x8>
 8008196:	bf00      	nop
 8008198:	20004f84 	.word	0x20004f84
 800819c:	e000ed04 	.word	0xe000ed04

080081a0 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80081a0:	b580      	push	{r7, lr}
 80081a2:	b082      	sub	sp, #8
 80081a4:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80081a6:	2300      	movs	r3, #0
 80081a8:	607b      	str	r3, [r7, #4]
 80081aa:	e00c      	b.n	80081c6 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80081ac:	687a      	ldr	r2, [r7, #4]
 80081ae:	4613      	mov	r3, r2
 80081b0:	009b      	lsls	r3, r3, #2
 80081b2:	4413      	add	r3, r2
 80081b4:	009b      	lsls	r3, r3, #2
 80081b6:	4a12      	ldr	r2, [pc, #72]	@ (8008200 <prvInitialiseTaskLists+0x60>)
 80081b8:	4413      	add	r3, r2
 80081ba:	4618      	mov	r0, r3
 80081bc:	f7fe fcae 	bl	8006b1c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80081c0:	687b      	ldr	r3, [r7, #4]
 80081c2:	3301      	adds	r3, #1
 80081c4:	607b      	str	r3, [r7, #4]
 80081c6:	687b      	ldr	r3, [r7, #4]
 80081c8:	2b37      	cmp	r3, #55	@ 0x37
 80081ca:	d9ef      	bls.n	80081ac <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80081cc:	480d      	ldr	r0, [pc, #52]	@ (8008204 <prvInitialiseTaskLists+0x64>)
 80081ce:	f7fe fca5 	bl	8006b1c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80081d2:	480d      	ldr	r0, [pc, #52]	@ (8008208 <prvInitialiseTaskLists+0x68>)
 80081d4:	f7fe fca2 	bl	8006b1c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80081d8:	480c      	ldr	r0, [pc, #48]	@ (800820c <prvInitialiseTaskLists+0x6c>)
 80081da:	f7fe fc9f 	bl	8006b1c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80081de:	480c      	ldr	r0, [pc, #48]	@ (8008210 <prvInitialiseTaskLists+0x70>)
 80081e0:	f7fe fc9c 	bl	8006b1c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80081e4:	480b      	ldr	r0, [pc, #44]	@ (8008214 <prvInitialiseTaskLists+0x74>)
 80081e6:	f7fe fc99 	bl	8006b1c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80081ea:	4b0b      	ldr	r3, [pc, #44]	@ (8008218 <prvInitialiseTaskLists+0x78>)
 80081ec:	4a05      	ldr	r2, [pc, #20]	@ (8008204 <prvInitialiseTaskLists+0x64>)
 80081ee:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80081f0:	4b0a      	ldr	r3, [pc, #40]	@ (800821c <prvInitialiseTaskLists+0x7c>)
 80081f2:	4a05      	ldr	r2, [pc, #20]	@ (8008208 <prvInitialiseTaskLists+0x68>)
 80081f4:	601a      	str	r2, [r3, #0]
}
 80081f6:	bf00      	nop
 80081f8:	3708      	adds	r7, #8
 80081fa:	46bd      	mov	sp, r7
 80081fc:	bd80      	pop	{r7, pc}
 80081fe:	bf00      	nop
 8008200:	20004f84 	.word	0x20004f84
 8008204:	200053e4 	.word	0x200053e4
 8008208:	200053f8 	.word	0x200053f8
 800820c:	20005414 	.word	0x20005414
 8008210:	20005428 	.word	0x20005428
 8008214:	20005440 	.word	0x20005440
 8008218:	2000540c 	.word	0x2000540c
 800821c:	20005410 	.word	0x20005410

08008220 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8008220:	b580      	push	{r7, lr}
 8008222:	b082      	sub	sp, #8
 8008224:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8008226:	e019      	b.n	800825c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8008228:	f000 fde6 	bl	8008df8 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800822c:	4b10      	ldr	r3, [pc, #64]	@ (8008270 <prvCheckTasksWaitingTermination+0x50>)
 800822e:	68db      	ldr	r3, [r3, #12]
 8008230:	68db      	ldr	r3, [r3, #12]
 8008232:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008234:	687b      	ldr	r3, [r7, #4]
 8008236:	3304      	adds	r3, #4
 8008238:	4618      	mov	r0, r3
 800823a:	f7fe fcf9 	bl	8006c30 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800823e:	4b0d      	ldr	r3, [pc, #52]	@ (8008274 <prvCheckTasksWaitingTermination+0x54>)
 8008240:	681b      	ldr	r3, [r3, #0]
 8008242:	3b01      	subs	r3, #1
 8008244:	4a0b      	ldr	r2, [pc, #44]	@ (8008274 <prvCheckTasksWaitingTermination+0x54>)
 8008246:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8008248:	4b0b      	ldr	r3, [pc, #44]	@ (8008278 <prvCheckTasksWaitingTermination+0x58>)
 800824a:	681b      	ldr	r3, [r3, #0]
 800824c:	3b01      	subs	r3, #1
 800824e:	4a0a      	ldr	r2, [pc, #40]	@ (8008278 <prvCheckTasksWaitingTermination+0x58>)
 8008250:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8008252:	f000 fe03 	bl	8008e5c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8008256:	6878      	ldr	r0, [r7, #4]
 8008258:	f000 f810 	bl	800827c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800825c:	4b06      	ldr	r3, [pc, #24]	@ (8008278 <prvCheckTasksWaitingTermination+0x58>)
 800825e:	681b      	ldr	r3, [r3, #0]
 8008260:	2b00      	cmp	r3, #0
 8008262:	d1e1      	bne.n	8008228 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8008264:	bf00      	nop
 8008266:	bf00      	nop
 8008268:	3708      	adds	r7, #8
 800826a:	46bd      	mov	sp, r7
 800826c:	bd80      	pop	{r7, pc}
 800826e:	bf00      	nop
 8008270:	20005428 	.word	0x20005428
 8008274:	20005454 	.word	0x20005454
 8008278:	2000543c 	.word	0x2000543c

0800827c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800827c:	b580      	push	{r7, lr}
 800827e:	b084      	sub	sp, #16
 8008280:	af00      	add	r7, sp, #0
 8008282:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8008284:	687b      	ldr	r3, [r7, #4]
 8008286:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 800828a:	2b00      	cmp	r3, #0
 800828c:	d108      	bne.n	80082a0 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800828e:	687b      	ldr	r3, [r7, #4]
 8008290:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008292:	4618      	mov	r0, r3
 8008294:	f000 ffa0 	bl	80091d8 <vPortFree>
				vPortFree( pxTCB );
 8008298:	6878      	ldr	r0, [r7, #4]
 800829a:	f000 ff9d 	bl	80091d8 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800829e:	e019      	b.n	80082d4 <prvDeleteTCB+0x58>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80082a0:	687b      	ldr	r3, [r7, #4]
 80082a2:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 80082a6:	2b01      	cmp	r3, #1
 80082a8:	d103      	bne.n	80082b2 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 80082aa:	6878      	ldr	r0, [r7, #4]
 80082ac:	f000 ff94 	bl	80091d8 <vPortFree>
	}
 80082b0:	e010      	b.n	80082d4 <prvDeleteTCB+0x58>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80082b2:	687b      	ldr	r3, [r7, #4]
 80082b4:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 80082b8:	2b02      	cmp	r3, #2
 80082ba:	d00b      	beq.n	80082d4 <prvDeleteTCB+0x58>
	__asm volatile
 80082bc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80082c0:	f383 8811 	msr	BASEPRI, r3
 80082c4:	f3bf 8f6f 	isb	sy
 80082c8:	f3bf 8f4f 	dsb	sy
 80082cc:	60fb      	str	r3, [r7, #12]
}
 80082ce:	bf00      	nop
 80082d0:	bf00      	nop
 80082d2:	e7fd      	b.n	80082d0 <prvDeleteTCB+0x54>
	}
 80082d4:	bf00      	nop
 80082d6:	3710      	adds	r7, #16
 80082d8:	46bd      	mov	sp, r7
 80082da:	bd80      	pop	{r7, pc}

080082dc <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80082dc:	b480      	push	{r7}
 80082de:	b083      	sub	sp, #12
 80082e0:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80082e2:	4b0c      	ldr	r3, [pc, #48]	@ (8008314 <prvResetNextTaskUnblockTime+0x38>)
 80082e4:	681b      	ldr	r3, [r3, #0]
 80082e6:	681b      	ldr	r3, [r3, #0]
 80082e8:	2b00      	cmp	r3, #0
 80082ea:	d104      	bne.n	80082f6 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80082ec:	4b0a      	ldr	r3, [pc, #40]	@ (8008318 <prvResetNextTaskUnblockTime+0x3c>)
 80082ee:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80082f2:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80082f4:	e008      	b.n	8008308 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80082f6:	4b07      	ldr	r3, [pc, #28]	@ (8008314 <prvResetNextTaskUnblockTime+0x38>)
 80082f8:	681b      	ldr	r3, [r3, #0]
 80082fa:	68db      	ldr	r3, [r3, #12]
 80082fc:	68db      	ldr	r3, [r3, #12]
 80082fe:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8008300:	687b      	ldr	r3, [r7, #4]
 8008302:	685b      	ldr	r3, [r3, #4]
 8008304:	4a04      	ldr	r2, [pc, #16]	@ (8008318 <prvResetNextTaskUnblockTime+0x3c>)
 8008306:	6013      	str	r3, [r2, #0]
}
 8008308:	bf00      	nop
 800830a:	370c      	adds	r7, #12
 800830c:	46bd      	mov	sp, r7
 800830e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008312:	4770      	bx	lr
 8008314:	2000540c 	.word	0x2000540c
 8008318:	20005474 	.word	0x20005474

0800831c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800831c:	b480      	push	{r7}
 800831e:	b083      	sub	sp, #12
 8008320:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8008322:	4b0b      	ldr	r3, [pc, #44]	@ (8008350 <xTaskGetSchedulerState+0x34>)
 8008324:	681b      	ldr	r3, [r3, #0]
 8008326:	2b00      	cmp	r3, #0
 8008328:	d102      	bne.n	8008330 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800832a:	2301      	movs	r3, #1
 800832c:	607b      	str	r3, [r7, #4]
 800832e:	e008      	b.n	8008342 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008330:	4b08      	ldr	r3, [pc, #32]	@ (8008354 <xTaskGetSchedulerState+0x38>)
 8008332:	681b      	ldr	r3, [r3, #0]
 8008334:	2b00      	cmp	r3, #0
 8008336:	d102      	bne.n	800833e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8008338:	2302      	movs	r3, #2
 800833a:	607b      	str	r3, [r7, #4]
 800833c:	e001      	b.n	8008342 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800833e:	2300      	movs	r3, #0
 8008340:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8008342:	687b      	ldr	r3, [r7, #4]
	}
 8008344:	4618      	mov	r0, r3
 8008346:	370c      	adds	r7, #12
 8008348:	46bd      	mov	sp, r7
 800834a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800834e:	4770      	bx	lr
 8008350:	20005460 	.word	0x20005460
 8008354:	2000547c 	.word	0x2000547c

08008358 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8008358:	b580      	push	{r7, lr}
 800835a:	b086      	sub	sp, #24
 800835c:	af00      	add	r7, sp, #0
 800835e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8008360:	687b      	ldr	r3, [r7, #4]
 8008362:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8008364:	2300      	movs	r3, #0
 8008366:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8008368:	687b      	ldr	r3, [r7, #4]
 800836a:	2b00      	cmp	r3, #0
 800836c:	d058      	beq.n	8008420 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800836e:	4b2f      	ldr	r3, [pc, #188]	@ (800842c <xTaskPriorityDisinherit+0xd4>)
 8008370:	681b      	ldr	r3, [r3, #0]
 8008372:	693a      	ldr	r2, [r7, #16]
 8008374:	429a      	cmp	r2, r3
 8008376:	d00b      	beq.n	8008390 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 8008378:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800837c:	f383 8811 	msr	BASEPRI, r3
 8008380:	f3bf 8f6f 	isb	sy
 8008384:	f3bf 8f4f 	dsb	sy
 8008388:	60fb      	str	r3, [r7, #12]
}
 800838a:	bf00      	nop
 800838c:	bf00      	nop
 800838e:	e7fd      	b.n	800838c <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8008390:	693b      	ldr	r3, [r7, #16]
 8008392:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008394:	2b00      	cmp	r3, #0
 8008396:	d10b      	bne.n	80083b0 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 8008398:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800839c:	f383 8811 	msr	BASEPRI, r3
 80083a0:	f3bf 8f6f 	isb	sy
 80083a4:	f3bf 8f4f 	dsb	sy
 80083a8:	60bb      	str	r3, [r7, #8]
}
 80083aa:	bf00      	nop
 80083ac:	bf00      	nop
 80083ae:	e7fd      	b.n	80083ac <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 80083b0:	693b      	ldr	r3, [r7, #16]
 80083b2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80083b4:	1e5a      	subs	r2, r3, #1
 80083b6:	693b      	ldr	r3, [r7, #16]
 80083b8:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80083ba:	693b      	ldr	r3, [r7, #16]
 80083bc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80083be:	693b      	ldr	r3, [r7, #16]
 80083c0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80083c2:	429a      	cmp	r2, r3
 80083c4:	d02c      	beq.n	8008420 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80083c6:	693b      	ldr	r3, [r7, #16]
 80083c8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80083ca:	2b00      	cmp	r3, #0
 80083cc:	d128      	bne.n	8008420 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80083ce:	693b      	ldr	r3, [r7, #16]
 80083d0:	3304      	adds	r3, #4
 80083d2:	4618      	mov	r0, r3
 80083d4:	f7fe fc2c 	bl	8006c30 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80083d8:	693b      	ldr	r3, [r7, #16]
 80083da:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80083dc:	693b      	ldr	r3, [r7, #16]
 80083de:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80083e0:	693b      	ldr	r3, [r7, #16]
 80083e2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80083e4:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 80083e8:	693b      	ldr	r3, [r7, #16]
 80083ea:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80083ec:	693b      	ldr	r3, [r7, #16]
 80083ee:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80083f0:	4b0f      	ldr	r3, [pc, #60]	@ (8008430 <xTaskPriorityDisinherit+0xd8>)
 80083f2:	681b      	ldr	r3, [r3, #0]
 80083f4:	429a      	cmp	r2, r3
 80083f6:	d903      	bls.n	8008400 <xTaskPriorityDisinherit+0xa8>
 80083f8:	693b      	ldr	r3, [r7, #16]
 80083fa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80083fc:	4a0c      	ldr	r2, [pc, #48]	@ (8008430 <xTaskPriorityDisinherit+0xd8>)
 80083fe:	6013      	str	r3, [r2, #0]
 8008400:	693b      	ldr	r3, [r7, #16]
 8008402:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008404:	4613      	mov	r3, r2
 8008406:	009b      	lsls	r3, r3, #2
 8008408:	4413      	add	r3, r2
 800840a:	009b      	lsls	r3, r3, #2
 800840c:	4a09      	ldr	r2, [pc, #36]	@ (8008434 <xTaskPriorityDisinherit+0xdc>)
 800840e:	441a      	add	r2, r3
 8008410:	693b      	ldr	r3, [r7, #16]
 8008412:	3304      	adds	r3, #4
 8008414:	4619      	mov	r1, r3
 8008416:	4610      	mov	r0, r2
 8008418:	f7fe fbad 	bl	8006b76 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800841c:	2301      	movs	r3, #1
 800841e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8008420:	697b      	ldr	r3, [r7, #20]
	}
 8008422:	4618      	mov	r0, r3
 8008424:	3718      	adds	r7, #24
 8008426:	46bd      	mov	sp, r7
 8008428:	bd80      	pop	{r7, pc}
 800842a:	bf00      	nop
 800842c:	20004f80 	.word	0x20004f80
 8008430:	2000545c 	.word	0x2000545c
 8008434:	20004f84 	.word	0x20004f84

08008438 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8008438:	b580      	push	{r7, lr}
 800843a:	b084      	sub	sp, #16
 800843c:	af00      	add	r7, sp, #0
 800843e:	6078      	str	r0, [r7, #4]
 8008440:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8008442:	4b21      	ldr	r3, [pc, #132]	@ (80084c8 <prvAddCurrentTaskToDelayedList+0x90>)
 8008444:	681b      	ldr	r3, [r3, #0]
 8008446:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008448:	4b20      	ldr	r3, [pc, #128]	@ (80084cc <prvAddCurrentTaskToDelayedList+0x94>)
 800844a:	681b      	ldr	r3, [r3, #0]
 800844c:	3304      	adds	r3, #4
 800844e:	4618      	mov	r0, r3
 8008450:	f7fe fbee 	bl	8006c30 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8008454:	687b      	ldr	r3, [r7, #4]
 8008456:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800845a:	d10a      	bne.n	8008472 <prvAddCurrentTaskToDelayedList+0x3a>
 800845c:	683b      	ldr	r3, [r7, #0]
 800845e:	2b00      	cmp	r3, #0
 8008460:	d007      	beq.n	8008472 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008462:	4b1a      	ldr	r3, [pc, #104]	@ (80084cc <prvAddCurrentTaskToDelayedList+0x94>)
 8008464:	681b      	ldr	r3, [r3, #0]
 8008466:	3304      	adds	r3, #4
 8008468:	4619      	mov	r1, r3
 800846a:	4819      	ldr	r0, [pc, #100]	@ (80084d0 <prvAddCurrentTaskToDelayedList+0x98>)
 800846c:	f7fe fb83 	bl	8006b76 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8008470:	e026      	b.n	80084c0 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8008472:	68fa      	ldr	r2, [r7, #12]
 8008474:	687b      	ldr	r3, [r7, #4]
 8008476:	4413      	add	r3, r2
 8008478:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800847a:	4b14      	ldr	r3, [pc, #80]	@ (80084cc <prvAddCurrentTaskToDelayedList+0x94>)
 800847c:	681b      	ldr	r3, [r3, #0]
 800847e:	68ba      	ldr	r2, [r7, #8]
 8008480:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8008482:	68ba      	ldr	r2, [r7, #8]
 8008484:	68fb      	ldr	r3, [r7, #12]
 8008486:	429a      	cmp	r2, r3
 8008488:	d209      	bcs.n	800849e <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800848a:	4b12      	ldr	r3, [pc, #72]	@ (80084d4 <prvAddCurrentTaskToDelayedList+0x9c>)
 800848c:	681a      	ldr	r2, [r3, #0]
 800848e:	4b0f      	ldr	r3, [pc, #60]	@ (80084cc <prvAddCurrentTaskToDelayedList+0x94>)
 8008490:	681b      	ldr	r3, [r3, #0]
 8008492:	3304      	adds	r3, #4
 8008494:	4619      	mov	r1, r3
 8008496:	4610      	mov	r0, r2
 8008498:	f7fe fb91 	bl	8006bbe <vListInsert>
}
 800849c:	e010      	b.n	80084c0 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800849e:	4b0e      	ldr	r3, [pc, #56]	@ (80084d8 <prvAddCurrentTaskToDelayedList+0xa0>)
 80084a0:	681a      	ldr	r2, [r3, #0]
 80084a2:	4b0a      	ldr	r3, [pc, #40]	@ (80084cc <prvAddCurrentTaskToDelayedList+0x94>)
 80084a4:	681b      	ldr	r3, [r3, #0]
 80084a6:	3304      	adds	r3, #4
 80084a8:	4619      	mov	r1, r3
 80084aa:	4610      	mov	r0, r2
 80084ac:	f7fe fb87 	bl	8006bbe <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80084b0:	4b0a      	ldr	r3, [pc, #40]	@ (80084dc <prvAddCurrentTaskToDelayedList+0xa4>)
 80084b2:	681b      	ldr	r3, [r3, #0]
 80084b4:	68ba      	ldr	r2, [r7, #8]
 80084b6:	429a      	cmp	r2, r3
 80084b8:	d202      	bcs.n	80084c0 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 80084ba:	4a08      	ldr	r2, [pc, #32]	@ (80084dc <prvAddCurrentTaskToDelayedList+0xa4>)
 80084bc:	68bb      	ldr	r3, [r7, #8]
 80084be:	6013      	str	r3, [r2, #0]
}
 80084c0:	bf00      	nop
 80084c2:	3710      	adds	r7, #16
 80084c4:	46bd      	mov	sp, r7
 80084c6:	bd80      	pop	{r7, pc}
 80084c8:	20005458 	.word	0x20005458
 80084cc:	20004f80 	.word	0x20004f80
 80084d0:	20005440 	.word	0x20005440
 80084d4:	20005410 	.word	0x20005410
 80084d8:	2000540c 	.word	0x2000540c
 80084dc:	20005474 	.word	0x20005474

080084e0 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 80084e0:	b580      	push	{r7, lr}
 80084e2:	b08a      	sub	sp, #40	@ 0x28
 80084e4:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 80084e6:	2300      	movs	r3, #0
 80084e8:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 80084ea:	f000 fb13 	bl	8008b14 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 80084ee:	4b1d      	ldr	r3, [pc, #116]	@ (8008564 <xTimerCreateTimerTask+0x84>)
 80084f0:	681b      	ldr	r3, [r3, #0]
 80084f2:	2b00      	cmp	r3, #0
 80084f4:	d021      	beq.n	800853a <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 80084f6:	2300      	movs	r3, #0
 80084f8:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 80084fa:	2300      	movs	r3, #0
 80084fc:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 80084fe:	1d3a      	adds	r2, r7, #4
 8008500:	f107 0108 	add.w	r1, r7, #8
 8008504:	f107 030c 	add.w	r3, r7, #12
 8008508:	4618      	mov	r0, r3
 800850a:	f7fe faed 	bl	8006ae8 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800850e:	6879      	ldr	r1, [r7, #4]
 8008510:	68bb      	ldr	r3, [r7, #8]
 8008512:	68fa      	ldr	r2, [r7, #12]
 8008514:	9202      	str	r2, [sp, #8]
 8008516:	9301      	str	r3, [sp, #4]
 8008518:	2302      	movs	r3, #2
 800851a:	9300      	str	r3, [sp, #0]
 800851c:	2300      	movs	r3, #0
 800851e:	460a      	mov	r2, r1
 8008520:	4911      	ldr	r1, [pc, #68]	@ (8008568 <xTimerCreateTimerTask+0x88>)
 8008522:	4812      	ldr	r0, [pc, #72]	@ (800856c <xTimerCreateTimerTask+0x8c>)
 8008524:	f7ff f8a8 	bl	8007678 <xTaskCreateStatic>
 8008528:	4603      	mov	r3, r0
 800852a:	4a11      	ldr	r2, [pc, #68]	@ (8008570 <xTimerCreateTimerTask+0x90>)
 800852c:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800852e:	4b10      	ldr	r3, [pc, #64]	@ (8008570 <xTimerCreateTimerTask+0x90>)
 8008530:	681b      	ldr	r3, [r3, #0]
 8008532:	2b00      	cmp	r3, #0
 8008534:	d001      	beq.n	800853a <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8008536:	2301      	movs	r3, #1
 8008538:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800853a:	697b      	ldr	r3, [r7, #20]
 800853c:	2b00      	cmp	r3, #0
 800853e:	d10b      	bne.n	8008558 <xTimerCreateTimerTask+0x78>
	__asm volatile
 8008540:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008544:	f383 8811 	msr	BASEPRI, r3
 8008548:	f3bf 8f6f 	isb	sy
 800854c:	f3bf 8f4f 	dsb	sy
 8008550:	613b      	str	r3, [r7, #16]
}
 8008552:	bf00      	nop
 8008554:	bf00      	nop
 8008556:	e7fd      	b.n	8008554 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8008558:	697b      	ldr	r3, [r7, #20]
}
 800855a:	4618      	mov	r0, r3
 800855c:	3718      	adds	r7, #24
 800855e:	46bd      	mov	sp, r7
 8008560:	bd80      	pop	{r7, pc}
 8008562:	bf00      	nop
 8008564:	200054b0 	.word	0x200054b0
 8008568:	08016c58 	.word	0x08016c58
 800856c:	080086ad 	.word	0x080086ad
 8008570:	200054b4 	.word	0x200054b4

08008574 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8008574:	b580      	push	{r7, lr}
 8008576:	b08a      	sub	sp, #40	@ 0x28
 8008578:	af00      	add	r7, sp, #0
 800857a:	60f8      	str	r0, [r7, #12]
 800857c:	60b9      	str	r1, [r7, #8]
 800857e:	607a      	str	r2, [r7, #4]
 8008580:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8008582:	2300      	movs	r3, #0
 8008584:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8008586:	68fb      	ldr	r3, [r7, #12]
 8008588:	2b00      	cmp	r3, #0
 800858a:	d10b      	bne.n	80085a4 <xTimerGenericCommand+0x30>
	__asm volatile
 800858c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008590:	f383 8811 	msr	BASEPRI, r3
 8008594:	f3bf 8f6f 	isb	sy
 8008598:	f3bf 8f4f 	dsb	sy
 800859c:	623b      	str	r3, [r7, #32]
}
 800859e:	bf00      	nop
 80085a0:	bf00      	nop
 80085a2:	e7fd      	b.n	80085a0 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 80085a4:	4b19      	ldr	r3, [pc, #100]	@ (800860c <xTimerGenericCommand+0x98>)
 80085a6:	681b      	ldr	r3, [r3, #0]
 80085a8:	2b00      	cmp	r3, #0
 80085aa:	d02a      	beq.n	8008602 <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 80085ac:	68bb      	ldr	r3, [r7, #8]
 80085ae:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 80085b0:	687b      	ldr	r3, [r7, #4]
 80085b2:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 80085b4:	68fb      	ldr	r3, [r7, #12]
 80085b6:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 80085b8:	68bb      	ldr	r3, [r7, #8]
 80085ba:	2b05      	cmp	r3, #5
 80085bc:	dc18      	bgt.n	80085f0 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 80085be:	f7ff fead 	bl	800831c <xTaskGetSchedulerState>
 80085c2:	4603      	mov	r3, r0
 80085c4:	2b02      	cmp	r3, #2
 80085c6:	d109      	bne.n	80085dc <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80085c8:	4b10      	ldr	r3, [pc, #64]	@ (800860c <xTimerGenericCommand+0x98>)
 80085ca:	6818      	ldr	r0, [r3, #0]
 80085cc:	f107 0110 	add.w	r1, r7, #16
 80085d0:	2300      	movs	r3, #0
 80085d2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80085d4:	f7fe fc60 	bl	8006e98 <xQueueGenericSend>
 80085d8:	6278      	str	r0, [r7, #36]	@ 0x24
 80085da:	e012      	b.n	8008602 <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 80085dc:	4b0b      	ldr	r3, [pc, #44]	@ (800860c <xTimerGenericCommand+0x98>)
 80085de:	6818      	ldr	r0, [r3, #0]
 80085e0:	f107 0110 	add.w	r1, r7, #16
 80085e4:	2300      	movs	r3, #0
 80085e6:	2200      	movs	r2, #0
 80085e8:	f7fe fc56 	bl	8006e98 <xQueueGenericSend>
 80085ec:	6278      	str	r0, [r7, #36]	@ 0x24
 80085ee:	e008      	b.n	8008602 <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80085f0:	4b06      	ldr	r3, [pc, #24]	@ (800860c <xTimerGenericCommand+0x98>)
 80085f2:	6818      	ldr	r0, [r3, #0]
 80085f4:	f107 0110 	add.w	r1, r7, #16
 80085f8:	2300      	movs	r3, #0
 80085fa:	683a      	ldr	r2, [r7, #0]
 80085fc:	f7fe fd4e 	bl	800709c <xQueueGenericSendFromISR>
 8008600:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8008602:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8008604:	4618      	mov	r0, r3
 8008606:	3728      	adds	r7, #40	@ 0x28
 8008608:	46bd      	mov	sp, r7
 800860a:	bd80      	pop	{r7, pc}
 800860c:	200054b0 	.word	0x200054b0

08008610 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8008610:	b580      	push	{r7, lr}
 8008612:	b088      	sub	sp, #32
 8008614:	af02      	add	r7, sp, #8
 8008616:	6078      	str	r0, [r7, #4]
 8008618:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800861a:	4b23      	ldr	r3, [pc, #140]	@ (80086a8 <prvProcessExpiredTimer+0x98>)
 800861c:	681b      	ldr	r3, [r3, #0]
 800861e:	68db      	ldr	r3, [r3, #12]
 8008620:	68db      	ldr	r3, [r3, #12]
 8008622:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8008624:	697b      	ldr	r3, [r7, #20]
 8008626:	3304      	adds	r3, #4
 8008628:	4618      	mov	r0, r3
 800862a:	f7fe fb01 	bl	8006c30 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800862e:	697b      	ldr	r3, [r7, #20]
 8008630:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8008634:	f003 0304 	and.w	r3, r3, #4
 8008638:	2b00      	cmp	r3, #0
 800863a:	d023      	beq.n	8008684 <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800863c:	697b      	ldr	r3, [r7, #20]
 800863e:	699a      	ldr	r2, [r3, #24]
 8008640:	687b      	ldr	r3, [r7, #4]
 8008642:	18d1      	adds	r1, r2, r3
 8008644:	687b      	ldr	r3, [r7, #4]
 8008646:	683a      	ldr	r2, [r7, #0]
 8008648:	6978      	ldr	r0, [r7, #20]
 800864a:	f000 f8d5 	bl	80087f8 <prvInsertTimerInActiveList>
 800864e:	4603      	mov	r3, r0
 8008650:	2b00      	cmp	r3, #0
 8008652:	d020      	beq.n	8008696 <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8008654:	2300      	movs	r3, #0
 8008656:	9300      	str	r3, [sp, #0]
 8008658:	2300      	movs	r3, #0
 800865a:	687a      	ldr	r2, [r7, #4]
 800865c:	2100      	movs	r1, #0
 800865e:	6978      	ldr	r0, [r7, #20]
 8008660:	f7ff ff88 	bl	8008574 <xTimerGenericCommand>
 8008664:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8008666:	693b      	ldr	r3, [r7, #16]
 8008668:	2b00      	cmp	r3, #0
 800866a:	d114      	bne.n	8008696 <prvProcessExpiredTimer+0x86>
	__asm volatile
 800866c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008670:	f383 8811 	msr	BASEPRI, r3
 8008674:	f3bf 8f6f 	isb	sy
 8008678:	f3bf 8f4f 	dsb	sy
 800867c:	60fb      	str	r3, [r7, #12]
}
 800867e:	bf00      	nop
 8008680:	bf00      	nop
 8008682:	e7fd      	b.n	8008680 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8008684:	697b      	ldr	r3, [r7, #20]
 8008686:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800868a:	f023 0301 	bic.w	r3, r3, #1
 800868e:	b2da      	uxtb	r2, r3
 8008690:	697b      	ldr	r3, [r7, #20]
 8008692:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8008696:	697b      	ldr	r3, [r7, #20]
 8008698:	6a1b      	ldr	r3, [r3, #32]
 800869a:	6978      	ldr	r0, [r7, #20]
 800869c:	4798      	blx	r3
}
 800869e:	bf00      	nop
 80086a0:	3718      	adds	r7, #24
 80086a2:	46bd      	mov	sp, r7
 80086a4:	bd80      	pop	{r7, pc}
 80086a6:	bf00      	nop
 80086a8:	200054a8 	.word	0x200054a8

080086ac <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 80086ac:	b580      	push	{r7, lr}
 80086ae:	b084      	sub	sp, #16
 80086b0:	af00      	add	r7, sp, #0
 80086b2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80086b4:	f107 0308 	add.w	r3, r7, #8
 80086b8:	4618      	mov	r0, r3
 80086ba:	f000 f859 	bl	8008770 <prvGetNextExpireTime>
 80086be:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 80086c0:	68bb      	ldr	r3, [r7, #8]
 80086c2:	4619      	mov	r1, r3
 80086c4:	68f8      	ldr	r0, [r7, #12]
 80086c6:	f000 f805 	bl	80086d4 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 80086ca:	f000 f8d7 	bl	800887c <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80086ce:	bf00      	nop
 80086d0:	e7f0      	b.n	80086b4 <prvTimerTask+0x8>
	...

080086d4 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 80086d4:	b580      	push	{r7, lr}
 80086d6:	b084      	sub	sp, #16
 80086d8:	af00      	add	r7, sp, #0
 80086da:	6078      	str	r0, [r7, #4]
 80086dc:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 80086de:	f7ff fa0f 	bl	8007b00 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80086e2:	f107 0308 	add.w	r3, r7, #8
 80086e6:	4618      	mov	r0, r3
 80086e8:	f000 f866 	bl	80087b8 <prvSampleTimeNow>
 80086ec:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 80086ee:	68bb      	ldr	r3, [r7, #8]
 80086f0:	2b00      	cmp	r3, #0
 80086f2:	d130      	bne.n	8008756 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80086f4:	683b      	ldr	r3, [r7, #0]
 80086f6:	2b00      	cmp	r3, #0
 80086f8:	d10a      	bne.n	8008710 <prvProcessTimerOrBlockTask+0x3c>
 80086fa:	687a      	ldr	r2, [r7, #4]
 80086fc:	68fb      	ldr	r3, [r7, #12]
 80086fe:	429a      	cmp	r2, r3
 8008700:	d806      	bhi.n	8008710 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8008702:	f7ff fa0b 	bl	8007b1c <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8008706:	68f9      	ldr	r1, [r7, #12]
 8008708:	6878      	ldr	r0, [r7, #4]
 800870a:	f7ff ff81 	bl	8008610 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800870e:	e024      	b.n	800875a <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8008710:	683b      	ldr	r3, [r7, #0]
 8008712:	2b00      	cmp	r3, #0
 8008714:	d008      	beq.n	8008728 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8008716:	4b13      	ldr	r3, [pc, #76]	@ (8008764 <prvProcessTimerOrBlockTask+0x90>)
 8008718:	681b      	ldr	r3, [r3, #0]
 800871a:	681b      	ldr	r3, [r3, #0]
 800871c:	2b00      	cmp	r3, #0
 800871e:	d101      	bne.n	8008724 <prvProcessTimerOrBlockTask+0x50>
 8008720:	2301      	movs	r3, #1
 8008722:	e000      	b.n	8008726 <prvProcessTimerOrBlockTask+0x52>
 8008724:	2300      	movs	r3, #0
 8008726:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8008728:	4b0f      	ldr	r3, [pc, #60]	@ (8008768 <prvProcessTimerOrBlockTask+0x94>)
 800872a:	6818      	ldr	r0, [r3, #0]
 800872c:	687a      	ldr	r2, [r7, #4]
 800872e:	68fb      	ldr	r3, [r7, #12]
 8008730:	1ad3      	subs	r3, r2, r3
 8008732:	683a      	ldr	r2, [r7, #0]
 8008734:	4619      	mov	r1, r3
 8008736:	f7fe ff6b 	bl	8007610 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800873a:	f7ff f9ef 	bl	8007b1c <xTaskResumeAll>
 800873e:	4603      	mov	r3, r0
 8008740:	2b00      	cmp	r3, #0
 8008742:	d10a      	bne.n	800875a <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8008744:	4b09      	ldr	r3, [pc, #36]	@ (800876c <prvProcessTimerOrBlockTask+0x98>)
 8008746:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800874a:	601a      	str	r2, [r3, #0]
 800874c:	f3bf 8f4f 	dsb	sy
 8008750:	f3bf 8f6f 	isb	sy
}
 8008754:	e001      	b.n	800875a <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8008756:	f7ff f9e1 	bl	8007b1c <xTaskResumeAll>
}
 800875a:	bf00      	nop
 800875c:	3710      	adds	r7, #16
 800875e:	46bd      	mov	sp, r7
 8008760:	bd80      	pop	{r7, pc}
 8008762:	bf00      	nop
 8008764:	200054ac 	.word	0x200054ac
 8008768:	200054b0 	.word	0x200054b0
 800876c:	e000ed04 	.word	0xe000ed04

08008770 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8008770:	b480      	push	{r7}
 8008772:	b085      	sub	sp, #20
 8008774:	af00      	add	r7, sp, #0
 8008776:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8008778:	4b0e      	ldr	r3, [pc, #56]	@ (80087b4 <prvGetNextExpireTime+0x44>)
 800877a:	681b      	ldr	r3, [r3, #0]
 800877c:	681b      	ldr	r3, [r3, #0]
 800877e:	2b00      	cmp	r3, #0
 8008780:	d101      	bne.n	8008786 <prvGetNextExpireTime+0x16>
 8008782:	2201      	movs	r2, #1
 8008784:	e000      	b.n	8008788 <prvGetNextExpireTime+0x18>
 8008786:	2200      	movs	r2, #0
 8008788:	687b      	ldr	r3, [r7, #4]
 800878a:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800878c:	687b      	ldr	r3, [r7, #4]
 800878e:	681b      	ldr	r3, [r3, #0]
 8008790:	2b00      	cmp	r3, #0
 8008792:	d105      	bne.n	80087a0 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8008794:	4b07      	ldr	r3, [pc, #28]	@ (80087b4 <prvGetNextExpireTime+0x44>)
 8008796:	681b      	ldr	r3, [r3, #0]
 8008798:	68db      	ldr	r3, [r3, #12]
 800879a:	681b      	ldr	r3, [r3, #0]
 800879c:	60fb      	str	r3, [r7, #12]
 800879e:	e001      	b.n	80087a4 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 80087a0:	2300      	movs	r3, #0
 80087a2:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 80087a4:	68fb      	ldr	r3, [r7, #12]
}
 80087a6:	4618      	mov	r0, r3
 80087a8:	3714      	adds	r7, #20
 80087aa:	46bd      	mov	sp, r7
 80087ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087b0:	4770      	bx	lr
 80087b2:	bf00      	nop
 80087b4:	200054a8 	.word	0x200054a8

080087b8 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 80087b8:	b580      	push	{r7, lr}
 80087ba:	b084      	sub	sp, #16
 80087bc:	af00      	add	r7, sp, #0
 80087be:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 80087c0:	f7ff fa4a 	bl	8007c58 <xTaskGetTickCount>
 80087c4:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 80087c6:	4b0b      	ldr	r3, [pc, #44]	@ (80087f4 <prvSampleTimeNow+0x3c>)
 80087c8:	681b      	ldr	r3, [r3, #0]
 80087ca:	68fa      	ldr	r2, [r7, #12]
 80087cc:	429a      	cmp	r2, r3
 80087ce:	d205      	bcs.n	80087dc <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 80087d0:	f000 f93a 	bl	8008a48 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 80087d4:	687b      	ldr	r3, [r7, #4]
 80087d6:	2201      	movs	r2, #1
 80087d8:	601a      	str	r2, [r3, #0]
 80087da:	e002      	b.n	80087e2 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 80087dc:	687b      	ldr	r3, [r7, #4]
 80087de:	2200      	movs	r2, #0
 80087e0:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 80087e2:	4a04      	ldr	r2, [pc, #16]	@ (80087f4 <prvSampleTimeNow+0x3c>)
 80087e4:	68fb      	ldr	r3, [r7, #12]
 80087e6:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 80087e8:	68fb      	ldr	r3, [r7, #12]
}
 80087ea:	4618      	mov	r0, r3
 80087ec:	3710      	adds	r7, #16
 80087ee:	46bd      	mov	sp, r7
 80087f0:	bd80      	pop	{r7, pc}
 80087f2:	bf00      	nop
 80087f4:	200054b8 	.word	0x200054b8

080087f8 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 80087f8:	b580      	push	{r7, lr}
 80087fa:	b086      	sub	sp, #24
 80087fc:	af00      	add	r7, sp, #0
 80087fe:	60f8      	str	r0, [r7, #12]
 8008800:	60b9      	str	r1, [r7, #8]
 8008802:	607a      	str	r2, [r7, #4]
 8008804:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8008806:	2300      	movs	r3, #0
 8008808:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800880a:	68fb      	ldr	r3, [r7, #12]
 800880c:	68ba      	ldr	r2, [r7, #8]
 800880e:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8008810:	68fb      	ldr	r3, [r7, #12]
 8008812:	68fa      	ldr	r2, [r7, #12]
 8008814:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8008816:	68ba      	ldr	r2, [r7, #8]
 8008818:	687b      	ldr	r3, [r7, #4]
 800881a:	429a      	cmp	r2, r3
 800881c:	d812      	bhi.n	8008844 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800881e:	687a      	ldr	r2, [r7, #4]
 8008820:	683b      	ldr	r3, [r7, #0]
 8008822:	1ad2      	subs	r2, r2, r3
 8008824:	68fb      	ldr	r3, [r7, #12]
 8008826:	699b      	ldr	r3, [r3, #24]
 8008828:	429a      	cmp	r2, r3
 800882a:	d302      	bcc.n	8008832 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800882c:	2301      	movs	r3, #1
 800882e:	617b      	str	r3, [r7, #20]
 8008830:	e01b      	b.n	800886a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8008832:	4b10      	ldr	r3, [pc, #64]	@ (8008874 <prvInsertTimerInActiveList+0x7c>)
 8008834:	681a      	ldr	r2, [r3, #0]
 8008836:	68fb      	ldr	r3, [r7, #12]
 8008838:	3304      	adds	r3, #4
 800883a:	4619      	mov	r1, r3
 800883c:	4610      	mov	r0, r2
 800883e:	f7fe f9be 	bl	8006bbe <vListInsert>
 8008842:	e012      	b.n	800886a <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8008844:	687a      	ldr	r2, [r7, #4]
 8008846:	683b      	ldr	r3, [r7, #0]
 8008848:	429a      	cmp	r2, r3
 800884a:	d206      	bcs.n	800885a <prvInsertTimerInActiveList+0x62>
 800884c:	68ba      	ldr	r2, [r7, #8]
 800884e:	683b      	ldr	r3, [r7, #0]
 8008850:	429a      	cmp	r2, r3
 8008852:	d302      	bcc.n	800885a <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8008854:	2301      	movs	r3, #1
 8008856:	617b      	str	r3, [r7, #20]
 8008858:	e007      	b.n	800886a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800885a:	4b07      	ldr	r3, [pc, #28]	@ (8008878 <prvInsertTimerInActiveList+0x80>)
 800885c:	681a      	ldr	r2, [r3, #0]
 800885e:	68fb      	ldr	r3, [r7, #12]
 8008860:	3304      	adds	r3, #4
 8008862:	4619      	mov	r1, r3
 8008864:	4610      	mov	r0, r2
 8008866:	f7fe f9aa 	bl	8006bbe <vListInsert>
		}
	}

	return xProcessTimerNow;
 800886a:	697b      	ldr	r3, [r7, #20]
}
 800886c:	4618      	mov	r0, r3
 800886e:	3718      	adds	r7, #24
 8008870:	46bd      	mov	sp, r7
 8008872:	bd80      	pop	{r7, pc}
 8008874:	200054ac 	.word	0x200054ac
 8008878:	200054a8 	.word	0x200054a8

0800887c <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800887c:	b580      	push	{r7, lr}
 800887e:	b08e      	sub	sp, #56	@ 0x38
 8008880:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8008882:	e0ce      	b.n	8008a22 <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8008884:	687b      	ldr	r3, [r7, #4]
 8008886:	2b00      	cmp	r3, #0
 8008888:	da19      	bge.n	80088be <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800888a:	1d3b      	adds	r3, r7, #4
 800888c:	3304      	adds	r3, #4
 800888e:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8008890:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008892:	2b00      	cmp	r3, #0
 8008894:	d10b      	bne.n	80088ae <prvProcessReceivedCommands+0x32>
	__asm volatile
 8008896:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800889a:	f383 8811 	msr	BASEPRI, r3
 800889e:	f3bf 8f6f 	isb	sy
 80088a2:	f3bf 8f4f 	dsb	sy
 80088a6:	61fb      	str	r3, [r7, #28]
}
 80088a8:	bf00      	nop
 80088aa:	bf00      	nop
 80088ac:	e7fd      	b.n	80088aa <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 80088ae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80088b0:	681b      	ldr	r3, [r3, #0]
 80088b2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80088b4:	6850      	ldr	r0, [r2, #4]
 80088b6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80088b8:	6892      	ldr	r2, [r2, #8]
 80088ba:	4611      	mov	r1, r2
 80088bc:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 80088be:	687b      	ldr	r3, [r7, #4]
 80088c0:	2b00      	cmp	r3, #0
 80088c2:	f2c0 80ae 	blt.w	8008a22 <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 80088c6:	68fb      	ldr	r3, [r7, #12]
 80088c8:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 80088ca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80088cc:	695b      	ldr	r3, [r3, #20]
 80088ce:	2b00      	cmp	r3, #0
 80088d0:	d004      	beq.n	80088dc <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80088d2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80088d4:	3304      	adds	r3, #4
 80088d6:	4618      	mov	r0, r3
 80088d8:	f7fe f9aa 	bl	8006c30 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80088dc:	463b      	mov	r3, r7
 80088de:	4618      	mov	r0, r3
 80088e0:	f7ff ff6a 	bl	80087b8 <prvSampleTimeNow>
 80088e4:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 80088e6:	687b      	ldr	r3, [r7, #4]
 80088e8:	2b09      	cmp	r3, #9
 80088ea:	f200 8097 	bhi.w	8008a1c <prvProcessReceivedCommands+0x1a0>
 80088ee:	a201      	add	r2, pc, #4	@ (adr r2, 80088f4 <prvProcessReceivedCommands+0x78>)
 80088f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80088f4:	0800891d 	.word	0x0800891d
 80088f8:	0800891d 	.word	0x0800891d
 80088fc:	0800891d 	.word	0x0800891d
 8008900:	08008993 	.word	0x08008993
 8008904:	080089a7 	.word	0x080089a7
 8008908:	080089f3 	.word	0x080089f3
 800890c:	0800891d 	.word	0x0800891d
 8008910:	0800891d 	.word	0x0800891d
 8008914:	08008993 	.word	0x08008993
 8008918:	080089a7 	.word	0x080089a7
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800891c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800891e:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8008922:	f043 0301 	orr.w	r3, r3, #1
 8008926:	b2da      	uxtb	r2, r3
 8008928:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800892a:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800892e:	68ba      	ldr	r2, [r7, #8]
 8008930:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008932:	699b      	ldr	r3, [r3, #24]
 8008934:	18d1      	adds	r1, r2, r3
 8008936:	68bb      	ldr	r3, [r7, #8]
 8008938:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800893a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800893c:	f7ff ff5c 	bl	80087f8 <prvInsertTimerInActiveList>
 8008940:	4603      	mov	r3, r0
 8008942:	2b00      	cmp	r3, #0
 8008944:	d06c      	beq.n	8008a20 <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8008946:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008948:	6a1b      	ldr	r3, [r3, #32]
 800894a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800894c:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800894e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008950:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8008954:	f003 0304 	and.w	r3, r3, #4
 8008958:	2b00      	cmp	r3, #0
 800895a:	d061      	beq.n	8008a20 <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800895c:	68ba      	ldr	r2, [r7, #8]
 800895e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008960:	699b      	ldr	r3, [r3, #24]
 8008962:	441a      	add	r2, r3
 8008964:	2300      	movs	r3, #0
 8008966:	9300      	str	r3, [sp, #0]
 8008968:	2300      	movs	r3, #0
 800896a:	2100      	movs	r1, #0
 800896c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800896e:	f7ff fe01 	bl	8008574 <xTimerGenericCommand>
 8008972:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8008974:	6a3b      	ldr	r3, [r7, #32]
 8008976:	2b00      	cmp	r3, #0
 8008978:	d152      	bne.n	8008a20 <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 800897a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800897e:	f383 8811 	msr	BASEPRI, r3
 8008982:	f3bf 8f6f 	isb	sy
 8008986:	f3bf 8f4f 	dsb	sy
 800898a:	61bb      	str	r3, [r7, #24]
}
 800898c:	bf00      	nop
 800898e:	bf00      	nop
 8008990:	e7fd      	b.n	800898e <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8008992:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008994:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8008998:	f023 0301 	bic.w	r3, r3, #1
 800899c:	b2da      	uxtb	r2, r3
 800899e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80089a0:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 80089a4:	e03d      	b.n	8008a22 <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80089a6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80089a8:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80089ac:	f043 0301 	orr.w	r3, r3, #1
 80089b0:	b2da      	uxtb	r2, r3
 80089b2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80089b4:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80089b8:	68ba      	ldr	r2, [r7, #8]
 80089ba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80089bc:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80089be:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80089c0:	699b      	ldr	r3, [r3, #24]
 80089c2:	2b00      	cmp	r3, #0
 80089c4:	d10b      	bne.n	80089de <prvProcessReceivedCommands+0x162>
	__asm volatile
 80089c6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80089ca:	f383 8811 	msr	BASEPRI, r3
 80089ce:	f3bf 8f6f 	isb	sy
 80089d2:	f3bf 8f4f 	dsb	sy
 80089d6:	617b      	str	r3, [r7, #20]
}
 80089d8:	bf00      	nop
 80089da:	bf00      	nop
 80089dc:	e7fd      	b.n	80089da <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80089de:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80089e0:	699a      	ldr	r2, [r3, #24]
 80089e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80089e4:	18d1      	adds	r1, r2, r3
 80089e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80089e8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80089ea:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80089ec:	f7ff ff04 	bl	80087f8 <prvInsertTimerInActiveList>
					break;
 80089f0:	e017      	b.n	8008a22 <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 80089f2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80089f4:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80089f8:	f003 0302 	and.w	r3, r3, #2
 80089fc:	2b00      	cmp	r3, #0
 80089fe:	d103      	bne.n	8008a08 <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 8008a00:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008a02:	f000 fbe9 	bl	80091d8 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8008a06:	e00c      	b.n	8008a22 <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8008a08:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008a0a:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8008a0e:	f023 0301 	bic.w	r3, r3, #1
 8008a12:	b2da      	uxtb	r2, r3
 8008a14:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008a16:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8008a1a:	e002      	b.n	8008a22 <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 8008a1c:	bf00      	nop
 8008a1e:	e000      	b.n	8008a22 <prvProcessReceivedCommands+0x1a6>
					break;
 8008a20:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8008a22:	4b08      	ldr	r3, [pc, #32]	@ (8008a44 <prvProcessReceivedCommands+0x1c8>)
 8008a24:	681b      	ldr	r3, [r3, #0]
 8008a26:	1d39      	adds	r1, r7, #4
 8008a28:	2200      	movs	r2, #0
 8008a2a:	4618      	mov	r0, r3
 8008a2c:	f7fe fbd4 	bl	80071d8 <xQueueReceive>
 8008a30:	4603      	mov	r3, r0
 8008a32:	2b00      	cmp	r3, #0
 8008a34:	f47f af26 	bne.w	8008884 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8008a38:	bf00      	nop
 8008a3a:	bf00      	nop
 8008a3c:	3730      	adds	r7, #48	@ 0x30
 8008a3e:	46bd      	mov	sp, r7
 8008a40:	bd80      	pop	{r7, pc}
 8008a42:	bf00      	nop
 8008a44:	200054b0 	.word	0x200054b0

08008a48 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8008a48:	b580      	push	{r7, lr}
 8008a4a:	b088      	sub	sp, #32
 8008a4c:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8008a4e:	e049      	b.n	8008ae4 <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8008a50:	4b2e      	ldr	r3, [pc, #184]	@ (8008b0c <prvSwitchTimerLists+0xc4>)
 8008a52:	681b      	ldr	r3, [r3, #0]
 8008a54:	68db      	ldr	r3, [r3, #12]
 8008a56:	681b      	ldr	r3, [r3, #0]
 8008a58:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008a5a:	4b2c      	ldr	r3, [pc, #176]	@ (8008b0c <prvSwitchTimerLists+0xc4>)
 8008a5c:	681b      	ldr	r3, [r3, #0]
 8008a5e:	68db      	ldr	r3, [r3, #12]
 8008a60:	68db      	ldr	r3, [r3, #12]
 8008a62:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8008a64:	68fb      	ldr	r3, [r7, #12]
 8008a66:	3304      	adds	r3, #4
 8008a68:	4618      	mov	r0, r3
 8008a6a:	f7fe f8e1 	bl	8006c30 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8008a6e:	68fb      	ldr	r3, [r7, #12]
 8008a70:	6a1b      	ldr	r3, [r3, #32]
 8008a72:	68f8      	ldr	r0, [r7, #12]
 8008a74:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8008a76:	68fb      	ldr	r3, [r7, #12]
 8008a78:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8008a7c:	f003 0304 	and.w	r3, r3, #4
 8008a80:	2b00      	cmp	r3, #0
 8008a82:	d02f      	beq.n	8008ae4 <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8008a84:	68fb      	ldr	r3, [r7, #12]
 8008a86:	699b      	ldr	r3, [r3, #24]
 8008a88:	693a      	ldr	r2, [r7, #16]
 8008a8a:	4413      	add	r3, r2
 8008a8c:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8008a8e:	68ba      	ldr	r2, [r7, #8]
 8008a90:	693b      	ldr	r3, [r7, #16]
 8008a92:	429a      	cmp	r2, r3
 8008a94:	d90e      	bls.n	8008ab4 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8008a96:	68fb      	ldr	r3, [r7, #12]
 8008a98:	68ba      	ldr	r2, [r7, #8]
 8008a9a:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8008a9c:	68fb      	ldr	r3, [r7, #12]
 8008a9e:	68fa      	ldr	r2, [r7, #12]
 8008aa0:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8008aa2:	4b1a      	ldr	r3, [pc, #104]	@ (8008b0c <prvSwitchTimerLists+0xc4>)
 8008aa4:	681a      	ldr	r2, [r3, #0]
 8008aa6:	68fb      	ldr	r3, [r7, #12]
 8008aa8:	3304      	adds	r3, #4
 8008aaa:	4619      	mov	r1, r3
 8008aac:	4610      	mov	r0, r2
 8008aae:	f7fe f886 	bl	8006bbe <vListInsert>
 8008ab2:	e017      	b.n	8008ae4 <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8008ab4:	2300      	movs	r3, #0
 8008ab6:	9300      	str	r3, [sp, #0]
 8008ab8:	2300      	movs	r3, #0
 8008aba:	693a      	ldr	r2, [r7, #16]
 8008abc:	2100      	movs	r1, #0
 8008abe:	68f8      	ldr	r0, [r7, #12]
 8008ac0:	f7ff fd58 	bl	8008574 <xTimerGenericCommand>
 8008ac4:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8008ac6:	687b      	ldr	r3, [r7, #4]
 8008ac8:	2b00      	cmp	r3, #0
 8008aca:	d10b      	bne.n	8008ae4 <prvSwitchTimerLists+0x9c>
	__asm volatile
 8008acc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008ad0:	f383 8811 	msr	BASEPRI, r3
 8008ad4:	f3bf 8f6f 	isb	sy
 8008ad8:	f3bf 8f4f 	dsb	sy
 8008adc:	603b      	str	r3, [r7, #0]
}
 8008ade:	bf00      	nop
 8008ae0:	bf00      	nop
 8008ae2:	e7fd      	b.n	8008ae0 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8008ae4:	4b09      	ldr	r3, [pc, #36]	@ (8008b0c <prvSwitchTimerLists+0xc4>)
 8008ae6:	681b      	ldr	r3, [r3, #0]
 8008ae8:	681b      	ldr	r3, [r3, #0]
 8008aea:	2b00      	cmp	r3, #0
 8008aec:	d1b0      	bne.n	8008a50 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8008aee:	4b07      	ldr	r3, [pc, #28]	@ (8008b0c <prvSwitchTimerLists+0xc4>)
 8008af0:	681b      	ldr	r3, [r3, #0]
 8008af2:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8008af4:	4b06      	ldr	r3, [pc, #24]	@ (8008b10 <prvSwitchTimerLists+0xc8>)
 8008af6:	681b      	ldr	r3, [r3, #0]
 8008af8:	4a04      	ldr	r2, [pc, #16]	@ (8008b0c <prvSwitchTimerLists+0xc4>)
 8008afa:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8008afc:	4a04      	ldr	r2, [pc, #16]	@ (8008b10 <prvSwitchTimerLists+0xc8>)
 8008afe:	697b      	ldr	r3, [r7, #20]
 8008b00:	6013      	str	r3, [r2, #0]
}
 8008b02:	bf00      	nop
 8008b04:	3718      	adds	r7, #24
 8008b06:	46bd      	mov	sp, r7
 8008b08:	bd80      	pop	{r7, pc}
 8008b0a:	bf00      	nop
 8008b0c:	200054a8 	.word	0x200054a8
 8008b10:	200054ac 	.word	0x200054ac

08008b14 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8008b14:	b580      	push	{r7, lr}
 8008b16:	b082      	sub	sp, #8
 8008b18:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8008b1a:	f000 f96d 	bl	8008df8 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8008b1e:	4b15      	ldr	r3, [pc, #84]	@ (8008b74 <prvCheckForValidListAndQueue+0x60>)
 8008b20:	681b      	ldr	r3, [r3, #0]
 8008b22:	2b00      	cmp	r3, #0
 8008b24:	d120      	bne.n	8008b68 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8008b26:	4814      	ldr	r0, [pc, #80]	@ (8008b78 <prvCheckForValidListAndQueue+0x64>)
 8008b28:	f7fd fff8 	bl	8006b1c <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8008b2c:	4813      	ldr	r0, [pc, #76]	@ (8008b7c <prvCheckForValidListAndQueue+0x68>)
 8008b2e:	f7fd fff5 	bl	8006b1c <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8008b32:	4b13      	ldr	r3, [pc, #76]	@ (8008b80 <prvCheckForValidListAndQueue+0x6c>)
 8008b34:	4a10      	ldr	r2, [pc, #64]	@ (8008b78 <prvCheckForValidListAndQueue+0x64>)
 8008b36:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8008b38:	4b12      	ldr	r3, [pc, #72]	@ (8008b84 <prvCheckForValidListAndQueue+0x70>)
 8008b3a:	4a10      	ldr	r2, [pc, #64]	@ (8008b7c <prvCheckForValidListAndQueue+0x68>)
 8008b3c:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8008b3e:	2300      	movs	r3, #0
 8008b40:	9300      	str	r3, [sp, #0]
 8008b42:	4b11      	ldr	r3, [pc, #68]	@ (8008b88 <prvCheckForValidListAndQueue+0x74>)
 8008b44:	4a11      	ldr	r2, [pc, #68]	@ (8008b8c <prvCheckForValidListAndQueue+0x78>)
 8008b46:	2110      	movs	r1, #16
 8008b48:	200a      	movs	r0, #10
 8008b4a:	f7fe f905 	bl	8006d58 <xQueueGenericCreateStatic>
 8008b4e:	4603      	mov	r3, r0
 8008b50:	4a08      	ldr	r2, [pc, #32]	@ (8008b74 <prvCheckForValidListAndQueue+0x60>)
 8008b52:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8008b54:	4b07      	ldr	r3, [pc, #28]	@ (8008b74 <prvCheckForValidListAndQueue+0x60>)
 8008b56:	681b      	ldr	r3, [r3, #0]
 8008b58:	2b00      	cmp	r3, #0
 8008b5a:	d005      	beq.n	8008b68 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8008b5c:	4b05      	ldr	r3, [pc, #20]	@ (8008b74 <prvCheckForValidListAndQueue+0x60>)
 8008b5e:	681b      	ldr	r3, [r3, #0]
 8008b60:	490b      	ldr	r1, [pc, #44]	@ (8008b90 <prvCheckForValidListAndQueue+0x7c>)
 8008b62:	4618      	mov	r0, r3
 8008b64:	f7fe fd2a 	bl	80075bc <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8008b68:	f000 f978 	bl	8008e5c <vPortExitCritical>
}
 8008b6c:	bf00      	nop
 8008b6e:	46bd      	mov	sp, r7
 8008b70:	bd80      	pop	{r7, pc}
 8008b72:	bf00      	nop
 8008b74:	200054b0 	.word	0x200054b0
 8008b78:	20005480 	.word	0x20005480
 8008b7c:	20005494 	.word	0x20005494
 8008b80:	200054a8 	.word	0x200054a8
 8008b84:	200054ac 	.word	0x200054ac
 8008b88:	2000555c 	.word	0x2000555c
 8008b8c:	200054bc 	.word	0x200054bc
 8008b90:	08016c60 	.word	0x08016c60

08008b94 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8008b94:	b480      	push	{r7}
 8008b96:	b085      	sub	sp, #20
 8008b98:	af00      	add	r7, sp, #0
 8008b9a:	60f8      	str	r0, [r7, #12]
 8008b9c:	60b9      	str	r1, [r7, #8]
 8008b9e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8008ba0:	68fb      	ldr	r3, [r7, #12]
 8008ba2:	3b04      	subs	r3, #4
 8008ba4:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8008ba6:	68fb      	ldr	r3, [r7, #12]
 8008ba8:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8008bac:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8008bae:	68fb      	ldr	r3, [r7, #12]
 8008bb0:	3b04      	subs	r3, #4
 8008bb2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8008bb4:	68bb      	ldr	r3, [r7, #8]
 8008bb6:	f023 0201 	bic.w	r2, r3, #1
 8008bba:	68fb      	ldr	r3, [r7, #12]
 8008bbc:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8008bbe:	68fb      	ldr	r3, [r7, #12]
 8008bc0:	3b04      	subs	r3, #4
 8008bc2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8008bc4:	4a0c      	ldr	r2, [pc, #48]	@ (8008bf8 <pxPortInitialiseStack+0x64>)
 8008bc6:	68fb      	ldr	r3, [r7, #12]
 8008bc8:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8008bca:	68fb      	ldr	r3, [r7, #12]
 8008bcc:	3b14      	subs	r3, #20
 8008bce:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8008bd0:	687a      	ldr	r2, [r7, #4]
 8008bd2:	68fb      	ldr	r3, [r7, #12]
 8008bd4:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8008bd6:	68fb      	ldr	r3, [r7, #12]
 8008bd8:	3b04      	subs	r3, #4
 8008bda:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8008bdc:	68fb      	ldr	r3, [r7, #12]
 8008bde:	f06f 0202 	mvn.w	r2, #2
 8008be2:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8008be4:	68fb      	ldr	r3, [r7, #12]
 8008be6:	3b20      	subs	r3, #32
 8008be8:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8008bea:	68fb      	ldr	r3, [r7, #12]
}
 8008bec:	4618      	mov	r0, r3
 8008bee:	3714      	adds	r7, #20
 8008bf0:	46bd      	mov	sp, r7
 8008bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bf6:	4770      	bx	lr
 8008bf8:	08008bfd 	.word	0x08008bfd

08008bfc <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8008bfc:	b480      	push	{r7}
 8008bfe:	b085      	sub	sp, #20
 8008c00:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8008c02:	2300      	movs	r3, #0
 8008c04:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8008c06:	4b13      	ldr	r3, [pc, #76]	@ (8008c54 <prvTaskExitError+0x58>)
 8008c08:	681b      	ldr	r3, [r3, #0]
 8008c0a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8008c0e:	d00b      	beq.n	8008c28 <prvTaskExitError+0x2c>
	__asm volatile
 8008c10:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008c14:	f383 8811 	msr	BASEPRI, r3
 8008c18:	f3bf 8f6f 	isb	sy
 8008c1c:	f3bf 8f4f 	dsb	sy
 8008c20:	60fb      	str	r3, [r7, #12]
}
 8008c22:	bf00      	nop
 8008c24:	bf00      	nop
 8008c26:	e7fd      	b.n	8008c24 <prvTaskExitError+0x28>
	__asm volatile
 8008c28:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008c2c:	f383 8811 	msr	BASEPRI, r3
 8008c30:	f3bf 8f6f 	isb	sy
 8008c34:	f3bf 8f4f 	dsb	sy
 8008c38:	60bb      	str	r3, [r7, #8]
}
 8008c3a:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8008c3c:	bf00      	nop
 8008c3e:	687b      	ldr	r3, [r7, #4]
 8008c40:	2b00      	cmp	r3, #0
 8008c42:	d0fc      	beq.n	8008c3e <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8008c44:	bf00      	nop
 8008c46:	bf00      	nop
 8008c48:	3714      	adds	r7, #20
 8008c4a:	46bd      	mov	sp, r7
 8008c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c50:	4770      	bx	lr
 8008c52:	bf00      	nop
 8008c54:	20000014 	.word	0x20000014
	...

08008c60 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8008c60:	4b07      	ldr	r3, [pc, #28]	@ (8008c80 <pxCurrentTCBConst2>)
 8008c62:	6819      	ldr	r1, [r3, #0]
 8008c64:	6808      	ldr	r0, [r1, #0]
 8008c66:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008c6a:	f380 8809 	msr	PSP, r0
 8008c6e:	f3bf 8f6f 	isb	sy
 8008c72:	f04f 0000 	mov.w	r0, #0
 8008c76:	f380 8811 	msr	BASEPRI, r0
 8008c7a:	4770      	bx	lr
 8008c7c:	f3af 8000 	nop.w

08008c80 <pxCurrentTCBConst2>:
 8008c80:	20004f80 	.word	0x20004f80
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8008c84:	bf00      	nop
 8008c86:	bf00      	nop

08008c88 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8008c88:	4808      	ldr	r0, [pc, #32]	@ (8008cac <prvPortStartFirstTask+0x24>)
 8008c8a:	6800      	ldr	r0, [r0, #0]
 8008c8c:	6800      	ldr	r0, [r0, #0]
 8008c8e:	f380 8808 	msr	MSP, r0
 8008c92:	f04f 0000 	mov.w	r0, #0
 8008c96:	f380 8814 	msr	CONTROL, r0
 8008c9a:	b662      	cpsie	i
 8008c9c:	b661      	cpsie	f
 8008c9e:	f3bf 8f4f 	dsb	sy
 8008ca2:	f3bf 8f6f 	isb	sy
 8008ca6:	df00      	svc	0
 8008ca8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8008caa:	bf00      	nop
 8008cac:	e000ed08 	.word	0xe000ed08

08008cb0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8008cb0:	b580      	push	{r7, lr}
 8008cb2:	b086      	sub	sp, #24
 8008cb4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8008cb6:	4b47      	ldr	r3, [pc, #284]	@ (8008dd4 <xPortStartScheduler+0x124>)
 8008cb8:	681b      	ldr	r3, [r3, #0]
 8008cba:	4a47      	ldr	r2, [pc, #284]	@ (8008dd8 <xPortStartScheduler+0x128>)
 8008cbc:	4293      	cmp	r3, r2
 8008cbe:	d10b      	bne.n	8008cd8 <xPortStartScheduler+0x28>
	__asm volatile
 8008cc0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008cc4:	f383 8811 	msr	BASEPRI, r3
 8008cc8:	f3bf 8f6f 	isb	sy
 8008ccc:	f3bf 8f4f 	dsb	sy
 8008cd0:	613b      	str	r3, [r7, #16]
}
 8008cd2:	bf00      	nop
 8008cd4:	bf00      	nop
 8008cd6:	e7fd      	b.n	8008cd4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8008cd8:	4b3e      	ldr	r3, [pc, #248]	@ (8008dd4 <xPortStartScheduler+0x124>)
 8008cda:	681b      	ldr	r3, [r3, #0]
 8008cdc:	4a3f      	ldr	r2, [pc, #252]	@ (8008ddc <xPortStartScheduler+0x12c>)
 8008cde:	4293      	cmp	r3, r2
 8008ce0:	d10b      	bne.n	8008cfa <xPortStartScheduler+0x4a>
	__asm volatile
 8008ce2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008ce6:	f383 8811 	msr	BASEPRI, r3
 8008cea:	f3bf 8f6f 	isb	sy
 8008cee:	f3bf 8f4f 	dsb	sy
 8008cf2:	60fb      	str	r3, [r7, #12]
}
 8008cf4:	bf00      	nop
 8008cf6:	bf00      	nop
 8008cf8:	e7fd      	b.n	8008cf6 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8008cfa:	4b39      	ldr	r3, [pc, #228]	@ (8008de0 <xPortStartScheduler+0x130>)
 8008cfc:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8008cfe:	697b      	ldr	r3, [r7, #20]
 8008d00:	781b      	ldrb	r3, [r3, #0]
 8008d02:	b2db      	uxtb	r3, r3
 8008d04:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8008d06:	697b      	ldr	r3, [r7, #20]
 8008d08:	22ff      	movs	r2, #255	@ 0xff
 8008d0a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8008d0c:	697b      	ldr	r3, [r7, #20]
 8008d0e:	781b      	ldrb	r3, [r3, #0]
 8008d10:	b2db      	uxtb	r3, r3
 8008d12:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8008d14:	78fb      	ldrb	r3, [r7, #3]
 8008d16:	b2db      	uxtb	r3, r3
 8008d18:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8008d1c:	b2da      	uxtb	r2, r3
 8008d1e:	4b31      	ldr	r3, [pc, #196]	@ (8008de4 <xPortStartScheduler+0x134>)
 8008d20:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8008d22:	4b31      	ldr	r3, [pc, #196]	@ (8008de8 <xPortStartScheduler+0x138>)
 8008d24:	2207      	movs	r2, #7
 8008d26:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8008d28:	e009      	b.n	8008d3e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 8008d2a:	4b2f      	ldr	r3, [pc, #188]	@ (8008de8 <xPortStartScheduler+0x138>)
 8008d2c:	681b      	ldr	r3, [r3, #0]
 8008d2e:	3b01      	subs	r3, #1
 8008d30:	4a2d      	ldr	r2, [pc, #180]	@ (8008de8 <xPortStartScheduler+0x138>)
 8008d32:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8008d34:	78fb      	ldrb	r3, [r7, #3]
 8008d36:	b2db      	uxtb	r3, r3
 8008d38:	005b      	lsls	r3, r3, #1
 8008d3a:	b2db      	uxtb	r3, r3
 8008d3c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8008d3e:	78fb      	ldrb	r3, [r7, #3]
 8008d40:	b2db      	uxtb	r3, r3
 8008d42:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008d46:	2b80      	cmp	r3, #128	@ 0x80
 8008d48:	d0ef      	beq.n	8008d2a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8008d4a:	4b27      	ldr	r3, [pc, #156]	@ (8008de8 <xPortStartScheduler+0x138>)
 8008d4c:	681b      	ldr	r3, [r3, #0]
 8008d4e:	f1c3 0307 	rsb	r3, r3, #7
 8008d52:	2b04      	cmp	r3, #4
 8008d54:	d00b      	beq.n	8008d6e <xPortStartScheduler+0xbe>
	__asm volatile
 8008d56:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008d5a:	f383 8811 	msr	BASEPRI, r3
 8008d5e:	f3bf 8f6f 	isb	sy
 8008d62:	f3bf 8f4f 	dsb	sy
 8008d66:	60bb      	str	r3, [r7, #8]
}
 8008d68:	bf00      	nop
 8008d6a:	bf00      	nop
 8008d6c:	e7fd      	b.n	8008d6a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8008d6e:	4b1e      	ldr	r3, [pc, #120]	@ (8008de8 <xPortStartScheduler+0x138>)
 8008d70:	681b      	ldr	r3, [r3, #0]
 8008d72:	021b      	lsls	r3, r3, #8
 8008d74:	4a1c      	ldr	r2, [pc, #112]	@ (8008de8 <xPortStartScheduler+0x138>)
 8008d76:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8008d78:	4b1b      	ldr	r3, [pc, #108]	@ (8008de8 <xPortStartScheduler+0x138>)
 8008d7a:	681b      	ldr	r3, [r3, #0]
 8008d7c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8008d80:	4a19      	ldr	r2, [pc, #100]	@ (8008de8 <xPortStartScheduler+0x138>)
 8008d82:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8008d84:	687b      	ldr	r3, [r7, #4]
 8008d86:	b2da      	uxtb	r2, r3
 8008d88:	697b      	ldr	r3, [r7, #20]
 8008d8a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8008d8c:	4b17      	ldr	r3, [pc, #92]	@ (8008dec <xPortStartScheduler+0x13c>)
 8008d8e:	681b      	ldr	r3, [r3, #0]
 8008d90:	4a16      	ldr	r2, [pc, #88]	@ (8008dec <xPortStartScheduler+0x13c>)
 8008d92:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8008d96:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8008d98:	4b14      	ldr	r3, [pc, #80]	@ (8008dec <xPortStartScheduler+0x13c>)
 8008d9a:	681b      	ldr	r3, [r3, #0]
 8008d9c:	4a13      	ldr	r2, [pc, #76]	@ (8008dec <xPortStartScheduler+0x13c>)
 8008d9e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8008da2:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8008da4:	f000 f8da 	bl	8008f5c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8008da8:	4b11      	ldr	r3, [pc, #68]	@ (8008df0 <xPortStartScheduler+0x140>)
 8008daa:	2200      	movs	r2, #0
 8008dac:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8008dae:	f000 f8f9 	bl	8008fa4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8008db2:	4b10      	ldr	r3, [pc, #64]	@ (8008df4 <xPortStartScheduler+0x144>)
 8008db4:	681b      	ldr	r3, [r3, #0]
 8008db6:	4a0f      	ldr	r2, [pc, #60]	@ (8008df4 <xPortStartScheduler+0x144>)
 8008db8:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 8008dbc:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8008dbe:	f7ff ff63 	bl	8008c88 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8008dc2:	f7ff f813 	bl	8007dec <vTaskSwitchContext>
	prvTaskExitError();
 8008dc6:	f7ff ff19 	bl	8008bfc <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8008dca:	2300      	movs	r3, #0
}
 8008dcc:	4618      	mov	r0, r3
 8008dce:	3718      	adds	r7, #24
 8008dd0:	46bd      	mov	sp, r7
 8008dd2:	bd80      	pop	{r7, pc}
 8008dd4:	e000ed00 	.word	0xe000ed00
 8008dd8:	410fc271 	.word	0x410fc271
 8008ddc:	410fc270 	.word	0x410fc270
 8008de0:	e000e400 	.word	0xe000e400
 8008de4:	200055ac 	.word	0x200055ac
 8008de8:	200055b0 	.word	0x200055b0
 8008dec:	e000ed20 	.word	0xe000ed20
 8008df0:	20000014 	.word	0x20000014
 8008df4:	e000ef34 	.word	0xe000ef34

08008df8 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8008df8:	b480      	push	{r7}
 8008dfa:	b083      	sub	sp, #12
 8008dfc:	af00      	add	r7, sp, #0
	__asm volatile
 8008dfe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008e02:	f383 8811 	msr	BASEPRI, r3
 8008e06:	f3bf 8f6f 	isb	sy
 8008e0a:	f3bf 8f4f 	dsb	sy
 8008e0e:	607b      	str	r3, [r7, #4]
}
 8008e10:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8008e12:	4b10      	ldr	r3, [pc, #64]	@ (8008e54 <vPortEnterCritical+0x5c>)
 8008e14:	681b      	ldr	r3, [r3, #0]
 8008e16:	3301      	adds	r3, #1
 8008e18:	4a0e      	ldr	r2, [pc, #56]	@ (8008e54 <vPortEnterCritical+0x5c>)
 8008e1a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8008e1c:	4b0d      	ldr	r3, [pc, #52]	@ (8008e54 <vPortEnterCritical+0x5c>)
 8008e1e:	681b      	ldr	r3, [r3, #0]
 8008e20:	2b01      	cmp	r3, #1
 8008e22:	d110      	bne.n	8008e46 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8008e24:	4b0c      	ldr	r3, [pc, #48]	@ (8008e58 <vPortEnterCritical+0x60>)
 8008e26:	681b      	ldr	r3, [r3, #0]
 8008e28:	b2db      	uxtb	r3, r3
 8008e2a:	2b00      	cmp	r3, #0
 8008e2c:	d00b      	beq.n	8008e46 <vPortEnterCritical+0x4e>
	__asm volatile
 8008e2e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008e32:	f383 8811 	msr	BASEPRI, r3
 8008e36:	f3bf 8f6f 	isb	sy
 8008e3a:	f3bf 8f4f 	dsb	sy
 8008e3e:	603b      	str	r3, [r7, #0]
}
 8008e40:	bf00      	nop
 8008e42:	bf00      	nop
 8008e44:	e7fd      	b.n	8008e42 <vPortEnterCritical+0x4a>
	}
}
 8008e46:	bf00      	nop
 8008e48:	370c      	adds	r7, #12
 8008e4a:	46bd      	mov	sp, r7
 8008e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e50:	4770      	bx	lr
 8008e52:	bf00      	nop
 8008e54:	20000014 	.word	0x20000014
 8008e58:	e000ed04 	.word	0xe000ed04

08008e5c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8008e5c:	b480      	push	{r7}
 8008e5e:	b083      	sub	sp, #12
 8008e60:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8008e62:	4b12      	ldr	r3, [pc, #72]	@ (8008eac <vPortExitCritical+0x50>)
 8008e64:	681b      	ldr	r3, [r3, #0]
 8008e66:	2b00      	cmp	r3, #0
 8008e68:	d10b      	bne.n	8008e82 <vPortExitCritical+0x26>
	__asm volatile
 8008e6a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008e6e:	f383 8811 	msr	BASEPRI, r3
 8008e72:	f3bf 8f6f 	isb	sy
 8008e76:	f3bf 8f4f 	dsb	sy
 8008e7a:	607b      	str	r3, [r7, #4]
}
 8008e7c:	bf00      	nop
 8008e7e:	bf00      	nop
 8008e80:	e7fd      	b.n	8008e7e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8008e82:	4b0a      	ldr	r3, [pc, #40]	@ (8008eac <vPortExitCritical+0x50>)
 8008e84:	681b      	ldr	r3, [r3, #0]
 8008e86:	3b01      	subs	r3, #1
 8008e88:	4a08      	ldr	r2, [pc, #32]	@ (8008eac <vPortExitCritical+0x50>)
 8008e8a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8008e8c:	4b07      	ldr	r3, [pc, #28]	@ (8008eac <vPortExitCritical+0x50>)
 8008e8e:	681b      	ldr	r3, [r3, #0]
 8008e90:	2b00      	cmp	r3, #0
 8008e92:	d105      	bne.n	8008ea0 <vPortExitCritical+0x44>
 8008e94:	2300      	movs	r3, #0
 8008e96:	603b      	str	r3, [r7, #0]
	__asm volatile
 8008e98:	683b      	ldr	r3, [r7, #0]
 8008e9a:	f383 8811 	msr	BASEPRI, r3
}
 8008e9e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8008ea0:	bf00      	nop
 8008ea2:	370c      	adds	r7, #12
 8008ea4:	46bd      	mov	sp, r7
 8008ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008eaa:	4770      	bx	lr
 8008eac:	20000014 	.word	0x20000014

08008eb0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8008eb0:	f3ef 8009 	mrs	r0, PSP
 8008eb4:	f3bf 8f6f 	isb	sy
 8008eb8:	4b15      	ldr	r3, [pc, #84]	@ (8008f10 <pxCurrentTCBConst>)
 8008eba:	681a      	ldr	r2, [r3, #0]
 8008ebc:	f01e 0f10 	tst.w	lr, #16
 8008ec0:	bf08      	it	eq
 8008ec2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8008ec6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008eca:	6010      	str	r0, [r2, #0]
 8008ecc:	e92d 0009 	stmdb	sp!, {r0, r3}
 8008ed0:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8008ed4:	f380 8811 	msr	BASEPRI, r0
 8008ed8:	f3bf 8f4f 	dsb	sy
 8008edc:	f3bf 8f6f 	isb	sy
 8008ee0:	f7fe ff84 	bl	8007dec <vTaskSwitchContext>
 8008ee4:	f04f 0000 	mov.w	r0, #0
 8008ee8:	f380 8811 	msr	BASEPRI, r0
 8008eec:	bc09      	pop	{r0, r3}
 8008eee:	6819      	ldr	r1, [r3, #0]
 8008ef0:	6808      	ldr	r0, [r1, #0]
 8008ef2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008ef6:	f01e 0f10 	tst.w	lr, #16
 8008efa:	bf08      	it	eq
 8008efc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8008f00:	f380 8809 	msr	PSP, r0
 8008f04:	f3bf 8f6f 	isb	sy
 8008f08:	4770      	bx	lr
 8008f0a:	bf00      	nop
 8008f0c:	f3af 8000 	nop.w

08008f10 <pxCurrentTCBConst>:
 8008f10:	20004f80 	.word	0x20004f80
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8008f14:	bf00      	nop
 8008f16:	bf00      	nop

08008f18 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8008f18:	b580      	push	{r7, lr}
 8008f1a:	b082      	sub	sp, #8
 8008f1c:	af00      	add	r7, sp, #0
	__asm volatile
 8008f1e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008f22:	f383 8811 	msr	BASEPRI, r3
 8008f26:	f3bf 8f6f 	isb	sy
 8008f2a:	f3bf 8f4f 	dsb	sy
 8008f2e:	607b      	str	r3, [r7, #4]
}
 8008f30:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8008f32:	f7fe fea1 	bl	8007c78 <xTaskIncrementTick>
 8008f36:	4603      	mov	r3, r0
 8008f38:	2b00      	cmp	r3, #0
 8008f3a:	d003      	beq.n	8008f44 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8008f3c:	4b06      	ldr	r3, [pc, #24]	@ (8008f58 <xPortSysTickHandler+0x40>)
 8008f3e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008f42:	601a      	str	r2, [r3, #0]
 8008f44:	2300      	movs	r3, #0
 8008f46:	603b      	str	r3, [r7, #0]
	__asm volatile
 8008f48:	683b      	ldr	r3, [r7, #0]
 8008f4a:	f383 8811 	msr	BASEPRI, r3
}
 8008f4e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8008f50:	bf00      	nop
 8008f52:	3708      	adds	r7, #8
 8008f54:	46bd      	mov	sp, r7
 8008f56:	bd80      	pop	{r7, pc}
 8008f58:	e000ed04 	.word	0xe000ed04

08008f5c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8008f5c:	b480      	push	{r7}
 8008f5e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8008f60:	4b0b      	ldr	r3, [pc, #44]	@ (8008f90 <vPortSetupTimerInterrupt+0x34>)
 8008f62:	2200      	movs	r2, #0
 8008f64:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8008f66:	4b0b      	ldr	r3, [pc, #44]	@ (8008f94 <vPortSetupTimerInterrupt+0x38>)
 8008f68:	2200      	movs	r2, #0
 8008f6a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8008f6c:	4b0a      	ldr	r3, [pc, #40]	@ (8008f98 <vPortSetupTimerInterrupt+0x3c>)
 8008f6e:	681b      	ldr	r3, [r3, #0]
 8008f70:	4a0a      	ldr	r2, [pc, #40]	@ (8008f9c <vPortSetupTimerInterrupt+0x40>)
 8008f72:	fba2 2303 	umull	r2, r3, r2, r3
 8008f76:	099b      	lsrs	r3, r3, #6
 8008f78:	4a09      	ldr	r2, [pc, #36]	@ (8008fa0 <vPortSetupTimerInterrupt+0x44>)
 8008f7a:	3b01      	subs	r3, #1
 8008f7c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8008f7e:	4b04      	ldr	r3, [pc, #16]	@ (8008f90 <vPortSetupTimerInterrupt+0x34>)
 8008f80:	2207      	movs	r2, #7
 8008f82:	601a      	str	r2, [r3, #0]
}
 8008f84:	bf00      	nop
 8008f86:	46bd      	mov	sp, r7
 8008f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f8c:	4770      	bx	lr
 8008f8e:	bf00      	nop
 8008f90:	e000e010 	.word	0xe000e010
 8008f94:	e000e018 	.word	0xe000e018
 8008f98:	20000008 	.word	0x20000008
 8008f9c:	10624dd3 	.word	0x10624dd3
 8008fa0:	e000e014 	.word	0xe000e014

08008fa4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8008fa4:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8008fb4 <vPortEnableVFP+0x10>
 8008fa8:	6801      	ldr	r1, [r0, #0]
 8008faa:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8008fae:	6001      	str	r1, [r0, #0]
 8008fb0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8008fb2:	bf00      	nop
 8008fb4:	e000ed88 	.word	0xe000ed88

08008fb8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8008fb8:	b480      	push	{r7}
 8008fba:	b085      	sub	sp, #20
 8008fbc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8008fbe:	f3ef 8305 	mrs	r3, IPSR
 8008fc2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8008fc4:	68fb      	ldr	r3, [r7, #12]
 8008fc6:	2b0f      	cmp	r3, #15
 8008fc8:	d915      	bls.n	8008ff6 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8008fca:	4a18      	ldr	r2, [pc, #96]	@ (800902c <vPortValidateInterruptPriority+0x74>)
 8008fcc:	68fb      	ldr	r3, [r7, #12]
 8008fce:	4413      	add	r3, r2
 8008fd0:	781b      	ldrb	r3, [r3, #0]
 8008fd2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8008fd4:	4b16      	ldr	r3, [pc, #88]	@ (8009030 <vPortValidateInterruptPriority+0x78>)
 8008fd6:	781b      	ldrb	r3, [r3, #0]
 8008fd8:	7afa      	ldrb	r2, [r7, #11]
 8008fda:	429a      	cmp	r2, r3
 8008fdc:	d20b      	bcs.n	8008ff6 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 8008fde:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008fe2:	f383 8811 	msr	BASEPRI, r3
 8008fe6:	f3bf 8f6f 	isb	sy
 8008fea:	f3bf 8f4f 	dsb	sy
 8008fee:	607b      	str	r3, [r7, #4]
}
 8008ff0:	bf00      	nop
 8008ff2:	bf00      	nop
 8008ff4:	e7fd      	b.n	8008ff2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8008ff6:	4b0f      	ldr	r3, [pc, #60]	@ (8009034 <vPortValidateInterruptPriority+0x7c>)
 8008ff8:	681b      	ldr	r3, [r3, #0]
 8008ffa:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8008ffe:	4b0e      	ldr	r3, [pc, #56]	@ (8009038 <vPortValidateInterruptPriority+0x80>)
 8009000:	681b      	ldr	r3, [r3, #0]
 8009002:	429a      	cmp	r2, r3
 8009004:	d90b      	bls.n	800901e <vPortValidateInterruptPriority+0x66>
	__asm volatile
 8009006:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800900a:	f383 8811 	msr	BASEPRI, r3
 800900e:	f3bf 8f6f 	isb	sy
 8009012:	f3bf 8f4f 	dsb	sy
 8009016:	603b      	str	r3, [r7, #0]
}
 8009018:	bf00      	nop
 800901a:	bf00      	nop
 800901c:	e7fd      	b.n	800901a <vPortValidateInterruptPriority+0x62>
	}
 800901e:	bf00      	nop
 8009020:	3714      	adds	r7, #20
 8009022:	46bd      	mov	sp, r7
 8009024:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009028:	4770      	bx	lr
 800902a:	bf00      	nop
 800902c:	e000e3f0 	.word	0xe000e3f0
 8009030:	200055ac 	.word	0x200055ac
 8009034:	e000ed0c 	.word	0xe000ed0c
 8009038:	200055b0 	.word	0x200055b0

0800903c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800903c:	b580      	push	{r7, lr}
 800903e:	b08a      	sub	sp, #40	@ 0x28
 8009040:	af00      	add	r7, sp, #0
 8009042:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8009044:	2300      	movs	r3, #0
 8009046:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8009048:	f7fe fd5a 	bl	8007b00 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800904c:	4b5c      	ldr	r3, [pc, #368]	@ (80091c0 <pvPortMalloc+0x184>)
 800904e:	681b      	ldr	r3, [r3, #0]
 8009050:	2b00      	cmp	r3, #0
 8009052:	d101      	bne.n	8009058 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8009054:	f000 f924 	bl	80092a0 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8009058:	4b5a      	ldr	r3, [pc, #360]	@ (80091c4 <pvPortMalloc+0x188>)
 800905a:	681a      	ldr	r2, [r3, #0]
 800905c:	687b      	ldr	r3, [r7, #4]
 800905e:	4013      	ands	r3, r2
 8009060:	2b00      	cmp	r3, #0
 8009062:	f040 8095 	bne.w	8009190 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8009066:	687b      	ldr	r3, [r7, #4]
 8009068:	2b00      	cmp	r3, #0
 800906a:	d01e      	beq.n	80090aa <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 800906c:	2208      	movs	r2, #8
 800906e:	687b      	ldr	r3, [r7, #4]
 8009070:	4413      	add	r3, r2
 8009072:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8009074:	687b      	ldr	r3, [r7, #4]
 8009076:	f003 0307 	and.w	r3, r3, #7
 800907a:	2b00      	cmp	r3, #0
 800907c:	d015      	beq.n	80090aa <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800907e:	687b      	ldr	r3, [r7, #4]
 8009080:	f023 0307 	bic.w	r3, r3, #7
 8009084:	3308      	adds	r3, #8
 8009086:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8009088:	687b      	ldr	r3, [r7, #4]
 800908a:	f003 0307 	and.w	r3, r3, #7
 800908e:	2b00      	cmp	r3, #0
 8009090:	d00b      	beq.n	80090aa <pvPortMalloc+0x6e>
	__asm volatile
 8009092:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009096:	f383 8811 	msr	BASEPRI, r3
 800909a:	f3bf 8f6f 	isb	sy
 800909e:	f3bf 8f4f 	dsb	sy
 80090a2:	617b      	str	r3, [r7, #20]
}
 80090a4:	bf00      	nop
 80090a6:	bf00      	nop
 80090a8:	e7fd      	b.n	80090a6 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80090aa:	687b      	ldr	r3, [r7, #4]
 80090ac:	2b00      	cmp	r3, #0
 80090ae:	d06f      	beq.n	8009190 <pvPortMalloc+0x154>
 80090b0:	4b45      	ldr	r3, [pc, #276]	@ (80091c8 <pvPortMalloc+0x18c>)
 80090b2:	681b      	ldr	r3, [r3, #0]
 80090b4:	687a      	ldr	r2, [r7, #4]
 80090b6:	429a      	cmp	r2, r3
 80090b8:	d86a      	bhi.n	8009190 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80090ba:	4b44      	ldr	r3, [pc, #272]	@ (80091cc <pvPortMalloc+0x190>)
 80090bc:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80090be:	4b43      	ldr	r3, [pc, #268]	@ (80091cc <pvPortMalloc+0x190>)
 80090c0:	681b      	ldr	r3, [r3, #0]
 80090c2:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80090c4:	e004      	b.n	80090d0 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 80090c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80090c8:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80090ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80090cc:	681b      	ldr	r3, [r3, #0]
 80090ce:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80090d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80090d2:	685b      	ldr	r3, [r3, #4]
 80090d4:	687a      	ldr	r2, [r7, #4]
 80090d6:	429a      	cmp	r2, r3
 80090d8:	d903      	bls.n	80090e2 <pvPortMalloc+0xa6>
 80090da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80090dc:	681b      	ldr	r3, [r3, #0]
 80090de:	2b00      	cmp	r3, #0
 80090e0:	d1f1      	bne.n	80090c6 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80090e2:	4b37      	ldr	r3, [pc, #220]	@ (80091c0 <pvPortMalloc+0x184>)
 80090e4:	681b      	ldr	r3, [r3, #0]
 80090e6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80090e8:	429a      	cmp	r2, r3
 80090ea:	d051      	beq.n	8009190 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80090ec:	6a3b      	ldr	r3, [r7, #32]
 80090ee:	681b      	ldr	r3, [r3, #0]
 80090f0:	2208      	movs	r2, #8
 80090f2:	4413      	add	r3, r2
 80090f4:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80090f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80090f8:	681a      	ldr	r2, [r3, #0]
 80090fa:	6a3b      	ldr	r3, [r7, #32]
 80090fc:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80090fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009100:	685a      	ldr	r2, [r3, #4]
 8009102:	687b      	ldr	r3, [r7, #4]
 8009104:	1ad2      	subs	r2, r2, r3
 8009106:	2308      	movs	r3, #8
 8009108:	005b      	lsls	r3, r3, #1
 800910a:	429a      	cmp	r2, r3
 800910c:	d920      	bls.n	8009150 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800910e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009110:	687b      	ldr	r3, [r7, #4]
 8009112:	4413      	add	r3, r2
 8009114:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8009116:	69bb      	ldr	r3, [r7, #24]
 8009118:	f003 0307 	and.w	r3, r3, #7
 800911c:	2b00      	cmp	r3, #0
 800911e:	d00b      	beq.n	8009138 <pvPortMalloc+0xfc>
	__asm volatile
 8009120:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009124:	f383 8811 	msr	BASEPRI, r3
 8009128:	f3bf 8f6f 	isb	sy
 800912c:	f3bf 8f4f 	dsb	sy
 8009130:	613b      	str	r3, [r7, #16]
}
 8009132:	bf00      	nop
 8009134:	bf00      	nop
 8009136:	e7fd      	b.n	8009134 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8009138:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800913a:	685a      	ldr	r2, [r3, #4]
 800913c:	687b      	ldr	r3, [r7, #4]
 800913e:	1ad2      	subs	r2, r2, r3
 8009140:	69bb      	ldr	r3, [r7, #24]
 8009142:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8009144:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009146:	687a      	ldr	r2, [r7, #4]
 8009148:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800914a:	69b8      	ldr	r0, [r7, #24]
 800914c:	f000 f90a 	bl	8009364 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8009150:	4b1d      	ldr	r3, [pc, #116]	@ (80091c8 <pvPortMalloc+0x18c>)
 8009152:	681a      	ldr	r2, [r3, #0]
 8009154:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009156:	685b      	ldr	r3, [r3, #4]
 8009158:	1ad3      	subs	r3, r2, r3
 800915a:	4a1b      	ldr	r2, [pc, #108]	@ (80091c8 <pvPortMalloc+0x18c>)
 800915c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800915e:	4b1a      	ldr	r3, [pc, #104]	@ (80091c8 <pvPortMalloc+0x18c>)
 8009160:	681a      	ldr	r2, [r3, #0]
 8009162:	4b1b      	ldr	r3, [pc, #108]	@ (80091d0 <pvPortMalloc+0x194>)
 8009164:	681b      	ldr	r3, [r3, #0]
 8009166:	429a      	cmp	r2, r3
 8009168:	d203      	bcs.n	8009172 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800916a:	4b17      	ldr	r3, [pc, #92]	@ (80091c8 <pvPortMalloc+0x18c>)
 800916c:	681b      	ldr	r3, [r3, #0]
 800916e:	4a18      	ldr	r2, [pc, #96]	@ (80091d0 <pvPortMalloc+0x194>)
 8009170:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8009172:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009174:	685a      	ldr	r2, [r3, #4]
 8009176:	4b13      	ldr	r3, [pc, #76]	@ (80091c4 <pvPortMalloc+0x188>)
 8009178:	681b      	ldr	r3, [r3, #0]
 800917a:	431a      	orrs	r2, r3
 800917c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800917e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8009180:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009182:	2200      	movs	r2, #0
 8009184:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8009186:	4b13      	ldr	r3, [pc, #76]	@ (80091d4 <pvPortMalloc+0x198>)
 8009188:	681b      	ldr	r3, [r3, #0]
 800918a:	3301      	adds	r3, #1
 800918c:	4a11      	ldr	r2, [pc, #68]	@ (80091d4 <pvPortMalloc+0x198>)
 800918e:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8009190:	f7fe fcc4 	bl	8007b1c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8009194:	69fb      	ldr	r3, [r7, #28]
 8009196:	f003 0307 	and.w	r3, r3, #7
 800919a:	2b00      	cmp	r3, #0
 800919c:	d00b      	beq.n	80091b6 <pvPortMalloc+0x17a>
	__asm volatile
 800919e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80091a2:	f383 8811 	msr	BASEPRI, r3
 80091a6:	f3bf 8f6f 	isb	sy
 80091aa:	f3bf 8f4f 	dsb	sy
 80091ae:	60fb      	str	r3, [r7, #12]
}
 80091b0:	bf00      	nop
 80091b2:	bf00      	nop
 80091b4:	e7fd      	b.n	80091b2 <pvPortMalloc+0x176>
	return pvReturn;
 80091b6:	69fb      	ldr	r3, [r7, #28]
}
 80091b8:	4618      	mov	r0, r3
 80091ba:	3728      	adds	r7, #40	@ 0x28
 80091bc:	46bd      	mov	sp, r7
 80091be:	bd80      	pop	{r7, pc}
 80091c0:	200091bc 	.word	0x200091bc
 80091c4:	200091d0 	.word	0x200091d0
 80091c8:	200091c0 	.word	0x200091c0
 80091cc:	200091b4 	.word	0x200091b4
 80091d0:	200091c4 	.word	0x200091c4
 80091d4:	200091c8 	.word	0x200091c8

080091d8 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80091d8:	b580      	push	{r7, lr}
 80091da:	b086      	sub	sp, #24
 80091dc:	af00      	add	r7, sp, #0
 80091de:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80091e0:	687b      	ldr	r3, [r7, #4]
 80091e2:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80091e4:	687b      	ldr	r3, [r7, #4]
 80091e6:	2b00      	cmp	r3, #0
 80091e8:	d04f      	beq.n	800928a <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80091ea:	2308      	movs	r3, #8
 80091ec:	425b      	negs	r3, r3
 80091ee:	697a      	ldr	r2, [r7, #20]
 80091f0:	4413      	add	r3, r2
 80091f2:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80091f4:	697b      	ldr	r3, [r7, #20]
 80091f6:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80091f8:	693b      	ldr	r3, [r7, #16]
 80091fa:	685a      	ldr	r2, [r3, #4]
 80091fc:	4b25      	ldr	r3, [pc, #148]	@ (8009294 <vPortFree+0xbc>)
 80091fe:	681b      	ldr	r3, [r3, #0]
 8009200:	4013      	ands	r3, r2
 8009202:	2b00      	cmp	r3, #0
 8009204:	d10b      	bne.n	800921e <vPortFree+0x46>
	__asm volatile
 8009206:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800920a:	f383 8811 	msr	BASEPRI, r3
 800920e:	f3bf 8f6f 	isb	sy
 8009212:	f3bf 8f4f 	dsb	sy
 8009216:	60fb      	str	r3, [r7, #12]
}
 8009218:	bf00      	nop
 800921a:	bf00      	nop
 800921c:	e7fd      	b.n	800921a <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800921e:	693b      	ldr	r3, [r7, #16]
 8009220:	681b      	ldr	r3, [r3, #0]
 8009222:	2b00      	cmp	r3, #0
 8009224:	d00b      	beq.n	800923e <vPortFree+0x66>
	__asm volatile
 8009226:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800922a:	f383 8811 	msr	BASEPRI, r3
 800922e:	f3bf 8f6f 	isb	sy
 8009232:	f3bf 8f4f 	dsb	sy
 8009236:	60bb      	str	r3, [r7, #8]
}
 8009238:	bf00      	nop
 800923a:	bf00      	nop
 800923c:	e7fd      	b.n	800923a <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800923e:	693b      	ldr	r3, [r7, #16]
 8009240:	685a      	ldr	r2, [r3, #4]
 8009242:	4b14      	ldr	r3, [pc, #80]	@ (8009294 <vPortFree+0xbc>)
 8009244:	681b      	ldr	r3, [r3, #0]
 8009246:	4013      	ands	r3, r2
 8009248:	2b00      	cmp	r3, #0
 800924a:	d01e      	beq.n	800928a <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800924c:	693b      	ldr	r3, [r7, #16]
 800924e:	681b      	ldr	r3, [r3, #0]
 8009250:	2b00      	cmp	r3, #0
 8009252:	d11a      	bne.n	800928a <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8009254:	693b      	ldr	r3, [r7, #16]
 8009256:	685a      	ldr	r2, [r3, #4]
 8009258:	4b0e      	ldr	r3, [pc, #56]	@ (8009294 <vPortFree+0xbc>)
 800925a:	681b      	ldr	r3, [r3, #0]
 800925c:	43db      	mvns	r3, r3
 800925e:	401a      	ands	r2, r3
 8009260:	693b      	ldr	r3, [r7, #16]
 8009262:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8009264:	f7fe fc4c 	bl	8007b00 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8009268:	693b      	ldr	r3, [r7, #16]
 800926a:	685a      	ldr	r2, [r3, #4]
 800926c:	4b0a      	ldr	r3, [pc, #40]	@ (8009298 <vPortFree+0xc0>)
 800926e:	681b      	ldr	r3, [r3, #0]
 8009270:	4413      	add	r3, r2
 8009272:	4a09      	ldr	r2, [pc, #36]	@ (8009298 <vPortFree+0xc0>)
 8009274:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8009276:	6938      	ldr	r0, [r7, #16]
 8009278:	f000 f874 	bl	8009364 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800927c:	4b07      	ldr	r3, [pc, #28]	@ (800929c <vPortFree+0xc4>)
 800927e:	681b      	ldr	r3, [r3, #0]
 8009280:	3301      	adds	r3, #1
 8009282:	4a06      	ldr	r2, [pc, #24]	@ (800929c <vPortFree+0xc4>)
 8009284:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8009286:	f7fe fc49 	bl	8007b1c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800928a:	bf00      	nop
 800928c:	3718      	adds	r7, #24
 800928e:	46bd      	mov	sp, r7
 8009290:	bd80      	pop	{r7, pc}
 8009292:	bf00      	nop
 8009294:	200091d0 	.word	0x200091d0
 8009298:	200091c0 	.word	0x200091c0
 800929c:	200091cc 	.word	0x200091cc

080092a0 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80092a0:	b480      	push	{r7}
 80092a2:	b085      	sub	sp, #20
 80092a4:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80092a6:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 80092aa:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80092ac:	4b27      	ldr	r3, [pc, #156]	@ (800934c <prvHeapInit+0xac>)
 80092ae:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80092b0:	68fb      	ldr	r3, [r7, #12]
 80092b2:	f003 0307 	and.w	r3, r3, #7
 80092b6:	2b00      	cmp	r3, #0
 80092b8:	d00c      	beq.n	80092d4 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80092ba:	68fb      	ldr	r3, [r7, #12]
 80092bc:	3307      	adds	r3, #7
 80092be:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80092c0:	68fb      	ldr	r3, [r7, #12]
 80092c2:	f023 0307 	bic.w	r3, r3, #7
 80092c6:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80092c8:	68ba      	ldr	r2, [r7, #8]
 80092ca:	68fb      	ldr	r3, [r7, #12]
 80092cc:	1ad3      	subs	r3, r2, r3
 80092ce:	4a1f      	ldr	r2, [pc, #124]	@ (800934c <prvHeapInit+0xac>)
 80092d0:	4413      	add	r3, r2
 80092d2:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80092d4:	68fb      	ldr	r3, [r7, #12]
 80092d6:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80092d8:	4a1d      	ldr	r2, [pc, #116]	@ (8009350 <prvHeapInit+0xb0>)
 80092da:	687b      	ldr	r3, [r7, #4]
 80092dc:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80092de:	4b1c      	ldr	r3, [pc, #112]	@ (8009350 <prvHeapInit+0xb0>)
 80092e0:	2200      	movs	r2, #0
 80092e2:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80092e4:	687b      	ldr	r3, [r7, #4]
 80092e6:	68ba      	ldr	r2, [r7, #8]
 80092e8:	4413      	add	r3, r2
 80092ea:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80092ec:	2208      	movs	r2, #8
 80092ee:	68fb      	ldr	r3, [r7, #12]
 80092f0:	1a9b      	subs	r3, r3, r2
 80092f2:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80092f4:	68fb      	ldr	r3, [r7, #12]
 80092f6:	f023 0307 	bic.w	r3, r3, #7
 80092fa:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80092fc:	68fb      	ldr	r3, [r7, #12]
 80092fe:	4a15      	ldr	r2, [pc, #84]	@ (8009354 <prvHeapInit+0xb4>)
 8009300:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8009302:	4b14      	ldr	r3, [pc, #80]	@ (8009354 <prvHeapInit+0xb4>)
 8009304:	681b      	ldr	r3, [r3, #0]
 8009306:	2200      	movs	r2, #0
 8009308:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800930a:	4b12      	ldr	r3, [pc, #72]	@ (8009354 <prvHeapInit+0xb4>)
 800930c:	681b      	ldr	r3, [r3, #0]
 800930e:	2200      	movs	r2, #0
 8009310:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8009312:	687b      	ldr	r3, [r7, #4]
 8009314:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8009316:	683b      	ldr	r3, [r7, #0]
 8009318:	68fa      	ldr	r2, [r7, #12]
 800931a:	1ad2      	subs	r2, r2, r3
 800931c:	683b      	ldr	r3, [r7, #0]
 800931e:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8009320:	4b0c      	ldr	r3, [pc, #48]	@ (8009354 <prvHeapInit+0xb4>)
 8009322:	681a      	ldr	r2, [r3, #0]
 8009324:	683b      	ldr	r3, [r7, #0]
 8009326:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8009328:	683b      	ldr	r3, [r7, #0]
 800932a:	685b      	ldr	r3, [r3, #4]
 800932c:	4a0a      	ldr	r2, [pc, #40]	@ (8009358 <prvHeapInit+0xb8>)
 800932e:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8009330:	683b      	ldr	r3, [r7, #0]
 8009332:	685b      	ldr	r3, [r3, #4]
 8009334:	4a09      	ldr	r2, [pc, #36]	@ (800935c <prvHeapInit+0xbc>)
 8009336:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8009338:	4b09      	ldr	r3, [pc, #36]	@ (8009360 <prvHeapInit+0xc0>)
 800933a:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800933e:	601a      	str	r2, [r3, #0]
}
 8009340:	bf00      	nop
 8009342:	3714      	adds	r7, #20
 8009344:	46bd      	mov	sp, r7
 8009346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800934a:	4770      	bx	lr
 800934c:	200055b4 	.word	0x200055b4
 8009350:	200091b4 	.word	0x200091b4
 8009354:	200091bc 	.word	0x200091bc
 8009358:	200091c4 	.word	0x200091c4
 800935c:	200091c0 	.word	0x200091c0
 8009360:	200091d0 	.word	0x200091d0

08009364 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8009364:	b480      	push	{r7}
 8009366:	b085      	sub	sp, #20
 8009368:	af00      	add	r7, sp, #0
 800936a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800936c:	4b28      	ldr	r3, [pc, #160]	@ (8009410 <prvInsertBlockIntoFreeList+0xac>)
 800936e:	60fb      	str	r3, [r7, #12]
 8009370:	e002      	b.n	8009378 <prvInsertBlockIntoFreeList+0x14>
 8009372:	68fb      	ldr	r3, [r7, #12]
 8009374:	681b      	ldr	r3, [r3, #0]
 8009376:	60fb      	str	r3, [r7, #12]
 8009378:	68fb      	ldr	r3, [r7, #12]
 800937a:	681b      	ldr	r3, [r3, #0]
 800937c:	687a      	ldr	r2, [r7, #4]
 800937e:	429a      	cmp	r2, r3
 8009380:	d8f7      	bhi.n	8009372 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8009382:	68fb      	ldr	r3, [r7, #12]
 8009384:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8009386:	68fb      	ldr	r3, [r7, #12]
 8009388:	685b      	ldr	r3, [r3, #4]
 800938a:	68ba      	ldr	r2, [r7, #8]
 800938c:	4413      	add	r3, r2
 800938e:	687a      	ldr	r2, [r7, #4]
 8009390:	429a      	cmp	r2, r3
 8009392:	d108      	bne.n	80093a6 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8009394:	68fb      	ldr	r3, [r7, #12]
 8009396:	685a      	ldr	r2, [r3, #4]
 8009398:	687b      	ldr	r3, [r7, #4]
 800939a:	685b      	ldr	r3, [r3, #4]
 800939c:	441a      	add	r2, r3
 800939e:	68fb      	ldr	r3, [r7, #12]
 80093a0:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80093a2:	68fb      	ldr	r3, [r7, #12]
 80093a4:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80093a6:	687b      	ldr	r3, [r7, #4]
 80093a8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80093aa:	687b      	ldr	r3, [r7, #4]
 80093ac:	685b      	ldr	r3, [r3, #4]
 80093ae:	68ba      	ldr	r2, [r7, #8]
 80093b0:	441a      	add	r2, r3
 80093b2:	68fb      	ldr	r3, [r7, #12]
 80093b4:	681b      	ldr	r3, [r3, #0]
 80093b6:	429a      	cmp	r2, r3
 80093b8:	d118      	bne.n	80093ec <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80093ba:	68fb      	ldr	r3, [r7, #12]
 80093bc:	681a      	ldr	r2, [r3, #0]
 80093be:	4b15      	ldr	r3, [pc, #84]	@ (8009414 <prvInsertBlockIntoFreeList+0xb0>)
 80093c0:	681b      	ldr	r3, [r3, #0]
 80093c2:	429a      	cmp	r2, r3
 80093c4:	d00d      	beq.n	80093e2 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80093c6:	687b      	ldr	r3, [r7, #4]
 80093c8:	685a      	ldr	r2, [r3, #4]
 80093ca:	68fb      	ldr	r3, [r7, #12]
 80093cc:	681b      	ldr	r3, [r3, #0]
 80093ce:	685b      	ldr	r3, [r3, #4]
 80093d0:	441a      	add	r2, r3
 80093d2:	687b      	ldr	r3, [r7, #4]
 80093d4:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80093d6:	68fb      	ldr	r3, [r7, #12]
 80093d8:	681b      	ldr	r3, [r3, #0]
 80093da:	681a      	ldr	r2, [r3, #0]
 80093dc:	687b      	ldr	r3, [r7, #4]
 80093de:	601a      	str	r2, [r3, #0]
 80093e0:	e008      	b.n	80093f4 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80093e2:	4b0c      	ldr	r3, [pc, #48]	@ (8009414 <prvInsertBlockIntoFreeList+0xb0>)
 80093e4:	681a      	ldr	r2, [r3, #0]
 80093e6:	687b      	ldr	r3, [r7, #4]
 80093e8:	601a      	str	r2, [r3, #0]
 80093ea:	e003      	b.n	80093f4 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80093ec:	68fb      	ldr	r3, [r7, #12]
 80093ee:	681a      	ldr	r2, [r3, #0]
 80093f0:	687b      	ldr	r3, [r7, #4]
 80093f2:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80093f4:	68fa      	ldr	r2, [r7, #12]
 80093f6:	687b      	ldr	r3, [r7, #4]
 80093f8:	429a      	cmp	r2, r3
 80093fa:	d002      	beq.n	8009402 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80093fc:	68fb      	ldr	r3, [r7, #12]
 80093fe:	687a      	ldr	r2, [r7, #4]
 8009400:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8009402:	bf00      	nop
 8009404:	3714      	adds	r7, #20
 8009406:	46bd      	mov	sp, r7
 8009408:	f85d 7b04 	ldr.w	r7, [sp], #4
 800940c:	4770      	bx	lr
 800940e:	bf00      	nop
 8009410:	200091b4 	.word	0x200091b4
 8009414:	200091bc 	.word	0x200091bc

08009418 <rcl_get_zero_initialized_init_options>:
 8009418:	2000      	movs	r0, #0
 800941a:	4770      	bx	lr

0800941c <rcl_init_options_init>:
 800941c:	b084      	sub	sp, #16
 800941e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009420:	b097      	sub	sp, #92	@ 0x5c
 8009422:	ae1d      	add	r6, sp, #116	@ 0x74
 8009424:	e886 000e 	stmia.w	r6, {r1, r2, r3}
 8009428:	2800      	cmp	r0, #0
 800942a:	d058      	beq.n	80094de <rcl_init_options_init+0xc2>
 800942c:	6803      	ldr	r3, [r0, #0]
 800942e:	4605      	mov	r5, r0
 8009430:	b133      	cbz	r3, 8009440 <rcl_init_options_init+0x24>
 8009432:	2464      	movs	r4, #100	@ 0x64
 8009434:	4620      	mov	r0, r4
 8009436:	b017      	add	sp, #92	@ 0x5c
 8009438:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 800943c:	b004      	add	sp, #16
 800943e:	4770      	bx	lr
 8009440:	4630      	mov	r0, r6
 8009442:	f000 ffe7 	bl	800a414 <rcutils_allocator_is_valid>
 8009446:	2800      	cmp	r0, #0
 8009448:	d049      	beq.n	80094de <rcl_init_options_init+0xc2>
 800944a:	46b4      	mov	ip, r6
 800944c:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8009450:	ac11      	add	r4, sp, #68	@ 0x44
 8009452:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8009454:	f8dc 3000 	ldr.w	r3, [ip]
 8009458:	6023      	str	r3, [r4, #0]
 800945a:	9921      	ldr	r1, [sp, #132]	@ 0x84
 800945c:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800945e:	2050      	movs	r0, #80	@ 0x50
 8009460:	4798      	blx	r3
 8009462:	4604      	mov	r4, r0
 8009464:	6028      	str	r0, [r5, #0]
 8009466:	2800      	cmp	r0, #0
 8009468:	d03b      	beq.n	80094e2 <rcl_init_options_init+0xc6>
 800946a:	f10d 0c44 	add.w	ip, sp, #68	@ 0x44
 800946e:	4686      	mov	lr, r0
 8009470:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8009474:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8009478:	f8dc 3000 	ldr.w	r3, [ip]
 800947c:	f8ce 3000 	str.w	r3, [lr]
 8009480:	a802      	add	r0, sp, #8
 8009482:	f001 f859 	bl	800a538 <rmw_get_zero_initialized_init_options>
 8009486:	f10d 0e08 	add.w	lr, sp, #8
 800948a:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800948e:	f104 0c18 	add.w	ip, r4, #24
 8009492:	682f      	ldr	r7, [r5, #0]
 8009494:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8009498:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800949c:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80094a0:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 80094a4:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80094a8:	e89e 0003 	ldmia.w	lr, {r0, r1}
 80094ac:	ac20      	add	r4, sp, #128	@ 0x80
 80094ae:	e88c 0003 	stmia.w	ip, {r0, r1}
 80094b2:	e894 0003 	ldmia.w	r4, {r0, r1}
 80094b6:	e88d 0003 	stmia.w	sp, {r0, r1}
 80094ba:	e896 000e 	ldmia.w	r6, {r1, r2, r3}
 80094be:	f107 0018 	add.w	r0, r7, #24
 80094c2:	f001 f863 	bl	800a58c <rmw_init_options_init>
 80094c6:	4604      	mov	r4, r0
 80094c8:	2800      	cmp	r0, #0
 80094ca:	d0b3      	beq.n	8009434 <rcl_init_options_init+0x18>
 80094cc:	9921      	ldr	r1, [sp, #132]	@ 0x84
 80094ce:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 80094d0:	6828      	ldr	r0, [r5, #0]
 80094d2:	4798      	blx	r3
 80094d4:	4620      	mov	r0, r4
 80094d6:	f006 fdf5 	bl	80100c4 <rcl_convert_rmw_ret_to_rcl_ret>
 80094da:	4604      	mov	r4, r0
 80094dc:	e7aa      	b.n	8009434 <rcl_init_options_init+0x18>
 80094de:	240b      	movs	r4, #11
 80094e0:	e7a8      	b.n	8009434 <rcl_init_options_init+0x18>
 80094e2:	240a      	movs	r4, #10
 80094e4:	e7a6      	b.n	8009434 <rcl_init_options_init+0x18>
 80094e6:	bf00      	nop

080094e8 <rcl_init_options_fini>:
 80094e8:	b530      	push	{r4, r5, lr}
 80094ea:	b087      	sub	sp, #28
 80094ec:	b1f0      	cbz	r0, 800952c <rcl_init_options_fini+0x44>
 80094ee:	6803      	ldr	r3, [r0, #0]
 80094f0:	4604      	mov	r4, r0
 80094f2:	b1db      	cbz	r3, 800952c <rcl_init_options_fini+0x44>
 80094f4:	469c      	mov	ip, r3
 80094f6:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 80094fa:	f10d 0e04 	add.w	lr, sp, #4
 80094fe:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8009502:	f8dc 3000 	ldr.w	r3, [ip]
 8009506:	f8ce 3000 	str.w	r3, [lr]
 800950a:	a801      	add	r0, sp, #4
 800950c:	f000 ff82 	bl	800a414 <rcutils_allocator_is_valid>
 8009510:	b160      	cbz	r0, 800952c <rcl_init_options_fini+0x44>
 8009512:	6820      	ldr	r0, [r4, #0]
 8009514:	3018      	adds	r0, #24
 8009516:	f001 f8e9 	bl	800a6ec <rmw_init_options_fini>
 800951a:	4605      	mov	r5, r0
 800951c:	b950      	cbnz	r0, 8009534 <rcl_init_options_fini+0x4c>
 800951e:	6820      	ldr	r0, [r4, #0]
 8009520:	9b02      	ldr	r3, [sp, #8]
 8009522:	9905      	ldr	r1, [sp, #20]
 8009524:	4798      	blx	r3
 8009526:	4628      	mov	r0, r5
 8009528:	b007      	add	sp, #28
 800952a:	bd30      	pop	{r4, r5, pc}
 800952c:	250b      	movs	r5, #11
 800952e:	4628      	mov	r0, r5
 8009530:	b007      	add	sp, #28
 8009532:	bd30      	pop	{r4, r5, pc}
 8009534:	f006 fdc6 	bl	80100c4 <rcl_convert_rmw_ret_to_rcl_ret>
 8009538:	4605      	mov	r5, r0
 800953a:	e7f8      	b.n	800952e <rcl_init_options_fini+0x46>

0800953c <rcl_init_options_copy>:
 800953c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009540:	b094      	sub	sp, #80	@ 0x50
 8009542:	2800      	cmp	r0, #0
 8009544:	d058      	beq.n	80095f8 <rcl_init_options_copy+0xbc>
 8009546:	4604      	mov	r4, r0
 8009548:	6800      	ldr	r0, [r0, #0]
 800954a:	2800      	cmp	r0, #0
 800954c:	d054      	beq.n	80095f8 <rcl_init_options_copy+0xbc>
 800954e:	460e      	mov	r6, r1
 8009550:	f000 ff60 	bl	800a414 <rcutils_allocator_is_valid>
 8009554:	2800      	cmp	r0, #0
 8009556:	d04f      	beq.n	80095f8 <rcl_init_options_copy+0xbc>
 8009558:	2e00      	cmp	r6, #0
 800955a:	d04d      	beq.n	80095f8 <rcl_init_options_copy+0xbc>
 800955c:	6833      	ldr	r3, [r6, #0]
 800955e:	b123      	cbz	r3, 800956a <rcl_init_options_copy+0x2e>
 8009560:	2464      	movs	r4, #100	@ 0x64
 8009562:	4620      	mov	r0, r4
 8009564:	b014      	add	sp, #80	@ 0x50
 8009566:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800956a:	6827      	ldr	r7, [r4, #0]
 800956c:	46bc      	mov	ip, r7
 800956e:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8009572:	ad0f      	add	r5, sp, #60	@ 0x3c
 8009574:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8009576:	f8dc 3000 	ldr.w	r3, [ip]
 800957a:	f8d7 8000 	ldr.w	r8, [r7]
 800957e:	602b      	str	r3, [r5, #0]
 8009580:	4619      	mov	r1, r3
 8009582:	2050      	movs	r0, #80	@ 0x50
 8009584:	47c0      	blx	r8
 8009586:	4605      	mov	r5, r0
 8009588:	6030      	str	r0, [r6, #0]
 800958a:	b3d0      	cbz	r0, 8009602 <rcl_init_options_copy+0xc6>
 800958c:	f10d 0c3c 	add.w	ip, sp, #60	@ 0x3c
 8009590:	4686      	mov	lr, r0
 8009592:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8009596:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800959a:	f8dc 3000 	ldr.w	r3, [ip]
 800959e:	f8ce 3000 	str.w	r3, [lr]
 80095a2:	4668      	mov	r0, sp
 80095a4:	f000 ffc8 	bl	800a538 <rmw_get_zero_initialized_init_options>
 80095a8:	46ee      	mov	lr, sp
 80095aa:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 80095ae:	f105 0c18 	add.w	ip, r5, #24
 80095b2:	6824      	ldr	r4, [r4, #0]
 80095b4:	6835      	ldr	r5, [r6, #0]
 80095b6:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80095ba:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 80095be:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80095c2:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 80095c6:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80095ca:	e89e 0003 	ldmia.w	lr, {r0, r1}
 80095ce:	e88c 0003 	stmia.w	ip, {r0, r1}
 80095d2:	f104 0018 	add.w	r0, r4, #24
 80095d6:	f105 0118 	add.w	r1, r5, #24
 80095da:	f001 f83f 	bl	800a65c <rmw_init_options_copy>
 80095de:	4604      	mov	r4, r0
 80095e0:	2800      	cmp	r0, #0
 80095e2:	d0be      	beq.n	8009562 <rcl_init_options_copy+0x26>
 80095e4:	f000 ff24 	bl	800a430 <rcutils_get_error_string>
 80095e8:	f000 ff3a 	bl	800a460 <rcutils_reset_error>
 80095ec:	4630      	mov	r0, r6
 80095ee:	f7ff ff7b 	bl	80094e8 <rcl_init_options_fini>
 80095f2:	b140      	cbz	r0, 8009606 <rcl_init_options_copy+0xca>
 80095f4:	4604      	mov	r4, r0
 80095f6:	e7b4      	b.n	8009562 <rcl_init_options_copy+0x26>
 80095f8:	240b      	movs	r4, #11
 80095fa:	4620      	mov	r0, r4
 80095fc:	b014      	add	sp, #80	@ 0x50
 80095fe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009602:	240a      	movs	r4, #10
 8009604:	e7ad      	b.n	8009562 <rcl_init_options_copy+0x26>
 8009606:	4620      	mov	r0, r4
 8009608:	b014      	add	sp, #80	@ 0x50
 800960a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800960e:	f006 bd59 	b.w	80100c4 <rcl_convert_rmw_ret_to_rcl_ret>
 8009612:	bf00      	nop

08009614 <rcl_init_options_set_domain_id>:
 8009614:	b120      	cbz	r0, 8009620 <rcl_init_options_set_domain_id+0xc>
 8009616:	6803      	ldr	r3, [r0, #0]
 8009618:	b113      	cbz	r3, 8009620 <rcl_init_options_set_domain_id+0xc>
 800961a:	6259      	str	r1, [r3, #36]	@ 0x24
 800961c:	2000      	movs	r0, #0
 800961e:	4770      	bx	lr
 8009620:	200b      	movs	r0, #11
 8009622:	4770      	bx	lr

08009624 <_rclc_check_for_new_data>:
 8009624:	2800      	cmp	r0, #0
 8009626:	d046      	beq.n	80096b6 <_rclc_check_for_new_data+0x92>
 8009628:	b510      	push	{r4, lr}
 800962a:	7802      	ldrb	r2, [r0, #0]
 800962c:	b084      	sub	sp, #16
 800962e:	4603      	mov	r3, r0
 8009630:	2a0a      	cmp	r2, #10
 8009632:	d842      	bhi.n	80096ba <_rclc_check_for_new_data+0x96>
 8009634:	e8df f002 	tbb	[pc, r2]
 8009638:	14181212 	.word	0x14181212
 800963c:	06060614 	.word	0x06060614
 8009640:	2e1a      	.short	0x2e1a
 8009642:	16          	.byte	0x16
 8009643:	00          	.byte	0x00
 8009644:	6a0a      	ldr	r2, [r1, #32]
 8009646:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8009648:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 800964c:	2000      	movs	r0, #0
 800964e:	1a12      	subs	r2, r2, r0
 8009650:	bf18      	it	ne
 8009652:	2201      	movne	r2, #1
 8009654:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39
 8009658:	b004      	add	sp, #16
 800965a:	bd10      	pop	{r4, pc}
 800965c:	680a      	ldr	r2, [r1, #0]
 800965e:	e7f2      	b.n	8009646 <_rclc_check_for_new_data+0x22>
 8009660:	698a      	ldr	r2, [r1, #24]
 8009662:	e7f0      	b.n	8009646 <_rclc_check_for_new_data+0x22>
 8009664:	688a      	ldr	r2, [r1, #8]
 8009666:	e7ee      	b.n	8009646 <_rclc_check_for_new_data+0x22>
 8009668:	690a      	ldr	r2, [r1, #16]
 800966a:	e7ec      	b.n	8009646 <_rclc_check_for_new_data+0x22>
 800966c:	685c      	ldr	r4, [r3, #4]
 800966e:	4608      	mov	r0, r1
 8009670:	f104 0244 	add.w	r2, r4, #68	@ 0x44
 8009674:	f104 0143 	add.w	r1, r4, #67	@ 0x43
 8009678:	f104 0342 	add.w	r3, r4, #66	@ 0x42
 800967c:	e9cd 2101 	strd	r2, r1, [sp, #4]
 8009680:	9300      	str	r3, [sp, #0]
 8009682:	f104 0240 	add.w	r2, r4, #64	@ 0x40
 8009686:	f104 0341 	add.w	r3, r4, #65	@ 0x41
 800968a:	f104 0110 	add.w	r1, r4, #16
 800968e:	f008 fd33 	bl	80120f8 <rcl_action_client_wait_set_get_entities_ready>
 8009692:	e7e1      	b.n	8009658 <_rclc_check_for_new_data+0x34>
 8009694:	685c      	ldr	r4, [r3, #4]
 8009696:	f104 0223 	add.w	r2, r4, #35	@ 0x23
 800969a:	f104 0322 	add.w	r3, r4, #34	@ 0x22
 800969e:	e9cd 3200 	strd	r3, r2, [sp]
 80096a2:	4608      	mov	r0, r1
 80096a4:	f104 0321 	add.w	r3, r4, #33	@ 0x21
 80096a8:	f104 0220 	add.w	r2, r4, #32
 80096ac:	f104 0110 	add.w	r1, r4, #16
 80096b0:	f008 ff3a 	bl	8012528 <rcl_action_server_wait_set_get_entities_ready>
 80096b4:	e7d0      	b.n	8009658 <_rclc_check_for_new_data+0x34>
 80096b6:	200b      	movs	r0, #11
 80096b8:	4770      	bx	lr
 80096ba:	2001      	movs	r0, #1
 80096bc:	e7cc      	b.n	8009658 <_rclc_check_for_new_data+0x34>
 80096be:	bf00      	nop

080096c0 <_rclc_take_new_data>:
 80096c0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80096c2:	b09b      	sub	sp, #108	@ 0x6c
 80096c4:	2800      	cmp	r0, #0
 80096c6:	f000 8088 	beq.w	80097da <_rclc_take_new_data+0x11a>
 80096ca:	7803      	ldrb	r3, [r0, #0]
 80096cc:	4604      	mov	r4, r0
 80096ce:	2b0a      	cmp	r3, #10
 80096d0:	f200 8167 	bhi.w	80099a2 <_rclc_take_new_data+0x2e2>
 80096d4:	e8df f003 	tbb	[pc, r3]
 80096d8:	44152d2d 	.word	0x44152d2d
 80096dc:	19191944 	.word	0x19191944
 80096e0:	065a      	.short	0x065a
 80096e2:	15          	.byte	0x15
 80096e3:	00          	.byte	0x00
 80096e4:	6840      	ldr	r0, [r0, #4]
 80096e6:	f890 3020 	ldrb.w	r3, [r0, #32]
 80096ea:	2b00      	cmp	r3, #0
 80096ec:	f040 80b2 	bne.w	8009854 <_rclc_take_new_data+0x194>
 80096f0:	f890 3022 	ldrb.w	r3, [r0, #34]	@ 0x22
 80096f4:	2b00      	cmp	r3, #0
 80096f6:	f040 80e4 	bne.w	80098c2 <_rclc_take_new_data+0x202>
 80096fa:	f890 3021 	ldrb.w	r3, [r0, #33]	@ 0x21
 80096fe:	2b00      	cmp	r3, #0
 8009700:	d16f      	bne.n	80097e2 <_rclc_take_new_data+0x122>
 8009702:	2500      	movs	r5, #0
 8009704:	4628      	mov	r0, r5
 8009706:	b01b      	add	sp, #108	@ 0x6c
 8009708:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800970a:	6b42      	ldr	r2, [r0, #52]	@ 0x34
 800970c:	6a0b      	ldr	r3, [r1, #32]
 800970e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009712:	2b00      	cmp	r3, #0
 8009714:	d0f5      	beq.n	8009702 <_rclc_take_new_data+0x42>
 8009716:	e9d0 0201 	ldrd	r0, r2, [r0, #4]
 800971a:	f104 0110 	add.w	r1, r4, #16
 800971e:	f007 f9c9 	bl	8010ab4 <rcl_take_request>
 8009722:	4605      	mov	r5, r0
 8009724:	2800      	cmp	r0, #0
 8009726:	d0ec      	beq.n	8009702 <_rclc_take_new_data+0x42>
 8009728:	f240 2359 	movw	r3, #601	@ 0x259
 800972c:	4298      	cmp	r0, r3
 800972e:	d013      	beq.n	8009758 <_rclc_take_new_data+0x98>
 8009730:	e029      	b.n	8009786 <_rclc_take_new_data+0xc6>
 8009732:	6b42      	ldr	r2, [r0, #52]	@ 0x34
 8009734:	680b      	ldr	r3, [r1, #0]
 8009736:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800973a:	2b00      	cmp	r3, #0
 800973c:	d0e1      	beq.n	8009702 <_rclc_take_new_data+0x42>
 800973e:	e9d0 0101 	ldrd	r0, r1, [r0, #4]
 8009742:	2300      	movs	r3, #0
 8009744:	aa0a      	add	r2, sp, #40	@ 0x28
 8009746:	f007 faf3 	bl	8010d30 <rcl_take>
 800974a:	4605      	mov	r5, r0
 800974c:	2800      	cmp	r0, #0
 800974e:	d0d9      	beq.n	8009704 <_rclc_take_new_data+0x44>
 8009750:	f240 1391 	movw	r3, #401	@ 0x191
 8009754:	4298      	cmp	r0, r3
 8009756:	d116      	bne.n	8009786 <_rclc_take_new_data+0xc6>
 8009758:	2300      	movs	r3, #0
 800975a:	f884 3039 	strb.w	r3, [r4, #57]	@ 0x39
 800975e:	e7d1      	b.n	8009704 <_rclc_take_new_data+0x44>
 8009760:	6b42      	ldr	r2, [r0, #52]	@ 0x34
 8009762:	698b      	ldr	r3, [r1, #24]
 8009764:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009768:	2b00      	cmp	r3, #0
 800976a:	d0ca      	beq.n	8009702 <_rclc_take_new_data+0x42>
 800976c:	e9d0 0201 	ldrd	r0, r2, [r0, #4]
 8009770:	f104 0110 	add.w	r1, r4, #16
 8009774:	f006 fc54 	bl	8010020 <rcl_take_response>
 8009778:	4605      	mov	r5, r0
 800977a:	2800      	cmp	r0, #0
 800977c:	d0c1      	beq.n	8009702 <_rclc_take_new_data+0x42>
 800977e:	f240 13f5 	movw	r3, #501	@ 0x1f5
 8009782:	4298      	cmp	r0, r3
 8009784:	d0be      	beq.n	8009704 <_rclc_take_new_data+0x44>
 8009786:	f000 fe6b 	bl	800a460 <rcutils_reset_error>
 800978a:	e7bb      	b.n	8009704 <_rclc_take_new_data+0x44>
 800978c:	6840      	ldr	r0, [r0, #4]
 800978e:	f890 3042 	ldrb.w	r3, [r0, #66]	@ 0x42
 8009792:	2b00      	cmp	r3, #0
 8009794:	d17d      	bne.n	8009892 <_rclc_take_new_data+0x1d2>
 8009796:	69c3      	ldr	r3, [r0, #28]
 8009798:	b11b      	cbz	r3, 80097a2 <_rclc_take_new_data+0xe2>
 800979a:	f890 3040 	ldrb.w	r3, [r0, #64]	@ 0x40
 800979e:	2b00      	cmp	r3, #0
 80097a0:	d144      	bne.n	800982c <_rclc_take_new_data+0x16c>
 80097a2:	f890 3044 	ldrb.w	r3, [r0, #68]	@ 0x44
 80097a6:	2b00      	cmp	r3, #0
 80097a8:	f040 80ac 	bne.w	8009904 <_rclc_take_new_data+0x244>
 80097ac:	f890 3043 	ldrb.w	r3, [r0, #67]	@ 0x43
 80097b0:	2b00      	cmp	r3, #0
 80097b2:	d0a6      	beq.n	8009702 <_rclc_take_new_data+0x42>
 80097b4:	6ac2      	ldr	r2, [r0, #44]	@ 0x2c
 80097b6:	a90a      	add	r1, sp, #40	@ 0x28
 80097b8:	3010      	adds	r0, #16
 80097ba:	f008 fb75 	bl	8011ea8 <rcl_action_take_result_response>
 80097be:	4605      	mov	r5, r0
 80097c0:	2800      	cmp	r0, #0
 80097c2:	d1e0      	bne.n	8009786 <_rclc_take_new_data+0xc6>
 80097c4:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 80097c8:	6860      	ldr	r0, [r4, #4]
 80097ca:	f008 ffd1 	bl	8012770 <rclc_action_find_handle_by_result_request_sequence_number>
 80097ce:	2800      	cmp	r0, #0
 80097d0:	d098      	beq.n	8009704 <_rclc_take_new_data+0x44>
 80097d2:	2301      	movs	r3, #1
 80097d4:	f880 3023 	strb.w	r3, [r0, #35]	@ 0x23
 80097d8:	e794      	b.n	8009704 <_rclc_take_new_data+0x44>
 80097da:	250b      	movs	r5, #11
 80097dc:	4628      	mov	r0, r5
 80097de:	b01b      	add	sp, #108	@ 0x6c
 80097e0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80097e2:	ae04      	add	r6, sp, #16
 80097e4:	aa0a      	add	r2, sp, #40	@ 0x28
 80097e6:	3010      	adds	r0, #16
 80097e8:	4631      	mov	r1, r6
 80097ea:	f008 fdd1 	bl	8012390 <rcl_action_take_cancel_request>
 80097ee:	4605      	mov	r5, r0
 80097f0:	2800      	cmp	r0, #0
 80097f2:	d1c8      	bne.n	8009786 <_rclc_take_new_data+0xc6>
 80097f4:	6860      	ldr	r0, [r4, #4]
 80097f6:	a90a      	add	r1, sp, #40	@ 0x28
 80097f8:	f008 ff78 	bl	80126ec <rclc_action_find_goal_handle_by_uuid>
 80097fc:	4607      	mov	r7, r0
 80097fe:	2800      	cmp	r0, #0
 8009800:	f000 80bb 	beq.w	800997a <_rclc_take_new_data+0x2ba>
 8009804:	f990 0008 	ldrsb.w	r0, [r0, #8]
 8009808:	2101      	movs	r1, #1
 800980a:	f008 fef9 	bl	8012600 <rcl_action_transition_goal_state>
 800980e:	2803      	cmp	r0, #3
 8009810:	4684      	mov	ip, r0
 8009812:	f040 80a7 	bne.w	8009964 <_rclc_take_new_data+0x2a4>
 8009816:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8009818:	f107 0458 	add.w	r4, r7, #88	@ 0x58
 800981c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800981e:	e896 0003 	ldmia.w	r6, {r0, r1}
 8009822:	e884 0003 	stmia.w	r4, {r0, r1}
 8009826:	f887 c008 	strb.w	ip, [r7, #8]
 800982a:	e76b      	b.n	8009704 <_rclc_take_new_data+0x44>
 800982c:	6a81      	ldr	r1, [r0, #40]	@ 0x28
 800982e:	3010      	adds	r0, #16
 8009830:	f008 fbba 	bl	8011fa8 <rcl_action_take_feedback>
 8009834:	4605      	mov	r5, r0
 8009836:	2800      	cmp	r0, #0
 8009838:	d1a5      	bne.n	8009786 <_rclc_take_new_data+0xc6>
 800983a:	6860      	ldr	r0, [r4, #4]
 800983c:	6a81      	ldr	r1, [r0, #40]	@ 0x28
 800983e:	f008 ff55 	bl	80126ec <rclc_action_find_goal_handle_by_uuid>
 8009842:	4603      	mov	r3, r0
 8009844:	2800      	cmp	r0, #0
 8009846:	f000 80a3 	beq.w	8009990 <_rclc_take_new_data+0x2d0>
 800984a:	2201      	movs	r2, #1
 800984c:	6860      	ldr	r0, [r4, #4]
 800984e:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22
 8009852:	e7a6      	b.n	80097a2 <_rclc_take_new_data+0xe2>
 8009854:	f008 ff24 	bl	80126a0 <rclc_action_take_goal_handle>
 8009858:	4606      	mov	r6, r0
 800985a:	6860      	ldr	r0, [r4, #4]
 800985c:	2e00      	cmp	r6, #0
 800985e:	f43f af47 	beq.w	80096f0 <_rclc_take_new_data+0x30>
 8009862:	6070      	str	r0, [r6, #4]
 8009864:	69f2      	ldr	r2, [r6, #28]
 8009866:	f106 0128 	add.w	r1, r6, #40	@ 0x28
 800986a:	3010      	adds	r0, #16
 800986c:	f008 fcd8 	bl	8012220 <rcl_action_take_goal_request>
 8009870:	4605      	mov	r5, r0
 8009872:	2800      	cmp	r0, #0
 8009874:	f040 808e 	bne.w	8009994 <_rclc_take_new_data+0x2d4>
 8009878:	69f7      	ldr	r7, [r6, #28]
 800987a:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 800987c:	7235      	strb	r5, [r6, #8]
 800987e:	f8c6 0009 	str.w	r0, [r6, #9]
 8009882:	f8c6 100d 	str.w	r1, [r6, #13]
 8009886:	6860      	ldr	r0, [r4, #4]
 8009888:	f8c6 2011 	str.w	r2, [r6, #17]
 800988c:	f8c6 3015 	str.w	r3, [r6, #21]
 8009890:	e72e      	b.n	80096f0 <_rclc_take_new_data+0x30>
 8009892:	aa04      	add	r2, sp, #16
 8009894:	a90a      	add	r1, sp, #40	@ 0x28
 8009896:	3010      	adds	r0, #16
 8009898:	f008 fa8e 	bl	8011db8 <rcl_action_take_goal_response>
 800989c:	4605      	mov	r5, r0
 800989e:	2800      	cmp	r0, #0
 80098a0:	f47f af71 	bne.w	8009786 <_rclc_take_new_data+0xc6>
 80098a4:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 80098a8:	6860      	ldr	r0, [r4, #4]
 80098aa:	f008 ff4f 	bl	801274c <rclc_action_find_handle_by_goal_request_sequence_number>
 80098ae:	b130      	cbz	r0, 80098be <_rclc_take_new_data+0x1fe>
 80098b0:	f89d 3010 	ldrb.w	r3, [sp, #16]
 80098b4:	f880 3021 	strb.w	r3, [r0, #33]	@ 0x21
 80098b8:	2201      	movs	r2, #1
 80098ba:	f880 2020 	strb.w	r2, [r0, #32]
 80098be:	6860      	ldr	r0, [r4, #4]
 80098c0:	e769      	b.n	8009796 <_rclc_take_new_data+0xd6>
 80098c2:	aa04      	add	r2, sp, #16
 80098c4:	3010      	adds	r0, #16
 80098c6:	a90a      	add	r1, sp, #40	@ 0x28
 80098c8:	f008 fd22 	bl	8012310 <rcl_action_take_result_request>
 80098cc:	4605      	mov	r5, r0
 80098ce:	2800      	cmp	r0, #0
 80098d0:	f47f af59 	bne.w	8009786 <_rclc_take_new_data+0xc6>
 80098d4:	6860      	ldr	r0, [r4, #4]
 80098d6:	a904      	add	r1, sp, #16
 80098d8:	f008 ff08 	bl	80126ec <rclc_action_find_goal_handle_by_uuid>
 80098dc:	4607      	mov	r7, r0
 80098de:	b160      	cbz	r0, 80098fa <_rclc_take_new_data+0x23a>
 80098e0:	ad0a      	add	r5, sp, #40	@ 0x28
 80098e2:	f100 0640 	add.w	r6, r0, #64	@ 0x40
 80098e6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80098e8:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 80098ea:	e895 0003 	ldmia.w	r5, {r0, r1}
 80098ee:	f04f 0c02 	mov.w	ip, #2
 80098f2:	e886 0003 	stmia.w	r6, {r0, r1}
 80098f6:	f887 c008 	strb.w	ip, [r7, #8]
 80098fa:	6860      	ldr	r0, [r4, #4]
 80098fc:	2300      	movs	r3, #0
 80098fe:	f880 3022 	strb.w	r3, [r0, #34]	@ 0x22
 8009902:	e6fa      	b.n	80096fa <_rclc_take_new_data+0x3a>
 8009904:	f100 0230 	add.w	r2, r0, #48	@ 0x30
 8009908:	a90a      	add	r1, sp, #40	@ 0x28
 800990a:	3010      	adds	r0, #16
 800990c:	f008 fb0c 	bl	8011f28 <rcl_action_take_cancel_response>
 8009910:	4605      	mov	r5, r0
 8009912:	2800      	cmp	r0, #0
 8009914:	f47f af37 	bne.w	8009786 <_rclc_take_new_data+0xc6>
 8009918:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800991c:	6860      	ldr	r0, [r4, #4]
 800991e:	f008 ff39 	bl	8012794 <rclc_action_find_handle_by_cancel_request_sequence_number>
 8009922:	4606      	mov	r6, r0
 8009924:	6860      	ldr	r0, [r4, #4]
 8009926:	2e00      	cmp	r6, #0
 8009928:	f43f af40 	beq.w	80097ac <_rclc_take_new_data+0xec>
 800992c:	6b83      	ldr	r3, [r0, #56]	@ 0x38
 800992e:	2701      	movs	r7, #1
 8009930:	84b7      	strh	r7, [r6, #36]	@ 0x24
 8009932:	2b00      	cmp	r3, #0
 8009934:	f43f af3a 	beq.w	80097ac <_rclc_take_new_data+0xec>
 8009938:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 800993a:	eb05 0145 	add.w	r1, r5, r5, lsl #1
 800993e:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
 8009942:	f008 fed3 	bl	80126ec <rclc_action_find_goal_handle_by_uuid>
 8009946:	b138      	cbz	r0, 8009958 <_rclc_take_new_data+0x298>
 8009948:	6860      	ldr	r0, [r4, #4]
 800994a:	6b83      	ldr	r3, [r0, #56]	@ 0x38
 800994c:	f886 7025 	strb.w	r7, [r6, #37]	@ 0x25
 8009950:	3501      	adds	r5, #1
 8009952:	42ab      	cmp	r3, r5
 8009954:	d8f0      	bhi.n	8009938 <_rclc_take_new_data+0x278>
 8009956:	e729      	b.n	80097ac <_rclc_take_new_data+0xec>
 8009958:	6860      	ldr	r0, [r4, #4]
 800995a:	6b83      	ldr	r3, [r0, #56]	@ 0x38
 800995c:	3501      	adds	r5, #1
 800995e:	42ab      	cmp	r3, r5
 8009960:	d8ea      	bhi.n	8009938 <_rclc_take_new_data+0x278>
 8009962:	e723      	b.n	80097ac <_rclc_take_new_data+0xec>
 8009964:	ab06      	add	r3, sp, #24
 8009966:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8009968:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 800996c:	2103      	movs	r1, #3
 800996e:	e896 000c 	ldmia.w	r6, {r2, r3}
 8009972:	6860      	ldr	r0, [r4, #4]
 8009974:	f008 ff84 	bl	8012880 <rclc_action_server_goal_cancel_reject>
 8009978:	e6c4      	b.n	8009704 <_rclc_take_new_data+0x44>
 800997a:	ab06      	add	r3, sp, #24
 800997c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800997e:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 8009982:	2102      	movs	r1, #2
 8009984:	e896 000c 	ldmia.w	r6, {r2, r3}
 8009988:	6860      	ldr	r0, [r4, #4]
 800998a:	f008 ff79 	bl	8012880 <rclc_action_server_goal_cancel_reject>
 800998e:	e6b9      	b.n	8009704 <_rclc_take_new_data+0x44>
 8009990:	6860      	ldr	r0, [r4, #4]
 8009992:	e706      	b.n	80097a2 <_rclc_take_new_data+0xe2>
 8009994:	6860      	ldr	r0, [r4, #4]
 8009996:	4631      	mov	r1, r6
 8009998:	f008 fe92 	bl	80126c0 <rclc_action_remove_used_goal_handle>
 800999c:	f000 fd60 	bl	800a460 <rcutils_reset_error>
 80099a0:	e6b0      	b.n	8009704 <_rclc_take_new_data+0x44>
 80099a2:	2501      	movs	r5, #1
 80099a4:	e6ae      	b.n	8009704 <_rclc_take_new_data+0x44>
 80099a6:	bf00      	nop

080099a8 <_rclc_execute.part.0>:
 80099a8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80099aa:	7803      	ldrb	r3, [r0, #0]
 80099ac:	b087      	sub	sp, #28
 80099ae:	4604      	mov	r4, r0
 80099b0:	2b0a      	cmp	r3, #10
 80099b2:	f200 8136 	bhi.w	8009c22 <_rclc_execute.part.0+0x27a>
 80099b6:	e8df f003 	tbb	[pc, r3]
 80099ba:	435e      	.short	0x435e
 80099bc:	06a1664f 	.word	0x06a1664f
 80099c0:	6c1e0606 	.word	0x6c1e0606
 80099c4:	59          	.byte	0x59
 80099c5:	00          	.byte	0x00
 80099c6:	2b06      	cmp	r3, #6
 80099c8:	f000 8122 	beq.w	8009c10 <_rclc_execute.part.0+0x268>
 80099cc:	2b07      	cmp	r3, #7
 80099ce:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 80099d0:	f040 8118 	bne.w	8009c04 <_rclc_execute.part.0+0x25c>
 80099d4:	e9d0 120a 	ldrd	r1, r2, [r0, #40]	@ 0x28
 80099d8:	6880      	ldr	r0, [r0, #8]
 80099da:	4798      	blx	r3
 80099dc:	f104 0110 	add.w	r1, r4, #16
 80099e0:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
 80099e2:	6860      	ldr	r0, [r4, #4]
 80099e4:	f007 f8a6 	bl	8010b34 <rcl_send_response>
 80099e8:	2800      	cmp	r0, #0
 80099ea:	d033      	beq.n	8009a54 <_rclc_execute.part.0+0xac>
 80099ec:	9005      	str	r0, [sp, #20]
 80099ee:	f000 fd37 	bl	800a460 <rcutils_reset_error>
 80099f2:	9805      	ldr	r0, [sp, #20]
 80099f4:	e02e      	b.n	8009a54 <_rclc_execute.part.0+0xac>
 80099f6:	6840      	ldr	r0, [r0, #4]
 80099f8:	f890 3042 	ldrb.w	r3, [r0, #66]	@ 0x42
 80099fc:	2b00      	cmp	r3, #0
 80099fe:	f000 8086 	beq.w	8009b0e <_rclc_execute.part.0+0x166>
 8009a02:	2600      	movs	r6, #0
 8009a04:	2701      	movs	r7, #1
 8009a06:	e004      	b.n	8009a12 <_rclc_execute.part.0+0x6a>
 8009a08:	f008 fe24 	bl	8012654 <rclc_action_send_result_request>
 8009a0c:	b998      	cbnz	r0, 8009a36 <_rclc_execute.part.0+0x8e>
 8009a0e:	722f      	strb	r7, [r5, #8]
 8009a10:	6860      	ldr	r0, [r4, #4]
 8009a12:	f008 fed1 	bl	80127b8 <rclc_action_find_first_handle_with_goal_response>
 8009a16:	4605      	mov	r5, r0
 8009a18:	2800      	cmp	r0, #0
 8009a1a:	d077      	beq.n	8009b0c <_rclc_execute.part.0+0x164>
 8009a1c:	6863      	ldr	r3, [r4, #4]
 8009a1e:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 8009a20:	699b      	ldr	r3, [r3, #24]
 8009a22:	f895 1021 	ldrb.w	r1, [r5, #33]	@ 0x21
 8009a26:	f885 6020 	strb.w	r6, [r5, #32]
 8009a2a:	4798      	blx	r3
 8009a2c:	f895 3021 	ldrb.w	r3, [r5, #33]	@ 0x21
 8009a30:	4628      	mov	r0, r5
 8009a32:	2b00      	cmp	r3, #0
 8009a34:	d1e8      	bne.n	8009a08 <_rclc_execute.part.0+0x60>
 8009a36:	6860      	ldr	r0, [r4, #4]
 8009a38:	4629      	mov	r1, r5
 8009a3a:	f008 fe41 	bl	80126c0 <rclc_action_remove_used_goal_handle>
 8009a3e:	e7e7      	b.n	8009a10 <_rclc_execute.part.0+0x68>
 8009a40:	f890 5039 	ldrb.w	r5, [r0, #57]	@ 0x39
 8009a44:	e9d0 130b 	ldrd	r1, r3, [r0, #44]	@ 0x2c
 8009a48:	2d00      	cmp	r5, #0
 8009a4a:	f000 80c9 	beq.w	8009be0 <_rclc_execute.part.0+0x238>
 8009a4e:	6880      	ldr	r0, [r0, #8]
 8009a50:	4798      	blx	r3
 8009a52:	2000      	movs	r0, #0
 8009a54:	b007      	add	sp, #28
 8009a56:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009a58:	6840      	ldr	r0, [r0, #4]
 8009a5a:	f007 fa6d 	bl	8010f38 <rcl_timer_call>
 8009a5e:	f240 3321 	movw	r3, #801	@ 0x321
 8009a62:	4298      	cmp	r0, r3
 8009a64:	d004      	beq.n	8009a70 <_rclc_execute.part.0+0xc8>
 8009a66:	2800      	cmp	r0, #0
 8009a68:	d0f4      	beq.n	8009a54 <_rclc_execute.part.0+0xac>
 8009a6a:	e7bf      	b.n	80099ec <_rclc_execute.part.0+0x44>
 8009a6c:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 8009a6e:	4798      	blx	r3
 8009a70:	2000      	movs	r0, #0
 8009a72:	b007      	add	sp, #28
 8009a74:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009a76:	f890 5039 	ldrb.w	r5, [r0, #57]	@ 0x39
 8009a7a:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 8009a7c:	b925      	cbnz	r5, 8009a88 <_rclc_execute.part.0+0xe0>
 8009a7e:	4628      	mov	r0, r5
 8009a80:	4798      	blx	r3
 8009a82:	4628      	mov	r0, r5
 8009a84:	e7e6      	b.n	8009a54 <_rclc_execute.part.0+0xac>
 8009a86:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 8009a88:	68a0      	ldr	r0, [r4, #8]
 8009a8a:	4798      	blx	r3
 8009a8c:	2000      	movs	r0, #0
 8009a8e:	b007      	add	sp, #28
 8009a90:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009a92:	6840      	ldr	r0, [r0, #4]
 8009a94:	f890 3024 	ldrb.w	r3, [r0, #36]	@ 0x24
 8009a98:	bb3b      	cbnz	r3, 8009aea <_rclc_execute.part.0+0x142>
 8009a9a:	f890 3020 	ldrb.w	r3, [r0, #32]
 8009a9e:	2b00      	cmp	r3, #0
 8009aa0:	d07b      	beq.n	8009b9a <_rclc_execute.part.0+0x1f2>
 8009aa2:	f640 0634 	movw	r6, #2100	@ 0x834
 8009aa6:	2701      	movs	r7, #1
 8009aa8:	e007      	b.n	8009aba <_rclc_execute.part.0+0x112>
 8009aaa:	4628      	mov	r0, r5
 8009aac:	f008 fe9c 	bl	80127e8 <rclc_action_server_response_goal_request>
 8009ab0:	6860      	ldr	r0, [r4, #4]
 8009ab2:	4629      	mov	r1, r5
 8009ab4:	f008 fe04 	bl	80126c0 <rclc_action_remove_used_goal_handle>
 8009ab8:	6860      	ldr	r0, [r4, #4]
 8009aba:	2100      	movs	r1, #0
 8009abc:	f008 fe2e 	bl	801271c <rclc_action_find_first_handle_by_status>
 8009ac0:	4605      	mov	r5, r0
 8009ac2:	2800      	cmp	r0, #0
 8009ac4:	d066      	beq.n	8009b94 <_rclc_execute.part.0+0x1ec>
 8009ac6:	6863      	ldr	r3, [r4, #4]
 8009ac8:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 8009aca:	699b      	ldr	r3, [r3, #24]
 8009acc:	4798      	blx	r3
 8009ace:	42b0      	cmp	r0, r6
 8009ad0:	f04f 0100 	mov.w	r1, #0
 8009ad4:	d1e9      	bne.n	8009aaa <_rclc_execute.part.0+0x102>
 8009ad6:	2101      	movs	r1, #1
 8009ad8:	4628      	mov	r0, r5
 8009ada:	f008 fe85 	bl	80127e8 <rclc_action_server_response_goal_request>
 8009ade:	722f      	strb	r7, [r5, #8]
 8009ae0:	e7ea      	b.n	8009ab8 <_rclc_execute.part.0+0x110>
 8009ae2:	6848      	ldr	r0, [r1, #4]
 8009ae4:	f008 fdec 	bl	80126c0 <rclc_action_remove_used_goal_handle>
 8009ae8:	6860      	ldr	r0, [r4, #4]
 8009aea:	f008 fe23 	bl	8012734 <rclc_action_find_first_terminated_handle>
 8009aee:	4601      	mov	r1, r0
 8009af0:	2800      	cmp	r0, #0
 8009af2:	d1f6      	bne.n	8009ae2 <_rclc_execute.part.0+0x13a>
 8009af4:	6860      	ldr	r0, [r4, #4]
 8009af6:	f880 1024 	strb.w	r1, [r0, #36]	@ 0x24
 8009afa:	e7ce      	b.n	8009a9a <_rclc_execute.part.0+0xf2>
 8009afc:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 8009afe:	6880      	ldr	r0, [r0, #8]
 8009b00:	f104 0110 	add.w	r1, r4, #16
 8009b04:	4798      	blx	r3
 8009b06:	2000      	movs	r0, #0
 8009b08:	b007      	add	sp, #28
 8009b0a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009b0c:	6860      	ldr	r0, [r4, #4]
 8009b0e:	f890 3040 	ldrb.w	r3, [r0, #64]	@ 0x40
 8009b12:	b18b      	cbz	r3, 8009b38 <_rclc_execute.part.0+0x190>
 8009b14:	68c5      	ldr	r5, [r0, #12]
 8009b16:	b32d      	cbz	r5, 8009b64 <_rclc_execute.part.0+0x1bc>
 8009b18:	2600      	movs	r6, #0
 8009b1a:	f895 3022 	ldrb.w	r3, [r5, #34]	@ 0x22
 8009b1e:	b143      	cbz	r3, 8009b32 <_rclc_execute.part.0+0x18a>
 8009b20:	69c3      	ldr	r3, [r0, #28]
 8009b22:	f885 6022 	strb.w	r6, [r5, #34]	@ 0x22
 8009b26:	b123      	cbz	r3, 8009b32 <_rclc_execute.part.0+0x18a>
 8009b28:	6a81      	ldr	r1, [r0, #40]	@ 0x28
 8009b2a:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 8009b2c:	4628      	mov	r0, r5
 8009b2e:	4798      	blx	r3
 8009b30:	6860      	ldr	r0, [r4, #4]
 8009b32:	682d      	ldr	r5, [r5, #0]
 8009b34:	2d00      	cmp	r5, #0
 8009b36:	d1f0      	bne.n	8009b1a <_rclc_execute.part.0+0x172>
 8009b38:	f890 3044 	ldrb.w	r3, [r0, #68]	@ 0x44
 8009b3c:	b193      	cbz	r3, 8009b64 <_rclc_execute.part.0+0x1bc>
 8009b3e:	68c5      	ldr	r5, [r0, #12]
 8009b40:	b185      	cbz	r5, 8009b64 <_rclc_execute.part.0+0x1bc>
 8009b42:	2600      	movs	r6, #0
 8009b44:	f895 3024 	ldrb.w	r3, [r5, #36]	@ 0x24
 8009b48:	b14b      	cbz	r3, 8009b5e <_rclc_execute.part.0+0x1b6>
 8009b4a:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 8009b4c:	f885 6024 	strb.w	r6, [r5, #36]	@ 0x24
 8009b50:	b12b      	cbz	r3, 8009b5e <_rclc_execute.part.0+0x1b6>
 8009b52:	4628      	mov	r0, r5
 8009b54:	f895 1025 	ldrb.w	r1, [r5, #37]	@ 0x25
 8009b58:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 8009b5a:	4798      	blx	r3
 8009b5c:	6860      	ldr	r0, [r4, #4]
 8009b5e:	682d      	ldr	r5, [r5, #0]
 8009b60:	2d00      	cmp	r5, #0
 8009b62:	d1ef      	bne.n	8009b44 <_rclc_execute.part.0+0x19c>
 8009b64:	f890 3043 	ldrb.w	r3, [r0, #67]	@ 0x43
 8009b68:	2b00      	cmp	r3, #0
 8009b6a:	d081      	beq.n	8009a70 <_rclc_execute.part.0+0xc8>
 8009b6c:	2700      	movs	r7, #0
 8009b6e:	e00b      	b.n	8009b88 <_rclc_execute.part.0+0x1e0>
 8009b70:	6863      	ldr	r3, [r4, #4]
 8009b72:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 8009b74:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8009b76:	6a1e      	ldr	r6, [r3, #32]
 8009b78:	f885 7023 	strb.w	r7, [r5, #35]	@ 0x23
 8009b7c:	47b0      	blx	r6
 8009b7e:	6860      	ldr	r0, [r4, #4]
 8009b80:	4629      	mov	r1, r5
 8009b82:	f008 fd9d 	bl	80126c0 <rclc_action_remove_used_goal_handle>
 8009b86:	6860      	ldr	r0, [r4, #4]
 8009b88:	f008 fe22 	bl	80127d0 <rclc_action_find_first_handle_with_result_response>
 8009b8c:	4605      	mov	r5, r0
 8009b8e:	2800      	cmp	r0, #0
 8009b90:	d1ee      	bne.n	8009b70 <_rclc_execute.part.0+0x1c8>
 8009b92:	e76d      	b.n	8009a70 <_rclc_execute.part.0+0xc8>
 8009b94:	6860      	ldr	r0, [r4, #4]
 8009b96:	f880 5020 	strb.w	r5, [r0, #32]
 8009b9a:	f890 3021 	ldrb.w	r3, [r0, #33]	@ 0x21
 8009b9e:	2b00      	cmp	r3, #0
 8009ba0:	f43f af66 	beq.w	8009a70 <_rclc_execute.part.0+0xc8>
 8009ba4:	68c5      	ldr	r5, [r0, #12]
 8009ba6:	b1b5      	cbz	r5, 8009bd6 <_rclc_execute.part.0+0x22e>
 8009ba8:	2602      	movs	r6, #2
 8009baa:	e001      	b.n	8009bb0 <_rclc_execute.part.0+0x208>
 8009bac:	682d      	ldr	r5, [r5, #0]
 8009bae:	b195      	cbz	r5, 8009bd6 <_rclc_execute.part.0+0x22e>
 8009bb0:	f995 3008 	ldrsb.w	r3, [r5, #8]
 8009bb4:	2b03      	cmp	r3, #3
 8009bb6:	d1f9      	bne.n	8009bac <_rclc_execute.part.0+0x204>
 8009bb8:	69c3      	ldr	r3, [r0, #28]
 8009bba:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 8009bbc:	4628      	mov	r0, r5
 8009bbe:	4798      	blx	r3
 8009bc0:	4603      	mov	r3, r0
 8009bc2:	f105 0260 	add.w	r2, r5, #96	@ 0x60
 8009bc6:	4628      	mov	r0, r5
 8009bc8:	f885 3025 	strb.w	r3, [r5, #37]	@ 0x25
 8009bcc:	b163      	cbz	r3, 8009be8 <_rclc_execute.part.0+0x240>
 8009bce:	f008 fe2b 	bl	8012828 <rclc_action_server_goal_cancel_accept>
 8009bd2:	6860      	ldr	r0, [r4, #4]
 8009bd4:	e7ea      	b.n	8009bac <_rclc_execute.part.0+0x204>
 8009bd6:	2300      	movs	r3, #0
 8009bd8:	f880 3021 	strb.w	r3, [r0, #33]	@ 0x21
 8009bdc:	4618      	mov	r0, r3
 8009bde:	e739      	b.n	8009a54 <_rclc_execute.part.0+0xac>
 8009be0:	4628      	mov	r0, r5
 8009be2:	4798      	blx	r3
 8009be4:	4628      	mov	r0, r5
 8009be6:	e735      	b.n	8009a54 <_rclc_execute.part.0+0xac>
 8009be8:	ca0f      	ldmia	r2, {r0, r1, r2, r3}
 8009bea:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 8009bee:	f105 0758 	add.w	r7, r5, #88	@ 0x58
 8009bf2:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009bf6:	6860      	ldr	r0, [r4, #4]
 8009bf8:	2101      	movs	r1, #1
 8009bfa:	f008 fe41 	bl	8012880 <rclc_action_server_goal_cancel_reject>
 8009bfe:	722e      	strb	r6, [r5, #8]
 8009c00:	6860      	ldr	r0, [r4, #4]
 8009c02:	e7d3      	b.n	8009bac <_rclc_execute.part.0+0x204>
 8009c04:	6a81      	ldr	r1, [r0, #40]	@ 0x28
 8009c06:	6880      	ldr	r0, [r0, #8]
 8009c08:	4798      	blx	r3
 8009c0a:	f104 0110 	add.w	r1, r4, #16
 8009c0e:	e6e7      	b.n	80099e0 <_rclc_execute.part.0+0x38>
 8009c10:	f100 0110 	add.w	r1, r0, #16
 8009c14:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 8009c16:	6a82      	ldr	r2, [r0, #40]	@ 0x28
 8009c18:	6880      	ldr	r0, [r0, #8]
 8009c1a:	9105      	str	r1, [sp, #20]
 8009c1c:	4798      	blx	r3
 8009c1e:	9905      	ldr	r1, [sp, #20]
 8009c20:	e6de      	b.n	80099e0 <_rclc_execute.part.0+0x38>
 8009c22:	2001      	movs	r0, #1
 8009c24:	e716      	b.n	8009a54 <_rclc_execute.part.0+0xac>
 8009c26:	bf00      	nop

08009c28 <rclc_executor_trigger_any>:
 8009c28:	2800      	cmp	r0, #0
 8009c2a:	d03f      	beq.n	8009cac <rclc_executor_trigger_any+0x84>
 8009c2c:	2900      	cmp	r1, #0
 8009c2e:	d03e      	beq.n	8009cae <rclc_executor_trigger_any+0x86>
 8009c30:	4603      	mov	r3, r0
 8009c32:	f890 0038 	ldrb.w	r0, [r0, #56]	@ 0x38
 8009c36:	2200      	movs	r2, #0
 8009c38:	2800      	cmp	r0, #0
 8009c3a:	d037      	beq.n	8009cac <rclc_executor_trigger_any+0x84>
 8009c3c:	b430      	push	{r4, r5}
 8009c3e:	f893 c000 	ldrb.w	ip, [r3]
 8009c42:	f1bc 0f08 	cmp.w	ip, #8
 8009c46:	d11e      	bne.n	8009c86 <rclc_executor_trigger_any+0x5e>
 8009c48:	685c      	ldr	r4, [r3, #4]
 8009c4a:	6c25      	ldr	r5, [r4, #64]	@ 0x40
 8009c4c:	f035 457f 	bics.w	r5, r5, #4278190080	@ 0xff000000
 8009c50:	d105      	bne.n	8009c5e <rclc_executor_trigger_any+0x36>
 8009c52:	f894 0044 	ldrb.w	r0, [r4, #68]	@ 0x44
 8009c56:	b910      	cbnz	r0, 8009c5e <rclc_executor_trigger_any+0x36>
 8009c58:	f894 0043 	ldrb.w	r0, [r4, #67]	@ 0x43
 8009c5c:	b128      	cbz	r0, 8009c6a <rclc_executor_trigger_any+0x42>
 8009c5e:	bc30      	pop	{r4, r5}
 8009c60:	4770      	bx	lr
 8009c62:	f893 0039 	ldrb.w	r0, [r3, #57]	@ 0x39
 8009c66:	2800      	cmp	r0, #0
 8009c68:	d1f9      	bne.n	8009c5e <rclc_executor_trigger_any+0x36>
 8009c6a:	3201      	adds	r2, #1
 8009c6c:	4291      	cmp	r1, r2
 8009c6e:	f103 0340 	add.w	r3, r3, #64	@ 0x40
 8009c72:	d018      	beq.n	8009ca6 <rclc_executor_trigger_any+0x7e>
 8009c74:	f893 0038 	ldrb.w	r0, [r3, #56]	@ 0x38
 8009c78:	2800      	cmp	r0, #0
 8009c7a:	d0f0      	beq.n	8009c5e <rclc_executor_trigger_any+0x36>
 8009c7c:	f893 c000 	ldrb.w	ip, [r3]
 8009c80:	f1bc 0f08 	cmp.w	ip, #8
 8009c84:	d0e0      	beq.n	8009c48 <rclc_executor_trigger_any+0x20>
 8009c86:	f1bc 0f09 	cmp.w	ip, #9
 8009c8a:	d1ea      	bne.n	8009c62 <rclc_executor_trigger_any+0x3a>
 8009c8c:	685c      	ldr	r4, [r3, #4]
 8009c8e:	6a25      	ldr	r5, [r4, #32]
 8009c90:	2d00      	cmp	r5, #0
 8009c92:	d1e4      	bne.n	8009c5e <rclc_executor_trigger_any+0x36>
 8009c94:	f894 0024 	ldrb.w	r0, [r4, #36]	@ 0x24
 8009c98:	2800      	cmp	r0, #0
 8009c9a:	d1e0      	bne.n	8009c5e <rclc_executor_trigger_any+0x36>
 8009c9c:	3201      	adds	r2, #1
 8009c9e:	4291      	cmp	r1, r2
 8009ca0:	f103 0340 	add.w	r3, r3, #64	@ 0x40
 8009ca4:	d1e6      	bne.n	8009c74 <rclc_executor_trigger_any+0x4c>
 8009ca6:	2000      	movs	r0, #0
 8009ca8:	bc30      	pop	{r4, r5}
 8009caa:	4770      	bx	lr
 8009cac:	4770      	bx	lr
 8009cae:	4608      	mov	r0, r1
 8009cb0:	4770      	bx	lr
 8009cb2:	bf00      	nop
 8009cb4:	0000      	movs	r0, r0
	...

08009cb8 <rclc_executor_init>:
 8009cb8:	2800      	cmp	r0, #0
 8009cba:	d05f      	beq.n	8009d7c <rclc_executor_init+0xc4>
 8009cbc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009cc0:	460c      	mov	r4, r1
 8009cc2:	b0b0      	sub	sp, #192	@ 0xc0
 8009cc4:	2900      	cmp	r1, #0
 8009cc6:	d051      	beq.n	8009d6c <rclc_executor_init+0xb4>
 8009cc8:	4605      	mov	r5, r0
 8009cca:	4618      	mov	r0, r3
 8009ccc:	4616      	mov	r6, r2
 8009cce:	461f      	mov	r7, r3
 8009cd0:	f000 fba0 	bl	800a414 <rcutils_allocator_is_valid>
 8009cd4:	2800      	cmp	r0, #0
 8009cd6:	d049      	beq.n	8009d6c <rclc_executor_init+0xb4>
 8009cd8:	2e00      	cmp	r6, #0
 8009cda:	d047      	beq.n	8009d6c <rclc_executor_init+0xb4>
 8009cdc:	492c      	ldr	r1, [pc, #176]	@ (8009d90 <rclc_executor_init+0xd8>)
 8009cde:	2288      	movs	r2, #136	@ 0x88
 8009ce0:	a80e      	add	r0, sp, #56	@ 0x38
 8009ce2:	f00c f87c 	bl	8015dde <memcpy>
 8009ce6:	a90e      	add	r1, sp, #56	@ 0x38
 8009ce8:	2288      	movs	r2, #136	@ 0x88
 8009cea:	4628      	mov	r0, r5
 8009cec:	f00c f877 	bl	8015dde <memcpy>
 8009cf0:	602c      	str	r4, [r5, #0]
 8009cf2:	4668      	mov	r0, sp
 8009cf4:	60ae      	str	r6, [r5, #8]
 8009cf6:	466c      	mov	r4, sp
 8009cf8:	f007 fa90 	bl	801121c <rcl_get_zero_initialized_wait_set>
 8009cfc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8009cfe:	f105 0c14 	add.w	ip, r5, #20
 8009d02:	f8d7 8000 	ldr.w	r8, [r7]
 8009d06:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8009d0a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8009d0c:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8009d10:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8009d12:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8009d16:	ed9f 7b1c 	vldr	d7, [pc, #112]	@ 8009d88 <rclc_executor_init+0xd0>
 8009d1a:	6823      	ldr	r3, [r4, #0]
 8009d1c:	f8cc 3000 	str.w	r3, [ip]
 8009d20:	6939      	ldr	r1, [r7, #16]
 8009d22:	612f      	str	r7, [r5, #16]
 8009d24:	ed85 7b1a 	vstr	d7, [r5, #104]	@ 0x68
 8009d28:	01b0      	lsls	r0, r6, #6
 8009d2a:	47c0      	blx	r8
 8009d2c:	6068      	str	r0, [r5, #4]
 8009d2e:	b338      	cbz	r0, 8009d80 <rclc_executor_init+0xc8>
 8009d30:	2400      	movs	r4, #0
 8009d32:	e000      	b.n	8009d36 <rclc_executor_init+0x7e>
 8009d34:	6868      	ldr	r0, [r5, #4]
 8009d36:	eb00 1084 	add.w	r0, r0, r4, lsl #6
 8009d3a:	4631      	mov	r1, r6
 8009d3c:	3401      	adds	r4, #1
 8009d3e:	f000 fa6b 	bl	800a218 <rclc_executor_handle_init>
 8009d42:	42a6      	cmp	r6, r4
 8009d44:	d1f6      	bne.n	8009d34 <rclc_executor_init+0x7c>
 8009d46:	f105 0048 	add.w	r0, r5, #72	@ 0x48
 8009d4a:	f000 fa5b 	bl	800a204 <rclc_executor_handle_counters_zero_init>
 8009d4e:	4a11      	ldr	r2, [pc, #68]	@ (8009d94 <rclc_executor_init+0xdc>)
 8009d50:	686b      	ldr	r3, [r5, #4]
 8009d52:	2000      	movs	r0, #0
 8009d54:	e9c5 201e 	strd	r2, r0, [r5, #120]	@ 0x78
 8009d58:	b163      	cbz	r3, 8009d74 <rclc_executor_init+0xbc>
 8009d5a:	692b      	ldr	r3, [r5, #16]
 8009d5c:	b153      	cbz	r3, 8009d74 <rclc_executor_init+0xbc>
 8009d5e:	68ab      	ldr	r3, [r5, #8]
 8009d60:	b143      	cbz	r3, 8009d74 <rclc_executor_init+0xbc>
 8009d62:	f885 0080 	strb.w	r0, [r5, #128]	@ 0x80
 8009d66:	b030      	add	sp, #192	@ 0xc0
 8009d68:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009d6c:	200b      	movs	r0, #11
 8009d6e:	b030      	add	sp, #192	@ 0xc0
 8009d70:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009d74:	4618      	mov	r0, r3
 8009d76:	b030      	add	sp, #192	@ 0xc0
 8009d78:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009d7c:	200b      	movs	r0, #11
 8009d7e:	4770      	bx	lr
 8009d80:	200a      	movs	r0, #10
 8009d82:	e7f4      	b.n	8009d6e <rclc_executor_init+0xb6>
 8009d84:	f3af 8000 	nop.w
 8009d88:	3b9aca00 	.word	0x3b9aca00
 8009d8c:	00000000 	.word	0x00000000
 8009d90:	08016cd0 	.word	0x08016cd0
 8009d94:	08009c29 	.word	0x08009c29

08009d98 <rclc_executor_add_subscription>:
 8009d98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009d9a:	f89d e018 	ldrb.w	lr, [sp, #24]
 8009d9e:	b338      	cbz	r0, 8009df0 <rclc_executor_add_subscription+0x58>
 8009da0:	b331      	cbz	r1, 8009df0 <rclc_executor_add_subscription+0x58>
 8009da2:	b32a      	cbz	r2, 8009df0 <rclc_executor_add_subscription+0x58>
 8009da4:	b323      	cbz	r3, 8009df0 <rclc_executor_add_subscription+0x58>
 8009da6:	4604      	mov	r4, r0
 8009da8:	e9d0 5002 	ldrd	r5, r0, [r0, #8]
 8009dac:	42a8      	cmp	r0, r5
 8009dae:	d301      	bcc.n	8009db4 <rclc_executor_add_subscription+0x1c>
 8009db0:	2001      	movs	r0, #1
 8009db2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009db4:	6866      	ldr	r6, [r4, #4]
 8009db6:	0187      	lsls	r7, r0, #6
 8009db8:	eb06 1c80 	add.w	ip, r6, r0, lsl #6
 8009dbc:	2500      	movs	r5, #0
 8009dbe:	55f5      	strb	r5, [r6, r7]
 8009dc0:	3001      	adds	r0, #1
 8009dc2:	f8cc 3030 	str.w	r3, [ip, #48]	@ 0x30
 8009dc6:	f8cc 502c 	str.w	r5, [ip, #44]	@ 0x2c
 8009dca:	2301      	movs	r3, #1
 8009dcc:	f104 0514 	add.w	r5, r4, #20
 8009dd0:	e9cc 1201 	strd	r1, r2, [ip, #4]
 8009dd4:	f88c e001 	strb.w	lr, [ip, #1]
 8009dd8:	f8ac 3038 	strh.w	r3, [ip, #56]	@ 0x38
 8009ddc:	60e0      	str	r0, [r4, #12]
 8009dde:	4628      	mov	r0, r5
 8009de0:	f007 fa30 	bl	8011244 <rcl_wait_set_is_valid>
 8009de4:	b930      	cbnz	r0, 8009df4 <rclc_executor_add_subscription+0x5c>
 8009de6:	6ca3      	ldr	r3, [r4, #72]	@ 0x48
 8009de8:	3301      	adds	r3, #1
 8009dea:	2000      	movs	r0, #0
 8009dec:	64a3      	str	r3, [r4, #72]	@ 0x48
 8009dee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009df0:	200b      	movs	r0, #11
 8009df2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009df4:	4628      	mov	r0, r5
 8009df6:	f007 fa2b 	bl	8011250 <rcl_wait_set_fini>
 8009dfa:	2800      	cmp	r0, #0
 8009dfc:	d0f3      	beq.n	8009de6 <rclc_executor_add_subscription+0x4e>
 8009dfe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08009e00 <rclc_executor_prepare>:
 8009e00:	2800      	cmp	r0, #0
 8009e02:	d044      	beq.n	8009e8e <rclc_executor_prepare+0x8e>
 8009e04:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009e06:	f100 0514 	add.w	r5, r0, #20
 8009e0a:	b09b      	sub	sp, #108	@ 0x6c
 8009e0c:	4604      	mov	r4, r0
 8009e0e:	4628      	mov	r0, r5
 8009e10:	f007 fa18 	bl	8011244 <rcl_wait_set_is_valid>
 8009e14:	b110      	cbz	r0, 8009e1c <rclc_executor_prepare+0x1c>
 8009e16:	2000      	movs	r0, #0
 8009e18:	b01b      	add	sp, #108	@ 0x6c
 8009e1a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009e1c:	4628      	mov	r0, r5
 8009e1e:	f007 fa17 	bl	8011250 <rcl_wait_set_fini>
 8009e22:	2800      	cmp	r0, #0
 8009e24:	d130      	bne.n	8009e88 <rclc_executor_prepare+0x88>
 8009e26:	a80c      	add	r0, sp, #48	@ 0x30
 8009e28:	f007 f9f8 	bl	801121c <rcl_get_zero_initialized_wait_set>
 8009e2c:	f10d 0c30 	add.w	ip, sp, #48	@ 0x30
 8009e30:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8009e34:	46ae      	mov	lr, r5
 8009e36:	6927      	ldr	r7, [r4, #16]
 8009e38:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8009e3c:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8009e40:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8009e44:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8009e48:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8009e4c:	f8dc 3000 	ldr.w	r3, [ip]
 8009e50:	f8ce 3000 	str.w	r3, [lr]
 8009e54:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 8009e56:	ae04      	add	r6, sp, #16
 8009e58:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8009e5a:	683b      	ldr	r3, [r7, #0]
 8009e5c:	6822      	ldr	r2, [r4, #0]
 8009e5e:	6033      	str	r3, [r6, #0]
 8009e60:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8009e62:	6d61      	ldr	r1, [r4, #84]	@ 0x54
 8009e64:	e9cd 3202 	strd	r3, r2, [sp, #8]
 8009e68:	e9d4 3213 	ldrd	r3, r2, [r4, #76]	@ 0x4c
 8009e6c:	e9cd 2100 	strd	r2, r1, [sp]
 8009e70:	4628      	mov	r0, r5
 8009e72:	6e22      	ldr	r2, [r4, #96]	@ 0x60
 8009e74:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 8009e76:	f007 fce9 	bl	801184c <rcl_wait_set_init>
 8009e7a:	2800      	cmp	r0, #0
 8009e7c:	d0cc      	beq.n	8009e18 <rclc_executor_prepare+0x18>
 8009e7e:	900b      	str	r0, [sp, #44]	@ 0x2c
 8009e80:	f000 faee 	bl	800a460 <rcutils_reset_error>
 8009e84:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 8009e86:	e7c7      	b.n	8009e18 <rclc_executor_prepare+0x18>
 8009e88:	f000 faea 	bl	800a460 <rcutils_reset_error>
 8009e8c:	e7cb      	b.n	8009e26 <rclc_executor_prepare+0x26>
 8009e8e:	200b      	movs	r0, #11
 8009e90:	4770      	bx	lr
 8009e92:	bf00      	nop

08009e94 <rclc_executor_spin_some.part.0>:
 8009e94:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009e98:	f100 0614 	add.w	r6, r0, #20
 8009e9c:	b083      	sub	sp, #12
 8009e9e:	4691      	mov	r9, r2
 8009ea0:	4698      	mov	r8, r3
 8009ea2:	4605      	mov	r5, r0
 8009ea4:	f7ff ffac 	bl	8009e00 <rclc_executor_prepare>
 8009ea8:	4630      	mov	r0, r6
 8009eaa:	f007 fa9d 	bl	80113e8 <rcl_wait_set_clear>
 8009eae:	4607      	mov	r7, r0
 8009eb0:	2800      	cmp	r0, #0
 8009eb2:	f040 80ed 	bne.w	800a090 <rclc_executor_spin_some.part.0+0x1fc>
 8009eb6:	68ab      	ldr	r3, [r5, #8]
 8009eb8:	4604      	mov	r4, r0
 8009eba:	b303      	cbz	r3, 8009efe <rclc_executor_spin_some.part.0+0x6a>
 8009ebc:	6869      	ldr	r1, [r5, #4]
 8009ebe:	eb01 1c84 	add.w	ip, r1, r4, lsl #6
 8009ec2:	01a2      	lsls	r2, r4, #6
 8009ec4:	f89c 3038 	ldrb.w	r3, [ip, #56]	@ 0x38
 8009ec8:	b1cb      	cbz	r3, 8009efe <rclc_executor_spin_some.part.0+0x6a>
 8009eca:	5c8b      	ldrb	r3, [r1, r2]
 8009ecc:	2b0a      	cmp	r3, #10
 8009ece:	f200 80d8 	bhi.w	800a082 <rclc_executor_spin_some.part.0+0x1ee>
 8009ed2:	e8df f003 	tbb	[pc, r3]
 8009ed6:	9c9c      	.short	0x9c9c
 8009ed8:	068c8ca7 	.word	0x068c8ca7
 8009edc:	bdc90606 	.word	0xbdc90606
 8009ee0:	b2          	.byte	0xb2
 8009ee1:	00          	.byte	0x00
 8009ee2:	f8dc 1004 	ldr.w	r1, [ip, #4]
 8009ee6:	f10c 0234 	add.w	r2, ip, #52	@ 0x34
 8009eea:	4630      	mov	r0, r6
 8009eec:	f007 fdc4 	bl	8011a78 <rcl_wait_set_add_service>
 8009ef0:	2800      	cmp	r0, #0
 8009ef2:	f040 8086 	bne.w	800a002 <rclc_executor_spin_some.part.0+0x16e>
 8009ef6:	68ab      	ldr	r3, [r5, #8]
 8009ef8:	3401      	adds	r4, #1
 8009efa:	429c      	cmp	r4, r3
 8009efc:	d3de      	bcc.n	8009ebc <rclc_executor_spin_some.part.0+0x28>
 8009efe:	4643      	mov	r3, r8
 8009f00:	464a      	mov	r2, r9
 8009f02:	4630      	mov	r0, r6
 8009f04:	f007 fde4 	bl	8011ad0 <rcl_wait>
 8009f08:	f895 3080 	ldrb.w	r3, [r5, #128]	@ 0x80
 8009f0c:	2b00      	cmp	r3, #0
 8009f0e:	f000 80c7 	beq.w	800a0a0 <rclc_executor_spin_some.part.0+0x20c>
 8009f12:	2b01      	cmp	r3, #1
 8009f14:	f040 80b5 	bne.w	800a082 <rclc_executor_spin_some.part.0+0x1ee>
 8009f18:	68ab      	ldr	r3, [r5, #8]
 8009f1a:	2b00      	cmp	r3, #0
 8009f1c:	f000 8159 	beq.w	800a1d2 <rclc_executor_spin_some.part.0+0x33e>
 8009f20:	2400      	movs	r4, #0
 8009f22:	46a0      	mov	r8, r4
 8009f24:	f240 1991 	movw	r9, #401	@ 0x191
 8009f28:	e00a      	b.n	8009f40 <rclc_executor_spin_some.part.0+0xac>
 8009f2a:	f7ff fb7b 	bl	8009624 <_rclc_check_for_new_data>
 8009f2e:	4604      	mov	r4, r0
 8009f30:	b110      	cbz	r0, 8009f38 <rclc_executor_spin_some.part.0+0xa4>
 8009f32:	4548      	cmp	r0, r9
 8009f34:	f040 80b2 	bne.w	800a09c <rclc_executor_spin_some.part.0+0x208>
 8009f38:	68ab      	ldr	r3, [r5, #8]
 8009f3a:	4598      	cmp	r8, r3
 8009f3c:	f080 8126 	bcs.w	800a18c <rclc_executor_spin_some.part.0+0x2f8>
 8009f40:	686a      	ldr	r2, [r5, #4]
 8009f42:	eb02 1088 	add.w	r0, r2, r8, lsl #6
 8009f46:	4631      	mov	r1, r6
 8009f48:	f890 c038 	ldrb.w	ip, [r0, #56]	@ 0x38
 8009f4c:	f108 0801 	add.w	r8, r8, #1
 8009f50:	f1bc 0f00 	cmp.w	ip, #0
 8009f54:	d1e9      	bne.n	8009f2a <rclc_executor_spin_some.part.0+0x96>
 8009f56:	4619      	mov	r1, r3
 8009f58:	4610      	mov	r0, r2
 8009f5a:	e9d5 321e 	ldrd	r3, r2, [r5, #120]	@ 0x78
 8009f5e:	4798      	blx	r3
 8009f60:	2800      	cmp	r0, #0
 8009f62:	f000 809b 	beq.w	800a09c <rclc_executor_spin_some.part.0+0x208>
 8009f66:	68ab      	ldr	r3, [r5, #8]
 8009f68:	2b00      	cmp	r3, #0
 8009f6a:	f000 8097 	beq.w	800a09c <rclc_executor_spin_some.part.0+0x208>
 8009f6e:	f04f 0800 	mov.w	r8, #0
 8009f72:	f240 1991 	movw	r9, #401	@ 0x191
 8009f76:	e009      	b.n	8009f8c <rclc_executor_spin_some.part.0+0xf8>
 8009f78:	f7ff fba2 	bl	80096c0 <_rclc_take_new_data>
 8009f7c:	4604      	mov	r4, r0
 8009f7e:	b110      	cbz	r0, 8009f86 <rclc_executor_spin_some.part.0+0xf2>
 8009f80:	4548      	cmp	r0, r9
 8009f82:	f040 808b 	bne.w	800a09c <rclc_executor_spin_some.part.0+0x208>
 8009f86:	68ab      	ldr	r3, [r5, #8]
 8009f88:	4598      	cmp	r8, r3
 8009f8a:	d209      	bcs.n	8009fa0 <rclc_executor_spin_some.part.0+0x10c>
 8009f8c:	6868      	ldr	r0, [r5, #4]
 8009f8e:	eb00 1088 	add.w	r0, r0, r8, lsl #6
 8009f92:	4631      	mov	r1, r6
 8009f94:	f890 2038 	ldrb.w	r2, [r0, #56]	@ 0x38
 8009f98:	f108 0801 	add.w	r8, r8, #1
 8009f9c:	2a00      	cmp	r2, #0
 8009f9e:	d1eb      	bne.n	8009f78 <rclc_executor_spin_some.part.0+0xe4>
 8009fa0:	2600      	movs	r6, #0
 8009fa2:	b97b      	cbnz	r3, 8009fc4 <rclc_executor_spin_some.part.0+0x130>
 8009fa4:	e07a      	b.n	800a09c <rclc_executor_spin_some.part.0+0x208>
 8009fa6:	f812 200c 	ldrb.w	r2, [r2, ip]
 8009faa:	2a08      	cmp	r2, #8
 8009fac:	f000 80fd 	beq.w	800a1aa <rclc_executor_spin_some.part.0+0x316>
 8009fb0:	2a09      	cmp	r2, #9
 8009fb2:	f000 80ef 	beq.w	800a194 <rclc_executor_spin_some.part.0+0x300>
 8009fb6:	f890 2039 	ldrb.w	r2, [r0, #57]	@ 0x39
 8009fba:	b98a      	cbnz	r2, 8009fe0 <rclc_executor_spin_some.part.0+0x14c>
 8009fbc:	3601      	adds	r6, #1
 8009fbe:	429e      	cmp	r6, r3
 8009fc0:	d262      	bcs.n	800a088 <rclc_executor_spin_some.part.0+0x1f4>
 8009fc2:	2400      	movs	r4, #0
 8009fc4:	686a      	ldr	r2, [r5, #4]
 8009fc6:	eb02 1086 	add.w	r0, r2, r6, lsl #6
 8009fca:	ea4f 1c86 	mov.w	ip, r6, lsl #6
 8009fce:	f890 1038 	ldrb.w	r1, [r0, #56]	@ 0x38
 8009fd2:	2900      	cmp	r1, #0
 8009fd4:	d062      	beq.n	800a09c <rclc_executor_spin_some.part.0+0x208>
 8009fd6:	7841      	ldrb	r1, [r0, #1]
 8009fd8:	2900      	cmp	r1, #0
 8009fda:	d0e4      	beq.n	8009fa6 <rclc_executor_spin_some.part.0+0x112>
 8009fdc:	2901      	cmp	r1, #1
 8009fde:	d1ed      	bne.n	8009fbc <rclc_executor_spin_some.part.0+0x128>
 8009fe0:	f7ff fce2 	bl	80099a8 <_rclc_execute.part.0>
 8009fe4:	2800      	cmp	r0, #0
 8009fe6:	f040 80b6 	bne.w	800a156 <rclc_executor_spin_some.part.0+0x2c2>
 8009fea:	68ab      	ldr	r3, [r5, #8]
 8009fec:	e7e6      	b.n	8009fbc <rclc_executor_spin_some.part.0+0x128>
 8009fee:	f8dc 1004 	ldr.w	r1, [ip, #4]
 8009ff2:	f10c 0234 	add.w	r2, ip, #52	@ 0x34
 8009ff6:	4630      	mov	r0, r6
 8009ff8:	f007 fd12 	bl	8011a20 <rcl_wait_set_add_client>
 8009ffc:	2800      	cmp	r0, #0
 8009ffe:	f43f af7a 	beq.w	8009ef6 <rclc_executor_spin_some.part.0+0x62>
 800a002:	9001      	str	r0, [sp, #4]
 800a004:	f000 fa2c 	bl	800a460 <rcutils_reset_error>
 800a008:	9801      	ldr	r0, [sp, #4]
 800a00a:	4607      	mov	r7, r0
 800a00c:	e03c      	b.n	800a088 <rclc_executor_spin_some.part.0+0x1f4>
 800a00e:	f8dc 1004 	ldr.w	r1, [ip, #4]
 800a012:	f10c 0234 	add.w	r2, ip, #52	@ 0x34
 800a016:	4630      	mov	r0, r6
 800a018:	f007 f9ba 	bl	8011390 <rcl_wait_set_add_subscription>
 800a01c:	2800      	cmp	r0, #0
 800a01e:	f43f af6a 	beq.w	8009ef6 <rclc_executor_spin_some.part.0+0x62>
 800a022:	e7ee      	b.n	800a002 <rclc_executor_spin_some.part.0+0x16e>
 800a024:	f8dc 1004 	ldr.w	r1, [ip, #4]
 800a028:	f10c 0234 	add.w	r2, ip, #52	@ 0x34
 800a02c:	4630      	mov	r0, r6
 800a02e:	f007 fcc7 	bl	80119c0 <rcl_wait_set_add_timer>
 800a032:	2800      	cmp	r0, #0
 800a034:	f43f af5f 	beq.w	8009ef6 <rclc_executor_spin_some.part.0+0x62>
 800a038:	e7e3      	b.n	800a002 <rclc_executor_spin_some.part.0+0x16e>
 800a03a:	f8dc 1004 	ldr.w	r1, [ip, #4]
 800a03e:	f10c 0234 	add.w	r2, ip, #52	@ 0x34
 800a042:	4630      	mov	r0, r6
 800a044:	f007 fc90 	bl	8011968 <rcl_wait_set_add_guard_condition>
 800a048:	2800      	cmp	r0, #0
 800a04a:	f43f af54 	beq.w	8009ef6 <rclc_executor_spin_some.part.0+0x62>
 800a04e:	e7d8      	b.n	800a002 <rclc_executor_spin_some.part.0+0x16e>
 800a050:	f8dc 1004 	ldr.w	r1, [ip, #4]
 800a054:	f10c 0234 	add.w	r2, ip, #52	@ 0x34
 800a058:	3110      	adds	r1, #16
 800a05a:	4630      	mov	r0, r6
 800a05c:	f008 fa10 	bl	8012480 <rcl_action_wait_set_add_action_server>
 800a060:	2800      	cmp	r0, #0
 800a062:	f43f af48 	beq.w	8009ef6 <rclc_executor_spin_some.part.0+0x62>
 800a066:	e7cc      	b.n	800a002 <rclc_executor_spin_some.part.0+0x16e>
 800a068:	f8dc 1004 	ldr.w	r1, [ip, #4]
 800a06c:	f10c 0234 	add.w	r2, ip, #52	@ 0x34
 800a070:	3110      	adds	r1, #16
 800a072:	2300      	movs	r3, #0
 800a074:	4630      	mov	r0, r6
 800a076:	f007 ffdb 	bl	8012030 <rcl_action_wait_set_add_action_client>
 800a07a:	2800      	cmp	r0, #0
 800a07c:	f43f af3b 	beq.w	8009ef6 <rclc_executor_spin_some.part.0+0x62>
 800a080:	e7bf      	b.n	800a002 <rclc_executor_spin_some.part.0+0x16e>
 800a082:	f000 f9ed 	bl	800a460 <rcutils_reset_error>
 800a086:	2701      	movs	r7, #1
 800a088:	4638      	mov	r0, r7
 800a08a:	b003      	add	sp, #12
 800a08c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a090:	f000 f9e6 	bl	800a460 <rcutils_reset_error>
 800a094:	4638      	mov	r0, r7
 800a096:	b003      	add	sp, #12
 800a098:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a09c:	4627      	mov	r7, r4
 800a09e:	e7f3      	b.n	800a088 <rclc_executor_spin_some.part.0+0x1f4>
 800a0a0:	68ab      	ldr	r3, [r5, #8]
 800a0a2:	2b00      	cmp	r3, #0
 800a0a4:	f000 8092 	beq.w	800a1cc <rclc_executor_spin_some.part.0+0x338>
 800a0a8:	2400      	movs	r4, #0
 800a0aa:	46a0      	mov	r8, r4
 800a0ac:	f240 1991 	movw	r9, #401	@ 0x191
 800a0b0:	e008      	b.n	800a0c4 <rclc_executor_spin_some.part.0+0x230>
 800a0b2:	f7ff fab7 	bl	8009624 <_rclc_check_for_new_data>
 800a0b6:	4604      	mov	r4, r0
 800a0b8:	b108      	cbz	r0, 800a0be <rclc_executor_spin_some.part.0+0x22a>
 800a0ba:	4548      	cmp	r0, r9
 800a0bc:	d1ee      	bne.n	800a09c <rclc_executor_spin_some.part.0+0x208>
 800a0be:	68ab      	ldr	r3, [r5, #8]
 800a0c0:	4598      	cmp	r8, r3
 800a0c2:	d265      	bcs.n	800a190 <rclc_executor_spin_some.part.0+0x2fc>
 800a0c4:	686a      	ldr	r2, [r5, #4]
 800a0c6:	eb02 1088 	add.w	r0, r2, r8, lsl #6
 800a0ca:	4631      	mov	r1, r6
 800a0cc:	f890 c038 	ldrb.w	ip, [r0, #56]	@ 0x38
 800a0d0:	f108 0801 	add.w	r8, r8, #1
 800a0d4:	f1bc 0f00 	cmp.w	ip, #0
 800a0d8:	d1eb      	bne.n	800a0b2 <rclc_executor_spin_some.part.0+0x21e>
 800a0da:	4619      	mov	r1, r3
 800a0dc:	4610      	mov	r0, r2
 800a0de:	e9d5 321e 	ldrd	r3, r2, [r5, #120]	@ 0x78
 800a0e2:	4798      	blx	r3
 800a0e4:	2800      	cmp	r0, #0
 800a0e6:	d0d9      	beq.n	800a09c <rclc_executor_spin_some.part.0+0x208>
 800a0e8:	68ab      	ldr	r3, [r5, #8]
 800a0ea:	2b00      	cmp	r3, #0
 800a0ec:	d0d6      	beq.n	800a09c <rclc_executor_spin_some.part.0+0x208>
 800a0ee:	f04f 0800 	mov.w	r8, #0
 800a0f2:	f240 1991 	movw	r9, #401	@ 0x191
 800a0f6:	f240 2a59 	movw	sl, #601	@ 0x259
 800a0fa:	e00e      	b.n	800a11a <rclc_executor_spin_some.part.0+0x286>
 800a0fc:	f813 300b 	ldrb.w	r3, [r3, fp]
 800a100:	2b08      	cmp	r3, #8
 800a102:	d033      	beq.n	800a16c <rclc_executor_spin_some.part.0+0x2d8>
 800a104:	2b09      	cmp	r3, #9
 800a106:	d028      	beq.n	800a15a <rclc_executor_spin_some.part.0+0x2c6>
 800a108:	f890 3039 	ldrb.w	r3, [r0, #57]	@ 0x39
 800a10c:	b9fb      	cbnz	r3, 800a14e <rclc_executor_spin_some.part.0+0x2ba>
 800a10e:	68ab      	ldr	r3, [r5, #8]
 800a110:	f108 0801 	add.w	r8, r8, #1
 800a114:	4598      	cmp	r8, r3
 800a116:	d2b7      	bcs.n	800a088 <rclc_executor_spin_some.part.0+0x1f4>
 800a118:	2400      	movs	r4, #0
 800a11a:	6868      	ldr	r0, [r5, #4]
 800a11c:	eb00 1088 	add.w	r0, r0, r8, lsl #6
 800a120:	ea4f 1b88 	mov.w	fp, r8, lsl #6
 800a124:	f890 3038 	ldrb.w	r3, [r0, #56]	@ 0x38
 800a128:	2b00      	cmp	r3, #0
 800a12a:	d0b7      	beq.n	800a09c <rclc_executor_spin_some.part.0+0x208>
 800a12c:	4631      	mov	r1, r6
 800a12e:	f7ff fac7 	bl	80096c0 <_rclc_take_new_data>
 800a132:	b118      	cbz	r0, 800a13c <rclc_executor_spin_some.part.0+0x2a8>
 800a134:	4548      	cmp	r0, r9
 800a136:	d001      	beq.n	800a13c <rclc_executor_spin_some.part.0+0x2a8>
 800a138:	4550      	cmp	r0, sl
 800a13a:	d10c      	bne.n	800a156 <rclc_executor_spin_some.part.0+0x2c2>
 800a13c:	686b      	ldr	r3, [r5, #4]
 800a13e:	eb13 000b 	adds.w	r0, r3, fp
 800a142:	d021      	beq.n	800a188 <rclc_executor_spin_some.part.0+0x2f4>
 800a144:	7842      	ldrb	r2, [r0, #1]
 800a146:	2a00      	cmp	r2, #0
 800a148:	d0d8      	beq.n	800a0fc <rclc_executor_spin_some.part.0+0x268>
 800a14a:	2a01      	cmp	r2, #1
 800a14c:	d1df      	bne.n	800a10e <rclc_executor_spin_some.part.0+0x27a>
 800a14e:	f7ff fc2b 	bl	80099a8 <_rclc_execute.part.0>
 800a152:	2800      	cmp	r0, #0
 800a154:	d0db      	beq.n	800a10e <rclc_executor_spin_some.part.0+0x27a>
 800a156:	4607      	mov	r7, r0
 800a158:	e796      	b.n	800a088 <rclc_executor_spin_some.part.0+0x1f4>
 800a15a:	6843      	ldr	r3, [r0, #4]
 800a15c:	6a1a      	ldr	r2, [r3, #32]
 800a15e:	2a00      	cmp	r2, #0
 800a160:	d1f5      	bne.n	800a14e <rclc_executor_spin_some.part.0+0x2ba>
 800a162:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800a166:	2b00      	cmp	r3, #0
 800a168:	d0d1      	beq.n	800a10e <rclc_executor_spin_some.part.0+0x27a>
 800a16a:	e7f0      	b.n	800a14e <rclc_executor_spin_some.part.0+0x2ba>
 800a16c:	6843      	ldr	r3, [r0, #4]
 800a16e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800a170:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800a174:	d1eb      	bne.n	800a14e <rclc_executor_spin_some.part.0+0x2ba>
 800a176:	f893 2044 	ldrb.w	r2, [r3, #68]	@ 0x44
 800a17a:	2a00      	cmp	r2, #0
 800a17c:	d1e7      	bne.n	800a14e <rclc_executor_spin_some.part.0+0x2ba>
 800a17e:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 800a182:	2b00      	cmp	r3, #0
 800a184:	d0c3      	beq.n	800a10e <rclc_executor_spin_some.part.0+0x27a>
 800a186:	e7e2      	b.n	800a14e <rclc_executor_spin_some.part.0+0x2ba>
 800a188:	270b      	movs	r7, #11
 800a18a:	e77d      	b.n	800a088 <rclc_executor_spin_some.part.0+0x1f4>
 800a18c:	686a      	ldr	r2, [r5, #4]
 800a18e:	e6e2      	b.n	8009f56 <rclc_executor_spin_some.part.0+0xc2>
 800a190:	686a      	ldr	r2, [r5, #4]
 800a192:	e7a2      	b.n	800a0da <rclc_executor_spin_some.part.0+0x246>
 800a194:	6842      	ldr	r2, [r0, #4]
 800a196:	6a11      	ldr	r1, [r2, #32]
 800a198:	2900      	cmp	r1, #0
 800a19a:	f47f af21 	bne.w	8009fe0 <rclc_executor_spin_some.part.0+0x14c>
 800a19e:	f892 2024 	ldrb.w	r2, [r2, #36]	@ 0x24
 800a1a2:	2a00      	cmp	r2, #0
 800a1a4:	f43f af0a 	beq.w	8009fbc <rclc_executor_spin_some.part.0+0x128>
 800a1a8:	e71a      	b.n	8009fe0 <rclc_executor_spin_some.part.0+0x14c>
 800a1aa:	6842      	ldr	r2, [r0, #4]
 800a1ac:	6c11      	ldr	r1, [r2, #64]	@ 0x40
 800a1ae:	f031 417f 	bics.w	r1, r1, #4278190080	@ 0xff000000
 800a1b2:	f47f af15 	bne.w	8009fe0 <rclc_executor_spin_some.part.0+0x14c>
 800a1b6:	f892 1044 	ldrb.w	r1, [r2, #68]	@ 0x44
 800a1ba:	2900      	cmp	r1, #0
 800a1bc:	f47f af10 	bne.w	8009fe0 <rclc_executor_spin_some.part.0+0x14c>
 800a1c0:	f892 2043 	ldrb.w	r2, [r2, #67]	@ 0x43
 800a1c4:	2a00      	cmp	r2, #0
 800a1c6:	f43f aef9 	beq.w	8009fbc <rclc_executor_spin_some.part.0+0x128>
 800a1ca:	e709      	b.n	8009fe0 <rclc_executor_spin_some.part.0+0x14c>
 800a1cc:	686a      	ldr	r2, [r5, #4]
 800a1ce:	461c      	mov	r4, r3
 800a1d0:	e783      	b.n	800a0da <rclc_executor_spin_some.part.0+0x246>
 800a1d2:	686a      	ldr	r2, [r5, #4]
 800a1d4:	461c      	mov	r4, r3
 800a1d6:	e6be      	b.n	8009f56 <rclc_executor_spin_some.part.0+0xc2>

0800a1d8 <rclc_executor_spin_some>:
 800a1d8:	b190      	cbz	r0, 800a200 <rclc_executor_spin_some+0x28>
 800a1da:	b570      	push	{r4, r5, r6, lr}
 800a1dc:	4604      	mov	r4, r0
 800a1de:	6800      	ldr	r0, [r0, #0]
 800a1e0:	4616      	mov	r6, r2
 800a1e2:	461d      	mov	r5, r3
 800a1e4:	f005 ff8c 	bl	8010100 <rcl_context_is_valid>
 800a1e8:	b130      	cbz	r0, 800a1f8 <rclc_executor_spin_some+0x20>
 800a1ea:	4632      	mov	r2, r6
 800a1ec:	462b      	mov	r3, r5
 800a1ee:	4620      	mov	r0, r4
 800a1f0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800a1f4:	f7ff be4e 	b.w	8009e94 <rclc_executor_spin_some.part.0>
 800a1f8:	f000 f932 	bl	800a460 <rcutils_reset_error>
 800a1fc:	2001      	movs	r0, #1
 800a1fe:	bd70      	pop	{r4, r5, r6, pc}
 800a200:	200b      	movs	r0, #11
 800a202:	4770      	bx	lr

0800a204 <rclc_executor_handle_counters_zero_init>:
 800a204:	b130      	cbz	r0, 800a214 <rclc_executor_handle_counters_zero_init+0x10>
 800a206:	b508      	push	{r3, lr}
 800a208:	2220      	movs	r2, #32
 800a20a:	2100      	movs	r1, #0
 800a20c:	f00b fd1e 	bl	8015c4c <memset>
 800a210:	2000      	movs	r0, #0
 800a212:	bd08      	pop	{r3, pc}
 800a214:	200b      	movs	r0, #11
 800a216:	4770      	bx	lr

0800a218 <rclc_executor_handle_init>:
 800a218:	b168      	cbz	r0, 800a236 <rclc_executor_handle_init+0x1e>
 800a21a:	ed9f 7b09 	vldr	d7, [pc, #36]	@ 800a240 <rclc_executor_handle_init+0x28>
 800a21e:	2300      	movs	r3, #0
 800a220:	220b      	movs	r2, #11
 800a222:	ed80 7b0a 	vstr	d7, [r0, #40]	@ 0x28
 800a226:	e9c0 3301 	strd	r3, r3, [r0, #4]
 800a22a:	e9c0 310c 	strd	r3, r1, [r0, #48]	@ 0x30
 800a22e:	8002      	strh	r2, [r0, #0]
 800a230:	8703      	strh	r3, [r0, #56]	@ 0x38
 800a232:	4618      	mov	r0, r3
 800a234:	4770      	bx	lr
 800a236:	200b      	movs	r0, #11
 800a238:	4770      	bx	lr
 800a23a:	bf00      	nop
 800a23c:	f3af 8000 	nop.w
	...

0800a248 <rclc_support_init_with_options>:
 800a248:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800a24c:	b083      	sub	sp, #12
 800a24e:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 800a250:	b340      	cbz	r0, 800a2a4 <rclc_support_init_with_options+0x5c>
 800a252:	461d      	mov	r5, r3
 800a254:	b333      	cbz	r3, 800a2a4 <rclc_support_init_with_options+0x5c>
 800a256:	b32e      	cbz	r6, 800a2a4 <rclc_support_init_with_options+0x5c>
 800a258:	46e9      	mov	r9, sp
 800a25a:	4604      	mov	r4, r0
 800a25c:	4648      	mov	r0, r9
 800a25e:	460f      	mov	r7, r1
 800a260:	4690      	mov	r8, r2
 800a262:	f005 ff43 	bl	80100ec <rcl_get_zero_initialized_context>
 800a266:	e899 0003 	ldmia.w	r9, {r0, r1}
 800a26a:	462a      	mov	r2, r5
 800a26c:	e884 0003 	stmia.w	r4, {r0, r1}
 800a270:	4623      	mov	r3, r4
 800a272:	4641      	mov	r1, r8
 800a274:	4638      	mov	r0, r7
 800a276:	f005 ffa9 	bl	80101cc <rcl_init>
 800a27a:	4605      	mov	r5, r0
 800a27c:	b960      	cbnz	r0, 800a298 <rclc_support_init_with_options+0x50>
 800a27e:	60a6      	str	r6, [r4, #8]
 800a280:	4632      	mov	r2, r6
 800a282:	f104 010c 	add.w	r1, r4, #12
 800a286:	2003      	movs	r0, #3
 800a288:	f006 fdd2 	bl	8010e30 <rcl_clock_init>
 800a28c:	4605      	mov	r5, r0
 800a28e:	b918      	cbnz	r0, 800a298 <rclc_support_init_with_options+0x50>
 800a290:	4628      	mov	r0, r5
 800a292:	b003      	add	sp, #12
 800a294:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a298:	f000 f8e2 	bl	800a460 <rcutils_reset_error>
 800a29c:	4628      	mov	r0, r5
 800a29e:	b003      	add	sp, #12
 800a2a0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a2a4:	250b      	movs	r5, #11
 800a2a6:	4628      	mov	r0, r5
 800a2a8:	b003      	add	sp, #12
 800a2aa:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a2ae:	bf00      	nop

0800a2b0 <rclc_node_init_default>:
 800a2b0:	b3b8      	cbz	r0, 800a322 <rclc_node_init_default+0x72>
 800a2b2:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800a2b6:	460d      	mov	r5, r1
 800a2b8:	b0a1      	sub	sp, #132	@ 0x84
 800a2ba:	b329      	cbz	r1, 800a308 <rclc_node_init_default+0x58>
 800a2bc:	4616      	mov	r6, r2
 800a2be:	b31a      	cbz	r2, 800a308 <rclc_node_init_default+0x58>
 800a2c0:	461f      	mov	r7, r3
 800a2c2:	b30b      	cbz	r3, 800a308 <rclc_node_init_default+0x58>
 800a2c4:	f10d 0810 	add.w	r8, sp, #16
 800a2c8:	4604      	mov	r4, r0
 800a2ca:	4640      	mov	r0, r8
 800a2cc:	f006 f8a4 	bl	8010418 <rcl_get_zero_initialized_node>
 800a2d0:	e898 0003 	ldmia.w	r8, {r0, r1}
 800a2d4:	f10d 0918 	add.w	r9, sp, #24
 800a2d8:	e884 0003 	stmia.w	r4, {r0, r1}
 800a2dc:	4648      	mov	r0, r9
 800a2de:	f006 fa13 	bl	8010708 <rcl_node_get_default_options>
 800a2e2:	4640      	mov	r0, r8
 800a2e4:	f006 f898 	bl	8010418 <rcl_get_zero_initialized_node>
 800a2e8:	f8cd 9000 	str.w	r9, [sp]
 800a2ec:	e898 0003 	ldmia.w	r8, {r0, r1}
 800a2f0:	463b      	mov	r3, r7
 800a2f2:	e884 0003 	stmia.w	r4, {r0, r1}
 800a2f6:	4632      	mov	r2, r6
 800a2f8:	4629      	mov	r1, r5
 800a2fa:	4620      	mov	r0, r4
 800a2fc:	f006 f896 	bl	801042c <rcl_node_init>
 800a300:	b930      	cbnz	r0, 800a310 <rclc_node_init_default+0x60>
 800a302:	b021      	add	sp, #132	@ 0x84
 800a304:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a308:	200b      	movs	r0, #11
 800a30a:	b021      	add	sp, #132	@ 0x84
 800a30c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a310:	9003      	str	r0, [sp, #12]
 800a312:	f000 f8a5 	bl	800a460 <rcutils_reset_error>
 800a316:	f000 f8a3 	bl	800a460 <rcutils_reset_error>
 800a31a:	9803      	ldr	r0, [sp, #12]
 800a31c:	b021      	add	sp, #132	@ 0x84
 800a31e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a322:	200b      	movs	r0, #11
 800a324:	4770      	bx	lr
 800a326:	bf00      	nop

0800a328 <rclc_subscription_init_default>:
 800a328:	b368      	cbz	r0, 800a386 <rclc_subscription_init_default+0x5e>
 800a32a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a32e:	460d      	mov	r5, r1
 800a330:	b0a0      	sub	sp, #128	@ 0x80
 800a332:	b321      	cbz	r1, 800a37e <rclc_subscription_init_default+0x56>
 800a334:	4616      	mov	r6, r2
 800a336:	b312      	cbz	r2, 800a37e <rclc_subscription_init_default+0x56>
 800a338:	461f      	mov	r7, r3
 800a33a:	b303      	cbz	r3, 800a37e <rclc_subscription_init_default+0x56>
 800a33c:	4604      	mov	r4, r0
 800a33e:	f006 fc1b 	bl	8010b78 <rcl_get_zero_initialized_subscription>
 800a342:	f10d 0810 	add.w	r8, sp, #16
 800a346:	6020      	str	r0, [r4, #0]
 800a348:	4640      	mov	r0, r8
 800a34a:	f006 fcc3 	bl	8010cd4 <rcl_subscription_get_default_options>
 800a34e:	490f      	ldr	r1, [pc, #60]	@ (800a38c <rclc_subscription_init_default+0x64>)
 800a350:	2250      	movs	r2, #80	@ 0x50
 800a352:	4640      	mov	r0, r8
 800a354:	f00b fd43 	bl	8015dde <memcpy>
 800a358:	f8cd 8000 	str.w	r8, [sp]
 800a35c:	463b      	mov	r3, r7
 800a35e:	4632      	mov	r2, r6
 800a360:	4629      	mov	r1, r5
 800a362:	4620      	mov	r0, r4
 800a364:	f006 fc0e 	bl	8010b84 <rcl_subscription_init>
 800a368:	b910      	cbnz	r0, 800a370 <rclc_subscription_init_default+0x48>
 800a36a:	b020      	add	sp, #128	@ 0x80
 800a36c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a370:	9003      	str	r0, [sp, #12]
 800a372:	f000 f875 	bl	800a460 <rcutils_reset_error>
 800a376:	9803      	ldr	r0, [sp, #12]
 800a378:	b020      	add	sp, #128	@ 0x80
 800a37a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a37e:	200b      	movs	r0, #11
 800a380:	b020      	add	sp, #128	@ 0x80
 800a382:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a386:	200b      	movs	r0, #11
 800a388:	4770      	bx	lr
 800a38a:	bf00      	nop
 800a38c:	08016d58 	.word	0x08016d58

0800a390 <__default_zero_allocate>:
 800a390:	f00a bfd0 	b.w	8015334 <calloc>

0800a394 <__default_reallocate>:
 800a394:	f00b b95c 	b.w	8015650 <realloc>

0800a398 <__default_deallocate>:
 800a398:	f00b b838 	b.w	801540c <free>

0800a39c <__default_allocate>:
 800a39c:	f00b b82e 	b.w	80153fc <malloc>

0800a3a0 <rcutils_get_zero_initialized_allocator>:
 800a3a0:	b510      	push	{r4, lr}
 800a3a2:	4c05      	ldr	r4, [pc, #20]	@ (800a3b8 <rcutils_get_zero_initialized_allocator+0x18>)
 800a3a4:	4686      	mov	lr, r0
 800a3a6:	4684      	mov	ip, r0
 800a3a8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800a3aa:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800a3ae:	6823      	ldr	r3, [r4, #0]
 800a3b0:	f8cc 3000 	str.w	r3, [ip]
 800a3b4:	4670      	mov	r0, lr
 800a3b6:	bd10      	pop	{r4, pc}
 800a3b8:	08016da8 	.word	0x08016da8

0800a3bc <rcutils_set_default_allocator>:
 800a3bc:	b1a8      	cbz	r0, 800a3ea <rcutils_set_default_allocator+0x2e>
 800a3be:	6802      	ldr	r2, [r0, #0]
 800a3c0:	b1a2      	cbz	r2, 800a3ec <rcutils_set_default_allocator+0x30>
 800a3c2:	6841      	ldr	r1, [r0, #4]
 800a3c4:	b1a1      	cbz	r1, 800a3f0 <rcutils_set_default_allocator+0x34>
 800a3c6:	b410      	push	{r4}
 800a3c8:	68c4      	ldr	r4, [r0, #12]
 800a3ca:	b164      	cbz	r4, 800a3e6 <rcutils_set_default_allocator+0x2a>
 800a3cc:	6880      	ldr	r0, [r0, #8]
 800a3ce:	b138      	cbz	r0, 800a3e0 <rcutils_set_default_allocator+0x24>
 800a3d0:	4b08      	ldr	r3, [pc, #32]	@ (800a3f4 <rcutils_set_default_allocator+0x38>)
 800a3d2:	601a      	str	r2, [r3, #0]
 800a3d4:	2200      	movs	r2, #0
 800a3d6:	e9c3 4203 	strd	r4, r2, [r3, #12]
 800a3da:	e9c3 1001 	strd	r1, r0, [r3, #4]
 800a3de:	2001      	movs	r0, #1
 800a3e0:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a3e4:	4770      	bx	lr
 800a3e6:	4620      	mov	r0, r4
 800a3e8:	e7fa      	b.n	800a3e0 <rcutils_set_default_allocator+0x24>
 800a3ea:	4770      	bx	lr
 800a3ec:	4610      	mov	r0, r2
 800a3ee:	4770      	bx	lr
 800a3f0:	4608      	mov	r0, r1
 800a3f2:	4770      	bx	lr
 800a3f4:	20000018 	.word	0x20000018

0800a3f8 <rcutils_get_default_allocator>:
 800a3f8:	b510      	push	{r4, lr}
 800a3fa:	4c05      	ldr	r4, [pc, #20]	@ (800a410 <rcutils_get_default_allocator+0x18>)
 800a3fc:	4686      	mov	lr, r0
 800a3fe:	4684      	mov	ip, r0
 800a400:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800a402:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800a406:	6823      	ldr	r3, [r4, #0]
 800a408:	f8cc 3000 	str.w	r3, [ip]
 800a40c:	4670      	mov	r0, lr
 800a40e:	bd10      	pop	{r4, pc}
 800a410:	20000018 	.word	0x20000018

0800a414 <rcutils_allocator_is_valid>:
 800a414:	b158      	cbz	r0, 800a42e <rcutils_allocator_is_valid+0x1a>
 800a416:	6803      	ldr	r3, [r0, #0]
 800a418:	b143      	cbz	r3, 800a42c <rcutils_allocator_is_valid+0x18>
 800a41a:	6843      	ldr	r3, [r0, #4]
 800a41c:	b133      	cbz	r3, 800a42c <rcutils_allocator_is_valid+0x18>
 800a41e:	68c3      	ldr	r3, [r0, #12]
 800a420:	b123      	cbz	r3, 800a42c <rcutils_allocator_is_valid+0x18>
 800a422:	6880      	ldr	r0, [r0, #8]
 800a424:	3800      	subs	r0, #0
 800a426:	bf18      	it	ne
 800a428:	2001      	movne	r0, #1
 800a42a:	4770      	bx	lr
 800a42c:	4618      	mov	r0, r3
 800a42e:	4770      	bx	lr

0800a430 <rcutils_get_error_string>:
 800a430:	4b06      	ldr	r3, [pc, #24]	@ (800a44c <rcutils_get_error_string+0x1c>)
 800a432:	781b      	ldrb	r3, [r3, #0]
 800a434:	b13b      	cbz	r3, 800a446 <rcutils_get_error_string+0x16>
 800a436:	4b06      	ldr	r3, [pc, #24]	@ (800a450 <rcutils_get_error_string+0x20>)
 800a438:	781a      	ldrb	r2, [r3, #0]
 800a43a:	b90a      	cbnz	r2, 800a440 <rcutils_get_error_string+0x10>
 800a43c:	2201      	movs	r2, #1
 800a43e:	701a      	strb	r2, [r3, #0]
 800a440:	4b04      	ldr	r3, [pc, #16]	@ (800a454 <rcutils_get_error_string+0x24>)
 800a442:	7818      	ldrb	r0, [r3, #0]
 800a444:	4770      	bx	lr
 800a446:	4b04      	ldr	r3, [pc, #16]	@ (800a458 <rcutils_get_error_string+0x28>)
 800a448:	7818      	ldrb	r0, [r3, #0]
 800a44a:	4770      	bx	lr
 800a44c:	200091d4 	.word	0x200091d4
 800a450:	200091e9 	.word	0x200091e9
 800a454:	200091e8 	.word	0x200091e8
 800a458:	08016dbc 	.word	0x08016dbc
 800a45c:	00000000 	.word	0x00000000

0800a460 <rcutils_reset_error>:
 800a460:	ed9f 7b07 	vldr	d7, [pc, #28]	@ 800a480 <rcutils_reset_error+0x20>
 800a464:	4a08      	ldr	r2, [pc, #32]	@ (800a488 <rcutils_reset_error+0x28>)
 800a466:	4809      	ldr	r0, [pc, #36]	@ (800a48c <rcutils_reset_error+0x2c>)
 800a468:	4909      	ldr	r1, [pc, #36]	@ (800a490 <rcutils_reset_error+0x30>)
 800a46a:	2300      	movs	r3, #0
 800a46c:	8013      	strh	r3, [r2, #0]
 800a46e:	ed82 7b02 	vstr	d7, [r2, #8]
 800a472:	4a08      	ldr	r2, [pc, #32]	@ (800a494 <rcutils_reset_error+0x34>)
 800a474:	7003      	strb	r3, [r0, #0]
 800a476:	700b      	strb	r3, [r1, #0]
 800a478:	7013      	strb	r3, [r2, #0]
 800a47a:	4770      	bx	lr
 800a47c:	f3af 8000 	nop.w
	...
 800a488:	200091d8 	.word	0x200091d8
 800a48c:	200091e9 	.word	0x200091e9
 800a490:	200091e8 	.word	0x200091e8
 800a494:	200091d4 	.word	0x200091d4

0800a498 <rcutils_system_time_now>:
 800a498:	b308      	cbz	r0, 800a4de <rcutils_system_time_now+0x46>
 800a49a:	b570      	push	{r4, r5, r6, lr}
 800a49c:	b084      	sub	sp, #16
 800a49e:	4604      	mov	r4, r0
 800a4a0:	4669      	mov	r1, sp
 800a4a2:	2001      	movs	r0, #1
 800a4a4:	f7f7 ff34 	bl	8002310 <clock_gettime>
 800a4a8:	e9dd 3500 	ldrd	r3, r5, [sp]
 800a4ac:	2d00      	cmp	r5, #0
 800a4ae:	db13      	blt.n	800a4d8 <rcutils_system_time_now+0x40>
 800a4b0:	9902      	ldr	r1, [sp, #8]
 800a4b2:	2900      	cmp	r1, #0
 800a4b4:	db0d      	blt.n	800a4d2 <rcutils_system_time_now+0x3a>
 800a4b6:	4e0b      	ldr	r6, [pc, #44]	@ (800a4e4 <rcutils_system_time_now+0x4c>)
 800a4b8:	fba3 3206 	umull	r3, r2, r3, r6
 800a4bc:	185b      	adds	r3, r3, r1
 800a4be:	fb06 2205 	mla	r2, r6, r5, r2
 800a4c2:	f04f 0000 	mov.w	r0, #0
 800a4c6:	eb42 72e1 	adc.w	r2, r2, r1, asr #31
 800a4ca:	e9c4 3200 	strd	r3, r2, [r4]
 800a4ce:	b004      	add	sp, #16
 800a4d0:	bd70      	pop	{r4, r5, r6, pc}
 800a4d2:	ea53 0205 	orrs.w	r2, r3, r5
 800a4d6:	d1ee      	bne.n	800a4b6 <rcutils_system_time_now+0x1e>
 800a4d8:	2002      	movs	r0, #2
 800a4da:	b004      	add	sp, #16
 800a4dc:	bd70      	pop	{r4, r5, r6, pc}
 800a4de:	200b      	movs	r0, #11
 800a4e0:	4770      	bx	lr
 800a4e2:	bf00      	nop
 800a4e4:	3b9aca00 	.word	0x3b9aca00

0800a4e8 <rcutils_steady_time_now>:
 800a4e8:	b308      	cbz	r0, 800a52e <rcutils_steady_time_now+0x46>
 800a4ea:	b570      	push	{r4, r5, r6, lr}
 800a4ec:	b084      	sub	sp, #16
 800a4ee:	4604      	mov	r4, r0
 800a4f0:	4669      	mov	r1, sp
 800a4f2:	2000      	movs	r0, #0
 800a4f4:	f7f7 ff0c 	bl	8002310 <clock_gettime>
 800a4f8:	e9dd 3500 	ldrd	r3, r5, [sp]
 800a4fc:	2d00      	cmp	r5, #0
 800a4fe:	db13      	blt.n	800a528 <rcutils_steady_time_now+0x40>
 800a500:	9902      	ldr	r1, [sp, #8]
 800a502:	2900      	cmp	r1, #0
 800a504:	db0d      	blt.n	800a522 <rcutils_steady_time_now+0x3a>
 800a506:	4e0b      	ldr	r6, [pc, #44]	@ (800a534 <rcutils_steady_time_now+0x4c>)
 800a508:	fba3 3206 	umull	r3, r2, r3, r6
 800a50c:	185b      	adds	r3, r3, r1
 800a50e:	fb06 2205 	mla	r2, r6, r5, r2
 800a512:	f04f 0000 	mov.w	r0, #0
 800a516:	eb42 72e1 	adc.w	r2, r2, r1, asr #31
 800a51a:	e9c4 3200 	strd	r3, r2, [r4]
 800a51e:	b004      	add	sp, #16
 800a520:	bd70      	pop	{r4, r5, r6, pc}
 800a522:	ea53 0205 	orrs.w	r2, r3, r5
 800a526:	d1ee      	bne.n	800a506 <rcutils_steady_time_now+0x1e>
 800a528:	2002      	movs	r0, #2
 800a52a:	b004      	add	sp, #16
 800a52c:	bd70      	pop	{r4, r5, r6, pc}
 800a52e:	200b      	movs	r0, #11
 800a530:	4770      	bx	lr
 800a532:	bf00      	nop
 800a534:	3b9aca00 	.word	0x3b9aca00

0800a538 <rmw_get_zero_initialized_init_options>:
 800a538:	b510      	push	{r4, lr}
 800a53a:	2238      	movs	r2, #56	@ 0x38
 800a53c:	4604      	mov	r4, r0
 800a53e:	2100      	movs	r1, #0
 800a540:	f00b fb84 	bl	8015c4c <memset>
 800a544:	f104 0010 	add.w	r0, r4, #16
 800a548:	f000 f806 	bl	800a558 <rmw_get_default_security_options>
 800a54c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800a550:	60e3      	str	r3, [r4, #12]
 800a552:	4620      	mov	r0, r4
 800a554:	bd10      	pop	{r4, pc}
 800a556:	bf00      	nop

0800a558 <rmw_get_default_security_options>:
 800a558:	2200      	movs	r2, #0
 800a55a:	7002      	strb	r2, [r0, #0]
 800a55c:	6042      	str	r2, [r0, #4]
 800a55e:	4770      	bx	lr

0800a560 <rmw_uros_set_custom_transport>:
 800a560:	b470      	push	{r4, r5, r6}
 800a562:	e9dd 5603 	ldrd	r5, r6, [sp, #12]
 800a566:	b162      	cbz	r2, 800a582 <rmw_uros_set_custom_transport+0x22>
 800a568:	b15b      	cbz	r3, 800a582 <rmw_uros_set_custom_transport+0x22>
 800a56a:	b155      	cbz	r5, 800a582 <rmw_uros_set_custom_transport+0x22>
 800a56c:	b14e      	cbz	r6, 800a582 <rmw_uros_set_custom_transport+0x22>
 800a56e:	4c06      	ldr	r4, [pc, #24]	@ (800a588 <rmw_uros_set_custom_transport+0x28>)
 800a570:	7020      	strb	r0, [r4, #0]
 800a572:	e9c4 1201 	strd	r1, r2, [r4, #4]
 800a576:	e9c4 3503 	strd	r3, r5, [r4, #12]
 800a57a:	6166      	str	r6, [r4, #20]
 800a57c:	2000      	movs	r0, #0
 800a57e:	bc70      	pop	{r4, r5, r6}
 800a580:	4770      	bx	lr
 800a582:	200b      	movs	r0, #11
 800a584:	bc70      	pop	{r4, r5, r6}
 800a586:	4770      	bx	lr
 800a588:	200091ec 	.word	0x200091ec

0800a58c <rmw_init_options_init>:
 800a58c:	b084      	sub	sp, #16
 800a58e:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a590:	b083      	sub	sp, #12
 800a592:	ad09      	add	r5, sp, #36	@ 0x24
 800a594:	e885 000e 	stmia.w	r5, {r1, r2, r3}
 800a598:	b130      	cbz	r0, 800a5a8 <rmw_init_options_init+0x1c>
 800a59a:	4604      	mov	r4, r0
 800a59c:	4628      	mov	r0, r5
 800a59e:	f7ff ff39 	bl	800a414 <rcutils_allocator_is_valid>
 800a5a2:	b108      	cbz	r0, 800a5a8 <rmw_init_options_init+0x1c>
 800a5a4:	68a6      	ldr	r6, [r4, #8]
 800a5a6:	b12e      	cbz	r6, 800a5b4 <rmw_init_options_init+0x28>
 800a5a8:	200b      	movs	r0, #11
 800a5aa:	b003      	add	sp, #12
 800a5ac:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 800a5b0:	b004      	add	sp, #16
 800a5b2:	4770      	bx	lr
 800a5b4:	2200      	movs	r2, #0
 800a5b6:	2300      	movs	r3, #0
 800a5b8:	e9c4 2300 	strd	r2, r3, [r4]
 800a5bc:	4b22      	ldr	r3, [pc, #136]	@ (800a648 <rmw_init_options_init+0xbc>)
 800a5be:	f8df e098 	ldr.w	lr, [pc, #152]	@ 800a658 <rmw_init_options_init+0xcc>
 800a5c2:	681b      	ldr	r3, [r3, #0]
 800a5c4:	60a3      	str	r3, [r4, #8]
 800a5c6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800a5c8:	f104 0c20 	add.w	ip, r4, #32
 800a5cc:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800a5d0:	466f      	mov	r7, sp
 800a5d2:	682b      	ldr	r3, [r5, #0]
 800a5d4:	f8cc 3000 	str.w	r3, [ip]
 800a5d8:	4638      	mov	r0, r7
 800a5da:	f8c4 e01c 	str.w	lr, [r4, #28]
 800a5de:	60e6      	str	r6, [r4, #12]
 800a5e0:	f7ff ffba 	bl	800a558 <rmw_get_default_security_options>
 800a5e4:	e897 0003 	ldmia.w	r7, {r0, r1}
 800a5e8:	f104 0310 	add.w	r3, r4, #16
 800a5ec:	e883 0003 	stmia.w	r3, {r0, r1}
 800a5f0:	2203      	movs	r2, #3
 800a5f2:	4816      	ldr	r0, [pc, #88]	@ (800a64c <rmw_init_options_init+0xc0>)
 800a5f4:	4916      	ldr	r1, [pc, #88]	@ (800a650 <rmw_init_options_init+0xc4>)
 800a5f6:	7626      	strb	r6, [r4, #24]
 800a5f8:	f000 fe3c 	bl	800b274 <rmw_uxrce_init_init_options_impl_memory>
 800a5fc:	4813      	ldr	r0, [pc, #76]	@ (800a64c <rmw_init_options_init+0xc0>)
 800a5fe:	f008 ff93 	bl	8013528 <get_memory>
 800a602:	b1f0      	cbz	r0, 800a642 <rmw_init_options_init+0xb6>
 800a604:	4a13      	ldr	r2, [pc, #76]	@ (800a654 <rmw_init_options_init+0xc8>)
 800a606:	6883      	ldr	r3, [r0, #8]
 800a608:	6851      	ldr	r1, [r2, #4]
 800a60a:	7810      	ldrb	r0, [r2, #0]
 800a60c:	6363      	str	r3, [r4, #52]	@ 0x34
 800a60e:	7418      	strb	r0, [r3, #16]
 800a610:	6159      	str	r1, [r3, #20]
 800a612:	68d1      	ldr	r1, [r2, #12]
 800a614:	61d9      	str	r1, [r3, #28]
 800a616:	6911      	ldr	r1, [r2, #16]
 800a618:	6219      	str	r1, [r3, #32]
 800a61a:	6951      	ldr	r1, [r2, #20]
 800a61c:	6892      	ldr	r2, [r2, #8]
 800a61e:	619a      	str	r2, [r3, #24]
 800a620:	6259      	str	r1, [r3, #36]	@ 0x24
 800a622:	f004 fcf7 	bl	800f014 <uxr_nanos>
 800a626:	f00a ffa7 	bl	8015578 <srand>
 800a62a:	f00a ffd3 	bl	80155d4 <rand>
 800a62e:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800a630:	6298      	str	r0, [r3, #40]	@ 0x28
 800a632:	2800      	cmp	r0, #0
 800a634:	d0f9      	beq.n	800a62a <rmw_init_options_init+0x9e>
 800a636:	2000      	movs	r0, #0
 800a638:	b003      	add	sp, #12
 800a63a:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 800a63e:	b004      	add	sp, #16
 800a640:	4770      	bx	lr
 800a642:	2001      	movs	r0, #1
 800a644:	e7b1      	b.n	800a5aa <rmw_init_options_init+0x1e>
 800a646:	bf00      	nop
 800a648:	0801780c 	.word	0x0801780c
 800a64c:	2000db04 	.word	0x2000db04
 800a650:	200093a0 	.word	0x200093a0
 800a654:	200091ec 	.word	0x200091ec
 800a658:	08016dc0 	.word	0x08016dc0

0800a65c <rmw_init_options_copy>:
 800a65c:	b570      	push	{r4, r5, r6, lr}
 800a65e:	b158      	cbz	r0, 800a678 <rmw_init_options_copy+0x1c>
 800a660:	460d      	mov	r5, r1
 800a662:	b149      	cbz	r1, 800a678 <rmw_init_options_copy+0x1c>
 800a664:	4604      	mov	r4, r0
 800a666:	6880      	ldr	r0, [r0, #8]
 800a668:	b120      	cbz	r0, 800a674 <rmw_init_options_copy+0x18>
 800a66a:	4b1e      	ldr	r3, [pc, #120]	@ (800a6e4 <rmw_init_options_copy+0x88>)
 800a66c:	6819      	ldr	r1, [r3, #0]
 800a66e:	f7f5 fdb7 	bl	80001e0 <strcmp>
 800a672:	bb90      	cbnz	r0, 800a6da <rmw_init_options_copy+0x7e>
 800a674:	68ab      	ldr	r3, [r5, #8]
 800a676:	b113      	cbz	r3, 800a67e <rmw_init_options_copy+0x22>
 800a678:	250b      	movs	r5, #11
 800a67a:	4628      	mov	r0, r5
 800a67c:	bd70      	pop	{r4, r5, r6, pc}
 800a67e:	4623      	mov	r3, r4
 800a680:	462a      	mov	r2, r5
 800a682:	f104 0630 	add.w	r6, r4, #48	@ 0x30
 800a686:	f8d3 c000 	ldr.w	ip, [r3]
 800a68a:	6858      	ldr	r0, [r3, #4]
 800a68c:	6899      	ldr	r1, [r3, #8]
 800a68e:	f8d3 e00c 	ldr.w	lr, [r3, #12]
 800a692:	f8c2 e00c 	str.w	lr, [r2, #12]
 800a696:	3310      	adds	r3, #16
 800a698:	42b3      	cmp	r3, r6
 800a69a:	f8c2 c000 	str.w	ip, [r2]
 800a69e:	6050      	str	r0, [r2, #4]
 800a6a0:	6091      	str	r1, [r2, #8]
 800a6a2:	f102 0210 	add.w	r2, r2, #16
 800a6a6:	d1ee      	bne.n	800a686 <rmw_init_options_copy+0x2a>
 800a6a8:	6819      	ldr	r1, [r3, #0]
 800a6aa:	685b      	ldr	r3, [r3, #4]
 800a6ac:	480e      	ldr	r0, [pc, #56]	@ (800a6e8 <rmw_init_options_copy+0x8c>)
 800a6ae:	6053      	str	r3, [r2, #4]
 800a6b0:	6011      	str	r1, [r2, #0]
 800a6b2:	f008 ff39 	bl	8013528 <get_memory>
 800a6b6:	b198      	cbz	r0, 800a6e0 <rmw_init_options_copy+0x84>
 800a6b8:	6883      	ldr	r3, [r0, #8]
 800a6ba:	636b      	str	r3, [r5, #52]	@ 0x34
 800a6bc:	6b62      	ldr	r2, [r4, #52]	@ 0x34
 800a6be:	f102 0c10 	add.w	ip, r2, #16
 800a6c2:	f103 0410 	add.w	r4, r3, #16
 800a6c6:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800a6ca:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800a6cc:	e89c 0007 	ldmia.w	ip, {r0, r1, r2}
 800a6d0:	2500      	movs	r5, #0
 800a6d2:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800a6d6:	4628      	mov	r0, r5
 800a6d8:	bd70      	pop	{r4, r5, r6, pc}
 800a6da:	250c      	movs	r5, #12
 800a6dc:	4628      	mov	r0, r5
 800a6de:	bd70      	pop	{r4, r5, r6, pc}
 800a6e0:	2501      	movs	r5, #1
 800a6e2:	e7ca      	b.n	800a67a <rmw_init_options_copy+0x1e>
 800a6e4:	0801780c 	.word	0x0801780c
 800a6e8:	2000db04 	.word	0x2000db04

0800a6ec <rmw_init_options_fini>:
 800a6ec:	2800      	cmp	r0, #0
 800a6ee:	d03d      	beq.n	800a76c <rmw_init_options_fini+0x80>
 800a6f0:	b510      	push	{r4, lr}
 800a6f2:	4604      	mov	r4, r0
 800a6f4:	b08e      	sub	sp, #56	@ 0x38
 800a6f6:	3020      	adds	r0, #32
 800a6f8:	f7ff fe8c 	bl	800a414 <rcutils_allocator_is_valid>
 800a6fc:	b360      	cbz	r0, 800a758 <rmw_init_options_fini+0x6c>
 800a6fe:	68a0      	ldr	r0, [r4, #8]
 800a700:	b120      	cbz	r0, 800a70c <rmw_init_options_fini+0x20>
 800a702:	4b1c      	ldr	r3, [pc, #112]	@ (800a774 <rmw_init_options_fini+0x88>)
 800a704:	6819      	ldr	r1, [r3, #0]
 800a706:	f7f5 fd6b 	bl	80001e0 <strcmp>
 800a70a:	bb68      	cbnz	r0, 800a768 <rmw_init_options_fini+0x7c>
 800a70c:	4b1a      	ldr	r3, [pc, #104]	@ (800a778 <rmw_init_options_fini+0x8c>)
 800a70e:	6819      	ldr	r1, [r3, #0]
 800a710:	b331      	cbz	r1, 800a760 <rmw_init_options_fini+0x74>
 800a712:	6b62      	ldr	r2, [r4, #52]	@ 0x34
 800a714:	e001      	b.n	800a71a <rmw_init_options_fini+0x2e>
 800a716:	6849      	ldr	r1, [r1, #4]
 800a718:	b311      	cbz	r1, 800a760 <rmw_init_options_fini+0x74>
 800a71a:	688b      	ldr	r3, [r1, #8]
 800a71c:	429a      	cmp	r2, r3
 800a71e:	d1fa      	bne.n	800a716 <rmw_init_options_fini+0x2a>
 800a720:	4815      	ldr	r0, [pc, #84]	@ (800a778 <rmw_init_options_fini+0x8c>)
 800a722:	f008 ff11 	bl	8013548 <put_memory>
 800a726:	4668      	mov	r0, sp
 800a728:	f7ff ff06 	bl	800a538 <rmw_get_zero_initialized_init_options>
 800a72c:	46ee      	mov	lr, sp
 800a72e:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800a732:	46a4      	mov	ip, r4
 800a734:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800a738:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800a73c:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800a740:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800a744:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800a748:	e89e 0003 	ldmia.w	lr, {r0, r1}
 800a74c:	e88c 0003 	stmia.w	ip, {r0, r1}
 800a750:	2300      	movs	r3, #0
 800a752:	4618      	mov	r0, r3
 800a754:	b00e      	add	sp, #56	@ 0x38
 800a756:	bd10      	pop	{r4, pc}
 800a758:	230b      	movs	r3, #11
 800a75a:	4618      	mov	r0, r3
 800a75c:	b00e      	add	sp, #56	@ 0x38
 800a75e:	bd10      	pop	{r4, pc}
 800a760:	2301      	movs	r3, #1
 800a762:	4618      	mov	r0, r3
 800a764:	b00e      	add	sp, #56	@ 0x38
 800a766:	bd10      	pop	{r4, pc}
 800a768:	230c      	movs	r3, #12
 800a76a:	e7f2      	b.n	800a752 <rmw_init_options_fini+0x66>
 800a76c:	230b      	movs	r3, #11
 800a76e:	4618      	mov	r0, r3
 800a770:	4770      	bx	lr
 800a772:	bf00      	nop
 800a774:	0801780c 	.word	0x0801780c
 800a778:	2000db04 	.word	0x2000db04

0800a77c <rmw_init>:
 800a77c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800a780:	b083      	sub	sp, #12
 800a782:	2800      	cmp	r0, #0
 800a784:	f000 80d3 	beq.w	800a92e <rmw_init+0x1b2>
 800a788:	460e      	mov	r6, r1
 800a78a:	2900      	cmp	r1, #0
 800a78c:	f000 80cf 	beq.w	800a92e <rmw_init+0x1b2>
 800a790:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 800a792:	4605      	mov	r5, r0
 800a794:	2b00      	cmp	r3, #0
 800a796:	f000 80ca 	beq.w	800a92e <rmw_init+0x1b2>
 800a79a:	4b78      	ldr	r3, [pc, #480]	@ (800a97c <rmw_init+0x200>)
 800a79c:	6880      	ldr	r0, [r0, #8]
 800a79e:	681f      	ldr	r7, [r3, #0]
 800a7a0:	b128      	cbz	r0, 800a7ae <rmw_init+0x32>
 800a7a2:	4639      	mov	r1, r7
 800a7a4:	f7f5 fd1c 	bl	80001e0 <strcmp>
 800a7a8:	2800      	cmp	r0, #0
 800a7aa:	f040 80ca 	bne.w	800a942 <rmw_init+0x1c6>
 800a7ae:	e9d5 2300 	ldrd	r2, r3, [r5]
 800a7b2:	4c73      	ldr	r4, [pc, #460]	@ (800a980 <rmw_init+0x204>)
 800a7b4:	4973      	ldr	r1, [pc, #460]	@ (800a984 <rmw_init+0x208>)
 800a7b6:	4874      	ldr	r0, [pc, #464]	@ (800a988 <rmw_init+0x20c>)
 800a7b8:	60b7      	str	r7, [r6, #8]
 800a7ba:	e9c6 2300 	strd	r2, r3, [r6]
 800a7be:	68eb      	ldr	r3, [r5, #12]
 800a7c0:	64b3      	str	r3, [r6, #72]	@ 0x48
 800a7c2:	2201      	movs	r2, #1
 800a7c4:	f000 fcf6 	bl	800b1b4 <rmw_uxrce_init_session_memory>
 800a7c8:	4620      	mov	r0, r4
 800a7ca:	4970      	ldr	r1, [pc, #448]	@ (800a98c <rmw_init+0x210>)
 800a7cc:	2204      	movs	r2, #4
 800a7ce:	f000 fd31 	bl	800b234 <rmw_uxrce_init_static_input_buffer_memory>
 800a7d2:	f04f 0800 	mov.w	r8, #0
 800a7d6:	486c      	ldr	r0, [pc, #432]	@ (800a988 <rmw_init+0x20c>)
 800a7d8:	f884 800d 	strb.w	r8, [r4, #13]
 800a7dc:	f008 fea4 	bl	8013528 <get_memory>
 800a7e0:	2800      	cmp	r0, #0
 800a7e2:	f000 80a9 	beq.w	800a938 <rmw_init+0x1bc>
 800a7e6:	6884      	ldr	r4, [r0, #8]
 800a7e8:	6b68      	ldr	r0, [r5, #52]	@ 0x34
 800a7ea:	6a41      	ldr	r1, [r0, #36]	@ 0x24
 800a7ec:	f890 c010 	ldrb.w	ip, [r0, #16]
 800a7f0:	e9d0 2306 	ldrd	r2, r3, [r0, #24]
 800a7f4:	9101      	str	r1, [sp, #4]
 800a7f6:	6a00      	ldr	r0, [r0, #32]
 800a7f8:	9000      	str	r0, [sp, #0]
 800a7fa:	f104 0910 	add.w	r9, r4, #16
 800a7fe:	4661      	mov	r1, ip
 800a800:	4648      	mov	r0, r9
 800a802:	f002 fba3 	bl	800cf4c <uxr_set_custom_transport_callbacks>
 800a806:	f504 5380 	add.w	r3, r4, #4096	@ 0x1000
 800a80a:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800a80e:	e9c4 22e3 	strd	r2, r2, [r4, #908]	@ 0x38c
 800a812:	f504 725e 	add.w	r2, r4, #888	@ 0x378
 800a816:	e9c4 22e1 	strd	r2, r2, [r4, #900]	@ 0x384
 800a81a:	495d      	ldr	r1, [pc, #372]	@ (800a990 <rmw_init+0x214>)
 800a81c:	f8c3 8594 	str.w	r8, [r3, #1428]	@ 0x594
 800a820:	f8c3 8598 	str.w	r8, [r3, #1432]	@ 0x598
 800a824:	f8c3 859c 	str.w	r8, [r3, #1436]	@ 0x59c
 800a828:	f8c3 85a0 	str.w	r8, [r3, #1440]	@ 0x5a0
 800a82c:	4859      	ldr	r0, [pc, #356]	@ (800a994 <rmw_init+0x218>)
 800a82e:	e9c4 78da 	strd	r7, r8, [r4, #872]	@ 0x368
 800a832:	2201      	movs	r2, #1
 800a834:	64f4      	str	r4, [r6, #76]	@ 0x4c
 800a836:	f000 fc9d 	bl	800b174 <rmw_uxrce_init_node_memory>
 800a83a:	4957      	ldr	r1, [pc, #348]	@ (800a998 <rmw_init+0x21c>)
 800a83c:	4857      	ldr	r0, [pc, #348]	@ (800a99c <rmw_init+0x220>)
 800a83e:	2205      	movs	r2, #5
 800a840:	f000 fc78 	bl	800b134 <rmw_uxrce_init_subscription_memory>
 800a844:	4956      	ldr	r1, [pc, #344]	@ (800a9a0 <rmw_init+0x224>)
 800a846:	4857      	ldr	r0, [pc, #348]	@ (800a9a4 <rmw_init+0x228>)
 800a848:	220a      	movs	r2, #10
 800a84a:	f000 fc53 	bl	800b0f4 <rmw_uxrce_init_publisher_memory>
 800a84e:	4956      	ldr	r1, [pc, #344]	@ (800a9a8 <rmw_init+0x22c>)
 800a850:	4856      	ldr	r0, [pc, #344]	@ (800a9ac <rmw_init+0x230>)
 800a852:	2201      	movs	r2, #1
 800a854:	f000 fc0e 	bl	800b074 <rmw_uxrce_init_service_memory>
 800a858:	4955      	ldr	r1, [pc, #340]	@ (800a9b0 <rmw_init+0x234>)
 800a85a:	4856      	ldr	r0, [pc, #344]	@ (800a9b4 <rmw_init+0x238>)
 800a85c:	2201      	movs	r2, #1
 800a85e:	f000 fc29 	bl	800b0b4 <rmw_uxrce_init_client_memory>
 800a862:	4955      	ldr	r1, [pc, #340]	@ (800a9b8 <rmw_init+0x23c>)
 800a864:	4855      	ldr	r0, [pc, #340]	@ (800a9bc <rmw_init+0x240>)
 800a866:	220f      	movs	r2, #15
 800a868:	f000 fcc4 	bl	800b1f4 <rmw_uxrce_init_topic_memory>
 800a86c:	4954      	ldr	r1, [pc, #336]	@ (800a9c0 <rmw_init+0x244>)
 800a86e:	4855      	ldr	r0, [pc, #340]	@ (800a9c4 <rmw_init+0x248>)
 800a870:	2203      	movs	r2, #3
 800a872:	f000 fcff 	bl	800b274 <rmw_uxrce_init_init_options_impl_memory>
 800a876:	4954      	ldr	r1, [pc, #336]	@ (800a9c8 <rmw_init+0x24c>)
 800a878:	4854      	ldr	r0, [pc, #336]	@ (800a9cc <rmw_init+0x250>)
 800a87a:	2204      	movs	r2, #4
 800a87c:	f000 fd1a 	bl	800b2b4 <rmw_uxrce_init_wait_set_memory>
 800a880:	4953      	ldr	r1, [pc, #332]	@ (800a9d0 <rmw_init+0x254>)
 800a882:	4854      	ldr	r0, [pc, #336]	@ (800a9d4 <rmw_init+0x258>)
 800a884:	2204      	movs	r2, #4
 800a886:	f000 fd35 	bl	800b2f4 <rmw_uxrce_init_guard_condition_memory>
 800a88a:	6b69      	ldr	r1, [r5, #52]	@ 0x34
 800a88c:	6cf0      	ldr	r0, [r6, #76]	@ 0x4c
 800a88e:	4642      	mov	r2, r8
 800a890:	f000 fbd8 	bl	800b044 <rmw_uxrce_transport_init>
 800a894:	4607      	mov	r7, r0
 800a896:	2800      	cmp	r0, #0
 800a898:	d158      	bne.n	800a94c <rmw_init+0x1d0>
 800a89a:	6b6b      	ldr	r3, [r5, #52]	@ 0x34
 800a89c:	f504 7528 	add.w	r5, r4, #672	@ 0x2a0
 800a8a0:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800a8a2:	f504 7122 	add.w	r1, r4, #648	@ 0x288
 800a8a6:	4628      	mov	r0, r5
 800a8a8:	f002 fd86 	bl	800d3b8 <uxr_init_session>
 800a8ac:	494a      	ldr	r1, [pc, #296]	@ (800a9d8 <rmw_init+0x25c>)
 800a8ae:	4622      	mov	r2, r4
 800a8b0:	4628      	mov	r0, r5
 800a8b2:	f002 fda5 	bl	800d400 <uxr_set_topic_callback>
 800a8b6:	4949      	ldr	r1, [pc, #292]	@ (800a9dc <rmw_init+0x260>)
 800a8b8:	463a      	mov	r2, r7
 800a8ba:	4628      	mov	r0, r5
 800a8bc:	f002 fd9c 	bl	800d3f8 <uxr_set_status_callback>
 800a8c0:	4947      	ldr	r1, [pc, #284]	@ (800a9e0 <rmw_init+0x264>)
 800a8c2:	463a      	mov	r2, r7
 800a8c4:	4628      	mov	r0, r5
 800a8c6:	f002 fd9f 	bl	800d408 <uxr_set_request_callback>
 800a8ca:	4946      	ldr	r1, [pc, #280]	@ (800a9e4 <rmw_init+0x268>)
 800a8cc:	463a      	mov	r2, r7
 800a8ce:	4628      	mov	r0, r5
 800a8d0:	f002 fd9e 	bl	800d410 <uxr_set_reply_callback>
 800a8d4:	f8b4 2298 	ldrh.w	r2, [r4, #664]	@ 0x298
 800a8d8:	2304      	movs	r3, #4
 800a8da:	0092      	lsls	r2, r2, #2
 800a8dc:	f504 7165 	add.w	r1, r4, #916	@ 0x394
 800a8e0:	4628      	mov	r0, r5
 800a8e2:	f002 fdd3 	bl	800d48c <uxr_create_input_reliable_stream>
 800a8e6:	f8b4 2298 	ldrh.w	r2, [r4, #664]	@ 0x298
 800a8ea:	f8c4 0374 	str.w	r0, [r4, #884]	@ 0x374
 800a8ee:	0092      	lsls	r2, r2, #2
 800a8f0:	2304      	movs	r3, #4
 800a8f2:	f604 3194 	addw	r1, r4, #2964	@ 0xb94
 800a8f6:	4628      	mov	r0, r5
 800a8f8:	f002 fda0 	bl	800d43c <uxr_create_output_reliable_stream>
 800a8fc:	f8c4 0378 	str.w	r0, [r4, #888]	@ 0x378
 800a900:	4628      	mov	r0, r5
 800a902:	f002 fdbd 	bl	800d480 <uxr_create_input_best_effort_stream>
 800a906:	f504 519c 	add.w	r1, r4, #4992	@ 0x1380
 800a90a:	f8c4 0380 	str.w	r0, [r4, #896]	@ 0x380
 800a90e:	f8b4 2298 	ldrh.w	r2, [r4, #664]	@ 0x298
 800a912:	3114      	adds	r1, #20
 800a914:	4628      	mov	r0, r5
 800a916:	f002 fd7f 	bl	800d418 <uxr_create_output_best_effort_stream>
 800a91a:	f8c4 037c 	str.w	r0, [r4, #892]	@ 0x37c
 800a91e:	4628      	mov	r0, r5
 800a920:	f003 fb0a 	bl	800df38 <uxr_create_session>
 800a924:	b1f8      	cbz	r0, 800a966 <rmw_init+0x1ea>
 800a926:	4638      	mov	r0, r7
 800a928:	b003      	add	sp, #12
 800a92a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a92e:	270b      	movs	r7, #11
 800a930:	4638      	mov	r0, r7
 800a932:	b003      	add	sp, #12
 800a934:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a938:	2701      	movs	r7, #1
 800a93a:	4638      	mov	r0, r7
 800a93c:	b003      	add	sp, #12
 800a93e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a942:	270c      	movs	r7, #12
 800a944:	4638      	mov	r0, r7
 800a946:	b003      	add	sp, #12
 800a948:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a94c:	4648      	mov	r0, r9
 800a94e:	f002 fb3f 	bl	800cfd0 <uxr_close_custom_transport>
 800a952:	480d      	ldr	r0, [pc, #52]	@ (800a988 <rmw_init+0x20c>)
 800a954:	4621      	mov	r1, r4
 800a956:	f008 fdf7 	bl	8013548 <put_memory>
 800a95a:	4638      	mov	r0, r7
 800a95c:	f8c6 804c 	str.w	r8, [r6, #76]	@ 0x4c
 800a960:	b003      	add	sp, #12
 800a962:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a966:	4648      	mov	r0, r9
 800a968:	f002 fb32 	bl	800cfd0 <uxr_close_custom_transport>
 800a96c:	4806      	ldr	r0, [pc, #24]	@ (800a988 <rmw_init+0x20c>)
 800a96e:	4621      	mov	r1, r4
 800a970:	f008 fdea 	bl	8013548 <put_memory>
 800a974:	64f7      	str	r7, [r6, #76]	@ 0x4c
 800a976:	2701      	movs	r7, #1
 800a978:	e7d5      	b.n	800a926 <rmw_init+0x1aa>
 800a97a:	bf00      	nop
 800a97c:	0801780c 	.word	0x0801780c
 800a980:	2000db54 	.word	0x2000db54
 800a984:	20009e00 	.word	0x20009e00
 800a988:	2000db44 	.word	0x2000db44
 800a98c:	2000b3a8 	.word	0x2000b3a8
 800a990:	20009424 	.word	0x20009424
 800a994:	2000db14 	.word	0x2000db14
 800a998:	2000d4a8 	.word	0x2000d4a8
 800a99c:	2000db64 	.word	0x2000db64
 800a9a0:	200094c8 	.word	0x200094c8
 800a9a4:	2000db24 	.word	0x2000db24
 800a9a8:	20009d38 	.word	0x20009d38
 800a9ac:	2000db34 	.word	0x2000db34
 800a9b0:	20009258 	.word	0x20009258
 800a9b4:	20009244 	.word	0x20009244
 800a9b8:	2000d8e0 	.word	0x2000d8e0
 800a9bc:	2000db74 	.word	0x2000db74
 800a9c0:	200093a0 	.word	0x200093a0
 800a9c4:	2000db04 	.word	0x2000db04
 800a9c8:	2000da84 	.word	0x2000da84
 800a9cc:	2000db84 	.word	0x2000db84
 800a9d0:	20009320 	.word	0x20009320
 800a9d4:	2000daf4 	.word	0x2000daf4
 800a9d8:	08013361 	.word	0x08013361
 800a9dc:	08013359 	.word	0x08013359
 800a9e0:	080133f9 	.word	0x080133f9
 800a9e4:	08013495 	.word	0x08013495

0800a9e8 <rmw_context_fini>:
 800a9e8:	4b17      	ldr	r3, [pc, #92]	@ (800aa48 <rmw_context_fini+0x60>)
 800a9ea:	6cc1      	ldr	r1, [r0, #76]	@ 0x4c
 800a9ec:	b570      	push	{r4, r5, r6, lr}
 800a9ee:	681c      	ldr	r4, [r3, #0]
 800a9f0:	4605      	mov	r5, r0
 800a9f2:	b334      	cbz	r4, 800aa42 <rmw_context_fini+0x5a>
 800a9f4:	2600      	movs	r6, #0
 800a9f6:	e9d4 4001 	ldrd	r4, r0, [r4, #4]
 800a9fa:	6902      	ldr	r2, [r0, #16]
 800a9fc:	428a      	cmp	r2, r1
 800a9fe:	d018      	beq.n	800aa32 <rmw_context_fini+0x4a>
 800aa00:	2c00      	cmp	r4, #0
 800aa02:	d1f8      	bne.n	800a9f6 <rmw_context_fini+0xe>
 800aa04:	b189      	cbz	r1, 800aa2a <rmw_context_fini+0x42>
 800aa06:	f8d1 3388 	ldr.w	r3, [r1, #904]	@ 0x388
 800aa0a:	789b      	ldrb	r3, [r3, #2]
 800aa0c:	2b01      	cmp	r3, #1
 800aa0e:	f501 7028 	add.w	r0, r1, #672	@ 0x2a0
 800aa12:	bf14      	ite	ne
 800aa14:	210a      	movne	r1, #10
 800aa16:	2100      	moveq	r1, #0
 800aa18:	f003 fa66 	bl	800dee8 <uxr_delete_session_retries>
 800aa1c:	6ce8      	ldr	r0, [r5, #76]	@ 0x4c
 800aa1e:	f000 fc89 	bl	800b334 <rmw_uxrce_fini_session_memory>
 800aa22:	6ce8      	ldr	r0, [r5, #76]	@ 0x4c
 800aa24:	3010      	adds	r0, #16
 800aa26:	f002 fad3 	bl	800cfd0 <uxr_close_custom_transport>
 800aa2a:	2300      	movs	r3, #0
 800aa2c:	64eb      	str	r3, [r5, #76]	@ 0x4c
 800aa2e:	4630      	mov	r0, r6
 800aa30:	bd70      	pop	{r4, r5, r6, pc}
 800aa32:	3018      	adds	r0, #24
 800aa34:	f000 f89c 	bl	800ab70 <rmw_destroy_node>
 800aa38:	6ce9      	ldr	r1, [r5, #76]	@ 0x4c
 800aa3a:	4606      	mov	r6, r0
 800aa3c:	2c00      	cmp	r4, #0
 800aa3e:	d1da      	bne.n	800a9f6 <rmw_context_fini+0xe>
 800aa40:	e7e0      	b.n	800aa04 <rmw_context_fini+0x1c>
 800aa42:	4626      	mov	r6, r4
 800aa44:	e7de      	b.n	800aa04 <rmw_context_fini+0x1c>
 800aa46:	bf00      	nop
 800aa48:	2000db14 	.word	0x2000db14

0800aa4c <create_node>:
 800aa4c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800aa50:	b083      	sub	sp, #12
 800aa52:	2b00      	cmp	r3, #0
 800aa54:	d05f      	beq.n	800ab16 <create_node+0xca>
 800aa56:	4606      	mov	r6, r0
 800aa58:	4835      	ldr	r0, [pc, #212]	@ (800ab30 <create_node+0xe4>)
 800aa5a:	460f      	mov	r7, r1
 800aa5c:	4690      	mov	r8, r2
 800aa5e:	461d      	mov	r5, r3
 800aa60:	f008 fd62 	bl	8013528 <get_memory>
 800aa64:	2800      	cmp	r0, #0
 800aa66:	d056      	beq.n	800ab16 <create_node+0xca>
 800aa68:	6884      	ldr	r4, [r0, #8]
 800aa6a:	6ceb      	ldr	r3, [r5, #76]	@ 0x4c
 800aa6c:	6123      	str	r3, [r4, #16]
 800aa6e:	f008 fdc3 	bl	80135f8 <rmw_get_implementation_identifier>
 800aa72:	f104 092c 	add.w	r9, r4, #44	@ 0x2c
 800aa76:	e9c4 0406 	strd	r0, r4, [r4, #24]
 800aa7a:	f8c4 9020 	str.w	r9, [r4, #32]
 800aa7e:	4630      	mov	r0, r6
 800aa80:	f7f5 fbb8 	bl	80001f4 <strlen>
 800aa84:	1c42      	adds	r2, r0, #1
 800aa86:	2a3c      	cmp	r2, #60	@ 0x3c
 800aa88:	f104 0518 	add.w	r5, r4, #24
 800aa8c:	d840      	bhi.n	800ab10 <create_node+0xc4>
 800aa8e:	4648      	mov	r0, r9
 800aa90:	4631      	mov	r1, r6
 800aa92:	f104 0968 	add.w	r9, r4, #104	@ 0x68
 800aa96:	f00b f9a2 	bl	8015dde <memcpy>
 800aa9a:	f8c4 9024 	str.w	r9, [r4, #36]	@ 0x24
 800aa9e:	4638      	mov	r0, r7
 800aaa0:	f7f5 fba8 	bl	80001f4 <strlen>
 800aaa4:	1c42      	adds	r2, r0, #1
 800aaa6:	2a3c      	cmp	r2, #60	@ 0x3c
 800aaa8:	d832      	bhi.n	800ab10 <create_node+0xc4>
 800aaaa:	4639      	mov	r1, r7
 800aaac:	4648      	mov	r0, r9
 800aaae:	f00b f996 	bl	8015dde <memcpy>
 800aab2:	6923      	ldr	r3, [r4, #16]
 800aab4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800aab8:	2101      	movs	r1, #1
 800aaba:	f8b3 0594 	ldrh.w	r0, [r3, #1428]	@ 0x594
 800aabe:	1842      	adds	r2, r0, r1
 800aac0:	f8a3 2594 	strh.w	r2, [r3, #1428]	@ 0x594
 800aac4:	f002 fa88 	bl	800cfd8 <uxr_object_id>
 800aac8:	6160      	str	r0, [r4, #20]
 800aaca:	783b      	ldrb	r3, [r7, #0]
 800aacc:	2b2f      	cmp	r3, #47	@ 0x2f
 800aace:	d127      	bne.n	800ab20 <create_node+0xd4>
 800aad0:	787b      	ldrb	r3, [r7, #1]
 800aad2:	bb2b      	cbnz	r3, 800ab20 <create_node+0xd4>
 800aad4:	4a17      	ldr	r2, [pc, #92]	@ (800ab34 <create_node+0xe8>)
 800aad6:	4818      	ldr	r0, [pc, #96]	@ (800ab38 <create_node+0xec>)
 800aad8:	4633      	mov	r3, r6
 800aada:	213c      	movs	r1, #60	@ 0x3c
 800aadc:	f00a ffdc 	bl	8015a98 <sniprintf>
 800aae0:	6920      	ldr	r0, [r4, #16]
 800aae2:	4915      	ldr	r1, [pc, #84]	@ (800ab38 <create_node+0xec>)
 800aae4:	f8d0 2384 	ldr.w	r2, [r0, #900]	@ 0x384
 800aae8:	9100      	str	r1, [sp, #0]
 800aaea:	2106      	movs	r1, #6
 800aaec:	9101      	str	r1, [sp, #4]
 800aaee:	6811      	ldr	r1, [r2, #0]
 800aaf0:	6962      	ldr	r2, [r4, #20]
 800aaf2:	fa1f f388 	uxth.w	r3, r8
 800aaf6:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800aafa:	f002 f89b 	bl	800cc34 <uxr_buffer_create_participant_bin>
 800aafe:	4602      	mov	r2, r0
 800ab00:	6920      	ldr	r0, [r4, #16]
 800ab02:	f8d0 338c 	ldr.w	r3, [r0, #908]	@ 0x38c
 800ab06:	f8d0 1384 	ldr.w	r1, [r0, #900]	@ 0x384
 800ab0a:	f000 fd8b 	bl	800b624 <run_xrce_session>
 800ab0e:	b918      	cbnz	r0, 800ab18 <create_node+0xcc>
 800ab10:	4628      	mov	r0, r5
 800ab12:	f000 fc15 	bl	800b340 <rmw_uxrce_fini_node_memory>
 800ab16:	2500      	movs	r5, #0
 800ab18:	4628      	mov	r0, r5
 800ab1a:	b003      	add	sp, #12
 800ab1c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800ab20:	4a06      	ldr	r2, [pc, #24]	@ (800ab3c <create_node+0xf0>)
 800ab22:	9600      	str	r6, [sp, #0]
 800ab24:	463b      	mov	r3, r7
 800ab26:	213c      	movs	r1, #60	@ 0x3c
 800ab28:	4803      	ldr	r0, [pc, #12]	@ (800ab38 <create_node+0xec>)
 800ab2a:	f00a ffb5 	bl	8015a98 <sniprintf>
 800ab2e:	e7d7      	b.n	800aae0 <create_node+0x94>
 800ab30:	2000db14 	.word	0x2000db14
 800ab34:	08016e00 	.word	0x08016e00
 800ab38:	20009208 	.word	0x20009208
 800ab3c:	08016dc4 	.word	0x08016dc4

0800ab40 <rmw_create_node>:
 800ab40:	b199      	cbz	r1, 800ab6a <rmw_create_node+0x2a>
 800ab42:	780b      	ldrb	r3, [r1, #0]
 800ab44:	468c      	mov	ip, r1
 800ab46:	b183      	cbz	r3, 800ab6a <rmw_create_node+0x2a>
 800ab48:	b410      	push	{r4}
 800ab4a:	4614      	mov	r4, r2
 800ab4c:	b14a      	cbz	r2, 800ab62 <rmw_create_node+0x22>
 800ab4e:	7813      	ldrb	r3, [r2, #0]
 800ab50:	b13b      	cbz	r3, 800ab62 <rmw_create_node+0x22>
 800ab52:	6c82      	ldr	r2, [r0, #72]	@ 0x48
 800ab54:	4603      	mov	r3, r0
 800ab56:	4621      	mov	r1, r4
 800ab58:	4660      	mov	r0, ip
 800ab5a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ab5e:	f7ff bf75 	b.w	800aa4c <create_node>
 800ab62:	2000      	movs	r0, #0
 800ab64:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ab68:	4770      	bx	lr
 800ab6a:	2000      	movs	r0, #0
 800ab6c:	4770      	bx	lr
 800ab6e:	bf00      	nop

0800ab70 <rmw_destroy_node>:
 800ab70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ab72:	b328      	cbz	r0, 800abc0 <rmw_destroy_node+0x50>
 800ab74:	4607      	mov	r7, r0
 800ab76:	6800      	ldr	r0, [r0, #0]
 800ab78:	b120      	cbz	r0, 800ab84 <rmw_destroy_node+0x14>
 800ab7a:	4b36      	ldr	r3, [pc, #216]	@ (800ac54 <rmw_destroy_node+0xe4>)
 800ab7c:	6819      	ldr	r1, [r3, #0]
 800ab7e:	f7f5 fb2f 	bl	80001e0 <strcmp>
 800ab82:	b9e8      	cbnz	r0, 800abc0 <rmw_destroy_node+0x50>
 800ab84:	687d      	ldr	r5, [r7, #4]
 800ab86:	b1dd      	cbz	r5, 800abc0 <rmw_destroy_node+0x50>
 800ab88:	4b33      	ldr	r3, [pc, #204]	@ (800ac58 <rmw_destroy_node+0xe8>)
 800ab8a:	681c      	ldr	r4, [r3, #0]
 800ab8c:	2c00      	cmp	r4, #0
 800ab8e:	d05f      	beq.n	800ac50 <rmw_destroy_node+0xe0>
 800ab90:	2600      	movs	r6, #0
 800ab92:	e9d4 4101 	ldrd	r4, r1, [r4, #4]
 800ab96:	f8d1 3080 	ldr.w	r3, [r1, #128]	@ 0x80
 800ab9a:	429d      	cmp	r5, r3
 800ab9c:	d013      	beq.n	800abc6 <rmw_destroy_node+0x56>
 800ab9e:	2c00      	cmp	r4, #0
 800aba0:	d1f7      	bne.n	800ab92 <rmw_destroy_node+0x22>
 800aba2:	4b2e      	ldr	r3, [pc, #184]	@ (800ac5c <rmw_destroy_node+0xec>)
 800aba4:	681c      	ldr	r4, [r3, #0]
 800aba6:	b1c4      	cbz	r4, 800abda <rmw_destroy_node+0x6a>
 800aba8:	e9d4 4101 	ldrd	r4, r1, [r4, #4]
 800abac:	6a0b      	ldr	r3, [r1, #32]
 800abae:	429d      	cmp	r5, r3
 800abb0:	d1f9      	bne.n	800aba6 <rmw_destroy_node+0x36>
 800abb2:	317c      	adds	r1, #124	@ 0x7c
 800abb4:	4638      	mov	r0, r7
 800abb6:	f000 f9e5 	bl	800af84 <rmw_destroy_subscription>
 800abba:	2801      	cmp	r0, #1
 800abbc:	4606      	mov	r6, r0
 800abbe:	d1f2      	bne.n	800aba6 <rmw_destroy_node+0x36>
 800abc0:	2601      	movs	r6, #1
 800abc2:	4630      	mov	r0, r6
 800abc4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800abc6:	3184      	adds	r1, #132	@ 0x84
 800abc8:	4638      	mov	r0, r7
 800abca:	f000 f853 	bl	800ac74 <rmw_destroy_publisher>
 800abce:	2801      	cmp	r0, #1
 800abd0:	4606      	mov	r6, r0
 800abd2:	d0f5      	beq.n	800abc0 <rmw_destroy_node+0x50>
 800abd4:	2c00      	cmp	r4, #0
 800abd6:	d1dc      	bne.n	800ab92 <rmw_destroy_node+0x22>
 800abd8:	e7e3      	b.n	800aba2 <rmw_destroy_node+0x32>
 800abda:	4b21      	ldr	r3, [pc, #132]	@ (800ac60 <rmw_destroy_node+0xf0>)
 800abdc:	681c      	ldr	r4, [r3, #0]
 800abde:	b16c      	cbz	r4, 800abfc <rmw_destroy_node+0x8c>
 800abe0:	e9d4 4101 	ldrd	r4, r1, [r4, #4]
 800abe4:	6f8b      	ldr	r3, [r1, #120]	@ 0x78
 800abe6:	429d      	cmp	r5, r3
 800abe8:	d1f9      	bne.n	800abde <rmw_destroy_node+0x6e>
 800abea:	317c      	adds	r1, #124	@ 0x7c
 800abec:	4638      	mov	r0, r7
 800abee:	f000 f893 	bl	800ad18 <rmw_destroy_service>
 800abf2:	2801      	cmp	r0, #1
 800abf4:	4606      	mov	r6, r0
 800abf6:	d0e3      	beq.n	800abc0 <rmw_destroy_node+0x50>
 800abf8:	2c00      	cmp	r4, #0
 800abfa:	d1f1      	bne.n	800abe0 <rmw_destroy_node+0x70>
 800abfc:	4b19      	ldr	r3, [pc, #100]	@ (800ac64 <rmw_destroy_node+0xf4>)
 800abfe:	681c      	ldr	r4, [r3, #0]
 800ac00:	b16c      	cbz	r4, 800ac1e <rmw_destroy_node+0xae>
 800ac02:	e9d4 4101 	ldrd	r4, r1, [r4, #4]
 800ac06:	6f8b      	ldr	r3, [r1, #120]	@ 0x78
 800ac08:	429d      	cmp	r5, r3
 800ac0a:	d1f9      	bne.n	800ac00 <rmw_destroy_node+0x90>
 800ac0c:	317c      	adds	r1, #124	@ 0x7c
 800ac0e:	4638      	mov	r0, r7
 800ac10:	f008 fcae 	bl	8013570 <rmw_destroy_client>
 800ac14:	2801      	cmp	r0, #1
 800ac16:	4606      	mov	r6, r0
 800ac18:	d0d2      	beq.n	800abc0 <rmw_destroy_node+0x50>
 800ac1a:	2c00      	cmp	r4, #0
 800ac1c:	d1f1      	bne.n	800ac02 <rmw_destroy_node+0x92>
 800ac1e:	6928      	ldr	r0, [r5, #16]
 800ac20:	696a      	ldr	r2, [r5, #20]
 800ac22:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 800ac26:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800ac2a:	6819      	ldr	r1, [r3, #0]
 800ac2c:	f001 ffb6 	bl	800cb9c <uxr_buffer_delete_entity>
 800ac30:	4602      	mov	r2, r0
 800ac32:	6928      	ldr	r0, [r5, #16]
 800ac34:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 800ac38:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 800ac3c:	f000 fcf2 	bl	800b624 <run_xrce_session>
 800ac40:	2800      	cmp	r0, #0
 800ac42:	bf08      	it	eq
 800ac44:	2602      	moveq	r6, #2
 800ac46:	4638      	mov	r0, r7
 800ac48:	f000 fb7a 	bl	800b340 <rmw_uxrce_fini_node_memory>
 800ac4c:	4630      	mov	r0, r6
 800ac4e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ac50:	4626      	mov	r6, r4
 800ac52:	e7a6      	b.n	800aba2 <rmw_destroy_node+0x32>
 800ac54:	0801780c 	.word	0x0801780c
 800ac58:	2000db24 	.word	0x2000db24
 800ac5c:	2000db64 	.word	0x2000db64
 800ac60:	2000db34 	.word	0x2000db34
 800ac64:	20009244 	.word	0x20009244

0800ac68 <rmw_node_get_graph_guard_condition>:
 800ac68:	6843      	ldr	r3, [r0, #4]
 800ac6a:	6918      	ldr	r0, [r3, #16]
 800ac6c:	f500 705a 	add.w	r0, r0, #872	@ 0x368
 800ac70:	4770      	bx	lr
 800ac72:	bf00      	nop

0800ac74 <rmw_destroy_publisher>:
 800ac74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ac76:	b128      	cbz	r0, 800ac84 <rmw_destroy_publisher+0x10>
 800ac78:	4604      	mov	r4, r0
 800ac7a:	6800      	ldr	r0, [r0, #0]
 800ac7c:	460d      	mov	r5, r1
 800ac7e:	f000 fd51 	bl	800b724 <is_uxrce_rmw_identifier_valid>
 800ac82:	b910      	cbnz	r0, 800ac8a <rmw_destroy_publisher+0x16>
 800ac84:	2401      	movs	r4, #1
 800ac86:	4620      	mov	r0, r4
 800ac88:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ac8a:	6863      	ldr	r3, [r4, #4]
 800ac8c:	2b00      	cmp	r3, #0
 800ac8e:	d0f9      	beq.n	800ac84 <rmw_destroy_publisher+0x10>
 800ac90:	2d00      	cmp	r5, #0
 800ac92:	d0f7      	beq.n	800ac84 <rmw_destroy_publisher+0x10>
 800ac94:	6828      	ldr	r0, [r5, #0]
 800ac96:	f000 fd45 	bl	800b724 <is_uxrce_rmw_identifier_valid>
 800ac9a:	2800      	cmp	r0, #0
 800ac9c:	d0f2      	beq.n	800ac84 <rmw_destroy_publisher+0x10>
 800ac9e:	686c      	ldr	r4, [r5, #4]
 800aca0:	2c00      	cmp	r4, #0
 800aca2:	d0ef      	beq.n	800ac84 <rmw_destroy_publisher+0x10>
 800aca4:	6a60      	ldr	r0, [r4, #36]	@ 0x24
 800aca6:	f8d4 7080 	ldr.w	r7, [r4, #128]	@ 0x80
 800acaa:	f008 fcfb 	bl	80136a4 <destroy_topic>
 800acae:	f8d4 3080 	ldr.w	r3, [r4, #128]	@ 0x80
 800acb2:	6962      	ldr	r2, [r4, #20]
 800acb4:	6918      	ldr	r0, [r3, #16]
 800acb6:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 800acba:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800acbe:	6819      	ldr	r1, [r3, #0]
 800acc0:	f001 ff6c 	bl	800cb9c <uxr_buffer_delete_entity>
 800acc4:	f8d4 3080 	ldr.w	r3, [r4, #128]	@ 0x80
 800acc8:	6922      	ldr	r2, [r4, #16]
 800acca:	691b      	ldr	r3, [r3, #16]
 800accc:	f8d3 1388 	ldr.w	r1, [r3, #904]	@ 0x388
 800acd0:	4604      	mov	r4, r0
 800acd2:	6809      	ldr	r1, [r1, #0]
 800acd4:	f503 7028 	add.w	r0, r3, #672	@ 0x2a0
 800acd8:	f001 ff60 	bl	800cb9c <uxr_buffer_delete_entity>
 800acdc:	693e      	ldr	r6, [r7, #16]
 800acde:	4622      	mov	r2, r4
 800ace0:	f8d6 3390 	ldr.w	r3, [r6, #912]	@ 0x390
 800ace4:	f8d6 1388 	ldr.w	r1, [r6, #904]	@ 0x388
 800ace8:	4604      	mov	r4, r0
 800acea:	4630      	mov	r0, r6
 800acec:	f000 fc9a 	bl	800b624 <run_xrce_session>
 800acf0:	693e      	ldr	r6, [r7, #16]
 800acf2:	4622      	mov	r2, r4
 800acf4:	f8d6 3390 	ldr.w	r3, [r6, #912]	@ 0x390
 800acf8:	f8d6 1388 	ldr.w	r1, [r6, #904]	@ 0x388
 800acfc:	4604      	mov	r4, r0
 800acfe:	4630      	mov	r0, r6
 800ad00:	f000 fc90 	bl	800b624 <run_xrce_session>
 800ad04:	b12c      	cbz	r4, 800ad12 <rmw_destroy_publisher+0x9e>
 800ad06:	b120      	cbz	r0, 800ad12 <rmw_destroy_publisher+0x9e>
 800ad08:	2400      	movs	r4, #0
 800ad0a:	4628      	mov	r0, r5
 800ad0c:	f000 fb30 	bl	800b370 <rmw_uxrce_fini_publisher_memory>
 800ad10:	e7b9      	b.n	800ac86 <rmw_destroy_publisher+0x12>
 800ad12:	2402      	movs	r4, #2
 800ad14:	e7f9      	b.n	800ad0a <rmw_destroy_publisher+0x96>
 800ad16:	bf00      	nop

0800ad18 <rmw_destroy_service>:
 800ad18:	b570      	push	{r4, r5, r6, lr}
 800ad1a:	b128      	cbz	r0, 800ad28 <rmw_destroy_service+0x10>
 800ad1c:	4604      	mov	r4, r0
 800ad1e:	6800      	ldr	r0, [r0, #0]
 800ad20:	460d      	mov	r5, r1
 800ad22:	f000 fcff 	bl	800b724 <is_uxrce_rmw_identifier_valid>
 800ad26:	b910      	cbnz	r0, 800ad2e <rmw_destroy_service+0x16>
 800ad28:	2401      	movs	r4, #1
 800ad2a:	4620      	mov	r0, r4
 800ad2c:	bd70      	pop	{r4, r5, r6, pc}
 800ad2e:	6863      	ldr	r3, [r4, #4]
 800ad30:	2b00      	cmp	r3, #0
 800ad32:	d0f9      	beq.n	800ad28 <rmw_destroy_service+0x10>
 800ad34:	2d00      	cmp	r5, #0
 800ad36:	d0f7      	beq.n	800ad28 <rmw_destroy_service+0x10>
 800ad38:	6828      	ldr	r0, [r5, #0]
 800ad3a:	f000 fcf3 	bl	800b724 <is_uxrce_rmw_identifier_valid>
 800ad3e:	2800      	cmp	r0, #0
 800ad40:	d0f2      	beq.n	800ad28 <rmw_destroy_service+0x10>
 800ad42:	686e      	ldr	r6, [r5, #4]
 800ad44:	2e00      	cmp	r6, #0
 800ad46:	d0ef      	beq.n	800ad28 <rmw_destroy_service+0x10>
 800ad48:	6864      	ldr	r4, [r4, #4]
 800ad4a:	6932      	ldr	r2, [r6, #16]
 800ad4c:	6920      	ldr	r0, [r4, #16]
 800ad4e:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 800ad52:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800ad56:	6819      	ldr	r1, [r3, #0]
 800ad58:	f002 f9a8 	bl	800d0ac <uxr_buffer_cancel_data>
 800ad5c:	4602      	mov	r2, r0
 800ad5e:	6920      	ldr	r0, [r4, #16]
 800ad60:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 800ad64:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 800ad68:	f000 fc5c 	bl	800b624 <run_xrce_session>
 800ad6c:	6920      	ldr	r0, [r4, #16]
 800ad6e:	6932      	ldr	r2, [r6, #16]
 800ad70:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 800ad74:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800ad78:	6819      	ldr	r1, [r3, #0]
 800ad7a:	f001 ff0f 	bl	800cb9c <uxr_buffer_delete_entity>
 800ad7e:	4602      	mov	r2, r0
 800ad80:	6920      	ldr	r0, [r4, #16]
 800ad82:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 800ad86:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 800ad8a:	f000 fc4b 	bl	800b624 <run_xrce_session>
 800ad8e:	2800      	cmp	r0, #0
 800ad90:	4628      	mov	r0, r5
 800ad92:	bf14      	ite	ne
 800ad94:	2400      	movne	r4, #0
 800ad96:	2402      	moveq	r4, #2
 800ad98:	f000 fb16 	bl	800b3c8 <rmw_uxrce_fini_service_memory>
 800ad9c:	e7c5      	b.n	800ad2a <rmw_destroy_service+0x12>
 800ad9e:	bf00      	nop

0800ada0 <rmw_create_subscription>:
 800ada0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ada4:	b08d      	sub	sp, #52	@ 0x34
 800ada6:	2800      	cmp	r0, #0
 800ada8:	f000 80d1 	beq.w	800af4e <rmw_create_subscription+0x1ae>
 800adac:	460e      	mov	r6, r1
 800adae:	2900      	cmp	r1, #0
 800adb0:	f000 80cd 	beq.w	800af4e <rmw_create_subscription+0x1ae>
 800adb4:	4604      	mov	r4, r0
 800adb6:	6800      	ldr	r0, [r0, #0]
 800adb8:	4615      	mov	r5, r2
 800adba:	4698      	mov	r8, r3
 800adbc:	f000 fcb2 	bl	800b724 <is_uxrce_rmw_identifier_valid>
 800adc0:	2800      	cmp	r0, #0
 800adc2:	f000 80c4 	beq.w	800af4e <rmw_create_subscription+0x1ae>
 800adc6:	2d00      	cmp	r5, #0
 800adc8:	f000 80c1 	beq.w	800af4e <rmw_create_subscription+0x1ae>
 800adcc:	782b      	ldrb	r3, [r5, #0]
 800adce:	2b00      	cmp	r3, #0
 800add0:	f000 80bd 	beq.w	800af4e <rmw_create_subscription+0x1ae>
 800add4:	f1b8 0f00 	cmp.w	r8, #0
 800add8:	f000 80b9 	beq.w	800af4e <rmw_create_subscription+0x1ae>
 800addc:	485e      	ldr	r0, [pc, #376]	@ (800af58 <rmw_create_subscription+0x1b8>)
 800adde:	f8d4 9004 	ldr.w	r9, [r4, #4]
 800ade2:	f008 fba1 	bl	8013528 <get_memory>
 800ade6:	4604      	mov	r4, r0
 800ade8:	2800      	cmp	r0, #0
 800adea:	f000 80b1 	beq.w	800af50 <rmw_create_subscription+0x1b0>
 800adee:	6887      	ldr	r7, [r0, #8]
 800adf0:	f8c7 7080 	str.w	r7, [r7, #128]	@ 0x80
 800adf4:	f008 fc00 	bl	80135f8 <rmw_get_implementation_identifier>
 800adf8:	f107 0a98 	add.w	sl, r7, #152	@ 0x98
 800adfc:	67f8      	str	r0, [r7, #124]	@ 0x7c
 800adfe:	f8c7 a084 	str.w	sl, [r7, #132]	@ 0x84
 800ae02:	4628      	mov	r0, r5
 800ae04:	f7f5 f9f6 	bl	80001f4 <strlen>
 800ae08:	3001      	adds	r0, #1
 800ae0a:	283c      	cmp	r0, #60	@ 0x3c
 800ae0c:	f107 047c 	add.w	r4, r7, #124	@ 0x7c
 800ae10:	f200 8096 	bhi.w	800af40 <rmw_create_subscription+0x1a0>
 800ae14:	4a51      	ldr	r2, [pc, #324]	@ (800af5c <rmw_create_subscription+0x1bc>)
 800ae16:	462b      	mov	r3, r5
 800ae18:	213c      	movs	r1, #60	@ 0x3c
 800ae1a:	4650      	mov	r0, sl
 800ae1c:	f00a fe3c 	bl	8015a98 <sniprintf>
 800ae20:	4641      	mov	r1, r8
 800ae22:	f8c7 9020 	str.w	r9, [r7, #32]
 800ae26:	2250      	movs	r2, #80	@ 0x50
 800ae28:	f107 0028 	add.w	r0, r7, #40	@ 0x28
 800ae2c:	f00a ffd7 	bl	8015dde <memcpy>
 800ae30:	494b      	ldr	r1, [pc, #300]	@ (800af60 <rmw_create_subscription+0x1c0>)
 800ae32:	4630      	mov	r0, r6
 800ae34:	f000 fc84 	bl	800b740 <get_message_typesupport_handle>
 800ae38:	2800      	cmp	r0, #0
 800ae3a:	f000 8081 	beq.w	800af40 <rmw_create_subscription+0x1a0>
 800ae3e:	6842      	ldr	r2, [r0, #4]
 800ae40:	61ba      	str	r2, [r7, #24]
 800ae42:	2a00      	cmp	r2, #0
 800ae44:	d07c      	beq.n	800af40 <rmw_create_subscription+0x1a0>
 800ae46:	4629      	mov	r1, r5
 800ae48:	4643      	mov	r3, r8
 800ae4a:	4648      	mov	r0, r9
 800ae4c:	f008 fbda 	bl	8013604 <create_topic>
 800ae50:	61f8      	str	r0, [r7, #28]
 800ae52:	2800      	cmp	r0, #0
 800ae54:	d078      	beq.n	800af48 <rmw_create_subscription+0x1a8>
 800ae56:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800ae5a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800ae5e:	2104      	movs	r1, #4
 800ae60:	f8b3 059c 	ldrh.w	r0, [r3, #1436]	@ 0x59c
 800ae64:	1c42      	adds	r2, r0, #1
 800ae66:	f8a3 259c 	strh.w	r2, [r3, #1436]	@ 0x59c
 800ae6a:	f002 f8b5 	bl	800cfd8 <uxr_object_id>
 800ae6e:	6138      	str	r0, [r7, #16]
 800ae70:	f8d9 0010 	ldr.w	r0, [r9, #16]
 800ae74:	2506      	movs	r5, #6
 800ae76:	f8d0 3384 	ldr.w	r3, [r0, #900]	@ 0x384
 800ae7a:	9500      	str	r5, [sp, #0]
 800ae7c:	6819      	ldr	r1, [r3, #0]
 800ae7e:	693a      	ldr	r2, [r7, #16]
 800ae80:	f8d9 3014 	ldr.w	r3, [r9, #20]
 800ae84:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800ae88:	f001 ff3c 	bl	800cd04 <uxr_buffer_create_subscriber_bin>
 800ae8c:	4602      	mov	r2, r0
 800ae8e:	f8d9 0010 	ldr.w	r0, [r9, #16]
 800ae92:	f8d0 338c 	ldr.w	r3, [r0, #908]	@ 0x38c
 800ae96:	f8d0 1384 	ldr.w	r1, [r0, #900]	@ 0x384
 800ae9a:	f000 fbc3 	bl	800b624 <run_xrce_session>
 800ae9e:	2800      	cmp	r0, #0
 800aea0:	d04e      	beq.n	800af40 <rmw_create_subscription+0x1a0>
 800aea2:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800aea6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800aeaa:	4629      	mov	r1, r5
 800aeac:	f8b3 059e 	ldrh.w	r0, [r3, #1438]	@ 0x59e
 800aeb0:	1c42      	adds	r2, r0, #1
 800aeb2:	f8a3 259e 	strh.w	r2, [r3, #1438]	@ 0x59e
 800aeb6:	f002 f88f 	bl	800cfd8 <uxr_object_id>
 800aeba:	ae08      	add	r6, sp, #32
 800aebc:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800aec0:	69fb      	ldr	r3, [r7, #28]
 800aec2:	6178      	str	r0, [r7, #20]
 800aec4:	4641      	mov	r1, r8
 800aec6:	4630      	mov	r0, r6
 800aec8:	f8da b384 	ldr.w	fp, [sl, #900]	@ 0x384
 800aecc:	9305      	str	r3, [sp, #20]
 800aece:	f000 fbc5 	bl	800b65c <convert_qos_profile>
 800aed2:	9503      	str	r5, [sp, #12]
 800aed4:	e896 0003 	ldmia.w	r6, {r0, r1}
 800aed8:	9b05      	ldr	r3, [sp, #20]
 800aeda:	9001      	str	r0, [sp, #4]
 800aedc:	f8ad 1008 	strh.w	r1, [sp, #8]
 800aee0:	691b      	ldr	r3, [r3, #16]
 800aee2:	9300      	str	r3, [sp, #0]
 800aee4:	e9d7 3204 	ldrd	r3, r2, [r7, #16]
 800aee8:	f8db 1000 	ldr.w	r1, [fp]
 800aeec:	f50a 7028 	add.w	r0, sl, #672	@ 0x2a0
 800aef0:	f001 ff38 	bl	800cd64 <uxr_buffer_create_datareader_bin>
 800aef4:	4602      	mov	r2, r0
 800aef6:	f8d9 0010 	ldr.w	r0, [r9, #16]
 800aefa:	f8d0 338c 	ldr.w	r3, [r0, #908]	@ 0x38c
 800aefe:	f8d0 1384 	ldr.w	r1, [r0, #900]	@ 0x384
 800af02:	f000 fb8f 	bl	800b624 <run_xrce_session>
 800af06:	b1d8      	cbz	r0, 800af40 <rmw_create_subscription+0x1a0>
 800af08:	f898 3008 	ldrb.w	r3, [r8, #8]
 800af0c:	f8d9 0010 	ldr.w	r0, [r9, #16]
 800af10:	2b02      	cmp	r3, #2
 800af12:	bf0c      	ite	eq
 800af14:	f8d0 3380 	ldreq.w	r3, [r0, #896]	@ 0x380
 800af18:	f8d0 3374 	ldrne.w	r3, [r0, #884]	@ 0x374
 800af1c:	9307      	str	r3, [sp, #28]
 800af1e:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 800af22:	2200      	movs	r2, #0
 800af24:	e9cd 120a 	strd	r1, r2, [sp, #40]	@ 0x28
 800af28:	ab0a      	add	r3, sp, #40	@ 0x28
 800af2a:	f8d0 1384 	ldr.w	r1, [r0, #900]	@ 0x384
 800af2e:	9300      	str	r3, [sp, #0]
 800af30:	697a      	ldr	r2, [r7, #20]
 800af32:	9b07      	ldr	r3, [sp, #28]
 800af34:	6809      	ldr	r1, [r1, #0]
 800af36:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800af3a:	f002 f87d 	bl	800d038 <uxr_buffer_request_data>
 800af3e:	e007      	b.n	800af50 <rmw_create_subscription+0x1b0>
 800af40:	69f8      	ldr	r0, [r7, #28]
 800af42:	b108      	cbz	r0, 800af48 <rmw_create_subscription+0x1a8>
 800af44:	f000 fa6c 	bl	800b420 <rmw_uxrce_fini_topic_memory>
 800af48:	4620      	mov	r0, r4
 800af4a:	f000 fa27 	bl	800b39c <rmw_uxrce_fini_subscription_memory>
 800af4e:	2400      	movs	r4, #0
 800af50:	4620      	mov	r0, r4
 800af52:	b00d      	add	sp, #52	@ 0x34
 800af54:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800af58:	2000db64 	.word	0x2000db64
 800af5c:	08016e00 	.word	0x08016e00
 800af60:	08016dcc 	.word	0x08016dcc

0800af64 <rmw_subscription_get_actual_qos>:
 800af64:	b150      	cbz	r0, 800af7c <rmw_subscription_get_actual_qos+0x18>
 800af66:	b508      	push	{r3, lr}
 800af68:	460b      	mov	r3, r1
 800af6a:	b149      	cbz	r1, 800af80 <rmw_subscription_get_actual_qos+0x1c>
 800af6c:	6841      	ldr	r1, [r0, #4]
 800af6e:	2250      	movs	r2, #80	@ 0x50
 800af70:	3128      	adds	r1, #40	@ 0x28
 800af72:	4618      	mov	r0, r3
 800af74:	f00a ff33 	bl	8015dde <memcpy>
 800af78:	2000      	movs	r0, #0
 800af7a:	bd08      	pop	{r3, pc}
 800af7c:	200b      	movs	r0, #11
 800af7e:	4770      	bx	lr
 800af80:	200b      	movs	r0, #11
 800af82:	bd08      	pop	{r3, pc}

0800af84 <rmw_destroy_subscription>:
 800af84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800af86:	b128      	cbz	r0, 800af94 <rmw_destroy_subscription+0x10>
 800af88:	4604      	mov	r4, r0
 800af8a:	6800      	ldr	r0, [r0, #0]
 800af8c:	460d      	mov	r5, r1
 800af8e:	f000 fbc9 	bl	800b724 <is_uxrce_rmw_identifier_valid>
 800af92:	b910      	cbnz	r0, 800af9a <rmw_destroy_subscription+0x16>
 800af94:	2401      	movs	r4, #1
 800af96:	4620      	mov	r0, r4
 800af98:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800af9a:	6863      	ldr	r3, [r4, #4]
 800af9c:	2b00      	cmp	r3, #0
 800af9e:	d0f9      	beq.n	800af94 <rmw_destroy_subscription+0x10>
 800afa0:	2d00      	cmp	r5, #0
 800afa2:	d0f7      	beq.n	800af94 <rmw_destroy_subscription+0x10>
 800afa4:	6828      	ldr	r0, [r5, #0]
 800afa6:	f000 fbbd 	bl	800b724 <is_uxrce_rmw_identifier_valid>
 800afaa:	2800      	cmp	r0, #0
 800afac:	d0f2      	beq.n	800af94 <rmw_destroy_subscription+0x10>
 800afae:	686c      	ldr	r4, [r5, #4]
 800afb0:	2c00      	cmp	r4, #0
 800afb2:	d0ef      	beq.n	800af94 <rmw_destroy_subscription+0x10>
 800afb4:	6a26      	ldr	r6, [r4, #32]
 800afb6:	6962      	ldr	r2, [r4, #20]
 800afb8:	6930      	ldr	r0, [r6, #16]
 800afba:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 800afbe:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800afc2:	6819      	ldr	r1, [r3, #0]
 800afc4:	f002 f872 	bl	800d0ac <uxr_buffer_cancel_data>
 800afc8:	4602      	mov	r2, r0
 800afca:	6930      	ldr	r0, [r6, #16]
 800afcc:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 800afd0:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 800afd4:	f000 fb26 	bl	800b624 <run_xrce_session>
 800afd8:	69e0      	ldr	r0, [r4, #28]
 800afda:	f008 fb63 	bl	80136a4 <destroy_topic>
 800afde:	6a23      	ldr	r3, [r4, #32]
 800afe0:	6962      	ldr	r2, [r4, #20]
 800afe2:	6918      	ldr	r0, [r3, #16]
 800afe4:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 800afe8:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800afec:	6819      	ldr	r1, [r3, #0]
 800afee:	f001 fdd5 	bl	800cb9c <uxr_buffer_delete_entity>
 800aff2:	6a23      	ldr	r3, [r4, #32]
 800aff4:	6922      	ldr	r2, [r4, #16]
 800aff6:	691b      	ldr	r3, [r3, #16]
 800aff8:	f8d3 1388 	ldr.w	r1, [r3, #904]	@ 0x388
 800affc:	4604      	mov	r4, r0
 800affe:	6809      	ldr	r1, [r1, #0]
 800b000:	f503 7028 	add.w	r0, r3, #672	@ 0x2a0
 800b004:	f001 fdca 	bl	800cb9c <uxr_buffer_delete_entity>
 800b008:	6937      	ldr	r7, [r6, #16]
 800b00a:	4622      	mov	r2, r4
 800b00c:	f8d7 3390 	ldr.w	r3, [r7, #912]	@ 0x390
 800b010:	f8d7 1388 	ldr.w	r1, [r7, #904]	@ 0x388
 800b014:	4604      	mov	r4, r0
 800b016:	4638      	mov	r0, r7
 800b018:	f000 fb04 	bl	800b624 <run_xrce_session>
 800b01c:	6936      	ldr	r6, [r6, #16]
 800b01e:	4622      	mov	r2, r4
 800b020:	f8d6 3390 	ldr.w	r3, [r6, #912]	@ 0x390
 800b024:	f8d6 1388 	ldr.w	r1, [r6, #904]	@ 0x388
 800b028:	4604      	mov	r4, r0
 800b02a:	4630      	mov	r0, r6
 800b02c:	f000 fafa 	bl	800b624 <run_xrce_session>
 800b030:	b12c      	cbz	r4, 800b03e <rmw_destroy_subscription+0xba>
 800b032:	b120      	cbz	r0, 800b03e <rmw_destroy_subscription+0xba>
 800b034:	2400      	movs	r4, #0
 800b036:	4628      	mov	r0, r5
 800b038:	f000 f9b0 	bl	800b39c <rmw_uxrce_fini_subscription_memory>
 800b03c:	e7ab      	b.n	800af96 <rmw_destroy_subscription+0x12>
 800b03e:	2402      	movs	r4, #2
 800b040:	e7f9      	b.n	800b036 <rmw_destroy_subscription+0xb2>
 800b042:	bf00      	nop

0800b044 <rmw_uxrce_transport_init>:
 800b044:	b508      	push	{r3, lr}
 800b046:	b108      	cbz	r0, 800b04c <rmw_uxrce_transport_init+0x8>
 800b048:	f100 0210 	add.w	r2, r0, #16
 800b04c:	b139      	cbz	r1, 800b05e <rmw_uxrce_transport_init+0x1a>
 800b04e:	6949      	ldr	r1, [r1, #20]
 800b050:	4610      	mov	r0, r2
 800b052:	f001 ff89 	bl	800cf68 <uxr_init_custom_transport>
 800b056:	f080 0001 	eor.w	r0, r0, #1
 800b05a:	b2c0      	uxtb	r0, r0
 800b05c:	bd08      	pop	{r3, pc}
 800b05e:	4b04      	ldr	r3, [pc, #16]	@ (800b070 <rmw_uxrce_transport_init+0x2c>)
 800b060:	4610      	mov	r0, r2
 800b062:	6859      	ldr	r1, [r3, #4]
 800b064:	f001 ff80 	bl	800cf68 <uxr_init_custom_transport>
 800b068:	f080 0001 	eor.w	r0, r0, #1
 800b06c:	b2c0      	uxtb	r0, r0
 800b06e:	bd08      	pop	{r3, pc}
 800b070:	200091ec 	.word	0x200091ec

0800b074 <rmw_uxrce_init_service_memory>:
 800b074:	b1e2      	cbz	r2, 800b0b0 <rmw_uxrce_init_service_memory+0x3c>
 800b076:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b07a:	7b05      	ldrb	r5, [r0, #12]
 800b07c:	4606      	mov	r6, r0
 800b07e:	b9ad      	cbnz	r5, 800b0ac <rmw_uxrce_init_service_memory+0x38>
 800b080:	23c8      	movs	r3, #200	@ 0xc8
 800b082:	e9c0 5500 	strd	r5, r5, [r0]
 800b086:	6083      	str	r3, [r0, #8]
 800b088:	f240 1301 	movw	r3, #257	@ 0x101
 800b08c:	4617      	mov	r7, r2
 800b08e:	8183      	strh	r3, [r0, #12]
 800b090:	460c      	mov	r4, r1
 800b092:	46a8      	mov	r8, r5
 800b094:	4621      	mov	r1, r4
 800b096:	4630      	mov	r0, r6
 800b098:	3501      	adds	r5, #1
 800b09a:	f008 fa55 	bl	8013548 <put_memory>
 800b09e:	42af      	cmp	r7, r5
 800b0a0:	60a4      	str	r4, [r4, #8]
 800b0a2:	f884 800c 	strb.w	r8, [r4, #12]
 800b0a6:	f104 04c8 	add.w	r4, r4, #200	@ 0xc8
 800b0aa:	d1f3      	bne.n	800b094 <rmw_uxrce_init_service_memory+0x20>
 800b0ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b0b0:	4770      	bx	lr
 800b0b2:	bf00      	nop

0800b0b4 <rmw_uxrce_init_client_memory>:
 800b0b4:	b1e2      	cbz	r2, 800b0f0 <rmw_uxrce_init_client_memory+0x3c>
 800b0b6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b0ba:	7b05      	ldrb	r5, [r0, #12]
 800b0bc:	4606      	mov	r6, r0
 800b0be:	b9ad      	cbnz	r5, 800b0ec <rmw_uxrce_init_client_memory+0x38>
 800b0c0:	23c8      	movs	r3, #200	@ 0xc8
 800b0c2:	e9c0 5500 	strd	r5, r5, [r0]
 800b0c6:	6083      	str	r3, [r0, #8]
 800b0c8:	f240 1301 	movw	r3, #257	@ 0x101
 800b0cc:	4617      	mov	r7, r2
 800b0ce:	8183      	strh	r3, [r0, #12]
 800b0d0:	460c      	mov	r4, r1
 800b0d2:	46a8      	mov	r8, r5
 800b0d4:	4621      	mov	r1, r4
 800b0d6:	4630      	mov	r0, r6
 800b0d8:	3501      	adds	r5, #1
 800b0da:	f008 fa35 	bl	8013548 <put_memory>
 800b0de:	42af      	cmp	r7, r5
 800b0e0:	60a4      	str	r4, [r4, #8]
 800b0e2:	f884 800c 	strb.w	r8, [r4, #12]
 800b0e6:	f104 04c8 	add.w	r4, r4, #200	@ 0xc8
 800b0ea:	d1f3      	bne.n	800b0d4 <rmw_uxrce_init_client_memory+0x20>
 800b0ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b0f0:	4770      	bx	lr
 800b0f2:	bf00      	nop

0800b0f4 <rmw_uxrce_init_publisher_memory>:
 800b0f4:	b1e2      	cbz	r2, 800b130 <rmw_uxrce_init_publisher_memory+0x3c>
 800b0f6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b0fa:	7b05      	ldrb	r5, [r0, #12]
 800b0fc:	4606      	mov	r6, r0
 800b0fe:	b9ad      	cbnz	r5, 800b12c <rmw_uxrce_init_publisher_memory+0x38>
 800b100:	23d8      	movs	r3, #216	@ 0xd8
 800b102:	e9c0 5500 	strd	r5, r5, [r0]
 800b106:	6083      	str	r3, [r0, #8]
 800b108:	f240 1301 	movw	r3, #257	@ 0x101
 800b10c:	4617      	mov	r7, r2
 800b10e:	8183      	strh	r3, [r0, #12]
 800b110:	460c      	mov	r4, r1
 800b112:	46a8      	mov	r8, r5
 800b114:	4621      	mov	r1, r4
 800b116:	4630      	mov	r0, r6
 800b118:	3501      	adds	r5, #1
 800b11a:	f008 fa15 	bl	8013548 <put_memory>
 800b11e:	42af      	cmp	r7, r5
 800b120:	60a4      	str	r4, [r4, #8]
 800b122:	f884 800c 	strb.w	r8, [r4, #12]
 800b126:	f104 04d8 	add.w	r4, r4, #216	@ 0xd8
 800b12a:	d1f3      	bne.n	800b114 <rmw_uxrce_init_publisher_memory+0x20>
 800b12c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b130:	4770      	bx	lr
 800b132:	bf00      	nop

0800b134 <rmw_uxrce_init_subscription_memory>:
 800b134:	b1e2      	cbz	r2, 800b170 <rmw_uxrce_init_subscription_memory+0x3c>
 800b136:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b13a:	7b05      	ldrb	r5, [r0, #12]
 800b13c:	4606      	mov	r6, r0
 800b13e:	b9ad      	cbnz	r5, 800b16c <rmw_uxrce_init_subscription_memory+0x38>
 800b140:	23d8      	movs	r3, #216	@ 0xd8
 800b142:	e9c0 5500 	strd	r5, r5, [r0]
 800b146:	6083      	str	r3, [r0, #8]
 800b148:	f240 1301 	movw	r3, #257	@ 0x101
 800b14c:	4617      	mov	r7, r2
 800b14e:	8183      	strh	r3, [r0, #12]
 800b150:	460c      	mov	r4, r1
 800b152:	46a8      	mov	r8, r5
 800b154:	4621      	mov	r1, r4
 800b156:	4630      	mov	r0, r6
 800b158:	3501      	adds	r5, #1
 800b15a:	f008 f9f5 	bl	8013548 <put_memory>
 800b15e:	42af      	cmp	r7, r5
 800b160:	60a4      	str	r4, [r4, #8]
 800b162:	f884 800c 	strb.w	r8, [r4, #12]
 800b166:	f104 04d8 	add.w	r4, r4, #216	@ 0xd8
 800b16a:	d1f3      	bne.n	800b154 <rmw_uxrce_init_subscription_memory+0x20>
 800b16c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b170:	4770      	bx	lr
 800b172:	bf00      	nop

0800b174 <rmw_uxrce_init_node_memory>:
 800b174:	b1e2      	cbz	r2, 800b1b0 <rmw_uxrce_init_node_memory+0x3c>
 800b176:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b17a:	7b05      	ldrb	r5, [r0, #12]
 800b17c:	4606      	mov	r6, r0
 800b17e:	b9ad      	cbnz	r5, 800b1ac <rmw_uxrce_init_node_memory+0x38>
 800b180:	23a4      	movs	r3, #164	@ 0xa4
 800b182:	e9c0 5500 	strd	r5, r5, [r0]
 800b186:	6083      	str	r3, [r0, #8]
 800b188:	f240 1301 	movw	r3, #257	@ 0x101
 800b18c:	4617      	mov	r7, r2
 800b18e:	8183      	strh	r3, [r0, #12]
 800b190:	460c      	mov	r4, r1
 800b192:	46a8      	mov	r8, r5
 800b194:	4621      	mov	r1, r4
 800b196:	4630      	mov	r0, r6
 800b198:	3501      	adds	r5, #1
 800b19a:	f008 f9d5 	bl	8013548 <put_memory>
 800b19e:	42af      	cmp	r7, r5
 800b1a0:	60a4      	str	r4, [r4, #8]
 800b1a2:	f884 800c 	strb.w	r8, [r4, #12]
 800b1a6:	f104 04a4 	add.w	r4, r4, #164	@ 0xa4
 800b1aa:	d1f3      	bne.n	800b194 <rmw_uxrce_init_node_memory+0x20>
 800b1ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b1b0:	4770      	bx	lr
 800b1b2:	bf00      	nop

0800b1b4 <rmw_uxrce_init_session_memory>:
 800b1b4:	b1ea      	cbz	r2, 800b1f2 <rmw_uxrce_init_session_memory+0x3e>
 800b1b6:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b1ba:	7b05      	ldrb	r5, [r0, #12]
 800b1bc:	4606      	mov	r6, r0
 800b1be:	b9b5      	cbnz	r5, 800b1ee <rmw_uxrce_init_session_memory+0x3a>
 800b1c0:	e9c0 5500 	strd	r5, r5, [r0]
 800b1c4:	f241 58a8 	movw	r8, #5544	@ 0x15a8
 800b1c8:	f240 1301 	movw	r3, #257	@ 0x101
 800b1cc:	4617      	mov	r7, r2
 800b1ce:	f8c0 8008 	str.w	r8, [r0, #8]
 800b1d2:	460c      	mov	r4, r1
 800b1d4:	8183      	strh	r3, [r0, #12]
 800b1d6:	46a9      	mov	r9, r5
 800b1d8:	4621      	mov	r1, r4
 800b1da:	4630      	mov	r0, r6
 800b1dc:	3501      	adds	r5, #1
 800b1de:	f008 f9b3 	bl	8013548 <put_memory>
 800b1e2:	42af      	cmp	r7, r5
 800b1e4:	60a4      	str	r4, [r4, #8]
 800b1e6:	f884 900c 	strb.w	r9, [r4, #12]
 800b1ea:	4444      	add	r4, r8
 800b1ec:	d1f4      	bne.n	800b1d8 <rmw_uxrce_init_session_memory+0x24>
 800b1ee:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b1f2:	4770      	bx	lr

0800b1f4 <rmw_uxrce_init_topic_memory>:
 800b1f4:	b1e2      	cbz	r2, 800b230 <rmw_uxrce_init_topic_memory+0x3c>
 800b1f6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b1fa:	7b05      	ldrb	r5, [r0, #12]
 800b1fc:	4606      	mov	r6, r0
 800b1fe:	b9ad      	cbnz	r5, 800b22c <rmw_uxrce_init_topic_memory+0x38>
 800b200:	231c      	movs	r3, #28
 800b202:	e9c0 5500 	strd	r5, r5, [r0]
 800b206:	6083      	str	r3, [r0, #8]
 800b208:	f240 1301 	movw	r3, #257	@ 0x101
 800b20c:	4617      	mov	r7, r2
 800b20e:	8183      	strh	r3, [r0, #12]
 800b210:	460c      	mov	r4, r1
 800b212:	46a8      	mov	r8, r5
 800b214:	4621      	mov	r1, r4
 800b216:	4630      	mov	r0, r6
 800b218:	3501      	adds	r5, #1
 800b21a:	f008 f995 	bl	8013548 <put_memory>
 800b21e:	42af      	cmp	r7, r5
 800b220:	60a4      	str	r4, [r4, #8]
 800b222:	f884 800c 	strb.w	r8, [r4, #12]
 800b226:	f104 041c 	add.w	r4, r4, #28
 800b22a:	d1f3      	bne.n	800b214 <rmw_uxrce_init_topic_memory+0x20>
 800b22c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b230:	4770      	bx	lr
 800b232:	bf00      	nop

0800b234 <rmw_uxrce_init_static_input_buffer_memory>:
 800b234:	b1ea      	cbz	r2, 800b272 <rmw_uxrce_init_static_input_buffer_memory+0x3e>
 800b236:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b23a:	7b05      	ldrb	r5, [r0, #12]
 800b23c:	4606      	mov	r6, r0
 800b23e:	b9b5      	cbnz	r5, 800b26e <rmw_uxrce_init_static_input_buffer_memory+0x3a>
 800b240:	f44f 6304 	mov.w	r3, #2112	@ 0x840
 800b244:	e9c0 5500 	strd	r5, r5, [r0]
 800b248:	6083      	str	r3, [r0, #8]
 800b24a:	f240 1301 	movw	r3, #257	@ 0x101
 800b24e:	4617      	mov	r7, r2
 800b250:	8183      	strh	r3, [r0, #12]
 800b252:	460c      	mov	r4, r1
 800b254:	46a8      	mov	r8, r5
 800b256:	4621      	mov	r1, r4
 800b258:	4630      	mov	r0, r6
 800b25a:	3501      	adds	r5, #1
 800b25c:	f008 f974 	bl	8013548 <put_memory>
 800b260:	42af      	cmp	r7, r5
 800b262:	60a4      	str	r4, [r4, #8]
 800b264:	f884 800c 	strb.w	r8, [r4, #12]
 800b268:	f504 6404 	add.w	r4, r4, #2112	@ 0x840
 800b26c:	d1f3      	bne.n	800b256 <rmw_uxrce_init_static_input_buffer_memory+0x22>
 800b26e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b272:	4770      	bx	lr

0800b274 <rmw_uxrce_init_init_options_impl_memory>:
 800b274:	b1e2      	cbz	r2, 800b2b0 <rmw_uxrce_init_init_options_impl_memory+0x3c>
 800b276:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b27a:	7b05      	ldrb	r5, [r0, #12]
 800b27c:	4606      	mov	r6, r0
 800b27e:	b9ad      	cbnz	r5, 800b2ac <rmw_uxrce_init_init_options_impl_memory+0x38>
 800b280:	232c      	movs	r3, #44	@ 0x2c
 800b282:	e9c0 5500 	strd	r5, r5, [r0]
 800b286:	6083      	str	r3, [r0, #8]
 800b288:	f240 1301 	movw	r3, #257	@ 0x101
 800b28c:	4617      	mov	r7, r2
 800b28e:	8183      	strh	r3, [r0, #12]
 800b290:	460c      	mov	r4, r1
 800b292:	46a8      	mov	r8, r5
 800b294:	4621      	mov	r1, r4
 800b296:	4630      	mov	r0, r6
 800b298:	3501      	adds	r5, #1
 800b29a:	f008 f955 	bl	8013548 <put_memory>
 800b29e:	42af      	cmp	r7, r5
 800b2a0:	60a4      	str	r4, [r4, #8]
 800b2a2:	f884 800c 	strb.w	r8, [r4, #12]
 800b2a6:	f104 042c 	add.w	r4, r4, #44	@ 0x2c
 800b2aa:	d1f3      	bne.n	800b294 <rmw_uxrce_init_init_options_impl_memory+0x20>
 800b2ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b2b0:	4770      	bx	lr
 800b2b2:	bf00      	nop

0800b2b4 <rmw_uxrce_init_wait_set_memory>:
 800b2b4:	b1e2      	cbz	r2, 800b2f0 <rmw_uxrce_init_wait_set_memory+0x3c>
 800b2b6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b2ba:	7b05      	ldrb	r5, [r0, #12]
 800b2bc:	4606      	mov	r6, r0
 800b2be:	b9ad      	cbnz	r5, 800b2ec <rmw_uxrce_init_wait_set_memory+0x38>
 800b2c0:	231c      	movs	r3, #28
 800b2c2:	e9c0 5500 	strd	r5, r5, [r0]
 800b2c6:	6083      	str	r3, [r0, #8]
 800b2c8:	f240 1301 	movw	r3, #257	@ 0x101
 800b2cc:	4617      	mov	r7, r2
 800b2ce:	8183      	strh	r3, [r0, #12]
 800b2d0:	460c      	mov	r4, r1
 800b2d2:	46a8      	mov	r8, r5
 800b2d4:	4621      	mov	r1, r4
 800b2d6:	4630      	mov	r0, r6
 800b2d8:	3501      	adds	r5, #1
 800b2da:	f008 f935 	bl	8013548 <put_memory>
 800b2de:	42af      	cmp	r7, r5
 800b2e0:	60a4      	str	r4, [r4, #8]
 800b2e2:	f884 800c 	strb.w	r8, [r4, #12]
 800b2e6:	f104 041c 	add.w	r4, r4, #28
 800b2ea:	d1f3      	bne.n	800b2d4 <rmw_uxrce_init_wait_set_memory+0x20>
 800b2ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b2f0:	4770      	bx	lr
 800b2f2:	bf00      	nop

0800b2f4 <rmw_uxrce_init_guard_condition_memory>:
 800b2f4:	b1e2      	cbz	r2, 800b330 <rmw_uxrce_init_guard_condition_memory+0x3c>
 800b2f6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b2fa:	7b05      	ldrb	r5, [r0, #12]
 800b2fc:	4606      	mov	r6, r0
 800b2fe:	b9ad      	cbnz	r5, 800b32c <rmw_uxrce_init_guard_condition_memory+0x38>
 800b300:	2320      	movs	r3, #32
 800b302:	e9c0 5500 	strd	r5, r5, [r0]
 800b306:	6083      	str	r3, [r0, #8]
 800b308:	f240 1301 	movw	r3, #257	@ 0x101
 800b30c:	4617      	mov	r7, r2
 800b30e:	8183      	strh	r3, [r0, #12]
 800b310:	460c      	mov	r4, r1
 800b312:	46a8      	mov	r8, r5
 800b314:	4621      	mov	r1, r4
 800b316:	4630      	mov	r0, r6
 800b318:	3501      	adds	r5, #1
 800b31a:	f008 f915 	bl	8013548 <put_memory>
 800b31e:	42af      	cmp	r7, r5
 800b320:	60a4      	str	r4, [r4, #8]
 800b322:	f884 800c 	strb.w	r8, [r4, #12]
 800b326:	f104 0420 	add.w	r4, r4, #32
 800b32a:	d1f3      	bne.n	800b314 <rmw_uxrce_init_guard_condition_memory+0x20>
 800b32c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b330:	4770      	bx	lr
 800b332:	bf00      	nop

0800b334 <rmw_uxrce_fini_session_memory>:
 800b334:	4601      	mov	r1, r0
 800b336:	4801      	ldr	r0, [pc, #4]	@ (800b33c <rmw_uxrce_fini_session_memory+0x8>)
 800b338:	f008 b906 	b.w	8013548 <put_memory>
 800b33c:	2000db44 	.word	0x2000db44

0800b340 <rmw_uxrce_fini_node_memory>:
 800b340:	b538      	push	{r3, r4, r5, lr}
 800b342:	4604      	mov	r4, r0
 800b344:	6800      	ldr	r0, [r0, #0]
 800b346:	b128      	cbz	r0, 800b354 <rmw_uxrce_fini_node_memory+0x14>
 800b348:	4b07      	ldr	r3, [pc, #28]	@ (800b368 <rmw_uxrce_fini_node_memory+0x28>)
 800b34a:	6819      	ldr	r1, [r3, #0]
 800b34c:	f7f4 ff48 	bl	80001e0 <strcmp>
 800b350:	b940      	cbnz	r0, 800b364 <rmw_uxrce_fini_node_memory+0x24>
 800b352:	6020      	str	r0, [r4, #0]
 800b354:	6861      	ldr	r1, [r4, #4]
 800b356:	b129      	cbz	r1, 800b364 <rmw_uxrce_fini_node_memory+0x24>
 800b358:	2500      	movs	r5, #0
 800b35a:	4804      	ldr	r0, [pc, #16]	@ (800b36c <rmw_uxrce_fini_node_memory+0x2c>)
 800b35c:	610d      	str	r5, [r1, #16]
 800b35e:	f008 f8f3 	bl	8013548 <put_memory>
 800b362:	6065      	str	r5, [r4, #4]
 800b364:	bd38      	pop	{r3, r4, r5, pc}
 800b366:	bf00      	nop
 800b368:	0801780c 	.word	0x0801780c
 800b36c:	2000db14 	.word	0x2000db14

0800b370 <rmw_uxrce_fini_publisher_memory>:
 800b370:	b510      	push	{r4, lr}
 800b372:	4604      	mov	r4, r0
 800b374:	6800      	ldr	r0, [r0, #0]
 800b376:	b128      	cbz	r0, 800b384 <rmw_uxrce_fini_publisher_memory+0x14>
 800b378:	4b06      	ldr	r3, [pc, #24]	@ (800b394 <rmw_uxrce_fini_publisher_memory+0x24>)
 800b37a:	6819      	ldr	r1, [r3, #0]
 800b37c:	f7f4 ff30 	bl	80001e0 <strcmp>
 800b380:	b938      	cbnz	r0, 800b392 <rmw_uxrce_fini_publisher_memory+0x22>
 800b382:	6020      	str	r0, [r4, #0]
 800b384:	6861      	ldr	r1, [r4, #4]
 800b386:	b121      	cbz	r1, 800b392 <rmw_uxrce_fini_publisher_memory+0x22>
 800b388:	4803      	ldr	r0, [pc, #12]	@ (800b398 <rmw_uxrce_fini_publisher_memory+0x28>)
 800b38a:	f008 f8dd 	bl	8013548 <put_memory>
 800b38e:	2300      	movs	r3, #0
 800b390:	6063      	str	r3, [r4, #4]
 800b392:	bd10      	pop	{r4, pc}
 800b394:	0801780c 	.word	0x0801780c
 800b398:	2000db24 	.word	0x2000db24

0800b39c <rmw_uxrce_fini_subscription_memory>:
 800b39c:	b510      	push	{r4, lr}
 800b39e:	4604      	mov	r4, r0
 800b3a0:	6800      	ldr	r0, [r0, #0]
 800b3a2:	b128      	cbz	r0, 800b3b0 <rmw_uxrce_fini_subscription_memory+0x14>
 800b3a4:	4b06      	ldr	r3, [pc, #24]	@ (800b3c0 <rmw_uxrce_fini_subscription_memory+0x24>)
 800b3a6:	6819      	ldr	r1, [r3, #0]
 800b3a8:	f7f4 ff1a 	bl	80001e0 <strcmp>
 800b3ac:	b938      	cbnz	r0, 800b3be <rmw_uxrce_fini_subscription_memory+0x22>
 800b3ae:	6020      	str	r0, [r4, #0]
 800b3b0:	6861      	ldr	r1, [r4, #4]
 800b3b2:	b121      	cbz	r1, 800b3be <rmw_uxrce_fini_subscription_memory+0x22>
 800b3b4:	4803      	ldr	r0, [pc, #12]	@ (800b3c4 <rmw_uxrce_fini_subscription_memory+0x28>)
 800b3b6:	f008 f8c7 	bl	8013548 <put_memory>
 800b3ba:	2300      	movs	r3, #0
 800b3bc:	6063      	str	r3, [r4, #4]
 800b3be:	bd10      	pop	{r4, pc}
 800b3c0:	0801780c 	.word	0x0801780c
 800b3c4:	2000db64 	.word	0x2000db64

0800b3c8 <rmw_uxrce_fini_service_memory>:
 800b3c8:	b510      	push	{r4, lr}
 800b3ca:	4604      	mov	r4, r0
 800b3cc:	6800      	ldr	r0, [r0, #0]
 800b3ce:	b128      	cbz	r0, 800b3dc <rmw_uxrce_fini_service_memory+0x14>
 800b3d0:	4b06      	ldr	r3, [pc, #24]	@ (800b3ec <rmw_uxrce_fini_service_memory+0x24>)
 800b3d2:	6819      	ldr	r1, [r3, #0]
 800b3d4:	f7f4 ff04 	bl	80001e0 <strcmp>
 800b3d8:	b938      	cbnz	r0, 800b3ea <rmw_uxrce_fini_service_memory+0x22>
 800b3da:	6020      	str	r0, [r4, #0]
 800b3dc:	6861      	ldr	r1, [r4, #4]
 800b3de:	b121      	cbz	r1, 800b3ea <rmw_uxrce_fini_service_memory+0x22>
 800b3e0:	4803      	ldr	r0, [pc, #12]	@ (800b3f0 <rmw_uxrce_fini_service_memory+0x28>)
 800b3e2:	f008 f8b1 	bl	8013548 <put_memory>
 800b3e6:	2300      	movs	r3, #0
 800b3e8:	6063      	str	r3, [r4, #4]
 800b3ea:	bd10      	pop	{r4, pc}
 800b3ec:	0801780c 	.word	0x0801780c
 800b3f0:	2000db34 	.word	0x2000db34

0800b3f4 <rmw_uxrce_fini_client_memory>:
 800b3f4:	b510      	push	{r4, lr}
 800b3f6:	4604      	mov	r4, r0
 800b3f8:	6800      	ldr	r0, [r0, #0]
 800b3fa:	b128      	cbz	r0, 800b408 <rmw_uxrce_fini_client_memory+0x14>
 800b3fc:	4b06      	ldr	r3, [pc, #24]	@ (800b418 <rmw_uxrce_fini_client_memory+0x24>)
 800b3fe:	6819      	ldr	r1, [r3, #0]
 800b400:	f7f4 feee 	bl	80001e0 <strcmp>
 800b404:	b938      	cbnz	r0, 800b416 <rmw_uxrce_fini_client_memory+0x22>
 800b406:	6020      	str	r0, [r4, #0]
 800b408:	6861      	ldr	r1, [r4, #4]
 800b40a:	b121      	cbz	r1, 800b416 <rmw_uxrce_fini_client_memory+0x22>
 800b40c:	4803      	ldr	r0, [pc, #12]	@ (800b41c <rmw_uxrce_fini_client_memory+0x28>)
 800b40e:	f008 f89b 	bl	8013548 <put_memory>
 800b412:	2300      	movs	r3, #0
 800b414:	6063      	str	r3, [r4, #4]
 800b416:	bd10      	pop	{r4, pc}
 800b418:	0801780c 	.word	0x0801780c
 800b41c:	20009244 	.word	0x20009244

0800b420 <rmw_uxrce_fini_topic_memory>:
 800b420:	b510      	push	{r4, lr}
 800b422:	4604      	mov	r4, r0
 800b424:	4621      	mov	r1, r4
 800b426:	4803      	ldr	r0, [pc, #12]	@ (800b434 <rmw_uxrce_fini_topic_memory+0x14>)
 800b428:	f008 f88e 	bl	8013548 <put_memory>
 800b42c:	2300      	movs	r3, #0
 800b42e:	61a3      	str	r3, [r4, #24]
 800b430:	bd10      	pop	{r4, pc}
 800b432:	bf00      	nop
 800b434:	2000db74 	.word	0x2000db74

0800b438 <rmw_uxrce_get_static_input_buffer_for_entity>:
 800b438:	b082      	sub	sp, #8
 800b43a:	b530      	push	{r4, r5, lr}
 800b43c:	4925      	ldr	r1, [pc, #148]	@ (800b4d4 <rmw_uxrce_get_static_input_buffer_for_entity+0x9c>)
 800b43e:	680d      	ldr	r5, [r1, #0]
 800b440:	ac03      	add	r4, sp, #12
 800b442:	e884 000c 	stmia.w	r4, {r2, r3}
 800b446:	461c      	mov	r4, r3
 800b448:	2d00      	cmp	r5, #0
 800b44a:	d041      	beq.n	800b4d0 <rmw_uxrce_get_static_input_buffer_for_entity+0x98>
 800b44c:	462b      	mov	r3, r5
 800b44e:	2100      	movs	r1, #0
 800b450:	689a      	ldr	r2, [r3, #8]
 800b452:	685b      	ldr	r3, [r3, #4]
 800b454:	f8d2 2814 	ldr.w	r2, [r2, #2068]	@ 0x814
 800b458:	4290      	cmp	r0, r2
 800b45a:	bf08      	it	eq
 800b45c:	3101      	addeq	r1, #1
 800b45e:	2b00      	cmp	r3, #0
 800b460:	d1f6      	bne.n	800b450 <rmw_uxrce_get_static_input_buffer_for_entity+0x18>
 800b462:	f89d 300c 	ldrb.w	r3, [sp, #12]
 800b466:	2b02      	cmp	r3, #2
 800b468:	d029      	beq.n	800b4be <rmw_uxrce_get_static_input_buffer_for_entity+0x86>
 800b46a:	d907      	bls.n	800b47c <rmw_uxrce_get_static_input_buffer_for_entity+0x44>
 800b46c:	2b03      	cmp	r3, #3
 800b46e:	d005      	beq.n	800b47c <rmw_uxrce_get_static_input_buffer_for_entity+0x44>
 800b470:	2100      	movs	r1, #0
 800b472:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800b476:	4608      	mov	r0, r1
 800b478:	b002      	add	sp, #8
 800b47a:	4770      	bx	lr
 800b47c:	b314      	cbz	r4, 800b4c4 <rmw_uxrce_get_static_input_buffer_for_entity+0x8c>
 800b47e:	428c      	cmp	r4, r1
 800b480:	d820      	bhi.n	800b4c4 <rmw_uxrce_get_static_input_buffer_for_entity+0x8c>
 800b482:	2d00      	cmp	r5, #0
 800b484:	d0f4      	beq.n	800b470 <rmw_uxrce_get_static_input_buffer_for_entity+0x38>
 800b486:	2100      	movs	r1, #0
 800b488:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
 800b48c:	f06f 4400 	mvn.w	r4, #2147483648	@ 0x80000000
 800b490:	e002      	b.n	800b498 <rmw_uxrce_get_static_input_buffer_for_entity+0x60>
 800b492:	686d      	ldr	r5, [r5, #4]
 800b494:	2d00      	cmp	r5, #0
 800b496:	d0ec      	beq.n	800b472 <rmw_uxrce_get_static_input_buffer_for_entity+0x3a>
 800b498:	68ab      	ldr	r3, [r5, #8]
 800b49a:	f8d3 2814 	ldr.w	r2, [r3, #2068]	@ 0x814
 800b49e:	4290      	cmp	r0, r2
 800b4a0:	d1f7      	bne.n	800b492 <rmw_uxrce_get_static_input_buffer_for_entity+0x5a>
 800b4a2:	f8d3 2818 	ldr.w	r2, [r3, #2072]	@ 0x818
 800b4a6:	f503 6302 	add.w	r3, r3, #2080	@ 0x820
 800b4aa:	4562      	cmp	r2, ip
 800b4ac:	f853 3c04 	ldr.w	r3, [r3, #-4]
 800b4b0:	eb73 0e04 	sbcs.w	lr, r3, r4
 800b4b4:	daed      	bge.n	800b492 <rmw_uxrce_get_static_input_buffer_for_entity+0x5a>
 800b4b6:	4694      	mov	ip, r2
 800b4b8:	461c      	mov	r4, r3
 800b4ba:	4629      	mov	r1, r5
 800b4bc:	e7e9      	b.n	800b492 <rmw_uxrce_get_static_input_buffer_for_entity+0x5a>
 800b4be:	b10c      	cbz	r4, 800b4c4 <rmw_uxrce_get_static_input_buffer_for_entity+0x8c>
 800b4c0:	428c      	cmp	r4, r1
 800b4c2:	d9d5      	bls.n	800b470 <rmw_uxrce_get_static_input_buffer_for_entity+0x38>
 800b4c4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800b4c8:	4802      	ldr	r0, [pc, #8]	@ (800b4d4 <rmw_uxrce_get_static_input_buffer_for_entity+0x9c>)
 800b4ca:	b002      	add	sp, #8
 800b4cc:	f008 b82c 	b.w	8013528 <get_memory>
 800b4d0:	4629      	mov	r1, r5
 800b4d2:	e7c6      	b.n	800b462 <rmw_uxrce_get_static_input_buffer_for_entity+0x2a>
 800b4d4:	2000db54 	.word	0x2000db54

0800b4d8 <rmw_uxrce_find_static_input_buffer_by_owner>:
 800b4d8:	4b11      	ldr	r3, [pc, #68]	@ (800b520 <rmw_uxrce_find_static_input_buffer_by_owner+0x48>)
 800b4da:	681b      	ldr	r3, [r3, #0]
 800b4dc:	b530      	push	{r4, r5, lr}
 800b4de:	b1e3      	cbz	r3, 800b51a <rmw_uxrce_find_static_input_buffer_by_owner+0x42>
 800b4e0:	f04f 3eff 	mov.w	lr, #4294967295	@ 0xffffffff
 800b4e4:	f06f 4c00 	mvn.w	ip, #2147483648	@ 0x80000000
 800b4e8:	2400      	movs	r4, #0
 800b4ea:	e001      	b.n	800b4f0 <rmw_uxrce_find_static_input_buffer_by_owner+0x18>
 800b4ec:	685b      	ldr	r3, [r3, #4]
 800b4ee:	b193      	cbz	r3, 800b516 <rmw_uxrce_find_static_input_buffer_by_owner+0x3e>
 800b4f0:	689a      	ldr	r2, [r3, #8]
 800b4f2:	f8d2 1814 	ldr.w	r1, [r2, #2068]	@ 0x814
 800b4f6:	4288      	cmp	r0, r1
 800b4f8:	d1f8      	bne.n	800b4ec <rmw_uxrce_find_static_input_buffer_by_owner+0x14>
 800b4fa:	f8d2 1818 	ldr.w	r1, [r2, #2072]	@ 0x818
 800b4fe:	f8d2 281c 	ldr.w	r2, [r2, #2076]	@ 0x81c
 800b502:	4571      	cmp	r1, lr
 800b504:	eb72 050c 	sbcs.w	r5, r2, ip
 800b508:	daf0      	bge.n	800b4ec <rmw_uxrce_find_static_input_buffer_by_owner+0x14>
 800b50a:	461c      	mov	r4, r3
 800b50c:	685b      	ldr	r3, [r3, #4]
 800b50e:	468e      	mov	lr, r1
 800b510:	4694      	mov	ip, r2
 800b512:	2b00      	cmp	r3, #0
 800b514:	d1ec      	bne.n	800b4f0 <rmw_uxrce_find_static_input_buffer_by_owner+0x18>
 800b516:	4620      	mov	r0, r4
 800b518:	bd30      	pop	{r4, r5, pc}
 800b51a:	461c      	mov	r4, r3
 800b51c:	4620      	mov	r0, r4
 800b51e:	bd30      	pop	{r4, r5, pc}
 800b520:	2000db54 	.word	0x2000db54
 800b524:	00000000 	.word	0x00000000

0800b528 <rmw_uxrce_clean_expired_static_input_buffer>:
 800b528:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b52c:	4b3c      	ldr	r3, [pc, #240]	@ (800b620 <rmw_uxrce_clean_expired_static_input_buffer+0xf8>)
 800b52e:	ed2d 8b06 	vpush	{d8-d10}
 800b532:	681f      	ldr	r7, [r3, #0]
 800b534:	b08d      	sub	sp, #52	@ 0x34
 800b536:	f008 fc13 	bl	8013d60 <rmw_uros_epoch_nanos>
 800b53a:	2f00      	cmp	r7, #0
 800b53c:	d05d      	beq.n	800b5fa <rmw_uxrce_clean_expired_static_input_buffer+0xd2>
 800b53e:	46b8      	mov	r8, r7
 800b540:	ed9f 8b31 	vldr	d8, [pc, #196]	@ 800b608 <rmw_uxrce_clean_expired_static_input_buffer+0xe0>
 800b544:	f8d8 5008 	ldr.w	r5, [r8, #8]
 800b548:	f895 3820 	ldrb.w	r3, [r5, #2080]	@ 0x820
 800b54c:	2b04      	cmp	r3, #4
 800b54e:	ed9f ab30 	vldr	d10, [pc, #192]	@ 800b610 <rmw_uxrce_clean_expired_static_input_buffer+0xe8>
 800b552:	ed9f 9b31 	vldr	d9, [pc, #196]	@ 800b618 <rmw_uxrce_clean_expired_static_input_buffer+0xf0>
 800b556:	4681      	mov	r9, r0
 800b558:	468a      	mov	sl, r1
 800b55a:	ac04      	add	r4, sp, #16
 800b55c:	d03f      	beq.n	800b5de <rmw_uxrce_clean_expired_static_input_buffer+0xb6>
 800b55e:	2b05      	cmp	r3, #5
 800b560:	d044      	beq.n	800b5ec <rmw_uxrce_clean_expired_static_input_buffer+0xc4>
 800b562:	2b03      	cmp	r3, #3
 800b564:	d03b      	beq.n	800b5de <rmw_uxrce_clean_expired_static_input_buffer+0xb6>
 800b566:	ed8d 8b04 	vstr	d8, [sp, #16]
 800b56a:	ed8d ab06 	vstr	d10, [sp, #24]
 800b56e:	ed8d 8b08 	vstr	d8, [sp, #32]
 800b572:	ed8d 8b0a 	vstr	d8, [sp, #40]	@ 0x28
 800b576:	ab08      	add	r3, sp, #32
 800b578:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800b57a:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 800b57e:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800b582:	f007 fd1d 	bl	8012fc0 <rmw_time_equal>
 800b586:	b118      	cbz	r0, 800b590 <rmw_uxrce_clean_expired_static_input_buffer+0x68>
 800b588:	ed8d 9b04 	vstr	d9, [sp, #16]
 800b58c:	ed8d 8b06 	vstr	d8, [sp, #24]
 800b590:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800b594:	f8d5 6818 	ldr.w	r6, [r5, #2072]	@ 0x818
 800b598:	f8d5 781c 	ldr.w	r7, [r5, #2076]	@ 0x81c
 800b59c:	f8d8 b004 	ldr.w	fp, [r8, #4]
 800b5a0:	f007 fd62 	bl	8013068 <rmw_time_total_nsec>
 800b5a4:	1830      	adds	r0, r6, r0
 800b5a6:	eb47 0101 	adc.w	r1, r7, r1
 800b5aa:	4548      	cmp	r0, r9
 800b5ac:	eb71 030a 	sbcs.w	r3, r1, sl
 800b5b0:	f505 6502 	add.w	r5, r5, #2080	@ 0x820
 800b5b4:	db05      	blt.n	800b5c2 <rmw_uxrce_clean_expired_static_input_buffer+0x9a>
 800b5b6:	e955 2302 	ldrd	r2, r3, [r5, #-8]
 800b5ba:	4591      	cmp	r9, r2
 800b5bc:	eb7a 0303 	sbcs.w	r3, sl, r3
 800b5c0:	da03      	bge.n	800b5ca <rmw_uxrce_clean_expired_static_input_buffer+0xa2>
 800b5c2:	4817      	ldr	r0, [pc, #92]	@ (800b620 <rmw_uxrce_clean_expired_static_input_buffer+0xf8>)
 800b5c4:	4641      	mov	r1, r8
 800b5c6:	f007 ffbf 	bl	8013548 <put_memory>
 800b5ca:	f1bb 0f00 	cmp.w	fp, #0
 800b5ce:	d014      	beq.n	800b5fa <rmw_uxrce_clean_expired_static_input_buffer+0xd2>
 800b5d0:	46d8      	mov	r8, fp
 800b5d2:	f8d8 5008 	ldr.w	r5, [r8, #8]
 800b5d6:	f895 3820 	ldrb.w	r3, [r5, #2080]	@ 0x820
 800b5da:	2b04      	cmp	r3, #4
 800b5dc:	d1bf      	bne.n	800b55e <rmw_uxrce_clean_expired_static_input_buffer+0x36>
 800b5de:	f8d5 3814 	ldr.w	r3, [r5, #2068]	@ 0x814
 800b5e2:	3340      	adds	r3, #64	@ 0x40
 800b5e4:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800b5e6:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800b5ea:	e7c0      	b.n	800b56e <rmw_uxrce_clean_expired_static_input_buffer+0x46>
 800b5ec:	f8d5 3814 	ldr.w	r3, [r5, #2068]	@ 0x814
 800b5f0:	3348      	adds	r3, #72	@ 0x48
 800b5f2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800b5f4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800b5f8:	e7b9      	b.n	800b56e <rmw_uxrce_clean_expired_static_input_buffer+0x46>
 800b5fa:	b00d      	add	sp, #52	@ 0x34
 800b5fc:	ecbd 8b06 	vpop	{d8-d10}
 800b600:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b604:	f3af 8000 	nop.w
	...
 800b610:	00000001 	.word	0x00000001
 800b614:	00000000 	.word	0x00000000
 800b618:	0000001e 	.word	0x0000001e
 800b61c:	00000000 	.word	0x00000000
 800b620:	2000db54 	.word	0x2000db54

0800b624 <run_xrce_session>:
 800b624:	b510      	push	{r4, lr}
 800b626:	788c      	ldrb	r4, [r1, #2]
 800b628:	b086      	sub	sp, #24
 800b62a:	2c01      	cmp	r4, #1
 800b62c:	f8ad 200e 	strh.w	r2, [sp, #14]
 800b630:	d00c      	beq.n	800b64c <run_xrce_session+0x28>
 800b632:	4619      	mov	r1, r3
 800b634:	2301      	movs	r3, #1
 800b636:	9300      	str	r3, [sp, #0]
 800b638:	f10d 020e 	add.w	r2, sp, #14
 800b63c:	f10d 0317 	add.w	r3, sp, #23
 800b640:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800b644:	f002 fb2e 	bl	800dca4 <uxr_run_session_until_all_status>
 800b648:	b006      	add	sp, #24
 800b64a:	bd10      	pop	{r4, pc}
 800b64c:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800b650:	f001 ff42 	bl	800d4d8 <uxr_flash_output_streams>
 800b654:	4620      	mov	r0, r4
 800b656:	b006      	add	sp, #24
 800b658:	bd10      	pop	{r4, pc}
 800b65a:	bf00      	nop

0800b65c <convert_qos_profile>:
 800b65c:	7a4a      	ldrb	r2, [r1, #9]
 800b65e:	f891 c008 	ldrb.w	ip, [r1, #8]
 800b662:	2a02      	cmp	r2, #2
 800b664:	bf18      	it	ne
 800b666:	2200      	movne	r2, #0
 800b668:	7002      	strb	r2, [r0, #0]
 800b66a:	780a      	ldrb	r2, [r1, #0]
 800b66c:	8889      	ldrh	r1, [r1, #4]
 800b66e:	8081      	strh	r1, [r0, #4]
 800b670:	f1ac 0c02 	sub.w	ip, ip, #2
 800b674:	f1a2 0202 	sub.w	r2, r2, #2
 800b678:	fabc fc8c 	clz	ip, ip
 800b67c:	fab2 f282 	clz	r2, r2
 800b680:	ea4f 1c5c 	mov.w	ip, ip, lsr #5
 800b684:	0952      	lsrs	r2, r2, #5
 800b686:	f880 c001 	strb.w	ip, [r0, #1]
 800b68a:	7082      	strb	r2, [r0, #2]
 800b68c:	4770      	bx	lr
 800b68e:	bf00      	nop

0800b690 <generate_type_name>:
 800b690:	b530      	push	{r4, r5, lr}
 800b692:	2300      	movs	r3, #0
 800b694:	700b      	strb	r3, [r1, #0]
 800b696:	6803      	ldr	r3, [r0, #0]
 800b698:	b087      	sub	sp, #28
 800b69a:	4614      	mov	r4, r2
 800b69c:	b1d3      	cbz	r3, 800b6d4 <generate_type_name+0x44>
 800b69e:	4a0f      	ldr	r2, [pc, #60]	@ (800b6dc <generate_type_name+0x4c>)
 800b6a0:	4615      	mov	r5, r2
 800b6a2:	9203      	str	r2, [sp, #12]
 800b6a4:	9500      	str	r5, [sp, #0]
 800b6a6:	6842      	ldr	r2, [r0, #4]
 800b6a8:	480d      	ldr	r0, [pc, #52]	@ (800b6e0 <generate_type_name+0x50>)
 800b6aa:	9001      	str	r0, [sp, #4]
 800b6ac:	4608      	mov	r0, r1
 800b6ae:	490d      	ldr	r1, [pc, #52]	@ (800b6e4 <generate_type_name+0x54>)
 800b6b0:	9204      	str	r2, [sp, #16]
 800b6b2:	9105      	str	r1, [sp, #20]
 800b6b4:	9102      	str	r1, [sp, #8]
 800b6b6:	4a0c      	ldr	r2, [pc, #48]	@ (800b6e8 <generate_type_name+0x58>)
 800b6b8:	4621      	mov	r1, r4
 800b6ba:	f00a f9ed 	bl	8015a98 <sniprintf>
 800b6be:	2800      	cmp	r0, #0
 800b6c0:	db05      	blt.n	800b6ce <generate_type_name+0x3e>
 800b6c2:	4284      	cmp	r4, r0
 800b6c4:	bfd4      	ite	le
 800b6c6:	2000      	movle	r0, #0
 800b6c8:	2001      	movgt	r0, #1
 800b6ca:	b007      	add	sp, #28
 800b6cc:	bd30      	pop	{r4, r5, pc}
 800b6ce:	2000      	movs	r0, #0
 800b6d0:	b007      	add	sp, #28
 800b6d2:	bd30      	pop	{r4, r5, pc}
 800b6d4:	4b05      	ldr	r3, [pc, #20]	@ (800b6ec <generate_type_name+0x5c>)
 800b6d6:	4a01      	ldr	r2, [pc, #4]	@ (800b6dc <generate_type_name+0x4c>)
 800b6d8:	461d      	mov	r5, r3
 800b6da:	e7e2      	b.n	800b6a2 <generate_type_name+0x12>
 800b6dc:	08016df0 	.word	0x08016df0
 800b6e0:	08016e08 	.word	0x08016e08
 800b6e4:	08016e04 	.word	0x08016e04
 800b6e8:	08016df4 	.word	0x08016df4
 800b6ec:	080175e4 	.word	0x080175e4

0800b6f0 <generate_topic_name>:
 800b6f0:	b510      	push	{r4, lr}
 800b6f2:	b082      	sub	sp, #8
 800b6f4:	4614      	mov	r4, r2
 800b6f6:	9000      	str	r0, [sp, #0]
 800b6f8:	4b08      	ldr	r3, [pc, #32]	@ (800b71c <generate_topic_name+0x2c>)
 800b6fa:	4a09      	ldr	r2, [pc, #36]	@ (800b720 <generate_topic_name+0x30>)
 800b6fc:	4608      	mov	r0, r1
 800b6fe:	4621      	mov	r1, r4
 800b700:	f00a f9ca 	bl	8015a98 <sniprintf>
 800b704:	2800      	cmp	r0, #0
 800b706:	db05      	blt.n	800b714 <generate_topic_name+0x24>
 800b708:	4284      	cmp	r4, r0
 800b70a:	bfd4      	ite	le
 800b70c:	2000      	movle	r0, #0
 800b70e:	2001      	movgt	r0, #1
 800b710:	b002      	add	sp, #8
 800b712:	bd10      	pop	{r4, pc}
 800b714:	2000      	movs	r0, #0
 800b716:	b002      	add	sp, #8
 800b718:	bd10      	pop	{r4, pc}
 800b71a:	bf00      	nop
 800b71c:	08016e14 	.word	0x08016e14
 800b720:	08016e0c 	.word	0x08016e0c

0800b724 <is_uxrce_rmw_identifier_valid>:
 800b724:	b510      	push	{r4, lr}
 800b726:	4604      	mov	r4, r0
 800b728:	b140      	cbz	r0, 800b73c <is_uxrce_rmw_identifier_valid+0x18>
 800b72a:	f007 ff65 	bl	80135f8 <rmw_get_implementation_identifier>
 800b72e:	4601      	mov	r1, r0
 800b730:	4620      	mov	r0, r4
 800b732:	f7f4 fd55 	bl	80001e0 <strcmp>
 800b736:	fab0 f080 	clz	r0, r0
 800b73a:	0940      	lsrs	r0, r0, #5
 800b73c:	bd10      	pop	{r4, pc}
 800b73e:	bf00      	nop

0800b740 <get_message_typesupport_handle>:
 800b740:	6883      	ldr	r3, [r0, #8]
 800b742:	4718      	bx	r3

0800b744 <get_message_typesupport_handle_function>:
 800b744:	b510      	push	{r4, lr}
 800b746:	4604      	mov	r4, r0
 800b748:	6800      	ldr	r0, [r0, #0]
 800b74a:	f7f4 fd49 	bl	80001e0 <strcmp>
 800b74e:	2800      	cmp	r0, #0
 800b750:	bf0c      	ite	eq
 800b752:	4620      	moveq	r0, r4
 800b754:	2000      	movne	r0, #0
 800b756:	bd10      	pop	{r4, pc}

0800b758 <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Float32>:
 800b758:	4b04      	ldr	r3, [pc, #16]	@ (800b76c <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Float32+0x14>)
 800b75a:	681a      	ldr	r2, [r3, #0]
 800b75c:	b10a      	cbz	r2, 800b762 <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Float32+0xa>
 800b75e:	4803      	ldr	r0, [pc, #12]	@ (800b76c <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Float32+0x14>)
 800b760:	4770      	bx	lr
 800b762:	4a03      	ldr	r2, [pc, #12]	@ (800b770 <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Float32+0x18>)
 800b764:	4801      	ldr	r0, [pc, #4]	@ (800b76c <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Float32+0x14>)
 800b766:	6812      	ldr	r2, [r2, #0]
 800b768:	601a      	str	r2, [r3, #0]
 800b76a:	4770      	bx	lr
 800b76c:	20000034 	.word	0x20000034
 800b770:	20000134 	.word	0x20000134

0800b774 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Float32>:
 800b774:	4a02      	ldr	r2, [pc, #8]	@ (800b780 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Float32+0xc>)
 800b776:	4b03      	ldr	r3, [pc, #12]	@ (800b784 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Float32+0x10>)
 800b778:	6812      	ldr	r2, [r2, #0]
 800b77a:	601a      	str	r2, [r3, #0]
 800b77c:	4770      	bx	lr
 800b77e:	bf00      	nop
 800b780:	20000134 	.word	0x20000134
 800b784:	20000034 	.word	0x20000034

0800b788 <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Int32>:
 800b788:	4b04      	ldr	r3, [pc, #16]	@ (800b79c <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Int32+0x14>)
 800b78a:	681a      	ldr	r2, [r3, #0]
 800b78c:	b10a      	cbz	r2, 800b792 <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Int32+0xa>
 800b78e:	4803      	ldr	r0, [pc, #12]	@ (800b79c <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Int32+0x14>)
 800b790:	4770      	bx	lr
 800b792:	4a03      	ldr	r2, [pc, #12]	@ (800b7a0 <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Int32+0x18>)
 800b794:	4801      	ldr	r0, [pc, #4]	@ (800b79c <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Int32+0x14>)
 800b796:	6812      	ldr	r2, [r2, #0]
 800b798:	601a      	str	r2, [r3, #0]
 800b79a:	4770      	bx	lr
 800b79c:	20000048 	.word	0x20000048
 800b7a0:	20000134 	.word	0x20000134

0800b7a4 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Int32>:
 800b7a4:	4a02      	ldr	r2, [pc, #8]	@ (800b7b0 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Int32+0xc>)
 800b7a6:	4b03      	ldr	r3, [pc, #12]	@ (800b7b4 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Int32+0x10>)
 800b7a8:	6812      	ldr	r2, [r2, #0]
 800b7aa:	601a      	str	r2, [r3, #0]
 800b7ac:	4770      	bx	lr
 800b7ae:	bf00      	nop
 800b7b0:	20000134 	.word	0x20000134
 800b7b4:	20000048 	.word	0x20000048

0800b7b8 <std_msgs__msg__Float32__rosidl_typesupport_introspection_c__Float32_init_function>:
 800b7b8:	f008 bb0e 	b.w	8013dd8 <std_msgs__msg__Float32__init>

0800b7bc <std_msgs__msg__Float32__rosidl_typesupport_introspection_c__Float32_fini_function>:
 800b7bc:	f008 bb10 	b.w	8013de0 <std_msgs__msg__Float32__fini>

0800b7c0 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Float32>:
 800b7c0:	4b04      	ldr	r3, [pc, #16]	@ (800b7d4 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Float32+0x14>)
 800b7c2:	681a      	ldr	r2, [r3, #0]
 800b7c4:	b10a      	cbz	r2, 800b7ca <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Float32+0xa>
 800b7c6:	4803      	ldr	r0, [pc, #12]	@ (800b7d4 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Float32+0x14>)
 800b7c8:	4770      	bx	lr
 800b7ca:	4a03      	ldr	r2, [pc, #12]	@ (800b7d8 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Float32+0x18>)
 800b7cc:	4801      	ldr	r0, [pc, #4]	@ (800b7d4 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Float32+0x14>)
 800b7ce:	6812      	ldr	r2, [r2, #0]
 800b7d0:	601a      	str	r2, [r3, #0]
 800b7d2:	4770      	bx	lr
 800b7d4:	20000090 	.word	0x20000090
 800b7d8:	20000138 	.word	0x20000138

0800b7dc <std_msgs__msg__Int32__rosidl_typesupport_introspection_c__Int32_init_function>:
 800b7dc:	f008 bb02 	b.w	8013de4 <std_msgs__msg__Int32__init>

0800b7e0 <std_msgs__msg__Int32__rosidl_typesupport_introspection_c__Int32_fini_function>:
 800b7e0:	f008 bb04 	b.w	8013dec <std_msgs__msg__Int32__fini>

0800b7e4 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Int32>:
 800b7e4:	4b04      	ldr	r3, [pc, #16]	@ (800b7f8 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Int32+0x14>)
 800b7e6:	681a      	ldr	r2, [r3, #0]
 800b7e8:	b10a      	cbz	r2, 800b7ee <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Int32+0xa>
 800b7ea:	4803      	ldr	r0, [pc, #12]	@ (800b7f8 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Int32+0x14>)
 800b7ec:	4770      	bx	lr
 800b7ee:	4a03      	ldr	r2, [pc, #12]	@ (800b7fc <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Int32+0x18>)
 800b7f0:	4801      	ldr	r0, [pc, #4]	@ (800b7f8 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Int32+0x14>)
 800b7f2:	6812      	ldr	r2, [r2, #0]
 800b7f4:	601a      	str	r2, [r3, #0]
 800b7f6:	4770      	bx	lr
 800b7f8:	200000d8 	.word	0x200000d8
 800b7fc:	20000138 	.word	0x20000138

0800b800 <_Float32__max_serialized_size>:
 800b800:	b508      	push	{r3, lr}
 800b802:	2104      	movs	r1, #4
 800b804:	2000      	movs	r0, #0
 800b806:	f001 f95d 	bl	800cac4 <ucdr_alignment>
 800b80a:	3004      	adds	r0, #4
 800b80c:	bd08      	pop	{r3, pc}
 800b80e:	bf00      	nop

0800b810 <_Float32__cdr_deserialize>:
 800b810:	b109      	cbz	r1, 800b816 <_Float32__cdr_deserialize+0x6>
 800b812:	f001 b86f 	b.w	800c8f4 <ucdr_deserialize_float>
 800b816:	4608      	mov	r0, r1
 800b818:	4770      	bx	lr
 800b81a:	bf00      	nop

0800b81c <get_serialized_size_std_msgs__msg__Float32>:
 800b81c:	b138      	cbz	r0, 800b82e <get_serialized_size_std_msgs__msg__Float32+0x12>
 800b81e:	b508      	push	{r3, lr}
 800b820:	460b      	mov	r3, r1
 800b822:	4618      	mov	r0, r3
 800b824:	2104      	movs	r1, #4
 800b826:	f001 f94d 	bl	800cac4 <ucdr_alignment>
 800b82a:	3004      	adds	r0, #4
 800b82c:	bd08      	pop	{r3, pc}
 800b82e:	4770      	bx	lr

0800b830 <_Float32__cdr_serialize>:
 800b830:	b120      	cbz	r0, 800b83c <_Float32__cdr_serialize+0xc>
 800b832:	ed90 0a00 	vldr	s0, [r0]
 800b836:	4608      	mov	r0, r1
 800b838:	f000 bfc4 	b.w	800c7c4 <ucdr_serialize_float>
 800b83c:	4770      	bx	lr
 800b83e:	bf00      	nop

0800b840 <_Float32__get_serialized_size>:
 800b840:	b130      	cbz	r0, 800b850 <_Float32__get_serialized_size+0x10>
 800b842:	b508      	push	{r3, lr}
 800b844:	2104      	movs	r1, #4
 800b846:	2000      	movs	r0, #0
 800b848:	f001 f93c 	bl	800cac4 <ucdr_alignment>
 800b84c:	3004      	adds	r0, #4
 800b84e:	bd08      	pop	{r3, pc}
 800b850:	4770      	bx	lr
 800b852:	bf00      	nop

0800b854 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__Float32>:
 800b854:	4800      	ldr	r0, [pc, #0]	@ (800b858 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__Float32+0x4>)
 800b856:	4770      	bx	lr
 800b858:	200000e4 	.word	0x200000e4

0800b85c <_Int32__max_serialized_size>:
 800b85c:	b508      	push	{r3, lr}
 800b85e:	2104      	movs	r1, #4
 800b860:	2000      	movs	r0, #0
 800b862:	f001 f92f 	bl	800cac4 <ucdr_alignment>
 800b866:	3004      	adds	r0, #4
 800b868:	bd08      	pop	{r3, pc}
 800b86a:	bf00      	nop

0800b86c <_Int32__cdr_deserialize>:
 800b86c:	b109      	cbz	r1, 800b872 <_Int32__cdr_deserialize+0x6>
 800b86e:	f000 bf19 	b.w	800c6a4 <ucdr_deserialize_int32_t>
 800b872:	4608      	mov	r0, r1
 800b874:	4770      	bx	lr
 800b876:	bf00      	nop

0800b878 <get_serialized_size_std_msgs__msg__Int32>:
 800b878:	b138      	cbz	r0, 800b88a <get_serialized_size_std_msgs__msg__Int32+0x12>
 800b87a:	b508      	push	{r3, lr}
 800b87c:	460b      	mov	r3, r1
 800b87e:	4618      	mov	r0, r3
 800b880:	2104      	movs	r1, #4
 800b882:	f001 f91f 	bl	800cac4 <ucdr_alignment>
 800b886:	3004      	adds	r0, #4
 800b888:	bd08      	pop	{r3, pc}
 800b88a:	4770      	bx	lr

0800b88c <_Int32__cdr_serialize>:
 800b88c:	460a      	mov	r2, r1
 800b88e:	b118      	cbz	r0, 800b898 <_Int32__cdr_serialize+0xc>
 800b890:	6801      	ldr	r1, [r0, #0]
 800b892:	4610      	mov	r0, r2
 800b894:	f000 be6e 	b.w	800c574 <ucdr_serialize_int32_t>
 800b898:	4770      	bx	lr
 800b89a:	bf00      	nop

0800b89c <_Int32__get_serialized_size>:
 800b89c:	b130      	cbz	r0, 800b8ac <_Int32__get_serialized_size+0x10>
 800b89e:	b508      	push	{r3, lr}
 800b8a0:	2104      	movs	r1, #4
 800b8a2:	2000      	movs	r0, #0
 800b8a4:	f001 f90e 	bl	800cac4 <ucdr_alignment>
 800b8a8:	3004      	adds	r0, #4
 800b8aa:	bd08      	pop	{r3, pc}
 800b8ac:	4770      	bx	lr
 800b8ae:	bf00      	nop

0800b8b0 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__Int32>:
 800b8b0:	4800      	ldr	r0, [pc, #0]	@ (800b8b4 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__Int32+0x4>)
 800b8b2:	4770      	bx	lr
 800b8b4:	2000010c 	.word	0x2000010c

0800b8b8 <ucdr_serialize_bool>:
 800b8b8:	b538      	push	{r3, r4, r5, lr}
 800b8ba:	460d      	mov	r5, r1
 800b8bc:	2101      	movs	r1, #1
 800b8be:	4604      	mov	r4, r0
 800b8c0:	f001 f8b4 	bl	800ca2c <ucdr_check_final_buffer_behavior>
 800b8c4:	b148      	cbz	r0, 800b8da <ucdr_serialize_bool+0x22>
 800b8c6:	68a3      	ldr	r3, [r4, #8]
 800b8c8:	701d      	strb	r5, [r3, #0]
 800b8ca:	68a2      	ldr	r2, [r4, #8]
 800b8cc:	6923      	ldr	r3, [r4, #16]
 800b8ce:	2101      	movs	r1, #1
 800b8d0:	440a      	add	r2, r1
 800b8d2:	440b      	add	r3, r1
 800b8d4:	60a2      	str	r2, [r4, #8]
 800b8d6:	6123      	str	r3, [r4, #16]
 800b8d8:	7561      	strb	r1, [r4, #21]
 800b8da:	7da0      	ldrb	r0, [r4, #22]
 800b8dc:	f080 0001 	eor.w	r0, r0, #1
 800b8e0:	bd38      	pop	{r3, r4, r5, pc}
 800b8e2:	bf00      	nop

0800b8e4 <ucdr_deserialize_bool>:
 800b8e4:	b538      	push	{r3, r4, r5, lr}
 800b8e6:	460d      	mov	r5, r1
 800b8e8:	2101      	movs	r1, #1
 800b8ea:	4604      	mov	r4, r0
 800b8ec:	f001 f89e 	bl	800ca2c <ucdr_check_final_buffer_behavior>
 800b8f0:	b160      	cbz	r0, 800b90c <ucdr_deserialize_bool+0x28>
 800b8f2:	68a2      	ldr	r2, [r4, #8]
 800b8f4:	6923      	ldr	r3, [r4, #16]
 800b8f6:	f812 1b01 	ldrb.w	r1, [r2], #1
 800b8fa:	3900      	subs	r1, #0
 800b8fc:	bf18      	it	ne
 800b8fe:	2101      	movne	r1, #1
 800b900:	7029      	strb	r1, [r5, #0]
 800b902:	3301      	adds	r3, #1
 800b904:	2101      	movs	r1, #1
 800b906:	60a2      	str	r2, [r4, #8]
 800b908:	6123      	str	r3, [r4, #16]
 800b90a:	7561      	strb	r1, [r4, #21]
 800b90c:	7da0      	ldrb	r0, [r4, #22]
 800b90e:	f080 0001 	eor.w	r0, r0, #1
 800b912:	bd38      	pop	{r3, r4, r5, pc}

0800b914 <ucdr_serialize_uint8_t>:
 800b914:	b538      	push	{r3, r4, r5, lr}
 800b916:	460d      	mov	r5, r1
 800b918:	2101      	movs	r1, #1
 800b91a:	4604      	mov	r4, r0
 800b91c:	f001 f886 	bl	800ca2c <ucdr_check_final_buffer_behavior>
 800b920:	b148      	cbz	r0, 800b936 <ucdr_serialize_uint8_t+0x22>
 800b922:	68a3      	ldr	r3, [r4, #8]
 800b924:	701d      	strb	r5, [r3, #0]
 800b926:	68a2      	ldr	r2, [r4, #8]
 800b928:	6923      	ldr	r3, [r4, #16]
 800b92a:	2101      	movs	r1, #1
 800b92c:	440a      	add	r2, r1
 800b92e:	440b      	add	r3, r1
 800b930:	60a2      	str	r2, [r4, #8]
 800b932:	6123      	str	r3, [r4, #16]
 800b934:	7561      	strb	r1, [r4, #21]
 800b936:	7da0      	ldrb	r0, [r4, #22]
 800b938:	f080 0001 	eor.w	r0, r0, #1
 800b93c:	bd38      	pop	{r3, r4, r5, pc}
 800b93e:	bf00      	nop

0800b940 <ucdr_deserialize_uint8_t>:
 800b940:	b538      	push	{r3, r4, r5, lr}
 800b942:	460d      	mov	r5, r1
 800b944:	2101      	movs	r1, #1
 800b946:	4604      	mov	r4, r0
 800b948:	f001 f870 	bl	800ca2c <ucdr_check_final_buffer_behavior>
 800b94c:	b150      	cbz	r0, 800b964 <ucdr_deserialize_uint8_t+0x24>
 800b94e:	68a3      	ldr	r3, [r4, #8]
 800b950:	781b      	ldrb	r3, [r3, #0]
 800b952:	702b      	strb	r3, [r5, #0]
 800b954:	68a2      	ldr	r2, [r4, #8]
 800b956:	6923      	ldr	r3, [r4, #16]
 800b958:	2101      	movs	r1, #1
 800b95a:	440a      	add	r2, r1
 800b95c:	440b      	add	r3, r1
 800b95e:	60a2      	str	r2, [r4, #8]
 800b960:	6123      	str	r3, [r4, #16]
 800b962:	7561      	strb	r1, [r4, #21]
 800b964:	7da0      	ldrb	r0, [r4, #22]
 800b966:	f080 0001 	eor.w	r0, r0, #1
 800b96a:	bd38      	pop	{r3, r4, r5, pc}

0800b96c <ucdr_serialize_uint16_t>:
 800b96c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b970:	b082      	sub	sp, #8
 800b972:	460b      	mov	r3, r1
 800b974:	2102      	movs	r1, #2
 800b976:	4604      	mov	r4, r0
 800b978:	f8ad 3006 	strh.w	r3, [sp, #6]
 800b97c:	f001 f8aa 	bl	800cad4 <ucdr_buffer_alignment>
 800b980:	4601      	mov	r1, r0
 800b982:	4620      	mov	r0, r4
 800b984:	7d67      	ldrb	r7, [r4, #21]
 800b986:	f001 f8e9 	bl	800cb5c <ucdr_advance_buffer>
 800b98a:	2102      	movs	r1, #2
 800b98c:	4620      	mov	r0, r4
 800b98e:	f001 f841 	bl	800ca14 <ucdr_check_buffer_available_for>
 800b992:	bb78      	cbnz	r0, 800b9f4 <ucdr_serialize_uint16_t+0x88>
 800b994:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 800b998:	42ab      	cmp	r3, r5
 800b99a:	d926      	bls.n	800b9ea <ucdr_serialize_uint16_t+0x7e>
 800b99c:	1b5e      	subs	r6, r3, r5
 800b99e:	60a3      	str	r3, [r4, #8]
 800b9a0:	6923      	ldr	r3, [r4, #16]
 800b9a2:	f1c6 0802 	rsb	r8, r6, #2
 800b9a6:	4433      	add	r3, r6
 800b9a8:	6123      	str	r3, [r4, #16]
 800b9aa:	4641      	mov	r1, r8
 800b9ac:	4620      	mov	r0, r4
 800b9ae:	f001 f83d 	bl	800ca2c <ucdr_check_final_buffer_behavior>
 800b9b2:	2800      	cmp	r0, #0
 800b9b4:	d03b      	beq.n	800ba2e <ucdr_serialize_uint16_t+0xc2>
 800b9b6:	7d23      	ldrb	r3, [r4, #20]
 800b9b8:	2b01      	cmp	r3, #1
 800b9ba:	d04a      	beq.n	800ba52 <ucdr_serialize_uint16_t+0xe6>
 800b9bc:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800b9c0:	702b      	strb	r3, [r5, #0]
 800b9c2:	2e00      	cmp	r6, #0
 800b9c4:	d040      	beq.n	800ba48 <ucdr_serialize_uint16_t+0xdc>
 800b9c6:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800b9ca:	706b      	strb	r3, [r5, #1]
 800b9cc:	6923      	ldr	r3, [r4, #16]
 800b9ce:	68a2      	ldr	r2, [r4, #8]
 800b9d0:	7da0      	ldrb	r0, [r4, #22]
 800b9d2:	3302      	adds	r3, #2
 800b9d4:	1b9e      	subs	r6, r3, r6
 800b9d6:	4442      	add	r2, r8
 800b9d8:	2302      	movs	r3, #2
 800b9da:	f080 0001 	eor.w	r0, r0, #1
 800b9de:	60a2      	str	r2, [r4, #8]
 800b9e0:	6126      	str	r6, [r4, #16]
 800b9e2:	7563      	strb	r3, [r4, #21]
 800b9e4:	b002      	add	sp, #8
 800b9e6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b9ea:	2102      	movs	r1, #2
 800b9ec:	4620      	mov	r0, r4
 800b9ee:	f001 f81d 	bl	800ca2c <ucdr_check_final_buffer_behavior>
 800b9f2:	b190      	cbz	r0, 800ba1a <ucdr_serialize_uint16_t+0xae>
 800b9f4:	7d23      	ldrb	r3, [r4, #20]
 800b9f6:	2b01      	cmp	r3, #1
 800b9f8:	68a3      	ldr	r3, [r4, #8]
 800b9fa:	d014      	beq.n	800ba26 <ucdr_serialize_uint16_t+0xba>
 800b9fc:	f89d 2007 	ldrb.w	r2, [sp, #7]
 800ba00:	701a      	strb	r2, [r3, #0]
 800ba02:	68a3      	ldr	r3, [r4, #8]
 800ba04:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800ba08:	705a      	strb	r2, [r3, #1]
 800ba0a:	68a2      	ldr	r2, [r4, #8]
 800ba0c:	6923      	ldr	r3, [r4, #16]
 800ba0e:	3202      	adds	r2, #2
 800ba10:	3302      	adds	r3, #2
 800ba12:	2102      	movs	r1, #2
 800ba14:	60a2      	str	r2, [r4, #8]
 800ba16:	6123      	str	r3, [r4, #16]
 800ba18:	7561      	strb	r1, [r4, #21]
 800ba1a:	7da0      	ldrb	r0, [r4, #22]
 800ba1c:	f080 0001 	eor.w	r0, r0, #1
 800ba20:	b002      	add	sp, #8
 800ba22:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ba26:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 800ba2a:	801a      	strh	r2, [r3, #0]
 800ba2c:	e7ed      	b.n	800ba0a <ucdr_serialize_uint16_t+0x9e>
 800ba2e:	68a2      	ldr	r2, [r4, #8]
 800ba30:	6923      	ldr	r3, [r4, #16]
 800ba32:	7da0      	ldrb	r0, [r4, #22]
 800ba34:	7567      	strb	r7, [r4, #21]
 800ba36:	1b92      	subs	r2, r2, r6
 800ba38:	1b9b      	subs	r3, r3, r6
 800ba3a:	f080 0001 	eor.w	r0, r0, #1
 800ba3e:	60a2      	str	r2, [r4, #8]
 800ba40:	6123      	str	r3, [r4, #16]
 800ba42:	b002      	add	sp, #8
 800ba44:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ba48:	68a3      	ldr	r3, [r4, #8]
 800ba4a:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800ba4e:	701a      	strb	r2, [r3, #0]
 800ba50:	e7bc      	b.n	800b9cc <ucdr_serialize_uint16_t+0x60>
 800ba52:	4628      	mov	r0, r5
 800ba54:	f10d 0506 	add.w	r5, sp, #6
 800ba58:	4629      	mov	r1, r5
 800ba5a:	4632      	mov	r2, r6
 800ba5c:	f00a f9bf 	bl	8015dde <memcpy>
 800ba60:	68a0      	ldr	r0, [r4, #8]
 800ba62:	4642      	mov	r2, r8
 800ba64:	19a9      	adds	r1, r5, r6
 800ba66:	f00a f9ba 	bl	8015dde <memcpy>
 800ba6a:	e7af      	b.n	800b9cc <ucdr_serialize_uint16_t+0x60>

0800ba6c <ucdr_serialize_endian_uint16_t>:
 800ba6c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800ba70:	b083      	sub	sp, #12
 800ba72:	460d      	mov	r5, r1
 800ba74:	2102      	movs	r1, #2
 800ba76:	4604      	mov	r4, r0
 800ba78:	f8ad 2006 	strh.w	r2, [sp, #6]
 800ba7c:	f001 f82a 	bl	800cad4 <ucdr_buffer_alignment>
 800ba80:	4601      	mov	r1, r0
 800ba82:	4620      	mov	r0, r4
 800ba84:	f894 8015 	ldrb.w	r8, [r4, #21]
 800ba88:	f001 f868 	bl	800cb5c <ucdr_advance_buffer>
 800ba8c:	2102      	movs	r1, #2
 800ba8e:	4620      	mov	r0, r4
 800ba90:	f000 ffc0 	bl	800ca14 <ucdr_check_buffer_available_for>
 800ba94:	bb70      	cbnz	r0, 800baf4 <ucdr_serialize_endian_uint16_t+0x88>
 800ba96:	e9d4 6701 	ldrd	r6, r7, [r4, #4]
 800ba9a:	42be      	cmp	r6, r7
 800ba9c:	d925      	bls.n	800baea <ucdr_serialize_endian_uint16_t+0x7e>
 800ba9e:	6923      	ldr	r3, [r4, #16]
 800baa0:	60a6      	str	r6, [r4, #8]
 800baa2:	1bf6      	subs	r6, r6, r7
 800baa4:	4433      	add	r3, r6
 800baa6:	f1c6 0902 	rsb	r9, r6, #2
 800baaa:	6123      	str	r3, [r4, #16]
 800baac:	4649      	mov	r1, r9
 800baae:	4620      	mov	r0, r4
 800bab0:	f000 ffbc 	bl	800ca2c <ucdr_check_final_buffer_behavior>
 800bab4:	2800      	cmp	r0, #0
 800bab6:	d039      	beq.n	800bb2c <ucdr_serialize_endian_uint16_t+0xc0>
 800bab8:	2d01      	cmp	r5, #1
 800baba:	d04a      	beq.n	800bb52 <ucdr_serialize_endian_uint16_t+0xe6>
 800babc:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800bac0:	703b      	strb	r3, [r7, #0]
 800bac2:	2e00      	cmp	r6, #0
 800bac4:	d040      	beq.n	800bb48 <ucdr_serialize_endian_uint16_t+0xdc>
 800bac6:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800baca:	707b      	strb	r3, [r7, #1]
 800bacc:	6923      	ldr	r3, [r4, #16]
 800bace:	68a2      	ldr	r2, [r4, #8]
 800bad0:	7da0      	ldrb	r0, [r4, #22]
 800bad2:	3302      	adds	r3, #2
 800bad4:	444a      	add	r2, r9
 800bad6:	1b9b      	subs	r3, r3, r6
 800bad8:	2102      	movs	r1, #2
 800bada:	f080 0001 	eor.w	r0, r0, #1
 800bade:	60a2      	str	r2, [r4, #8]
 800bae0:	6123      	str	r3, [r4, #16]
 800bae2:	7561      	strb	r1, [r4, #21]
 800bae4:	b003      	add	sp, #12
 800bae6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800baea:	2102      	movs	r1, #2
 800baec:	4620      	mov	r0, r4
 800baee:	f000 ff9d 	bl	800ca2c <ucdr_check_final_buffer_behavior>
 800baf2:	b188      	cbz	r0, 800bb18 <ucdr_serialize_endian_uint16_t+0xac>
 800baf4:	2d01      	cmp	r5, #1
 800baf6:	68a3      	ldr	r3, [r4, #8]
 800baf8:	d014      	beq.n	800bb24 <ucdr_serialize_endian_uint16_t+0xb8>
 800bafa:	f89d 2007 	ldrb.w	r2, [sp, #7]
 800bafe:	701a      	strb	r2, [r3, #0]
 800bb00:	68a3      	ldr	r3, [r4, #8]
 800bb02:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800bb06:	705a      	strb	r2, [r3, #1]
 800bb08:	68a2      	ldr	r2, [r4, #8]
 800bb0a:	6923      	ldr	r3, [r4, #16]
 800bb0c:	3202      	adds	r2, #2
 800bb0e:	3302      	adds	r3, #2
 800bb10:	2102      	movs	r1, #2
 800bb12:	60a2      	str	r2, [r4, #8]
 800bb14:	6123      	str	r3, [r4, #16]
 800bb16:	7561      	strb	r1, [r4, #21]
 800bb18:	7da0      	ldrb	r0, [r4, #22]
 800bb1a:	f080 0001 	eor.w	r0, r0, #1
 800bb1e:	b003      	add	sp, #12
 800bb20:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800bb24:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 800bb28:	801a      	strh	r2, [r3, #0]
 800bb2a:	e7ed      	b.n	800bb08 <ucdr_serialize_endian_uint16_t+0x9c>
 800bb2c:	68a2      	ldr	r2, [r4, #8]
 800bb2e:	6923      	ldr	r3, [r4, #16]
 800bb30:	7da0      	ldrb	r0, [r4, #22]
 800bb32:	f884 8015 	strb.w	r8, [r4, #21]
 800bb36:	1b92      	subs	r2, r2, r6
 800bb38:	1b9b      	subs	r3, r3, r6
 800bb3a:	f080 0001 	eor.w	r0, r0, #1
 800bb3e:	60a2      	str	r2, [r4, #8]
 800bb40:	6123      	str	r3, [r4, #16]
 800bb42:	b003      	add	sp, #12
 800bb44:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800bb48:	68a3      	ldr	r3, [r4, #8]
 800bb4a:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800bb4e:	701a      	strb	r2, [r3, #0]
 800bb50:	e7bc      	b.n	800bacc <ucdr_serialize_endian_uint16_t+0x60>
 800bb52:	f10d 0506 	add.w	r5, sp, #6
 800bb56:	4629      	mov	r1, r5
 800bb58:	4632      	mov	r2, r6
 800bb5a:	4638      	mov	r0, r7
 800bb5c:	f00a f93f 	bl	8015dde <memcpy>
 800bb60:	68a0      	ldr	r0, [r4, #8]
 800bb62:	464a      	mov	r2, r9
 800bb64:	19a9      	adds	r1, r5, r6
 800bb66:	f00a f93a 	bl	8015dde <memcpy>
 800bb6a:	e7af      	b.n	800bacc <ucdr_serialize_endian_uint16_t+0x60>

0800bb6c <ucdr_deserialize_uint16_t>:
 800bb6c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800bb70:	460d      	mov	r5, r1
 800bb72:	2102      	movs	r1, #2
 800bb74:	4604      	mov	r4, r0
 800bb76:	f000 ffad 	bl	800cad4 <ucdr_buffer_alignment>
 800bb7a:	4601      	mov	r1, r0
 800bb7c:	4620      	mov	r0, r4
 800bb7e:	f894 8015 	ldrb.w	r8, [r4, #21]
 800bb82:	f000 ffeb 	bl	800cb5c <ucdr_advance_buffer>
 800bb86:	2102      	movs	r1, #2
 800bb88:	4620      	mov	r0, r4
 800bb8a:	f000 ff43 	bl	800ca14 <ucdr_check_buffer_available_for>
 800bb8e:	bb60      	cbnz	r0, 800bbea <ucdr_deserialize_uint16_t+0x7e>
 800bb90:	e9d4 6701 	ldrd	r6, r7, [r4, #4]
 800bb94:	42be      	cmp	r6, r7
 800bb96:	d923      	bls.n	800bbe0 <ucdr_deserialize_uint16_t+0x74>
 800bb98:	6923      	ldr	r3, [r4, #16]
 800bb9a:	60a6      	str	r6, [r4, #8]
 800bb9c:	1bf6      	subs	r6, r6, r7
 800bb9e:	4433      	add	r3, r6
 800bba0:	f1c6 0902 	rsb	r9, r6, #2
 800bba4:	6123      	str	r3, [r4, #16]
 800bba6:	4649      	mov	r1, r9
 800bba8:	4620      	mov	r0, r4
 800bbaa:	f000 ff3f 	bl	800ca2c <ucdr_check_final_buffer_behavior>
 800bbae:	2800      	cmp	r0, #0
 800bbb0:	d034      	beq.n	800bc1c <ucdr_deserialize_uint16_t+0xb0>
 800bbb2:	7d23      	ldrb	r3, [r4, #20]
 800bbb4:	2b01      	cmp	r3, #1
 800bbb6:	d042      	beq.n	800bc3e <ucdr_deserialize_uint16_t+0xd2>
 800bbb8:	787b      	ldrb	r3, [r7, #1]
 800bbba:	702b      	strb	r3, [r5, #0]
 800bbbc:	2e00      	cmp	r6, #0
 800bbbe:	d03a      	beq.n	800bc36 <ucdr_deserialize_uint16_t+0xca>
 800bbc0:	783b      	ldrb	r3, [r7, #0]
 800bbc2:	706b      	strb	r3, [r5, #1]
 800bbc4:	6923      	ldr	r3, [r4, #16]
 800bbc6:	68a2      	ldr	r2, [r4, #8]
 800bbc8:	7da0      	ldrb	r0, [r4, #22]
 800bbca:	2102      	movs	r1, #2
 800bbcc:	3302      	adds	r3, #2
 800bbce:	444a      	add	r2, r9
 800bbd0:	1b9b      	subs	r3, r3, r6
 800bbd2:	7561      	strb	r1, [r4, #21]
 800bbd4:	60a2      	str	r2, [r4, #8]
 800bbd6:	6123      	str	r3, [r4, #16]
 800bbd8:	f080 0001 	eor.w	r0, r0, #1
 800bbdc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800bbe0:	2102      	movs	r1, #2
 800bbe2:	4620      	mov	r0, r4
 800bbe4:	f000 ff22 	bl	800ca2c <ucdr_check_final_buffer_behavior>
 800bbe8:	b180      	cbz	r0, 800bc0c <ucdr_deserialize_uint16_t+0xa0>
 800bbea:	7d23      	ldrb	r3, [r4, #20]
 800bbec:	2b01      	cmp	r3, #1
 800bbee:	68a3      	ldr	r3, [r4, #8]
 800bbf0:	d011      	beq.n	800bc16 <ucdr_deserialize_uint16_t+0xaa>
 800bbf2:	785b      	ldrb	r3, [r3, #1]
 800bbf4:	702b      	strb	r3, [r5, #0]
 800bbf6:	68a3      	ldr	r3, [r4, #8]
 800bbf8:	781b      	ldrb	r3, [r3, #0]
 800bbfa:	706b      	strb	r3, [r5, #1]
 800bbfc:	68a2      	ldr	r2, [r4, #8]
 800bbfe:	6923      	ldr	r3, [r4, #16]
 800bc00:	3202      	adds	r2, #2
 800bc02:	3302      	adds	r3, #2
 800bc04:	2102      	movs	r1, #2
 800bc06:	60a2      	str	r2, [r4, #8]
 800bc08:	6123      	str	r3, [r4, #16]
 800bc0a:	7561      	strb	r1, [r4, #21]
 800bc0c:	7da0      	ldrb	r0, [r4, #22]
 800bc0e:	f080 0001 	eor.w	r0, r0, #1
 800bc12:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800bc16:	881b      	ldrh	r3, [r3, #0]
 800bc18:	802b      	strh	r3, [r5, #0]
 800bc1a:	e7ef      	b.n	800bbfc <ucdr_deserialize_uint16_t+0x90>
 800bc1c:	68a2      	ldr	r2, [r4, #8]
 800bc1e:	6923      	ldr	r3, [r4, #16]
 800bc20:	7da0      	ldrb	r0, [r4, #22]
 800bc22:	f884 8015 	strb.w	r8, [r4, #21]
 800bc26:	1b92      	subs	r2, r2, r6
 800bc28:	1b9b      	subs	r3, r3, r6
 800bc2a:	60a2      	str	r2, [r4, #8]
 800bc2c:	6123      	str	r3, [r4, #16]
 800bc2e:	f080 0001 	eor.w	r0, r0, #1
 800bc32:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800bc36:	68a3      	ldr	r3, [r4, #8]
 800bc38:	781b      	ldrb	r3, [r3, #0]
 800bc3a:	706b      	strb	r3, [r5, #1]
 800bc3c:	e7c2      	b.n	800bbc4 <ucdr_deserialize_uint16_t+0x58>
 800bc3e:	4639      	mov	r1, r7
 800bc40:	4632      	mov	r2, r6
 800bc42:	4628      	mov	r0, r5
 800bc44:	f00a f8cb 	bl	8015dde <memcpy>
 800bc48:	68a1      	ldr	r1, [r4, #8]
 800bc4a:	464a      	mov	r2, r9
 800bc4c:	19a8      	adds	r0, r5, r6
 800bc4e:	f00a f8c6 	bl	8015dde <memcpy>
 800bc52:	e7b7      	b.n	800bbc4 <ucdr_deserialize_uint16_t+0x58>

0800bc54 <ucdr_deserialize_endian_uint16_t>:
 800bc54:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800bc58:	460e      	mov	r6, r1
 800bc5a:	2102      	movs	r1, #2
 800bc5c:	4604      	mov	r4, r0
 800bc5e:	4615      	mov	r5, r2
 800bc60:	f000 ff38 	bl	800cad4 <ucdr_buffer_alignment>
 800bc64:	4601      	mov	r1, r0
 800bc66:	4620      	mov	r0, r4
 800bc68:	f894 9015 	ldrb.w	r9, [r4, #21]
 800bc6c:	f000 ff76 	bl	800cb5c <ucdr_advance_buffer>
 800bc70:	2102      	movs	r1, #2
 800bc72:	4620      	mov	r0, r4
 800bc74:	f000 fece 	bl	800ca14 <ucdr_check_buffer_available_for>
 800bc78:	bb70      	cbnz	r0, 800bcd8 <ucdr_deserialize_endian_uint16_t+0x84>
 800bc7a:	e9d4 7801 	ldrd	r7, r8, [r4, #4]
 800bc7e:	4547      	cmp	r7, r8
 800bc80:	d925      	bls.n	800bcce <ucdr_deserialize_endian_uint16_t+0x7a>
 800bc82:	6923      	ldr	r3, [r4, #16]
 800bc84:	60a7      	str	r7, [r4, #8]
 800bc86:	eba7 0708 	sub.w	r7, r7, r8
 800bc8a:	443b      	add	r3, r7
 800bc8c:	f1c7 0a02 	rsb	sl, r7, #2
 800bc90:	6123      	str	r3, [r4, #16]
 800bc92:	4651      	mov	r1, sl
 800bc94:	4620      	mov	r0, r4
 800bc96:	f000 fec9 	bl	800ca2c <ucdr_check_final_buffer_behavior>
 800bc9a:	2800      	cmp	r0, #0
 800bc9c:	d034      	beq.n	800bd08 <ucdr_deserialize_endian_uint16_t+0xb4>
 800bc9e:	2e01      	cmp	r6, #1
 800bca0:	d043      	beq.n	800bd2a <ucdr_deserialize_endian_uint16_t+0xd6>
 800bca2:	f898 3001 	ldrb.w	r3, [r8, #1]
 800bca6:	702b      	strb	r3, [r5, #0]
 800bca8:	2f00      	cmp	r7, #0
 800bcaa:	d03a      	beq.n	800bd22 <ucdr_deserialize_endian_uint16_t+0xce>
 800bcac:	f898 3000 	ldrb.w	r3, [r8]
 800bcb0:	706b      	strb	r3, [r5, #1]
 800bcb2:	6923      	ldr	r3, [r4, #16]
 800bcb4:	68a2      	ldr	r2, [r4, #8]
 800bcb6:	7da0      	ldrb	r0, [r4, #22]
 800bcb8:	2102      	movs	r1, #2
 800bcba:	3302      	adds	r3, #2
 800bcbc:	4452      	add	r2, sl
 800bcbe:	1bdb      	subs	r3, r3, r7
 800bcc0:	7561      	strb	r1, [r4, #21]
 800bcc2:	60a2      	str	r2, [r4, #8]
 800bcc4:	6123      	str	r3, [r4, #16]
 800bcc6:	f080 0001 	eor.w	r0, r0, #1
 800bcca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bcce:	2102      	movs	r1, #2
 800bcd0:	4620      	mov	r0, r4
 800bcd2:	f000 feab 	bl	800ca2c <ucdr_check_final_buffer_behavior>
 800bcd6:	b178      	cbz	r0, 800bcf8 <ucdr_deserialize_endian_uint16_t+0xa4>
 800bcd8:	2e01      	cmp	r6, #1
 800bcda:	68a3      	ldr	r3, [r4, #8]
 800bcdc:	d011      	beq.n	800bd02 <ucdr_deserialize_endian_uint16_t+0xae>
 800bcde:	785b      	ldrb	r3, [r3, #1]
 800bce0:	702b      	strb	r3, [r5, #0]
 800bce2:	68a3      	ldr	r3, [r4, #8]
 800bce4:	781b      	ldrb	r3, [r3, #0]
 800bce6:	706b      	strb	r3, [r5, #1]
 800bce8:	68a2      	ldr	r2, [r4, #8]
 800bcea:	6923      	ldr	r3, [r4, #16]
 800bcec:	3202      	adds	r2, #2
 800bcee:	3302      	adds	r3, #2
 800bcf0:	2102      	movs	r1, #2
 800bcf2:	60a2      	str	r2, [r4, #8]
 800bcf4:	6123      	str	r3, [r4, #16]
 800bcf6:	7561      	strb	r1, [r4, #21]
 800bcf8:	7da0      	ldrb	r0, [r4, #22]
 800bcfa:	f080 0001 	eor.w	r0, r0, #1
 800bcfe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bd02:	881b      	ldrh	r3, [r3, #0]
 800bd04:	802b      	strh	r3, [r5, #0]
 800bd06:	e7ef      	b.n	800bce8 <ucdr_deserialize_endian_uint16_t+0x94>
 800bd08:	68a2      	ldr	r2, [r4, #8]
 800bd0a:	6923      	ldr	r3, [r4, #16]
 800bd0c:	7da0      	ldrb	r0, [r4, #22]
 800bd0e:	f884 9015 	strb.w	r9, [r4, #21]
 800bd12:	1bd2      	subs	r2, r2, r7
 800bd14:	1bdb      	subs	r3, r3, r7
 800bd16:	60a2      	str	r2, [r4, #8]
 800bd18:	6123      	str	r3, [r4, #16]
 800bd1a:	f080 0001 	eor.w	r0, r0, #1
 800bd1e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bd22:	68a3      	ldr	r3, [r4, #8]
 800bd24:	781b      	ldrb	r3, [r3, #0]
 800bd26:	706b      	strb	r3, [r5, #1]
 800bd28:	e7c3      	b.n	800bcb2 <ucdr_deserialize_endian_uint16_t+0x5e>
 800bd2a:	4641      	mov	r1, r8
 800bd2c:	463a      	mov	r2, r7
 800bd2e:	4628      	mov	r0, r5
 800bd30:	f00a f855 	bl	8015dde <memcpy>
 800bd34:	68a1      	ldr	r1, [r4, #8]
 800bd36:	4652      	mov	r2, sl
 800bd38:	19e8      	adds	r0, r5, r7
 800bd3a:	f00a f850 	bl	8015dde <memcpy>
 800bd3e:	e7b8      	b.n	800bcb2 <ucdr_deserialize_endian_uint16_t+0x5e>

0800bd40 <ucdr_serialize_uint32_t>:
 800bd40:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bd44:	b082      	sub	sp, #8
 800bd46:	4604      	mov	r4, r0
 800bd48:	9101      	str	r1, [sp, #4]
 800bd4a:	2104      	movs	r1, #4
 800bd4c:	f000 fec2 	bl	800cad4 <ucdr_buffer_alignment>
 800bd50:	4601      	mov	r1, r0
 800bd52:	4620      	mov	r0, r4
 800bd54:	7d67      	ldrb	r7, [r4, #21]
 800bd56:	f000 ff01 	bl	800cb5c <ucdr_advance_buffer>
 800bd5a:	2104      	movs	r1, #4
 800bd5c:	4620      	mov	r0, r4
 800bd5e:	f000 fe59 	bl	800ca14 <ucdr_check_buffer_available_for>
 800bd62:	2800      	cmp	r0, #0
 800bd64:	d139      	bne.n	800bdda <ucdr_serialize_uint32_t+0x9a>
 800bd66:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 800bd6a:	42ab      	cmp	r3, r5
 800bd6c:	d930      	bls.n	800bdd0 <ucdr_serialize_uint32_t+0x90>
 800bd6e:	1b5e      	subs	r6, r3, r5
 800bd70:	60a3      	str	r3, [r4, #8]
 800bd72:	6923      	ldr	r3, [r4, #16]
 800bd74:	f1c6 0804 	rsb	r8, r6, #4
 800bd78:	4433      	add	r3, r6
 800bd7a:	6123      	str	r3, [r4, #16]
 800bd7c:	4641      	mov	r1, r8
 800bd7e:	4620      	mov	r0, r4
 800bd80:	f000 fe54 	bl	800ca2c <ucdr_check_final_buffer_behavior>
 800bd84:	2800      	cmp	r0, #0
 800bd86:	d04c      	beq.n	800be22 <ucdr_serialize_uint32_t+0xe2>
 800bd88:	7d23      	ldrb	r3, [r4, #20]
 800bd8a:	2b01      	cmp	r3, #1
 800bd8c:	d063      	beq.n	800be56 <ucdr_serialize_uint32_t+0x116>
 800bd8e:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800bd92:	702b      	strb	r3, [r5, #0]
 800bd94:	2e00      	cmp	r6, #0
 800bd96:	d051      	beq.n	800be3c <ucdr_serialize_uint32_t+0xfc>
 800bd98:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800bd9c:	706b      	strb	r3, [r5, #1]
 800bd9e:	2e01      	cmp	r6, #1
 800bda0:	d050      	beq.n	800be44 <ucdr_serialize_uint32_t+0x104>
 800bda2:	f89d 3005 	ldrb.w	r3, [sp, #5]
 800bda6:	70ab      	strb	r3, [r5, #2]
 800bda8:	2e02      	cmp	r6, #2
 800bdaa:	d04f      	beq.n	800be4c <ucdr_serialize_uint32_t+0x10c>
 800bdac:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800bdb0:	70eb      	strb	r3, [r5, #3]
 800bdb2:	6923      	ldr	r3, [r4, #16]
 800bdb4:	68a2      	ldr	r2, [r4, #8]
 800bdb6:	7da0      	ldrb	r0, [r4, #22]
 800bdb8:	3304      	adds	r3, #4
 800bdba:	1b9e      	subs	r6, r3, r6
 800bdbc:	4442      	add	r2, r8
 800bdbe:	2304      	movs	r3, #4
 800bdc0:	f080 0001 	eor.w	r0, r0, #1
 800bdc4:	60a2      	str	r2, [r4, #8]
 800bdc6:	6126      	str	r6, [r4, #16]
 800bdc8:	7563      	strb	r3, [r4, #21]
 800bdca:	b002      	add	sp, #8
 800bdcc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bdd0:	2104      	movs	r1, #4
 800bdd2:	4620      	mov	r0, r4
 800bdd4:	f000 fe2a 	bl	800ca2c <ucdr_check_final_buffer_behavior>
 800bdd8:	b1d0      	cbz	r0, 800be10 <ucdr_serialize_uint32_t+0xd0>
 800bdda:	7d23      	ldrb	r3, [r4, #20]
 800bddc:	2b01      	cmp	r3, #1
 800bdde:	68a3      	ldr	r3, [r4, #8]
 800bde0:	d01c      	beq.n	800be1c <ucdr_serialize_uint32_t+0xdc>
 800bde2:	f89d 2007 	ldrb.w	r2, [sp, #7]
 800bde6:	701a      	strb	r2, [r3, #0]
 800bde8:	68a3      	ldr	r3, [r4, #8]
 800bdea:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800bdee:	705a      	strb	r2, [r3, #1]
 800bdf0:	68a3      	ldr	r3, [r4, #8]
 800bdf2:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800bdf6:	709a      	strb	r2, [r3, #2]
 800bdf8:	68a3      	ldr	r3, [r4, #8]
 800bdfa:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800bdfe:	70da      	strb	r2, [r3, #3]
 800be00:	68a2      	ldr	r2, [r4, #8]
 800be02:	6923      	ldr	r3, [r4, #16]
 800be04:	3204      	adds	r2, #4
 800be06:	3304      	adds	r3, #4
 800be08:	2104      	movs	r1, #4
 800be0a:	60a2      	str	r2, [r4, #8]
 800be0c:	6123      	str	r3, [r4, #16]
 800be0e:	7561      	strb	r1, [r4, #21]
 800be10:	7da0      	ldrb	r0, [r4, #22]
 800be12:	f080 0001 	eor.w	r0, r0, #1
 800be16:	b002      	add	sp, #8
 800be18:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800be1c:	9a01      	ldr	r2, [sp, #4]
 800be1e:	601a      	str	r2, [r3, #0]
 800be20:	e7ee      	b.n	800be00 <ucdr_serialize_uint32_t+0xc0>
 800be22:	68a2      	ldr	r2, [r4, #8]
 800be24:	6923      	ldr	r3, [r4, #16]
 800be26:	7da0      	ldrb	r0, [r4, #22]
 800be28:	7567      	strb	r7, [r4, #21]
 800be2a:	1b92      	subs	r2, r2, r6
 800be2c:	1b9b      	subs	r3, r3, r6
 800be2e:	f080 0001 	eor.w	r0, r0, #1
 800be32:	60a2      	str	r2, [r4, #8]
 800be34:	6123      	str	r3, [r4, #16]
 800be36:	b002      	add	sp, #8
 800be38:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800be3c:	68a3      	ldr	r3, [r4, #8]
 800be3e:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800be42:	701a      	strb	r2, [r3, #0]
 800be44:	68a3      	ldr	r3, [r4, #8]
 800be46:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800be4a:	701a      	strb	r2, [r3, #0]
 800be4c:	68a3      	ldr	r3, [r4, #8]
 800be4e:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800be52:	701a      	strb	r2, [r3, #0]
 800be54:	e7ad      	b.n	800bdb2 <ucdr_serialize_uint32_t+0x72>
 800be56:	4628      	mov	r0, r5
 800be58:	ad01      	add	r5, sp, #4
 800be5a:	4629      	mov	r1, r5
 800be5c:	4632      	mov	r2, r6
 800be5e:	f009 ffbe 	bl	8015dde <memcpy>
 800be62:	68a0      	ldr	r0, [r4, #8]
 800be64:	4642      	mov	r2, r8
 800be66:	19a9      	adds	r1, r5, r6
 800be68:	f009 ffb9 	bl	8015dde <memcpy>
 800be6c:	e7a1      	b.n	800bdb2 <ucdr_serialize_uint32_t+0x72>
 800be6e:	bf00      	nop

0800be70 <ucdr_serialize_endian_uint32_t>:
 800be70:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800be74:	b083      	sub	sp, #12
 800be76:	460d      	mov	r5, r1
 800be78:	2104      	movs	r1, #4
 800be7a:	4604      	mov	r4, r0
 800be7c:	9201      	str	r2, [sp, #4]
 800be7e:	f000 fe29 	bl	800cad4 <ucdr_buffer_alignment>
 800be82:	4601      	mov	r1, r0
 800be84:	4620      	mov	r0, r4
 800be86:	f894 8015 	ldrb.w	r8, [r4, #21]
 800be8a:	f000 fe67 	bl	800cb5c <ucdr_advance_buffer>
 800be8e:	2104      	movs	r1, #4
 800be90:	4620      	mov	r0, r4
 800be92:	f000 fdbf 	bl	800ca14 <ucdr_check_buffer_available_for>
 800be96:	2800      	cmp	r0, #0
 800be98:	d138      	bne.n	800bf0c <ucdr_serialize_endian_uint32_t+0x9c>
 800be9a:	e9d4 7601 	ldrd	r7, r6, [r4, #4]
 800be9e:	42b7      	cmp	r7, r6
 800bea0:	d92f      	bls.n	800bf02 <ucdr_serialize_endian_uint32_t+0x92>
 800bea2:	6923      	ldr	r3, [r4, #16]
 800bea4:	60a7      	str	r7, [r4, #8]
 800bea6:	1bbf      	subs	r7, r7, r6
 800bea8:	443b      	add	r3, r7
 800beaa:	f1c7 0904 	rsb	r9, r7, #4
 800beae:	6123      	str	r3, [r4, #16]
 800beb0:	4649      	mov	r1, r9
 800beb2:	4620      	mov	r0, r4
 800beb4:	f000 fdba 	bl	800ca2c <ucdr_check_final_buffer_behavior>
 800beb8:	2800      	cmp	r0, #0
 800beba:	d04a      	beq.n	800bf52 <ucdr_serialize_endian_uint32_t+0xe2>
 800bebc:	2d01      	cmp	r5, #1
 800bebe:	d063      	beq.n	800bf88 <ucdr_serialize_endian_uint32_t+0x118>
 800bec0:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800bec4:	7033      	strb	r3, [r6, #0]
 800bec6:	2f00      	cmp	r7, #0
 800bec8:	d051      	beq.n	800bf6e <ucdr_serialize_endian_uint32_t+0xfe>
 800beca:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800bece:	7073      	strb	r3, [r6, #1]
 800bed0:	2f01      	cmp	r7, #1
 800bed2:	d050      	beq.n	800bf76 <ucdr_serialize_endian_uint32_t+0x106>
 800bed4:	f89d 3005 	ldrb.w	r3, [sp, #5]
 800bed8:	70b3      	strb	r3, [r6, #2]
 800beda:	2f02      	cmp	r7, #2
 800bedc:	d04f      	beq.n	800bf7e <ucdr_serialize_endian_uint32_t+0x10e>
 800bede:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800bee2:	70f3      	strb	r3, [r6, #3]
 800bee4:	6923      	ldr	r3, [r4, #16]
 800bee6:	68a2      	ldr	r2, [r4, #8]
 800bee8:	7da0      	ldrb	r0, [r4, #22]
 800beea:	3304      	adds	r3, #4
 800beec:	444a      	add	r2, r9
 800beee:	1bdb      	subs	r3, r3, r7
 800bef0:	2104      	movs	r1, #4
 800bef2:	f080 0001 	eor.w	r0, r0, #1
 800bef6:	60a2      	str	r2, [r4, #8]
 800bef8:	6123      	str	r3, [r4, #16]
 800befa:	7561      	strb	r1, [r4, #21]
 800befc:	b003      	add	sp, #12
 800befe:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800bf02:	2104      	movs	r1, #4
 800bf04:	4620      	mov	r0, r4
 800bf06:	f000 fd91 	bl	800ca2c <ucdr_check_final_buffer_behavior>
 800bf0a:	b1c8      	cbz	r0, 800bf40 <ucdr_serialize_endian_uint32_t+0xd0>
 800bf0c:	2d01      	cmp	r5, #1
 800bf0e:	68a3      	ldr	r3, [r4, #8]
 800bf10:	d01c      	beq.n	800bf4c <ucdr_serialize_endian_uint32_t+0xdc>
 800bf12:	f89d 2007 	ldrb.w	r2, [sp, #7]
 800bf16:	701a      	strb	r2, [r3, #0]
 800bf18:	68a3      	ldr	r3, [r4, #8]
 800bf1a:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800bf1e:	705a      	strb	r2, [r3, #1]
 800bf20:	68a3      	ldr	r3, [r4, #8]
 800bf22:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800bf26:	709a      	strb	r2, [r3, #2]
 800bf28:	68a3      	ldr	r3, [r4, #8]
 800bf2a:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800bf2e:	70da      	strb	r2, [r3, #3]
 800bf30:	68a2      	ldr	r2, [r4, #8]
 800bf32:	6923      	ldr	r3, [r4, #16]
 800bf34:	3204      	adds	r2, #4
 800bf36:	3304      	adds	r3, #4
 800bf38:	2104      	movs	r1, #4
 800bf3a:	60a2      	str	r2, [r4, #8]
 800bf3c:	6123      	str	r3, [r4, #16]
 800bf3e:	7561      	strb	r1, [r4, #21]
 800bf40:	7da0      	ldrb	r0, [r4, #22]
 800bf42:	f080 0001 	eor.w	r0, r0, #1
 800bf46:	b003      	add	sp, #12
 800bf48:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800bf4c:	9a01      	ldr	r2, [sp, #4]
 800bf4e:	601a      	str	r2, [r3, #0]
 800bf50:	e7ee      	b.n	800bf30 <ucdr_serialize_endian_uint32_t+0xc0>
 800bf52:	68a2      	ldr	r2, [r4, #8]
 800bf54:	6923      	ldr	r3, [r4, #16]
 800bf56:	7da0      	ldrb	r0, [r4, #22]
 800bf58:	f884 8015 	strb.w	r8, [r4, #21]
 800bf5c:	1bd2      	subs	r2, r2, r7
 800bf5e:	1bdb      	subs	r3, r3, r7
 800bf60:	f080 0001 	eor.w	r0, r0, #1
 800bf64:	60a2      	str	r2, [r4, #8]
 800bf66:	6123      	str	r3, [r4, #16]
 800bf68:	b003      	add	sp, #12
 800bf6a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800bf6e:	68a3      	ldr	r3, [r4, #8]
 800bf70:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800bf74:	701a      	strb	r2, [r3, #0]
 800bf76:	68a3      	ldr	r3, [r4, #8]
 800bf78:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800bf7c:	701a      	strb	r2, [r3, #0]
 800bf7e:	68a3      	ldr	r3, [r4, #8]
 800bf80:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800bf84:	701a      	strb	r2, [r3, #0]
 800bf86:	e7ad      	b.n	800bee4 <ucdr_serialize_endian_uint32_t+0x74>
 800bf88:	ad01      	add	r5, sp, #4
 800bf8a:	4629      	mov	r1, r5
 800bf8c:	463a      	mov	r2, r7
 800bf8e:	4630      	mov	r0, r6
 800bf90:	f009 ff25 	bl	8015dde <memcpy>
 800bf94:	68a0      	ldr	r0, [r4, #8]
 800bf96:	464a      	mov	r2, r9
 800bf98:	19e9      	adds	r1, r5, r7
 800bf9a:	f009 ff20 	bl	8015dde <memcpy>
 800bf9e:	e7a1      	b.n	800bee4 <ucdr_serialize_endian_uint32_t+0x74>

0800bfa0 <ucdr_deserialize_uint32_t>:
 800bfa0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800bfa4:	460d      	mov	r5, r1
 800bfa6:	2104      	movs	r1, #4
 800bfa8:	4604      	mov	r4, r0
 800bfaa:	f000 fd93 	bl	800cad4 <ucdr_buffer_alignment>
 800bfae:	4601      	mov	r1, r0
 800bfb0:	4620      	mov	r0, r4
 800bfb2:	f894 8015 	ldrb.w	r8, [r4, #21]
 800bfb6:	f000 fdd1 	bl	800cb5c <ucdr_advance_buffer>
 800bfba:	2104      	movs	r1, #4
 800bfbc:	4620      	mov	r0, r4
 800bfbe:	f000 fd29 	bl	800ca14 <ucdr_check_buffer_available_for>
 800bfc2:	2800      	cmp	r0, #0
 800bfc4:	d138      	bne.n	800c038 <ucdr_deserialize_uint32_t+0x98>
 800bfc6:	e9d4 7601 	ldrd	r7, r6, [r4, #4]
 800bfca:	42b7      	cmp	r7, r6
 800bfcc:	d92f      	bls.n	800c02e <ucdr_deserialize_uint32_t+0x8e>
 800bfce:	6923      	ldr	r3, [r4, #16]
 800bfd0:	60a7      	str	r7, [r4, #8]
 800bfd2:	1bbf      	subs	r7, r7, r6
 800bfd4:	443b      	add	r3, r7
 800bfd6:	f1c7 0904 	rsb	r9, r7, #4
 800bfda:	6123      	str	r3, [r4, #16]
 800bfdc:	4649      	mov	r1, r9
 800bfde:	4620      	mov	r0, r4
 800bfe0:	f000 fd24 	bl	800ca2c <ucdr_check_final_buffer_behavior>
 800bfe4:	2800      	cmp	r0, #0
 800bfe6:	d046      	beq.n	800c076 <ucdr_deserialize_uint32_t+0xd6>
 800bfe8:	7d23      	ldrb	r3, [r4, #20]
 800bfea:	2b01      	cmp	r3, #1
 800bfec:	d05c      	beq.n	800c0a8 <ucdr_deserialize_uint32_t+0x108>
 800bfee:	78f3      	ldrb	r3, [r6, #3]
 800bff0:	702b      	strb	r3, [r5, #0]
 800bff2:	2f00      	cmp	r7, #0
 800bff4:	d04c      	beq.n	800c090 <ucdr_deserialize_uint32_t+0xf0>
 800bff6:	78b3      	ldrb	r3, [r6, #2]
 800bff8:	706b      	strb	r3, [r5, #1]
 800bffa:	2f01      	cmp	r7, #1
 800bffc:	f105 0302 	add.w	r3, r5, #2
 800c000:	d04a      	beq.n	800c098 <ucdr_deserialize_uint32_t+0xf8>
 800c002:	7873      	ldrb	r3, [r6, #1]
 800c004:	70ab      	strb	r3, [r5, #2]
 800c006:	2f02      	cmp	r7, #2
 800c008:	f105 0303 	add.w	r3, r5, #3
 800c00c:	d048      	beq.n	800c0a0 <ucdr_deserialize_uint32_t+0x100>
 800c00e:	7833      	ldrb	r3, [r6, #0]
 800c010:	70eb      	strb	r3, [r5, #3]
 800c012:	6923      	ldr	r3, [r4, #16]
 800c014:	68a2      	ldr	r2, [r4, #8]
 800c016:	7da0      	ldrb	r0, [r4, #22]
 800c018:	2104      	movs	r1, #4
 800c01a:	3304      	adds	r3, #4
 800c01c:	444a      	add	r2, r9
 800c01e:	1bdb      	subs	r3, r3, r7
 800c020:	7561      	strb	r1, [r4, #21]
 800c022:	60a2      	str	r2, [r4, #8]
 800c024:	6123      	str	r3, [r4, #16]
 800c026:	f080 0001 	eor.w	r0, r0, #1
 800c02a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c02e:	2104      	movs	r1, #4
 800c030:	4620      	mov	r0, r4
 800c032:	f000 fcfb 	bl	800ca2c <ucdr_check_final_buffer_behavior>
 800c036:	b1b0      	cbz	r0, 800c066 <ucdr_deserialize_uint32_t+0xc6>
 800c038:	7d23      	ldrb	r3, [r4, #20]
 800c03a:	2b01      	cmp	r3, #1
 800c03c:	68a3      	ldr	r3, [r4, #8]
 800c03e:	d017      	beq.n	800c070 <ucdr_deserialize_uint32_t+0xd0>
 800c040:	78db      	ldrb	r3, [r3, #3]
 800c042:	702b      	strb	r3, [r5, #0]
 800c044:	68a3      	ldr	r3, [r4, #8]
 800c046:	789b      	ldrb	r3, [r3, #2]
 800c048:	706b      	strb	r3, [r5, #1]
 800c04a:	68a3      	ldr	r3, [r4, #8]
 800c04c:	785b      	ldrb	r3, [r3, #1]
 800c04e:	70ab      	strb	r3, [r5, #2]
 800c050:	68a3      	ldr	r3, [r4, #8]
 800c052:	781b      	ldrb	r3, [r3, #0]
 800c054:	70eb      	strb	r3, [r5, #3]
 800c056:	68a2      	ldr	r2, [r4, #8]
 800c058:	6923      	ldr	r3, [r4, #16]
 800c05a:	3204      	adds	r2, #4
 800c05c:	3304      	adds	r3, #4
 800c05e:	2104      	movs	r1, #4
 800c060:	60a2      	str	r2, [r4, #8]
 800c062:	6123      	str	r3, [r4, #16]
 800c064:	7561      	strb	r1, [r4, #21]
 800c066:	7da0      	ldrb	r0, [r4, #22]
 800c068:	f080 0001 	eor.w	r0, r0, #1
 800c06c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c070:	681b      	ldr	r3, [r3, #0]
 800c072:	602b      	str	r3, [r5, #0]
 800c074:	e7ef      	b.n	800c056 <ucdr_deserialize_uint32_t+0xb6>
 800c076:	68a2      	ldr	r2, [r4, #8]
 800c078:	6923      	ldr	r3, [r4, #16]
 800c07a:	7da0      	ldrb	r0, [r4, #22]
 800c07c:	f884 8015 	strb.w	r8, [r4, #21]
 800c080:	1bd2      	subs	r2, r2, r7
 800c082:	1bdb      	subs	r3, r3, r7
 800c084:	60a2      	str	r2, [r4, #8]
 800c086:	6123      	str	r3, [r4, #16]
 800c088:	f080 0001 	eor.w	r0, r0, #1
 800c08c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c090:	68a3      	ldr	r3, [r4, #8]
 800c092:	789b      	ldrb	r3, [r3, #2]
 800c094:	706b      	strb	r3, [r5, #1]
 800c096:	1cab      	adds	r3, r5, #2
 800c098:	68a2      	ldr	r2, [r4, #8]
 800c09a:	7852      	ldrb	r2, [r2, #1]
 800c09c:	f803 2b01 	strb.w	r2, [r3], #1
 800c0a0:	68a2      	ldr	r2, [r4, #8]
 800c0a2:	7812      	ldrb	r2, [r2, #0]
 800c0a4:	701a      	strb	r2, [r3, #0]
 800c0a6:	e7b4      	b.n	800c012 <ucdr_deserialize_uint32_t+0x72>
 800c0a8:	4631      	mov	r1, r6
 800c0aa:	463a      	mov	r2, r7
 800c0ac:	4628      	mov	r0, r5
 800c0ae:	f009 fe96 	bl	8015dde <memcpy>
 800c0b2:	68a1      	ldr	r1, [r4, #8]
 800c0b4:	464a      	mov	r2, r9
 800c0b6:	19e8      	adds	r0, r5, r7
 800c0b8:	f009 fe91 	bl	8015dde <memcpy>
 800c0bc:	e7a9      	b.n	800c012 <ucdr_deserialize_uint32_t+0x72>
 800c0be:	bf00      	nop

0800c0c0 <ucdr_deserialize_endian_uint32_t>:
 800c0c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c0c4:	460e      	mov	r6, r1
 800c0c6:	2104      	movs	r1, #4
 800c0c8:	4604      	mov	r4, r0
 800c0ca:	4615      	mov	r5, r2
 800c0cc:	f000 fd02 	bl	800cad4 <ucdr_buffer_alignment>
 800c0d0:	4601      	mov	r1, r0
 800c0d2:	4620      	mov	r0, r4
 800c0d4:	f894 9015 	ldrb.w	r9, [r4, #21]
 800c0d8:	f000 fd40 	bl	800cb5c <ucdr_advance_buffer>
 800c0dc:	2104      	movs	r1, #4
 800c0de:	4620      	mov	r0, r4
 800c0e0:	f000 fc98 	bl	800ca14 <ucdr_check_buffer_available_for>
 800c0e4:	2800      	cmp	r0, #0
 800c0e6:	d13c      	bne.n	800c162 <ucdr_deserialize_endian_uint32_t+0xa2>
 800c0e8:	e9d4 3701 	ldrd	r3, r7, [r4, #4]
 800c0ec:	42bb      	cmp	r3, r7
 800c0ee:	d933      	bls.n	800c158 <ucdr_deserialize_endian_uint32_t+0x98>
 800c0f0:	eba3 0807 	sub.w	r8, r3, r7
 800c0f4:	60a3      	str	r3, [r4, #8]
 800c0f6:	6923      	ldr	r3, [r4, #16]
 800c0f8:	f1c8 0a04 	rsb	sl, r8, #4
 800c0fc:	4443      	add	r3, r8
 800c0fe:	6123      	str	r3, [r4, #16]
 800c100:	4651      	mov	r1, sl
 800c102:	4620      	mov	r0, r4
 800c104:	f000 fc92 	bl	800ca2c <ucdr_check_final_buffer_behavior>
 800c108:	2800      	cmp	r0, #0
 800c10a:	d048      	beq.n	800c19e <ucdr_deserialize_endian_uint32_t+0xde>
 800c10c:	2e01      	cmp	r6, #1
 800c10e:	d061      	beq.n	800c1d4 <ucdr_deserialize_endian_uint32_t+0x114>
 800c110:	78fb      	ldrb	r3, [r7, #3]
 800c112:	702b      	strb	r3, [r5, #0]
 800c114:	f1b8 0f00 	cmp.w	r8, #0
 800c118:	d050      	beq.n	800c1bc <ucdr_deserialize_endian_uint32_t+0xfc>
 800c11a:	78bb      	ldrb	r3, [r7, #2]
 800c11c:	706b      	strb	r3, [r5, #1]
 800c11e:	f1b8 0f01 	cmp.w	r8, #1
 800c122:	f105 0302 	add.w	r3, r5, #2
 800c126:	d04d      	beq.n	800c1c4 <ucdr_deserialize_endian_uint32_t+0x104>
 800c128:	787b      	ldrb	r3, [r7, #1]
 800c12a:	70ab      	strb	r3, [r5, #2]
 800c12c:	f1b8 0f02 	cmp.w	r8, #2
 800c130:	f105 0303 	add.w	r3, r5, #3
 800c134:	d04a      	beq.n	800c1cc <ucdr_deserialize_endian_uint32_t+0x10c>
 800c136:	783b      	ldrb	r3, [r7, #0]
 800c138:	70eb      	strb	r3, [r5, #3]
 800c13a:	6923      	ldr	r3, [r4, #16]
 800c13c:	68a2      	ldr	r2, [r4, #8]
 800c13e:	7da0      	ldrb	r0, [r4, #22]
 800c140:	2104      	movs	r1, #4
 800c142:	3304      	adds	r3, #4
 800c144:	4452      	add	r2, sl
 800c146:	eba3 0308 	sub.w	r3, r3, r8
 800c14a:	7561      	strb	r1, [r4, #21]
 800c14c:	60a2      	str	r2, [r4, #8]
 800c14e:	6123      	str	r3, [r4, #16]
 800c150:	f080 0001 	eor.w	r0, r0, #1
 800c154:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c158:	2104      	movs	r1, #4
 800c15a:	4620      	mov	r0, r4
 800c15c:	f000 fc66 	bl	800ca2c <ucdr_check_final_buffer_behavior>
 800c160:	b1a8      	cbz	r0, 800c18e <ucdr_deserialize_endian_uint32_t+0xce>
 800c162:	2e01      	cmp	r6, #1
 800c164:	68a3      	ldr	r3, [r4, #8]
 800c166:	d017      	beq.n	800c198 <ucdr_deserialize_endian_uint32_t+0xd8>
 800c168:	78db      	ldrb	r3, [r3, #3]
 800c16a:	702b      	strb	r3, [r5, #0]
 800c16c:	68a3      	ldr	r3, [r4, #8]
 800c16e:	789b      	ldrb	r3, [r3, #2]
 800c170:	706b      	strb	r3, [r5, #1]
 800c172:	68a3      	ldr	r3, [r4, #8]
 800c174:	785b      	ldrb	r3, [r3, #1]
 800c176:	70ab      	strb	r3, [r5, #2]
 800c178:	68a3      	ldr	r3, [r4, #8]
 800c17a:	781b      	ldrb	r3, [r3, #0]
 800c17c:	70eb      	strb	r3, [r5, #3]
 800c17e:	68a2      	ldr	r2, [r4, #8]
 800c180:	6923      	ldr	r3, [r4, #16]
 800c182:	3204      	adds	r2, #4
 800c184:	3304      	adds	r3, #4
 800c186:	2104      	movs	r1, #4
 800c188:	60a2      	str	r2, [r4, #8]
 800c18a:	6123      	str	r3, [r4, #16]
 800c18c:	7561      	strb	r1, [r4, #21]
 800c18e:	7da0      	ldrb	r0, [r4, #22]
 800c190:	f080 0001 	eor.w	r0, r0, #1
 800c194:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c198:	681b      	ldr	r3, [r3, #0]
 800c19a:	602b      	str	r3, [r5, #0]
 800c19c:	e7ef      	b.n	800c17e <ucdr_deserialize_endian_uint32_t+0xbe>
 800c19e:	68a2      	ldr	r2, [r4, #8]
 800c1a0:	6923      	ldr	r3, [r4, #16]
 800c1a2:	7da0      	ldrb	r0, [r4, #22]
 800c1a4:	f884 9015 	strb.w	r9, [r4, #21]
 800c1a8:	eba2 0208 	sub.w	r2, r2, r8
 800c1ac:	eba3 0308 	sub.w	r3, r3, r8
 800c1b0:	60a2      	str	r2, [r4, #8]
 800c1b2:	6123      	str	r3, [r4, #16]
 800c1b4:	f080 0001 	eor.w	r0, r0, #1
 800c1b8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c1bc:	68a3      	ldr	r3, [r4, #8]
 800c1be:	789b      	ldrb	r3, [r3, #2]
 800c1c0:	706b      	strb	r3, [r5, #1]
 800c1c2:	1cab      	adds	r3, r5, #2
 800c1c4:	68a2      	ldr	r2, [r4, #8]
 800c1c6:	7852      	ldrb	r2, [r2, #1]
 800c1c8:	f803 2b01 	strb.w	r2, [r3], #1
 800c1cc:	68a2      	ldr	r2, [r4, #8]
 800c1ce:	7812      	ldrb	r2, [r2, #0]
 800c1d0:	701a      	strb	r2, [r3, #0]
 800c1d2:	e7b2      	b.n	800c13a <ucdr_deserialize_endian_uint32_t+0x7a>
 800c1d4:	4639      	mov	r1, r7
 800c1d6:	4642      	mov	r2, r8
 800c1d8:	4628      	mov	r0, r5
 800c1da:	f009 fe00 	bl	8015dde <memcpy>
 800c1de:	68a1      	ldr	r1, [r4, #8]
 800c1e0:	4652      	mov	r2, sl
 800c1e2:	eb05 0008 	add.w	r0, r5, r8
 800c1e6:	f009 fdfa 	bl	8015dde <memcpy>
 800c1ea:	e7a6      	b.n	800c13a <ucdr_deserialize_endian_uint32_t+0x7a>

0800c1ec <ucdr_serialize_uint64_t>:
 800c1ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c1f0:	2108      	movs	r1, #8
 800c1f2:	b082      	sub	sp, #8
 800c1f4:	4604      	mov	r4, r0
 800c1f6:	e9cd 2300 	strd	r2, r3, [sp]
 800c1fa:	f000 fc6b 	bl	800cad4 <ucdr_buffer_alignment>
 800c1fe:	4601      	mov	r1, r0
 800c200:	4620      	mov	r0, r4
 800c202:	7d67      	ldrb	r7, [r4, #21]
 800c204:	f000 fcaa 	bl	800cb5c <ucdr_advance_buffer>
 800c208:	2108      	movs	r1, #8
 800c20a:	4620      	mov	r0, r4
 800c20c:	f000 fc02 	bl	800ca14 <ucdr_check_buffer_available_for>
 800c210:	2800      	cmp	r0, #0
 800c212:	d14e      	bne.n	800c2b2 <ucdr_serialize_uint64_t+0xc6>
 800c214:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 800c218:	42ab      	cmp	r3, r5
 800c21a:	d945      	bls.n	800c2a8 <ucdr_serialize_uint64_t+0xbc>
 800c21c:	1b5e      	subs	r6, r3, r5
 800c21e:	60a3      	str	r3, [r4, #8]
 800c220:	6923      	ldr	r3, [r4, #16]
 800c222:	f1c6 0808 	rsb	r8, r6, #8
 800c226:	4433      	add	r3, r6
 800c228:	6123      	str	r3, [r4, #16]
 800c22a:	4641      	mov	r1, r8
 800c22c:	4620      	mov	r0, r4
 800c22e:	f000 fbfd 	bl	800ca2c <ucdr_check_final_buffer_behavior>
 800c232:	2800      	cmp	r0, #0
 800c234:	d074      	beq.n	800c320 <ucdr_serialize_uint64_t+0x134>
 800c236:	7d23      	ldrb	r3, [r4, #20]
 800c238:	2b01      	cmp	r3, #1
 800c23a:	f000 809b 	beq.w	800c374 <ucdr_serialize_uint64_t+0x188>
 800c23e:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800c242:	702b      	strb	r3, [r5, #0]
 800c244:	2e00      	cmp	r6, #0
 800c246:	d078      	beq.n	800c33a <ucdr_serialize_uint64_t+0x14e>
 800c248:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800c24c:	706b      	strb	r3, [r5, #1]
 800c24e:	2e01      	cmp	r6, #1
 800c250:	d077      	beq.n	800c342 <ucdr_serialize_uint64_t+0x156>
 800c252:	f89d 3005 	ldrb.w	r3, [sp, #5]
 800c256:	70ab      	strb	r3, [r5, #2]
 800c258:	2e02      	cmp	r6, #2
 800c25a:	d076      	beq.n	800c34a <ucdr_serialize_uint64_t+0x15e>
 800c25c:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800c260:	70eb      	strb	r3, [r5, #3]
 800c262:	2e03      	cmp	r6, #3
 800c264:	d075      	beq.n	800c352 <ucdr_serialize_uint64_t+0x166>
 800c266:	f89d 3003 	ldrb.w	r3, [sp, #3]
 800c26a:	712b      	strb	r3, [r5, #4]
 800c26c:	2e04      	cmp	r6, #4
 800c26e:	d074      	beq.n	800c35a <ucdr_serialize_uint64_t+0x16e>
 800c270:	f89d 3002 	ldrb.w	r3, [sp, #2]
 800c274:	716b      	strb	r3, [r5, #5]
 800c276:	2e05      	cmp	r6, #5
 800c278:	d073      	beq.n	800c362 <ucdr_serialize_uint64_t+0x176>
 800c27a:	f89d 3001 	ldrb.w	r3, [sp, #1]
 800c27e:	71ab      	strb	r3, [r5, #6]
 800c280:	2e06      	cmp	r6, #6
 800c282:	d072      	beq.n	800c36a <ucdr_serialize_uint64_t+0x17e>
 800c284:	f89d 3000 	ldrb.w	r3, [sp]
 800c288:	71eb      	strb	r3, [r5, #7]
 800c28a:	6923      	ldr	r3, [r4, #16]
 800c28c:	68a2      	ldr	r2, [r4, #8]
 800c28e:	7da0      	ldrb	r0, [r4, #22]
 800c290:	3308      	adds	r3, #8
 800c292:	1b9e      	subs	r6, r3, r6
 800c294:	4442      	add	r2, r8
 800c296:	2308      	movs	r3, #8
 800c298:	f080 0001 	eor.w	r0, r0, #1
 800c29c:	60a2      	str	r2, [r4, #8]
 800c29e:	6126      	str	r6, [r4, #16]
 800c2a0:	7563      	strb	r3, [r4, #21]
 800c2a2:	b002      	add	sp, #8
 800c2a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c2a8:	2108      	movs	r1, #8
 800c2aa:	4620      	mov	r0, r4
 800c2ac:	f000 fbbe 	bl	800ca2c <ucdr_check_final_buffer_behavior>
 800c2b0:	b350      	cbz	r0, 800c308 <ucdr_serialize_uint64_t+0x11c>
 800c2b2:	7d23      	ldrb	r3, [r4, #20]
 800c2b4:	2b01      	cmp	r3, #1
 800c2b6:	d02d      	beq.n	800c314 <ucdr_serialize_uint64_t+0x128>
 800c2b8:	68a3      	ldr	r3, [r4, #8]
 800c2ba:	f89d 2007 	ldrb.w	r2, [sp, #7]
 800c2be:	701a      	strb	r2, [r3, #0]
 800c2c0:	68a3      	ldr	r3, [r4, #8]
 800c2c2:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800c2c6:	705a      	strb	r2, [r3, #1]
 800c2c8:	68a3      	ldr	r3, [r4, #8]
 800c2ca:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800c2ce:	709a      	strb	r2, [r3, #2]
 800c2d0:	68a3      	ldr	r3, [r4, #8]
 800c2d2:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800c2d6:	70da      	strb	r2, [r3, #3]
 800c2d8:	68a3      	ldr	r3, [r4, #8]
 800c2da:	f89d 2003 	ldrb.w	r2, [sp, #3]
 800c2de:	711a      	strb	r2, [r3, #4]
 800c2e0:	68a3      	ldr	r3, [r4, #8]
 800c2e2:	f89d 2002 	ldrb.w	r2, [sp, #2]
 800c2e6:	715a      	strb	r2, [r3, #5]
 800c2e8:	68a3      	ldr	r3, [r4, #8]
 800c2ea:	f89d 2001 	ldrb.w	r2, [sp, #1]
 800c2ee:	719a      	strb	r2, [r3, #6]
 800c2f0:	68a3      	ldr	r3, [r4, #8]
 800c2f2:	f89d 2000 	ldrb.w	r2, [sp]
 800c2f6:	71da      	strb	r2, [r3, #7]
 800c2f8:	68a2      	ldr	r2, [r4, #8]
 800c2fa:	6923      	ldr	r3, [r4, #16]
 800c2fc:	3208      	adds	r2, #8
 800c2fe:	3308      	adds	r3, #8
 800c300:	2108      	movs	r1, #8
 800c302:	60a2      	str	r2, [r4, #8]
 800c304:	6123      	str	r3, [r4, #16]
 800c306:	7561      	strb	r1, [r4, #21]
 800c308:	7da0      	ldrb	r0, [r4, #22]
 800c30a:	f080 0001 	eor.w	r0, r0, #1
 800c30e:	b002      	add	sp, #8
 800c310:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c314:	466b      	mov	r3, sp
 800c316:	cb03      	ldmia	r3!, {r0, r1}
 800c318:	68a3      	ldr	r3, [r4, #8]
 800c31a:	6018      	str	r0, [r3, #0]
 800c31c:	6059      	str	r1, [r3, #4]
 800c31e:	e7eb      	b.n	800c2f8 <ucdr_serialize_uint64_t+0x10c>
 800c320:	68a2      	ldr	r2, [r4, #8]
 800c322:	6923      	ldr	r3, [r4, #16]
 800c324:	7da0      	ldrb	r0, [r4, #22]
 800c326:	7567      	strb	r7, [r4, #21]
 800c328:	1b92      	subs	r2, r2, r6
 800c32a:	1b9b      	subs	r3, r3, r6
 800c32c:	f080 0001 	eor.w	r0, r0, #1
 800c330:	60a2      	str	r2, [r4, #8]
 800c332:	6123      	str	r3, [r4, #16]
 800c334:	b002      	add	sp, #8
 800c336:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c33a:	68a3      	ldr	r3, [r4, #8]
 800c33c:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800c340:	701a      	strb	r2, [r3, #0]
 800c342:	68a3      	ldr	r3, [r4, #8]
 800c344:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800c348:	701a      	strb	r2, [r3, #0]
 800c34a:	68a3      	ldr	r3, [r4, #8]
 800c34c:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800c350:	701a      	strb	r2, [r3, #0]
 800c352:	68a3      	ldr	r3, [r4, #8]
 800c354:	f89d 2003 	ldrb.w	r2, [sp, #3]
 800c358:	701a      	strb	r2, [r3, #0]
 800c35a:	68a3      	ldr	r3, [r4, #8]
 800c35c:	f89d 2002 	ldrb.w	r2, [sp, #2]
 800c360:	701a      	strb	r2, [r3, #0]
 800c362:	68a3      	ldr	r3, [r4, #8]
 800c364:	f89d 2001 	ldrb.w	r2, [sp, #1]
 800c368:	701a      	strb	r2, [r3, #0]
 800c36a:	68a3      	ldr	r3, [r4, #8]
 800c36c:	f89d 2000 	ldrb.w	r2, [sp]
 800c370:	701a      	strb	r2, [r3, #0]
 800c372:	e78a      	b.n	800c28a <ucdr_serialize_uint64_t+0x9e>
 800c374:	4628      	mov	r0, r5
 800c376:	466d      	mov	r5, sp
 800c378:	4629      	mov	r1, r5
 800c37a:	4632      	mov	r2, r6
 800c37c:	f009 fd2f 	bl	8015dde <memcpy>
 800c380:	68a0      	ldr	r0, [r4, #8]
 800c382:	4642      	mov	r2, r8
 800c384:	19a9      	adds	r1, r5, r6
 800c386:	f009 fd2a 	bl	8015dde <memcpy>
 800c38a:	e77e      	b.n	800c28a <ucdr_serialize_uint64_t+0x9e>

0800c38c <ucdr_serialize_int16_t>:
 800c38c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c390:	b082      	sub	sp, #8
 800c392:	460b      	mov	r3, r1
 800c394:	2102      	movs	r1, #2
 800c396:	4604      	mov	r4, r0
 800c398:	f8ad 3006 	strh.w	r3, [sp, #6]
 800c39c:	f000 fb9a 	bl	800cad4 <ucdr_buffer_alignment>
 800c3a0:	4601      	mov	r1, r0
 800c3a2:	4620      	mov	r0, r4
 800c3a4:	7d67      	ldrb	r7, [r4, #21]
 800c3a6:	f000 fbd9 	bl	800cb5c <ucdr_advance_buffer>
 800c3aa:	2102      	movs	r1, #2
 800c3ac:	4620      	mov	r0, r4
 800c3ae:	f000 fb31 	bl	800ca14 <ucdr_check_buffer_available_for>
 800c3b2:	bb78      	cbnz	r0, 800c414 <ucdr_serialize_int16_t+0x88>
 800c3b4:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 800c3b8:	42ab      	cmp	r3, r5
 800c3ba:	d926      	bls.n	800c40a <ucdr_serialize_int16_t+0x7e>
 800c3bc:	1b5e      	subs	r6, r3, r5
 800c3be:	60a3      	str	r3, [r4, #8]
 800c3c0:	6923      	ldr	r3, [r4, #16]
 800c3c2:	f1c6 0802 	rsb	r8, r6, #2
 800c3c6:	4433      	add	r3, r6
 800c3c8:	6123      	str	r3, [r4, #16]
 800c3ca:	4641      	mov	r1, r8
 800c3cc:	4620      	mov	r0, r4
 800c3ce:	f000 fb2d 	bl	800ca2c <ucdr_check_final_buffer_behavior>
 800c3d2:	2800      	cmp	r0, #0
 800c3d4:	d03b      	beq.n	800c44e <ucdr_serialize_int16_t+0xc2>
 800c3d6:	7d23      	ldrb	r3, [r4, #20]
 800c3d8:	2b01      	cmp	r3, #1
 800c3da:	d04a      	beq.n	800c472 <ucdr_serialize_int16_t+0xe6>
 800c3dc:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800c3e0:	702b      	strb	r3, [r5, #0]
 800c3e2:	2e00      	cmp	r6, #0
 800c3e4:	d040      	beq.n	800c468 <ucdr_serialize_int16_t+0xdc>
 800c3e6:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800c3ea:	706b      	strb	r3, [r5, #1]
 800c3ec:	6923      	ldr	r3, [r4, #16]
 800c3ee:	68a2      	ldr	r2, [r4, #8]
 800c3f0:	7da0      	ldrb	r0, [r4, #22]
 800c3f2:	3302      	adds	r3, #2
 800c3f4:	1b9e      	subs	r6, r3, r6
 800c3f6:	4442      	add	r2, r8
 800c3f8:	2302      	movs	r3, #2
 800c3fa:	f080 0001 	eor.w	r0, r0, #1
 800c3fe:	60a2      	str	r2, [r4, #8]
 800c400:	6126      	str	r6, [r4, #16]
 800c402:	7563      	strb	r3, [r4, #21]
 800c404:	b002      	add	sp, #8
 800c406:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c40a:	2102      	movs	r1, #2
 800c40c:	4620      	mov	r0, r4
 800c40e:	f000 fb0d 	bl	800ca2c <ucdr_check_final_buffer_behavior>
 800c412:	b190      	cbz	r0, 800c43a <ucdr_serialize_int16_t+0xae>
 800c414:	7d23      	ldrb	r3, [r4, #20]
 800c416:	2b01      	cmp	r3, #1
 800c418:	68a3      	ldr	r3, [r4, #8]
 800c41a:	d014      	beq.n	800c446 <ucdr_serialize_int16_t+0xba>
 800c41c:	f89d 2007 	ldrb.w	r2, [sp, #7]
 800c420:	701a      	strb	r2, [r3, #0]
 800c422:	68a3      	ldr	r3, [r4, #8]
 800c424:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800c428:	705a      	strb	r2, [r3, #1]
 800c42a:	68a2      	ldr	r2, [r4, #8]
 800c42c:	6923      	ldr	r3, [r4, #16]
 800c42e:	3202      	adds	r2, #2
 800c430:	3302      	adds	r3, #2
 800c432:	2102      	movs	r1, #2
 800c434:	60a2      	str	r2, [r4, #8]
 800c436:	6123      	str	r3, [r4, #16]
 800c438:	7561      	strb	r1, [r4, #21]
 800c43a:	7da0      	ldrb	r0, [r4, #22]
 800c43c:	f080 0001 	eor.w	r0, r0, #1
 800c440:	b002      	add	sp, #8
 800c442:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c446:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 800c44a:	801a      	strh	r2, [r3, #0]
 800c44c:	e7ed      	b.n	800c42a <ucdr_serialize_int16_t+0x9e>
 800c44e:	68a2      	ldr	r2, [r4, #8]
 800c450:	6923      	ldr	r3, [r4, #16]
 800c452:	7da0      	ldrb	r0, [r4, #22]
 800c454:	7567      	strb	r7, [r4, #21]
 800c456:	1b92      	subs	r2, r2, r6
 800c458:	1b9b      	subs	r3, r3, r6
 800c45a:	f080 0001 	eor.w	r0, r0, #1
 800c45e:	60a2      	str	r2, [r4, #8]
 800c460:	6123      	str	r3, [r4, #16]
 800c462:	b002      	add	sp, #8
 800c464:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c468:	68a3      	ldr	r3, [r4, #8]
 800c46a:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800c46e:	701a      	strb	r2, [r3, #0]
 800c470:	e7bc      	b.n	800c3ec <ucdr_serialize_int16_t+0x60>
 800c472:	4628      	mov	r0, r5
 800c474:	f10d 0506 	add.w	r5, sp, #6
 800c478:	4629      	mov	r1, r5
 800c47a:	4632      	mov	r2, r6
 800c47c:	f009 fcaf 	bl	8015dde <memcpy>
 800c480:	68a0      	ldr	r0, [r4, #8]
 800c482:	4642      	mov	r2, r8
 800c484:	19a9      	adds	r1, r5, r6
 800c486:	f009 fcaa 	bl	8015dde <memcpy>
 800c48a:	e7af      	b.n	800c3ec <ucdr_serialize_int16_t+0x60>

0800c48c <ucdr_deserialize_int16_t>:
 800c48c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c490:	460d      	mov	r5, r1
 800c492:	2102      	movs	r1, #2
 800c494:	4604      	mov	r4, r0
 800c496:	f000 fb1d 	bl	800cad4 <ucdr_buffer_alignment>
 800c49a:	4601      	mov	r1, r0
 800c49c:	4620      	mov	r0, r4
 800c49e:	f894 8015 	ldrb.w	r8, [r4, #21]
 800c4a2:	f000 fb5b 	bl	800cb5c <ucdr_advance_buffer>
 800c4a6:	2102      	movs	r1, #2
 800c4a8:	4620      	mov	r0, r4
 800c4aa:	f000 fab3 	bl	800ca14 <ucdr_check_buffer_available_for>
 800c4ae:	bb60      	cbnz	r0, 800c50a <ucdr_deserialize_int16_t+0x7e>
 800c4b0:	e9d4 6701 	ldrd	r6, r7, [r4, #4]
 800c4b4:	42be      	cmp	r6, r7
 800c4b6:	d923      	bls.n	800c500 <ucdr_deserialize_int16_t+0x74>
 800c4b8:	6923      	ldr	r3, [r4, #16]
 800c4ba:	60a6      	str	r6, [r4, #8]
 800c4bc:	1bf6      	subs	r6, r6, r7
 800c4be:	4433      	add	r3, r6
 800c4c0:	f1c6 0902 	rsb	r9, r6, #2
 800c4c4:	6123      	str	r3, [r4, #16]
 800c4c6:	4649      	mov	r1, r9
 800c4c8:	4620      	mov	r0, r4
 800c4ca:	f000 faaf 	bl	800ca2c <ucdr_check_final_buffer_behavior>
 800c4ce:	2800      	cmp	r0, #0
 800c4d0:	d034      	beq.n	800c53c <ucdr_deserialize_int16_t+0xb0>
 800c4d2:	7d23      	ldrb	r3, [r4, #20]
 800c4d4:	2b01      	cmp	r3, #1
 800c4d6:	d042      	beq.n	800c55e <ucdr_deserialize_int16_t+0xd2>
 800c4d8:	787b      	ldrb	r3, [r7, #1]
 800c4da:	702b      	strb	r3, [r5, #0]
 800c4dc:	2e00      	cmp	r6, #0
 800c4de:	d03a      	beq.n	800c556 <ucdr_deserialize_int16_t+0xca>
 800c4e0:	783b      	ldrb	r3, [r7, #0]
 800c4e2:	706b      	strb	r3, [r5, #1]
 800c4e4:	6923      	ldr	r3, [r4, #16]
 800c4e6:	68a2      	ldr	r2, [r4, #8]
 800c4e8:	7da0      	ldrb	r0, [r4, #22]
 800c4ea:	2102      	movs	r1, #2
 800c4ec:	3302      	adds	r3, #2
 800c4ee:	444a      	add	r2, r9
 800c4f0:	1b9b      	subs	r3, r3, r6
 800c4f2:	7561      	strb	r1, [r4, #21]
 800c4f4:	60a2      	str	r2, [r4, #8]
 800c4f6:	6123      	str	r3, [r4, #16]
 800c4f8:	f080 0001 	eor.w	r0, r0, #1
 800c4fc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c500:	2102      	movs	r1, #2
 800c502:	4620      	mov	r0, r4
 800c504:	f000 fa92 	bl	800ca2c <ucdr_check_final_buffer_behavior>
 800c508:	b180      	cbz	r0, 800c52c <ucdr_deserialize_int16_t+0xa0>
 800c50a:	7d23      	ldrb	r3, [r4, #20]
 800c50c:	2b01      	cmp	r3, #1
 800c50e:	68a3      	ldr	r3, [r4, #8]
 800c510:	d011      	beq.n	800c536 <ucdr_deserialize_int16_t+0xaa>
 800c512:	785b      	ldrb	r3, [r3, #1]
 800c514:	702b      	strb	r3, [r5, #0]
 800c516:	68a3      	ldr	r3, [r4, #8]
 800c518:	781b      	ldrb	r3, [r3, #0]
 800c51a:	706b      	strb	r3, [r5, #1]
 800c51c:	68a2      	ldr	r2, [r4, #8]
 800c51e:	6923      	ldr	r3, [r4, #16]
 800c520:	3202      	adds	r2, #2
 800c522:	3302      	adds	r3, #2
 800c524:	2102      	movs	r1, #2
 800c526:	60a2      	str	r2, [r4, #8]
 800c528:	6123      	str	r3, [r4, #16]
 800c52a:	7561      	strb	r1, [r4, #21]
 800c52c:	7da0      	ldrb	r0, [r4, #22]
 800c52e:	f080 0001 	eor.w	r0, r0, #1
 800c532:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c536:	881b      	ldrh	r3, [r3, #0]
 800c538:	802b      	strh	r3, [r5, #0]
 800c53a:	e7ef      	b.n	800c51c <ucdr_deserialize_int16_t+0x90>
 800c53c:	68a2      	ldr	r2, [r4, #8]
 800c53e:	6923      	ldr	r3, [r4, #16]
 800c540:	7da0      	ldrb	r0, [r4, #22]
 800c542:	f884 8015 	strb.w	r8, [r4, #21]
 800c546:	1b92      	subs	r2, r2, r6
 800c548:	1b9b      	subs	r3, r3, r6
 800c54a:	60a2      	str	r2, [r4, #8]
 800c54c:	6123      	str	r3, [r4, #16]
 800c54e:	f080 0001 	eor.w	r0, r0, #1
 800c552:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c556:	68a3      	ldr	r3, [r4, #8]
 800c558:	781b      	ldrb	r3, [r3, #0]
 800c55a:	706b      	strb	r3, [r5, #1]
 800c55c:	e7c2      	b.n	800c4e4 <ucdr_deserialize_int16_t+0x58>
 800c55e:	4639      	mov	r1, r7
 800c560:	4632      	mov	r2, r6
 800c562:	4628      	mov	r0, r5
 800c564:	f009 fc3b 	bl	8015dde <memcpy>
 800c568:	68a1      	ldr	r1, [r4, #8]
 800c56a:	464a      	mov	r2, r9
 800c56c:	19a8      	adds	r0, r5, r6
 800c56e:	f009 fc36 	bl	8015dde <memcpy>
 800c572:	e7b7      	b.n	800c4e4 <ucdr_deserialize_int16_t+0x58>

0800c574 <ucdr_serialize_int32_t>:
 800c574:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c578:	b082      	sub	sp, #8
 800c57a:	4604      	mov	r4, r0
 800c57c:	9101      	str	r1, [sp, #4]
 800c57e:	2104      	movs	r1, #4
 800c580:	f000 faa8 	bl	800cad4 <ucdr_buffer_alignment>
 800c584:	4601      	mov	r1, r0
 800c586:	4620      	mov	r0, r4
 800c588:	7d67      	ldrb	r7, [r4, #21]
 800c58a:	f000 fae7 	bl	800cb5c <ucdr_advance_buffer>
 800c58e:	2104      	movs	r1, #4
 800c590:	4620      	mov	r0, r4
 800c592:	f000 fa3f 	bl	800ca14 <ucdr_check_buffer_available_for>
 800c596:	2800      	cmp	r0, #0
 800c598:	d139      	bne.n	800c60e <ucdr_serialize_int32_t+0x9a>
 800c59a:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 800c59e:	42ab      	cmp	r3, r5
 800c5a0:	d930      	bls.n	800c604 <ucdr_serialize_int32_t+0x90>
 800c5a2:	1b5e      	subs	r6, r3, r5
 800c5a4:	60a3      	str	r3, [r4, #8]
 800c5a6:	6923      	ldr	r3, [r4, #16]
 800c5a8:	f1c6 0804 	rsb	r8, r6, #4
 800c5ac:	4433      	add	r3, r6
 800c5ae:	6123      	str	r3, [r4, #16]
 800c5b0:	4641      	mov	r1, r8
 800c5b2:	4620      	mov	r0, r4
 800c5b4:	f000 fa3a 	bl	800ca2c <ucdr_check_final_buffer_behavior>
 800c5b8:	2800      	cmp	r0, #0
 800c5ba:	d04c      	beq.n	800c656 <ucdr_serialize_int32_t+0xe2>
 800c5bc:	7d23      	ldrb	r3, [r4, #20]
 800c5be:	2b01      	cmp	r3, #1
 800c5c0:	d063      	beq.n	800c68a <ucdr_serialize_int32_t+0x116>
 800c5c2:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800c5c6:	702b      	strb	r3, [r5, #0]
 800c5c8:	2e00      	cmp	r6, #0
 800c5ca:	d051      	beq.n	800c670 <ucdr_serialize_int32_t+0xfc>
 800c5cc:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800c5d0:	706b      	strb	r3, [r5, #1]
 800c5d2:	2e01      	cmp	r6, #1
 800c5d4:	d050      	beq.n	800c678 <ucdr_serialize_int32_t+0x104>
 800c5d6:	f89d 3005 	ldrb.w	r3, [sp, #5]
 800c5da:	70ab      	strb	r3, [r5, #2]
 800c5dc:	2e02      	cmp	r6, #2
 800c5de:	d04f      	beq.n	800c680 <ucdr_serialize_int32_t+0x10c>
 800c5e0:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800c5e4:	70eb      	strb	r3, [r5, #3]
 800c5e6:	6923      	ldr	r3, [r4, #16]
 800c5e8:	68a2      	ldr	r2, [r4, #8]
 800c5ea:	7da0      	ldrb	r0, [r4, #22]
 800c5ec:	3304      	adds	r3, #4
 800c5ee:	1b9e      	subs	r6, r3, r6
 800c5f0:	4442      	add	r2, r8
 800c5f2:	2304      	movs	r3, #4
 800c5f4:	f080 0001 	eor.w	r0, r0, #1
 800c5f8:	60a2      	str	r2, [r4, #8]
 800c5fa:	6126      	str	r6, [r4, #16]
 800c5fc:	7563      	strb	r3, [r4, #21]
 800c5fe:	b002      	add	sp, #8
 800c600:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c604:	2104      	movs	r1, #4
 800c606:	4620      	mov	r0, r4
 800c608:	f000 fa10 	bl	800ca2c <ucdr_check_final_buffer_behavior>
 800c60c:	b1d0      	cbz	r0, 800c644 <ucdr_serialize_int32_t+0xd0>
 800c60e:	7d23      	ldrb	r3, [r4, #20]
 800c610:	2b01      	cmp	r3, #1
 800c612:	68a3      	ldr	r3, [r4, #8]
 800c614:	d01c      	beq.n	800c650 <ucdr_serialize_int32_t+0xdc>
 800c616:	f89d 2007 	ldrb.w	r2, [sp, #7]
 800c61a:	701a      	strb	r2, [r3, #0]
 800c61c:	68a3      	ldr	r3, [r4, #8]
 800c61e:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800c622:	705a      	strb	r2, [r3, #1]
 800c624:	68a3      	ldr	r3, [r4, #8]
 800c626:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800c62a:	709a      	strb	r2, [r3, #2]
 800c62c:	68a3      	ldr	r3, [r4, #8]
 800c62e:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800c632:	70da      	strb	r2, [r3, #3]
 800c634:	68a2      	ldr	r2, [r4, #8]
 800c636:	6923      	ldr	r3, [r4, #16]
 800c638:	3204      	adds	r2, #4
 800c63a:	3304      	adds	r3, #4
 800c63c:	2104      	movs	r1, #4
 800c63e:	60a2      	str	r2, [r4, #8]
 800c640:	6123      	str	r3, [r4, #16]
 800c642:	7561      	strb	r1, [r4, #21]
 800c644:	7da0      	ldrb	r0, [r4, #22]
 800c646:	f080 0001 	eor.w	r0, r0, #1
 800c64a:	b002      	add	sp, #8
 800c64c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c650:	9a01      	ldr	r2, [sp, #4]
 800c652:	601a      	str	r2, [r3, #0]
 800c654:	e7ee      	b.n	800c634 <ucdr_serialize_int32_t+0xc0>
 800c656:	68a2      	ldr	r2, [r4, #8]
 800c658:	6923      	ldr	r3, [r4, #16]
 800c65a:	7da0      	ldrb	r0, [r4, #22]
 800c65c:	7567      	strb	r7, [r4, #21]
 800c65e:	1b92      	subs	r2, r2, r6
 800c660:	1b9b      	subs	r3, r3, r6
 800c662:	f080 0001 	eor.w	r0, r0, #1
 800c666:	60a2      	str	r2, [r4, #8]
 800c668:	6123      	str	r3, [r4, #16]
 800c66a:	b002      	add	sp, #8
 800c66c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c670:	68a3      	ldr	r3, [r4, #8]
 800c672:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800c676:	701a      	strb	r2, [r3, #0]
 800c678:	68a3      	ldr	r3, [r4, #8]
 800c67a:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800c67e:	701a      	strb	r2, [r3, #0]
 800c680:	68a3      	ldr	r3, [r4, #8]
 800c682:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800c686:	701a      	strb	r2, [r3, #0]
 800c688:	e7ad      	b.n	800c5e6 <ucdr_serialize_int32_t+0x72>
 800c68a:	4628      	mov	r0, r5
 800c68c:	ad01      	add	r5, sp, #4
 800c68e:	4629      	mov	r1, r5
 800c690:	4632      	mov	r2, r6
 800c692:	f009 fba4 	bl	8015dde <memcpy>
 800c696:	68a0      	ldr	r0, [r4, #8]
 800c698:	4642      	mov	r2, r8
 800c69a:	19a9      	adds	r1, r5, r6
 800c69c:	f009 fb9f 	bl	8015dde <memcpy>
 800c6a0:	e7a1      	b.n	800c5e6 <ucdr_serialize_int32_t+0x72>
 800c6a2:	bf00      	nop

0800c6a4 <ucdr_deserialize_int32_t>:
 800c6a4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c6a8:	460d      	mov	r5, r1
 800c6aa:	2104      	movs	r1, #4
 800c6ac:	4604      	mov	r4, r0
 800c6ae:	f000 fa11 	bl	800cad4 <ucdr_buffer_alignment>
 800c6b2:	4601      	mov	r1, r0
 800c6b4:	4620      	mov	r0, r4
 800c6b6:	f894 8015 	ldrb.w	r8, [r4, #21]
 800c6ba:	f000 fa4f 	bl	800cb5c <ucdr_advance_buffer>
 800c6be:	2104      	movs	r1, #4
 800c6c0:	4620      	mov	r0, r4
 800c6c2:	f000 f9a7 	bl	800ca14 <ucdr_check_buffer_available_for>
 800c6c6:	2800      	cmp	r0, #0
 800c6c8:	d138      	bne.n	800c73c <ucdr_deserialize_int32_t+0x98>
 800c6ca:	e9d4 7601 	ldrd	r7, r6, [r4, #4]
 800c6ce:	42b7      	cmp	r7, r6
 800c6d0:	d92f      	bls.n	800c732 <ucdr_deserialize_int32_t+0x8e>
 800c6d2:	6923      	ldr	r3, [r4, #16]
 800c6d4:	60a7      	str	r7, [r4, #8]
 800c6d6:	1bbf      	subs	r7, r7, r6
 800c6d8:	443b      	add	r3, r7
 800c6da:	f1c7 0904 	rsb	r9, r7, #4
 800c6de:	6123      	str	r3, [r4, #16]
 800c6e0:	4649      	mov	r1, r9
 800c6e2:	4620      	mov	r0, r4
 800c6e4:	f000 f9a2 	bl	800ca2c <ucdr_check_final_buffer_behavior>
 800c6e8:	2800      	cmp	r0, #0
 800c6ea:	d046      	beq.n	800c77a <ucdr_deserialize_int32_t+0xd6>
 800c6ec:	7d23      	ldrb	r3, [r4, #20]
 800c6ee:	2b01      	cmp	r3, #1
 800c6f0:	d05c      	beq.n	800c7ac <ucdr_deserialize_int32_t+0x108>
 800c6f2:	78f3      	ldrb	r3, [r6, #3]
 800c6f4:	702b      	strb	r3, [r5, #0]
 800c6f6:	2f00      	cmp	r7, #0
 800c6f8:	d04c      	beq.n	800c794 <ucdr_deserialize_int32_t+0xf0>
 800c6fa:	78b3      	ldrb	r3, [r6, #2]
 800c6fc:	706b      	strb	r3, [r5, #1]
 800c6fe:	2f01      	cmp	r7, #1
 800c700:	f105 0302 	add.w	r3, r5, #2
 800c704:	d04a      	beq.n	800c79c <ucdr_deserialize_int32_t+0xf8>
 800c706:	7873      	ldrb	r3, [r6, #1]
 800c708:	70ab      	strb	r3, [r5, #2]
 800c70a:	2f02      	cmp	r7, #2
 800c70c:	f105 0303 	add.w	r3, r5, #3
 800c710:	d048      	beq.n	800c7a4 <ucdr_deserialize_int32_t+0x100>
 800c712:	7833      	ldrb	r3, [r6, #0]
 800c714:	70eb      	strb	r3, [r5, #3]
 800c716:	6923      	ldr	r3, [r4, #16]
 800c718:	68a2      	ldr	r2, [r4, #8]
 800c71a:	7da0      	ldrb	r0, [r4, #22]
 800c71c:	2104      	movs	r1, #4
 800c71e:	3304      	adds	r3, #4
 800c720:	444a      	add	r2, r9
 800c722:	1bdb      	subs	r3, r3, r7
 800c724:	7561      	strb	r1, [r4, #21]
 800c726:	60a2      	str	r2, [r4, #8]
 800c728:	6123      	str	r3, [r4, #16]
 800c72a:	f080 0001 	eor.w	r0, r0, #1
 800c72e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c732:	2104      	movs	r1, #4
 800c734:	4620      	mov	r0, r4
 800c736:	f000 f979 	bl	800ca2c <ucdr_check_final_buffer_behavior>
 800c73a:	b1b0      	cbz	r0, 800c76a <ucdr_deserialize_int32_t+0xc6>
 800c73c:	7d23      	ldrb	r3, [r4, #20]
 800c73e:	2b01      	cmp	r3, #1
 800c740:	68a3      	ldr	r3, [r4, #8]
 800c742:	d017      	beq.n	800c774 <ucdr_deserialize_int32_t+0xd0>
 800c744:	78db      	ldrb	r3, [r3, #3]
 800c746:	702b      	strb	r3, [r5, #0]
 800c748:	68a3      	ldr	r3, [r4, #8]
 800c74a:	789b      	ldrb	r3, [r3, #2]
 800c74c:	706b      	strb	r3, [r5, #1]
 800c74e:	68a3      	ldr	r3, [r4, #8]
 800c750:	785b      	ldrb	r3, [r3, #1]
 800c752:	70ab      	strb	r3, [r5, #2]
 800c754:	68a3      	ldr	r3, [r4, #8]
 800c756:	781b      	ldrb	r3, [r3, #0]
 800c758:	70eb      	strb	r3, [r5, #3]
 800c75a:	68a2      	ldr	r2, [r4, #8]
 800c75c:	6923      	ldr	r3, [r4, #16]
 800c75e:	3204      	adds	r2, #4
 800c760:	3304      	adds	r3, #4
 800c762:	2104      	movs	r1, #4
 800c764:	60a2      	str	r2, [r4, #8]
 800c766:	6123      	str	r3, [r4, #16]
 800c768:	7561      	strb	r1, [r4, #21]
 800c76a:	7da0      	ldrb	r0, [r4, #22]
 800c76c:	f080 0001 	eor.w	r0, r0, #1
 800c770:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c774:	681b      	ldr	r3, [r3, #0]
 800c776:	602b      	str	r3, [r5, #0]
 800c778:	e7ef      	b.n	800c75a <ucdr_deserialize_int32_t+0xb6>
 800c77a:	68a2      	ldr	r2, [r4, #8]
 800c77c:	6923      	ldr	r3, [r4, #16]
 800c77e:	7da0      	ldrb	r0, [r4, #22]
 800c780:	f884 8015 	strb.w	r8, [r4, #21]
 800c784:	1bd2      	subs	r2, r2, r7
 800c786:	1bdb      	subs	r3, r3, r7
 800c788:	60a2      	str	r2, [r4, #8]
 800c78a:	6123      	str	r3, [r4, #16]
 800c78c:	f080 0001 	eor.w	r0, r0, #1
 800c790:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c794:	68a3      	ldr	r3, [r4, #8]
 800c796:	789b      	ldrb	r3, [r3, #2]
 800c798:	706b      	strb	r3, [r5, #1]
 800c79a:	1cab      	adds	r3, r5, #2
 800c79c:	68a2      	ldr	r2, [r4, #8]
 800c79e:	7852      	ldrb	r2, [r2, #1]
 800c7a0:	f803 2b01 	strb.w	r2, [r3], #1
 800c7a4:	68a2      	ldr	r2, [r4, #8]
 800c7a6:	7812      	ldrb	r2, [r2, #0]
 800c7a8:	701a      	strb	r2, [r3, #0]
 800c7aa:	e7b4      	b.n	800c716 <ucdr_deserialize_int32_t+0x72>
 800c7ac:	4631      	mov	r1, r6
 800c7ae:	463a      	mov	r2, r7
 800c7b0:	4628      	mov	r0, r5
 800c7b2:	f009 fb14 	bl	8015dde <memcpy>
 800c7b6:	68a1      	ldr	r1, [r4, #8]
 800c7b8:	464a      	mov	r2, r9
 800c7ba:	19e8      	adds	r0, r5, r7
 800c7bc:	f009 fb0f 	bl	8015dde <memcpy>
 800c7c0:	e7a9      	b.n	800c716 <ucdr_deserialize_int32_t+0x72>
 800c7c2:	bf00      	nop

0800c7c4 <ucdr_serialize_float>:
 800c7c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c7c8:	2104      	movs	r1, #4
 800c7ca:	b082      	sub	sp, #8
 800c7cc:	4604      	mov	r4, r0
 800c7ce:	ed8d 0a01 	vstr	s0, [sp, #4]
 800c7d2:	f000 f97f 	bl	800cad4 <ucdr_buffer_alignment>
 800c7d6:	4601      	mov	r1, r0
 800c7d8:	4620      	mov	r0, r4
 800c7da:	7d67      	ldrb	r7, [r4, #21]
 800c7dc:	f000 f9be 	bl	800cb5c <ucdr_advance_buffer>
 800c7e0:	2104      	movs	r1, #4
 800c7e2:	4620      	mov	r0, r4
 800c7e4:	f000 f916 	bl	800ca14 <ucdr_check_buffer_available_for>
 800c7e8:	2800      	cmp	r0, #0
 800c7ea:	d139      	bne.n	800c860 <ucdr_serialize_float+0x9c>
 800c7ec:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 800c7f0:	42ab      	cmp	r3, r5
 800c7f2:	d930      	bls.n	800c856 <ucdr_serialize_float+0x92>
 800c7f4:	1b5e      	subs	r6, r3, r5
 800c7f6:	60a3      	str	r3, [r4, #8]
 800c7f8:	6923      	ldr	r3, [r4, #16]
 800c7fa:	f1c6 0804 	rsb	r8, r6, #4
 800c7fe:	4433      	add	r3, r6
 800c800:	6123      	str	r3, [r4, #16]
 800c802:	4641      	mov	r1, r8
 800c804:	4620      	mov	r0, r4
 800c806:	f000 f911 	bl	800ca2c <ucdr_check_final_buffer_behavior>
 800c80a:	2800      	cmp	r0, #0
 800c80c:	d04c      	beq.n	800c8a8 <ucdr_serialize_float+0xe4>
 800c80e:	7d23      	ldrb	r3, [r4, #20]
 800c810:	2b01      	cmp	r3, #1
 800c812:	d063      	beq.n	800c8dc <ucdr_serialize_float+0x118>
 800c814:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800c818:	702b      	strb	r3, [r5, #0]
 800c81a:	2e00      	cmp	r6, #0
 800c81c:	d051      	beq.n	800c8c2 <ucdr_serialize_float+0xfe>
 800c81e:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800c822:	706b      	strb	r3, [r5, #1]
 800c824:	2e01      	cmp	r6, #1
 800c826:	d050      	beq.n	800c8ca <ucdr_serialize_float+0x106>
 800c828:	f89d 3005 	ldrb.w	r3, [sp, #5]
 800c82c:	70ab      	strb	r3, [r5, #2]
 800c82e:	2e02      	cmp	r6, #2
 800c830:	d04f      	beq.n	800c8d2 <ucdr_serialize_float+0x10e>
 800c832:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800c836:	70eb      	strb	r3, [r5, #3]
 800c838:	6923      	ldr	r3, [r4, #16]
 800c83a:	68a2      	ldr	r2, [r4, #8]
 800c83c:	7da0      	ldrb	r0, [r4, #22]
 800c83e:	3304      	adds	r3, #4
 800c840:	1b9e      	subs	r6, r3, r6
 800c842:	4442      	add	r2, r8
 800c844:	2304      	movs	r3, #4
 800c846:	f080 0001 	eor.w	r0, r0, #1
 800c84a:	60a2      	str	r2, [r4, #8]
 800c84c:	6126      	str	r6, [r4, #16]
 800c84e:	7563      	strb	r3, [r4, #21]
 800c850:	b002      	add	sp, #8
 800c852:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c856:	2104      	movs	r1, #4
 800c858:	4620      	mov	r0, r4
 800c85a:	f000 f8e7 	bl	800ca2c <ucdr_check_final_buffer_behavior>
 800c85e:	b1d0      	cbz	r0, 800c896 <ucdr_serialize_float+0xd2>
 800c860:	7d23      	ldrb	r3, [r4, #20]
 800c862:	2b01      	cmp	r3, #1
 800c864:	68a3      	ldr	r3, [r4, #8]
 800c866:	d01c      	beq.n	800c8a2 <ucdr_serialize_float+0xde>
 800c868:	f89d 2007 	ldrb.w	r2, [sp, #7]
 800c86c:	701a      	strb	r2, [r3, #0]
 800c86e:	68a3      	ldr	r3, [r4, #8]
 800c870:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800c874:	705a      	strb	r2, [r3, #1]
 800c876:	68a3      	ldr	r3, [r4, #8]
 800c878:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800c87c:	709a      	strb	r2, [r3, #2]
 800c87e:	68a3      	ldr	r3, [r4, #8]
 800c880:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800c884:	70da      	strb	r2, [r3, #3]
 800c886:	68a2      	ldr	r2, [r4, #8]
 800c888:	6923      	ldr	r3, [r4, #16]
 800c88a:	3204      	adds	r2, #4
 800c88c:	3304      	adds	r3, #4
 800c88e:	2104      	movs	r1, #4
 800c890:	60a2      	str	r2, [r4, #8]
 800c892:	6123      	str	r3, [r4, #16]
 800c894:	7561      	strb	r1, [r4, #21]
 800c896:	7da0      	ldrb	r0, [r4, #22]
 800c898:	f080 0001 	eor.w	r0, r0, #1
 800c89c:	b002      	add	sp, #8
 800c89e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c8a2:	9a01      	ldr	r2, [sp, #4]
 800c8a4:	601a      	str	r2, [r3, #0]
 800c8a6:	e7ee      	b.n	800c886 <ucdr_serialize_float+0xc2>
 800c8a8:	68a2      	ldr	r2, [r4, #8]
 800c8aa:	6923      	ldr	r3, [r4, #16]
 800c8ac:	7da0      	ldrb	r0, [r4, #22]
 800c8ae:	7567      	strb	r7, [r4, #21]
 800c8b0:	1b92      	subs	r2, r2, r6
 800c8b2:	1b9b      	subs	r3, r3, r6
 800c8b4:	f080 0001 	eor.w	r0, r0, #1
 800c8b8:	60a2      	str	r2, [r4, #8]
 800c8ba:	6123      	str	r3, [r4, #16]
 800c8bc:	b002      	add	sp, #8
 800c8be:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c8c2:	68a3      	ldr	r3, [r4, #8]
 800c8c4:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800c8c8:	701a      	strb	r2, [r3, #0]
 800c8ca:	68a3      	ldr	r3, [r4, #8]
 800c8cc:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800c8d0:	701a      	strb	r2, [r3, #0]
 800c8d2:	68a3      	ldr	r3, [r4, #8]
 800c8d4:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800c8d8:	701a      	strb	r2, [r3, #0]
 800c8da:	e7ad      	b.n	800c838 <ucdr_serialize_float+0x74>
 800c8dc:	4628      	mov	r0, r5
 800c8de:	ad01      	add	r5, sp, #4
 800c8e0:	4629      	mov	r1, r5
 800c8e2:	4632      	mov	r2, r6
 800c8e4:	f009 fa7b 	bl	8015dde <memcpy>
 800c8e8:	68a0      	ldr	r0, [r4, #8]
 800c8ea:	4642      	mov	r2, r8
 800c8ec:	19a9      	adds	r1, r5, r6
 800c8ee:	f009 fa76 	bl	8015dde <memcpy>
 800c8f2:	e7a1      	b.n	800c838 <ucdr_serialize_float+0x74>

0800c8f4 <ucdr_deserialize_float>:
 800c8f4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c8f8:	460d      	mov	r5, r1
 800c8fa:	2104      	movs	r1, #4
 800c8fc:	4604      	mov	r4, r0
 800c8fe:	f000 f8e9 	bl	800cad4 <ucdr_buffer_alignment>
 800c902:	4601      	mov	r1, r0
 800c904:	4620      	mov	r0, r4
 800c906:	f894 8015 	ldrb.w	r8, [r4, #21]
 800c90a:	f000 f927 	bl	800cb5c <ucdr_advance_buffer>
 800c90e:	2104      	movs	r1, #4
 800c910:	4620      	mov	r0, r4
 800c912:	f000 f87f 	bl	800ca14 <ucdr_check_buffer_available_for>
 800c916:	2800      	cmp	r0, #0
 800c918:	d138      	bne.n	800c98c <ucdr_deserialize_float+0x98>
 800c91a:	e9d4 7601 	ldrd	r7, r6, [r4, #4]
 800c91e:	42b7      	cmp	r7, r6
 800c920:	d92f      	bls.n	800c982 <ucdr_deserialize_float+0x8e>
 800c922:	6923      	ldr	r3, [r4, #16]
 800c924:	60a7      	str	r7, [r4, #8]
 800c926:	1bbf      	subs	r7, r7, r6
 800c928:	443b      	add	r3, r7
 800c92a:	f1c7 0904 	rsb	r9, r7, #4
 800c92e:	6123      	str	r3, [r4, #16]
 800c930:	4649      	mov	r1, r9
 800c932:	4620      	mov	r0, r4
 800c934:	f000 f87a 	bl	800ca2c <ucdr_check_final_buffer_behavior>
 800c938:	2800      	cmp	r0, #0
 800c93a:	d046      	beq.n	800c9ca <ucdr_deserialize_float+0xd6>
 800c93c:	7d23      	ldrb	r3, [r4, #20]
 800c93e:	2b01      	cmp	r3, #1
 800c940:	d05c      	beq.n	800c9fc <ucdr_deserialize_float+0x108>
 800c942:	78f3      	ldrb	r3, [r6, #3]
 800c944:	702b      	strb	r3, [r5, #0]
 800c946:	2f00      	cmp	r7, #0
 800c948:	d04c      	beq.n	800c9e4 <ucdr_deserialize_float+0xf0>
 800c94a:	78b3      	ldrb	r3, [r6, #2]
 800c94c:	706b      	strb	r3, [r5, #1]
 800c94e:	2f01      	cmp	r7, #1
 800c950:	f105 0302 	add.w	r3, r5, #2
 800c954:	d04a      	beq.n	800c9ec <ucdr_deserialize_float+0xf8>
 800c956:	7873      	ldrb	r3, [r6, #1]
 800c958:	70ab      	strb	r3, [r5, #2]
 800c95a:	2f02      	cmp	r7, #2
 800c95c:	f105 0303 	add.w	r3, r5, #3
 800c960:	d048      	beq.n	800c9f4 <ucdr_deserialize_float+0x100>
 800c962:	7833      	ldrb	r3, [r6, #0]
 800c964:	70eb      	strb	r3, [r5, #3]
 800c966:	6923      	ldr	r3, [r4, #16]
 800c968:	68a2      	ldr	r2, [r4, #8]
 800c96a:	7da0      	ldrb	r0, [r4, #22]
 800c96c:	2104      	movs	r1, #4
 800c96e:	3304      	adds	r3, #4
 800c970:	444a      	add	r2, r9
 800c972:	1bdb      	subs	r3, r3, r7
 800c974:	7561      	strb	r1, [r4, #21]
 800c976:	60a2      	str	r2, [r4, #8]
 800c978:	6123      	str	r3, [r4, #16]
 800c97a:	f080 0001 	eor.w	r0, r0, #1
 800c97e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c982:	2104      	movs	r1, #4
 800c984:	4620      	mov	r0, r4
 800c986:	f000 f851 	bl	800ca2c <ucdr_check_final_buffer_behavior>
 800c98a:	b1b0      	cbz	r0, 800c9ba <ucdr_deserialize_float+0xc6>
 800c98c:	7d23      	ldrb	r3, [r4, #20]
 800c98e:	2b01      	cmp	r3, #1
 800c990:	68a3      	ldr	r3, [r4, #8]
 800c992:	d017      	beq.n	800c9c4 <ucdr_deserialize_float+0xd0>
 800c994:	78db      	ldrb	r3, [r3, #3]
 800c996:	702b      	strb	r3, [r5, #0]
 800c998:	68a3      	ldr	r3, [r4, #8]
 800c99a:	789b      	ldrb	r3, [r3, #2]
 800c99c:	706b      	strb	r3, [r5, #1]
 800c99e:	68a3      	ldr	r3, [r4, #8]
 800c9a0:	785b      	ldrb	r3, [r3, #1]
 800c9a2:	70ab      	strb	r3, [r5, #2]
 800c9a4:	68a3      	ldr	r3, [r4, #8]
 800c9a6:	781b      	ldrb	r3, [r3, #0]
 800c9a8:	70eb      	strb	r3, [r5, #3]
 800c9aa:	68a2      	ldr	r2, [r4, #8]
 800c9ac:	6923      	ldr	r3, [r4, #16]
 800c9ae:	3204      	adds	r2, #4
 800c9b0:	3304      	adds	r3, #4
 800c9b2:	2104      	movs	r1, #4
 800c9b4:	60a2      	str	r2, [r4, #8]
 800c9b6:	6123      	str	r3, [r4, #16]
 800c9b8:	7561      	strb	r1, [r4, #21]
 800c9ba:	7da0      	ldrb	r0, [r4, #22]
 800c9bc:	f080 0001 	eor.w	r0, r0, #1
 800c9c0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c9c4:	681b      	ldr	r3, [r3, #0]
 800c9c6:	602b      	str	r3, [r5, #0]
 800c9c8:	e7ef      	b.n	800c9aa <ucdr_deserialize_float+0xb6>
 800c9ca:	68a2      	ldr	r2, [r4, #8]
 800c9cc:	6923      	ldr	r3, [r4, #16]
 800c9ce:	7da0      	ldrb	r0, [r4, #22]
 800c9d0:	f884 8015 	strb.w	r8, [r4, #21]
 800c9d4:	1bd2      	subs	r2, r2, r7
 800c9d6:	1bdb      	subs	r3, r3, r7
 800c9d8:	60a2      	str	r2, [r4, #8]
 800c9da:	6123      	str	r3, [r4, #16]
 800c9dc:	f080 0001 	eor.w	r0, r0, #1
 800c9e0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c9e4:	68a3      	ldr	r3, [r4, #8]
 800c9e6:	789b      	ldrb	r3, [r3, #2]
 800c9e8:	706b      	strb	r3, [r5, #1]
 800c9ea:	1cab      	adds	r3, r5, #2
 800c9ec:	68a2      	ldr	r2, [r4, #8]
 800c9ee:	7852      	ldrb	r2, [r2, #1]
 800c9f0:	f803 2b01 	strb.w	r2, [r3], #1
 800c9f4:	68a2      	ldr	r2, [r4, #8]
 800c9f6:	7812      	ldrb	r2, [r2, #0]
 800c9f8:	701a      	strb	r2, [r3, #0]
 800c9fa:	e7b4      	b.n	800c966 <ucdr_deserialize_float+0x72>
 800c9fc:	4631      	mov	r1, r6
 800c9fe:	463a      	mov	r2, r7
 800ca00:	4628      	mov	r0, r5
 800ca02:	f009 f9ec 	bl	8015dde <memcpy>
 800ca06:	68a1      	ldr	r1, [r4, #8]
 800ca08:	464a      	mov	r2, r9
 800ca0a:	19e8      	adds	r0, r5, r7
 800ca0c:	f009 f9e7 	bl	8015dde <memcpy>
 800ca10:	e7a9      	b.n	800c966 <ucdr_deserialize_float+0x72>
 800ca12:	bf00      	nop

0800ca14 <ucdr_check_buffer_available_for>:
 800ca14:	7d83      	ldrb	r3, [r0, #22]
 800ca16:	b93b      	cbnz	r3, 800ca28 <ucdr_check_buffer_available_for+0x14>
 800ca18:	e9d0 0301 	ldrd	r0, r3, [r0, #4]
 800ca1c:	4419      	add	r1, r3
 800ca1e:	4288      	cmp	r0, r1
 800ca20:	bf34      	ite	cc
 800ca22:	2000      	movcc	r0, #0
 800ca24:	2001      	movcs	r0, #1
 800ca26:	4770      	bx	lr
 800ca28:	2000      	movs	r0, #0
 800ca2a:	4770      	bx	lr

0800ca2c <ucdr_check_final_buffer_behavior>:
 800ca2c:	7d83      	ldrb	r3, [r0, #22]
 800ca2e:	b943      	cbnz	r3, 800ca42 <ucdr_check_final_buffer_behavior+0x16>
 800ca30:	e9d0 2101 	ldrd	r2, r1, [r0, #4]
 800ca34:	4291      	cmp	r1, r2
 800ca36:	b510      	push	{r4, lr}
 800ca38:	4604      	mov	r4, r0
 800ca3a:	d205      	bcs.n	800ca48 <ucdr_check_final_buffer_behavior+0x1c>
 800ca3c:	2301      	movs	r3, #1
 800ca3e:	4618      	mov	r0, r3
 800ca40:	bd10      	pop	{r4, pc}
 800ca42:	2300      	movs	r3, #0
 800ca44:	4618      	mov	r0, r3
 800ca46:	4770      	bx	lr
 800ca48:	6982      	ldr	r2, [r0, #24]
 800ca4a:	b13a      	cbz	r2, 800ca5c <ucdr_check_final_buffer_behavior+0x30>
 800ca4c:	69c1      	ldr	r1, [r0, #28]
 800ca4e:	4790      	blx	r2
 800ca50:	f080 0301 	eor.w	r3, r0, #1
 800ca54:	b2db      	uxtb	r3, r3
 800ca56:	75a0      	strb	r0, [r4, #22]
 800ca58:	4618      	mov	r0, r3
 800ca5a:	bd10      	pop	{r4, pc}
 800ca5c:	2001      	movs	r0, #1
 800ca5e:	75a0      	strb	r0, [r4, #22]
 800ca60:	e7fa      	b.n	800ca58 <ucdr_check_final_buffer_behavior+0x2c>
 800ca62:	bf00      	nop

0800ca64 <ucdr_set_on_full_buffer_callback>:
 800ca64:	e9c0 1206 	strd	r1, r2, [r0, #24]
 800ca68:	4770      	bx	lr
 800ca6a:	bf00      	nop

0800ca6c <ucdr_init_buffer_origin_offset_endian>:
 800ca6c:	b410      	push	{r4}
 800ca6e:	9c01      	ldr	r4, [sp, #4]
 800ca70:	6001      	str	r1, [r0, #0]
 800ca72:	440a      	add	r2, r1
 800ca74:	6042      	str	r2, [r0, #4]
 800ca76:	190a      	adds	r2, r1, r4
 800ca78:	441c      	add	r4, r3
 800ca7a:	e9c0 3403 	strd	r3, r4, [r0, #12]
 800ca7e:	6082      	str	r2, [r0, #8]
 800ca80:	f89d 3008 	ldrb.w	r3, [sp, #8]
 800ca84:	7503      	strb	r3, [r0, #20]
 800ca86:	2200      	movs	r2, #0
 800ca88:	e9c0 2206 	strd	r2, r2, [r0, #24]
 800ca8c:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ca90:	7542      	strb	r2, [r0, #21]
 800ca92:	7582      	strb	r2, [r0, #22]
 800ca94:	4770      	bx	lr
 800ca96:	bf00      	nop

0800ca98 <ucdr_init_buffer_origin_offset>:
 800ca98:	b510      	push	{r4, lr}
 800ca9a:	b082      	sub	sp, #8
 800ca9c:	9c04      	ldr	r4, [sp, #16]
 800ca9e:	9400      	str	r4, [sp, #0]
 800caa0:	2401      	movs	r4, #1
 800caa2:	9401      	str	r4, [sp, #4]
 800caa4:	f7ff ffe2 	bl	800ca6c <ucdr_init_buffer_origin_offset_endian>
 800caa8:	b002      	add	sp, #8
 800caaa:	bd10      	pop	{r4, pc}

0800caac <ucdr_init_buffer_origin>:
 800caac:	b510      	push	{r4, lr}
 800caae:	b082      	sub	sp, #8
 800cab0:	2400      	movs	r4, #0
 800cab2:	9400      	str	r4, [sp, #0]
 800cab4:	f7ff fff0 	bl	800ca98 <ucdr_init_buffer_origin_offset>
 800cab8:	b002      	add	sp, #8
 800caba:	bd10      	pop	{r4, pc}

0800cabc <ucdr_init_buffer>:
 800cabc:	2300      	movs	r3, #0
 800cabe:	f7ff bff5 	b.w	800caac <ucdr_init_buffer_origin>
 800cac2:	bf00      	nop

0800cac4 <ucdr_alignment>:
 800cac4:	fbb0 f3f1 	udiv	r3, r0, r1
 800cac8:	fb03 0011 	mls	r0, r3, r1, r0
 800cacc:	1a08      	subs	r0, r1, r0
 800cace:	3901      	subs	r1, #1
 800cad0:	4008      	ands	r0, r1
 800cad2:	4770      	bx	lr

0800cad4 <ucdr_buffer_alignment>:
 800cad4:	7d43      	ldrb	r3, [r0, #21]
 800cad6:	428b      	cmp	r3, r1
 800cad8:	d208      	bcs.n	800caec <ucdr_buffer_alignment+0x18>
 800cada:	6900      	ldr	r0, [r0, #16]
 800cadc:	fbb0 f3f1 	udiv	r3, r0, r1
 800cae0:	fb01 0013 	mls	r0, r1, r3, r0
 800cae4:	1a08      	subs	r0, r1, r0
 800cae6:	3901      	subs	r1, #1
 800cae8:	4008      	ands	r0, r1
 800caea:	4770      	bx	lr
 800caec:	2000      	movs	r0, #0
 800caee:	4770      	bx	lr

0800caf0 <ucdr_align_to>:
 800caf0:	b538      	push	{r3, r4, r5, lr}
 800caf2:	4604      	mov	r4, r0
 800caf4:	460d      	mov	r5, r1
 800caf6:	f7ff ffed 	bl	800cad4 <ucdr_buffer_alignment>
 800cafa:	68a3      	ldr	r3, [r4, #8]
 800cafc:	6921      	ldr	r1, [r4, #16]
 800cafe:	7565      	strb	r5, [r4, #21]
 800cb00:	181a      	adds	r2, r3, r0
 800cb02:	6863      	ldr	r3, [r4, #4]
 800cb04:	4293      	cmp	r3, r2
 800cb06:	4408      	add	r0, r1
 800cb08:	bf28      	it	cs
 800cb0a:	4613      	movcs	r3, r2
 800cb0c:	6120      	str	r0, [r4, #16]
 800cb0e:	60a3      	str	r3, [r4, #8]
 800cb10:	bd38      	pop	{r3, r4, r5, pc}
 800cb12:	bf00      	nop

0800cb14 <ucdr_buffer_length>:
 800cb14:	6882      	ldr	r2, [r0, #8]
 800cb16:	6800      	ldr	r0, [r0, #0]
 800cb18:	1a10      	subs	r0, r2, r0
 800cb1a:	4770      	bx	lr

0800cb1c <ucdr_buffer_remaining>:
 800cb1c:	e9d0 2001 	ldrd	r2, r0, [r0, #4]
 800cb20:	1a10      	subs	r0, r2, r0
 800cb22:	4770      	bx	lr

0800cb24 <ucdr_check_final_buffer_behavior_array>:
 800cb24:	b538      	push	{r3, r4, r5, lr}
 800cb26:	7d83      	ldrb	r3, [r0, #22]
 800cb28:	b963      	cbnz	r3, 800cb44 <ucdr_check_final_buffer_behavior_array+0x20>
 800cb2a:	e9d0 3201 	ldrd	r3, r2, [r0, #4]
 800cb2e:	429a      	cmp	r2, r3
 800cb30:	4604      	mov	r4, r0
 800cb32:	460d      	mov	r5, r1
 800cb34:	d308      	bcc.n	800cb48 <ucdr_check_final_buffer_behavior_array+0x24>
 800cb36:	b139      	cbz	r1, 800cb48 <ucdr_check_final_buffer_behavior_array+0x24>
 800cb38:	6983      	ldr	r3, [r0, #24]
 800cb3a:	b163      	cbz	r3, 800cb56 <ucdr_check_final_buffer_behavior_array+0x32>
 800cb3c:	69c1      	ldr	r1, [r0, #28]
 800cb3e:	4798      	blx	r3
 800cb40:	75a0      	strb	r0, [r4, #22]
 800cb42:	b108      	cbz	r0, 800cb48 <ucdr_check_final_buffer_behavior_array+0x24>
 800cb44:	2000      	movs	r0, #0
 800cb46:	bd38      	pop	{r3, r4, r5, pc}
 800cb48:	4620      	mov	r0, r4
 800cb4a:	f7ff ffe7 	bl	800cb1c <ucdr_buffer_remaining>
 800cb4e:	42a8      	cmp	r0, r5
 800cb50:	bf28      	it	cs
 800cb52:	4628      	movcs	r0, r5
 800cb54:	bd38      	pop	{r3, r4, r5, pc}
 800cb56:	2301      	movs	r3, #1
 800cb58:	7583      	strb	r3, [r0, #22]
 800cb5a:	e7f3      	b.n	800cb44 <ucdr_check_final_buffer_behavior_array+0x20>

0800cb5c <ucdr_advance_buffer>:
 800cb5c:	b538      	push	{r3, r4, r5, lr}
 800cb5e:	4604      	mov	r4, r0
 800cb60:	460d      	mov	r5, r1
 800cb62:	f7ff ff57 	bl	800ca14 <ucdr_check_buffer_available_for>
 800cb66:	b178      	cbz	r0, 800cb88 <ucdr_advance_buffer+0x2c>
 800cb68:	6923      	ldr	r3, [r4, #16]
 800cb6a:	68a2      	ldr	r2, [r4, #8]
 800cb6c:	442b      	add	r3, r5
 800cb6e:	6123      	str	r3, [r4, #16]
 800cb70:	2301      	movs	r3, #1
 800cb72:	442a      	add	r2, r5
 800cb74:	7563      	strb	r3, [r4, #21]
 800cb76:	60a2      	str	r2, [r4, #8]
 800cb78:	bd38      	pop	{r3, r4, r5, pc}
 800cb7a:	68a2      	ldr	r2, [r4, #8]
 800cb7c:	6923      	ldr	r3, [r4, #16]
 800cb7e:	4402      	add	r2, r0
 800cb80:	4403      	add	r3, r0
 800cb82:	1a2d      	subs	r5, r5, r0
 800cb84:	60a2      	str	r2, [r4, #8]
 800cb86:	6123      	str	r3, [r4, #16]
 800cb88:	4629      	mov	r1, r5
 800cb8a:	2201      	movs	r2, #1
 800cb8c:	4620      	mov	r0, r4
 800cb8e:	f7ff ffc9 	bl	800cb24 <ucdr_check_final_buffer_behavior_array>
 800cb92:	2800      	cmp	r0, #0
 800cb94:	d1f1      	bne.n	800cb7a <ucdr_advance_buffer+0x1e>
 800cb96:	2301      	movs	r3, #1
 800cb98:	7563      	strb	r3, [r4, #21]
 800cb9a:	bd38      	pop	{r3, r4, r5, pc}

0800cb9c <uxr_buffer_delete_entity>:
 800cb9c:	b510      	push	{r4, lr}
 800cb9e:	2300      	movs	r3, #0
 800cba0:	b08e      	sub	sp, #56	@ 0x38
 800cba2:	e9cd 3201 	strd	r3, r2, [sp, #4]
 800cba6:	2303      	movs	r3, #3
 800cba8:	9300      	str	r3, [sp, #0]
 800cbaa:	2204      	movs	r2, #4
 800cbac:	ab06      	add	r3, sp, #24
 800cbae:	4604      	mov	r4, r0
 800cbb0:	9103      	str	r1, [sp, #12]
 800cbb2:	f001 fa9f 	bl	800e0f4 <uxr_prepare_stream_to_write_submessage>
 800cbb6:	b918      	cbnz	r0, 800cbc0 <uxr_buffer_delete_entity+0x24>
 800cbb8:	4604      	mov	r4, r0
 800cbba:	4620      	mov	r0, r4
 800cbbc:	b00e      	add	sp, #56	@ 0x38
 800cbbe:	bd10      	pop	{r4, pc}
 800cbc0:	9902      	ldr	r1, [sp, #8]
 800cbc2:	aa05      	add	r2, sp, #20
 800cbc4:	4620      	mov	r0, r4
 800cbc6:	f001 fbcb 	bl	800e360 <uxr_init_base_object_request>
 800cbca:	a905      	add	r1, sp, #20
 800cbcc:	4604      	mov	r4, r0
 800cbce:	a806      	add	r0, sp, #24
 800cbd0:	f003 f84e 	bl	800fc70 <uxr_serialize_DELETE_Payload>
 800cbd4:	4620      	mov	r0, r4
 800cbd6:	b00e      	add	sp, #56	@ 0x38
 800cbd8:	bd10      	pop	{r4, pc}
 800cbda:	bf00      	nop

0800cbdc <uxr_common_create_entity>:
 800cbdc:	b510      	push	{r4, lr}
 800cbde:	f3c2 4c07 	ubfx	ip, r2, #16, #8
 800cbe2:	b08c      	sub	sp, #48	@ 0x30
 800cbe4:	e9cd 2102 	strd	r2, r1, [sp, #8]
 800cbe8:	f1bc 0f01 	cmp.w	ip, #1
 800cbec:	bf0c      	ite	eq
 800cbee:	f003 0201 	andeq.w	r2, r3, #1
 800cbf2:	2200      	movne	r2, #0
 800cbf4:	330e      	adds	r3, #14
 800cbf6:	f89d 1038 	ldrb.w	r1, [sp, #56]	@ 0x38
 800cbfa:	9101      	str	r1, [sp, #4]
 800cbfc:	441a      	add	r2, r3
 800cbfe:	2301      	movs	r3, #1
 800cc00:	9300      	str	r3, [sp, #0]
 800cc02:	9903      	ldr	r1, [sp, #12]
 800cc04:	ab04      	add	r3, sp, #16
 800cc06:	b292      	uxth	r2, r2
 800cc08:	4604      	mov	r4, r0
 800cc0a:	f001 fa73 	bl	800e0f4 <uxr_prepare_stream_to_write_submessage>
 800cc0e:	b918      	cbnz	r0, 800cc18 <uxr_common_create_entity+0x3c>
 800cc10:	4604      	mov	r4, r0
 800cc12:	4620      	mov	r0, r4
 800cc14:	b00c      	add	sp, #48	@ 0x30
 800cc16:	bd10      	pop	{r4, pc}
 800cc18:	9902      	ldr	r1, [sp, #8]
 800cc1a:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800cc1c:	4620      	mov	r0, r4
 800cc1e:	f001 fb9f 	bl	800e360 <uxr_init_base_object_request>
 800cc22:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800cc24:	4604      	mov	r4, r0
 800cc26:	a804      	add	r0, sp, #16
 800cc28:	f002 ff7e 	bl	800fb28 <uxr_serialize_CREATE_Payload>
 800cc2c:	4620      	mov	r0, r4
 800cc2e:	b00c      	add	sp, #48	@ 0x30
 800cc30:	bd10      	pop	{r4, pc}
 800cc32:	bf00      	nop

0800cc34 <uxr_buffer_create_participant_bin>:
 800cc34:	b570      	push	{r4, r5, r6, lr}
 800cc36:	f5ad 7d16 	sub.w	sp, sp, #600	@ 0x258
 800cc3a:	ac11      	add	r4, sp, #68	@ 0x44
 800cc3c:	f8ad 3254 	strh.w	r3, [sp, #596]	@ 0x254
 800cc40:	2303      	movs	r3, #3
 800cc42:	e9cd 2102 	strd	r2, r1, [sp, #8]
 800cc46:	7223      	strb	r3, [r4, #8]
 800cc48:	9b9a      	ldr	r3, [sp, #616]	@ 0x268
 800cc4a:	f89d 626c 	ldrb.w	r6, [sp, #620]	@ 0x26c
 800cc4e:	2201      	movs	r2, #1
 800cc50:	2100      	movs	r1, #0
 800cc52:	4605      	mov	r5, r0
 800cc54:	7122      	strb	r2, [r4, #4]
 800cc56:	f88d 1014 	strb.w	r1, [sp, #20]
 800cc5a:	b1cb      	cbz	r3, 800cc90 <uxr_buffer_create_participant_bin+0x5c>
 800cc5c:	f88d 201c 	strb.w	r2, [sp, #28]
 800cc60:	9308      	str	r3, [sp, #32]
 800cc62:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800cc66:	a915      	add	r1, sp, #84	@ 0x54
 800cc68:	a809      	add	r0, sp, #36	@ 0x24
 800cc6a:	f7ff ff27 	bl	800cabc <ucdr_init_buffer>
 800cc6e:	a905      	add	r1, sp, #20
 800cc70:	a809      	add	r0, sp, #36	@ 0x24
 800cc72:	f002 fc17 	bl	800f4a4 <uxr_serialize_OBJK_DomainParticipant_Binary>
 800cc76:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800cc78:	9600      	str	r6, [sp, #0]
 800cc7a:	9401      	str	r4, [sp, #4]
 800cc7c:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 800cc80:	60e3      	str	r3, [r4, #12]
 800cc82:	4628      	mov	r0, r5
 800cc84:	b29b      	uxth	r3, r3
 800cc86:	f7ff ffa9 	bl	800cbdc <uxr_common_create_entity>
 800cc8a:	f50d 7d16 	add.w	sp, sp, #600	@ 0x258
 800cc8e:	bd70      	pop	{r4, r5, r6, pc}
 800cc90:	f88d 301c 	strb.w	r3, [sp, #28]
 800cc94:	e7e5      	b.n	800cc62 <uxr_buffer_create_participant_bin+0x2e>
 800cc96:	bf00      	nop

0800cc98 <uxr_buffer_create_topic_bin>:
 800cc98:	b570      	push	{r4, r5, r6, lr}
 800cc9a:	f5ad 7d18 	sub.w	sp, sp, #608	@ 0x260
 800cc9e:	e9cd 3203 	strd	r3, r2, [sp, #12]
 800cca2:	9105      	str	r1, [sp, #20]
 800cca4:	4605      	mov	r5, r0
 800cca6:	a997      	add	r1, sp, #604	@ 0x25c
 800cca8:	4618      	mov	r0, r3
 800ccaa:	2302      	movs	r3, #2
 800ccac:	f89d 6278 	ldrb.w	r6, [sp, #632]	@ 0x278
 800ccb0:	f88d 3050 	strb.w	r3, [sp, #80]	@ 0x50
 800ccb4:	f000 f9b2 	bl	800d01c <uxr_object_id_to_raw>
 800ccb8:	9b9c      	ldr	r3, [sp, #624]	@ 0x270
 800ccba:	9306      	str	r3, [sp, #24]
 800ccbc:	9b9d      	ldr	r3, [sp, #628]	@ 0x274
 800ccbe:	930a      	str	r3, [sp, #40]	@ 0x28
 800ccc0:	2303      	movs	r3, #3
 800ccc2:	f88d 3054 	strb.w	r3, [sp, #84]	@ 0x54
 800ccc6:	2301      	movs	r3, #1
 800ccc8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800cccc:	f88d 3024 	strb.w	r3, [sp, #36]	@ 0x24
 800ccd0:	a917      	add	r1, sp, #92	@ 0x5c
 800ccd2:	2300      	movs	r3, #0
 800ccd4:	a80b      	add	r0, sp, #44	@ 0x2c
 800ccd6:	f88d 301c 	strb.w	r3, [sp, #28]
 800ccda:	f7ff feef 	bl	800cabc <ucdr_init_buffer>
 800ccde:	a906      	add	r1, sp, #24
 800cce0:	a80b      	add	r0, sp, #44	@ 0x2c
 800cce2:	f002 fc01 	bl	800f4e8 <uxr_serialize_OBJK_Topic_Binary>
 800cce6:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800cce8:	9316      	str	r3, [sp, #88]	@ 0x58
 800ccea:	ac13      	add	r4, sp, #76	@ 0x4c
 800ccec:	e9dd 2104 	ldrd	r2, r1, [sp, #16]
 800ccf0:	9600      	str	r6, [sp, #0]
 800ccf2:	9401      	str	r4, [sp, #4]
 800ccf4:	b29b      	uxth	r3, r3
 800ccf6:	4628      	mov	r0, r5
 800ccf8:	f7ff ff70 	bl	800cbdc <uxr_common_create_entity>
 800ccfc:	f50d 7d18 	add.w	sp, sp, #608	@ 0x260
 800cd00:	bd70      	pop	{r4, r5, r6, pc}
 800cd02:	bf00      	nop

0800cd04 <uxr_buffer_create_subscriber_bin>:
 800cd04:	b570      	push	{r4, r5, r6, lr}
 800cd06:	f5ad 6d91 	sub.w	sp, sp, #1160	@ 0x488
 800cd0a:	e9cd 3203 	strd	r3, r2, [sp, #12]
 800cd0e:	9105      	str	r1, [sp, #20]
 800cd10:	4605      	mov	r5, r0
 800cd12:	a992      	add	r1, sp, #584	@ 0x248
 800cd14:	4618      	mov	r0, r3
 800cd16:	2304      	movs	r3, #4
 800cd18:	f89d 6498 	ldrb.w	r6, [sp, #1176]	@ 0x498
 800cd1c:	f88d 303c 	strb.w	r3, [sp, #60]	@ 0x3c
 800cd20:	f000 f97c 	bl	800d01c <uxr_object_id_to_raw>
 800cd24:	2300      	movs	r3, #0
 800cd26:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800cd2a:	f88d 324c 	strb.w	r3, [sp, #588]	@ 0x24c
 800cd2e:	f88d 3254 	strb.w	r3, [sp, #596]	@ 0x254
 800cd32:	a912      	add	r1, sp, #72	@ 0x48
 800cd34:	2303      	movs	r3, #3
 800cd36:	a806      	add	r0, sp, #24
 800cd38:	f88d 3040 	strb.w	r3, [sp, #64]	@ 0x40
 800cd3c:	f7ff febe 	bl	800cabc <ucdr_init_buffer>
 800cd40:	a993      	add	r1, sp, #588	@ 0x24c
 800cd42:	a806      	add	r0, sp, #24
 800cd44:	f002 fc84 	bl	800f650 <uxr_serialize_OBJK_Subscriber_Binary>
 800cd48:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800cd4a:	9311      	str	r3, [sp, #68]	@ 0x44
 800cd4c:	ac0e      	add	r4, sp, #56	@ 0x38
 800cd4e:	e9dd 2104 	ldrd	r2, r1, [sp, #16]
 800cd52:	9600      	str	r6, [sp, #0]
 800cd54:	9401      	str	r4, [sp, #4]
 800cd56:	b29b      	uxth	r3, r3
 800cd58:	4628      	mov	r0, r5
 800cd5a:	f7ff ff3f 	bl	800cbdc <uxr_common_create_entity>
 800cd5e:	f50d 6d91 	add.w	sp, sp, #1160	@ 0x488
 800cd62:	bd70      	pop	{r4, r5, r6, pc}

0800cd64 <uxr_buffer_create_datareader_bin>:
 800cd64:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cd68:	f5ad 7d24 	sub.w	sp, sp, #656	@ 0x290
 800cd6c:	ac1f      	add	r4, sp, #124	@ 0x7c
 800cd6e:	e9cd 3203 	strd	r3, r2, [sp, #12]
 800cd72:	f8bd 52b0 	ldrh.w	r5, [sp, #688]	@ 0x2b0
 800cd76:	9105      	str	r1, [sp, #20]
 800cd78:	4606      	mov	r6, r0
 800cd7a:	a9a3      	add	r1, sp, #652	@ 0x28c
 800cd7c:	4618      	mov	r0, r3
 800cd7e:	2306      	movs	r3, #6
 800cd80:	7123      	strb	r3, [r4, #4]
 800cd82:	f89d 82b4 	ldrb.w	r8, [sp, #692]	@ 0x2b4
 800cd86:	2703      	movs	r7, #3
 800cd88:	f000 f948 	bl	800d01c <uxr_object_id_to_raw>
 800cd8c:	98aa      	ldr	r0, [sp, #680]	@ 0x2a8
 800cd8e:	7227      	strb	r7, [r4, #8]
 800cd90:	a90e      	add	r1, sp, #56	@ 0x38
 800cd92:	f000 f943 	bl	800d01c <uxr_object_id_to_raw>
 800cd96:	2300      	movs	r3, #0
 800cd98:	f8ad 5044 	strh.w	r5, [sp, #68]	@ 0x44
 800cd9c:	f89d 22ad 	ldrb.w	r2, [sp, #685]	@ 0x2ad
 800cda0:	f88d 3070 	strb.w	r3, [sp, #112]	@ 0x70
 800cda4:	3d00      	subs	r5, #0
 800cda6:	bf18      	it	ne
 800cda8:	2501      	movne	r5, #1
 800cdaa:	f88d 3064 	strb.w	r3, [sp, #100]	@ 0x64
 800cdae:	f88d 3046 	strb.w	r3, [sp, #70]	@ 0x46
 800cdb2:	f88d 304c 	strb.w	r3, [sp, #76]	@ 0x4c
 800cdb6:	f88d 3054 	strb.w	r3, [sp, #84]	@ 0x54
 800cdba:	f8ad 3040 	strh.w	r3, [sp, #64]	@ 0x40
 800cdbe:	2301      	movs	r3, #1
 800cdc0:	f88d 5042 	strb.w	r5, [sp, #66]	@ 0x42
 800cdc4:	f88d 303a 	strb.w	r3, [sp, #58]	@ 0x3a
 800cdc8:	bb8a      	cbnz	r2, 800ce2e <uxr_buffer_create_datareader_bin+0xca>
 800cdca:	f8ad 3040 	strh.w	r3, [sp, #64]	@ 0x40
 800cdce:	f04f 0e23 	mov.w	lr, #35	@ 0x23
 800cdd2:	f04f 0c13 	mov.w	ip, #19
 800cdd6:	250b      	movs	r5, #11
 800cdd8:	2221      	movs	r2, #33	@ 0x21
 800cdda:	2111      	movs	r1, #17
 800cddc:	2009      	movs	r0, #9
 800cdde:	f89d 32ae 	ldrb.w	r3, [sp, #686]	@ 0x2ae
 800cde2:	b923      	cbnz	r3, 800cdee <uxr_buffer_create_datareader_bin+0x8a>
 800cde4:	f8ad 7040 	strh.w	r7, [sp, #64]	@ 0x40
 800cde8:	4672      	mov	r2, lr
 800cdea:	4661      	mov	r1, ip
 800cdec:	4628      	mov	r0, r5
 800cdee:	f89d 32ac 	ldrb.w	r3, [sp, #684]	@ 0x2ac
 800cdf2:	2b01      	cmp	r3, #1
 800cdf4:	d025      	beq.n	800ce42 <uxr_buffer_create_datareader_bin+0xde>
 800cdf6:	2b03      	cmp	r3, #3
 800cdf8:	d029      	beq.n	800ce4e <uxr_buffer_create_datareader_bin+0xea>
 800cdfa:	b32b      	cbz	r3, 800ce48 <uxr_buffer_create_datareader_bin+0xe4>
 800cdfc:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800ce00:	a923      	add	r1, sp, #140	@ 0x8c
 800ce02:	a806      	add	r0, sp, #24
 800ce04:	f7ff fe5a 	bl	800cabc <ucdr_init_buffer>
 800ce08:	a90e      	add	r1, sp, #56	@ 0x38
 800ce0a:	a806      	add	r0, sp, #24
 800ce0c:	f002 fc96 	bl	800f73c <uxr_serialize_OBJK_DataReader_Binary>
 800ce10:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800ce12:	f8cd 8000 	str.w	r8, [sp]
 800ce16:	9401      	str	r4, [sp, #4]
 800ce18:	e9dd 2104 	ldrd	r2, r1, [sp, #16]
 800ce1c:	60e3      	str	r3, [r4, #12]
 800ce1e:	4630      	mov	r0, r6
 800ce20:	b29b      	uxth	r3, r3
 800ce22:	f7ff fedb 	bl	800cbdc <uxr_common_create_entity>
 800ce26:	f50d 7d24 	add.w	sp, sp, #656	@ 0x290
 800ce2a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ce2e:	f04f 0e22 	mov.w	lr, #34	@ 0x22
 800ce32:	f04f 0c12 	mov.w	ip, #18
 800ce36:	250a      	movs	r5, #10
 800ce38:	2220      	movs	r2, #32
 800ce3a:	2110      	movs	r1, #16
 800ce3c:	2008      	movs	r0, #8
 800ce3e:	2702      	movs	r7, #2
 800ce40:	e7cd      	b.n	800cdde <uxr_buffer_create_datareader_bin+0x7a>
 800ce42:	f8ad 1040 	strh.w	r1, [sp, #64]	@ 0x40
 800ce46:	e7d9      	b.n	800cdfc <uxr_buffer_create_datareader_bin+0x98>
 800ce48:	f8ad 0040 	strh.w	r0, [sp, #64]	@ 0x40
 800ce4c:	e7d6      	b.n	800cdfc <uxr_buffer_create_datareader_bin+0x98>
 800ce4e:	f8ad 2040 	strh.w	r2, [sp, #64]	@ 0x40
 800ce52:	e7d3      	b.n	800cdfc <uxr_buffer_create_datareader_bin+0x98>

0800ce54 <get_custom_error>:
 800ce54:	4b01      	ldr	r3, [pc, #4]	@ (800ce5c <get_custom_error+0x8>)
 800ce56:	7818      	ldrb	r0, [r3, #0]
 800ce58:	4770      	bx	lr
 800ce5a:	bf00      	nop
 800ce5c:	2000db94 	.word	0x2000db94

0800ce60 <recv_custom_msg>:
 800ce60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ce64:	4693      	mov	fp, r2
 800ce66:	b089      	sub	sp, #36	@ 0x24
 800ce68:	f890 2200 	ldrb.w	r2, [r0, #512]	@ 0x200
 800ce6c:	9305      	str	r3, [sp, #20]
 800ce6e:	468a      	mov	sl, r1
 800ce70:	2100      	movs	r1, #0
 800ce72:	4604      	mov	r4, r0
 800ce74:	f88d 101e 	strb.w	r1, [sp, #30]
 800ce78:	b322      	cbz	r2, 800cec4 <recv_custom_msg+0x64>
 800ce7a:	f200 2902 	addw	r9, r0, #514	@ 0x202
 800ce7e:	f10d 081f 	add.w	r8, sp, #31
 800ce82:	af05      	add	r7, sp, #20
 800ce84:	f10d 061e 	add.w	r6, sp, #30
 800ce88:	f44f 7500 	mov.w	r5, #512	@ 0x200
 800ce8c:	e002      	b.n	800ce94 <recv_custom_msg+0x34>
 800ce8e:	9b05      	ldr	r3, [sp, #20]
 800ce90:	2b00      	cmp	r3, #0
 800ce92:	dd0f      	ble.n	800ceb4 <recv_custom_msg+0x54>
 800ce94:	f8d4 1274 	ldr.w	r1, [r4, #628]	@ 0x274
 800ce98:	4623      	mov	r3, r4
 800ce9a:	e9cd 7802 	strd	r7, r8, [sp, #8]
 800ce9e:	e9cd 5600 	strd	r5, r6, [sp]
 800cea2:	4622      	mov	r2, r4
 800cea4:	4648      	mov	r0, r9
 800cea6:	f001 fc89 	bl	800e7bc <uxr_read_framed_msg>
 800ceaa:	2800      	cmp	r0, #0
 800ceac:	d0ef      	beq.n	800ce8e <recv_custom_msg+0x2e>
 800ceae:	f89d 301e 	ldrb.w	r3, [sp, #30]
 800ceb2:	b1b3      	cbz	r3, 800cee2 <recv_custom_msg+0x82>
 800ceb4:	4b0f      	ldr	r3, [pc, #60]	@ (800cef4 <recv_custom_msg+0x94>)
 800ceb6:	f89d 201f 	ldrb.w	r2, [sp, #31]
 800ceba:	701a      	strb	r2, [r3, #0]
 800cebc:	2000      	movs	r0, #0
 800cebe:	b009      	add	sp, #36	@ 0x24
 800cec0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cec4:	f10d 021f 	add.w	r2, sp, #31
 800cec8:	9200      	str	r2, [sp, #0]
 800ceca:	f8d0 5274 	ldr.w	r5, [r0, #628]	@ 0x274
 800cece:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800ced2:	4601      	mov	r1, r0
 800ced4:	47a8      	blx	r5
 800ced6:	2800      	cmp	r0, #0
 800ced8:	d0ec      	beq.n	800ceb4 <recv_custom_msg+0x54>
 800ceda:	f89d 301e 	ldrb.w	r3, [sp, #30]
 800cede:	2b00      	cmp	r3, #0
 800cee0:	d1e8      	bne.n	800ceb4 <recv_custom_msg+0x54>
 800cee2:	f8cb 0000 	str.w	r0, [fp]
 800cee6:	2001      	movs	r0, #1
 800cee8:	f8ca 4000 	str.w	r4, [sl]
 800ceec:	b009      	add	sp, #36	@ 0x24
 800ceee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cef2:	bf00      	nop
 800cef4:	2000db94 	.word	0x2000db94

0800cef8 <send_custom_msg>:
 800cef8:	b530      	push	{r4, r5, lr}
 800cefa:	f890 4200 	ldrb.w	r4, [r0, #512]	@ 0x200
 800cefe:	b087      	sub	sp, #28
 800cf00:	4615      	mov	r5, r2
 800cf02:	b974      	cbnz	r4, 800cf22 <send_custom_msg+0x2a>
 800cf04:	f8d0 4270 	ldr.w	r4, [r0, #624]	@ 0x270
 800cf08:	f10d 0317 	add.w	r3, sp, #23
 800cf0c:	47a0      	blx	r4
 800cf0e:	b108      	cbz	r0, 800cf14 <send_custom_msg+0x1c>
 800cf10:	42a8      	cmp	r0, r5
 800cf12:	d015      	beq.n	800cf40 <send_custom_msg+0x48>
 800cf14:	4b0c      	ldr	r3, [pc, #48]	@ (800cf48 <send_custom_msg+0x50>)
 800cf16:	f89d 2017 	ldrb.w	r2, [sp, #23]
 800cf1a:	701a      	strb	r2, [r3, #0]
 800cf1c:	2000      	movs	r0, #0
 800cf1e:	b007      	add	sp, #28
 800cf20:	bd30      	pop	{r4, r5, pc}
 800cf22:	460b      	mov	r3, r1
 800cf24:	2200      	movs	r2, #0
 800cf26:	f10d 0117 	add.w	r1, sp, #23
 800cf2a:	e9cd 2101 	strd	r2, r1, [sp, #4]
 800cf2e:	4602      	mov	r2, r0
 800cf30:	f8d0 1270 	ldr.w	r1, [r0, #624]	@ 0x270
 800cf34:	9500      	str	r5, [sp, #0]
 800cf36:	f200 2002 	addw	r0, r0, #514	@ 0x202
 800cf3a:	f001 fa47 	bl	800e3cc <uxr_write_framed_msg>
 800cf3e:	e7e6      	b.n	800cf0e <send_custom_msg+0x16>
 800cf40:	2001      	movs	r0, #1
 800cf42:	b007      	add	sp, #28
 800cf44:	bd30      	pop	{r4, r5, pc}
 800cf46:	bf00      	nop
 800cf48:	2000db94 	.word	0x2000db94

0800cf4c <uxr_set_custom_transport_callbacks>:
 800cf4c:	b410      	push	{r4}
 800cf4e:	9c01      	ldr	r4, [sp, #4]
 800cf50:	f8c0 4270 	str.w	r4, [r0, #624]	@ 0x270
 800cf54:	e9c0 239a 	strd	r2, r3, [r0, #616]	@ 0x268
 800cf58:	9b02      	ldr	r3, [sp, #8]
 800cf5a:	f880 1200 	strb.w	r1, [r0, #512]	@ 0x200
 800cf5e:	f85d 4b04 	ldr.w	r4, [sp], #4
 800cf62:	f8c0 3274 	str.w	r3, [r0, #628]	@ 0x274
 800cf66:	4770      	bx	lr

0800cf68 <uxr_init_custom_transport>:
 800cf68:	b538      	push	{r3, r4, r5, lr}
 800cf6a:	f8d0 3268 	ldr.w	r3, [r0, #616]	@ 0x268
 800cf6e:	b303      	cbz	r3, 800cfb2 <uxr_init_custom_transport+0x4a>
 800cf70:	f8d0 226c 	ldr.w	r2, [r0, #620]	@ 0x26c
 800cf74:	4604      	mov	r4, r0
 800cf76:	b1e2      	cbz	r2, 800cfb2 <uxr_init_custom_transport+0x4a>
 800cf78:	f8d0 2270 	ldr.w	r2, [r0, #624]	@ 0x270
 800cf7c:	b1ca      	cbz	r2, 800cfb2 <uxr_init_custom_transport+0x4a>
 800cf7e:	f8d0 2274 	ldr.w	r2, [r0, #628]	@ 0x274
 800cf82:	b1b2      	cbz	r2, 800cfb2 <uxr_init_custom_transport+0x4a>
 800cf84:	f8c0 128c 	str.w	r1, [r0, #652]	@ 0x28c
 800cf88:	4798      	blx	r3
 800cf8a:	4605      	mov	r5, r0
 800cf8c:	b188      	cbz	r0, 800cfb2 <uxr_init_custom_transport+0x4a>
 800cf8e:	f894 3200 	ldrb.w	r3, [r4, #512]	@ 0x200
 800cf92:	b98b      	cbnz	r3, 800cfb8 <uxr_init_custom_transport+0x50>
 800cf94:	490b      	ldr	r1, [pc, #44]	@ (800cfc4 <uxr_init_custom_transport+0x5c>)
 800cf96:	4b0c      	ldr	r3, [pc, #48]	@ (800cfc8 <uxr_init_custom_transport+0x60>)
 800cf98:	4a0c      	ldr	r2, [pc, #48]	@ (800cfcc <uxr_init_custom_transport+0x64>)
 800cf9a:	f8c4 3280 	str.w	r3, [r4, #640]	@ 0x280
 800cf9e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800cfa2:	e9c4 419e 	strd	r4, r1, [r4, #632]	@ 0x278
 800cfa6:	f8c4 2284 	str.w	r2, [r4, #644]	@ 0x284
 800cfaa:	f8a4 3288 	strh.w	r3, [r4, #648]	@ 0x288
 800cfae:	4628      	mov	r0, r5
 800cfb0:	bd38      	pop	{r3, r4, r5, pc}
 800cfb2:	2500      	movs	r5, #0
 800cfb4:	4628      	mov	r0, r5
 800cfb6:	bd38      	pop	{r3, r4, r5, pc}
 800cfb8:	2100      	movs	r1, #0
 800cfba:	f204 2002 	addw	r0, r4, #514	@ 0x202
 800cfbe:	f001 f9ff 	bl	800e3c0 <uxr_init_framing_io>
 800cfc2:	e7e7      	b.n	800cf94 <uxr_init_custom_transport+0x2c>
 800cfc4:	0800cef9 	.word	0x0800cef9
 800cfc8:	0800ce61 	.word	0x0800ce61
 800cfcc:	0800ce55 	.word	0x0800ce55

0800cfd0 <uxr_close_custom_transport>:
 800cfd0:	f8d0 326c 	ldr.w	r3, [r0, #620]	@ 0x26c
 800cfd4:	4718      	bx	r3
 800cfd6:	bf00      	nop

0800cfd8 <uxr_object_id>:
 800cfd8:	b082      	sub	sp, #8
 800cfda:	2300      	movs	r3, #0
 800cfdc:	f88d 1006 	strb.w	r1, [sp, #6]
 800cfe0:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 800cfe4:	f360 030f 	bfi	r3, r0, #0, #16
 800cfe8:	f362 431f 	bfi	r3, r2, #16, #16
 800cfec:	4618      	mov	r0, r3
 800cfee:	b002      	add	sp, #8
 800cff0:	4770      	bx	lr
 800cff2:	bf00      	nop

0800cff4 <uxr_object_id_from_raw>:
 800cff4:	7843      	ldrb	r3, [r0, #1]
 800cff6:	7801      	ldrb	r1, [r0, #0]
 800cff8:	b082      	sub	sp, #8
 800cffa:	f003 020f 	and.w	r2, r3, #15
 800cffe:	f88d 2006 	strb.w	r2, [sp, #6]
 800d002:	091b      	lsrs	r3, r3, #4
 800d004:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 800d008:	eb03 1301 	add.w	r3, r3, r1, lsl #4
 800d00c:	2000      	movs	r0, #0
 800d00e:	f363 000f 	bfi	r0, r3, #0, #16
 800d012:	f362 401f 	bfi	r0, r2, #16, #16
 800d016:	b002      	add	sp, #8
 800d018:	4770      	bx	lr
 800d01a:	bf00      	nop

0800d01c <uxr_object_id_to_raw>:
 800d01c:	4602      	mov	r2, r0
 800d01e:	f3c0 4303 	ubfx	r3, r0, #16, #4
 800d022:	b082      	sub	sp, #8
 800d024:	f3c2 1c0b 	ubfx	ip, r2, #4, #12
 800d028:	eb03 1002 	add.w	r0, r3, r2, lsl #4
 800d02c:	f881 c000 	strb.w	ip, [r1]
 800d030:	7048      	strb	r0, [r1, #1]
 800d032:	b002      	add	sp, #8
 800d034:	4770      	bx	lr
 800d036:	bf00      	nop

0800d038 <uxr_buffer_request_data>:
 800d038:	b530      	push	{r4, r5, lr}
 800d03a:	b095      	sub	sp, #84	@ 0x54
 800d03c:	e9cd 2104 	strd	r2, r1, [sp, #16]
 800d040:	9d18      	ldr	r5, [sp, #96]	@ 0x60
 800d042:	9303      	str	r3, [sp, #12]
 800d044:	2200      	movs	r2, #0
 800d046:	2d00      	cmp	r5, #0
 800d048:	bf14      	ite	ne
 800d04a:	2101      	movne	r1, #1
 800d04c:	4611      	moveq	r1, r2
 800d04e:	4604      	mov	r4, r0
 800d050:	f88d 301c 	strb.w	r3, [sp, #28]
 800d054:	f88d 201d 	strb.w	r2, [sp, #29]
 800d058:	f88d 201e 	strb.w	r2, [sp, #30]
 800d05c:	f88d 1024 	strb.w	r1, [sp, #36]	@ 0x24
 800d060:	d021      	beq.n	800d0a6 <uxr_buffer_request_data+0x6e>
 800d062:	682a      	ldr	r2, [r5, #0]
 800d064:	686b      	ldr	r3, [r5, #4]
 800d066:	f8cd 2026 	str.w	r2, [sp, #38]	@ 0x26
 800d06a:	f8cd 302a 	str.w	r3, [sp, #42]	@ 0x2a
 800d06e:	2210      	movs	r2, #16
 800d070:	2308      	movs	r3, #8
 800d072:	2100      	movs	r1, #0
 800d074:	e9cd 3100 	strd	r3, r1, [sp]
 800d078:	4620      	mov	r0, r4
 800d07a:	9905      	ldr	r1, [sp, #20]
 800d07c:	ab0c      	add	r3, sp, #48	@ 0x30
 800d07e:	f001 f839 	bl	800e0f4 <uxr_prepare_stream_to_write_submessage>
 800d082:	b918      	cbnz	r0, 800d08c <uxr_buffer_request_data+0x54>
 800d084:	4604      	mov	r4, r0
 800d086:	4620      	mov	r0, r4
 800d088:	b015      	add	sp, #84	@ 0x54
 800d08a:	bd30      	pop	{r4, r5, pc}
 800d08c:	9904      	ldr	r1, [sp, #16]
 800d08e:	aa06      	add	r2, sp, #24
 800d090:	4620      	mov	r0, r4
 800d092:	f001 f965 	bl	800e360 <uxr_init_base_object_request>
 800d096:	a906      	add	r1, sp, #24
 800d098:	4604      	mov	r4, r0
 800d09a:	a80c      	add	r0, sp, #48	@ 0x30
 800d09c:	f002 fe92 	bl	800fdc4 <uxr_serialize_READ_DATA_Payload>
 800d0a0:	4620      	mov	r0, r4
 800d0a2:	b015      	add	sp, #84	@ 0x54
 800d0a4:	bd30      	pop	{r4, r5, pc}
 800d0a6:	2208      	movs	r2, #8
 800d0a8:	e7e2      	b.n	800d070 <uxr_buffer_request_data+0x38>
 800d0aa:	bf00      	nop

0800d0ac <uxr_buffer_cancel_data>:
 800d0ac:	b510      	push	{r4, lr}
 800d0ae:	b094      	sub	sp, #80	@ 0x50
 800d0b0:	2300      	movs	r3, #0
 800d0b2:	9202      	str	r2, [sp, #8]
 800d0b4:	9205      	str	r2, [sp, #20]
 800d0b6:	9301      	str	r3, [sp, #4]
 800d0b8:	2201      	movs	r2, #1
 800d0ba:	f8ad 301c 	strh.w	r3, [sp, #28]
 800d0be:	f88d 301e 	strb.w	r3, [sp, #30]
 800d0c2:	f8cd 3026 	str.w	r3, [sp, #38]	@ 0x26
 800d0c6:	f8cd 302a 	str.w	r3, [sp, #42]	@ 0x2a
 800d0ca:	2308      	movs	r3, #8
 800d0cc:	f88d 2024 	strb.w	r2, [sp, #36]	@ 0x24
 800d0d0:	9300      	str	r3, [sp, #0]
 800d0d2:	2210      	movs	r2, #16
 800d0d4:	ab0c      	add	r3, sp, #48	@ 0x30
 800d0d6:	4604      	mov	r4, r0
 800d0d8:	9103      	str	r1, [sp, #12]
 800d0da:	f001 f80b 	bl	800e0f4 <uxr_prepare_stream_to_write_submessage>
 800d0de:	b918      	cbnz	r0, 800d0e8 <uxr_buffer_cancel_data+0x3c>
 800d0e0:	4604      	mov	r4, r0
 800d0e2:	4620      	mov	r0, r4
 800d0e4:	b014      	add	sp, #80	@ 0x50
 800d0e6:	bd10      	pop	{r4, pc}
 800d0e8:	9905      	ldr	r1, [sp, #20]
 800d0ea:	aa06      	add	r2, sp, #24
 800d0ec:	4620      	mov	r0, r4
 800d0ee:	f001 f937 	bl	800e360 <uxr_init_base_object_request>
 800d0f2:	a906      	add	r1, sp, #24
 800d0f4:	4604      	mov	r4, r0
 800d0f6:	a80c      	add	r0, sp, #48	@ 0x30
 800d0f8:	f002 fe64 	bl	800fdc4 <uxr_serialize_READ_DATA_Payload>
 800d0fc:	4620      	mov	r0, r4
 800d0fe:	b014      	add	sp, #80	@ 0x50
 800d100:	bd10      	pop	{r4, pc}
 800d102:	bf00      	nop

0800d104 <read_submessage_format>:
 800d104:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800d108:	b095      	sub	sp, #84	@ 0x54
 800d10a:	f8bd 6078 	ldrh.w	r6, [sp, #120]	@ 0x78
 800d10e:	b113      	cbz	r3, 800d116 <read_submessage_format+0x12>
 800d110:	b015      	add	sp, #84	@ 0x54
 800d112:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800d116:	460c      	mov	r4, r1
 800d118:	4615      	mov	r5, r2
 800d11a:	e9d1 2101 	ldrd	r2, r1, [r1, #4]
 800d11e:	4607      	mov	r7, r0
 800d120:	981c      	ldr	r0, [sp, #112]	@ 0x70
 800d122:	9004      	str	r0, [sp, #16]
 800d124:	981d      	ldr	r0, [sp, #116]	@ 0x74
 800d126:	9005      	str	r0, [sp, #20]
 800d128:	1a52      	subs	r2, r2, r1
 800d12a:	a80c      	add	r0, sp, #48	@ 0x30
 800d12c:	4699      	mov	r9, r3
 800d12e:	f89d 8076 	ldrb.w	r8, [sp, #118]	@ 0x76
 800d132:	f7ff fcc3 	bl	800cabc <ucdr_init_buffer>
 800d136:	e9d4 1206 	ldrd	r1, r2, [r4, #24]
 800d13a:	a80c      	add	r0, sp, #48	@ 0x30
 800d13c:	f7ff fc92 	bl	800ca64 <ucdr_set_on_full_buffer_callback>
 800d140:	69e2      	ldr	r2, [r4, #28]
 800d142:	b19a      	cbz	r2, 800d16c <read_submessage_format+0x68>
 800d144:	f1b8 0f07 	cmp.w	r8, #7
 800d148:	f882 9014 	strb.w	r9, [r2, #20]
 800d14c:	d040      	beq.n	800d1d0 <read_submessage_format+0xcc>
 800d14e:	f1b8 0f08 	cmp.w	r8, #8
 800d152:	d02e      	beq.n	800d1b2 <read_submessage_format+0xae>
 800d154:	f1b8 0f06 	cmp.w	r8, #6
 800d158:	d011      	beq.n	800d17e <read_submessage_format+0x7a>
 800d15a:	2301      	movs	r3, #1
 800d15c:	7513      	strb	r3, [r2, #20]
 800d15e:	4629      	mov	r1, r5
 800d160:	4620      	mov	r0, r4
 800d162:	f7ff fcfb 	bl	800cb5c <ucdr_advance_buffer>
 800d166:	b015      	add	sp, #84	@ 0x54
 800d168:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800d16c:	f1b8 0f07 	cmp.w	r8, #7
 800d170:	d02e      	beq.n	800d1d0 <read_submessage_format+0xcc>
 800d172:	f1b8 0f08 	cmp.w	r8, #8
 800d176:	d01c      	beq.n	800d1b2 <read_submessage_format+0xae>
 800d178:	f1b8 0f06 	cmp.w	r8, #6
 800d17c:	d1ef      	bne.n	800d15e <read_submessage_format+0x5a>
 800d17e:	f8d7 8088 	ldr.w	r8, [r7, #136]	@ 0x88
 800d182:	f1b8 0f00 	cmp.w	r8, #0
 800d186:	d011      	beq.n	800d1ac <read_submessage_format+0xa8>
 800d188:	ab0c      	add	r3, sp, #48	@ 0x30
 800d18a:	e9cd 3500 	strd	r3, r5, [sp]
 800d18e:	2306      	movs	r3, #6
 800d190:	f88d 3016 	strb.w	r3, [sp, #22]
 800d194:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800d198:	9302      	str	r3, [sp, #8]
 800d19a:	4632      	mov	r2, r6
 800d19c:	e9dd 3104 	ldrd	r3, r1, [sp, #16]
 800d1a0:	4638      	mov	r0, r7
 800d1a2:	47c0      	blx	r8
 800d1a4:	2301      	movs	r3, #1
 800d1a6:	69e2      	ldr	r2, [r4, #28]
 800d1a8:	f887 30b4 	strb.w	r3, [r7, #180]	@ 0xb4
 800d1ac:	2a00      	cmp	r2, #0
 800d1ae:	d1d4      	bne.n	800d15a <read_submessage_format+0x56>
 800d1b0:	e7d5      	b.n	800d15e <read_submessage_format+0x5a>
 800d1b2:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800d1b6:	2b00      	cmp	r3, #0
 800d1b8:	d0f8      	beq.n	800d1ac <read_submessage_format+0xa8>
 800d1ba:	a906      	add	r1, sp, #24
 800d1bc:	a80c      	add	r0, sp, #48	@ 0x30
 800d1be:	f8dd 8040 	ldr.w	r8, [sp, #64]	@ 0x40
 800d1c2:	f002 fec5 	bl	800ff50 <uxr_deserialize_SampleIdentity>
 800d1c6:	b9a0      	cbnz	r0, 800d1f2 <read_submessage_format+0xee>
 800d1c8:	69e2      	ldr	r2, [r4, #28]
 800d1ca:	2a00      	cmp	r2, #0
 800d1cc:	d1c5      	bne.n	800d15a <read_submessage_format+0x56>
 800d1ce:	e7c6      	b.n	800d15e <read_submessage_format+0x5a>
 800d1d0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800d1d4:	b13b      	cbz	r3, 800d1e6 <read_submessage_format+0xe2>
 800d1d6:	a906      	add	r1, sp, #24
 800d1d8:	a80c      	add	r0, sp, #48	@ 0x30
 800d1da:	f8dd 8040 	ldr.w	r8, [sp, #64]	@ 0x40
 800d1de:	f002 fb8b 	bl	800f8f8 <uxr_deserialize_BaseObjectRequest>
 800d1e2:	bb60      	cbnz	r0, 800d23e <read_submessage_format+0x13a>
 800d1e4:	69e2      	ldr	r2, [r4, #28]
 800d1e6:	68a3      	ldr	r3, [r4, #8]
 800d1e8:	442b      	add	r3, r5
 800d1ea:	60a3      	str	r3, [r4, #8]
 800d1ec:	2a00      	cmp	r2, #0
 800d1ee:	d1b4      	bne.n	800d15a <read_submessage_format+0x56>
 800d1f0:	e7b5      	b.n	800d15e <read_submessage_format+0x5a>
 800d1f2:	e9dd 210d 	ldrd	r2, r1, [sp, #52]	@ 0x34
 800d1f6:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800d1f8:	1a52      	subs	r2, r2, r1
 800d1fa:	eba8 0803 	sub.w	r8, r8, r3
 800d1fe:	a80c      	add	r0, sp, #48	@ 0x30
 800d200:	f7ff fc5c 	bl	800cabc <ucdr_init_buffer>
 800d204:	44a8      	add	r8, r5
 800d206:	e9d4 1206 	ldrd	r1, r2, [r4, #24]
 800d20a:	a80c      	add	r0, sp, #48	@ 0x30
 800d20c:	f7ff fc2a 	bl	800ca64 <ucdr_set_on_full_buffer_callback>
 800d210:	fa1f f888 	uxth.w	r8, r8
 800d214:	ab0c      	add	r3, sp, #48	@ 0x30
 800d216:	9300      	str	r3, [sp, #0]
 800d218:	f8cd 8004 	str.w	r8, [sp, #4]
 800d21c:	2108      	movs	r1, #8
 800d21e:	f88d 1016 	strb.w	r1, [sp, #22]
 800d222:	f8d7 10a8 	ldr.w	r1, [r7, #168]	@ 0xa8
 800d226:	9102      	str	r1, [sp, #8]
 800d228:	ab06      	add	r3, sp, #24
 800d22a:	4632      	mov	r2, r6
 800d22c:	9905      	ldr	r1, [sp, #20]
 800d22e:	f8d7 60a4 	ldr.w	r6, [r7, #164]	@ 0xa4
 800d232:	4638      	mov	r0, r7
 800d234:	47b0      	blx	r6
 800d236:	2301      	movs	r3, #1
 800d238:	f887 30b4 	strb.w	r3, [r7, #180]	@ 0xb4
 800d23c:	e7c4      	b.n	800d1c8 <read_submessage_format+0xc4>
 800d23e:	e9dd 210d 	ldrd	r2, r1, [sp, #52]	@ 0x34
 800d242:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800d244:	1a52      	subs	r2, r2, r1
 800d246:	a80c      	add	r0, sp, #48	@ 0x30
 800d248:	eba8 0803 	sub.w	r8, r8, r3
 800d24c:	f7ff fc36 	bl	800cabc <ucdr_init_buffer>
 800d250:	e9d4 1206 	ldrd	r1, r2, [r4, #24]
 800d254:	a80c      	add	r0, sp, #48	@ 0x30
 800d256:	f7ff fc05 	bl	800ca64 <ucdr_set_on_full_buffer_callback>
 800d25a:	ab0c      	add	r3, sp, #48	@ 0x30
 800d25c:	9300      	str	r3, [sp, #0]
 800d25e:	f89d 1018 	ldrb.w	r1, [sp, #24]
 800d262:	f89d 3019 	ldrb.w	r3, [sp, #25]
 800d266:	44a8      	add	r8, r5
 800d268:	fa1f f888 	uxth.w	r8, r8
 800d26c:	f8cd 8004 	str.w	r8, [sp, #4]
 800d270:	eb03 2301 	add.w	r3, r3, r1, lsl #8
 800d274:	2107      	movs	r1, #7
 800d276:	f88d 1016 	strb.w	r1, [sp, #22]
 800d27a:	f8d7 10b0 	ldr.w	r1, [r7, #176]	@ 0xb0
 800d27e:	9102      	str	r1, [sp, #8]
 800d280:	4632      	mov	r2, r6
 800d282:	b29b      	uxth	r3, r3
 800d284:	f8d7 60ac 	ldr.w	r6, [r7, #172]	@ 0xac
 800d288:	9905      	ldr	r1, [sp, #20]
 800d28a:	4638      	mov	r0, r7
 800d28c:	47b0      	blx	r6
 800d28e:	2301      	movs	r3, #1
 800d290:	f887 30b4 	strb.w	r3, [r7, #180]	@ 0xb4
 800d294:	e7a6      	b.n	800d1e4 <read_submessage_format+0xe0>
 800d296:	bf00      	nop

0800d298 <on_get_fragmentation_info>:
 800d298:	b500      	push	{lr}
 800d29a:	b08b      	sub	sp, #44	@ 0x2c
 800d29c:	4601      	mov	r1, r0
 800d29e:	2204      	movs	r2, #4
 800d2a0:	a802      	add	r0, sp, #8
 800d2a2:	f7ff fc0b 	bl	800cabc <ucdr_init_buffer>
 800d2a6:	f10d 0305 	add.w	r3, sp, #5
 800d2aa:	f10d 0206 	add.w	r2, sp, #6
 800d2ae:	a901      	add	r1, sp, #4
 800d2b0:	a802      	add	r0, sp, #8
 800d2b2:	f001 fe69 	bl	800ef88 <uxr_read_submessage_header>
 800d2b6:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800d2ba:	2b0d      	cmp	r3, #13
 800d2bc:	d003      	beq.n	800d2c6 <on_get_fragmentation_info+0x2e>
 800d2be:	2000      	movs	r0, #0
 800d2c0:	b00b      	add	sp, #44	@ 0x2c
 800d2c2:	f85d fb04 	ldr.w	pc, [sp], #4
 800d2c6:	f89d 3005 	ldrb.w	r3, [sp, #5]
 800d2ca:	f013 0f02 	tst.w	r3, #2
 800d2ce:	bf14      	ite	ne
 800d2d0:	2002      	movne	r0, #2
 800d2d2:	2001      	moveq	r0, #1
 800d2d4:	b00b      	add	sp, #44	@ 0x2c
 800d2d6:	f85d fb04 	ldr.w	pc, [sp], #4
 800d2da:	bf00      	nop

0800d2dc <read_submessage_get_info>:
 800d2dc:	b570      	push	{r4, r5, r6, lr}
 800d2de:	2500      	movs	r5, #0
 800d2e0:	f5ad 7d34 	sub.w	sp, sp, #720	@ 0x2d0
 800d2e4:	4604      	mov	r4, r0
 800d2e6:	f44f 7224 	mov.w	r2, #656	@ 0x290
 800d2ea:	460e      	mov	r6, r1
 800d2ec:	a810      	add	r0, sp, #64	@ 0x40
 800d2ee:	4629      	mov	r1, r5
 800d2f0:	e9cd 5503 	strd	r5, r5, [sp, #12]
 800d2f4:	f008 fcaa 	bl	8015c4c <memset>
 800d2f8:	a903      	add	r1, sp, #12
 800d2fa:	4630      	mov	r0, r6
 800d2fc:	f002 fca4 	bl	800fc48 <uxr_deserialize_GET_INFO_Payload>
 800d300:	f8bd 300c 	ldrh.w	r3, [sp, #12]
 800d304:	f8ad 3040 	strh.w	r3, [sp, #64]	@ 0x40
 800d308:	4620      	mov	r0, r4
 800d30a:	f001 f821 	bl	800e350 <uxr_session_header_offset>
 800d30e:	462b      	mov	r3, r5
 800d310:	9000      	str	r0, [sp, #0]
 800d312:	220c      	movs	r2, #12
 800d314:	a905      	add	r1, sp, #20
 800d316:	a808      	add	r0, sp, #32
 800d318:	f7ff fbbe 	bl	800ca98 <ucdr_init_buffer_origin_offset>
 800d31c:	a910      	add	r1, sp, #64	@ 0x40
 800d31e:	a808      	add	r0, sp, #32
 800d320:	f002 fd04 	bl	800fd2c <uxr_serialize_INFO_Payload>
 800d324:	9b08      	ldr	r3, [sp, #32]
 800d326:	462a      	mov	r2, r5
 800d328:	4629      	mov	r1, r5
 800d32a:	4620      	mov	r0, r4
 800d32c:	f000 ffba 	bl	800e2a4 <uxr_stamp_session_header>
 800d330:	a808      	add	r0, sp, #32
 800d332:	f7ff fbef 	bl	800cb14 <ucdr_buffer_length>
 800d336:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 800d338:	4602      	mov	r2, r0
 800d33a:	a905      	add	r1, sp, #20
 800d33c:	e9d3 0400 	ldrd	r0, r4, [r3]
 800d340:	47a0      	blx	r4
 800d342:	f50d 7d34 	add.w	sp, sp, #720	@ 0x2d0
 800d346:	bd70      	pop	{r4, r5, r6, pc}

0800d348 <write_submessage_acknack.isra.0>:
 800d348:	b570      	push	{r4, r5, r6, lr}
 800d34a:	b092      	sub	sp, #72	@ 0x48
 800d34c:	4605      	mov	r5, r0
 800d34e:	460e      	mov	r6, r1
 800d350:	4614      	mov	r4, r2
 800d352:	f000 fffd 	bl	800e350 <uxr_session_header_offset>
 800d356:	a905      	add	r1, sp, #20
 800d358:	9000      	str	r0, [sp, #0]
 800d35a:	2300      	movs	r3, #0
 800d35c:	a80a      	add	r0, sp, #40	@ 0x28
 800d35e:	2211      	movs	r2, #17
 800d360:	f7ff fb9a 	bl	800ca98 <ucdr_init_buffer_origin_offset>
 800d364:	2218      	movs	r2, #24
 800d366:	fb02 5404 	mla	r4, r2, r4, r5
 800d36a:	2300      	movs	r3, #0
 800d36c:	2205      	movs	r2, #5
 800d36e:	3450      	adds	r4, #80	@ 0x50
 800d370:	210a      	movs	r1, #10
 800d372:	a80a      	add	r0, sp, #40	@ 0x28
 800d374:	f001 fdee 	bl	800ef54 <uxr_buffer_submessage_header>
 800d378:	a903      	add	r1, sp, #12
 800d37a:	4620      	mov	r0, r4
 800d37c:	f007 f876 	bl	801446c <uxr_compute_acknack>
 800d380:	ba40      	rev16	r0, r0
 800d382:	f8ad 000e 	strh.w	r0, [sp, #14]
 800d386:	a903      	add	r1, sp, #12
 800d388:	a80a      	add	r0, sp, #40	@ 0x28
 800d38a:	f88d 6010 	strb.w	r6, [sp, #16]
 800d38e:	f002 fd3d 	bl	800fe0c <uxr_serialize_ACKNACK_Payload>
 800d392:	2200      	movs	r2, #0
 800d394:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800d396:	4611      	mov	r1, r2
 800d398:	4628      	mov	r0, r5
 800d39a:	f000 ff83 	bl	800e2a4 <uxr_stamp_session_header>
 800d39e:	a80a      	add	r0, sp, #40	@ 0x28
 800d3a0:	f7ff fbb8 	bl	800cb14 <ucdr_buffer_length>
 800d3a4:	6f2b      	ldr	r3, [r5, #112]	@ 0x70
 800d3a6:	4602      	mov	r2, r0
 800d3a8:	a905      	add	r1, sp, #20
 800d3aa:	e9d3 0400 	ldrd	r0, r4, [r3]
 800d3ae:	47a0      	blx	r4
 800d3b0:	b012      	add	sp, #72	@ 0x48
 800d3b2:	bd70      	pop	{r4, r5, r6, pc}
 800d3b4:	0000      	movs	r0, r0
	...

0800d3b8 <uxr_init_session>:
 800d3b8:	b510      	push	{r4, lr}
 800d3ba:	ed9f 7b0d 	vldr	d7, [pc, #52]	@ 800d3f0 <uxr_init_session+0x38>
 800d3be:	2300      	movs	r3, #0
 800d3c0:	e9c0 131c 	strd	r1, r3, [r0, #112]	@ 0x70
 800d3c4:	4604      	mov	r4, r0
 800d3c6:	e9c0 331e 	strd	r3, r3, [r0, #120]	@ 0x78
 800d3ca:	e9c0 3320 	strd	r3, r3, [r0, #128]	@ 0x80
 800d3ce:	e9c0 3322 	strd	r3, r3, [r0, #136]	@ 0x88
 800d3d2:	e9c0 3324 	strd	r3, r3, [r0, #144]	@ 0x90
 800d3d6:	ed80 7b26 	vstr	d7, [r0, #152]	@ 0x98
 800d3da:	f880 30a0 	strb.w	r3, [r0, #160]	@ 0xa0
 800d3de:	2181      	movs	r1, #129	@ 0x81
 800d3e0:	f000 fecc 	bl	800e17c <uxr_init_session_info>
 800d3e4:	f104 0008 	add.w	r0, r4, #8
 800d3e8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d3ec:	f001 bcce 	b.w	800ed8c <uxr_init_stream_storage>
	...

0800d3f8 <uxr_set_status_callback>:
 800d3f8:	e9c0 1220 	strd	r1, r2, [r0, #128]	@ 0x80
 800d3fc:	4770      	bx	lr
 800d3fe:	bf00      	nop

0800d400 <uxr_set_topic_callback>:
 800d400:	e9c0 1222 	strd	r1, r2, [r0, #136]	@ 0x88
 800d404:	4770      	bx	lr
 800d406:	bf00      	nop

0800d408 <uxr_set_request_callback>:
 800d408:	e9c0 1229 	strd	r1, r2, [r0, #164]	@ 0xa4
 800d40c:	4770      	bx	lr
 800d40e:	bf00      	nop

0800d410 <uxr_set_reply_callback>:
 800d410:	e9c0 122b 	strd	r1, r2, [r0, #172]	@ 0xac
 800d414:	4770      	bx	lr
 800d416:	bf00      	nop

0800d418 <uxr_create_output_best_effort_stream>:
 800d418:	b510      	push	{r4, lr}
 800d41a:	b084      	sub	sp, #16
 800d41c:	e9cd 2100 	strd	r2, r1, [sp]
 800d420:	4604      	mov	r4, r0
 800d422:	f000 ff95 	bl	800e350 <uxr_session_header_offset>
 800d426:	e9dd 2100 	ldrd	r2, r1, [sp]
 800d42a:	4603      	mov	r3, r0
 800d42c:	f104 0008 	add.w	r0, r4, #8
 800d430:	b004      	add	sp, #16
 800d432:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d436:	f001 bcf3 	b.w	800ee20 <uxr_add_output_best_effort_buffer>
 800d43a:	bf00      	nop

0800d43c <uxr_create_output_reliable_stream>:
 800d43c:	b510      	push	{r4, lr}
 800d43e:	b088      	sub	sp, #32
 800d440:	e9cd 2104 	strd	r2, r1, [sp, #16]
 800d444:	4604      	mov	r4, r0
 800d446:	9303      	str	r3, [sp, #12]
 800d448:	f000 ff82 	bl	800e350 <uxr_session_header_offset>
 800d44c:	e9dd 3203 	ldrd	r3, r2, [sp, #12]
 800d450:	9000      	str	r0, [sp, #0]
 800d452:	9905      	ldr	r1, [sp, #20]
 800d454:	f104 0008 	add.w	r0, r4, #8
 800d458:	f001 fcf6 	bl	800ee48 <uxr_add_output_reliable_buffer>
 800d45c:	2200      	movs	r2, #0
 800d45e:	b2c3      	uxtb	r3, r0
 800d460:	f363 0207 	bfi	r2, r3, #0, #8
 800d464:	f3c0 2307 	ubfx	r3, r0, #8, #8
 800d468:	f363 220f 	bfi	r2, r3, #8, #8
 800d46c:	f3c0 4307 	ubfx	r3, r0, #16, #8
 800d470:	f363 4217 	bfi	r2, r3, #16, #8
 800d474:	0e03      	lsrs	r3, r0, #24
 800d476:	f363 621f 	bfi	r2, r3, #24, #8
 800d47a:	4610      	mov	r0, r2
 800d47c:	b008      	add	sp, #32
 800d47e:	bd10      	pop	{r4, pc}

0800d480 <uxr_create_input_best_effort_stream>:
 800d480:	b082      	sub	sp, #8
 800d482:	3008      	adds	r0, #8
 800d484:	b002      	add	sp, #8
 800d486:	f001 bcf9 	b.w	800ee7c <uxr_add_input_best_effort_buffer>
 800d48a:	bf00      	nop

0800d48c <uxr_create_input_reliable_stream>:
 800d48c:	b510      	push	{r4, lr}
 800d48e:	b084      	sub	sp, #16
 800d490:	4c0b      	ldr	r4, [pc, #44]	@ (800d4c0 <uxr_create_input_reliable_stream+0x34>)
 800d492:	9400      	str	r4, [sp, #0]
 800d494:	3008      	adds	r0, #8
 800d496:	f001 fd07 	bl	800eea8 <uxr_add_input_reliable_buffer>
 800d49a:	2200      	movs	r2, #0
 800d49c:	b2c3      	uxtb	r3, r0
 800d49e:	f363 0207 	bfi	r2, r3, #0, #8
 800d4a2:	f3c0 2307 	ubfx	r3, r0, #8, #8
 800d4a6:	f363 220f 	bfi	r2, r3, #8, #8
 800d4aa:	f3c0 4307 	ubfx	r3, r0, #16, #8
 800d4ae:	f363 4217 	bfi	r2, r3, #16, #8
 800d4b2:	0e03      	lsrs	r3, r0, #24
 800d4b4:	f363 621f 	bfi	r2, r3, #24, #8
 800d4b8:	4610      	mov	r0, r2
 800d4ba:	b004      	add	sp, #16
 800d4bc:	bd10      	pop	{r4, pc}
 800d4be:	bf00      	nop
 800d4c0:	0800d299 	.word	0x0800d299

0800d4c4 <uxr_epoch_nanos>:
 800d4c4:	b510      	push	{r4, lr}
 800d4c6:	4604      	mov	r4, r0
 800d4c8:	f001 fda4 	bl	800f014 <uxr_nanos>
 800d4cc:	e9d4 3226 	ldrd	r3, r2, [r4, #152]	@ 0x98
 800d4d0:	1ac0      	subs	r0, r0, r3
 800d4d2:	eb61 0102 	sbc.w	r1, r1, r2
 800d4d6:	bd10      	pop	{r4, pc}

0800d4d8 <uxr_flash_output_streams>:
 800d4d8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d4dc:	7e03      	ldrb	r3, [r0, #24]
 800d4de:	b084      	sub	sp, #16
 800d4e0:	4604      	mov	r4, r0
 800d4e2:	2b00      	cmp	r3, #0
 800d4e4:	d035      	beq.n	800d552 <uxr_flash_output_streams+0x7a>
 800d4e6:	f04f 0900 	mov.w	r9, #0
 800d4ea:	4648      	mov	r0, r9
 800d4ec:	f10d 0802 	add.w	r8, sp, #2
 800d4f0:	af03      	add	r7, sp, #12
 800d4f2:	ae02      	add	r6, sp, #8
 800d4f4:	e006      	b.n	800d504 <uxr_flash_output_streams+0x2c>
 800d4f6:	7e23      	ldrb	r3, [r4, #24]
 800d4f8:	f109 0901 	add.w	r9, r9, #1
 800d4fc:	fa5f f089 	uxtb.w	r0, r9
 800d500:	4283      	cmp	r3, r0
 800d502:	d926      	bls.n	800d552 <uxr_flash_output_streams+0x7a>
 800d504:	2201      	movs	r2, #1
 800d506:	4611      	mov	r1, r2
 800d508:	eb04 1500 	add.w	r5, r4, r0, lsl #4
 800d50c:	f001 fbea 	bl	800ece4 <uxr_stream_id>
 800d510:	3508      	adds	r5, #8
 800d512:	4684      	mov	ip, r0
 800d514:	4643      	mov	r3, r8
 800d516:	463a      	mov	r2, r7
 800d518:	4631      	mov	r1, r6
 800d51a:	4628      	mov	r0, r5
 800d51c:	f8cd c004 	str.w	ip, [sp, #4]
 800d520:	f007 f82a 	bl	8014578 <uxr_prepare_best_effort_buffer_to_send>
 800d524:	2800      	cmp	r0, #0
 800d526:	d0e6      	beq.n	800d4f6 <uxr_flash_output_streams+0x1e>
 800d528:	9b02      	ldr	r3, [sp, #8]
 800d52a:	f8bd 2002 	ldrh.w	r2, [sp, #2]
 800d52e:	f89d 1004 	ldrb.w	r1, [sp, #4]
 800d532:	4620      	mov	r0, r4
 800d534:	f000 feb6 	bl	800e2a4 <uxr_stamp_session_header>
 800d538:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 800d53a:	9a03      	ldr	r2, [sp, #12]
 800d53c:	685d      	ldr	r5, [r3, #4]
 800d53e:	6818      	ldr	r0, [r3, #0]
 800d540:	9902      	ldr	r1, [sp, #8]
 800d542:	47a8      	blx	r5
 800d544:	f109 0901 	add.w	r9, r9, #1
 800d548:	7e23      	ldrb	r3, [r4, #24]
 800d54a:	fa5f f089 	uxtb.w	r0, r9
 800d54e:	4283      	cmp	r3, r0
 800d550:	d8d8      	bhi.n	800d504 <uxr_flash_output_streams+0x2c>
 800d552:	f894 3048 	ldrb.w	r3, [r4, #72]	@ 0x48
 800d556:	b38b      	cbz	r3, 800d5bc <uxr_flash_output_streams+0xe4>
 800d558:	f04f 0900 	mov.w	r9, #0
 800d55c:	f10d 0802 	add.w	r8, sp, #2
 800d560:	af03      	add	r7, sp, #12
 800d562:	ae02      	add	r6, sp, #8
 800d564:	4648      	mov	r0, r9
 800d566:	2201      	movs	r2, #1
 800d568:	2102      	movs	r1, #2
 800d56a:	eb00 0580 	add.w	r5, r0, r0, lsl #2
 800d56e:	f001 fbb9 	bl	800ece4 <uxr_stream_id>
 800d572:	eb04 05c5 	add.w	r5, r4, r5, lsl #3
 800d576:	3520      	adds	r5, #32
 800d578:	9001      	str	r0, [sp, #4]
 800d57a:	e00d      	b.n	800d598 <uxr_flash_output_streams+0xc0>
 800d57c:	f8bd 2002 	ldrh.w	r2, [sp, #2]
 800d580:	f89d 1004 	ldrb.w	r1, [sp, #4]
 800d584:	9b02      	ldr	r3, [sp, #8]
 800d586:	f000 fe8d 	bl	800e2a4 <uxr_stamp_session_header>
 800d58a:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 800d58c:	9a03      	ldr	r2, [sp, #12]
 800d58e:	f8d3 a004 	ldr.w	sl, [r3, #4]
 800d592:	9902      	ldr	r1, [sp, #8]
 800d594:	6818      	ldr	r0, [r3, #0]
 800d596:	47d0      	blx	sl
 800d598:	4643      	mov	r3, r8
 800d59a:	463a      	mov	r2, r7
 800d59c:	4631      	mov	r1, r6
 800d59e:	4628      	mov	r0, r5
 800d5a0:	f007 fa08 	bl	80149b4 <uxr_prepare_next_reliable_buffer_to_send>
 800d5a4:	4603      	mov	r3, r0
 800d5a6:	4620      	mov	r0, r4
 800d5a8:	2b00      	cmp	r3, #0
 800d5aa:	d1e7      	bne.n	800d57c <uxr_flash_output_streams+0xa4>
 800d5ac:	f894 3048 	ldrb.w	r3, [r4, #72]	@ 0x48
 800d5b0:	f109 0901 	add.w	r9, r9, #1
 800d5b4:	fa5f f089 	uxtb.w	r0, r9
 800d5b8:	4283      	cmp	r3, r0
 800d5ba:	d8d4      	bhi.n	800d566 <uxr_flash_output_streams+0x8e>
 800d5bc:	b004      	add	sp, #16
 800d5be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d5c2:	bf00      	nop

0800d5c4 <read_submessage_info>:
 800d5c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d5c8:	460d      	mov	r5, r1
 800d5ca:	f5ad 7d24 	sub.w	sp, sp, #656	@ 0x290
 800d5ce:	4669      	mov	r1, sp
 800d5d0:	4607      	mov	r7, r0
 800d5d2:	4628      	mov	r0, r5
 800d5d4:	f002 fa46 	bl	800fa64 <uxr_deserialize_BaseObjectReply>
 800d5d8:	a902      	add	r1, sp, #8
 800d5da:	4604      	mov	r4, r0
 800d5dc:	4628      	mov	r0, r5
 800d5de:	f89d 8005 	ldrb.w	r8, [sp, #5]
 800d5e2:	f7fe f97f 	bl	800b8e4 <ucdr_deserialize_bool>
 800d5e6:	f89d 3008 	ldrb.w	r3, [sp, #8]
 800d5ea:	4004      	ands	r4, r0
 800d5ec:	b2e4      	uxtb	r4, r4
 800d5ee:	b95b      	cbnz	r3, 800d608 <read_submessage_info+0x44>
 800d5f0:	a987      	add	r1, sp, #540	@ 0x21c
 800d5f2:	4628      	mov	r0, r5
 800d5f4:	f7fe f976 	bl	800b8e4 <ucdr_deserialize_bool>
 800d5f8:	f89d 321c 	ldrb.w	r3, [sp, #540]	@ 0x21c
 800d5fc:	4606      	mov	r6, r0
 800d5fe:	b94b      	cbnz	r3, 800d614 <read_submessage_info+0x50>
 800d600:	f50d 7d24 	add.w	sp, sp, #656	@ 0x290
 800d604:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d608:	a903      	add	r1, sp, #12
 800d60a:	4628      	mov	r0, r5
 800d60c:	f002 f8d2 	bl	800f7b4 <uxr_deserialize_ObjectVariant>
 800d610:	4004      	ands	r4, r0
 800d612:	e7ed      	b.n	800d5f0 <read_submessage_info+0x2c>
 800d614:	a988      	add	r1, sp, #544	@ 0x220
 800d616:	4628      	mov	r0, r5
 800d618:	f7fe f992 	bl	800b940 <ucdr_deserialize_uint8_t>
 800d61c:	4234      	tst	r4, r6
 800d61e:	d0ef      	beq.n	800d600 <read_submessage_info+0x3c>
 800d620:	2800      	cmp	r0, #0
 800d622:	d0ed      	beq.n	800d600 <read_submessage_info+0x3c>
 800d624:	f89d 3220 	ldrb.w	r3, [sp, #544]	@ 0x220
 800d628:	2b0d      	cmp	r3, #13
 800d62a:	d1e9      	bne.n	800d600 <read_submessage_info+0x3c>
 800d62c:	a98a      	add	r1, sp, #552	@ 0x228
 800d62e:	4628      	mov	r0, r5
 800d630:	f7fe ff2c 	bl	800c48c <ucdr_deserialize_int16_t>
 800d634:	b140      	cbz	r0, 800d648 <read_submessage_info+0x84>
 800d636:	f9bd 3228 	ldrsh.w	r3, [sp, #552]	@ 0x228
 800d63a:	2b00      	cmp	r3, #0
 800d63c:	dd07      	ble.n	800d64e <read_submessage_info+0x8a>
 800d63e:	f1b8 0f00 	cmp.w	r8, #0
 800d642:	bf14      	ite	ne
 800d644:	2001      	movne	r0, #1
 800d646:	2002      	moveq	r0, #2
 800d648:	f887 00b5 	strb.w	r0, [r7, #181]	@ 0xb5
 800d64c:	e7d8      	b.n	800d600 <read_submessage_info+0x3c>
 800d64e:	2000      	movs	r0, #0
 800d650:	e7fa      	b.n	800d648 <read_submessage_info+0x84>
 800d652:	bf00      	nop

0800d654 <read_submessage_list>:
 800d654:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d658:	b097      	sub	sp, #92	@ 0x5c
 800d65a:	4ec1      	ldr	r6, [pc, #772]	@ (800d960 <read_submessage_list+0x30c>)
 800d65c:	9209      	str	r2, [sp, #36]	@ 0x24
 800d65e:	4604      	mov	r4, r0
 800d660:	460d      	mov	r5, r1
 800d662:	f04f 0801 	mov.w	r8, #1
 800d666:	f10d 032f 	add.w	r3, sp, #47	@ 0x2f
 800d66a:	aa0c      	add	r2, sp, #48	@ 0x30
 800d66c:	f10d 012e 	add.w	r1, sp, #46	@ 0x2e
 800d670:	4628      	mov	r0, r5
 800d672:	f001 fc89 	bl	800ef88 <uxr_read_submessage_header>
 800d676:	2800      	cmp	r0, #0
 800d678:	f000 813e 	beq.w	800d8f8 <read_submessage_list+0x2a4>
 800d67c:	f89d 302e 	ldrb.w	r3, [sp, #46]	@ 0x2e
 800d680:	f89d 2026 	ldrb.w	r2, [sp, #38]	@ 0x26
 800d684:	3b02      	subs	r3, #2
 800d686:	2b0d      	cmp	r3, #13
 800d688:	d8ed      	bhi.n	800d666 <read_submessage_list+0x12>
 800d68a:	a101      	add	r1, pc, #4	@ (adr r1, 800d690 <read_submessage_list+0x3c>)
 800d68c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800d690:	0800d8ef 	.word	0x0800d8ef
 800d694:	0800d667 	.word	0x0800d667
 800d698:	0800d8df 	.word	0x0800d8df
 800d69c:	0800d87d 	.word	0x0800d87d
 800d6a0:	0800d873 	.word	0x0800d873
 800d6a4:	0800d667 	.word	0x0800d667
 800d6a8:	0800d667 	.word	0x0800d667
 800d6ac:	0800d7d3 	.word	0x0800d7d3
 800d6b0:	0800d763 	.word	0x0800d763
 800d6b4:	0800d723 	.word	0x0800d723
 800d6b8:	0800d667 	.word	0x0800d667
 800d6bc:	0800d667 	.word	0x0800d667
 800d6c0:	0800d667 	.word	0x0800d667
 800d6c4:	0800d6c9 	.word	0x0800d6c9
 800d6c8:	a910      	add	r1, sp, #64	@ 0x40
 800d6ca:	4628      	mov	r0, r5
 800d6cc:	f002 fbee 	bl	800feac <uxr_deserialize_TIMESTAMP_REPLY_Payload>
 800d6d0:	f8d4 9090 	ldr.w	r9, [r4, #144]	@ 0x90
 800d6d4:	f1b9 0f00 	cmp.w	r9, #0
 800d6d8:	f000 8116 	beq.w	800d908 <read_submessage_list+0x2b4>
 800d6dc:	f001 fc9a 	bl	800f014 <uxr_nanos>
 800d6e0:	9f15      	ldr	r7, [sp, #84]	@ 0x54
 800d6e2:	4602      	mov	r2, r0
 800d6e4:	460b      	mov	r3, r1
 800d6e6:	9814      	ldr	r0, [sp, #80]	@ 0x50
 800d6e8:	2100      	movs	r1, #0
 800d6ea:	468c      	mov	ip, r1
 800d6ec:	fbc0 7c06 	smlal	r7, ip, r0, r6
 800d6f0:	e9cd 7c04 	strd	r7, ip, [sp, #16]
 800d6f4:	9810      	ldr	r0, [sp, #64]	@ 0x40
 800d6f6:	9f11      	ldr	r7, [sp, #68]	@ 0x44
 800d6f8:	468c      	mov	ip, r1
 800d6fa:	fbc0 7c06 	smlal	r7, ip, r0, r6
 800d6fe:	46e2      	mov	sl, ip
 800d700:	46bc      	mov	ip, r7
 800d702:	e9dd 0712 	ldrd	r0, r7, [sp, #72]	@ 0x48
 800d706:	fbc0 7106 	smlal	r7, r1, r0, r6
 800d70a:	e9cd ca02 	strd	ip, sl, [sp, #8]
 800d70e:	e9cd 7100 	strd	r7, r1, [sp]
 800d712:	f8d4 1094 	ldr.w	r1, [r4, #148]	@ 0x94
 800d716:	9106      	str	r1, [sp, #24]
 800d718:	4620      	mov	r0, r4
 800d71a:	47c8      	blx	r9
 800d71c:	f884 80a0 	strb.w	r8, [r4, #160]	@ 0xa0
 800d720:	e7a1      	b.n	800d666 <read_submessage_list+0x12>
 800d722:	a910      	add	r1, sp, #64	@ 0x40
 800d724:	4628      	mov	r0, r5
 800d726:	f002 fbaf 	bl	800fe88 <uxr_deserialize_HEARTBEAT_Payload>
 800d72a:	2100      	movs	r1, #0
 800d72c:	f89d 0044 	ldrb.w	r0, [sp, #68]	@ 0x44
 800d730:	f001 fb02 	bl	800ed38 <uxr_stream_id_from_raw>
 800d734:	f3c0 2707 	ubfx	r7, r0, #8, #8
 800d738:	900f      	str	r0, [sp, #60]	@ 0x3c
 800d73a:	4639      	mov	r1, r7
 800d73c:	f104 0008 	add.w	r0, r4, #8
 800d740:	f001 fbe8 	bl	800ef14 <uxr_get_input_reliable_stream>
 800d744:	2800      	cmp	r0, #0
 800d746:	d08e      	beq.n	800d666 <read_submessage_list+0x12>
 800d748:	f8bd 1040 	ldrh.w	r1, [sp, #64]	@ 0x40
 800d74c:	f8bd 2042 	ldrh.w	r2, [sp, #66]	@ 0x42
 800d750:	f006 fe80 	bl	8014454 <uxr_process_heartbeat>
 800d754:	f89d 103c 	ldrb.w	r1, [sp, #60]	@ 0x3c
 800d758:	463a      	mov	r2, r7
 800d75a:	4620      	mov	r0, r4
 800d75c:	f7ff fdf4 	bl	800d348 <write_submessage_acknack.isra.0>
 800d760:	e781      	b.n	800d666 <read_submessage_list+0x12>
 800d762:	a910      	add	r1, sp, #64	@ 0x40
 800d764:	4628      	mov	r0, r5
 800d766:	f002 fb67 	bl	800fe38 <uxr_deserialize_ACKNACK_Payload>
 800d76a:	2100      	movs	r1, #0
 800d76c:	f89d 0044 	ldrb.w	r0, [sp, #68]	@ 0x44
 800d770:	f001 fae2 	bl	800ed38 <uxr_stream_id_from_raw>
 800d774:	900d      	str	r0, [sp, #52]	@ 0x34
 800d776:	f3c0 2107 	ubfx	r1, r0, #8, #8
 800d77a:	f104 0008 	add.w	r0, r4, #8
 800d77e:	f001 fbb5 	bl	800eeec <uxr_get_output_reliable_stream>
 800d782:	4607      	mov	r7, r0
 800d784:	2800      	cmp	r0, #0
 800d786:	f43f af6e 	beq.w	800d666 <read_submessage_list+0x12>
 800d78a:	f89d 3042 	ldrb.w	r3, [sp, #66]	@ 0x42
 800d78e:	f89d 1043 	ldrb.w	r1, [sp, #67]	@ 0x43
 800d792:	f8bd 2040 	ldrh.w	r2, [sp, #64]	@ 0x40
 800d796:	eb01 2103 	add.w	r1, r1, r3, lsl #8
 800d79a:	b289      	uxth	r1, r1
 800d79c:	f007 f9b4 	bl	8014b08 <uxr_process_acknack>
 800d7a0:	4638      	mov	r0, r7
 800d7a2:	f007 f971 	bl	8014a88 <uxr_begin_output_nack_buffer_it>
 800d7a6:	f10d 0a38 	add.w	sl, sp, #56	@ 0x38
 800d7aa:	f8ad 0032 	strh.w	r0, [sp, #50]	@ 0x32
 800d7ae:	e006      	b.n	800d7be <read_submessage_list+0x16a>
 800d7b0:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 800d7b2:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800d7b4:	f8d3 9004 	ldr.w	r9, [r3, #4]
 800d7b8:	990e      	ldr	r1, [sp, #56]	@ 0x38
 800d7ba:	6818      	ldr	r0, [r3, #0]
 800d7bc:	47c8      	blx	r9
 800d7be:	f10d 0332 	add.w	r3, sp, #50	@ 0x32
 800d7c2:	aa0f      	add	r2, sp, #60	@ 0x3c
 800d7c4:	4651      	mov	r1, sl
 800d7c6:	4638      	mov	r0, r7
 800d7c8:	f007 f960 	bl	8014a8c <uxr_next_reliable_nack_buffer_to_send>
 800d7cc:	2800      	cmp	r0, #0
 800d7ce:	d1ef      	bne.n	800d7b0 <read_submessage_list+0x15c>
 800d7d0:	e749      	b.n	800d666 <read_submessage_list+0x12>
 800d7d2:	f89d 3025 	ldrb.w	r3, [sp, #37]	@ 0x25
 800d7d6:	f88d 3035 	strb.w	r3, [sp, #53]	@ 0x35
 800d7da:	f10d 0a38 	add.w	sl, sp, #56	@ 0x38
 800d7de:	f89d 3027 	ldrb.w	r3, [sp, #39]	@ 0x27
 800d7e2:	f88d 3037 	strb.w	r3, [sp, #55]	@ 0x37
 800d7e6:	4651      	mov	r1, sl
 800d7e8:	f89d 3024 	ldrb.w	r3, [sp, #36]	@ 0x24
 800d7ec:	f8bd 7030 	ldrh.w	r7, [sp, #48]	@ 0x30
 800d7f0:	f89d 902f 	ldrb.w	r9, [sp, #47]	@ 0x2f
 800d7f4:	f88d 2036 	strb.w	r2, [sp, #54]	@ 0x36
 800d7f8:	4628      	mov	r0, r5
 800d7fa:	f88d 3034 	strb.w	r3, [sp, #52]	@ 0x34
 800d7fe:	f002 f87b 	bl	800f8f8 <uxr_deserialize_BaseObjectRequest>
 800d802:	4650      	mov	r0, sl
 800d804:	a90f      	add	r1, sp, #60	@ 0x3c
 800d806:	f10d 0232 	add.w	r2, sp, #50	@ 0x32
 800d80a:	f000 fdc7 	bl	800e39c <uxr_parse_base_object_request>
 800d80e:	f8d4 b080 	ldr.w	fp, [r4, #128]	@ 0x80
 800d812:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800d814:	f8bd a032 	ldrh.w	sl, [sp, #50]	@ 0x32
 800d818:	9110      	str	r1, [sp, #64]	@ 0x40
 800d81a:	3f04      	subs	r7, #4
 800d81c:	f009 090e 	and.w	r9, r9, #14
 800d820:	b2bf      	uxth	r7, r7
 800d822:	f1bb 0f00 	cmp.w	fp, #0
 800d826:	d006      	beq.n	800d836 <read_submessage_list+0x1e2>
 800d828:	f8d4 3084 	ldr.w	r3, [r4, #132]	@ 0x84
 800d82c:	9300      	str	r3, [sp, #0]
 800d82e:	4652      	mov	r2, sl
 800d830:	2300      	movs	r3, #0
 800d832:	4620      	mov	r0, r4
 800d834:	47d8      	blx	fp
 800d836:	6fe2      	ldr	r2, [r4, #124]	@ 0x7c
 800d838:	b16a      	cbz	r2, 800d856 <read_submessage_list+0x202>
 800d83a:	6f60      	ldr	r0, [r4, #116]	@ 0x74
 800d83c:	2100      	movs	r1, #0
 800d83e:	3802      	subs	r0, #2
 800d840:	e002      	b.n	800d848 <read_submessage_list+0x1f4>
 800d842:	3101      	adds	r1, #1
 800d844:	4291      	cmp	r1, r2
 800d846:	d006      	beq.n	800d856 <read_submessage_list+0x202>
 800d848:	f830 3f02 	ldrh.w	r3, [r0, #2]!
 800d84c:	4553      	cmp	r3, sl
 800d84e:	d1f8      	bne.n	800d842 <read_submessage_list+0x1ee>
 800d850:	6fa3      	ldr	r3, [r4, #120]	@ 0x78
 800d852:	2200      	movs	r2, #0
 800d854:	545a      	strb	r2, [r3, r1]
 800d856:	f8bd 1032 	ldrh.w	r1, [sp, #50]	@ 0x32
 800d85a:	9102      	str	r1, [sp, #8]
 800d85c:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800d85e:	9101      	str	r1, [sp, #4]
 800d860:	990d      	ldr	r1, [sp, #52]	@ 0x34
 800d862:	9100      	str	r1, [sp, #0]
 800d864:	464b      	mov	r3, r9
 800d866:	463a      	mov	r2, r7
 800d868:	4629      	mov	r1, r5
 800d86a:	4620      	mov	r0, r4
 800d86c:	f7ff fc4a 	bl	800d104 <read_submessage_format>
 800d870:	e6f9      	b.n	800d666 <read_submessage_list+0x12>
 800d872:	4629      	mov	r1, r5
 800d874:	4620      	mov	r0, r4
 800d876:	f7ff fea5 	bl	800d5c4 <read_submessage_info>
 800d87a:	e6f4      	b.n	800d666 <read_submessage_list+0x12>
 800d87c:	2a00      	cmp	r2, #0
 800d87e:	d03e      	beq.n	800d8fe <read_submessage_list+0x2aa>
 800d880:	a910      	add	r1, sp, #64	@ 0x40
 800d882:	4628      	mov	r0, r5
 800d884:	f002 fa34 	bl	800fcf0 <uxr_deserialize_STATUS_Payload>
 800d888:	a90e      	add	r1, sp, #56	@ 0x38
 800d88a:	aa0d      	add	r2, sp, #52	@ 0x34
 800d88c:	a810      	add	r0, sp, #64	@ 0x40
 800d88e:	f000 fd85 	bl	800e39c <uxr_parse_base_object_request>
 800d892:	f8d4 a080 	ldr.w	sl, [r4, #128]	@ 0x80
 800d896:	990e      	ldr	r1, [sp, #56]	@ 0x38
 800d898:	f89d 9044 	ldrb.w	r9, [sp, #68]	@ 0x44
 800d89c:	f8bd 7034 	ldrh.w	r7, [sp, #52]	@ 0x34
 800d8a0:	910f      	str	r1, [sp, #60]	@ 0x3c
 800d8a2:	f1ba 0f00 	cmp.w	sl, #0
 800d8a6:	d006      	beq.n	800d8b6 <read_submessage_list+0x262>
 800d8a8:	f8d4 3084 	ldr.w	r3, [r4, #132]	@ 0x84
 800d8ac:	9300      	str	r3, [sp, #0]
 800d8ae:	463a      	mov	r2, r7
 800d8b0:	464b      	mov	r3, r9
 800d8b2:	4620      	mov	r0, r4
 800d8b4:	47d0      	blx	sl
 800d8b6:	6fe2      	ldr	r2, [r4, #124]	@ 0x7c
 800d8b8:	2a00      	cmp	r2, #0
 800d8ba:	f43f aed4 	beq.w	800d666 <read_submessage_list+0x12>
 800d8be:	6f60      	ldr	r0, [r4, #116]	@ 0x74
 800d8c0:	2100      	movs	r1, #0
 800d8c2:	3802      	subs	r0, #2
 800d8c4:	e003      	b.n	800d8ce <read_submessage_list+0x27a>
 800d8c6:	3101      	adds	r1, #1
 800d8c8:	4291      	cmp	r1, r2
 800d8ca:	f43f aecc 	beq.w	800d666 <read_submessage_list+0x12>
 800d8ce:	f830 3f02 	ldrh.w	r3, [r0, #2]!
 800d8d2:	42bb      	cmp	r3, r7
 800d8d4:	d1f7      	bne.n	800d8c6 <read_submessage_list+0x272>
 800d8d6:	6fa3      	ldr	r3, [r4, #120]	@ 0x78
 800d8d8:	f803 9001 	strb.w	r9, [r3, r1]
 800d8dc:	e6c3      	b.n	800d666 <read_submessage_list+0x12>
 800d8de:	2a00      	cmp	r2, #0
 800d8e0:	f47f aec1 	bne.w	800d666 <read_submessage_list+0x12>
 800d8e4:	4629      	mov	r1, r5
 800d8e6:	4620      	mov	r0, r4
 800d8e8:	f000 fc9e 	bl	800e228 <uxr_read_create_session_status>
 800d8ec:	e6bb      	b.n	800d666 <read_submessage_list+0x12>
 800d8ee:	4629      	mov	r1, r5
 800d8f0:	4620      	mov	r0, r4
 800d8f2:	f7ff fcf3 	bl	800d2dc <read_submessage_get_info>
 800d8f6:	e6b6      	b.n	800d666 <read_submessage_list+0x12>
 800d8f8:	b017      	add	sp, #92	@ 0x5c
 800d8fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d8fe:	4629      	mov	r1, r5
 800d900:	4620      	mov	r0, r4
 800d902:	f000 fc9d 	bl	800e240 <uxr_read_delete_session_status>
 800d906:	e6ae      	b.n	800d666 <read_submessage_list+0x12>
 800d908:	f001 fb84 	bl	800f014 <uxr_nanos>
 800d90c:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800d90e:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 800d910:	464f      	mov	r7, r9
 800d912:	fbc3 2706 	smlal	r2, r7, r3, r6
 800d916:	1812      	adds	r2, r2, r0
 800d918:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800d91a:	9813      	ldr	r0, [sp, #76]	@ 0x4c
 800d91c:	eb47 0101 	adc.w	r1, r7, r1
 800d920:	464f      	mov	r7, r9
 800d922:	fbc3 0706 	smlal	r0, r7, r3, r6
 800d926:	463b      	mov	r3, r7
 800d928:	4684      	mov	ip, r0
 800d92a:	e9dd 7010 	ldrd	r7, r0, [sp, #64]	@ 0x40
 800d92e:	fbc7 0906 	smlal	r0, r9, r7, r6
 800d932:	eb1c 0c00 	adds.w	ip, ip, r0
 800d936:	464f      	mov	r7, r9
 800d938:	eb43 0307 	adc.w	r3, r3, r7
 800d93c:	ebb2 0c0c 	subs.w	ip, r2, ip
 800d940:	eb61 0303 	sbc.w	r3, r1, r3
 800d944:	0fda      	lsrs	r2, r3, #31
 800d946:	eb12 020c 	adds.w	r2, r2, ip
 800d94a:	f143 0300 	adc.w	r3, r3, #0
 800d94e:	0852      	lsrs	r2, r2, #1
 800d950:	ea42 72c3 	orr.w	r2, r2, r3, lsl #31
 800d954:	105b      	asrs	r3, r3, #1
 800d956:	f8c4 2098 	str.w	r2, [r4, #152]	@ 0x98
 800d95a:	f8c4 309c 	str.w	r3, [r4, #156]	@ 0x9c
 800d95e:	e6dd      	b.n	800d71c <read_submessage_list+0xc8>
 800d960:	3b9aca00 	.word	0x3b9aca00

0800d964 <listen_message_reliably>:
 800d964:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d968:	1e0b      	subs	r3, r1, #0
 800d96a:	b09d      	sub	sp, #116	@ 0x74
 800d96c:	bfb8      	it	lt
 800d96e:	f06f 4300 	mvnlt.w	r3, #2147483648	@ 0x80000000
 800d972:	4680      	mov	r8, r0
 800d974:	9305      	str	r3, [sp, #20]
 800d976:	f001 fb33 	bl	800efe0 <uxr_millis>
 800d97a:	f898 2048 	ldrb.w	r2, [r8, #72]	@ 0x48
 800d97e:	4681      	mov	r9, r0
 800d980:	2a00      	cmp	r2, #0
 800d982:	f000 80a1 	beq.w	800dac8 <listen_message_reliably+0x164>
 800d986:	2600      	movs	r6, #0
 800d988:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 800d98c:	f04f 3bff 	mov.w	fp, #4294967295	@ 0xffffffff
 800d990:	9303      	str	r3, [sp, #12]
 800d992:	4630      	mov	r0, r6
 800d994:	460f      	mov	r7, r1
 800d996:	e00f      	b.n	800d9b8 <listen_message_reliably+0x54>
 800d998:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 800d99c:	9903      	ldr	r1, [sp, #12]
 800d99e:	455a      	cmp	r2, fp
 800d9a0:	f106 0601 	add.w	r6, r6, #1
 800d9a4:	eb73 0101 	sbcs.w	r1, r3, r1
 800d9a8:	b2f0      	uxtb	r0, r6
 800d9aa:	da01      	bge.n	800d9b0 <listen_message_reliably+0x4c>
 800d9ac:	4693      	mov	fp, r2
 800d9ae:	9303      	str	r3, [sp, #12]
 800d9b0:	f898 3048 	ldrb.w	r3, [r8, #72]	@ 0x48
 800d9b4:	4283      	cmp	r3, r0
 800d9b6:	d960      	bls.n	800da7a <listen_message_reliably+0x116>
 800d9b8:	eb00 0480 	add.w	r4, r0, r0, lsl #2
 800d9bc:	2102      	movs	r1, #2
 800d9be:	2201      	movs	r2, #1
 800d9c0:	f001 f990 	bl	800ece4 <uxr_stream_id>
 800d9c4:	00e4      	lsls	r4, r4, #3
 800d9c6:	f104 0520 	add.w	r5, r4, #32
 800d9ca:	4445      	add	r5, r8
 800d9cc:	4601      	mov	r1, r0
 800d9ce:	463b      	mov	r3, r7
 800d9d0:	464a      	mov	r2, r9
 800d9d2:	4628      	mov	r0, r5
 800d9d4:	9109      	str	r1, [sp, #36]	@ 0x24
 800d9d6:	f007 f82d 	bl	8014a34 <uxr_update_output_stream_heartbeat_timestamp>
 800d9da:	eb08 0304 	add.w	r3, r8, r4
 800d9de:	2800      	cmp	r0, #0
 800d9e0:	d0da      	beq.n	800d998 <listen_message_reliably+0x34>
 800d9e2:	f89d 3024 	ldrb.w	r3, [sp, #36]	@ 0x24
 800d9e6:	f89d 5025 	ldrb.w	r5, [sp, #37]	@ 0x25
 800d9ea:	9304      	str	r3, [sp, #16]
 800d9ec:	4640      	mov	r0, r8
 800d9ee:	f000 fcaf 	bl	800e350 <uxr_session_header_offset>
 800d9f2:	3501      	adds	r5, #1
 800d9f4:	f10d 0a50 	add.w	sl, sp, #80	@ 0x50
 800d9f8:	eb05 0585 	add.w	r5, r5, r5, lsl #2
 800d9fc:	eb08 05c5 	add.w	r5, r8, r5, lsl #3
 800da00:	2300      	movs	r3, #0
 800da02:	2211      	movs	r2, #17
 800da04:	9000      	str	r0, [sp, #0]
 800da06:	a90c      	add	r1, sp, #48	@ 0x30
 800da08:	4650      	mov	r0, sl
 800da0a:	f7ff f845 	bl	800ca98 <ucdr_init_buffer_origin_offset>
 800da0e:	2300      	movs	r3, #0
 800da10:	2205      	movs	r2, #5
 800da12:	210b      	movs	r1, #11
 800da14:	4650      	mov	r0, sl
 800da16:	f001 fa9d 	bl	800ef54 <uxr_buffer_submessage_header>
 800da1a:	8968      	ldrh	r0, [r5, #10]
 800da1c:	2101      	movs	r1, #1
 800da1e:	f007 f8ab 	bl	8014b78 <uxr_seq_num_add>
 800da22:	892b      	ldrh	r3, [r5, #8]
 800da24:	f8ad 302a 	strh.w	r3, [sp, #42]	@ 0x2a
 800da28:	4602      	mov	r2, r0
 800da2a:	9b04      	ldr	r3, [sp, #16]
 800da2c:	f8ad 2028 	strh.w	r2, [sp, #40]	@ 0x28
 800da30:	a90a      	add	r1, sp, #40	@ 0x28
 800da32:	4650      	mov	r0, sl
 800da34:	f88d 302c 	strb.w	r3, [sp, #44]	@ 0x2c
 800da38:	f002 fa12 	bl	800fe60 <uxr_serialize_HEARTBEAT_Payload>
 800da3c:	2200      	movs	r2, #0
 800da3e:	4611      	mov	r1, r2
 800da40:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800da42:	4640      	mov	r0, r8
 800da44:	f000 fc2e 	bl	800e2a4 <uxr_stamp_session_header>
 800da48:	4650      	mov	r0, sl
 800da4a:	f7ff f863 	bl	800cb14 <ucdr_buffer_length>
 800da4e:	f8d8 3070 	ldr.w	r3, [r8, #112]	@ 0x70
 800da52:	4602      	mov	r2, r0
 800da54:	a90c      	add	r1, sp, #48	@ 0x30
 800da56:	e9d3 0500 	ldrd	r0, r5, [r3]
 800da5a:	4444      	add	r4, r8
 800da5c:	47a8      	blx	r5
 800da5e:	e9d4 230e 	ldrd	r2, r3, [r4, #56]	@ 0x38
 800da62:	9903      	ldr	r1, [sp, #12]
 800da64:	455a      	cmp	r2, fp
 800da66:	f106 0601 	add.w	r6, r6, #1
 800da6a:	eb73 0101 	sbcs.w	r1, r3, r1
 800da6e:	b2f0      	uxtb	r0, r6
 800da70:	db9c      	blt.n	800d9ac <listen_message_reliably+0x48>
 800da72:	f898 3048 	ldrb.w	r3, [r8, #72]	@ 0x48
 800da76:	4283      	cmp	r3, r0
 800da78:	d89e      	bhi.n	800d9b8 <listen_message_reliably+0x54>
 800da7a:	9a03      	ldr	r2, [sp, #12]
 800da7c:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 800da80:	429a      	cmp	r2, r3
 800da82:	bf08      	it	eq
 800da84:	f1bb 3fff 	cmpeq.w	fp, #4294967295	@ 0xffffffff
 800da88:	d01e      	beq.n	800dac8 <listen_message_reliably+0x164>
 800da8a:	ebab 0309 	sub.w	r3, fp, r9
 800da8e:	9905      	ldr	r1, [sp, #20]
 800da90:	f8d8 2070 	ldr.w	r2, [r8, #112]	@ 0x70
 800da94:	2b00      	cmp	r3, #0
 800da96:	bf08      	it	eq
 800da98:	2301      	moveq	r3, #1
 800da9a:	4299      	cmp	r1, r3
 800da9c:	bfa8      	it	ge
 800da9e:	4619      	movge	r1, r3
 800daa0:	6894      	ldr	r4, [r2, #8]
 800daa2:	6810      	ldr	r0, [r2, #0]
 800daa4:	4689      	mov	r9, r1
 800daa6:	460b      	mov	r3, r1
 800daa8:	aa08      	add	r2, sp, #32
 800daaa:	a907      	add	r1, sp, #28
 800daac:	47a0      	blx	r4
 800daae:	b968      	cbnz	r0, 800dacc <listen_message_reliably+0x168>
 800dab0:	9b05      	ldr	r3, [sp, #20]
 800dab2:	eba3 0309 	sub.w	r3, r3, r9
 800dab6:	2b00      	cmp	r3, #0
 800dab8:	9305      	str	r3, [sp, #20]
 800daba:	f73f af5c 	bgt.w	800d976 <listen_message_reliably+0x12>
 800dabe:	4604      	mov	r4, r0
 800dac0:	4620      	mov	r0, r4
 800dac2:	b01d      	add	sp, #116	@ 0x74
 800dac4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dac8:	9b05      	ldr	r3, [sp, #20]
 800daca:	e7e0      	b.n	800da8e <listen_message_reliably+0x12a>
 800dacc:	e9dd 1207 	ldrd	r1, r2, [sp, #28]
 800dad0:	4604      	mov	r4, r0
 800dad2:	a80c      	add	r0, sp, #48	@ 0x30
 800dad4:	f7fe fff2 	bl	800cabc <ucdr_init_buffer>
 800dad8:	2500      	movs	r5, #0
 800dada:	f10d 031a 	add.w	r3, sp, #26
 800dade:	aa06      	add	r2, sp, #24
 800dae0:	a90c      	add	r1, sp, #48	@ 0x30
 800dae2:	4640      	mov	r0, r8
 800dae4:	f88d 5018 	strb.w	r5, [sp, #24]
 800dae8:	f000 fbf0 	bl	800e2cc <uxr_read_session_header>
 800daec:	b918      	cbnz	r0, 800daf6 <listen_message_reliably+0x192>
 800daee:	4620      	mov	r0, r4
 800daf0:	b01d      	add	sp, #116	@ 0x74
 800daf2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800daf6:	4629      	mov	r1, r5
 800daf8:	f89d 0018 	ldrb.w	r0, [sp, #24]
 800dafc:	f001 f91c 	bl	800ed38 <uxr_stream_id_from_raw>
 800db00:	f3c0 4507 	ubfx	r5, r0, #16, #8
 800db04:	2d01      	cmp	r5, #1
 800db06:	e9cd 0009 	strd	r0, r0, [sp, #36]	@ 0x24
 800db0a:	f8bd a01a 	ldrh.w	sl, [sp, #26]
 800db0e:	f3c0 2607 	ubfx	r6, r0, #8, #8
 800db12:	d04b      	beq.n	800dbac <listen_message_reliably+0x248>
 800db14:	2d02      	cmp	r5, #2
 800db16:	d00f      	beq.n	800db38 <listen_message_reliably+0x1d4>
 800db18:	2d00      	cmp	r5, #0
 800db1a:	d1e8      	bne.n	800daee <listen_message_reliably+0x18a>
 800db1c:	4629      	mov	r1, r5
 800db1e:	4628      	mov	r0, r5
 800db20:	f001 f90a 	bl	800ed38 <uxr_stream_id_from_raw>
 800db24:	a90c      	add	r1, sp, #48	@ 0x30
 800db26:	4602      	mov	r2, r0
 800db28:	4640      	mov	r0, r8
 800db2a:	920a      	str	r2, [sp, #40]	@ 0x28
 800db2c:	f7ff fd92 	bl	800d654 <read_submessage_list>
 800db30:	4620      	mov	r0, r4
 800db32:	b01d      	add	sp, #116	@ 0x74
 800db34:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800db38:	4631      	mov	r1, r6
 800db3a:	f108 0008 	add.w	r0, r8, #8
 800db3e:	f89d 9024 	ldrb.w	r9, [sp, #36]	@ 0x24
 800db42:	f001 f9e7 	bl	800ef14 <uxr_get_input_reliable_stream>
 800db46:	4607      	mov	r7, r0
 800db48:	b338      	cbz	r0, 800db9a <listen_message_reliably+0x236>
 800db4a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800db4c:	9203      	str	r2, [sp, #12]
 800db4e:	a80c      	add	r0, sp, #48	@ 0x30
 800db50:	f7fe ffe4 	bl	800cb1c <ucdr_buffer_remaining>
 800db54:	4603      	mov	r3, r0
 800db56:	f10d 0019 	add.w	r0, sp, #25
 800db5a:	9000      	str	r0, [sp, #0]
 800db5c:	9a03      	ldr	r2, [sp, #12]
 800db5e:	4651      	mov	r1, sl
 800db60:	4638      	mov	r0, r7
 800db62:	f006 fb7d 	bl	8014260 <uxr_receive_reliable_message>
 800db66:	b1c0      	cbz	r0, 800db9a <listen_message_reliably+0x236>
 800db68:	f89d 3019 	ldrb.w	r3, [sp, #25]
 800db6c:	b393      	cbz	r3, 800dbd4 <listen_message_reliably+0x270>
 800db6e:	ad14      	add	r5, sp, #80	@ 0x50
 800db70:	f04f 0a02 	mov.w	sl, #2
 800db74:	e00a      	b.n	800db8c <listen_message_reliably+0x228>
 800db76:	f88d 9028 	strb.w	r9, [sp, #40]	@ 0x28
 800db7a:	f88d 6029 	strb.w	r6, [sp, #41]	@ 0x29
 800db7e:	f88d a02a 	strb.w	sl, [sp, #42]	@ 0x2a
 800db82:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800db84:	4629      	mov	r1, r5
 800db86:	4640      	mov	r0, r8
 800db88:	f7ff fd64 	bl	800d654 <read_submessage_list>
 800db8c:	2204      	movs	r2, #4
 800db8e:	4629      	mov	r1, r5
 800db90:	4638      	mov	r0, r7
 800db92:	f006 fbe5 	bl	8014360 <uxr_next_input_reliable_buffer_available>
 800db96:	2800      	cmp	r0, #0
 800db98:	d1ed      	bne.n	800db76 <listen_message_reliably+0x212>
 800db9a:	4640      	mov	r0, r8
 800db9c:	4632      	mov	r2, r6
 800db9e:	4649      	mov	r1, r9
 800dba0:	f7ff fbd2 	bl	800d348 <write_submessage_acknack.isra.0>
 800dba4:	4620      	mov	r0, r4
 800dba6:	b01d      	add	sp, #116	@ 0x74
 800dba8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dbac:	4631      	mov	r1, r6
 800dbae:	f108 0008 	add.w	r0, r8, #8
 800dbb2:	f001 f9a5 	bl	800ef00 <uxr_get_input_best_effort_stream>
 800dbb6:	2800      	cmp	r0, #0
 800dbb8:	d099      	beq.n	800daee <listen_message_reliably+0x18a>
 800dbba:	4651      	mov	r1, sl
 800dbbc:	f006 fabc 	bl	8014138 <uxr_receive_best_effort_message>
 800dbc0:	2800      	cmp	r0, #0
 800dbc2:	d094      	beq.n	800daee <listen_message_reliably+0x18a>
 800dbc4:	f88d 502a 	strb.w	r5, [sp, #42]	@ 0x2a
 800dbc8:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800dbca:	a90c      	add	r1, sp, #48	@ 0x30
 800dbcc:	4640      	mov	r0, r8
 800dbce:	f7ff fd41 	bl	800d654 <read_submessage_list>
 800dbd2:	e78c      	b.n	800daee <listen_message_reliably+0x18a>
 800dbd4:	f88d 502a 	strb.w	r5, [sp, #42]	@ 0x2a
 800dbd8:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800dbda:	a90c      	add	r1, sp, #48	@ 0x30
 800dbdc:	4640      	mov	r0, r8
 800dbde:	f7ff fd39 	bl	800d654 <read_submessage_list>
 800dbe2:	e7c4      	b.n	800db6e <listen_message_reliably+0x20a>

0800dbe4 <uxr_run_session_timeout>:
 800dbe4:	b570      	push	{r4, r5, r6, lr}
 800dbe6:	4604      	mov	r4, r0
 800dbe8:	460d      	mov	r5, r1
 800dbea:	f001 f9f9 	bl	800efe0 <uxr_millis>
 800dbee:	4606      	mov	r6, r0
 800dbf0:	4620      	mov	r0, r4
 800dbf2:	f7ff fc71 	bl	800d4d8 <uxr_flash_output_streams>
 800dbf6:	4629      	mov	r1, r5
 800dbf8:	4620      	mov	r0, r4
 800dbfa:	f7ff feb3 	bl	800d964 <listen_message_reliably>
 800dbfe:	f001 f9ef 	bl	800efe0 <uxr_millis>
 800dc02:	1b83      	subs	r3, r0, r6
 800dc04:	1ae9      	subs	r1, r5, r3
 800dc06:	2900      	cmp	r1, #0
 800dc08:	dcf6      	bgt.n	800dbf8 <uxr_run_session_timeout+0x14>
 800dc0a:	f104 0008 	add.w	r0, r4, #8
 800dc0e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800dc12:	f001 b989 	b.w	800ef28 <uxr_output_streams_confirmed>
 800dc16:	bf00      	nop

0800dc18 <uxr_run_session_until_data>:
 800dc18:	b570      	push	{r4, r5, r6, lr}
 800dc1a:	4604      	mov	r4, r0
 800dc1c:	460d      	mov	r5, r1
 800dc1e:	f001 f9df 	bl	800efe0 <uxr_millis>
 800dc22:	4606      	mov	r6, r0
 800dc24:	4620      	mov	r0, r4
 800dc26:	f7ff fc57 	bl	800d4d8 <uxr_flash_output_streams>
 800dc2a:	2300      	movs	r3, #0
 800dc2c:	f884 30b4 	strb.w	r3, [r4, #180]	@ 0xb4
 800dc30:	4629      	mov	r1, r5
 800dc32:	e005      	b.n	800dc40 <uxr_run_session_until_data+0x28>
 800dc34:	f001 f9d4 	bl	800efe0 <uxr_millis>
 800dc38:	1b83      	subs	r3, r0, r6
 800dc3a:	1ae9      	subs	r1, r5, r3
 800dc3c:	2900      	cmp	r1, #0
 800dc3e:	dd07      	ble.n	800dc50 <uxr_run_session_until_data+0x38>
 800dc40:	4620      	mov	r0, r4
 800dc42:	f7ff fe8f 	bl	800d964 <listen_message_reliably>
 800dc46:	f894 00b4 	ldrb.w	r0, [r4, #180]	@ 0xb4
 800dc4a:	2800      	cmp	r0, #0
 800dc4c:	d0f2      	beq.n	800dc34 <uxr_run_session_until_data+0x1c>
 800dc4e:	bd70      	pop	{r4, r5, r6, pc}
 800dc50:	f894 00b4 	ldrb.w	r0, [r4, #180]	@ 0xb4
 800dc54:	bd70      	pop	{r4, r5, r6, pc}
 800dc56:	bf00      	nop

0800dc58 <uxr_run_session_until_confirm_delivery>:
 800dc58:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800dc5c:	4606      	mov	r6, r0
 800dc5e:	460d      	mov	r5, r1
 800dc60:	f001 f9be 	bl	800efe0 <uxr_millis>
 800dc64:	4607      	mov	r7, r0
 800dc66:	4630      	mov	r0, r6
 800dc68:	f7ff fc36 	bl	800d4d8 <uxr_flash_output_streams>
 800dc6c:	2d00      	cmp	r5, #0
 800dc6e:	f106 0808 	add.w	r8, r6, #8
 800dc72:	bfa8      	it	ge
 800dc74:	462c      	movge	r4, r5
 800dc76:	da07      	bge.n	800dc88 <uxr_run_session_until_confirm_delivery+0x30>
 800dc78:	e00e      	b.n	800dc98 <uxr_run_session_until_confirm_delivery+0x40>
 800dc7a:	f7ff fe73 	bl	800d964 <listen_message_reliably>
 800dc7e:	f001 f9af 	bl	800efe0 <uxr_millis>
 800dc82:	1bc3      	subs	r3, r0, r7
 800dc84:	1aec      	subs	r4, r5, r3
 800dc86:	d407      	bmi.n	800dc98 <uxr_run_session_until_confirm_delivery+0x40>
 800dc88:	4640      	mov	r0, r8
 800dc8a:	f001 f94d 	bl	800ef28 <uxr_output_streams_confirmed>
 800dc8e:	4603      	mov	r3, r0
 800dc90:	4621      	mov	r1, r4
 800dc92:	4630      	mov	r0, r6
 800dc94:	2b00      	cmp	r3, #0
 800dc96:	d0f0      	beq.n	800dc7a <uxr_run_session_until_confirm_delivery+0x22>
 800dc98:	4640      	mov	r0, r8
 800dc9a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800dc9e:	f001 b943 	b.w	800ef28 <uxr_output_streams_confirmed>
 800dca2:	bf00      	nop

0800dca4 <uxr_run_session_until_all_status>:
 800dca4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800dca8:	9c08      	ldr	r4, [sp, #32]
 800dcaa:	4606      	mov	r6, r0
 800dcac:	460f      	mov	r7, r1
 800dcae:	4691      	mov	r9, r2
 800dcb0:	461d      	mov	r5, r3
 800dcb2:	f7ff fc11 	bl	800d4d8 <uxr_flash_output_streams>
 800dcb6:	b124      	cbz	r4, 800dcc2 <uxr_run_session_until_all_status+0x1e>
 800dcb8:	4622      	mov	r2, r4
 800dcba:	21ff      	movs	r1, #255	@ 0xff
 800dcbc:	4628      	mov	r0, r5
 800dcbe:	f007 ffc5 	bl	8015c4c <memset>
 800dcc2:	e9c6 951d 	strd	r9, r5, [r6, #116]	@ 0x74
 800dcc6:	67f4      	str	r4, [r6, #124]	@ 0x7c
 800dcc8:	f001 f98a 	bl	800efe0 <uxr_millis>
 800dccc:	3d01      	subs	r5, #1
 800dcce:	f1a9 0902 	sub.w	r9, r9, #2
 800dcd2:	4680      	mov	r8, r0
 800dcd4:	4639      	mov	r1, r7
 800dcd6:	4630      	mov	r0, r6
 800dcd8:	f7ff fe44 	bl	800d964 <listen_message_reliably>
 800dcdc:	f001 f980 	bl	800efe0 <uxr_millis>
 800dce0:	eba0 0008 	sub.w	r0, r0, r8
 800dce4:	1a39      	subs	r1, r7, r0
 800dce6:	b344      	cbz	r4, 800dd3a <uxr_run_session_until_all_status+0x96>
 800dce8:	4628      	mov	r0, r5
 800dcea:	46ac      	mov	ip, r5
 800dcec:	2301      	movs	r3, #1
 800dcee:	e002      	b.n	800dcf6 <uxr_run_session_until_all_status+0x52>
 800dcf0:	42a3      	cmp	r3, r4
 800dcf2:	d20d      	bcs.n	800dd10 <uxr_run_session_until_all_status+0x6c>
 800dcf4:	3301      	adds	r3, #1
 800dcf6:	f81c ef01 	ldrb.w	lr, [ip, #1]!
 800dcfa:	f1be 0fff 	cmp.w	lr, #255	@ 0xff
 800dcfe:	d1f7      	bne.n	800dcf0 <uxr_run_session_until_all_status+0x4c>
 800dd00:	42a3      	cmp	r3, r4
 800dd02:	f839 2013 	ldrh.w	r2, [r9, r3, lsl #1]
 800dd06:	d213      	bcs.n	800dd30 <uxr_run_session_until_all_status+0x8c>
 800dd08:	2a00      	cmp	r2, #0
 800dd0a:	d0f3      	beq.n	800dcf4 <uxr_run_session_until_all_status+0x50>
 800dd0c:	2900      	cmp	r1, #0
 800dd0e:	dce2      	bgt.n	800dcd6 <uxr_run_session_until_all_status+0x32>
 800dd10:	2300      	movs	r3, #0
 800dd12:	67f3      	str	r3, [r6, #124]	@ 0x7c
 800dd14:	442c      	add	r4, r5
 800dd16:	e001      	b.n	800dd1c <uxr_run_session_until_all_status+0x78>
 800dd18:	2b01      	cmp	r3, #1
 800dd1a:	d812      	bhi.n	800dd42 <uxr_run_session_until_all_status+0x9e>
 800dd1c:	f810 3f01 	ldrb.w	r3, [r0, #1]!
 800dd20:	4284      	cmp	r4, r0
 800dd22:	d1f9      	bne.n	800dd18 <uxr_run_session_until_all_status+0x74>
 800dd24:	2b01      	cmp	r3, #1
 800dd26:	bf8c      	ite	hi
 800dd28:	2000      	movhi	r0, #0
 800dd2a:	2001      	movls	r0, #1
 800dd2c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800dd30:	2900      	cmp	r1, #0
 800dd32:	dded      	ble.n	800dd10 <uxr_run_session_until_all_status+0x6c>
 800dd34:	2a00      	cmp	r2, #0
 800dd36:	d1ce      	bne.n	800dcd6 <uxr_run_session_until_all_status+0x32>
 800dd38:	e7ea      	b.n	800dd10 <uxr_run_session_until_all_status+0x6c>
 800dd3a:	67f4      	str	r4, [r6, #124]	@ 0x7c
 800dd3c:	2001      	movs	r0, #1
 800dd3e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800dd42:	2000      	movs	r0, #0
 800dd44:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

0800dd48 <wait_session_status>:
 800dd48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dd4c:	4604      	mov	r4, r0
 800dd4e:	b09d      	sub	sp, #116	@ 0x74
 800dd50:	20ff      	movs	r0, #255	@ 0xff
 800dd52:	7160      	strb	r0, [r4, #5]
 800dd54:	9303      	str	r3, [sp, #12]
 800dd56:	2b00      	cmp	r3, #0
 800dd58:	f000 80b6 	beq.w	800dec8 <wait_session_status+0x180>
 800dd5c:	468a      	mov	sl, r1
 800dd5e:	4691      	mov	r9, r2
 800dd60:	f04f 0b00 	mov.w	fp, #0
 800dd64:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 800dd66:	464a      	mov	r2, r9
 800dd68:	e9d3 0500 	ldrd	r0, r5, [r3]
 800dd6c:	4651      	mov	r1, sl
 800dd6e:	47a8      	blx	r5
 800dd70:	f001 f936 	bl	800efe0 <uxr_millis>
 800dd74:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800dd78:	4605      	mov	r5, r0
 800dd7a:	e009      	b.n	800dd90 <wait_session_status+0x48>
 800dd7c:	f001 f930 	bl	800efe0 <uxr_millis>
 800dd80:	1b40      	subs	r0, r0, r5
 800dd82:	f5c0 737a 	rsb	r3, r0, #1000	@ 0x3e8
 800dd86:	2b00      	cmp	r3, #0
 800dd88:	dd40      	ble.n	800de0c <wait_session_status+0xc4>
 800dd8a:	7960      	ldrb	r0, [r4, #5]
 800dd8c:	28ff      	cmp	r0, #255	@ 0xff
 800dd8e:	d145      	bne.n	800de1c <wait_session_status+0xd4>
 800dd90:	6f22      	ldr	r2, [r4, #112]	@ 0x70
 800dd92:	a908      	add	r1, sp, #32
 800dd94:	6896      	ldr	r6, [r2, #8]
 800dd96:	6810      	ldr	r0, [r2, #0]
 800dd98:	aa09      	add	r2, sp, #36	@ 0x24
 800dd9a:	47b0      	blx	r6
 800dd9c:	2800      	cmp	r0, #0
 800dd9e:	d0ed      	beq.n	800dd7c <wait_session_status+0x34>
 800dda0:	e9dd 1208 	ldrd	r1, r2, [sp, #32]
 800dda4:	a80c      	add	r0, sp, #48	@ 0x30
 800dda6:	f7fe fe89 	bl	800cabc <ucdr_init_buffer>
 800ddaa:	2600      	movs	r6, #0
 800ddac:	f10d 031e 	add.w	r3, sp, #30
 800ddb0:	aa07      	add	r2, sp, #28
 800ddb2:	a90c      	add	r1, sp, #48	@ 0x30
 800ddb4:	4620      	mov	r0, r4
 800ddb6:	f88d 601c 	strb.w	r6, [sp, #28]
 800ddba:	f000 fa87 	bl	800e2cc <uxr_read_session_header>
 800ddbe:	2800      	cmp	r0, #0
 800ddc0:	d0dc      	beq.n	800dd7c <wait_session_status+0x34>
 800ddc2:	4631      	mov	r1, r6
 800ddc4:	f89d 001c 	ldrb.w	r0, [sp, #28]
 800ddc8:	f000 ffb6 	bl	800ed38 <uxr_stream_id_from_raw>
 800ddcc:	f3c0 4707 	ubfx	r7, r0, #16, #8
 800ddd0:	f8bd 301e 	ldrh.w	r3, [sp, #30]
 800ddd4:	9302      	str	r3, [sp, #8]
 800ddd6:	2f01      	cmp	r7, #1
 800ddd8:	e9cd 000a 	strd	r0, r0, [sp, #40]	@ 0x28
 800dddc:	f3c0 2607 	ubfx	r6, r0, #8, #8
 800dde0:	d05c      	beq.n	800de9c <wait_session_status+0x154>
 800dde2:	2f02      	cmp	r7, #2
 800dde4:	d020      	beq.n	800de28 <wait_session_status+0xe0>
 800dde6:	2f00      	cmp	r7, #0
 800dde8:	d1c8      	bne.n	800dd7c <wait_session_status+0x34>
 800ddea:	4639      	mov	r1, r7
 800ddec:	4638      	mov	r0, r7
 800ddee:	f000 ffa3 	bl	800ed38 <uxr_stream_id_from_raw>
 800ddf2:	a90c      	add	r1, sp, #48	@ 0x30
 800ddf4:	4602      	mov	r2, r0
 800ddf6:	900b      	str	r0, [sp, #44]	@ 0x2c
 800ddf8:	4620      	mov	r0, r4
 800ddfa:	f7ff fc2b 	bl	800d654 <read_submessage_list>
 800ddfe:	f001 f8ef 	bl	800efe0 <uxr_millis>
 800de02:	1b40      	subs	r0, r0, r5
 800de04:	f5c0 737a 	rsb	r3, r0, #1000	@ 0x3e8
 800de08:	2b00      	cmp	r3, #0
 800de0a:	dcbe      	bgt.n	800dd8a <wait_session_status+0x42>
 800de0c:	9b03      	ldr	r3, [sp, #12]
 800de0e:	7960      	ldrb	r0, [r4, #5]
 800de10:	f10b 0b01 	add.w	fp, fp, #1
 800de14:	455b      	cmp	r3, fp
 800de16:	d001      	beq.n	800de1c <wait_session_status+0xd4>
 800de18:	28ff      	cmp	r0, #255	@ 0xff
 800de1a:	d0a3      	beq.n	800dd64 <wait_session_status+0x1c>
 800de1c:	38ff      	subs	r0, #255	@ 0xff
 800de1e:	bf18      	it	ne
 800de20:	2001      	movne	r0, #1
 800de22:	b01d      	add	sp, #116	@ 0x74
 800de24:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800de28:	f89d 3028 	ldrb.w	r3, [sp, #40]	@ 0x28
 800de2c:	9304      	str	r3, [sp, #16]
 800de2e:	4631      	mov	r1, r6
 800de30:	f104 0008 	add.w	r0, r4, #8
 800de34:	f001 f86e 	bl	800ef14 <uxr_get_input_reliable_stream>
 800de38:	4680      	mov	r8, r0
 800de3a:	b348      	cbz	r0, 800de90 <wait_session_status+0x148>
 800de3c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800de3e:	9205      	str	r2, [sp, #20]
 800de40:	a80c      	add	r0, sp, #48	@ 0x30
 800de42:	f7fe fe6b 	bl	800cb1c <ucdr_buffer_remaining>
 800de46:	4603      	mov	r3, r0
 800de48:	f10d 001d 	add.w	r0, sp, #29
 800de4c:	9000      	str	r0, [sp, #0]
 800de4e:	9a05      	ldr	r2, [sp, #20]
 800de50:	9902      	ldr	r1, [sp, #8]
 800de52:	4640      	mov	r0, r8
 800de54:	f006 fa04 	bl	8014260 <uxr_receive_reliable_message>
 800de58:	b1d0      	cbz	r0, 800de90 <wait_session_status+0x148>
 800de5a:	f89d 301d 	ldrb.w	r3, [sp, #29]
 800de5e:	2b00      	cmp	r3, #0
 800de60:	d03a      	beq.n	800ded8 <wait_session_status+0x190>
 800de62:	9f04      	ldr	r7, [sp, #16]
 800de64:	e00a      	b.n	800de7c <wait_session_status+0x134>
 800de66:	f04f 0302 	mov.w	r3, #2
 800de6a:	f88d 702c 	strb.w	r7, [sp, #44]	@ 0x2c
 800de6e:	f88d 602d 	strb.w	r6, [sp, #45]	@ 0x2d
 800de72:	f88d 302e 	strb.w	r3, [sp, #46]	@ 0x2e
 800de76:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800de78:	f7ff fbec 	bl	800d654 <read_submessage_list>
 800de7c:	a914      	add	r1, sp, #80	@ 0x50
 800de7e:	2204      	movs	r2, #4
 800de80:	4640      	mov	r0, r8
 800de82:	f006 fa6d 	bl	8014360 <uxr_next_input_reliable_buffer_available>
 800de86:	4603      	mov	r3, r0
 800de88:	a914      	add	r1, sp, #80	@ 0x50
 800de8a:	4620      	mov	r0, r4
 800de8c:	2b00      	cmp	r3, #0
 800de8e:	d1ea      	bne.n	800de66 <wait_session_status+0x11e>
 800de90:	9904      	ldr	r1, [sp, #16]
 800de92:	4632      	mov	r2, r6
 800de94:	4620      	mov	r0, r4
 800de96:	f7ff fa57 	bl	800d348 <write_submessage_acknack.isra.0>
 800de9a:	e76f      	b.n	800dd7c <wait_session_status+0x34>
 800de9c:	4631      	mov	r1, r6
 800de9e:	f104 0008 	add.w	r0, r4, #8
 800dea2:	f001 f82d 	bl	800ef00 <uxr_get_input_best_effort_stream>
 800dea6:	2800      	cmp	r0, #0
 800dea8:	f43f af68 	beq.w	800dd7c <wait_session_status+0x34>
 800deac:	9902      	ldr	r1, [sp, #8]
 800deae:	f006 f943 	bl	8014138 <uxr_receive_best_effort_message>
 800deb2:	2800      	cmp	r0, #0
 800deb4:	f43f af62 	beq.w	800dd7c <wait_session_status+0x34>
 800deb8:	f88d 702e 	strb.w	r7, [sp, #46]	@ 0x2e
 800debc:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800debe:	a90c      	add	r1, sp, #48	@ 0x30
 800dec0:	4620      	mov	r0, r4
 800dec2:	f7ff fbc7 	bl	800d654 <read_submessage_list>
 800dec6:	e759      	b.n	800dd7c <wait_session_status+0x34>
 800dec8:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 800deca:	e9d3 0400 	ldrd	r0, r4, [r3]
 800dece:	47a0      	blx	r4
 800ded0:	2001      	movs	r0, #1
 800ded2:	b01d      	add	sp, #116	@ 0x74
 800ded4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ded8:	f88d 702e 	strb.w	r7, [sp, #46]	@ 0x2e
 800dedc:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800dede:	a90c      	add	r1, sp, #48	@ 0x30
 800dee0:	4620      	mov	r0, r4
 800dee2:	f7ff fbb7 	bl	800d654 <read_submessage_list>
 800dee6:	e7bc      	b.n	800de62 <wait_session_status+0x11a>

0800dee8 <uxr_delete_session_retries>:
 800dee8:	b530      	push	{r4, r5, lr}
 800deea:	b08f      	sub	sp, #60	@ 0x3c
 800deec:	4604      	mov	r4, r0
 800deee:	460d      	mov	r5, r1
 800def0:	f000 fa2e 	bl	800e350 <uxr_session_header_offset>
 800def4:	2300      	movs	r3, #0
 800def6:	2210      	movs	r2, #16
 800def8:	9000      	str	r0, [sp, #0]
 800defa:	a902      	add	r1, sp, #8
 800defc:	a806      	add	r0, sp, #24
 800defe:	f7fe fdcb 	bl	800ca98 <ucdr_init_buffer_origin_offset>
 800df02:	a906      	add	r1, sp, #24
 800df04:	4620      	mov	r0, r4
 800df06:	f000 f973 	bl	800e1f0 <uxr_buffer_delete_session>
 800df0a:	2200      	movs	r2, #0
 800df0c:	4611      	mov	r1, r2
 800df0e:	9b06      	ldr	r3, [sp, #24]
 800df10:	4620      	mov	r0, r4
 800df12:	f000 f9c7 	bl	800e2a4 <uxr_stamp_session_header>
 800df16:	a806      	add	r0, sp, #24
 800df18:	f7fe fdfc 	bl	800cb14 <ucdr_buffer_length>
 800df1c:	462b      	mov	r3, r5
 800df1e:	4602      	mov	r2, r0
 800df20:	a902      	add	r1, sp, #8
 800df22:	4620      	mov	r0, r4
 800df24:	f7ff ff10 	bl	800dd48 <wait_session_status>
 800df28:	b118      	cbz	r0, 800df32 <uxr_delete_session_retries+0x4a>
 800df2a:	7960      	ldrb	r0, [r4, #5]
 800df2c:	fab0 f080 	clz	r0, r0
 800df30:	0940      	lsrs	r0, r0, #5
 800df32:	b00f      	add	sp, #60	@ 0x3c
 800df34:	bd30      	pop	{r4, r5, pc}
 800df36:	bf00      	nop

0800df38 <uxr_create_session>:
 800df38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800df3c:	f100 0b08 	add.w	fp, r0, #8
 800df40:	b0ab      	sub	sp, #172	@ 0xac
 800df42:	4604      	mov	r4, r0
 800df44:	4658      	mov	r0, fp
 800df46:	f000 ff2b 	bl	800eda0 <uxr_reset_stream_storage>
 800df4a:	4620      	mov	r0, r4
 800df4c:	f000 fa00 	bl	800e350 <uxr_session_header_offset>
 800df50:	2300      	movs	r3, #0
 800df52:	9000      	str	r0, [sp, #0]
 800df54:	221c      	movs	r2, #28
 800df56:	a90b      	add	r1, sp, #44	@ 0x2c
 800df58:	a812      	add	r0, sp, #72	@ 0x48
 800df5a:	f7fe fd9d 	bl	800ca98 <ucdr_init_buffer_origin_offset>
 800df5e:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 800df60:	8a1a      	ldrh	r2, [r3, #16]
 800df62:	3a04      	subs	r2, #4
 800df64:	b292      	uxth	r2, r2
 800df66:	a912      	add	r1, sp, #72	@ 0x48
 800df68:	4620      	mov	r0, r4
 800df6a:	f000 f917 	bl	800e19c <uxr_buffer_create_session>
 800df6e:	9912      	ldr	r1, [sp, #72]	@ 0x48
 800df70:	4620      	mov	r0, r4
 800df72:	f000 f983 	bl	800e27c <uxr_stamp_create_session_header>
 800df76:	a812      	add	r0, sp, #72	@ 0x48
 800df78:	f7fe fdcc 	bl	800cb14 <ucdr_buffer_length>
 800df7c:	23ff      	movs	r3, #255	@ 0xff
 800df7e:	7163      	strb	r3, [r4, #5]
 800df80:	230a      	movs	r3, #10
 800df82:	46da      	mov	sl, fp
 800df84:	9303      	str	r3, [sp, #12]
 800df86:	4683      	mov	fp, r0
 800df88:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 800df8a:	465a      	mov	r2, fp
 800df8c:	e9d3 0500 	ldrd	r0, r5, [r3]
 800df90:	a90b      	add	r1, sp, #44	@ 0x2c
 800df92:	47a8      	blx	r5
 800df94:	f001 f824 	bl	800efe0 <uxr_millis>
 800df98:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800df9c:	4605      	mov	r5, r0
 800df9e:	e009      	b.n	800dfb4 <uxr_create_session+0x7c>
 800dfa0:	f001 f81e 	bl	800efe0 <uxr_millis>
 800dfa4:	1b40      	subs	r0, r0, r5
 800dfa6:	f5c0 737a 	rsb	r3, r0, #1000	@ 0x3e8
 800dfaa:	2b00      	cmp	r3, #0
 800dfac:	7962      	ldrb	r2, [r4, #5]
 800dfae:	dd38      	ble.n	800e022 <uxr_create_session+0xea>
 800dfb0:	2aff      	cmp	r2, #255	@ 0xff
 800dfb2:	d13c      	bne.n	800e02e <uxr_create_session+0xf6>
 800dfb4:	6f22      	ldr	r2, [r4, #112]	@ 0x70
 800dfb6:	a907      	add	r1, sp, #28
 800dfb8:	6896      	ldr	r6, [r2, #8]
 800dfba:	6810      	ldr	r0, [r2, #0]
 800dfbc:	aa08      	add	r2, sp, #32
 800dfbe:	47b0      	blx	r6
 800dfc0:	2800      	cmp	r0, #0
 800dfc2:	d0ed      	beq.n	800dfa0 <uxr_create_session+0x68>
 800dfc4:	e9dd 1207 	ldrd	r1, r2, [sp, #28]
 800dfc8:	a81a      	add	r0, sp, #104	@ 0x68
 800dfca:	f7fe fd77 	bl	800cabc <ucdr_init_buffer>
 800dfce:	2600      	movs	r6, #0
 800dfd0:	f10d 031a 	add.w	r3, sp, #26
 800dfd4:	aa06      	add	r2, sp, #24
 800dfd6:	a91a      	add	r1, sp, #104	@ 0x68
 800dfd8:	4620      	mov	r0, r4
 800dfda:	f88d 6018 	strb.w	r6, [sp, #24]
 800dfde:	f000 f975 	bl	800e2cc <uxr_read_session_header>
 800dfe2:	2800      	cmp	r0, #0
 800dfe4:	d0dc      	beq.n	800dfa0 <uxr_create_session+0x68>
 800dfe6:	4631      	mov	r1, r6
 800dfe8:	f89d 0018 	ldrb.w	r0, [sp, #24]
 800dfec:	f000 fea4 	bl	800ed38 <uxr_stream_id_from_raw>
 800dff0:	f3c0 4607 	ubfx	r6, r0, #16, #8
 800dff4:	2e01      	cmp	r6, #1
 800dff6:	e9cd 0009 	strd	r0, r0, [sp, #36]	@ 0x24
 800dffa:	f8bd 901a 	ldrh.w	r9, [sp, #26]
 800dffe:	f3c0 2707 	ubfx	r7, r0, #8, #8
 800e002:	d053      	beq.n	800e0ac <uxr_create_session+0x174>
 800e004:	2e02      	cmp	r6, #2
 800e006:	d018      	beq.n	800e03a <uxr_create_session+0x102>
 800e008:	2e00      	cmp	r6, #0
 800e00a:	d1c9      	bne.n	800dfa0 <uxr_create_session+0x68>
 800e00c:	4631      	mov	r1, r6
 800e00e:	4630      	mov	r0, r6
 800e010:	f000 fe92 	bl	800ed38 <uxr_stream_id_from_raw>
 800e014:	a91a      	add	r1, sp, #104	@ 0x68
 800e016:	4602      	mov	r2, r0
 800e018:	900a      	str	r0, [sp, #40]	@ 0x28
 800e01a:	4620      	mov	r0, r4
 800e01c:	f7ff fb1a 	bl	800d654 <read_submessage_list>
 800e020:	e7be      	b.n	800dfa0 <uxr_create_session+0x68>
 800e022:	9b03      	ldr	r3, [sp, #12]
 800e024:	3b01      	subs	r3, #1
 800e026:	9303      	str	r3, [sp, #12]
 800e028:	d001      	beq.n	800e02e <uxr_create_session+0xf6>
 800e02a:	2aff      	cmp	r2, #255	@ 0xff
 800e02c:	d0ac      	beq.n	800df88 <uxr_create_session+0x50>
 800e02e:	2a00      	cmp	r2, #0
 800e030:	d051      	beq.n	800e0d6 <uxr_create_session+0x19e>
 800e032:	2000      	movs	r0, #0
 800e034:	b02b      	add	sp, #172	@ 0xac
 800e036:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e03a:	f89d 3024 	ldrb.w	r3, [sp, #36]	@ 0x24
 800e03e:	9304      	str	r3, [sp, #16]
 800e040:	4639      	mov	r1, r7
 800e042:	4650      	mov	r0, sl
 800e044:	f000 ff66 	bl	800ef14 <uxr_get_input_reliable_stream>
 800e048:	4680      	mov	r8, r0
 800e04a:	b348      	cbz	r0, 800e0a0 <uxr_create_session+0x168>
 800e04c:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 800e04e:	9205      	str	r2, [sp, #20]
 800e050:	a81a      	add	r0, sp, #104	@ 0x68
 800e052:	f7fe fd63 	bl	800cb1c <ucdr_buffer_remaining>
 800e056:	4603      	mov	r3, r0
 800e058:	f10d 0019 	add.w	r0, sp, #25
 800e05c:	9000      	str	r0, [sp, #0]
 800e05e:	9a05      	ldr	r2, [sp, #20]
 800e060:	4649      	mov	r1, r9
 800e062:	4640      	mov	r0, r8
 800e064:	f006 f8fc 	bl	8014260 <uxr_receive_reliable_message>
 800e068:	b1d0      	cbz	r0, 800e0a0 <uxr_create_session+0x168>
 800e06a:	f89d 3019 	ldrb.w	r3, [sp, #25]
 800e06e:	2b00      	cmp	r3, #0
 800e070:	d038      	beq.n	800e0e4 <uxr_create_session+0x1ac>
 800e072:	9e04      	ldr	r6, [sp, #16]
 800e074:	e00a      	b.n	800e08c <uxr_create_session+0x154>
 800e076:	f04f 0302 	mov.w	r3, #2
 800e07a:	f88d 6028 	strb.w	r6, [sp, #40]	@ 0x28
 800e07e:	f88d 7029 	strb.w	r7, [sp, #41]	@ 0x29
 800e082:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800e086:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800e088:	f7ff fae4 	bl	800d654 <read_submessage_list>
 800e08c:	a922      	add	r1, sp, #136	@ 0x88
 800e08e:	2204      	movs	r2, #4
 800e090:	4640      	mov	r0, r8
 800e092:	f006 f965 	bl	8014360 <uxr_next_input_reliable_buffer_available>
 800e096:	4603      	mov	r3, r0
 800e098:	a922      	add	r1, sp, #136	@ 0x88
 800e09a:	4620      	mov	r0, r4
 800e09c:	2b00      	cmp	r3, #0
 800e09e:	d1ea      	bne.n	800e076 <uxr_create_session+0x13e>
 800e0a0:	9904      	ldr	r1, [sp, #16]
 800e0a2:	463a      	mov	r2, r7
 800e0a4:	4620      	mov	r0, r4
 800e0a6:	f7ff f94f 	bl	800d348 <write_submessage_acknack.isra.0>
 800e0aa:	e779      	b.n	800dfa0 <uxr_create_session+0x68>
 800e0ac:	4639      	mov	r1, r7
 800e0ae:	4650      	mov	r0, sl
 800e0b0:	f000 ff26 	bl	800ef00 <uxr_get_input_best_effort_stream>
 800e0b4:	2800      	cmp	r0, #0
 800e0b6:	f43f af73 	beq.w	800dfa0 <uxr_create_session+0x68>
 800e0ba:	4649      	mov	r1, r9
 800e0bc:	f006 f83c 	bl	8014138 <uxr_receive_best_effort_message>
 800e0c0:	2800      	cmp	r0, #0
 800e0c2:	f43f af6d 	beq.w	800dfa0 <uxr_create_session+0x68>
 800e0c6:	f88d 602a 	strb.w	r6, [sp, #42]	@ 0x2a
 800e0ca:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800e0cc:	a91a      	add	r1, sp, #104	@ 0x68
 800e0ce:	4620      	mov	r0, r4
 800e0d0:	f7ff fac0 	bl	800d654 <read_submessage_list>
 800e0d4:	e764      	b.n	800dfa0 <uxr_create_session+0x68>
 800e0d6:	4650      	mov	r0, sl
 800e0d8:	f000 fe62 	bl	800eda0 <uxr_reset_stream_storage>
 800e0dc:	2001      	movs	r0, #1
 800e0de:	b02b      	add	sp, #172	@ 0xac
 800e0e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e0e4:	f88d 602a 	strb.w	r6, [sp, #42]	@ 0x2a
 800e0e8:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800e0ea:	a91a      	add	r1, sp, #104	@ 0x68
 800e0ec:	4620      	mov	r0, r4
 800e0ee:	f7ff fab1 	bl	800d654 <read_submessage_list>
 800e0f2:	e7be      	b.n	800e072 <uxr_create_session+0x13a>

0800e0f4 <uxr_prepare_stream_to_write_submessage>:
 800e0f4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e0f8:	b082      	sub	sp, #8
 800e0fa:	4682      	mov	sl, r0
 800e0fc:	4610      	mov	r0, r2
 800e0fe:	4615      	mov	r5, r2
 800e100:	461e      	mov	r6, r3
 800e102:	f89d 7028 	ldrb.w	r7, [sp, #40]	@ 0x28
 800e106:	f89d 802c 	ldrb.w	r8, [sp, #44]	@ 0x2c
 800e10a:	9101      	str	r1, [sp, #4]
 800e10c:	f3c1 2407 	ubfx	r4, r1, #8, #8
 800e110:	f000 ff60 	bl	800efd4 <uxr_submessage_padding>
 800e114:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800e118:	f105 0904 	add.w	r9, r5, #4
 800e11c:	2b01      	cmp	r3, #1
 800e11e:	4481      	add	r9, r0
 800e120:	d01d      	beq.n	800e15e <uxr_prepare_stream_to_write_submessage+0x6a>
 800e122:	2b02      	cmp	r3, #2
 800e124:	d116      	bne.n	800e154 <uxr_prepare_stream_to_write_submessage+0x60>
 800e126:	4621      	mov	r1, r4
 800e128:	f10a 0008 	add.w	r0, sl, #8
 800e12c:	f000 fede 	bl	800eeec <uxr_get_output_reliable_stream>
 800e130:	4604      	mov	r4, r0
 800e132:	b158      	cbz	r0, 800e14c <uxr_prepare_stream_to_write_submessage+0x58>
 800e134:	4649      	mov	r1, r9
 800e136:	4632      	mov	r2, r6
 800e138:	f006 face 	bl	80146d8 <uxr_prepare_reliable_buffer_to_write>
 800e13c:	4604      	mov	r4, r0
 800e13e:	b12c      	cbz	r4, 800e14c <uxr_prepare_stream_to_write_submessage+0x58>
 800e140:	4643      	mov	r3, r8
 800e142:	b2aa      	uxth	r2, r5
 800e144:	4639      	mov	r1, r7
 800e146:	4630      	mov	r0, r6
 800e148:	f000 ff04 	bl	800ef54 <uxr_buffer_submessage_header>
 800e14c:	4620      	mov	r0, r4
 800e14e:	b002      	add	sp, #8
 800e150:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e154:	2400      	movs	r4, #0
 800e156:	4620      	mov	r0, r4
 800e158:	b002      	add	sp, #8
 800e15a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e15e:	4621      	mov	r1, r4
 800e160:	f10a 0008 	add.w	r0, sl, #8
 800e164:	f000 feba 	bl	800eedc <uxr_get_output_best_effort_stream>
 800e168:	4604      	mov	r4, r0
 800e16a:	2800      	cmp	r0, #0
 800e16c:	d0ee      	beq.n	800e14c <uxr_prepare_stream_to_write_submessage+0x58>
 800e16e:	4649      	mov	r1, r9
 800e170:	4632      	mov	r2, r6
 800e172:	f006 f9e1 	bl	8014538 <uxr_prepare_best_effort_buffer_to_write>
 800e176:	4604      	mov	r4, r0
 800e178:	e7e1      	b.n	800e13e <uxr_prepare_stream_to_write_submessage+0x4a>
 800e17a:	bf00      	nop

0800e17c <uxr_init_session_info>:
 800e17c:	0e13      	lsrs	r3, r2, #24
 800e17e:	7043      	strb	r3, [r0, #1]
 800e180:	f3c2 2307 	ubfx	r3, r2, #8, #8
 800e184:	f3c2 4c07 	ubfx	ip, r2, #16, #8
 800e188:	7001      	strb	r1, [r0, #0]
 800e18a:	70c3      	strb	r3, [r0, #3]
 800e18c:	2109      	movs	r1, #9
 800e18e:	23ff      	movs	r3, #255	@ 0xff
 800e190:	f880 c002 	strb.w	ip, [r0, #2]
 800e194:	7102      	strb	r2, [r0, #4]
 800e196:	80c1      	strh	r1, [r0, #6]
 800e198:	7143      	strb	r3, [r0, #5]
 800e19a:	4770      	bx	lr

0800e19c <uxr_buffer_create_session>:
 800e19c:	b530      	push	{r4, r5, lr}
 800e19e:	b089      	sub	sp, #36	@ 0x24
 800e1a0:	2300      	movs	r3, #0
 800e1a2:	4d12      	ldr	r5, [pc, #72]	@ (800e1ec <uxr_buffer_create_session+0x50>)
 800e1a4:	9307      	str	r3, [sp, #28]
 800e1a6:	f8ad 201c 	strh.w	r2, [sp, #28]
 800e1aa:	2201      	movs	r2, #1
 800e1ac:	9301      	str	r3, [sp, #4]
 800e1ae:	80c2      	strh	r2, [r0, #6]
 800e1b0:	f88d 2004 	strb.w	r2, [sp, #4]
 800e1b4:	682a      	ldr	r2, [r5, #0]
 800e1b6:	9200      	str	r2, [sp, #0]
 800e1b8:	88aa      	ldrh	r2, [r5, #4]
 800e1ba:	f8ad 2006 	strh.w	r2, [sp, #6]
 800e1be:	f8d0 2001 	ldr.w	r2, [r0, #1]
 800e1c2:	9202      	str	r2, [sp, #8]
 800e1c4:	460c      	mov	r4, r1
 800e1c6:	7802      	ldrb	r2, [r0, #0]
 800e1c8:	9303      	str	r3, [sp, #12]
 800e1ca:	4619      	mov	r1, r3
 800e1cc:	f88d 200c 	strb.w	r2, [sp, #12]
 800e1d0:	4620      	mov	r0, r4
 800e1d2:	2210      	movs	r2, #16
 800e1d4:	e9cd 3304 	strd	r3, r3, [sp, #16]
 800e1d8:	9306      	str	r3, [sp, #24]
 800e1da:	f000 febb 	bl	800ef54 <uxr_buffer_submessage_header>
 800e1de:	4669      	mov	r1, sp
 800e1e0:	4620      	mov	r0, r4
 800e1e2:	f001 fc9f 	bl	800fb24 <uxr_serialize_CREATE_CLIENT_Payload>
 800e1e6:	b009      	add	sp, #36	@ 0x24
 800e1e8:	bd30      	pop	{r4, r5, pc}
 800e1ea:	bf00      	nop
 800e1ec:	08016c68 	.word	0x08016c68

0800e1f0 <uxr_buffer_delete_session>:
 800e1f0:	b510      	push	{r4, lr}
 800e1f2:	4b0c      	ldr	r3, [pc, #48]	@ (800e224 <uxr_buffer_delete_session+0x34>)
 800e1f4:	b082      	sub	sp, #8
 800e1f6:	f8b3 c008 	ldrh.w	ip, [r3, #8]
 800e1fa:	f8ad c006 	strh.w	ip, [sp, #6]
 800e1fe:	460c      	mov	r4, r1
 800e200:	2202      	movs	r2, #2
 800e202:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800e206:	80c2      	strh	r2, [r0, #6]
 800e208:	f8ad 3004 	strh.w	r3, [sp, #4]
 800e20c:	2204      	movs	r2, #4
 800e20e:	2300      	movs	r3, #0
 800e210:	2103      	movs	r1, #3
 800e212:	4620      	mov	r0, r4
 800e214:	f000 fe9e 	bl	800ef54 <uxr_buffer_submessage_header>
 800e218:	a901      	add	r1, sp, #4
 800e21a:	4620      	mov	r0, r4
 800e21c:	f001 fd28 	bl	800fc70 <uxr_serialize_DELETE_Payload>
 800e220:	b002      	add	sp, #8
 800e222:	bd10      	pop	{r4, pc}
 800e224:	08016c68 	.word	0x08016c68

0800e228 <uxr_read_create_session_status>:
 800e228:	b510      	push	{r4, lr}
 800e22a:	b088      	sub	sp, #32
 800e22c:	4604      	mov	r4, r0
 800e22e:	4608      	mov	r0, r1
 800e230:	a901      	add	r1, sp, #4
 800e232:	f001 fd2d 	bl	800fc90 <uxr_deserialize_STATUS_AGENT_Payload>
 800e236:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800e23a:	7163      	strb	r3, [r4, #5]
 800e23c:	b008      	add	sp, #32
 800e23e:	bd10      	pop	{r4, pc}

0800e240 <uxr_read_delete_session_status>:
 800e240:	b510      	push	{r4, lr}
 800e242:	4604      	mov	r4, r0
 800e244:	b084      	sub	sp, #16
 800e246:	4608      	mov	r0, r1
 800e248:	a902      	add	r1, sp, #8
 800e24a:	f001 fd51 	bl	800fcf0 <uxr_deserialize_STATUS_Payload>
 800e24e:	88e3      	ldrh	r3, [r4, #6]
 800e250:	2b02      	cmp	r3, #2
 800e252:	d001      	beq.n	800e258 <uxr_read_delete_session_status+0x18>
 800e254:	b004      	add	sp, #16
 800e256:	bd10      	pop	{r4, pc}
 800e258:	f10d 000a 	add.w	r0, sp, #10
 800e25c:	f7fe feca 	bl	800cff4 <uxr_object_id_from_raw>
 800e260:	f89d 2008 	ldrb.w	r2, [sp, #8]
 800e264:	f89d 3009 	ldrb.w	r3, [sp, #9]
 800e268:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 800e26c:	b29b      	uxth	r3, r3
 800e26e:	2b02      	cmp	r3, #2
 800e270:	bf04      	itt	eq
 800e272:	f89d 300c 	ldrbeq.w	r3, [sp, #12]
 800e276:	7163      	strbeq	r3, [r4, #5]
 800e278:	b004      	add	sp, #16
 800e27a:	bd10      	pop	{r4, pc}

0800e27c <uxr_stamp_create_session_header>:
 800e27c:	b510      	push	{r4, lr}
 800e27e:	2208      	movs	r2, #8
 800e280:	b08a      	sub	sp, #40	@ 0x28
 800e282:	4604      	mov	r4, r0
 800e284:	eb0d 0002 	add.w	r0, sp, r2
 800e288:	f7fe fc18 	bl	800cabc <ucdr_init_buffer>
 800e28c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e290:	9400      	str	r4, [sp, #0]
 800e292:	2300      	movs	r3, #0
 800e294:	461a      	mov	r2, r3
 800e296:	f001 0180 	and.w	r1, r1, #128	@ 0x80
 800e29a:	a802      	add	r0, sp, #8
 800e29c:	f000 fed0 	bl	800f040 <uxr_serialize_message_header>
 800e2a0:	b00a      	add	sp, #40	@ 0x28
 800e2a2:	bd10      	pop	{r4, pc}

0800e2a4 <uxr_stamp_session_header>:
 800e2a4:	b530      	push	{r4, r5, lr}
 800e2a6:	b08d      	sub	sp, #52	@ 0x34
 800e2a8:	4604      	mov	r4, r0
 800e2aa:	460d      	mov	r5, r1
 800e2ac:	9203      	str	r2, [sp, #12]
 800e2ae:	4619      	mov	r1, r3
 800e2b0:	a804      	add	r0, sp, #16
 800e2b2:	2208      	movs	r2, #8
 800e2b4:	f7fe fc02 	bl	800cabc <ucdr_init_buffer>
 800e2b8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e2bc:	9b03      	ldr	r3, [sp, #12]
 800e2be:	9400      	str	r4, [sp, #0]
 800e2c0:	462a      	mov	r2, r5
 800e2c2:	a804      	add	r0, sp, #16
 800e2c4:	f000 febc 	bl	800f040 <uxr_serialize_message_header>
 800e2c8:	b00d      	add	sp, #52	@ 0x34
 800e2ca:	bd30      	pop	{r4, r5, pc}

0800e2cc <uxr_read_session_header>:
 800e2cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e2d0:	4607      	mov	r7, r0
 800e2d2:	b084      	sub	sp, #16
 800e2d4:	4608      	mov	r0, r1
 800e2d6:	460c      	mov	r4, r1
 800e2d8:	4615      	mov	r5, r2
 800e2da:	461e      	mov	r6, r3
 800e2dc:	f7fe fc1e 	bl	800cb1c <ucdr_buffer_remaining>
 800e2e0:	2808      	cmp	r0, #8
 800e2e2:	d803      	bhi.n	800e2ec <uxr_read_session_header+0x20>
 800e2e4:	2000      	movs	r0, #0
 800e2e6:	b004      	add	sp, #16
 800e2e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e2ec:	f10d 080c 	add.w	r8, sp, #12
 800e2f0:	4633      	mov	r3, r6
 800e2f2:	462a      	mov	r2, r5
 800e2f4:	f8cd 8000 	str.w	r8, [sp]
 800e2f8:	4620      	mov	r0, r4
 800e2fa:	f10d 010b 	add.w	r1, sp, #11
 800e2fe:	f000 febd 	bl	800f07c <uxr_deserialize_message_header>
 800e302:	783a      	ldrb	r2, [r7, #0]
 800e304:	f89d 300b 	ldrb.w	r3, [sp, #11]
 800e308:	4293      	cmp	r3, r2
 800e30a:	d1eb      	bne.n	800e2e4 <uxr_read_session_header+0x18>
 800e30c:	061b      	lsls	r3, r3, #24
 800e30e:	d41c      	bmi.n	800e34a <uxr_read_session_header+0x7e>
 800e310:	f89d 200c 	ldrb.w	r2, [sp, #12]
 800e314:	787b      	ldrb	r3, [r7, #1]
 800e316:	429a      	cmp	r2, r3
 800e318:	d003      	beq.n	800e322 <uxr_read_session_header+0x56>
 800e31a:	2001      	movs	r0, #1
 800e31c:	f080 0001 	eor.w	r0, r0, #1
 800e320:	e7e1      	b.n	800e2e6 <uxr_read_session_header+0x1a>
 800e322:	f89d 200d 	ldrb.w	r2, [sp, #13]
 800e326:	78bb      	ldrb	r3, [r7, #2]
 800e328:	429a      	cmp	r2, r3
 800e32a:	f107 0102 	add.w	r1, r7, #2
 800e32e:	d1f4      	bne.n	800e31a <uxr_read_session_header+0x4e>
 800e330:	f89d 200e 	ldrb.w	r2, [sp, #14]
 800e334:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800e338:	429a      	cmp	r2, r3
 800e33a:	d1ee      	bne.n	800e31a <uxr_read_session_header+0x4e>
 800e33c:	f89d 200f 	ldrb.w	r2, [sp, #15]
 800e340:	784b      	ldrb	r3, [r1, #1]
 800e342:	429a      	cmp	r2, r3
 800e344:	d1e9      	bne.n	800e31a <uxr_read_session_header+0x4e>
 800e346:	2000      	movs	r0, #0
 800e348:	e7e8      	b.n	800e31c <uxr_read_session_header+0x50>
 800e34a:	2001      	movs	r0, #1
 800e34c:	e7cb      	b.n	800e2e6 <uxr_read_session_header+0x1a>
 800e34e:	bf00      	nop

0800e350 <uxr_session_header_offset>:
 800e350:	f990 3000 	ldrsb.w	r3, [r0]
 800e354:	2b00      	cmp	r3, #0
 800e356:	bfac      	ite	ge
 800e358:	2008      	movge	r0, #8
 800e35a:	2004      	movlt	r0, #4
 800e35c:	4770      	bx	lr
 800e35e:	bf00      	nop

0800e360 <uxr_init_base_object_request>:
 800e360:	b510      	push	{r4, lr}
 800e362:	88c3      	ldrh	r3, [r0, #6]
 800e364:	b082      	sub	sp, #8
 800e366:	f64f 74f4 	movw	r4, #65524	@ 0xfff4
 800e36a:	9101      	str	r1, [sp, #4]
 800e36c:	f1a3 010a 	sub.w	r1, r3, #10
 800e370:	b289      	uxth	r1, r1
 800e372:	42a1      	cmp	r1, r4
 800e374:	d80e      	bhi.n	800e394 <uxr_init_base_object_request+0x34>
 800e376:	3301      	adds	r3, #1
 800e378:	b29c      	uxth	r4, r3
 800e37a:	f3c3 2107 	ubfx	r1, r3, #8, #8
 800e37e:	b2db      	uxtb	r3, r3
 800e380:	80c4      	strh	r4, [r0, #6]
 800e382:	9801      	ldr	r0, [sp, #4]
 800e384:	7011      	strb	r1, [r2, #0]
 800e386:	7053      	strb	r3, [r2, #1]
 800e388:	1c91      	adds	r1, r2, #2
 800e38a:	f7fe fe47 	bl	800d01c <uxr_object_id_to_raw>
 800e38e:	4620      	mov	r0, r4
 800e390:	b002      	add	sp, #8
 800e392:	bd10      	pop	{r4, pc}
 800e394:	230a      	movs	r3, #10
 800e396:	2100      	movs	r1, #0
 800e398:	461c      	mov	r4, r3
 800e39a:	e7f1      	b.n	800e380 <uxr_init_base_object_request+0x20>

0800e39c <uxr_parse_base_object_request>:
 800e39c:	b570      	push	{r4, r5, r6, lr}
 800e39e:	4604      	mov	r4, r0
 800e3a0:	3002      	adds	r0, #2
 800e3a2:	460d      	mov	r5, r1
 800e3a4:	4616      	mov	r6, r2
 800e3a6:	f7fe fe25 	bl	800cff4 <uxr_object_id_from_raw>
 800e3aa:	f3c0 430f 	ubfx	r3, r0, #16, #16
 800e3ae:	8028      	strh	r0, [r5, #0]
 800e3b0:	806b      	strh	r3, [r5, #2]
 800e3b2:	7822      	ldrb	r2, [r4, #0]
 800e3b4:	7863      	ldrb	r3, [r4, #1]
 800e3b6:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 800e3ba:	8033      	strh	r3, [r6, #0]
 800e3bc:	bd70      	pop	{r4, r5, r6, pc}
 800e3be:	bf00      	nop

0800e3c0 <uxr_init_framing_io>:
 800e3c0:	2300      	movs	r3, #0
 800e3c2:	7041      	strb	r1, [r0, #1]
 800e3c4:	7003      	strb	r3, [r0, #0]
 800e3c6:	8583      	strh	r3, [r0, #44]	@ 0x2c
 800e3c8:	4770      	bx	lr
 800e3ca:	bf00      	nop

0800e3cc <uxr_write_framed_msg>:
 800e3cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e3d0:	4617      	mov	r7, r2
 800e3d2:	7842      	ldrb	r2, [r0, #1]
 800e3d4:	b083      	sub	sp, #12
 800e3d6:	460e      	mov	r6, r1
 800e3d8:	f1a2 017d 	sub.w	r1, r2, #125	@ 0x7d
 800e3dc:	469a      	mov	sl, r3
 800e3de:	2901      	cmp	r1, #1
 800e3e0:	f04f 037e 	mov.w	r3, #126	@ 0x7e
 800e3e4:	4604      	mov	r4, r0
 800e3e6:	f880 3038 	strb.w	r3, [r0, #56]	@ 0x38
 800e3ea:	f8dd b038 	ldr.w	fp, [sp, #56]	@ 0x38
 800e3ee:	f89d 0034 	ldrb.w	r0, [sp, #52]	@ 0x34
 800e3f2:	f240 8137 	bls.w	800e664 <uxr_write_framed_msg+0x298>
 800e3f6:	f1a0 017d 	sub.w	r1, r0, #125	@ 0x7d
 800e3fa:	f884 2039 	strb.w	r2, [r4, #57]	@ 0x39
 800e3fe:	2901      	cmp	r1, #1
 800e400:	f04f 0202 	mov.w	r2, #2
 800e404:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 800e408:	f240 808f 	bls.w	800e52a <uxr_write_framed_msg+0x15e>
 800e40c:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800e40e:	f884 003a 	strb.w	r0, [r4, #58]	@ 0x3a
 800e412:	b2dd      	uxtb	r5, r3
 800e414:	f1a5 017d 	sub.w	r1, r5, #125	@ 0x7d
 800e418:	2203      	movs	r2, #3
 800e41a:	2901      	cmp	r1, #1
 800e41c:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 800e420:	f240 809a 	bls.w	800e558 <uxr_write_framed_msg+0x18c>
 800e424:	18a1      	adds	r1, r4, r2
 800e426:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800e428:	f881 5038 	strb.w	r5, [r1, #56]	@ 0x38
 800e42c:	f3c3 2107 	ubfx	r1, r3, #8, #8
 800e430:	f1a1 007d 	sub.w	r0, r1, #125	@ 0x7d
 800e434:	3201      	adds	r2, #1
 800e436:	2801      	cmp	r0, #1
 800e438:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 800e43c:	f240 80a0 	bls.w	800e580 <uxr_write_framed_msg+0x1b4>
 800e440:	18a0      	adds	r0, r4, r2
 800e442:	3201      	adds	r2, #1
 800e444:	b2d2      	uxtb	r2, r2
 800e446:	f880 1038 	strb.w	r1, [r0, #56]	@ 0x38
 800e44a:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 800e44e:	2b00      	cmp	r3, #0
 800e450:	f000 80a9 	beq.w	800e5a6 <uxr_write_framed_msg+0x1da>
 800e454:	f04f 0900 	mov.w	r9, #0
 800e458:	46c8      	mov	r8, r9
 800e45a:	f81a 3008 	ldrb.w	r3, [sl, r8]
 800e45e:	f1a3 017d 	sub.w	r1, r3, #125	@ 0x7d
 800e462:	2901      	cmp	r1, #1
 800e464:	f240 80c3 	bls.w	800e5ee <uxr_write_framed_msg+0x222>
 800e468:	2a29      	cmp	r2, #41	@ 0x29
 800e46a:	f200 809f 	bhi.w	800e5ac <uxr_write_framed_msg+0x1e0>
 800e46e:	18a1      	adds	r1, r4, r2
 800e470:	3201      	adds	r2, #1
 800e472:	b2d2      	uxtb	r2, r2
 800e474:	f881 3038 	strb.w	r3, [r1, #56]	@ 0x38
 800e478:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 800e47c:	ea89 0303 	eor.w	r3, r9, r3
 800e480:	498c      	ldr	r1, [pc, #560]	@ (800e6b4 <uxr_write_framed_msg+0x2e8>)
 800e482:	b2db      	uxtb	r3, r3
 800e484:	f108 0801 	add.w	r8, r8, #1
 800e488:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 800e48c:	ea83 2919 	eor.w	r9, r3, r9, lsr #8
 800e490:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800e492:	4543      	cmp	r3, r8
 800e494:	d8e1      	bhi.n	800e45a <uxr_write_framed_msg+0x8e>
 800e496:	ea4f 2319 	mov.w	r3, r9, lsr #8
 800e49a:	fa5f f889 	uxtb.w	r8, r9
 800e49e:	9301      	str	r3, [sp, #4]
 800e4a0:	f04f 0900 	mov.w	r9, #0
 800e4a4:	f1a8 0a7d 	sub.w	sl, r8, #125	@ 0x7d
 800e4a8:	fa5f f18a 	uxtb.w	r1, sl
 800e4ac:	2901      	cmp	r1, #1
 800e4ae:	d921      	bls.n	800e4f4 <uxr_write_framed_msg+0x128>
 800e4b0:	2a29      	cmp	r2, #41	@ 0x29
 800e4b2:	f240 80af 	bls.w	800e614 <uxr_write_framed_msg+0x248>
 800e4b6:	2500      	movs	r5, #0
 800e4b8:	e000      	b.n	800e4bc <uxr_write_framed_msg+0xf0>
 800e4ba:	b160      	cbz	r0, 800e4d6 <uxr_write_framed_msg+0x10a>
 800e4bc:	f105 0138 	add.w	r1, r5, #56	@ 0x38
 800e4c0:	1b52      	subs	r2, r2, r5
 800e4c2:	465b      	mov	r3, fp
 800e4c4:	4421      	add	r1, r4
 800e4c6:	4638      	mov	r0, r7
 800e4c8:	47b0      	blx	r6
 800e4ca:	f894 2062 	ldrb.w	r2, [r4, #98]	@ 0x62
 800e4ce:	4405      	add	r5, r0
 800e4d0:	4295      	cmp	r5, r2
 800e4d2:	d3f2      	bcc.n	800e4ba <uxr_write_framed_msg+0xee>
 800e4d4:	d003      	beq.n	800e4de <uxr_write_framed_msg+0x112>
 800e4d6:	2000      	movs	r0, #0
 800e4d8:	b003      	add	sp, #12
 800e4da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e4de:	fa5f f18a 	uxtb.w	r1, sl
 800e4e2:	f04f 0300 	mov.w	r3, #0
 800e4e6:	2901      	cmp	r1, #1
 800e4e8:	f884 3062 	strb.w	r3, [r4, #98]	@ 0x62
 800e4ec:	f04f 0200 	mov.w	r2, #0
 800e4f0:	f200 8090 	bhi.w	800e614 <uxr_write_framed_msg+0x248>
 800e4f4:	1c51      	adds	r1, r2, #1
 800e4f6:	b2c9      	uxtb	r1, r1
 800e4f8:	2929      	cmp	r1, #41	@ 0x29
 800e4fa:	d8dc      	bhi.n	800e4b6 <uxr_write_framed_msg+0xea>
 800e4fc:	18a5      	adds	r5, r4, r2
 800e4fe:	4421      	add	r1, r4
 800e500:	3202      	adds	r2, #2
 800e502:	f088 0820 	eor.w	r8, r8, #32
 800e506:	4648      	mov	r0, r9
 800e508:	f04f 037d 	mov.w	r3, #125	@ 0x7d
 800e50c:	b2d2      	uxtb	r2, r2
 800e50e:	f885 3038 	strb.w	r3, [r5, #56]	@ 0x38
 800e512:	f04f 0901 	mov.w	r9, #1
 800e516:	f881 8038 	strb.w	r8, [r1, #56]	@ 0x38
 800e51a:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 800e51e:	2800      	cmp	r0, #0
 800e520:	f040 8085 	bne.w	800e62e <uxr_write_framed_msg+0x262>
 800e524:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800e528:	e7bc      	b.n	800e4a4 <uxr_write_framed_msg+0xd8>
 800e52a:	4611      	mov	r1, r2
 800e52c:	f04f 0c03 	mov.w	ip, #3
 800e530:	2204      	movs	r2, #4
 800e532:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800e534:	4421      	add	r1, r4
 800e536:	b2dd      	uxtb	r5, r3
 800e538:	f04f 0e7d 	mov.w	lr, #125	@ 0x7d
 800e53c:	f881 e038 	strb.w	lr, [r1, #56]	@ 0x38
 800e540:	44a4      	add	ip, r4
 800e542:	f1a5 017d 	sub.w	r1, r5, #125	@ 0x7d
 800e546:	f080 0020 	eor.w	r0, r0, #32
 800e54a:	2901      	cmp	r1, #1
 800e54c:	f88c 0038 	strb.w	r0, [ip, #56]	@ 0x38
 800e550:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 800e554:	f63f af66 	bhi.w	800e424 <uxr_write_framed_msg+0x58>
 800e558:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800e55a:	18a0      	adds	r0, r4, r2
 800e55c:	f085 0520 	eor.w	r5, r5, #32
 800e560:	f04f 0c7d 	mov.w	ip, #125	@ 0x7d
 800e564:	f3c3 2107 	ubfx	r1, r3, #8, #8
 800e568:	f880 c038 	strb.w	ip, [r0, #56]	@ 0x38
 800e56c:	f880 5039 	strb.w	r5, [r0, #57]	@ 0x39
 800e570:	f1a1 007d 	sub.w	r0, r1, #125	@ 0x7d
 800e574:	3202      	adds	r2, #2
 800e576:	2801      	cmp	r0, #1
 800e578:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 800e57c:	f63f af60 	bhi.w	800e440 <uxr_write_framed_msg+0x74>
 800e580:	1c50      	adds	r0, r2, #1
 800e582:	18a5      	adds	r5, r4, r2
 800e584:	fa54 f080 	uxtab	r0, r4, r0
 800e588:	3202      	adds	r2, #2
 800e58a:	f081 0120 	eor.w	r1, r1, #32
 800e58e:	b2d2      	uxtb	r2, r2
 800e590:	f04f 0c7d 	mov.w	ip, #125	@ 0x7d
 800e594:	f885 c038 	strb.w	ip, [r5, #56]	@ 0x38
 800e598:	f880 1038 	strb.w	r1, [r0, #56]	@ 0x38
 800e59c:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 800e5a0:	2b00      	cmp	r3, #0
 800e5a2:	f47f af57 	bne.w	800e454 <uxr_write_framed_msg+0x88>
 800e5a6:	9301      	str	r3, [sp, #4]
 800e5a8:	4698      	mov	r8, r3
 800e5aa:	e779      	b.n	800e4a0 <uxr_write_framed_msg+0xd4>
 800e5ac:	2500      	movs	r5, #0
 800e5ae:	e001      	b.n	800e5b4 <uxr_write_framed_msg+0x1e8>
 800e5b0:	2800      	cmp	r0, #0
 800e5b2:	d090      	beq.n	800e4d6 <uxr_write_framed_msg+0x10a>
 800e5b4:	f105 0138 	add.w	r1, r5, #56	@ 0x38
 800e5b8:	1b52      	subs	r2, r2, r5
 800e5ba:	465b      	mov	r3, fp
 800e5bc:	4421      	add	r1, r4
 800e5be:	4638      	mov	r0, r7
 800e5c0:	47b0      	blx	r6
 800e5c2:	f894 2062 	ldrb.w	r2, [r4, #98]	@ 0x62
 800e5c6:	4405      	add	r5, r0
 800e5c8:	4295      	cmp	r5, r2
 800e5ca:	d3f1      	bcc.n	800e5b0 <uxr_write_framed_msg+0x1e4>
 800e5cc:	d183      	bne.n	800e4d6 <uxr_write_framed_msg+0x10a>
 800e5ce:	f04f 0300 	mov.w	r3, #0
 800e5d2:	f884 3062 	strb.w	r3, [r4, #98]	@ 0x62
 800e5d6:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800e5d8:	4543      	cmp	r3, r8
 800e5da:	d964      	bls.n	800e6a6 <uxr_write_framed_msg+0x2da>
 800e5dc:	f81a 3008 	ldrb.w	r3, [sl, r8]
 800e5e0:	f1a3 017d 	sub.w	r1, r3, #125	@ 0x7d
 800e5e4:	2901      	cmp	r1, #1
 800e5e6:	f04f 0200 	mov.w	r2, #0
 800e5ea:	f63f af3d 	bhi.w	800e468 <uxr_write_framed_msg+0x9c>
 800e5ee:	1c51      	adds	r1, r2, #1
 800e5f0:	b2c9      	uxtb	r1, r1
 800e5f2:	2929      	cmp	r1, #41	@ 0x29
 800e5f4:	d8da      	bhi.n	800e5ac <uxr_write_framed_msg+0x1e0>
 800e5f6:	18a0      	adds	r0, r4, r2
 800e5f8:	4421      	add	r1, r4
 800e5fa:	f04f 057d 	mov.w	r5, #125	@ 0x7d
 800e5fe:	3202      	adds	r2, #2
 800e600:	f880 5038 	strb.w	r5, [r0, #56]	@ 0x38
 800e604:	b2d2      	uxtb	r2, r2
 800e606:	f083 0020 	eor.w	r0, r3, #32
 800e60a:	f881 0038 	strb.w	r0, [r1, #56]	@ 0x38
 800e60e:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 800e612:	e733      	b.n	800e47c <uxr_write_framed_msg+0xb0>
 800e614:	18a1      	adds	r1, r4, r2
 800e616:	3201      	adds	r2, #1
 800e618:	4648      	mov	r0, r9
 800e61a:	b2d2      	uxtb	r2, r2
 800e61c:	f881 8038 	strb.w	r8, [r1, #56]	@ 0x38
 800e620:	f04f 0901 	mov.w	r9, #1
 800e624:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 800e628:	2800      	cmp	r0, #0
 800e62a:	f43f af7b 	beq.w	800e524 <uxr_write_framed_msg+0x158>
 800e62e:	2500      	movs	r5, #0
 800e630:	e002      	b.n	800e638 <uxr_write_framed_msg+0x26c>
 800e632:	2800      	cmp	r0, #0
 800e634:	f43f af4f 	beq.w	800e4d6 <uxr_write_framed_msg+0x10a>
 800e638:	f105 0138 	add.w	r1, r5, #56	@ 0x38
 800e63c:	1b52      	subs	r2, r2, r5
 800e63e:	465b      	mov	r3, fp
 800e640:	4421      	add	r1, r4
 800e642:	4638      	mov	r0, r7
 800e644:	47b0      	blx	r6
 800e646:	f894 2062 	ldrb.w	r2, [r4, #98]	@ 0x62
 800e64a:	4405      	add	r5, r0
 800e64c:	4295      	cmp	r5, r2
 800e64e:	d3f0      	bcc.n	800e632 <uxr_write_framed_msg+0x266>
 800e650:	f47f af41 	bne.w	800e4d6 <uxr_write_framed_msg+0x10a>
 800e654:	2300      	movs	r3, #0
 800e656:	f884 3062 	strb.w	r3, [r4, #98]	@ 0x62
 800e65a:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800e65c:	b298      	uxth	r0, r3
 800e65e:	b003      	add	sp, #12
 800e660:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e664:	217d      	movs	r1, #125	@ 0x7d
 800e666:	f082 0220 	eor.w	r2, r2, #32
 800e66a:	f884 1039 	strb.w	r1, [r4, #57]	@ 0x39
 800e66e:	f1a0 017d 	sub.w	r1, r0, #125	@ 0x7d
 800e672:	f884 203a 	strb.w	r2, [r4, #58]	@ 0x3a
 800e676:	2901      	cmp	r1, #1
 800e678:	f04f 0203 	mov.w	r2, #3
 800e67c:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 800e680:	d804      	bhi.n	800e68c <uxr_write_framed_msg+0x2c0>
 800e682:	4611      	mov	r1, r2
 800e684:	f04f 0c04 	mov.w	ip, #4
 800e688:	2205      	movs	r2, #5
 800e68a:	e752      	b.n	800e532 <uxr_write_framed_msg+0x166>
 800e68c:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800e68e:	f884 003b 	strb.w	r0, [r4, #59]	@ 0x3b
 800e692:	b2dd      	uxtb	r5, r3
 800e694:	f1a5 017d 	sub.w	r1, r5, #125	@ 0x7d
 800e698:	2204      	movs	r2, #4
 800e69a:	2901      	cmp	r1, #1
 800e69c:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 800e6a0:	f63f aec0 	bhi.w	800e424 <uxr_write_framed_msg+0x58>
 800e6a4:	e758      	b.n	800e558 <uxr_write_framed_msg+0x18c>
 800e6a6:	ea4f 2319 	mov.w	r3, r9, lsr #8
 800e6aa:	fa5f f889 	uxtb.w	r8, r9
 800e6ae:	9301      	str	r3, [sp, #4]
 800e6b0:	2200      	movs	r2, #0
 800e6b2:	e6f5      	b.n	800e4a0 <uxr_write_framed_msg+0xd4>
 800e6b4:	08017060 	.word	0x08017060

0800e6b8 <uxr_framing_read_transport>:
 800e6b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e6bc:	4604      	mov	r4, r0
 800e6be:	b083      	sub	sp, #12
 800e6c0:	461f      	mov	r7, r3
 800e6c2:	f8dd b034 	ldr.w	fp, [sp, #52]	@ 0x34
 800e6c6:	4689      	mov	r9, r1
 800e6c8:	4692      	mov	sl, r2
 800e6ca:	f000 fc89 	bl	800efe0 <uxr_millis>
 800e6ce:	f894 302c 	ldrb.w	r3, [r4, #44]	@ 0x2c
 800e6d2:	f894 602d 	ldrb.w	r6, [r4, #45]	@ 0x2d
 800e6d6:	42b3      	cmp	r3, r6
 800e6d8:	4680      	mov	r8, r0
 800e6da:	d061      	beq.n	800e7a0 <uxr_framing_read_transport+0xe8>
 800e6dc:	d81c      	bhi.n	800e718 <uxr_framing_read_transport+0x60>
 800e6de:	1e75      	subs	r5, r6, #1
 800e6e0:	1aed      	subs	r5, r5, r3
 800e6e2:	b2ed      	uxtb	r5, r5
 800e6e4:	2600      	movs	r6, #0
 800e6e6:	455d      	cmp	r5, fp
 800e6e8:	d81f      	bhi.n	800e72a <uxr_framing_read_transport+0x72>
 800e6ea:	19ab      	adds	r3, r5, r6
 800e6ec:	455b      	cmp	r3, fp
 800e6ee:	bf84      	itt	hi
 800e6f0:	ebab 0605 	subhi.w	r6, fp, r5
 800e6f4:	b2f6      	uxtbhi	r6, r6
 800e6f6:	b9ed      	cbnz	r5, 800e734 <uxr_framing_read_transport+0x7c>
 800e6f8:	f04f 0b00 	mov.w	fp, #0
 800e6fc:	f000 fc70 	bl	800efe0 <uxr_millis>
 800e700:	683b      	ldr	r3, [r7, #0]
 800e702:	eba0 0808 	sub.w	r8, r0, r8
 800e706:	eba3 0308 	sub.w	r3, r3, r8
 800e70a:	4658      	mov	r0, fp
 800e70c:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800e710:	603b      	str	r3, [r7, #0]
 800e712:	b003      	add	sp, #12
 800e714:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e718:	2e00      	cmp	r6, #0
 800e71a:	d049      	beq.n	800e7b0 <uxr_framing_read_transport+0xf8>
 800e71c:	f1c3 052a 	rsb	r5, r3, #42	@ 0x2a
 800e720:	b2ed      	uxtb	r5, r5
 800e722:	3e01      	subs	r6, #1
 800e724:	455d      	cmp	r5, fp
 800e726:	b2f6      	uxtb	r6, r6
 800e728:	d9df      	bls.n	800e6ea <uxr_framing_read_transport+0x32>
 800e72a:	fa5f f58b 	uxtb.w	r5, fp
 800e72e:	2600      	movs	r6, #0
 800e730:	2d00      	cmp	r5, #0
 800e732:	d0e1      	beq.n	800e6f8 <uxr_framing_read_transport+0x40>
 800e734:	f894 102c 	ldrb.w	r1, [r4, #44]	@ 0x2c
 800e738:	3102      	adds	r1, #2
 800e73a:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800e73c:	9300      	str	r3, [sp, #0]
 800e73e:	683b      	ldr	r3, [r7, #0]
 800e740:	4421      	add	r1, r4
 800e742:	462a      	mov	r2, r5
 800e744:	4650      	mov	r0, sl
 800e746:	47c8      	blx	r9
 800e748:	f894 302c 	ldrb.w	r3, [r4, #44]	@ 0x2c
 800e74c:	4a1a      	ldr	r2, [pc, #104]	@ (800e7b8 <uxr_framing_read_transport+0x100>)
 800e74e:	4403      	add	r3, r0
 800e750:	0859      	lsrs	r1, r3, #1
 800e752:	fba2 2101 	umull	r2, r1, r2, r1
 800e756:	0889      	lsrs	r1, r1, #2
 800e758:	222a      	movs	r2, #42	@ 0x2a
 800e75a:	fb02 3111 	mls	r1, r2, r1, r3
 800e75e:	4683      	mov	fp, r0
 800e760:	f884 102c 	strb.w	r1, [r4, #44]	@ 0x2c
 800e764:	2800      	cmp	r0, #0
 800e766:	d0c7      	beq.n	800e6f8 <uxr_framing_read_transport+0x40>
 800e768:	42a8      	cmp	r0, r5
 800e76a:	d1c7      	bne.n	800e6fc <uxr_framing_read_transport+0x44>
 800e76c:	2e00      	cmp	r6, #0
 800e76e:	d0c5      	beq.n	800e6fc <uxr_framing_read_transport+0x44>
 800e770:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800e772:	9300      	str	r3, [sp, #0]
 800e774:	3102      	adds	r1, #2
 800e776:	4632      	mov	r2, r6
 800e778:	4421      	add	r1, r4
 800e77a:	2300      	movs	r3, #0
 800e77c:	4650      	mov	r0, sl
 800e77e:	47c8      	blx	r9
 800e780:	f894 102c 	ldrb.w	r1, [r4, #44]	@ 0x2c
 800e784:	4a0c      	ldr	r2, [pc, #48]	@ (800e7b8 <uxr_framing_read_transport+0x100>)
 800e786:	180b      	adds	r3, r1, r0
 800e788:	0859      	lsrs	r1, r3, #1
 800e78a:	fba2 1201 	umull	r1, r2, r2, r1
 800e78e:	0892      	lsrs	r2, r2, #2
 800e790:	212a      	movs	r1, #42	@ 0x2a
 800e792:	fb01 3312 	mls	r3, r1, r2, r3
 800e796:	eb00 0b05 	add.w	fp, r0, r5
 800e79a:	f884 302c 	strb.w	r3, [r4, #44]	@ 0x2c
 800e79e:	e7ad      	b.n	800e6fc <uxr_framing_read_transport+0x44>
 800e7a0:	2600      	movs	r6, #0
 800e7a2:	f1bb 0f28 	cmp.w	fp, #40	@ 0x28
 800e7a6:	85a6      	strh	r6, [r4, #44]	@ 0x2c
 800e7a8:	d9bf      	bls.n	800e72a <uxr_framing_read_transport+0x72>
 800e7aa:	2102      	movs	r1, #2
 800e7ac:	2529      	movs	r5, #41	@ 0x29
 800e7ae:	e7c4      	b.n	800e73a <uxr_framing_read_transport+0x82>
 800e7b0:	f1c3 0529 	rsb	r5, r3, #41	@ 0x29
 800e7b4:	b2ed      	uxtb	r5, r5
 800e7b6:	e796      	b.n	800e6e6 <uxr_framing_read_transport+0x2e>
 800e7b8:	30c30c31 	.word	0x30c30c31

0800e7bc <uxr_read_framed_msg>:
 800e7bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e7c0:	461e      	mov	r6, r3
 800e7c2:	f890 502c 	ldrb.w	r5, [r0, #44]	@ 0x2c
 800e7c6:	f890 302d 	ldrb.w	r3, [r0, #45]	@ 0x2d
 800e7ca:	429d      	cmp	r5, r3
 800e7cc:	b083      	sub	sp, #12
 800e7ce:	4604      	mov	r4, r0
 800e7d0:	4688      	mov	r8, r1
 800e7d2:	4691      	mov	r9, r2
 800e7d4:	f000 8188 	beq.w	800eae8 <uxr_read_framed_msg+0x32c>
 800e7d8:	7823      	ldrb	r3, [r4, #0]
 800e7da:	4dc1      	ldr	r5, [pc, #772]	@ (800eae0 <uxr_read_framed_msg+0x324>)
 800e7dc:	4fc1      	ldr	r7, [pc, #772]	@ (800eae4 <uxr_read_framed_msg+0x328>)
 800e7de:	2b07      	cmp	r3, #7
 800e7e0:	d8fd      	bhi.n	800e7de <uxr_read_framed_msg+0x22>
 800e7e2:	e8df f013 	tbh	[pc, r3, lsl #1]
 800e7e6:	0115      	.short	0x0115
 800e7e8:	00d600f6 	.word	0x00d600f6
 800e7ec:	009000b9 	.word	0x009000b9
 800e7f0:	0030004d 	.word	0x0030004d
 800e7f4:	0008      	.short	0x0008
 800e7f6:	f894 102c 	ldrb.w	r1, [r4, #44]	@ 0x2c
 800e7fa:	f894 302d 	ldrb.w	r3, [r4, #45]	@ 0x2d
 800e7fe:	4299      	cmp	r1, r3
 800e800:	f000 814a 	beq.w	800ea98 <uxr_read_framed_msg+0x2dc>
 800e804:	18e2      	adds	r2, r4, r3
 800e806:	7892      	ldrb	r2, [r2, #2]
 800e808:	2a7d      	cmp	r2, #125	@ 0x7d
 800e80a:	f000 8199 	beq.w	800eb40 <uxr_read_framed_msg+0x384>
 800e80e:	3301      	adds	r3, #1
 800e810:	0858      	lsrs	r0, r3, #1
 800e812:	fba5 1000 	umull	r1, r0, r5, r0
 800e816:	0880      	lsrs	r0, r0, #2
 800e818:	212a      	movs	r1, #42	@ 0x2a
 800e81a:	fb01 3310 	mls	r3, r1, r0, r3
 800e81e:	2a7e      	cmp	r2, #126	@ 0x7e
 800e820:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 800e824:	f000 8252 	beq.w	800eccc <uxr_read_framed_msg+0x510>
 800e828:	8ea3      	ldrh	r3, [r4, #52]	@ 0x34
 800e82a:	8ee1      	ldrh	r1, [r4, #54]	@ 0x36
 800e82c:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 800e830:	b29b      	uxth	r3, r3
 800e832:	2200      	movs	r2, #0
 800e834:	4299      	cmp	r1, r3
 800e836:	86a3      	strh	r3, [r4, #52]	@ 0x34
 800e838:	7022      	strb	r2, [r4, #0]
 800e83a:	f000 8179 	beq.w	800eb30 <uxr_read_framed_msg+0x374>
 800e83e:	2000      	movs	r0, #0
 800e840:	b003      	add	sp, #12
 800e842:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e846:	f894 102c 	ldrb.w	r1, [r4, #44]	@ 0x2c
 800e84a:	f894 302d 	ldrb.w	r3, [r4, #45]	@ 0x2d
 800e84e:	4299      	cmp	r1, r3
 800e850:	f000 8131 	beq.w	800eab6 <uxr_read_framed_msg+0x2fa>
 800e854:	18e2      	adds	r2, r4, r3
 800e856:	7890      	ldrb	r0, [r2, #2]
 800e858:	287d      	cmp	r0, #125	@ 0x7d
 800e85a:	f000 8190 	beq.w	800eb7e <uxr_read_framed_msg+0x3c2>
 800e85e:	3301      	adds	r3, #1
 800e860:	085a      	lsrs	r2, r3, #1
 800e862:	fba5 1202 	umull	r1, r2, r5, r2
 800e866:	0892      	lsrs	r2, r2, #2
 800e868:	212a      	movs	r1, #42	@ 0x2a
 800e86a:	fb01 3312 	mls	r3, r1, r2, r3
 800e86e:	287e      	cmp	r0, #126	@ 0x7e
 800e870:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 800e874:	f000 821a 	beq.w	800ecac <uxr_read_framed_msg+0x4f0>
 800e878:	2307      	movs	r3, #7
 800e87a:	86a0      	strh	r0, [r4, #52]	@ 0x34
 800e87c:	7023      	strb	r3, [r4, #0]
 800e87e:	e7ae      	b.n	800e7de <uxr_read_framed_msg+0x22>
 800e880:	8e63      	ldrh	r3, [r4, #50]	@ 0x32
 800e882:	f8b4 e030 	ldrh.w	lr, [r4, #48]	@ 0x30
 800e886:	459e      	cmp	lr, r3
 800e888:	d938      	bls.n	800e8fc <uxr_read_framed_msg+0x140>
 800e88a:	ee07 8a90 	vmov	s15, r8
 800e88e:	212a      	movs	r1, #42	@ 0x2a
 800e890:	e020      	b.n	800e8d4 <uxr_read_framed_msg+0x118>
 800e892:	f89b c002 	ldrb.w	ip, [fp, #2]
 800e896:	f1bc 0f7d 	cmp.w	ip, #125	@ 0x7d
 800e89a:	f000 80d4 	beq.w	800ea46 <uxr_read_framed_msg+0x28a>
 800e89e:	f1bc 0f7e 	cmp.w	ip, #126	@ 0x7e
 800e8a2:	f884 202d 	strb.w	r2, [r4, #45]	@ 0x2d
 800e8a6:	f000 8219 	beq.w	800ecdc <uxr_read_framed_msg+0x520>
 800e8aa:	f806 c003 	strb.w	ip, [r6, r3]
 800e8ae:	f8b4 a036 	ldrh.w	sl, [r4, #54]	@ 0x36
 800e8b2:	8e63      	ldrh	r3, [r4, #50]	@ 0x32
 800e8b4:	f8b4 e030 	ldrh.w	lr, [r4, #48]	@ 0x30
 800e8b8:	ea8a 000c 	eor.w	r0, sl, ip
 800e8bc:	b2c0      	uxtb	r0, r0
 800e8be:	3301      	adds	r3, #1
 800e8c0:	f837 2010 	ldrh.w	r2, [r7, r0, lsl #1]
 800e8c4:	b29b      	uxth	r3, r3
 800e8c6:	ea82 221a 	eor.w	r2, r2, sl, lsr #8
 800e8ca:	4573      	cmp	r3, lr
 800e8cc:	8663      	strh	r3, [r4, #50]	@ 0x32
 800e8ce:	86e2      	strh	r2, [r4, #54]	@ 0x36
 800e8d0:	f080 8120 	bcs.w	800eb14 <uxr_read_framed_msg+0x358>
 800e8d4:	f894 002d 	ldrb.w	r0, [r4, #45]	@ 0x2d
 800e8d8:	f894 a02c 	ldrb.w	sl, [r4, #44]	@ 0x2c
 800e8dc:	f100 0c01 	add.w	ip, r0, #1
 800e8e0:	ea4f 025c 	mov.w	r2, ip, lsr #1
 800e8e4:	fba5 8202 	umull	r8, r2, r5, r2
 800e8e8:	0892      	lsrs	r2, r2, #2
 800e8ea:	4582      	cmp	sl, r0
 800e8ec:	eb04 0b00 	add.w	fp, r4, r0
 800e8f0:	fb01 c212 	mls	r2, r1, r2, ip
 800e8f4:	d1cd      	bne.n	800e892 <uxr_read_framed_msg+0xd6>
 800e8f6:	ee17 8a90 	vmov	r8, s15
 800e8fa:	459e      	cmp	lr, r3
 800e8fc:	f040 8111 	bne.w	800eb22 <uxr_read_framed_msg+0x366>
 800e900:	2306      	movs	r3, #6
 800e902:	7023      	strb	r3, [r4, #0]
 800e904:	e76b      	b.n	800e7de <uxr_read_framed_msg+0x22>
 800e906:	f894 002c 	ldrb.w	r0, [r4, #44]	@ 0x2c
 800e90a:	f894 302d 	ldrb.w	r3, [r4, #45]	@ 0x2d
 800e90e:	4298      	cmp	r0, r3
 800e910:	f000 80c2 	beq.w	800ea98 <uxr_read_framed_msg+0x2dc>
 800e914:	18e2      	adds	r2, r4, r3
 800e916:	7891      	ldrb	r1, [r2, #2]
 800e918:	297d      	cmp	r1, #125	@ 0x7d
 800e91a:	f000 814c 	beq.w	800ebb6 <uxr_read_framed_msg+0x3fa>
 800e91e:	3301      	adds	r3, #1
 800e920:	085a      	lsrs	r2, r3, #1
 800e922:	fba5 0202 	umull	r0, r2, r5, r2
 800e926:	0892      	lsrs	r2, r2, #2
 800e928:	202a      	movs	r0, #42	@ 0x2a
 800e92a:	fb00 3312 	mls	r3, r0, r2, r3
 800e92e:	297e      	cmp	r1, #126	@ 0x7e
 800e930:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 800e934:	f000 81ca 	beq.w	800eccc <uxr_read_framed_msg+0x510>
 800e938:	8e23      	ldrh	r3, [r4, #48]	@ 0x30
 800e93a:	eb03 2301 	add.w	r3, r3, r1, lsl #8
 800e93e:	990c      	ldr	r1, [sp, #48]	@ 0x30
 800e940:	b29b      	uxth	r3, r3
 800e942:	2000      	movs	r0, #0
 800e944:	428b      	cmp	r3, r1
 800e946:	8623      	strh	r3, [r4, #48]	@ 0x30
 800e948:	8660      	strh	r0, [r4, #50]	@ 0x32
 800e94a:	86e0      	strh	r0, [r4, #54]	@ 0x36
 800e94c:	f240 80df 	bls.w	800eb0e <uxr_read_framed_msg+0x352>
 800e950:	7020      	strb	r0, [r4, #0]
 800e952:	b003      	add	sp, #12
 800e954:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e958:	f894 102c 	ldrb.w	r1, [r4, #44]	@ 0x2c
 800e95c:	f894 302d 	ldrb.w	r3, [r4, #45]	@ 0x2d
 800e960:	4299      	cmp	r1, r3
 800e962:	f000 80a8 	beq.w	800eab6 <uxr_read_framed_msg+0x2fa>
 800e966:	18e2      	adds	r2, r4, r3
 800e968:	7890      	ldrb	r0, [r2, #2]
 800e96a:	287d      	cmp	r0, #125	@ 0x7d
 800e96c:	f000 8164 	beq.w	800ec38 <uxr_read_framed_msg+0x47c>
 800e970:	3301      	adds	r3, #1
 800e972:	085a      	lsrs	r2, r3, #1
 800e974:	fba5 1202 	umull	r1, r2, r5, r2
 800e978:	0892      	lsrs	r2, r2, #2
 800e97a:	212a      	movs	r1, #42	@ 0x2a
 800e97c:	fb01 3312 	mls	r3, r1, r2, r3
 800e980:	287e      	cmp	r0, #126	@ 0x7e
 800e982:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 800e986:	f000 8191 	beq.w	800ecac <uxr_read_framed_msg+0x4f0>
 800e98a:	2304      	movs	r3, #4
 800e98c:	8620      	strh	r0, [r4, #48]	@ 0x30
 800e98e:	7023      	strb	r3, [r4, #0]
 800e990:	e725      	b.n	800e7de <uxr_read_framed_msg+0x22>
 800e992:	f894 002c 	ldrb.w	r0, [r4, #44]	@ 0x2c
 800e996:	f894 202d 	ldrb.w	r2, [r4, #45]	@ 0x2d
 800e99a:	4290      	cmp	r0, r2
 800e99c:	f000 80b3 	beq.w	800eb06 <uxr_read_framed_msg+0x34a>
 800e9a0:	18a3      	adds	r3, r4, r2
 800e9a2:	7899      	ldrb	r1, [r3, #2]
 800e9a4:	297d      	cmp	r1, #125	@ 0x7d
 800e9a6:	f000 8164 	beq.w	800ec72 <uxr_read_framed_msg+0x4b6>
 800e9aa:	3201      	adds	r2, #1
 800e9ac:	0850      	lsrs	r0, r2, #1
 800e9ae:	fba5 3000 	umull	r3, r0, r5, r0
 800e9b2:	0880      	lsrs	r0, r0, #2
 800e9b4:	232a      	movs	r3, #42	@ 0x2a
 800e9b6:	fb03 2210 	mls	r2, r3, r0, r2
 800e9ba:	297e      	cmp	r1, #126	@ 0x7e
 800e9bc:	f884 202d 	strb.w	r2, [r4, #45]	@ 0x2d
 800e9c0:	f000 8188 	beq.w	800ecd4 <uxr_read_framed_msg+0x518>
 800e9c4:	7863      	ldrb	r3, [r4, #1]
 800e9c6:	428b      	cmp	r3, r1
 800e9c8:	bf0c      	ite	eq
 800e9ca:	2303      	moveq	r3, #3
 800e9cc:	2300      	movne	r3, #0
 800e9ce:	7023      	strb	r3, [r4, #0]
 800e9d0:	e705      	b.n	800e7de <uxr_read_framed_msg+0x22>
 800e9d2:	f894 102c 	ldrb.w	r1, [r4, #44]	@ 0x2c
 800e9d6:	f894 302d 	ldrb.w	r3, [r4, #45]	@ 0x2d
 800e9da:	2200      	movs	r2, #0
 800e9dc:	4299      	cmp	r1, r3
 800e9de:	f884 202e 	strb.w	r2, [r4, #46]	@ 0x2e
 800e9e2:	d06c      	beq.n	800eabe <uxr_read_framed_msg+0x302>
 800e9e4:	18e2      	adds	r2, r4, r3
 800e9e6:	7890      	ldrb	r0, [r2, #2]
 800e9e8:	287d      	cmp	r0, #125	@ 0x7d
 800e9ea:	f000 8101 	beq.w	800ebf0 <uxr_read_framed_msg+0x434>
 800e9ee:	3301      	adds	r3, #1
 800e9f0:	085a      	lsrs	r2, r3, #1
 800e9f2:	fba5 1202 	umull	r1, r2, r5, r2
 800e9f6:	0892      	lsrs	r2, r2, #2
 800e9f8:	212a      	movs	r1, #42	@ 0x2a
 800e9fa:	fb01 3312 	mls	r3, r1, r2, r3
 800e9fe:	287e      	cmp	r0, #126	@ 0x7e
 800ea00:	f884 002e 	strb.w	r0, [r4, #46]	@ 0x2e
 800ea04:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 800ea08:	d059      	beq.n	800eabe <uxr_read_framed_msg+0x302>
 800ea0a:	2302      	movs	r3, #2
 800ea0c:	7023      	strb	r3, [r4, #0]
 800ea0e:	e6e6      	b.n	800e7de <uxr_read_framed_msg+0x22>
 800ea10:	f894 a02c 	ldrb.w	sl, [r4, #44]	@ 0x2c
 800ea14:	f894 202d 	ldrb.w	r2, [r4, #45]	@ 0x2d
 800ea18:	f04f 0e2a 	mov.w	lr, #42	@ 0x2a
 800ea1c:	1c51      	adds	r1, r2, #1
 800ea1e:	084b      	lsrs	r3, r1, #1
 800ea20:	fba5 c303 	umull	ip, r3, r5, r3
 800ea24:	089b      	lsrs	r3, r3, #2
 800ea26:	fb0e 1313 	mls	r3, lr, r3, r1
 800ea2a:	4592      	cmp	sl, r2
 800ea2c:	eb04 0002 	add.w	r0, r4, r2
 800ea30:	b2da      	uxtb	r2, r3
 800ea32:	f43f af04 	beq.w	800e83e <uxr_read_framed_msg+0x82>
 800ea36:	7883      	ldrb	r3, [r0, #2]
 800ea38:	f884 202d 	strb.w	r2, [r4, #45]	@ 0x2d
 800ea3c:	2b7e      	cmp	r3, #126	@ 0x7e
 800ea3e:	d1ed      	bne.n	800ea1c <uxr_read_framed_msg+0x260>
 800ea40:	2301      	movs	r3, #1
 800ea42:	7023      	strb	r3, [r4, #0]
 800ea44:	e6cb      	b.n	800e7de <uxr_read_framed_msg+0x22>
 800ea46:	f100 0c01 	add.w	ip, r0, #1
 800ea4a:	ea4f 025c 	mov.w	r2, ip, lsr #1
 800ea4e:	fba5 8202 	umull	r8, r2, r5, r2
 800ea52:	0892      	lsrs	r2, r2, #2
 800ea54:	fb01 c212 	mls	r2, r1, r2, ip
 800ea58:	eb04 0c02 	add.w	ip, r4, r2
 800ea5c:	b2d2      	uxtb	r2, r2
 800ea5e:	4592      	cmp	sl, r2
 800ea60:	f100 0002 	add.w	r0, r0, #2
 800ea64:	f43f af47 	beq.w	800e8f6 <uxr_read_framed_msg+0x13a>
 800ea68:	0842      	lsrs	r2, r0, #1
 800ea6a:	f89c a002 	ldrb.w	sl, [ip, #2]
 800ea6e:	fba5 8202 	umull	r8, r2, r5, r2
 800ea72:	0892      	lsrs	r2, r2, #2
 800ea74:	fb01 0012 	mls	r0, r1, r2, r0
 800ea78:	f1ba 0f7e 	cmp.w	sl, #126	@ 0x7e
 800ea7c:	f08a 0c20 	eor.w	ip, sl, #32
 800ea80:	f884 002d 	strb.w	r0, [r4, #45]	@ 0x2d
 800ea84:	f47f af11 	bne.w	800e8aa <uxr_read_framed_msg+0xee>
 800ea88:	459e      	cmp	lr, r3
 800ea8a:	ee17 8a90 	vmov	r8, s15
 800ea8e:	f43f af37 	beq.w	800e900 <uxr_read_framed_msg+0x144>
 800ea92:	2301      	movs	r3, #1
 800ea94:	7023      	strb	r3, [r4, #0]
 800ea96:	e6a2      	b.n	800e7de <uxr_read_framed_msg+0x22>
 800ea98:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800ea9a:	9300      	str	r3, [sp, #0]
 800ea9c:	2301      	movs	r3, #1
 800ea9e:	9301      	str	r3, [sp, #4]
 800eaa0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800eaa2:	464a      	mov	r2, r9
 800eaa4:	4641      	mov	r1, r8
 800eaa6:	4620      	mov	r0, r4
 800eaa8:	f7ff fe06 	bl	800e6b8 <uxr_framing_read_transport>
 800eaac:	2800      	cmp	r0, #0
 800eaae:	f43f aec6 	beq.w	800e83e <uxr_read_framed_msg+0x82>
 800eab2:	7823      	ldrb	r3, [r4, #0]
 800eab4:	e693      	b.n	800e7de <uxr_read_framed_msg+0x22>
 800eab6:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800eab8:	9300      	str	r3, [sp, #0]
 800eaba:	2302      	movs	r3, #2
 800eabc:	e7ef      	b.n	800ea9e <uxr_read_framed_msg+0x2e2>
 800eabe:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800eac0:	9300      	str	r3, [sp, #0]
 800eac2:	2304      	movs	r3, #4
 800eac4:	9301      	str	r3, [sp, #4]
 800eac6:	464a      	mov	r2, r9
 800eac8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800eaca:	4641      	mov	r1, r8
 800eacc:	4620      	mov	r0, r4
 800eace:	f7ff fdf3 	bl	800e6b8 <uxr_framing_read_transport>
 800ead2:	2800      	cmp	r0, #0
 800ead4:	d1ed      	bne.n	800eab2 <uxr_read_framed_msg+0x2f6>
 800ead6:	f894 302e 	ldrb.w	r3, [r4, #46]	@ 0x2e
 800eada:	2b7e      	cmp	r3, #126	@ 0x7e
 800eadc:	d0e9      	beq.n	800eab2 <uxr_read_framed_msg+0x2f6>
 800eade:	e6ae      	b.n	800e83e <uxr_read_framed_msg+0x82>
 800eae0:	30c30c31 	.word	0x30c30c31
 800eae4:	08017060 	.word	0x08017060
 800eae8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800eaea:	9300      	str	r3, [sp, #0]
 800eaec:	2305      	movs	r3, #5
 800eaee:	9301      	str	r3, [sp, #4]
 800eaf0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800eaf2:	f7ff fde1 	bl	800e6b8 <uxr_framing_read_transport>
 800eaf6:	f894 202d 	ldrb.w	r2, [r4, #45]	@ 0x2d
 800eafa:	f894 302c 	ldrb.w	r3, [r4, #44]	@ 0x2c
 800eafe:	429a      	cmp	r2, r3
 800eb00:	f43f ae9d 	beq.w	800e83e <uxr_read_framed_msg+0x82>
 800eb04:	e668      	b.n	800e7d8 <uxr_read_framed_msg+0x1c>
 800eb06:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800eb08:	9300      	str	r3, [sp, #0]
 800eb0a:	2303      	movs	r3, #3
 800eb0c:	e7c7      	b.n	800ea9e <uxr_read_framed_msg+0x2e2>
 800eb0e:	2305      	movs	r3, #5
 800eb10:	7023      	strb	r3, [r4, #0]
 800eb12:	e664      	b.n	800e7de <uxr_read_framed_msg+0x22>
 800eb14:	ee17 8a90 	vmov	r8, s15
 800eb18:	f43f aef2 	beq.w	800e900 <uxr_read_framed_msg+0x144>
 800eb1c:	f1bc 0f7e 	cmp.w	ip, #126	@ 0x7e
 800eb20:	d08e      	beq.n	800ea40 <uxr_read_framed_msg+0x284>
 800eb22:	ebae 0303 	sub.w	r3, lr, r3
 800eb26:	3302      	adds	r3, #2
 800eb28:	9301      	str	r3, [sp, #4]
 800eb2a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800eb2c:	9300      	str	r3, [sp, #0]
 800eb2e:	e7b7      	b.n	800eaa0 <uxr_read_framed_msg+0x2e4>
 800eb30:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800eb32:	f894 302e 	ldrb.w	r3, [r4, #46]	@ 0x2e
 800eb36:	7013      	strb	r3, [r2, #0]
 800eb38:	8e20      	ldrh	r0, [r4, #48]	@ 0x30
 800eb3a:	b003      	add	sp, #12
 800eb3c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800eb40:	f103 0c01 	add.w	ip, r3, #1
 800eb44:	ea4f 025c 	mov.w	r2, ip, lsr #1
 800eb48:	fba5 0202 	umull	r0, r2, r5, r2
 800eb4c:	0892      	lsrs	r2, r2, #2
 800eb4e:	202a      	movs	r0, #42	@ 0x2a
 800eb50:	fb00 c212 	mls	r2, r0, r2, ip
 800eb54:	fa5f fc82 	uxtb.w	ip, r2
 800eb58:	4561      	cmp	r1, ip
 800eb5a:	d09d      	beq.n	800ea98 <uxr_read_framed_msg+0x2dc>
 800eb5c:	3302      	adds	r3, #2
 800eb5e:	4422      	add	r2, r4
 800eb60:	0859      	lsrs	r1, r3, #1
 800eb62:	7892      	ldrb	r2, [r2, #2]
 800eb64:	fba5 c101 	umull	ip, r1, r5, r1
 800eb68:	0889      	lsrs	r1, r1, #2
 800eb6a:	fb00 3311 	mls	r3, r0, r1, r3
 800eb6e:	2a7e      	cmp	r2, #126	@ 0x7e
 800eb70:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 800eb74:	f000 80aa 	beq.w	800eccc <uxr_read_framed_msg+0x510>
 800eb78:	f082 0220 	eor.w	r2, r2, #32
 800eb7c:	e654      	b.n	800e828 <uxr_read_framed_msg+0x6c>
 800eb7e:	1c58      	adds	r0, r3, #1
 800eb80:	0842      	lsrs	r2, r0, #1
 800eb82:	fba5 c202 	umull	ip, r2, r5, r2
 800eb86:	0892      	lsrs	r2, r2, #2
 800eb88:	f04f 0c2a 	mov.w	ip, #42	@ 0x2a
 800eb8c:	fb0c 0212 	mls	r2, ip, r2, r0
 800eb90:	b2d0      	uxtb	r0, r2
 800eb92:	4281      	cmp	r1, r0
 800eb94:	d08f      	beq.n	800eab6 <uxr_read_framed_msg+0x2fa>
 800eb96:	4422      	add	r2, r4
 800eb98:	3302      	adds	r3, #2
 800eb9a:	7890      	ldrb	r0, [r2, #2]
 800eb9c:	085a      	lsrs	r2, r3, #1
 800eb9e:	fba5 1202 	umull	r1, r2, r5, r2
 800eba2:	0892      	lsrs	r2, r2, #2
 800eba4:	fb0c 3312 	mls	r3, ip, r2, r3
 800eba8:	287e      	cmp	r0, #126	@ 0x7e
 800ebaa:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 800ebae:	d07d      	beq.n	800ecac <uxr_read_framed_msg+0x4f0>
 800ebb0:	f080 0020 	eor.w	r0, r0, #32
 800ebb4:	e660      	b.n	800e878 <uxr_read_framed_msg+0xbc>
 800ebb6:	1c59      	adds	r1, r3, #1
 800ebb8:	084a      	lsrs	r2, r1, #1
 800ebba:	fba5 c202 	umull	ip, r2, r5, r2
 800ebbe:	0892      	lsrs	r2, r2, #2
 800ebc0:	f04f 0c2a 	mov.w	ip, #42	@ 0x2a
 800ebc4:	fb0c 1212 	mls	r2, ip, r2, r1
 800ebc8:	b2d1      	uxtb	r1, r2
 800ebca:	4288      	cmp	r0, r1
 800ebcc:	f43f af64 	beq.w	800ea98 <uxr_read_framed_msg+0x2dc>
 800ebd0:	4422      	add	r2, r4
 800ebd2:	3302      	adds	r3, #2
 800ebd4:	7891      	ldrb	r1, [r2, #2]
 800ebd6:	085a      	lsrs	r2, r3, #1
 800ebd8:	fba5 0202 	umull	r0, r2, r5, r2
 800ebdc:	0892      	lsrs	r2, r2, #2
 800ebde:	fb0c 3312 	mls	r3, ip, r2, r3
 800ebe2:	297e      	cmp	r1, #126	@ 0x7e
 800ebe4:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 800ebe8:	d070      	beq.n	800eccc <uxr_read_framed_msg+0x510>
 800ebea:	f081 0120 	eor.w	r1, r1, #32
 800ebee:	e6a3      	b.n	800e938 <uxr_read_framed_msg+0x17c>
 800ebf0:	f103 0c01 	add.w	ip, r3, #1
 800ebf4:	ea4f 025c 	mov.w	r2, ip, lsr #1
 800ebf8:	fba5 0202 	umull	r0, r2, r5, r2
 800ebfc:	0892      	lsrs	r2, r2, #2
 800ebfe:	202a      	movs	r0, #42	@ 0x2a
 800ec00:	fb00 c212 	mls	r2, r0, r2, ip
 800ec04:	fa5f fc82 	uxtb.w	ip, r2
 800ec08:	4561      	cmp	r1, ip
 800ec0a:	f43f af58 	beq.w	800eabe <uxr_read_framed_msg+0x302>
 800ec0e:	4422      	add	r2, r4
 800ec10:	3302      	adds	r3, #2
 800ec12:	7891      	ldrb	r1, [r2, #2]
 800ec14:	f884 102e 	strb.w	r1, [r4, #46]	@ 0x2e
 800ec18:	085a      	lsrs	r2, r3, #1
 800ec1a:	fba5 c202 	umull	ip, r2, r5, r2
 800ec1e:	0892      	lsrs	r2, r2, #2
 800ec20:	fb00 3312 	mls	r3, r0, r2, r3
 800ec24:	297e      	cmp	r1, #126	@ 0x7e
 800ec26:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 800ec2a:	f43f af48 	beq.w	800eabe <uxr_read_framed_msg+0x302>
 800ec2e:	f081 0120 	eor.w	r1, r1, #32
 800ec32:	f884 102e 	strb.w	r1, [r4, #46]	@ 0x2e
 800ec36:	e6e8      	b.n	800ea0a <uxr_read_framed_msg+0x24e>
 800ec38:	1c58      	adds	r0, r3, #1
 800ec3a:	0842      	lsrs	r2, r0, #1
 800ec3c:	fba5 c202 	umull	ip, r2, r5, r2
 800ec40:	0892      	lsrs	r2, r2, #2
 800ec42:	f04f 0c2a 	mov.w	ip, #42	@ 0x2a
 800ec46:	fb0c 0212 	mls	r2, ip, r2, r0
 800ec4a:	b2d0      	uxtb	r0, r2
 800ec4c:	4281      	cmp	r1, r0
 800ec4e:	f43f af32 	beq.w	800eab6 <uxr_read_framed_msg+0x2fa>
 800ec52:	4422      	add	r2, r4
 800ec54:	3302      	adds	r3, #2
 800ec56:	7890      	ldrb	r0, [r2, #2]
 800ec58:	085a      	lsrs	r2, r3, #1
 800ec5a:	fba5 1202 	umull	r1, r2, r5, r2
 800ec5e:	0892      	lsrs	r2, r2, #2
 800ec60:	fb0c 3312 	mls	r3, ip, r2, r3
 800ec64:	287e      	cmp	r0, #126	@ 0x7e
 800ec66:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 800ec6a:	d01f      	beq.n	800ecac <uxr_read_framed_msg+0x4f0>
 800ec6c:	f080 0020 	eor.w	r0, r0, #32
 800ec70:	e68b      	b.n	800e98a <uxr_read_framed_msg+0x1ce>
 800ec72:	1c51      	adds	r1, r2, #1
 800ec74:	084b      	lsrs	r3, r1, #1
 800ec76:	fba5 c303 	umull	ip, r3, r5, r3
 800ec7a:	089b      	lsrs	r3, r3, #2
 800ec7c:	f04f 0c2a 	mov.w	ip, #42	@ 0x2a
 800ec80:	fb0c 1313 	mls	r3, ip, r3, r1
 800ec84:	b2d9      	uxtb	r1, r3
 800ec86:	4288      	cmp	r0, r1
 800ec88:	f43f af3d 	beq.w	800eb06 <uxr_read_framed_msg+0x34a>
 800ec8c:	3202      	adds	r2, #2
 800ec8e:	4423      	add	r3, r4
 800ec90:	0850      	lsrs	r0, r2, #1
 800ec92:	789b      	ldrb	r3, [r3, #2]
 800ec94:	fba5 1000 	umull	r1, r0, r5, r0
 800ec98:	0880      	lsrs	r0, r0, #2
 800ec9a:	fb0c 2210 	mls	r2, ip, r0, r2
 800ec9e:	2b7e      	cmp	r3, #126	@ 0x7e
 800eca0:	f884 202d 	strb.w	r2, [r4, #45]	@ 0x2d
 800eca4:	d016      	beq.n	800ecd4 <uxr_read_framed_msg+0x518>
 800eca6:	f083 0120 	eor.w	r1, r3, #32
 800ecaa:	e68b      	b.n	800e9c4 <uxr_read_framed_msg+0x208>
 800ecac:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800ecae:	9300      	str	r3, [sp, #0]
 800ecb0:	2302      	movs	r3, #2
 800ecb2:	9301      	str	r3, [sp, #4]
 800ecb4:	464a      	mov	r2, r9
 800ecb6:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800ecb8:	4641      	mov	r1, r8
 800ecba:	4620      	mov	r0, r4
 800ecbc:	f7ff fcfc 	bl	800e6b8 <uxr_framing_read_transport>
 800ecc0:	2800      	cmp	r0, #0
 800ecc2:	f47f aef6 	bne.w	800eab2 <uxr_read_framed_msg+0x2f6>
 800ecc6:	2301      	movs	r3, #1
 800ecc8:	7023      	strb	r3, [r4, #0]
 800ecca:	e588      	b.n	800e7de <uxr_read_framed_msg+0x22>
 800eccc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800ecce:	9300      	str	r3, [sp, #0]
 800ecd0:	2301      	movs	r3, #1
 800ecd2:	e7ee      	b.n	800ecb2 <uxr_read_framed_msg+0x4f6>
 800ecd4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800ecd6:	9300      	str	r3, [sp, #0]
 800ecd8:	2303      	movs	r3, #3
 800ecda:	e7ea      	b.n	800ecb2 <uxr_read_framed_msg+0x4f6>
 800ecdc:	ee17 8a90 	vmov	r8, s15
 800ece0:	e6ae      	b.n	800ea40 <uxr_read_framed_msg+0x284>
 800ece2:	bf00      	nop

0800ece4 <uxr_stream_id>:
 800ece4:	2901      	cmp	r1, #1
 800ece6:	b082      	sub	sp, #8
 800ece8:	d01d      	beq.n	800ed26 <uxr_stream_id+0x42>
 800ecea:	2902      	cmp	r1, #2
 800ecec:	f04f 0c00 	mov.w	ip, #0
 800ecf0:	d01e      	beq.n	800ed30 <uxr_stream_id+0x4c>
 800ecf2:	2300      	movs	r3, #0
 800ecf4:	f36c 0307 	bfi	r3, ip, #0, #8
 800ecf8:	f360 230f 	bfi	r3, r0, #8, #8
 800ecfc:	f361 4317 	bfi	r3, r1, #16, #8
 800ed00:	f362 631f 	bfi	r3, r2, #24, #8
 800ed04:	b2da      	uxtb	r2, r3
 800ed06:	2000      	movs	r0, #0
 800ed08:	f362 0007 	bfi	r0, r2, #0, #8
 800ed0c:	f3c3 2207 	ubfx	r2, r3, #8, #8
 800ed10:	f362 200f 	bfi	r0, r2, #8, #8
 800ed14:	f3c3 4207 	ubfx	r2, r3, #16, #8
 800ed18:	f362 4017 	bfi	r0, r2, #16, #8
 800ed1c:	0e1b      	lsrs	r3, r3, #24
 800ed1e:	f363 601f 	bfi	r0, r3, #24, #8
 800ed22:	b002      	add	sp, #8
 800ed24:	4770      	bx	lr
 800ed26:	f100 0c01 	add.w	ip, r0, #1
 800ed2a:	fa5f fc8c 	uxtb.w	ip, ip
 800ed2e:	e7e0      	b.n	800ecf2 <uxr_stream_id+0xe>
 800ed30:	f080 0c80 	eor.w	ip, r0, #128	@ 0x80
 800ed34:	e7dd      	b.n	800ecf2 <uxr_stream_id+0xe>
 800ed36:	bf00      	nop

0800ed38 <uxr_stream_id_from_raw>:
 800ed38:	b082      	sub	sp, #8
 800ed3a:	b130      	cbz	r0, 800ed4a <uxr_stream_id_from_raw+0x12>
 800ed3c:	0603      	lsls	r3, r0, #24
 800ed3e:	d420      	bmi.n	800ed82 <uxr_stream_id_from_raw+0x4a>
 800ed40:	1e42      	subs	r2, r0, #1
 800ed42:	b2d2      	uxtb	r2, r2
 800ed44:	f04f 0c01 	mov.w	ip, #1
 800ed48:	e001      	b.n	800ed4e <uxr_stream_id_from_raw+0x16>
 800ed4a:	4684      	mov	ip, r0
 800ed4c:	4602      	mov	r2, r0
 800ed4e:	2300      	movs	r3, #0
 800ed50:	f360 0307 	bfi	r3, r0, #0, #8
 800ed54:	f362 230f 	bfi	r3, r2, #8, #8
 800ed58:	f36c 4317 	bfi	r3, ip, #16, #8
 800ed5c:	f361 631f 	bfi	r3, r1, #24, #8
 800ed60:	b2da      	uxtb	r2, r3
 800ed62:	2000      	movs	r0, #0
 800ed64:	f362 0007 	bfi	r0, r2, #0, #8
 800ed68:	f3c3 2207 	ubfx	r2, r3, #8, #8
 800ed6c:	f362 200f 	bfi	r0, r2, #8, #8
 800ed70:	f3c3 4207 	ubfx	r2, r3, #16, #8
 800ed74:	f362 4017 	bfi	r0, r2, #16, #8
 800ed78:	0e1b      	lsrs	r3, r3, #24
 800ed7a:	f363 601f 	bfi	r0, r3, #24, #8
 800ed7e:	b002      	add	sp, #8
 800ed80:	4770      	bx	lr
 800ed82:	f080 0280 	eor.w	r2, r0, #128	@ 0x80
 800ed86:	f04f 0c02 	mov.w	ip, #2
 800ed8a:	e7e0      	b.n	800ed4e <uxr_stream_id_from_raw+0x16>

0800ed8c <uxr_init_stream_storage>:
 800ed8c:	2300      	movs	r3, #0
 800ed8e:	7403      	strb	r3, [r0, #16]
 800ed90:	f880 3040 	strb.w	r3, [r0, #64]	@ 0x40
 800ed94:	f880 3044 	strb.w	r3, [r0, #68]	@ 0x44
 800ed98:	f880 3060 	strb.w	r3, [r0, #96]	@ 0x60
 800ed9c:	4770      	bx	lr
 800ed9e:	bf00      	nop

0800eda0 <uxr_reset_stream_storage>:
 800eda0:	b570      	push	{r4, r5, r6, lr}
 800eda2:	7c03      	ldrb	r3, [r0, #16]
 800eda4:	4604      	mov	r4, r0
 800eda6:	b153      	cbz	r3, 800edbe <uxr_reset_stream_storage+0x1e>
 800eda8:	4606      	mov	r6, r0
 800edaa:	2500      	movs	r5, #0
 800edac:	4630      	mov	r0, r6
 800edae:	f005 fbbd 	bl	801452c <uxr_reset_output_best_effort_stream>
 800edb2:	7c23      	ldrb	r3, [r4, #16]
 800edb4:	3501      	adds	r5, #1
 800edb6:	42ab      	cmp	r3, r5
 800edb8:	f106 0610 	add.w	r6, r6, #16
 800edbc:	d8f6      	bhi.n	800edac <uxr_reset_stream_storage+0xc>
 800edbe:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 800edc2:	b163      	cbz	r3, 800edde <uxr_reset_stream_storage+0x3e>
 800edc4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800edc8:	2500      	movs	r5, #0
 800edca:	4630      	mov	r0, r6
 800edcc:	f005 f9b0 	bl	8014130 <uxr_reset_input_best_effort_stream>
 800edd0:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 800edd4:	3501      	adds	r5, #1
 800edd6:	42ab      	cmp	r3, r5
 800edd8:	f106 0602 	add.w	r6, r6, #2
 800eddc:	d8f5      	bhi.n	800edca <uxr_reset_stream_storage+0x2a>
 800edde:	f894 3040 	ldrb.w	r3, [r4, #64]	@ 0x40
 800ede2:	b163      	cbz	r3, 800edfe <uxr_reset_stream_storage+0x5e>
 800ede4:	f104 0618 	add.w	r6, r4, #24
 800ede8:	2500      	movs	r5, #0
 800edea:	4630      	mov	r0, r6
 800edec:	f005 fc4a 	bl	8014684 <uxr_reset_output_reliable_stream>
 800edf0:	f894 3040 	ldrb.w	r3, [r4, #64]	@ 0x40
 800edf4:	3501      	adds	r5, #1
 800edf6:	42ab      	cmp	r3, r5
 800edf8:	f106 0628 	add.w	r6, r6, #40	@ 0x28
 800edfc:	d8f5      	bhi.n	800edea <uxr_reset_stream_storage+0x4a>
 800edfe:	f894 3060 	ldrb.w	r3, [r4, #96]	@ 0x60
 800ee02:	b163      	cbz	r3, 800ee1e <uxr_reset_stream_storage+0x7e>
 800ee04:	f104 0648 	add.w	r6, r4, #72	@ 0x48
 800ee08:	2500      	movs	r5, #0
 800ee0a:	4630      	mov	r0, r6
 800ee0c:	f005 fa04 	bl	8014218 <uxr_reset_input_reliable_stream>
 800ee10:	f894 3060 	ldrb.w	r3, [r4, #96]	@ 0x60
 800ee14:	3501      	adds	r5, #1
 800ee16:	42ab      	cmp	r3, r5
 800ee18:	f106 0618 	add.w	r6, r6, #24
 800ee1c:	d8f5      	bhi.n	800ee0a <uxr_reset_stream_storage+0x6a>
 800ee1e:	bd70      	pop	{r4, r5, r6, pc}

0800ee20 <uxr_add_output_best_effort_buffer>:
 800ee20:	b510      	push	{r4, lr}
 800ee22:	7c04      	ldrb	r4, [r0, #16]
 800ee24:	f104 0c01 	add.w	ip, r4, #1
 800ee28:	b082      	sub	sp, #8
 800ee2a:	f880 c010 	strb.w	ip, [r0, #16]
 800ee2e:	eb00 1004 	add.w	r0, r0, r4, lsl #4
 800ee32:	f005 fb71 	bl	8014518 <uxr_init_output_best_effort_stream>
 800ee36:	2201      	movs	r2, #1
 800ee38:	4611      	mov	r1, r2
 800ee3a:	4620      	mov	r0, r4
 800ee3c:	b002      	add	sp, #8
 800ee3e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ee42:	f7ff bf4f 	b.w	800ece4 <uxr_stream_id>
 800ee46:	bf00      	nop

0800ee48 <uxr_add_output_reliable_buffer>:
 800ee48:	b510      	push	{r4, lr}
 800ee4a:	b084      	sub	sp, #16
 800ee4c:	4684      	mov	ip, r0
 800ee4e:	f89d 0018 	ldrb.w	r0, [sp, #24]
 800ee52:	9000      	str	r0, [sp, #0]
 800ee54:	f89c 4040 	ldrb.w	r4, [ip, #64]	@ 0x40
 800ee58:	2028      	movs	r0, #40	@ 0x28
 800ee5a:	fb00 c004 	mla	r0, r0, r4, ip
 800ee5e:	f104 0e01 	add.w	lr, r4, #1
 800ee62:	3018      	adds	r0, #24
 800ee64:	f88c e040 	strb.w	lr, [ip, #64]	@ 0x40
 800ee68:	f005 fbd4 	bl	8014614 <uxr_init_output_reliable_stream>
 800ee6c:	2201      	movs	r2, #1
 800ee6e:	2102      	movs	r1, #2
 800ee70:	4620      	mov	r0, r4
 800ee72:	b004      	add	sp, #16
 800ee74:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ee78:	f7ff bf34 	b.w	800ece4 <uxr_stream_id>

0800ee7c <uxr_add_input_best_effort_buffer>:
 800ee7c:	b510      	push	{r4, lr}
 800ee7e:	f890 4044 	ldrb.w	r4, [r0, #68]	@ 0x44
 800ee82:	4603      	mov	r3, r0
 800ee84:	1c62      	adds	r2, r4, #1
 800ee86:	f104 0021 	add.w	r0, r4, #33	@ 0x21
 800ee8a:	b082      	sub	sp, #8
 800ee8c:	eb03 0040 	add.w	r0, r3, r0, lsl #1
 800ee90:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800ee94:	f005 f948 	bl	8014128 <uxr_init_input_best_effort_stream>
 800ee98:	2200      	movs	r2, #0
 800ee9a:	2101      	movs	r1, #1
 800ee9c:	4620      	mov	r0, r4
 800ee9e:	b002      	add	sp, #8
 800eea0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800eea4:	f7ff bf1e 	b.w	800ece4 <uxr_stream_id>

0800eea8 <uxr_add_input_reliable_buffer>:
 800eea8:	b510      	push	{r4, lr}
 800eeaa:	b084      	sub	sp, #16
 800eeac:	4684      	mov	ip, r0
 800eeae:	9806      	ldr	r0, [sp, #24]
 800eeb0:	9000      	str	r0, [sp, #0]
 800eeb2:	f89c 4060 	ldrb.w	r4, [ip, #96]	@ 0x60
 800eeb6:	2018      	movs	r0, #24
 800eeb8:	fb00 c004 	mla	r0, r0, r4, ip
 800eebc:	f104 0e01 	add.w	lr, r4, #1
 800eec0:	3048      	adds	r0, #72	@ 0x48
 800eec2:	f88c e060 	strb.w	lr, [ip, #96]	@ 0x60
 800eec6:	f005 f97b 	bl	80141c0 <uxr_init_input_reliable_stream>
 800eeca:	2200      	movs	r2, #0
 800eecc:	2102      	movs	r1, #2
 800eece:	4620      	mov	r0, r4
 800eed0:	b004      	add	sp, #16
 800eed2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800eed6:	f7ff bf05 	b.w	800ece4 <uxr_stream_id>
 800eeda:	bf00      	nop

0800eedc <uxr_get_output_best_effort_stream>:
 800eedc:	7c03      	ldrb	r3, [r0, #16]
 800eede:	428b      	cmp	r3, r1
 800eee0:	bf8c      	ite	hi
 800eee2:	eb00 1001 	addhi.w	r0, r0, r1, lsl #4
 800eee6:	2000      	movls	r0, #0
 800eee8:	4770      	bx	lr
 800eeea:	bf00      	nop

0800eeec <uxr_get_output_reliable_stream>:
 800eeec:	f890 3040 	ldrb.w	r3, [r0, #64]	@ 0x40
 800eef0:	428b      	cmp	r3, r1
 800eef2:	bf83      	ittte	hi
 800eef4:	2328      	movhi	r3, #40	@ 0x28
 800eef6:	fb03 0001 	mlahi	r0, r3, r1, r0
 800eefa:	3018      	addhi	r0, #24
 800eefc:	2000      	movls	r0, #0
 800eefe:	4770      	bx	lr

0800ef00 <uxr_get_input_best_effort_stream>:
 800ef00:	f890 3044 	ldrb.w	r3, [r0, #68]	@ 0x44
 800ef04:	428b      	cmp	r3, r1
 800ef06:	bf86      	itte	hi
 800ef08:	3121      	addhi	r1, #33	@ 0x21
 800ef0a:	eb00 0041 	addhi.w	r0, r0, r1, lsl #1
 800ef0e:	2000      	movls	r0, #0
 800ef10:	4770      	bx	lr
 800ef12:	bf00      	nop

0800ef14 <uxr_get_input_reliable_stream>:
 800ef14:	f890 3060 	ldrb.w	r3, [r0, #96]	@ 0x60
 800ef18:	428b      	cmp	r3, r1
 800ef1a:	bf83      	ittte	hi
 800ef1c:	2318      	movhi	r3, #24
 800ef1e:	fb03 0001 	mlahi	r0, r3, r1, r0
 800ef22:	3048      	addhi	r0, #72	@ 0x48
 800ef24:	2000      	movls	r0, #0
 800ef26:	4770      	bx	lr

0800ef28 <uxr_output_streams_confirmed>:
 800ef28:	f890 3040 	ldrb.w	r3, [r0, #64]	@ 0x40
 800ef2c:	b183      	cbz	r3, 800ef50 <uxr_output_streams_confirmed+0x28>
 800ef2e:	b570      	push	{r4, r5, r6, lr}
 800ef30:	4606      	mov	r6, r0
 800ef32:	f100 0518 	add.w	r5, r0, #24
 800ef36:	2400      	movs	r4, #0
 800ef38:	e001      	b.n	800ef3e <uxr_output_streams_confirmed+0x16>
 800ef3a:	3528      	adds	r5, #40	@ 0x28
 800ef3c:	b138      	cbz	r0, 800ef4e <uxr_output_streams_confirmed+0x26>
 800ef3e:	4628      	mov	r0, r5
 800ef40:	f005 fe10 	bl	8014b64 <uxr_is_output_up_to_date>
 800ef44:	f896 3040 	ldrb.w	r3, [r6, #64]	@ 0x40
 800ef48:	3401      	adds	r4, #1
 800ef4a:	42a3      	cmp	r3, r4
 800ef4c:	d8f5      	bhi.n	800ef3a <uxr_output_streams_confirmed+0x12>
 800ef4e:	bd70      	pop	{r4, r5, r6, pc}
 800ef50:	2001      	movs	r0, #1
 800ef52:	4770      	bx	lr

0800ef54 <uxr_buffer_submessage_header>:
 800ef54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ef56:	4604      	mov	r4, r0
 800ef58:	460e      	mov	r6, r1
 800ef5a:	2104      	movs	r1, #4
 800ef5c:	4615      	mov	r5, r2
 800ef5e:	461f      	mov	r7, r3
 800ef60:	f7fd fdc6 	bl	800caf0 <ucdr_align_to>
 800ef64:	2301      	movs	r3, #1
 800ef66:	ea47 0203 	orr.w	r2, r7, r3
 800ef6a:	4631      	mov	r1, r6
 800ef6c:	7523      	strb	r3, [r4, #20]
 800ef6e:	4620      	mov	r0, r4
 800ef70:	462b      	mov	r3, r5
 800ef72:	f000 f8a3 	bl	800f0bc <uxr_serialize_submessage_header>
 800ef76:	4620      	mov	r0, r4
 800ef78:	f7fd fdd0 	bl	800cb1c <ucdr_buffer_remaining>
 800ef7c:	42a8      	cmp	r0, r5
 800ef7e:	bf34      	ite	cc
 800ef80:	2000      	movcc	r0, #0
 800ef82:	2001      	movcs	r0, #1
 800ef84:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ef86:	bf00      	nop

0800ef88 <uxr_read_submessage_header>:
 800ef88:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ef8c:	4604      	mov	r4, r0
 800ef8e:	460d      	mov	r5, r1
 800ef90:	2104      	movs	r1, #4
 800ef92:	4616      	mov	r6, r2
 800ef94:	4698      	mov	r8, r3
 800ef96:	f7fd fdab 	bl	800caf0 <ucdr_align_to>
 800ef9a:	4620      	mov	r0, r4
 800ef9c:	f7fd fdbe 	bl	800cb1c <ucdr_buffer_remaining>
 800efa0:	2803      	cmp	r0, #3
 800efa2:	bf8c      	ite	hi
 800efa4:	2701      	movhi	r7, #1
 800efa6:	2700      	movls	r7, #0
 800efa8:	d802      	bhi.n	800efb0 <uxr_read_submessage_header+0x28>
 800efaa:	4638      	mov	r0, r7
 800efac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800efb0:	4633      	mov	r3, r6
 800efb2:	4642      	mov	r2, r8
 800efb4:	4620      	mov	r0, r4
 800efb6:	4629      	mov	r1, r5
 800efb8:	f000 f894 	bl	800f0e4 <uxr_deserialize_submessage_header>
 800efbc:	f898 3000 	ldrb.w	r3, [r8]
 800efc0:	f003 0201 	and.w	r2, r3, #1
 800efc4:	f003 03fe 	and.w	r3, r3, #254	@ 0xfe
 800efc8:	f888 3000 	strb.w	r3, [r8]
 800efcc:	7522      	strb	r2, [r4, #20]
 800efce:	4638      	mov	r0, r7
 800efd0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800efd4 <uxr_submessage_padding>:
 800efd4:	f010 0003 	ands.w	r0, r0, #3
 800efd8:	bf18      	it	ne
 800efda:	f1c0 0004 	rsbne	r0, r0, #4
 800efde:	4770      	bx	lr

0800efe0 <uxr_millis>:
 800efe0:	b510      	push	{r4, lr}
 800efe2:	b084      	sub	sp, #16
 800efe4:	4669      	mov	r1, sp
 800efe6:	2001      	movs	r0, #1
 800efe8:	f7f3 f992 	bl	8002310 <clock_gettime>
 800efec:	e89d 0015 	ldmia.w	sp, {r0, r2, r4}
 800eff0:	4906      	ldr	r1, [pc, #24]	@ (800f00c <uxr_millis+0x2c>)
 800eff2:	fba0 0301 	umull	r0, r3, r0, r1
 800eff6:	1900      	adds	r0, r0, r4
 800eff8:	fb01 3102 	mla	r1, r1, r2, r3
 800effc:	eb41 71e4 	adc.w	r1, r1, r4, asr #31
 800f000:	4a03      	ldr	r2, [pc, #12]	@ (800f010 <uxr_millis+0x30>)
 800f002:	2300      	movs	r3, #0
 800f004:	f7f1 fd42 	bl	8000a8c <__aeabi_ldivmod>
 800f008:	b004      	add	sp, #16
 800f00a:	bd10      	pop	{r4, pc}
 800f00c:	3b9aca00 	.word	0x3b9aca00
 800f010:	000f4240 	.word	0x000f4240

0800f014 <uxr_nanos>:
 800f014:	b510      	push	{r4, lr}
 800f016:	b084      	sub	sp, #16
 800f018:	4669      	mov	r1, sp
 800f01a:	2001      	movs	r0, #1
 800f01c:	f7f3 f978 	bl	8002310 <clock_gettime>
 800f020:	4a06      	ldr	r2, [pc, #24]	@ (800f03c <uxr_nanos+0x28>)
 800f022:	9800      	ldr	r0, [sp, #0]
 800f024:	9902      	ldr	r1, [sp, #8]
 800f026:	9c01      	ldr	r4, [sp, #4]
 800f028:	fba0 0302 	umull	r0, r3, r0, r2
 800f02c:	1840      	adds	r0, r0, r1
 800f02e:	fb02 3304 	mla	r3, r2, r4, r3
 800f032:	eb43 71e1 	adc.w	r1, r3, r1, asr #31
 800f036:	b004      	add	sp, #16
 800f038:	bd10      	pop	{r4, pc}
 800f03a:	bf00      	nop
 800f03c:	3b9aca00 	.word	0x3b9aca00

0800f040 <uxr_serialize_message_header>:
 800f040:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f042:	b083      	sub	sp, #12
 800f044:	4616      	mov	r6, r2
 800f046:	4604      	mov	r4, r0
 800f048:	9301      	str	r3, [sp, #4]
 800f04a:	460d      	mov	r5, r1
 800f04c:	9f08      	ldr	r7, [sp, #32]
 800f04e:	f7fc fc61 	bl	800b914 <ucdr_serialize_uint8_t>
 800f052:	4631      	mov	r1, r6
 800f054:	4620      	mov	r0, r4
 800f056:	f7fc fc5d 	bl	800b914 <ucdr_serialize_uint8_t>
 800f05a:	9a01      	ldr	r2, [sp, #4]
 800f05c:	2101      	movs	r1, #1
 800f05e:	4620      	mov	r0, r4
 800f060:	f7fc fd04 	bl	800ba6c <ucdr_serialize_endian_uint16_t>
 800f064:	062b      	lsls	r3, r5, #24
 800f066:	d501      	bpl.n	800f06c <uxr_serialize_message_header+0x2c>
 800f068:	b003      	add	sp, #12
 800f06a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f06c:	2204      	movs	r2, #4
 800f06e:	4639      	mov	r1, r7
 800f070:	4620      	mov	r0, r4
 800f072:	b003      	add	sp, #12
 800f074:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 800f078:	f004 bf1e 	b.w	8013eb8 <ucdr_serialize_array_uint8_t>

0800f07c <uxr_deserialize_message_header>:
 800f07c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f07e:	b083      	sub	sp, #12
 800f080:	4616      	mov	r6, r2
 800f082:	4604      	mov	r4, r0
 800f084:	9301      	str	r3, [sp, #4]
 800f086:	460d      	mov	r5, r1
 800f088:	9f08      	ldr	r7, [sp, #32]
 800f08a:	f7fc fc59 	bl	800b940 <ucdr_deserialize_uint8_t>
 800f08e:	4631      	mov	r1, r6
 800f090:	4620      	mov	r0, r4
 800f092:	f7fc fc55 	bl	800b940 <ucdr_deserialize_uint8_t>
 800f096:	9a01      	ldr	r2, [sp, #4]
 800f098:	2101      	movs	r1, #1
 800f09a:	4620      	mov	r0, r4
 800f09c:	f7fc fdda 	bl	800bc54 <ucdr_deserialize_endian_uint16_t>
 800f0a0:	f995 3000 	ldrsb.w	r3, [r5]
 800f0a4:	2b00      	cmp	r3, #0
 800f0a6:	da01      	bge.n	800f0ac <uxr_deserialize_message_header+0x30>
 800f0a8:	b003      	add	sp, #12
 800f0aa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f0ac:	2204      	movs	r2, #4
 800f0ae:	4639      	mov	r1, r7
 800f0b0:	4620      	mov	r0, r4
 800f0b2:	b003      	add	sp, #12
 800f0b4:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 800f0b8:	f004 bf62 	b.w	8013f80 <ucdr_deserialize_array_uint8_t>

0800f0bc <uxr_serialize_submessage_header>:
 800f0bc:	b530      	push	{r4, r5, lr}
 800f0be:	b083      	sub	sp, #12
 800f0c0:	4615      	mov	r5, r2
 800f0c2:	4604      	mov	r4, r0
 800f0c4:	9301      	str	r3, [sp, #4]
 800f0c6:	f7fc fc25 	bl	800b914 <ucdr_serialize_uint8_t>
 800f0ca:	4629      	mov	r1, r5
 800f0cc:	4620      	mov	r0, r4
 800f0ce:	f7fc fc21 	bl	800b914 <ucdr_serialize_uint8_t>
 800f0d2:	9a01      	ldr	r2, [sp, #4]
 800f0d4:	2101      	movs	r1, #1
 800f0d6:	4620      	mov	r0, r4
 800f0d8:	b003      	add	sp, #12
 800f0da:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800f0de:	f7fc bcc5 	b.w	800ba6c <ucdr_serialize_endian_uint16_t>
 800f0e2:	bf00      	nop

0800f0e4 <uxr_deserialize_submessage_header>:
 800f0e4:	b530      	push	{r4, r5, lr}
 800f0e6:	b083      	sub	sp, #12
 800f0e8:	4615      	mov	r5, r2
 800f0ea:	4604      	mov	r4, r0
 800f0ec:	9301      	str	r3, [sp, #4]
 800f0ee:	f7fc fc27 	bl	800b940 <ucdr_deserialize_uint8_t>
 800f0f2:	4629      	mov	r1, r5
 800f0f4:	4620      	mov	r0, r4
 800f0f6:	f7fc fc23 	bl	800b940 <ucdr_deserialize_uint8_t>
 800f0fa:	9a01      	ldr	r2, [sp, #4]
 800f0fc:	2101      	movs	r1, #1
 800f0fe:	4620      	mov	r0, r4
 800f100:	b003      	add	sp, #12
 800f102:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800f106:	f7fc bda5 	b.w	800bc54 <ucdr_deserialize_endian_uint16_t>
 800f10a:	bf00      	nop

0800f10c <uxr_serialize_CLIENT_Representation>:
 800f10c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f110:	2204      	movs	r2, #4
 800f112:	460e      	mov	r6, r1
 800f114:	4605      	mov	r5, r0
 800f116:	f004 fecf 	bl	8013eb8 <ucdr_serialize_array_uint8_t>
 800f11a:	2202      	movs	r2, #2
 800f11c:	4607      	mov	r7, r0
 800f11e:	1d31      	adds	r1, r6, #4
 800f120:	4628      	mov	r0, r5
 800f122:	f004 fec9 	bl	8013eb8 <ucdr_serialize_array_uint8_t>
 800f126:	4038      	ands	r0, r7
 800f128:	2202      	movs	r2, #2
 800f12a:	1db1      	adds	r1, r6, #6
 800f12c:	b2c7      	uxtb	r7, r0
 800f12e:	4628      	mov	r0, r5
 800f130:	f004 fec2 	bl	8013eb8 <ucdr_serialize_array_uint8_t>
 800f134:	2204      	movs	r2, #4
 800f136:	4007      	ands	r7, r0
 800f138:	f106 0108 	add.w	r1, r6, #8
 800f13c:	4628      	mov	r0, r5
 800f13e:	f004 febb 	bl	8013eb8 <ucdr_serialize_array_uint8_t>
 800f142:	7b31      	ldrb	r1, [r6, #12]
 800f144:	4007      	ands	r7, r0
 800f146:	4628      	mov	r0, r5
 800f148:	f7fc fbe4 	bl	800b914 <ucdr_serialize_uint8_t>
 800f14c:	7b71      	ldrb	r1, [r6, #13]
 800f14e:	4007      	ands	r7, r0
 800f150:	4628      	mov	r0, r5
 800f152:	f7fc fbb1 	bl	800b8b8 <ucdr_serialize_bool>
 800f156:	7b73      	ldrb	r3, [r6, #13]
 800f158:	ea07 0800 	and.w	r8, r7, r0
 800f15c:	b93b      	cbnz	r3, 800f16e <uxr_serialize_CLIENT_Representation+0x62>
 800f15e:	8bb1      	ldrh	r1, [r6, #28]
 800f160:	4628      	mov	r0, r5
 800f162:	f7fc fc03 	bl	800b96c <ucdr_serialize_uint16_t>
 800f166:	ea08 0000 	and.w	r0, r8, r0
 800f16a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f16e:	6931      	ldr	r1, [r6, #16]
 800f170:	4628      	mov	r0, r5
 800f172:	f7fc fde5 	bl	800bd40 <ucdr_serialize_uint32_t>
 800f176:	6933      	ldr	r3, [r6, #16]
 800f178:	b1e3      	cbz	r3, 800f1b4 <uxr_serialize_CLIENT_Representation+0xa8>
 800f17a:	b1c0      	cbz	r0, 800f1ae <uxr_serialize_CLIENT_Representation+0xa2>
 800f17c:	4637      	mov	r7, r6
 800f17e:	f04f 0900 	mov.w	r9, #0
 800f182:	e001      	b.n	800f188 <uxr_serialize_CLIENT_Representation+0x7c>
 800f184:	3708      	adds	r7, #8
 800f186:	b194      	cbz	r4, 800f1ae <uxr_serialize_CLIENT_Representation+0xa2>
 800f188:	6979      	ldr	r1, [r7, #20]
 800f18a:	4628      	mov	r0, r5
 800f18c:	f004 ffb4 	bl	80140f8 <ucdr_serialize_string>
 800f190:	69b9      	ldr	r1, [r7, #24]
 800f192:	4604      	mov	r4, r0
 800f194:	4628      	mov	r0, r5
 800f196:	f004 ffaf 	bl	80140f8 <ucdr_serialize_string>
 800f19a:	6933      	ldr	r3, [r6, #16]
 800f19c:	f109 0901 	add.w	r9, r9, #1
 800f1a0:	4004      	ands	r4, r0
 800f1a2:	4599      	cmp	r9, r3
 800f1a4:	b2e4      	uxtb	r4, r4
 800f1a6:	d3ed      	bcc.n	800f184 <uxr_serialize_CLIENT_Representation+0x78>
 800f1a8:	ea08 0804 	and.w	r8, r8, r4
 800f1ac:	e7d7      	b.n	800f15e <uxr_serialize_CLIENT_Representation+0x52>
 800f1ae:	f04f 0800 	mov.w	r8, #0
 800f1b2:	e7d4      	b.n	800f15e <uxr_serialize_CLIENT_Representation+0x52>
 800f1b4:	ea08 0800 	and.w	r8, r8, r0
 800f1b8:	e7d1      	b.n	800f15e <uxr_serialize_CLIENT_Representation+0x52>
 800f1ba:	bf00      	nop

0800f1bc <uxr_deserialize_CLIENT_Representation>:
 800f1bc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f1c0:	2204      	movs	r2, #4
 800f1c2:	460c      	mov	r4, r1
 800f1c4:	4605      	mov	r5, r0
 800f1c6:	f004 fedb 	bl	8013f80 <ucdr_deserialize_array_uint8_t>
 800f1ca:	2202      	movs	r2, #2
 800f1cc:	4607      	mov	r7, r0
 800f1ce:	1d21      	adds	r1, r4, #4
 800f1d0:	4628      	mov	r0, r5
 800f1d2:	f004 fed5 	bl	8013f80 <ucdr_deserialize_array_uint8_t>
 800f1d6:	4038      	ands	r0, r7
 800f1d8:	2202      	movs	r2, #2
 800f1da:	1da1      	adds	r1, r4, #6
 800f1dc:	b2c6      	uxtb	r6, r0
 800f1de:	4628      	mov	r0, r5
 800f1e0:	f004 fece 	bl	8013f80 <ucdr_deserialize_array_uint8_t>
 800f1e4:	2204      	movs	r2, #4
 800f1e6:	4006      	ands	r6, r0
 800f1e8:	f104 0108 	add.w	r1, r4, #8
 800f1ec:	4628      	mov	r0, r5
 800f1ee:	f004 fec7 	bl	8013f80 <ucdr_deserialize_array_uint8_t>
 800f1f2:	f104 010c 	add.w	r1, r4, #12
 800f1f6:	4006      	ands	r6, r0
 800f1f8:	4628      	mov	r0, r5
 800f1fa:	f7fc fba1 	bl	800b940 <ucdr_deserialize_uint8_t>
 800f1fe:	f104 010d 	add.w	r1, r4, #13
 800f202:	ea06 0700 	and.w	r7, r6, r0
 800f206:	4628      	mov	r0, r5
 800f208:	f7fc fb6c 	bl	800b8e4 <ucdr_deserialize_bool>
 800f20c:	7b63      	ldrb	r3, [r4, #13]
 800f20e:	4007      	ands	r7, r0
 800f210:	b93b      	cbnz	r3, 800f222 <uxr_deserialize_CLIENT_Representation+0x66>
 800f212:	f104 011c 	add.w	r1, r4, #28
 800f216:	4628      	mov	r0, r5
 800f218:	f7fc fca8 	bl	800bb6c <ucdr_deserialize_uint16_t>
 800f21c:	4038      	ands	r0, r7
 800f21e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f222:	f104 0110 	add.w	r1, r4, #16
 800f226:	4628      	mov	r0, r5
 800f228:	f7fc feba 	bl	800bfa0 <ucdr_deserialize_uint32_t>
 800f22c:	6923      	ldr	r3, [r4, #16]
 800f22e:	2b01      	cmp	r3, #1
 800f230:	d903      	bls.n	800f23a <uxr_deserialize_CLIENT_Representation+0x7e>
 800f232:	2301      	movs	r3, #1
 800f234:	75ab      	strb	r3, [r5, #22]
 800f236:	2700      	movs	r7, #0
 800f238:	e7eb      	b.n	800f212 <uxr_deserialize_CLIENT_Representation+0x56>
 800f23a:	b30b      	cbz	r3, 800f280 <uxr_deserialize_CLIENT_Representation+0xc4>
 800f23c:	2800      	cmp	r0, #0
 800f23e:	d0fa      	beq.n	800f236 <uxr_deserialize_CLIENT_Representation+0x7a>
 800f240:	46a0      	mov	r8, r4
 800f242:	f04f 0900 	mov.w	r9, #0
 800f246:	e001      	b.n	800f24c <uxr_deserialize_CLIENT_Representation+0x90>
 800f248:	2e00      	cmp	r6, #0
 800f24a:	d0f4      	beq.n	800f236 <uxr_deserialize_CLIENT_Representation+0x7a>
 800f24c:	f8d8 1014 	ldr.w	r1, [r8, #20]
 800f250:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800f254:	4628      	mov	r0, r5
 800f256:	f004 ff5f 	bl	8014118 <ucdr_deserialize_string>
 800f25a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800f25e:	4606      	mov	r6, r0
 800f260:	f8d8 1018 	ldr.w	r1, [r8, #24]
 800f264:	4628      	mov	r0, r5
 800f266:	f004 ff57 	bl	8014118 <ucdr_deserialize_string>
 800f26a:	6923      	ldr	r3, [r4, #16]
 800f26c:	f109 0901 	add.w	r9, r9, #1
 800f270:	4006      	ands	r6, r0
 800f272:	4599      	cmp	r9, r3
 800f274:	f108 0808 	add.w	r8, r8, #8
 800f278:	b2f6      	uxtb	r6, r6
 800f27a:	d3e5      	bcc.n	800f248 <uxr_deserialize_CLIENT_Representation+0x8c>
 800f27c:	4037      	ands	r7, r6
 800f27e:	e7c8      	b.n	800f212 <uxr_deserialize_CLIENT_Representation+0x56>
 800f280:	4007      	ands	r7, r0
 800f282:	e7c6      	b.n	800f212 <uxr_deserialize_CLIENT_Representation+0x56>

0800f284 <uxr_serialize_AGENT_Representation>:
 800f284:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f288:	2204      	movs	r2, #4
 800f28a:	460f      	mov	r7, r1
 800f28c:	4605      	mov	r5, r0
 800f28e:	f004 fe13 	bl	8013eb8 <ucdr_serialize_array_uint8_t>
 800f292:	2202      	movs	r2, #2
 800f294:	4604      	mov	r4, r0
 800f296:	1d39      	adds	r1, r7, #4
 800f298:	4628      	mov	r0, r5
 800f29a:	f004 fe0d 	bl	8013eb8 <ucdr_serialize_array_uint8_t>
 800f29e:	4020      	ands	r0, r4
 800f2a0:	2202      	movs	r2, #2
 800f2a2:	1db9      	adds	r1, r7, #6
 800f2a4:	b2c4      	uxtb	r4, r0
 800f2a6:	4628      	mov	r0, r5
 800f2a8:	f004 fe06 	bl	8013eb8 <ucdr_serialize_array_uint8_t>
 800f2ac:	7a39      	ldrb	r1, [r7, #8]
 800f2ae:	4004      	ands	r4, r0
 800f2b0:	4628      	mov	r0, r5
 800f2b2:	f7fc fb01 	bl	800b8b8 <ucdr_serialize_bool>
 800f2b6:	7a3b      	ldrb	r3, [r7, #8]
 800f2b8:	ea00 0804 	and.w	r8, r0, r4
 800f2bc:	b913      	cbnz	r3, 800f2c4 <uxr_serialize_AGENT_Representation+0x40>
 800f2be:	4640      	mov	r0, r8
 800f2c0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f2c4:	68f9      	ldr	r1, [r7, #12]
 800f2c6:	4628      	mov	r0, r5
 800f2c8:	f7fc fd3a 	bl	800bd40 <ucdr_serialize_uint32_t>
 800f2cc:	68fb      	ldr	r3, [r7, #12]
 800f2ce:	b303      	cbz	r3, 800f312 <uxr_serialize_AGENT_Representation+0x8e>
 800f2d0:	b1d0      	cbz	r0, 800f308 <uxr_serialize_AGENT_Representation+0x84>
 800f2d2:	463e      	mov	r6, r7
 800f2d4:	f04f 0900 	mov.w	r9, #0
 800f2d8:	e001      	b.n	800f2de <uxr_serialize_AGENT_Representation+0x5a>
 800f2da:	3608      	adds	r6, #8
 800f2dc:	b1a4      	cbz	r4, 800f308 <uxr_serialize_AGENT_Representation+0x84>
 800f2de:	6931      	ldr	r1, [r6, #16]
 800f2e0:	4628      	mov	r0, r5
 800f2e2:	f004 ff09 	bl	80140f8 <ucdr_serialize_string>
 800f2e6:	6971      	ldr	r1, [r6, #20]
 800f2e8:	4604      	mov	r4, r0
 800f2ea:	4628      	mov	r0, r5
 800f2ec:	f004 ff04 	bl	80140f8 <ucdr_serialize_string>
 800f2f0:	68fb      	ldr	r3, [r7, #12]
 800f2f2:	f109 0901 	add.w	r9, r9, #1
 800f2f6:	4004      	ands	r4, r0
 800f2f8:	4599      	cmp	r9, r3
 800f2fa:	b2e4      	uxtb	r4, r4
 800f2fc:	d3ed      	bcc.n	800f2da <uxr_serialize_AGENT_Representation+0x56>
 800f2fe:	ea08 0804 	and.w	r8, r8, r4
 800f302:	4640      	mov	r0, r8
 800f304:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f308:	f04f 0800 	mov.w	r8, #0
 800f30c:	4640      	mov	r0, r8
 800f30e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f312:	ea08 0800 	and.w	r8, r8, r0
 800f316:	e7d2      	b.n	800f2be <uxr_serialize_AGENT_Representation+0x3a>

0800f318 <uxr_serialize_DATAWRITER_Representation>:
 800f318:	b570      	push	{r4, r5, r6, lr}
 800f31a:	460d      	mov	r5, r1
 800f31c:	7809      	ldrb	r1, [r1, #0]
 800f31e:	4606      	mov	r6, r0
 800f320:	f7fc faf8 	bl	800b914 <ucdr_serialize_uint8_t>
 800f324:	4604      	mov	r4, r0
 800f326:	b130      	cbz	r0, 800f336 <uxr_serialize_DATAWRITER_Representation+0x1e>
 800f328:	782b      	ldrb	r3, [r5, #0]
 800f32a:	2b02      	cmp	r3, #2
 800f32c:	d00c      	beq.n	800f348 <uxr_serialize_DATAWRITER_Representation+0x30>
 800f32e:	2b03      	cmp	r3, #3
 800f330:	d010      	beq.n	800f354 <uxr_serialize_DATAWRITER_Representation+0x3c>
 800f332:	2b01      	cmp	r3, #1
 800f334:	d008      	beq.n	800f348 <uxr_serialize_DATAWRITER_Representation+0x30>
 800f336:	2202      	movs	r2, #2
 800f338:	f505 7102 	add.w	r1, r5, #520	@ 0x208
 800f33c:	4630      	mov	r0, r6
 800f33e:	f004 fdbb 	bl	8013eb8 <ucdr_serialize_array_uint8_t>
 800f342:	4020      	ands	r0, r4
 800f344:	b2c0      	uxtb	r0, r0
 800f346:	bd70      	pop	{r4, r5, r6, pc}
 800f348:	6869      	ldr	r1, [r5, #4]
 800f34a:	4630      	mov	r0, r6
 800f34c:	f004 fed4 	bl	80140f8 <ucdr_serialize_string>
 800f350:	4604      	mov	r4, r0
 800f352:	e7f0      	b.n	800f336 <uxr_serialize_DATAWRITER_Representation+0x1e>
 800f354:	4629      	mov	r1, r5
 800f356:	4630      	mov	r0, r6
 800f358:	f851 2f04 	ldr.w	r2, [r1, #4]!
 800f35c:	3104      	adds	r1, #4
 800f35e:	f004 fe9f 	bl	80140a0 <ucdr_serialize_sequence_uint8_t>
 800f362:	4604      	mov	r4, r0
 800f364:	e7e7      	b.n	800f336 <uxr_serialize_DATAWRITER_Representation+0x1e>
 800f366:	bf00      	nop

0800f368 <uxr_serialize_ObjectVariant.part.0>:
 800f368:	b570      	push	{r4, r5, r6, lr}
 800f36a:	780b      	ldrb	r3, [r1, #0]
 800f36c:	3b01      	subs	r3, #1
 800f36e:	460c      	mov	r4, r1
 800f370:	4605      	mov	r5, r0
 800f372:	2b0d      	cmp	r3, #13
 800f374:	d854      	bhi.n	800f420 <uxr_serialize_ObjectVariant.part.0+0xb8>
 800f376:	e8df f003 	tbb	[pc, r3]
 800f37a:	0730      	.short	0x0730
 800f37c:	07071b1b 	.word	0x07071b1b
 800f380:	0c530707 	.word	0x0c530707
 800f384:	494e0c0c 	.word	0x494e0c0c
 800f388:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800f38c:	3104      	adds	r1, #4
 800f38e:	f7ff bfc3 	b.w	800f318 <uxr_serialize_DATAWRITER_Representation>
 800f392:	7909      	ldrb	r1, [r1, #4]
 800f394:	f7fc fabe 	bl	800b914 <ucdr_serialize_uint8_t>
 800f398:	b1e8      	cbz	r0, 800f3d6 <uxr_serialize_ObjectVariant.part.0+0x6e>
 800f39a:	7923      	ldrb	r3, [r4, #4]
 800f39c:	2b01      	cmp	r3, #1
 800f39e:	d001      	beq.n	800f3a4 <uxr_serialize_ObjectVariant.part.0+0x3c>
 800f3a0:	2b02      	cmp	r3, #2
 800f3a2:	d13d      	bne.n	800f420 <uxr_serialize_ObjectVariant.part.0+0xb8>
 800f3a4:	68a1      	ldr	r1, [r4, #8]
 800f3a6:	4628      	mov	r0, r5
 800f3a8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800f3ac:	f004 bea4 	b.w	80140f8 <ucdr_serialize_string>
 800f3b0:	7909      	ldrb	r1, [r1, #4]
 800f3b2:	f7fc faaf 	bl	800b914 <ucdr_serialize_uint8_t>
 800f3b6:	4606      	mov	r6, r0
 800f3b8:	b120      	cbz	r0, 800f3c4 <uxr_serialize_ObjectVariant.part.0+0x5c>
 800f3ba:	7923      	ldrb	r3, [r4, #4]
 800f3bc:	2b02      	cmp	r3, #2
 800f3be:	d039      	beq.n	800f434 <uxr_serialize_ObjectVariant.part.0+0xcc>
 800f3c0:	2b03      	cmp	r3, #3
 800f3c2:	d02f      	beq.n	800f424 <uxr_serialize_ObjectVariant.part.0+0xbc>
 800f3c4:	2202      	movs	r2, #2
 800f3c6:	f504 7103 	add.w	r1, r4, #524	@ 0x20c
 800f3ca:	4628      	mov	r0, r5
 800f3cc:	f004 fd74 	bl	8013eb8 <ucdr_serialize_array_uint8_t>
 800f3d0:	4030      	ands	r0, r6
 800f3d2:	b2c0      	uxtb	r0, r0
 800f3d4:	bd70      	pop	{r4, r5, r6, pc}
 800f3d6:	2000      	movs	r0, #0
 800f3d8:	bd70      	pop	{r4, r5, r6, pc}
 800f3da:	7909      	ldrb	r1, [r1, #4]
 800f3dc:	f7fc fa9a 	bl	800b914 <ucdr_serialize_uint8_t>
 800f3e0:	4606      	mov	r6, r0
 800f3e2:	b158      	cbz	r0, 800f3fc <uxr_serialize_ObjectVariant.part.0+0x94>
 800f3e4:	7923      	ldrb	r3, [r4, #4]
 800f3e6:	2b02      	cmp	r3, #2
 800f3e8:	d003      	beq.n	800f3f2 <uxr_serialize_ObjectVariant.part.0+0x8a>
 800f3ea:	2b03      	cmp	r3, #3
 800f3ec:	d028      	beq.n	800f440 <uxr_serialize_ObjectVariant.part.0+0xd8>
 800f3ee:	2b01      	cmp	r3, #1
 800f3f0:	d104      	bne.n	800f3fc <uxr_serialize_ObjectVariant.part.0+0x94>
 800f3f2:	68a1      	ldr	r1, [r4, #8]
 800f3f4:	4628      	mov	r0, r5
 800f3f6:	f004 fe7f 	bl	80140f8 <ucdr_serialize_string>
 800f3fa:	4606      	mov	r6, r0
 800f3fc:	f9b4 120c 	ldrsh.w	r1, [r4, #524]	@ 0x20c
 800f400:	4628      	mov	r0, r5
 800f402:	f7fc ffc3 	bl	800c38c <ucdr_serialize_int16_t>
 800f406:	4030      	ands	r0, r6
 800f408:	b2c0      	uxtb	r0, r0
 800f40a:	bd70      	pop	{r4, r5, r6, pc}
 800f40c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800f410:	3104      	adds	r1, #4
 800f412:	f7ff be7b 	b.w	800f10c <uxr_serialize_CLIENT_Representation>
 800f416:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800f41a:	3104      	adds	r1, #4
 800f41c:	f7ff bf32 	b.w	800f284 <uxr_serialize_AGENT_Representation>
 800f420:	2001      	movs	r0, #1
 800f422:	bd70      	pop	{r4, r5, r6, pc}
 800f424:	68a2      	ldr	r2, [r4, #8]
 800f426:	f104 010c 	add.w	r1, r4, #12
 800f42a:	4628      	mov	r0, r5
 800f42c:	f004 fe38 	bl	80140a0 <ucdr_serialize_sequence_uint8_t>
 800f430:	4606      	mov	r6, r0
 800f432:	e7c7      	b.n	800f3c4 <uxr_serialize_ObjectVariant.part.0+0x5c>
 800f434:	68a1      	ldr	r1, [r4, #8]
 800f436:	4628      	mov	r0, r5
 800f438:	f004 fe5e 	bl	80140f8 <ucdr_serialize_string>
 800f43c:	4606      	mov	r6, r0
 800f43e:	e7c1      	b.n	800f3c4 <uxr_serialize_ObjectVariant.part.0+0x5c>
 800f440:	68a2      	ldr	r2, [r4, #8]
 800f442:	f104 010c 	add.w	r1, r4, #12
 800f446:	4628      	mov	r0, r5
 800f448:	f004 fe2a 	bl	80140a0 <ucdr_serialize_sequence_uint8_t>
 800f44c:	4606      	mov	r6, r0
 800f44e:	e7d5      	b.n	800f3fc <uxr_serialize_ObjectVariant.part.0+0x94>

0800f450 <uxr_deserialize_DATAWRITER_Representation>:
 800f450:	b570      	push	{r4, r5, r6, lr}
 800f452:	4606      	mov	r6, r0
 800f454:	460d      	mov	r5, r1
 800f456:	f7fc fa73 	bl	800b940 <ucdr_deserialize_uint8_t>
 800f45a:	4604      	mov	r4, r0
 800f45c:	b130      	cbz	r0, 800f46c <uxr_deserialize_DATAWRITER_Representation+0x1c>
 800f45e:	782b      	ldrb	r3, [r5, #0]
 800f460:	2b02      	cmp	r3, #2
 800f462:	d00c      	beq.n	800f47e <uxr_deserialize_DATAWRITER_Representation+0x2e>
 800f464:	2b03      	cmp	r3, #3
 800f466:	d012      	beq.n	800f48e <uxr_deserialize_DATAWRITER_Representation+0x3e>
 800f468:	2b01      	cmp	r3, #1
 800f46a:	d008      	beq.n	800f47e <uxr_deserialize_DATAWRITER_Representation+0x2e>
 800f46c:	2202      	movs	r2, #2
 800f46e:	f505 7102 	add.w	r1, r5, #520	@ 0x208
 800f472:	4630      	mov	r0, r6
 800f474:	f004 fd84 	bl	8013f80 <ucdr_deserialize_array_uint8_t>
 800f478:	4020      	ands	r0, r4
 800f47a:	b2c0      	uxtb	r0, r0
 800f47c:	bd70      	pop	{r4, r5, r6, pc}
 800f47e:	6869      	ldr	r1, [r5, #4]
 800f480:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800f484:	4630      	mov	r0, r6
 800f486:	f004 fe47 	bl	8014118 <ucdr_deserialize_string>
 800f48a:	4604      	mov	r4, r0
 800f48c:	e7ee      	b.n	800f46c <uxr_deserialize_DATAWRITER_Representation+0x1c>
 800f48e:	1d2b      	adds	r3, r5, #4
 800f490:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800f494:	f105 0108 	add.w	r1, r5, #8
 800f498:	4630      	mov	r0, r6
 800f49a:	f004 fe13 	bl	80140c4 <ucdr_deserialize_sequence_uint8_t>
 800f49e:	4604      	mov	r4, r0
 800f4a0:	e7e4      	b.n	800f46c <uxr_deserialize_DATAWRITER_Representation+0x1c>
 800f4a2:	bf00      	nop

0800f4a4 <uxr_serialize_OBJK_DomainParticipant_Binary>:
 800f4a4:	b570      	push	{r4, r5, r6, lr}
 800f4a6:	460d      	mov	r5, r1
 800f4a8:	7809      	ldrb	r1, [r1, #0]
 800f4aa:	4606      	mov	r6, r0
 800f4ac:	f7fc fa04 	bl	800b8b8 <ucdr_serialize_bool>
 800f4b0:	782b      	ldrb	r3, [r5, #0]
 800f4b2:	4604      	mov	r4, r0
 800f4b4:	b94b      	cbnz	r3, 800f4ca <uxr_serialize_OBJK_DomainParticipant_Binary+0x26>
 800f4b6:	7a29      	ldrb	r1, [r5, #8]
 800f4b8:	4630      	mov	r0, r6
 800f4ba:	f7fc f9fd 	bl	800b8b8 <ucdr_serialize_bool>
 800f4be:	7a2b      	ldrb	r3, [r5, #8]
 800f4c0:	4004      	ands	r4, r0
 800f4c2:	b2e4      	uxtb	r4, r4
 800f4c4:	b943      	cbnz	r3, 800f4d8 <uxr_serialize_OBJK_DomainParticipant_Binary+0x34>
 800f4c6:	4620      	mov	r0, r4
 800f4c8:	bd70      	pop	{r4, r5, r6, pc}
 800f4ca:	6869      	ldr	r1, [r5, #4]
 800f4cc:	4630      	mov	r0, r6
 800f4ce:	f004 fe13 	bl	80140f8 <ucdr_serialize_string>
 800f4d2:	4004      	ands	r4, r0
 800f4d4:	b2e4      	uxtb	r4, r4
 800f4d6:	e7ee      	b.n	800f4b6 <uxr_serialize_OBJK_DomainParticipant_Binary+0x12>
 800f4d8:	68e9      	ldr	r1, [r5, #12]
 800f4da:	4630      	mov	r0, r6
 800f4dc:	f004 fe0c 	bl	80140f8 <ucdr_serialize_string>
 800f4e0:	4004      	ands	r4, r0
 800f4e2:	4620      	mov	r0, r4
 800f4e4:	bd70      	pop	{r4, r5, r6, pc}
 800f4e6:	bf00      	nop

0800f4e8 <uxr_serialize_OBJK_Topic_Binary>:
 800f4e8:	b570      	push	{r4, r5, r6, lr}
 800f4ea:	460d      	mov	r5, r1
 800f4ec:	6809      	ldr	r1, [r1, #0]
 800f4ee:	4606      	mov	r6, r0
 800f4f0:	f004 fe02 	bl	80140f8 <ucdr_serialize_string>
 800f4f4:	7929      	ldrb	r1, [r5, #4]
 800f4f6:	4604      	mov	r4, r0
 800f4f8:	4630      	mov	r0, r6
 800f4fa:	f7fc f9dd 	bl	800b8b8 <ucdr_serialize_bool>
 800f4fe:	792b      	ldrb	r3, [r5, #4]
 800f500:	4004      	ands	r4, r0
 800f502:	b2e4      	uxtb	r4, r4
 800f504:	b943      	cbnz	r3, 800f518 <uxr_serialize_OBJK_Topic_Binary+0x30>
 800f506:	7b29      	ldrb	r1, [r5, #12]
 800f508:	4630      	mov	r0, r6
 800f50a:	f7fc f9d5 	bl	800b8b8 <ucdr_serialize_bool>
 800f50e:	7b2b      	ldrb	r3, [r5, #12]
 800f510:	4004      	ands	r4, r0
 800f512:	b93b      	cbnz	r3, 800f524 <uxr_serialize_OBJK_Topic_Binary+0x3c>
 800f514:	4620      	mov	r0, r4
 800f516:	bd70      	pop	{r4, r5, r6, pc}
 800f518:	68a9      	ldr	r1, [r5, #8]
 800f51a:	4630      	mov	r0, r6
 800f51c:	f004 fdec 	bl	80140f8 <ucdr_serialize_string>
 800f520:	4004      	ands	r4, r0
 800f522:	e7f0      	b.n	800f506 <uxr_serialize_OBJK_Topic_Binary+0x1e>
 800f524:	6929      	ldr	r1, [r5, #16]
 800f526:	4630      	mov	r0, r6
 800f528:	f004 fde6 	bl	80140f8 <ucdr_serialize_string>
 800f52c:	4004      	ands	r4, r0
 800f52e:	b2e4      	uxtb	r4, r4
 800f530:	4620      	mov	r0, r4
 800f532:	bd70      	pop	{r4, r5, r6, pc}

0800f534 <uxr_serialize_OBJK_Subscriber_Binary_Qos>:
 800f534:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f538:	460c      	mov	r4, r1
 800f53a:	7809      	ldrb	r1, [r1, #0]
 800f53c:	4606      	mov	r6, r0
 800f53e:	f7fc f9bb 	bl	800b8b8 <ucdr_serialize_bool>
 800f542:	7823      	ldrb	r3, [r4, #0]
 800f544:	4605      	mov	r5, r0
 800f546:	b96b      	cbnz	r3, 800f564 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x30>
 800f548:	f894 1028 	ldrb.w	r1, [r4, #40]	@ 0x28
 800f54c:	4630      	mov	r0, r6
 800f54e:	f7fc f9b3 	bl	800b8b8 <ucdr_serialize_bool>
 800f552:	f894 3028 	ldrb.w	r3, [r4, #40]	@ 0x28
 800f556:	4005      	ands	r5, r0
 800f558:	b2ed      	uxtb	r5, r5
 800f55a:	2b00      	cmp	r3, #0
 800f55c:	d169      	bne.n	800f632 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xfe>
 800f55e:	4628      	mov	r0, r5
 800f560:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f564:	6861      	ldr	r1, [r4, #4]
 800f566:	4630      	mov	r0, r6
 800f568:	f7fc fbea 	bl	800bd40 <ucdr_serialize_uint32_t>
 800f56c:	6863      	ldr	r3, [r4, #4]
 800f56e:	2b00      	cmp	r3, #0
 800f570:	d06b      	beq.n	800f64a <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x116>
 800f572:	2800      	cmp	r0, #0
 800f574:	d067      	beq.n	800f646 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 800f576:	68a1      	ldr	r1, [r4, #8]
 800f578:	4630      	mov	r0, r6
 800f57a:	f004 fdbd 	bl	80140f8 <ucdr_serialize_string>
 800f57e:	6863      	ldr	r3, [r4, #4]
 800f580:	2b01      	cmp	r3, #1
 800f582:	d953      	bls.n	800f62c <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 800f584:	2800      	cmp	r0, #0
 800f586:	d05e      	beq.n	800f646 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 800f588:	68e1      	ldr	r1, [r4, #12]
 800f58a:	4630      	mov	r0, r6
 800f58c:	f004 fdb4 	bl	80140f8 <ucdr_serialize_string>
 800f590:	6863      	ldr	r3, [r4, #4]
 800f592:	2b02      	cmp	r3, #2
 800f594:	d94a      	bls.n	800f62c <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 800f596:	2800      	cmp	r0, #0
 800f598:	d055      	beq.n	800f646 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 800f59a:	6921      	ldr	r1, [r4, #16]
 800f59c:	4630      	mov	r0, r6
 800f59e:	f004 fdab 	bl	80140f8 <ucdr_serialize_string>
 800f5a2:	6863      	ldr	r3, [r4, #4]
 800f5a4:	2b03      	cmp	r3, #3
 800f5a6:	d941      	bls.n	800f62c <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 800f5a8:	2800      	cmp	r0, #0
 800f5aa:	d04c      	beq.n	800f646 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 800f5ac:	6961      	ldr	r1, [r4, #20]
 800f5ae:	4630      	mov	r0, r6
 800f5b0:	f004 fda2 	bl	80140f8 <ucdr_serialize_string>
 800f5b4:	6863      	ldr	r3, [r4, #4]
 800f5b6:	2b04      	cmp	r3, #4
 800f5b8:	d938      	bls.n	800f62c <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 800f5ba:	2800      	cmp	r0, #0
 800f5bc:	d043      	beq.n	800f646 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 800f5be:	69a1      	ldr	r1, [r4, #24]
 800f5c0:	4630      	mov	r0, r6
 800f5c2:	f004 fd99 	bl	80140f8 <ucdr_serialize_string>
 800f5c6:	6863      	ldr	r3, [r4, #4]
 800f5c8:	2b05      	cmp	r3, #5
 800f5ca:	d92f      	bls.n	800f62c <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 800f5cc:	2800      	cmp	r0, #0
 800f5ce:	d03a      	beq.n	800f646 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 800f5d0:	69e1      	ldr	r1, [r4, #28]
 800f5d2:	4630      	mov	r0, r6
 800f5d4:	f004 fd90 	bl	80140f8 <ucdr_serialize_string>
 800f5d8:	6863      	ldr	r3, [r4, #4]
 800f5da:	2b06      	cmp	r3, #6
 800f5dc:	d926      	bls.n	800f62c <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 800f5de:	b390      	cbz	r0, 800f646 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 800f5e0:	6a21      	ldr	r1, [r4, #32]
 800f5e2:	4630      	mov	r0, r6
 800f5e4:	f004 fd88 	bl	80140f8 <ucdr_serialize_string>
 800f5e8:	6863      	ldr	r3, [r4, #4]
 800f5ea:	2b07      	cmp	r3, #7
 800f5ec:	d91e      	bls.n	800f62c <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 800f5ee:	b350      	cbz	r0, 800f646 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 800f5f0:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 800f5f2:	4630      	mov	r0, r6
 800f5f4:	f004 fd80 	bl	80140f8 <ucdr_serialize_string>
 800f5f8:	6863      	ldr	r3, [r4, #4]
 800f5fa:	2b08      	cmp	r3, #8
 800f5fc:	d916      	bls.n	800f62c <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 800f5fe:	b310      	cbz	r0, 800f646 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 800f600:	6aa1      	ldr	r1, [r4, #40]	@ 0x28
 800f602:	4630      	mov	r0, r6
 800f604:	f004 fd78 	bl	80140f8 <ucdr_serialize_string>
 800f608:	6863      	ldr	r3, [r4, #4]
 800f60a:	2b09      	cmp	r3, #9
 800f60c:	d90e      	bls.n	800f62c <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 800f60e:	b1d0      	cbz	r0, 800f646 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 800f610:	f104 082c 	add.w	r8, r4, #44	@ 0x2c
 800f614:	2709      	movs	r7, #9
 800f616:	e000      	b.n	800f61a <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xe6>
 800f618:	b1a8      	cbz	r0, 800f646 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 800f61a:	f858 1b04 	ldr.w	r1, [r8], #4
 800f61e:	4630      	mov	r0, r6
 800f620:	f004 fd6a 	bl	80140f8 <ucdr_serialize_string>
 800f624:	6862      	ldr	r2, [r4, #4]
 800f626:	3701      	adds	r7, #1
 800f628:	4297      	cmp	r7, r2
 800f62a:	d3f5      	bcc.n	800f618 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xe4>
 800f62c:	4005      	ands	r5, r0
 800f62e:	b2ed      	uxtb	r5, r5
 800f630:	e78a      	b.n	800f548 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x14>
 800f632:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 800f634:	f104 0130 	add.w	r1, r4, #48	@ 0x30
 800f638:	4630      	mov	r0, r6
 800f63a:	f004 fd31 	bl	80140a0 <ucdr_serialize_sequence_uint8_t>
 800f63e:	4005      	ands	r5, r0
 800f640:	4628      	mov	r0, r5
 800f642:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f646:	2500      	movs	r5, #0
 800f648:	e77e      	b.n	800f548 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x14>
 800f64a:	4028      	ands	r0, r5
 800f64c:	b2c5      	uxtb	r5, r0
 800f64e:	e77b      	b.n	800f548 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x14>

0800f650 <uxr_serialize_OBJK_Subscriber_Binary>:
 800f650:	b570      	push	{r4, r5, r6, lr}
 800f652:	460d      	mov	r5, r1
 800f654:	7809      	ldrb	r1, [r1, #0]
 800f656:	4606      	mov	r6, r0
 800f658:	f7fc f92e 	bl	800b8b8 <ucdr_serialize_bool>
 800f65c:	782b      	ldrb	r3, [r5, #0]
 800f65e:	4604      	mov	r4, r0
 800f660:	b94b      	cbnz	r3, 800f676 <uxr_serialize_OBJK_Subscriber_Binary+0x26>
 800f662:	7a29      	ldrb	r1, [r5, #8]
 800f664:	4630      	mov	r0, r6
 800f666:	f7fc f927 	bl	800b8b8 <ucdr_serialize_bool>
 800f66a:	7a2b      	ldrb	r3, [r5, #8]
 800f66c:	4004      	ands	r4, r0
 800f66e:	b2e4      	uxtb	r4, r4
 800f670:	b943      	cbnz	r3, 800f684 <uxr_serialize_OBJK_Subscriber_Binary+0x34>
 800f672:	4620      	mov	r0, r4
 800f674:	bd70      	pop	{r4, r5, r6, pc}
 800f676:	6869      	ldr	r1, [r5, #4]
 800f678:	4630      	mov	r0, r6
 800f67a:	f004 fd3d 	bl	80140f8 <ucdr_serialize_string>
 800f67e:	4004      	ands	r4, r0
 800f680:	b2e4      	uxtb	r4, r4
 800f682:	e7ee      	b.n	800f662 <uxr_serialize_OBJK_Subscriber_Binary+0x12>
 800f684:	f105 010c 	add.w	r1, r5, #12
 800f688:	4630      	mov	r0, r6
 800f68a:	f7ff ff53 	bl	800f534 <uxr_serialize_OBJK_Subscriber_Binary_Qos>
 800f68e:	4004      	ands	r4, r0
 800f690:	4620      	mov	r0, r4
 800f692:	bd70      	pop	{r4, r5, r6, pc}

0800f694 <uxr_serialize_OBJK_Endpoint_QosBinary>:
 800f694:	e92d 4368 	stmdb	sp!, {r3, r5, r6, r8, r9, lr}
 800f698:	4688      	mov	r8, r1
 800f69a:	8809      	ldrh	r1, [r1, #0]
 800f69c:	4681      	mov	r9, r0
 800f69e:	f7fc f965 	bl	800b96c <ucdr_serialize_uint16_t>
 800f6a2:	f898 1002 	ldrb.w	r1, [r8, #2]
 800f6a6:	4606      	mov	r6, r0
 800f6a8:	4648      	mov	r0, r9
 800f6aa:	f7fc f905 	bl	800b8b8 <ucdr_serialize_bool>
 800f6ae:	f898 3002 	ldrb.w	r3, [r8, #2]
 800f6b2:	4006      	ands	r6, r0
 800f6b4:	b2f5      	uxtb	r5, r6
 800f6b6:	b9eb      	cbnz	r3, 800f6f4 <uxr_serialize_OBJK_Endpoint_QosBinary+0x60>
 800f6b8:	f898 1006 	ldrb.w	r1, [r8, #6]
 800f6bc:	4648      	mov	r0, r9
 800f6be:	f7fc f8fb 	bl	800b8b8 <ucdr_serialize_bool>
 800f6c2:	f898 3006 	ldrb.w	r3, [r8, #6]
 800f6c6:	4005      	ands	r5, r0
 800f6c8:	bb7b      	cbnz	r3, 800f72a <uxr_serialize_OBJK_Endpoint_QosBinary+0x96>
 800f6ca:	f898 100c 	ldrb.w	r1, [r8, #12]
 800f6ce:	4648      	mov	r0, r9
 800f6d0:	f7fc f8f2 	bl	800b8b8 <ucdr_serialize_bool>
 800f6d4:	f898 300c 	ldrb.w	r3, [r8, #12]
 800f6d8:	4005      	ands	r5, r0
 800f6da:	b9f3      	cbnz	r3, 800f71a <uxr_serialize_OBJK_Endpoint_QosBinary+0x86>
 800f6dc:	f898 1014 	ldrb.w	r1, [r8, #20]
 800f6e0:	4648      	mov	r0, r9
 800f6e2:	f7fc f8e9 	bl	800b8b8 <ucdr_serialize_bool>
 800f6e6:	f898 3014 	ldrb.w	r3, [r8, #20]
 800f6ea:	4005      	ands	r5, r0
 800f6ec:	b94b      	cbnz	r3, 800f702 <uxr_serialize_OBJK_Endpoint_QosBinary+0x6e>
 800f6ee:	4628      	mov	r0, r5
 800f6f0:	e8bd 8368 	ldmia.w	sp!, {r3, r5, r6, r8, r9, pc}
 800f6f4:	f8b8 1004 	ldrh.w	r1, [r8, #4]
 800f6f8:	4648      	mov	r0, r9
 800f6fa:	f7fc f937 	bl	800b96c <ucdr_serialize_uint16_t>
 800f6fe:	4005      	ands	r5, r0
 800f700:	e7da      	b.n	800f6b8 <uxr_serialize_OBJK_Endpoint_QosBinary+0x24>
 800f702:	f8d8 2018 	ldr.w	r2, [r8, #24]
 800f706:	f108 011c 	add.w	r1, r8, #28
 800f70a:	4648      	mov	r0, r9
 800f70c:	f004 fcc8 	bl	80140a0 <ucdr_serialize_sequence_uint8_t>
 800f710:	4028      	ands	r0, r5
 800f712:	b2c5      	uxtb	r5, r0
 800f714:	4628      	mov	r0, r5
 800f716:	e8bd 8368 	ldmia.w	sp!, {r3, r5, r6, r8, r9, pc}
 800f71a:	f8d8 1010 	ldr.w	r1, [r8, #16]
 800f71e:	4648      	mov	r0, r9
 800f720:	f7fc fb0e 	bl	800bd40 <ucdr_serialize_uint32_t>
 800f724:	4028      	ands	r0, r5
 800f726:	b2c5      	uxtb	r5, r0
 800f728:	e7d8      	b.n	800f6dc <uxr_serialize_OBJK_Endpoint_QosBinary+0x48>
 800f72a:	f8d8 1008 	ldr.w	r1, [r8, #8]
 800f72e:	4648      	mov	r0, r9
 800f730:	f7fc fb06 	bl	800bd40 <ucdr_serialize_uint32_t>
 800f734:	4028      	ands	r0, r5
 800f736:	b2c5      	uxtb	r5, r0
 800f738:	e7c7      	b.n	800f6ca <uxr_serialize_OBJK_Endpoint_QosBinary+0x36>
 800f73a:	bf00      	nop

0800f73c <uxr_serialize_OBJK_DataReader_Binary>:
 800f73c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f73e:	2202      	movs	r2, #2
 800f740:	460c      	mov	r4, r1
 800f742:	4606      	mov	r6, r0
 800f744:	f004 fbb8 	bl	8013eb8 <ucdr_serialize_array_uint8_t>
 800f748:	78a1      	ldrb	r1, [r4, #2]
 800f74a:	4605      	mov	r5, r0
 800f74c:	4630      	mov	r0, r6
 800f74e:	f7fc f8b3 	bl	800b8b8 <ucdr_serialize_bool>
 800f752:	78a3      	ldrb	r3, [r4, #2]
 800f754:	4005      	ands	r5, r0
 800f756:	b2ed      	uxtb	r5, r5
 800f758:	b90b      	cbnz	r3, 800f75e <uxr_serialize_OBJK_DataReader_Binary+0x22>
 800f75a:	4628      	mov	r0, r5
 800f75c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f75e:	f104 0108 	add.w	r1, r4, #8
 800f762:	4630      	mov	r0, r6
 800f764:	f7ff ff96 	bl	800f694 <uxr_serialize_OBJK_Endpoint_QosBinary>
 800f768:	f894 102c 	ldrb.w	r1, [r4, #44]	@ 0x2c
 800f76c:	4607      	mov	r7, r0
 800f76e:	4630      	mov	r0, r6
 800f770:	f7fc f8a2 	bl	800b8b8 <ucdr_serialize_bool>
 800f774:	f894 302c 	ldrb.w	r3, [r4, #44]	@ 0x2c
 800f778:	4038      	ands	r0, r7
 800f77a:	b2c7      	uxtb	r7, r0
 800f77c:	b95b      	cbnz	r3, 800f796 <uxr_serialize_OBJK_DataReader_Binary+0x5a>
 800f77e:	f894 1038 	ldrb.w	r1, [r4, #56]	@ 0x38
 800f782:	4630      	mov	r0, r6
 800f784:	f7fc f898 	bl	800b8b8 <ucdr_serialize_bool>
 800f788:	f894 3038 	ldrb.w	r3, [r4, #56]	@ 0x38
 800f78c:	4007      	ands	r7, r0
 800f78e:	b94b      	cbnz	r3, 800f7a4 <uxr_serialize_OBJK_DataReader_Binary+0x68>
 800f790:	403d      	ands	r5, r7
 800f792:	4628      	mov	r0, r5
 800f794:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f796:	e9d4 230c 	ldrd	r2, r3, [r4, #48]	@ 0x30
 800f79a:	4630      	mov	r0, r6
 800f79c:	f7fc fd26 	bl	800c1ec <ucdr_serialize_uint64_t>
 800f7a0:	4007      	ands	r7, r0
 800f7a2:	e7ec      	b.n	800f77e <uxr_serialize_OBJK_DataReader_Binary+0x42>
 800f7a4:	6be1      	ldr	r1, [r4, #60]	@ 0x3c
 800f7a6:	4630      	mov	r0, r6
 800f7a8:	f004 fca6 	bl	80140f8 <ucdr_serialize_string>
 800f7ac:	4007      	ands	r7, r0
 800f7ae:	b2ff      	uxtb	r7, r7
 800f7b0:	e7ee      	b.n	800f790 <uxr_serialize_OBJK_DataReader_Binary+0x54>
 800f7b2:	bf00      	nop

0800f7b4 <uxr_deserialize_ObjectVariant>:
 800f7b4:	b570      	push	{r4, r5, r6, lr}
 800f7b6:	4605      	mov	r5, r0
 800f7b8:	460e      	mov	r6, r1
 800f7ba:	f7fc f8c1 	bl	800b940 <ucdr_deserialize_uint8_t>
 800f7be:	b168      	cbz	r0, 800f7dc <uxr_deserialize_ObjectVariant+0x28>
 800f7c0:	7833      	ldrb	r3, [r6, #0]
 800f7c2:	3b01      	subs	r3, #1
 800f7c4:	4604      	mov	r4, r0
 800f7c6:	2b0d      	cmp	r3, #13
 800f7c8:	d809      	bhi.n	800f7de <uxr_deserialize_ObjectVariant+0x2a>
 800f7ca:	e8df f003 	tbb	[pc, r3]
 800f7ce:	0a41      	.short	0x0a41
 800f7d0:	0a0a2323 	.word	0x0a0a2323
 800f7d4:	10080a0a 	.word	0x10080a0a
 800f7d8:	565c1010 	.word	0x565c1010
 800f7dc:	2400      	movs	r4, #0
 800f7de:	4620      	mov	r0, r4
 800f7e0:	bd70      	pop	{r4, r5, r6, pc}
 800f7e2:	1d31      	adds	r1, r6, #4
 800f7e4:	4628      	mov	r0, r5
 800f7e6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800f7ea:	f7ff be31 	b.w	800f450 <uxr_deserialize_DATAWRITER_Representation>
 800f7ee:	1d31      	adds	r1, r6, #4
 800f7f0:	4628      	mov	r0, r5
 800f7f2:	f7fc f8a5 	bl	800b940 <ucdr_deserialize_uint8_t>
 800f7f6:	2800      	cmp	r0, #0
 800f7f8:	d0f0      	beq.n	800f7dc <uxr_deserialize_ObjectVariant+0x28>
 800f7fa:	7933      	ldrb	r3, [r6, #4]
 800f7fc:	2b01      	cmp	r3, #1
 800f7fe:	d001      	beq.n	800f804 <uxr_deserialize_ObjectVariant+0x50>
 800f800:	2b02      	cmp	r3, #2
 800f802:	d1ec      	bne.n	800f7de <uxr_deserialize_ObjectVariant+0x2a>
 800f804:	68b1      	ldr	r1, [r6, #8]
 800f806:	4628      	mov	r0, r5
 800f808:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800f80c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800f810:	f004 bc82 	b.w	8014118 <ucdr_deserialize_string>
 800f814:	1d31      	adds	r1, r6, #4
 800f816:	4628      	mov	r0, r5
 800f818:	f7fc f892 	bl	800b940 <ucdr_deserialize_uint8_t>
 800f81c:	4604      	mov	r4, r0
 800f81e:	b170      	cbz	r0, 800f83e <uxr_deserialize_ObjectVariant+0x8a>
 800f820:	7933      	ldrb	r3, [r6, #4]
 800f822:	2b02      	cmp	r3, #2
 800f824:	d04c      	beq.n	800f8c0 <uxr_deserialize_ObjectVariant+0x10c>
 800f826:	2b03      	cmp	r3, #3
 800f828:	d109      	bne.n	800f83e <uxr_deserialize_ObjectVariant+0x8a>
 800f82a:	f106 0308 	add.w	r3, r6, #8
 800f82e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800f832:	f106 010c 	add.w	r1, r6, #12
 800f836:	4628      	mov	r0, r5
 800f838:	f004 fc44 	bl	80140c4 <ucdr_deserialize_sequence_uint8_t>
 800f83c:	4604      	mov	r4, r0
 800f83e:	2202      	movs	r2, #2
 800f840:	f506 7103 	add.w	r1, r6, #524	@ 0x20c
 800f844:	4628      	mov	r0, r5
 800f846:	f004 fb9b 	bl	8013f80 <ucdr_deserialize_array_uint8_t>
 800f84a:	4020      	ands	r0, r4
 800f84c:	b2c4      	uxtb	r4, r0
 800f84e:	e7c6      	b.n	800f7de <uxr_deserialize_ObjectVariant+0x2a>
 800f850:	1d31      	adds	r1, r6, #4
 800f852:	4628      	mov	r0, r5
 800f854:	f7fc f874 	bl	800b940 <ucdr_deserialize_uint8_t>
 800f858:	4604      	mov	r4, r0
 800f85a:	b130      	cbz	r0, 800f86a <uxr_deserialize_ObjectVariant+0xb6>
 800f85c:	7933      	ldrb	r3, [r6, #4]
 800f85e:	2b02      	cmp	r3, #2
 800f860:	d036      	beq.n	800f8d0 <uxr_deserialize_ObjectVariant+0x11c>
 800f862:	2b03      	cmp	r3, #3
 800f864:	d03c      	beq.n	800f8e0 <uxr_deserialize_ObjectVariant+0x12c>
 800f866:	2b01      	cmp	r3, #1
 800f868:	d032      	beq.n	800f8d0 <uxr_deserialize_ObjectVariant+0x11c>
 800f86a:	f506 7103 	add.w	r1, r6, #524	@ 0x20c
 800f86e:	4628      	mov	r0, r5
 800f870:	f7fc fe0c 	bl	800c48c <ucdr_deserialize_int16_t>
 800f874:	4020      	ands	r0, r4
 800f876:	b2c4      	uxtb	r4, r0
 800f878:	e7b1      	b.n	800f7de <uxr_deserialize_ObjectVariant+0x2a>
 800f87a:	1d31      	adds	r1, r6, #4
 800f87c:	4628      	mov	r0, r5
 800f87e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800f882:	f7ff bc9b 	b.w	800f1bc <uxr_deserialize_CLIENT_Representation>
 800f886:	2204      	movs	r2, #4
 800f888:	18b1      	adds	r1, r6, r2
 800f88a:	4628      	mov	r0, r5
 800f88c:	f004 fb78 	bl	8013f80 <ucdr_deserialize_array_uint8_t>
 800f890:	2202      	movs	r2, #2
 800f892:	f106 0108 	add.w	r1, r6, #8
 800f896:	4604      	mov	r4, r0
 800f898:	4628      	mov	r0, r5
 800f89a:	f004 fb71 	bl	8013f80 <ucdr_deserialize_array_uint8_t>
 800f89e:	2202      	movs	r2, #2
 800f8a0:	4004      	ands	r4, r0
 800f8a2:	f106 010a 	add.w	r1, r6, #10
 800f8a6:	4628      	mov	r0, r5
 800f8a8:	f004 fb6a 	bl	8013f80 <ucdr_deserialize_array_uint8_t>
 800f8ac:	b2e4      	uxtb	r4, r4
 800f8ae:	4603      	mov	r3, r0
 800f8b0:	f106 010c 	add.w	r1, r6, #12
 800f8b4:	4628      	mov	r0, r5
 800f8b6:	401c      	ands	r4, r3
 800f8b8:	f7fc f814 	bl	800b8e4 <ucdr_deserialize_bool>
 800f8bc:	4004      	ands	r4, r0
 800f8be:	e78e      	b.n	800f7de <uxr_deserialize_ObjectVariant+0x2a>
 800f8c0:	68b1      	ldr	r1, [r6, #8]
 800f8c2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800f8c6:	4628      	mov	r0, r5
 800f8c8:	f004 fc26 	bl	8014118 <ucdr_deserialize_string>
 800f8cc:	4604      	mov	r4, r0
 800f8ce:	e7b6      	b.n	800f83e <uxr_deserialize_ObjectVariant+0x8a>
 800f8d0:	68b1      	ldr	r1, [r6, #8]
 800f8d2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800f8d6:	4628      	mov	r0, r5
 800f8d8:	f004 fc1e 	bl	8014118 <ucdr_deserialize_string>
 800f8dc:	4604      	mov	r4, r0
 800f8de:	e7c4      	b.n	800f86a <uxr_deserialize_ObjectVariant+0xb6>
 800f8e0:	f106 0308 	add.w	r3, r6, #8
 800f8e4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800f8e8:	f106 010c 	add.w	r1, r6, #12
 800f8ec:	4628      	mov	r0, r5
 800f8ee:	f004 fbe9 	bl	80140c4 <ucdr_deserialize_sequence_uint8_t>
 800f8f2:	4604      	mov	r4, r0
 800f8f4:	e7b9      	b.n	800f86a <uxr_deserialize_ObjectVariant+0xb6>
 800f8f6:	bf00      	nop

0800f8f8 <uxr_deserialize_BaseObjectRequest>:
 800f8f8:	b570      	push	{r4, r5, r6, lr}
 800f8fa:	2202      	movs	r2, #2
 800f8fc:	4605      	mov	r5, r0
 800f8fe:	460e      	mov	r6, r1
 800f900:	f004 fb3e 	bl	8013f80 <ucdr_deserialize_array_uint8_t>
 800f904:	2202      	movs	r2, #2
 800f906:	4604      	mov	r4, r0
 800f908:	18b1      	adds	r1, r6, r2
 800f90a:	4628      	mov	r0, r5
 800f90c:	f004 fb38 	bl	8013f80 <ucdr_deserialize_array_uint8_t>
 800f910:	4020      	ands	r0, r4
 800f912:	b2c0      	uxtb	r0, r0
 800f914:	bd70      	pop	{r4, r5, r6, pc}
 800f916:	bf00      	nop

0800f918 <uxr_serialize_ActivityInfoVariant>:
 800f918:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f91c:	460d      	mov	r5, r1
 800f91e:	7809      	ldrb	r1, [r1, #0]
 800f920:	4607      	mov	r7, r0
 800f922:	f7fb fff7 	bl	800b914 <ucdr_serialize_uint8_t>
 800f926:	4681      	mov	r9, r0
 800f928:	b138      	cbz	r0, 800f93a <uxr_serialize_ActivityInfoVariant+0x22>
 800f92a:	782b      	ldrb	r3, [r5, #0]
 800f92c:	2b06      	cmp	r3, #6
 800f92e:	f000 8082 	beq.w	800fa36 <uxr_serialize_ActivityInfoVariant+0x11e>
 800f932:	2b0d      	cmp	r3, #13
 800f934:	d016      	beq.n	800f964 <uxr_serialize_ActivityInfoVariant+0x4c>
 800f936:	2b05      	cmp	r3, #5
 800f938:	d002      	beq.n	800f940 <uxr_serialize_ActivityInfoVariant+0x28>
 800f93a:	4648      	mov	r0, r9
 800f93c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f940:	f9b5 1008 	ldrsh.w	r1, [r5, #8]
 800f944:	4638      	mov	r0, r7
 800f946:	f7fc fd21 	bl	800c38c <ucdr_serialize_int16_t>
 800f94a:	e9d5 2304 	ldrd	r2, r3, [r5, #16]
 800f94e:	4681      	mov	r9, r0
 800f950:	4638      	mov	r0, r7
 800f952:	f7fc fc4b 	bl	800c1ec <ucdr_serialize_uint64_t>
 800f956:	ea09 0000 	and.w	r0, r9, r0
 800f95a:	fa5f f980 	uxtb.w	r9, r0
 800f95e:	4648      	mov	r0, r9
 800f960:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f964:	f9b5 1008 	ldrsh.w	r1, [r5, #8]
 800f968:	4638      	mov	r0, r7
 800f96a:	f7fc fd0f 	bl	800c38c <ucdr_serialize_int16_t>
 800f96e:	68e9      	ldr	r1, [r5, #12]
 800f970:	4681      	mov	r9, r0
 800f972:	4638      	mov	r0, r7
 800f974:	f7fc f9e4 	bl	800bd40 <ucdr_serialize_uint32_t>
 800f978:	68eb      	ldr	r3, [r5, #12]
 800f97a:	2b00      	cmp	r3, #0
 800f97c:	d0eb      	beq.n	800f956 <uxr_serialize_ActivityInfoVariant+0x3e>
 800f97e:	b320      	cbz	r0, 800f9ca <uxr_serialize_ActivityInfoVariant+0xb2>
 800f980:	f105 080c 	add.w	r8, r5, #12
 800f984:	2600      	movs	r6, #0
 800f986:	eb06 0a46 	add.w	sl, r6, r6, lsl #1
 800f98a:	eb05 0aca 	add.w	sl, r5, sl, lsl #3
 800f98e:	f89a 1010 	ldrb.w	r1, [sl, #16]
 800f992:	4638      	mov	r0, r7
 800f994:	f7fb ffbe 	bl	800b914 <ucdr_serialize_uint8_t>
 800f998:	2800      	cmp	r0, #0
 800f99a:	d053      	beq.n	800fa44 <uxr_serialize_ActivityInfoVariant+0x12c>
 800f99c:	f89a 3010 	ldrb.w	r3, [sl, #16]
 800f9a0:	eb06 0146 	add.w	r1, r6, r6, lsl #1
 800f9a4:	0074      	lsls	r4, r6, #1
 800f9a6:	00c9      	lsls	r1, r1, #3
 800f9a8:	2b03      	cmp	r3, #3
 800f9aa:	d854      	bhi.n	800fa56 <uxr_serialize_ActivityInfoVariant+0x13e>
 800f9ac:	e8df f003 	tbb	[pc, r3]
 800f9b0:	02102132 	.word	0x02102132
 800f9b4:	4441      	add	r1, r8
 800f9b6:	4638      	mov	r0, r7
 800f9b8:	6889      	ldr	r1, [r1, #8]
 800f9ba:	f004 fb9d 	bl	80140f8 <ucdr_serialize_string>
 800f9be:	68ea      	ldr	r2, [r5, #12]
 800f9c0:	3601      	adds	r6, #1
 800f9c2:	4296      	cmp	r6, r2
 800f9c4:	d242      	bcs.n	800fa4c <uxr_serialize_ActivityInfoVariant+0x134>
 800f9c6:	2800      	cmp	r0, #0
 800f9c8:	d1dd      	bne.n	800f986 <uxr_serialize_ActivityInfoVariant+0x6e>
 800f9ca:	f04f 0900 	mov.w	r9, #0
 800f9ce:	e7b4      	b.n	800f93a <uxr_serialize_ActivityInfoVariant+0x22>
 800f9d0:	3108      	adds	r1, #8
 800f9d2:	4441      	add	r1, r8
 800f9d4:	2210      	movs	r2, #16
 800f9d6:	4638      	mov	r0, r7
 800f9d8:	f004 fa6e 	bl	8013eb8 <ucdr_serialize_array_uint8_t>
 800f9dc:	4434      	add	r4, r6
 800f9de:	eb05 03c4 	add.w	r3, r5, r4, lsl #3
 800f9e2:	4604      	mov	r4, r0
 800f9e4:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 800f9e6:	4638      	mov	r0, r7
 800f9e8:	f7fc f9aa 	bl	800bd40 <ucdr_serialize_uint32_t>
 800f9ec:	4020      	ands	r0, r4
 800f9ee:	b2c0      	uxtb	r0, r0
 800f9f0:	e7e5      	b.n	800f9be <uxr_serialize_ActivityInfoVariant+0xa6>
 800f9f2:	3108      	adds	r1, #8
 800f9f4:	4441      	add	r1, r8
 800f9f6:	2204      	movs	r2, #4
 800f9f8:	4638      	mov	r0, r7
 800f9fa:	f004 fa5d 	bl	8013eb8 <ucdr_serialize_array_uint8_t>
 800f9fe:	4434      	add	r4, r6
 800fa00:	eb05 03c4 	add.w	r3, r5, r4, lsl #3
 800fa04:	4604      	mov	r4, r0
 800fa06:	8b19      	ldrh	r1, [r3, #24]
 800fa08:	4638      	mov	r0, r7
 800fa0a:	f7fb ffaf 	bl	800b96c <ucdr_serialize_uint16_t>
 800fa0e:	4020      	ands	r0, r4
 800fa10:	b2c0      	uxtb	r0, r0
 800fa12:	e7d4      	b.n	800f9be <uxr_serialize_ActivityInfoVariant+0xa6>
 800fa14:	3108      	adds	r1, #8
 800fa16:	4441      	add	r1, r8
 800fa18:	2202      	movs	r2, #2
 800fa1a:	4638      	mov	r0, r7
 800fa1c:	f004 fa4c 	bl	8013eb8 <ucdr_serialize_array_uint8_t>
 800fa20:	4434      	add	r4, r6
 800fa22:	eb05 03c4 	add.w	r3, r5, r4, lsl #3
 800fa26:	4604      	mov	r4, r0
 800fa28:	7d99      	ldrb	r1, [r3, #22]
 800fa2a:	4638      	mov	r0, r7
 800fa2c:	f7fb ff72 	bl	800b914 <ucdr_serialize_uint8_t>
 800fa30:	4020      	ands	r0, r4
 800fa32:	b2c0      	uxtb	r0, r0
 800fa34:	e7c3      	b.n	800f9be <uxr_serialize_ActivityInfoVariant+0xa6>
 800fa36:	f9b5 1008 	ldrsh.w	r1, [r5, #8]
 800fa3a:	4638      	mov	r0, r7
 800fa3c:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800fa40:	f7fc bca4 	b.w	800c38c <ucdr_serialize_int16_t>
 800fa44:	68ea      	ldr	r2, [r5, #12]
 800fa46:	3601      	adds	r6, #1
 800fa48:	42b2      	cmp	r2, r6
 800fa4a:	d8be      	bhi.n	800f9ca <uxr_serialize_ActivityInfoVariant+0xb2>
 800fa4c:	ea09 0900 	and.w	r9, r9, r0
 800fa50:	fa5f f989 	uxtb.w	r9, r9
 800fa54:	e771      	b.n	800f93a <uxr_serialize_ActivityInfoVariant+0x22>
 800fa56:	68eb      	ldr	r3, [r5, #12]
 800fa58:	3601      	adds	r6, #1
 800fa5a:	429e      	cmp	r6, r3
 800fa5c:	f10a 0a18 	add.w	sl, sl, #24
 800fa60:	d395      	bcc.n	800f98e <uxr_serialize_ActivityInfoVariant+0x76>
 800fa62:	e76a      	b.n	800f93a <uxr_serialize_ActivityInfoVariant+0x22>

0800fa64 <uxr_deserialize_BaseObjectReply>:
 800fa64:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fa68:	2202      	movs	r2, #2
 800fa6a:	4606      	mov	r6, r0
 800fa6c:	460f      	mov	r7, r1
 800fa6e:	f004 fa87 	bl	8013f80 <ucdr_deserialize_array_uint8_t>
 800fa72:	2202      	movs	r2, #2
 800fa74:	18b9      	adds	r1, r7, r2
 800fa76:	4605      	mov	r5, r0
 800fa78:	4630      	mov	r0, r6
 800fa7a:	f004 fa81 	bl	8013f80 <ucdr_deserialize_array_uint8_t>
 800fa7e:	1d39      	adds	r1, r7, #4
 800fa80:	4680      	mov	r8, r0
 800fa82:	4630      	mov	r0, r6
 800fa84:	f7fb ff5c 	bl	800b940 <ucdr_deserialize_uint8_t>
 800fa88:	1d79      	adds	r1, r7, #5
 800fa8a:	4604      	mov	r4, r0
 800fa8c:	4630      	mov	r0, r6
 800fa8e:	f7fb ff57 	bl	800b940 <ucdr_deserialize_uint8_t>
 800fa92:	ea05 0508 	and.w	r5, r5, r8
 800fa96:	402c      	ands	r4, r5
 800fa98:	4020      	ands	r0, r4
 800fa9a:	b2c0      	uxtb	r0, r0
 800fa9c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800faa0 <uxr_serialize_ReadSpecification>:
 800faa0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800faa4:	460e      	mov	r6, r1
 800faa6:	7809      	ldrb	r1, [r1, #0]
 800faa8:	4607      	mov	r7, r0
 800faaa:	f7fb ff33 	bl	800b914 <ucdr_serialize_uint8_t>
 800faae:	7871      	ldrb	r1, [r6, #1]
 800fab0:	4604      	mov	r4, r0
 800fab2:	4638      	mov	r0, r7
 800fab4:	f7fb ff2e 	bl	800b914 <ucdr_serialize_uint8_t>
 800fab8:	78b1      	ldrb	r1, [r6, #2]
 800faba:	4004      	ands	r4, r0
 800fabc:	4638      	mov	r0, r7
 800fabe:	f7fb fefb 	bl	800b8b8 <ucdr_serialize_bool>
 800fac2:	78b3      	ldrb	r3, [r6, #2]
 800fac4:	b2e4      	uxtb	r4, r4
 800fac6:	4004      	ands	r4, r0
 800fac8:	b94b      	cbnz	r3, 800fade <uxr_serialize_ReadSpecification+0x3e>
 800faca:	7a31      	ldrb	r1, [r6, #8]
 800facc:	4638      	mov	r0, r7
 800face:	f7fb fef3 	bl	800b8b8 <ucdr_serialize_bool>
 800fad2:	7a33      	ldrb	r3, [r6, #8]
 800fad4:	4004      	ands	r4, r0
 800fad6:	b943      	cbnz	r3, 800faea <uxr_serialize_ReadSpecification+0x4a>
 800fad8:	4620      	mov	r0, r4
 800fada:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800fade:	6871      	ldr	r1, [r6, #4]
 800fae0:	4638      	mov	r0, r7
 800fae2:	f004 fb09 	bl	80140f8 <ucdr_serialize_string>
 800fae6:	4004      	ands	r4, r0
 800fae8:	e7ef      	b.n	800faca <uxr_serialize_ReadSpecification+0x2a>
 800faea:	8971      	ldrh	r1, [r6, #10]
 800faec:	4638      	mov	r0, r7
 800faee:	f7fb ff3d 	bl	800b96c <ucdr_serialize_uint16_t>
 800faf2:	89b1      	ldrh	r1, [r6, #12]
 800faf4:	4605      	mov	r5, r0
 800faf6:	4638      	mov	r0, r7
 800faf8:	f7fb ff38 	bl	800b96c <ucdr_serialize_uint16_t>
 800fafc:	89f1      	ldrh	r1, [r6, #14]
 800fafe:	4005      	ands	r5, r0
 800fb00:	4638      	mov	r0, r7
 800fb02:	f7fb ff33 	bl	800b96c <ucdr_serialize_uint16_t>
 800fb06:	8a31      	ldrh	r1, [r6, #16]
 800fb08:	4680      	mov	r8, r0
 800fb0a:	4638      	mov	r0, r7
 800fb0c:	f7fb ff2e 	bl	800b96c <ucdr_serialize_uint16_t>
 800fb10:	b2ed      	uxtb	r5, r5
 800fb12:	4025      	ands	r5, r4
 800fb14:	ea08 0505 	and.w	r5, r8, r5
 800fb18:	ea00 0405 	and.w	r4, r0, r5
 800fb1c:	4620      	mov	r0, r4
 800fb1e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800fb22:	bf00      	nop

0800fb24 <uxr_serialize_CREATE_CLIENT_Payload>:
 800fb24:	f7ff baf2 	b.w	800f10c <uxr_serialize_CLIENT_Representation>

0800fb28 <uxr_serialize_CREATE_Payload>:
 800fb28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fb2a:	2202      	movs	r2, #2
 800fb2c:	4607      	mov	r7, r0
 800fb2e:	460e      	mov	r6, r1
 800fb30:	f004 f9c2 	bl	8013eb8 <ucdr_serialize_array_uint8_t>
 800fb34:	2202      	movs	r2, #2
 800fb36:	18b1      	adds	r1, r6, r2
 800fb38:	4605      	mov	r5, r0
 800fb3a:	4638      	mov	r0, r7
 800fb3c:	f004 f9bc 	bl	8013eb8 <ucdr_serialize_array_uint8_t>
 800fb40:	7931      	ldrb	r1, [r6, #4]
 800fb42:	4604      	mov	r4, r0
 800fb44:	4638      	mov	r0, r7
 800fb46:	f7fb fee5 	bl	800b914 <ucdr_serialize_uint8_t>
 800fb4a:	b170      	cbz	r0, 800fb6a <uxr_serialize_CREATE_Payload+0x42>
 800fb4c:	7933      	ldrb	r3, [r6, #4]
 800fb4e:	402c      	ands	r4, r5
 800fb50:	3b01      	subs	r3, #1
 800fb52:	b2e4      	uxtb	r4, r4
 800fb54:	2b0d      	cmp	r3, #13
 800fb56:	d809      	bhi.n	800fb6c <uxr_serialize_CREATE_Payload+0x44>
 800fb58:	e8df f003 	tbb	[pc, r3]
 800fb5c:	23230a4c 	.word	0x23230a4c
 800fb60:	0a0a0a0a 	.word	0x0a0a0a0a
 800fb64:	12121208 	.word	0x12121208
 800fb68:	3e45      	.short	0x3e45
 800fb6a:	2400      	movs	r4, #0
 800fb6c:	4620      	mov	r0, r4
 800fb6e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800fb70:	f106 0108 	add.w	r1, r6, #8
 800fb74:	4638      	mov	r0, r7
 800fb76:	f7ff fbcf 	bl	800f318 <uxr_serialize_DATAWRITER_Representation>
 800fb7a:	4004      	ands	r4, r0
 800fb7c:	4620      	mov	r0, r4
 800fb7e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800fb80:	7a31      	ldrb	r1, [r6, #8]
 800fb82:	4638      	mov	r0, r7
 800fb84:	f7fb fec6 	bl	800b914 <ucdr_serialize_uint8_t>
 800fb88:	2800      	cmp	r0, #0
 800fb8a:	d0ee      	beq.n	800fb6a <uxr_serialize_CREATE_Payload+0x42>
 800fb8c:	7a33      	ldrb	r3, [r6, #8]
 800fb8e:	2b01      	cmp	r3, #1
 800fb90:	d001      	beq.n	800fb96 <uxr_serialize_CREATE_Payload+0x6e>
 800fb92:	2b02      	cmp	r3, #2
 800fb94:	d1ea      	bne.n	800fb6c <uxr_serialize_CREATE_Payload+0x44>
 800fb96:	68f1      	ldr	r1, [r6, #12]
 800fb98:	4638      	mov	r0, r7
 800fb9a:	f004 faad 	bl	80140f8 <ucdr_serialize_string>
 800fb9e:	4004      	ands	r4, r0
 800fba0:	e7e4      	b.n	800fb6c <uxr_serialize_CREATE_Payload+0x44>
 800fba2:	7a31      	ldrb	r1, [r6, #8]
 800fba4:	4638      	mov	r0, r7
 800fba6:	f7fb feb5 	bl	800b914 <ucdr_serialize_uint8_t>
 800fbaa:	4605      	mov	r5, r0
 800fbac:	b158      	cbz	r0, 800fbc6 <uxr_serialize_CREATE_Payload+0x9e>
 800fbae:	7a33      	ldrb	r3, [r6, #8]
 800fbb0:	2b02      	cmp	r3, #2
 800fbb2:	d034      	beq.n	800fc1e <uxr_serialize_CREATE_Payload+0xf6>
 800fbb4:	2b03      	cmp	r3, #3
 800fbb6:	d106      	bne.n	800fbc6 <uxr_serialize_CREATE_Payload+0x9e>
 800fbb8:	68f2      	ldr	r2, [r6, #12]
 800fbba:	f106 0110 	add.w	r1, r6, #16
 800fbbe:	4638      	mov	r0, r7
 800fbc0:	f004 fa6e 	bl	80140a0 <ucdr_serialize_sequence_uint8_t>
 800fbc4:	4605      	mov	r5, r0
 800fbc6:	2202      	movs	r2, #2
 800fbc8:	f506 7104 	add.w	r1, r6, #528	@ 0x210
 800fbcc:	4638      	mov	r0, r7
 800fbce:	f004 f973 	bl	8013eb8 <ucdr_serialize_array_uint8_t>
 800fbd2:	4028      	ands	r0, r5
 800fbd4:	4004      	ands	r4, r0
 800fbd6:	e7c9      	b.n	800fb6c <uxr_serialize_CREATE_Payload+0x44>
 800fbd8:	f106 0108 	add.w	r1, r6, #8
 800fbdc:	4638      	mov	r0, r7
 800fbde:	f7ff fa95 	bl	800f10c <uxr_serialize_CLIENT_Representation>
 800fbe2:	4004      	ands	r4, r0
 800fbe4:	e7c2      	b.n	800fb6c <uxr_serialize_CREATE_Payload+0x44>
 800fbe6:	f106 0108 	add.w	r1, r6, #8
 800fbea:	4638      	mov	r0, r7
 800fbec:	f7ff fb4a 	bl	800f284 <uxr_serialize_AGENT_Representation>
 800fbf0:	4004      	ands	r4, r0
 800fbf2:	e7bb      	b.n	800fb6c <uxr_serialize_CREATE_Payload+0x44>
 800fbf4:	7a31      	ldrb	r1, [r6, #8]
 800fbf6:	4638      	mov	r0, r7
 800fbf8:	f7fb fe8c 	bl	800b914 <ucdr_serialize_uint8_t>
 800fbfc:	4605      	mov	r5, r0
 800fbfe:	b130      	cbz	r0, 800fc0e <uxr_serialize_CREATE_Payload+0xe6>
 800fc00:	7a33      	ldrb	r3, [r6, #8]
 800fc02:	2b02      	cmp	r3, #2
 800fc04:	d011      	beq.n	800fc2a <uxr_serialize_CREATE_Payload+0x102>
 800fc06:	2b03      	cmp	r3, #3
 800fc08:	d015      	beq.n	800fc36 <uxr_serialize_CREATE_Payload+0x10e>
 800fc0a:	2b01      	cmp	r3, #1
 800fc0c:	d00d      	beq.n	800fc2a <uxr_serialize_CREATE_Payload+0x102>
 800fc0e:	f9b6 1210 	ldrsh.w	r1, [r6, #528]	@ 0x210
 800fc12:	4638      	mov	r0, r7
 800fc14:	f7fc fbba 	bl	800c38c <ucdr_serialize_int16_t>
 800fc18:	4028      	ands	r0, r5
 800fc1a:	4004      	ands	r4, r0
 800fc1c:	e7a6      	b.n	800fb6c <uxr_serialize_CREATE_Payload+0x44>
 800fc1e:	68f1      	ldr	r1, [r6, #12]
 800fc20:	4638      	mov	r0, r7
 800fc22:	f004 fa69 	bl	80140f8 <ucdr_serialize_string>
 800fc26:	4605      	mov	r5, r0
 800fc28:	e7cd      	b.n	800fbc6 <uxr_serialize_CREATE_Payload+0x9e>
 800fc2a:	68f1      	ldr	r1, [r6, #12]
 800fc2c:	4638      	mov	r0, r7
 800fc2e:	f004 fa63 	bl	80140f8 <ucdr_serialize_string>
 800fc32:	4605      	mov	r5, r0
 800fc34:	e7eb      	b.n	800fc0e <uxr_serialize_CREATE_Payload+0xe6>
 800fc36:	68f2      	ldr	r2, [r6, #12]
 800fc38:	f106 0110 	add.w	r1, r6, #16
 800fc3c:	4638      	mov	r0, r7
 800fc3e:	f004 fa2f 	bl	80140a0 <ucdr_serialize_sequence_uint8_t>
 800fc42:	4605      	mov	r5, r0
 800fc44:	e7e3      	b.n	800fc0e <uxr_serialize_CREATE_Payload+0xe6>
 800fc46:	bf00      	nop

0800fc48 <uxr_deserialize_GET_INFO_Payload>:
 800fc48:	b570      	push	{r4, r5, r6, lr}
 800fc4a:	2202      	movs	r2, #2
 800fc4c:	4605      	mov	r5, r0
 800fc4e:	460e      	mov	r6, r1
 800fc50:	f004 f996 	bl	8013f80 <ucdr_deserialize_array_uint8_t>
 800fc54:	2202      	movs	r2, #2
 800fc56:	18b1      	adds	r1, r6, r2
 800fc58:	4604      	mov	r4, r0
 800fc5a:	4628      	mov	r0, r5
 800fc5c:	f004 f990 	bl	8013f80 <ucdr_deserialize_array_uint8_t>
 800fc60:	1d31      	adds	r1, r6, #4
 800fc62:	4004      	ands	r4, r0
 800fc64:	4628      	mov	r0, r5
 800fc66:	f7fc f99b 	bl	800bfa0 <ucdr_deserialize_uint32_t>
 800fc6a:	b2e4      	uxtb	r4, r4
 800fc6c:	4020      	ands	r0, r4
 800fc6e:	bd70      	pop	{r4, r5, r6, pc}

0800fc70 <uxr_serialize_DELETE_Payload>:
 800fc70:	b570      	push	{r4, r5, r6, lr}
 800fc72:	2202      	movs	r2, #2
 800fc74:	4605      	mov	r5, r0
 800fc76:	460e      	mov	r6, r1
 800fc78:	f004 f91e 	bl	8013eb8 <ucdr_serialize_array_uint8_t>
 800fc7c:	2202      	movs	r2, #2
 800fc7e:	4604      	mov	r4, r0
 800fc80:	18b1      	adds	r1, r6, r2
 800fc82:	4628      	mov	r0, r5
 800fc84:	f004 f918 	bl	8013eb8 <ucdr_serialize_array_uint8_t>
 800fc88:	4020      	ands	r0, r4
 800fc8a:	b2c0      	uxtb	r0, r0
 800fc8c:	bd70      	pop	{r4, r5, r6, pc}
 800fc8e:	bf00      	nop

0800fc90 <uxr_deserialize_STATUS_AGENT_Payload>:
 800fc90:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fc94:	4605      	mov	r5, r0
 800fc96:	460e      	mov	r6, r1
 800fc98:	f7fb fe52 	bl	800b940 <ucdr_deserialize_uint8_t>
 800fc9c:	1c71      	adds	r1, r6, #1
 800fc9e:	4604      	mov	r4, r0
 800fca0:	4628      	mov	r0, r5
 800fca2:	f7fb fe4d 	bl	800b940 <ucdr_deserialize_uint8_t>
 800fca6:	2204      	movs	r2, #4
 800fca8:	18b1      	adds	r1, r6, r2
 800fcaa:	4680      	mov	r8, r0
 800fcac:	4628      	mov	r0, r5
 800fcae:	f004 f967 	bl	8013f80 <ucdr_deserialize_array_uint8_t>
 800fcb2:	f106 0108 	add.w	r1, r6, #8
 800fcb6:	4607      	mov	r7, r0
 800fcb8:	2202      	movs	r2, #2
 800fcba:	4628      	mov	r0, r5
 800fcbc:	f004 f960 	bl	8013f80 <ucdr_deserialize_array_uint8_t>
 800fcc0:	ea04 0308 	and.w	r3, r4, r8
 800fcc4:	b2db      	uxtb	r3, r3
 800fcc6:	ea03 0407 	and.w	r4, r3, r7
 800fcca:	2202      	movs	r2, #2
 800fccc:	4607      	mov	r7, r0
 800fcce:	f106 010a 	add.w	r1, r6, #10
 800fcd2:	4628      	mov	r0, r5
 800fcd4:	f004 f954 	bl	8013f80 <ucdr_deserialize_array_uint8_t>
 800fcd8:	f106 010c 	add.w	r1, r6, #12
 800fcdc:	4603      	mov	r3, r0
 800fcde:	4628      	mov	r0, r5
 800fce0:	461d      	mov	r5, r3
 800fce2:	f7fb fdff 	bl	800b8e4 <ucdr_deserialize_bool>
 800fce6:	403c      	ands	r4, r7
 800fce8:	4025      	ands	r5, r4
 800fcea:	4028      	ands	r0, r5
 800fcec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800fcf0 <uxr_deserialize_STATUS_Payload>:
 800fcf0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fcf4:	2202      	movs	r2, #2
 800fcf6:	4606      	mov	r6, r0
 800fcf8:	460f      	mov	r7, r1
 800fcfa:	f004 f941 	bl	8013f80 <ucdr_deserialize_array_uint8_t>
 800fcfe:	2202      	movs	r2, #2
 800fd00:	18b9      	adds	r1, r7, r2
 800fd02:	4605      	mov	r5, r0
 800fd04:	4630      	mov	r0, r6
 800fd06:	f004 f93b 	bl	8013f80 <ucdr_deserialize_array_uint8_t>
 800fd0a:	1d39      	adds	r1, r7, #4
 800fd0c:	4680      	mov	r8, r0
 800fd0e:	4630      	mov	r0, r6
 800fd10:	f7fb fe16 	bl	800b940 <ucdr_deserialize_uint8_t>
 800fd14:	1d79      	adds	r1, r7, #5
 800fd16:	4604      	mov	r4, r0
 800fd18:	4630      	mov	r0, r6
 800fd1a:	f7fb fe11 	bl	800b940 <ucdr_deserialize_uint8_t>
 800fd1e:	ea05 0508 	and.w	r5, r5, r8
 800fd22:	402c      	ands	r4, r5
 800fd24:	4020      	ands	r0, r4
 800fd26:	b2c0      	uxtb	r0, r0
 800fd28:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800fd2c <uxr_serialize_INFO_Payload>:
 800fd2c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fd30:	2202      	movs	r2, #2
 800fd32:	460c      	mov	r4, r1
 800fd34:	4605      	mov	r5, r0
 800fd36:	f004 f8bf 	bl	8013eb8 <ucdr_serialize_array_uint8_t>
 800fd3a:	2202      	movs	r2, #2
 800fd3c:	18a1      	adds	r1, r4, r2
 800fd3e:	4680      	mov	r8, r0
 800fd40:	4628      	mov	r0, r5
 800fd42:	f004 f8b9 	bl	8013eb8 <ucdr_serialize_array_uint8_t>
 800fd46:	7921      	ldrb	r1, [r4, #4]
 800fd48:	4607      	mov	r7, r0
 800fd4a:	4628      	mov	r0, r5
 800fd4c:	f7fb fde2 	bl	800b914 <ucdr_serialize_uint8_t>
 800fd50:	7961      	ldrb	r1, [r4, #5]
 800fd52:	4606      	mov	r6, r0
 800fd54:	4628      	mov	r0, r5
 800fd56:	f7fb fddd 	bl	800b914 <ucdr_serialize_uint8_t>
 800fd5a:	ea08 0807 	and.w	r8, r8, r7
 800fd5e:	ea06 0608 	and.w	r6, r6, r8
 800fd62:	4006      	ands	r6, r0
 800fd64:	7a21      	ldrb	r1, [r4, #8]
 800fd66:	4628      	mov	r0, r5
 800fd68:	f7fb fda6 	bl	800b8b8 <ucdr_serialize_bool>
 800fd6c:	7a23      	ldrb	r3, [r4, #8]
 800fd6e:	b2f7      	uxtb	r7, r6
 800fd70:	4606      	mov	r6, r0
 800fd72:	b96b      	cbnz	r3, 800fd90 <uxr_serialize_INFO_Payload+0x64>
 800fd74:	f894 121c 	ldrb.w	r1, [r4, #540]	@ 0x21c
 800fd78:	4628      	mov	r0, r5
 800fd7a:	f7fb fd9d 	bl	800b8b8 <ucdr_serialize_bool>
 800fd7e:	f894 321c 	ldrb.w	r3, [r4, #540]	@ 0x21c
 800fd82:	4030      	ands	r0, r6
 800fd84:	b2c6      	uxtb	r6, r0
 800fd86:	b983      	cbnz	r3, 800fdaa <uxr_serialize_INFO_Payload+0x7e>
 800fd88:	ea06 0007 	and.w	r0, r6, r7
 800fd8c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800fd90:	7b21      	ldrb	r1, [r4, #12]
 800fd92:	4628      	mov	r0, r5
 800fd94:	f7fb fdbe 	bl	800b914 <ucdr_serialize_uint8_t>
 800fd98:	b188      	cbz	r0, 800fdbe <uxr_serialize_INFO_Payload+0x92>
 800fd9a:	f104 010c 	add.w	r1, r4, #12
 800fd9e:	4628      	mov	r0, r5
 800fda0:	f7ff fae2 	bl	800f368 <uxr_serialize_ObjectVariant.part.0>
 800fda4:	4030      	ands	r0, r6
 800fda6:	b2c6      	uxtb	r6, r0
 800fda8:	e7e4      	b.n	800fd74 <uxr_serialize_INFO_Payload+0x48>
 800fdaa:	f504 7108 	add.w	r1, r4, #544	@ 0x220
 800fdae:	4628      	mov	r0, r5
 800fdb0:	f7ff fdb2 	bl	800f918 <uxr_serialize_ActivityInfoVariant>
 800fdb4:	4006      	ands	r6, r0
 800fdb6:	ea06 0007 	and.w	r0, r6, r7
 800fdba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800fdbe:	4606      	mov	r6, r0
 800fdc0:	e7d8      	b.n	800fd74 <uxr_serialize_INFO_Payload+0x48>
 800fdc2:	bf00      	nop

0800fdc4 <uxr_serialize_READ_DATA_Payload>:
 800fdc4:	b570      	push	{r4, r5, r6, lr}
 800fdc6:	2202      	movs	r2, #2
 800fdc8:	4605      	mov	r5, r0
 800fdca:	460e      	mov	r6, r1
 800fdcc:	f004 f874 	bl	8013eb8 <ucdr_serialize_array_uint8_t>
 800fdd0:	2202      	movs	r2, #2
 800fdd2:	18b1      	adds	r1, r6, r2
 800fdd4:	4604      	mov	r4, r0
 800fdd6:	4628      	mov	r0, r5
 800fdd8:	f004 f86e 	bl	8013eb8 <ucdr_serialize_array_uint8_t>
 800fddc:	1d31      	adds	r1, r6, #4
 800fdde:	4004      	ands	r4, r0
 800fde0:	4628      	mov	r0, r5
 800fde2:	f7ff fe5d 	bl	800faa0 <uxr_serialize_ReadSpecification>
 800fde6:	b2e4      	uxtb	r4, r4
 800fde8:	4020      	ands	r0, r4
 800fdea:	bd70      	pop	{r4, r5, r6, pc}

0800fdec <uxr_serialize_WRITE_DATA_Payload_Data>:
 800fdec:	b570      	push	{r4, r5, r6, lr}
 800fdee:	2202      	movs	r2, #2
 800fdf0:	4605      	mov	r5, r0
 800fdf2:	460e      	mov	r6, r1
 800fdf4:	f004 f860 	bl	8013eb8 <ucdr_serialize_array_uint8_t>
 800fdf8:	2202      	movs	r2, #2
 800fdfa:	4604      	mov	r4, r0
 800fdfc:	18b1      	adds	r1, r6, r2
 800fdfe:	4628      	mov	r0, r5
 800fe00:	f004 f85a 	bl	8013eb8 <ucdr_serialize_array_uint8_t>
 800fe04:	4020      	ands	r0, r4
 800fe06:	b2c0      	uxtb	r0, r0
 800fe08:	bd70      	pop	{r4, r5, r6, pc}
 800fe0a:	bf00      	nop

0800fe0c <uxr_serialize_ACKNACK_Payload>:
 800fe0c:	b570      	push	{r4, r5, r6, lr}
 800fe0e:	460c      	mov	r4, r1
 800fe10:	460e      	mov	r6, r1
 800fe12:	f834 1b02 	ldrh.w	r1, [r4], #2
 800fe16:	4605      	mov	r5, r0
 800fe18:	f7fb fda8 	bl	800b96c <ucdr_serialize_uint16_t>
 800fe1c:	2202      	movs	r2, #2
 800fe1e:	4621      	mov	r1, r4
 800fe20:	4604      	mov	r4, r0
 800fe22:	4628      	mov	r0, r5
 800fe24:	f004 f848 	bl	8013eb8 <ucdr_serialize_array_uint8_t>
 800fe28:	7931      	ldrb	r1, [r6, #4]
 800fe2a:	4004      	ands	r4, r0
 800fe2c:	4628      	mov	r0, r5
 800fe2e:	f7fb fd71 	bl	800b914 <ucdr_serialize_uint8_t>
 800fe32:	b2e4      	uxtb	r4, r4
 800fe34:	4020      	ands	r0, r4
 800fe36:	bd70      	pop	{r4, r5, r6, pc}

0800fe38 <uxr_deserialize_ACKNACK_Payload>:
 800fe38:	b570      	push	{r4, r5, r6, lr}
 800fe3a:	4605      	mov	r5, r0
 800fe3c:	460e      	mov	r6, r1
 800fe3e:	f7fb fe95 	bl	800bb6c <ucdr_deserialize_uint16_t>
 800fe42:	2202      	movs	r2, #2
 800fe44:	18b1      	adds	r1, r6, r2
 800fe46:	4604      	mov	r4, r0
 800fe48:	4628      	mov	r0, r5
 800fe4a:	f004 f899 	bl	8013f80 <ucdr_deserialize_array_uint8_t>
 800fe4e:	1d31      	adds	r1, r6, #4
 800fe50:	4004      	ands	r4, r0
 800fe52:	4628      	mov	r0, r5
 800fe54:	f7fb fd74 	bl	800b940 <ucdr_deserialize_uint8_t>
 800fe58:	b2e4      	uxtb	r4, r4
 800fe5a:	4020      	ands	r0, r4
 800fe5c:	bd70      	pop	{r4, r5, r6, pc}
 800fe5e:	bf00      	nop

0800fe60 <uxr_serialize_HEARTBEAT_Payload>:
 800fe60:	b570      	push	{r4, r5, r6, lr}
 800fe62:	460d      	mov	r5, r1
 800fe64:	8809      	ldrh	r1, [r1, #0]
 800fe66:	4606      	mov	r6, r0
 800fe68:	f7fb fd80 	bl	800b96c <ucdr_serialize_uint16_t>
 800fe6c:	8869      	ldrh	r1, [r5, #2]
 800fe6e:	4604      	mov	r4, r0
 800fe70:	4630      	mov	r0, r6
 800fe72:	f7fb fd7b 	bl	800b96c <ucdr_serialize_uint16_t>
 800fe76:	7929      	ldrb	r1, [r5, #4]
 800fe78:	4004      	ands	r4, r0
 800fe7a:	4630      	mov	r0, r6
 800fe7c:	f7fb fd4a 	bl	800b914 <ucdr_serialize_uint8_t>
 800fe80:	b2e4      	uxtb	r4, r4
 800fe82:	4020      	ands	r0, r4
 800fe84:	bd70      	pop	{r4, r5, r6, pc}
 800fe86:	bf00      	nop

0800fe88 <uxr_deserialize_HEARTBEAT_Payload>:
 800fe88:	b570      	push	{r4, r5, r6, lr}
 800fe8a:	4605      	mov	r5, r0
 800fe8c:	460e      	mov	r6, r1
 800fe8e:	f7fb fe6d 	bl	800bb6c <ucdr_deserialize_uint16_t>
 800fe92:	1cb1      	adds	r1, r6, #2
 800fe94:	4604      	mov	r4, r0
 800fe96:	4628      	mov	r0, r5
 800fe98:	f7fb fe68 	bl	800bb6c <ucdr_deserialize_uint16_t>
 800fe9c:	1d31      	adds	r1, r6, #4
 800fe9e:	4004      	ands	r4, r0
 800fea0:	4628      	mov	r0, r5
 800fea2:	f7fb fd4d 	bl	800b940 <ucdr_deserialize_uint8_t>
 800fea6:	b2e4      	uxtb	r4, r4
 800fea8:	4020      	ands	r0, r4
 800feaa:	bd70      	pop	{r4, r5, r6, pc}

0800feac <uxr_deserialize_TIMESTAMP_REPLY_Payload>:
 800feac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800feb0:	4605      	mov	r5, r0
 800feb2:	460e      	mov	r6, r1
 800feb4:	f7fc fbf6 	bl	800c6a4 <ucdr_deserialize_int32_t>
 800feb8:	1d31      	adds	r1, r6, #4
 800feba:	4607      	mov	r7, r0
 800febc:	4628      	mov	r0, r5
 800febe:	f7fc f86f 	bl	800bfa0 <ucdr_deserialize_uint32_t>
 800fec2:	f106 0108 	add.w	r1, r6, #8
 800fec6:	4680      	mov	r8, r0
 800fec8:	4628      	mov	r0, r5
 800feca:	f7fc fbeb 	bl	800c6a4 <ucdr_deserialize_int32_t>
 800fece:	f106 010c 	add.w	r1, r6, #12
 800fed2:	4604      	mov	r4, r0
 800fed4:	4628      	mov	r0, r5
 800fed6:	f7fc f863 	bl	800bfa0 <ucdr_deserialize_uint32_t>
 800feda:	ea07 0708 	and.w	r7, r7, r8
 800fede:	403c      	ands	r4, r7
 800fee0:	f106 0110 	add.w	r1, r6, #16
 800fee4:	4004      	ands	r4, r0
 800fee6:	4628      	mov	r0, r5
 800fee8:	f7fc fbdc 	bl	800c6a4 <ucdr_deserialize_int32_t>
 800feec:	f106 0114 	add.w	r1, r6, #20
 800fef0:	4607      	mov	r7, r0
 800fef2:	4628      	mov	r0, r5
 800fef4:	f7fc f854 	bl	800bfa0 <ucdr_deserialize_uint32_t>
 800fef8:	b2e4      	uxtb	r4, r4
 800fefa:	403c      	ands	r4, r7
 800fefc:	4020      	ands	r0, r4
 800fefe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ff02:	bf00      	nop

0800ff04 <uxr_serialize_SampleIdentity>:
 800ff04:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ff08:	220c      	movs	r2, #12
 800ff0a:	4604      	mov	r4, r0
 800ff0c:	460d      	mov	r5, r1
 800ff0e:	f003 ffd3 	bl	8013eb8 <ucdr_serialize_array_uint8_t>
 800ff12:	2203      	movs	r2, #3
 800ff14:	f105 010c 	add.w	r1, r5, #12
 800ff18:	4607      	mov	r7, r0
 800ff1a:	4620      	mov	r0, r4
 800ff1c:	f003 ffcc 	bl	8013eb8 <ucdr_serialize_array_uint8_t>
 800ff20:	7be9      	ldrb	r1, [r5, #15]
 800ff22:	4680      	mov	r8, r0
 800ff24:	4620      	mov	r0, r4
 800ff26:	f7fb fcf5 	bl	800b914 <ucdr_serialize_uint8_t>
 800ff2a:	6929      	ldr	r1, [r5, #16]
 800ff2c:	4606      	mov	r6, r0
 800ff2e:	4620      	mov	r0, r4
 800ff30:	f7fc fb20 	bl	800c574 <ucdr_serialize_int32_t>
 800ff34:	6969      	ldr	r1, [r5, #20]
 800ff36:	4603      	mov	r3, r0
 800ff38:	4620      	mov	r0, r4
 800ff3a:	ea07 0708 	and.w	r7, r7, r8
 800ff3e:	461c      	mov	r4, r3
 800ff40:	f7fb fefe 	bl	800bd40 <ucdr_serialize_uint32_t>
 800ff44:	403e      	ands	r6, r7
 800ff46:	4034      	ands	r4, r6
 800ff48:	4020      	ands	r0, r4
 800ff4a:	b2c0      	uxtb	r0, r0
 800ff4c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800ff50 <uxr_deserialize_SampleIdentity>:
 800ff50:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ff54:	220c      	movs	r2, #12
 800ff56:	4604      	mov	r4, r0
 800ff58:	460d      	mov	r5, r1
 800ff5a:	f004 f811 	bl	8013f80 <ucdr_deserialize_array_uint8_t>
 800ff5e:	2203      	movs	r2, #3
 800ff60:	f105 010c 	add.w	r1, r5, #12
 800ff64:	4607      	mov	r7, r0
 800ff66:	4620      	mov	r0, r4
 800ff68:	f004 f80a 	bl	8013f80 <ucdr_deserialize_array_uint8_t>
 800ff6c:	f105 010f 	add.w	r1, r5, #15
 800ff70:	4680      	mov	r8, r0
 800ff72:	4620      	mov	r0, r4
 800ff74:	f7fb fce4 	bl	800b940 <ucdr_deserialize_uint8_t>
 800ff78:	f105 0110 	add.w	r1, r5, #16
 800ff7c:	4606      	mov	r6, r0
 800ff7e:	4620      	mov	r0, r4
 800ff80:	f7fc fb90 	bl	800c6a4 <ucdr_deserialize_int32_t>
 800ff84:	f105 0114 	add.w	r1, r5, #20
 800ff88:	4603      	mov	r3, r0
 800ff8a:	4620      	mov	r0, r4
 800ff8c:	ea07 0708 	and.w	r7, r7, r8
 800ff90:	461c      	mov	r4, r3
 800ff92:	f7fc f805 	bl	800bfa0 <ucdr_deserialize_uint32_t>
 800ff96:	403e      	ands	r6, r7
 800ff98:	4034      	ands	r4, r6
 800ff9a:	4020      	ands	r0, r4
 800ff9c:	b2c0      	uxtb	r0, r0
 800ff9e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ffa2:	bf00      	nop

0800ffa4 <rcl_client_get_rmw_handle>:
 800ffa4:	b118      	cbz	r0, 800ffae <rcl_client_get_rmw_handle+0xa>
 800ffa6:	6800      	ldr	r0, [r0, #0]
 800ffa8:	b108      	cbz	r0, 800ffae <rcl_client_get_rmw_handle+0xa>
 800ffaa:	f8d0 0108 	ldr.w	r0, [r0, #264]	@ 0x108
 800ffae:	4770      	bx	lr

0800ffb0 <rcl_send_request>:
 800ffb0:	b570      	push	{r4, r5, r6, lr}
 800ffb2:	b082      	sub	sp, #8
 800ffb4:	b1e8      	cbz	r0, 800fff2 <rcl_send_request+0x42>
 800ffb6:	4604      	mov	r4, r0
 800ffb8:	6800      	ldr	r0, [r0, #0]
 800ffba:	b1d0      	cbz	r0, 800fff2 <rcl_send_request+0x42>
 800ffbc:	f8d0 3108 	ldr.w	r3, [r0, #264]	@ 0x108
 800ffc0:	b1bb      	cbz	r3, 800fff2 <rcl_send_request+0x42>
 800ffc2:	460e      	mov	r6, r1
 800ffc4:	b1d1      	cbz	r1, 800fffc <rcl_send_request+0x4c>
 800ffc6:	4615      	mov	r5, r2
 800ffc8:	b1c2      	cbz	r2, 800fffc <rcl_send_request+0x4c>
 800ffca:	2105      	movs	r1, #5
 800ffcc:	f500 7088 	add.w	r0, r0, #272	@ 0x110
 800ffd0:	f002 fc76 	bl	80128c0 <__atomic_load_8>
 800ffd4:	6823      	ldr	r3, [r4, #0]
 800ffd6:	e9c5 0100 	strd	r0, r1, [r5]
 800ffda:	462a      	mov	r2, r5
 800ffdc:	4631      	mov	r1, r6
 800ffde:	f8d3 0108 	ldr.w	r0, [r3, #264]	@ 0x108
 800ffe2:	f003 fb81 	bl	80136e8 <rmw_send_request>
 800ffe6:	4606      	mov	r6, r0
 800ffe8:	b160      	cbz	r0, 8010004 <rcl_send_request+0x54>
 800ffea:	2601      	movs	r6, #1
 800ffec:	4630      	mov	r0, r6
 800ffee:	b002      	add	sp, #8
 800fff0:	bd70      	pop	{r4, r5, r6, pc}
 800fff2:	f44f 76fa 	mov.w	r6, #500	@ 0x1f4
 800fff6:	4630      	mov	r0, r6
 800fff8:	b002      	add	sp, #8
 800fffa:	bd70      	pop	{r4, r5, r6, pc}
 800fffc:	260b      	movs	r6, #11
 800fffe:	4630      	mov	r0, r6
 8010000:	b002      	add	sp, #8
 8010002:	bd70      	pop	{r4, r5, r6, pc}
 8010004:	6820      	ldr	r0, [r4, #0]
 8010006:	2105      	movs	r1, #5
 8010008:	e9d5 2300 	ldrd	r2, r3, [r5]
 801000c:	f500 7088 	add.w	r0, r0, #272	@ 0x110
 8010010:	9100      	str	r1, [sp, #0]
 8010012:	f002 fcc1 	bl	8012998 <__atomic_exchange_8>
 8010016:	4630      	mov	r0, r6
 8010018:	b002      	add	sp, #8
 801001a:	bd70      	pop	{r4, r5, r6, pc}
 801001c:	0000      	movs	r0, r0
	...

08010020 <rcl_take_response>:
 8010020:	b570      	push	{r4, r5, r6, lr}
 8010022:	468e      	mov	lr, r1
 8010024:	460c      	mov	r4, r1
 8010026:	4616      	mov	r6, r2
 8010028:	4605      	mov	r5, r0
 801002a:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 801002e:	b08c      	sub	sp, #48	@ 0x30
 8010030:	f10d 0c18 	add.w	ip, sp, #24
 8010034:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8010038:	e89e 0003 	ldmia.w	lr, {r0, r1}
 801003c:	e88c 0003 	stmia.w	ip, {r0, r1}
 8010040:	b35d      	cbz	r5, 801009a <rcl_take_response+0x7a>
 8010042:	682b      	ldr	r3, [r5, #0]
 8010044:	b34b      	cbz	r3, 801009a <rcl_take_response+0x7a>
 8010046:	f8d3 0108 	ldr.w	r0, [r3, #264]	@ 0x108
 801004a:	b330      	cbz	r0, 801009a <rcl_take_response+0x7a>
 801004c:	b346      	cbz	r6, 80100a0 <rcl_take_response+0x80>
 801004e:	ed9f 7b16 	vldr	d7, [pc, #88]	@ 80100a8 <rcl_take_response+0x88>
 8010052:	2300      	movs	r3, #0
 8010054:	f88d 3007 	strb.w	r3, [sp, #7]
 8010058:	4632      	mov	r2, r6
 801005a:	f10d 0307 	add.w	r3, sp, #7
 801005e:	a902      	add	r1, sp, #8
 8010060:	ed8d 7b02 	vstr	d7, [sp, #8]
 8010064:	ed8d 7b04 	vstr	d7, [sp, #16]
 8010068:	f003 fc46 	bl	80138f8 <rmw_take_response>
 801006c:	4605      	mov	r5, r0
 801006e:	b9c8      	cbnz	r0, 80100a4 <rcl_take_response+0x84>
 8010070:	f89d 2007 	ldrb.w	r2, [sp, #7]
 8010074:	f240 13f5 	movw	r3, #501	@ 0x1f5
 8010078:	2a00      	cmp	r2, #0
 801007a:	bf08      	it	eq
 801007c:	461d      	moveq	r5, r3
 801007e:	f10d 0e18 	add.w	lr, sp, #24
 8010082:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8010086:	46a4      	mov	ip, r4
 8010088:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801008c:	e89e 0003 	ldmia.w	lr, {r0, r1}
 8010090:	e88c 0003 	stmia.w	ip, {r0, r1}
 8010094:	4628      	mov	r0, r5
 8010096:	b00c      	add	sp, #48	@ 0x30
 8010098:	bd70      	pop	{r4, r5, r6, pc}
 801009a:	f44f 75fa 	mov.w	r5, #500	@ 0x1f4
 801009e:	e7ee      	b.n	801007e <rcl_take_response+0x5e>
 80100a0:	250b      	movs	r5, #11
 80100a2:	e7ec      	b.n	801007e <rcl_take_response+0x5e>
 80100a4:	2501      	movs	r5, #1
 80100a6:	e7ea      	b.n	801007e <rcl_take_response+0x5e>
	...

080100b0 <rcl_client_is_valid>:
 80100b0:	b130      	cbz	r0, 80100c0 <rcl_client_is_valid+0x10>
 80100b2:	6800      	ldr	r0, [r0, #0]
 80100b4:	b120      	cbz	r0, 80100c0 <rcl_client_is_valid+0x10>
 80100b6:	f8d0 0108 	ldr.w	r0, [r0, #264]	@ 0x108
 80100ba:	3800      	subs	r0, #0
 80100bc:	bf18      	it	ne
 80100be:	2001      	movne	r0, #1
 80100c0:	4770      	bx	lr
 80100c2:	bf00      	nop

080100c4 <rcl_convert_rmw_ret_to_rcl_ret>:
 80100c4:	280b      	cmp	r0, #11
 80100c6:	dc0d      	bgt.n	80100e4 <rcl_convert_rmw_ret_to_rcl_ret+0x20>
 80100c8:	2800      	cmp	r0, #0
 80100ca:	db09      	blt.n	80100e0 <rcl_convert_rmw_ret_to_rcl_ret+0x1c>
 80100cc:	280b      	cmp	r0, #11
 80100ce:	d807      	bhi.n	80100e0 <rcl_convert_rmw_ret_to_rcl_ret+0x1c>
 80100d0:	e8df f000 	tbb	[pc, r0]
 80100d4:	07060607 	.word	0x07060607
 80100d8:	06060606 	.word	0x06060606
 80100dc:	07070606 	.word	0x07070606
 80100e0:	2001      	movs	r0, #1
 80100e2:	4770      	bx	lr
 80100e4:	28cb      	cmp	r0, #203	@ 0xcb
 80100e6:	bf18      	it	ne
 80100e8:	2001      	movne	r0, #1
 80100ea:	4770      	bx	lr

080100ec <rcl_get_zero_initialized_context>:
 80100ec:	4a03      	ldr	r2, [pc, #12]	@ (80100fc <rcl_get_zero_initialized_context+0x10>)
 80100ee:	4603      	mov	r3, r0
 80100f0:	e892 0003 	ldmia.w	r2, {r0, r1}
 80100f4:	e883 0003 	stmia.w	r3, {r0, r1}
 80100f8:	4618      	mov	r0, r3
 80100fa:	4770      	bx	lr
 80100fc:	08017260 	.word	0x08017260

08010100 <rcl_context_is_valid>:
 8010100:	b118      	cbz	r0, 801010a <rcl_context_is_valid+0xa>
 8010102:	6840      	ldr	r0, [r0, #4]
 8010104:	3800      	subs	r0, #0
 8010106:	bf18      	it	ne
 8010108:	2001      	movne	r0, #1
 801010a:	4770      	bx	lr

0801010c <__cleanup_context>:
 801010c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010110:	4606      	mov	r6, r0
 8010112:	6800      	ldr	r0, [r0, #0]
 8010114:	2300      	movs	r3, #0
 8010116:	6073      	str	r3, [r6, #4]
 8010118:	2800      	cmp	r0, #0
 801011a:	d049      	beq.n	80101b0 <__cleanup_context+0xa4>
 801011c:	6947      	ldr	r7, [r0, #20]
 801011e:	f8d0 8004 	ldr.w	r8, [r0, #4]
 8010122:	f8d0 9010 	ldr.w	r9, [r0, #16]
 8010126:	b137      	cbz	r7, 8010136 <__cleanup_context+0x2a>
 8010128:	3014      	adds	r0, #20
 801012a:	f7f9 f9dd 	bl	80094e8 <rcl_init_options_fini>
 801012e:	4607      	mov	r7, r0
 8010130:	2800      	cmp	r0, #0
 8010132:	d144      	bne.n	80101be <__cleanup_context+0xb2>
 8010134:	6830      	ldr	r0, [r6, #0]
 8010136:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 8010138:	b143      	cbz	r3, 801014c <__cleanup_context+0x40>
 801013a:	3028      	adds	r0, #40	@ 0x28
 801013c:	f7fa fc54 	bl	800a9e8 <rmw_context_fini>
 8010140:	b118      	cbz	r0, 801014a <__cleanup_context+0x3e>
 8010142:	2f00      	cmp	r7, #0
 8010144:	d03e      	beq.n	80101c4 <__cleanup_context+0xb8>
 8010146:	f7fa f98b 	bl	800a460 <rcutils_reset_error>
 801014a:	6830      	ldr	r0, [r6, #0]
 801014c:	6a03      	ldr	r3, [r0, #32]
 801014e:	b1db      	cbz	r3, 8010188 <__cleanup_context+0x7c>
 8010150:	e9d0 2c06 	ldrd	r2, ip, [r0, #24]
 8010154:	2a01      	cmp	r2, #1
 8010156:	f17c 0100 	sbcs.w	r1, ip, #0
 801015a:	db11      	blt.n	8010180 <__cleanup_context+0x74>
 801015c:	2400      	movs	r4, #0
 801015e:	4625      	mov	r5, r4
 8010160:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8010164:	4649      	mov	r1, r9
 8010166:	b1b8      	cbz	r0, 8010198 <__cleanup_context+0x8c>
 8010168:	47c0      	blx	r8
 801016a:	6833      	ldr	r3, [r6, #0]
 801016c:	e9d3 2c06 	ldrd	r2, ip, [r3, #24]
 8010170:	3401      	adds	r4, #1
 8010172:	f145 0500 	adc.w	r5, r5, #0
 8010176:	4294      	cmp	r4, r2
 8010178:	eb75 010c 	sbcs.w	r1, r5, ip
 801017c:	6a1b      	ldr	r3, [r3, #32]
 801017e:	dbef      	blt.n	8010160 <__cleanup_context+0x54>
 8010180:	4618      	mov	r0, r3
 8010182:	4649      	mov	r1, r9
 8010184:	47c0      	blx	r8
 8010186:	6830      	ldr	r0, [r6, #0]
 8010188:	4649      	mov	r1, r9
 801018a:	47c0      	blx	r8
 801018c:	2300      	movs	r3, #0
 801018e:	e9c6 3300 	strd	r3, r3, [r6]
 8010192:	4638      	mov	r0, r7
 8010194:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8010198:	3401      	adds	r4, #1
 801019a:	f145 0500 	adc.w	r5, r5, #0
 801019e:	4294      	cmp	r4, r2
 80101a0:	eb75 010c 	sbcs.w	r1, r5, ip
 80101a4:	dbdc      	blt.n	8010160 <__cleanup_context+0x54>
 80101a6:	4618      	mov	r0, r3
 80101a8:	4649      	mov	r1, r9
 80101aa:	47c0      	blx	r8
 80101ac:	6830      	ldr	r0, [r6, #0]
 80101ae:	e7eb      	b.n	8010188 <__cleanup_context+0x7c>
 80101b0:	4607      	mov	r7, r0
 80101b2:	2300      	movs	r3, #0
 80101b4:	e9c6 3300 	strd	r3, r3, [r6]
 80101b8:	4638      	mov	r0, r7
 80101ba:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80101be:	f7fa f94f 	bl	800a460 <rcutils_reset_error>
 80101c2:	e7b7      	b.n	8010134 <__cleanup_context+0x28>
 80101c4:	f7ff ff7e 	bl	80100c4 <rcl_convert_rmw_ret_to_rcl_ret>
 80101c8:	4607      	mov	r7, r0
 80101ca:	e7bc      	b.n	8010146 <__cleanup_context+0x3a>

080101cc <rcl_init>:
 80101cc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80101d0:	1e05      	subs	r5, r0, #0
 80101d2:	b09e      	sub	sp, #120	@ 0x78
 80101d4:	460e      	mov	r6, r1
 80101d6:	4690      	mov	r8, r2
 80101d8:	461f      	mov	r7, r3
 80101da:	f340 809c 	ble.w	8010316 <rcl_init+0x14a>
 80101de:	2900      	cmp	r1, #0
 80101e0:	f000 809c 	beq.w	801031c <rcl_init+0x150>
 80101e4:	f1a1 0e04 	sub.w	lr, r1, #4
 80101e8:	f04f 0c00 	mov.w	ip, #0
 80101ec:	f85e 4f04 	ldr.w	r4, [lr, #4]!
 80101f0:	f10c 0c01 	add.w	ip, ip, #1
 80101f4:	2c00      	cmp	r4, #0
 80101f6:	f000 8091 	beq.w	801031c <rcl_init+0x150>
 80101fa:	4565      	cmp	r5, ip
 80101fc:	d1f6      	bne.n	80101ec <rcl_init+0x20>
 80101fe:	f1b8 0f00 	cmp.w	r8, #0
 8010202:	f000 808b 	beq.w	801031c <rcl_init+0x150>
 8010206:	f8d8 4000 	ldr.w	r4, [r8]
 801020a:	2c00      	cmp	r4, #0
 801020c:	f000 8086 	beq.w	801031c <rcl_init+0x150>
 8010210:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8010212:	f10d 0c64 	add.w	ip, sp, #100	@ 0x64
 8010216:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801021a:	6823      	ldr	r3, [r4, #0]
 801021c:	f8cc 3000 	str.w	r3, [ip]
 8010220:	a819      	add	r0, sp, #100	@ 0x64
 8010222:	f7fa f8f7 	bl	800a414 <rcutils_allocator_is_valid>
 8010226:	2800      	cmp	r0, #0
 8010228:	d078      	beq.n	801031c <rcl_init+0x150>
 801022a:	2f00      	cmp	r7, #0
 801022c:	d076      	beq.n	801031c <rcl_init+0x150>
 801022e:	683b      	ldr	r3, [r7, #0]
 8010230:	2b00      	cmp	r3, #0
 8010232:	d178      	bne.n	8010326 <rcl_init+0x15a>
 8010234:	e9dd 321c 	ldrd	r3, r2, [sp, #112]	@ 0x70
 8010238:	2178      	movs	r1, #120	@ 0x78
 801023a:	2001      	movs	r0, #1
 801023c:	4798      	blx	r3
 801023e:	4604      	mov	r4, r0
 8010240:	6038      	str	r0, [r7, #0]
 8010242:	2800      	cmp	r0, #0
 8010244:	f000 80b6 	beq.w	80103b4 <rcl_init+0x1e8>
 8010248:	a802      	add	r0, sp, #8
 801024a:	f002 fe89 	bl	8012f60 <rmw_get_zero_initialized_context>
 801024e:	a902      	add	r1, sp, #8
 8010250:	f104 0028 	add.w	r0, r4, #40	@ 0x28
 8010254:	2250      	movs	r2, #80	@ 0x50
 8010256:	ac19      	add	r4, sp, #100	@ 0x64
 8010258:	f005 fdc1 	bl	8015dde <memcpy>
 801025c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801025e:	f8d7 e000 	ldr.w	lr, [r7]
 8010262:	46f4      	mov	ip, lr
 8010264:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8010268:	6823      	ldr	r3, [r4, #0]
 801026a:	f8cc 3000 	str.w	r3, [ip]
 801026e:	f10e 0114 	add.w	r1, lr, #20
 8010272:	4640      	mov	r0, r8
 8010274:	f7f9 f962 	bl	800953c <rcl_init_options_copy>
 8010278:	4604      	mov	r4, r0
 801027a:	2800      	cmp	r0, #0
 801027c:	d144      	bne.n	8010308 <rcl_init+0x13c>
 801027e:	f8d7 9000 	ldr.w	r9, [r7]
 8010282:	ea4f 78e5 	mov.w	r8, r5, asr #31
 8010286:	f8c9 0020 	str.w	r0, [r9, #32]
 801028a:	f8c9 5018 	str.w	r5, [r9, #24]
 801028e:	f8c9 801c 	str.w	r8, [r9, #28]
 8010292:	2d00      	cmp	r5, #0
 8010294:	d04e      	beq.n	8010334 <rcl_init+0x168>
 8010296:	2e00      	cmp	r6, #0
 8010298:	d04c      	beq.n	8010334 <rcl_init+0x168>
 801029a:	e9dd 321c 	ldrd	r3, r2, [sp, #112]	@ 0x70
 801029e:	2104      	movs	r1, #4
 80102a0:	4628      	mov	r0, r5
 80102a2:	4798      	blx	r3
 80102a4:	f8c9 0020 	str.w	r0, [r9, #32]
 80102a8:	f8d7 9000 	ldr.w	r9, [r7]
 80102ac:	f8d9 3020 	ldr.w	r3, [r9, #32]
 80102b0:	46ca      	mov	sl, r9
 80102b2:	b343      	cbz	r3, 8010306 <rcl_init+0x13a>
 80102b4:	2d01      	cmp	r5, #1
 80102b6:	f178 0300 	sbcs.w	r3, r8, #0
 80102ba:	db3b      	blt.n	8010334 <rcl_init+0x168>
 80102bc:	2400      	movs	r4, #0
 80102be:	3e04      	subs	r6, #4
 80102c0:	46a1      	mov	r9, r4
 80102c2:	e00b      	b.n	80102dc <rcl_init+0x110>
 80102c4:	6831      	ldr	r1, [r6, #0]
 80102c6:	f005 fd8a 	bl	8015dde <memcpy>
 80102ca:	3401      	adds	r4, #1
 80102cc:	f149 0900 	adc.w	r9, r9, #0
 80102d0:	45c8      	cmp	r8, r9
 80102d2:	bf08      	it	eq
 80102d4:	42a5      	cmpeq	r5, r4
 80102d6:	d02b      	beq.n	8010330 <rcl_init+0x164>
 80102d8:	f8d7 a000 	ldr.w	sl, [r7]
 80102dc:	f856 0f04 	ldr.w	r0, [r6, #4]!
 80102e0:	f7ef ff88 	bl	80001f4 <strlen>
 80102e4:	1c42      	adds	r2, r0, #1
 80102e6:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80102e8:	991d      	ldr	r1, [sp, #116]	@ 0x74
 80102ea:	f8da a020 	ldr.w	sl, [sl, #32]
 80102ee:	9201      	str	r2, [sp, #4]
 80102f0:	4610      	mov	r0, r2
 80102f2:	4798      	blx	r3
 80102f4:	683b      	ldr	r3, [r7, #0]
 80102f6:	f84a 0024 	str.w	r0, [sl, r4, lsl #2]
 80102fa:	6a1b      	ldr	r3, [r3, #32]
 80102fc:	9a01      	ldr	r2, [sp, #4]
 80102fe:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8010302:	2800      	cmp	r0, #0
 8010304:	d1de      	bne.n	80102c4 <rcl_init+0xf8>
 8010306:	240a      	movs	r4, #10
 8010308:	4638      	mov	r0, r7
 801030a:	f7ff feff 	bl	801010c <__cleanup_context>
 801030e:	4620      	mov	r0, r4
 8010310:	b01e      	add	sp, #120	@ 0x78
 8010312:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010316:	2900      	cmp	r1, #0
 8010318:	f43f af71 	beq.w	80101fe <rcl_init+0x32>
 801031c:	240b      	movs	r4, #11
 801031e:	4620      	mov	r0, r4
 8010320:	b01e      	add	sp, #120	@ 0x78
 8010322:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010326:	2464      	movs	r4, #100	@ 0x64
 8010328:	4620      	mov	r0, r4
 801032a:	b01e      	add	sp, #120	@ 0x78
 801032c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010330:	f8d7 9000 	ldr.w	r9, [r7]
 8010334:	4926      	ldr	r1, [pc, #152]	@ (80103d0 <rcl_init+0x204>)
 8010336:	680b      	ldr	r3, [r1, #0]
 8010338:	3301      	adds	r3, #1
 801033a:	d036      	beq.n	80103aa <rcl_init+0x1de>
 801033c:	600b      	str	r3, [r1, #0]
 801033e:	461a      	mov	r2, r3
 8010340:	2400      	movs	r4, #0
 8010342:	f8d9 0014 	ldr.w	r0, [r9, #20]
 8010346:	607b      	str	r3, [r7, #4]
 8010348:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 801034a:	3301      	adds	r3, #1
 801034c:	e9c0 2406 	strd	r2, r4, [r0, #24]
 8010350:	d034      	beq.n	80103bc <rcl_init+0x1f0>
 8010352:	f890 3030 	ldrb.w	r3, [r0, #48]	@ 0x30
 8010356:	b93b      	cbnz	r3, 8010368 <rcl_init+0x19c>
 8010358:	3030      	adds	r0, #48	@ 0x30
 801035a:	f000 f83b 	bl	80103d4 <rcl_get_localhost_only>
 801035e:	4604      	mov	r4, r0
 8010360:	2800      	cmp	r0, #0
 8010362:	d1d1      	bne.n	8010308 <rcl_init+0x13c>
 8010364:	683b      	ldr	r3, [r7, #0]
 8010366:	6958      	ldr	r0, [r3, #20]
 8010368:	6b40      	ldr	r0, [r0, #52]	@ 0x34
 801036a:	aa18      	add	r2, sp, #96	@ 0x60
 801036c:	a917      	add	r1, sp, #92	@ 0x5c
 801036e:	f000 ff43 	bl	80111f8 <rcl_validate_enclave_name>
 8010372:	4604      	mov	r4, r0
 8010374:	2800      	cmp	r0, #0
 8010376:	d1c7      	bne.n	8010308 <rcl_init+0x13c>
 8010378:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 801037a:	b9eb      	cbnz	r3, 80103b8 <rcl_init+0x1ec>
 801037c:	6839      	ldr	r1, [r7, #0]
 801037e:	694b      	ldr	r3, [r1, #20]
 8010380:	6b58      	ldr	r0, [r3, #52]	@ 0x34
 8010382:	f103 0228 	add.w	r2, r3, #40	@ 0x28
 8010386:	f000 fb3f 	bl	8010a08 <rcl_get_security_options_from_environment>
 801038a:	4604      	mov	r4, r0
 801038c:	2800      	cmp	r0, #0
 801038e:	d1bb      	bne.n	8010308 <rcl_init+0x13c>
 8010390:	6839      	ldr	r1, [r7, #0]
 8010392:	6948      	ldr	r0, [r1, #20]
 8010394:	3128      	adds	r1, #40	@ 0x28
 8010396:	3018      	adds	r0, #24
 8010398:	f7fa f9f0 	bl	800a77c <rmw_init>
 801039c:	4604      	mov	r4, r0
 801039e:	2800      	cmp	r0, #0
 80103a0:	d0bd      	beq.n	801031e <rcl_init+0x152>
 80103a2:	f7ff fe8f 	bl	80100c4 <rcl_convert_rmw_ret_to_rcl_ret>
 80103a6:	4604      	mov	r4, r0
 80103a8:	e7ae      	b.n	8010308 <rcl_init+0x13c>
 80103aa:	2201      	movs	r2, #1
 80103ac:	461c      	mov	r4, r3
 80103ae:	600a      	str	r2, [r1, #0]
 80103b0:	4613      	mov	r3, r2
 80103b2:	e7c6      	b.n	8010342 <rcl_init+0x176>
 80103b4:	240a      	movs	r4, #10
 80103b6:	e7b2      	b.n	801031e <rcl_init+0x152>
 80103b8:	2401      	movs	r4, #1
 80103ba:	e7a5      	b.n	8010308 <rcl_init+0x13c>
 80103bc:	3024      	adds	r0, #36	@ 0x24
 80103be:	f004 fc2b 	bl	8014c18 <rcl_get_default_domain_id>
 80103c2:	4604      	mov	r4, r0
 80103c4:	2800      	cmp	r0, #0
 80103c6:	d19f      	bne.n	8010308 <rcl_init+0x13c>
 80103c8:	683b      	ldr	r3, [r7, #0]
 80103ca:	6958      	ldr	r0, [r3, #20]
 80103cc:	e7c1      	b.n	8010352 <rcl_init+0x186>
 80103ce:	bf00      	nop
 80103d0:	2000db98 	.word	0x2000db98

080103d4 <rcl_get_localhost_only>:
 80103d4:	b510      	push	{r4, lr}
 80103d6:	b082      	sub	sp, #8
 80103d8:	2300      	movs	r3, #0
 80103da:	9301      	str	r3, [sp, #4]
 80103dc:	b1b8      	cbz	r0, 801040e <rcl_get_localhost_only+0x3a>
 80103de:	4604      	mov	r4, r0
 80103e0:	a901      	add	r1, sp, #4
 80103e2:	480c      	ldr	r0, [pc, #48]	@ (8010414 <rcl_get_localhost_only+0x40>)
 80103e4:	f002 fb10 	bl	8012a08 <rcutils_get_env>
 80103e8:	b110      	cbz	r0, 80103f0 <rcl_get_localhost_only+0x1c>
 80103ea:	2001      	movs	r0, #1
 80103ec:	b002      	add	sp, #8
 80103ee:	bd10      	pop	{r4, pc}
 80103f0:	9b01      	ldr	r3, [sp, #4]
 80103f2:	b113      	cbz	r3, 80103fa <rcl_get_localhost_only+0x26>
 80103f4:	781a      	ldrb	r2, [r3, #0]
 80103f6:	2a31      	cmp	r2, #49	@ 0x31
 80103f8:	d004      	beq.n	8010404 <rcl_get_localhost_only+0x30>
 80103fa:	2302      	movs	r3, #2
 80103fc:	2000      	movs	r0, #0
 80103fe:	7023      	strb	r3, [r4, #0]
 8010400:	b002      	add	sp, #8
 8010402:	bd10      	pop	{r4, pc}
 8010404:	785b      	ldrb	r3, [r3, #1]
 8010406:	2b00      	cmp	r3, #0
 8010408:	d1f7      	bne.n	80103fa <rcl_get_localhost_only+0x26>
 801040a:	2301      	movs	r3, #1
 801040c:	e7f6      	b.n	80103fc <rcl_get_localhost_only+0x28>
 801040e:	200b      	movs	r0, #11
 8010410:	b002      	add	sp, #8
 8010412:	bd10      	pop	{r4, pc}
 8010414:	08017268 	.word	0x08017268

08010418 <rcl_get_zero_initialized_node>:
 8010418:	4a03      	ldr	r2, [pc, #12]	@ (8010428 <rcl_get_zero_initialized_node+0x10>)
 801041a:	4603      	mov	r3, r0
 801041c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8010420:	e883 0003 	stmia.w	r3, {r0, r1}
 8010424:	4618      	mov	r0, r3
 8010426:	4770      	bx	lr
 8010428:	08017284 	.word	0x08017284

0801042c <rcl_node_init>:
 801042c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010430:	b0a9      	sub	sp, #164	@ 0xa4
 8010432:	4604      	mov	r4, r0
 8010434:	f8dd 80c8 	ldr.w	r8, [sp, #200]	@ 0xc8
 8010438:	a823      	add	r0, sp, #140	@ 0x8c
 801043a:	460e      	mov	r6, r1
 801043c:	4615      	mov	r5, r2
 801043e:	461f      	mov	r7, r3
 8010440:	f004 fe12 	bl	8015068 <rcl_guard_condition_get_default_options>
 8010444:	f1b8 0f00 	cmp.w	r8, #0
 8010448:	f000 80e6 	beq.w	8010618 <rcl_node_init+0x1ec>
 801044c:	4640      	mov	r0, r8
 801044e:	f7f9 ffe1 	bl	800a414 <rcutils_allocator_is_valid>
 8010452:	2800      	cmp	r0, #0
 8010454:	f000 80e0 	beq.w	8010618 <rcl_node_init+0x1ec>
 8010458:	2e00      	cmp	r6, #0
 801045a:	f000 80dd 	beq.w	8010618 <rcl_node_init+0x1ec>
 801045e:	2d00      	cmp	r5, #0
 8010460:	f000 80da 	beq.w	8010618 <rcl_node_init+0x1ec>
 8010464:	2c00      	cmp	r4, #0
 8010466:	f000 80d7 	beq.w	8010618 <rcl_node_init+0x1ec>
 801046a:	f8d4 9004 	ldr.w	r9, [r4, #4]
 801046e:	f1b9 0f00 	cmp.w	r9, #0
 8010472:	f040 80fd 	bne.w	8010670 <rcl_node_init+0x244>
 8010476:	2f00      	cmp	r7, #0
 8010478:	f000 80ce 	beq.w	8010618 <rcl_node_init+0x1ec>
 801047c:	4638      	mov	r0, r7
 801047e:	f7ff fe3f 	bl	8010100 <rcl_context_is_valid>
 8010482:	4682      	mov	sl, r0
 8010484:	2800      	cmp	r0, #0
 8010486:	f000 80cd 	beq.w	8010624 <rcl_node_init+0x1f8>
 801048a:	464a      	mov	r2, r9
 801048c:	a922      	add	r1, sp, #136	@ 0x88
 801048e:	4630      	mov	r0, r6
 8010490:	f8cd 9088 	str.w	r9, [sp, #136]	@ 0x88
 8010494:	f002 ff02 	bl	801329c <rmw_validate_node_name>
 8010498:	4681      	mov	r9, r0
 801049a:	2800      	cmp	r0, #0
 801049c:	f040 80be 	bne.w	801061c <rcl_node_init+0x1f0>
 80104a0:	9822      	ldr	r0, [sp, #136]	@ 0x88
 80104a2:	2800      	cmp	r0, #0
 80104a4:	f040 80f0 	bne.w	8010688 <rcl_node_init+0x25c>
 80104a8:	4628      	mov	r0, r5
 80104aa:	f7ef fea3 	bl	80001f4 <strlen>
 80104ae:	2800      	cmp	r0, #0
 80104b0:	f040 80bb 	bne.w	801062a <rcl_node_init+0x1fe>
 80104b4:	4d7c      	ldr	r5, [pc, #496]	@ (80106a8 <rcl_node_init+0x27c>)
 80104b6:	a922      	add	r1, sp, #136	@ 0x88
 80104b8:	2200      	movs	r2, #0
 80104ba:	4628      	mov	r0, r5
 80104bc:	f002 fed0 	bl	8013260 <rmw_validate_namespace>
 80104c0:	4681      	mov	r9, r0
 80104c2:	2800      	cmp	r0, #0
 80104c4:	f040 80aa 	bne.w	801061c <rcl_node_init+0x1f0>
 80104c8:	4682      	mov	sl, r0
 80104ca:	9822      	ldr	r0, [sp, #136]	@ 0x88
 80104cc:	2800      	cmp	r0, #0
 80104ce:	f040 80e0 	bne.w	8010692 <rcl_node_init+0x266>
 80104d2:	f8d8 3000 	ldr.w	r3, [r8]
 80104d6:	f8d8 1010 	ldr.w	r1, [r8, #16]
 80104da:	2078      	movs	r0, #120	@ 0x78
 80104dc:	4798      	blx	r3
 80104de:	4681      	mov	r9, r0
 80104e0:	6060      	str	r0, [r4, #4]
 80104e2:	2800      	cmp	r0, #0
 80104e4:	f000 80ca 	beq.w	801067c <rcl_node_init+0x250>
 80104e8:	2200      	movs	r2, #0
 80104ea:	2300      	movs	r3, #0
 80104ec:	e9c9 231a 	strd	r2, r3, [r9, #104]	@ 0x68
 80104f0:	e9c9 231c 	strd	r2, r3, [r9, #112]	@ 0x70
 80104f4:	a808      	add	r0, sp, #32
 80104f6:	f000 f907 	bl	8010708 <rcl_node_get_default_options>
 80104fa:	a908      	add	r1, sp, #32
 80104fc:	4648      	mov	r0, r9
 80104fe:	2268      	movs	r2, #104	@ 0x68
 8010500:	f005 fc6d 	bl	8015dde <memcpy>
 8010504:	6861      	ldr	r1, [r4, #4]
 8010506:	6027      	str	r7, [r4, #0]
 8010508:	4640      	mov	r0, r8
 801050a:	f000 f90b 	bl	8010724 <rcl_node_options_copy>
 801050e:	2800      	cmp	r0, #0
 8010510:	d158      	bne.n	80105c4 <rcl_node_init+0x198>
 8010512:	4628      	mov	r0, r5
 8010514:	f7ef fe6e 	bl	80001f4 <strlen>
 8010518:	4428      	add	r0, r5
 801051a:	f810 3c01 	ldrb.w	r3, [r0, #-1]
 801051e:	e9cd 5603 	strd	r5, r6, [sp, #12]
 8010522:	2b2f      	cmp	r3, #47	@ 0x2f
 8010524:	f8d8 3010 	ldr.w	r3, [r8, #16]
 8010528:	9300      	str	r3, [sp, #0]
 801052a:	bf0c      	ite	eq
 801052c:	4b5f      	ldreq	r3, [pc, #380]	@ (80106ac <rcl_node_init+0x280>)
 801052e:	4b60      	ldrne	r3, [pc, #384]	@ (80106b0 <rcl_node_init+0x284>)
 8010530:	9302      	str	r3, [sp, #8]
 8010532:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8010536:	9301      	str	r3, [sp, #4]
 8010538:	e898 000f 	ldmia.w	r8, {r0, r1, r2, r3}
 801053c:	f8d4 9004 	ldr.w	r9, [r4, #4]
 8010540:	f002 fa8a 	bl	8012a58 <rcutils_format_string_limit>
 8010544:	6823      	ldr	r3, [r4, #0]
 8010546:	f8c9 0074 	str.w	r0, [r9, #116]	@ 0x74
 801054a:	6818      	ldr	r0, [r3, #0]
 801054c:	4631      	mov	r1, r6
 801054e:	3028      	adds	r0, #40	@ 0x28
 8010550:	462a      	mov	r2, r5
 8010552:	6866      	ldr	r6, [r4, #4]
 8010554:	f7fa faf4 	bl	800ab40 <rmw_create_node>
 8010558:	6863      	ldr	r3, [r4, #4]
 801055a:	66b0      	str	r0, [r6, #104]	@ 0x68
 801055c:	6e98      	ldr	r0, [r3, #104]	@ 0x68
 801055e:	2800      	cmp	r0, #0
 8010560:	d032      	beq.n	80105c8 <rcl_node_init+0x19c>
 8010562:	f7fa fb81 	bl	800ac68 <rmw_node_get_graph_guard_condition>
 8010566:	4681      	mov	r9, r0
 8010568:	b360      	cbz	r0, 80105c4 <rcl_node_init+0x198>
 801056a:	f8d8 3000 	ldr.w	r3, [r8]
 801056e:	f8d8 1010 	ldr.w	r1, [r8, #16]
 8010572:	6866      	ldr	r6, [r4, #4]
 8010574:	2008      	movs	r0, #8
 8010576:	4798      	blx	r3
 8010578:	6863      	ldr	r3, [r4, #4]
 801057a:	66f0      	str	r0, [r6, #108]	@ 0x6c
 801057c:	f8d3 b06c 	ldr.w	fp, [r3, #108]	@ 0x6c
 8010580:	f1bb 0f00 	cmp.w	fp, #0
 8010584:	d020      	beq.n	80105c8 <rcl_node_init+0x19c>
 8010586:	a806      	add	r0, sp, #24
 8010588:	f004 fcde 	bl	8014f48 <rcl_get_zero_initialized_guard_condition>
 801058c:	a806      	add	r0, sp, #24
 801058e:	c803      	ldmia	r0, {r0, r1}
 8010590:	6863      	ldr	r3, [r4, #4]
 8010592:	46c4      	mov	ip, r8
 8010594:	f8d3 e06c 	ldr.w	lr, [r3, #108]	@ 0x6c
 8010598:	e88b 0003 	stmia.w	fp, {r0, r1}
 801059c:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 80105a0:	ae23      	add	r6, sp, #140	@ 0x8c
 80105a2:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 80105a4:	f8dc 3000 	ldr.w	r3, [ip]
 80105a8:	6033      	str	r3, [r6, #0]
 80105aa:	ab28      	add	r3, sp, #160	@ 0xa0
 80105ac:	e913 000f 	ldmdb	r3, {r0, r1, r2, r3}
 80105b0:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 80105b4:	4649      	mov	r1, r9
 80105b6:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 80105b8:	463a      	mov	r2, r7
 80105ba:	4670      	mov	r0, lr
 80105bc:	f004 fcce 	bl	8014f5c <rcl_guard_condition_init_from_rmw>
 80105c0:	4681      	mov	r9, r0
 80105c2:	b328      	cbz	r0, 8010610 <rcl_node_init+0x1e4>
 80105c4:	6863      	ldr	r3, [r4, #4]
 80105c6:	b1f3      	cbz	r3, 8010606 <rcl_node_init+0x1da>
 80105c8:	6f58      	ldr	r0, [r3, #116]	@ 0x74
 80105ca:	b128      	cbz	r0, 80105d8 <rcl_node_init+0x1ac>
 80105cc:	f8d8 3004 	ldr.w	r3, [r8, #4]
 80105d0:	f8d8 1010 	ldr.w	r1, [r8, #16]
 80105d4:	4798      	blx	r3
 80105d6:	6863      	ldr	r3, [r4, #4]
 80105d8:	6e98      	ldr	r0, [r3, #104]	@ 0x68
 80105da:	b110      	cbz	r0, 80105e2 <rcl_node_init+0x1b6>
 80105dc:	f7fa fac8 	bl	800ab70 <rmw_destroy_node>
 80105e0:	6863      	ldr	r3, [r4, #4]
 80105e2:	6ed8      	ldr	r0, [r3, #108]	@ 0x6c
 80105e4:	b148      	cbz	r0, 80105fa <rcl_node_init+0x1ce>
 80105e6:	f004 fd19 	bl	801501c <rcl_guard_condition_fini>
 80105ea:	6863      	ldr	r3, [r4, #4]
 80105ec:	f8d8 1010 	ldr.w	r1, [r8, #16]
 80105f0:	6ed8      	ldr	r0, [r3, #108]	@ 0x6c
 80105f2:	f8d8 3004 	ldr.w	r3, [r8, #4]
 80105f6:	4798      	blx	r3
 80105f8:	6863      	ldr	r3, [r4, #4]
 80105fa:	f8d8 1010 	ldr.w	r1, [r8, #16]
 80105fe:	4618      	mov	r0, r3
 8010600:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8010604:	4798      	blx	r3
 8010606:	2300      	movs	r3, #0
 8010608:	e9c4 3300 	strd	r3, r3, [r4]
 801060c:	f04f 0901 	mov.w	r9, #1
 8010610:	f1ba 0f00 	cmp.w	sl, #0
 8010614:	d125      	bne.n	8010662 <rcl_node_init+0x236>
 8010616:	e001      	b.n	801061c <rcl_node_init+0x1f0>
 8010618:	f04f 090b 	mov.w	r9, #11
 801061c:	4648      	mov	r0, r9
 801061e:	b029      	add	sp, #164	@ 0xa4
 8010620:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010624:	f04f 0965 	mov.w	r9, #101	@ 0x65
 8010628:	e7f8      	b.n	801061c <rcl_node_init+0x1f0>
 801062a:	782b      	ldrb	r3, [r5, #0]
 801062c:	2b2f      	cmp	r3, #47	@ 0x2f
 801062e:	f43f af42 	beq.w	80104b6 <rcl_node_init+0x8a>
 8010632:	9503      	str	r5, [sp, #12]
 8010634:	f8d8 3010 	ldr.w	r3, [r8, #16]
 8010638:	9300      	str	r3, [sp, #0]
 801063a:	4b1e      	ldr	r3, [pc, #120]	@ (80106b4 <rcl_node_init+0x288>)
 801063c:	9302      	str	r3, [sp, #8]
 801063e:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8010642:	9301      	str	r3, [sp, #4]
 8010644:	e898 000f 	ldmia.w	r8, {r0, r1, r2, r3}
 8010648:	f002 fa06 	bl	8012a58 <rcutils_format_string_limit>
 801064c:	4605      	mov	r5, r0
 801064e:	b340      	cbz	r0, 80106a2 <rcl_node_init+0x276>
 8010650:	2200      	movs	r2, #0
 8010652:	a922      	add	r1, sp, #136	@ 0x88
 8010654:	9222      	str	r2, [sp, #136]	@ 0x88
 8010656:	f002 fe03 	bl	8013260 <rmw_validate_namespace>
 801065a:	4681      	mov	r9, r0
 801065c:	2800      	cmp	r0, #0
 801065e:	f43f af34 	beq.w	80104ca <rcl_node_init+0x9e>
 8010662:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8010666:	f8d8 1010 	ldr.w	r1, [r8, #16]
 801066a:	4628      	mov	r0, r5
 801066c:	4798      	blx	r3
 801066e:	e7d5      	b.n	801061c <rcl_node_init+0x1f0>
 8010670:	f04f 0964 	mov.w	r9, #100	@ 0x64
 8010674:	4648      	mov	r0, r9
 8010676:	b029      	add	sp, #164	@ 0xa4
 8010678:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801067c:	f04f 090a 	mov.w	r9, #10
 8010680:	f1ba 0f00 	cmp.w	sl, #0
 8010684:	d1ed      	bne.n	8010662 <rcl_node_init+0x236>
 8010686:	e7c9      	b.n	801061c <rcl_node_init+0x1f0>
 8010688:	f002 fe5a 	bl	8013340 <rmw_node_name_validation_result_string>
 801068c:	f04f 09c9 	mov.w	r9, #201	@ 0xc9
 8010690:	e7c4      	b.n	801061c <rcl_node_init+0x1f0>
 8010692:	f002 fdf7 	bl	8013284 <rmw_namespace_validation_result_string>
 8010696:	f04f 09ca 	mov.w	r9, #202	@ 0xca
 801069a:	f1ba 0f00 	cmp.w	sl, #0
 801069e:	d1e0      	bne.n	8010662 <rcl_node_init+0x236>
 80106a0:	e7bc      	b.n	801061c <rcl_node_init+0x1f0>
 80106a2:	f04f 090a 	mov.w	r9, #10
 80106a6:	e7b9      	b.n	801061c <rcl_node_init+0x1f0>
 80106a8:	08016dc0 	.word	0x08016dc0
 80106ac:	08016e0c 	.word	0x08016e0c
 80106b0:	08016dc4 	.word	0x08016dc4
 80106b4:	08017280 	.word	0x08017280

080106b8 <rcl_node_is_valid>:
 80106b8:	b130      	cbz	r0, 80106c8 <rcl_node_is_valid+0x10>
 80106ba:	6843      	ldr	r3, [r0, #4]
 80106bc:	b123      	cbz	r3, 80106c8 <rcl_node_is_valid+0x10>
 80106be:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80106c0:	b113      	cbz	r3, 80106c8 <rcl_node_is_valid+0x10>
 80106c2:	6800      	ldr	r0, [r0, #0]
 80106c4:	f7ff bd1c 	b.w	8010100 <rcl_context_is_valid>
 80106c8:	2000      	movs	r0, #0
 80106ca:	4770      	bx	lr

080106cc <rcl_node_get_name>:
 80106cc:	b120      	cbz	r0, 80106d8 <rcl_node_get_name+0xc>
 80106ce:	6840      	ldr	r0, [r0, #4]
 80106d0:	b110      	cbz	r0, 80106d8 <rcl_node_get_name+0xc>
 80106d2:	6e80      	ldr	r0, [r0, #104]	@ 0x68
 80106d4:	b100      	cbz	r0, 80106d8 <rcl_node_get_name+0xc>
 80106d6:	6880      	ldr	r0, [r0, #8]
 80106d8:	4770      	bx	lr
 80106da:	bf00      	nop

080106dc <rcl_node_get_namespace>:
 80106dc:	b120      	cbz	r0, 80106e8 <rcl_node_get_namespace+0xc>
 80106de:	6840      	ldr	r0, [r0, #4]
 80106e0:	b110      	cbz	r0, 80106e8 <rcl_node_get_namespace+0xc>
 80106e2:	6e80      	ldr	r0, [r0, #104]	@ 0x68
 80106e4:	b100      	cbz	r0, 80106e8 <rcl_node_get_namespace+0xc>
 80106e6:	68c0      	ldr	r0, [r0, #12]
 80106e8:	4770      	bx	lr
 80106ea:	bf00      	nop

080106ec <rcl_node_get_options>:
 80106ec:	b128      	cbz	r0, 80106fa <rcl_node_get_options+0xe>
 80106ee:	6840      	ldr	r0, [r0, #4]
 80106f0:	b118      	cbz	r0, 80106fa <rcl_node_get_options+0xe>
 80106f2:	6e83      	ldr	r3, [r0, #104]	@ 0x68
 80106f4:	2b00      	cmp	r3, #0
 80106f6:	bf08      	it	eq
 80106f8:	2000      	moveq	r0, #0
 80106fa:	4770      	bx	lr

080106fc <rcl_node_get_rmw_handle>:
 80106fc:	b110      	cbz	r0, 8010704 <rcl_node_get_rmw_handle+0x8>
 80106fe:	6840      	ldr	r0, [r0, #4]
 8010700:	b100      	cbz	r0, 8010704 <rcl_node_get_rmw_handle+0x8>
 8010702:	6e80      	ldr	r0, [r0, #104]	@ 0x68
 8010704:	4770      	bx	lr
 8010706:	bf00      	nop

08010708 <rcl_node_get_default_options>:
 8010708:	b510      	push	{r4, lr}
 801070a:	2268      	movs	r2, #104	@ 0x68
 801070c:	4604      	mov	r4, r0
 801070e:	2100      	movs	r1, #0
 8010710:	f005 fa9c 	bl	8015c4c <memset>
 8010714:	4620      	mov	r0, r4
 8010716:	f7f9 fe6f 	bl	800a3f8 <rcutils_get_default_allocator>
 801071a:	2301      	movs	r3, #1
 801071c:	7523      	strb	r3, [r4, #20]
 801071e:	4620      	mov	r0, r4
 8010720:	bd10      	pop	{r4, pc}
 8010722:	bf00      	nop

08010724 <rcl_node_options_copy>:
 8010724:	b1d0      	cbz	r0, 801075c <rcl_node_options_copy+0x38>
 8010726:	b570      	push	{r4, r5, r6, lr}
 8010728:	460c      	mov	r4, r1
 801072a:	b1a9      	cbz	r1, 8010758 <rcl_node_options_copy+0x34>
 801072c:	4288      	cmp	r0, r1
 801072e:	4684      	mov	ip, r0
 8010730:	d012      	beq.n	8010758 <rcl_node_options_copy+0x34>
 8010732:	4605      	mov	r5, r0
 8010734:	8a86      	ldrh	r6, [r0, #20]
 8010736:	468e      	mov	lr, r1
 8010738:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801073a:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 801073e:	682b      	ldr	r3, [r5, #0]
 8010740:	f8ce 3000 	str.w	r3, [lr]
 8010744:	f10c 0118 	add.w	r1, ip, #24
 8010748:	2250      	movs	r2, #80	@ 0x50
 801074a:	82a6      	strh	r6, [r4, #20]
 801074c:	f104 0018 	add.w	r0, r4, #24
 8010750:	f005 fb45 	bl	8015dde <memcpy>
 8010754:	2000      	movs	r0, #0
 8010756:	bd70      	pop	{r4, r5, r6, pc}
 8010758:	200b      	movs	r0, #11
 801075a:	bd70      	pop	{r4, r5, r6, pc}
 801075c:	200b      	movs	r0, #11
 801075e:	4770      	bx	lr

08010760 <rcl_node_resolve_name>:
 8010760:	b082      	sub	sp, #8
 8010762:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010766:	b091      	sub	sp, #68	@ 0x44
 8010768:	ac1a      	add	r4, sp, #104	@ 0x68
 801076a:	e884 000c 	stmia.w	r4, {r2, r3}
 801076e:	f89d 807c 	ldrb.w	r8, [sp, #124]	@ 0x7c
 8010772:	2800      	cmp	r0, #0
 8010774:	d03b      	beq.n	80107ee <rcl_node_resolve_name+0x8e>
 8010776:	460c      	mov	r4, r1
 8010778:	4605      	mov	r5, r0
 801077a:	f7ff ffb7 	bl	80106ec <rcl_node_get_options>
 801077e:	2800      	cmp	r0, #0
 8010780:	d037      	beq.n	80107f2 <rcl_node_resolve_name+0x92>
 8010782:	4628      	mov	r0, r5
 8010784:	f7ff ffa2 	bl	80106cc <rcl_node_get_name>
 8010788:	4606      	mov	r6, r0
 801078a:	4628      	mov	r0, r5
 801078c:	f7ff ffa6 	bl	80106dc <rcl_node_get_namespace>
 8010790:	f10d 0e68 	add.w	lr, sp, #104	@ 0x68
 8010794:	4681      	mov	r9, r0
 8010796:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 801079a:	ad0b      	add	r5, sp, #44	@ 0x2c
 801079c:	46ac      	mov	ip, r5
 801079e:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80107a2:	f8de 3000 	ldr.w	r3, [lr]
 80107a6:	f8cc 3000 	str.w	r3, [ip]
 80107aa:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 80107ac:	b1fb      	cbz	r3, 80107ee <rcl_node_resolve_name+0x8e>
 80107ae:	468a      	mov	sl, r1
 80107b0:	f8dd b078 	ldr.w	fp, [sp, #120]	@ 0x78
 80107b4:	f002 faa8 	bl	8012d08 <rcutils_get_zero_initialized_string_map>
 80107b8:	ab10      	add	r3, sp, #64	@ 0x40
 80107ba:	9008      	str	r0, [sp, #32]
 80107bc:	e913 0007 	ldmdb	r3, {r0, r1, r2}
 80107c0:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 80107c4:	2100      	movs	r1, #0
 80107c6:	e895 000c 	ldmia.w	r5, {r2, r3}
 80107ca:	a808      	add	r0, sp, #32
 80107cc:	f002 fb14 	bl	8012df8 <rcutils_string_map_init>
 80107d0:	4607      	mov	r7, r0
 80107d2:	b180      	cbz	r0, 80107f6 <rcl_node_resolve_name+0x96>
 80107d4:	f7f9 fe2c 	bl	800a430 <rcutils_get_error_string>
 80107d8:	f7f9 fe42 	bl	800a460 <rcutils_reset_error>
 80107dc:	2f0a      	cmp	r7, #10
 80107de:	bf18      	it	ne
 80107e0:	2701      	movne	r7, #1
 80107e2:	4638      	mov	r0, r7
 80107e4:	b011      	add	sp, #68	@ 0x44
 80107e6:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80107ea:	b002      	add	sp, #8
 80107ec:	4770      	bx	lr
 80107ee:	270b      	movs	r7, #11
 80107f0:	e7f7      	b.n	80107e2 <rcl_node_resolve_name+0x82>
 80107f2:	2701      	movs	r7, #1
 80107f4:	e7f5      	b.n	80107e2 <rcl_node_resolve_name+0x82>
 80107f6:	9009      	str	r0, [sp, #36]	@ 0x24
 80107f8:	9007      	str	r0, [sp, #28]
 80107fa:	a808      	add	r0, sp, #32
 80107fc:	f004 fb9e 	bl	8014f3c <rcl_get_default_topic_name_substitutions>
 8010800:	4607      	mov	r7, r0
 8010802:	b1a8      	cbz	r0, 8010830 <rcl_node_resolve_name+0xd0>
 8010804:	280a      	cmp	r0, #10
 8010806:	9c07      	ldr	r4, [sp, #28]
 8010808:	d000      	beq.n	801080c <rcl_node_resolve_name+0xac>
 801080a:	2701      	movs	r7, #1
 801080c:	a808      	add	r0, sp, #32
 801080e:	f002 fb33 	bl	8012e78 <rcutils_string_map_fini>
 8010812:	2800      	cmp	r0, #0
 8010814:	d13d      	bne.n	8010892 <rcl_node_resolve_name+0x132>
 8010816:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8010818:	4659      	mov	r1, fp
 801081a:	47d0      	blx	sl
 801081c:	4659      	mov	r1, fp
 801081e:	4620      	mov	r0, r4
 8010820:	47d0      	blx	sl
 8010822:	f1b8 0f00 	cmp.w	r8, #0
 8010826:	d0dc      	beq.n	80107e2 <rcl_node_resolve_name+0x82>
 8010828:	2f67      	cmp	r7, #103	@ 0x67
 801082a:	bf08      	it	eq
 801082c:	2768      	moveq	r7, #104	@ 0x68
 801082e:	e7d8      	b.n	80107e2 <rcl_node_resolve_name+0x82>
 8010830:	ab09      	add	r3, sp, #36	@ 0x24
 8010832:	9305      	str	r3, [sp, #20]
 8010834:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8010836:	46ec      	mov	ip, sp
 8010838:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801083c:	682b      	ldr	r3, [r5, #0]
 801083e:	f8cc 3000 	str.w	r3, [ip]
 8010842:	464a      	mov	r2, r9
 8010844:	4631      	mov	r1, r6
 8010846:	4620      	mov	r0, r4
 8010848:	ab08      	add	r3, sp, #32
 801084a:	f004 fa19 	bl	8014c80 <rcl_expand_topic_name>
 801084e:	4607      	mov	r7, r0
 8010850:	b9b8      	cbnz	r0, 8010882 <rcl_node_resolve_name+0x122>
 8010852:	9c09      	ldr	r4, [sp, #36]	@ 0x24
 8010854:	9009      	str	r0, [sp, #36]	@ 0x24
 8010856:	4602      	mov	r2, r0
 8010858:	a90a      	add	r1, sp, #40	@ 0x28
 801085a:	4620      	mov	r0, r4
 801085c:	f002 fc3c 	bl	80130d8 <rmw_validate_full_topic_name>
 8010860:	b988      	cbnz	r0, 8010886 <rcl_node_resolve_name+0x126>
 8010862:	9d0a      	ldr	r5, [sp, #40]	@ 0x28
 8010864:	b9d5      	cbnz	r5, 801089c <rcl_node_resolve_name+0x13c>
 8010866:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8010868:	a808      	add	r0, sp, #32
 801086a:	601c      	str	r4, [r3, #0]
 801086c:	f002 fb04 	bl	8012e78 <rcutils_string_map_fini>
 8010870:	4607      	mov	r7, r0
 8010872:	b1a8      	cbz	r0, 80108a0 <rcl_node_resolve_name+0x140>
 8010874:	f7f9 fddc 	bl	800a430 <rcutils_get_error_string>
 8010878:	462c      	mov	r4, r5
 801087a:	f7f9 fdf1 	bl	800a460 <rcutils_reset_error>
 801087e:	2701      	movs	r7, #1
 8010880:	e7c9      	b.n	8010816 <rcl_node_resolve_name+0xb6>
 8010882:	9c07      	ldr	r4, [sp, #28]
 8010884:	e7c2      	b.n	801080c <rcl_node_resolve_name+0xac>
 8010886:	f7f9 fdd3 	bl	800a430 <rcutils_get_error_string>
 801088a:	2701      	movs	r7, #1
 801088c:	f7f9 fde8 	bl	800a460 <rcutils_reset_error>
 8010890:	e7bc      	b.n	801080c <rcl_node_resolve_name+0xac>
 8010892:	f7f9 fdcd 	bl	800a430 <rcutils_get_error_string>
 8010896:	f7f9 fde3 	bl	800a460 <rcutils_reset_error>
 801089a:	e7bc      	b.n	8010816 <rcl_node_resolve_name+0xb6>
 801089c:	2767      	movs	r7, #103	@ 0x67
 801089e:	e7b5      	b.n	801080c <rcl_node_resolve_name+0xac>
 80108a0:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80108a2:	4659      	mov	r1, fp
 80108a4:	47d0      	blx	sl
 80108a6:	4659      	mov	r1, fp
 80108a8:	4638      	mov	r0, r7
 80108aa:	47d0      	blx	sl
 80108ac:	e799      	b.n	80107e2 <rcl_node_resolve_name+0x82>
 80108ae:	bf00      	nop

080108b0 <exact_match_lookup>:
 80108b0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80108b2:	f102 0708 	add.w	r7, r2, #8
 80108b6:	460b      	mov	r3, r1
 80108b8:	4614      	mov	r4, r2
 80108ba:	4606      	mov	r6, r0
 80108bc:	e897 0007 	ldmia.w	r7, {r0, r1, r2}
 80108c0:	b085      	sub	sp, #20
 80108c2:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 80108c6:	4618      	mov	r0, r3
 80108c8:	4919      	ldr	r1, [pc, #100]	@ (8010930 <exact_match_lookup+0x80>)
 80108ca:	e894 000c 	ldmia.w	r4, {r2, r3}
 80108ce:	f002 f8b5 	bl	8012a3c <rcutils_join_path>
 80108d2:	7833      	ldrb	r3, [r6, #0]
 80108d4:	2b2f      	cmp	r3, #47	@ 0x2f
 80108d6:	4605      	mov	r5, r0
 80108d8:	d023      	beq.n	8010922 <exact_match_lookup+0x72>
 80108da:	f104 030c 	add.w	r3, r4, #12
 80108de:	e893 0003 	ldmia.w	r3, {r0, r1}
 80108e2:	e88d 0003 	stmia.w	sp, {r0, r1}
 80108e6:	1c70      	adds	r0, r6, #1
 80108e8:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 80108ec:	f002 f8ac 	bl	8012a48 <rcutils_to_native_path>
 80108f0:	4606      	mov	r6, r0
 80108f2:	e897 0007 	ldmia.w	r7, {r0, r1, r2}
 80108f6:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 80108fa:	4631      	mov	r1, r6
 80108fc:	e894 000c 	ldmia.w	r4, {r2, r3}
 8010900:	4628      	mov	r0, r5
 8010902:	f002 f89b 	bl	8012a3c <rcutils_join_path>
 8010906:	6862      	ldr	r2, [r4, #4]
 8010908:	6921      	ldr	r1, [r4, #16]
 801090a:	4603      	mov	r3, r0
 801090c:	4630      	mov	r0, r6
 801090e:	461e      	mov	r6, r3
 8010910:	4790      	blx	r2
 8010912:	4628      	mov	r0, r5
 8010914:	6863      	ldr	r3, [r4, #4]
 8010916:	6921      	ldr	r1, [r4, #16]
 8010918:	4798      	blx	r3
 801091a:	4635      	mov	r5, r6
 801091c:	4628      	mov	r0, r5
 801091e:	b005      	add	sp, #20
 8010920:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010922:	7873      	ldrb	r3, [r6, #1]
 8010924:	2b00      	cmp	r3, #0
 8010926:	d1d8      	bne.n	80108da <exact_match_lookup+0x2a>
 8010928:	4628      	mov	r0, r5
 801092a:	b005      	add	sp, #20
 801092c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801092e:	bf00      	nop
 8010930:	080172c8 	.word	0x080172c8

08010934 <rcl_get_secure_root>:
 8010934:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8010938:	b085      	sub	sp, #20
 801093a:	b168      	cbz	r0, 8010958 <rcl_get_secure_root+0x24>
 801093c:	4607      	mov	r7, r0
 801093e:	4608      	mov	r0, r1
 8010940:	460c      	mov	r4, r1
 8010942:	f7f9 fd67 	bl	800a414 <rcutils_allocator_is_valid>
 8010946:	b138      	cbz	r0, 8010958 <rcl_get_secure_root+0x24>
 8010948:	2300      	movs	r3, #0
 801094a:	482d      	ldr	r0, [pc, #180]	@ (8010a00 <rcl_get_secure_root+0xcc>)
 801094c:	9303      	str	r3, [sp, #12]
 801094e:	a903      	add	r1, sp, #12
 8010950:	f002 f85a 	bl	8012a08 <rcutils_get_env>
 8010954:	4605      	mov	r5, r0
 8010956:	b120      	cbz	r0, 8010962 <rcl_get_secure_root+0x2e>
 8010958:	2500      	movs	r5, #0
 801095a:	4628      	mov	r0, r5
 801095c:	b005      	add	sp, #20
 801095e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8010962:	9b03      	ldr	r3, [sp, #12]
 8010964:	781a      	ldrb	r2, [r3, #0]
 8010966:	2a00      	cmp	r2, #0
 8010968:	d0f6      	beq.n	8010958 <rcl_get_secure_root+0x24>
 801096a:	f104 090c 	add.w	r9, r4, #12
 801096e:	e899 0003 	ldmia.w	r9, {r0, r1}
 8010972:	e88d 0003 	stmia.w	sp, {r0, r1}
 8010976:	4618      	mov	r0, r3
 8010978:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 801097c:	f002 f986 	bl	8012c8c <rcutils_strdup>
 8010980:	4680      	mov	r8, r0
 8010982:	2800      	cmp	r0, #0
 8010984:	d0e8      	beq.n	8010958 <rcl_get_secure_root+0x24>
 8010986:	481f      	ldr	r0, [pc, #124]	@ (8010a04 <rcl_get_secure_root+0xd0>)
 8010988:	9503      	str	r5, [sp, #12]
 801098a:	a903      	add	r1, sp, #12
 801098c:	f002 f83c 	bl	8012a08 <rcutils_get_env>
 8010990:	b160      	cbz	r0, 80109ac <rcl_get_secure_root+0x78>
 8010992:	2600      	movs	r6, #0
 8010994:	6863      	ldr	r3, [r4, #4]
 8010996:	6921      	ldr	r1, [r4, #16]
 8010998:	4630      	mov	r0, r6
 801099a:	4798      	blx	r3
 801099c:	4640      	mov	r0, r8
 801099e:	6863      	ldr	r3, [r4, #4]
 80109a0:	6921      	ldr	r1, [r4, #16]
 80109a2:	4798      	blx	r3
 80109a4:	4628      	mov	r0, r5
 80109a6:	b005      	add	sp, #20
 80109a8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80109ac:	9b03      	ldr	r3, [sp, #12]
 80109ae:	781e      	ldrb	r6, [r3, #0]
 80109b0:	b1f6      	cbz	r6, 80109f0 <rcl_get_secure_root+0xbc>
 80109b2:	e899 0003 	ldmia.w	r9, {r0, r1}
 80109b6:	e88d 0003 	stmia.w	sp, {r0, r1}
 80109ba:	4618      	mov	r0, r3
 80109bc:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 80109c0:	f002 f964 	bl	8012c8c <rcutils_strdup>
 80109c4:	4606      	mov	r6, r0
 80109c6:	2800      	cmp	r0, #0
 80109c8:	d0e3      	beq.n	8010992 <rcl_get_secure_root+0x5e>
 80109ca:	4622      	mov	r2, r4
 80109cc:	4641      	mov	r1, r8
 80109ce:	f7ff ff6f 	bl	80108b0 <exact_match_lookup>
 80109d2:	4605      	mov	r5, r0
 80109d4:	2d00      	cmp	r5, #0
 80109d6:	d0dd      	beq.n	8010994 <rcl_get_secure_root+0x60>
 80109d8:	4628      	mov	r0, r5
 80109da:	f002 f82d 	bl	8012a38 <rcutils_is_directory>
 80109de:	4603      	mov	r3, r0
 80109e0:	2800      	cmp	r0, #0
 80109e2:	d1d7      	bne.n	8010994 <rcl_get_secure_root+0x60>
 80109e4:	4628      	mov	r0, r5
 80109e6:	6921      	ldr	r1, [r4, #16]
 80109e8:	461d      	mov	r5, r3
 80109ea:	6863      	ldr	r3, [r4, #4]
 80109ec:	4798      	blx	r3
 80109ee:	e7d1      	b.n	8010994 <rcl_get_secure_root+0x60>
 80109f0:	4622      	mov	r2, r4
 80109f2:	4638      	mov	r0, r7
 80109f4:	4641      	mov	r1, r8
 80109f6:	f7ff ff5b 	bl	80108b0 <exact_match_lookup>
 80109fa:	4605      	mov	r5, r0
 80109fc:	e7ea      	b.n	80109d4 <rcl_get_secure_root+0xa0>
 80109fe:	bf00      	nop
 8010a00:	080172d4 	.word	0x080172d4
 8010a04:	080172ec 	.word	0x080172ec

08010a08 <rcl_get_security_options_from_environment>:
 8010a08:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010a0c:	b082      	sub	sp, #8
 8010a0e:	2300      	movs	r3, #0
 8010a10:	4606      	mov	r6, r0
 8010a12:	460f      	mov	r7, r1
 8010a14:	4820      	ldr	r0, [pc, #128]	@ (8010a98 <rcl_get_security_options_from_environment+0x90>)
 8010a16:	9301      	str	r3, [sp, #4]
 8010a18:	a901      	add	r1, sp, #4
 8010a1a:	4690      	mov	r8, r2
 8010a1c:	f001 fff4 	bl	8012a08 <rcutils_get_env>
 8010a20:	b120      	cbz	r0, 8010a2c <rcl_get_security_options_from_environment+0x24>
 8010a22:	2501      	movs	r5, #1
 8010a24:	4628      	mov	r0, r5
 8010a26:	b002      	add	sp, #8
 8010a28:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010a2c:	491b      	ldr	r1, [pc, #108]	@ (8010a9c <rcl_get_security_options_from_environment+0x94>)
 8010a2e:	4604      	mov	r4, r0
 8010a30:	9801      	ldr	r0, [sp, #4]
 8010a32:	f7ef fbd5 	bl	80001e0 <strcmp>
 8010a36:	4605      	mov	r5, r0
 8010a38:	b9e8      	cbnz	r0, 8010a76 <rcl_get_security_options_from_environment+0x6e>
 8010a3a:	9001      	str	r0, [sp, #4]
 8010a3c:	f1b8 0f00 	cmp.w	r8, #0
 8010a40:	d020      	beq.n	8010a84 <rcl_get_security_options_from_environment+0x7c>
 8010a42:	4817      	ldr	r0, [pc, #92]	@ (8010aa0 <rcl_get_security_options_from_environment+0x98>)
 8010a44:	a901      	add	r1, sp, #4
 8010a46:	f001 ffdf 	bl	8012a08 <rcutils_get_env>
 8010a4a:	2800      	cmp	r0, #0
 8010a4c:	d1e9      	bne.n	8010a22 <rcl_get_security_options_from_environment+0x1a>
 8010a4e:	4915      	ldr	r1, [pc, #84]	@ (8010aa4 <rcl_get_security_options_from_environment+0x9c>)
 8010a50:	9801      	ldr	r0, [sp, #4]
 8010a52:	f7ef fbc5 	bl	80001e0 <strcmp>
 8010a56:	fab0 f080 	clz	r0, r0
 8010a5a:	0940      	lsrs	r0, r0, #5
 8010a5c:	f888 0000 	strb.w	r0, [r8]
 8010a60:	4639      	mov	r1, r7
 8010a62:	4630      	mov	r0, r6
 8010a64:	f7ff ff66 	bl	8010934 <rcl_get_secure_root>
 8010a68:	b170      	cbz	r0, 8010a88 <rcl_get_security_options_from_environment+0x80>
 8010a6a:	f8c8 0004 	str.w	r0, [r8, #4]
 8010a6e:	4628      	mov	r0, r5
 8010a70:	b002      	add	sp, #8
 8010a72:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010a76:	4625      	mov	r5, r4
 8010a78:	4628      	mov	r0, r5
 8010a7a:	f888 4000 	strb.w	r4, [r8]
 8010a7e:	b002      	add	sp, #8
 8010a80:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010a84:	250b      	movs	r5, #11
 8010a86:	e7cd      	b.n	8010a24 <rcl_get_security_options_from_environment+0x1c>
 8010a88:	f898 5000 	ldrb.w	r5, [r8]
 8010a8c:	f1a5 0501 	sub.w	r5, r5, #1
 8010a90:	fab5 f585 	clz	r5, r5
 8010a94:	096d      	lsrs	r5, r5, #5
 8010a96:	e7c5      	b.n	8010a24 <rcl_get_security_options_from_environment+0x1c>
 8010a98:	0801728c 	.word	0x0801728c
 8010a9c:	080172a0 	.word	0x080172a0
 8010aa0:	080172a8 	.word	0x080172a8
 8010aa4:	080172c0 	.word	0x080172c0

08010aa8 <rcl_service_get_rmw_handle>:
 8010aa8:	b118      	cbz	r0, 8010ab2 <rcl_service_get_rmw_handle+0xa>
 8010aaa:	6800      	ldr	r0, [r0, #0]
 8010aac:	b108      	cbz	r0, 8010ab2 <rcl_service_get_rmw_handle+0xa>
 8010aae:	f8d0 0108 	ldr.w	r0, [r0, #264]	@ 0x108
 8010ab2:	4770      	bx	lr

08010ab4 <rcl_take_request>:
 8010ab4:	b570      	push	{r4, r5, r6, lr}
 8010ab6:	468e      	mov	lr, r1
 8010ab8:	460c      	mov	r4, r1
 8010aba:	4616      	mov	r6, r2
 8010abc:	4605      	mov	r5, r0
 8010abe:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8010ac2:	b08c      	sub	sp, #48	@ 0x30
 8010ac4:	f10d 0c18 	add.w	ip, sp, #24
 8010ac8:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8010acc:	e89e 0003 	ldmia.w	lr, {r0, r1}
 8010ad0:	e88c 0003 	stmia.w	ip, {r0, r1}
 8010ad4:	b30d      	cbz	r5, 8010b1a <rcl_take_request+0x66>
 8010ad6:	682b      	ldr	r3, [r5, #0]
 8010ad8:	b1fb      	cbz	r3, 8010b1a <rcl_take_request+0x66>
 8010ada:	f8d3 0108 	ldr.w	r0, [r3, #264]	@ 0x108
 8010ade:	b1e0      	cbz	r0, 8010b1a <rcl_take_request+0x66>
 8010ae0:	b336      	cbz	r6, 8010b30 <rcl_take_request+0x7c>
 8010ae2:	2300      	movs	r3, #0
 8010ae4:	f88d 3007 	strb.w	r3, [sp, #7]
 8010ae8:	4632      	mov	r2, r6
 8010aea:	f10d 0307 	add.w	r3, sp, #7
 8010aee:	a902      	add	r1, sp, #8
 8010af0:	f002 fe48 	bl	8013784 <rmw_take_request>
 8010af4:	4605      	mov	r5, r0
 8010af6:	b198      	cbz	r0, 8010b20 <rcl_take_request+0x6c>
 8010af8:	280a      	cmp	r0, #10
 8010afa:	bf18      	it	ne
 8010afc:	2501      	movne	r5, #1
 8010afe:	f10d 0e18 	add.w	lr, sp, #24
 8010b02:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8010b06:	46a4      	mov	ip, r4
 8010b08:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8010b0c:	e89e 0003 	ldmia.w	lr, {r0, r1}
 8010b10:	e88c 0003 	stmia.w	ip, {r0, r1}
 8010b14:	4628      	mov	r0, r5
 8010b16:	b00c      	add	sp, #48	@ 0x30
 8010b18:	bd70      	pop	{r4, r5, r6, pc}
 8010b1a:	f44f 7516 	mov.w	r5, #600	@ 0x258
 8010b1e:	e7ee      	b.n	8010afe <rcl_take_request+0x4a>
 8010b20:	f89d 2007 	ldrb.w	r2, [sp, #7]
 8010b24:	f240 2359 	movw	r3, #601	@ 0x259
 8010b28:	2a00      	cmp	r2, #0
 8010b2a:	bf08      	it	eq
 8010b2c:	461d      	moveq	r5, r3
 8010b2e:	e7e6      	b.n	8010afe <rcl_take_request+0x4a>
 8010b30:	250b      	movs	r5, #11
 8010b32:	e7e4      	b.n	8010afe <rcl_take_request+0x4a>

08010b34 <rcl_send_response>:
 8010b34:	b170      	cbz	r0, 8010b54 <rcl_send_response+0x20>
 8010b36:	6800      	ldr	r0, [r0, #0]
 8010b38:	b160      	cbz	r0, 8010b54 <rcl_send_response+0x20>
 8010b3a:	f8d0 0108 	ldr.w	r0, [r0, #264]	@ 0x108
 8010b3e:	b148      	cbz	r0, 8010b54 <rcl_send_response+0x20>
 8010b40:	b159      	cbz	r1, 8010b5a <rcl_send_response+0x26>
 8010b42:	b510      	push	{r4, lr}
 8010b44:	b15a      	cbz	r2, 8010b5e <rcl_send_response+0x2a>
 8010b46:	f002 fe7b 	bl	8013840 <rmw_send_response>
 8010b4a:	b110      	cbz	r0, 8010b52 <rcl_send_response+0x1e>
 8010b4c:	2802      	cmp	r0, #2
 8010b4e:	bf18      	it	ne
 8010b50:	2001      	movne	r0, #1
 8010b52:	bd10      	pop	{r4, pc}
 8010b54:	f44f 7016 	mov.w	r0, #600	@ 0x258
 8010b58:	4770      	bx	lr
 8010b5a:	200b      	movs	r0, #11
 8010b5c:	4770      	bx	lr
 8010b5e:	200b      	movs	r0, #11
 8010b60:	bd10      	pop	{r4, pc}
 8010b62:	bf00      	nop

08010b64 <rcl_service_is_valid>:
 8010b64:	b130      	cbz	r0, 8010b74 <rcl_service_is_valid+0x10>
 8010b66:	6800      	ldr	r0, [r0, #0]
 8010b68:	b120      	cbz	r0, 8010b74 <rcl_service_is_valid+0x10>
 8010b6a:	f8d0 0108 	ldr.w	r0, [r0, #264]	@ 0x108
 8010b6e:	3800      	subs	r0, #0
 8010b70:	bf18      	it	ne
 8010b72:	2001      	movne	r0, #1
 8010b74:	4770      	bx	lr
 8010b76:	bf00      	nop

08010b78 <rcl_get_zero_initialized_subscription>:
 8010b78:	4b01      	ldr	r3, [pc, #4]	@ (8010b80 <rcl_get_zero_initialized_subscription+0x8>)
 8010b7a:	6818      	ldr	r0, [r3, #0]
 8010b7c:	4770      	bx	lr
 8010b7e:	bf00      	nop
 8010b80:	0801730c 	.word	0x0801730c

08010b84 <rcl_subscription_init>:
 8010b84:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8010b88:	b089      	sub	sp, #36	@ 0x24
 8010b8a:	9e10      	ldr	r6, [sp, #64]	@ 0x40
 8010b8c:	b1d6      	cbz	r6, 8010bc4 <rcl_subscription_init+0x40>
 8010b8e:	f106 0950 	add.w	r9, r6, #80	@ 0x50
 8010b92:	4604      	mov	r4, r0
 8010b94:	4648      	mov	r0, r9
 8010b96:	460d      	mov	r5, r1
 8010b98:	4690      	mov	r8, r2
 8010b9a:	461f      	mov	r7, r3
 8010b9c:	f7f9 fc3a 	bl	800a414 <rcutils_allocator_is_valid>
 8010ba0:	b180      	cbz	r0, 8010bc4 <rcl_subscription_init+0x40>
 8010ba2:	b17c      	cbz	r4, 8010bc4 <rcl_subscription_init+0x40>
 8010ba4:	4628      	mov	r0, r5
 8010ba6:	f7ff fd87 	bl	80106b8 <rcl_node_is_valid>
 8010baa:	2800      	cmp	r0, #0
 8010bac:	d054      	beq.n	8010c58 <rcl_subscription_init+0xd4>
 8010bae:	f1b8 0f00 	cmp.w	r8, #0
 8010bb2:	d007      	beq.n	8010bc4 <rcl_subscription_init+0x40>
 8010bb4:	b137      	cbz	r7, 8010bc4 <rcl_subscription_init+0x40>
 8010bb6:	6823      	ldr	r3, [r4, #0]
 8010bb8:	b14b      	cbz	r3, 8010bce <rcl_subscription_init+0x4a>
 8010bba:	2764      	movs	r7, #100	@ 0x64
 8010bbc:	4638      	mov	r0, r7
 8010bbe:	b009      	add	sp, #36	@ 0x24
 8010bc0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8010bc4:	270b      	movs	r7, #11
 8010bc6:	4638      	mov	r0, r7
 8010bc8:	b009      	add	sp, #36	@ 0x24
 8010bca:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8010bce:	e9cd 3303 	strd	r3, r3, [sp, #12]
 8010bd2:	aa07      	add	r2, sp, #28
 8010bd4:	9205      	str	r2, [sp, #20]
 8010bd6:	9307      	str	r3, [sp, #28]
 8010bd8:	f106 0358 	add.w	r3, r6, #88	@ 0x58
 8010bdc:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8010be0:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 8010be4:	4639      	mov	r1, r7
 8010be6:	e899 000c 	ldmia.w	r9, {r2, r3}
 8010bea:	4628      	mov	r0, r5
 8010bec:	f7ff fdb8 	bl	8010760 <rcl_node_resolve_name>
 8010bf0:	4607      	mov	r7, r0
 8010bf2:	2800      	cmp	r0, #0
 8010bf4:	d15f      	bne.n	8010cb6 <rcl_subscription_init+0x132>
 8010bf6:	e9d6 3217 	ldrd	r3, r2, [r6, #92]	@ 0x5c
 8010bfa:	21c8      	movs	r1, #200	@ 0xc8
 8010bfc:	2001      	movs	r0, #1
 8010bfe:	4798      	blx	r3
 8010c00:	6020      	str	r0, [r4, #0]
 8010c02:	2800      	cmp	r0, #0
 8010c04:	d05d      	beq.n	8010cc2 <rcl_subscription_init+0x13e>
 8010c06:	4628      	mov	r0, r5
 8010c08:	f7ff fd78 	bl	80106fc <rcl_node_get_rmw_handle>
 8010c0c:	f106 0364 	add.w	r3, r6, #100	@ 0x64
 8010c10:	9300      	str	r3, [sp, #0]
 8010c12:	9a07      	ldr	r2, [sp, #28]
 8010c14:	6827      	ldr	r7, [r4, #0]
 8010c16:	4641      	mov	r1, r8
 8010c18:	4633      	mov	r3, r6
 8010c1a:	f7fa f8c1 	bl	800ada0 <rmw_create_subscription>
 8010c1e:	f8c7 00c0 	str.w	r0, [r7, #192]	@ 0xc0
 8010c22:	6827      	ldr	r7, [r4, #0]
 8010c24:	f8d7 00c0 	ldr.w	r0, [r7, #192]	@ 0xc0
 8010c28:	b348      	cbz	r0, 8010c7e <rcl_subscription_init+0xfa>
 8010c2a:	f107 0170 	add.w	r1, r7, #112	@ 0x70
 8010c2e:	f7fa f999 	bl	800af64 <rmw_subscription_get_actual_qos>
 8010c32:	4607      	mov	r7, r0
 8010c34:	b9a8      	cbnz	r0, 8010c62 <rcl_subscription_init+0xde>
 8010c36:	6820      	ldr	r0, [r4, #0]
 8010c38:	f896 3048 	ldrb.w	r3, [r6, #72]	@ 0x48
 8010c3c:	f880 30b8 	strb.w	r3, [r0, #184]	@ 0xb8
 8010c40:	2270      	movs	r2, #112	@ 0x70
 8010c42:	4631      	mov	r1, r6
 8010c44:	f005 f8cb 	bl	8015dde <memcpy>
 8010c48:	9807      	ldr	r0, [sp, #28]
 8010c4a:	6d73      	ldr	r3, [r6, #84]	@ 0x54
 8010c4c:	6e31      	ldr	r1, [r6, #96]	@ 0x60
 8010c4e:	4798      	blx	r3
 8010c50:	4638      	mov	r0, r7
 8010c52:	b009      	add	sp, #36	@ 0x24
 8010c54:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8010c58:	27c8      	movs	r7, #200	@ 0xc8
 8010c5a:	4638      	mov	r0, r7
 8010c5c:	b009      	add	sp, #36	@ 0x24
 8010c5e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8010c62:	6827      	ldr	r7, [r4, #0]
 8010c64:	b32f      	cbz	r7, 8010cb2 <rcl_subscription_init+0x12e>
 8010c66:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8010c6a:	b14b      	cbz	r3, 8010c80 <rcl_subscription_init+0xfc>
 8010c6c:	4628      	mov	r0, r5
 8010c6e:	f7ff fd45 	bl	80106fc <rcl_node_get_rmw_handle>
 8010c72:	6823      	ldr	r3, [r4, #0]
 8010c74:	f8d3 10c0 	ldr.w	r1, [r3, #192]	@ 0xc0
 8010c78:	f7fa f984 	bl	800af84 <rmw_destroy_subscription>
 8010c7c:	6827      	ldr	r7, [r4, #0]
 8010c7e:	b197      	cbz	r7, 8010ca6 <rcl_subscription_init+0x122>
 8010c80:	f107 0550 	add.w	r5, r7, #80	@ 0x50
 8010c84:	4628      	mov	r0, r5
 8010c86:	f7f9 fbc5 	bl	800a414 <rcutils_allocator_is_valid>
 8010c8a:	b158      	cbz	r0, 8010ca4 <rcl_subscription_init+0x120>
 8010c8c:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8010c8e:	b148      	cbz	r0, 8010ca4 <rcl_subscription_init+0x120>
 8010c90:	4629      	mov	r1, r5
 8010c92:	f002 f975 	bl	8012f80 <rmw_subscription_content_filter_options_fini>
 8010c96:	4605      	mov	r5, r0
 8010c98:	b9b8      	cbnz	r0, 8010cca <rcl_subscription_init+0x146>
 8010c9a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8010c9c:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 8010c9e:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8010ca0:	4798      	blx	r3
 8010ca2:	66fd      	str	r5, [r7, #108]	@ 0x6c
 8010ca4:	6827      	ldr	r7, [r4, #0]
 8010ca6:	6d73      	ldr	r3, [r6, #84]	@ 0x54
 8010ca8:	6e31      	ldr	r1, [r6, #96]	@ 0x60
 8010caa:	4638      	mov	r0, r7
 8010cac:	4798      	blx	r3
 8010cae:	2300      	movs	r3, #0
 8010cb0:	6023      	str	r3, [r4, #0]
 8010cb2:	2701      	movs	r7, #1
 8010cb4:	e7c8      	b.n	8010c48 <rcl_subscription_init+0xc4>
 8010cb6:	2867      	cmp	r0, #103	@ 0x67
 8010cb8:	d0c6      	beq.n	8010c48 <rcl_subscription_init+0xc4>
 8010cba:	2869      	cmp	r0, #105	@ 0x69
 8010cbc:	d003      	beq.n	8010cc6 <rcl_subscription_init+0x142>
 8010cbe:	280a      	cmp	r0, #10
 8010cc0:	d1f7      	bne.n	8010cb2 <rcl_subscription_init+0x12e>
 8010cc2:	270a      	movs	r7, #10
 8010cc4:	e7c0      	b.n	8010c48 <rcl_subscription_init+0xc4>
 8010cc6:	2767      	movs	r7, #103	@ 0x67
 8010cc8:	e7be      	b.n	8010c48 <rcl_subscription_init+0xc4>
 8010cca:	f7ff f9fb 	bl	80100c4 <rcl_convert_rmw_ret_to_rcl_ret>
 8010cce:	6827      	ldr	r7, [r4, #0]
 8010cd0:	e7e9      	b.n	8010ca6 <rcl_subscription_init+0x122>
 8010cd2:	bf00      	nop

08010cd4 <rcl_subscription_get_default_options>:
 8010cd4:	b570      	push	{r4, r5, r6, lr}
 8010cd6:	4d14      	ldr	r5, [pc, #80]	@ (8010d28 <rcl_subscription_get_default_options+0x54>)
 8010cd8:	4914      	ldr	r1, [pc, #80]	@ (8010d2c <rcl_subscription_get_default_options+0x58>)
 8010cda:	b08a      	sub	sp, #40	@ 0x28
 8010cdc:	4604      	mov	r4, r0
 8010cde:	2250      	movs	r2, #80	@ 0x50
 8010ce0:	4628      	mov	r0, r5
 8010ce2:	f005 f87c 	bl	8015dde <memcpy>
 8010ce6:	a804      	add	r0, sp, #16
 8010ce8:	f7f9 fb86 	bl	800a3f8 <rcutils_get_default_allocator>
 8010cec:	f10d 0c10 	add.w	ip, sp, #16
 8010cf0:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8010cf4:	f105 0e50 	add.w	lr, r5, #80	@ 0x50
 8010cf8:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8010cfc:	466e      	mov	r6, sp
 8010cfe:	f8dc 3000 	ldr.w	r3, [ip]
 8010d02:	f8ce 3000 	str.w	r3, [lr]
 8010d06:	4630      	mov	r0, r6
 8010d08:	f002 f954 	bl	8012fb4 <rmw_get_default_subscription_options>
 8010d0c:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
 8010d10:	f105 0364 	add.w	r3, r5, #100	@ 0x64
 8010d14:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8010d18:	2270      	movs	r2, #112	@ 0x70
 8010d1a:	4629      	mov	r1, r5
 8010d1c:	4620      	mov	r0, r4
 8010d1e:	f005 f85e 	bl	8015dde <memcpy>
 8010d22:	4620      	mov	r0, r4
 8010d24:	b00a      	add	sp, #40	@ 0x28
 8010d26:	bd70      	pop	{r4, r5, r6, pc}
 8010d28:	2000dba0 	.word	0x2000dba0
 8010d2c:	08017310 	.word	0x08017310

08010d30 <rcl_take>:
 8010d30:	2800      	cmp	r0, #0
 8010d32:	d04a      	beq.n	8010dca <rcl_take+0x9a>
 8010d34:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010d38:	4604      	mov	r4, r0
 8010d3a:	6800      	ldr	r0, [r0, #0]
 8010d3c:	b0a4      	sub	sp, #144	@ 0x90
 8010d3e:	2800      	cmp	r0, #0
 8010d40:	d03b      	beq.n	8010dba <rcl_take+0x8a>
 8010d42:	461f      	mov	r7, r3
 8010d44:	f8d0 30c0 	ldr.w	r3, [r0, #192]	@ 0xc0
 8010d48:	2b00      	cmp	r3, #0
 8010d4a:	d036      	beq.n	8010dba <rcl_take+0x8a>
 8010d4c:	460e      	mov	r6, r1
 8010d4e:	2900      	cmp	r1, #0
 8010d50:	d039      	beq.n	8010dc6 <rcl_take+0x96>
 8010d52:	4615      	mov	r5, r2
 8010d54:	2a00      	cmp	r2, #0
 8010d56:	d03c      	beq.n	8010dd2 <rcl_take+0xa2>
 8010d58:	a802      	add	r0, sp, #8
 8010d5a:	f002 f9b5 	bl	80130c8 <rmw_get_zero_initialized_message_info>
 8010d5e:	f10d 0c08 	add.w	ip, sp, #8
 8010d62:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8010d66:	46ae      	mov	lr, r5
 8010d68:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8010d6c:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8010d70:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8010d74:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8010d78:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8010d7c:	e89c 000f 	ldmia.w	ip, {r0, r1, r2, r3}
 8010d80:	f04f 0800 	mov.w	r8, #0
 8010d84:	e88e 000f 	stmia.w	lr, {r0, r1, r2, r3}
 8010d88:	f88d 804f 	strb.w	r8, [sp, #79]	@ 0x4f
 8010d8c:	6822      	ldr	r2, [r4, #0]
 8010d8e:	462b      	mov	r3, r5
 8010d90:	f8d2 00c0 	ldr.w	r0, [r2, #192]	@ 0xc0
 8010d94:	9700      	str	r7, [sp, #0]
 8010d96:	f10d 024f 	add.w	r2, sp, #79	@ 0x4f
 8010d9a:	4631      	mov	r1, r6
 8010d9c:	f002 fdf6 	bl	801398c <rmw_take_with_info>
 8010da0:	4603      	mov	r3, r0
 8010da2:	b9c0      	cbnz	r0, 8010dd6 <rcl_take+0xa6>
 8010da4:	f89d 104f 	ldrb.w	r1, [sp, #79]	@ 0x4f
 8010da8:	f240 1291 	movw	r2, #401	@ 0x191
 8010dac:	2900      	cmp	r1, #0
 8010dae:	bf08      	it	eq
 8010db0:	4613      	moveq	r3, r2
 8010db2:	4618      	mov	r0, r3
 8010db4:	b024      	add	sp, #144	@ 0x90
 8010db6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010dba:	f44f 73c8 	mov.w	r3, #400	@ 0x190
 8010dbe:	4618      	mov	r0, r3
 8010dc0:	b024      	add	sp, #144	@ 0x90
 8010dc2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010dc6:	230b      	movs	r3, #11
 8010dc8:	e7f3      	b.n	8010db2 <rcl_take+0x82>
 8010dca:	f44f 73c8 	mov.w	r3, #400	@ 0x190
 8010dce:	4618      	mov	r0, r3
 8010dd0:	4770      	bx	lr
 8010dd2:	ad14      	add	r5, sp, #80	@ 0x50
 8010dd4:	e7c0      	b.n	8010d58 <rcl_take+0x28>
 8010dd6:	f7ff f975 	bl	80100c4 <rcl_convert_rmw_ret_to_rcl_ret>
 8010dda:	4603      	mov	r3, r0
 8010ddc:	e7e9      	b.n	8010db2 <rcl_take+0x82>
 8010dde:	bf00      	nop

08010de0 <rcl_subscription_get_rmw_handle>:
 8010de0:	b118      	cbz	r0, 8010dea <rcl_subscription_get_rmw_handle+0xa>
 8010de2:	6800      	ldr	r0, [r0, #0]
 8010de4:	b108      	cbz	r0, 8010dea <rcl_subscription_get_rmw_handle+0xa>
 8010de6:	f8d0 00c0 	ldr.w	r0, [r0, #192]	@ 0xc0
 8010dea:	4770      	bx	lr

08010dec <rcl_subscription_is_valid>:
 8010dec:	b130      	cbz	r0, 8010dfc <rcl_subscription_is_valid+0x10>
 8010dee:	6800      	ldr	r0, [r0, #0]
 8010df0:	b120      	cbz	r0, 8010dfc <rcl_subscription_is_valid+0x10>
 8010df2:	f8d0 00c0 	ldr.w	r0, [r0, #192]	@ 0xc0
 8010df6:	3800      	subs	r0, #0
 8010df8:	bf18      	it	ne
 8010dfa:	2001      	movne	r0, #1
 8010dfc:	4770      	bx	lr
 8010dfe:	bf00      	nop

08010e00 <rcl_get_system_time>:
 8010e00:	4608      	mov	r0, r1
 8010e02:	f7f9 bb49 	b.w	800a498 <rcutils_system_time_now>
 8010e06:	bf00      	nop

08010e08 <rcl_get_steady_time>:
 8010e08:	4608      	mov	r0, r1
 8010e0a:	f7f9 bb6d 	b.w	800a4e8 <rcutils_steady_time_now>
 8010e0e:	bf00      	nop

08010e10 <rcl_get_ros_time>:
 8010e10:	7a03      	ldrb	r3, [r0, #8]
 8010e12:	b510      	push	{r4, lr}
 8010e14:	460c      	mov	r4, r1
 8010e16:	b133      	cbz	r3, 8010e26 <rcl_get_ros_time+0x16>
 8010e18:	2105      	movs	r1, #5
 8010e1a:	f001 fd51 	bl	80128c0 <__atomic_load_8>
 8010e1e:	e9c4 0100 	strd	r0, r1, [r4]
 8010e22:	2000      	movs	r0, #0
 8010e24:	bd10      	pop	{r4, pc}
 8010e26:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8010e2a:	4608      	mov	r0, r1
 8010e2c:	f7f9 bb34 	b.w	800a498 <rcutils_system_time_now>

08010e30 <rcl_clock_init>:
 8010e30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010e32:	4605      	mov	r5, r0
 8010e34:	4610      	mov	r0, r2
 8010e36:	4614      	mov	r4, r2
 8010e38:	460e      	mov	r6, r1
 8010e3a:	f7f9 faeb 	bl	800a414 <rcutils_allocator_is_valid>
 8010e3e:	b128      	cbz	r0, 8010e4c <rcl_clock_init+0x1c>
 8010e40:	2d03      	cmp	r5, #3
 8010e42:	d803      	bhi.n	8010e4c <rcl_clock_init+0x1c>
 8010e44:	e8df f005 	tbb	[pc, r5]
 8010e48:	06532e1d 	.word	0x06532e1d
 8010e4c:	f04f 0c0b 	mov.w	ip, #11
 8010e50:	4660      	mov	r0, ip
 8010e52:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010e54:	2e00      	cmp	r6, #0
 8010e56:	d0f9      	beq.n	8010e4c <rcl_clock_init+0x1c>
 8010e58:	2c00      	cmp	r4, #0
 8010e5a:	d0f7      	beq.n	8010e4c <rcl_clock_init+0x1c>
 8010e5c:	2300      	movs	r3, #0
 8010e5e:	e9c6 3301 	strd	r3, r3, [r6, #4]
 8010e62:	f8df e0b4 	ldr.w	lr, [pc, #180]	@ 8010f18 <rcl_clock_init+0xe8>
 8010e66:	6133      	str	r3, [r6, #16]
 8010e68:	f106 0514 	add.w	r5, r6, #20
 8010e6c:	469c      	mov	ip, r3
 8010e6e:	2703      	movs	r7, #3
 8010e70:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8010e72:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8010e74:	6823      	ldr	r3, [r4, #0]
 8010e76:	602b      	str	r3, [r5, #0]
 8010e78:	7037      	strb	r7, [r6, #0]
 8010e7a:	f8c6 e00c 	str.w	lr, [r6, #12]
 8010e7e:	4660      	mov	r0, ip
 8010e80:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010e82:	2e00      	cmp	r6, #0
 8010e84:	d0e2      	beq.n	8010e4c <rcl_clock_init+0x1c>
 8010e86:	2300      	movs	r3, #0
 8010e88:	7033      	strb	r3, [r6, #0]
 8010e8a:	e9c6 3301 	strd	r3, r3, [r6, #4]
 8010e8e:	e9c6 3303 	strd	r3, r3, [r6, #12]
 8010e92:	469c      	mov	ip, r3
 8010e94:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8010e96:	f106 0514 	add.w	r5, r6, #20
 8010e9a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8010e9c:	6823      	ldr	r3, [r4, #0]
 8010e9e:	602b      	str	r3, [r5, #0]
 8010ea0:	4660      	mov	r0, ip
 8010ea2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010ea4:	2e00      	cmp	r6, #0
 8010ea6:	d0d1      	beq.n	8010e4c <rcl_clock_init+0x1c>
 8010ea8:	2c00      	cmp	r4, #0
 8010eaa:	d0cf      	beq.n	8010e4c <rcl_clock_init+0x1c>
 8010eac:	2700      	movs	r7, #0
 8010eae:	7037      	strb	r7, [r6, #0]
 8010eb0:	46a4      	mov	ip, r4
 8010eb2:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8010eb6:	f106 0514 	add.w	r5, r6, #20
 8010eba:	e9c6 7701 	strd	r7, r7, [r6, #4]
 8010ebe:	e9c6 7703 	strd	r7, r7, [r6, #12]
 8010ec2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8010ec4:	f8dc 3000 	ldr.w	r3, [ip]
 8010ec8:	602b      	str	r3, [r5, #0]
 8010eca:	6921      	ldr	r1, [r4, #16]
 8010ecc:	6823      	ldr	r3, [r4, #0]
 8010ece:	2010      	movs	r0, #16
 8010ed0:	4798      	blx	r3
 8010ed2:	6130      	str	r0, [r6, #16]
 8010ed4:	b1d0      	cbz	r0, 8010f0c <rcl_clock_init+0xdc>
 8010ed6:	2200      	movs	r2, #0
 8010ed8:	2300      	movs	r3, #0
 8010eda:	e9c0 2300 	strd	r2, r3, [r0]
 8010ede:	2301      	movs	r3, #1
 8010ee0:	7207      	strb	r7, [r0, #8]
 8010ee2:	4a0c      	ldr	r2, [pc, #48]	@ (8010f14 <rcl_clock_init+0xe4>)
 8010ee4:	7033      	strb	r3, [r6, #0]
 8010ee6:	46bc      	mov	ip, r7
 8010ee8:	60f2      	str	r2, [r6, #12]
 8010eea:	4660      	mov	r0, ip
 8010eec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010eee:	2e00      	cmp	r6, #0
 8010ef0:	d0ac      	beq.n	8010e4c <rcl_clock_init+0x1c>
 8010ef2:	2c00      	cmp	r4, #0
 8010ef4:	d0aa      	beq.n	8010e4c <rcl_clock_init+0x1c>
 8010ef6:	2300      	movs	r3, #0
 8010ef8:	e9c6 3301 	strd	r3, r3, [r6, #4]
 8010efc:	f8df e01c 	ldr.w	lr, [pc, #28]	@ 8010f1c <rcl_clock_init+0xec>
 8010f00:	6133      	str	r3, [r6, #16]
 8010f02:	f106 0514 	add.w	r5, r6, #20
 8010f06:	469c      	mov	ip, r3
 8010f08:	2702      	movs	r7, #2
 8010f0a:	e7b1      	b.n	8010e70 <rcl_clock_init+0x40>
 8010f0c:	f04f 0c0a 	mov.w	ip, #10
 8010f10:	e79e      	b.n	8010e50 <rcl_clock_init+0x20>
 8010f12:	bf00      	nop
 8010f14:	08010e11 	.word	0x08010e11
 8010f18:	08010e09 	.word	0x08010e09
 8010f1c:	08010e01 	.word	0x08010e01

08010f20 <rcl_clock_get_now>:
 8010f20:	b140      	cbz	r0, 8010f34 <rcl_clock_get_now+0x14>
 8010f22:	b139      	cbz	r1, 8010f34 <rcl_clock_get_now+0x14>
 8010f24:	7803      	ldrb	r3, [r0, #0]
 8010f26:	b11b      	cbz	r3, 8010f30 <rcl_clock_get_now+0x10>
 8010f28:	68c3      	ldr	r3, [r0, #12]
 8010f2a:	b10b      	cbz	r3, 8010f30 <rcl_clock_get_now+0x10>
 8010f2c:	6900      	ldr	r0, [r0, #16]
 8010f2e:	4718      	bx	r3
 8010f30:	2001      	movs	r0, #1
 8010f32:	4770      	bx	lr
 8010f34:	200b      	movs	r0, #11
 8010f36:	4770      	bx	lr

08010f38 <rcl_timer_call>:
 8010f38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010f3c:	b087      	sub	sp, #28
 8010f3e:	2800      	cmp	r0, #0
 8010f40:	d06d      	beq.n	801101e <rcl_timer_call+0xe6>
 8010f42:	6803      	ldr	r3, [r0, #0]
 8010f44:	4604      	mov	r4, r0
 8010f46:	2b00      	cmp	r3, #0
 8010f48:	d063      	beq.n	8011012 <rcl_timer_call+0xda>
 8010f4a:	f3bf 8f5b 	dmb	ish
 8010f4e:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8010f52:	f3bf 8f5b 	dmb	ish
 8010f56:	2b00      	cmp	r3, #0
 8010f58:	d150      	bne.n	8010ffc <rcl_timer_call+0xc4>
 8010f5a:	6803      	ldr	r3, [r0, #0]
 8010f5c:	a904      	add	r1, sp, #16
 8010f5e:	6818      	ldr	r0, [r3, #0]
 8010f60:	f7ff ffde 	bl	8010f20 <rcl_clock_get_now>
 8010f64:	4605      	mov	r5, r0
 8010f66:	2800      	cmp	r0, #0
 8010f68:	d14a      	bne.n	8011000 <rcl_timer_call+0xc8>
 8010f6a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8010f6e:	2b00      	cmp	r3, #0
 8010f70:	db4a      	blt.n	8011008 <rcl_timer_call+0xd0>
 8010f72:	6820      	ldr	r0, [r4, #0]
 8010f74:	f04f 0a05 	mov.w	sl, #5
 8010f78:	f8cd a000 	str.w	sl, [sp]
 8010f7c:	3020      	adds	r0, #32
 8010f7e:	f001 fd0b 	bl	8012998 <__atomic_exchange_8>
 8010f82:	6823      	ldr	r3, [r4, #0]
 8010f84:	f3bf 8f5b 	dmb	ish
 8010f88:	4680      	mov	r8, r0
 8010f8a:	f8d3 b010 	ldr.w	fp, [r3, #16]
 8010f8e:	f3bf 8f5b 	dmb	ish
 8010f92:	6820      	ldr	r0, [r4, #0]
 8010f94:	4689      	mov	r9, r1
 8010f96:	3028      	adds	r0, #40	@ 0x28
 8010f98:	4651      	mov	r1, sl
 8010f9a:	f001 fc91 	bl	80128c0 <__atomic_load_8>
 8010f9e:	4606      	mov	r6, r0
 8010fa0:	6820      	ldr	r0, [r4, #0]
 8010fa2:	460f      	mov	r7, r1
 8010fa4:	3018      	adds	r0, #24
 8010fa6:	4651      	mov	r1, sl
 8010fa8:	f001 fc8a 	bl	80128c0 <__atomic_load_8>
 8010fac:	1836      	adds	r6, r6, r0
 8010fae:	4602      	mov	r2, r0
 8010fb0:	4682      	mov	sl, r0
 8010fb2:	e9dd 0c04 	ldrd	r0, ip, [sp, #16]
 8010fb6:	eb47 0701 	adc.w	r7, r7, r1
 8010fba:	4286      	cmp	r6, r0
 8010fbc:	460b      	mov	r3, r1
 8010fbe:	eb77 010c 	sbcs.w	r1, r7, ip
 8010fc2:	da04      	bge.n	8010fce <rcl_timer_call+0x96>
 8010fc4:	ea53 0102 	orrs.w	r1, r3, r2
 8010fc8:	d12e      	bne.n	8011028 <rcl_timer_call+0xf0>
 8010fca:	4606      	mov	r6, r0
 8010fcc:	4667      	mov	r7, ip
 8010fce:	6820      	ldr	r0, [r4, #0]
 8010fd0:	2105      	movs	r1, #5
 8010fd2:	4632      	mov	r2, r6
 8010fd4:	463b      	mov	r3, r7
 8010fd6:	3028      	adds	r0, #40	@ 0x28
 8010fd8:	9100      	str	r1, [sp, #0]
 8010fda:	f001 fca7 	bl	801292c <__atomic_store_8>
 8010fde:	f1bb 0f00 	cmp.w	fp, #0
 8010fe2:	d00d      	beq.n	8011000 <rcl_timer_call+0xc8>
 8010fe4:	9a04      	ldr	r2, [sp, #16]
 8010fe6:	9b05      	ldr	r3, [sp, #20]
 8010fe8:	ebb2 0208 	subs.w	r2, r2, r8
 8010fec:	4620      	mov	r0, r4
 8010fee:	eb63 0309 	sbc.w	r3, r3, r9
 8010ff2:	47d8      	blx	fp
 8010ff4:	4628      	mov	r0, r5
 8010ff6:	b007      	add	sp, #28
 8010ff8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010ffc:	f240 3521 	movw	r5, #801	@ 0x321
 8011000:	4628      	mov	r0, r5
 8011002:	b007      	add	sp, #28
 8011004:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011008:	2501      	movs	r5, #1
 801100a:	4628      	mov	r0, r5
 801100c:	b007      	add	sp, #28
 801100e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011012:	f44f 7548 	mov.w	r5, #800	@ 0x320
 8011016:	4628      	mov	r0, r5
 8011018:	b007      	add	sp, #28
 801101a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801101e:	250b      	movs	r5, #11
 8011020:	4628      	mov	r0, r5
 8011022:	b007      	add	sp, #28
 8011024:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011028:	1b80      	subs	r0, r0, r6
 801102a:	eb6c 0107 	sbc.w	r1, ip, r7
 801102e:	3801      	subs	r0, #1
 8011030:	f161 0100 	sbc.w	r1, r1, #0
 8011034:	e9cd 3202 	strd	r3, r2, [sp, #8]
 8011038:	f7ef fd28 	bl	8000a8c <__aeabi_ldivmod>
 801103c:	9b02      	ldr	r3, [sp, #8]
 801103e:	3001      	adds	r0, #1
 8011040:	f141 0100 	adc.w	r1, r1, #0
 8011044:	fb00 f303 	mul.w	r3, r0, r3
 8011048:	fb01 330a 	mla	r3, r1, sl, r3
 801104c:	fba0 0a0a 	umull	r0, sl, r0, sl
 8011050:	1986      	adds	r6, r0, r6
 8011052:	4453      	add	r3, sl
 8011054:	eb43 0707 	adc.w	r7, r3, r7
 8011058:	e7b9      	b.n	8010fce <rcl_timer_call+0x96>
 801105a:	bf00      	nop

0801105c <rcl_timer_is_ready>:
 801105c:	b570      	push	{r4, r5, r6, lr}
 801105e:	b082      	sub	sp, #8
 8011060:	b378      	cbz	r0, 80110c2 <rcl_timer_is_ready+0x66>
 8011062:	6803      	ldr	r3, [r0, #0]
 8011064:	4604      	mov	r4, r0
 8011066:	b383      	cbz	r3, 80110ca <rcl_timer_is_ready+0x6e>
 8011068:	460d      	mov	r5, r1
 801106a:	b351      	cbz	r1, 80110c2 <rcl_timer_is_ready+0x66>
 801106c:	f3bf 8f5b 	dmb	ish
 8011070:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8011074:	f3bf 8f5b 	dmb	ish
 8011078:	b953      	cbnz	r3, 8011090 <rcl_timer_is_ready+0x34>
 801107a:	6803      	ldr	r3, [r0, #0]
 801107c:	4669      	mov	r1, sp
 801107e:	6818      	ldr	r0, [r3, #0]
 8011080:	f7ff ff4e 	bl	8010f20 <rcl_clock_get_now>
 8011084:	4606      	mov	r6, r0
 8011086:	b140      	cbz	r0, 801109a <rcl_timer_is_ready+0x3e>
 8011088:	f240 3321 	movw	r3, #801	@ 0x321
 801108c:	4298      	cmp	r0, r3
 801108e:	d101      	bne.n	8011094 <rcl_timer_is_ready+0x38>
 8011090:	2600      	movs	r6, #0
 8011092:	702e      	strb	r6, [r5, #0]
 8011094:	4630      	mov	r0, r6
 8011096:	b002      	add	sp, #8
 8011098:	bd70      	pop	{r4, r5, r6, pc}
 801109a:	6820      	ldr	r0, [r4, #0]
 801109c:	2105      	movs	r1, #5
 801109e:	3028      	adds	r0, #40	@ 0x28
 80110a0:	f001 fc0e 	bl	80128c0 <__atomic_load_8>
 80110a4:	9b00      	ldr	r3, [sp, #0]
 80110a6:	1ac0      	subs	r0, r0, r3
 80110a8:	9b01      	ldr	r3, [sp, #4]
 80110aa:	eb61 0103 	sbc.w	r1, r1, r3
 80110ae:	2801      	cmp	r0, #1
 80110b0:	f171 0300 	sbcs.w	r3, r1, #0
 80110b4:	bfb4      	ite	lt
 80110b6:	2301      	movlt	r3, #1
 80110b8:	2300      	movge	r3, #0
 80110ba:	4630      	mov	r0, r6
 80110bc:	702b      	strb	r3, [r5, #0]
 80110be:	b002      	add	sp, #8
 80110c0:	bd70      	pop	{r4, r5, r6, pc}
 80110c2:	260b      	movs	r6, #11
 80110c4:	4630      	mov	r0, r6
 80110c6:	b002      	add	sp, #8
 80110c8:	bd70      	pop	{r4, r5, r6, pc}
 80110ca:	f44f 7648 	mov.w	r6, #800	@ 0x320
 80110ce:	e7e1      	b.n	8011094 <rcl_timer_is_ready+0x38>

080110d0 <rcl_timer_get_time_until_next_call>:
 80110d0:	b570      	push	{r4, r5, r6, lr}
 80110d2:	b082      	sub	sp, #8
 80110d4:	b330      	cbz	r0, 8011124 <rcl_timer_get_time_until_next_call+0x54>
 80110d6:	6803      	ldr	r3, [r0, #0]
 80110d8:	4604      	mov	r4, r0
 80110da:	b33b      	cbz	r3, 801112c <rcl_timer_get_time_until_next_call+0x5c>
 80110dc:	460d      	mov	r5, r1
 80110de:	b309      	cbz	r1, 8011124 <rcl_timer_get_time_until_next_call+0x54>
 80110e0:	f3bf 8f5b 	dmb	ish
 80110e4:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 80110e8:	f3bf 8f5b 	dmb	ish
 80110ec:	b9ab      	cbnz	r3, 801111a <rcl_timer_get_time_until_next_call+0x4a>
 80110ee:	6803      	ldr	r3, [r0, #0]
 80110f0:	4669      	mov	r1, sp
 80110f2:	6818      	ldr	r0, [r3, #0]
 80110f4:	f7ff ff14 	bl	8010f20 <rcl_clock_get_now>
 80110f8:	4606      	mov	r6, r0
 80110fa:	b958      	cbnz	r0, 8011114 <rcl_timer_get_time_until_next_call+0x44>
 80110fc:	6820      	ldr	r0, [r4, #0]
 80110fe:	2105      	movs	r1, #5
 8011100:	3028      	adds	r0, #40	@ 0x28
 8011102:	f001 fbdd 	bl	80128c0 <__atomic_load_8>
 8011106:	9b00      	ldr	r3, [sp, #0]
 8011108:	1ac0      	subs	r0, r0, r3
 801110a:	9b01      	ldr	r3, [sp, #4]
 801110c:	6028      	str	r0, [r5, #0]
 801110e:	eb61 0103 	sbc.w	r1, r1, r3
 8011112:	6069      	str	r1, [r5, #4]
 8011114:	4630      	mov	r0, r6
 8011116:	b002      	add	sp, #8
 8011118:	bd70      	pop	{r4, r5, r6, pc}
 801111a:	f240 3621 	movw	r6, #801	@ 0x321
 801111e:	4630      	mov	r0, r6
 8011120:	b002      	add	sp, #8
 8011122:	bd70      	pop	{r4, r5, r6, pc}
 8011124:	260b      	movs	r6, #11
 8011126:	4630      	mov	r0, r6
 8011128:	b002      	add	sp, #8
 801112a:	bd70      	pop	{r4, r5, r6, pc}
 801112c:	f44f 7648 	mov.w	r6, #800	@ 0x320
 8011130:	e7f0      	b.n	8011114 <rcl_timer_get_time_until_next_call+0x44>
 8011132:	bf00      	nop

08011134 <rcl_timer_get_guard_condition>:
 8011134:	b130      	cbz	r0, 8011144 <rcl_timer_get_guard_condition+0x10>
 8011136:	6800      	ldr	r0, [r0, #0]
 8011138:	b120      	cbz	r0, 8011144 <rcl_timer_get_guard_condition+0x10>
 801113a:	68c3      	ldr	r3, [r0, #12]
 801113c:	b10b      	cbz	r3, 8011142 <rcl_timer_get_guard_condition+0xe>
 801113e:	3008      	adds	r0, #8
 8011140:	4770      	bx	lr
 8011142:	4618      	mov	r0, r3
 8011144:	4770      	bx	lr
 8011146:	bf00      	nop

08011148 <rcl_validate_enclave_name_with_size>:
 8011148:	b378      	cbz	r0, 80111aa <rcl_validate_enclave_name_with_size+0x62>
 801114a:	b570      	push	{r4, r5, r6, lr}
 801114c:	4615      	mov	r5, r2
 801114e:	b0c2      	sub	sp, #264	@ 0x108
 8011150:	b302      	cbz	r2, 8011194 <rcl_validate_enclave_name_with_size+0x4c>
 8011152:	461e      	mov	r6, r3
 8011154:	466a      	mov	r2, sp
 8011156:	ab01      	add	r3, sp, #4
 8011158:	460c      	mov	r4, r1
 801115a:	f002 f833 	bl	80131c4 <rmw_validate_namespace_with_size>
 801115e:	4684      	mov	ip, r0
 8011160:	b9e8      	cbnz	r0, 801119e <rcl_validate_enclave_name_with_size+0x56>
 8011162:	9b00      	ldr	r3, [sp, #0]
 8011164:	b923      	cbnz	r3, 8011170 <rcl_validate_enclave_name_with_size+0x28>
 8011166:	2300      	movs	r3, #0
 8011168:	602b      	str	r3, [r5, #0]
 801116a:	4660      	mov	r0, ip
 801116c:	b042      	add	sp, #264	@ 0x108
 801116e:	bd70      	pop	{r4, r5, r6, pc}
 8011170:	2b07      	cmp	r3, #7
 8011172:	d007      	beq.n	8011184 <rcl_validate_enclave_name_with_size+0x3c>
 8011174:	1e5a      	subs	r2, r3, #1
 8011176:	2a05      	cmp	r2, #5
 8011178:	d833      	bhi.n	80111e2 <rcl_validate_enclave_name_with_size+0x9a>
 801117a:	e8df f002 	tbb	[pc, r2]
 801117e:	2c2f      	.short	0x2c2f
 8011180:	1a232629 	.word	0x1a232629
 8011184:	2cff      	cmp	r4, #255	@ 0xff
 8011186:	d9ee      	bls.n	8011166 <rcl_validate_enclave_name_with_size+0x1e>
 8011188:	602b      	str	r3, [r5, #0]
 801118a:	2e00      	cmp	r6, #0
 801118c:	d0ed      	beq.n	801116a <rcl_validate_enclave_name_with_size+0x22>
 801118e:	23fe      	movs	r3, #254	@ 0xfe
 8011190:	6033      	str	r3, [r6, #0]
 8011192:	e7ea      	b.n	801116a <rcl_validate_enclave_name_with_size+0x22>
 8011194:	f04f 0c0b 	mov.w	ip, #11
 8011198:	4660      	mov	r0, ip
 801119a:	b042      	add	sp, #264	@ 0x108
 801119c:	bd70      	pop	{r4, r5, r6, pc}
 801119e:	f7fe ff91 	bl	80100c4 <rcl_convert_rmw_ret_to_rcl_ret>
 80111a2:	4684      	mov	ip, r0
 80111a4:	4660      	mov	r0, ip
 80111a6:	b042      	add	sp, #264	@ 0x108
 80111a8:	bd70      	pop	{r4, r5, r6, pc}
 80111aa:	f04f 0c0b 	mov.w	ip, #11
 80111ae:	4660      	mov	r0, ip
 80111b0:	4770      	bx	lr
 80111b2:	2306      	movs	r3, #6
 80111b4:	602b      	str	r3, [r5, #0]
 80111b6:	2e00      	cmp	r6, #0
 80111b8:	d0d7      	beq.n	801116a <rcl_validate_enclave_name_with_size+0x22>
 80111ba:	9b01      	ldr	r3, [sp, #4]
 80111bc:	6033      	str	r3, [r6, #0]
 80111be:	4660      	mov	r0, ip
 80111c0:	b042      	add	sp, #264	@ 0x108
 80111c2:	bd70      	pop	{r4, r5, r6, pc}
 80111c4:	2305      	movs	r3, #5
 80111c6:	602b      	str	r3, [r5, #0]
 80111c8:	e7f5      	b.n	80111b6 <rcl_validate_enclave_name_with_size+0x6e>
 80111ca:	2304      	movs	r3, #4
 80111cc:	602b      	str	r3, [r5, #0]
 80111ce:	e7f2      	b.n	80111b6 <rcl_validate_enclave_name_with_size+0x6e>
 80111d0:	2303      	movs	r3, #3
 80111d2:	602b      	str	r3, [r5, #0]
 80111d4:	e7ef      	b.n	80111b6 <rcl_validate_enclave_name_with_size+0x6e>
 80111d6:	2302      	movs	r3, #2
 80111d8:	602b      	str	r3, [r5, #0]
 80111da:	e7ec      	b.n	80111b6 <rcl_validate_enclave_name_with_size+0x6e>
 80111dc:	2301      	movs	r3, #1
 80111de:	602b      	str	r3, [r5, #0]
 80111e0:	e7e9      	b.n	80111b6 <rcl_validate_enclave_name_with_size+0x6e>
 80111e2:	4a04      	ldr	r2, [pc, #16]	@ (80111f4 <rcl_validate_enclave_name_with_size+0xac>)
 80111e4:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80111e8:	a802      	add	r0, sp, #8
 80111ea:	f001 fd23 	bl	8012c34 <rcutils_snprintf>
 80111ee:	f04f 0c01 	mov.w	ip, #1
 80111f2:	e7ba      	b.n	801116a <rcl_validate_enclave_name_with_size+0x22>
 80111f4:	08017360 	.word	0x08017360

080111f8 <rcl_validate_enclave_name>:
 80111f8:	b168      	cbz	r0, 8011216 <rcl_validate_enclave_name+0x1e>
 80111fa:	b570      	push	{r4, r5, r6, lr}
 80111fc:	460d      	mov	r5, r1
 80111fe:	4616      	mov	r6, r2
 8011200:	4604      	mov	r4, r0
 8011202:	f7ee fff7 	bl	80001f4 <strlen>
 8011206:	4633      	mov	r3, r6
 8011208:	4601      	mov	r1, r0
 801120a:	462a      	mov	r2, r5
 801120c:	4620      	mov	r0, r4
 801120e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8011212:	f7ff bf99 	b.w	8011148 <rcl_validate_enclave_name_with_size>
 8011216:	200b      	movs	r0, #11
 8011218:	4770      	bx	lr
 801121a:	bf00      	nop

0801121c <rcl_get_zero_initialized_wait_set>:
 801121c:	b510      	push	{r4, lr}
 801121e:	4c08      	ldr	r4, [pc, #32]	@ (8011240 <rcl_get_zero_initialized_wait_set+0x24>)
 8011220:	4686      	mov	lr, r0
 8011222:	4684      	mov	ip, r0
 8011224:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8011226:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801122a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801122c:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8011230:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8011232:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8011236:	6823      	ldr	r3, [r4, #0]
 8011238:	f8cc 3000 	str.w	r3, [ip]
 801123c:	4670      	mov	r0, lr
 801123e:	bd10      	pop	{r4, pc}
 8011240:	080173c0 	.word	0x080173c0

08011244 <rcl_wait_set_is_valid>:
 8011244:	b118      	cbz	r0, 801124e <rcl_wait_set_is_valid+0xa>
 8011246:	6b00      	ldr	r0, [r0, #48]	@ 0x30
 8011248:	3800      	subs	r0, #0
 801124a:	bf18      	it	ne
 801124c:	2001      	movne	r0, #1
 801124e:	4770      	bx	lr

08011250 <rcl_wait_set_fini>:
 8011250:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011254:	b082      	sub	sp, #8
 8011256:	2800      	cmp	r0, #0
 8011258:	f000 8095 	beq.w	8011386 <rcl_wait_set_fini+0x136>
 801125c:	6b06      	ldr	r6, [r0, #48]	@ 0x30
 801125e:	4604      	mov	r4, r0
 8011260:	2e00      	cmp	r6, #0
 8011262:	f000 808c 	beq.w	801137e <rcl_wait_set_fini+0x12e>
 8011266:	6bf0      	ldr	r0, [r6, #60]	@ 0x3c
 8011268:	f002 fd66 	bl	8013d38 <rmw_destroy_wait_set>
 801126c:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 801126e:	1e06      	subs	r6, r0, #0
 8011270:	bf18      	it	ne
 8011272:	f44f 7661 	movne.w	r6, #900	@ 0x384
 8011276:	2d00      	cmp	r5, #0
 8011278:	f000 8081 	beq.w	801137e <rcl_wait_set_fini+0x12e>
 801127c:	6820      	ldr	r0, [r4, #0]
 801127e:	f8d5 804c 	ldr.w	r8, [r5, #76]	@ 0x4c
 8011282:	6da9      	ldr	r1, [r5, #88]	@ 0x58
 8011284:	2700      	movs	r7, #0
 8011286:	6067      	str	r7, [r4, #4]
 8011288:	602f      	str	r7, [r5, #0]
 801128a:	b120      	cbz	r0, 8011296 <rcl_wait_set_fini+0x46>
 801128c:	9101      	str	r1, [sp, #4]
 801128e:	47c0      	blx	r8
 8011290:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 8011292:	9901      	ldr	r1, [sp, #4]
 8011294:	6027      	str	r7, [r4, #0]
 8011296:	68a8      	ldr	r0, [r5, #8]
 8011298:	b120      	cbz	r0, 80112a4 <rcl_wait_set_fini+0x54>
 801129a:	47c0      	blx	r8
 801129c:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 801129e:	2300      	movs	r3, #0
 80112a0:	e9c5 3301 	strd	r3, r3, [r5, #4]
 80112a4:	68a0      	ldr	r0, [r4, #8]
 80112a6:	6cef      	ldr	r7, [r5, #76]	@ 0x4c
 80112a8:	6da9      	ldr	r1, [r5, #88]	@ 0x58
 80112aa:	f04f 0800 	mov.w	r8, #0
 80112ae:	f8c4 800c 	str.w	r8, [r4, #12]
 80112b2:	f8c5 800c 	str.w	r8, [r5, #12]
 80112b6:	b128      	cbz	r0, 80112c4 <rcl_wait_set_fini+0x74>
 80112b8:	47b8      	blx	r7
 80112ba:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 80112bc:	f8c4 8008 	str.w	r8, [r4, #8]
 80112c0:	6cef      	ldr	r7, [r5, #76]	@ 0x4c
 80112c2:	6da9      	ldr	r1, [r5, #88]	@ 0x58
 80112c4:	6968      	ldr	r0, [r5, #20]
 80112c6:	f04f 0800 	mov.w	r8, #0
 80112ca:	f8c5 8010 	str.w	r8, [r5, #16]
 80112ce:	b128      	cbz	r0, 80112dc <rcl_wait_set_fini+0x8c>
 80112d0:	47b8      	blx	r7
 80112d2:	f8c5 8014 	str.w	r8, [r5, #20]
 80112d6:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 80112d8:	6cef      	ldr	r7, [r5, #76]	@ 0x4c
 80112da:	6da9      	ldr	r1, [r5, #88]	@ 0x58
 80112dc:	6920      	ldr	r0, [r4, #16]
 80112de:	f04f 0800 	mov.w	r8, #0
 80112e2:	f8c4 8014 	str.w	r8, [r4, #20]
 80112e6:	f8c5 8040 	str.w	r8, [r5, #64]	@ 0x40
 80112ea:	b128      	cbz	r0, 80112f8 <rcl_wait_set_fini+0xa8>
 80112ec:	47b8      	blx	r7
 80112ee:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 80112f0:	f8c4 8010 	str.w	r8, [r4, #16]
 80112f4:	6cef      	ldr	r7, [r5, #76]	@ 0x4c
 80112f6:	6da9      	ldr	r1, [r5, #88]	@ 0x58
 80112f8:	69a0      	ldr	r0, [r4, #24]
 80112fa:	f04f 0800 	mov.w	r8, #0
 80112fe:	f8c4 801c 	str.w	r8, [r4, #28]
 8011302:	f8c5 8018 	str.w	r8, [r5, #24]
 8011306:	b128      	cbz	r0, 8011314 <rcl_wait_set_fini+0xc4>
 8011308:	9101      	str	r1, [sp, #4]
 801130a:	47b8      	blx	r7
 801130c:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 801130e:	9901      	ldr	r1, [sp, #4]
 8011310:	f8c4 8018 	str.w	r8, [r4, #24]
 8011314:	6a28      	ldr	r0, [r5, #32]
 8011316:	b120      	cbz	r0, 8011322 <rcl_wait_set_fini+0xd2>
 8011318:	47b8      	blx	r7
 801131a:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 801131c:	2300      	movs	r3, #0
 801131e:	e9c5 3307 	strd	r3, r3, [r5, #28]
 8011322:	6a20      	ldr	r0, [r4, #32]
 8011324:	f8d5 804c 	ldr.w	r8, [r5, #76]	@ 0x4c
 8011328:	6da9      	ldr	r1, [r5, #88]	@ 0x58
 801132a:	2700      	movs	r7, #0
 801132c:	6267      	str	r7, [r4, #36]	@ 0x24
 801132e:	626f      	str	r7, [r5, #36]	@ 0x24
 8011330:	b120      	cbz	r0, 801133c <rcl_wait_set_fini+0xec>
 8011332:	9101      	str	r1, [sp, #4]
 8011334:	47c0      	blx	r8
 8011336:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 8011338:	9901      	ldr	r1, [sp, #4]
 801133a:	6227      	str	r7, [r4, #32]
 801133c:	6ae8      	ldr	r0, [r5, #44]	@ 0x2c
 801133e:	b120      	cbz	r0, 801134a <rcl_wait_set_fini+0xfa>
 8011340:	47c0      	blx	r8
 8011342:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 8011344:	2300      	movs	r3, #0
 8011346:	e9c5 330a 	strd	r3, r3, [r5, #40]	@ 0x28
 801134a:	6aa0      	ldr	r0, [r4, #40]	@ 0x28
 801134c:	f8d5 804c 	ldr.w	r8, [r5, #76]	@ 0x4c
 8011350:	6da9      	ldr	r1, [r5, #88]	@ 0x58
 8011352:	2700      	movs	r7, #0
 8011354:	62e7      	str	r7, [r4, #44]	@ 0x2c
 8011356:	632f      	str	r7, [r5, #48]	@ 0x30
 8011358:	b120      	cbz	r0, 8011364 <rcl_wait_set_fini+0x114>
 801135a:	9101      	str	r1, [sp, #4]
 801135c:	47c0      	blx	r8
 801135e:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 8011360:	9901      	ldr	r1, [sp, #4]
 8011362:	62a7      	str	r7, [r4, #40]	@ 0x28
 8011364:	6ba8      	ldr	r0, [r5, #56]	@ 0x38
 8011366:	b120      	cbz	r0, 8011372 <rcl_wait_set_fini+0x122>
 8011368:	47c0      	blx	r8
 801136a:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 801136c:	2300      	movs	r3, #0
 801136e:	e9c5 330d 	strd	r3, r3, [r5, #52]	@ 0x34
 8011372:	6ceb      	ldr	r3, [r5, #76]	@ 0x4c
 8011374:	6da9      	ldr	r1, [r5, #88]	@ 0x58
 8011376:	4628      	mov	r0, r5
 8011378:	4798      	blx	r3
 801137a:	2300      	movs	r3, #0
 801137c:	6323      	str	r3, [r4, #48]	@ 0x30
 801137e:	4630      	mov	r0, r6
 8011380:	b002      	add	sp, #8
 8011382:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011386:	260b      	movs	r6, #11
 8011388:	4630      	mov	r0, r6
 801138a:	b002      	add	sp, #8
 801138c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08011390 <rcl_wait_set_add_subscription>:
 8011390:	b318      	cbz	r0, 80113da <rcl_wait_set_add_subscription+0x4a>
 8011392:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 8011394:	b570      	push	{r4, r5, r6, lr}
 8011396:	4604      	mov	r4, r0
 8011398:	b30b      	cbz	r3, 80113de <rcl_wait_set_add_subscription+0x4e>
 801139a:	b319      	cbz	r1, 80113e4 <rcl_wait_set_add_subscription+0x54>
 801139c:	681d      	ldr	r5, [r3, #0]
 801139e:	6840      	ldr	r0, [r0, #4]
 80113a0:	4285      	cmp	r5, r0
 80113a2:	d217      	bcs.n	80113d4 <rcl_wait_set_add_subscription+0x44>
 80113a4:	6820      	ldr	r0, [r4, #0]
 80113a6:	1c6e      	adds	r6, r5, #1
 80113a8:	601e      	str	r6, [r3, #0]
 80113aa:	f840 1025 	str.w	r1, [r0, r5, lsl #2]
 80113ae:	b102      	cbz	r2, 80113b2 <rcl_wait_set_add_subscription+0x22>
 80113b0:	6015      	str	r5, [r2, #0]
 80113b2:	4608      	mov	r0, r1
 80113b4:	f7ff fd14 	bl	8010de0 <rcl_subscription_get_rmw_handle>
 80113b8:	b150      	cbz	r0, 80113d0 <rcl_wait_set_add_subscription+0x40>
 80113ba:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 80113bc:	6842      	ldr	r2, [r0, #4]
 80113be:	689b      	ldr	r3, [r3, #8]
 80113c0:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80113c4:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 80113c6:	6853      	ldr	r3, [r2, #4]
 80113c8:	3301      	adds	r3, #1
 80113ca:	2000      	movs	r0, #0
 80113cc:	6053      	str	r3, [r2, #4]
 80113ce:	bd70      	pop	{r4, r5, r6, pc}
 80113d0:	2001      	movs	r0, #1
 80113d2:	bd70      	pop	{r4, r5, r6, pc}
 80113d4:	f240 3086 	movw	r0, #902	@ 0x386
 80113d8:	bd70      	pop	{r4, r5, r6, pc}
 80113da:	200b      	movs	r0, #11
 80113dc:	4770      	bx	lr
 80113de:	f44f 7061 	mov.w	r0, #900	@ 0x384
 80113e2:	bd70      	pop	{r4, r5, r6, pc}
 80113e4:	200b      	movs	r0, #11
 80113e6:	bd70      	pop	{r4, r5, r6, pc}

080113e8 <rcl_wait_set_clear>:
 80113e8:	2800      	cmp	r0, #0
 80113ea:	d073      	beq.n	80114d4 <rcl_wait_set_clear+0xec>
 80113ec:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 80113ee:	b510      	push	{r4, lr}
 80113f0:	4604      	mov	r4, r0
 80113f2:	2b00      	cmp	r3, #0
 80113f4:	d070      	beq.n	80114d8 <rcl_wait_set_clear+0xf0>
 80113f6:	6800      	ldr	r0, [r0, #0]
 80113f8:	b138      	cbz	r0, 801140a <rcl_wait_set_clear+0x22>
 80113fa:	6862      	ldr	r2, [r4, #4]
 80113fc:	2100      	movs	r1, #0
 80113fe:	0092      	lsls	r2, r2, #2
 8011400:	f004 fc24 	bl	8015c4c <memset>
 8011404:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8011406:	2200      	movs	r2, #0
 8011408:	601a      	str	r2, [r3, #0]
 801140a:	68a0      	ldr	r0, [r4, #8]
 801140c:	b138      	cbz	r0, 801141e <rcl_wait_set_clear+0x36>
 801140e:	68e2      	ldr	r2, [r4, #12]
 8011410:	2100      	movs	r1, #0
 8011412:	0092      	lsls	r2, r2, #2
 8011414:	f004 fc1a 	bl	8015c4c <memset>
 8011418:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 801141a:	2200      	movs	r2, #0
 801141c:	60da      	str	r2, [r3, #12]
 801141e:	69a0      	ldr	r0, [r4, #24]
 8011420:	b138      	cbz	r0, 8011432 <rcl_wait_set_clear+0x4a>
 8011422:	69e2      	ldr	r2, [r4, #28]
 8011424:	2100      	movs	r1, #0
 8011426:	0092      	lsls	r2, r2, #2
 8011428:	f004 fc10 	bl	8015c4c <memset>
 801142c:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 801142e:	2200      	movs	r2, #0
 8011430:	619a      	str	r2, [r3, #24]
 8011432:	6a20      	ldr	r0, [r4, #32]
 8011434:	b138      	cbz	r0, 8011446 <rcl_wait_set_clear+0x5e>
 8011436:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 8011438:	2100      	movs	r1, #0
 801143a:	0092      	lsls	r2, r2, #2
 801143c:	f004 fc06 	bl	8015c4c <memset>
 8011440:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8011442:	2200      	movs	r2, #0
 8011444:	625a      	str	r2, [r3, #36]	@ 0x24
 8011446:	6aa0      	ldr	r0, [r4, #40]	@ 0x28
 8011448:	b138      	cbz	r0, 801145a <rcl_wait_set_clear+0x72>
 801144a:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 801144c:	2100      	movs	r1, #0
 801144e:	0092      	lsls	r2, r2, #2
 8011450:	f004 fbfc 	bl	8015c4c <memset>
 8011454:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8011456:	2200      	movs	r2, #0
 8011458:	631a      	str	r2, [r3, #48]	@ 0x30
 801145a:	6920      	ldr	r0, [r4, #16]
 801145c:	b138      	cbz	r0, 801146e <rcl_wait_set_clear+0x86>
 801145e:	6962      	ldr	r2, [r4, #20]
 8011460:	2100      	movs	r1, #0
 8011462:	0092      	lsls	r2, r2, #2
 8011464:	f004 fbf2 	bl	8015c4c <memset>
 8011468:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 801146a:	2200      	movs	r2, #0
 801146c:	641a      	str	r2, [r3, #64]	@ 0x40
 801146e:	6898      	ldr	r0, [r3, #8]
 8011470:	b138      	cbz	r0, 8011482 <rcl_wait_set_clear+0x9a>
 8011472:	685a      	ldr	r2, [r3, #4]
 8011474:	2100      	movs	r1, #0
 8011476:	0092      	lsls	r2, r2, #2
 8011478:	f004 fbe8 	bl	8015c4c <memset>
 801147c:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 801147e:	2200      	movs	r2, #0
 8011480:	605a      	str	r2, [r3, #4]
 8011482:	6958      	ldr	r0, [r3, #20]
 8011484:	b138      	cbz	r0, 8011496 <rcl_wait_set_clear+0xae>
 8011486:	691a      	ldr	r2, [r3, #16]
 8011488:	2100      	movs	r1, #0
 801148a:	0092      	lsls	r2, r2, #2
 801148c:	f004 fbde 	bl	8015c4c <memset>
 8011490:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8011492:	2200      	movs	r2, #0
 8011494:	611a      	str	r2, [r3, #16]
 8011496:	6a18      	ldr	r0, [r3, #32]
 8011498:	b138      	cbz	r0, 80114aa <rcl_wait_set_clear+0xc2>
 801149a:	69da      	ldr	r2, [r3, #28]
 801149c:	2100      	movs	r1, #0
 801149e:	0092      	lsls	r2, r2, #2
 80114a0:	f004 fbd4 	bl	8015c4c <memset>
 80114a4:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 80114a6:	2200      	movs	r2, #0
 80114a8:	61da      	str	r2, [r3, #28]
 80114aa:	6ad8      	ldr	r0, [r3, #44]	@ 0x2c
 80114ac:	b138      	cbz	r0, 80114be <rcl_wait_set_clear+0xd6>
 80114ae:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80114b0:	2100      	movs	r1, #0
 80114b2:	0092      	lsls	r2, r2, #2
 80114b4:	f004 fbca 	bl	8015c4c <memset>
 80114b8:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 80114ba:	2200      	movs	r2, #0
 80114bc:	629a      	str	r2, [r3, #40]	@ 0x28
 80114be:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 80114c0:	b138      	cbz	r0, 80114d2 <rcl_wait_set_clear+0xea>
 80114c2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80114c4:	2100      	movs	r1, #0
 80114c6:	0092      	lsls	r2, r2, #2
 80114c8:	f004 fbc0 	bl	8015c4c <memset>
 80114cc:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 80114ce:	2000      	movs	r0, #0
 80114d0:	6358      	str	r0, [r3, #52]	@ 0x34
 80114d2:	bd10      	pop	{r4, pc}
 80114d4:	200b      	movs	r0, #11
 80114d6:	4770      	bx	lr
 80114d8:	f44f 7061 	mov.w	r0, #900	@ 0x384
 80114dc:	bd10      	pop	{r4, pc}
 80114de:	bf00      	nop

080114e0 <rcl_wait_set_resize>:
 80114e0:	2800      	cmp	r0, #0
 80114e2:	f000 8185 	beq.w	80117f0 <rcl_wait_set_resize+0x310>
 80114e6:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80114ea:	6b04      	ldr	r4, [r0, #48]	@ 0x30
 80114ec:	b083      	sub	sp, #12
 80114ee:	4605      	mov	r5, r0
 80114f0:	2c00      	cmp	r4, #0
 80114f2:	f000 817f 	beq.w	80117f4 <rcl_wait_set_resize+0x314>
 80114f6:	f04f 0900 	mov.w	r9, #0
 80114fa:	f8d4 a058 	ldr.w	sl, [r4, #88]	@ 0x58
 80114fe:	461f      	mov	r7, r3
 8011500:	4688      	mov	r8, r1
 8011502:	e9d4 b313 	ldrd	fp, r3, [r4, #76]	@ 0x4c
 8011506:	4616      	mov	r6, r2
 8011508:	f8c0 9004 	str.w	r9, [r0, #4]
 801150c:	f8c4 9000 	str.w	r9, [r4]
 8011510:	2900      	cmp	r1, #0
 8011512:	f000 80bd 	beq.w	8011690 <rcl_wait_set_resize+0x1b0>
 8011516:	008c      	lsls	r4, r1, #2
 8011518:	6800      	ldr	r0, [r0, #0]
 801151a:	9301      	str	r3, [sp, #4]
 801151c:	4652      	mov	r2, sl
 801151e:	4621      	mov	r1, r4
 8011520:	4798      	blx	r3
 8011522:	9b01      	ldr	r3, [sp, #4]
 8011524:	6028      	str	r0, [r5, #0]
 8011526:	2800      	cmp	r0, #0
 8011528:	f000 80cb 	beq.w	80116c2 <rcl_wait_set_resize+0x1e2>
 801152c:	4622      	mov	r2, r4
 801152e:	4649      	mov	r1, r9
 8011530:	9301      	str	r3, [sp, #4]
 8011532:	f004 fb8b 	bl	8015c4c <memset>
 8011536:	f8c5 8004 	str.w	r8, [r5, #4]
 801153a:	f8d5 8030 	ldr.w	r8, [r5, #48]	@ 0x30
 801153e:	9b01      	ldr	r3, [sp, #4]
 8011540:	f8d8 0008 	ldr.w	r0, [r8, #8]
 8011544:	f8c8 9004 	str.w	r9, [r8, #4]
 8011548:	4652      	mov	r2, sl
 801154a:	4621      	mov	r1, r4
 801154c:	4798      	blx	r3
 801154e:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 8011550:	f8c8 0008 	str.w	r0, [r8, #8]
 8011554:	689b      	ldr	r3, [r3, #8]
 8011556:	2b00      	cmp	r3, #0
 8011558:	f000 80ac 	beq.w	80116b4 <rcl_wait_set_resize+0x1d4>
 801155c:	4622      	mov	r2, r4
 801155e:	4649      	mov	r1, r9
 8011560:	4618      	mov	r0, r3
 8011562:	f004 fb73 	bl	8015c4c <memset>
 8011566:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 8011568:	f8d4 9058 	ldr.w	r9, [r4, #88]	@ 0x58
 801156c:	f04f 0800 	mov.w	r8, #0
 8011570:	e9d4 2313 	ldrd	r2, r3, [r4, #76]	@ 0x4c
 8011574:	f8c5 800c 	str.w	r8, [r5, #12]
 8011578:	f8c4 800c 	str.w	r8, [r4, #12]
 801157c:	2e00      	cmp	r6, #0
 801157e:	f040 80a4 	bne.w	80116ca <rcl_wait_set_resize+0x1ea>
 8011582:	68a8      	ldr	r0, [r5, #8]
 8011584:	b128      	cbz	r0, 8011592 <rcl_wait_set_resize+0xb2>
 8011586:	4649      	mov	r1, r9
 8011588:	4790      	blx	r2
 801158a:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 801158c:	60ae      	str	r6, [r5, #8]
 801158e:	f8d4 9058 	ldr.w	r9, [r4, #88]	@ 0x58
 8011592:	f04f 0800 	mov.w	r8, #0
 8011596:	19f6      	adds	r6, r6, r7
 8011598:	f8c4 8010 	str.w	r8, [r4, #16]
 801159c:	f040 80ac 	bne.w	80116f8 <rcl_wait_set_resize+0x218>
 80115a0:	6960      	ldr	r0, [r4, #20]
 80115a2:	b130      	cbz	r0, 80115b2 <rcl_wait_set_resize+0xd2>
 80115a4:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
 80115a6:	4649      	mov	r1, r9
 80115a8:	4798      	blx	r3
 80115aa:	6166      	str	r6, [r4, #20]
 80115ac:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 80115ae:	f8d4 9058 	ldr.w	r9, [r4, #88]	@ 0x58
 80115b2:	2600      	movs	r6, #0
 80115b4:	e9d4 a813 	ldrd	sl, r8, [r4, #76]	@ 0x4c
 80115b8:	616e      	str	r6, [r5, #20]
 80115ba:	6426      	str	r6, [r4, #64]	@ 0x40
 80115bc:	2f00      	cmp	r7, #0
 80115be:	f040 80ad 	bne.w	801171c <rcl_wait_set_resize+0x23c>
 80115c2:	6928      	ldr	r0, [r5, #16]
 80115c4:	b138      	cbz	r0, 80115d6 <rcl_wait_set_resize+0xf6>
 80115c6:	4649      	mov	r1, r9
 80115c8:	47d0      	blx	sl
 80115ca:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 80115cc:	612f      	str	r7, [r5, #16]
 80115ce:	e9d4 a813 	ldrd	sl, r8, [r4, #76]	@ 0x4c
 80115d2:	f8d4 9058 	ldr.w	r9, [r4, #88]	@ 0x58
 80115d6:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80115d8:	2600      	movs	r6, #0
 80115da:	61ee      	str	r6, [r5, #28]
 80115dc:	61a6      	str	r6, [r4, #24]
 80115de:	2b00      	cmp	r3, #0
 80115e0:	f040 80af 	bne.w	8011742 <rcl_wait_set_resize+0x262>
 80115e4:	69a8      	ldr	r0, [r5, #24]
 80115e6:	b120      	cbz	r0, 80115f2 <rcl_wait_set_resize+0x112>
 80115e8:	4649      	mov	r1, r9
 80115ea:	47d0      	blx	sl
 80115ec:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80115ee:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 80115f0:	61ab      	str	r3, [r5, #24]
 80115f2:	6a20      	ldr	r0, [r4, #32]
 80115f4:	b128      	cbz	r0, 8011602 <rcl_wait_set_resize+0x122>
 80115f6:	4649      	mov	r1, r9
 80115f8:	47d0      	blx	sl
 80115fa:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 80115fc:	2300      	movs	r3, #0
 80115fe:	e9c4 3307 	strd	r3, r3, [r4, #28]
 8011602:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8011604:	6da7      	ldr	r7, [r4, #88]	@ 0x58
 8011606:	2600      	movs	r6, #0
 8011608:	e9d4 8913 	ldrd	r8, r9, [r4, #76]	@ 0x4c
 801160c:	626e      	str	r6, [r5, #36]	@ 0x24
 801160e:	6266      	str	r6, [r4, #36]	@ 0x24
 8011610:	2b00      	cmp	r3, #0
 8011612:	f000 80b6 	beq.w	8011782 <rcl_wait_set_resize+0x2a2>
 8011616:	ea4f 0a83 	mov.w	sl, r3, lsl #2
 801161a:	6a28      	ldr	r0, [r5, #32]
 801161c:	463a      	mov	r2, r7
 801161e:	4651      	mov	r1, sl
 8011620:	47c8      	blx	r9
 8011622:	6228      	str	r0, [r5, #32]
 8011624:	2800      	cmp	r0, #0
 8011626:	d04c      	beq.n	80116c2 <rcl_wait_set_resize+0x1e2>
 8011628:	4652      	mov	r2, sl
 801162a:	4631      	mov	r1, r6
 801162c:	f004 fb0e 	bl	8015c4c <memset>
 8011630:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 8011632:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8011634:	626b      	str	r3, [r5, #36]	@ 0x24
 8011636:	6ae0      	ldr	r0, [r4, #44]	@ 0x2c
 8011638:	62a6      	str	r6, [r4, #40]	@ 0x28
 801163a:	463a      	mov	r2, r7
 801163c:	4651      	mov	r1, sl
 801163e:	47c8      	blx	r9
 8011640:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 8011642:	62e0      	str	r0, [r4, #44]	@ 0x2c
 8011644:	6adc      	ldr	r4, [r3, #44]	@ 0x2c
 8011646:	2c00      	cmp	r4, #0
 8011648:	f000 80f0 	beq.w	801182c <rcl_wait_set_resize+0x34c>
 801164c:	4620      	mov	r0, r4
 801164e:	4652      	mov	r2, sl
 8011650:	4631      	mov	r1, r6
 8011652:	f004 fafb 	bl	8015c4c <memset>
 8011656:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 8011658:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801165a:	6da7      	ldr	r7, [r4, #88]	@ 0x58
 801165c:	2600      	movs	r6, #0
 801165e:	e9d4 8913 	ldrd	r8, r9, [r4, #76]	@ 0x4c
 8011662:	62ee      	str	r6, [r5, #44]	@ 0x2c
 8011664:	6326      	str	r6, [r4, #48]	@ 0x30
 8011666:	2b00      	cmp	r3, #0
 8011668:	f040 809d 	bne.w	80117a6 <rcl_wait_set_resize+0x2c6>
 801166c:	6aa8      	ldr	r0, [r5, #40]	@ 0x28
 801166e:	b120      	cbz	r0, 801167a <rcl_wait_set_resize+0x19a>
 8011670:	4639      	mov	r1, r7
 8011672:	47c0      	blx	r8
 8011674:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8011676:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 8011678:	62ab      	str	r3, [r5, #40]	@ 0x28
 801167a:	6ba0      	ldr	r0, [r4, #56]	@ 0x38
 801167c:	b310      	cbz	r0, 80116c4 <rcl_wait_set_resize+0x1e4>
 801167e:	4639      	mov	r1, r7
 8011680:	47c0      	blx	r8
 8011682:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 8011684:	2000      	movs	r0, #0
 8011686:	e9c3 000d 	strd	r0, r0, [r3, #52]	@ 0x34
 801168a:	b003      	add	sp, #12
 801168c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011690:	6800      	ldr	r0, [r0, #0]
 8011692:	b120      	cbz	r0, 801169e <rcl_wait_set_resize+0x1be>
 8011694:	4651      	mov	r1, sl
 8011696:	47d8      	blx	fp
 8011698:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 801169a:	f8c5 8000 	str.w	r8, [r5]
 801169e:	68a0      	ldr	r0, [r4, #8]
 80116a0:	2800      	cmp	r0, #0
 80116a2:	f43f af61 	beq.w	8011568 <rcl_wait_set_resize+0x88>
 80116a6:	4651      	mov	r1, sl
 80116a8:	47d8      	blx	fp
 80116aa:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 80116ac:	2300      	movs	r3, #0
 80116ae:	e9c4 3301 	strd	r3, r3, [r4, #4]
 80116b2:	e759      	b.n	8011568 <rcl_wait_set_resize+0x88>
 80116b4:	6828      	ldr	r0, [r5, #0]
 80116b6:	9301      	str	r3, [sp, #4]
 80116b8:	4651      	mov	r1, sl
 80116ba:	47d8      	blx	fp
 80116bc:	9b01      	ldr	r3, [sp, #4]
 80116be:	e9c5 3300 	strd	r3, r3, [r5]
 80116c2:	200a      	movs	r0, #10
 80116c4:	b003      	add	sp, #12
 80116c6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80116ca:	00b4      	lsls	r4, r6, #2
 80116cc:	68a8      	ldr	r0, [r5, #8]
 80116ce:	464a      	mov	r2, r9
 80116d0:	4621      	mov	r1, r4
 80116d2:	4798      	blx	r3
 80116d4:	60a8      	str	r0, [r5, #8]
 80116d6:	2800      	cmp	r0, #0
 80116d8:	d0f3      	beq.n	80116c2 <rcl_wait_set_resize+0x1e2>
 80116da:	4622      	mov	r2, r4
 80116dc:	4641      	mov	r1, r8
 80116de:	f004 fab5 	bl	8015c4c <memset>
 80116e2:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 80116e4:	60ee      	str	r6, [r5, #12]
 80116e6:	f04f 0800 	mov.w	r8, #0
 80116ea:	19f6      	adds	r6, r6, r7
 80116ec:	f8d4 9058 	ldr.w	r9, [r4, #88]	@ 0x58
 80116f0:	f8c4 8010 	str.w	r8, [r4, #16]
 80116f4:	f43f af54 	beq.w	80115a0 <rcl_wait_set_resize+0xc0>
 80116f8:	00b6      	lsls	r6, r6, #2
 80116fa:	464a      	mov	r2, r9
 80116fc:	6d23      	ldr	r3, [r4, #80]	@ 0x50
 80116fe:	6960      	ldr	r0, [r4, #20]
 8011700:	4631      	mov	r1, r6
 8011702:	4798      	blx	r3
 8011704:	4681      	mov	r9, r0
 8011706:	6160      	str	r0, [r4, #20]
 8011708:	2800      	cmp	r0, #0
 801170a:	d076      	beq.n	80117fa <rcl_wait_set_resize+0x31a>
 801170c:	4632      	mov	r2, r6
 801170e:	4641      	mov	r1, r8
 8011710:	f004 fa9c 	bl	8015c4c <memset>
 8011714:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 8011716:	f8d4 9058 	ldr.w	r9, [r4, #88]	@ 0x58
 801171a:	e74a      	b.n	80115b2 <rcl_wait_set_resize+0xd2>
 801171c:	00bc      	lsls	r4, r7, #2
 801171e:	6928      	ldr	r0, [r5, #16]
 8011720:	464a      	mov	r2, r9
 8011722:	4621      	mov	r1, r4
 8011724:	47c0      	blx	r8
 8011726:	6128      	str	r0, [r5, #16]
 8011728:	2800      	cmp	r0, #0
 801172a:	d0ca      	beq.n	80116c2 <rcl_wait_set_resize+0x1e2>
 801172c:	4622      	mov	r2, r4
 801172e:	4631      	mov	r1, r6
 8011730:	f004 fa8c 	bl	8015c4c <memset>
 8011734:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 8011736:	616f      	str	r7, [r5, #20]
 8011738:	e9d4 a813 	ldrd	sl, r8, [r4, #76]	@ 0x4c
 801173c:	f8d4 9058 	ldr.w	r9, [r4, #88]	@ 0x58
 8011740:	e749      	b.n	80115d6 <rcl_wait_set_resize+0xf6>
 8011742:	009c      	lsls	r4, r3, #2
 8011744:	69a8      	ldr	r0, [r5, #24]
 8011746:	464a      	mov	r2, r9
 8011748:	4621      	mov	r1, r4
 801174a:	47c0      	blx	r8
 801174c:	61a8      	str	r0, [r5, #24]
 801174e:	2800      	cmp	r0, #0
 8011750:	d0b7      	beq.n	80116c2 <rcl_wait_set_resize+0x1e2>
 8011752:	4622      	mov	r2, r4
 8011754:	4631      	mov	r1, r6
 8011756:	f004 fa79 	bl	8015c4c <memset>
 801175a:	6b2f      	ldr	r7, [r5, #48]	@ 0x30
 801175c:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801175e:	61eb      	str	r3, [r5, #28]
 8011760:	6a38      	ldr	r0, [r7, #32]
 8011762:	61fe      	str	r6, [r7, #28]
 8011764:	464a      	mov	r2, r9
 8011766:	4621      	mov	r1, r4
 8011768:	47c0      	blx	r8
 801176a:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 801176c:	6238      	str	r0, [r7, #32]
 801176e:	6a1f      	ldr	r7, [r3, #32]
 8011770:	2f00      	cmp	r7, #0
 8011772:	d054      	beq.n	801181e <rcl_wait_set_resize+0x33e>
 8011774:	4622      	mov	r2, r4
 8011776:	4631      	mov	r1, r6
 8011778:	4638      	mov	r0, r7
 801177a:	f004 fa67 	bl	8015c4c <memset>
 801177e:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 8011780:	e73f      	b.n	8011602 <rcl_wait_set_resize+0x122>
 8011782:	6a28      	ldr	r0, [r5, #32]
 8011784:	b120      	cbz	r0, 8011790 <rcl_wait_set_resize+0x2b0>
 8011786:	4639      	mov	r1, r7
 8011788:	47c0      	blx	r8
 801178a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801178c:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 801178e:	622b      	str	r3, [r5, #32]
 8011790:	6ae0      	ldr	r0, [r4, #44]	@ 0x2c
 8011792:	2800      	cmp	r0, #0
 8011794:	f43f af60 	beq.w	8011658 <rcl_wait_set_resize+0x178>
 8011798:	4639      	mov	r1, r7
 801179a:	47c0      	blx	r8
 801179c:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 801179e:	2300      	movs	r3, #0
 80117a0:	e9c4 330a 	strd	r3, r3, [r4, #40]	@ 0x28
 80117a4:	e758      	b.n	8011658 <rcl_wait_set_resize+0x178>
 80117a6:	009c      	lsls	r4, r3, #2
 80117a8:	6aa8      	ldr	r0, [r5, #40]	@ 0x28
 80117aa:	463a      	mov	r2, r7
 80117ac:	4621      	mov	r1, r4
 80117ae:	47c8      	blx	r9
 80117b0:	62a8      	str	r0, [r5, #40]	@ 0x28
 80117b2:	2800      	cmp	r0, #0
 80117b4:	d085      	beq.n	80116c2 <rcl_wait_set_resize+0x1e2>
 80117b6:	4622      	mov	r2, r4
 80117b8:	4631      	mov	r1, r6
 80117ba:	f004 fa47 	bl	8015c4c <memset>
 80117be:	f8d5 a030 	ldr.w	sl, [r5, #48]	@ 0x30
 80117c2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80117c4:	62eb      	str	r3, [r5, #44]	@ 0x2c
 80117c6:	f8da 0038 	ldr.w	r0, [sl, #56]	@ 0x38
 80117ca:	f8ca 6034 	str.w	r6, [sl, #52]	@ 0x34
 80117ce:	463a      	mov	r2, r7
 80117d0:	4621      	mov	r1, r4
 80117d2:	47c8      	blx	r9
 80117d4:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 80117d6:	f8ca 0038 	str.w	r0, [sl, #56]	@ 0x38
 80117da:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80117dc:	b36b      	cbz	r3, 801183a <rcl_wait_set_resize+0x35a>
 80117de:	4622      	mov	r2, r4
 80117e0:	4631      	mov	r1, r6
 80117e2:	4618      	mov	r0, r3
 80117e4:	f004 fa32 	bl	8015c4c <memset>
 80117e8:	4630      	mov	r0, r6
 80117ea:	b003      	add	sp, #12
 80117ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80117f0:	200b      	movs	r0, #11
 80117f2:	4770      	bx	lr
 80117f4:	f44f 7061 	mov.w	r0, #900	@ 0x384
 80117f8:	e764      	b.n	80116c4 <rcl_wait_set_resize+0x1e4>
 80117fa:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 80117fc:	68a8      	ldr	r0, [r5, #8]
 80117fe:	6d99      	ldr	r1, [r3, #88]	@ 0x58
 8011800:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8011802:	4798      	blx	r3
 8011804:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 8011806:	6928      	ldr	r0, [r5, #16]
 8011808:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 801180a:	6d99      	ldr	r1, [r3, #88]	@ 0x58
 801180c:	f8c5 900c 	str.w	r9, [r5, #12]
 8011810:	f8c5 9008 	str.w	r9, [r5, #8]
 8011814:	4790      	blx	r2
 8011816:	e9c5 9904 	strd	r9, r9, [r5, #16]
 801181a:	200a      	movs	r0, #10
 801181c:	e752      	b.n	80116c4 <rcl_wait_set_resize+0x1e4>
 801181e:	69a8      	ldr	r0, [r5, #24]
 8011820:	4649      	mov	r1, r9
 8011822:	47d0      	blx	sl
 8011824:	e9c5 7706 	strd	r7, r7, [r5, #24]
 8011828:	200a      	movs	r0, #10
 801182a:	e74b      	b.n	80116c4 <rcl_wait_set_resize+0x1e4>
 801182c:	6a28      	ldr	r0, [r5, #32]
 801182e:	4639      	mov	r1, r7
 8011830:	47c0      	blx	r8
 8011832:	e9c5 4408 	strd	r4, r4, [r5, #32]
 8011836:	200a      	movs	r0, #10
 8011838:	e744      	b.n	80116c4 <rcl_wait_set_resize+0x1e4>
 801183a:	6aa8      	ldr	r0, [r5, #40]	@ 0x28
 801183c:	9301      	str	r3, [sp, #4]
 801183e:	4639      	mov	r1, r7
 8011840:	47c0      	blx	r8
 8011842:	9b01      	ldr	r3, [sp, #4]
 8011844:	200a      	movs	r0, #10
 8011846:	e9c5 330a 	strd	r3, r3, [r5, #40]	@ 0x28
 801184a:	e73b      	b.n	80116c4 <rcl_wait_set_resize+0x1e4>

0801184c <rcl_wait_set_init>:
 801184c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011850:	b084      	sub	sp, #16
 8011852:	4604      	mov	r4, r0
 8011854:	a810      	add	r0, sp, #64	@ 0x40
 8011856:	f8dd a03c 	ldr.w	sl, [sp, #60]	@ 0x3c
 801185a:	460f      	mov	r7, r1
 801185c:	4690      	mov	r8, r2
 801185e:	4699      	mov	r9, r3
 8011860:	f7f8 fdd8 	bl	800a414 <rcutils_allocator_is_valid>
 8011864:	2800      	cmp	r0, #0
 8011866:	d06b      	beq.n	8011940 <rcl_wait_set_init+0xf4>
 8011868:	2c00      	cmp	r4, #0
 801186a:	d069      	beq.n	8011940 <rcl_wait_set_init+0xf4>
 801186c:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 801186e:	b125      	cbz	r5, 801187a <rcl_wait_set_init+0x2e>
 8011870:	2564      	movs	r5, #100	@ 0x64
 8011872:	4628      	mov	r0, r5
 8011874:	b004      	add	sp, #16
 8011876:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801187a:	f1ba 0f00 	cmp.w	sl, #0
 801187e:	d05f      	beq.n	8011940 <rcl_wait_set_init+0xf4>
 8011880:	4650      	mov	r0, sl
 8011882:	f7fe fc3d 	bl	8010100 <rcl_context_is_valid>
 8011886:	2800      	cmp	r0, #0
 8011888:	d067      	beq.n	801195a <rcl_wait_set_init+0x10e>
 801188a:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801188c:	9914      	ldr	r1, [sp, #80]	@ 0x50
 801188e:	205c      	movs	r0, #92	@ 0x5c
 8011890:	4798      	blx	r3
 8011892:	6320      	str	r0, [r4, #48]	@ 0x30
 8011894:	2800      	cmp	r0, #0
 8011896:	d062      	beq.n	801195e <rcl_wait_set_init+0x112>
 8011898:	4629      	mov	r1, r5
 801189a:	225c      	movs	r2, #92	@ 0x5c
 801189c:	f004 f9d6 	bl	8015c4c <memset>
 80118a0:	e9dd 320d 	ldrd	r3, r2, [sp, #52]	@ 0x34
 80118a4:	eb03 0e02 	add.w	lr, r3, r2
 80118a8:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80118aa:	6b26      	ldr	r6, [r4, #48]	@ 0x30
 80118ac:	f10d 0c40 	add.w	ip, sp, #64	@ 0x40
 80118b0:	449e      	add	lr, r3
 80118b2:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 80118b6:	e9c6 5501 	strd	r5, r5, [r6, #4]
 80118ba:	e9c6 5504 	strd	r5, r5, [r6, #16]
 80118be:	e9c6 5507 	strd	r5, r5, [r6, #28]
 80118c2:	e9c6 550a 	strd	r5, r5, [r6, #40]	@ 0x28
 80118c6:	e9c6 550d 	strd	r5, r5, [r6, #52]	@ 0x34
 80118ca:	f106 0548 	add.w	r5, r6, #72	@ 0x48
 80118ce:	f8c6 a044 	str.w	sl, [r6, #68]	@ 0x44
 80118d2:	f8da a000 	ldr.w	sl, [sl]
 80118d6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80118d8:	44c6      	add	lr, r8
 80118da:	f8dc 3000 	ldr.w	r3, [ip]
 80118de:	602b      	str	r3, [r5, #0]
 80118e0:	eb0e 0147 	add.w	r1, lr, r7, lsl #1
 80118e4:	f10a 0028 	add.w	r0, sl, #40	@ 0x28
 80118e8:	f002 fa1c 	bl	8013d24 <rmw_create_wait_set>
 80118ec:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 80118ee:	63f0      	str	r0, [r6, #60]	@ 0x3c
 80118f0:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 80118f2:	b350      	cbz	r0, 801194a <rcl_wait_set_init+0xfe>
 80118f4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80118f6:	9302      	str	r3, [sp, #8]
 80118f8:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80118fa:	9301      	str	r3, [sp, #4]
 80118fc:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80118fe:	9300      	str	r3, [sp, #0]
 8011900:	4642      	mov	r2, r8
 8011902:	464b      	mov	r3, r9
 8011904:	4639      	mov	r1, r7
 8011906:	4620      	mov	r0, r4
 8011908:	f7ff fdea 	bl	80114e0 <rcl_wait_set_resize>
 801190c:	4605      	mov	r5, r0
 801190e:	2800      	cmp	r0, #0
 8011910:	d0af      	beq.n	8011872 <rcl_wait_set_init+0x26>
 8011912:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8011914:	bb2b      	cbnz	r3, 8011962 <rcl_wait_set_init+0x116>
 8011916:	2600      	movs	r6, #0
 8011918:	e9cd 6601 	strd	r6, r6, [sp, #4]
 801191c:	9600      	str	r6, [sp, #0]
 801191e:	4633      	mov	r3, r6
 8011920:	4632      	mov	r2, r6
 8011922:	4631      	mov	r1, r6
 8011924:	4620      	mov	r0, r4
 8011926:	f7ff fddb 	bl	80114e0 <rcl_wait_set_resize>
 801192a:	6b20      	ldr	r0, [r4, #48]	@ 0x30
 801192c:	2800      	cmp	r0, #0
 801192e:	d0a0      	beq.n	8011872 <rcl_wait_set_init+0x26>
 8011930:	6cc3      	ldr	r3, [r0, #76]	@ 0x4c
 8011932:	6d81      	ldr	r1, [r0, #88]	@ 0x58
 8011934:	4798      	blx	r3
 8011936:	4628      	mov	r0, r5
 8011938:	6326      	str	r6, [r4, #48]	@ 0x30
 801193a:	b004      	add	sp, #16
 801193c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011940:	250b      	movs	r5, #11
 8011942:	4628      	mov	r0, r5
 8011944:	b004      	add	sp, #16
 8011946:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801194a:	2501      	movs	r5, #1
 801194c:	f002 f9f4 	bl	8013d38 <rmw_destroy_wait_set>
 8011950:	2800      	cmp	r0, #0
 8011952:	bf18      	it	ne
 8011954:	f44f 7561 	movne.w	r5, #900	@ 0x384
 8011958:	e7dd      	b.n	8011916 <rcl_wait_set_init+0xca>
 801195a:	2565      	movs	r5, #101	@ 0x65
 801195c:	e789      	b.n	8011872 <rcl_wait_set_init+0x26>
 801195e:	250a      	movs	r5, #10
 8011960:	e787      	b.n	8011872 <rcl_wait_set_init+0x26>
 8011962:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 8011964:	e7f2      	b.n	801194c <rcl_wait_set_init+0x100>
 8011966:	bf00      	nop

08011968 <rcl_wait_set_add_guard_condition>:
 8011968:	b318      	cbz	r0, 80119b2 <rcl_wait_set_add_guard_condition+0x4a>
 801196a:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 801196c:	b570      	push	{r4, r5, r6, lr}
 801196e:	4604      	mov	r4, r0
 8011970:	b30b      	cbz	r3, 80119b6 <rcl_wait_set_add_guard_condition+0x4e>
 8011972:	b319      	cbz	r1, 80119bc <rcl_wait_set_add_guard_condition+0x54>
 8011974:	68dd      	ldr	r5, [r3, #12]
 8011976:	68c0      	ldr	r0, [r0, #12]
 8011978:	4285      	cmp	r5, r0
 801197a:	d217      	bcs.n	80119ac <rcl_wait_set_add_guard_condition+0x44>
 801197c:	68a0      	ldr	r0, [r4, #8]
 801197e:	1c6e      	adds	r6, r5, #1
 8011980:	60de      	str	r6, [r3, #12]
 8011982:	f840 1025 	str.w	r1, [r0, r5, lsl #2]
 8011986:	b102      	cbz	r2, 801198a <rcl_wait_set_add_guard_condition+0x22>
 8011988:	6015      	str	r5, [r2, #0]
 801198a:	4608      	mov	r0, r1
 801198c:	f003 fb88 	bl	80150a0 <rcl_guard_condition_get_rmw_handle>
 8011990:	b150      	cbz	r0, 80119a8 <rcl_wait_set_add_guard_condition+0x40>
 8011992:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8011994:	6842      	ldr	r2, [r0, #4]
 8011996:	695b      	ldr	r3, [r3, #20]
 8011998:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 801199c:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 801199e:	6913      	ldr	r3, [r2, #16]
 80119a0:	3301      	adds	r3, #1
 80119a2:	2000      	movs	r0, #0
 80119a4:	6113      	str	r3, [r2, #16]
 80119a6:	bd70      	pop	{r4, r5, r6, pc}
 80119a8:	2001      	movs	r0, #1
 80119aa:	bd70      	pop	{r4, r5, r6, pc}
 80119ac:	f240 3086 	movw	r0, #902	@ 0x386
 80119b0:	bd70      	pop	{r4, r5, r6, pc}
 80119b2:	200b      	movs	r0, #11
 80119b4:	4770      	bx	lr
 80119b6:	f44f 7061 	mov.w	r0, #900	@ 0x384
 80119ba:	bd70      	pop	{r4, r5, r6, pc}
 80119bc:	200b      	movs	r0, #11
 80119be:	bd70      	pop	{r4, r5, r6, pc}

080119c0 <rcl_wait_set_add_timer>:
 80119c0:	b328      	cbz	r0, 8011a0e <rcl_wait_set_add_timer+0x4e>
 80119c2:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 80119c4:	b570      	push	{r4, r5, r6, lr}
 80119c6:	4604      	mov	r4, r0
 80119c8:	b31b      	cbz	r3, 8011a12 <rcl_wait_set_add_timer+0x52>
 80119ca:	b329      	cbz	r1, 8011a18 <rcl_wait_set_add_timer+0x58>
 80119cc:	6c18      	ldr	r0, [r3, #64]	@ 0x40
 80119ce:	6965      	ldr	r5, [r4, #20]
 80119d0:	42a8      	cmp	r0, r5
 80119d2:	d219      	bcs.n	8011a08 <rcl_wait_set_add_timer+0x48>
 80119d4:	6925      	ldr	r5, [r4, #16]
 80119d6:	1c46      	adds	r6, r0, #1
 80119d8:	641e      	str	r6, [r3, #64]	@ 0x40
 80119da:	f845 1020 	str.w	r1, [r5, r0, lsl #2]
 80119de:	b102      	cbz	r2, 80119e2 <rcl_wait_set_add_timer+0x22>
 80119e0:	6010      	str	r0, [r2, #0]
 80119e2:	4608      	mov	r0, r1
 80119e4:	f7ff fba6 	bl	8011134 <rcl_timer_get_guard_condition>
 80119e8:	b168      	cbz	r0, 8011a06 <rcl_wait_set_add_timer+0x46>
 80119ea:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 80119ec:	68e3      	ldr	r3, [r4, #12]
 80119ee:	6c15      	ldr	r5, [r2, #64]	@ 0x40
 80119f0:	3b01      	subs	r3, #1
 80119f2:	441d      	add	r5, r3
 80119f4:	f003 fb54 	bl	80150a0 <rcl_guard_condition_get_rmw_handle>
 80119f8:	b180      	cbz	r0, 8011a1c <rcl_wait_set_add_timer+0x5c>
 80119fa:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 80119fc:	6842      	ldr	r2, [r0, #4]
 80119fe:	695b      	ldr	r3, [r3, #20]
 8011a00:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8011a04:	2000      	movs	r0, #0
 8011a06:	bd70      	pop	{r4, r5, r6, pc}
 8011a08:	f240 3086 	movw	r0, #902	@ 0x386
 8011a0c:	bd70      	pop	{r4, r5, r6, pc}
 8011a0e:	200b      	movs	r0, #11
 8011a10:	4770      	bx	lr
 8011a12:	f44f 7061 	mov.w	r0, #900	@ 0x384
 8011a16:	bd70      	pop	{r4, r5, r6, pc}
 8011a18:	200b      	movs	r0, #11
 8011a1a:	bd70      	pop	{r4, r5, r6, pc}
 8011a1c:	2001      	movs	r0, #1
 8011a1e:	bd70      	pop	{r4, r5, r6, pc}

08011a20 <rcl_wait_set_add_client>:
 8011a20:	b318      	cbz	r0, 8011a6a <rcl_wait_set_add_client+0x4a>
 8011a22:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 8011a24:	b570      	push	{r4, r5, r6, lr}
 8011a26:	4604      	mov	r4, r0
 8011a28:	b30b      	cbz	r3, 8011a6e <rcl_wait_set_add_client+0x4e>
 8011a2a:	b319      	cbz	r1, 8011a74 <rcl_wait_set_add_client+0x54>
 8011a2c:	699d      	ldr	r5, [r3, #24]
 8011a2e:	69c0      	ldr	r0, [r0, #28]
 8011a30:	4285      	cmp	r5, r0
 8011a32:	d217      	bcs.n	8011a64 <rcl_wait_set_add_client+0x44>
 8011a34:	69a0      	ldr	r0, [r4, #24]
 8011a36:	1c6e      	adds	r6, r5, #1
 8011a38:	619e      	str	r6, [r3, #24]
 8011a3a:	f840 1025 	str.w	r1, [r0, r5, lsl #2]
 8011a3e:	b102      	cbz	r2, 8011a42 <rcl_wait_set_add_client+0x22>
 8011a40:	6015      	str	r5, [r2, #0]
 8011a42:	4608      	mov	r0, r1
 8011a44:	f7fe faae 	bl	800ffa4 <rcl_client_get_rmw_handle>
 8011a48:	b150      	cbz	r0, 8011a60 <rcl_wait_set_add_client+0x40>
 8011a4a:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8011a4c:	6842      	ldr	r2, [r0, #4]
 8011a4e:	6a1b      	ldr	r3, [r3, #32]
 8011a50:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8011a54:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 8011a56:	69d3      	ldr	r3, [r2, #28]
 8011a58:	3301      	adds	r3, #1
 8011a5a:	2000      	movs	r0, #0
 8011a5c:	61d3      	str	r3, [r2, #28]
 8011a5e:	bd70      	pop	{r4, r5, r6, pc}
 8011a60:	2001      	movs	r0, #1
 8011a62:	bd70      	pop	{r4, r5, r6, pc}
 8011a64:	f240 3086 	movw	r0, #902	@ 0x386
 8011a68:	bd70      	pop	{r4, r5, r6, pc}
 8011a6a:	200b      	movs	r0, #11
 8011a6c:	4770      	bx	lr
 8011a6e:	f44f 7061 	mov.w	r0, #900	@ 0x384
 8011a72:	bd70      	pop	{r4, r5, r6, pc}
 8011a74:	200b      	movs	r0, #11
 8011a76:	bd70      	pop	{r4, r5, r6, pc}

08011a78 <rcl_wait_set_add_service>:
 8011a78:	b318      	cbz	r0, 8011ac2 <rcl_wait_set_add_service+0x4a>
 8011a7a:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 8011a7c:	b570      	push	{r4, r5, r6, lr}
 8011a7e:	4604      	mov	r4, r0
 8011a80:	b30b      	cbz	r3, 8011ac6 <rcl_wait_set_add_service+0x4e>
 8011a82:	b319      	cbz	r1, 8011acc <rcl_wait_set_add_service+0x54>
 8011a84:	6a5d      	ldr	r5, [r3, #36]	@ 0x24
 8011a86:	6a40      	ldr	r0, [r0, #36]	@ 0x24
 8011a88:	4285      	cmp	r5, r0
 8011a8a:	d217      	bcs.n	8011abc <rcl_wait_set_add_service+0x44>
 8011a8c:	6a20      	ldr	r0, [r4, #32]
 8011a8e:	1c6e      	adds	r6, r5, #1
 8011a90:	625e      	str	r6, [r3, #36]	@ 0x24
 8011a92:	f840 1025 	str.w	r1, [r0, r5, lsl #2]
 8011a96:	b102      	cbz	r2, 8011a9a <rcl_wait_set_add_service+0x22>
 8011a98:	6015      	str	r5, [r2, #0]
 8011a9a:	4608      	mov	r0, r1
 8011a9c:	f7ff f804 	bl	8010aa8 <rcl_service_get_rmw_handle>
 8011aa0:	b150      	cbz	r0, 8011ab8 <rcl_wait_set_add_service+0x40>
 8011aa2:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8011aa4:	6842      	ldr	r2, [r0, #4]
 8011aa6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8011aa8:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8011aac:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 8011aae:	6a93      	ldr	r3, [r2, #40]	@ 0x28
 8011ab0:	3301      	adds	r3, #1
 8011ab2:	2000      	movs	r0, #0
 8011ab4:	6293      	str	r3, [r2, #40]	@ 0x28
 8011ab6:	bd70      	pop	{r4, r5, r6, pc}
 8011ab8:	2001      	movs	r0, #1
 8011aba:	bd70      	pop	{r4, r5, r6, pc}
 8011abc:	f240 3086 	movw	r0, #902	@ 0x386
 8011ac0:	bd70      	pop	{r4, r5, r6, pc}
 8011ac2:	200b      	movs	r0, #11
 8011ac4:	4770      	bx	lr
 8011ac6:	f44f 7061 	mov.w	r0, #900	@ 0x384
 8011aca:	bd70      	pop	{r4, r5, r6, pc}
 8011acc:	200b      	movs	r0, #11
 8011ace:	bd70      	pop	{r4, r5, r6, pc}

08011ad0 <rcl_wait>:
 8011ad0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011ad4:	ed2d 8b02 	vpush	{d8}
 8011ad8:	b08d      	sub	sp, #52	@ 0x34
 8011ada:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8011ade:	2800      	cmp	r0, #0
 8011ae0:	f000 8143 	beq.w	8011d6a <rcl_wait+0x29a>
 8011ae4:	6b06      	ldr	r6, [r0, #48]	@ 0x30
 8011ae6:	4605      	mov	r5, r0
 8011ae8:	2e00      	cmp	r6, #0
 8011aea:	f000 8112 	beq.w	8011d12 <rcl_wait+0x242>
 8011aee:	6843      	ldr	r3, [r0, #4]
 8011af0:	b983      	cbnz	r3, 8011b14 <rcl_wait+0x44>
 8011af2:	68eb      	ldr	r3, [r5, #12]
 8011af4:	b973      	cbnz	r3, 8011b14 <rcl_wait+0x44>
 8011af6:	696b      	ldr	r3, [r5, #20]
 8011af8:	b963      	cbnz	r3, 8011b14 <rcl_wait+0x44>
 8011afa:	69eb      	ldr	r3, [r5, #28]
 8011afc:	b953      	cbnz	r3, 8011b14 <rcl_wait+0x44>
 8011afe:	6a6b      	ldr	r3, [r5, #36]	@ 0x24
 8011b00:	b943      	cbnz	r3, 8011b14 <rcl_wait+0x44>
 8011b02:	6aeb      	ldr	r3, [r5, #44]	@ 0x2c
 8011b04:	b933      	cbnz	r3, 8011b14 <rcl_wait+0x44>
 8011b06:	f240 3085 	movw	r0, #901	@ 0x385
 8011b0a:	b00d      	add	sp, #52	@ 0x34
 8011b0c:	ecbd 8b02 	vpop	{d8}
 8011b10:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011b14:	9b04      	ldr	r3, [sp, #16]
 8011b16:	6c32      	ldr	r2, [r6, #64]	@ 0x40
 8011b18:	2b01      	cmp	r3, #1
 8011b1a:	9b05      	ldr	r3, [sp, #20]
 8011b1c:	f173 0300 	sbcs.w	r3, r3, #0
 8011b20:	f2c0 80f0 	blt.w	8011d04 <rcl_wait+0x234>
 8011b24:	e9dd 8704 	ldrd	r8, r7, [sp, #16]
 8011b28:	4643      	mov	r3, r8
 8011b2a:	2a00      	cmp	r2, #0
 8011b2c:	f000 8133 	beq.w	8011d96 <rcl_wait+0x2c6>
 8011b30:	2400      	movs	r4, #0
 8011b32:	4613      	mov	r3, r2
 8011b34:	ed9f 8b9c 	vldr	d8, [pc, #624]	@ 8011da8 <rcl_wait+0x2d8>
 8011b38:	46a2      	mov	sl, r4
 8011b3a:	46a3      	mov	fp, r4
 8011b3c:	f240 3921 	movw	r9, #801	@ 0x321
 8011b40:	4632      	mov	r2, r6
 8011b42:	e014      	b.n	8011b6e <rcl_wait+0x9e>
 8011b44:	2800      	cmp	r0, #0
 8011b46:	d1e0      	bne.n	8011b0a <rcl_wait+0x3a>
 8011b48:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8011b4c:	4542      	cmp	r2, r8
 8011b4e:	eb73 0107 	sbcs.w	r1, r3, r7
 8011b52:	da03      	bge.n	8011b5c <rcl_wait+0x8c>
 8011b54:	4690      	mov	r8, r2
 8011b56:	461f      	mov	r7, r3
 8011b58:	f04f 0b01 	mov.w	fp, #1
 8011b5c:	6b2a      	ldr	r2, [r5, #48]	@ 0x30
 8011b5e:	6c13      	ldr	r3, [r2, #64]	@ 0x40
 8011b60:	3401      	adds	r4, #1
 8011b62:	f14a 0a00 	adc.w	sl, sl, #0
 8011b66:	429c      	cmp	r4, r3
 8011b68:	f17a 0100 	sbcs.w	r1, sl, #0
 8011b6c:	d228      	bcs.n	8011bc0 <rcl_wait+0xf0>
 8011b6e:	6928      	ldr	r0, [r5, #16]
 8011b70:	f850 0024 	ldr.w	r0, [r0, r4, lsl #2]
 8011b74:	a908      	add	r1, sp, #32
 8011b76:	00a6      	lsls	r6, r4, #2
 8011b78:	2800      	cmp	r0, #0
 8011b7a:	d0f1      	beq.n	8011b60 <rcl_wait+0x90>
 8011b7c:	68eb      	ldr	r3, [r5, #12]
 8011b7e:	f8d2 c014 	ldr.w	ip, [r2, #20]
 8011b82:	4423      	add	r3, r4
 8011b84:	f85c e023 	ldr.w	lr, [ip, r3, lsl #2]
 8011b88:	f1be 0f00 	cmp.w	lr, #0
 8011b8c:	d006      	beq.n	8011b9c <rcl_wait+0xcc>
 8011b8e:	6913      	ldr	r3, [r2, #16]
 8011b90:	f84c e023 	str.w	lr, [ip, r3, lsl #2]
 8011b94:	3301      	adds	r3, #1
 8011b96:	6113      	str	r3, [r2, #16]
 8011b98:	692b      	ldr	r3, [r5, #16]
 8011b9a:	5998      	ldr	r0, [r3, r6]
 8011b9c:	ed8d 8b08 	vstr	d8, [sp, #32]
 8011ba0:	f7ff fa96 	bl	80110d0 <rcl_timer_get_time_until_next_call>
 8011ba4:	4548      	cmp	r0, r9
 8011ba6:	d1cd      	bne.n	8011b44 <rcl_wait+0x74>
 8011ba8:	692b      	ldr	r3, [r5, #16]
 8011baa:	6b2a      	ldr	r2, [r5, #48]	@ 0x30
 8011bac:	2100      	movs	r1, #0
 8011bae:	5199      	str	r1, [r3, r6]
 8011bb0:	6c13      	ldr	r3, [r2, #64]	@ 0x40
 8011bb2:	3401      	adds	r4, #1
 8011bb4:	f14a 0a00 	adc.w	sl, sl, #0
 8011bb8:	429c      	cmp	r4, r3
 8011bba:	f17a 0100 	sbcs.w	r1, sl, #0
 8011bbe:	d3d6      	bcc.n	8011b6e <rcl_wait+0x9e>
 8011bc0:	4616      	mov	r6, r2
 8011bc2:	e9dd 3204 	ldrd	r3, r2, [sp, #16]
 8011bc6:	4313      	orrs	r3, r2
 8011bc8:	46d9      	mov	r9, fp
 8011bca:	f040 80a9 	bne.w	8011d20 <rcl_wait+0x250>
 8011bce:	2300      	movs	r3, #0
 8011bd0:	2200      	movs	r2, #0
 8011bd2:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8011bd6:	e9cd 230a 	strd	r2, r3, [sp, #40]	@ 0x28
 8011bda:	ab08      	add	r3, sp, #32
 8011bdc:	9302      	str	r3, [sp, #8]
 8011bde:	6bf2      	ldr	r2, [r6, #60]	@ 0x3c
 8011be0:	f106 0334 	add.w	r3, r6, #52	@ 0x34
 8011be4:	e9cd 3200 	strd	r3, r2, [sp]
 8011be8:	f106 0110 	add.w	r1, r6, #16
 8011bec:	f106 031c 	add.w	r3, r6, #28
 8011bf0:	f106 0228 	add.w	r2, r6, #40	@ 0x28
 8011bf4:	1d30      	adds	r0, r6, #4
 8011bf6:	f001 ff1d 	bl	8013a34 <rmw_wait>
 8011bfa:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 8011bfc:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8011bfe:	4680      	mov	r8, r0
 8011c00:	b1ca      	cbz	r2, 8011c36 <rcl_wait+0x166>
 8011c02:	2400      	movs	r4, #0
 8011c04:	4627      	mov	r7, r4
 8011c06:	692a      	ldr	r2, [r5, #16]
 8011c08:	f852 0024 	ldr.w	r0, [r2, r4, lsl #2]
 8011c0c:	f10d 011f 	add.w	r1, sp, #31
 8011c10:	00a6      	lsls	r6, r4, #2
 8011c12:	b160      	cbz	r0, 8011c2e <rcl_wait+0x15e>
 8011c14:	f88d 701f 	strb.w	r7, [sp, #31]
 8011c18:	f7ff fa20 	bl	801105c <rcl_timer_is_ready>
 8011c1c:	2800      	cmp	r0, #0
 8011c1e:	f47f af74 	bne.w	8011b0a <rcl_wait+0x3a>
 8011c22:	f89d 301f 	ldrb.w	r3, [sp, #31]
 8011c26:	b90b      	cbnz	r3, 8011c2c <rcl_wait+0x15c>
 8011c28:	692a      	ldr	r2, [r5, #16]
 8011c2a:	5193      	str	r3, [r2, r6]
 8011c2c:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 8011c2e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8011c30:	3401      	adds	r4, #1
 8011c32:	42a2      	cmp	r2, r4
 8011c34:	d8e7      	bhi.n	8011c06 <rcl_wait+0x136>
 8011c36:	f038 0002 	bics.w	r0, r8, #2
 8011c3a:	f040 8090 	bne.w	8011d5e <rcl_wait+0x28e>
 8011c3e:	686e      	ldr	r6, [r5, #4]
 8011c40:	4602      	mov	r2, r0
 8011c42:	b91e      	cbnz	r6, 8011c4c <rcl_wait+0x17c>
 8011c44:	e00d      	b.n	8011c62 <rcl_wait+0x192>
 8011c46:	3201      	adds	r2, #1
 8011c48:	42b2      	cmp	r2, r6
 8011c4a:	d00a      	beq.n	8011c62 <rcl_wait+0x192>
 8011c4c:	6899      	ldr	r1, [r3, #8]
 8011c4e:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 8011c52:	2900      	cmp	r1, #0
 8011c54:	d1f7      	bne.n	8011c46 <rcl_wait+0x176>
 8011c56:	682c      	ldr	r4, [r5, #0]
 8011c58:	f844 1022 	str.w	r1, [r4, r2, lsl #2]
 8011c5c:	3201      	adds	r2, #1
 8011c5e:	42b2      	cmp	r2, r6
 8011c60:	d1f4      	bne.n	8011c4c <rcl_wait+0x17c>
 8011c62:	68ee      	ldr	r6, [r5, #12]
 8011c64:	2200      	movs	r2, #0
 8011c66:	b91e      	cbnz	r6, 8011c70 <rcl_wait+0x1a0>
 8011c68:	e00d      	b.n	8011c86 <rcl_wait+0x1b6>
 8011c6a:	3201      	adds	r2, #1
 8011c6c:	42b2      	cmp	r2, r6
 8011c6e:	d00a      	beq.n	8011c86 <rcl_wait+0x1b6>
 8011c70:	6959      	ldr	r1, [r3, #20]
 8011c72:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 8011c76:	2900      	cmp	r1, #0
 8011c78:	d1f7      	bne.n	8011c6a <rcl_wait+0x19a>
 8011c7a:	68ac      	ldr	r4, [r5, #8]
 8011c7c:	f844 1022 	str.w	r1, [r4, r2, lsl #2]
 8011c80:	3201      	adds	r2, #1
 8011c82:	42b2      	cmp	r2, r6
 8011c84:	d1f4      	bne.n	8011c70 <rcl_wait+0x1a0>
 8011c86:	69ee      	ldr	r6, [r5, #28]
 8011c88:	2200      	movs	r2, #0
 8011c8a:	b91e      	cbnz	r6, 8011c94 <rcl_wait+0x1c4>
 8011c8c:	e00d      	b.n	8011caa <rcl_wait+0x1da>
 8011c8e:	3201      	adds	r2, #1
 8011c90:	42b2      	cmp	r2, r6
 8011c92:	d00a      	beq.n	8011caa <rcl_wait+0x1da>
 8011c94:	6a19      	ldr	r1, [r3, #32]
 8011c96:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 8011c9a:	2900      	cmp	r1, #0
 8011c9c:	d1f7      	bne.n	8011c8e <rcl_wait+0x1be>
 8011c9e:	69ac      	ldr	r4, [r5, #24]
 8011ca0:	f844 1022 	str.w	r1, [r4, r2, lsl #2]
 8011ca4:	3201      	adds	r2, #1
 8011ca6:	42b2      	cmp	r2, r6
 8011ca8:	d1f4      	bne.n	8011c94 <rcl_wait+0x1c4>
 8011caa:	6a6e      	ldr	r6, [r5, #36]	@ 0x24
 8011cac:	2200      	movs	r2, #0
 8011cae:	b91e      	cbnz	r6, 8011cb8 <rcl_wait+0x1e8>
 8011cb0:	e00d      	b.n	8011cce <rcl_wait+0x1fe>
 8011cb2:	3201      	adds	r2, #1
 8011cb4:	4296      	cmp	r6, r2
 8011cb6:	d00a      	beq.n	8011cce <rcl_wait+0x1fe>
 8011cb8:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8011cba:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 8011cbe:	2900      	cmp	r1, #0
 8011cc0:	d1f7      	bne.n	8011cb2 <rcl_wait+0x1e2>
 8011cc2:	6a2c      	ldr	r4, [r5, #32]
 8011cc4:	f844 1022 	str.w	r1, [r4, r2, lsl #2]
 8011cc8:	3201      	adds	r2, #1
 8011cca:	4296      	cmp	r6, r2
 8011ccc:	d1f4      	bne.n	8011cb8 <rcl_wait+0x1e8>
 8011cce:	6aee      	ldr	r6, [r5, #44]	@ 0x2c
 8011cd0:	2200      	movs	r2, #0
 8011cd2:	b91e      	cbnz	r6, 8011cdc <rcl_wait+0x20c>
 8011cd4:	e00d      	b.n	8011cf2 <rcl_wait+0x222>
 8011cd6:	3201      	adds	r2, #1
 8011cd8:	42b2      	cmp	r2, r6
 8011cda:	d00a      	beq.n	8011cf2 <rcl_wait+0x222>
 8011cdc:	6b99      	ldr	r1, [r3, #56]	@ 0x38
 8011cde:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 8011ce2:	2900      	cmp	r1, #0
 8011ce4:	d1f7      	bne.n	8011cd6 <rcl_wait+0x206>
 8011ce6:	6aac      	ldr	r4, [r5, #40]	@ 0x28
 8011ce8:	f844 1022 	str.w	r1, [r4, r2, lsl #2]
 8011cec:	3201      	adds	r2, #1
 8011cee:	42b2      	cmp	r2, r6
 8011cf0:	d1f4      	bne.n	8011cdc <rcl_wait+0x20c>
 8011cf2:	f1b8 0f02 	cmp.w	r8, #2
 8011cf6:	f47f af08 	bne.w	8011b0a <rcl_wait+0x3a>
 8011cfa:	464b      	mov	r3, r9
 8011cfc:	2b00      	cmp	r3, #0
 8011cfe:	bf08      	it	eq
 8011d00:	2002      	moveq	r0, #2
 8011d02:	e702      	b.n	8011b0a <rcl_wait+0x3a>
 8011d04:	2a00      	cmp	r2, #0
 8011d06:	d03a      	beq.n	8011d7e <rcl_wait+0x2ae>
 8011d08:	f04f 38ff 	mov.w	r8, #4294967295	@ 0xffffffff
 8011d0c:	f06f 4700 	mvn.w	r7, #2147483648	@ 0x80000000
 8011d10:	e70e      	b.n	8011b30 <rcl_wait+0x60>
 8011d12:	f44f 7061 	mov.w	r0, #900	@ 0x384
 8011d16:	b00d      	add	sp, #52	@ 0x34
 8011d18:	ecbd 8b02 	vpop	{d8}
 8011d1c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011d20:	9b04      	ldr	r3, [sp, #16]
 8011d22:	2b01      	cmp	r3, #1
 8011d24:	9b05      	ldr	r3, [sp, #20]
 8011d26:	f173 0300 	sbcs.w	r3, r3, #0
 8011d2a:	db24      	blt.n	8011d76 <rcl_wait+0x2a6>
 8011d2c:	2f00      	cmp	r7, #0
 8011d2e:	bfbc      	itt	lt
 8011d30:	f04f 0800 	movlt.w	r8, #0
 8011d34:	4647      	movlt	r7, r8
 8011d36:	a31e      	add	r3, pc, #120	@ (adr r3, 8011db0 <rcl_wait+0x2e0>)
 8011d38:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011d3c:	4640      	mov	r0, r8
 8011d3e:	4639      	mov	r1, r7
 8011d40:	f7ee fea4 	bl	8000a8c <__aeabi_ldivmod>
 8011d44:	a31a      	add	r3, pc, #104	@ (adr r3, 8011db0 <rcl_wait+0x2e0>)
 8011d46:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011d4a:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8011d4e:	4640      	mov	r0, r8
 8011d50:	4639      	mov	r1, r7
 8011d52:	f7ee fe9b 	bl	8000a8c <__aeabi_ldivmod>
 8011d56:	e9cd 230a 	strd	r2, r3, [sp, #40]	@ 0x28
 8011d5a:	ab08      	add	r3, sp, #32
 8011d5c:	e73e      	b.n	8011bdc <rcl_wait+0x10c>
 8011d5e:	2001      	movs	r0, #1
 8011d60:	b00d      	add	sp, #52	@ 0x34
 8011d62:	ecbd 8b02 	vpop	{d8}
 8011d66:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011d6a:	200b      	movs	r0, #11
 8011d6c:	b00d      	add	sp, #52	@ 0x34
 8011d6e:	ecbd 8b02 	vpop	{d8}
 8011d72:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011d76:	465b      	mov	r3, fp
 8011d78:	2b00      	cmp	r3, #0
 8011d7a:	d1d7      	bne.n	8011d2c <rcl_wait+0x25c>
 8011d7c:	e72e      	b.n	8011bdc <rcl_wait+0x10c>
 8011d7e:	e9dd 3104 	ldrd	r3, r1, [sp, #16]
 8011d82:	430b      	orrs	r3, r1
 8011d84:	bf08      	it	eq
 8011d86:	4691      	moveq	r9, r2
 8011d88:	f43f af21 	beq.w	8011bce <rcl_wait+0xfe>
 8011d8c:	9b04      	ldr	r3, [sp, #16]
 8011d8e:	f04f 38ff 	mov.w	r8, #4294967295	@ 0xffffffff
 8011d92:	f06f 4700 	mvn.w	r7, #2147483648	@ 0x80000000
 8011d96:	2b01      	cmp	r3, #1
 8011d98:	9b05      	ldr	r3, [sp, #20]
 8011d9a:	f173 0300 	sbcs.w	r3, r3, #0
 8011d9e:	f04f 0300 	mov.w	r3, #0
 8011da2:	4699      	mov	r9, r3
 8011da4:	dac2      	bge.n	8011d2c <rcl_wait+0x25c>
 8011da6:	e719      	b.n	8011bdc <rcl_wait+0x10c>
 8011da8:	ffffffff 	.word	0xffffffff
 8011dac:	7fffffff 	.word	0x7fffffff
 8011db0:	3b9aca00 	.word	0x3b9aca00
 8011db4:	00000000 	.word	0x00000000

08011db8 <rcl_action_take_goal_response>:
 8011db8:	2800      	cmp	r0, #0
 8011dba:	d039      	beq.n	8011e30 <rcl_action_take_goal_response+0x78>
 8011dbc:	b570      	push	{r4, r5, r6, lr}
 8011dbe:	4604      	mov	r4, r0
 8011dc0:	6800      	ldr	r0, [r0, #0]
 8011dc2:	b380      	cbz	r0, 8011e26 <rcl_action_take_goal_response+0x6e>
 8011dc4:	460d      	mov	r5, r1
 8011dc6:	4616      	mov	r6, r2
 8011dc8:	f7fe f972 	bl	80100b0 <rcl_client_is_valid>
 8011dcc:	b330      	cbz	r0, 8011e1c <rcl_action_take_goal_response+0x64>
 8011dce:	6820      	ldr	r0, [r4, #0]
 8011dd0:	3004      	adds	r0, #4
 8011dd2:	f7fe f96d 	bl	80100b0 <rcl_client_is_valid>
 8011dd6:	b308      	cbz	r0, 8011e1c <rcl_action_take_goal_response+0x64>
 8011dd8:	6820      	ldr	r0, [r4, #0]
 8011dda:	3008      	adds	r0, #8
 8011ddc:	f7fe f968 	bl	80100b0 <rcl_client_is_valid>
 8011de0:	b1e0      	cbz	r0, 8011e1c <rcl_action_take_goal_response+0x64>
 8011de2:	6820      	ldr	r0, [r4, #0]
 8011de4:	300c      	adds	r0, #12
 8011de6:	f7ff f801 	bl	8010dec <rcl_subscription_is_valid>
 8011dea:	b1b8      	cbz	r0, 8011e1c <rcl_action_take_goal_response+0x64>
 8011dec:	6820      	ldr	r0, [r4, #0]
 8011dee:	3010      	adds	r0, #16
 8011df0:	f7fe fffc 	bl	8010dec <rcl_subscription_is_valid>
 8011df4:	b190      	cbz	r0, 8011e1c <rcl_action_take_goal_response+0x64>
 8011df6:	b1cd      	cbz	r5, 8011e2c <rcl_action_take_goal_response+0x74>
 8011df8:	b1c6      	cbz	r6, 8011e2c <rcl_action_take_goal_response+0x74>
 8011dfa:	6820      	ldr	r0, [r4, #0]
 8011dfc:	4632      	mov	r2, r6
 8011dfe:	4629      	mov	r1, r5
 8011e00:	f7fe f90e 	bl	8010020 <rcl_take_response>
 8011e04:	b148      	cbz	r0, 8011e1a <rcl_action_take_goal_response+0x62>
 8011e06:	280a      	cmp	r0, #10
 8011e08:	d007      	beq.n	8011e1a <rcl_action_take_goal_response+0x62>
 8011e0a:	f240 12f5 	movw	r2, #501	@ 0x1f5
 8011e0e:	f640 0337 	movw	r3, #2103	@ 0x837
 8011e12:	4290      	cmp	r0, r2
 8011e14:	bf0c      	ite	eq
 8011e16:	4618      	moveq	r0, r3
 8011e18:	2001      	movne	r0, #1
 8011e1a:	bd70      	pop	{r4, r5, r6, pc}
 8011e1c:	f7f8 fb20 	bl	800a460 <rcutils_reset_error>
 8011e20:	f640 0036 	movw	r0, #2102	@ 0x836
 8011e24:	bd70      	pop	{r4, r5, r6, pc}
 8011e26:	f640 0036 	movw	r0, #2102	@ 0x836
 8011e2a:	bd70      	pop	{r4, r5, r6, pc}
 8011e2c:	200b      	movs	r0, #11
 8011e2e:	bd70      	pop	{r4, r5, r6, pc}
 8011e30:	f640 0036 	movw	r0, #2102	@ 0x836
 8011e34:	4770      	bx	lr
 8011e36:	bf00      	nop

08011e38 <rcl_action_send_result_request>:
 8011e38:	b390      	cbz	r0, 8011ea0 <rcl_action_send_result_request+0x68>
 8011e3a:	b570      	push	{r4, r5, r6, lr}
 8011e3c:	4604      	mov	r4, r0
 8011e3e:	6800      	ldr	r0, [r0, #0]
 8011e40:	b348      	cbz	r0, 8011e96 <rcl_action_send_result_request+0x5e>
 8011e42:	460d      	mov	r5, r1
 8011e44:	4616      	mov	r6, r2
 8011e46:	f7fe f933 	bl	80100b0 <rcl_client_is_valid>
 8011e4a:	b1f8      	cbz	r0, 8011e8c <rcl_action_send_result_request+0x54>
 8011e4c:	6820      	ldr	r0, [r4, #0]
 8011e4e:	3004      	adds	r0, #4
 8011e50:	f7fe f92e 	bl	80100b0 <rcl_client_is_valid>
 8011e54:	b1d0      	cbz	r0, 8011e8c <rcl_action_send_result_request+0x54>
 8011e56:	6820      	ldr	r0, [r4, #0]
 8011e58:	3008      	adds	r0, #8
 8011e5a:	f7fe f929 	bl	80100b0 <rcl_client_is_valid>
 8011e5e:	b1a8      	cbz	r0, 8011e8c <rcl_action_send_result_request+0x54>
 8011e60:	6820      	ldr	r0, [r4, #0]
 8011e62:	300c      	adds	r0, #12
 8011e64:	f7fe ffc2 	bl	8010dec <rcl_subscription_is_valid>
 8011e68:	b180      	cbz	r0, 8011e8c <rcl_action_send_result_request+0x54>
 8011e6a:	6820      	ldr	r0, [r4, #0]
 8011e6c:	3010      	adds	r0, #16
 8011e6e:	f7fe ffbd 	bl	8010dec <rcl_subscription_is_valid>
 8011e72:	b158      	cbz	r0, 8011e8c <rcl_action_send_result_request+0x54>
 8011e74:	b195      	cbz	r5, 8011e9c <rcl_action_send_result_request+0x64>
 8011e76:	b18e      	cbz	r6, 8011e9c <rcl_action_send_result_request+0x64>
 8011e78:	6820      	ldr	r0, [r4, #0]
 8011e7a:	4632      	mov	r2, r6
 8011e7c:	4629      	mov	r1, r5
 8011e7e:	3008      	adds	r0, #8
 8011e80:	f7fe f896 	bl	800ffb0 <rcl_send_request>
 8011e84:	3800      	subs	r0, #0
 8011e86:	bf18      	it	ne
 8011e88:	2001      	movne	r0, #1
 8011e8a:	bd70      	pop	{r4, r5, r6, pc}
 8011e8c:	f7f8 fae8 	bl	800a460 <rcutils_reset_error>
 8011e90:	f640 0036 	movw	r0, #2102	@ 0x836
 8011e94:	bd70      	pop	{r4, r5, r6, pc}
 8011e96:	f640 0036 	movw	r0, #2102	@ 0x836
 8011e9a:	bd70      	pop	{r4, r5, r6, pc}
 8011e9c:	200b      	movs	r0, #11
 8011e9e:	bd70      	pop	{r4, r5, r6, pc}
 8011ea0:	f640 0036 	movw	r0, #2102	@ 0x836
 8011ea4:	4770      	bx	lr
 8011ea6:	bf00      	nop

08011ea8 <rcl_action_take_result_response>:
 8011ea8:	2800      	cmp	r0, #0
 8011eaa:	d03a      	beq.n	8011f22 <rcl_action_take_result_response+0x7a>
 8011eac:	b570      	push	{r4, r5, r6, lr}
 8011eae:	4604      	mov	r4, r0
 8011eb0:	6800      	ldr	r0, [r0, #0]
 8011eb2:	b388      	cbz	r0, 8011f18 <rcl_action_take_result_response+0x70>
 8011eb4:	460d      	mov	r5, r1
 8011eb6:	4616      	mov	r6, r2
 8011eb8:	f7fe f8fa 	bl	80100b0 <rcl_client_is_valid>
 8011ebc:	b338      	cbz	r0, 8011f0e <rcl_action_take_result_response+0x66>
 8011ebe:	6820      	ldr	r0, [r4, #0]
 8011ec0:	3004      	adds	r0, #4
 8011ec2:	f7fe f8f5 	bl	80100b0 <rcl_client_is_valid>
 8011ec6:	b310      	cbz	r0, 8011f0e <rcl_action_take_result_response+0x66>
 8011ec8:	6820      	ldr	r0, [r4, #0]
 8011eca:	3008      	adds	r0, #8
 8011ecc:	f7fe f8f0 	bl	80100b0 <rcl_client_is_valid>
 8011ed0:	b1e8      	cbz	r0, 8011f0e <rcl_action_take_result_response+0x66>
 8011ed2:	6820      	ldr	r0, [r4, #0]
 8011ed4:	300c      	adds	r0, #12
 8011ed6:	f7fe ff89 	bl	8010dec <rcl_subscription_is_valid>
 8011eda:	b1c0      	cbz	r0, 8011f0e <rcl_action_take_result_response+0x66>
 8011edc:	6820      	ldr	r0, [r4, #0]
 8011ede:	3010      	adds	r0, #16
 8011ee0:	f7fe ff84 	bl	8010dec <rcl_subscription_is_valid>
 8011ee4:	b198      	cbz	r0, 8011f0e <rcl_action_take_result_response+0x66>
 8011ee6:	b1d5      	cbz	r5, 8011f1e <rcl_action_take_result_response+0x76>
 8011ee8:	b1ce      	cbz	r6, 8011f1e <rcl_action_take_result_response+0x76>
 8011eea:	6820      	ldr	r0, [r4, #0]
 8011eec:	4632      	mov	r2, r6
 8011eee:	4629      	mov	r1, r5
 8011ef0:	3008      	adds	r0, #8
 8011ef2:	f7fe f895 	bl	8010020 <rcl_take_response>
 8011ef6:	b148      	cbz	r0, 8011f0c <rcl_action_take_result_response+0x64>
 8011ef8:	280a      	cmp	r0, #10
 8011efa:	d007      	beq.n	8011f0c <rcl_action_take_result_response+0x64>
 8011efc:	f240 12f5 	movw	r2, #501	@ 0x1f5
 8011f00:	f640 0337 	movw	r3, #2103	@ 0x837
 8011f04:	4290      	cmp	r0, r2
 8011f06:	bf0c      	ite	eq
 8011f08:	4618      	moveq	r0, r3
 8011f0a:	2001      	movne	r0, #1
 8011f0c:	bd70      	pop	{r4, r5, r6, pc}
 8011f0e:	f7f8 faa7 	bl	800a460 <rcutils_reset_error>
 8011f12:	f640 0036 	movw	r0, #2102	@ 0x836
 8011f16:	bd70      	pop	{r4, r5, r6, pc}
 8011f18:	f640 0036 	movw	r0, #2102	@ 0x836
 8011f1c:	bd70      	pop	{r4, r5, r6, pc}
 8011f1e:	200b      	movs	r0, #11
 8011f20:	bd70      	pop	{r4, r5, r6, pc}
 8011f22:	f640 0036 	movw	r0, #2102	@ 0x836
 8011f26:	4770      	bx	lr

08011f28 <rcl_action_take_cancel_response>:
 8011f28:	2800      	cmp	r0, #0
 8011f2a:	d03a      	beq.n	8011fa2 <rcl_action_take_cancel_response+0x7a>
 8011f2c:	b570      	push	{r4, r5, r6, lr}
 8011f2e:	4604      	mov	r4, r0
 8011f30:	6800      	ldr	r0, [r0, #0]
 8011f32:	b388      	cbz	r0, 8011f98 <rcl_action_take_cancel_response+0x70>
 8011f34:	460d      	mov	r5, r1
 8011f36:	4616      	mov	r6, r2
 8011f38:	f7fe f8ba 	bl	80100b0 <rcl_client_is_valid>
 8011f3c:	b338      	cbz	r0, 8011f8e <rcl_action_take_cancel_response+0x66>
 8011f3e:	6820      	ldr	r0, [r4, #0]
 8011f40:	3004      	adds	r0, #4
 8011f42:	f7fe f8b5 	bl	80100b0 <rcl_client_is_valid>
 8011f46:	b310      	cbz	r0, 8011f8e <rcl_action_take_cancel_response+0x66>
 8011f48:	6820      	ldr	r0, [r4, #0]
 8011f4a:	3008      	adds	r0, #8
 8011f4c:	f7fe f8b0 	bl	80100b0 <rcl_client_is_valid>
 8011f50:	b1e8      	cbz	r0, 8011f8e <rcl_action_take_cancel_response+0x66>
 8011f52:	6820      	ldr	r0, [r4, #0]
 8011f54:	300c      	adds	r0, #12
 8011f56:	f7fe ff49 	bl	8010dec <rcl_subscription_is_valid>
 8011f5a:	b1c0      	cbz	r0, 8011f8e <rcl_action_take_cancel_response+0x66>
 8011f5c:	6820      	ldr	r0, [r4, #0]
 8011f5e:	3010      	adds	r0, #16
 8011f60:	f7fe ff44 	bl	8010dec <rcl_subscription_is_valid>
 8011f64:	b198      	cbz	r0, 8011f8e <rcl_action_take_cancel_response+0x66>
 8011f66:	b1d5      	cbz	r5, 8011f9e <rcl_action_take_cancel_response+0x76>
 8011f68:	b1ce      	cbz	r6, 8011f9e <rcl_action_take_cancel_response+0x76>
 8011f6a:	6820      	ldr	r0, [r4, #0]
 8011f6c:	4632      	mov	r2, r6
 8011f6e:	4629      	mov	r1, r5
 8011f70:	3004      	adds	r0, #4
 8011f72:	f7fe f855 	bl	8010020 <rcl_take_response>
 8011f76:	b148      	cbz	r0, 8011f8c <rcl_action_take_cancel_response+0x64>
 8011f78:	280a      	cmp	r0, #10
 8011f7a:	d007      	beq.n	8011f8c <rcl_action_take_cancel_response+0x64>
 8011f7c:	f240 12f5 	movw	r2, #501	@ 0x1f5
 8011f80:	f640 0337 	movw	r3, #2103	@ 0x837
 8011f84:	4290      	cmp	r0, r2
 8011f86:	bf0c      	ite	eq
 8011f88:	4618      	moveq	r0, r3
 8011f8a:	2001      	movne	r0, #1
 8011f8c:	bd70      	pop	{r4, r5, r6, pc}
 8011f8e:	f7f8 fa67 	bl	800a460 <rcutils_reset_error>
 8011f92:	f640 0036 	movw	r0, #2102	@ 0x836
 8011f96:	bd70      	pop	{r4, r5, r6, pc}
 8011f98:	f640 0036 	movw	r0, #2102	@ 0x836
 8011f9c:	bd70      	pop	{r4, r5, r6, pc}
 8011f9e:	200b      	movs	r0, #11
 8011fa0:	bd70      	pop	{r4, r5, r6, pc}
 8011fa2:	f640 0036 	movw	r0, #2102	@ 0x836
 8011fa6:	4770      	bx	lr

08011fa8 <rcl_action_take_feedback>:
 8011fa8:	2800      	cmp	r0, #0
 8011faa:	d038      	beq.n	801201e <rcl_action_take_feedback+0x76>
 8011fac:	b530      	push	{r4, r5, lr}
 8011fae:	4604      	mov	r4, r0
 8011fb0:	6800      	ldr	r0, [r0, #0]
 8011fb2:	b091      	sub	sp, #68	@ 0x44
 8011fb4:	b378      	cbz	r0, 8012016 <rcl_action_take_feedback+0x6e>
 8011fb6:	460d      	mov	r5, r1
 8011fb8:	f7fe f87a 	bl	80100b0 <rcl_client_is_valid>
 8011fbc:	b328      	cbz	r0, 801200a <rcl_action_take_feedback+0x62>
 8011fbe:	6820      	ldr	r0, [r4, #0]
 8011fc0:	3004      	adds	r0, #4
 8011fc2:	f7fe f875 	bl	80100b0 <rcl_client_is_valid>
 8011fc6:	b300      	cbz	r0, 801200a <rcl_action_take_feedback+0x62>
 8011fc8:	6820      	ldr	r0, [r4, #0]
 8011fca:	3008      	adds	r0, #8
 8011fcc:	f7fe f870 	bl	80100b0 <rcl_client_is_valid>
 8011fd0:	b1d8      	cbz	r0, 801200a <rcl_action_take_feedback+0x62>
 8011fd2:	6820      	ldr	r0, [r4, #0]
 8011fd4:	300c      	adds	r0, #12
 8011fd6:	f7fe ff09 	bl	8010dec <rcl_subscription_is_valid>
 8011fda:	b1b0      	cbz	r0, 801200a <rcl_action_take_feedback+0x62>
 8011fdc:	6820      	ldr	r0, [r4, #0]
 8011fde:	3010      	adds	r0, #16
 8011fe0:	f7fe ff04 	bl	8010dec <rcl_subscription_is_valid>
 8011fe4:	b188      	cbz	r0, 801200a <rcl_action_take_feedback+0x62>
 8011fe6:	b1ed      	cbz	r5, 8012024 <rcl_action_take_feedback+0x7c>
 8011fe8:	6820      	ldr	r0, [r4, #0]
 8011fea:	2300      	movs	r3, #0
 8011fec:	466a      	mov	r2, sp
 8011fee:	4629      	mov	r1, r5
 8011ff0:	300c      	adds	r0, #12
 8011ff2:	f7fe fe9d 	bl	8010d30 <rcl_take>
 8011ff6:	b160      	cbz	r0, 8012012 <rcl_action_take_feedback+0x6a>
 8011ff8:	f240 1391 	movw	r3, #401	@ 0x191
 8011ffc:	4298      	cmp	r0, r3
 8011ffe:	d014      	beq.n	801202a <rcl_action_take_feedback+0x82>
 8012000:	280a      	cmp	r0, #10
 8012002:	bf18      	it	ne
 8012004:	2001      	movne	r0, #1
 8012006:	b011      	add	sp, #68	@ 0x44
 8012008:	bd30      	pop	{r4, r5, pc}
 801200a:	f7f8 fa29 	bl	800a460 <rcutils_reset_error>
 801200e:	f640 0036 	movw	r0, #2102	@ 0x836
 8012012:	b011      	add	sp, #68	@ 0x44
 8012014:	bd30      	pop	{r4, r5, pc}
 8012016:	f640 0036 	movw	r0, #2102	@ 0x836
 801201a:	b011      	add	sp, #68	@ 0x44
 801201c:	bd30      	pop	{r4, r5, pc}
 801201e:	f640 0036 	movw	r0, #2102	@ 0x836
 8012022:	4770      	bx	lr
 8012024:	200b      	movs	r0, #11
 8012026:	b011      	add	sp, #68	@ 0x44
 8012028:	bd30      	pop	{r4, r5, pc}
 801202a:	f640 0037 	movw	r0, #2103	@ 0x837
 801202e:	e7f0      	b.n	8012012 <rcl_action_take_feedback+0x6a>

08012030 <rcl_action_wait_set_add_action_client>:
 8012030:	2800      	cmp	r0, #0
 8012032:	d048      	beq.n	80120c6 <rcl_action_wait_set_add_action_client+0x96>
 8012034:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012036:	460c      	mov	r4, r1
 8012038:	2900      	cmp	r1, #0
 801203a:	d03c      	beq.n	80120b6 <rcl_action_wait_set_add_action_client+0x86>
 801203c:	4605      	mov	r5, r0
 801203e:	6808      	ldr	r0, [r1, #0]
 8012040:	2800      	cmp	r0, #0
 8012042:	d038      	beq.n	80120b6 <rcl_action_wait_set_add_action_client+0x86>
 8012044:	4617      	mov	r7, r2
 8012046:	461e      	mov	r6, r3
 8012048:	f7fe f832 	bl	80100b0 <rcl_client_is_valid>
 801204c:	b3b0      	cbz	r0, 80120bc <rcl_action_wait_set_add_action_client+0x8c>
 801204e:	6820      	ldr	r0, [r4, #0]
 8012050:	3004      	adds	r0, #4
 8012052:	f7fe f82d 	bl	80100b0 <rcl_client_is_valid>
 8012056:	b388      	cbz	r0, 80120bc <rcl_action_wait_set_add_action_client+0x8c>
 8012058:	6820      	ldr	r0, [r4, #0]
 801205a:	3008      	adds	r0, #8
 801205c:	f7fe f828 	bl	80100b0 <rcl_client_is_valid>
 8012060:	b360      	cbz	r0, 80120bc <rcl_action_wait_set_add_action_client+0x8c>
 8012062:	6820      	ldr	r0, [r4, #0]
 8012064:	300c      	adds	r0, #12
 8012066:	f7fe fec1 	bl	8010dec <rcl_subscription_is_valid>
 801206a:	b338      	cbz	r0, 80120bc <rcl_action_wait_set_add_action_client+0x8c>
 801206c:	6820      	ldr	r0, [r4, #0]
 801206e:	3010      	adds	r0, #16
 8012070:	f7fe febc 	bl	8010dec <rcl_subscription_is_valid>
 8012074:	b310      	cbz	r0, 80120bc <rcl_action_wait_set_add_action_client+0x8c>
 8012076:	6821      	ldr	r1, [r4, #0]
 8012078:	4628      	mov	r0, r5
 801207a:	f501 72e2 	add.w	r2, r1, #452	@ 0x1c4
 801207e:	f7ff fccf 	bl	8011a20 <rcl_wait_set_add_client>
 8012082:	b9b8      	cbnz	r0, 80120b4 <rcl_action_wait_set_add_action_client+0x84>
 8012084:	6821      	ldr	r1, [r4, #0]
 8012086:	4628      	mov	r0, r5
 8012088:	f501 72e4 	add.w	r2, r1, #456	@ 0x1c8
 801208c:	3104      	adds	r1, #4
 801208e:	f7ff fcc7 	bl	8011a20 <rcl_wait_set_add_client>
 8012092:	b978      	cbnz	r0, 80120b4 <rcl_action_wait_set_add_action_client+0x84>
 8012094:	6821      	ldr	r1, [r4, #0]
 8012096:	4628      	mov	r0, r5
 8012098:	f501 72e6 	add.w	r2, r1, #460	@ 0x1cc
 801209c:	3108      	adds	r1, #8
 801209e:	f7ff fcbf 	bl	8011a20 <rcl_wait_set_add_client>
 80120a2:	b938      	cbnz	r0, 80120b4 <rcl_action_wait_set_add_action_client+0x84>
 80120a4:	6821      	ldr	r1, [r4, #0]
 80120a6:	4628      	mov	r0, r5
 80120a8:	f501 72e8 	add.w	r2, r1, #464	@ 0x1d0
 80120ac:	310c      	adds	r1, #12
 80120ae:	f7ff f96f 	bl	8011390 <rcl_wait_set_add_subscription>
 80120b2:	b158      	cbz	r0, 80120cc <rcl_action_wait_set_add_action_client+0x9c>
 80120b4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80120b6:	f640 0036 	movw	r0, #2102	@ 0x836
 80120ba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80120bc:	f7f8 f9d0 	bl	800a460 <rcutils_reset_error>
 80120c0:	f640 0036 	movw	r0, #2102	@ 0x836
 80120c4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80120c6:	f44f 7061 	mov.w	r0, #900	@ 0x384
 80120ca:	4770      	bx	lr
 80120cc:	6821      	ldr	r1, [r4, #0]
 80120ce:	4628      	mov	r0, r5
 80120d0:	f501 72ea 	add.w	r2, r1, #468	@ 0x1d4
 80120d4:	3110      	adds	r1, #16
 80120d6:	f7ff f95b 	bl	8011390 <rcl_wait_set_add_subscription>
 80120da:	2800      	cmp	r0, #0
 80120dc:	d1ea      	bne.n	80120b4 <rcl_action_wait_set_add_action_client+0x84>
 80120de:	b11f      	cbz	r7, 80120e8 <rcl_action_wait_set_add_action_client+0xb8>
 80120e0:	6823      	ldr	r3, [r4, #0]
 80120e2:	f8d3 31c4 	ldr.w	r3, [r3, #452]	@ 0x1c4
 80120e6:	603b      	str	r3, [r7, #0]
 80120e8:	2e00      	cmp	r6, #0
 80120ea:	d0e3      	beq.n	80120b4 <rcl_action_wait_set_add_action_client+0x84>
 80120ec:	6823      	ldr	r3, [r4, #0]
 80120ee:	f8d3 31d0 	ldr.w	r3, [r3, #464]	@ 0x1d0
 80120f2:	6033      	str	r3, [r6, #0]
 80120f4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80120f6:	bf00      	nop

080120f8 <rcl_action_client_wait_set_get_entities_ready>:
 80120f8:	2800      	cmp	r0, #0
 80120fa:	f000 808d 	beq.w	8012218 <rcl_action_client_wait_set_get_entities_ready+0x120>
 80120fe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012102:	460c      	mov	r4, r1
 8012104:	2900      	cmp	r1, #0
 8012106:	d077      	beq.n	80121f8 <rcl_action_client_wait_set_get_entities_ready+0x100>
 8012108:	4605      	mov	r5, r0
 801210a:	6808      	ldr	r0, [r1, #0]
 801210c:	2800      	cmp	r0, #0
 801210e:	d073      	beq.n	80121f8 <rcl_action_client_wait_set_get_entities_ready+0x100>
 8012110:	4616      	mov	r6, r2
 8012112:	461f      	mov	r7, r3
 8012114:	f7fd ffcc 	bl	80100b0 <rcl_client_is_valid>
 8012118:	2800      	cmp	r0, #0
 801211a:	d071      	beq.n	8012200 <rcl_action_client_wait_set_get_entities_ready+0x108>
 801211c:	6820      	ldr	r0, [r4, #0]
 801211e:	3004      	adds	r0, #4
 8012120:	f7fd ffc6 	bl	80100b0 <rcl_client_is_valid>
 8012124:	2800      	cmp	r0, #0
 8012126:	d06b      	beq.n	8012200 <rcl_action_client_wait_set_get_entities_ready+0x108>
 8012128:	6820      	ldr	r0, [r4, #0]
 801212a:	3008      	adds	r0, #8
 801212c:	f7fd ffc0 	bl	80100b0 <rcl_client_is_valid>
 8012130:	2800      	cmp	r0, #0
 8012132:	d065      	beq.n	8012200 <rcl_action_client_wait_set_get_entities_ready+0x108>
 8012134:	6820      	ldr	r0, [r4, #0]
 8012136:	300c      	adds	r0, #12
 8012138:	f7fe fe58 	bl	8010dec <rcl_subscription_is_valid>
 801213c:	2800      	cmp	r0, #0
 801213e:	d05f      	beq.n	8012200 <rcl_action_client_wait_set_get_entities_ready+0x108>
 8012140:	6820      	ldr	r0, [r4, #0]
 8012142:	3010      	adds	r0, #16
 8012144:	f7fe fe52 	bl	8010dec <rcl_subscription_is_valid>
 8012148:	2800      	cmp	r0, #0
 801214a:	d059      	beq.n	8012200 <rcl_action_client_wait_set_get_entities_ready+0x108>
 801214c:	2e00      	cmp	r6, #0
 801214e:	d060      	beq.n	8012212 <rcl_action_client_wait_set_get_entities_ready+0x11a>
 8012150:	2f00      	cmp	r7, #0
 8012152:	d05e      	beq.n	8012212 <rcl_action_client_wait_set_get_entities_ready+0x11a>
 8012154:	9b06      	ldr	r3, [sp, #24]
 8012156:	2b00      	cmp	r3, #0
 8012158:	d05b      	beq.n	8012212 <rcl_action_client_wait_set_get_entities_ready+0x11a>
 801215a:	9b07      	ldr	r3, [sp, #28]
 801215c:	2b00      	cmp	r3, #0
 801215e:	d058      	beq.n	8012212 <rcl_action_client_wait_set_get_entities_ready+0x11a>
 8012160:	9b08      	ldr	r3, [sp, #32]
 8012162:	2b00      	cmp	r3, #0
 8012164:	d055      	beq.n	8012212 <rcl_action_client_wait_set_get_entities_ready+0x11a>
 8012166:	6823      	ldr	r3, [r4, #0]
 8012168:	686a      	ldr	r2, [r5, #4]
 801216a:	f8d3 11d0 	ldr.w	r1, [r3, #464]	@ 0x1d0
 801216e:	428a      	cmp	r2, r1
 8012170:	d94c      	bls.n	801220c <rcl_action_client_wait_set_get_entities_ready+0x114>
 8012172:	f8d3 01d4 	ldr.w	r0, [r3, #468]	@ 0x1d4
 8012176:	4282      	cmp	r2, r0
 8012178:	d948      	bls.n	801220c <rcl_action_client_wait_set_get_entities_ready+0x114>
 801217a:	f8d3 41c4 	ldr.w	r4, [r3, #452]	@ 0x1c4
 801217e:	69ea      	ldr	r2, [r5, #28]
 8012180:	42a2      	cmp	r2, r4
 8012182:	d943      	bls.n	801220c <rcl_action_client_wait_set_get_entities_ready+0x114>
 8012184:	f8d3 c1c8 	ldr.w	ip, [r3, #456]	@ 0x1c8
 8012188:	4562      	cmp	r2, ip
 801218a:	d93f      	bls.n	801220c <rcl_action_client_wait_set_get_entities_ready+0x114>
 801218c:	f8d3 e1cc 	ldr.w	lr, [r3, #460]	@ 0x1cc
 8012190:	4572      	cmp	r2, lr
 8012192:	d93b      	bls.n	801220c <rcl_action_client_wait_set_get_entities_ready+0x114>
 8012194:	69aa      	ldr	r2, [r5, #24]
 8012196:	682d      	ldr	r5, [r5, #0]
 8012198:	f852 8024 	ldr.w	r8, [r2, r4, lsl #2]
 801219c:	f855 4020 	ldr.w	r4, [r5, r0, lsl #2]
 80121a0:	f855 5021 	ldr.w	r5, [r5, r1, lsl #2]
 80121a4:	f852 102c 	ldr.w	r1, [r2, ip, lsl #2]
 80121a8:	f852 202e 	ldr.w	r2, [r2, lr, lsl #2]
 80121ac:	f103 0c0c 	add.w	ip, r3, #12
 80121b0:	eba5 050c 	sub.w	r5, r5, ip
 80121b4:	fab5 f585 	clz	r5, r5
 80121b8:	096d      	lsrs	r5, r5, #5
 80121ba:	7035      	strb	r5, [r6, #0]
 80121bc:	f103 0510 	add.w	r5, r3, #16
 80121c0:	1b64      	subs	r4, r4, r5
 80121c2:	fab4 f484 	clz	r4, r4
 80121c6:	0964      	lsrs	r4, r4, #5
 80121c8:	703c      	strb	r4, [r7, #0]
 80121ca:	eba3 0008 	sub.w	r0, r3, r8
 80121ce:	1d1c      	adds	r4, r3, #4
 80121d0:	3308      	adds	r3, #8
 80121d2:	1ad3      	subs	r3, r2, r3
 80121d4:	fab0 f080 	clz	r0, r0
 80121d8:	9a06      	ldr	r2, [sp, #24]
 80121da:	0940      	lsrs	r0, r0, #5
 80121dc:	1b09      	subs	r1, r1, r4
 80121de:	7010      	strb	r0, [r2, #0]
 80121e0:	fab1 f181 	clz	r1, r1
 80121e4:	9a07      	ldr	r2, [sp, #28]
 80121e6:	0949      	lsrs	r1, r1, #5
 80121e8:	7011      	strb	r1, [r2, #0]
 80121ea:	fab3 f383 	clz	r3, r3
 80121ee:	9a08      	ldr	r2, [sp, #32]
 80121f0:	095b      	lsrs	r3, r3, #5
 80121f2:	2000      	movs	r0, #0
 80121f4:	7013      	strb	r3, [r2, #0]
 80121f6:	e001      	b.n	80121fc <rcl_action_client_wait_set_get_entities_ready+0x104>
 80121f8:	f640 0036 	movw	r0, #2102	@ 0x836
 80121fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012200:	f7f8 f92e 	bl	800a460 <rcutils_reset_error>
 8012204:	f640 0036 	movw	r0, #2102	@ 0x836
 8012208:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801220c:	2001      	movs	r0, #1
 801220e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012212:	200b      	movs	r0, #11
 8012214:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012218:	f44f 7061 	mov.w	r0, #900	@ 0x384
 801221c:	4770      	bx	lr
 801221e:	bf00      	nop

08012220 <rcl_action_take_goal_request>:
 8012220:	2800      	cmp	r0, #0
 8012222:	d039      	beq.n	8012298 <rcl_action_take_goal_request+0x78>
 8012224:	b570      	push	{r4, r5, r6, lr}
 8012226:	4604      	mov	r4, r0
 8012228:	6800      	ldr	r0, [r0, #0]
 801222a:	b380      	cbz	r0, 801228e <rcl_action_take_goal_request+0x6e>
 801222c:	460d      	mov	r5, r1
 801222e:	4616      	mov	r6, r2
 8012230:	f7fe fc98 	bl	8010b64 <rcl_service_is_valid>
 8012234:	b330      	cbz	r0, 8012284 <rcl_action_take_goal_request+0x64>
 8012236:	6820      	ldr	r0, [r4, #0]
 8012238:	3004      	adds	r0, #4
 801223a:	f7fe fc93 	bl	8010b64 <rcl_service_is_valid>
 801223e:	b308      	cbz	r0, 8012284 <rcl_action_take_goal_request+0x64>
 8012240:	6820      	ldr	r0, [r4, #0]
 8012242:	3008      	adds	r0, #8
 8012244:	f7fe fc8e 	bl	8010b64 <rcl_service_is_valid>
 8012248:	b1e0      	cbz	r0, 8012284 <rcl_action_take_goal_request+0x64>
 801224a:	6820      	ldr	r0, [r4, #0]
 801224c:	300c      	adds	r0, #12
 801224e:	f002 ff2d 	bl	80150ac <rcl_publisher_is_valid>
 8012252:	b1b8      	cbz	r0, 8012284 <rcl_action_take_goal_request+0x64>
 8012254:	6820      	ldr	r0, [r4, #0]
 8012256:	3010      	adds	r0, #16
 8012258:	f002 ff28 	bl	80150ac <rcl_publisher_is_valid>
 801225c:	b190      	cbz	r0, 8012284 <rcl_action_take_goal_request+0x64>
 801225e:	b1cd      	cbz	r5, 8012294 <rcl_action_take_goal_request+0x74>
 8012260:	b1c6      	cbz	r6, 8012294 <rcl_action_take_goal_request+0x74>
 8012262:	6820      	ldr	r0, [r4, #0]
 8012264:	4632      	mov	r2, r6
 8012266:	4629      	mov	r1, r5
 8012268:	f7fe fc24 	bl	8010ab4 <rcl_take_request>
 801226c:	b148      	cbz	r0, 8012282 <rcl_action_take_goal_request+0x62>
 801226e:	280a      	cmp	r0, #10
 8012270:	d007      	beq.n	8012282 <rcl_action_take_goal_request+0x62>
 8012272:	f240 2259 	movw	r2, #601	@ 0x259
 8012276:	f640 0399 	movw	r3, #2201	@ 0x899
 801227a:	4290      	cmp	r0, r2
 801227c:	bf0c      	ite	eq
 801227e:	4618      	moveq	r0, r3
 8012280:	2001      	movne	r0, #1
 8012282:	bd70      	pop	{r4, r5, r6, pc}
 8012284:	f7f8 f8ec 	bl	800a460 <rcutils_reset_error>
 8012288:	f640 0098 	movw	r0, #2200	@ 0x898
 801228c:	bd70      	pop	{r4, r5, r6, pc}
 801228e:	f640 0098 	movw	r0, #2200	@ 0x898
 8012292:	bd70      	pop	{r4, r5, r6, pc}
 8012294:	200b      	movs	r0, #11
 8012296:	bd70      	pop	{r4, r5, r6, pc}
 8012298:	f640 0098 	movw	r0, #2200	@ 0x898
 801229c:	4770      	bx	lr
 801229e:	bf00      	nop

080122a0 <rcl_action_send_goal_response>:
 80122a0:	b390      	cbz	r0, 8012308 <rcl_action_send_goal_response+0x68>
 80122a2:	b570      	push	{r4, r5, r6, lr}
 80122a4:	4604      	mov	r4, r0
 80122a6:	6800      	ldr	r0, [r0, #0]
 80122a8:	b348      	cbz	r0, 80122fe <rcl_action_send_goal_response+0x5e>
 80122aa:	460d      	mov	r5, r1
 80122ac:	4616      	mov	r6, r2
 80122ae:	f7fe fc59 	bl	8010b64 <rcl_service_is_valid>
 80122b2:	b1f8      	cbz	r0, 80122f4 <rcl_action_send_goal_response+0x54>
 80122b4:	6820      	ldr	r0, [r4, #0]
 80122b6:	3004      	adds	r0, #4
 80122b8:	f7fe fc54 	bl	8010b64 <rcl_service_is_valid>
 80122bc:	b1d0      	cbz	r0, 80122f4 <rcl_action_send_goal_response+0x54>
 80122be:	6820      	ldr	r0, [r4, #0]
 80122c0:	3008      	adds	r0, #8
 80122c2:	f7fe fc4f 	bl	8010b64 <rcl_service_is_valid>
 80122c6:	b1a8      	cbz	r0, 80122f4 <rcl_action_send_goal_response+0x54>
 80122c8:	6820      	ldr	r0, [r4, #0]
 80122ca:	300c      	adds	r0, #12
 80122cc:	f002 feee 	bl	80150ac <rcl_publisher_is_valid>
 80122d0:	b180      	cbz	r0, 80122f4 <rcl_action_send_goal_response+0x54>
 80122d2:	6820      	ldr	r0, [r4, #0]
 80122d4:	3010      	adds	r0, #16
 80122d6:	f002 fee9 	bl	80150ac <rcl_publisher_is_valid>
 80122da:	b158      	cbz	r0, 80122f4 <rcl_action_send_goal_response+0x54>
 80122dc:	b195      	cbz	r5, 8012304 <rcl_action_send_goal_response+0x64>
 80122de:	b18e      	cbz	r6, 8012304 <rcl_action_send_goal_response+0x64>
 80122e0:	6820      	ldr	r0, [r4, #0]
 80122e2:	4632      	mov	r2, r6
 80122e4:	4629      	mov	r1, r5
 80122e6:	f7fe fc25 	bl	8010b34 <rcl_send_response>
 80122ea:	b110      	cbz	r0, 80122f2 <rcl_action_send_goal_response+0x52>
 80122ec:	2802      	cmp	r0, #2
 80122ee:	bf18      	it	ne
 80122f0:	2001      	movne	r0, #1
 80122f2:	bd70      	pop	{r4, r5, r6, pc}
 80122f4:	f7f8 f8b4 	bl	800a460 <rcutils_reset_error>
 80122f8:	f640 0098 	movw	r0, #2200	@ 0x898
 80122fc:	bd70      	pop	{r4, r5, r6, pc}
 80122fe:	f640 0098 	movw	r0, #2200	@ 0x898
 8012302:	bd70      	pop	{r4, r5, r6, pc}
 8012304:	200b      	movs	r0, #11
 8012306:	bd70      	pop	{r4, r5, r6, pc}
 8012308:	f640 0098 	movw	r0, #2200	@ 0x898
 801230c:	4770      	bx	lr
 801230e:	bf00      	nop

08012310 <rcl_action_take_result_request>:
 8012310:	2800      	cmp	r0, #0
 8012312:	d03a      	beq.n	801238a <rcl_action_take_result_request+0x7a>
 8012314:	b570      	push	{r4, r5, r6, lr}
 8012316:	4604      	mov	r4, r0
 8012318:	6800      	ldr	r0, [r0, #0]
 801231a:	b388      	cbz	r0, 8012380 <rcl_action_take_result_request+0x70>
 801231c:	460d      	mov	r5, r1
 801231e:	4616      	mov	r6, r2
 8012320:	f7fe fc20 	bl	8010b64 <rcl_service_is_valid>
 8012324:	b338      	cbz	r0, 8012376 <rcl_action_take_result_request+0x66>
 8012326:	6820      	ldr	r0, [r4, #0]
 8012328:	3004      	adds	r0, #4
 801232a:	f7fe fc1b 	bl	8010b64 <rcl_service_is_valid>
 801232e:	b310      	cbz	r0, 8012376 <rcl_action_take_result_request+0x66>
 8012330:	6820      	ldr	r0, [r4, #0]
 8012332:	3008      	adds	r0, #8
 8012334:	f7fe fc16 	bl	8010b64 <rcl_service_is_valid>
 8012338:	b1e8      	cbz	r0, 8012376 <rcl_action_take_result_request+0x66>
 801233a:	6820      	ldr	r0, [r4, #0]
 801233c:	300c      	adds	r0, #12
 801233e:	f002 feb5 	bl	80150ac <rcl_publisher_is_valid>
 8012342:	b1c0      	cbz	r0, 8012376 <rcl_action_take_result_request+0x66>
 8012344:	6820      	ldr	r0, [r4, #0]
 8012346:	3010      	adds	r0, #16
 8012348:	f002 feb0 	bl	80150ac <rcl_publisher_is_valid>
 801234c:	b198      	cbz	r0, 8012376 <rcl_action_take_result_request+0x66>
 801234e:	b1d5      	cbz	r5, 8012386 <rcl_action_take_result_request+0x76>
 8012350:	b1ce      	cbz	r6, 8012386 <rcl_action_take_result_request+0x76>
 8012352:	6820      	ldr	r0, [r4, #0]
 8012354:	4632      	mov	r2, r6
 8012356:	4629      	mov	r1, r5
 8012358:	3008      	adds	r0, #8
 801235a:	f7fe fbab 	bl	8010ab4 <rcl_take_request>
 801235e:	b148      	cbz	r0, 8012374 <rcl_action_take_result_request+0x64>
 8012360:	280a      	cmp	r0, #10
 8012362:	d007      	beq.n	8012374 <rcl_action_take_result_request+0x64>
 8012364:	f240 2259 	movw	r2, #601	@ 0x259
 8012368:	f640 0399 	movw	r3, #2201	@ 0x899
 801236c:	4290      	cmp	r0, r2
 801236e:	bf0c      	ite	eq
 8012370:	4618      	moveq	r0, r3
 8012372:	2001      	movne	r0, #1
 8012374:	bd70      	pop	{r4, r5, r6, pc}
 8012376:	f7f8 f873 	bl	800a460 <rcutils_reset_error>
 801237a:	f640 0098 	movw	r0, #2200	@ 0x898
 801237e:	bd70      	pop	{r4, r5, r6, pc}
 8012380:	f640 0098 	movw	r0, #2200	@ 0x898
 8012384:	bd70      	pop	{r4, r5, r6, pc}
 8012386:	200b      	movs	r0, #11
 8012388:	bd70      	pop	{r4, r5, r6, pc}
 801238a:	f640 0098 	movw	r0, #2200	@ 0x898
 801238e:	4770      	bx	lr

08012390 <rcl_action_take_cancel_request>:
 8012390:	2800      	cmp	r0, #0
 8012392:	d03a      	beq.n	801240a <rcl_action_take_cancel_request+0x7a>
 8012394:	b570      	push	{r4, r5, r6, lr}
 8012396:	4604      	mov	r4, r0
 8012398:	6800      	ldr	r0, [r0, #0]
 801239a:	b388      	cbz	r0, 8012400 <rcl_action_take_cancel_request+0x70>
 801239c:	460d      	mov	r5, r1
 801239e:	4616      	mov	r6, r2
 80123a0:	f7fe fbe0 	bl	8010b64 <rcl_service_is_valid>
 80123a4:	b338      	cbz	r0, 80123f6 <rcl_action_take_cancel_request+0x66>
 80123a6:	6820      	ldr	r0, [r4, #0]
 80123a8:	3004      	adds	r0, #4
 80123aa:	f7fe fbdb 	bl	8010b64 <rcl_service_is_valid>
 80123ae:	b310      	cbz	r0, 80123f6 <rcl_action_take_cancel_request+0x66>
 80123b0:	6820      	ldr	r0, [r4, #0]
 80123b2:	3008      	adds	r0, #8
 80123b4:	f7fe fbd6 	bl	8010b64 <rcl_service_is_valid>
 80123b8:	b1e8      	cbz	r0, 80123f6 <rcl_action_take_cancel_request+0x66>
 80123ba:	6820      	ldr	r0, [r4, #0]
 80123bc:	300c      	adds	r0, #12
 80123be:	f002 fe75 	bl	80150ac <rcl_publisher_is_valid>
 80123c2:	b1c0      	cbz	r0, 80123f6 <rcl_action_take_cancel_request+0x66>
 80123c4:	6820      	ldr	r0, [r4, #0]
 80123c6:	3010      	adds	r0, #16
 80123c8:	f002 fe70 	bl	80150ac <rcl_publisher_is_valid>
 80123cc:	b198      	cbz	r0, 80123f6 <rcl_action_take_cancel_request+0x66>
 80123ce:	b1d5      	cbz	r5, 8012406 <rcl_action_take_cancel_request+0x76>
 80123d0:	b1ce      	cbz	r6, 8012406 <rcl_action_take_cancel_request+0x76>
 80123d2:	6820      	ldr	r0, [r4, #0]
 80123d4:	4632      	mov	r2, r6
 80123d6:	4629      	mov	r1, r5
 80123d8:	3004      	adds	r0, #4
 80123da:	f7fe fb6b 	bl	8010ab4 <rcl_take_request>
 80123de:	b148      	cbz	r0, 80123f4 <rcl_action_take_cancel_request+0x64>
 80123e0:	280a      	cmp	r0, #10
 80123e2:	d007      	beq.n	80123f4 <rcl_action_take_cancel_request+0x64>
 80123e4:	f240 2259 	movw	r2, #601	@ 0x259
 80123e8:	f640 0399 	movw	r3, #2201	@ 0x899
 80123ec:	4290      	cmp	r0, r2
 80123ee:	bf0c      	ite	eq
 80123f0:	4618      	moveq	r0, r3
 80123f2:	2001      	movne	r0, #1
 80123f4:	bd70      	pop	{r4, r5, r6, pc}
 80123f6:	f7f8 f833 	bl	800a460 <rcutils_reset_error>
 80123fa:	f640 0098 	movw	r0, #2200	@ 0x898
 80123fe:	bd70      	pop	{r4, r5, r6, pc}
 8012400:	f640 0098 	movw	r0, #2200	@ 0x898
 8012404:	bd70      	pop	{r4, r5, r6, pc}
 8012406:	200b      	movs	r0, #11
 8012408:	bd70      	pop	{r4, r5, r6, pc}
 801240a:	f640 0098 	movw	r0, #2200	@ 0x898
 801240e:	4770      	bx	lr

08012410 <rcl_action_send_cancel_response>:
 8012410:	b398      	cbz	r0, 801247a <rcl_action_send_cancel_response+0x6a>
 8012412:	b570      	push	{r4, r5, r6, lr}
 8012414:	4604      	mov	r4, r0
 8012416:	6800      	ldr	r0, [r0, #0]
 8012418:	b350      	cbz	r0, 8012470 <rcl_action_send_cancel_response+0x60>
 801241a:	460d      	mov	r5, r1
 801241c:	4616      	mov	r6, r2
 801241e:	f7fe fba1 	bl	8010b64 <rcl_service_is_valid>
 8012422:	b300      	cbz	r0, 8012466 <rcl_action_send_cancel_response+0x56>
 8012424:	6820      	ldr	r0, [r4, #0]
 8012426:	3004      	adds	r0, #4
 8012428:	f7fe fb9c 	bl	8010b64 <rcl_service_is_valid>
 801242c:	b1d8      	cbz	r0, 8012466 <rcl_action_send_cancel_response+0x56>
 801242e:	6820      	ldr	r0, [r4, #0]
 8012430:	3008      	adds	r0, #8
 8012432:	f7fe fb97 	bl	8010b64 <rcl_service_is_valid>
 8012436:	b1b0      	cbz	r0, 8012466 <rcl_action_send_cancel_response+0x56>
 8012438:	6820      	ldr	r0, [r4, #0]
 801243a:	300c      	adds	r0, #12
 801243c:	f002 fe36 	bl	80150ac <rcl_publisher_is_valid>
 8012440:	b188      	cbz	r0, 8012466 <rcl_action_send_cancel_response+0x56>
 8012442:	6820      	ldr	r0, [r4, #0]
 8012444:	3010      	adds	r0, #16
 8012446:	f002 fe31 	bl	80150ac <rcl_publisher_is_valid>
 801244a:	b160      	cbz	r0, 8012466 <rcl_action_send_cancel_response+0x56>
 801244c:	b19d      	cbz	r5, 8012476 <rcl_action_send_cancel_response+0x66>
 801244e:	b196      	cbz	r6, 8012476 <rcl_action_send_cancel_response+0x66>
 8012450:	6820      	ldr	r0, [r4, #0]
 8012452:	4632      	mov	r2, r6
 8012454:	4629      	mov	r1, r5
 8012456:	3004      	adds	r0, #4
 8012458:	f7fe fb6c 	bl	8010b34 <rcl_send_response>
 801245c:	b110      	cbz	r0, 8012464 <rcl_action_send_cancel_response+0x54>
 801245e:	2802      	cmp	r0, #2
 8012460:	bf18      	it	ne
 8012462:	2001      	movne	r0, #1
 8012464:	bd70      	pop	{r4, r5, r6, pc}
 8012466:	f7f7 fffb 	bl	800a460 <rcutils_reset_error>
 801246a:	f640 0098 	movw	r0, #2200	@ 0x898
 801246e:	bd70      	pop	{r4, r5, r6, pc}
 8012470:	f640 0098 	movw	r0, #2200	@ 0x898
 8012474:	bd70      	pop	{r4, r5, r6, pc}
 8012476:	200b      	movs	r0, #11
 8012478:	bd70      	pop	{r4, r5, r6, pc}
 801247a:	f640 0098 	movw	r0, #2200	@ 0x898
 801247e:	4770      	bx	lr

08012480 <rcl_action_wait_set_add_action_server>:
 8012480:	2800      	cmp	r0, #0
 8012482:	d04d      	beq.n	8012520 <rcl_action_wait_set_add_action_server+0xa0>
 8012484:	b570      	push	{r4, r5, r6, lr}
 8012486:	460c      	mov	r4, r1
 8012488:	b159      	cbz	r1, 80124a2 <rcl_action_wait_set_add_action_server+0x22>
 801248a:	4605      	mov	r5, r0
 801248c:	6808      	ldr	r0, [r1, #0]
 801248e:	b140      	cbz	r0, 80124a2 <rcl_action_wait_set_add_action_server+0x22>
 8012490:	4616      	mov	r6, r2
 8012492:	f7fe fb67 	bl	8010b64 <rcl_service_is_valid>
 8012496:	b120      	cbz	r0, 80124a2 <rcl_action_wait_set_add_action_server+0x22>
 8012498:	6820      	ldr	r0, [r4, #0]
 801249a:	3004      	adds	r0, #4
 801249c:	f7fe fb62 	bl	8010b64 <rcl_service_is_valid>
 80124a0:	b910      	cbnz	r0, 80124a8 <rcl_action_wait_set_add_action_server+0x28>
 80124a2:	f640 0098 	movw	r0, #2200	@ 0x898
 80124a6:	bd70      	pop	{r4, r5, r6, pc}
 80124a8:	6820      	ldr	r0, [r4, #0]
 80124aa:	3008      	adds	r0, #8
 80124ac:	f7fe fb5a 	bl	8010b64 <rcl_service_is_valid>
 80124b0:	2800      	cmp	r0, #0
 80124b2:	d0f6      	beq.n	80124a2 <rcl_action_wait_set_add_action_server+0x22>
 80124b4:	6820      	ldr	r0, [r4, #0]
 80124b6:	300c      	adds	r0, #12
 80124b8:	f002 fe10 	bl	80150dc <rcl_publisher_is_valid_except_context>
 80124bc:	2800      	cmp	r0, #0
 80124be:	d0f0      	beq.n	80124a2 <rcl_action_wait_set_add_action_server+0x22>
 80124c0:	6820      	ldr	r0, [r4, #0]
 80124c2:	3010      	adds	r0, #16
 80124c4:	f002 fe0a 	bl	80150dc <rcl_publisher_is_valid_except_context>
 80124c8:	2800      	cmp	r0, #0
 80124ca:	d0ea      	beq.n	80124a2 <rcl_action_wait_set_add_action_server+0x22>
 80124cc:	6821      	ldr	r1, [r4, #0]
 80124ce:	4628      	mov	r0, r5
 80124d0:	f501 72ee 	add.w	r2, r1, #476	@ 0x1dc
 80124d4:	f7ff fad0 	bl	8011a78 <rcl_wait_set_add_service>
 80124d8:	2800      	cmp	r0, #0
 80124da:	d1e4      	bne.n	80124a6 <rcl_action_wait_set_add_action_server+0x26>
 80124dc:	6821      	ldr	r1, [r4, #0]
 80124de:	4628      	mov	r0, r5
 80124e0:	f501 72f0 	add.w	r2, r1, #480	@ 0x1e0
 80124e4:	3104      	adds	r1, #4
 80124e6:	f7ff fac7 	bl	8011a78 <rcl_wait_set_add_service>
 80124ea:	2800      	cmp	r0, #0
 80124ec:	d1db      	bne.n	80124a6 <rcl_action_wait_set_add_action_server+0x26>
 80124ee:	6821      	ldr	r1, [r4, #0]
 80124f0:	4628      	mov	r0, r5
 80124f2:	f501 72f2 	add.w	r2, r1, #484	@ 0x1e4
 80124f6:	3108      	adds	r1, #8
 80124f8:	f7ff fabe 	bl	8011a78 <rcl_wait_set_add_service>
 80124fc:	2800      	cmp	r0, #0
 80124fe:	d1d2      	bne.n	80124a6 <rcl_action_wait_set_add_action_server+0x26>
 8012500:	6821      	ldr	r1, [r4, #0]
 8012502:	4628      	mov	r0, r5
 8012504:	f501 72f4 	add.w	r2, r1, #488	@ 0x1e8
 8012508:	3114      	adds	r1, #20
 801250a:	f7ff fa59 	bl	80119c0 <rcl_wait_set_add_timer>
 801250e:	2800      	cmp	r0, #0
 8012510:	d1c9      	bne.n	80124a6 <rcl_action_wait_set_add_action_server+0x26>
 8012512:	2e00      	cmp	r6, #0
 8012514:	d0c7      	beq.n	80124a6 <rcl_action_wait_set_add_action_server+0x26>
 8012516:	6823      	ldr	r3, [r4, #0]
 8012518:	f8d3 31dc 	ldr.w	r3, [r3, #476]	@ 0x1dc
 801251c:	6033      	str	r3, [r6, #0]
 801251e:	bd70      	pop	{r4, r5, r6, pc}
 8012520:	f44f 7061 	mov.w	r0, #900	@ 0x384
 8012524:	4770      	bx	lr
 8012526:	bf00      	nop

08012528 <rcl_action_server_wait_set_get_entities_ready>:
 8012528:	2800      	cmp	r0, #0
 801252a:	d05a      	beq.n	80125e2 <rcl_action_server_wait_set_get_entities_ready+0xba>
 801252c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801252e:	460c      	mov	r4, r1
 8012530:	b161      	cbz	r1, 801254c <rcl_action_server_wait_set_get_entities_ready+0x24>
 8012532:	4605      	mov	r5, r0
 8012534:	6808      	ldr	r0, [r1, #0]
 8012536:	b148      	cbz	r0, 801254c <rcl_action_server_wait_set_get_entities_ready+0x24>
 8012538:	4616      	mov	r6, r2
 801253a:	461f      	mov	r7, r3
 801253c:	f7fe fb12 	bl	8010b64 <rcl_service_is_valid>
 8012540:	b120      	cbz	r0, 801254c <rcl_action_server_wait_set_get_entities_ready+0x24>
 8012542:	6820      	ldr	r0, [r4, #0]
 8012544:	3004      	adds	r0, #4
 8012546:	f7fe fb0d 	bl	8010b64 <rcl_service_is_valid>
 801254a:	b910      	cbnz	r0, 8012552 <rcl_action_server_wait_set_get_entities_ready+0x2a>
 801254c:	f640 0098 	movw	r0, #2200	@ 0x898
 8012550:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8012552:	6820      	ldr	r0, [r4, #0]
 8012554:	3008      	adds	r0, #8
 8012556:	f7fe fb05 	bl	8010b64 <rcl_service_is_valid>
 801255a:	2800      	cmp	r0, #0
 801255c:	d0f6      	beq.n	801254c <rcl_action_server_wait_set_get_entities_ready+0x24>
 801255e:	6820      	ldr	r0, [r4, #0]
 8012560:	300c      	adds	r0, #12
 8012562:	f002 fdbb 	bl	80150dc <rcl_publisher_is_valid_except_context>
 8012566:	2800      	cmp	r0, #0
 8012568:	d0f0      	beq.n	801254c <rcl_action_server_wait_set_get_entities_ready+0x24>
 801256a:	6820      	ldr	r0, [r4, #0]
 801256c:	3010      	adds	r0, #16
 801256e:	f002 fdb5 	bl	80150dc <rcl_publisher_is_valid_except_context>
 8012572:	2800      	cmp	r0, #0
 8012574:	d0ea      	beq.n	801254c <rcl_action_server_wait_set_get_entities_ready+0x24>
 8012576:	b3be      	cbz	r6, 80125e8 <rcl_action_server_wait_set_get_entities_ready+0xc0>
 8012578:	b3b7      	cbz	r7, 80125e8 <rcl_action_server_wait_set_get_entities_ready+0xc0>
 801257a:	9b06      	ldr	r3, [sp, #24]
 801257c:	b3a3      	cbz	r3, 80125e8 <rcl_action_server_wait_set_get_entities_ready+0xc0>
 801257e:	9b07      	ldr	r3, [sp, #28]
 8012580:	b393      	cbz	r3, 80125e8 <rcl_action_server_wait_set_get_entities_ready+0xc0>
 8012582:	6821      	ldr	r1, [r4, #0]
 8012584:	692a      	ldr	r2, [r5, #16]
 8012586:	6a2c      	ldr	r4, [r5, #32]
 8012588:	f8d1 51e8 	ldr.w	r5, [r1, #488]	@ 0x1e8
 801258c:	f8d1 31e0 	ldr.w	r3, [r1, #480]	@ 0x1e0
 8012590:	f852 2025 	ldr.w	r2, [r2, r5, lsl #2]
 8012594:	f8d1 01e4 	ldr.w	r0, [r1, #484]	@ 0x1e4
 8012598:	f8d1 51dc 	ldr.w	r5, [r1, #476]	@ 0x1dc
 801259c:	f854 0020 	ldr.w	r0, [r4, r0, lsl #2]
 80125a0:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 80125a4:	f854 4025 	ldr.w	r4, [r4, r5, lsl #2]
 80125a8:	1a64      	subs	r4, r4, r1
 80125aa:	fab4 f484 	clz	r4, r4
 80125ae:	0964      	lsrs	r4, r4, #5
 80125b0:	7034      	strb	r4, [r6, #0]
 80125b2:	1d0c      	adds	r4, r1, #4
 80125b4:	1b1b      	subs	r3, r3, r4
 80125b6:	fab3 f383 	clz	r3, r3
 80125ba:	095b      	lsrs	r3, r3, #5
 80125bc:	f101 0408 	add.w	r4, r1, #8
 80125c0:	703b      	strb	r3, [r7, #0]
 80125c2:	f101 0314 	add.w	r3, r1, #20
 80125c6:	1b01      	subs	r1, r0, r4
 80125c8:	1ad3      	subs	r3, r2, r3
 80125ca:	fab1 f181 	clz	r1, r1
 80125ce:	9a06      	ldr	r2, [sp, #24]
 80125d0:	0949      	lsrs	r1, r1, #5
 80125d2:	7011      	strb	r1, [r2, #0]
 80125d4:	fab3 f383 	clz	r3, r3
 80125d8:	9a07      	ldr	r2, [sp, #28]
 80125da:	095b      	lsrs	r3, r3, #5
 80125dc:	2000      	movs	r0, #0
 80125de:	7013      	strb	r3, [r2, #0]
 80125e0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80125e2:	f44f 7061 	mov.w	r0, #900	@ 0x384
 80125e6:	4770      	bx	lr
 80125e8:	200b      	movs	r0, #11
 80125ea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080125ec <_execute_event_handler>:
 80125ec:	2002      	movs	r0, #2
 80125ee:	4770      	bx	lr

080125f0 <_cancel_goal_event_handler>:
 80125f0:	2003      	movs	r0, #3
 80125f2:	4770      	bx	lr

080125f4 <_succeed_event_handler>:
 80125f4:	2004      	movs	r0, #4
 80125f6:	4770      	bx	lr

080125f8 <_abort_event_handler>:
 80125f8:	2006      	movs	r0, #6
 80125fa:	4770      	bx	lr

080125fc <_canceled_event_handler>:
 80125fc:	2005      	movs	r0, #5
 80125fe:	4770      	bx	lr

08012600 <rcl_action_transition_goal_state>:
 8012600:	b2c2      	uxtb	r2, r0
 8012602:	2a06      	cmp	r2, #6
 8012604:	d80c      	bhi.n	8012620 <rcl_action_transition_goal_state+0x20>
 8012606:	2904      	cmp	r1, #4
 8012608:	d80a      	bhi.n	8012620 <rcl_action_transition_goal_state+0x20>
 801260a:	eb00 0280 	add.w	r2, r0, r0, lsl #2
 801260e:	b410      	push	{r4}
 8012610:	1853      	adds	r3, r2, r1
 8012612:	4c06      	ldr	r4, [pc, #24]	@ (801262c <rcl_action_transition_goal_state+0x2c>)
 8012614:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 8012618:	b123      	cbz	r3, 8012624 <rcl_action_transition_goal_state+0x24>
 801261a:	f85d 4b04 	ldr.w	r4, [sp], #4
 801261e:	4718      	bx	r3
 8012620:	2000      	movs	r0, #0
 8012622:	4770      	bx	lr
 8012624:	2000      	movs	r0, #0
 8012626:	f85d 4b04 	ldr.w	r4, [sp], #4
 801262a:	4770      	bx	lr
 801262c:	080173f4 	.word	0x080173f4

08012630 <rcl_action_get_zero_initialized_cancel_response>:
 8012630:	b510      	push	{r4, lr}
 8012632:	4c07      	ldr	r4, [pc, #28]	@ (8012650 <rcl_action_get_zero_initialized_cancel_response+0x20>)
 8012634:	4686      	mov	lr, r0
 8012636:	4684      	mov	ip, r0
 8012638:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801263a:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801263e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8012640:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8012644:	6823      	ldr	r3, [r4, #0]
 8012646:	f8cc 3000 	str.w	r3, [ip]
 801264a:	4670      	mov	r0, lr
 801264c:	bd10      	pop	{r4, pc}
 801264e:	bf00      	nop
 8012650:	08017480 	.word	0x08017480

08012654 <rclc_action_send_result_request>:
 8012654:	b1d0      	cbz	r0, 801268c <rclc_action_send_result_request+0x38>
 8012656:	b500      	push	{lr}
 8012658:	4684      	mov	ip, r0
 801265a:	b087      	sub	sp, #28
 801265c:	f8d0 0009 	ldr.w	r0, [r0, #9]
 8012660:	f8dc 100d 	ldr.w	r1, [ip, #13]
 8012664:	f8dc 2011 	ldr.w	r2, [ip, #17]
 8012668:	f8dc 3015 	ldr.w	r3, [ip, #21]
 801266c:	f10d 0e08 	add.w	lr, sp, #8
 8012670:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8012674:	f8dc 0004 	ldr.w	r0, [ip, #4]
 8012678:	f10c 0240 	add.w	r2, ip, #64	@ 0x40
 801267c:	a902      	add	r1, sp, #8
 801267e:	3010      	adds	r0, #16
 8012680:	f7ff fbda 	bl	8011e38 <rcl_action_send_result_request>
 8012684:	b920      	cbnz	r0, 8012690 <rclc_action_send_result_request+0x3c>
 8012686:	b007      	add	sp, #28
 8012688:	f85d fb04 	ldr.w	pc, [sp], #4
 801268c:	200b      	movs	r0, #11
 801268e:	4770      	bx	lr
 8012690:	9001      	str	r0, [sp, #4]
 8012692:	f7f7 fee5 	bl	800a460 <rcutils_reset_error>
 8012696:	9801      	ldr	r0, [sp, #4]
 8012698:	b007      	add	sp, #28
 801269a:	f85d fb04 	ldr.w	pc, [sp], #4
 801269e:	bf00      	nop

080126a0 <rclc_action_take_goal_handle>:
 80126a0:	b160      	cbz	r0, 80126bc <rclc_action_take_goal_handle+0x1c>
 80126a2:	6883      	ldr	r3, [r0, #8]
 80126a4:	b143      	cbz	r3, 80126b8 <rclc_action_take_goal_handle+0x18>
 80126a6:	6819      	ldr	r1, [r3, #0]
 80126a8:	6081      	str	r1, [r0, #8]
 80126aa:	2200      	movs	r2, #0
 80126ac:	721a      	strb	r2, [r3, #8]
 80126ae:	68c1      	ldr	r1, [r0, #12]
 80126b0:	6019      	str	r1, [r3, #0]
 80126b2:	621a      	str	r2, [r3, #32]
 80126b4:	849a      	strh	r2, [r3, #36]	@ 0x24
 80126b6:	60c3      	str	r3, [r0, #12]
 80126b8:	4618      	mov	r0, r3
 80126ba:	4770      	bx	lr
 80126bc:	4603      	mov	r3, r0
 80126be:	e7fb      	b.n	80126b8 <rclc_action_take_goal_handle+0x18>

080126c0 <rclc_action_remove_used_goal_handle>:
 80126c0:	b180      	cbz	r0, 80126e4 <rclc_action_remove_used_goal_handle+0x24>
 80126c2:	b179      	cbz	r1, 80126e4 <rclc_action_remove_used_goal_handle+0x24>
 80126c4:	68c3      	ldr	r3, [r0, #12]
 80126c6:	4299      	cmp	r1, r3
 80126c8:	d00d      	beq.n	80126e6 <rclc_action_remove_used_goal_handle+0x26>
 80126ca:	b12b      	cbz	r3, 80126d8 <rclc_action_remove_used_goal_handle+0x18>
 80126cc:	681a      	ldr	r2, [r3, #0]
 80126ce:	4291      	cmp	r1, r2
 80126d0:	d003      	beq.n	80126da <rclc_action_remove_used_goal_handle+0x1a>
 80126d2:	4613      	mov	r3, r2
 80126d4:	2b00      	cmp	r3, #0
 80126d6:	d1f9      	bne.n	80126cc <rclc_action_remove_used_goal_handle+0xc>
 80126d8:	4770      	bx	lr
 80126da:	680a      	ldr	r2, [r1, #0]
 80126dc:	601a      	str	r2, [r3, #0]
 80126de:	6883      	ldr	r3, [r0, #8]
 80126e0:	600b      	str	r3, [r1, #0]
 80126e2:	6081      	str	r1, [r0, #8]
 80126e4:	4770      	bx	lr
 80126e6:	680b      	ldr	r3, [r1, #0]
 80126e8:	60c3      	str	r3, [r0, #12]
 80126ea:	e7f8      	b.n	80126de <rclc_action_remove_used_goal_handle+0x1e>

080126ec <rclc_action_find_goal_handle_by_uuid>:
 80126ec:	b538      	push	{r3, r4, r5, lr}
 80126ee:	b180      	cbz	r0, 8012712 <rclc_action_find_goal_handle_by_uuid+0x26>
 80126f0:	460d      	mov	r5, r1
 80126f2:	b181      	cbz	r1, 8012716 <rclc_action_find_goal_handle_by_uuid+0x2a>
 80126f4:	68c4      	ldr	r4, [r0, #12]
 80126f6:	b914      	cbnz	r4, 80126fe <rclc_action_find_goal_handle_by_uuid+0x12>
 80126f8:	e009      	b.n	801270e <rclc_action_find_goal_handle_by_uuid+0x22>
 80126fa:	6824      	ldr	r4, [r4, #0]
 80126fc:	b13c      	cbz	r4, 801270e <rclc_action_find_goal_handle_by_uuid+0x22>
 80126fe:	f104 0009 	add.w	r0, r4, #9
 8012702:	2210      	movs	r2, #16
 8012704:	4629      	mov	r1, r5
 8012706:	f003 fa77 	bl	8015bf8 <memcmp>
 801270a:	2800      	cmp	r0, #0
 801270c:	d1f5      	bne.n	80126fa <rclc_action_find_goal_handle_by_uuid+0xe>
 801270e:	4620      	mov	r0, r4
 8012710:	bd38      	pop	{r3, r4, r5, pc}
 8012712:	4604      	mov	r4, r0
 8012714:	e7fb      	b.n	801270e <rclc_action_find_goal_handle_by_uuid+0x22>
 8012716:	460c      	mov	r4, r1
 8012718:	e7f9      	b.n	801270e <rclc_action_find_goal_handle_by_uuid+0x22>
 801271a:	bf00      	nop

0801271c <rclc_action_find_first_handle_by_status>:
 801271c:	b140      	cbz	r0, 8012730 <rclc_action_find_first_handle_by_status+0x14>
 801271e:	68c0      	ldr	r0, [r0, #12]
 8012720:	b910      	cbnz	r0, 8012728 <rclc_action_find_first_handle_by_status+0xc>
 8012722:	e005      	b.n	8012730 <rclc_action_find_first_handle_by_status+0x14>
 8012724:	6800      	ldr	r0, [r0, #0]
 8012726:	b118      	cbz	r0, 8012730 <rclc_action_find_first_handle_by_status+0x14>
 8012728:	f990 3008 	ldrsb.w	r3, [r0, #8]
 801272c:	428b      	cmp	r3, r1
 801272e:	d1f9      	bne.n	8012724 <rclc_action_find_first_handle_by_status+0x8>
 8012730:	4770      	bx	lr
 8012732:	bf00      	nop

08012734 <rclc_action_find_first_terminated_handle>:
 8012734:	b140      	cbz	r0, 8012748 <rclc_action_find_first_terminated_handle+0x14>
 8012736:	68c0      	ldr	r0, [r0, #12]
 8012738:	b910      	cbnz	r0, 8012740 <rclc_action_find_first_terminated_handle+0xc>
 801273a:	e005      	b.n	8012748 <rclc_action_find_first_terminated_handle+0x14>
 801273c:	6800      	ldr	r0, [r0, #0]
 801273e:	b118      	cbz	r0, 8012748 <rclc_action_find_first_terminated_handle+0x14>
 8012740:	f990 3008 	ldrsb.w	r3, [r0, #8]
 8012744:	2b03      	cmp	r3, #3
 8012746:	ddf9      	ble.n	801273c <rclc_action_find_first_terminated_handle+0x8>
 8012748:	4770      	bx	lr
 801274a:	bf00      	nop

0801274c <rclc_action_find_handle_by_goal_request_sequence_number>:
 801274c:	b170      	cbz	r0, 801276c <rclc_action_find_handle_by_goal_request_sequence_number+0x20>
 801274e:	68c0      	ldr	r0, [r0, #12]
 8012750:	b160      	cbz	r0, 801276c <rclc_action_find_handle_by_goal_request_sequence_number+0x20>
 8012752:	b410      	push	{r4}
 8012754:	e001      	b.n	801275a <rclc_action_find_handle_by_goal_request_sequence_number+0xe>
 8012756:	6800      	ldr	r0, [r0, #0]
 8012758:	b128      	cbz	r0, 8012766 <rclc_action_find_handle_by_goal_request_sequence_number+0x1a>
 801275a:	e9d0 410a 	ldrd	r4, r1, [r0, #40]	@ 0x28
 801275e:	4299      	cmp	r1, r3
 8012760:	bf08      	it	eq
 8012762:	4294      	cmpeq	r4, r2
 8012764:	d1f7      	bne.n	8012756 <rclc_action_find_handle_by_goal_request_sequence_number+0xa>
 8012766:	f85d 4b04 	ldr.w	r4, [sp], #4
 801276a:	4770      	bx	lr
 801276c:	4770      	bx	lr
 801276e:	bf00      	nop

08012770 <rclc_action_find_handle_by_result_request_sequence_number>:
 8012770:	b170      	cbz	r0, 8012790 <rclc_action_find_handle_by_result_request_sequence_number+0x20>
 8012772:	68c0      	ldr	r0, [r0, #12]
 8012774:	b160      	cbz	r0, 8012790 <rclc_action_find_handle_by_result_request_sequence_number+0x20>
 8012776:	b410      	push	{r4}
 8012778:	e001      	b.n	801277e <rclc_action_find_handle_by_result_request_sequence_number+0xe>
 801277a:	6800      	ldr	r0, [r0, #0]
 801277c:	b128      	cbz	r0, 801278a <rclc_action_find_handle_by_result_request_sequence_number+0x1a>
 801277e:	e9d0 4110 	ldrd	r4, r1, [r0, #64]	@ 0x40
 8012782:	4299      	cmp	r1, r3
 8012784:	bf08      	it	eq
 8012786:	4294      	cmpeq	r4, r2
 8012788:	d1f7      	bne.n	801277a <rclc_action_find_handle_by_result_request_sequence_number+0xa>
 801278a:	f85d 4b04 	ldr.w	r4, [sp], #4
 801278e:	4770      	bx	lr
 8012790:	4770      	bx	lr
 8012792:	bf00      	nop

08012794 <rclc_action_find_handle_by_cancel_request_sequence_number>:
 8012794:	b170      	cbz	r0, 80127b4 <rclc_action_find_handle_by_cancel_request_sequence_number+0x20>
 8012796:	68c0      	ldr	r0, [r0, #12]
 8012798:	b160      	cbz	r0, 80127b4 <rclc_action_find_handle_by_cancel_request_sequence_number+0x20>
 801279a:	b410      	push	{r4}
 801279c:	e001      	b.n	80127a2 <rclc_action_find_handle_by_cancel_request_sequence_number+0xe>
 801279e:	6800      	ldr	r0, [r0, #0]
 80127a0:	b128      	cbz	r0, 80127ae <rclc_action_find_handle_by_cancel_request_sequence_number+0x1a>
 80127a2:	e9d0 4116 	ldrd	r4, r1, [r0, #88]	@ 0x58
 80127a6:	4299      	cmp	r1, r3
 80127a8:	bf08      	it	eq
 80127aa:	4294      	cmpeq	r4, r2
 80127ac:	d1f7      	bne.n	801279e <rclc_action_find_handle_by_cancel_request_sequence_number+0xa>
 80127ae:	f85d 4b04 	ldr.w	r4, [sp], #4
 80127b2:	4770      	bx	lr
 80127b4:	4770      	bx	lr
 80127b6:	bf00      	nop

080127b8 <rclc_action_find_first_handle_with_goal_response>:
 80127b8:	b140      	cbz	r0, 80127cc <rclc_action_find_first_handle_with_goal_response+0x14>
 80127ba:	68c0      	ldr	r0, [r0, #12]
 80127bc:	b910      	cbnz	r0, 80127c4 <rclc_action_find_first_handle_with_goal_response+0xc>
 80127be:	e005      	b.n	80127cc <rclc_action_find_first_handle_with_goal_response+0x14>
 80127c0:	6800      	ldr	r0, [r0, #0]
 80127c2:	b118      	cbz	r0, 80127cc <rclc_action_find_first_handle_with_goal_response+0x14>
 80127c4:	f890 3020 	ldrb.w	r3, [r0, #32]
 80127c8:	2b00      	cmp	r3, #0
 80127ca:	d0f9      	beq.n	80127c0 <rclc_action_find_first_handle_with_goal_response+0x8>
 80127cc:	4770      	bx	lr
 80127ce:	bf00      	nop

080127d0 <rclc_action_find_first_handle_with_result_response>:
 80127d0:	b140      	cbz	r0, 80127e4 <rclc_action_find_first_handle_with_result_response+0x14>
 80127d2:	68c0      	ldr	r0, [r0, #12]
 80127d4:	b910      	cbnz	r0, 80127dc <rclc_action_find_first_handle_with_result_response+0xc>
 80127d6:	e005      	b.n	80127e4 <rclc_action_find_first_handle_with_result_response+0x14>
 80127d8:	6800      	ldr	r0, [r0, #0]
 80127da:	b118      	cbz	r0, 80127e4 <rclc_action_find_first_handle_with_result_response+0x14>
 80127dc:	f890 3023 	ldrb.w	r3, [r0, #35]	@ 0x23
 80127e0:	2b00      	cmp	r3, #0
 80127e2:	d0f9      	beq.n	80127d8 <rclc_action_find_first_handle_with_result_response+0x8>
 80127e4:	4770      	bx	lr
 80127e6:	bf00      	nop

080127e8 <rclc_action_server_response_goal_request>:
 80127e8:	b198      	cbz	r0, 8012812 <rclc_action_server_response_goal_request+0x2a>
 80127ea:	b510      	push	{r4, lr}
 80127ec:	6844      	ldr	r4, [r0, #4]
 80127ee:	b086      	sub	sp, #24
 80127f0:	2200      	movs	r2, #0
 80127f2:	e9cd 2203 	strd	r2, r2, [sp, #12]
 80127f6:	460b      	mov	r3, r1
 80127f8:	9205      	str	r2, [sp, #20]
 80127fa:	f100 0128 	add.w	r1, r0, #40	@ 0x28
 80127fe:	aa03      	add	r2, sp, #12
 8012800:	f104 0010 	add.w	r0, r4, #16
 8012804:	f88d 300c 	strb.w	r3, [sp, #12]
 8012808:	f7ff fd4a 	bl	80122a0 <rcl_action_send_goal_response>
 801280c:	b918      	cbnz	r0, 8012816 <rclc_action_server_response_goal_request+0x2e>
 801280e:	b006      	add	sp, #24
 8012810:	bd10      	pop	{r4, pc}
 8012812:	200b      	movs	r0, #11
 8012814:	4770      	bx	lr
 8012816:	9001      	str	r0, [sp, #4]
 8012818:	f7f7 fe22 	bl	800a460 <rcutils_reset_error>
 801281c:	9801      	ldr	r0, [sp, #4]
 801281e:	b006      	add	sp, #24
 8012820:	bd10      	pop	{r4, pc}
 8012822:	bf00      	nop
 8012824:	0000      	movs	r0, r0
	...

08012828 <rclc_action_server_goal_cancel_accept>:
 8012828:	b310      	cbz	r0, 8012870 <rclc_action_server_goal_cancel_accept+0x48>
 801282a:	b510      	push	{r4, lr}
 801282c:	b090      	sub	sp, #64	@ 0x40
 801282e:	4604      	mov	r4, r0
 8012830:	a806      	add	r0, sp, #24
 8012832:	f7ff fefd 	bl	8012630 <rcl_action_get_zero_initialized_cancel_response>
 8012836:	2300      	movs	r3, #0
 8012838:	f8d4 0009 	ldr.w	r0, [r4, #9]
 801283c:	f8d4 100d 	ldr.w	r1, [r4, #13]
 8012840:	f8d4 2011 	ldr.w	r2, [r4, #17]
 8012844:	f88d 3018 	strb.w	r3, [sp, #24]
 8012848:	f8d4 3015 	ldr.w	r3, [r4, #21]
 801284c:	f8cd d01c 	str.w	sp, [sp, #28]
 8012850:	46ec      	mov	ip, sp
 8012852:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8012856:	ed9f 7b08 	vldr	d7, [pc, #32]	@ 8012878 <rclc_action_server_goal_cancel_accept+0x50>
 801285a:	6860      	ldr	r0, [r4, #4]
 801285c:	aa06      	add	r2, sp, #24
 801285e:	f104 0158 	add.w	r1, r4, #88	@ 0x58
 8012862:	3010      	adds	r0, #16
 8012864:	ed8d 7b08 	vstr	d7, [sp, #32]
 8012868:	f7ff fdd2 	bl	8012410 <rcl_action_send_cancel_response>
 801286c:	b010      	add	sp, #64	@ 0x40
 801286e:	bd10      	pop	{r4, pc}
 8012870:	200b      	movs	r0, #11
 8012872:	4770      	bx	lr
 8012874:	f3af 8000 	nop.w
 8012878:	00000001 	.word	0x00000001
 801287c:	00000001 	.word	0x00000001

08012880 <rclc_action_server_goal_cancel_reject>:
 8012880:	b082      	sub	sp, #8
 8012882:	b530      	push	{r4, r5, lr}
 8012884:	b08b      	sub	sp, #44	@ 0x2c
 8012886:	ac0e      	add	r4, sp, #56	@ 0x38
 8012888:	e884 000c 	stmia.w	r4, {r2, r3}
 801288c:	b188      	cbz	r0, 80128b2 <rclc_action_server_goal_cancel_reject+0x32>
 801288e:	4604      	mov	r4, r0
 8012890:	a801      	add	r0, sp, #4
 8012892:	460d      	mov	r5, r1
 8012894:	f7ff fecc 	bl	8012630 <rcl_action_get_zero_initialized_cancel_response>
 8012898:	aa01      	add	r2, sp, #4
 801289a:	a90e      	add	r1, sp, #56	@ 0x38
 801289c:	f104 0010 	add.w	r0, r4, #16
 80128a0:	f88d 5004 	strb.w	r5, [sp, #4]
 80128a4:	f7ff fdb4 	bl	8012410 <rcl_action_send_cancel_response>
 80128a8:	b00b      	add	sp, #44	@ 0x2c
 80128aa:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80128ae:	b002      	add	sp, #8
 80128b0:	4770      	bx	lr
 80128b2:	200b      	movs	r0, #11
 80128b4:	b00b      	add	sp, #44	@ 0x2c
 80128b6:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80128ba:	b002      	add	sp, #8
 80128bc:	4770      	bx	lr
 80128be:	bf00      	nop

080128c0 <__atomic_load_8>:
 80128c0:	ea80 4110 	eor.w	r1, r0, r0, lsr #16
 80128c4:	f081 013d 	eor.w	r1, r1, #61	@ 0x3d
 80128c8:	4a15      	ldr	r2, [pc, #84]	@ (8012920 <__atomic_load_8+0x60>)
 80128ca:	4b16      	ldr	r3, [pc, #88]	@ (8012924 <__atomic_load_8+0x64>)
 80128cc:	eb01 01c1 	add.w	r1, r1, r1, lsl #3
 80128d0:	ea81 1111 	eor.w	r1, r1, r1, lsr #4
 80128d4:	fb02 f101 	mul.w	r1, r2, r1
 80128d8:	ea81 31d1 	eor.w	r1, r1, r1, lsr #15
 80128dc:	fba3 2301 	umull	r2, r3, r3, r1
 80128e0:	091b      	lsrs	r3, r3, #4
 80128e2:	eb03 0243 	add.w	r2, r3, r3, lsl #1
 80128e6:	ebc3 03c2 	rsb	r3, r3, r2, lsl #3
 80128ea:	b4d0      	push	{r4, r6, r7}
 80128ec:	4c0e      	ldr	r4, [pc, #56]	@ (8012928 <__atomic_load_8+0x68>)
 80128ee:	1ac9      	subs	r1, r1, r3
 80128f0:	1862      	adds	r2, r4, r1
 80128f2:	f04f 0c01 	mov.w	ip, #1
 80128f6:	e8d2 3f4f 	ldrexb	r3, [r2]
 80128fa:	e8c2 cf46 	strexb	r6, ip, [r2]
 80128fe:	2e00      	cmp	r6, #0
 8012900:	d1f9      	bne.n	80128f6 <__atomic_load_8+0x36>
 8012902:	f3bf 8f5b 	dmb	ish
 8012906:	b2db      	uxtb	r3, r3
 8012908:	2b00      	cmp	r3, #0
 801290a:	d1f4      	bne.n	80128f6 <__atomic_load_8+0x36>
 801290c:	e9d0 6700 	ldrd	r6, r7, [r0]
 8012910:	f3bf 8f5b 	dmb	ish
 8012914:	5463      	strb	r3, [r4, r1]
 8012916:	4630      	mov	r0, r6
 8012918:	4639      	mov	r1, r7
 801291a:	bcd0      	pop	{r4, r6, r7}
 801291c:	4770      	bx	lr
 801291e:	bf00      	nop
 8012920:	27d4eb2d 	.word	0x27d4eb2d
 8012924:	b21642c9 	.word	0xb21642c9
 8012928:	2000dc10 	.word	0x2000dc10

0801292c <__atomic_store_8>:
 801292c:	ea80 4110 	eor.w	r1, r0, r0, lsr #16
 8012930:	f081 013d 	eor.w	r1, r1, #61	@ 0x3d
 8012934:	b570      	push	{r4, r5, r6, lr}
 8012936:	eb01 01c1 	add.w	r1, r1, r1, lsl #3
 801293a:	4c14      	ldr	r4, [pc, #80]	@ (801298c <__atomic_store_8+0x60>)
 801293c:	4d14      	ldr	r5, [pc, #80]	@ (8012990 <__atomic_store_8+0x64>)
 801293e:	ea81 1111 	eor.w	r1, r1, r1, lsr #4
 8012942:	fb04 f101 	mul.w	r1, r4, r1
 8012946:	4c13      	ldr	r4, [pc, #76]	@ (8012994 <__atomic_store_8+0x68>)
 8012948:	ea81 31d1 	eor.w	r1, r1, r1, lsr #15
 801294c:	fba4 4e01 	umull	r4, lr, r4, r1
 8012950:	ea4f 1e1e 	mov.w	lr, lr, lsr #4
 8012954:	eb0e 044e 	add.w	r4, lr, lr, lsl #1
 8012958:	ebce 0ec4 	rsb	lr, lr, r4, lsl #3
 801295c:	eba1 0e0e 	sub.w	lr, r1, lr
 8012960:	eb05 0c0e 	add.w	ip, r5, lr
 8012964:	f04f 0401 	mov.w	r4, #1
 8012968:	e8dc 1f4f 	ldrexb	r1, [ip]
 801296c:	e8cc 4f46 	strexb	r6, r4, [ip]
 8012970:	2e00      	cmp	r6, #0
 8012972:	d1f9      	bne.n	8012968 <__atomic_store_8+0x3c>
 8012974:	f3bf 8f5b 	dmb	ish
 8012978:	b2c9      	uxtb	r1, r1
 801297a:	2900      	cmp	r1, #0
 801297c:	d1f4      	bne.n	8012968 <__atomic_store_8+0x3c>
 801297e:	e9c0 2300 	strd	r2, r3, [r0]
 8012982:	f3bf 8f5b 	dmb	ish
 8012986:	f805 100e 	strb.w	r1, [r5, lr]
 801298a:	bd70      	pop	{r4, r5, r6, pc}
 801298c:	27d4eb2d 	.word	0x27d4eb2d
 8012990:	2000dc10 	.word	0x2000dc10
 8012994:	b21642c9 	.word	0xb21642c9

08012998 <__atomic_exchange_8>:
 8012998:	ea80 4c10 	eor.w	ip, r0, r0, lsr #16
 801299c:	f08c 0c3d 	eor.w	ip, ip, #61	@ 0x3d
 80129a0:	4916      	ldr	r1, [pc, #88]	@ (80129fc <__atomic_exchange_8+0x64>)
 80129a2:	eb0c 0ccc 	add.w	ip, ip, ip, lsl #3
 80129a6:	ea8c 1c1c 	eor.w	ip, ip, ip, lsr #4
 80129aa:	fb01 fc0c 	mul.w	ip, r1, ip
 80129ae:	4914      	ldr	r1, [pc, #80]	@ (8012a00 <__atomic_exchange_8+0x68>)
 80129b0:	ea8c 3cdc 	eor.w	ip, ip, ip, lsr #15
 80129b4:	b570      	push	{r4, r5, r6, lr}
 80129b6:	4605      	mov	r5, r0
 80129b8:	fba1 010c 	umull	r0, r1, r1, ip
 80129bc:	0909      	lsrs	r1, r1, #4
 80129be:	eb01 0041 	add.w	r0, r1, r1, lsl #1
 80129c2:	ebc1 01c0 	rsb	r1, r1, r0, lsl #3
 80129c6:	4e0f      	ldr	r6, [pc, #60]	@ (8012a04 <__atomic_exchange_8+0x6c>)
 80129c8:	ebac 0c01 	sub.w	ip, ip, r1
 80129cc:	eb06 010c 	add.w	r1, r6, ip
 80129d0:	f04f 0e01 	mov.w	lr, #1
 80129d4:	e8d1 4f4f 	ldrexb	r4, [r1]
 80129d8:	e8c1 ef40 	strexb	r0, lr, [r1]
 80129dc:	2800      	cmp	r0, #0
 80129de:	d1f9      	bne.n	80129d4 <__atomic_exchange_8+0x3c>
 80129e0:	f3bf 8f5b 	dmb	ish
 80129e4:	b2e4      	uxtb	r4, r4
 80129e6:	2c00      	cmp	r4, #0
 80129e8:	d1f4      	bne.n	80129d4 <__atomic_exchange_8+0x3c>
 80129ea:	e9d5 0100 	ldrd	r0, r1, [r5]
 80129ee:	e9c5 2300 	strd	r2, r3, [r5]
 80129f2:	f3bf 8f5b 	dmb	ish
 80129f6:	f806 400c 	strb.w	r4, [r6, ip]
 80129fa:	bd70      	pop	{r4, r5, r6, pc}
 80129fc:	27d4eb2d 	.word	0x27d4eb2d
 8012a00:	b21642c9 	.word	0xb21642c9
 8012a04:	2000dc10 	.word	0x2000dc10

08012a08 <rcutils_get_env>:
 8012a08:	b168      	cbz	r0, 8012a26 <rcutils_get_env+0x1e>
 8012a0a:	b510      	push	{r4, lr}
 8012a0c:	460c      	mov	r4, r1
 8012a0e:	b129      	cbz	r1, 8012a1c <rcutils_get_env+0x14>
 8012a10:	f002 fcac 	bl	801536c <getenv>
 8012a14:	b120      	cbz	r0, 8012a20 <rcutils_get_env+0x18>
 8012a16:	6020      	str	r0, [r4, #0]
 8012a18:	2000      	movs	r0, #0
 8012a1a:	bd10      	pop	{r4, pc}
 8012a1c:	4803      	ldr	r0, [pc, #12]	@ (8012a2c <rcutils_get_env+0x24>)
 8012a1e:	bd10      	pop	{r4, pc}
 8012a20:	4b03      	ldr	r3, [pc, #12]	@ (8012a30 <rcutils_get_env+0x28>)
 8012a22:	6023      	str	r3, [r4, #0]
 8012a24:	bd10      	pop	{r4, pc}
 8012a26:	4803      	ldr	r0, [pc, #12]	@ (8012a34 <rcutils_get_env+0x2c>)
 8012a28:	4770      	bx	lr
 8012a2a:	bf00      	nop
 8012a2c:	080174c0 	.word	0x080174c0
 8012a30:	080175e4 	.word	0x080175e4
 8012a34:	080174a4 	.word	0x080174a4

08012a38 <rcutils_is_directory>:
 8012a38:	2000      	movs	r0, #0
 8012a3a:	4770      	bx	lr

08012a3c <rcutils_join_path>:
 8012a3c:	b082      	sub	sp, #8
 8012a3e:	e88d 000c 	stmia.w	sp, {r2, r3}
 8012a42:	2000      	movs	r0, #0
 8012a44:	b002      	add	sp, #8
 8012a46:	4770      	bx	lr

08012a48 <rcutils_to_native_path>:
 8012a48:	b084      	sub	sp, #16
 8012a4a:	a801      	add	r0, sp, #4
 8012a4c:	e880 000e 	stmia.w	r0, {r1, r2, r3}
 8012a50:	b004      	add	sp, #16
 8012a52:	2000      	movs	r0, #0
 8012a54:	4770      	bx	lr
 8012a56:	bf00      	nop

08012a58 <rcutils_format_string_limit>:
 8012a58:	b40f      	push	{r0, r1, r2, r3}
 8012a5a:	b5f0      	push	{r4, r5, r6, r7, lr}
 8012a5c:	b083      	sub	sp, #12
 8012a5e:	ac08      	add	r4, sp, #32
 8012a60:	9e0e      	ldr	r6, [sp, #56]	@ 0x38
 8012a62:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8012a66:	b34e      	cbz	r6, 8012abc <rcutils_format_string_limit+0x64>
 8012a68:	a808      	add	r0, sp, #32
 8012a6a:	f7f7 fcd3 	bl	800a414 <rcutils_allocator_is_valid>
 8012a6e:	b328      	cbz	r0, 8012abc <rcutils_format_string_limit+0x64>
 8012a70:	2100      	movs	r1, #0
 8012a72:	ab0f      	add	r3, sp, #60	@ 0x3c
 8012a74:	4632      	mov	r2, r6
 8012a76:	4608      	mov	r0, r1
 8012a78:	e9cd 3300 	strd	r3, r3, [sp]
 8012a7c:	f000 f8f4 	bl	8012c68 <rcutils_vsnprintf>
 8012a80:	1c43      	adds	r3, r0, #1
 8012a82:	4605      	mov	r5, r0
 8012a84:	d01a      	beq.n	8012abc <rcutils_format_string_limit+0x64>
 8012a86:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8012a88:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8012a8a:	1c47      	adds	r7, r0, #1
 8012a8c:	429f      	cmp	r7, r3
 8012a8e:	bf84      	itt	hi
 8012a90:	461f      	movhi	r7, r3
 8012a92:	f103 35ff 	addhi.w	r5, r3, #4294967295	@ 0xffffffff
 8012a96:	4638      	mov	r0, r7
 8012a98:	9b08      	ldr	r3, [sp, #32]
 8012a9a:	4798      	blx	r3
 8012a9c:	4604      	mov	r4, r0
 8012a9e:	b168      	cbz	r0, 8012abc <rcutils_format_string_limit+0x64>
 8012aa0:	9b01      	ldr	r3, [sp, #4]
 8012aa2:	4632      	mov	r2, r6
 8012aa4:	4639      	mov	r1, r7
 8012aa6:	f000 f8df 	bl	8012c68 <rcutils_vsnprintf>
 8012aaa:	2800      	cmp	r0, #0
 8012aac:	db02      	blt.n	8012ab4 <rcutils_format_string_limit+0x5c>
 8012aae:	2300      	movs	r3, #0
 8012ab0:	5563      	strb	r3, [r4, r5]
 8012ab2:	e004      	b.n	8012abe <rcutils_format_string_limit+0x66>
 8012ab4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8012ab6:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8012ab8:	4620      	mov	r0, r4
 8012aba:	4798      	blx	r3
 8012abc:	2400      	movs	r4, #0
 8012abe:	4620      	mov	r0, r4
 8012ac0:	b003      	add	sp, #12
 8012ac2:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8012ac6:	b004      	add	sp, #16
 8012ac8:	4770      	bx	lr
 8012aca:	bf00      	nop

08012acc <rcutils_repl_str>:
 8012acc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012ad0:	ed2d 8b02 	vpush	{d8}
 8012ad4:	b087      	sub	sp, #28
 8012ad6:	4680      	mov	r8, r0
 8012ad8:	4608      	mov	r0, r1
 8012ada:	f8cd 8004 	str.w	r8, [sp, #4]
 8012ade:	ee08 2a10 	vmov	s16, r2
 8012ae2:	468a      	mov	sl, r1
 8012ae4:	4699      	mov	r9, r3
 8012ae6:	f7ed fb85 	bl	80001f4 <strlen>
 8012aea:	2600      	movs	r6, #0
 8012aec:	4647      	mov	r7, r8
 8012aee:	9002      	str	r0, [sp, #8]
 8012af0:	46b3      	mov	fp, r6
 8012af2:	2510      	movs	r5, #16
 8012af4:	46b0      	mov	r8, r6
 8012af6:	e01d      	b.n	8012b34 <rcutils_repl_str+0x68>
 8012af8:	f10b 0b01 	add.w	fp, fp, #1
 8012afc:	455e      	cmp	r6, fp
 8012afe:	d211      	bcs.n	8012b24 <rcutils_repl_str+0x58>
 8012b00:	442e      	add	r6, r5
 8012b02:	f8d9 3008 	ldr.w	r3, [r9, #8]
 8012b06:	f8d9 2010 	ldr.w	r2, [r9, #16]
 8012b0a:	00b1      	lsls	r1, r6, #2
 8012b0c:	4798      	blx	r3
 8012b0e:	2800      	cmp	r0, #0
 8012b10:	f000 8088 	beq.w	8012c24 <rcutils_repl_str+0x158>
 8012b14:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8012b18:	f5b5 1f80 	cmp.w	r5, #1048576	@ 0x100000
 8012b1c:	4680      	mov	r8, r0
 8012b1e:	bf28      	it	cs
 8012b20:	f44f 1580 	movcs.w	r5, #1048576	@ 0x100000
 8012b24:	9a01      	ldr	r2, [sp, #4]
 8012b26:	eb08 038b 	add.w	r3, r8, fp, lsl #2
 8012b2a:	1aa2      	subs	r2, r4, r2
 8012b2c:	f843 2c04 	str.w	r2, [r3, #-4]
 8012b30:	9b02      	ldr	r3, [sp, #8]
 8012b32:	18e7      	adds	r7, r4, r3
 8012b34:	4651      	mov	r1, sl
 8012b36:	4638      	mov	r0, r7
 8012b38:	f003 f8af 	bl	8015c9a <strstr>
 8012b3c:	4604      	mov	r4, r0
 8012b3e:	4640      	mov	r0, r8
 8012b40:	2c00      	cmp	r4, #0
 8012b42:	d1d9      	bne.n	8012af8 <rcutils_repl_str+0x2c>
 8012b44:	46b8      	mov	r8, r7
 8012b46:	4607      	mov	r7, r0
 8012b48:	4640      	mov	r0, r8
 8012b4a:	f7ed fb53 	bl	80001f4 <strlen>
 8012b4e:	9b01      	ldr	r3, [sp, #4]
 8012b50:	eba8 0303 	sub.w	r3, r8, r3
 8012b54:	181c      	adds	r4, r3, r0
 8012b56:	9404      	str	r4, [sp, #16]
 8012b58:	f1bb 0f00 	cmp.w	fp, #0
 8012b5c:	d04a      	beq.n	8012bf4 <rcutils_repl_str+0x128>
 8012b5e:	ee18 0a10 	vmov	r0, s16
 8012b62:	f7ed fb47 	bl	80001f4 <strlen>
 8012b66:	9b02      	ldr	r3, [sp, #8]
 8012b68:	f8d9 1010 	ldr.w	r1, [r9, #16]
 8012b6c:	1ac3      	subs	r3, r0, r3
 8012b6e:	fb0b 4303 	mla	r3, fp, r3, r4
 8012b72:	461a      	mov	r2, r3
 8012b74:	9305      	str	r3, [sp, #20]
 8012b76:	4606      	mov	r6, r0
 8012b78:	f8d9 3000 	ldr.w	r3, [r9]
 8012b7c:	1c50      	adds	r0, r2, #1
 8012b7e:	4798      	blx	r3
 8012b80:	9003      	str	r0, [sp, #12]
 8012b82:	2800      	cmp	r0, #0
 8012b84:	d04f      	beq.n	8012c26 <rcutils_repl_str+0x15a>
 8012b86:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8012b8a:	683a      	ldr	r2, [r7, #0]
 8012b8c:	4641      	mov	r1, r8
 8012b8e:	f003 f926 	bl	8015dde <memcpy>
 8012b92:	683d      	ldr	r5, [r7, #0]
 8012b94:	9b03      	ldr	r3, [sp, #12]
 8012b96:	9701      	str	r7, [sp, #4]
 8012b98:	46ba      	mov	sl, r7
 8012b9a:	441d      	add	r5, r3
 8012b9c:	9f02      	ldr	r7, [sp, #8]
 8012b9e:	f8cd 9008 	str.w	r9, [sp, #8]
 8012ba2:	2401      	movs	r4, #1
 8012ba4:	46d1      	mov	r9, sl
 8012ba6:	ee18 aa10 	vmov	sl, s16
 8012baa:	e00a      	b.n	8012bc2 <rcutils_repl_str+0xf6>
 8012bac:	f8d9 5000 	ldr.w	r5, [r9]
 8012bb0:	1aaa      	subs	r2, r5, r2
 8012bb2:	1885      	adds	r5, r0, r2
 8012bb4:	f003 f913 	bl	8015dde <memcpy>
 8012bb8:	45a3      	cmp	fp, r4
 8012bba:	f104 0201 	add.w	r2, r4, #1
 8012bbe:	d935      	bls.n	8012c2c <rcutils_repl_str+0x160>
 8012bc0:	4614      	mov	r4, r2
 8012bc2:	4632      	mov	r2, r6
 8012bc4:	4651      	mov	r1, sl
 8012bc6:	4628      	mov	r0, r5
 8012bc8:	f003 f909 	bl	8015dde <memcpy>
 8012bcc:	f859 2b04 	ldr.w	r2, [r9], #4
 8012bd0:	45a3      	cmp	fp, r4
 8012bd2:	443a      	add	r2, r7
 8012bd4:	eb05 0006 	add.w	r0, r5, r6
 8012bd8:	eb08 0102 	add.w	r1, r8, r2
 8012bdc:	d1e6      	bne.n	8012bac <rcutils_repl_str+0xe0>
 8012bde:	9b04      	ldr	r3, [sp, #16]
 8012be0:	1a9a      	subs	r2, r3, r2
 8012be2:	e9dd 7901 	ldrd	r7, r9, [sp, #4]
 8012be6:	f003 f8fa 	bl	8015dde <memcpy>
 8012bea:	9a03      	ldr	r2, [sp, #12]
 8012bec:	9905      	ldr	r1, [sp, #20]
 8012bee:	2300      	movs	r3, #0
 8012bf0:	5453      	strb	r3, [r2, r1]
 8012bf2:	e00b      	b.n	8012c0c <rcutils_repl_str+0x140>
 8012bf4:	4620      	mov	r0, r4
 8012bf6:	f8d9 3000 	ldr.w	r3, [r9]
 8012bfa:	f8d9 1010 	ldr.w	r1, [r9, #16]
 8012bfe:	3001      	adds	r0, #1
 8012c00:	4798      	blx	r3
 8012c02:	9003      	str	r0, [sp, #12]
 8012c04:	b110      	cbz	r0, 8012c0c <rcutils_repl_str+0x140>
 8012c06:	9901      	ldr	r1, [sp, #4]
 8012c08:	f003 f8e1 	bl	8015dce <strcpy>
 8012c0c:	4638      	mov	r0, r7
 8012c0e:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8012c12:	f8d9 1010 	ldr.w	r1, [r9, #16]
 8012c16:	4798      	blx	r3
 8012c18:	9803      	ldr	r0, [sp, #12]
 8012c1a:	b007      	add	sp, #28
 8012c1c:	ecbd 8b02 	vpop	{d8}
 8012c20:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012c24:	4647      	mov	r7, r8
 8012c26:	2300      	movs	r3, #0
 8012c28:	9303      	str	r3, [sp, #12]
 8012c2a:	e7ef      	b.n	8012c0c <rcutils_repl_str+0x140>
 8012c2c:	e9dd 7901 	ldrd	r7, r9, [sp, #4]
 8012c30:	e7db      	b.n	8012bea <rcutils_repl_str+0x11e>
 8012c32:	bf00      	nop

08012c34 <rcutils_snprintf>:
 8012c34:	b40c      	push	{r2, r3}
 8012c36:	b530      	push	{r4, r5, lr}
 8012c38:	b083      	sub	sp, #12
 8012c3a:	ab06      	add	r3, sp, #24
 8012c3c:	f853 2b04 	ldr.w	r2, [r3], #4
 8012c40:	9301      	str	r3, [sp, #4]
 8012c42:	b152      	cbz	r2, 8012c5a <rcutils_snprintf+0x26>
 8012c44:	b138      	cbz	r0, 8012c56 <rcutils_snprintf+0x22>
 8012c46:	b141      	cbz	r1, 8012c5a <rcutils_snprintf+0x26>
 8012c48:	f002 ffc8 	bl	8015bdc <vsniprintf>
 8012c4c:	b003      	add	sp, #12
 8012c4e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8012c52:	b002      	add	sp, #8
 8012c54:	4770      	bx	lr
 8012c56:	2900      	cmp	r1, #0
 8012c58:	d0f6      	beq.n	8012c48 <rcutils_snprintf+0x14>
 8012c5a:	f003 f88b 	bl	8015d74 <__errno>
 8012c5e:	2316      	movs	r3, #22
 8012c60:	6003      	str	r3, [r0, #0]
 8012c62:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8012c66:	e7f1      	b.n	8012c4c <rcutils_snprintf+0x18>

08012c68 <rcutils_vsnprintf>:
 8012c68:	b570      	push	{r4, r5, r6, lr}
 8012c6a:	b13a      	cbz	r2, 8012c7c <rcutils_vsnprintf+0x14>
 8012c6c:	b120      	cbz	r0, 8012c78 <rcutils_vsnprintf+0x10>
 8012c6e:	b129      	cbz	r1, 8012c7c <rcutils_vsnprintf+0x14>
 8012c70:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8012c74:	f002 bfb2 	b.w	8015bdc <vsniprintf>
 8012c78:	2900      	cmp	r1, #0
 8012c7a:	d0f9      	beq.n	8012c70 <rcutils_vsnprintf+0x8>
 8012c7c:	f003 f87a 	bl	8015d74 <__errno>
 8012c80:	2316      	movs	r3, #22
 8012c82:	6003      	str	r3, [r0, #0]
 8012c84:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8012c88:	bd70      	pop	{r4, r5, r6, pc}
 8012c8a:	bf00      	nop

08012c8c <rcutils_strdup>:
 8012c8c:	b084      	sub	sp, #16
 8012c8e:	b570      	push	{r4, r5, r6, lr}
 8012c90:	b082      	sub	sp, #8
 8012c92:	ac07      	add	r4, sp, #28
 8012c94:	e884 000e 	stmia.w	r4, {r1, r2, r3}
 8012c98:	4605      	mov	r5, r0
 8012c9a:	b1b0      	cbz	r0, 8012cca <rcutils_strdup+0x3e>
 8012c9c:	f7ed faaa 	bl	80001f4 <strlen>
 8012ca0:	1c42      	adds	r2, r0, #1
 8012ca2:	9b07      	ldr	r3, [sp, #28]
 8012ca4:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8012ca6:	9201      	str	r2, [sp, #4]
 8012ca8:	4606      	mov	r6, r0
 8012caa:	4610      	mov	r0, r2
 8012cac:	4798      	blx	r3
 8012cae:	4604      	mov	r4, r0
 8012cb0:	b128      	cbz	r0, 8012cbe <rcutils_strdup+0x32>
 8012cb2:	9a01      	ldr	r2, [sp, #4]
 8012cb4:	4629      	mov	r1, r5
 8012cb6:	f003 f892 	bl	8015dde <memcpy>
 8012cba:	2300      	movs	r3, #0
 8012cbc:	55a3      	strb	r3, [r4, r6]
 8012cbe:	4620      	mov	r0, r4
 8012cc0:	b002      	add	sp, #8
 8012cc2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8012cc6:	b004      	add	sp, #16
 8012cc8:	4770      	bx	lr
 8012cca:	4604      	mov	r4, r0
 8012ccc:	e7f7      	b.n	8012cbe <rcutils_strdup+0x32>
 8012cce:	bf00      	nop

08012cd0 <rcutils_strndup>:
 8012cd0:	b082      	sub	sp, #8
 8012cd2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012cd4:	ac06      	add	r4, sp, #24
 8012cd6:	e884 000c 	stmia.w	r4, {r2, r3}
 8012cda:	4605      	mov	r5, r0
 8012cdc:	b188      	cbz	r0, 8012d02 <rcutils_strndup+0x32>
 8012cde:	1c4f      	adds	r7, r1, #1
 8012ce0:	460e      	mov	r6, r1
 8012ce2:	4638      	mov	r0, r7
 8012ce4:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8012ce6:	4790      	blx	r2
 8012ce8:	4604      	mov	r4, r0
 8012cea:	b128      	cbz	r0, 8012cf8 <rcutils_strndup+0x28>
 8012cec:	463a      	mov	r2, r7
 8012cee:	4629      	mov	r1, r5
 8012cf0:	f003 f875 	bl	8015dde <memcpy>
 8012cf4:	2300      	movs	r3, #0
 8012cf6:	55a3      	strb	r3, [r4, r6]
 8012cf8:	4620      	mov	r0, r4
 8012cfa:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8012cfe:	b002      	add	sp, #8
 8012d00:	4770      	bx	lr
 8012d02:	4604      	mov	r4, r0
 8012d04:	e7f8      	b.n	8012cf8 <rcutils_strndup+0x28>
 8012d06:	bf00      	nop

08012d08 <rcutils_get_zero_initialized_string_map>:
 8012d08:	4b01      	ldr	r3, [pc, #4]	@ (8012d10 <rcutils_get_zero_initialized_string_map+0x8>)
 8012d0a:	2000      	movs	r0, #0
 8012d0c:	6018      	str	r0, [r3, #0]
 8012d0e:	4770      	bx	lr
 8012d10:	2000dc28 	.word	0x2000dc28

08012d14 <rcutils_string_map_reserve>:
 8012d14:	2800      	cmp	r0, #0
 8012d16:	d05f      	beq.n	8012dd8 <rcutils_string_map_reserve+0xc4>
 8012d18:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012d1c:	460c      	mov	r4, r1
 8012d1e:	6801      	ldr	r1, [r0, #0]
 8012d20:	b082      	sub	sp, #8
 8012d22:	4605      	mov	r5, r0
 8012d24:	b129      	cbz	r1, 8012d32 <rcutils_string_map_reserve+0x1e>
 8012d26:	68cb      	ldr	r3, [r1, #12]
 8012d28:	42a3      	cmp	r3, r4
 8012d2a:	d906      	bls.n	8012d3a <rcutils_string_map_reserve+0x26>
 8012d2c:	461c      	mov	r4, r3
 8012d2e:	2900      	cmp	r1, #0
 8012d30:	d1f9      	bne.n	8012d26 <rcutils_string_map_reserve+0x12>
 8012d32:	201f      	movs	r0, #31
 8012d34:	b002      	add	sp, #8
 8012d36:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012d3a:	688b      	ldr	r3, [r1, #8]
 8012d3c:	42a3      	cmp	r3, r4
 8012d3e:	d047      	beq.n	8012dd0 <rcutils_string_map_reserve+0xbc>
 8012d40:	6a0e      	ldr	r6, [r1, #32]
 8012d42:	2c00      	cmp	r4, #0
 8012d44:	d034      	beq.n	8012db0 <rcutils_string_map_reserve+0x9c>
 8012d46:	f1b4 4f80 	cmp.w	r4, #1073741824	@ 0x40000000
 8012d4a:	d243      	bcs.n	8012dd4 <rcutils_string_map_reserve+0xc0>
 8012d4c:	00a7      	lsls	r7, r4, #2
 8012d4e:	f8d1 8018 	ldr.w	r8, [r1, #24]
 8012d52:	6808      	ldr	r0, [r1, #0]
 8012d54:	4632      	mov	r2, r6
 8012d56:	4639      	mov	r1, r7
 8012d58:	47c0      	blx	r8
 8012d5a:	2800      	cmp	r0, #0
 8012d5c:	d03a      	beq.n	8012dd4 <rcutils_string_map_reserve+0xc0>
 8012d5e:	682b      	ldr	r3, [r5, #0]
 8012d60:	4632      	mov	r2, r6
 8012d62:	6018      	str	r0, [r3, #0]
 8012d64:	4639      	mov	r1, r7
 8012d66:	6858      	ldr	r0, [r3, #4]
 8012d68:	47c0      	blx	r8
 8012d6a:	2800      	cmp	r0, #0
 8012d6c:	d032      	beq.n	8012dd4 <rcutils_string_map_reserve+0xc0>
 8012d6e:	682d      	ldr	r5, [r5, #0]
 8012d70:	68ab      	ldr	r3, [r5, #8]
 8012d72:	6068      	str	r0, [r5, #4]
 8012d74:	42a3      	cmp	r3, r4
 8012d76:	d226      	bcs.n	8012dc6 <rcutils_string_map_reserve+0xb2>
 8012d78:	682a      	ldr	r2, [r5, #0]
 8012d7a:	eb00 0c07 	add.w	ip, r0, r7
 8012d7e:	eb02 0e83 	add.w	lr, r2, r3, lsl #2
 8012d82:	45e6      	cmp	lr, ip
 8012d84:	ea4f 0183 	mov.w	r1, r3, lsl #2
 8012d88:	eb00 0683 	add.w	r6, r0, r3, lsl #2
 8012d8c:	d203      	bcs.n	8012d96 <rcutils_string_map_reserve+0x82>
 8012d8e:	eb02 0c07 	add.w	ip, r2, r7
 8012d92:	4566      	cmp	r6, ip
 8012d94:	d322      	bcc.n	8012ddc <rcutils_string_map_reserve+0xc8>
 8012d96:	1ae3      	subs	r3, r4, r3
 8012d98:	009a      	lsls	r2, r3, #2
 8012d9a:	4670      	mov	r0, lr
 8012d9c:	2100      	movs	r1, #0
 8012d9e:	9201      	str	r2, [sp, #4]
 8012da0:	f002 ff54 	bl	8015c4c <memset>
 8012da4:	9a01      	ldr	r2, [sp, #4]
 8012da6:	2100      	movs	r1, #0
 8012da8:	4630      	mov	r0, r6
 8012daa:	f002 ff4f 	bl	8015c4c <memset>
 8012dae:	e00a      	b.n	8012dc6 <rcutils_string_map_reserve+0xb2>
 8012db0:	694f      	ldr	r7, [r1, #20]
 8012db2:	6808      	ldr	r0, [r1, #0]
 8012db4:	4631      	mov	r1, r6
 8012db6:	47b8      	blx	r7
 8012db8:	682b      	ldr	r3, [r5, #0]
 8012dba:	4631      	mov	r1, r6
 8012dbc:	6858      	ldr	r0, [r3, #4]
 8012dbe:	601c      	str	r4, [r3, #0]
 8012dc0:	47b8      	blx	r7
 8012dc2:	682d      	ldr	r5, [r5, #0]
 8012dc4:	606c      	str	r4, [r5, #4]
 8012dc6:	2000      	movs	r0, #0
 8012dc8:	60ac      	str	r4, [r5, #8]
 8012dca:	b002      	add	sp, #8
 8012dcc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012dd0:	2000      	movs	r0, #0
 8012dd2:	e7af      	b.n	8012d34 <rcutils_string_map_reserve+0x20>
 8012dd4:	200a      	movs	r0, #10
 8012dd6:	e7ad      	b.n	8012d34 <rcutils_string_map_reserve+0x20>
 8012dd8:	200b      	movs	r0, #11
 8012dda:	4770      	bx	lr
 8012ddc:	1f0b      	subs	r3, r1, #4
 8012dde:	4418      	add	r0, r3
 8012de0:	4413      	add	r3, r2
 8012de2:	3a04      	subs	r2, #4
 8012de4:	4417      	add	r7, r2
 8012de6:	2200      	movs	r2, #0
 8012de8:	f843 2f04 	str.w	r2, [r3, #4]!
 8012dec:	42bb      	cmp	r3, r7
 8012dee:	f840 2f04 	str.w	r2, [r0, #4]!
 8012df2:	d1f9      	bne.n	8012de8 <rcutils_string_map_reserve+0xd4>
 8012df4:	e7e7      	b.n	8012dc6 <rcutils_string_map_reserve+0xb2>
 8012df6:	bf00      	nop

08012df8 <rcutils_string_map_init>:
 8012df8:	b082      	sub	sp, #8
 8012dfa:	b570      	push	{r4, r5, r6, lr}
 8012dfc:	ac04      	add	r4, sp, #16
 8012dfe:	e884 000c 	stmia.w	r4, {r2, r3}
 8012e02:	b380      	cbz	r0, 8012e66 <rcutils_string_map_init+0x6e>
 8012e04:	6806      	ldr	r6, [r0, #0]
 8012e06:	4604      	mov	r4, r0
 8012e08:	b12e      	cbz	r6, 8012e16 <rcutils_string_map_init+0x1e>
 8012e0a:	251e      	movs	r5, #30
 8012e0c:	4628      	mov	r0, r5
 8012e0e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8012e12:	b002      	add	sp, #8
 8012e14:	4770      	bx	lr
 8012e16:	a804      	add	r0, sp, #16
 8012e18:	460d      	mov	r5, r1
 8012e1a:	f7f7 fafb 	bl	800a414 <rcutils_allocator_is_valid>
 8012e1e:	b310      	cbz	r0, 8012e66 <rcutils_string_map_init+0x6e>
 8012e20:	9b04      	ldr	r3, [sp, #16]
 8012e22:	9908      	ldr	r1, [sp, #32]
 8012e24:	2024      	movs	r0, #36	@ 0x24
 8012e26:	4798      	blx	r3
 8012e28:	6020      	str	r0, [r4, #0]
 8012e2a:	b310      	cbz	r0, 8012e72 <rcutils_string_map_init+0x7a>
 8012e2c:	f10d 0e10 	add.w	lr, sp, #16
 8012e30:	e9c0 6600 	strd	r6, r6, [r0]
 8012e34:	e9c0 6602 	strd	r6, r6, [r0, #8]
 8012e38:	f100 0c10 	add.w	ip, r0, #16
 8012e3c:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8012e40:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8012e44:	f8de 3000 	ldr.w	r3, [lr]
 8012e48:	f8cc 3000 	str.w	r3, [ip]
 8012e4c:	4629      	mov	r1, r5
 8012e4e:	4620      	mov	r0, r4
 8012e50:	f7ff ff60 	bl	8012d14 <rcutils_string_map_reserve>
 8012e54:	4605      	mov	r5, r0
 8012e56:	2800      	cmp	r0, #0
 8012e58:	d0d8      	beq.n	8012e0c <rcutils_string_map_init+0x14>
 8012e5a:	9b05      	ldr	r3, [sp, #20]
 8012e5c:	9908      	ldr	r1, [sp, #32]
 8012e5e:	6820      	ldr	r0, [r4, #0]
 8012e60:	4798      	blx	r3
 8012e62:	6026      	str	r6, [r4, #0]
 8012e64:	e7d2      	b.n	8012e0c <rcutils_string_map_init+0x14>
 8012e66:	250b      	movs	r5, #11
 8012e68:	4628      	mov	r0, r5
 8012e6a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8012e6e:	b002      	add	sp, #8
 8012e70:	4770      	bx	lr
 8012e72:	250a      	movs	r5, #10
 8012e74:	e7ca      	b.n	8012e0c <rcutils_string_map_init+0x14>
 8012e76:	bf00      	nop

08012e78 <rcutils_string_map_fini>:
 8012e78:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012e7c:	b082      	sub	sp, #8
 8012e7e:	2800      	cmp	r0, #0
 8012e80:	d03a      	beq.n	8012ef8 <rcutils_string_map_fini+0x80>
 8012e82:	6804      	ldr	r4, [r0, #0]
 8012e84:	4606      	mov	r6, r0
 8012e86:	2c00      	cmp	r4, #0
 8012e88:	d032      	beq.n	8012ef0 <rcutils_string_map_fini+0x78>
 8012e8a:	68a3      	ldr	r3, [r4, #8]
 8012e8c:	b32b      	cbz	r3, 8012eda <rcutils_string_map_fini+0x62>
 8012e8e:	2500      	movs	r5, #0
 8012e90:	6822      	ldr	r2, [r4, #0]
 8012e92:	462f      	mov	r7, r5
 8012e94:	f852 0025 	ldr.w	r0, [r2, r5, lsl #2]
 8012e98:	b1e0      	cbz	r0, 8012ed4 <rcutils_string_map_fini+0x5c>
 8012e9a:	6a21      	ldr	r1, [r4, #32]
 8012e9c:	f8d4 8014 	ldr.w	r8, [r4, #20]
 8012ea0:	9101      	str	r1, [sp, #4]
 8012ea2:	47c0      	blx	r8
 8012ea4:	e9d4 2300 	ldrd	r2, r3, [r4]
 8012ea8:	f842 7025 	str.w	r7, [r2, r5, lsl #2]
 8012eac:	9901      	ldr	r1, [sp, #4]
 8012eae:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8012eb2:	47c0      	blx	r8
 8012eb4:	68e3      	ldr	r3, [r4, #12]
 8012eb6:	6862      	ldr	r2, [r4, #4]
 8012eb8:	3b01      	subs	r3, #1
 8012eba:	f842 7025 	str.w	r7, [r2, r5, lsl #2]
 8012ebe:	60e3      	str	r3, [r4, #12]
 8012ec0:	6834      	ldr	r4, [r6, #0]
 8012ec2:	68a3      	ldr	r3, [r4, #8]
 8012ec4:	3501      	adds	r5, #1
 8012ec6:	429d      	cmp	r5, r3
 8012ec8:	d207      	bcs.n	8012eda <rcutils_string_map_fini+0x62>
 8012eca:	6822      	ldr	r2, [r4, #0]
 8012ecc:	f852 0025 	ldr.w	r0, [r2, r5, lsl #2]
 8012ed0:	2800      	cmp	r0, #0
 8012ed2:	d1e2      	bne.n	8012e9a <rcutils_string_map_fini+0x22>
 8012ed4:	3501      	adds	r5, #1
 8012ed6:	429d      	cmp	r5, r3
 8012ed8:	d3dc      	bcc.n	8012e94 <rcutils_string_map_fini+0x1c>
 8012eda:	2100      	movs	r1, #0
 8012edc:	4630      	mov	r0, r6
 8012ede:	f7ff ff19 	bl	8012d14 <rcutils_string_map_reserve>
 8012ee2:	4604      	mov	r4, r0
 8012ee4:	b920      	cbnz	r0, 8012ef0 <rcutils_string_map_fini+0x78>
 8012ee6:	6830      	ldr	r0, [r6, #0]
 8012ee8:	6943      	ldr	r3, [r0, #20]
 8012eea:	6a01      	ldr	r1, [r0, #32]
 8012eec:	4798      	blx	r3
 8012eee:	6034      	str	r4, [r6, #0]
 8012ef0:	4620      	mov	r0, r4
 8012ef2:	b002      	add	sp, #8
 8012ef4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012ef8:	240b      	movs	r4, #11
 8012efa:	4620      	mov	r0, r4
 8012efc:	b002      	add	sp, #8
 8012efe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012f02:	bf00      	nop

08012f04 <rcutils_string_map_getn>:
 8012f04:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012f08:	b300      	cbz	r0, 8012f4c <rcutils_string_map_getn+0x48>
 8012f0a:	6807      	ldr	r7, [r0, #0]
 8012f0c:	b1ff      	cbz	r7, 8012f4e <rcutils_string_map_getn+0x4a>
 8012f0e:	4688      	mov	r8, r1
 8012f10:	b1e1      	cbz	r1, 8012f4c <rcutils_string_map_getn+0x48>
 8012f12:	f8d7 a008 	ldr.w	sl, [r7, #8]
 8012f16:	683e      	ldr	r6, [r7, #0]
 8012f18:	f1ba 0f00 	cmp.w	sl, #0
 8012f1c:	d016      	beq.n	8012f4c <rcutils_string_map_getn+0x48>
 8012f1e:	4691      	mov	r9, r2
 8012f20:	3e04      	subs	r6, #4
 8012f22:	2400      	movs	r4, #0
 8012f24:	f856 5f04 	ldr.w	r5, [r6, #4]!
 8012f28:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8012f2c:	4628      	mov	r0, r5
 8012f2e:	3401      	adds	r4, #1
 8012f30:	b155      	cbz	r5, 8012f48 <rcutils_string_map_getn+0x44>
 8012f32:	f7ed f95f 	bl	80001f4 <strlen>
 8012f36:	4548      	cmp	r0, r9
 8012f38:	4602      	mov	r2, r0
 8012f3a:	4629      	mov	r1, r5
 8012f3c:	bf38      	it	cc
 8012f3e:	464a      	movcc	r2, r9
 8012f40:	4640      	mov	r0, r8
 8012f42:	f002 fe98 	bl	8015c76 <strncmp>
 8012f46:	b128      	cbz	r0, 8012f54 <rcutils_string_map_getn+0x50>
 8012f48:	45a2      	cmp	sl, r4
 8012f4a:	d1eb      	bne.n	8012f24 <rcutils_string_map_getn+0x20>
 8012f4c:	2700      	movs	r7, #0
 8012f4e:	4638      	mov	r0, r7
 8012f50:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012f54:	687b      	ldr	r3, [r7, #4]
 8012f56:	f853 700b 	ldr.w	r7, [r3, fp]
 8012f5a:	4638      	mov	r0, r7
 8012f5c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}

08012f60 <rmw_get_zero_initialized_context>:
 8012f60:	b510      	push	{r4, lr}
 8012f62:	4604      	mov	r4, r0
 8012f64:	3010      	adds	r0, #16
 8012f66:	f7f7 fae7 	bl	800a538 <rmw_get_zero_initialized_init_options>
 8012f6a:	2300      	movs	r3, #0
 8012f6c:	2000      	movs	r0, #0
 8012f6e:	2100      	movs	r1, #0
 8012f70:	e9c4 0100 	strd	r0, r1, [r4]
 8012f74:	e9c4 3312 	strd	r3, r3, [r4, #72]	@ 0x48
 8012f78:	60a3      	str	r3, [r4, #8]
 8012f7a:	4620      	mov	r0, r4
 8012f7c:	bd10      	pop	{r4, pc}
 8012f7e:	bf00      	nop

08012f80 <rmw_subscription_content_filter_options_fini>:
 8012f80:	b1b0      	cbz	r0, 8012fb0 <rmw_subscription_content_filter_options_fini+0x30>
 8012f82:	b538      	push	{r3, r4, r5, lr}
 8012f84:	4604      	mov	r4, r0
 8012f86:	4608      	mov	r0, r1
 8012f88:	460d      	mov	r5, r1
 8012f8a:	f7f7 fa43 	bl	800a414 <rcutils_allocator_is_valid>
 8012f8e:	b168      	cbz	r0, 8012fac <rmw_subscription_content_filter_options_fini+0x2c>
 8012f90:	6820      	ldr	r0, [r4, #0]
 8012f92:	b120      	cbz	r0, 8012f9e <rmw_subscription_content_filter_options_fini+0x1e>
 8012f94:	686b      	ldr	r3, [r5, #4]
 8012f96:	6929      	ldr	r1, [r5, #16]
 8012f98:	4798      	blx	r3
 8012f9a:	2300      	movs	r3, #0
 8012f9c:	6023      	str	r3, [r4, #0]
 8012f9e:	1d20      	adds	r0, r4, #4
 8012fa0:	f002 f978 	bl	8015294 <rcutils_string_array_fini>
 8012fa4:	3800      	subs	r0, #0
 8012fa6:	bf18      	it	ne
 8012fa8:	2001      	movne	r0, #1
 8012faa:	bd38      	pop	{r3, r4, r5, pc}
 8012fac:	200b      	movs	r0, #11
 8012fae:	bd38      	pop	{r3, r4, r5, pc}
 8012fb0:	200b      	movs	r0, #11
 8012fb2:	4770      	bx	lr

08012fb4 <rmw_get_default_subscription_options>:
 8012fb4:	2200      	movs	r2, #0
 8012fb6:	e9c0 2200 	strd	r2, r2, [r0]
 8012fba:	6082      	str	r2, [r0, #8]
 8012fbc:	4770      	bx	lr
 8012fbe:	bf00      	nop

08012fc0 <rmw_time_equal>:
 8012fc0:	b4f0      	push	{r4, r5, r6, r7}
 8012fc2:	b084      	sub	sp, #16
 8012fc4:	ac04      	add	r4, sp, #16
 8012fc6:	e904 000f 	stmdb	r4, {r0, r1, r2, r3}
 8012fca:	4603      	mov	r3, r0
 8012fcc:	4924      	ldr	r1, [pc, #144]	@ (8013060 <rmw_time_equal+0xa0>)
 8012fce:	9e03      	ldr	r6, [sp, #12]
 8012fd0:	e9dd 5001 	ldrd	r5, r0, [sp, #4]
 8012fd4:	2202      	movs	r2, #2
 8012fd6:	4299      	cmp	r1, r3
 8012fd8:	41aa      	sbcs	r2, r5
 8012fda:	d330      	bcc.n	801303e <rmw_time_equal+0x7e>
 8012fdc:	4c21      	ldr	r4, [pc, #132]	@ (8013064 <rmw_time_equal+0xa4>)
 8012fde:	fba3 3204 	umull	r3, r2, r3, r4
 8012fe2:	fb04 2205 	mla	r2, r4, r5, r2
 8012fe6:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8012fea:	43dd      	mvns	r5, r3
 8012fec:	1a8c      	subs	r4, r1, r2
 8012fee:	4285      	cmp	r5, r0
 8012ff0:	41b4      	sbcs	r4, r6
 8012ff2:	d332      	bcc.n	801305a <rmw_time_equal+0x9a>
 8012ff4:	eb10 0c03 	adds.w	ip, r0, r3
 8012ff8:	eb42 0106 	adc.w	r1, r2, r6
 8012ffc:	e9dd 3608 	ldrd	r3, r6, [sp, #32]
 8013000:	4817      	ldr	r0, [pc, #92]	@ (8013060 <rmw_time_equal+0xa0>)
 8013002:	9d0a      	ldr	r5, [sp, #40]	@ 0x28
 8013004:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 8013006:	2202      	movs	r2, #2
 8013008:	4298      	cmp	r0, r3
 801300a:	41b2      	sbcs	r2, r6
 801300c:	d31c      	bcc.n	8013048 <rmw_time_equal+0x88>
 801300e:	4c15      	ldr	r4, [pc, #84]	@ (8013064 <rmw_time_equal+0xa4>)
 8013010:	fba3 3204 	umull	r3, r2, r3, r4
 8013014:	fb04 2206 	mla	r2, r4, r6, r2
 8013018:	f06f 4000 	mvn.w	r0, #2147483648	@ 0x80000000
 801301c:	43de      	mvns	r6, r3
 801301e:	1a84      	subs	r4, r0, r2
 8013020:	42ae      	cmp	r6, r5
 8013022:	41bc      	sbcs	r4, r7
 8013024:	d315      	bcc.n	8013052 <rmw_time_equal+0x92>
 8013026:	195b      	adds	r3, r3, r5
 8013028:	eb42 0207 	adc.w	r2, r2, r7
 801302c:	428a      	cmp	r2, r1
 801302e:	bf08      	it	eq
 8013030:	4563      	cmpeq	r3, ip
 8013032:	bf0c      	ite	eq
 8013034:	2001      	moveq	r0, #1
 8013036:	2000      	movne	r0, #0
 8013038:	b004      	add	sp, #16
 801303a:	bcf0      	pop	{r4, r5, r6, r7}
 801303c:	4770      	bx	lr
 801303e:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
 8013042:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8013046:	e7d9      	b.n	8012ffc <rmw_time_equal+0x3c>
 8013048:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801304c:	f06f 4200 	mvn.w	r2, #2147483648	@ 0x80000000
 8013050:	e7ec      	b.n	801302c <rmw_time_equal+0x6c>
 8013052:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8013056:	4602      	mov	r2, r0
 8013058:	e7e8      	b.n	801302c <rmw_time_equal+0x6c>
 801305a:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
 801305e:	e7cd      	b.n	8012ffc <rmw_time_equal+0x3c>
 8013060:	25c17d04 	.word	0x25c17d04
 8013064:	3b9aca00 	.word	0x3b9aca00

08013068 <rmw_time_total_nsec>:
 8013068:	b470      	push	{r4, r5, r6}
 801306a:	b085      	sub	sp, #20
 801306c:	ac04      	add	r4, sp, #16
 801306e:	e904 000f 	stmdb	r4, {r0, r1, r2, r3}
 8013072:	4603      	mov	r3, r0
 8013074:	4912      	ldr	r1, [pc, #72]	@ (80130c0 <rmw_time_total_nsec+0x58>)
 8013076:	9e03      	ldr	r6, [sp, #12]
 8013078:	e9dd 5001 	ldrd	r5, r0, [sp, #4]
 801307c:	2202      	movs	r2, #2
 801307e:	4299      	cmp	r1, r3
 8013080:	41aa      	sbcs	r2, r5
 8013082:	d311      	bcc.n	80130a8 <rmw_time_total_nsec+0x40>
 8013084:	4c0f      	ldr	r4, [pc, #60]	@ (80130c4 <rmw_time_total_nsec+0x5c>)
 8013086:	fba3 3204 	umull	r3, r2, r3, r4
 801308a:	fb04 2205 	mla	r2, r4, r5, r2
 801308e:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8013092:	43dd      	mvns	r5, r3
 8013094:	1a8c      	subs	r4, r1, r2
 8013096:	4285      	cmp	r5, r0
 8013098:	41b4      	sbcs	r4, r6
 801309a:	d30c      	bcc.n	80130b6 <rmw_time_total_nsec+0x4e>
 801309c:	1818      	adds	r0, r3, r0
 801309e:	eb42 0106 	adc.w	r1, r2, r6
 80130a2:	b005      	add	sp, #20
 80130a4:	bc70      	pop	{r4, r5, r6}
 80130a6:	4770      	bx	lr
 80130a8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80130ac:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 80130b0:	b005      	add	sp, #20
 80130b2:	bc70      	pop	{r4, r5, r6}
 80130b4:	4770      	bx	lr
 80130b6:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80130ba:	b005      	add	sp, #20
 80130bc:	bc70      	pop	{r4, r5, r6}
 80130be:	4770      	bx	lr
 80130c0:	25c17d04 	.word	0x25c17d04
 80130c4:	3b9aca00 	.word	0x3b9aca00

080130c8 <rmw_get_zero_initialized_message_info>:
 80130c8:	b510      	push	{r4, lr}
 80130ca:	2240      	movs	r2, #64	@ 0x40
 80130cc:	4604      	mov	r4, r0
 80130ce:	2100      	movs	r1, #0
 80130d0:	f002 fdbc 	bl	8015c4c <memset>
 80130d4:	4620      	mov	r0, r4
 80130d6:	bd10      	pop	{r4, pc}

080130d8 <rmw_validate_full_topic_name>:
 80130d8:	2800      	cmp	r0, #0
 80130da:	d057      	beq.n	801318c <rmw_validate_full_topic_name+0xb4>
 80130dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80130e0:	460d      	mov	r5, r1
 80130e2:	2900      	cmp	r1, #0
 80130e4:	d054      	beq.n	8013190 <rmw_validate_full_topic_name+0xb8>
 80130e6:	4616      	mov	r6, r2
 80130e8:	4604      	mov	r4, r0
 80130ea:	f7ed f883 	bl	80001f4 <strlen>
 80130ee:	b148      	cbz	r0, 8013104 <rmw_validate_full_topic_name+0x2c>
 80130f0:	7823      	ldrb	r3, [r4, #0]
 80130f2:	2b2f      	cmp	r3, #47	@ 0x2f
 80130f4:	d00d      	beq.n	8013112 <rmw_validate_full_topic_name+0x3a>
 80130f6:	2302      	movs	r3, #2
 80130f8:	602b      	str	r3, [r5, #0]
 80130fa:	b13e      	cbz	r6, 801310c <rmw_validate_full_topic_name+0x34>
 80130fc:	2000      	movs	r0, #0
 80130fe:	6030      	str	r0, [r6, #0]
 8013100:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013104:	2301      	movs	r3, #1
 8013106:	602b      	str	r3, [r5, #0]
 8013108:	2e00      	cmp	r6, #0
 801310a:	d1f7      	bne.n	80130fc <rmw_validate_full_topic_name+0x24>
 801310c:	2000      	movs	r0, #0
 801310e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013112:	1e43      	subs	r3, r0, #1
 8013114:	5ce2      	ldrb	r2, [r4, r3]
 8013116:	2a2f      	cmp	r2, #47	@ 0x2f
 8013118:	d03c      	beq.n	8013194 <rmw_validate_full_topic_name+0xbc>
 801311a:	1e63      	subs	r3, r4, #1
 801311c:	eb03 0800 	add.w	r8, r3, r0
 8013120:	f1c4 0e01 	rsb	lr, r4, #1
 8013124:	eb0e 0703 	add.w	r7, lr, r3
 8013128:	f813 1f01 	ldrb.w	r1, [r3, #1]!
 801312c:	f021 0220 	bic.w	r2, r1, #32
 8013130:	3a41      	subs	r2, #65	@ 0x41
 8013132:	2a19      	cmp	r2, #25
 8013134:	f1a1 0c2f 	sub.w	ip, r1, #47	@ 0x2f
 8013138:	d90b      	bls.n	8013152 <rmw_validate_full_topic_name+0x7a>
 801313a:	295f      	cmp	r1, #95	@ 0x5f
 801313c:	d009      	beq.n	8013152 <rmw_validate_full_topic_name+0x7a>
 801313e:	f1bc 0f0a 	cmp.w	ip, #10
 8013142:	d906      	bls.n	8013152 <rmw_validate_full_topic_name+0x7a>
 8013144:	2304      	movs	r3, #4
 8013146:	602b      	str	r3, [r5, #0]
 8013148:	2e00      	cmp	r6, #0
 801314a:	d0df      	beq.n	801310c <rmw_validate_full_topic_name+0x34>
 801314c:	6037      	str	r7, [r6, #0]
 801314e:	2000      	movs	r0, #0
 8013150:	e7d6      	b.n	8013100 <rmw_validate_full_topic_name+0x28>
 8013152:	4543      	cmp	r3, r8
 8013154:	d1e6      	bne.n	8013124 <rmw_validate_full_topic_name+0x4c>
 8013156:	4f1a      	ldr	r7, [pc, #104]	@ (80131c0 <rmw_validate_full_topic_name+0xe8>)
 8013158:	2301      	movs	r3, #1
 801315a:	e004      	b.n	8013166 <rmw_validate_full_topic_name+0x8e>
 801315c:	4298      	cmp	r0, r3
 801315e:	f104 0401 	add.w	r4, r4, #1
 8013162:	d91c      	bls.n	801319e <rmw_validate_full_topic_name+0xc6>
 8013164:	4613      	mov	r3, r2
 8013166:	4298      	cmp	r0, r3
 8013168:	f103 0201 	add.w	r2, r3, #1
 801316c:	d0f6      	beq.n	801315c <rmw_validate_full_topic_name+0x84>
 801316e:	7821      	ldrb	r1, [r4, #0]
 8013170:	292f      	cmp	r1, #47	@ 0x2f
 8013172:	d1f3      	bne.n	801315c <rmw_validate_full_topic_name+0x84>
 8013174:	7861      	ldrb	r1, [r4, #1]
 8013176:	292f      	cmp	r1, #47	@ 0x2f
 8013178:	d01c      	beq.n	80131b4 <rmw_validate_full_topic_name+0xdc>
 801317a:	5dc9      	ldrb	r1, [r1, r7]
 801317c:	0749      	lsls	r1, r1, #29
 801317e:	d5ed      	bpl.n	801315c <rmw_validate_full_topic_name+0x84>
 8013180:	2206      	movs	r2, #6
 8013182:	602a      	str	r2, [r5, #0]
 8013184:	2e00      	cmp	r6, #0
 8013186:	d0c1      	beq.n	801310c <rmw_validate_full_topic_name+0x34>
 8013188:	6033      	str	r3, [r6, #0]
 801318a:	e7bf      	b.n	801310c <rmw_validate_full_topic_name+0x34>
 801318c:	200b      	movs	r0, #11
 801318e:	4770      	bx	lr
 8013190:	200b      	movs	r0, #11
 8013192:	e7b5      	b.n	8013100 <rmw_validate_full_topic_name+0x28>
 8013194:	2203      	movs	r2, #3
 8013196:	602a      	str	r2, [r5, #0]
 8013198:	2e00      	cmp	r6, #0
 801319a:	d1f5      	bne.n	8013188 <rmw_validate_full_topic_name+0xb0>
 801319c:	e7b6      	b.n	801310c <rmw_validate_full_topic_name+0x34>
 801319e:	28f7      	cmp	r0, #247	@ 0xf7
 80131a0:	d802      	bhi.n	80131a8 <rmw_validate_full_topic_name+0xd0>
 80131a2:	2000      	movs	r0, #0
 80131a4:	6028      	str	r0, [r5, #0]
 80131a6:	e7ab      	b.n	8013100 <rmw_validate_full_topic_name+0x28>
 80131a8:	2307      	movs	r3, #7
 80131aa:	602b      	str	r3, [r5, #0]
 80131ac:	2e00      	cmp	r6, #0
 80131ae:	d0ad      	beq.n	801310c <rmw_validate_full_topic_name+0x34>
 80131b0:	23f6      	movs	r3, #246	@ 0xf6
 80131b2:	e7e9      	b.n	8013188 <rmw_validate_full_topic_name+0xb0>
 80131b4:	2205      	movs	r2, #5
 80131b6:	602a      	str	r2, [r5, #0]
 80131b8:	2e00      	cmp	r6, #0
 80131ba:	d1e5      	bne.n	8013188 <rmw_validate_full_topic_name+0xb0>
 80131bc:	e7a6      	b.n	801310c <rmw_validate_full_topic_name+0x34>
 80131be:	bf00      	nop
 80131c0:	080178d4 	.word	0x080178d4

080131c4 <rmw_validate_namespace_with_size>:
 80131c4:	b340      	cbz	r0, 8013218 <rmw_validate_namespace_with_size+0x54>
 80131c6:	b570      	push	{r4, r5, r6, lr}
 80131c8:	4614      	mov	r4, r2
 80131ca:	b0c2      	sub	sp, #264	@ 0x108
 80131cc:	b332      	cbz	r2, 801321c <rmw_validate_namespace_with_size+0x58>
 80131ce:	2901      	cmp	r1, #1
 80131d0:	460d      	mov	r5, r1
 80131d2:	461e      	mov	r6, r3
 80131d4:	d102      	bne.n	80131dc <rmw_validate_namespace_with_size+0x18>
 80131d6:	7803      	ldrb	r3, [r0, #0]
 80131d8:	2b2f      	cmp	r3, #47	@ 0x2f
 80131da:	d012      	beq.n	8013202 <rmw_validate_namespace_with_size+0x3e>
 80131dc:	aa01      	add	r2, sp, #4
 80131de:	4669      	mov	r1, sp
 80131e0:	f7ff ff7a 	bl	80130d8 <rmw_validate_full_topic_name>
 80131e4:	b978      	cbnz	r0, 8013206 <rmw_validate_namespace_with_size+0x42>
 80131e6:	9b00      	ldr	r3, [sp, #0]
 80131e8:	b14b      	cbz	r3, 80131fe <rmw_validate_namespace_with_size+0x3a>
 80131ea:	2b07      	cmp	r3, #7
 80131ec:	d007      	beq.n	80131fe <rmw_validate_namespace_with_size+0x3a>
 80131ee:	1e5a      	subs	r2, r3, #1
 80131f0:	2a05      	cmp	r2, #5
 80131f2:	d82b      	bhi.n	801324c <rmw_validate_namespace_with_size+0x88>
 80131f4:	e8df f002 	tbb	[pc, r2]
 80131f8:	1e212427 	.word	0x1e212427
 80131fc:	141b      	.short	0x141b
 80131fe:	2df5      	cmp	r5, #245	@ 0xf5
 8013200:	d803      	bhi.n	801320a <rmw_validate_namespace_with_size+0x46>
 8013202:	2000      	movs	r0, #0
 8013204:	6020      	str	r0, [r4, #0]
 8013206:	b042      	add	sp, #264	@ 0x108
 8013208:	bd70      	pop	{r4, r5, r6, pc}
 801320a:	2307      	movs	r3, #7
 801320c:	6023      	str	r3, [r4, #0]
 801320e:	2e00      	cmp	r6, #0
 8013210:	d0f9      	beq.n	8013206 <rmw_validate_namespace_with_size+0x42>
 8013212:	23f4      	movs	r3, #244	@ 0xf4
 8013214:	6033      	str	r3, [r6, #0]
 8013216:	e7f6      	b.n	8013206 <rmw_validate_namespace_with_size+0x42>
 8013218:	200b      	movs	r0, #11
 801321a:	4770      	bx	lr
 801321c:	200b      	movs	r0, #11
 801321e:	e7f2      	b.n	8013206 <rmw_validate_namespace_with_size+0x42>
 8013220:	2306      	movs	r3, #6
 8013222:	6023      	str	r3, [r4, #0]
 8013224:	2e00      	cmp	r6, #0
 8013226:	d0ee      	beq.n	8013206 <rmw_validate_namespace_with_size+0x42>
 8013228:	9b01      	ldr	r3, [sp, #4]
 801322a:	6033      	str	r3, [r6, #0]
 801322c:	e7eb      	b.n	8013206 <rmw_validate_namespace_with_size+0x42>
 801322e:	2305      	movs	r3, #5
 8013230:	6023      	str	r3, [r4, #0]
 8013232:	e7f7      	b.n	8013224 <rmw_validate_namespace_with_size+0x60>
 8013234:	2304      	movs	r3, #4
 8013236:	6023      	str	r3, [r4, #0]
 8013238:	e7f4      	b.n	8013224 <rmw_validate_namespace_with_size+0x60>
 801323a:	2303      	movs	r3, #3
 801323c:	6023      	str	r3, [r4, #0]
 801323e:	e7f1      	b.n	8013224 <rmw_validate_namespace_with_size+0x60>
 8013240:	2302      	movs	r3, #2
 8013242:	6023      	str	r3, [r4, #0]
 8013244:	e7ee      	b.n	8013224 <rmw_validate_namespace_with_size+0x60>
 8013246:	2301      	movs	r3, #1
 8013248:	6023      	str	r3, [r4, #0]
 801324a:	e7eb      	b.n	8013224 <rmw_validate_namespace_with_size+0x60>
 801324c:	4a03      	ldr	r2, [pc, #12]	@ (801325c <rmw_validate_namespace_with_size+0x98>)
 801324e:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8013252:	a802      	add	r0, sp, #8
 8013254:	f7ff fcee 	bl	8012c34 <rcutils_snprintf>
 8013258:	2001      	movs	r0, #1
 801325a:	e7d4      	b.n	8013206 <rmw_validate_namespace_with_size+0x42>
 801325c:	080174dc 	.word	0x080174dc

08013260 <rmw_validate_namespace>:
 8013260:	b168      	cbz	r0, 801327e <rmw_validate_namespace+0x1e>
 8013262:	b570      	push	{r4, r5, r6, lr}
 8013264:	460d      	mov	r5, r1
 8013266:	4616      	mov	r6, r2
 8013268:	4604      	mov	r4, r0
 801326a:	f7ec ffc3 	bl	80001f4 <strlen>
 801326e:	4633      	mov	r3, r6
 8013270:	4601      	mov	r1, r0
 8013272:	462a      	mov	r2, r5
 8013274:	4620      	mov	r0, r4
 8013276:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801327a:	f7ff bfa3 	b.w	80131c4 <rmw_validate_namespace_with_size>
 801327e:	200b      	movs	r0, #11
 8013280:	4770      	bx	lr
 8013282:	bf00      	nop

08013284 <rmw_namespace_validation_result_string>:
 8013284:	2807      	cmp	r0, #7
 8013286:	bf9a      	itte	ls
 8013288:	4b02      	ldrls	r3, [pc, #8]	@ (8013294 <rmw_namespace_validation_result_string+0x10>)
 801328a:	f853 0020 	ldrls.w	r0, [r3, r0, lsl #2]
 801328e:	4802      	ldrhi	r0, [pc, #8]	@ (8013298 <rmw_namespace_validation_result_string+0x14>)
 8013290:	4770      	bx	lr
 8013292:	bf00      	nop
 8013294:	080176d4 	.word	0x080176d4
 8013298:	0801752c 	.word	0x0801752c

0801329c <rmw_validate_node_name>:
 801329c:	2800      	cmp	r0, #0
 801329e:	d03b      	beq.n	8013318 <rmw_validate_node_name+0x7c>
 80132a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80132a4:	460d      	mov	r5, r1
 80132a6:	2900      	cmp	r1, #0
 80132a8:	d038      	beq.n	801331c <rmw_validate_node_name+0x80>
 80132aa:	4616      	mov	r6, r2
 80132ac:	4604      	mov	r4, r0
 80132ae:	f7ec ffa1 	bl	80001f4 <strlen>
 80132b2:	b1e0      	cbz	r0, 80132ee <rmw_validate_node_name+0x52>
 80132b4:	1e63      	subs	r3, r4, #1
 80132b6:	eb03 0800 	add.w	r8, r3, r0
 80132ba:	f1c4 0101 	rsb	r1, r4, #1
 80132be:	18cf      	adds	r7, r1, r3
 80132c0:	f813 ef01 	ldrb.w	lr, [r3, #1]!
 80132c4:	f1ae 0230 	sub.w	r2, lr, #48	@ 0x30
 80132c8:	f02e 0c20 	bic.w	ip, lr, #32
 80132cc:	2a09      	cmp	r2, #9
 80132ce:	f1ac 0c41 	sub.w	ip, ip, #65	@ 0x41
 80132d2:	d914      	bls.n	80132fe <rmw_validate_node_name+0x62>
 80132d4:	f1bc 0f19 	cmp.w	ip, #25
 80132d8:	d911      	bls.n	80132fe <rmw_validate_node_name+0x62>
 80132da:	f1be 0f5f 	cmp.w	lr, #95	@ 0x5f
 80132de:	d00e      	beq.n	80132fe <rmw_validate_node_name+0x62>
 80132e0:	2302      	movs	r3, #2
 80132e2:	602b      	str	r3, [r5, #0]
 80132e4:	b106      	cbz	r6, 80132e8 <rmw_validate_node_name+0x4c>
 80132e6:	6037      	str	r7, [r6, #0]
 80132e8:	2000      	movs	r0, #0
 80132ea:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80132ee:	2301      	movs	r3, #1
 80132f0:	602b      	str	r3, [r5, #0]
 80132f2:	2e00      	cmp	r6, #0
 80132f4:	d0f8      	beq.n	80132e8 <rmw_validate_node_name+0x4c>
 80132f6:	2000      	movs	r0, #0
 80132f8:	6030      	str	r0, [r6, #0]
 80132fa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80132fe:	4543      	cmp	r3, r8
 8013300:	d1dd      	bne.n	80132be <rmw_validate_node_name+0x22>
 8013302:	7822      	ldrb	r2, [r4, #0]
 8013304:	4b0d      	ldr	r3, [pc, #52]	@ (801333c <rmw_validate_node_name+0xa0>)
 8013306:	5cd3      	ldrb	r3, [r2, r3]
 8013308:	f013 0304 	ands.w	r3, r3, #4
 801330c:	d110      	bne.n	8013330 <rmw_validate_node_name+0x94>
 801330e:	28ff      	cmp	r0, #255	@ 0xff
 8013310:	d806      	bhi.n	8013320 <rmw_validate_node_name+0x84>
 8013312:	602b      	str	r3, [r5, #0]
 8013314:	4618      	mov	r0, r3
 8013316:	e7e8      	b.n	80132ea <rmw_validate_node_name+0x4e>
 8013318:	200b      	movs	r0, #11
 801331a:	4770      	bx	lr
 801331c:	200b      	movs	r0, #11
 801331e:	e7e4      	b.n	80132ea <rmw_validate_node_name+0x4e>
 8013320:	2204      	movs	r2, #4
 8013322:	602a      	str	r2, [r5, #0]
 8013324:	2e00      	cmp	r6, #0
 8013326:	d0df      	beq.n	80132e8 <rmw_validate_node_name+0x4c>
 8013328:	22fe      	movs	r2, #254	@ 0xfe
 801332a:	6032      	str	r2, [r6, #0]
 801332c:	4618      	mov	r0, r3
 801332e:	e7dc      	b.n	80132ea <rmw_validate_node_name+0x4e>
 8013330:	2303      	movs	r3, #3
 8013332:	602b      	str	r3, [r5, #0]
 8013334:	2e00      	cmp	r6, #0
 8013336:	d1de      	bne.n	80132f6 <rmw_validate_node_name+0x5a>
 8013338:	e7d6      	b.n	80132e8 <rmw_validate_node_name+0x4c>
 801333a:	bf00      	nop
 801333c:	080178d4 	.word	0x080178d4

08013340 <rmw_node_name_validation_result_string>:
 8013340:	2804      	cmp	r0, #4
 8013342:	bf9a      	itte	ls
 8013344:	4b02      	ldrls	r3, [pc, #8]	@ (8013350 <rmw_node_name_validation_result_string+0x10>)
 8013346:	f853 0020 	ldrls.w	r0, [r3, r0, lsl #2]
 801334a:	4802      	ldrhi	r0, [pc, #8]	@ (8013354 <rmw_node_name_validation_result_string+0x14>)
 801334c:	4770      	bx	lr
 801334e:	bf00      	nop
 8013350:	080177e0 	.word	0x080177e0
 8013354:	080176f4 	.word	0x080176f4

08013358 <on_status>:
 8013358:	b082      	sub	sp, #8
 801335a:	b002      	add	sp, #8
 801335c:	4770      	bx	lr
 801335e:	bf00      	nop

08013360 <on_topic>:
 8013360:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013364:	4a22      	ldr	r2, [pc, #136]	@ (80133f0 <on_topic+0x90>)
 8013366:	b094      	sub	sp, #80	@ 0x50
 8013368:	6812      	ldr	r2, [r2, #0]
 801336a:	9d1a      	ldr	r5, [sp, #104]	@ 0x68
 801336c:	f8bd 606c 	ldrh.w	r6, [sp, #108]	@ 0x6c
 8013370:	e9cd 3112 	strd	r3, r1, [sp, #72]	@ 0x48
 8013374:	b3c2      	cbz	r2, 80133e8 <on_topic+0x88>
 8013376:	f8bd 104c 	ldrh.w	r1, [sp, #76]	@ 0x4c
 801337a:	f89d 004e 	ldrb.w	r0, [sp, #78]	@ 0x4e
 801337e:	e001      	b.n	8013384 <on_topic+0x24>
 8013380:	6852      	ldr	r2, [r2, #4]
 8013382:	b38a      	cbz	r2, 80133e8 <on_topic+0x88>
 8013384:	6894      	ldr	r4, [r2, #8]
 8013386:	8aa3      	ldrh	r3, [r4, #20]
 8013388:	428b      	cmp	r3, r1
 801338a:	d1f9      	bne.n	8013380 <on_topic+0x20>
 801338c:	7da3      	ldrb	r3, [r4, #22]
 801338e:	4283      	cmp	r3, r0
 8013390:	d1f6      	bne.n	8013380 <on_topic+0x20>
 8013392:	2248      	movs	r2, #72	@ 0x48
 8013394:	f104 0130 	add.w	r1, r4, #48	@ 0x30
 8013398:	4668      	mov	r0, sp
 801339a:	f002 fd20 	bl	8015dde <memcpy>
 801339e:	f104 0328 	add.w	r3, r4, #40	@ 0x28
 80133a2:	cb0c      	ldmia	r3, {r2, r3}
 80133a4:	4620      	mov	r0, r4
 80133a6:	f7f8 f847 	bl	800b438 <rmw_uxrce_get_static_input_buffer_for_entity>
 80133aa:	4607      	mov	r7, r0
 80133ac:	b1e0      	cbz	r0, 80133e8 <on_topic+0x88>
 80133ae:	f8d0 8008 	ldr.w	r8, [r0, #8]
 80133b2:	4632      	mov	r2, r6
 80133b4:	4628      	mov	r0, r5
 80133b6:	f108 0110 	add.w	r1, r8, #16
 80133ba:	f000 fde1 	bl	8013f80 <ucdr_deserialize_array_uint8_t>
 80133be:	b930      	cbnz	r0, 80133ce <on_topic+0x6e>
 80133c0:	480c      	ldr	r0, [pc, #48]	@ (80133f4 <on_topic+0x94>)
 80133c2:	4639      	mov	r1, r7
 80133c4:	b014      	add	sp, #80	@ 0x50
 80133c6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80133ca:	f000 b8bd 	b.w	8013548 <put_memory>
 80133ce:	f8c8 4814 	str.w	r4, [r8, #2068]	@ 0x814
 80133d2:	f8c8 6810 	str.w	r6, [r8, #2064]	@ 0x810
 80133d6:	f000 fcc3 	bl	8013d60 <rmw_uros_epoch_nanos>
 80133da:	f508 6202 	add.w	r2, r8, #2080	@ 0x820
 80133de:	2305      	movs	r3, #5
 80133e0:	e942 0102 	strd	r0, r1, [r2, #-8]
 80133e4:	f888 3820 	strb.w	r3, [r8, #2080]	@ 0x820
 80133e8:	b014      	add	sp, #80	@ 0x50
 80133ea:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80133ee:	bf00      	nop
 80133f0:	2000db64 	.word	0x2000db64
 80133f4:	2000db54 	.word	0x2000db54

080133f8 <on_request>:
 80133f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80133fc:	4823      	ldr	r0, [pc, #140]	@ (801348c <on_request+0x94>)
 80133fe:	b094      	sub	sp, #80	@ 0x50
 8013400:	6800      	ldr	r0, [r0, #0]
 8013402:	9f1a      	ldr	r7, [sp, #104]	@ 0x68
 8013404:	f8bd 606c 	ldrh.w	r6, [sp, #108]	@ 0x6c
 8013408:	9113      	str	r1, [sp, #76]	@ 0x4c
 801340a:	2800      	cmp	r0, #0
 801340c:	d03b      	beq.n	8013486 <on_request+0x8e>
 801340e:	461d      	mov	r5, r3
 8013410:	e001      	b.n	8013416 <on_request+0x1e>
 8013412:	6840      	ldr	r0, [r0, #4]
 8013414:	b3b8      	cbz	r0, 8013486 <on_request+0x8e>
 8013416:	6884      	ldr	r4, [r0, #8]
 8013418:	8b21      	ldrh	r1, [r4, #24]
 801341a:	4291      	cmp	r1, r2
 801341c:	d1f9      	bne.n	8013412 <on_request+0x1a>
 801341e:	2248      	movs	r2, #72	@ 0x48
 8013420:	f104 0128 	add.w	r1, r4, #40	@ 0x28
 8013424:	4668      	mov	r0, sp
 8013426:	f002 fcda 	bl	8015dde <memcpy>
 801342a:	f104 0320 	add.w	r3, r4, #32
 801342e:	cb0c      	ldmia	r3, {r2, r3}
 8013430:	4620      	mov	r0, r4
 8013432:	f7f8 f801 	bl	800b438 <rmw_uxrce_get_static_input_buffer_for_entity>
 8013436:	4680      	mov	r8, r0
 8013438:	b328      	cbz	r0, 8013486 <on_request+0x8e>
 801343a:	4638      	mov	r0, r7
 801343c:	f8d8 7008 	ldr.w	r7, [r8, #8]
 8013440:	4632      	mov	r2, r6
 8013442:	f107 0110 	add.w	r1, r7, #16
 8013446:	f000 fd9b 	bl	8013f80 <ucdr_deserialize_array_uint8_t>
 801344a:	b930      	cbnz	r0, 801345a <on_request+0x62>
 801344c:	4810      	ldr	r0, [pc, #64]	@ (8013490 <on_request+0x98>)
 801344e:	4641      	mov	r1, r8
 8013450:	b014      	add	sp, #80	@ 0x50
 8013452:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8013456:	f000 b877 	b.w	8013548 <put_memory>
 801345a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801345c:	f607 0c28 	addw	ip, r7, #2088	@ 0x828
 8013460:	f8c7 4814 	str.w	r4, [r7, #2068]	@ 0x814
 8013464:	f8c7 6810 	str.w	r6, [r7, #2064]	@ 0x810
 8013468:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801346c:	e895 0003 	ldmia.w	r5, {r0, r1}
 8013470:	e88c 0003 	stmia.w	ip, {r0, r1}
 8013474:	f000 fc74 	bl	8013d60 <rmw_uros_epoch_nanos>
 8013478:	f507 6202 	add.w	r2, r7, #2080	@ 0x820
 801347c:	2303      	movs	r3, #3
 801347e:	e942 0102 	strd	r0, r1, [r2, #-8]
 8013482:	f887 3820 	strb.w	r3, [r7, #2080]	@ 0x820
 8013486:	b014      	add	sp, #80	@ 0x50
 8013488:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801348c:	2000db34 	.word	0x2000db34
 8013490:	2000db54 	.word	0x2000db54

08013494 <on_reply>:
 8013494:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013498:	4821      	ldr	r0, [pc, #132]	@ (8013520 <on_reply+0x8c>)
 801349a:	b094      	sub	sp, #80	@ 0x50
 801349c:	6800      	ldr	r0, [r0, #0]
 801349e:	9f1a      	ldr	r7, [sp, #104]	@ 0x68
 80134a0:	f8bd 606c 	ldrh.w	r6, [sp, #108]	@ 0x6c
 80134a4:	9113      	str	r1, [sp, #76]	@ 0x4c
 80134a6:	b3b8      	cbz	r0, 8013518 <on_reply+0x84>
 80134a8:	461d      	mov	r5, r3
 80134aa:	e001      	b.n	80134b0 <on_reply+0x1c>
 80134ac:	6840      	ldr	r0, [r0, #4]
 80134ae:	b398      	cbz	r0, 8013518 <on_reply+0x84>
 80134b0:	6884      	ldr	r4, [r0, #8]
 80134b2:	8b21      	ldrh	r1, [r4, #24]
 80134b4:	4291      	cmp	r1, r2
 80134b6:	d1f9      	bne.n	80134ac <on_reply+0x18>
 80134b8:	2248      	movs	r2, #72	@ 0x48
 80134ba:	f104 0128 	add.w	r1, r4, #40	@ 0x28
 80134be:	4668      	mov	r0, sp
 80134c0:	f002 fc8d 	bl	8015dde <memcpy>
 80134c4:	f104 0320 	add.w	r3, r4, #32
 80134c8:	cb0c      	ldmia	r3, {r2, r3}
 80134ca:	4620      	mov	r0, r4
 80134cc:	f7f7 ffb4 	bl	800b438 <rmw_uxrce_get_static_input_buffer_for_entity>
 80134d0:	4680      	mov	r8, r0
 80134d2:	b308      	cbz	r0, 8013518 <on_reply+0x84>
 80134d4:	4638      	mov	r0, r7
 80134d6:	f8d8 7008 	ldr.w	r7, [r8, #8]
 80134da:	4632      	mov	r2, r6
 80134dc:	f107 0110 	add.w	r1, r7, #16
 80134e0:	f000 fd4e 	bl	8013f80 <ucdr_deserialize_array_uint8_t>
 80134e4:	b930      	cbnz	r0, 80134f4 <on_reply+0x60>
 80134e6:	480f      	ldr	r0, [pc, #60]	@ (8013524 <on_reply+0x90>)
 80134e8:	4641      	mov	r1, r8
 80134ea:	b014      	add	sp, #80	@ 0x50
 80134ec:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80134f0:	f000 b82a 	b.w	8013548 <put_memory>
 80134f4:	2200      	movs	r2, #0
 80134f6:	f8c7 282c 	str.w	r2, [r7, #2092]	@ 0x82c
 80134fa:	f8c7 4814 	str.w	r4, [r7, #2068]	@ 0x814
 80134fe:	f8c7 6810 	str.w	r6, [r7, #2064]	@ 0x810
 8013502:	f8c7 5828 	str.w	r5, [r7, #2088]	@ 0x828
 8013506:	f000 fc2b 	bl	8013d60 <rmw_uros_epoch_nanos>
 801350a:	f507 6202 	add.w	r2, r7, #2080	@ 0x820
 801350e:	2304      	movs	r3, #4
 8013510:	e942 0102 	strd	r0, r1, [r2, #-8]
 8013514:	f887 3820 	strb.w	r3, [r7, #2080]	@ 0x820
 8013518:	b014      	add	sp, #80	@ 0x50
 801351a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801351e:	bf00      	nop
 8013520:	20009244 	.word	0x20009244
 8013524:	2000db54 	.word	0x2000db54

08013528 <get_memory>:
 8013528:	4603      	mov	r3, r0
 801352a:	6840      	ldr	r0, [r0, #4]
 801352c:	b158      	cbz	r0, 8013546 <get_memory+0x1e>
 801352e:	6842      	ldr	r2, [r0, #4]
 8013530:	605a      	str	r2, [r3, #4]
 8013532:	b10a      	cbz	r2, 8013538 <get_memory+0x10>
 8013534:	2100      	movs	r1, #0
 8013536:	6011      	str	r1, [r2, #0]
 8013538:	681a      	ldr	r2, [r3, #0]
 801353a:	6042      	str	r2, [r0, #4]
 801353c:	b102      	cbz	r2, 8013540 <get_memory+0x18>
 801353e:	6010      	str	r0, [r2, #0]
 8013540:	2200      	movs	r2, #0
 8013542:	6002      	str	r2, [r0, #0]
 8013544:	6018      	str	r0, [r3, #0]
 8013546:	4770      	bx	lr

08013548 <put_memory>:
 8013548:	680b      	ldr	r3, [r1, #0]
 801354a:	b10b      	cbz	r3, 8013550 <put_memory+0x8>
 801354c:	684a      	ldr	r2, [r1, #4]
 801354e:	605a      	str	r2, [r3, #4]
 8013550:	684a      	ldr	r2, [r1, #4]
 8013552:	b102      	cbz	r2, 8013556 <put_memory+0xe>
 8013554:	6013      	str	r3, [r2, #0]
 8013556:	6803      	ldr	r3, [r0, #0]
 8013558:	428b      	cmp	r3, r1
 801355a:	6843      	ldr	r3, [r0, #4]
 801355c:	bf08      	it	eq
 801355e:	6002      	streq	r2, [r0, #0]
 8013560:	604b      	str	r3, [r1, #4]
 8013562:	b103      	cbz	r3, 8013566 <put_memory+0x1e>
 8013564:	6019      	str	r1, [r3, #0]
 8013566:	2300      	movs	r3, #0
 8013568:	600b      	str	r3, [r1, #0]
 801356a:	6041      	str	r1, [r0, #4]
 801356c:	4770      	bx	lr
 801356e:	bf00      	nop

08013570 <rmw_destroy_client>:
 8013570:	b570      	push	{r4, r5, r6, lr}
 8013572:	b128      	cbz	r0, 8013580 <rmw_destroy_client+0x10>
 8013574:	4604      	mov	r4, r0
 8013576:	6800      	ldr	r0, [r0, #0]
 8013578:	460d      	mov	r5, r1
 801357a:	f7f8 f8d3 	bl	800b724 <is_uxrce_rmw_identifier_valid>
 801357e:	b910      	cbnz	r0, 8013586 <rmw_destroy_client+0x16>
 8013580:	2401      	movs	r4, #1
 8013582:	4620      	mov	r0, r4
 8013584:	bd70      	pop	{r4, r5, r6, pc}
 8013586:	6863      	ldr	r3, [r4, #4]
 8013588:	2b00      	cmp	r3, #0
 801358a:	d0f9      	beq.n	8013580 <rmw_destroy_client+0x10>
 801358c:	2d00      	cmp	r5, #0
 801358e:	d0f7      	beq.n	8013580 <rmw_destroy_client+0x10>
 8013590:	6828      	ldr	r0, [r5, #0]
 8013592:	f7f8 f8c7 	bl	800b724 <is_uxrce_rmw_identifier_valid>
 8013596:	2800      	cmp	r0, #0
 8013598:	d0f2      	beq.n	8013580 <rmw_destroy_client+0x10>
 801359a:	686e      	ldr	r6, [r5, #4]
 801359c:	2e00      	cmp	r6, #0
 801359e:	d0ef      	beq.n	8013580 <rmw_destroy_client+0x10>
 80135a0:	6864      	ldr	r4, [r4, #4]
 80135a2:	6932      	ldr	r2, [r6, #16]
 80135a4:	6920      	ldr	r0, [r4, #16]
 80135a6:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 80135aa:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 80135ae:	6819      	ldr	r1, [r3, #0]
 80135b0:	f7f9 fd7c 	bl	800d0ac <uxr_buffer_cancel_data>
 80135b4:	4602      	mov	r2, r0
 80135b6:	6920      	ldr	r0, [r4, #16]
 80135b8:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 80135bc:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 80135c0:	f7f8 f830 	bl	800b624 <run_xrce_session>
 80135c4:	6920      	ldr	r0, [r4, #16]
 80135c6:	6932      	ldr	r2, [r6, #16]
 80135c8:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 80135cc:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 80135d0:	6819      	ldr	r1, [r3, #0]
 80135d2:	f7f9 fae3 	bl	800cb9c <uxr_buffer_delete_entity>
 80135d6:	4602      	mov	r2, r0
 80135d8:	6920      	ldr	r0, [r4, #16]
 80135da:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 80135de:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 80135e2:	f7f8 f81f 	bl	800b624 <run_xrce_session>
 80135e6:	2800      	cmp	r0, #0
 80135e8:	4628      	mov	r0, r5
 80135ea:	bf14      	ite	ne
 80135ec:	2400      	movne	r4, #0
 80135ee:	2402      	moveq	r4, #2
 80135f0:	f7f7 ff00 	bl	800b3f4 <rmw_uxrce_fini_client_memory>
 80135f4:	e7c5      	b.n	8013582 <rmw_destroy_client+0x12>
 80135f6:	bf00      	nop

080135f8 <rmw_get_implementation_identifier>:
 80135f8:	4b01      	ldr	r3, [pc, #4]	@ (8013600 <rmw_get_implementation_identifier+0x8>)
 80135fa:	6818      	ldr	r0, [r3, #0]
 80135fc:	4770      	bx	lr
 80135fe:	bf00      	nop
 8013600:	0801780c 	.word	0x0801780c

08013604 <create_topic>:
 8013604:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013608:	4605      	mov	r5, r0
 801360a:	b084      	sub	sp, #16
 801360c:	4822      	ldr	r0, [pc, #136]	@ (8013698 <create_topic+0x94>)
 801360e:	460f      	mov	r7, r1
 8013610:	4616      	mov	r6, r2
 8013612:	f7ff ff89 	bl	8013528 <get_memory>
 8013616:	4604      	mov	r4, r0
 8013618:	2800      	cmp	r0, #0
 801361a:	d039      	beq.n	8013690 <create_topic+0x8c>
 801361c:	692b      	ldr	r3, [r5, #16]
 801361e:	6884      	ldr	r4, [r0, #8]
 8013620:	f8df 807c 	ldr.w	r8, [pc, #124]	@ 80136a0 <create_topic+0x9c>
 8013624:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8013628:	e9c4 6505 	strd	r6, r5, [r4, #20]
 801362c:	f8b3 0596 	ldrh.w	r0, [r3, #1430]	@ 0x596
 8013630:	1c42      	adds	r2, r0, #1
 8013632:	2102      	movs	r1, #2
 8013634:	f8a3 2596 	strh.w	r2, [r3, #1430]	@ 0x596
 8013638:	f7f9 fcce 	bl	800cfd8 <uxr_object_id>
 801363c:	223c      	movs	r2, #60	@ 0x3c
 801363e:	6120      	str	r0, [r4, #16]
 8013640:	4641      	mov	r1, r8
 8013642:	4638      	mov	r0, r7
 8013644:	f7f8 f854 	bl	800b6f0 <generate_topic_name>
 8013648:	b1f0      	cbz	r0, 8013688 <create_topic+0x84>
 801364a:	4f14      	ldr	r7, [pc, #80]	@ (801369c <create_topic+0x98>)
 801364c:	4630      	mov	r0, r6
 801364e:	2264      	movs	r2, #100	@ 0x64
 8013650:	4639      	mov	r1, r7
 8013652:	f7f8 f81d 	bl	800b690 <generate_type_name>
 8013656:	b1b8      	cbz	r0, 8013688 <create_topic+0x84>
 8013658:	6928      	ldr	r0, [r5, #16]
 801365a:	2306      	movs	r3, #6
 801365c:	f8d0 2384 	ldr.w	r2, [r0, #900]	@ 0x384
 8013660:	f8cd 8000 	str.w	r8, [sp]
 8013664:	e9cd 7301 	strd	r7, r3, [sp, #4]
 8013668:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 801366c:	6811      	ldr	r1, [r2, #0]
 801366e:	696b      	ldr	r3, [r5, #20]
 8013670:	6922      	ldr	r2, [r4, #16]
 8013672:	f7f9 fb11 	bl	800cc98 <uxr_buffer_create_topic_bin>
 8013676:	4602      	mov	r2, r0
 8013678:	6928      	ldr	r0, [r5, #16]
 801367a:	f8d0 338c 	ldr.w	r3, [r0, #908]	@ 0x38c
 801367e:	f8d0 1384 	ldr.w	r1, [r0, #900]	@ 0x384
 8013682:	f7f7 ffcf 	bl	800b624 <run_xrce_session>
 8013686:	b918      	cbnz	r0, 8013690 <create_topic+0x8c>
 8013688:	4620      	mov	r0, r4
 801368a:	f7f7 fec9 	bl	800b420 <rmw_uxrce_fini_topic_memory>
 801368e:	2400      	movs	r4, #0
 8013690:	4620      	mov	r0, r4
 8013692:	b004      	add	sp, #16
 8013694:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013698:	2000db74 	.word	0x2000db74
 801369c:	2000dc68 	.word	0x2000dc68
 80136a0:	2000dc2c 	.word	0x2000dc2c

080136a4 <destroy_topic>:
 80136a4:	b538      	push	{r3, r4, r5, lr}
 80136a6:	6985      	ldr	r5, [r0, #24]
 80136a8:	b1d5      	cbz	r5, 80136e0 <destroy_topic+0x3c>
 80136aa:	4604      	mov	r4, r0
 80136ac:	6928      	ldr	r0, [r5, #16]
 80136ae:	6922      	ldr	r2, [r4, #16]
 80136b0:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 80136b4:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 80136b8:	6819      	ldr	r1, [r3, #0]
 80136ba:	f7f9 fa6f 	bl	800cb9c <uxr_buffer_delete_entity>
 80136be:	4602      	mov	r2, r0
 80136c0:	6928      	ldr	r0, [r5, #16]
 80136c2:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 80136c6:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 80136ca:	f7f7 ffab 	bl	800b624 <run_xrce_session>
 80136ce:	2800      	cmp	r0, #0
 80136d0:	4620      	mov	r0, r4
 80136d2:	bf14      	ite	ne
 80136d4:	2400      	movne	r4, #0
 80136d6:	2402      	moveq	r4, #2
 80136d8:	f7f7 fea2 	bl	800b420 <rmw_uxrce_fini_topic_memory>
 80136dc:	4620      	mov	r0, r4
 80136de:	bd38      	pop	{r3, r4, r5, pc}
 80136e0:	2401      	movs	r4, #1
 80136e2:	4620      	mov	r0, r4
 80136e4:	bd38      	pop	{r3, r4, r5, pc}
 80136e6:	bf00      	nop

080136e8 <rmw_send_request>:
 80136e8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80136ec:	4604      	mov	r4, r0
 80136ee:	6800      	ldr	r0, [r0, #0]
 80136f0:	b08b      	sub	sp, #44	@ 0x2c
 80136f2:	460e      	mov	r6, r1
 80136f4:	4615      	mov	r5, r2
 80136f6:	b128      	cbz	r0, 8013704 <rmw_send_request+0x1c>
 80136f8:	4b21      	ldr	r3, [pc, #132]	@ (8013780 <rmw_send_request+0x98>)
 80136fa:	6819      	ldr	r1, [r3, #0]
 80136fc:	f7ec fd70 	bl	80001e0 <strcmp>
 8013700:	2800      	cmp	r0, #0
 8013702:	d139      	bne.n	8013778 <rmw_send_request+0x90>
 8013704:	6864      	ldr	r4, [r4, #4]
 8013706:	6963      	ldr	r3, [r4, #20]
 8013708:	f8d4 8078 	ldr.w	r8, [r4, #120]	@ 0x78
 801370c:	689b      	ldr	r3, [r3, #8]
 801370e:	4798      	blx	r3
 8013710:	f8d0 9004 	ldr.w	r9, [r0, #4]
 8013714:	4630      	mov	r0, r6
 8013716:	f8d9 3010 	ldr.w	r3, [r9, #16]
 801371a:	4798      	blx	r3
 801371c:	f8d8 3010 	ldr.w	r3, [r8, #16]
 8013720:	9000      	str	r0, [sp, #0]
 8013722:	6922      	ldr	r2, [r4, #16]
 8013724:	6f21      	ldr	r1, [r4, #112]	@ 0x70
 8013726:	f503 7028 	add.w	r0, r3, #672	@ 0x2a0
 801372a:	ab02      	add	r3, sp, #8
 801372c:	f001 fa44 	bl	8014bb8 <uxr_prepare_output_stream>
 8013730:	2700      	movs	r7, #0
 8013732:	6028      	str	r0, [r5, #0]
 8013734:	606f      	str	r7, [r5, #4]
 8013736:	b198      	cbz	r0, 8013760 <rmw_send_request+0x78>
 8013738:	f8d9 3008 	ldr.w	r3, [r9, #8]
 801373c:	a902      	add	r1, sp, #8
 801373e:	4630      	mov	r0, r6
 8013740:	4798      	blx	r3
 8013742:	f894 3072 	ldrb.w	r3, [r4, #114]	@ 0x72
 8013746:	f8d8 0010 	ldr.w	r0, [r8, #16]
 801374a:	2b01      	cmp	r3, #1
 801374c:	d00c      	beq.n	8013768 <rmw_send_request+0x80>
 801374e:	6f61      	ldr	r1, [r4, #116]	@ 0x74
 8013750:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8013754:	f7fa fa80 	bl	800dc58 <uxr_run_session_until_confirm_delivery>
 8013758:	4638      	mov	r0, r7
 801375a:	b00b      	add	sp, #44	@ 0x2c
 801375c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8013760:	2001      	movs	r0, #1
 8013762:	b00b      	add	sp, #44	@ 0x2c
 8013764:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8013768:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 801376c:	f7f9 feb4 	bl	800d4d8 <uxr_flash_output_streams>
 8013770:	4638      	mov	r0, r7
 8013772:	b00b      	add	sp, #44	@ 0x2c
 8013774:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8013778:	200c      	movs	r0, #12
 801377a:	b00b      	add	sp, #44	@ 0x2c
 801377c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8013780:	0801780c 	.word	0x0801780c

08013784 <rmw_take_request>:
 8013784:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8013788:	4605      	mov	r5, r0
 801378a:	6800      	ldr	r0, [r0, #0]
 801378c:	b089      	sub	sp, #36	@ 0x24
 801378e:	460c      	mov	r4, r1
 8013790:	4690      	mov	r8, r2
 8013792:	461e      	mov	r6, r3
 8013794:	b128      	cbz	r0, 80137a2 <rmw_take_request+0x1e>
 8013796:	4b28      	ldr	r3, [pc, #160]	@ (8013838 <rmw_take_request+0xb4>)
 8013798:	6819      	ldr	r1, [r3, #0]
 801379a:	f7ec fd21 	bl	80001e0 <strcmp>
 801379e:	2800      	cmp	r0, #0
 80137a0:	d146      	bne.n	8013830 <rmw_take_request+0xac>
 80137a2:	b10e      	cbz	r6, 80137a8 <rmw_take_request+0x24>
 80137a4:	2300      	movs	r3, #0
 80137a6:	7033      	strb	r3, [r6, #0]
 80137a8:	f8d5 9004 	ldr.w	r9, [r5, #4]
 80137ac:	f7f7 febc 	bl	800b528 <rmw_uxrce_clean_expired_static_input_buffer>
 80137b0:	4648      	mov	r0, r9
 80137b2:	f7f7 fe91 	bl	800b4d8 <rmw_uxrce_find_static_input_buffer_by_owner>
 80137b6:	4607      	mov	r7, r0
 80137b8:	b3b0      	cbz	r0, 8013828 <rmw_take_request+0xa4>
 80137ba:	6885      	ldr	r5, [r0, #8]
 80137bc:	f8d5 3838 	ldr.w	r3, [r5, #2104]	@ 0x838
 80137c0:	f8d5 283c 	ldr.w	r2, [r5, #2108]	@ 0x83c
 80137c4:	e9c4 2308 	strd	r2, r3, [r4, #32]
 80137c8:	f895 3837 	ldrb.w	r3, [r5, #2103]	@ 0x837
 80137cc:	7423      	strb	r3, [r4, #16]
 80137ce:	f8b5 3834 	ldrh.w	r3, [r5, #2100]	@ 0x834
 80137d2:	f895 2836 	ldrb.w	r2, [r5, #2102]	@ 0x836
 80137d6:	74e2      	strb	r2, [r4, #19]
 80137d8:	f8a4 3011 	strh.w	r3, [r4, #17]
 80137dc:	f8d5 2828 	ldr.w	r2, [r5, #2088]	@ 0x828
 80137e0:	f8d5 382c 	ldr.w	r3, [r5, #2092]	@ 0x82c
 80137e4:	f8d5 1830 	ldr.w	r1, [r5, #2096]	@ 0x830
 80137e8:	61e1      	str	r1, [r4, #28]
 80137ea:	6162      	str	r2, [r4, #20]
 80137ec:	61a3      	str	r3, [r4, #24]
 80137ee:	f8d9 3014 	ldr.w	r3, [r9, #20]
 80137f2:	689b      	ldr	r3, [r3, #8]
 80137f4:	4798      	blx	r3
 80137f6:	6844      	ldr	r4, [r0, #4]
 80137f8:	f8d5 2810 	ldr.w	r2, [r5, #2064]	@ 0x810
 80137fc:	f105 0110 	add.w	r1, r5, #16
 8013800:	4668      	mov	r0, sp
 8013802:	f7f9 f95b 	bl	800cabc <ucdr_init_buffer>
 8013806:	68e3      	ldr	r3, [r4, #12]
 8013808:	4641      	mov	r1, r8
 801380a:	4668      	mov	r0, sp
 801380c:	4798      	blx	r3
 801380e:	4639      	mov	r1, r7
 8013810:	4604      	mov	r4, r0
 8013812:	480a      	ldr	r0, [pc, #40]	@ (801383c <rmw_take_request+0xb8>)
 8013814:	f7ff fe98 	bl	8013548 <put_memory>
 8013818:	b106      	cbz	r6, 801381c <rmw_take_request+0x98>
 801381a:	7034      	strb	r4, [r6, #0]
 801381c:	f084 0001 	eor.w	r0, r4, #1
 8013820:	b2c0      	uxtb	r0, r0
 8013822:	b009      	add	sp, #36	@ 0x24
 8013824:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8013828:	2001      	movs	r0, #1
 801382a:	b009      	add	sp, #36	@ 0x24
 801382c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8013830:	200c      	movs	r0, #12
 8013832:	b009      	add	sp, #36	@ 0x24
 8013834:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8013838:	0801780c 	.word	0x0801780c
 801383c:	2000db54 	.word	0x2000db54

08013840 <rmw_send_response>:
 8013840:	b5f0      	push	{r4, r5, r6, r7, lr}
 8013842:	4605      	mov	r5, r0
 8013844:	6800      	ldr	r0, [r0, #0]
 8013846:	b091      	sub	sp, #68	@ 0x44
 8013848:	460c      	mov	r4, r1
 801384a:	4616      	mov	r6, r2
 801384c:	b128      	cbz	r0, 801385a <rmw_send_response+0x1a>
 801384e:	4b29      	ldr	r3, [pc, #164]	@ (80138f4 <rmw_send_response+0xb4>)
 8013850:	6819      	ldr	r1, [r3, #0]
 8013852:	f7ec fcc5 	bl	80001e0 <strcmp>
 8013856:	2800      	cmp	r0, #0
 8013858:	d141      	bne.n	80138de <rmw_send_response+0x9e>
 801385a:	e9d4 2304 	ldrd	r2, r3, [r4, #16]
 801385e:	9306      	str	r3, [sp, #24]
 8013860:	4623      	mov	r3, r4
 8013862:	9207      	str	r2, [sp, #28]
 8013864:	f813 2b01 	ldrb.w	r2, [r3], #1
 8013868:	686d      	ldr	r5, [r5, #4]
 801386a:	789b      	ldrb	r3, [r3, #2]
 801386c:	68a1      	ldr	r1, [r4, #8]
 801386e:	f88d 2017 	strb.w	r2, [sp, #23]
 8013872:	f88d 3016 	strb.w	r3, [sp, #22]
 8013876:	68e2      	ldr	r2, [r4, #12]
 8013878:	f8b4 3001 	ldrh.w	r3, [r4, #1]
 801387c:	6860      	ldr	r0, [r4, #4]
 801387e:	f8ad 3014 	strh.w	r3, [sp, #20]
 8013882:	ab02      	add	r3, sp, #8
 8013884:	c307      	stmia	r3!, {r0, r1, r2}
 8013886:	696b      	ldr	r3, [r5, #20]
 8013888:	6faf      	ldr	r7, [r5, #120]	@ 0x78
 801388a:	68db      	ldr	r3, [r3, #12]
 801388c:	4798      	blx	r3
 801388e:	6844      	ldr	r4, [r0, #4]
 8013890:	4630      	mov	r0, r6
 8013892:	6923      	ldr	r3, [r4, #16]
 8013894:	4798      	blx	r3
 8013896:	f100 0318 	add.w	r3, r0, #24
 801389a:	6938      	ldr	r0, [r7, #16]
 801389c:	9300      	str	r3, [sp, #0]
 801389e:	692a      	ldr	r2, [r5, #16]
 80138a0:	6f29      	ldr	r1, [r5, #112]	@ 0x70
 80138a2:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 80138a6:	ab08      	add	r3, sp, #32
 80138a8:	f001 f986 	bl	8014bb8 <uxr_prepare_output_stream>
 80138ac:	b910      	cbnz	r0, 80138b4 <rmw_send_response+0x74>
 80138ae:	2001      	movs	r0, #1
 80138b0:	b011      	add	sp, #68	@ 0x44
 80138b2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80138b4:	a902      	add	r1, sp, #8
 80138b6:	a808      	add	r0, sp, #32
 80138b8:	f7fc fb24 	bl	800ff04 <uxr_serialize_SampleIdentity>
 80138bc:	68a3      	ldr	r3, [r4, #8]
 80138be:	a908      	add	r1, sp, #32
 80138c0:	4630      	mov	r0, r6
 80138c2:	4798      	blx	r3
 80138c4:	f895 3072 	ldrb.w	r3, [r5, #114]	@ 0x72
 80138c8:	6938      	ldr	r0, [r7, #16]
 80138ca:	2b01      	cmp	r3, #1
 80138cc:	d00a      	beq.n	80138e4 <rmw_send_response+0xa4>
 80138ce:	6f69      	ldr	r1, [r5, #116]	@ 0x74
 80138d0:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 80138d4:	f7fa f9c0 	bl	800dc58 <uxr_run_session_until_confirm_delivery>
 80138d8:	2000      	movs	r0, #0
 80138da:	b011      	add	sp, #68	@ 0x44
 80138dc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80138de:	200c      	movs	r0, #12
 80138e0:	b011      	add	sp, #68	@ 0x44
 80138e2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80138e4:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 80138e8:	f7f9 fdf6 	bl	800d4d8 <uxr_flash_output_streams>
 80138ec:	2000      	movs	r0, #0
 80138ee:	b011      	add	sp, #68	@ 0x44
 80138f0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80138f2:	bf00      	nop
 80138f4:	0801780c 	.word	0x0801780c

080138f8 <rmw_take_response>:
 80138f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80138fc:	4604      	mov	r4, r0
 80138fe:	6800      	ldr	r0, [r0, #0]
 8013900:	b088      	sub	sp, #32
 8013902:	4688      	mov	r8, r1
 8013904:	4617      	mov	r7, r2
 8013906:	461d      	mov	r5, r3
 8013908:	b120      	cbz	r0, 8013914 <rmw_take_response+0x1c>
 801390a:	4b1e      	ldr	r3, [pc, #120]	@ (8013984 <rmw_take_response+0x8c>)
 801390c:	6819      	ldr	r1, [r3, #0]
 801390e:	f7ec fc67 	bl	80001e0 <strcmp>
 8013912:	bb78      	cbnz	r0, 8013974 <rmw_take_response+0x7c>
 8013914:	b10d      	cbz	r5, 801391a <rmw_take_response+0x22>
 8013916:	2300      	movs	r3, #0
 8013918:	702b      	strb	r3, [r5, #0]
 801391a:	6864      	ldr	r4, [r4, #4]
 801391c:	f7f7 fe04 	bl	800b528 <rmw_uxrce_clean_expired_static_input_buffer>
 8013920:	4620      	mov	r0, r4
 8013922:	f7f7 fdd9 	bl	800b4d8 <rmw_uxrce_find_static_input_buffer_by_owner>
 8013926:	4606      	mov	r6, r0
 8013928:	b340      	cbz	r0, 801397c <rmw_take_response+0x84>
 801392a:	6963      	ldr	r3, [r4, #20]
 801392c:	6884      	ldr	r4, [r0, #8]
 801392e:	68db      	ldr	r3, [r3, #12]
 8013930:	f504 6203 	add.w	r2, r4, #2096	@ 0x830
 8013934:	e952 0102 	ldrd	r0, r1, [r2, #-8]
 8013938:	e9c8 0108 	strd	r0, r1, [r8, #32]
 801393c:	4798      	blx	r3
 801393e:	f8d0 8004 	ldr.w	r8, [r0, #4]
 8013942:	f8d4 2810 	ldr.w	r2, [r4, #2064]	@ 0x810
 8013946:	f104 0110 	add.w	r1, r4, #16
 801394a:	4668      	mov	r0, sp
 801394c:	f7f9 f8b6 	bl	800cabc <ucdr_init_buffer>
 8013950:	4639      	mov	r1, r7
 8013952:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8013956:	4668      	mov	r0, sp
 8013958:	4798      	blx	r3
 801395a:	4631      	mov	r1, r6
 801395c:	4604      	mov	r4, r0
 801395e:	480a      	ldr	r0, [pc, #40]	@ (8013988 <rmw_take_response+0x90>)
 8013960:	f7ff fdf2 	bl	8013548 <put_memory>
 8013964:	b105      	cbz	r5, 8013968 <rmw_take_response+0x70>
 8013966:	702c      	strb	r4, [r5, #0]
 8013968:	f084 0001 	eor.w	r0, r4, #1
 801396c:	b2c0      	uxtb	r0, r0
 801396e:	b008      	add	sp, #32
 8013970:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013974:	200c      	movs	r0, #12
 8013976:	b008      	add	sp, #32
 8013978:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801397c:	2001      	movs	r0, #1
 801397e:	b008      	add	sp, #32
 8013980:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013984:	0801780c 	.word	0x0801780c
 8013988:	2000db54 	.word	0x2000db54

0801398c <rmw_take_with_info>:
 801398c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801398e:	4604      	mov	r4, r0
 8013990:	6800      	ldr	r0, [r0, #0]
 8013992:	b089      	sub	sp, #36	@ 0x24
 8013994:	460f      	mov	r7, r1
 8013996:	4615      	mov	r5, r2
 8013998:	b128      	cbz	r0, 80139a6 <rmw_take_with_info+0x1a>
 801399a:	4b24      	ldr	r3, [pc, #144]	@ (8013a2c <rmw_take_with_info+0xa0>)
 801399c:	6819      	ldr	r1, [r3, #0]
 801399e:	f7ec fc1f 	bl	80001e0 <strcmp>
 80139a2:	2800      	cmp	r0, #0
 80139a4:	d13e      	bne.n	8013a24 <rmw_take_with_info+0x98>
 80139a6:	b305      	cbz	r5, 80139ea <rmw_take_with_info+0x5e>
 80139a8:	6864      	ldr	r4, [r4, #4]
 80139aa:	2300      	movs	r3, #0
 80139ac:	702b      	strb	r3, [r5, #0]
 80139ae:	f7f7 fdbb 	bl	800b528 <rmw_uxrce_clean_expired_static_input_buffer>
 80139b2:	4620      	mov	r0, r4
 80139b4:	f7f7 fd90 	bl	800b4d8 <rmw_uxrce_find_static_input_buffer_by_owner>
 80139b8:	4606      	mov	r6, r0
 80139ba:	b1f0      	cbz	r0, 80139fa <rmw_take_with_info+0x6e>
 80139bc:	6881      	ldr	r1, [r0, #8]
 80139be:	4668      	mov	r0, sp
 80139c0:	f8d1 2810 	ldr.w	r2, [r1, #2064]	@ 0x810
 80139c4:	3110      	adds	r1, #16
 80139c6:	f7f9 f879 	bl	800cabc <ucdr_init_buffer>
 80139ca:	69a3      	ldr	r3, [r4, #24]
 80139cc:	4639      	mov	r1, r7
 80139ce:	68db      	ldr	r3, [r3, #12]
 80139d0:	4668      	mov	r0, sp
 80139d2:	4798      	blx	r3
 80139d4:	4631      	mov	r1, r6
 80139d6:	4604      	mov	r4, r0
 80139d8:	4815      	ldr	r0, [pc, #84]	@ (8013a30 <rmw_take_with_info+0xa4>)
 80139da:	f7ff fdb5 	bl	8013548 <put_memory>
 80139de:	702c      	strb	r4, [r5, #0]
 80139e0:	f084 0001 	eor.w	r0, r4, #1
 80139e4:	b2c0      	uxtb	r0, r0
 80139e6:	b009      	add	sp, #36	@ 0x24
 80139e8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80139ea:	6864      	ldr	r4, [r4, #4]
 80139ec:	f7f7 fd9c 	bl	800b528 <rmw_uxrce_clean_expired_static_input_buffer>
 80139f0:	4620      	mov	r0, r4
 80139f2:	f7f7 fd71 	bl	800b4d8 <rmw_uxrce_find_static_input_buffer_by_owner>
 80139f6:	4605      	mov	r5, r0
 80139f8:	b910      	cbnz	r0, 8013a00 <rmw_take_with_info+0x74>
 80139fa:	2001      	movs	r0, #1
 80139fc:	b009      	add	sp, #36	@ 0x24
 80139fe:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8013a00:	68a9      	ldr	r1, [r5, #8]
 8013a02:	4668      	mov	r0, sp
 8013a04:	f8d1 2810 	ldr.w	r2, [r1, #2064]	@ 0x810
 8013a08:	3110      	adds	r1, #16
 8013a0a:	f7f9 f857 	bl	800cabc <ucdr_init_buffer>
 8013a0e:	69a3      	ldr	r3, [r4, #24]
 8013a10:	4639      	mov	r1, r7
 8013a12:	68db      	ldr	r3, [r3, #12]
 8013a14:	4668      	mov	r0, sp
 8013a16:	4798      	blx	r3
 8013a18:	4629      	mov	r1, r5
 8013a1a:	4604      	mov	r4, r0
 8013a1c:	4804      	ldr	r0, [pc, #16]	@ (8013a30 <rmw_take_with_info+0xa4>)
 8013a1e:	f7ff fd93 	bl	8013548 <put_memory>
 8013a22:	e7dd      	b.n	80139e0 <rmw_take_with_info+0x54>
 8013a24:	200c      	movs	r0, #12
 8013a26:	b009      	add	sp, #36	@ 0x24
 8013a28:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8013a2a:	bf00      	nop
 8013a2c:	0801780c 	.word	0x0801780c
 8013a30:	2000db54 	.word	0x2000db54

08013a34 <rmw_wait>:
 8013a34:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8013a38:	b089      	sub	sp, #36	@ 0x24
 8013a3a:	4605      	mov	r5, r0
 8013a3c:	9c12      	ldr	r4, [sp, #72]	@ 0x48
 8013a3e:	460e      	mov	r6, r1
 8013a40:	4698      	mov	r8, r3
 8013a42:	4691      	mov	r9, r2
 8013a44:	2a00      	cmp	r2, #0
 8013a46:	f000 810a 	beq.w	8013c5e <rmw_wait+0x22a>
 8013a4a:	b16c      	cbz	r4, 8013a68 <rmw_wait+0x34>
 8013a4c:	4bae      	ldr	r3, [pc, #696]	@ (8013d08 <rmw_wait+0x2d4>)
 8013a4e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8013a50:	af04      	add	r7, sp, #16
 8013a52:	e887 000f 	stmia.w	r7, {r0, r1, r2, r3}
 8013a56:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 8013a5a:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8013a5e:	f7ff faaf 	bl	8012fc0 <rmw_time_equal>
 8013a62:	2800      	cmp	r0, #0
 8013a64:	f000 8127 	beq.w	8013cb6 <rmw_wait+0x282>
 8013a68:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 8013a6c:	f7f7 fd5c 	bl	800b528 <rmw_uxrce_clean_expired_static_input_buffer>
 8013a70:	4ba6      	ldr	r3, [pc, #664]	@ (8013d0c <rmw_wait+0x2d8>)
 8013a72:	681c      	ldr	r4, [r3, #0]
 8013a74:	b14c      	cbz	r4, 8013a8a <rmw_wait+0x56>
 8013a76:	4623      	mov	r3, r4
 8013a78:	2100      	movs	r1, #0
 8013a7a:	e9d3 3201 	ldrd	r3, r2, [r3, #4]
 8013a7e:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8013a82:	f882 15a4 	strb.w	r1, [r2, #1444]	@ 0x5a4
 8013a86:	2b00      	cmp	r3, #0
 8013a88:	d1f7      	bne.n	8013a7a <rmw_wait+0x46>
 8013a8a:	f1b9 0f00 	cmp.w	r9, #0
 8013a8e:	d011      	beq.n	8013ab4 <rmw_wait+0x80>
 8013a90:	f8d9 1000 	ldr.w	r1, [r9]
 8013a94:	b171      	cbz	r1, 8013ab4 <rmw_wait+0x80>
 8013a96:	f8d9 c004 	ldr.w	ip, [r9, #4]
 8013a9a:	2300      	movs	r3, #0
 8013a9c:	2001      	movs	r0, #1
 8013a9e:	f85c 2023 	ldr.w	r2, [ip, r3, lsl #2]
 8013aa2:	6f92      	ldr	r2, [r2, #120]	@ 0x78
 8013aa4:	6912      	ldr	r2, [r2, #16]
 8013aa6:	3301      	adds	r3, #1
 8013aa8:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8013aac:	4299      	cmp	r1, r3
 8013aae:	f882 05a4 	strb.w	r0, [r2, #1444]	@ 0x5a4
 8013ab2:	d1f4      	bne.n	8013a9e <rmw_wait+0x6a>
 8013ab4:	f1b8 0f00 	cmp.w	r8, #0
 8013ab8:	d011      	beq.n	8013ade <rmw_wait+0xaa>
 8013aba:	f8d8 1000 	ldr.w	r1, [r8]
 8013abe:	b171      	cbz	r1, 8013ade <rmw_wait+0xaa>
 8013ac0:	f8d8 c004 	ldr.w	ip, [r8, #4]
 8013ac4:	2300      	movs	r3, #0
 8013ac6:	2001      	movs	r0, #1
 8013ac8:	f85c 2023 	ldr.w	r2, [ip, r3, lsl #2]
 8013acc:	6f92      	ldr	r2, [r2, #120]	@ 0x78
 8013ace:	6912      	ldr	r2, [r2, #16]
 8013ad0:	3301      	adds	r3, #1
 8013ad2:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8013ad6:	4299      	cmp	r1, r3
 8013ad8:	f882 05a4 	strb.w	r0, [r2, #1444]	@ 0x5a4
 8013adc:	d1f4      	bne.n	8013ac8 <rmw_wait+0x94>
 8013ade:	b185      	cbz	r5, 8013b02 <rmw_wait+0xce>
 8013ae0:	6829      	ldr	r1, [r5, #0]
 8013ae2:	b171      	cbz	r1, 8013b02 <rmw_wait+0xce>
 8013ae4:	f8d5 c004 	ldr.w	ip, [r5, #4]
 8013ae8:	2300      	movs	r3, #0
 8013aea:	2001      	movs	r0, #1
 8013aec:	f85c 2023 	ldr.w	r2, [ip, r3, lsl #2]
 8013af0:	6a12      	ldr	r2, [r2, #32]
 8013af2:	6912      	ldr	r2, [r2, #16]
 8013af4:	3301      	adds	r3, #1
 8013af6:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8013afa:	4299      	cmp	r1, r3
 8013afc:	f882 05a4 	strb.w	r0, [r2, #1444]	@ 0x5a4
 8013b00:	d1f4      	bne.n	8013aec <rmw_wait+0xb8>
 8013b02:	b34c      	cbz	r4, 8013b58 <rmw_wait+0x124>
 8013b04:	4622      	mov	r2, r4
 8013b06:	2300      	movs	r3, #0
 8013b08:	e9d2 2101 	ldrd	r2, r1, [r2, #4]
 8013b0c:	f501 5180 	add.w	r1, r1, #4096	@ 0x1000
 8013b10:	f891 15a4 	ldrb.w	r1, [r1, #1444]	@ 0x5a4
 8013b14:	440b      	add	r3, r1
 8013b16:	b2db      	uxtb	r3, r3
 8013b18:	2a00      	cmp	r2, #0
 8013b1a:	d1f5      	bne.n	8013b08 <rmw_wait+0xd4>
 8013b1c:	2b00      	cmp	r3, #0
 8013b1e:	f000 8084 	beq.w	8013c2a <rmw_wait+0x1f6>
 8013b22:	1c7a      	adds	r2, r7, #1
 8013b24:	d00d      	beq.n	8013b42 <rmw_wait+0x10e>
 8013b26:	ee07 7a90 	vmov	s15, r7
 8013b2a:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8013b2e:	ee07 3a90 	vmov	s15, r3
 8013b32:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8013b36:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8013b3a:	eefd 7ac7 	vcvt.s32.f32	s15, s14
 8013b3e:	ee17 7a90 	vmov	r7, s15
 8013b42:	68a0      	ldr	r0, [r4, #8]
 8013b44:	f500 5380 	add.w	r3, r0, #4096	@ 0x1000
 8013b48:	f893 35a4 	ldrb.w	r3, [r3, #1444]	@ 0x5a4
 8013b4c:	2b00      	cmp	r3, #0
 8013b4e:	f040 8090 	bne.w	8013c72 <rmw_wait+0x23e>
 8013b52:	6864      	ldr	r4, [r4, #4]
 8013b54:	2c00      	cmp	r4, #0
 8013b56:	d1f4      	bne.n	8013b42 <rmw_wait+0x10e>
 8013b58:	f1b9 0f00 	cmp.w	r9, #0
 8013b5c:	f000 80bc 	beq.w	8013cd8 <rmw_wait+0x2a4>
 8013b60:	f8d9 7000 	ldr.w	r7, [r9]
 8013b64:	2f00      	cmp	r7, #0
 8013b66:	f000 808e 	beq.w	8013c86 <rmw_wait+0x252>
 8013b6a:	2400      	movs	r4, #0
 8013b6c:	4627      	mov	r7, r4
 8013b6e:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8013b72:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8013b76:	f7f7 fcaf 	bl	800b4d8 <rmw_uxrce_find_static_input_buffer_by_owner>
 8013b7a:	2800      	cmp	r0, #0
 8013b7c:	d05f      	beq.n	8013c3e <rmw_wait+0x20a>
 8013b7e:	f8d9 3000 	ldr.w	r3, [r9]
 8013b82:	3401      	adds	r4, #1
 8013b84:	42a3      	cmp	r3, r4
 8013b86:	f04f 0701 	mov.w	r7, #1
 8013b8a:	d8f0      	bhi.n	8013b6e <rmw_wait+0x13a>
 8013b8c:	f1b8 0f00 	cmp.w	r8, #0
 8013b90:	d012      	beq.n	8013bb8 <rmw_wait+0x184>
 8013b92:	f8d8 3000 	ldr.w	r3, [r8]
 8013b96:	b17b      	cbz	r3, 8013bb8 <rmw_wait+0x184>
 8013b98:	2400      	movs	r4, #0
 8013b9a:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8013b9e:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8013ba2:	f7f7 fc99 	bl	800b4d8 <rmw_uxrce_find_static_input_buffer_by_owner>
 8013ba6:	2800      	cmp	r0, #0
 8013ba8:	d051      	beq.n	8013c4e <rmw_wait+0x21a>
 8013baa:	f8d8 3000 	ldr.w	r3, [r8]
 8013bae:	3401      	adds	r4, #1
 8013bb0:	42a3      	cmp	r3, r4
 8013bb2:	f04f 0701 	mov.w	r7, #1
 8013bb6:	d8f0      	bhi.n	8013b9a <rmw_wait+0x166>
 8013bb8:	b1dd      	cbz	r5, 8013bf2 <rmw_wait+0x1be>
 8013bba:	682b      	ldr	r3, [r5, #0]
 8013bbc:	b1cb      	cbz	r3, 8013bf2 <rmw_wait+0x1be>
 8013bbe:	2400      	movs	r4, #0
 8013bc0:	686b      	ldr	r3, [r5, #4]
 8013bc2:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8013bc6:	f7f7 fc87 	bl	800b4d8 <rmw_uxrce_find_static_input_buffer_by_owner>
 8013bca:	b158      	cbz	r0, 8013be4 <rmw_wait+0x1b0>
 8013bcc:	682b      	ldr	r3, [r5, #0]
 8013bce:	3401      	adds	r4, #1
 8013bd0:	42a3      	cmp	r3, r4
 8013bd2:	d969      	bls.n	8013ca8 <rmw_wait+0x274>
 8013bd4:	686b      	ldr	r3, [r5, #4]
 8013bd6:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8013bda:	2701      	movs	r7, #1
 8013bdc:	f7f7 fc7c 	bl	800b4d8 <rmw_uxrce_find_static_input_buffer_by_owner>
 8013be0:	2800      	cmp	r0, #0
 8013be2:	d1f3      	bne.n	8013bcc <rmw_wait+0x198>
 8013be4:	e9d5 3200 	ldrd	r3, r2, [r5]
 8013be8:	f842 0024 	str.w	r0, [r2, r4, lsl #2]
 8013bec:	3401      	adds	r4, #1
 8013bee:	42a3      	cmp	r3, r4
 8013bf0:	d8e6      	bhi.n	8013bc0 <rmw_wait+0x18c>
 8013bf2:	b1a6      	cbz	r6, 8013c1e <rmw_wait+0x1ea>
 8013bf4:	6834      	ldr	r4, [r6, #0]
 8013bf6:	b194      	cbz	r4, 8013c1e <rmw_wait+0x1ea>
 8013bf8:	2300      	movs	r3, #0
 8013bfa:	461d      	mov	r5, r3
 8013bfc:	e004      	b.n	8013c08 <rmw_wait+0x1d4>
 8013bfe:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
 8013c02:	3301      	adds	r3, #1
 8013c04:	42a3      	cmp	r3, r4
 8013c06:	d00a      	beq.n	8013c1e <rmw_wait+0x1ea>
 8013c08:	6870      	ldr	r0, [r6, #4]
 8013c0a:	f850 1023 	ldr.w	r1, [r0, r3, lsl #2]
 8013c0e:	7c0a      	ldrb	r2, [r1, #16]
 8013c10:	2a00      	cmp	r2, #0
 8013c12:	d0f4      	beq.n	8013bfe <rmw_wait+0x1ca>
 8013c14:	3301      	adds	r3, #1
 8013c16:	42a3      	cmp	r3, r4
 8013c18:	740d      	strb	r5, [r1, #16]
 8013c1a:	4617      	mov	r7, r2
 8013c1c:	d1f4      	bne.n	8013c08 <rmw_wait+0x1d4>
 8013c1e:	2f00      	cmp	r7, #0
 8013c20:	d03e      	beq.n	8013ca0 <rmw_wait+0x26c>
 8013c22:	2000      	movs	r0, #0
 8013c24:	b009      	add	sp, #36	@ 0x24
 8013c26:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8013c2a:	68a0      	ldr	r0, [r4, #8]
 8013c2c:	2100      	movs	r1, #0
 8013c2e:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8013c32:	f7f9 ffd7 	bl	800dbe4 <uxr_run_session_timeout>
 8013c36:	6864      	ldr	r4, [r4, #4]
 8013c38:	2c00      	cmp	r4, #0
 8013c3a:	d1f6      	bne.n	8013c2a <rmw_wait+0x1f6>
 8013c3c:	e78c      	b.n	8013b58 <rmw_wait+0x124>
 8013c3e:	e9d9 3200 	ldrd	r3, r2, [r9]
 8013c42:	f842 0024 	str.w	r0, [r2, r4, lsl #2]
 8013c46:	3401      	adds	r4, #1
 8013c48:	42a3      	cmp	r3, r4
 8013c4a:	d890      	bhi.n	8013b6e <rmw_wait+0x13a>
 8013c4c:	e79e      	b.n	8013b8c <rmw_wait+0x158>
 8013c4e:	e9d8 3200 	ldrd	r3, r2, [r8]
 8013c52:	f842 0024 	str.w	r0, [r2, r4, lsl #2]
 8013c56:	3401      	adds	r4, #1
 8013c58:	429c      	cmp	r4, r3
 8013c5a:	d39e      	bcc.n	8013b9a <rmw_wait+0x166>
 8013c5c:	e7ac      	b.n	8013bb8 <rmw_wait+0x184>
 8013c5e:	2b00      	cmp	r3, #0
 8013c60:	f47f aef3 	bne.w	8013a4a <rmw_wait+0x16>
 8013c64:	2800      	cmp	r0, #0
 8013c66:	f47f aef0 	bne.w	8013a4a <rmw_wait+0x16>
 8013c6a:	2900      	cmp	r1, #0
 8013c6c:	f47f aeed 	bne.w	8013a4a <rmw_wait+0x16>
 8013c70:	e7d7      	b.n	8013c22 <rmw_wait+0x1ee>
 8013c72:	4639      	mov	r1, r7
 8013c74:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8013c78:	f7f9 ffce 	bl	800dc18 <uxr_run_session_until_data>
 8013c7c:	6864      	ldr	r4, [r4, #4]
 8013c7e:	2c00      	cmp	r4, #0
 8013c80:	f47f af5f 	bne.w	8013b42 <rmw_wait+0x10e>
 8013c84:	e768      	b.n	8013b58 <rmw_wait+0x124>
 8013c86:	f1b8 0f00 	cmp.w	r8, #0
 8013c8a:	d032      	beq.n	8013cf2 <rmw_wait+0x2be>
 8013c8c:	f8d8 3000 	ldr.w	r3, [r8]
 8013c90:	2b00      	cmp	r3, #0
 8013c92:	d181      	bne.n	8013b98 <rmw_wait+0x164>
 8013c94:	461f      	mov	r7, r3
 8013c96:	2d00      	cmp	r5, #0
 8013c98:	d18f      	bne.n	8013bba <rmw_wait+0x186>
 8013c9a:	462f      	mov	r7, r5
 8013c9c:	2e00      	cmp	r6, #0
 8013c9e:	d1a9      	bne.n	8013bf4 <rmw_wait+0x1c0>
 8013ca0:	2002      	movs	r0, #2
 8013ca2:	b009      	add	sp, #36	@ 0x24
 8013ca4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8013ca8:	2e00      	cmp	r6, #0
 8013caa:	d0ba      	beq.n	8013c22 <rmw_wait+0x1ee>
 8013cac:	6834      	ldr	r4, [r6, #0]
 8013cae:	2701      	movs	r7, #1
 8013cb0:	2c00      	cmp	r4, #0
 8013cb2:	d1a1      	bne.n	8013bf8 <rmw_wait+0x1c4>
 8013cb4:	e7b5      	b.n	8013c22 <rmw_wait+0x1ee>
 8013cb6:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8013cba:	f7ff f9d5 	bl	8013068 <rmw_time_total_nsec>
 8013cbe:	2300      	movs	r3, #0
 8013cc0:	4a13      	ldr	r2, [pc, #76]	@ (8013d10 <rmw_wait+0x2dc>)
 8013cc2:	f7ec ff33 	bl	8000b2c <__aeabi_uldivmod>
 8013cc6:	f1b0 4f00 	cmp.w	r0, #2147483648	@ 0x80000000
 8013cca:	f171 0300 	sbcs.w	r3, r1, #0
 8013cce:	4607      	mov	r7, r0
 8013cd0:	bfa8      	it	ge
 8013cd2:	f06f 4700 	mvnge.w	r7, #2147483648	@ 0x80000000
 8013cd6:	e6c9      	b.n	8013a6c <rmw_wait+0x38>
 8013cd8:	f1b8 0f00 	cmp.w	r8, #0
 8013cdc:	d009      	beq.n	8013cf2 <rmw_wait+0x2be>
 8013cde:	f8d8 3000 	ldr.w	r3, [r8]
 8013ce2:	464f      	mov	r7, r9
 8013ce4:	2b00      	cmp	r3, #0
 8013ce6:	f47f af57 	bne.w	8013b98 <rmw_wait+0x164>
 8013cea:	2d00      	cmp	r5, #0
 8013cec:	f47f af65 	bne.w	8013bba <rmw_wait+0x186>
 8013cf0:	e7d3      	b.n	8013c9a <rmw_wait+0x266>
 8013cf2:	b17d      	cbz	r5, 8013d14 <rmw_wait+0x2e0>
 8013cf4:	682b      	ldr	r3, [r5, #0]
 8013cf6:	4647      	mov	r7, r8
 8013cf8:	2b00      	cmp	r3, #0
 8013cfa:	f47f af60 	bne.w	8013bbe <rmw_wait+0x18a>
 8013cfe:	2e00      	cmp	r6, #0
 8013d00:	f47f af78 	bne.w	8013bf4 <rmw_wait+0x1c0>
 8013d04:	e7cc      	b.n	8013ca0 <rmw_wait+0x26c>
 8013d06:	bf00      	nop
 8013d08:	08016c78 	.word	0x08016c78
 8013d0c:	2000db44 	.word	0x2000db44
 8013d10:	000f4240 	.word	0x000f4240
 8013d14:	2e00      	cmp	r6, #0
 8013d16:	d0c3      	beq.n	8013ca0 <rmw_wait+0x26c>
 8013d18:	6834      	ldr	r4, [r6, #0]
 8013d1a:	462f      	mov	r7, r5
 8013d1c:	2c00      	cmp	r4, #0
 8013d1e:	f47f af6b 	bne.w	8013bf8 <rmw_wait+0x1c4>
 8013d22:	e7bd      	b.n	8013ca0 <rmw_wait+0x26c>

08013d24 <rmw_create_wait_set>:
 8013d24:	b508      	push	{r3, lr}
 8013d26:	4803      	ldr	r0, [pc, #12]	@ (8013d34 <rmw_create_wait_set+0x10>)
 8013d28:	f7ff fbfe 	bl	8013528 <get_memory>
 8013d2c:	b108      	cbz	r0, 8013d32 <rmw_create_wait_set+0xe>
 8013d2e:	6880      	ldr	r0, [r0, #8]
 8013d30:	3010      	adds	r0, #16
 8013d32:	bd08      	pop	{r3, pc}
 8013d34:	2000db84 	.word	0x2000db84

08013d38 <rmw_destroy_wait_set>:
 8013d38:	b508      	push	{r3, lr}
 8013d3a:	4b08      	ldr	r3, [pc, #32]	@ (8013d5c <rmw_destroy_wait_set+0x24>)
 8013d3c:	6819      	ldr	r1, [r3, #0]
 8013d3e:	b911      	cbnz	r1, 8013d46 <rmw_destroy_wait_set+0xe>
 8013d40:	e00a      	b.n	8013d58 <rmw_destroy_wait_set+0x20>
 8013d42:	6849      	ldr	r1, [r1, #4]
 8013d44:	b141      	cbz	r1, 8013d58 <rmw_destroy_wait_set+0x20>
 8013d46:	688b      	ldr	r3, [r1, #8]
 8013d48:	3310      	adds	r3, #16
 8013d4a:	4298      	cmp	r0, r3
 8013d4c:	d1f9      	bne.n	8013d42 <rmw_destroy_wait_set+0xa>
 8013d4e:	4803      	ldr	r0, [pc, #12]	@ (8013d5c <rmw_destroy_wait_set+0x24>)
 8013d50:	f7ff fbfa 	bl	8013548 <put_memory>
 8013d54:	2000      	movs	r0, #0
 8013d56:	bd08      	pop	{r3, pc}
 8013d58:	2001      	movs	r0, #1
 8013d5a:	bd08      	pop	{r3, pc}
 8013d5c:	2000db84 	.word	0x2000db84

08013d60 <rmw_uros_epoch_nanos>:
 8013d60:	4b05      	ldr	r3, [pc, #20]	@ (8013d78 <rmw_uros_epoch_nanos+0x18>)
 8013d62:	681b      	ldr	r3, [r3, #0]
 8013d64:	b123      	cbz	r3, 8013d70 <rmw_uros_epoch_nanos+0x10>
 8013d66:	6898      	ldr	r0, [r3, #8]
 8013d68:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8013d6c:	f7f9 bbaa 	b.w	800d4c4 <uxr_epoch_nanos>
 8013d70:	2000      	movs	r0, #0
 8013d72:	2100      	movs	r1, #0
 8013d74:	4770      	bx	lr
 8013d76:	bf00      	nop
 8013d78:	2000db44 	.word	0x2000db44

08013d7c <rosidl_typesupport_c__get_message_typesupport_handle_function>:
 8013d7c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013d80:	6805      	ldr	r5, [r0, #0]
 8013d82:	4604      	mov	r4, r0
 8013d84:	4628      	mov	r0, r5
 8013d86:	460e      	mov	r6, r1
 8013d88:	f7ec fa2a 	bl	80001e0 <strcmp>
 8013d8c:	b1c8      	cbz	r0, 8013dc2 <rosidl_typesupport_c__get_message_typesupport_handle_function+0x46>
 8013d8e:	4b11      	ldr	r3, [pc, #68]	@ (8013dd4 <rosidl_typesupport_c__get_message_typesupport_handle_function+0x58>)
 8013d90:	681b      	ldr	r3, [r3, #0]
 8013d92:	429d      	cmp	r5, r3
 8013d94:	d112      	bne.n	8013dbc <rosidl_typesupport_c__get_message_typesupport_handle_function+0x40>
 8013d96:	f8d4 8004 	ldr.w	r8, [r4, #4]
 8013d9a:	f8d8 4000 	ldr.w	r4, [r8]
 8013d9e:	b16c      	cbz	r4, 8013dbc <rosidl_typesupport_c__get_message_typesupport_handle_function+0x40>
 8013da0:	f8d8 5008 	ldr.w	r5, [r8, #8]
 8013da4:	2700      	movs	r7, #0
 8013da6:	3d04      	subs	r5, #4
 8013da8:	f855 0f04 	ldr.w	r0, [r5, #4]!
 8013dac:	4631      	mov	r1, r6
 8013dae:	f7ec fa17 	bl	80001e0 <strcmp>
 8013db2:	00bb      	lsls	r3, r7, #2
 8013db4:	b140      	cbz	r0, 8013dc8 <rosidl_typesupport_c__get_message_typesupport_handle_function+0x4c>
 8013db6:	3701      	adds	r7, #1
 8013db8:	42bc      	cmp	r4, r7
 8013dba:	d1f5      	bne.n	8013da8 <rosidl_typesupport_c__get_message_typesupport_handle_function+0x2c>
 8013dbc:	2000      	movs	r0, #0
 8013dbe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013dc2:	4620      	mov	r0, r4
 8013dc4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013dc8:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8013dcc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8013dd0:	58d3      	ldr	r3, [r2, r3]
 8013dd2:	4718      	bx	r3
 8013dd4:	20000134 	.word	0x20000134

08013dd8 <std_msgs__msg__Float32__init>:
 8013dd8:	3800      	subs	r0, #0
 8013dda:	bf18      	it	ne
 8013ddc:	2001      	movne	r0, #1
 8013dde:	4770      	bx	lr

08013de0 <std_msgs__msg__Float32__fini>:
 8013de0:	4770      	bx	lr
 8013de2:	bf00      	nop

08013de4 <std_msgs__msg__Int32__init>:
 8013de4:	3800      	subs	r0, #0
 8013de6:	bf18      	it	ne
 8013de8:	2001      	movne	r0, #1
 8013dea:	4770      	bx	lr

08013dec <std_msgs__msg__Int32__fini>:
 8013dec:	4770      	bx	lr
 8013dee:	bf00      	nop

08013df0 <ucdr_serialize_endian_array_char>:
 8013df0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013df4:	4619      	mov	r1, r3
 8013df6:	461f      	mov	r7, r3
 8013df8:	4605      	mov	r5, r0
 8013dfa:	4690      	mov	r8, r2
 8013dfc:	f7f8 fe0a 	bl	800ca14 <ucdr_check_buffer_available_for>
 8013e00:	b9e0      	cbnz	r0, 8013e3c <ucdr_serialize_endian_array_char+0x4c>
 8013e02:	463e      	mov	r6, r7
 8013e04:	e009      	b.n	8013e1a <ucdr_serialize_endian_array_char+0x2a>
 8013e06:	68a8      	ldr	r0, [r5, #8]
 8013e08:	f001 ffe9 	bl	8015dde <memcpy>
 8013e0c:	68ab      	ldr	r3, [r5, #8]
 8013e0e:	6928      	ldr	r0, [r5, #16]
 8013e10:	4423      	add	r3, r4
 8013e12:	4420      	add	r0, r4
 8013e14:	1b36      	subs	r6, r6, r4
 8013e16:	60ab      	str	r3, [r5, #8]
 8013e18:	6128      	str	r0, [r5, #16]
 8013e1a:	4631      	mov	r1, r6
 8013e1c:	2201      	movs	r2, #1
 8013e1e:	4628      	mov	r0, r5
 8013e20:	f7f8 fe80 	bl	800cb24 <ucdr_check_final_buffer_behavior_array>
 8013e24:	1bb9      	subs	r1, r7, r6
 8013e26:	4441      	add	r1, r8
 8013e28:	4604      	mov	r4, r0
 8013e2a:	4602      	mov	r2, r0
 8013e2c:	2800      	cmp	r0, #0
 8013e2e:	d1ea      	bne.n	8013e06 <ucdr_serialize_endian_array_char+0x16>
 8013e30:	2301      	movs	r3, #1
 8013e32:	7da8      	ldrb	r0, [r5, #22]
 8013e34:	756b      	strb	r3, [r5, #21]
 8013e36:	4058      	eors	r0, r3
 8013e38:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013e3c:	463a      	mov	r2, r7
 8013e3e:	68a8      	ldr	r0, [r5, #8]
 8013e40:	4641      	mov	r1, r8
 8013e42:	f001 ffcc 	bl	8015dde <memcpy>
 8013e46:	68aa      	ldr	r2, [r5, #8]
 8013e48:	692b      	ldr	r3, [r5, #16]
 8013e4a:	443a      	add	r2, r7
 8013e4c:	443b      	add	r3, r7
 8013e4e:	60aa      	str	r2, [r5, #8]
 8013e50:	612b      	str	r3, [r5, #16]
 8013e52:	e7ed      	b.n	8013e30 <ucdr_serialize_endian_array_char+0x40>

08013e54 <ucdr_deserialize_endian_array_char>:
 8013e54:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013e58:	4619      	mov	r1, r3
 8013e5a:	461f      	mov	r7, r3
 8013e5c:	4605      	mov	r5, r0
 8013e5e:	4690      	mov	r8, r2
 8013e60:	f7f8 fdd8 	bl	800ca14 <ucdr_check_buffer_available_for>
 8013e64:	b9e0      	cbnz	r0, 8013ea0 <ucdr_deserialize_endian_array_char+0x4c>
 8013e66:	463e      	mov	r6, r7
 8013e68:	e009      	b.n	8013e7e <ucdr_deserialize_endian_array_char+0x2a>
 8013e6a:	68a9      	ldr	r1, [r5, #8]
 8013e6c:	f001 ffb7 	bl	8015dde <memcpy>
 8013e70:	68ab      	ldr	r3, [r5, #8]
 8013e72:	6928      	ldr	r0, [r5, #16]
 8013e74:	4423      	add	r3, r4
 8013e76:	4420      	add	r0, r4
 8013e78:	1b36      	subs	r6, r6, r4
 8013e7a:	60ab      	str	r3, [r5, #8]
 8013e7c:	6128      	str	r0, [r5, #16]
 8013e7e:	2201      	movs	r2, #1
 8013e80:	4631      	mov	r1, r6
 8013e82:	4628      	mov	r0, r5
 8013e84:	f7f8 fe4e 	bl	800cb24 <ucdr_check_final_buffer_behavior_array>
 8013e88:	4604      	mov	r4, r0
 8013e8a:	1bb8      	subs	r0, r7, r6
 8013e8c:	4440      	add	r0, r8
 8013e8e:	4622      	mov	r2, r4
 8013e90:	2c00      	cmp	r4, #0
 8013e92:	d1ea      	bne.n	8013e6a <ucdr_deserialize_endian_array_char+0x16>
 8013e94:	2301      	movs	r3, #1
 8013e96:	7da8      	ldrb	r0, [r5, #22]
 8013e98:	756b      	strb	r3, [r5, #21]
 8013e9a:	4058      	eors	r0, r3
 8013e9c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013ea0:	463a      	mov	r2, r7
 8013ea2:	68a9      	ldr	r1, [r5, #8]
 8013ea4:	4640      	mov	r0, r8
 8013ea6:	f001 ff9a 	bl	8015dde <memcpy>
 8013eaa:	68aa      	ldr	r2, [r5, #8]
 8013eac:	692b      	ldr	r3, [r5, #16]
 8013eae:	443a      	add	r2, r7
 8013eb0:	443b      	add	r3, r7
 8013eb2:	60aa      	str	r2, [r5, #8]
 8013eb4:	612b      	str	r3, [r5, #16]
 8013eb6:	e7ed      	b.n	8013e94 <ucdr_deserialize_endian_array_char+0x40>

08013eb8 <ucdr_serialize_array_uint8_t>:
 8013eb8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013ebc:	4688      	mov	r8, r1
 8013ebe:	4611      	mov	r1, r2
 8013ec0:	4617      	mov	r7, r2
 8013ec2:	4605      	mov	r5, r0
 8013ec4:	f7f8 fda6 	bl	800ca14 <ucdr_check_buffer_available_for>
 8013ec8:	b9e0      	cbnz	r0, 8013f04 <ucdr_serialize_array_uint8_t+0x4c>
 8013eca:	463e      	mov	r6, r7
 8013ecc:	e009      	b.n	8013ee2 <ucdr_serialize_array_uint8_t+0x2a>
 8013ece:	68a8      	ldr	r0, [r5, #8]
 8013ed0:	f001 ff85 	bl	8015dde <memcpy>
 8013ed4:	68aa      	ldr	r2, [r5, #8]
 8013ed6:	692b      	ldr	r3, [r5, #16]
 8013ed8:	4422      	add	r2, r4
 8013eda:	4423      	add	r3, r4
 8013edc:	1b36      	subs	r6, r6, r4
 8013ede:	60aa      	str	r2, [r5, #8]
 8013ee0:	612b      	str	r3, [r5, #16]
 8013ee2:	4631      	mov	r1, r6
 8013ee4:	2201      	movs	r2, #1
 8013ee6:	4628      	mov	r0, r5
 8013ee8:	f7f8 fe1c 	bl	800cb24 <ucdr_check_final_buffer_behavior_array>
 8013eec:	1bb9      	subs	r1, r7, r6
 8013eee:	4441      	add	r1, r8
 8013ef0:	4604      	mov	r4, r0
 8013ef2:	4602      	mov	r2, r0
 8013ef4:	2800      	cmp	r0, #0
 8013ef6:	d1ea      	bne.n	8013ece <ucdr_serialize_array_uint8_t+0x16>
 8013ef8:	2301      	movs	r3, #1
 8013efa:	7da8      	ldrb	r0, [r5, #22]
 8013efc:	756b      	strb	r3, [r5, #21]
 8013efe:	4058      	eors	r0, r3
 8013f00:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013f04:	463a      	mov	r2, r7
 8013f06:	68a8      	ldr	r0, [r5, #8]
 8013f08:	4641      	mov	r1, r8
 8013f0a:	f001 ff68 	bl	8015dde <memcpy>
 8013f0e:	68aa      	ldr	r2, [r5, #8]
 8013f10:	692b      	ldr	r3, [r5, #16]
 8013f12:	443a      	add	r2, r7
 8013f14:	443b      	add	r3, r7
 8013f16:	60aa      	str	r2, [r5, #8]
 8013f18:	612b      	str	r3, [r5, #16]
 8013f1a:	e7ed      	b.n	8013ef8 <ucdr_serialize_array_uint8_t+0x40>

08013f1c <ucdr_serialize_endian_array_uint8_t>:
 8013f1c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013f20:	4619      	mov	r1, r3
 8013f22:	461f      	mov	r7, r3
 8013f24:	4605      	mov	r5, r0
 8013f26:	4690      	mov	r8, r2
 8013f28:	f7f8 fd74 	bl	800ca14 <ucdr_check_buffer_available_for>
 8013f2c:	b9e0      	cbnz	r0, 8013f68 <ucdr_serialize_endian_array_uint8_t+0x4c>
 8013f2e:	463e      	mov	r6, r7
 8013f30:	e009      	b.n	8013f46 <ucdr_serialize_endian_array_uint8_t+0x2a>
 8013f32:	68a8      	ldr	r0, [r5, #8]
 8013f34:	f001 ff53 	bl	8015dde <memcpy>
 8013f38:	68ab      	ldr	r3, [r5, #8]
 8013f3a:	6928      	ldr	r0, [r5, #16]
 8013f3c:	4423      	add	r3, r4
 8013f3e:	4420      	add	r0, r4
 8013f40:	1b36      	subs	r6, r6, r4
 8013f42:	60ab      	str	r3, [r5, #8]
 8013f44:	6128      	str	r0, [r5, #16]
 8013f46:	4631      	mov	r1, r6
 8013f48:	2201      	movs	r2, #1
 8013f4a:	4628      	mov	r0, r5
 8013f4c:	f7f8 fdea 	bl	800cb24 <ucdr_check_final_buffer_behavior_array>
 8013f50:	1bb9      	subs	r1, r7, r6
 8013f52:	4441      	add	r1, r8
 8013f54:	4604      	mov	r4, r0
 8013f56:	4602      	mov	r2, r0
 8013f58:	2800      	cmp	r0, #0
 8013f5a:	d1ea      	bne.n	8013f32 <ucdr_serialize_endian_array_uint8_t+0x16>
 8013f5c:	2301      	movs	r3, #1
 8013f5e:	7da8      	ldrb	r0, [r5, #22]
 8013f60:	756b      	strb	r3, [r5, #21]
 8013f62:	4058      	eors	r0, r3
 8013f64:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013f68:	463a      	mov	r2, r7
 8013f6a:	68a8      	ldr	r0, [r5, #8]
 8013f6c:	4641      	mov	r1, r8
 8013f6e:	f001 ff36 	bl	8015dde <memcpy>
 8013f72:	68aa      	ldr	r2, [r5, #8]
 8013f74:	692b      	ldr	r3, [r5, #16]
 8013f76:	443a      	add	r2, r7
 8013f78:	443b      	add	r3, r7
 8013f7a:	60aa      	str	r2, [r5, #8]
 8013f7c:	612b      	str	r3, [r5, #16]
 8013f7e:	e7ed      	b.n	8013f5c <ucdr_serialize_endian_array_uint8_t+0x40>

08013f80 <ucdr_deserialize_array_uint8_t>:
 8013f80:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013f84:	4688      	mov	r8, r1
 8013f86:	4611      	mov	r1, r2
 8013f88:	4617      	mov	r7, r2
 8013f8a:	4605      	mov	r5, r0
 8013f8c:	f7f8 fd42 	bl	800ca14 <ucdr_check_buffer_available_for>
 8013f90:	b9e0      	cbnz	r0, 8013fcc <ucdr_deserialize_array_uint8_t+0x4c>
 8013f92:	463e      	mov	r6, r7
 8013f94:	e009      	b.n	8013faa <ucdr_deserialize_array_uint8_t+0x2a>
 8013f96:	68a9      	ldr	r1, [r5, #8]
 8013f98:	f001 ff21 	bl	8015dde <memcpy>
 8013f9c:	68aa      	ldr	r2, [r5, #8]
 8013f9e:	692b      	ldr	r3, [r5, #16]
 8013fa0:	4422      	add	r2, r4
 8013fa2:	4423      	add	r3, r4
 8013fa4:	1b36      	subs	r6, r6, r4
 8013fa6:	60aa      	str	r2, [r5, #8]
 8013fa8:	612b      	str	r3, [r5, #16]
 8013faa:	2201      	movs	r2, #1
 8013fac:	4631      	mov	r1, r6
 8013fae:	4628      	mov	r0, r5
 8013fb0:	f7f8 fdb8 	bl	800cb24 <ucdr_check_final_buffer_behavior_array>
 8013fb4:	4604      	mov	r4, r0
 8013fb6:	1bb8      	subs	r0, r7, r6
 8013fb8:	4440      	add	r0, r8
 8013fba:	4622      	mov	r2, r4
 8013fbc:	2c00      	cmp	r4, #0
 8013fbe:	d1ea      	bne.n	8013f96 <ucdr_deserialize_array_uint8_t+0x16>
 8013fc0:	2301      	movs	r3, #1
 8013fc2:	7da8      	ldrb	r0, [r5, #22]
 8013fc4:	756b      	strb	r3, [r5, #21]
 8013fc6:	4058      	eors	r0, r3
 8013fc8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013fcc:	463a      	mov	r2, r7
 8013fce:	68a9      	ldr	r1, [r5, #8]
 8013fd0:	4640      	mov	r0, r8
 8013fd2:	f001 ff04 	bl	8015dde <memcpy>
 8013fd6:	68aa      	ldr	r2, [r5, #8]
 8013fd8:	692b      	ldr	r3, [r5, #16]
 8013fda:	443a      	add	r2, r7
 8013fdc:	443b      	add	r3, r7
 8013fde:	60aa      	str	r2, [r5, #8]
 8013fe0:	612b      	str	r3, [r5, #16]
 8013fe2:	e7ed      	b.n	8013fc0 <ucdr_deserialize_array_uint8_t+0x40>

08013fe4 <ucdr_deserialize_endian_array_uint8_t>:
 8013fe4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013fe8:	4619      	mov	r1, r3
 8013fea:	461f      	mov	r7, r3
 8013fec:	4605      	mov	r5, r0
 8013fee:	4690      	mov	r8, r2
 8013ff0:	f7f8 fd10 	bl	800ca14 <ucdr_check_buffer_available_for>
 8013ff4:	b9e0      	cbnz	r0, 8014030 <ucdr_deserialize_endian_array_uint8_t+0x4c>
 8013ff6:	463e      	mov	r6, r7
 8013ff8:	e009      	b.n	801400e <ucdr_deserialize_endian_array_uint8_t+0x2a>
 8013ffa:	68a9      	ldr	r1, [r5, #8]
 8013ffc:	f001 feef 	bl	8015dde <memcpy>
 8014000:	68ab      	ldr	r3, [r5, #8]
 8014002:	6928      	ldr	r0, [r5, #16]
 8014004:	4423      	add	r3, r4
 8014006:	4420      	add	r0, r4
 8014008:	1b36      	subs	r6, r6, r4
 801400a:	60ab      	str	r3, [r5, #8]
 801400c:	6128      	str	r0, [r5, #16]
 801400e:	2201      	movs	r2, #1
 8014010:	4631      	mov	r1, r6
 8014012:	4628      	mov	r0, r5
 8014014:	f7f8 fd86 	bl	800cb24 <ucdr_check_final_buffer_behavior_array>
 8014018:	4604      	mov	r4, r0
 801401a:	1bb8      	subs	r0, r7, r6
 801401c:	4440      	add	r0, r8
 801401e:	4622      	mov	r2, r4
 8014020:	2c00      	cmp	r4, #0
 8014022:	d1ea      	bne.n	8013ffa <ucdr_deserialize_endian_array_uint8_t+0x16>
 8014024:	2301      	movs	r3, #1
 8014026:	7da8      	ldrb	r0, [r5, #22]
 8014028:	756b      	strb	r3, [r5, #21]
 801402a:	4058      	eors	r0, r3
 801402c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014030:	463a      	mov	r2, r7
 8014032:	68a9      	ldr	r1, [r5, #8]
 8014034:	4640      	mov	r0, r8
 8014036:	f001 fed2 	bl	8015dde <memcpy>
 801403a:	68aa      	ldr	r2, [r5, #8]
 801403c:	692b      	ldr	r3, [r5, #16]
 801403e:	443a      	add	r2, r7
 8014040:	443b      	add	r3, r7
 8014042:	60aa      	str	r2, [r5, #8]
 8014044:	612b      	str	r3, [r5, #16]
 8014046:	e7ed      	b.n	8014024 <ucdr_deserialize_endian_array_uint8_t+0x40>

08014048 <ucdr_serialize_sequence_char>:
 8014048:	b570      	push	{r4, r5, r6, lr}
 801404a:	4615      	mov	r5, r2
 801404c:	460e      	mov	r6, r1
 801404e:	7d01      	ldrb	r1, [r0, #20]
 8014050:	4604      	mov	r4, r0
 8014052:	f7f7 ff0d 	bl	800be70 <ucdr_serialize_endian_uint32_t>
 8014056:	b90d      	cbnz	r5, 801405c <ucdr_serialize_sequence_char+0x14>
 8014058:	2001      	movs	r0, #1
 801405a:	bd70      	pop	{r4, r5, r6, pc}
 801405c:	7d21      	ldrb	r1, [r4, #20]
 801405e:	462b      	mov	r3, r5
 8014060:	4632      	mov	r2, r6
 8014062:	4620      	mov	r0, r4
 8014064:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8014068:	f7ff bec2 	b.w	8013df0 <ucdr_serialize_endian_array_char>

0801406c <ucdr_deserialize_sequence_char>:
 801406c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014070:	461d      	mov	r5, r3
 8014072:	4616      	mov	r6, r2
 8014074:	460f      	mov	r7, r1
 8014076:	461a      	mov	r2, r3
 8014078:	7d01      	ldrb	r1, [r0, #20]
 801407a:	4604      	mov	r4, r0
 801407c:	f7f8 f820 	bl	800c0c0 <ucdr_deserialize_endian_uint32_t>
 8014080:	682b      	ldr	r3, [r5, #0]
 8014082:	429e      	cmp	r6, r3
 8014084:	bf3c      	itt	cc
 8014086:	2201      	movcc	r2, #1
 8014088:	75a2      	strbcc	r2, [r4, #22]
 801408a:	b913      	cbnz	r3, 8014092 <ucdr_deserialize_sequence_char+0x26>
 801408c:	2001      	movs	r0, #1
 801408e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014092:	7d21      	ldrb	r1, [r4, #20]
 8014094:	463a      	mov	r2, r7
 8014096:	4620      	mov	r0, r4
 8014098:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801409c:	f7ff beda 	b.w	8013e54 <ucdr_deserialize_endian_array_char>

080140a0 <ucdr_serialize_sequence_uint8_t>:
 80140a0:	b570      	push	{r4, r5, r6, lr}
 80140a2:	4615      	mov	r5, r2
 80140a4:	460e      	mov	r6, r1
 80140a6:	7d01      	ldrb	r1, [r0, #20]
 80140a8:	4604      	mov	r4, r0
 80140aa:	f7f7 fee1 	bl	800be70 <ucdr_serialize_endian_uint32_t>
 80140ae:	b90d      	cbnz	r5, 80140b4 <ucdr_serialize_sequence_uint8_t+0x14>
 80140b0:	2001      	movs	r0, #1
 80140b2:	bd70      	pop	{r4, r5, r6, pc}
 80140b4:	7d21      	ldrb	r1, [r4, #20]
 80140b6:	462b      	mov	r3, r5
 80140b8:	4632      	mov	r2, r6
 80140ba:	4620      	mov	r0, r4
 80140bc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80140c0:	f7ff bf2c 	b.w	8013f1c <ucdr_serialize_endian_array_uint8_t>

080140c4 <ucdr_deserialize_sequence_uint8_t>:
 80140c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80140c8:	461d      	mov	r5, r3
 80140ca:	4616      	mov	r6, r2
 80140cc:	460f      	mov	r7, r1
 80140ce:	461a      	mov	r2, r3
 80140d0:	7d01      	ldrb	r1, [r0, #20]
 80140d2:	4604      	mov	r4, r0
 80140d4:	f7f7 fff4 	bl	800c0c0 <ucdr_deserialize_endian_uint32_t>
 80140d8:	682b      	ldr	r3, [r5, #0]
 80140da:	429e      	cmp	r6, r3
 80140dc:	bf3c      	itt	cc
 80140de:	2201      	movcc	r2, #1
 80140e0:	75a2      	strbcc	r2, [r4, #22]
 80140e2:	b913      	cbnz	r3, 80140ea <ucdr_deserialize_sequence_uint8_t+0x26>
 80140e4:	2001      	movs	r0, #1
 80140e6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80140ea:	7d21      	ldrb	r1, [r4, #20]
 80140ec:	463a      	mov	r2, r7
 80140ee:	4620      	mov	r0, r4
 80140f0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80140f4:	f7ff bf76 	b.w	8013fe4 <ucdr_deserialize_endian_array_uint8_t>

080140f8 <ucdr_serialize_string>:
 80140f8:	b510      	push	{r4, lr}
 80140fa:	b082      	sub	sp, #8
 80140fc:	4604      	mov	r4, r0
 80140fe:	4608      	mov	r0, r1
 8014100:	9101      	str	r1, [sp, #4]
 8014102:	f7ec f877 	bl	80001f4 <strlen>
 8014106:	9901      	ldr	r1, [sp, #4]
 8014108:	1c42      	adds	r2, r0, #1
 801410a:	4620      	mov	r0, r4
 801410c:	b002      	add	sp, #8
 801410e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8014112:	f7ff bf99 	b.w	8014048 <ucdr_serialize_sequence_char>
 8014116:	bf00      	nop

08014118 <ucdr_deserialize_string>:
 8014118:	b500      	push	{lr}
 801411a:	b083      	sub	sp, #12
 801411c:	ab01      	add	r3, sp, #4
 801411e:	f7ff ffa5 	bl	801406c <ucdr_deserialize_sequence_char>
 8014122:	b003      	add	sp, #12
 8014124:	f85d fb04 	ldr.w	pc, [sp], #4

08014128 <uxr_init_input_best_effort_stream>:
 8014128:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 801412c:	8003      	strh	r3, [r0, #0]
 801412e:	4770      	bx	lr

08014130 <uxr_reset_input_best_effort_stream>:
 8014130:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8014134:	8003      	strh	r3, [r0, #0]
 8014136:	4770      	bx	lr

08014138 <uxr_receive_best_effort_message>:
 8014138:	b538      	push	{r3, r4, r5, lr}
 801413a:	4604      	mov	r4, r0
 801413c:	8800      	ldrh	r0, [r0, #0]
 801413e:	460d      	mov	r5, r1
 8014140:	f000 fd22 	bl	8014b88 <uxr_seq_num_cmp>
 8014144:	4603      	mov	r3, r0
 8014146:	2b00      	cmp	r3, #0
 8014148:	ea4f 70d0 	mov.w	r0, r0, lsr #31
 801414c:	bfb8      	it	lt
 801414e:	8025      	strhlt	r5, [r4, #0]
 8014150:	bd38      	pop	{r3, r4, r5, pc}
 8014152:	bf00      	nop

08014154 <on_full_input_buffer>:
 8014154:	b570      	push	{r4, r5, r6, lr}
 8014156:	4605      	mov	r5, r0
 8014158:	460c      	mov	r4, r1
 801415a:	682b      	ldr	r3, [r5, #0]
 801415c:	6809      	ldr	r1, [r1, #0]
 801415e:	8920      	ldrh	r0, [r4, #8]
 8014160:	6862      	ldr	r2, [r4, #4]
 8014162:	fbb2 f2f0 	udiv	r2, r2, r0
 8014166:	eba3 0c01 	sub.w	ip, r3, r1
 801416a:	fbbc fcf2 	udiv	ip, ip, r2
 801416e:	f10c 0c01 	add.w	ip, ip, #1
 8014172:	fa1f f38c 	uxth.w	r3, ip
 8014176:	fbb3 f6f0 	udiv	r6, r3, r0
 801417a:	fb00 3316 	mls	r3, r0, r6, r3
 801417e:	b29b      	uxth	r3, r3
 8014180:	fb02 f303 	mul.w	r3, r2, r3
 8014184:	1d18      	adds	r0, r3, #4
 8014186:	4408      	add	r0, r1
 8014188:	7d26      	ldrb	r6, [r4, #20]
 801418a:	f850 2c04 	ldr.w	r2, [r0, #-4]
 801418e:	b116      	cbz	r6, 8014196 <on_full_input_buffer+0x42>
 8014190:	2600      	movs	r6, #0
 8014192:	f840 6c04 	str.w	r6, [r0, #-4]
 8014196:	2a03      	cmp	r2, #3
 8014198:	d801      	bhi.n	801419e <on_full_input_buffer+0x4a>
 801419a:	2001      	movs	r0, #1
 801419c:	bd70      	pop	{r4, r5, r6, pc}
 801419e:	3308      	adds	r3, #8
 80141a0:	4419      	add	r1, r3
 80141a2:	4628      	mov	r0, r5
 80141a4:	692b      	ldr	r3, [r5, #16]
 80141a6:	3a04      	subs	r2, #4
 80141a8:	f7f8 fc80 	bl	800caac <ucdr_init_buffer_origin>
 80141ac:	4628      	mov	r0, r5
 80141ae:	4903      	ldr	r1, [pc, #12]	@ (80141bc <on_full_input_buffer+0x68>)
 80141b0:	4622      	mov	r2, r4
 80141b2:	f7f8 fc57 	bl	800ca64 <ucdr_set_on_full_buffer_callback>
 80141b6:	2000      	movs	r0, #0
 80141b8:	bd70      	pop	{r4, r5, r6, pc}
 80141ba:	bf00      	nop
 80141bc:	08014155 	.word	0x08014155

080141c0 <uxr_init_input_reliable_stream>:
 80141c0:	b500      	push	{lr}
 80141c2:	e9c0 1200 	strd	r1, r2, [r0]
 80141c6:	f04f 0e00 	mov.w	lr, #0
 80141ca:	9a01      	ldr	r2, [sp, #4]
 80141cc:	8103      	strh	r3, [r0, #8]
 80141ce:	6102      	str	r2, [r0, #16]
 80141d0:	f880 e014 	strb.w	lr, [r0, #20]
 80141d4:	b1d3      	cbz	r3, 801420c <uxr_init_input_reliable_stream+0x4c>
 80141d6:	f8c1 e000 	str.w	lr, [r1]
 80141da:	f8b0 c008 	ldrh.w	ip, [r0, #8]
 80141de:	f1bc 0f01 	cmp.w	ip, #1
 80141e2:	d913      	bls.n	801420c <uxr_init_input_reliable_stream+0x4c>
 80141e4:	2301      	movs	r3, #1
 80141e6:	fbb3 f1fc 	udiv	r1, r3, ip
 80141ea:	fb0c 3111 	mls	r1, ip, r1, r3
 80141ee:	b289      	uxth	r1, r1
 80141f0:	6842      	ldr	r2, [r0, #4]
 80141f2:	fbb2 f2fc 	udiv	r2, r2, ip
 80141f6:	fb01 f202 	mul.w	r2, r1, r2
 80141fa:	6801      	ldr	r1, [r0, #0]
 80141fc:	f841 e002 	str.w	lr, [r1, r2]
 8014200:	3301      	adds	r3, #1
 8014202:	f8b0 c008 	ldrh.w	ip, [r0, #8]
 8014206:	b29b      	uxth	r3, r3
 8014208:	459c      	cmp	ip, r3
 801420a:	d8ec      	bhi.n	80141e6 <uxr_init_input_reliable_stream+0x26>
 801420c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8014210:	60c3      	str	r3, [r0, #12]
 8014212:	f85d fb04 	ldr.w	pc, [sp], #4
 8014216:	bf00      	nop

08014218 <uxr_reset_input_reliable_stream>:
 8014218:	8901      	ldrh	r1, [r0, #8]
 801421a:	b1e9      	cbz	r1, 8014258 <uxr_reset_input_reliable_stream+0x40>
 801421c:	f04f 0c00 	mov.w	ip, #0
 8014220:	b500      	push	{lr}
 8014222:	4663      	mov	r3, ip
 8014224:	46e6      	mov	lr, ip
 8014226:	fbb3 f2f1 	udiv	r2, r3, r1
 801422a:	fb01 3312 	mls	r3, r1, r2, r3
 801422e:	b29b      	uxth	r3, r3
 8014230:	6842      	ldr	r2, [r0, #4]
 8014232:	fbb2 f2f1 	udiv	r2, r2, r1
 8014236:	fb02 f303 	mul.w	r3, r2, r3
 801423a:	6802      	ldr	r2, [r0, #0]
 801423c:	f842 e003 	str.w	lr, [r2, r3]
 8014240:	f10c 0c01 	add.w	ip, ip, #1
 8014244:	8901      	ldrh	r1, [r0, #8]
 8014246:	fa1f f38c 	uxth.w	r3, ip
 801424a:	4299      	cmp	r1, r3
 801424c:	d8eb      	bhi.n	8014226 <uxr_reset_input_reliable_stream+0xe>
 801424e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8014252:	60c3      	str	r3, [r0, #12]
 8014254:	f85d fb04 	ldr.w	pc, [sp], #4
 8014258:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801425c:	60c3      	str	r3, [r0, #12]
 801425e:	4770      	bx	lr

08014260 <uxr_receive_reliable_message>:
 8014260:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8014264:	4604      	mov	r4, r0
 8014266:	460d      	mov	r5, r1
 8014268:	8901      	ldrh	r1, [r0, #8]
 801426a:	8980      	ldrh	r0, [r0, #12]
 801426c:	4690      	mov	r8, r2
 801426e:	461f      	mov	r7, r3
 8014270:	f000 fc82 	bl	8014b78 <uxr_seq_num_add>
 8014274:	4629      	mov	r1, r5
 8014276:	4606      	mov	r6, r0
 8014278:	89a0      	ldrh	r0, [r4, #12]
 801427a:	f000 fc85 	bl	8014b88 <uxr_seq_num_cmp>
 801427e:	2800      	cmp	r0, #0
 8014280:	db0a      	blt.n	8014298 <uxr_receive_reliable_message+0x38>
 8014282:	2600      	movs	r6, #0
 8014284:	89e0      	ldrh	r0, [r4, #14]
 8014286:	4629      	mov	r1, r5
 8014288:	f000 fc7e 	bl	8014b88 <uxr_seq_num_cmp>
 801428c:	2800      	cmp	r0, #0
 801428e:	da00      	bge.n	8014292 <uxr_receive_reliable_message+0x32>
 8014290:	81e5      	strh	r5, [r4, #14]
 8014292:	4630      	mov	r0, r6
 8014294:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8014298:	4630      	mov	r0, r6
 801429a:	4629      	mov	r1, r5
 801429c:	f000 fc74 	bl	8014b88 <uxr_seq_num_cmp>
 80142a0:	2800      	cmp	r0, #0
 80142a2:	dbee      	blt.n	8014282 <uxr_receive_reliable_message+0x22>
 80142a4:	6923      	ldr	r3, [r4, #16]
 80142a6:	4640      	mov	r0, r8
 80142a8:	4798      	blx	r3
 80142aa:	2101      	movs	r1, #1
 80142ac:	4681      	mov	r9, r0
 80142ae:	89a0      	ldrh	r0, [r4, #12]
 80142b0:	f000 fc62 	bl	8014b78 <uxr_seq_num_add>
 80142b4:	f1b9 0f00 	cmp.w	r9, #0
 80142b8:	d101      	bne.n	80142be <uxr_receive_reliable_message+0x5e>
 80142ba:	4285      	cmp	r5, r0
 80142bc:	d047      	beq.n	801434e <uxr_receive_reliable_message+0xee>
 80142be:	8922      	ldrh	r2, [r4, #8]
 80142c0:	fbb5 f0f2 	udiv	r0, r5, r2
 80142c4:	fb02 5010 	mls	r0, r2, r0, r5
 80142c8:	b280      	uxth	r0, r0
 80142ca:	6863      	ldr	r3, [r4, #4]
 80142cc:	fbb3 f3f2 	udiv	r3, r3, r2
 80142d0:	fb00 f303 	mul.w	r3, r0, r3
 80142d4:	6820      	ldr	r0, [r4, #0]
 80142d6:	3304      	adds	r3, #4
 80142d8:	4418      	add	r0, r3
 80142da:	f850 3c04 	ldr.w	r3, [r0, #-4]
 80142de:	2b00      	cmp	r3, #0
 80142e0:	d1cf      	bne.n	8014282 <uxr_receive_reliable_message+0x22>
 80142e2:	4641      	mov	r1, r8
 80142e4:	463a      	mov	r2, r7
 80142e6:	f001 fd7a 	bl	8015dde <memcpy>
 80142ea:	8921      	ldrh	r1, [r4, #8]
 80142ec:	fbb5 f2f1 	udiv	r2, r5, r1
 80142f0:	fb01 5212 	mls	r2, r1, r2, r5
 80142f4:	b292      	uxth	r2, r2
 80142f6:	6863      	ldr	r3, [r4, #4]
 80142f8:	fbb3 f3f1 	udiv	r3, r3, r1
 80142fc:	fb02 f303 	mul.w	r3, r2, r3
 8014300:	6822      	ldr	r2, [r4, #0]
 8014302:	50d7      	str	r7, [r2, r3]
 8014304:	9a08      	ldr	r2, [sp, #32]
 8014306:	2301      	movs	r3, #1
 8014308:	7013      	strb	r3, [r2, #0]
 801430a:	f1b9 0f00 	cmp.w	r9, #0
 801430e:	d0b8      	beq.n	8014282 <uxr_receive_reliable_message+0x22>
 8014310:	89a6      	ldrh	r6, [r4, #12]
 8014312:	4630      	mov	r0, r6
 8014314:	2101      	movs	r1, #1
 8014316:	f000 fc2f 	bl	8014b78 <uxr_seq_num_add>
 801431a:	8922      	ldrh	r2, [r4, #8]
 801431c:	6863      	ldr	r3, [r4, #4]
 801431e:	fbb3 f3f2 	udiv	r3, r3, r2
 8014322:	4606      	mov	r6, r0
 8014324:	fbb0 f0f2 	udiv	r0, r0, r2
 8014328:	fb02 6010 	mls	r0, r2, r0, r6
 801432c:	b280      	uxth	r0, r0
 801432e:	fb00 f303 	mul.w	r3, r0, r3
 8014332:	6820      	ldr	r0, [r4, #0]
 8014334:	3304      	adds	r3, #4
 8014336:	4418      	add	r0, r3
 8014338:	f850 3c04 	ldr.w	r3, [r0, #-4]
 801433c:	2b00      	cmp	r3, #0
 801433e:	d0a0      	beq.n	8014282 <uxr_receive_reliable_message+0x22>
 8014340:	6923      	ldr	r3, [r4, #16]
 8014342:	4798      	blx	r3
 8014344:	2802      	cmp	r0, #2
 8014346:	d008      	beq.n	801435a <uxr_receive_reliable_message+0xfa>
 8014348:	2801      	cmp	r0, #1
 801434a:	d0e2      	beq.n	8014312 <uxr_receive_reliable_message+0xb2>
 801434c:	e799      	b.n	8014282 <uxr_receive_reliable_message+0x22>
 801434e:	9b08      	ldr	r3, [sp, #32]
 8014350:	81a5      	strh	r5, [r4, #12]
 8014352:	2601      	movs	r6, #1
 8014354:	f883 9000 	strb.w	r9, [r3]
 8014358:	e794      	b.n	8014284 <uxr_receive_reliable_message+0x24>
 801435a:	2601      	movs	r6, #1
 801435c:	e792      	b.n	8014284 <uxr_receive_reliable_message+0x24>
 801435e:	bf00      	nop

08014360 <uxr_next_input_reliable_buffer_available>:
 8014360:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8014364:	4604      	mov	r4, r0
 8014366:	460f      	mov	r7, r1
 8014368:	8980      	ldrh	r0, [r0, #12]
 801436a:	2101      	movs	r1, #1
 801436c:	4690      	mov	r8, r2
 801436e:	f000 fc03 	bl	8014b78 <uxr_seq_num_add>
 8014372:	8922      	ldrh	r2, [r4, #8]
 8014374:	fbb0 f6f2 	udiv	r6, r0, r2
 8014378:	fb02 0616 	mls	r6, r2, r6, r0
 801437c:	b2b6      	uxth	r6, r6
 801437e:	6863      	ldr	r3, [r4, #4]
 8014380:	fbb3 f3f2 	udiv	r3, r3, r2
 8014384:	fb06 f303 	mul.w	r3, r6, r3
 8014388:	6826      	ldr	r6, [r4, #0]
 801438a:	3304      	adds	r3, #4
 801438c:	441e      	add	r6, r3
 801438e:	f856 9c04 	ldr.w	r9, [r6, #-4]
 8014392:	f1b9 0f00 	cmp.w	r9, #0
 8014396:	d023      	beq.n	80143e0 <uxr_next_input_reliable_buffer_available+0x80>
 8014398:	6923      	ldr	r3, [r4, #16]
 801439a:	4605      	mov	r5, r0
 801439c:	4630      	mov	r0, r6
 801439e:	4798      	blx	r3
 80143a0:	4682      	mov	sl, r0
 80143a2:	b300      	cbz	r0, 80143e6 <uxr_next_input_reliable_buffer_available+0x86>
 80143a4:	f8b4 a00c 	ldrh.w	sl, [r4, #12]
 80143a8:	2101      	movs	r1, #1
 80143aa:	4650      	mov	r0, sl
 80143ac:	f000 fbe4 	bl	8014b78 <uxr_seq_num_add>
 80143b0:	8921      	ldrh	r1, [r4, #8]
 80143b2:	fbb0 f2f1 	udiv	r2, r0, r1
 80143b6:	4682      	mov	sl, r0
 80143b8:	fb01 0212 	mls	r2, r1, r2, r0
 80143bc:	e9d4 0300 	ldrd	r0, r3, [r4]
 80143c0:	b292      	uxth	r2, r2
 80143c2:	fbb3 f3f1 	udiv	r3, r3, r1
 80143c6:	fb02 f303 	mul.w	r3, r2, r3
 80143ca:	3304      	adds	r3, #4
 80143cc:	4418      	add	r0, r3
 80143ce:	f850 3c04 	ldr.w	r3, [r0, #-4]
 80143d2:	b12b      	cbz	r3, 80143e0 <uxr_next_input_reliable_buffer_available+0x80>
 80143d4:	6923      	ldr	r3, [r4, #16]
 80143d6:	4798      	blx	r3
 80143d8:	2802      	cmp	r0, #2
 80143da:	d01b      	beq.n	8014414 <uxr_next_input_reliable_buffer_available+0xb4>
 80143dc:	2801      	cmp	r0, #1
 80143de:	d0e3      	beq.n	80143a8 <uxr_next_input_reliable_buffer_available+0x48>
 80143e0:	2000      	movs	r0, #0
 80143e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80143e6:	464a      	mov	r2, r9
 80143e8:	4631      	mov	r1, r6
 80143ea:	4638      	mov	r0, r7
 80143ec:	f7f8 fb66 	bl	800cabc <ucdr_init_buffer>
 80143f0:	8921      	ldrh	r1, [r4, #8]
 80143f2:	fbb5 f2f1 	udiv	r2, r5, r1
 80143f6:	fb01 5212 	mls	r2, r1, r2, r5
 80143fa:	b292      	uxth	r2, r2
 80143fc:	6863      	ldr	r3, [r4, #4]
 80143fe:	fbb3 f3f1 	udiv	r3, r3, r1
 8014402:	fb02 f303 	mul.w	r3, r2, r3
 8014406:	6822      	ldr	r2, [r4, #0]
 8014408:	f842 a003 	str.w	sl, [r2, r3]
 801440c:	2001      	movs	r0, #1
 801440e:	81a5      	strh	r5, [r4, #12]
 8014410:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8014414:	8920      	ldrh	r0, [r4, #8]
 8014416:	fbb5 f3f0 	udiv	r3, r5, r0
 801441a:	fb00 5513 	mls	r5, r0, r3, r5
 801441e:	b2ad      	uxth	r5, r5
 8014420:	6863      	ldr	r3, [r4, #4]
 8014422:	fbb3 f3f0 	udiv	r3, r3, r0
 8014426:	fb03 f505 	mul.w	r5, r3, r5
 801442a:	6823      	ldr	r3, [r4, #0]
 801442c:	2000      	movs	r0, #0
 801442e:	5158      	str	r0, [r3, r5]
 8014430:	eb06 0108 	add.w	r1, r6, r8
 8014434:	eba9 0208 	sub.w	r2, r9, r8
 8014438:	4638      	mov	r0, r7
 801443a:	f7f8 fb3f 	bl	800cabc <ucdr_init_buffer>
 801443e:	4638      	mov	r0, r7
 8014440:	4903      	ldr	r1, [pc, #12]	@ (8014450 <uxr_next_input_reliable_buffer_available+0xf0>)
 8014442:	4622      	mov	r2, r4
 8014444:	f7f8 fb0e 	bl	800ca64 <ucdr_set_on_full_buffer_callback>
 8014448:	f8a4 a00c 	strh.w	sl, [r4, #12]
 801444c:	2001      	movs	r0, #1
 801444e:	e7c8      	b.n	80143e2 <uxr_next_input_reliable_buffer_available+0x82>
 8014450:	08014155 	.word	0x08014155

08014454 <uxr_process_heartbeat>:
 8014454:	b538      	push	{r3, r4, r5, lr}
 8014456:	4611      	mov	r1, r2
 8014458:	4604      	mov	r4, r0
 801445a:	89c0      	ldrh	r0, [r0, #14]
 801445c:	4615      	mov	r5, r2
 801445e:	f000 fb93 	bl	8014b88 <uxr_seq_num_cmp>
 8014462:	2800      	cmp	r0, #0
 8014464:	bfb8      	it	lt
 8014466:	81e5      	strhlt	r5, [r4, #14]
 8014468:	bd38      	pop	{r3, r4, r5, pc}
 801446a:	bf00      	nop

0801446c <uxr_compute_acknack>:
 801446c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8014470:	8903      	ldrh	r3, [r0, #8]
 8014472:	8985      	ldrh	r5, [r0, #12]
 8014474:	4604      	mov	r4, r0
 8014476:	460e      	mov	r6, r1
 8014478:	b1d3      	cbz	r3, 80144b0 <uxr_compute_acknack+0x44>
 801447a:	4628      	mov	r0, r5
 801447c:	2701      	movs	r7, #1
 801447e:	e003      	b.n	8014488 <uxr_compute_acknack+0x1c>
 8014480:	4567      	cmp	r7, ip
 8014482:	d215      	bcs.n	80144b0 <uxr_compute_acknack+0x44>
 8014484:	89a0      	ldrh	r0, [r4, #12]
 8014486:	3701      	adds	r7, #1
 8014488:	b2b9      	uxth	r1, r7
 801448a:	f000 fb75 	bl	8014b78 <uxr_seq_num_add>
 801448e:	f8b4 c008 	ldrh.w	ip, [r4, #8]
 8014492:	fbb0 f3fc 	udiv	r3, r0, ip
 8014496:	fb0c 0313 	mls	r3, ip, r3, r0
 801449a:	b29a      	uxth	r2, r3
 801449c:	e9d4 1300 	ldrd	r1, r3, [r4]
 80144a0:	fbb3 f3fc 	udiv	r3, r3, ip
 80144a4:	fb02 f303 	mul.w	r3, r2, r3
 80144a8:	58cb      	ldr	r3, [r1, r3]
 80144aa:	2b00      	cmp	r3, #0
 80144ac:	d1e8      	bne.n	8014480 <uxr_compute_acknack+0x14>
 80144ae:	4605      	mov	r5, r0
 80144b0:	8035      	strh	r5, [r6, #0]
 80144b2:	2101      	movs	r1, #1
 80144b4:	4628      	mov	r0, r5
 80144b6:	89e7      	ldrh	r7, [r4, #14]
 80144b8:	f000 fb62 	bl	8014b80 <uxr_seq_num_sub>
 80144bc:	4601      	mov	r1, r0
 80144be:	4638      	mov	r0, r7
 80144c0:	f000 fb5e 	bl	8014b80 <uxr_seq_num_sub>
 80144c4:	4605      	mov	r5, r0
 80144c6:	b318      	cbz	r0, 8014510 <uxr_compute_acknack+0xa4>
 80144c8:	f04f 0900 	mov.w	r9, #0
 80144cc:	464f      	mov	r7, r9
 80144ce:	f04f 0801 	mov.w	r8, #1
 80144d2:	fa1f f189 	uxth.w	r1, r9
 80144d6:	8830      	ldrh	r0, [r6, #0]
 80144d8:	f000 fb4e 	bl	8014b78 <uxr_seq_num_add>
 80144dc:	f8b4 c008 	ldrh.w	ip, [r4, #8]
 80144e0:	fbb0 f3fc 	udiv	r3, r0, ip
 80144e4:	e9d4 1200 	ldrd	r1, r2, [r4]
 80144e8:	fb03 001c 	mls	r0, r3, ip, r0
 80144ec:	b283      	uxth	r3, r0
 80144ee:	fbb2 f2fc 	udiv	r2, r2, ip
 80144f2:	fb02 f303 	mul.w	r3, r2, r3
 80144f6:	fa08 f209 	lsl.w	r2, r8, r9
 80144fa:	58cb      	ldr	r3, [r1, r3]
 80144fc:	f109 0901 	add.w	r9, r9, #1
 8014500:	b90b      	cbnz	r3, 8014506 <uxr_compute_acknack+0x9a>
 8014502:	4317      	orrs	r7, r2
 8014504:	b2bf      	uxth	r7, r7
 8014506:	454d      	cmp	r5, r9
 8014508:	d1e3      	bne.n	80144d2 <uxr_compute_acknack+0x66>
 801450a:	4638      	mov	r0, r7
 801450c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8014510:	4607      	mov	r7, r0
 8014512:	4638      	mov	r0, r7
 8014514:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

08014518 <uxr_init_output_best_effort_stream>:
 8014518:	f64f 7cff 	movw	ip, #65535	@ 0xffff
 801451c:	e9c0 3201 	strd	r3, r2, [r0, #4]
 8014520:	6001      	str	r1, [r0, #0]
 8014522:	7303      	strb	r3, [r0, #12]
 8014524:	f8a0 c00e 	strh.w	ip, [r0, #14]
 8014528:	4770      	bx	lr
 801452a:	bf00      	nop

0801452c <uxr_reset_output_best_effort_stream>:
 801452c:	7b02      	ldrb	r2, [r0, #12]
 801452e:	6042      	str	r2, [r0, #4]
 8014530:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8014534:	81c3      	strh	r3, [r0, #14]
 8014536:	4770      	bx	lr

08014538 <uxr_prepare_best_effort_buffer_to_write>:
 8014538:	b5f0      	push	{r4, r5, r6, r7, lr}
 801453a:	4604      	mov	r4, r0
 801453c:	b083      	sub	sp, #12
 801453e:	6840      	ldr	r0, [r0, #4]
 8014540:	460d      	mov	r5, r1
 8014542:	4616      	mov	r6, r2
 8014544:	f7fa fd46 	bl	800efd4 <uxr_submessage_padding>
 8014548:	6863      	ldr	r3, [r4, #4]
 801454a:	4418      	add	r0, r3
 801454c:	68a3      	ldr	r3, [r4, #8]
 801454e:	1942      	adds	r2, r0, r5
 8014550:	4293      	cmp	r3, r2
 8014552:	bf2c      	ite	cs
 8014554:	2701      	movcs	r7, #1
 8014556:	2700      	movcc	r7, #0
 8014558:	d202      	bcs.n	8014560 <uxr_prepare_best_effort_buffer_to_write+0x28>
 801455a:	4638      	mov	r0, r7
 801455c:	b003      	add	sp, #12
 801455e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8014560:	9000      	str	r0, [sp, #0]
 8014562:	6821      	ldr	r1, [r4, #0]
 8014564:	4630      	mov	r0, r6
 8014566:	2300      	movs	r3, #0
 8014568:	f7f8 fa96 	bl	800ca98 <ucdr_init_buffer_origin_offset>
 801456c:	6861      	ldr	r1, [r4, #4]
 801456e:	4638      	mov	r0, r7
 8014570:	4429      	add	r1, r5
 8014572:	6061      	str	r1, [r4, #4]
 8014574:	b003      	add	sp, #12
 8014576:	bdf0      	pop	{r4, r5, r6, r7, pc}

08014578 <uxr_prepare_best_effort_buffer_to_send>:
 8014578:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801457c:	4604      	mov	r4, r0
 801457e:	461d      	mov	r5, r3
 8014580:	6840      	ldr	r0, [r0, #4]
 8014582:	7b23      	ldrb	r3, [r4, #12]
 8014584:	4298      	cmp	r0, r3
 8014586:	bf8c      	ite	hi
 8014588:	2601      	movhi	r6, #1
 801458a:	2600      	movls	r6, #0
 801458c:	d802      	bhi.n	8014594 <uxr_prepare_best_effort_buffer_to_send+0x1c>
 801458e:	4630      	mov	r0, r6
 8014590:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014594:	4688      	mov	r8, r1
 8014596:	89e0      	ldrh	r0, [r4, #14]
 8014598:	2101      	movs	r1, #1
 801459a:	4617      	mov	r7, r2
 801459c:	f000 faec 	bl	8014b78 <uxr_seq_num_add>
 80145a0:	6823      	ldr	r3, [r4, #0]
 80145a2:	81e0      	strh	r0, [r4, #14]
 80145a4:	8028      	strh	r0, [r5, #0]
 80145a6:	f8c8 3000 	str.w	r3, [r8]
 80145aa:	6863      	ldr	r3, [r4, #4]
 80145ac:	603b      	str	r3, [r7, #0]
 80145ae:	7b23      	ldrb	r3, [r4, #12]
 80145b0:	6063      	str	r3, [r4, #4]
 80145b2:	4630      	mov	r0, r6
 80145b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080145b8 <on_full_output_buffer>:
 80145b8:	b538      	push	{r3, r4, r5, lr}
 80145ba:	6802      	ldr	r2, [r0, #0]
 80145bc:	460c      	mov	r4, r1
 80145be:	6809      	ldr	r1, [r1, #0]
 80145c0:	8923      	ldrh	r3, [r4, #8]
 80145c2:	eba2 0c01 	sub.w	ip, r2, r1
 80145c6:	6862      	ldr	r2, [r4, #4]
 80145c8:	fbb2 f2f3 	udiv	r2, r2, r3
 80145cc:	fbbc fcf2 	udiv	ip, ip, r2
 80145d0:	f10c 0c01 	add.w	ip, ip, #1
 80145d4:	fa1f fc8c 	uxth.w	ip, ip
 80145d8:	fbbc fef3 	udiv	lr, ip, r3
 80145dc:	fb03 c31e 	mls	r3, r3, lr, ip
 80145e0:	b29b      	uxth	r3, r3
 80145e2:	fb02 f303 	mul.w	r3, r2, r3
 80145e6:	f894 c00c 	ldrb.w	ip, [r4, #12]
 80145ea:	58ca      	ldr	r2, [r1, r3]
 80145ec:	4463      	add	r3, ip
 80145ee:	eba2 020c 	sub.w	r2, r2, ip
 80145f2:	3308      	adds	r3, #8
 80145f4:	4605      	mov	r5, r0
 80145f6:	4419      	add	r1, r3
 80145f8:	3a04      	subs	r2, #4
 80145fa:	6903      	ldr	r3, [r0, #16]
 80145fc:	f7f8 fa56 	bl	800caac <ucdr_init_buffer_origin>
 8014600:	4628      	mov	r0, r5
 8014602:	4903      	ldr	r1, [pc, #12]	@ (8014610 <on_full_output_buffer+0x58>)
 8014604:	4622      	mov	r2, r4
 8014606:	f7f8 fa2d 	bl	800ca64 <ucdr_set_on_full_buffer_callback>
 801460a:	2000      	movs	r0, #0
 801460c:	bd38      	pop	{r3, r4, r5, pc}
 801460e:	bf00      	nop
 8014610:	080145b9 	.word	0x080145b9

08014614 <uxr_init_output_reliable_stream>:
 8014614:	b410      	push	{r4}
 8014616:	f89d c004 	ldrb.w	ip, [sp, #4]
 801461a:	8103      	strh	r3, [r0, #8]
 801461c:	e9c0 1200 	strd	r1, r2, [r0]
 8014620:	f880 c00c 	strb.w	ip, [r0, #12]
 8014624:	b1d3      	cbz	r3, 801465c <uxr_init_output_reliable_stream+0x48>
 8014626:	f8c1 c000 	str.w	ip, [r1]
 801462a:	f8b0 c008 	ldrh.w	ip, [r0, #8]
 801462e:	f1bc 0f01 	cmp.w	ip, #1
 8014632:	d913      	bls.n	801465c <uxr_init_output_reliable_stream+0x48>
 8014634:	2301      	movs	r3, #1
 8014636:	fbb3 f1fc 	udiv	r1, r3, ip
 801463a:	fb0c 3111 	mls	r1, ip, r1, r3
 801463e:	b289      	uxth	r1, r1
 8014640:	6842      	ldr	r2, [r0, #4]
 8014642:	6804      	ldr	r4, [r0, #0]
 8014644:	fbb2 f2fc 	udiv	r2, r2, ip
 8014648:	fb01 f202 	mul.w	r2, r1, r2
 801464c:	7b01      	ldrb	r1, [r0, #12]
 801464e:	50a1      	str	r1, [r4, r2]
 8014650:	3301      	adds	r3, #1
 8014652:	f8b0 c008 	ldrh.w	ip, [r0, #8]
 8014656:	b29b      	uxth	r3, r3
 8014658:	459c      	cmp	ip, r3
 801465a:	d8ec      	bhi.n	8014636 <uxr_init_output_reliable_stream+0x22>
 801465c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8014660:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 8014664:	e9c0 2306 	strd	r2, r3, [r0, #24]
 8014668:	4905      	ldr	r1, [pc, #20]	@ (8014680 <uxr_init_output_reliable_stream+0x6c>)
 801466a:	f85d 4b04 	ldr.w	r4, [sp], #4
 801466e:	f8c0 100e 	str.w	r1, [r0, #14]
 8014672:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8014676:	2300      	movs	r3, #0
 8014678:	8242      	strh	r2, [r0, #18]
 801467a:	8403      	strh	r3, [r0, #32]
 801467c:	4770      	bx	lr
 801467e:	bf00      	nop
 8014680:	ffff0000 	.word	0xffff0000

08014684 <uxr_reset_output_reliable_stream>:
 8014684:	8901      	ldrh	r1, [r0, #8]
 8014686:	b1b1      	cbz	r1, 80146b6 <uxr_reset_output_reliable_stream+0x32>
 8014688:	f04f 0c00 	mov.w	ip, #0
 801468c:	4663      	mov	r3, ip
 801468e:	fbb3 f2f1 	udiv	r2, r3, r1
 8014692:	fb01 3312 	mls	r3, r1, r2, r3
 8014696:	b29b      	uxth	r3, r3
 8014698:	6842      	ldr	r2, [r0, #4]
 801469a:	fbb2 f2f1 	udiv	r2, r2, r1
 801469e:	6801      	ldr	r1, [r0, #0]
 80146a0:	fb02 f303 	mul.w	r3, r2, r3
 80146a4:	7b02      	ldrb	r2, [r0, #12]
 80146a6:	50ca      	str	r2, [r1, r3]
 80146a8:	f10c 0c01 	add.w	ip, ip, #1
 80146ac:	8901      	ldrh	r1, [r0, #8]
 80146ae:	fa1f f38c 	uxth.w	r3, ip
 80146b2:	4299      	cmp	r1, r3
 80146b4:	d8eb      	bhi.n	801468e <uxr_reset_output_reliable_stream+0xa>
 80146b6:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80146ba:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 80146be:	e9c0 2306 	strd	r2, r3, [r0, #24]
 80146c2:	4904      	ldr	r1, [pc, #16]	@ (80146d4 <uxr_reset_output_reliable_stream+0x50>)
 80146c4:	f8c0 100e 	str.w	r1, [r0, #14]
 80146c8:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80146cc:	2300      	movs	r3, #0
 80146ce:	8242      	strh	r2, [r0, #18]
 80146d0:	8403      	strh	r3, [r0, #32]
 80146d2:	4770      	bx	lr
 80146d4:	ffff0000 	.word	0xffff0000

080146d8 <uxr_prepare_reliable_buffer_to_write>:
 80146d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80146dc:	4604      	mov	r4, r0
 80146de:	b091      	sub	sp, #68	@ 0x44
 80146e0:	8900      	ldrh	r0, [r0, #8]
 80146e2:	89e6      	ldrh	r6, [r4, #14]
 80146e4:	6823      	ldr	r3, [r4, #0]
 80146e6:	9204      	str	r2, [sp, #16]
 80146e8:	fbb6 f2f0 	udiv	r2, r6, r0
 80146ec:	fb00 6212 	mls	r2, r0, r2, r6
 80146f0:	b292      	uxth	r2, r2
 80146f2:	6865      	ldr	r5, [r4, #4]
 80146f4:	fbb5 f5f0 	udiv	r5, r5, r0
 80146f8:	fb05 3202 	mla	r2, r5, r2, r3
 80146fc:	3204      	adds	r2, #4
 80146fe:	f852 8c04 	ldr.w	r8, [r2, #-4]
 8014702:	f894 900c 	ldrb.w	r9, [r4, #12]
 8014706:	9203      	str	r2, [sp, #12]
 8014708:	468b      	mov	fp, r1
 801470a:	1f2f      	subs	r7, r5, #4
 801470c:	2800      	cmp	r0, #0
 801470e:	f000 814c 	beq.w	80149aa <uxr_prepare_reliable_buffer_to_write+0x2d2>
 8014712:	f04f 0c00 	mov.w	ip, #0
 8014716:	46e2      	mov	sl, ip
 8014718:	4661      	mov	r1, ip
 801471a:	fbb1 f2f0 	udiv	r2, r1, r0
 801471e:	fb00 1212 	mls	r2, r0, r2, r1
 8014722:	b292      	uxth	r2, r2
 8014724:	fb05 f202 	mul.w	r2, r5, r2
 8014728:	f10c 0c01 	add.w	ip, ip, #1
 801472c:	589a      	ldr	r2, [r3, r2]
 801472e:	454a      	cmp	r2, r9
 8014730:	bf08      	it	eq
 8014732:	f10a 0a01 	addeq.w	sl, sl, #1
 8014736:	fa1f f18c 	uxth.w	r1, ip
 801473a:	bf08      	it	eq
 801473c:	fa1f fa8a 	uxtheq.w	sl, sl
 8014740:	4281      	cmp	r1, r0
 8014742:	d3ea      	bcc.n	801471a <uxr_prepare_reliable_buffer_to_write+0x42>
 8014744:	4640      	mov	r0, r8
 8014746:	2104      	movs	r1, #4
 8014748:	f8cd a014 	str.w	sl, [sp, #20]
 801474c:	f7f8 f9ba 	bl	800cac4 <ucdr_alignment>
 8014750:	4480      	add	r8, r0
 8014752:	eb08 020b 	add.w	r2, r8, fp
 8014756:	42ba      	cmp	r2, r7
 8014758:	f240 80cd 	bls.w	80148f6 <uxr_prepare_reliable_buffer_to_write+0x21e>
 801475c:	7b22      	ldrb	r2, [r4, #12]
 801475e:	445a      	add	r2, fp
 8014760:	42ba      	cmp	r2, r7
 8014762:	f240 80b5 	bls.w	80148d0 <uxr_prepare_reliable_buffer_to_write+0x1f8>
 8014766:	f5c9 437f 	rsb	r3, r9, #65280	@ 0xff00
 801476a:	33fc      	adds	r3, #252	@ 0xfc
 801476c:	b2ba      	uxth	r2, r7
 801476e:	4413      	add	r3, r2
 8014770:	b29b      	uxth	r3, r3
 8014772:	fb0a f903 	mul.w	r9, sl, r3
 8014776:	45d9      	cmp	r9, fp
 8014778:	9305      	str	r3, [sp, #20]
 801477a:	9306      	str	r3, [sp, #24]
 801477c:	f0c0 80b7 	bcc.w	80148ee <uxr_prepare_reliable_buffer_to_write+0x216>
 8014780:	f108 0304 	add.w	r3, r8, #4
 8014784:	42bb      	cmp	r3, r7
 8014786:	f080 80db 	bcs.w	8014940 <uxr_prepare_reliable_buffer_to_write+0x268>
 801478a:	f1a2 0904 	sub.w	r9, r2, #4
 801478e:	eba9 0908 	sub.w	r9, r9, r8
 8014792:	9b05      	ldr	r3, [sp, #20]
 8014794:	fa1f f989 	uxth.w	r9, r9
 8014798:	ebab 0b09 	sub.w	fp, fp, r9
 801479c:	fbbb f2f3 	udiv	r2, fp, r3
 80147a0:	fb03 b312 	mls	r3, r3, r2, fp
 80147a4:	2b00      	cmp	r3, #0
 80147a6:	f000 80c8 	beq.w	801493a <uxr_prepare_reliable_buffer_to_write+0x262>
 80147aa:	3201      	adds	r2, #1
 80147ac:	b292      	uxth	r2, r2
 80147ae:	9306      	str	r3, [sp, #24]
 80147b0:	4552      	cmp	r2, sl
 80147b2:	f200 809c 	bhi.w	80148ee <uxr_prepare_reliable_buffer_to_write+0x216>
 80147b6:	f10d 0b20 	add.w	fp, sp, #32
 80147ba:	2a00      	cmp	r2, #0
 80147bc:	d042      	beq.n	8014844 <uxr_prepare_reliable_buffer_to_write+0x16c>
 80147be:	f8cd 801c 	str.w	r8, [sp, #28]
 80147c2:	f04f 0a00 	mov.w	sl, #0
 80147c6:	f8dd 8014 	ldr.w	r8, [sp, #20]
 80147ca:	9505      	str	r5, [sp, #20]
 80147cc:	f10d 0b20 	add.w	fp, sp, #32
 80147d0:	4615      	mov	r5, r2
 80147d2:	e000      	b.n	80147d6 <uxr_prepare_reliable_buffer_to_write+0xfe>
 80147d4:	46c1      	mov	r9, r8
 80147d6:	8920      	ldrh	r0, [r4, #8]
 80147d8:	fbb6 f2f0 	udiv	r2, r6, r0
 80147dc:	fb00 6112 	mls	r1, r0, r2, r6
 80147e0:	b28a      	uxth	r2, r1
 80147e2:	6863      	ldr	r3, [r4, #4]
 80147e4:	fbb3 f1f0 	udiv	r1, r3, r0
 80147e8:	6823      	ldr	r3, [r4, #0]
 80147ea:	fb02 f101 	mul.w	r1, r2, r1
 80147ee:	3104      	adds	r1, #4
 80147f0:	4419      	add	r1, r3
 80147f2:	4658      	mov	r0, fp
 80147f4:	f851 2c04 	ldr.w	r2, [r1, #-4]
 80147f8:	9200      	str	r2, [sp, #0]
 80147fa:	2300      	movs	r3, #0
 80147fc:	463a      	mov	r2, r7
 80147fe:	f7f8 f94b 	bl	800ca98 <ucdr_init_buffer_origin_offset>
 8014802:	464a      	mov	r2, r9
 8014804:	2300      	movs	r3, #0
 8014806:	210d      	movs	r1, #13
 8014808:	4658      	mov	r0, fp
 801480a:	f7fa fba3 	bl	800ef54 <uxr_buffer_submessage_header>
 801480e:	8921      	ldrh	r1, [r4, #8]
 8014810:	fbb6 f2f1 	udiv	r2, r6, r1
 8014814:	fb01 6212 	mls	r2, r1, r2, r6
 8014818:	b292      	uxth	r2, r2
 801481a:	6863      	ldr	r3, [r4, #4]
 801481c:	fbb3 f3f1 	udiv	r3, r3, r1
 8014820:	fb02 f303 	mul.w	r3, r2, r3
 8014824:	6822      	ldr	r2, [r4, #0]
 8014826:	4630      	mov	r0, r6
 8014828:	50d7      	str	r7, [r2, r3]
 801482a:	2101      	movs	r1, #1
 801482c:	f000 f9a4 	bl	8014b78 <uxr_seq_num_add>
 8014830:	f10a 0a01 	add.w	sl, sl, #1
 8014834:	fa1f f38a 	uxth.w	r3, sl
 8014838:	429d      	cmp	r5, r3
 801483a:	4606      	mov	r6, r0
 801483c:	d8ca      	bhi.n	80147d4 <uxr_prepare_reliable_buffer_to_write+0xfc>
 801483e:	f8dd 801c 	ldr.w	r8, [sp, #28]
 8014842:	9d05      	ldr	r5, [sp, #20]
 8014844:	8920      	ldrh	r0, [r4, #8]
 8014846:	fbb6 f3f0 	udiv	r3, r6, r0
 801484a:	fb00 6313 	mls	r3, r0, r3, r6
 801484e:	b299      	uxth	r1, r3
 8014850:	6863      	ldr	r3, [r4, #4]
 8014852:	fbb3 f3f0 	udiv	r3, r3, r0
 8014856:	fb01 f303 	mul.w	r3, r1, r3
 801485a:	6821      	ldr	r1, [r4, #0]
 801485c:	3304      	adds	r3, #4
 801485e:	4419      	add	r1, r3
 8014860:	463a      	mov	r2, r7
 8014862:	f851 0c04 	ldr.w	r0, [r1, #-4]
 8014866:	9000      	str	r0, [sp, #0]
 8014868:	2300      	movs	r3, #0
 801486a:	4658      	mov	r0, fp
 801486c:	f7f8 f914 	bl	800ca98 <ucdr_init_buffer_origin_offset>
 8014870:	f8dd 9018 	ldr.w	r9, [sp, #24]
 8014874:	4658      	mov	r0, fp
 8014876:	fa1f f289 	uxth.w	r2, r9
 801487a:	2302      	movs	r3, #2
 801487c:	210d      	movs	r1, #13
 801487e:	f7fa fb69 	bl	800ef54 <uxr_buffer_submessage_header>
 8014882:	9b03      	ldr	r3, [sp, #12]
 8014884:	8927      	ldrh	r7, [r4, #8]
 8014886:	7b20      	ldrb	r0, [r4, #12]
 8014888:	f108 0104 	add.w	r1, r8, #4
 801488c:	440b      	add	r3, r1
 801488e:	4619      	mov	r1, r3
 8014890:	fbb6 f3f7 	udiv	r3, r6, r7
 8014894:	fb07 6313 	mls	r3, r7, r3, r6
 8014898:	f1a5 0208 	sub.w	r2, r5, #8
 801489c:	b29d      	uxth	r5, r3
 801489e:	3004      	adds	r0, #4
 80148a0:	6863      	ldr	r3, [r4, #4]
 80148a2:	fbb3 f3f7 	udiv	r3, r3, r7
 80148a6:	fb05 f303 	mul.w	r3, r5, r3
 80148aa:	6825      	ldr	r5, [r4, #0]
 80148ac:	4448      	add	r0, r9
 80148ae:	50e8      	str	r0, [r5, r3]
 80148b0:	9d04      	ldr	r5, [sp, #16]
 80148b2:	eba2 0208 	sub.w	r2, r2, r8
 80148b6:	4628      	mov	r0, r5
 80148b8:	f7f8 f900 	bl	800cabc <ucdr_init_buffer>
 80148bc:	4628      	mov	r0, r5
 80148be:	493c      	ldr	r1, [pc, #240]	@ (80149b0 <uxr_prepare_reliable_buffer_to_write+0x2d8>)
 80148c0:	4622      	mov	r2, r4
 80148c2:	f7f8 f8cf 	bl	800ca64 <ucdr_set_on_full_buffer_callback>
 80148c6:	2001      	movs	r0, #1
 80148c8:	81e6      	strh	r6, [r4, #14]
 80148ca:	b011      	add	sp, #68	@ 0x44
 80148cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80148d0:	2101      	movs	r1, #1
 80148d2:	89e0      	ldrh	r0, [r4, #14]
 80148d4:	f000 f950 	bl	8014b78 <uxr_seq_num_add>
 80148d8:	8921      	ldrh	r1, [r4, #8]
 80148da:	4605      	mov	r5, r0
 80148dc:	8a60      	ldrh	r0, [r4, #18]
 80148de:	f000 f94b 	bl	8014b78 <uxr_seq_num_add>
 80148e2:	4601      	mov	r1, r0
 80148e4:	4628      	mov	r0, r5
 80148e6:	f000 f94f 	bl	8014b88 <uxr_seq_num_cmp>
 80148ea:	2800      	cmp	r0, #0
 80148ec:	dd42      	ble.n	8014974 <uxr_prepare_reliable_buffer_to_write+0x29c>
 80148ee:	2000      	movs	r0, #0
 80148f0:	b011      	add	sp, #68	@ 0x44
 80148f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80148f6:	8921      	ldrh	r1, [r4, #8]
 80148f8:	8a60      	ldrh	r0, [r4, #18]
 80148fa:	9205      	str	r2, [sp, #20]
 80148fc:	f000 f93c 	bl	8014b78 <uxr_seq_num_add>
 8014900:	4601      	mov	r1, r0
 8014902:	4630      	mov	r0, r6
 8014904:	f000 f940 	bl	8014b88 <uxr_seq_num_cmp>
 8014908:	2800      	cmp	r0, #0
 801490a:	9a05      	ldr	r2, [sp, #20]
 801490c:	dcef      	bgt.n	80148ee <uxr_prepare_reliable_buffer_to_write+0x216>
 801490e:	8927      	ldrh	r7, [r4, #8]
 8014910:	fbb6 f3f7 	udiv	r3, r6, r7
 8014914:	fb07 6313 	mls	r3, r7, r3, r6
 8014918:	b29d      	uxth	r5, r3
 801491a:	6863      	ldr	r3, [r4, #4]
 801491c:	6824      	ldr	r4, [r4, #0]
 801491e:	fbb3 f3f7 	udiv	r3, r3, r7
 8014922:	fb05 f303 	mul.w	r3, r5, r3
 8014926:	e9dd 1003 	ldrd	r1, r0, [sp, #12]
 801492a:	50e2      	str	r2, [r4, r3]
 801492c:	2300      	movs	r3, #0
 801492e:	f8cd 8000 	str.w	r8, [sp]
 8014932:	f7f8 f8b1 	bl	800ca98 <ucdr_init_buffer_origin_offset>
 8014936:	2001      	movs	r0, #1
 8014938:	e7da      	b.n	80148f0 <uxr_prepare_reliable_buffer_to_write+0x218>
 801493a:	b293      	uxth	r3, r2
 801493c:	461a      	mov	r2, r3
 801493e:	e737      	b.n	80147b0 <uxr_prepare_reliable_buffer_to_write+0xd8>
 8014940:	4630      	mov	r0, r6
 8014942:	2101      	movs	r1, #1
 8014944:	9207      	str	r2, [sp, #28]
 8014946:	f000 f917 	bl	8014b78 <uxr_seq_num_add>
 801494a:	f8b4 c008 	ldrh.w	ip, [r4, #8]
 801494e:	fbb0 f1fc 	udiv	r1, r0, ip
 8014952:	fb0c 0111 	mls	r1, ip, r1, r0
 8014956:	4606      	mov	r6, r0
 8014958:	b288      	uxth	r0, r1
 801495a:	6863      	ldr	r3, [r4, #4]
 801495c:	fbb3 f1fc 	udiv	r1, r3, ip
 8014960:	6823      	ldr	r3, [r4, #0]
 8014962:	9a07      	ldr	r2, [sp, #28]
 8014964:	fb00 f101 	mul.w	r1, r0, r1
 8014968:	3104      	adds	r1, #4
 801496a:	440b      	add	r3, r1
 801496c:	9303      	str	r3, [sp, #12]
 801496e:	f853 8c04 	ldr.w	r8, [r3, #-4]
 8014972:	e70a      	b.n	801478a <uxr_prepare_reliable_buffer_to_write+0xb2>
 8014974:	8921      	ldrh	r1, [r4, #8]
 8014976:	fbb5 f3f1 	udiv	r3, r5, r1
 801497a:	fb01 5313 	mls	r3, r1, r3, r5
 801497e:	b29a      	uxth	r2, r3
 8014980:	6863      	ldr	r3, [r4, #4]
 8014982:	fbb3 f3f1 	udiv	r3, r3, r1
 8014986:	6821      	ldr	r1, [r4, #0]
 8014988:	9804      	ldr	r0, [sp, #16]
 801498a:	fb02 f303 	mul.w	r3, r2, r3
 801498e:	3304      	adds	r3, #4
 8014990:	7b22      	ldrb	r2, [r4, #12]
 8014992:	4419      	add	r1, r3
 8014994:	445a      	add	r2, fp
 8014996:	f841 2c04 	str.w	r2, [r1, #-4]
 801499a:	7b23      	ldrb	r3, [r4, #12]
 801499c:	9300      	str	r3, [sp, #0]
 801499e:	2300      	movs	r3, #0
 80149a0:	f7f8 f87a 	bl	800ca98 <ucdr_init_buffer_origin_offset>
 80149a4:	81e5      	strh	r5, [r4, #14]
 80149a6:	2001      	movs	r0, #1
 80149a8:	e7a2      	b.n	80148f0 <uxr_prepare_reliable_buffer_to_write+0x218>
 80149aa:	4682      	mov	sl, r0
 80149ac:	e6ca      	b.n	8014744 <uxr_prepare_reliable_buffer_to_write+0x6c>
 80149ae:	bf00      	nop
 80149b0:	080145b9 	.word	0x080145b9

080149b4 <uxr_prepare_next_reliable_buffer_to_send>:
 80149b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80149b6:	4604      	mov	r4, r0
 80149b8:	460f      	mov	r7, r1
 80149ba:	8a00      	ldrh	r0, [r0, #16]
 80149bc:	2101      	movs	r1, #1
 80149be:	4616      	mov	r6, r2
 80149c0:	461d      	mov	r5, r3
 80149c2:	f000 f8d9 	bl	8014b78 <uxr_seq_num_add>
 80149c6:	8028      	strh	r0, [r5, #0]
 80149c8:	8922      	ldrh	r2, [r4, #8]
 80149ca:	fbb0 f3f2 	udiv	r3, r0, r2
 80149ce:	fb02 0c13 	mls	ip, r2, r3, r0
 80149d2:	fa1f fc8c 	uxth.w	ip, ip
 80149d6:	6863      	ldr	r3, [r4, #4]
 80149d8:	fbb3 f3f2 	udiv	r3, r3, r2
 80149dc:	fb0c fc03 	mul.w	ip, ip, r3
 80149e0:	6823      	ldr	r3, [r4, #0]
 80149e2:	89e1      	ldrh	r1, [r4, #14]
 80149e4:	f10c 0c04 	add.w	ip, ip, #4
 80149e8:	4463      	add	r3, ip
 80149ea:	603b      	str	r3, [r7, #0]
 80149ec:	6823      	ldr	r3, [r4, #0]
 80149ee:	449c      	add	ip, r3
 80149f0:	f85c 3c04 	ldr.w	r3, [ip, #-4]
 80149f4:	6033      	str	r3, [r6, #0]
 80149f6:	f000 f8c7 	bl	8014b88 <uxr_seq_num_cmp>
 80149fa:	2800      	cmp	r0, #0
 80149fc:	dd01      	ble.n	8014a02 <uxr_prepare_next_reliable_buffer_to_send+0x4e>
 80149fe:	2000      	movs	r0, #0
 8014a00:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8014a02:	7b23      	ldrb	r3, [r4, #12]
 8014a04:	6832      	ldr	r2, [r6, #0]
 8014a06:	429a      	cmp	r2, r3
 8014a08:	d9f9      	bls.n	80149fe <uxr_prepare_next_reliable_buffer_to_send+0x4a>
 8014a0a:	8a61      	ldrh	r1, [r4, #18]
 8014a0c:	8a20      	ldrh	r0, [r4, #16]
 8014a0e:	f000 f8b7 	bl	8014b80 <uxr_seq_num_sub>
 8014a12:	8923      	ldrh	r3, [r4, #8]
 8014a14:	4283      	cmp	r3, r0
 8014a16:	d0f2      	beq.n	80149fe <uxr_prepare_next_reliable_buffer_to_send+0x4a>
 8014a18:	8828      	ldrh	r0, [r5, #0]
 8014a1a:	89e3      	ldrh	r3, [r4, #14]
 8014a1c:	8220      	strh	r0, [r4, #16]
 8014a1e:	4298      	cmp	r0, r3
 8014a20:	d001      	beq.n	8014a26 <uxr_prepare_next_reliable_buffer_to_send+0x72>
 8014a22:	2001      	movs	r0, #1
 8014a24:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8014a26:	2101      	movs	r1, #1
 8014a28:	f000 f8a6 	bl	8014b78 <uxr_seq_num_add>
 8014a2c:	81e0      	strh	r0, [r4, #14]
 8014a2e:	2001      	movs	r0, #1
 8014a30:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8014a32:	bf00      	nop

08014a34 <uxr_update_output_stream_heartbeat_timestamp>:
 8014a34:	b570      	push	{r4, r5, r6, lr}
 8014a36:	8a01      	ldrh	r1, [r0, #16]
 8014a38:	4604      	mov	r4, r0
 8014a3a:	8a40      	ldrh	r0, [r0, #18]
 8014a3c:	4615      	mov	r5, r2
 8014a3e:	461e      	mov	r6, r3
 8014a40:	f000 f8a2 	bl	8014b88 <uxr_seq_num_cmp>
 8014a44:	2800      	cmp	r0, #0
 8014a46:	db07      	blt.n	8014a58 <uxr_update_output_stream_heartbeat_timestamp+0x24>
 8014a48:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8014a4c:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 8014a50:	e9c4 2306 	strd	r2, r3, [r4, #24]
 8014a54:	2000      	movs	r0, #0
 8014a56:	bd70      	pop	{r4, r5, r6, pc}
 8014a58:	f894 0020 	ldrb.w	r0, [r4, #32]
 8014a5c:	b940      	cbnz	r0, 8014a70 <uxr_update_output_stream_heartbeat_timestamp+0x3c>
 8014a5e:	2301      	movs	r3, #1
 8014a60:	f884 3020 	strb.w	r3, [r4, #32]
 8014a64:	3564      	adds	r5, #100	@ 0x64
 8014a66:	f146 0600 	adc.w	r6, r6, #0
 8014a6a:	e9c4 5606 	strd	r5, r6, [r4, #24]
 8014a6e:	bd70      	pop	{r4, r5, r6, pc}
 8014a70:	e9d4 2306 	ldrd	r2, r3, [r4, #24]
 8014a74:	4295      	cmp	r5, r2
 8014a76:	eb76 0303 	sbcs.w	r3, r6, r3
 8014a7a:	bfa5      	ittet	ge
 8014a7c:	3001      	addge	r0, #1
 8014a7e:	f884 0020 	strbge.w	r0, [r4, #32]
 8014a82:	2000      	movlt	r0, #0
 8014a84:	2001      	movge	r0, #1
 8014a86:	e7ed      	b.n	8014a64 <uxr_update_output_stream_heartbeat_timestamp+0x30>

08014a88 <uxr_begin_output_nack_buffer_it>:
 8014a88:	8a40      	ldrh	r0, [r0, #18]
 8014a8a:	4770      	bx	lr

08014a8c <uxr_next_reliable_nack_buffer_to_send>:
 8014a8c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014a90:	f890 8021 	ldrb.w	r8, [r0, #33]	@ 0x21
 8014a94:	b082      	sub	sp, #8
 8014a96:	f1b8 0f00 	cmp.w	r8, #0
 8014a9a:	d011      	beq.n	8014ac0 <uxr_next_reliable_nack_buffer_to_send+0x34>
 8014a9c:	4604      	mov	r4, r0
 8014a9e:	8818      	ldrh	r0, [r3, #0]
 8014aa0:	460e      	mov	r6, r1
 8014aa2:	4617      	mov	r7, r2
 8014aa4:	461d      	mov	r5, r3
 8014aa6:	2101      	movs	r1, #1
 8014aa8:	f000 f866 	bl	8014b78 <uxr_seq_num_add>
 8014aac:	8028      	strh	r0, [r5, #0]
 8014aae:	8a21      	ldrh	r1, [r4, #16]
 8014ab0:	f000 f86a 	bl	8014b88 <uxr_seq_num_cmp>
 8014ab4:	2800      	cmp	r0, #0
 8014ab6:	dd07      	ble.n	8014ac8 <uxr_next_reliable_nack_buffer_to_send+0x3c>
 8014ab8:	f04f 0800 	mov.w	r8, #0
 8014abc:	f884 8021 	strb.w	r8, [r4, #33]	@ 0x21
 8014ac0:	4640      	mov	r0, r8
 8014ac2:	b002      	add	sp, #8
 8014ac4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014ac8:	8921      	ldrh	r1, [r4, #8]
 8014aca:	8828      	ldrh	r0, [r5, #0]
 8014acc:	6823      	ldr	r3, [r4, #0]
 8014ace:	fbb0 f2f1 	udiv	r2, r0, r1
 8014ad2:	fb01 0c12 	mls	ip, r1, r2, r0
 8014ad6:	fa1f f28c 	uxth.w	r2, ip
 8014ada:	9301      	str	r3, [sp, #4]
 8014adc:	6863      	ldr	r3, [r4, #4]
 8014ade:	fbb3 fcf1 	udiv	ip, r3, r1
 8014ae2:	9b01      	ldr	r3, [sp, #4]
 8014ae4:	fb02 fc0c 	mul.w	ip, r2, ip
 8014ae8:	f10c 0c04 	add.w	ip, ip, #4
 8014aec:	4463      	add	r3, ip
 8014aee:	6033      	str	r3, [r6, #0]
 8014af0:	6823      	ldr	r3, [r4, #0]
 8014af2:	4463      	add	r3, ip
 8014af4:	f853 3c04 	ldr.w	r3, [r3, #-4]
 8014af8:	603b      	str	r3, [r7, #0]
 8014afa:	7b22      	ldrb	r2, [r4, #12]
 8014afc:	429a      	cmp	r2, r3
 8014afe:	d0d2      	beq.n	8014aa6 <uxr_next_reliable_nack_buffer_to_send+0x1a>
 8014b00:	4640      	mov	r0, r8
 8014b02:	b002      	add	sp, #8
 8014b04:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08014b08 <uxr_process_acknack>:
 8014b08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014b0a:	4604      	mov	r4, r0
 8014b0c:	460e      	mov	r6, r1
 8014b0e:	4610      	mov	r0, r2
 8014b10:	2101      	movs	r1, #1
 8014b12:	f000 f835 	bl	8014b80 <uxr_seq_num_sub>
 8014b16:	8a61      	ldrh	r1, [r4, #18]
 8014b18:	f000 f832 	bl	8014b80 <uxr_seq_num_sub>
 8014b1c:	b1c0      	cbz	r0, 8014b50 <uxr_process_acknack+0x48>
 8014b1e:	4605      	mov	r5, r0
 8014b20:	2700      	movs	r7, #0
 8014b22:	2101      	movs	r1, #1
 8014b24:	8a60      	ldrh	r0, [r4, #18]
 8014b26:	f000 f827 	bl	8014b78 <uxr_seq_num_add>
 8014b2a:	f8b4 c008 	ldrh.w	ip, [r4, #8]
 8014b2e:	fbb0 f1fc 	udiv	r1, r0, ip
 8014b32:	e9d4 2300 	ldrd	r2, r3, [r4]
 8014b36:	fb0c 0111 	mls	r1, ip, r1, r0
 8014b3a:	b289      	uxth	r1, r1
 8014b3c:	3701      	adds	r7, #1
 8014b3e:	fbb3 f3fc 	udiv	r3, r3, ip
 8014b42:	fb01 f303 	mul.w	r3, r1, r3
 8014b46:	42bd      	cmp	r5, r7
 8014b48:	7b21      	ldrb	r1, [r4, #12]
 8014b4a:	8260      	strh	r0, [r4, #18]
 8014b4c:	50d1      	str	r1, [r2, r3]
 8014b4e:	d1e8      	bne.n	8014b22 <uxr_process_acknack+0x1a>
 8014b50:	3e00      	subs	r6, #0
 8014b52:	f04f 0300 	mov.w	r3, #0
 8014b56:	bf18      	it	ne
 8014b58:	2601      	movne	r6, #1
 8014b5a:	f884 3020 	strb.w	r3, [r4, #32]
 8014b5e:	f884 6021 	strb.w	r6, [r4, #33]	@ 0x21
 8014b62:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08014b64 <uxr_is_output_up_to_date>:
 8014b64:	8a01      	ldrh	r1, [r0, #16]
 8014b66:	8a40      	ldrh	r0, [r0, #18]
 8014b68:	b508      	push	{r3, lr}
 8014b6a:	f000 f80d 	bl	8014b88 <uxr_seq_num_cmp>
 8014b6e:	fab0 f080 	clz	r0, r0
 8014b72:	0940      	lsrs	r0, r0, #5
 8014b74:	bd08      	pop	{r3, pc}
 8014b76:	bf00      	nop

08014b78 <uxr_seq_num_add>:
 8014b78:	4408      	add	r0, r1
 8014b7a:	b280      	uxth	r0, r0
 8014b7c:	4770      	bx	lr
 8014b7e:	bf00      	nop

08014b80 <uxr_seq_num_sub>:
 8014b80:	1a40      	subs	r0, r0, r1
 8014b82:	b280      	uxth	r0, r0
 8014b84:	4770      	bx	lr
 8014b86:	bf00      	nop

08014b88 <uxr_seq_num_cmp>:
 8014b88:	4288      	cmp	r0, r1
 8014b8a:	d011      	beq.n	8014bb0 <uxr_seq_num_cmp+0x28>
 8014b8c:	d309      	bcc.n	8014ba2 <uxr_seq_num_cmp+0x1a>
 8014b8e:	4288      	cmp	r0, r1
 8014b90:	d910      	bls.n	8014bb4 <uxr_seq_num_cmp+0x2c>
 8014b92:	1a40      	subs	r0, r0, r1
 8014b94:	f5b0 4f00 	cmp.w	r0, #32768	@ 0x8000
 8014b98:	bfd4      	ite	le
 8014b9a:	2001      	movle	r0, #1
 8014b9c:	f04f 30ff 	movgt.w	r0, #4294967295	@ 0xffffffff
 8014ba0:	4770      	bx	lr
 8014ba2:	1a0b      	subs	r3, r1, r0
 8014ba4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8014ba8:	daf1      	bge.n	8014b8e <uxr_seq_num_cmp+0x6>
 8014baa:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8014bae:	4770      	bx	lr
 8014bb0:	2000      	movs	r0, #0
 8014bb2:	4770      	bx	lr
 8014bb4:	2001      	movs	r0, #1
 8014bb6:	4770      	bx	lr

08014bb8 <uxr_prepare_output_stream>:
 8014bb8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8014bba:	b087      	sub	sp, #28
 8014bbc:	2707      	movs	r7, #7
 8014bbe:	9202      	str	r2, [sp, #8]
 8014bc0:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8014bc2:	9103      	str	r1, [sp, #12]
 8014bc4:	2500      	movs	r5, #0
 8014bc6:	3204      	adds	r2, #4
 8014bc8:	e9cd 7500 	strd	r7, r5, [sp]
 8014bcc:	461c      	mov	r4, r3
 8014bce:	4606      	mov	r6, r0
 8014bd0:	f7f9 fa90 	bl	800e0f4 <uxr_prepare_stream_to_write_submessage>
 8014bd4:	f080 0201 	eor.w	r2, r0, #1
 8014bd8:	b2d2      	uxtb	r2, r2
 8014bda:	75a2      	strb	r2, [r4, #22]
 8014bdc:	b112      	cbz	r2, 8014be4 <uxr_prepare_output_stream+0x2c>
 8014bde:	4628      	mov	r0, r5
 8014be0:	b007      	add	sp, #28
 8014be2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8014be4:	aa05      	add	r2, sp, #20
 8014be6:	9902      	ldr	r1, [sp, #8]
 8014be8:	4630      	mov	r0, r6
 8014bea:	f7f9 fbb9 	bl	800e360 <uxr_init_base_object_request>
 8014bee:	a905      	add	r1, sp, #20
 8014bf0:	4605      	mov	r5, r0
 8014bf2:	4620      	mov	r0, r4
 8014bf4:	f7fb f8fa 	bl	800fdec <uxr_serialize_WRITE_DATA_Payload_Data>
 8014bf8:	e9d4 2101 	ldrd	r2, r1, [r4, #4]
 8014bfc:	69a6      	ldr	r6, [r4, #24]
 8014bfe:	69e7      	ldr	r7, [r4, #28]
 8014c00:	1a52      	subs	r2, r2, r1
 8014c02:	4620      	mov	r0, r4
 8014c04:	f7f7 ff5a 	bl	800cabc <ucdr_init_buffer>
 8014c08:	4620      	mov	r0, r4
 8014c0a:	463a      	mov	r2, r7
 8014c0c:	4631      	mov	r1, r6
 8014c0e:	f7f7 ff29 	bl	800ca64 <ucdr_set_on_full_buffer_callback>
 8014c12:	4628      	mov	r0, r5
 8014c14:	b007      	add	sp, #28
 8014c16:	bdf0      	pop	{r4, r5, r6, r7, pc}

08014c18 <rcl_get_default_domain_id>:
 8014c18:	b530      	push	{r4, r5, lr}
 8014c1a:	b083      	sub	sp, #12
 8014c1c:	2300      	movs	r3, #0
 8014c1e:	9300      	str	r3, [sp, #0]
 8014c20:	b1d0      	cbz	r0, 8014c58 <rcl_get_default_domain_id+0x40>
 8014c22:	4604      	mov	r4, r0
 8014c24:	4669      	mov	r1, sp
 8014c26:	4815      	ldr	r0, [pc, #84]	@ (8014c7c <rcl_get_default_domain_id+0x64>)
 8014c28:	f7fd feee 	bl	8012a08 <rcutils_get_env>
 8014c2c:	4602      	mov	r2, r0
 8014c2e:	b110      	cbz	r0, 8014c36 <rcl_get_default_domain_id+0x1e>
 8014c30:	2001      	movs	r0, #1
 8014c32:	b003      	add	sp, #12
 8014c34:	bd30      	pop	{r4, r5, pc}
 8014c36:	9b00      	ldr	r3, [sp, #0]
 8014c38:	b18b      	cbz	r3, 8014c5e <rcl_get_default_domain_id+0x46>
 8014c3a:	7818      	ldrb	r0, [r3, #0]
 8014c3c:	2800      	cmp	r0, #0
 8014c3e:	d0f8      	beq.n	8014c32 <rcl_get_default_domain_id+0x1a>
 8014c40:	a901      	add	r1, sp, #4
 8014c42:	4618      	mov	r0, r3
 8014c44:	9201      	str	r2, [sp, #4]
 8014c46:	f000 fda7 	bl	8015798 <strtoul>
 8014c4a:	4605      	mov	r5, r0
 8014c4c:	b150      	cbz	r0, 8014c64 <rcl_get_default_domain_id+0x4c>
 8014c4e:	1c43      	adds	r3, r0, #1
 8014c50:	d00d      	beq.n	8014c6e <rcl_get_default_domain_id+0x56>
 8014c52:	6025      	str	r5, [r4, #0]
 8014c54:	2000      	movs	r0, #0
 8014c56:	e7ec      	b.n	8014c32 <rcl_get_default_domain_id+0x1a>
 8014c58:	200b      	movs	r0, #11
 8014c5a:	b003      	add	sp, #12
 8014c5c:	bd30      	pop	{r4, r5, pc}
 8014c5e:	4618      	mov	r0, r3
 8014c60:	b003      	add	sp, #12
 8014c62:	bd30      	pop	{r4, r5, pc}
 8014c64:	9b01      	ldr	r3, [sp, #4]
 8014c66:	781b      	ldrb	r3, [r3, #0]
 8014c68:	2b00      	cmp	r3, #0
 8014c6a:	d0f2      	beq.n	8014c52 <rcl_get_default_domain_id+0x3a>
 8014c6c:	e7e0      	b.n	8014c30 <rcl_get_default_domain_id+0x18>
 8014c6e:	f001 f881 	bl	8015d74 <__errno>
 8014c72:	6803      	ldr	r3, [r0, #0]
 8014c74:	2b22      	cmp	r3, #34	@ 0x22
 8014c76:	d1ec      	bne.n	8014c52 <rcl_get_default_domain_id+0x3a>
 8014c78:	e7da      	b.n	8014c30 <rcl_get_default_domain_id+0x18>
 8014c7a:	bf00      	nop
 8014c7c:	08017828 	.word	0x08017828

08014c80 <rcl_expand_topic_name>:
 8014c80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014c84:	b08b      	sub	sp, #44	@ 0x2c
 8014c86:	9306      	str	r3, [sp, #24]
 8014c88:	2800      	cmp	r0, #0
 8014c8a:	f000 80ad 	beq.w	8014de8 <rcl_expand_topic_name+0x168>
 8014c8e:	460e      	mov	r6, r1
 8014c90:	2900      	cmp	r1, #0
 8014c92:	f000 80a9 	beq.w	8014de8 <rcl_expand_topic_name+0x168>
 8014c96:	4617      	mov	r7, r2
 8014c98:	2a00      	cmp	r2, #0
 8014c9a:	f000 80a5 	beq.w	8014de8 <rcl_expand_topic_name+0x168>
 8014c9e:	2b00      	cmp	r3, #0
 8014ca0:	f000 80a2 	beq.w	8014de8 <rcl_expand_topic_name+0x168>
 8014ca4:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8014ca6:	2b00      	cmp	r3, #0
 8014ca8:	f000 809e 	beq.w	8014de8 <rcl_expand_topic_name+0x168>
 8014cac:	2200      	movs	r2, #0
 8014cae:	a909      	add	r1, sp, #36	@ 0x24
 8014cb0:	4680      	mov	r8, r0
 8014cb2:	f000 fa1d 	bl	80150f0 <rcl_validate_topic_name>
 8014cb6:	4604      	mov	r4, r0
 8014cb8:	2800      	cmp	r0, #0
 8014cba:	f040 8096 	bne.w	8014dea <rcl_expand_topic_name+0x16a>
 8014cbe:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8014cc0:	2b00      	cmp	r3, #0
 8014cc2:	f040 809a 	bne.w	8014dfa <rcl_expand_topic_name+0x17a>
 8014cc6:	4602      	mov	r2, r0
 8014cc8:	a909      	add	r1, sp, #36	@ 0x24
 8014cca:	4630      	mov	r0, r6
 8014ccc:	f7fe fae6 	bl	801329c <rmw_validate_node_name>
 8014cd0:	2800      	cmp	r0, #0
 8014cd2:	f040 808e 	bne.w	8014df2 <rcl_expand_topic_name+0x172>
 8014cd6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8014cd8:	2a00      	cmp	r2, #0
 8014cda:	f040 8093 	bne.w	8014e04 <rcl_expand_topic_name+0x184>
 8014cde:	a909      	add	r1, sp, #36	@ 0x24
 8014ce0:	4638      	mov	r0, r7
 8014ce2:	f7fe fabd 	bl	8013260 <rmw_validate_namespace>
 8014ce6:	2800      	cmp	r0, #0
 8014ce8:	f040 8083 	bne.w	8014df2 <rcl_expand_topic_name+0x172>
 8014cec:	9c09      	ldr	r4, [sp, #36]	@ 0x24
 8014cee:	2c00      	cmp	r4, #0
 8014cf0:	f040 80ed 	bne.w	8014ece <rcl_expand_topic_name+0x24e>
 8014cf4:	217b      	movs	r1, #123	@ 0x7b
 8014cf6:	4640      	mov	r0, r8
 8014cf8:	f000 ffb0 	bl	8015c5c <strchr>
 8014cfc:	f898 3000 	ldrb.w	r3, [r8]
 8014d00:	2b2f      	cmp	r3, #47	@ 0x2f
 8014d02:	4605      	mov	r5, r0
 8014d04:	f000 809e 	beq.w	8014e44 <rcl_expand_topic_name+0x1c4>
 8014d08:	2b7e      	cmp	r3, #126	@ 0x7e
 8014d0a:	f040 80a2 	bne.w	8014e52 <rcl_expand_topic_name+0x1d2>
 8014d0e:	4638      	mov	r0, r7
 8014d10:	f7eb fa70 	bl	80001f4 <strlen>
 8014d14:	4a82      	ldr	r2, [pc, #520]	@ (8014f20 <rcl_expand_topic_name+0x2a0>)
 8014d16:	4b83      	ldr	r3, [pc, #524]	@ (8014f24 <rcl_expand_topic_name+0x2a4>)
 8014d18:	2801      	cmp	r0, #1
 8014d1a:	bf18      	it	ne
 8014d1c:	4613      	movne	r3, r2
 8014d1e:	9302      	str	r3, [sp, #8]
 8014d20:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 8014d22:	9300      	str	r3, [sp, #0]
 8014d24:	e9cd 7603 	strd	r7, r6, [sp, #12]
 8014d28:	f108 0301 	add.w	r3, r8, #1
 8014d2c:	9305      	str	r3, [sp, #20]
 8014d2e:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8014d32:	9301      	str	r3, [sp, #4]
 8014d34:	ab14      	add	r3, sp, #80	@ 0x50
 8014d36:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8014d38:	f7fd fe8e 	bl	8012a58 <rcutils_format_string_limit>
 8014d3c:	4682      	mov	sl, r0
 8014d3e:	2800      	cmp	r0, #0
 8014d40:	f000 80c7 	beq.w	8014ed2 <rcl_expand_topic_name+0x252>
 8014d44:	2d00      	cmp	r5, #0
 8014d46:	f000 80a2 	beq.w	8014e8e <rcl_expand_topic_name+0x20e>
 8014d4a:	217b      	movs	r1, #123	@ 0x7b
 8014d4c:	f000 ff86 	bl	8015c5c <strchr>
 8014d50:	46d1      	mov	r9, sl
 8014d52:	4605      	mov	r5, r0
 8014d54:	9407      	str	r4, [sp, #28]
 8014d56:	46d3      	mov	fp, sl
 8014d58:	464c      	mov	r4, r9
 8014d5a:	2d00      	cmp	r5, #0
 8014d5c:	f000 80be 	beq.w	8014edc <rcl_expand_topic_name+0x25c>
 8014d60:	217d      	movs	r1, #125	@ 0x7d
 8014d62:	4620      	mov	r0, r4
 8014d64:	f000 ff7a 	bl	8015c5c <strchr>
 8014d68:	eba0 0905 	sub.w	r9, r0, r5
 8014d6c:	f109 0a01 	add.w	sl, r9, #1
 8014d70:	486d      	ldr	r0, [pc, #436]	@ (8014f28 <rcl_expand_topic_name+0x2a8>)
 8014d72:	4652      	mov	r2, sl
 8014d74:	4629      	mov	r1, r5
 8014d76:	f000 ff7e 	bl	8015c76 <strncmp>
 8014d7a:	2800      	cmp	r0, #0
 8014d7c:	d067      	beq.n	8014e4e <rcl_expand_topic_name+0x1ce>
 8014d7e:	486b      	ldr	r0, [pc, #428]	@ (8014f2c <rcl_expand_topic_name+0x2ac>)
 8014d80:	4652      	mov	r2, sl
 8014d82:	4629      	mov	r1, r5
 8014d84:	f000 ff77 	bl	8015c76 <strncmp>
 8014d88:	b130      	cbz	r0, 8014d98 <rcl_expand_topic_name+0x118>
 8014d8a:	4869      	ldr	r0, [pc, #420]	@ (8014f30 <rcl_expand_topic_name+0x2b0>)
 8014d8c:	4652      	mov	r2, sl
 8014d8e:	4629      	mov	r1, r5
 8014d90:	f000 ff71 	bl	8015c76 <strncmp>
 8014d94:	2800      	cmp	r0, #0
 8014d96:	d137      	bne.n	8014e08 <rcl_expand_topic_name+0x188>
 8014d98:	46b9      	mov	r9, r7
 8014d9a:	ab16      	add	r3, sp, #88	@ 0x58
 8014d9c:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8014da0:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 8014da4:	ab14      	add	r3, sp, #80	@ 0x50
 8014da6:	4628      	mov	r0, r5
 8014da8:	cb0c      	ldmia	r3, {r2, r3}
 8014daa:	4651      	mov	r1, sl
 8014dac:	f7fd ff90 	bl	8012cd0 <rcutils_strndup>
 8014db0:	4605      	mov	r5, r0
 8014db2:	2800      	cmp	r0, #0
 8014db4:	f000 809c 	beq.w	8014ef0 <rcl_expand_topic_name+0x270>
 8014db8:	464a      	mov	r2, r9
 8014dba:	4620      	mov	r0, r4
 8014dbc:	ab14      	add	r3, sp, #80	@ 0x50
 8014dbe:	4629      	mov	r1, r5
 8014dc0:	f7fd fe84 	bl	8012acc <rcutils_repl_str>
 8014dc4:	9918      	ldr	r1, [sp, #96]	@ 0x60
 8014dc6:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8014dc8:	4604      	mov	r4, r0
 8014dca:	4628      	mov	r0, r5
 8014dcc:	4798      	blx	r3
 8014dce:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8014dd0:	9918      	ldr	r1, [sp, #96]	@ 0x60
 8014dd2:	4658      	mov	r0, fp
 8014dd4:	4798      	blx	r3
 8014dd6:	2c00      	cmp	r4, #0
 8014dd8:	d07b      	beq.n	8014ed2 <rcl_expand_topic_name+0x252>
 8014dda:	217b      	movs	r1, #123	@ 0x7b
 8014ddc:	4620      	mov	r0, r4
 8014dde:	f000 ff3d 	bl	8015c5c <strchr>
 8014de2:	46a3      	mov	fp, r4
 8014de4:	4605      	mov	r5, r0
 8014de6:	e7b8      	b.n	8014d5a <rcl_expand_topic_name+0xda>
 8014de8:	240b      	movs	r4, #11
 8014dea:	4620      	mov	r0, r4
 8014dec:	b00b      	add	sp, #44	@ 0x2c
 8014dee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014df2:	f7fb f967 	bl	80100c4 <rcl_convert_rmw_ret_to_rcl_ret>
 8014df6:	4604      	mov	r4, r0
 8014df8:	e7f7      	b.n	8014dea <rcl_expand_topic_name+0x16a>
 8014dfa:	2467      	movs	r4, #103	@ 0x67
 8014dfc:	4620      	mov	r0, r4
 8014dfe:	b00b      	add	sp, #44	@ 0x2c
 8014e00:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014e04:	24c9      	movs	r4, #201	@ 0xc9
 8014e06:	e7f0      	b.n	8014dea <rcl_expand_topic_name+0x16a>
 8014e08:	f109 32ff 	add.w	r2, r9, #4294967295	@ 0xffffffff
 8014e0c:	9806      	ldr	r0, [sp, #24]
 8014e0e:	1c69      	adds	r1, r5, #1
 8014e10:	f7fe f878 	bl	8012f04 <rcutils_string_map_getn>
 8014e14:	4681      	mov	r9, r0
 8014e16:	2800      	cmp	r0, #0
 8014e18:	d1bf      	bne.n	8014d9a <rcl_expand_topic_name+0x11a>
 8014e1a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8014e1c:	aa16      	add	r2, sp, #88	@ 0x58
 8014e1e:	6018      	str	r0, [r3, #0]
 8014e20:	ca07      	ldmia	r2, {r0, r1, r2}
 8014e22:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 8014e26:	ab14      	add	r3, sp, #80	@ 0x50
 8014e28:	cb0c      	ldmia	r3, {r2, r3}
 8014e2a:	4651      	mov	r1, sl
 8014e2c:	4628      	mov	r0, r5
 8014e2e:	f7fd ff4f 	bl	8012cd0 <rcutils_strndup>
 8014e32:	9918      	ldr	r1, [sp, #96]	@ 0x60
 8014e34:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8014e36:	4798      	blx	r3
 8014e38:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8014e3a:	9918      	ldr	r1, [sp, #96]	@ 0x60
 8014e3c:	4658      	mov	r0, fp
 8014e3e:	2469      	movs	r4, #105	@ 0x69
 8014e40:	4798      	blx	r3
 8014e42:	e7d2      	b.n	8014dea <rcl_expand_topic_name+0x16a>
 8014e44:	2800      	cmp	r0, #0
 8014e46:	d05b      	beq.n	8014f00 <rcl_expand_topic_name+0x280>
 8014e48:	46c1      	mov	r9, r8
 8014e4a:	46a2      	mov	sl, r4
 8014e4c:	e782      	b.n	8014d54 <rcl_expand_topic_name+0xd4>
 8014e4e:	46b1      	mov	r9, r6
 8014e50:	e7a3      	b.n	8014d9a <rcl_expand_topic_name+0x11a>
 8014e52:	2800      	cmp	r0, #0
 8014e54:	d1f8      	bne.n	8014e48 <rcl_expand_topic_name+0x1c8>
 8014e56:	4638      	mov	r0, r7
 8014e58:	f7eb f9cc 	bl	80001f4 <strlen>
 8014e5c:	4a35      	ldr	r2, [pc, #212]	@ (8014f34 <rcl_expand_topic_name+0x2b4>)
 8014e5e:	4b36      	ldr	r3, [pc, #216]	@ (8014f38 <rcl_expand_topic_name+0x2b8>)
 8014e60:	f8cd 8010 	str.w	r8, [sp, #16]
 8014e64:	2801      	cmp	r0, #1
 8014e66:	bf18      	it	ne
 8014e68:	4613      	movne	r3, r2
 8014e6a:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8014e6e:	e9cd 1301 	strd	r1, r3, [sp, #4]
 8014e72:	9a18      	ldr	r2, [sp, #96]	@ 0x60
 8014e74:	9703      	str	r7, [sp, #12]
 8014e76:	9200      	str	r2, [sp, #0]
 8014e78:	ab14      	add	r3, sp, #80	@ 0x50
 8014e7a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8014e7c:	f7fd fdec 	bl	8012a58 <rcutils_format_string_limit>
 8014e80:	4682      	mov	sl, r0
 8014e82:	4653      	mov	r3, sl
 8014e84:	b32b      	cbz	r3, 8014ed2 <rcl_expand_topic_name+0x252>
 8014e86:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8014e88:	f8c3 a000 	str.w	sl, [r3]
 8014e8c:	e7ad      	b.n	8014dea <rcl_expand_topic_name+0x16a>
 8014e8e:	f89a 3000 	ldrb.w	r3, [sl]
 8014e92:	2b2f      	cmp	r3, #47	@ 0x2f
 8014e94:	d0f7      	beq.n	8014e86 <rcl_expand_topic_name+0x206>
 8014e96:	4638      	mov	r0, r7
 8014e98:	f7eb f9ac 	bl	80001f4 <strlen>
 8014e9c:	4a25      	ldr	r2, [pc, #148]	@ (8014f34 <rcl_expand_topic_name+0x2b4>)
 8014e9e:	4b26      	ldr	r3, [pc, #152]	@ (8014f38 <rcl_expand_topic_name+0x2b8>)
 8014ea0:	f8cd a010 	str.w	sl, [sp, #16]
 8014ea4:	2801      	cmp	r0, #1
 8014ea6:	bf18      	it	ne
 8014ea8:	4613      	movne	r3, r2
 8014eaa:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8014eae:	e9cd 1301 	strd	r1, r3, [sp, #4]
 8014eb2:	9a18      	ldr	r2, [sp, #96]	@ 0x60
 8014eb4:	9703      	str	r7, [sp, #12]
 8014eb6:	9200      	str	r2, [sp, #0]
 8014eb8:	ab14      	add	r3, sp, #80	@ 0x50
 8014eba:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8014ebc:	f7fd fdcc 	bl	8012a58 <rcutils_format_string_limit>
 8014ec0:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8014ec2:	9918      	ldr	r1, [sp, #96]	@ 0x60
 8014ec4:	4605      	mov	r5, r0
 8014ec6:	4650      	mov	r0, sl
 8014ec8:	4798      	blx	r3
 8014eca:	46aa      	mov	sl, r5
 8014ecc:	e7d9      	b.n	8014e82 <rcl_expand_topic_name+0x202>
 8014ece:	24ca      	movs	r4, #202	@ 0xca
 8014ed0:	e78b      	b.n	8014dea <rcl_expand_topic_name+0x16a>
 8014ed2:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8014ed4:	2300      	movs	r3, #0
 8014ed6:	6013      	str	r3, [r2, #0]
 8014ed8:	240a      	movs	r4, #10
 8014eda:	e786      	b.n	8014dea <rcl_expand_topic_name+0x16a>
 8014edc:	465b      	mov	r3, fp
 8014ede:	9c07      	ldr	r4, [sp, #28]
 8014ee0:	46da      	mov	sl, fp
 8014ee2:	2b00      	cmp	r3, #0
 8014ee4:	d1d3      	bne.n	8014e8e <rcl_expand_topic_name+0x20e>
 8014ee6:	f898 3000 	ldrb.w	r3, [r8]
 8014eea:	2b2f      	cmp	r3, #47	@ 0x2f
 8014eec:	d0cb      	beq.n	8014e86 <rcl_expand_topic_name+0x206>
 8014eee:	e7b2      	b.n	8014e56 <rcl_expand_topic_name+0x1d6>
 8014ef0:	e9dd 1218 	ldrd	r1, r2, [sp, #96]	@ 0x60
 8014ef4:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8014ef6:	6015      	str	r5, [r2, #0]
 8014ef8:	4658      	mov	r0, fp
 8014efa:	4798      	blx	r3
 8014efc:	240a      	movs	r4, #10
 8014efe:	e774      	b.n	8014dea <rcl_expand_topic_name+0x16a>
 8014f00:	ab17      	add	r3, sp, #92	@ 0x5c
 8014f02:	e893 0003 	ldmia.w	r3, {r0, r1}
 8014f06:	e88d 0003 	stmia.w	sp, {r0, r1}
 8014f0a:	ab14      	add	r3, sp, #80	@ 0x50
 8014f0c:	cb0e      	ldmia	r3, {r1, r2, r3}
 8014f0e:	4640      	mov	r0, r8
 8014f10:	f7fd febc 	bl	8012c8c <rcutils_strdup>
 8014f14:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8014f16:	2800      	cmp	r0, #0
 8014f18:	6018      	str	r0, [r3, #0]
 8014f1a:	bf08      	it	eq
 8014f1c:	240a      	moveq	r4, #10
 8014f1e:	e764      	b.n	8014dea <rcl_expand_topic_name+0x16a>
 8014f20:	08017838 	.word	0x08017838
 8014f24:	08016dfc 	.word	0x08016dfc
 8014f28:	08017840 	.word	0x08017840
 8014f2c:	08017848 	.word	0x08017848
 8014f30:	08017850 	.word	0x08017850
 8014f34:	08016dc4 	.word	0x08016dc4
 8014f38:	08016e0c 	.word	0x08016e0c

08014f3c <rcl_get_default_topic_name_substitutions>:
 8014f3c:	2800      	cmp	r0, #0
 8014f3e:	bf0c      	ite	eq
 8014f40:	200b      	moveq	r0, #11
 8014f42:	2000      	movne	r0, #0
 8014f44:	4770      	bx	lr
 8014f46:	bf00      	nop

08014f48 <rcl_get_zero_initialized_guard_condition>:
 8014f48:	4a03      	ldr	r2, [pc, #12]	@ (8014f58 <rcl_get_zero_initialized_guard_condition+0x10>)
 8014f4a:	4603      	mov	r3, r0
 8014f4c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8014f50:	e883 0003 	stmia.w	r3, {r0, r1}
 8014f54:	4618      	mov	r0, r3
 8014f56:	4770      	bx	lr
 8014f58:	0801785c 	.word	0x0801785c

08014f5c <rcl_guard_condition_init_from_rmw>:
 8014f5c:	b082      	sub	sp, #8
 8014f5e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014f62:	b086      	sub	sp, #24
 8014f64:	f10d 0c30 	add.w	ip, sp, #48	@ 0x30
 8014f68:	4604      	mov	r4, r0
 8014f6a:	f84c 3f04 	str.w	r3, [ip, #4]!
 8014f6e:	460e      	mov	r6, r1
 8014f70:	4617      	mov	r7, r2
 8014f72:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8014f76:	f10d 0e04 	add.w	lr, sp, #4
 8014f7a:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8014f7e:	f8dc 3000 	ldr.w	r3, [ip]
 8014f82:	f8ce 3000 	str.w	r3, [lr]
 8014f86:	a801      	add	r0, sp, #4
 8014f88:	f7f5 fa44 	bl	800a414 <rcutils_allocator_is_valid>
 8014f8c:	b350      	cbz	r0, 8014fe4 <rcl_guard_condition_init_from_rmw+0x88>
 8014f8e:	b34c      	cbz	r4, 8014fe4 <rcl_guard_condition_init_from_rmw+0x88>
 8014f90:	f8d4 8004 	ldr.w	r8, [r4, #4]
 8014f94:	f1b8 0f00 	cmp.w	r8, #0
 8014f98:	d11e      	bne.n	8014fd8 <rcl_guard_condition_init_from_rmw+0x7c>
 8014f9a:	b31f      	cbz	r7, 8014fe4 <rcl_guard_condition_init_from_rmw+0x88>
 8014f9c:	4638      	mov	r0, r7
 8014f9e:	f7fb f8af 	bl	8010100 <rcl_context_is_valid>
 8014fa2:	b328      	cbz	r0, 8014ff0 <rcl_guard_condition_init_from_rmw+0x94>
 8014fa4:	9b01      	ldr	r3, [sp, #4]
 8014fa6:	9905      	ldr	r1, [sp, #20]
 8014fa8:	201c      	movs	r0, #28
 8014faa:	4798      	blx	r3
 8014fac:	4605      	mov	r5, r0
 8014fae:	6060      	str	r0, [r4, #4]
 8014fb0:	b358      	cbz	r0, 801500a <rcl_guard_condition_init_from_rmw+0xae>
 8014fb2:	b1fe      	cbz	r6, 8014ff4 <rcl_guard_condition_init_from_rmw+0x98>
 8014fb4:	6006      	str	r6, [r0, #0]
 8014fb6:	f880 8004 	strb.w	r8, [r0, #4]
 8014fba:	ac01      	add	r4, sp, #4
 8014fbc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8014fbe:	f105 0c08 	add.w	ip, r5, #8
 8014fc2:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8014fc6:	6823      	ldr	r3, [r4, #0]
 8014fc8:	f8cc 3000 	str.w	r3, [ip]
 8014fcc:	2000      	movs	r0, #0
 8014fce:	b006      	add	sp, #24
 8014fd0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8014fd4:	b002      	add	sp, #8
 8014fd6:	4770      	bx	lr
 8014fd8:	2064      	movs	r0, #100	@ 0x64
 8014fda:	b006      	add	sp, #24
 8014fdc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8014fe0:	b002      	add	sp, #8
 8014fe2:	4770      	bx	lr
 8014fe4:	200b      	movs	r0, #11
 8014fe6:	b006      	add	sp, #24
 8014fe8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8014fec:	b002      	add	sp, #8
 8014fee:	4770      	bx	lr
 8014ff0:	2065      	movs	r0, #101	@ 0x65
 8014ff2:	e7f2      	b.n	8014fda <rcl_guard_condition_init_from_rmw+0x7e>
 8014ff4:	6838      	ldr	r0, [r7, #0]
 8014ff6:	3028      	adds	r0, #40	@ 0x28
 8014ff8:	f000 f974 	bl	80152e4 <rmw_create_guard_condition>
 8014ffc:	6028      	str	r0, [r5, #0]
 8014ffe:	6865      	ldr	r5, [r4, #4]
 8015000:	682e      	ldr	r6, [r5, #0]
 8015002:	b126      	cbz	r6, 801500e <rcl_guard_condition_init_from_rmw+0xb2>
 8015004:	2301      	movs	r3, #1
 8015006:	712b      	strb	r3, [r5, #4]
 8015008:	e7d7      	b.n	8014fba <rcl_guard_condition_init_from_rmw+0x5e>
 801500a:	200a      	movs	r0, #10
 801500c:	e7e5      	b.n	8014fda <rcl_guard_condition_init_from_rmw+0x7e>
 801500e:	4628      	mov	r0, r5
 8015010:	9b02      	ldr	r3, [sp, #8]
 8015012:	9905      	ldr	r1, [sp, #20]
 8015014:	4798      	blx	r3
 8015016:	6066      	str	r6, [r4, #4]
 8015018:	2001      	movs	r0, #1
 801501a:	e7de      	b.n	8014fda <rcl_guard_condition_init_from_rmw+0x7e>

0801501c <rcl_guard_condition_fini>:
 801501c:	b570      	push	{r4, r5, r6, lr}
 801501e:	b082      	sub	sp, #8
 8015020:	b1f0      	cbz	r0, 8015060 <rcl_guard_condition_fini+0x44>
 8015022:	6843      	ldr	r3, [r0, #4]
 8015024:	4604      	mov	r4, r0
 8015026:	b163      	cbz	r3, 8015042 <rcl_guard_condition_fini+0x26>
 8015028:	6818      	ldr	r0, [r3, #0]
 801502a:	68de      	ldr	r6, [r3, #12]
 801502c:	6999      	ldr	r1, [r3, #24]
 801502e:	b160      	cbz	r0, 801504a <rcl_guard_condition_fini+0x2e>
 8015030:	791d      	ldrb	r5, [r3, #4]
 8015032:	b965      	cbnz	r5, 801504e <rcl_guard_condition_fini+0x32>
 8015034:	4618      	mov	r0, r3
 8015036:	47b0      	blx	r6
 8015038:	2300      	movs	r3, #0
 801503a:	4628      	mov	r0, r5
 801503c:	6063      	str	r3, [r4, #4]
 801503e:	b002      	add	sp, #8
 8015040:	bd70      	pop	{r4, r5, r6, pc}
 8015042:	461d      	mov	r5, r3
 8015044:	4628      	mov	r0, r5
 8015046:	b002      	add	sp, #8
 8015048:	bd70      	pop	{r4, r5, r6, pc}
 801504a:	4605      	mov	r5, r0
 801504c:	e7f2      	b.n	8015034 <rcl_guard_condition_fini+0x18>
 801504e:	9101      	str	r1, [sp, #4]
 8015050:	f000 f95c 	bl	801530c <rmw_destroy_guard_condition>
 8015054:	1e05      	subs	r5, r0, #0
 8015056:	6863      	ldr	r3, [r4, #4]
 8015058:	9901      	ldr	r1, [sp, #4]
 801505a:	bf18      	it	ne
 801505c:	2501      	movne	r5, #1
 801505e:	e7e9      	b.n	8015034 <rcl_guard_condition_fini+0x18>
 8015060:	250b      	movs	r5, #11
 8015062:	4628      	mov	r0, r5
 8015064:	b002      	add	sp, #8
 8015066:	bd70      	pop	{r4, r5, r6, pc}

08015068 <rcl_guard_condition_get_default_options>:
 8015068:	b5f0      	push	{r4, r5, r6, r7, lr}
 801506a:	b087      	sub	sp, #28
 801506c:	4606      	mov	r6, r0
 801506e:	4668      	mov	r0, sp
 8015070:	f7f5 f9c2 	bl	800a3f8 <rcutils_get_default_allocator>
 8015074:	4b09      	ldr	r3, [pc, #36]	@ (801509c <rcl_guard_condition_get_default_options+0x34>)
 8015076:	46ee      	mov	lr, sp
 8015078:	469c      	mov	ip, r3
 801507a:	461d      	mov	r5, r3
 801507c:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8015080:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8015084:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8015086:	4634      	mov	r4, r6
 8015088:	f8de 7000 	ldr.w	r7, [lr]
 801508c:	f8cc 7000 	str.w	r7, [ip]
 8015090:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8015092:	4630      	mov	r0, r6
 8015094:	6027      	str	r7, [r4, #0]
 8015096:	b007      	add	sp, #28
 8015098:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801509a:	bf00      	nop
 801509c:	2000dccc 	.word	0x2000dccc

080150a0 <rcl_guard_condition_get_rmw_handle>:
 80150a0:	b110      	cbz	r0, 80150a8 <rcl_guard_condition_get_rmw_handle+0x8>
 80150a2:	6840      	ldr	r0, [r0, #4]
 80150a4:	b100      	cbz	r0, 80150a8 <rcl_guard_condition_get_rmw_handle+0x8>
 80150a6:	6800      	ldr	r0, [r0, #0]
 80150a8:	4770      	bx	lr
 80150aa:	bf00      	nop

080150ac <rcl_publisher_is_valid>:
 80150ac:	b1a0      	cbz	r0, 80150d8 <rcl_publisher_is_valid+0x2c>
 80150ae:	6803      	ldr	r3, [r0, #0]
 80150b0:	b510      	push	{r4, lr}
 80150b2:	4604      	mov	r4, r0
 80150b4:	b173      	cbz	r3, 80150d4 <rcl_publisher_is_valid+0x28>
 80150b6:	f8d3 20c4 	ldr.w	r2, [r3, #196]	@ 0xc4
 80150ba:	b15a      	cbz	r2, 80150d4 <rcl_publisher_is_valid+0x28>
 80150bc:	f8d3 00c0 	ldr.w	r0, [r3, #192]	@ 0xc0
 80150c0:	f7fb f81e 	bl	8010100 <rcl_context_is_valid>
 80150c4:	b130      	cbz	r0, 80150d4 <rcl_publisher_is_valid+0x28>
 80150c6:	6823      	ldr	r3, [r4, #0]
 80150c8:	f8d3 00c4 	ldr.w	r0, [r3, #196]	@ 0xc4
 80150cc:	3800      	subs	r0, #0
 80150ce:	bf18      	it	ne
 80150d0:	2001      	movne	r0, #1
 80150d2:	bd10      	pop	{r4, pc}
 80150d4:	2000      	movs	r0, #0
 80150d6:	bd10      	pop	{r4, pc}
 80150d8:	2000      	movs	r0, #0
 80150da:	4770      	bx	lr

080150dc <rcl_publisher_is_valid_except_context>:
 80150dc:	b130      	cbz	r0, 80150ec <rcl_publisher_is_valid_except_context+0x10>
 80150de:	6800      	ldr	r0, [r0, #0]
 80150e0:	b120      	cbz	r0, 80150ec <rcl_publisher_is_valid_except_context+0x10>
 80150e2:	f8d0 00c4 	ldr.w	r0, [r0, #196]	@ 0xc4
 80150e6:	3800      	subs	r0, #0
 80150e8:	bf18      	it	ne
 80150ea:	2001      	movne	r0, #1
 80150ec:	4770      	bx	lr
 80150ee:	bf00      	nop

080150f0 <rcl_validate_topic_name>:
 80150f0:	2800      	cmp	r0, #0
 80150f2:	d07a      	beq.n	80151ea <rcl_validate_topic_name+0xfa>
 80150f4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80150f8:	460e      	mov	r6, r1
 80150fa:	2900      	cmp	r1, #0
 80150fc:	d07c      	beq.n	80151f8 <rcl_validate_topic_name+0x108>
 80150fe:	4617      	mov	r7, r2
 8015100:	4605      	mov	r5, r0
 8015102:	f7eb f877 	bl	80001f4 <strlen>
 8015106:	b1b0      	cbz	r0, 8015136 <rcl_validate_topic_name+0x46>
 8015108:	f895 9000 	ldrb.w	r9, [r5]
 801510c:	f8df c180 	ldr.w	ip, [pc, #384]	@ 8015290 <rcl_validate_topic_name+0x1a0>
 8015110:	f81c 3009 	ldrb.w	r3, [ip, r9]
 8015114:	f013 0304 	ands.w	r3, r3, #4
 8015118:	d169      	bne.n	80151ee <rcl_validate_topic_name+0xfe>
 801511a:	f100 38ff 	add.w	r8, r0, #4294967295	@ 0xffffffff
 801511e:	f815 2008 	ldrb.w	r2, [r5, r8]
 8015122:	2a2f      	cmp	r2, #47	@ 0x2f
 8015124:	d10e      	bne.n	8015144 <rcl_validate_topic_name+0x54>
 8015126:	2202      	movs	r2, #2
 8015128:	6032      	str	r2, [r6, #0]
 801512a:	b36f      	cbz	r7, 8015188 <rcl_validate_topic_name+0x98>
 801512c:	f8c7 8000 	str.w	r8, [r7]
 8015130:	4618      	mov	r0, r3
 8015132:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8015136:	2301      	movs	r3, #1
 8015138:	6033      	str	r3, [r6, #0]
 801513a:	b32f      	cbz	r7, 8015188 <rcl_validate_topic_name+0x98>
 801513c:	2000      	movs	r0, #0
 801513e:	6038      	str	r0, [r7, #0]
 8015140:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8015144:	f105 3aff 	add.w	sl, r5, #4294967295	@ 0xffffffff
 8015148:	461c      	mov	r4, r3
 801514a:	4619      	mov	r1, r3
 801514c:	f81a 2f01 	ldrb.w	r2, [sl, #1]!
 8015150:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 8015154:	f1be 0f09 	cmp.w	lr, #9
 8015158:	d919      	bls.n	801518e <rcl_validate_topic_name+0x9e>
 801515a:	f022 0e20 	bic.w	lr, r2, #32
 801515e:	f1ae 0e41 	sub.w	lr, lr, #65	@ 0x41
 8015162:	f1be 0f19 	cmp.w	lr, #25
 8015166:	d912      	bls.n	801518e <rcl_validate_topic_name+0x9e>
 8015168:	2a5f      	cmp	r2, #95	@ 0x5f
 801516a:	d019      	beq.n	80151a0 <rcl_validate_topic_name+0xb0>
 801516c:	2a2f      	cmp	r2, #47	@ 0x2f
 801516e:	d051      	beq.n	8015214 <rcl_validate_topic_name+0x124>
 8015170:	2a7e      	cmp	r2, #126	@ 0x7e
 8015172:	d048      	beq.n	8015206 <rcl_validate_topic_name+0x116>
 8015174:	2a7b      	cmp	r2, #123	@ 0x7b
 8015176:	d054      	beq.n	8015222 <rcl_validate_topic_name+0x132>
 8015178:	2a7d      	cmp	r2, #125	@ 0x7d
 801517a:	d161      	bne.n	8015240 <rcl_validate_topic_name+0x150>
 801517c:	2c00      	cmp	r4, #0
 801517e:	d155      	bne.n	801522c <rcl_validate_topic_name+0x13c>
 8015180:	2305      	movs	r3, #5
 8015182:	6033      	str	r3, [r6, #0]
 8015184:	b107      	cbz	r7, 8015188 <rcl_validate_topic_name+0x98>
 8015186:	6039      	str	r1, [r7, #0]
 8015188:	2000      	movs	r0, #0
 801518a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801518e:	f81c 2002 	ldrb.w	r2, [ip, r2]
 8015192:	0752      	lsls	r2, r2, #29
 8015194:	d504      	bpl.n	80151a0 <rcl_validate_topic_name+0xb0>
 8015196:	b11c      	cbz	r4, 80151a0 <rcl_validate_topic_name+0xb0>
 8015198:	b111      	cbz	r1, 80151a0 <rcl_validate_topic_name+0xb0>
 801519a:	1e4a      	subs	r2, r1, #1
 801519c:	429a      	cmp	r2, r3
 801519e:	d02d      	beq.n	80151fc <rcl_validate_topic_name+0x10c>
 80151a0:	3101      	adds	r1, #1
 80151a2:	4288      	cmp	r0, r1
 80151a4:	d1d2      	bne.n	801514c <rcl_validate_topic_name+0x5c>
 80151a6:	2c00      	cmp	r4, #0
 80151a8:	d145      	bne.n	8015236 <rcl_validate_topic_name+0x146>
 80151aa:	f1b9 0f7e 	cmp.w	r9, #126	@ 0x7e
 80151ae:	d04f      	beq.n	8015250 <rcl_validate_topic_name+0x160>
 80151b0:	4620      	mov	r0, r4
 80151b2:	2301      	movs	r3, #1
 80151b4:	e006      	b.n	80151c4 <rcl_validate_topic_name+0xd4>
 80151b6:	428b      	cmp	r3, r1
 80151b8:	f105 0501 	add.w	r5, r5, #1
 80151bc:	f103 0201 	add.w	r2, r3, #1
 80151c0:	d236      	bcs.n	8015230 <rcl_validate_topic_name+0x140>
 80151c2:	4613      	mov	r3, r2
 80151c4:	4580      	cmp	r8, r0
 80151c6:	f100 0001 	add.w	r0, r0, #1
 80151ca:	d0f4      	beq.n	80151b6 <rcl_validate_topic_name+0xc6>
 80151cc:	782a      	ldrb	r2, [r5, #0]
 80151ce:	2a2f      	cmp	r2, #47	@ 0x2f
 80151d0:	d1f1      	bne.n	80151b6 <rcl_validate_topic_name+0xc6>
 80151d2:	786a      	ldrb	r2, [r5, #1]
 80151d4:	f81c 2002 	ldrb.w	r2, [ip, r2]
 80151d8:	0754      	lsls	r4, r2, #29
 80151da:	d5ec      	bpl.n	80151b6 <rcl_validate_topic_name+0xc6>
 80151dc:	2204      	movs	r2, #4
 80151de:	6032      	str	r2, [r6, #0]
 80151e0:	2f00      	cmp	r7, #0
 80151e2:	d0d1      	beq.n	8015188 <rcl_validate_topic_name+0x98>
 80151e4:	603b      	str	r3, [r7, #0]
 80151e6:	2000      	movs	r0, #0
 80151e8:	e7aa      	b.n	8015140 <rcl_validate_topic_name+0x50>
 80151ea:	200b      	movs	r0, #11
 80151ec:	4770      	bx	lr
 80151ee:	2304      	movs	r3, #4
 80151f0:	6033      	str	r3, [r6, #0]
 80151f2:	2f00      	cmp	r7, #0
 80151f4:	d1a2      	bne.n	801513c <rcl_validate_topic_name+0x4c>
 80151f6:	e7c7      	b.n	8015188 <rcl_validate_topic_name+0x98>
 80151f8:	200b      	movs	r0, #11
 80151fa:	e7a1      	b.n	8015140 <rcl_validate_topic_name+0x50>
 80151fc:	2309      	movs	r3, #9
 80151fe:	6033      	str	r3, [r6, #0]
 8015200:	2f00      	cmp	r7, #0
 8015202:	d1c0      	bne.n	8015186 <rcl_validate_topic_name+0x96>
 8015204:	e7c0      	b.n	8015188 <rcl_validate_topic_name+0x98>
 8015206:	2900      	cmp	r1, #0
 8015208:	d0ca      	beq.n	80151a0 <rcl_validate_topic_name+0xb0>
 801520a:	2306      	movs	r3, #6
 801520c:	6033      	str	r3, [r6, #0]
 801520e:	2f00      	cmp	r7, #0
 8015210:	d1b9      	bne.n	8015186 <rcl_validate_topic_name+0x96>
 8015212:	e7b9      	b.n	8015188 <rcl_validate_topic_name+0x98>
 8015214:	2c00      	cmp	r4, #0
 8015216:	d0c3      	beq.n	80151a0 <rcl_validate_topic_name+0xb0>
 8015218:	2308      	movs	r3, #8
 801521a:	6033      	str	r3, [r6, #0]
 801521c:	2f00      	cmp	r7, #0
 801521e:	d1b2      	bne.n	8015186 <rcl_validate_topic_name+0x96>
 8015220:	e7b2      	b.n	8015188 <rcl_validate_topic_name+0x98>
 8015222:	2c00      	cmp	r4, #0
 8015224:	d1f8      	bne.n	8015218 <rcl_validate_topic_name+0x128>
 8015226:	460b      	mov	r3, r1
 8015228:	2401      	movs	r4, #1
 801522a:	e7b9      	b.n	80151a0 <rcl_validate_topic_name+0xb0>
 801522c:	2400      	movs	r4, #0
 801522e:	e7b7      	b.n	80151a0 <rcl_validate_topic_name+0xb0>
 8015230:	2000      	movs	r0, #0
 8015232:	6030      	str	r0, [r6, #0]
 8015234:	e784      	b.n	8015140 <rcl_validate_topic_name+0x50>
 8015236:	2205      	movs	r2, #5
 8015238:	6032      	str	r2, [r6, #0]
 801523a:	2f00      	cmp	r7, #0
 801523c:	d1d2      	bne.n	80151e4 <rcl_validate_topic_name+0xf4>
 801523e:	e7a3      	b.n	8015188 <rcl_validate_topic_name+0x98>
 8015240:	2c00      	cmp	r4, #0
 8015242:	bf14      	ite	ne
 8015244:	2308      	movne	r3, #8
 8015246:	2303      	moveq	r3, #3
 8015248:	6033      	str	r3, [r6, #0]
 801524a:	2f00      	cmp	r7, #0
 801524c:	d19b      	bne.n	8015186 <rcl_validate_topic_name+0x96>
 801524e:	e79b      	b.n	8015188 <rcl_validate_topic_name+0x98>
 8015250:	2301      	movs	r3, #1
 8015252:	e00a      	b.n	801526a <rcl_validate_topic_name+0x17a>
 8015254:	2c01      	cmp	r4, #1
 8015256:	d013      	beq.n	8015280 <rcl_validate_topic_name+0x190>
 8015258:	4299      	cmp	r1, r3
 801525a:	f104 0401 	add.w	r4, r4, #1
 801525e:	f105 0501 	add.w	r5, r5, #1
 8015262:	f103 0201 	add.w	r2, r3, #1
 8015266:	d9e3      	bls.n	8015230 <rcl_validate_topic_name+0x140>
 8015268:	4613      	mov	r3, r2
 801526a:	45a0      	cmp	r8, r4
 801526c:	d0f4      	beq.n	8015258 <rcl_validate_topic_name+0x168>
 801526e:	782a      	ldrb	r2, [r5, #0]
 8015270:	2a2f      	cmp	r2, #47	@ 0x2f
 8015272:	d1ef      	bne.n	8015254 <rcl_validate_topic_name+0x164>
 8015274:	786a      	ldrb	r2, [r5, #1]
 8015276:	f81c 2002 	ldrb.w	r2, [ip, r2]
 801527a:	0752      	lsls	r2, r2, #29
 801527c:	d5ec      	bpl.n	8015258 <rcl_validate_topic_name+0x168>
 801527e:	e7ad      	b.n	80151dc <rcl_validate_topic_name+0xec>
 8015280:	2307      	movs	r3, #7
 8015282:	6033      	str	r3, [r6, #0]
 8015284:	2f00      	cmp	r7, #0
 8015286:	f43f af7f 	beq.w	8015188 <rcl_validate_topic_name+0x98>
 801528a:	603c      	str	r4, [r7, #0]
 801528c:	2000      	movs	r0, #0
 801528e:	e757      	b.n	8015140 <rcl_validate_topic_name+0x50>
 8015290:	080178d4 	.word	0x080178d4

08015294 <rcutils_string_array_fini>:
 8015294:	b320      	cbz	r0, 80152e0 <rcutils_string_array_fini+0x4c>
 8015296:	b570      	push	{r4, r5, r6, lr}
 8015298:	4604      	mov	r4, r0
 801529a:	6840      	ldr	r0, [r0, #4]
 801529c:	b1d8      	cbz	r0, 80152d6 <rcutils_string_array_fini+0x42>
 801529e:	f104 0008 	add.w	r0, r4, #8
 80152a2:	f7f5 f8b7 	bl	800a414 <rcutils_allocator_is_valid>
 80152a6:	b1b8      	cbz	r0, 80152d8 <rcutils_string_array_fini+0x44>
 80152a8:	6823      	ldr	r3, [r4, #0]
 80152aa:	b1bb      	cbz	r3, 80152dc <rcutils_string_array_fini+0x48>
 80152ac:	2500      	movs	r5, #0
 80152ae:	6860      	ldr	r0, [r4, #4]
 80152b0:	462e      	mov	r6, r5
 80152b2:	f850 0025 	ldr.w	r0, [r0, r5, lsl #2]
 80152b6:	68e3      	ldr	r3, [r4, #12]
 80152b8:	69a1      	ldr	r1, [r4, #24]
 80152ba:	4798      	blx	r3
 80152bc:	e9d4 3000 	ldrd	r3, r0, [r4]
 80152c0:	f840 6025 	str.w	r6, [r0, r5, lsl #2]
 80152c4:	3501      	adds	r5, #1
 80152c6:	429d      	cmp	r5, r3
 80152c8:	d3f3      	bcc.n	80152b2 <rcutils_string_array_fini+0x1e>
 80152ca:	68e3      	ldr	r3, [r4, #12]
 80152cc:	69a1      	ldr	r1, [r4, #24]
 80152ce:	4798      	blx	r3
 80152d0:	2000      	movs	r0, #0
 80152d2:	e9c4 0000 	strd	r0, r0, [r4]
 80152d6:	bd70      	pop	{r4, r5, r6, pc}
 80152d8:	200b      	movs	r0, #11
 80152da:	bd70      	pop	{r4, r5, r6, pc}
 80152dc:	6860      	ldr	r0, [r4, #4]
 80152de:	e7f4      	b.n	80152ca <rcutils_string_array_fini+0x36>
 80152e0:	200b      	movs	r0, #11
 80152e2:	4770      	bx	lr

080152e4 <rmw_create_guard_condition>:
 80152e4:	b538      	push	{r3, r4, r5, lr}
 80152e6:	4605      	mov	r5, r0
 80152e8:	4807      	ldr	r0, [pc, #28]	@ (8015308 <rmw_create_guard_condition+0x24>)
 80152ea:	f7fe f91d 	bl	8013528 <get_memory>
 80152ee:	b148      	cbz	r0, 8015304 <rmw_create_guard_condition+0x20>
 80152f0:	6884      	ldr	r4, [r0, #8]
 80152f2:	2300      	movs	r3, #0
 80152f4:	7423      	strb	r3, [r4, #16]
 80152f6:	61e5      	str	r5, [r4, #28]
 80152f8:	f7fe f97e 	bl	80135f8 <rmw_get_implementation_identifier>
 80152fc:	e9c4 0405 	strd	r0, r4, [r4, #20]
 8015300:	f104 0014 	add.w	r0, r4, #20
 8015304:	bd38      	pop	{r3, r4, r5, pc}
 8015306:	bf00      	nop
 8015308:	2000daf4 	.word	0x2000daf4

0801530c <rmw_destroy_guard_condition>:
 801530c:	b508      	push	{r3, lr}
 801530e:	4b08      	ldr	r3, [pc, #32]	@ (8015330 <rmw_destroy_guard_condition+0x24>)
 8015310:	6819      	ldr	r1, [r3, #0]
 8015312:	b911      	cbnz	r1, 801531a <rmw_destroy_guard_condition+0xe>
 8015314:	e00a      	b.n	801532c <rmw_destroy_guard_condition+0x20>
 8015316:	6849      	ldr	r1, [r1, #4]
 8015318:	b141      	cbz	r1, 801532c <rmw_destroy_guard_condition+0x20>
 801531a:	688b      	ldr	r3, [r1, #8]
 801531c:	3314      	adds	r3, #20
 801531e:	4298      	cmp	r0, r3
 8015320:	d1f9      	bne.n	8015316 <rmw_destroy_guard_condition+0xa>
 8015322:	4803      	ldr	r0, [pc, #12]	@ (8015330 <rmw_destroy_guard_condition+0x24>)
 8015324:	f7fe f910 	bl	8013548 <put_memory>
 8015328:	2000      	movs	r0, #0
 801532a:	bd08      	pop	{r3, pc}
 801532c:	2001      	movs	r0, #1
 801532e:	bd08      	pop	{r3, pc}
 8015330:	2000daf4 	.word	0x2000daf4

08015334 <calloc>:
 8015334:	4b02      	ldr	r3, [pc, #8]	@ (8015340 <calloc+0xc>)
 8015336:	460a      	mov	r2, r1
 8015338:	4601      	mov	r1, r0
 801533a:	6818      	ldr	r0, [r3, #0]
 801533c:	f000 b802 	b.w	8015344 <_calloc_r>
 8015340:	20000148 	.word	0x20000148

08015344 <_calloc_r>:
 8015344:	b570      	push	{r4, r5, r6, lr}
 8015346:	fba1 5402 	umull	r5, r4, r1, r2
 801534a:	b93c      	cbnz	r4, 801535c <_calloc_r+0x18>
 801534c:	4629      	mov	r1, r5
 801534e:	f000 f887 	bl	8015460 <_malloc_r>
 8015352:	4606      	mov	r6, r0
 8015354:	b928      	cbnz	r0, 8015362 <_calloc_r+0x1e>
 8015356:	2600      	movs	r6, #0
 8015358:	4630      	mov	r0, r6
 801535a:	bd70      	pop	{r4, r5, r6, pc}
 801535c:	220c      	movs	r2, #12
 801535e:	6002      	str	r2, [r0, #0]
 8015360:	e7f9      	b.n	8015356 <_calloc_r+0x12>
 8015362:	462a      	mov	r2, r5
 8015364:	4621      	mov	r1, r4
 8015366:	f000 fc71 	bl	8015c4c <memset>
 801536a:	e7f5      	b.n	8015358 <_calloc_r+0x14>

0801536c <getenv>:
 801536c:	b507      	push	{r0, r1, r2, lr}
 801536e:	4b04      	ldr	r3, [pc, #16]	@ (8015380 <getenv+0x14>)
 8015370:	4601      	mov	r1, r0
 8015372:	aa01      	add	r2, sp, #4
 8015374:	6818      	ldr	r0, [r3, #0]
 8015376:	f000 f805 	bl	8015384 <_findenv_r>
 801537a:	b003      	add	sp, #12
 801537c:	f85d fb04 	ldr.w	pc, [sp], #4
 8015380:	20000148 	.word	0x20000148

08015384 <_findenv_r>:
 8015384:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015388:	f8df a06c 	ldr.w	sl, [pc, #108]	@ 80153f8 <_findenv_r+0x74>
 801538c:	4606      	mov	r6, r0
 801538e:	4689      	mov	r9, r1
 8015390:	4617      	mov	r7, r2
 8015392:	f000 fd51 	bl	8015e38 <__env_lock>
 8015396:	f8da 4000 	ldr.w	r4, [sl]
 801539a:	b134      	cbz	r4, 80153aa <_findenv_r+0x26>
 801539c:	464b      	mov	r3, r9
 801539e:	4698      	mov	r8, r3
 80153a0:	f813 2b01 	ldrb.w	r2, [r3], #1
 80153a4:	b13a      	cbz	r2, 80153b6 <_findenv_r+0x32>
 80153a6:	2a3d      	cmp	r2, #61	@ 0x3d
 80153a8:	d1f9      	bne.n	801539e <_findenv_r+0x1a>
 80153aa:	4630      	mov	r0, r6
 80153ac:	f000 fd4a 	bl	8015e44 <__env_unlock>
 80153b0:	2000      	movs	r0, #0
 80153b2:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80153b6:	eba8 0809 	sub.w	r8, r8, r9
 80153ba:	46a3      	mov	fp, r4
 80153bc:	f854 0b04 	ldr.w	r0, [r4], #4
 80153c0:	2800      	cmp	r0, #0
 80153c2:	d0f2      	beq.n	80153aa <_findenv_r+0x26>
 80153c4:	4642      	mov	r2, r8
 80153c6:	4649      	mov	r1, r9
 80153c8:	f000 fc55 	bl	8015c76 <strncmp>
 80153cc:	2800      	cmp	r0, #0
 80153ce:	d1f4      	bne.n	80153ba <_findenv_r+0x36>
 80153d0:	f854 3c04 	ldr.w	r3, [r4, #-4]
 80153d4:	eb03 0508 	add.w	r5, r3, r8
 80153d8:	f813 3008 	ldrb.w	r3, [r3, r8]
 80153dc:	2b3d      	cmp	r3, #61	@ 0x3d
 80153de:	d1ec      	bne.n	80153ba <_findenv_r+0x36>
 80153e0:	f8da 3000 	ldr.w	r3, [sl]
 80153e4:	ebab 0303 	sub.w	r3, fp, r3
 80153e8:	109b      	asrs	r3, r3, #2
 80153ea:	4630      	mov	r0, r6
 80153ec:	603b      	str	r3, [r7, #0]
 80153ee:	f000 fd29 	bl	8015e44 <__env_unlock>
 80153f2:	1c68      	adds	r0, r5, #1
 80153f4:	e7dd      	b.n	80153b2 <_findenv_r+0x2e>
 80153f6:	bf00      	nop
 80153f8:	20000004 	.word	0x20000004

080153fc <malloc>:
 80153fc:	4b02      	ldr	r3, [pc, #8]	@ (8015408 <malloc+0xc>)
 80153fe:	4601      	mov	r1, r0
 8015400:	6818      	ldr	r0, [r3, #0]
 8015402:	f000 b82d 	b.w	8015460 <_malloc_r>
 8015406:	bf00      	nop
 8015408:	20000148 	.word	0x20000148

0801540c <free>:
 801540c:	4b02      	ldr	r3, [pc, #8]	@ (8015418 <free+0xc>)
 801540e:	4601      	mov	r1, r0
 8015410:	6818      	ldr	r0, [r3, #0]
 8015412:	f000 bd1d 	b.w	8015e50 <_free_r>
 8015416:	bf00      	nop
 8015418:	20000148 	.word	0x20000148

0801541c <sbrk_aligned>:
 801541c:	b570      	push	{r4, r5, r6, lr}
 801541e:	4e0f      	ldr	r6, [pc, #60]	@ (801545c <sbrk_aligned+0x40>)
 8015420:	460c      	mov	r4, r1
 8015422:	6831      	ldr	r1, [r6, #0]
 8015424:	4605      	mov	r5, r0
 8015426:	b911      	cbnz	r1, 801542e <sbrk_aligned+0x12>
 8015428:	f000 fc82 	bl	8015d30 <_sbrk_r>
 801542c:	6030      	str	r0, [r6, #0]
 801542e:	4621      	mov	r1, r4
 8015430:	4628      	mov	r0, r5
 8015432:	f000 fc7d 	bl	8015d30 <_sbrk_r>
 8015436:	1c43      	adds	r3, r0, #1
 8015438:	d103      	bne.n	8015442 <sbrk_aligned+0x26>
 801543a:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 801543e:	4620      	mov	r0, r4
 8015440:	bd70      	pop	{r4, r5, r6, pc}
 8015442:	1cc4      	adds	r4, r0, #3
 8015444:	f024 0403 	bic.w	r4, r4, #3
 8015448:	42a0      	cmp	r0, r4
 801544a:	d0f8      	beq.n	801543e <sbrk_aligned+0x22>
 801544c:	1a21      	subs	r1, r4, r0
 801544e:	4628      	mov	r0, r5
 8015450:	f000 fc6e 	bl	8015d30 <_sbrk_r>
 8015454:	3001      	adds	r0, #1
 8015456:	d1f2      	bne.n	801543e <sbrk_aligned+0x22>
 8015458:	e7ef      	b.n	801543a <sbrk_aligned+0x1e>
 801545a:	bf00      	nop
 801545c:	2000dce0 	.word	0x2000dce0

08015460 <_malloc_r>:
 8015460:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8015464:	1ccd      	adds	r5, r1, #3
 8015466:	f025 0503 	bic.w	r5, r5, #3
 801546a:	3508      	adds	r5, #8
 801546c:	2d0c      	cmp	r5, #12
 801546e:	bf38      	it	cc
 8015470:	250c      	movcc	r5, #12
 8015472:	2d00      	cmp	r5, #0
 8015474:	4606      	mov	r6, r0
 8015476:	db01      	blt.n	801547c <_malloc_r+0x1c>
 8015478:	42a9      	cmp	r1, r5
 801547a:	d904      	bls.n	8015486 <_malloc_r+0x26>
 801547c:	230c      	movs	r3, #12
 801547e:	6033      	str	r3, [r6, #0]
 8015480:	2000      	movs	r0, #0
 8015482:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8015486:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 801555c <_malloc_r+0xfc>
 801548a:	f000 f869 	bl	8015560 <__malloc_lock>
 801548e:	f8d8 3000 	ldr.w	r3, [r8]
 8015492:	461c      	mov	r4, r3
 8015494:	bb44      	cbnz	r4, 80154e8 <_malloc_r+0x88>
 8015496:	4629      	mov	r1, r5
 8015498:	4630      	mov	r0, r6
 801549a:	f7ff ffbf 	bl	801541c <sbrk_aligned>
 801549e:	1c43      	adds	r3, r0, #1
 80154a0:	4604      	mov	r4, r0
 80154a2:	d158      	bne.n	8015556 <_malloc_r+0xf6>
 80154a4:	f8d8 4000 	ldr.w	r4, [r8]
 80154a8:	4627      	mov	r7, r4
 80154aa:	2f00      	cmp	r7, #0
 80154ac:	d143      	bne.n	8015536 <_malloc_r+0xd6>
 80154ae:	2c00      	cmp	r4, #0
 80154b0:	d04b      	beq.n	801554a <_malloc_r+0xea>
 80154b2:	6823      	ldr	r3, [r4, #0]
 80154b4:	4639      	mov	r1, r7
 80154b6:	4630      	mov	r0, r6
 80154b8:	eb04 0903 	add.w	r9, r4, r3
 80154bc:	f000 fc38 	bl	8015d30 <_sbrk_r>
 80154c0:	4581      	cmp	r9, r0
 80154c2:	d142      	bne.n	801554a <_malloc_r+0xea>
 80154c4:	6821      	ldr	r1, [r4, #0]
 80154c6:	1a6d      	subs	r5, r5, r1
 80154c8:	4629      	mov	r1, r5
 80154ca:	4630      	mov	r0, r6
 80154cc:	f7ff ffa6 	bl	801541c <sbrk_aligned>
 80154d0:	3001      	adds	r0, #1
 80154d2:	d03a      	beq.n	801554a <_malloc_r+0xea>
 80154d4:	6823      	ldr	r3, [r4, #0]
 80154d6:	442b      	add	r3, r5
 80154d8:	6023      	str	r3, [r4, #0]
 80154da:	f8d8 3000 	ldr.w	r3, [r8]
 80154de:	685a      	ldr	r2, [r3, #4]
 80154e0:	bb62      	cbnz	r2, 801553c <_malloc_r+0xdc>
 80154e2:	f8c8 7000 	str.w	r7, [r8]
 80154e6:	e00f      	b.n	8015508 <_malloc_r+0xa8>
 80154e8:	6822      	ldr	r2, [r4, #0]
 80154ea:	1b52      	subs	r2, r2, r5
 80154ec:	d420      	bmi.n	8015530 <_malloc_r+0xd0>
 80154ee:	2a0b      	cmp	r2, #11
 80154f0:	d917      	bls.n	8015522 <_malloc_r+0xc2>
 80154f2:	1961      	adds	r1, r4, r5
 80154f4:	42a3      	cmp	r3, r4
 80154f6:	6025      	str	r5, [r4, #0]
 80154f8:	bf18      	it	ne
 80154fa:	6059      	strne	r1, [r3, #4]
 80154fc:	6863      	ldr	r3, [r4, #4]
 80154fe:	bf08      	it	eq
 8015500:	f8c8 1000 	streq.w	r1, [r8]
 8015504:	5162      	str	r2, [r4, r5]
 8015506:	604b      	str	r3, [r1, #4]
 8015508:	4630      	mov	r0, r6
 801550a:	f000 f82f 	bl	801556c <__malloc_unlock>
 801550e:	f104 000b 	add.w	r0, r4, #11
 8015512:	1d23      	adds	r3, r4, #4
 8015514:	f020 0007 	bic.w	r0, r0, #7
 8015518:	1ac2      	subs	r2, r0, r3
 801551a:	bf1c      	itt	ne
 801551c:	1a1b      	subne	r3, r3, r0
 801551e:	50a3      	strne	r3, [r4, r2]
 8015520:	e7af      	b.n	8015482 <_malloc_r+0x22>
 8015522:	6862      	ldr	r2, [r4, #4]
 8015524:	42a3      	cmp	r3, r4
 8015526:	bf0c      	ite	eq
 8015528:	f8c8 2000 	streq.w	r2, [r8]
 801552c:	605a      	strne	r2, [r3, #4]
 801552e:	e7eb      	b.n	8015508 <_malloc_r+0xa8>
 8015530:	4623      	mov	r3, r4
 8015532:	6864      	ldr	r4, [r4, #4]
 8015534:	e7ae      	b.n	8015494 <_malloc_r+0x34>
 8015536:	463c      	mov	r4, r7
 8015538:	687f      	ldr	r7, [r7, #4]
 801553a:	e7b6      	b.n	80154aa <_malloc_r+0x4a>
 801553c:	461a      	mov	r2, r3
 801553e:	685b      	ldr	r3, [r3, #4]
 8015540:	42a3      	cmp	r3, r4
 8015542:	d1fb      	bne.n	801553c <_malloc_r+0xdc>
 8015544:	2300      	movs	r3, #0
 8015546:	6053      	str	r3, [r2, #4]
 8015548:	e7de      	b.n	8015508 <_malloc_r+0xa8>
 801554a:	230c      	movs	r3, #12
 801554c:	6033      	str	r3, [r6, #0]
 801554e:	4630      	mov	r0, r6
 8015550:	f000 f80c 	bl	801556c <__malloc_unlock>
 8015554:	e794      	b.n	8015480 <_malloc_r+0x20>
 8015556:	6005      	str	r5, [r0, #0]
 8015558:	e7d6      	b.n	8015508 <_malloc_r+0xa8>
 801555a:	bf00      	nop
 801555c:	2000dce4 	.word	0x2000dce4

08015560 <__malloc_lock>:
 8015560:	4801      	ldr	r0, [pc, #4]	@ (8015568 <__malloc_lock+0x8>)
 8015562:	f000 bc32 	b.w	8015dca <__retarget_lock_acquire_recursive>
 8015566:	bf00      	nop
 8015568:	2000de2d 	.word	0x2000de2d

0801556c <__malloc_unlock>:
 801556c:	4801      	ldr	r0, [pc, #4]	@ (8015574 <__malloc_unlock+0x8>)
 801556e:	f000 bc2d 	b.w	8015dcc <__retarget_lock_release_recursive>
 8015572:	bf00      	nop
 8015574:	2000de2d 	.word	0x2000de2d

08015578 <srand>:
 8015578:	b538      	push	{r3, r4, r5, lr}
 801557a:	4b10      	ldr	r3, [pc, #64]	@ (80155bc <srand+0x44>)
 801557c:	681d      	ldr	r5, [r3, #0]
 801557e:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 8015580:	4604      	mov	r4, r0
 8015582:	b9b3      	cbnz	r3, 80155b2 <srand+0x3a>
 8015584:	2018      	movs	r0, #24
 8015586:	f7ff ff39 	bl	80153fc <malloc>
 801558a:	4602      	mov	r2, r0
 801558c:	6328      	str	r0, [r5, #48]	@ 0x30
 801558e:	b920      	cbnz	r0, 801559a <srand+0x22>
 8015590:	4b0b      	ldr	r3, [pc, #44]	@ (80155c0 <srand+0x48>)
 8015592:	480c      	ldr	r0, [pc, #48]	@ (80155c4 <srand+0x4c>)
 8015594:	2146      	movs	r1, #70	@ 0x46
 8015596:	f000 fc31 	bl	8015dfc <__assert_func>
 801559a:	490b      	ldr	r1, [pc, #44]	@ (80155c8 <srand+0x50>)
 801559c:	4b0b      	ldr	r3, [pc, #44]	@ (80155cc <srand+0x54>)
 801559e:	e9c0 1300 	strd	r1, r3, [r0]
 80155a2:	4b0b      	ldr	r3, [pc, #44]	@ (80155d0 <srand+0x58>)
 80155a4:	6083      	str	r3, [r0, #8]
 80155a6:	230b      	movs	r3, #11
 80155a8:	8183      	strh	r3, [r0, #12]
 80155aa:	2100      	movs	r1, #0
 80155ac:	2001      	movs	r0, #1
 80155ae:	e9c2 0104 	strd	r0, r1, [r2, #16]
 80155b2:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 80155b4:	2200      	movs	r2, #0
 80155b6:	611c      	str	r4, [r3, #16]
 80155b8:	615a      	str	r2, [r3, #20]
 80155ba:	bd38      	pop	{r3, r4, r5, pc}
 80155bc:	20000148 	.word	0x20000148
 80155c0:	08017864 	.word	0x08017864
 80155c4:	0801787b 	.word	0x0801787b
 80155c8:	abcd330e 	.word	0xabcd330e
 80155cc:	e66d1234 	.word	0xe66d1234
 80155d0:	0005deec 	.word	0x0005deec

080155d4 <rand>:
 80155d4:	4b16      	ldr	r3, [pc, #88]	@ (8015630 <rand+0x5c>)
 80155d6:	b510      	push	{r4, lr}
 80155d8:	681c      	ldr	r4, [r3, #0]
 80155da:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 80155dc:	b9b3      	cbnz	r3, 801560c <rand+0x38>
 80155de:	2018      	movs	r0, #24
 80155e0:	f7ff ff0c 	bl	80153fc <malloc>
 80155e4:	4602      	mov	r2, r0
 80155e6:	6320      	str	r0, [r4, #48]	@ 0x30
 80155e8:	b920      	cbnz	r0, 80155f4 <rand+0x20>
 80155ea:	4b12      	ldr	r3, [pc, #72]	@ (8015634 <rand+0x60>)
 80155ec:	4812      	ldr	r0, [pc, #72]	@ (8015638 <rand+0x64>)
 80155ee:	2152      	movs	r1, #82	@ 0x52
 80155f0:	f000 fc04 	bl	8015dfc <__assert_func>
 80155f4:	4911      	ldr	r1, [pc, #68]	@ (801563c <rand+0x68>)
 80155f6:	4b12      	ldr	r3, [pc, #72]	@ (8015640 <rand+0x6c>)
 80155f8:	e9c0 1300 	strd	r1, r3, [r0]
 80155fc:	4b11      	ldr	r3, [pc, #68]	@ (8015644 <rand+0x70>)
 80155fe:	6083      	str	r3, [r0, #8]
 8015600:	230b      	movs	r3, #11
 8015602:	8183      	strh	r3, [r0, #12]
 8015604:	2100      	movs	r1, #0
 8015606:	2001      	movs	r0, #1
 8015608:	e9c2 0104 	strd	r0, r1, [r2, #16]
 801560c:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 801560e:	480e      	ldr	r0, [pc, #56]	@ (8015648 <rand+0x74>)
 8015610:	690b      	ldr	r3, [r1, #16]
 8015612:	694c      	ldr	r4, [r1, #20]
 8015614:	4a0d      	ldr	r2, [pc, #52]	@ (801564c <rand+0x78>)
 8015616:	4358      	muls	r0, r3
 8015618:	fb02 0004 	mla	r0, r2, r4, r0
 801561c:	fba3 3202 	umull	r3, r2, r3, r2
 8015620:	3301      	adds	r3, #1
 8015622:	eb40 0002 	adc.w	r0, r0, r2
 8015626:	e9c1 3004 	strd	r3, r0, [r1, #16]
 801562a:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 801562e:	bd10      	pop	{r4, pc}
 8015630:	20000148 	.word	0x20000148
 8015634:	08017864 	.word	0x08017864
 8015638:	0801787b 	.word	0x0801787b
 801563c:	abcd330e 	.word	0xabcd330e
 8015640:	e66d1234 	.word	0xe66d1234
 8015644:	0005deec 	.word	0x0005deec
 8015648:	5851f42d 	.word	0x5851f42d
 801564c:	4c957f2d 	.word	0x4c957f2d

08015650 <realloc>:
 8015650:	4b02      	ldr	r3, [pc, #8]	@ (801565c <realloc+0xc>)
 8015652:	460a      	mov	r2, r1
 8015654:	4601      	mov	r1, r0
 8015656:	6818      	ldr	r0, [r3, #0]
 8015658:	f000 b802 	b.w	8015660 <_realloc_r>
 801565c:	20000148 	.word	0x20000148

08015660 <_realloc_r>:
 8015660:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015664:	4680      	mov	r8, r0
 8015666:	4615      	mov	r5, r2
 8015668:	460c      	mov	r4, r1
 801566a:	b921      	cbnz	r1, 8015676 <_realloc_r+0x16>
 801566c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8015670:	4611      	mov	r1, r2
 8015672:	f7ff bef5 	b.w	8015460 <_malloc_r>
 8015676:	b92a      	cbnz	r2, 8015684 <_realloc_r+0x24>
 8015678:	f000 fbea 	bl	8015e50 <_free_r>
 801567c:	2400      	movs	r4, #0
 801567e:	4620      	mov	r0, r4
 8015680:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015684:	f000 fc2e 	bl	8015ee4 <_malloc_usable_size_r>
 8015688:	4285      	cmp	r5, r0
 801568a:	4606      	mov	r6, r0
 801568c:	d802      	bhi.n	8015694 <_realloc_r+0x34>
 801568e:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8015692:	d8f4      	bhi.n	801567e <_realloc_r+0x1e>
 8015694:	4629      	mov	r1, r5
 8015696:	4640      	mov	r0, r8
 8015698:	f7ff fee2 	bl	8015460 <_malloc_r>
 801569c:	4607      	mov	r7, r0
 801569e:	2800      	cmp	r0, #0
 80156a0:	d0ec      	beq.n	801567c <_realloc_r+0x1c>
 80156a2:	42b5      	cmp	r5, r6
 80156a4:	462a      	mov	r2, r5
 80156a6:	4621      	mov	r1, r4
 80156a8:	bf28      	it	cs
 80156aa:	4632      	movcs	r2, r6
 80156ac:	f000 fb97 	bl	8015dde <memcpy>
 80156b0:	4621      	mov	r1, r4
 80156b2:	4640      	mov	r0, r8
 80156b4:	f000 fbcc 	bl	8015e50 <_free_r>
 80156b8:	463c      	mov	r4, r7
 80156ba:	e7e0      	b.n	801567e <_realloc_r+0x1e>

080156bc <_strtoul_l.constprop.0>:
 80156bc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80156c0:	4e34      	ldr	r6, [pc, #208]	@ (8015794 <_strtoul_l.constprop.0+0xd8>)
 80156c2:	4686      	mov	lr, r0
 80156c4:	460d      	mov	r5, r1
 80156c6:	4628      	mov	r0, r5
 80156c8:	f815 4b01 	ldrb.w	r4, [r5], #1
 80156cc:	5d37      	ldrb	r7, [r6, r4]
 80156ce:	f017 0708 	ands.w	r7, r7, #8
 80156d2:	d1f8      	bne.n	80156c6 <_strtoul_l.constprop.0+0xa>
 80156d4:	2c2d      	cmp	r4, #45	@ 0x2d
 80156d6:	d12f      	bne.n	8015738 <_strtoul_l.constprop.0+0x7c>
 80156d8:	782c      	ldrb	r4, [r5, #0]
 80156da:	2701      	movs	r7, #1
 80156dc:	1c85      	adds	r5, r0, #2
 80156de:	f033 0010 	bics.w	r0, r3, #16
 80156e2:	d109      	bne.n	80156f8 <_strtoul_l.constprop.0+0x3c>
 80156e4:	2c30      	cmp	r4, #48	@ 0x30
 80156e6:	d12c      	bne.n	8015742 <_strtoul_l.constprop.0+0x86>
 80156e8:	7828      	ldrb	r0, [r5, #0]
 80156ea:	f000 00df 	and.w	r0, r0, #223	@ 0xdf
 80156ee:	2858      	cmp	r0, #88	@ 0x58
 80156f0:	d127      	bne.n	8015742 <_strtoul_l.constprop.0+0x86>
 80156f2:	786c      	ldrb	r4, [r5, #1]
 80156f4:	2310      	movs	r3, #16
 80156f6:	3502      	adds	r5, #2
 80156f8:	f04f 38ff 	mov.w	r8, #4294967295	@ 0xffffffff
 80156fc:	2600      	movs	r6, #0
 80156fe:	fbb8 f8f3 	udiv	r8, r8, r3
 8015702:	fb03 f908 	mul.w	r9, r3, r8
 8015706:	ea6f 0909 	mvn.w	r9, r9
 801570a:	4630      	mov	r0, r6
 801570c:	f1a4 0c30 	sub.w	ip, r4, #48	@ 0x30
 8015710:	f1bc 0f09 	cmp.w	ip, #9
 8015714:	d81c      	bhi.n	8015750 <_strtoul_l.constprop.0+0x94>
 8015716:	4664      	mov	r4, ip
 8015718:	42a3      	cmp	r3, r4
 801571a:	dd2a      	ble.n	8015772 <_strtoul_l.constprop.0+0xb6>
 801571c:	f1b6 3fff 	cmp.w	r6, #4294967295	@ 0xffffffff
 8015720:	d007      	beq.n	8015732 <_strtoul_l.constprop.0+0x76>
 8015722:	4580      	cmp	r8, r0
 8015724:	d322      	bcc.n	801576c <_strtoul_l.constprop.0+0xb0>
 8015726:	d101      	bne.n	801572c <_strtoul_l.constprop.0+0x70>
 8015728:	45a1      	cmp	r9, r4
 801572a:	db1f      	blt.n	801576c <_strtoul_l.constprop.0+0xb0>
 801572c:	fb00 4003 	mla	r0, r0, r3, r4
 8015730:	2601      	movs	r6, #1
 8015732:	f815 4b01 	ldrb.w	r4, [r5], #1
 8015736:	e7e9      	b.n	801570c <_strtoul_l.constprop.0+0x50>
 8015738:	2c2b      	cmp	r4, #43	@ 0x2b
 801573a:	bf04      	itt	eq
 801573c:	782c      	ldrbeq	r4, [r5, #0]
 801573e:	1c85      	addeq	r5, r0, #2
 8015740:	e7cd      	b.n	80156de <_strtoul_l.constprop.0+0x22>
 8015742:	2b00      	cmp	r3, #0
 8015744:	d1d8      	bne.n	80156f8 <_strtoul_l.constprop.0+0x3c>
 8015746:	2c30      	cmp	r4, #48	@ 0x30
 8015748:	bf0c      	ite	eq
 801574a:	2308      	moveq	r3, #8
 801574c:	230a      	movne	r3, #10
 801574e:	e7d3      	b.n	80156f8 <_strtoul_l.constprop.0+0x3c>
 8015750:	f1a4 0c41 	sub.w	ip, r4, #65	@ 0x41
 8015754:	f1bc 0f19 	cmp.w	ip, #25
 8015758:	d801      	bhi.n	801575e <_strtoul_l.constprop.0+0xa2>
 801575a:	3c37      	subs	r4, #55	@ 0x37
 801575c:	e7dc      	b.n	8015718 <_strtoul_l.constprop.0+0x5c>
 801575e:	f1a4 0c61 	sub.w	ip, r4, #97	@ 0x61
 8015762:	f1bc 0f19 	cmp.w	ip, #25
 8015766:	d804      	bhi.n	8015772 <_strtoul_l.constprop.0+0xb6>
 8015768:	3c57      	subs	r4, #87	@ 0x57
 801576a:	e7d5      	b.n	8015718 <_strtoul_l.constprop.0+0x5c>
 801576c:	f04f 36ff 	mov.w	r6, #4294967295	@ 0xffffffff
 8015770:	e7df      	b.n	8015732 <_strtoul_l.constprop.0+0x76>
 8015772:	1c73      	adds	r3, r6, #1
 8015774:	d106      	bne.n	8015784 <_strtoul_l.constprop.0+0xc8>
 8015776:	2322      	movs	r3, #34	@ 0x22
 8015778:	f8ce 3000 	str.w	r3, [lr]
 801577c:	4630      	mov	r0, r6
 801577e:	b932      	cbnz	r2, 801578e <_strtoul_l.constprop.0+0xd2>
 8015780:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8015784:	b107      	cbz	r7, 8015788 <_strtoul_l.constprop.0+0xcc>
 8015786:	4240      	negs	r0, r0
 8015788:	2a00      	cmp	r2, #0
 801578a:	d0f9      	beq.n	8015780 <_strtoul_l.constprop.0+0xc4>
 801578c:	b106      	cbz	r6, 8015790 <_strtoul_l.constprop.0+0xd4>
 801578e:	1e69      	subs	r1, r5, #1
 8015790:	6011      	str	r1, [r2, #0]
 8015792:	e7f5      	b.n	8015780 <_strtoul_l.constprop.0+0xc4>
 8015794:	080178d4 	.word	0x080178d4

08015798 <strtoul>:
 8015798:	4613      	mov	r3, r2
 801579a:	460a      	mov	r2, r1
 801579c:	4601      	mov	r1, r0
 801579e:	4802      	ldr	r0, [pc, #8]	@ (80157a8 <strtoul+0x10>)
 80157a0:	6800      	ldr	r0, [r0, #0]
 80157a2:	f7ff bf8b 	b.w	80156bc <_strtoul_l.constprop.0>
 80157a6:	bf00      	nop
 80157a8:	20000148 	.word	0x20000148

080157ac <setenv>:
 80157ac:	4613      	mov	r3, r2
 80157ae:	460a      	mov	r2, r1
 80157b0:	4601      	mov	r1, r0
 80157b2:	4802      	ldr	r0, [pc, #8]	@ (80157bc <setenv+0x10>)
 80157b4:	6800      	ldr	r0, [r0, #0]
 80157b6:	f000 b803 	b.w	80157c0 <_setenv_r>
 80157ba:	bf00      	nop
 80157bc:	20000148 	.word	0x20000148

080157c0 <_setenv_r>:
 80157c0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80157c4:	460e      	mov	r6, r1
 80157c6:	4605      	mov	r5, r0
 80157c8:	213d      	movs	r1, #61	@ 0x3d
 80157ca:	4630      	mov	r0, r6
 80157cc:	4617      	mov	r7, r2
 80157ce:	4698      	mov	r8, r3
 80157d0:	f000 fa44 	bl	8015c5c <strchr>
 80157d4:	b130      	cbz	r0, 80157e4 <_setenv_r+0x24>
 80157d6:	f000 facd 	bl	8015d74 <__errno>
 80157da:	2316      	movs	r3, #22
 80157dc:	6003      	str	r3, [r0, #0]
 80157de:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80157e2:	e014      	b.n	801580e <_setenv_r+0x4e>
 80157e4:	4628      	mov	r0, r5
 80157e6:	f000 fb27 	bl	8015e38 <__env_lock>
 80157ea:	4638      	mov	r0, r7
 80157ec:	f7ea fd02 	bl	80001f4 <strlen>
 80157f0:	aa01      	add	r2, sp, #4
 80157f2:	4681      	mov	r9, r0
 80157f4:	4631      	mov	r1, r6
 80157f6:	4628      	mov	r0, r5
 80157f8:	f7ff fdc4 	bl	8015384 <_findenv_r>
 80157fc:	4604      	mov	r4, r0
 80157fe:	b1a8      	cbz	r0, 801582c <_setenv_r+0x6c>
 8015800:	f1b8 0f00 	cmp.w	r8, #0
 8015804:	d106      	bne.n	8015814 <_setenv_r+0x54>
 8015806:	4628      	mov	r0, r5
 8015808:	f000 fb1c 	bl	8015e44 <__env_unlock>
 801580c:	2000      	movs	r0, #0
 801580e:	b003      	add	sp, #12
 8015810:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015814:	f7ea fcee 	bl	80001f4 <strlen>
 8015818:	4581      	cmp	r9, r0
 801581a:	d83a      	bhi.n	8015892 <_setenv_r+0xd2>
 801581c:	3c01      	subs	r4, #1
 801581e:	f817 3b01 	ldrb.w	r3, [r7], #1
 8015822:	f804 3f01 	strb.w	r3, [r4, #1]!
 8015826:	2b00      	cmp	r3, #0
 8015828:	d1f9      	bne.n	801581e <_setenv_r+0x5e>
 801582a:	e7ec      	b.n	8015806 <_setenv_r+0x46>
 801582c:	f8df a0bc 	ldr.w	sl, [pc, #188]	@ 80158ec <_setenv_r+0x12c>
 8015830:	f8da 1000 	ldr.w	r1, [sl]
 8015834:	f851 3024 	ldr.w	r3, [r1, r4, lsl #2]
 8015838:	b98b      	cbnz	r3, 801585e <_setenv_r+0x9e>
 801583a:	4b2b      	ldr	r3, [pc, #172]	@ (80158e8 <_setenv_r+0x128>)
 801583c:	681a      	ldr	r2, [r3, #0]
 801583e:	f104 0802 	add.w	r8, r4, #2
 8015842:	ea4f 0888 	mov.w	r8, r8, lsl #2
 8015846:	b162      	cbz	r2, 8015862 <_setenv_r+0xa2>
 8015848:	4642      	mov	r2, r8
 801584a:	4628      	mov	r0, r5
 801584c:	f7ff ff08 	bl	8015660 <_realloc_r>
 8015850:	f8ca 0000 	str.w	r0, [sl]
 8015854:	b9b0      	cbnz	r0, 8015884 <_setenv_r+0xc4>
 8015856:	4628      	mov	r0, r5
 8015858:	f000 faf4 	bl	8015e44 <__env_unlock>
 801585c:	e7bf      	b.n	80157de <_setenv_r+0x1e>
 801585e:	3401      	adds	r4, #1
 8015860:	e7e8      	b.n	8015834 <_setenv_r+0x74>
 8015862:	2201      	movs	r2, #1
 8015864:	4641      	mov	r1, r8
 8015866:	4628      	mov	r0, r5
 8015868:	601a      	str	r2, [r3, #0]
 801586a:	f7ff fdf9 	bl	8015460 <_malloc_r>
 801586e:	4683      	mov	fp, r0
 8015870:	2800      	cmp	r0, #0
 8015872:	d0f0      	beq.n	8015856 <_setenv_r+0x96>
 8015874:	f8da 1000 	ldr.w	r1, [sl]
 8015878:	f1a8 0208 	sub.w	r2, r8, #8
 801587c:	f000 faaf 	bl	8015dde <memcpy>
 8015880:	f8ca b000 	str.w	fp, [sl]
 8015884:	f8da 3000 	ldr.w	r3, [sl]
 8015888:	4443      	add	r3, r8
 801588a:	2200      	movs	r2, #0
 801588c:	f843 2c04 	str.w	r2, [r3, #-4]
 8015890:	9401      	str	r4, [sp, #4]
 8015892:	4633      	mov	r3, r6
 8015894:	4619      	mov	r1, r3
 8015896:	f813 2b01 	ldrb.w	r2, [r3], #1
 801589a:	b10a      	cbz	r2, 80158a0 <_setenv_r+0xe0>
 801589c:	2a3d      	cmp	r2, #61	@ 0x3d
 801589e:	d1f9      	bne.n	8015894 <_setenv_r+0xd4>
 80158a0:	1b89      	subs	r1, r1, r6
 80158a2:	4c12      	ldr	r4, [pc, #72]	@ (80158ec <_setenv_r+0x12c>)
 80158a4:	f8dd a004 	ldr.w	sl, [sp, #4]
 80158a8:	f8d4 8000 	ldr.w	r8, [r4]
 80158ac:	4449      	add	r1, r9
 80158ae:	3102      	adds	r1, #2
 80158b0:	4628      	mov	r0, r5
 80158b2:	f7ff fdd5 	bl	8015460 <_malloc_r>
 80158b6:	f848 002a 	str.w	r0, [r8, sl, lsl #2]
 80158ba:	2800      	cmp	r0, #0
 80158bc:	d0cb      	beq.n	8015856 <_setenv_r+0x96>
 80158be:	6823      	ldr	r3, [r4, #0]
 80158c0:	9a01      	ldr	r2, [sp, #4]
 80158c2:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80158c6:	f816 1b01 	ldrb.w	r1, [r6], #1
 80158ca:	7011      	strb	r1, [r2, #0]
 80158cc:	4613      	mov	r3, r2
 80158ce:	3201      	adds	r2, #1
 80158d0:	b109      	cbz	r1, 80158d6 <_setenv_r+0x116>
 80158d2:	293d      	cmp	r1, #61	@ 0x3d
 80158d4:	d1f7      	bne.n	80158c6 <_setenv_r+0x106>
 80158d6:	223d      	movs	r2, #61	@ 0x3d
 80158d8:	701a      	strb	r2, [r3, #0]
 80158da:	f817 2b01 	ldrb.w	r2, [r7], #1
 80158de:	f803 2f01 	strb.w	r2, [r3, #1]!
 80158e2:	2a00      	cmp	r2, #0
 80158e4:	d1f9      	bne.n	80158da <_setenv_r+0x11a>
 80158e6:	e78e      	b.n	8015806 <_setenv_r+0x46>
 80158e8:	2000dce8 	.word	0x2000dce8
 80158ec:	20000004 	.word	0x20000004

080158f0 <std>:
 80158f0:	2300      	movs	r3, #0
 80158f2:	b510      	push	{r4, lr}
 80158f4:	4604      	mov	r4, r0
 80158f6:	e9c0 3300 	strd	r3, r3, [r0]
 80158fa:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80158fe:	6083      	str	r3, [r0, #8]
 8015900:	8181      	strh	r1, [r0, #12]
 8015902:	6643      	str	r3, [r0, #100]	@ 0x64
 8015904:	81c2      	strh	r2, [r0, #14]
 8015906:	6183      	str	r3, [r0, #24]
 8015908:	4619      	mov	r1, r3
 801590a:	2208      	movs	r2, #8
 801590c:	305c      	adds	r0, #92	@ 0x5c
 801590e:	f000 f99d 	bl	8015c4c <memset>
 8015912:	4b0d      	ldr	r3, [pc, #52]	@ (8015948 <std+0x58>)
 8015914:	6263      	str	r3, [r4, #36]	@ 0x24
 8015916:	4b0d      	ldr	r3, [pc, #52]	@ (801594c <std+0x5c>)
 8015918:	62a3      	str	r3, [r4, #40]	@ 0x28
 801591a:	4b0d      	ldr	r3, [pc, #52]	@ (8015950 <std+0x60>)
 801591c:	62e3      	str	r3, [r4, #44]	@ 0x2c
 801591e:	4b0d      	ldr	r3, [pc, #52]	@ (8015954 <std+0x64>)
 8015920:	6323      	str	r3, [r4, #48]	@ 0x30
 8015922:	4b0d      	ldr	r3, [pc, #52]	@ (8015958 <std+0x68>)
 8015924:	6224      	str	r4, [r4, #32]
 8015926:	429c      	cmp	r4, r3
 8015928:	d006      	beq.n	8015938 <std+0x48>
 801592a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 801592e:	4294      	cmp	r4, r2
 8015930:	d002      	beq.n	8015938 <std+0x48>
 8015932:	33d0      	adds	r3, #208	@ 0xd0
 8015934:	429c      	cmp	r4, r3
 8015936:	d105      	bne.n	8015944 <std+0x54>
 8015938:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 801593c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8015940:	f000 ba42 	b.w	8015dc8 <__retarget_lock_init_recursive>
 8015944:	bd10      	pop	{r4, pc}
 8015946:	bf00      	nop
 8015948:	08015b01 	.word	0x08015b01
 801594c:	08015b23 	.word	0x08015b23
 8015950:	08015b5b 	.word	0x08015b5b
 8015954:	08015b7f 	.word	0x08015b7f
 8015958:	2000dcec 	.word	0x2000dcec

0801595c <stdio_exit_handler>:
 801595c:	4a02      	ldr	r2, [pc, #8]	@ (8015968 <stdio_exit_handler+0xc>)
 801595e:	4903      	ldr	r1, [pc, #12]	@ (801596c <stdio_exit_handler+0x10>)
 8015960:	4803      	ldr	r0, [pc, #12]	@ (8015970 <stdio_exit_handler+0x14>)
 8015962:	f000 b869 	b.w	8015a38 <_fwalk_sglue>
 8015966:	bf00      	nop
 8015968:	2000013c 	.word	0x2000013c
 801596c:	0801684d 	.word	0x0801684d
 8015970:	2000014c 	.word	0x2000014c

08015974 <cleanup_stdio>:
 8015974:	6841      	ldr	r1, [r0, #4]
 8015976:	4b0c      	ldr	r3, [pc, #48]	@ (80159a8 <cleanup_stdio+0x34>)
 8015978:	4299      	cmp	r1, r3
 801597a:	b510      	push	{r4, lr}
 801597c:	4604      	mov	r4, r0
 801597e:	d001      	beq.n	8015984 <cleanup_stdio+0x10>
 8015980:	f000 ff64 	bl	801684c <_fflush_r>
 8015984:	68a1      	ldr	r1, [r4, #8]
 8015986:	4b09      	ldr	r3, [pc, #36]	@ (80159ac <cleanup_stdio+0x38>)
 8015988:	4299      	cmp	r1, r3
 801598a:	d002      	beq.n	8015992 <cleanup_stdio+0x1e>
 801598c:	4620      	mov	r0, r4
 801598e:	f000 ff5d 	bl	801684c <_fflush_r>
 8015992:	68e1      	ldr	r1, [r4, #12]
 8015994:	4b06      	ldr	r3, [pc, #24]	@ (80159b0 <cleanup_stdio+0x3c>)
 8015996:	4299      	cmp	r1, r3
 8015998:	d004      	beq.n	80159a4 <cleanup_stdio+0x30>
 801599a:	4620      	mov	r0, r4
 801599c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80159a0:	f000 bf54 	b.w	801684c <_fflush_r>
 80159a4:	bd10      	pop	{r4, pc}
 80159a6:	bf00      	nop
 80159a8:	2000dcec 	.word	0x2000dcec
 80159ac:	2000dd54 	.word	0x2000dd54
 80159b0:	2000ddbc 	.word	0x2000ddbc

080159b4 <global_stdio_init.part.0>:
 80159b4:	b510      	push	{r4, lr}
 80159b6:	4b0b      	ldr	r3, [pc, #44]	@ (80159e4 <global_stdio_init.part.0+0x30>)
 80159b8:	4c0b      	ldr	r4, [pc, #44]	@ (80159e8 <global_stdio_init.part.0+0x34>)
 80159ba:	4a0c      	ldr	r2, [pc, #48]	@ (80159ec <global_stdio_init.part.0+0x38>)
 80159bc:	601a      	str	r2, [r3, #0]
 80159be:	4620      	mov	r0, r4
 80159c0:	2200      	movs	r2, #0
 80159c2:	2104      	movs	r1, #4
 80159c4:	f7ff ff94 	bl	80158f0 <std>
 80159c8:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80159cc:	2201      	movs	r2, #1
 80159ce:	2109      	movs	r1, #9
 80159d0:	f7ff ff8e 	bl	80158f0 <std>
 80159d4:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80159d8:	2202      	movs	r2, #2
 80159da:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80159de:	2112      	movs	r1, #18
 80159e0:	f7ff bf86 	b.w	80158f0 <std>
 80159e4:	2000de24 	.word	0x2000de24
 80159e8:	2000dcec 	.word	0x2000dcec
 80159ec:	0801595d 	.word	0x0801595d

080159f0 <__sfp_lock_acquire>:
 80159f0:	4801      	ldr	r0, [pc, #4]	@ (80159f8 <__sfp_lock_acquire+0x8>)
 80159f2:	f000 b9ea 	b.w	8015dca <__retarget_lock_acquire_recursive>
 80159f6:	bf00      	nop
 80159f8:	2000de2e 	.word	0x2000de2e

080159fc <__sfp_lock_release>:
 80159fc:	4801      	ldr	r0, [pc, #4]	@ (8015a04 <__sfp_lock_release+0x8>)
 80159fe:	f000 b9e5 	b.w	8015dcc <__retarget_lock_release_recursive>
 8015a02:	bf00      	nop
 8015a04:	2000de2e 	.word	0x2000de2e

08015a08 <__sinit>:
 8015a08:	b510      	push	{r4, lr}
 8015a0a:	4604      	mov	r4, r0
 8015a0c:	f7ff fff0 	bl	80159f0 <__sfp_lock_acquire>
 8015a10:	6a23      	ldr	r3, [r4, #32]
 8015a12:	b11b      	cbz	r3, 8015a1c <__sinit+0x14>
 8015a14:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8015a18:	f7ff bff0 	b.w	80159fc <__sfp_lock_release>
 8015a1c:	4b04      	ldr	r3, [pc, #16]	@ (8015a30 <__sinit+0x28>)
 8015a1e:	6223      	str	r3, [r4, #32]
 8015a20:	4b04      	ldr	r3, [pc, #16]	@ (8015a34 <__sinit+0x2c>)
 8015a22:	681b      	ldr	r3, [r3, #0]
 8015a24:	2b00      	cmp	r3, #0
 8015a26:	d1f5      	bne.n	8015a14 <__sinit+0xc>
 8015a28:	f7ff ffc4 	bl	80159b4 <global_stdio_init.part.0>
 8015a2c:	e7f2      	b.n	8015a14 <__sinit+0xc>
 8015a2e:	bf00      	nop
 8015a30:	08015975 	.word	0x08015975
 8015a34:	2000de24 	.word	0x2000de24

08015a38 <_fwalk_sglue>:
 8015a38:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8015a3c:	4607      	mov	r7, r0
 8015a3e:	4688      	mov	r8, r1
 8015a40:	4614      	mov	r4, r2
 8015a42:	2600      	movs	r6, #0
 8015a44:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8015a48:	f1b9 0901 	subs.w	r9, r9, #1
 8015a4c:	d505      	bpl.n	8015a5a <_fwalk_sglue+0x22>
 8015a4e:	6824      	ldr	r4, [r4, #0]
 8015a50:	2c00      	cmp	r4, #0
 8015a52:	d1f7      	bne.n	8015a44 <_fwalk_sglue+0xc>
 8015a54:	4630      	mov	r0, r6
 8015a56:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8015a5a:	89ab      	ldrh	r3, [r5, #12]
 8015a5c:	2b01      	cmp	r3, #1
 8015a5e:	d907      	bls.n	8015a70 <_fwalk_sglue+0x38>
 8015a60:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8015a64:	3301      	adds	r3, #1
 8015a66:	d003      	beq.n	8015a70 <_fwalk_sglue+0x38>
 8015a68:	4629      	mov	r1, r5
 8015a6a:	4638      	mov	r0, r7
 8015a6c:	47c0      	blx	r8
 8015a6e:	4306      	orrs	r6, r0
 8015a70:	3568      	adds	r5, #104	@ 0x68
 8015a72:	e7e9      	b.n	8015a48 <_fwalk_sglue+0x10>

08015a74 <iprintf>:
 8015a74:	b40f      	push	{r0, r1, r2, r3}
 8015a76:	b507      	push	{r0, r1, r2, lr}
 8015a78:	4906      	ldr	r1, [pc, #24]	@ (8015a94 <iprintf+0x20>)
 8015a7a:	ab04      	add	r3, sp, #16
 8015a7c:	6808      	ldr	r0, [r1, #0]
 8015a7e:	f853 2b04 	ldr.w	r2, [r3], #4
 8015a82:	6881      	ldr	r1, [r0, #8]
 8015a84:	9301      	str	r3, [sp, #4]
 8015a86:	f000 fbb7 	bl	80161f8 <_vfiprintf_r>
 8015a8a:	b003      	add	sp, #12
 8015a8c:	f85d eb04 	ldr.w	lr, [sp], #4
 8015a90:	b004      	add	sp, #16
 8015a92:	4770      	bx	lr
 8015a94:	20000148 	.word	0x20000148

08015a98 <sniprintf>:
 8015a98:	b40c      	push	{r2, r3}
 8015a9a:	b530      	push	{r4, r5, lr}
 8015a9c:	4b17      	ldr	r3, [pc, #92]	@ (8015afc <sniprintf+0x64>)
 8015a9e:	1e0c      	subs	r4, r1, #0
 8015aa0:	681d      	ldr	r5, [r3, #0]
 8015aa2:	b09d      	sub	sp, #116	@ 0x74
 8015aa4:	da08      	bge.n	8015ab8 <sniprintf+0x20>
 8015aa6:	238b      	movs	r3, #139	@ 0x8b
 8015aa8:	602b      	str	r3, [r5, #0]
 8015aaa:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8015aae:	b01d      	add	sp, #116	@ 0x74
 8015ab0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8015ab4:	b002      	add	sp, #8
 8015ab6:	4770      	bx	lr
 8015ab8:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8015abc:	f8ad 3014 	strh.w	r3, [sp, #20]
 8015ac0:	bf14      	ite	ne
 8015ac2:	f104 33ff 	addne.w	r3, r4, #4294967295	@ 0xffffffff
 8015ac6:	4623      	moveq	r3, r4
 8015ac8:	9304      	str	r3, [sp, #16]
 8015aca:	9307      	str	r3, [sp, #28]
 8015acc:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8015ad0:	9002      	str	r0, [sp, #8]
 8015ad2:	9006      	str	r0, [sp, #24]
 8015ad4:	f8ad 3016 	strh.w	r3, [sp, #22]
 8015ad8:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8015ada:	ab21      	add	r3, sp, #132	@ 0x84
 8015adc:	a902      	add	r1, sp, #8
 8015ade:	4628      	mov	r0, r5
 8015ae0:	9301      	str	r3, [sp, #4]
 8015ae2:	f000 fa63 	bl	8015fac <_svfiprintf_r>
 8015ae6:	1c43      	adds	r3, r0, #1
 8015ae8:	bfbc      	itt	lt
 8015aea:	238b      	movlt	r3, #139	@ 0x8b
 8015aec:	602b      	strlt	r3, [r5, #0]
 8015aee:	2c00      	cmp	r4, #0
 8015af0:	d0dd      	beq.n	8015aae <sniprintf+0x16>
 8015af2:	9b02      	ldr	r3, [sp, #8]
 8015af4:	2200      	movs	r2, #0
 8015af6:	701a      	strb	r2, [r3, #0]
 8015af8:	e7d9      	b.n	8015aae <sniprintf+0x16>
 8015afa:	bf00      	nop
 8015afc:	20000148 	.word	0x20000148

08015b00 <__sread>:
 8015b00:	b510      	push	{r4, lr}
 8015b02:	460c      	mov	r4, r1
 8015b04:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8015b08:	f000 f900 	bl	8015d0c <_read_r>
 8015b0c:	2800      	cmp	r0, #0
 8015b0e:	bfab      	itete	ge
 8015b10:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8015b12:	89a3      	ldrhlt	r3, [r4, #12]
 8015b14:	181b      	addge	r3, r3, r0
 8015b16:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8015b1a:	bfac      	ite	ge
 8015b1c:	6563      	strge	r3, [r4, #84]	@ 0x54
 8015b1e:	81a3      	strhlt	r3, [r4, #12]
 8015b20:	bd10      	pop	{r4, pc}

08015b22 <__swrite>:
 8015b22:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015b26:	461f      	mov	r7, r3
 8015b28:	898b      	ldrh	r3, [r1, #12]
 8015b2a:	05db      	lsls	r3, r3, #23
 8015b2c:	4605      	mov	r5, r0
 8015b2e:	460c      	mov	r4, r1
 8015b30:	4616      	mov	r6, r2
 8015b32:	d505      	bpl.n	8015b40 <__swrite+0x1e>
 8015b34:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8015b38:	2302      	movs	r3, #2
 8015b3a:	2200      	movs	r2, #0
 8015b3c:	f000 f8d4 	bl	8015ce8 <_lseek_r>
 8015b40:	89a3      	ldrh	r3, [r4, #12]
 8015b42:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8015b46:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8015b4a:	81a3      	strh	r3, [r4, #12]
 8015b4c:	4632      	mov	r2, r6
 8015b4e:	463b      	mov	r3, r7
 8015b50:	4628      	mov	r0, r5
 8015b52:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8015b56:	f000 b8fb 	b.w	8015d50 <_write_r>

08015b5a <__sseek>:
 8015b5a:	b510      	push	{r4, lr}
 8015b5c:	460c      	mov	r4, r1
 8015b5e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8015b62:	f000 f8c1 	bl	8015ce8 <_lseek_r>
 8015b66:	1c43      	adds	r3, r0, #1
 8015b68:	89a3      	ldrh	r3, [r4, #12]
 8015b6a:	bf15      	itete	ne
 8015b6c:	6560      	strne	r0, [r4, #84]	@ 0x54
 8015b6e:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8015b72:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8015b76:	81a3      	strheq	r3, [r4, #12]
 8015b78:	bf18      	it	ne
 8015b7a:	81a3      	strhne	r3, [r4, #12]
 8015b7c:	bd10      	pop	{r4, pc}

08015b7e <__sclose>:
 8015b7e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8015b82:	f000 b8a1 	b.w	8015cc8 <_close_r>

08015b86 <_vsniprintf_r>:
 8015b86:	b530      	push	{r4, r5, lr}
 8015b88:	4614      	mov	r4, r2
 8015b8a:	2c00      	cmp	r4, #0
 8015b8c:	b09b      	sub	sp, #108	@ 0x6c
 8015b8e:	4605      	mov	r5, r0
 8015b90:	461a      	mov	r2, r3
 8015b92:	da05      	bge.n	8015ba0 <_vsniprintf_r+0x1a>
 8015b94:	238b      	movs	r3, #139	@ 0x8b
 8015b96:	6003      	str	r3, [r0, #0]
 8015b98:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8015b9c:	b01b      	add	sp, #108	@ 0x6c
 8015b9e:	bd30      	pop	{r4, r5, pc}
 8015ba0:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8015ba4:	f8ad 300c 	strh.w	r3, [sp, #12]
 8015ba8:	bf14      	ite	ne
 8015baa:	f104 33ff 	addne.w	r3, r4, #4294967295	@ 0xffffffff
 8015bae:	4623      	moveq	r3, r4
 8015bb0:	9302      	str	r3, [sp, #8]
 8015bb2:	9305      	str	r3, [sp, #20]
 8015bb4:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8015bb8:	9100      	str	r1, [sp, #0]
 8015bba:	9104      	str	r1, [sp, #16]
 8015bbc:	f8ad 300e 	strh.w	r3, [sp, #14]
 8015bc0:	4669      	mov	r1, sp
 8015bc2:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 8015bc4:	f000 f9f2 	bl	8015fac <_svfiprintf_r>
 8015bc8:	1c43      	adds	r3, r0, #1
 8015bca:	bfbc      	itt	lt
 8015bcc:	238b      	movlt	r3, #139	@ 0x8b
 8015bce:	602b      	strlt	r3, [r5, #0]
 8015bd0:	2c00      	cmp	r4, #0
 8015bd2:	d0e3      	beq.n	8015b9c <_vsniprintf_r+0x16>
 8015bd4:	9b00      	ldr	r3, [sp, #0]
 8015bd6:	2200      	movs	r2, #0
 8015bd8:	701a      	strb	r2, [r3, #0]
 8015bda:	e7df      	b.n	8015b9c <_vsniprintf_r+0x16>

08015bdc <vsniprintf>:
 8015bdc:	b507      	push	{r0, r1, r2, lr}
 8015bde:	9300      	str	r3, [sp, #0]
 8015be0:	4613      	mov	r3, r2
 8015be2:	460a      	mov	r2, r1
 8015be4:	4601      	mov	r1, r0
 8015be6:	4803      	ldr	r0, [pc, #12]	@ (8015bf4 <vsniprintf+0x18>)
 8015be8:	6800      	ldr	r0, [r0, #0]
 8015bea:	f7ff ffcc 	bl	8015b86 <_vsniprintf_r>
 8015bee:	b003      	add	sp, #12
 8015bf0:	f85d fb04 	ldr.w	pc, [sp], #4
 8015bf4:	20000148 	.word	0x20000148

08015bf8 <memcmp>:
 8015bf8:	b510      	push	{r4, lr}
 8015bfa:	3901      	subs	r1, #1
 8015bfc:	4402      	add	r2, r0
 8015bfe:	4290      	cmp	r0, r2
 8015c00:	d101      	bne.n	8015c06 <memcmp+0xe>
 8015c02:	2000      	movs	r0, #0
 8015c04:	e005      	b.n	8015c12 <memcmp+0x1a>
 8015c06:	7803      	ldrb	r3, [r0, #0]
 8015c08:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8015c0c:	42a3      	cmp	r3, r4
 8015c0e:	d001      	beq.n	8015c14 <memcmp+0x1c>
 8015c10:	1b18      	subs	r0, r3, r4
 8015c12:	bd10      	pop	{r4, pc}
 8015c14:	3001      	adds	r0, #1
 8015c16:	e7f2      	b.n	8015bfe <memcmp+0x6>

08015c18 <memmove>:
 8015c18:	4288      	cmp	r0, r1
 8015c1a:	b510      	push	{r4, lr}
 8015c1c:	eb01 0402 	add.w	r4, r1, r2
 8015c20:	d902      	bls.n	8015c28 <memmove+0x10>
 8015c22:	4284      	cmp	r4, r0
 8015c24:	4623      	mov	r3, r4
 8015c26:	d807      	bhi.n	8015c38 <memmove+0x20>
 8015c28:	1e43      	subs	r3, r0, #1
 8015c2a:	42a1      	cmp	r1, r4
 8015c2c:	d008      	beq.n	8015c40 <memmove+0x28>
 8015c2e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8015c32:	f803 2f01 	strb.w	r2, [r3, #1]!
 8015c36:	e7f8      	b.n	8015c2a <memmove+0x12>
 8015c38:	4402      	add	r2, r0
 8015c3a:	4601      	mov	r1, r0
 8015c3c:	428a      	cmp	r2, r1
 8015c3e:	d100      	bne.n	8015c42 <memmove+0x2a>
 8015c40:	bd10      	pop	{r4, pc}
 8015c42:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8015c46:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8015c4a:	e7f7      	b.n	8015c3c <memmove+0x24>

08015c4c <memset>:
 8015c4c:	4402      	add	r2, r0
 8015c4e:	4603      	mov	r3, r0
 8015c50:	4293      	cmp	r3, r2
 8015c52:	d100      	bne.n	8015c56 <memset+0xa>
 8015c54:	4770      	bx	lr
 8015c56:	f803 1b01 	strb.w	r1, [r3], #1
 8015c5a:	e7f9      	b.n	8015c50 <memset+0x4>

08015c5c <strchr>:
 8015c5c:	b2c9      	uxtb	r1, r1
 8015c5e:	4603      	mov	r3, r0
 8015c60:	4618      	mov	r0, r3
 8015c62:	f813 2b01 	ldrb.w	r2, [r3], #1
 8015c66:	b112      	cbz	r2, 8015c6e <strchr+0x12>
 8015c68:	428a      	cmp	r2, r1
 8015c6a:	d1f9      	bne.n	8015c60 <strchr+0x4>
 8015c6c:	4770      	bx	lr
 8015c6e:	2900      	cmp	r1, #0
 8015c70:	bf18      	it	ne
 8015c72:	2000      	movne	r0, #0
 8015c74:	4770      	bx	lr

08015c76 <strncmp>:
 8015c76:	b510      	push	{r4, lr}
 8015c78:	b16a      	cbz	r2, 8015c96 <strncmp+0x20>
 8015c7a:	3901      	subs	r1, #1
 8015c7c:	1884      	adds	r4, r0, r2
 8015c7e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8015c82:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8015c86:	429a      	cmp	r2, r3
 8015c88:	d103      	bne.n	8015c92 <strncmp+0x1c>
 8015c8a:	42a0      	cmp	r0, r4
 8015c8c:	d001      	beq.n	8015c92 <strncmp+0x1c>
 8015c8e:	2a00      	cmp	r2, #0
 8015c90:	d1f5      	bne.n	8015c7e <strncmp+0x8>
 8015c92:	1ad0      	subs	r0, r2, r3
 8015c94:	bd10      	pop	{r4, pc}
 8015c96:	4610      	mov	r0, r2
 8015c98:	e7fc      	b.n	8015c94 <strncmp+0x1e>

08015c9a <strstr>:
 8015c9a:	780a      	ldrb	r2, [r1, #0]
 8015c9c:	b570      	push	{r4, r5, r6, lr}
 8015c9e:	b96a      	cbnz	r2, 8015cbc <strstr+0x22>
 8015ca0:	bd70      	pop	{r4, r5, r6, pc}
 8015ca2:	429a      	cmp	r2, r3
 8015ca4:	d109      	bne.n	8015cba <strstr+0x20>
 8015ca6:	460c      	mov	r4, r1
 8015ca8:	4605      	mov	r5, r0
 8015caa:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 8015cae:	2b00      	cmp	r3, #0
 8015cb0:	d0f6      	beq.n	8015ca0 <strstr+0x6>
 8015cb2:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 8015cb6:	429e      	cmp	r6, r3
 8015cb8:	d0f7      	beq.n	8015caa <strstr+0x10>
 8015cba:	3001      	adds	r0, #1
 8015cbc:	7803      	ldrb	r3, [r0, #0]
 8015cbe:	2b00      	cmp	r3, #0
 8015cc0:	d1ef      	bne.n	8015ca2 <strstr+0x8>
 8015cc2:	4618      	mov	r0, r3
 8015cc4:	e7ec      	b.n	8015ca0 <strstr+0x6>
	...

08015cc8 <_close_r>:
 8015cc8:	b538      	push	{r3, r4, r5, lr}
 8015cca:	4d06      	ldr	r5, [pc, #24]	@ (8015ce4 <_close_r+0x1c>)
 8015ccc:	2300      	movs	r3, #0
 8015cce:	4604      	mov	r4, r0
 8015cd0:	4608      	mov	r0, r1
 8015cd2:	602b      	str	r3, [r5, #0]
 8015cd4:	f7ec fe5c 	bl	8002990 <_close>
 8015cd8:	1c43      	adds	r3, r0, #1
 8015cda:	d102      	bne.n	8015ce2 <_close_r+0x1a>
 8015cdc:	682b      	ldr	r3, [r5, #0]
 8015cde:	b103      	cbz	r3, 8015ce2 <_close_r+0x1a>
 8015ce0:	6023      	str	r3, [r4, #0]
 8015ce2:	bd38      	pop	{r3, r4, r5, pc}
 8015ce4:	2000de28 	.word	0x2000de28

08015ce8 <_lseek_r>:
 8015ce8:	b538      	push	{r3, r4, r5, lr}
 8015cea:	4d07      	ldr	r5, [pc, #28]	@ (8015d08 <_lseek_r+0x20>)
 8015cec:	4604      	mov	r4, r0
 8015cee:	4608      	mov	r0, r1
 8015cf0:	4611      	mov	r1, r2
 8015cf2:	2200      	movs	r2, #0
 8015cf4:	602a      	str	r2, [r5, #0]
 8015cf6:	461a      	mov	r2, r3
 8015cf8:	f7ec fe71 	bl	80029de <_lseek>
 8015cfc:	1c43      	adds	r3, r0, #1
 8015cfe:	d102      	bne.n	8015d06 <_lseek_r+0x1e>
 8015d00:	682b      	ldr	r3, [r5, #0]
 8015d02:	b103      	cbz	r3, 8015d06 <_lseek_r+0x1e>
 8015d04:	6023      	str	r3, [r4, #0]
 8015d06:	bd38      	pop	{r3, r4, r5, pc}
 8015d08:	2000de28 	.word	0x2000de28

08015d0c <_read_r>:
 8015d0c:	b538      	push	{r3, r4, r5, lr}
 8015d0e:	4d07      	ldr	r5, [pc, #28]	@ (8015d2c <_read_r+0x20>)
 8015d10:	4604      	mov	r4, r0
 8015d12:	4608      	mov	r0, r1
 8015d14:	4611      	mov	r1, r2
 8015d16:	2200      	movs	r2, #0
 8015d18:	602a      	str	r2, [r5, #0]
 8015d1a:	461a      	mov	r2, r3
 8015d1c:	f7ec fdff 	bl	800291e <_read>
 8015d20:	1c43      	adds	r3, r0, #1
 8015d22:	d102      	bne.n	8015d2a <_read_r+0x1e>
 8015d24:	682b      	ldr	r3, [r5, #0]
 8015d26:	b103      	cbz	r3, 8015d2a <_read_r+0x1e>
 8015d28:	6023      	str	r3, [r4, #0]
 8015d2a:	bd38      	pop	{r3, r4, r5, pc}
 8015d2c:	2000de28 	.word	0x2000de28

08015d30 <_sbrk_r>:
 8015d30:	b538      	push	{r3, r4, r5, lr}
 8015d32:	4d06      	ldr	r5, [pc, #24]	@ (8015d4c <_sbrk_r+0x1c>)
 8015d34:	2300      	movs	r3, #0
 8015d36:	4604      	mov	r4, r0
 8015d38:	4608      	mov	r0, r1
 8015d3a:	602b      	str	r3, [r5, #0]
 8015d3c:	f7ec fe5c 	bl	80029f8 <_sbrk>
 8015d40:	1c43      	adds	r3, r0, #1
 8015d42:	d102      	bne.n	8015d4a <_sbrk_r+0x1a>
 8015d44:	682b      	ldr	r3, [r5, #0]
 8015d46:	b103      	cbz	r3, 8015d4a <_sbrk_r+0x1a>
 8015d48:	6023      	str	r3, [r4, #0]
 8015d4a:	bd38      	pop	{r3, r4, r5, pc}
 8015d4c:	2000de28 	.word	0x2000de28

08015d50 <_write_r>:
 8015d50:	b538      	push	{r3, r4, r5, lr}
 8015d52:	4d07      	ldr	r5, [pc, #28]	@ (8015d70 <_write_r+0x20>)
 8015d54:	4604      	mov	r4, r0
 8015d56:	4608      	mov	r0, r1
 8015d58:	4611      	mov	r1, r2
 8015d5a:	2200      	movs	r2, #0
 8015d5c:	602a      	str	r2, [r5, #0]
 8015d5e:	461a      	mov	r2, r3
 8015d60:	f7ec fdfa 	bl	8002958 <_write>
 8015d64:	1c43      	adds	r3, r0, #1
 8015d66:	d102      	bne.n	8015d6e <_write_r+0x1e>
 8015d68:	682b      	ldr	r3, [r5, #0]
 8015d6a:	b103      	cbz	r3, 8015d6e <_write_r+0x1e>
 8015d6c:	6023      	str	r3, [r4, #0]
 8015d6e:	bd38      	pop	{r3, r4, r5, pc}
 8015d70:	2000de28 	.word	0x2000de28

08015d74 <__errno>:
 8015d74:	4b01      	ldr	r3, [pc, #4]	@ (8015d7c <__errno+0x8>)
 8015d76:	6818      	ldr	r0, [r3, #0]
 8015d78:	4770      	bx	lr
 8015d7a:	bf00      	nop
 8015d7c:	20000148 	.word	0x20000148

08015d80 <__libc_init_array>:
 8015d80:	b570      	push	{r4, r5, r6, lr}
 8015d82:	4d0d      	ldr	r5, [pc, #52]	@ (8015db8 <__libc_init_array+0x38>)
 8015d84:	4c0d      	ldr	r4, [pc, #52]	@ (8015dbc <__libc_init_array+0x3c>)
 8015d86:	1b64      	subs	r4, r4, r5
 8015d88:	10a4      	asrs	r4, r4, #2
 8015d8a:	2600      	movs	r6, #0
 8015d8c:	42a6      	cmp	r6, r4
 8015d8e:	d109      	bne.n	8015da4 <__libc_init_array+0x24>
 8015d90:	4d0b      	ldr	r5, [pc, #44]	@ (8015dc0 <__libc_init_array+0x40>)
 8015d92:	4c0c      	ldr	r4, [pc, #48]	@ (8015dc4 <__libc_init_array+0x44>)
 8015d94:	f000 fef8 	bl	8016b88 <_init>
 8015d98:	1b64      	subs	r4, r4, r5
 8015d9a:	10a4      	asrs	r4, r4, #2
 8015d9c:	2600      	movs	r6, #0
 8015d9e:	42a6      	cmp	r6, r4
 8015da0:	d105      	bne.n	8015dae <__libc_init_array+0x2e>
 8015da2:	bd70      	pop	{r4, r5, r6, pc}
 8015da4:	f855 3b04 	ldr.w	r3, [r5], #4
 8015da8:	4798      	blx	r3
 8015daa:	3601      	adds	r6, #1
 8015dac:	e7ee      	b.n	8015d8c <__libc_init_array+0xc>
 8015dae:	f855 3b04 	ldr.w	r3, [r5], #4
 8015db2:	4798      	blx	r3
 8015db4:	3601      	adds	r6, #1
 8015db6:	e7f2      	b.n	8015d9e <__libc_init_array+0x1e>
 8015db8:	08017a4c 	.word	0x08017a4c
 8015dbc:	08017a4c 	.word	0x08017a4c
 8015dc0:	08017a4c 	.word	0x08017a4c
 8015dc4:	08017a58 	.word	0x08017a58

08015dc8 <__retarget_lock_init_recursive>:
 8015dc8:	4770      	bx	lr

08015dca <__retarget_lock_acquire_recursive>:
 8015dca:	4770      	bx	lr

08015dcc <__retarget_lock_release_recursive>:
 8015dcc:	4770      	bx	lr

08015dce <strcpy>:
 8015dce:	4603      	mov	r3, r0
 8015dd0:	f811 2b01 	ldrb.w	r2, [r1], #1
 8015dd4:	f803 2b01 	strb.w	r2, [r3], #1
 8015dd8:	2a00      	cmp	r2, #0
 8015dda:	d1f9      	bne.n	8015dd0 <strcpy+0x2>
 8015ddc:	4770      	bx	lr

08015dde <memcpy>:
 8015dde:	440a      	add	r2, r1
 8015de0:	4291      	cmp	r1, r2
 8015de2:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 8015de6:	d100      	bne.n	8015dea <memcpy+0xc>
 8015de8:	4770      	bx	lr
 8015dea:	b510      	push	{r4, lr}
 8015dec:	f811 4b01 	ldrb.w	r4, [r1], #1
 8015df0:	f803 4f01 	strb.w	r4, [r3, #1]!
 8015df4:	4291      	cmp	r1, r2
 8015df6:	d1f9      	bne.n	8015dec <memcpy+0xe>
 8015df8:	bd10      	pop	{r4, pc}
	...

08015dfc <__assert_func>:
 8015dfc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8015dfe:	4614      	mov	r4, r2
 8015e00:	461a      	mov	r2, r3
 8015e02:	4b09      	ldr	r3, [pc, #36]	@ (8015e28 <__assert_func+0x2c>)
 8015e04:	681b      	ldr	r3, [r3, #0]
 8015e06:	4605      	mov	r5, r0
 8015e08:	68d8      	ldr	r0, [r3, #12]
 8015e0a:	b954      	cbnz	r4, 8015e22 <__assert_func+0x26>
 8015e0c:	4b07      	ldr	r3, [pc, #28]	@ (8015e2c <__assert_func+0x30>)
 8015e0e:	461c      	mov	r4, r3
 8015e10:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8015e14:	9100      	str	r1, [sp, #0]
 8015e16:	462b      	mov	r3, r5
 8015e18:	4905      	ldr	r1, [pc, #20]	@ (8015e30 <__assert_func+0x34>)
 8015e1a:	f000 fd3f 	bl	801689c <fiprintf>
 8015e1e:	f000 fde3 	bl	80169e8 <abort>
 8015e22:	4b04      	ldr	r3, [pc, #16]	@ (8015e34 <__assert_func+0x38>)
 8015e24:	e7f4      	b.n	8015e10 <__assert_func+0x14>
 8015e26:	bf00      	nop
 8015e28:	20000148 	.word	0x20000148
 8015e2c:	08017a0f 	.word	0x08017a0f
 8015e30:	080179e1 	.word	0x080179e1
 8015e34:	080179d4 	.word	0x080179d4

08015e38 <__env_lock>:
 8015e38:	4801      	ldr	r0, [pc, #4]	@ (8015e40 <__env_lock+0x8>)
 8015e3a:	f7ff bfc6 	b.w	8015dca <__retarget_lock_acquire_recursive>
 8015e3e:	bf00      	nop
 8015e40:	2000de2c 	.word	0x2000de2c

08015e44 <__env_unlock>:
 8015e44:	4801      	ldr	r0, [pc, #4]	@ (8015e4c <__env_unlock+0x8>)
 8015e46:	f7ff bfc1 	b.w	8015dcc <__retarget_lock_release_recursive>
 8015e4a:	bf00      	nop
 8015e4c:	2000de2c 	.word	0x2000de2c

08015e50 <_free_r>:
 8015e50:	b538      	push	{r3, r4, r5, lr}
 8015e52:	4605      	mov	r5, r0
 8015e54:	2900      	cmp	r1, #0
 8015e56:	d041      	beq.n	8015edc <_free_r+0x8c>
 8015e58:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8015e5c:	1f0c      	subs	r4, r1, #4
 8015e5e:	2b00      	cmp	r3, #0
 8015e60:	bfb8      	it	lt
 8015e62:	18e4      	addlt	r4, r4, r3
 8015e64:	f7ff fb7c 	bl	8015560 <__malloc_lock>
 8015e68:	4a1d      	ldr	r2, [pc, #116]	@ (8015ee0 <_free_r+0x90>)
 8015e6a:	6813      	ldr	r3, [r2, #0]
 8015e6c:	b933      	cbnz	r3, 8015e7c <_free_r+0x2c>
 8015e6e:	6063      	str	r3, [r4, #4]
 8015e70:	6014      	str	r4, [r2, #0]
 8015e72:	4628      	mov	r0, r5
 8015e74:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8015e78:	f7ff bb78 	b.w	801556c <__malloc_unlock>
 8015e7c:	42a3      	cmp	r3, r4
 8015e7e:	d908      	bls.n	8015e92 <_free_r+0x42>
 8015e80:	6820      	ldr	r0, [r4, #0]
 8015e82:	1821      	adds	r1, r4, r0
 8015e84:	428b      	cmp	r3, r1
 8015e86:	bf01      	itttt	eq
 8015e88:	6819      	ldreq	r1, [r3, #0]
 8015e8a:	685b      	ldreq	r3, [r3, #4]
 8015e8c:	1809      	addeq	r1, r1, r0
 8015e8e:	6021      	streq	r1, [r4, #0]
 8015e90:	e7ed      	b.n	8015e6e <_free_r+0x1e>
 8015e92:	461a      	mov	r2, r3
 8015e94:	685b      	ldr	r3, [r3, #4]
 8015e96:	b10b      	cbz	r3, 8015e9c <_free_r+0x4c>
 8015e98:	42a3      	cmp	r3, r4
 8015e9a:	d9fa      	bls.n	8015e92 <_free_r+0x42>
 8015e9c:	6811      	ldr	r1, [r2, #0]
 8015e9e:	1850      	adds	r0, r2, r1
 8015ea0:	42a0      	cmp	r0, r4
 8015ea2:	d10b      	bne.n	8015ebc <_free_r+0x6c>
 8015ea4:	6820      	ldr	r0, [r4, #0]
 8015ea6:	4401      	add	r1, r0
 8015ea8:	1850      	adds	r0, r2, r1
 8015eaa:	4283      	cmp	r3, r0
 8015eac:	6011      	str	r1, [r2, #0]
 8015eae:	d1e0      	bne.n	8015e72 <_free_r+0x22>
 8015eb0:	6818      	ldr	r0, [r3, #0]
 8015eb2:	685b      	ldr	r3, [r3, #4]
 8015eb4:	6053      	str	r3, [r2, #4]
 8015eb6:	4408      	add	r0, r1
 8015eb8:	6010      	str	r0, [r2, #0]
 8015eba:	e7da      	b.n	8015e72 <_free_r+0x22>
 8015ebc:	d902      	bls.n	8015ec4 <_free_r+0x74>
 8015ebe:	230c      	movs	r3, #12
 8015ec0:	602b      	str	r3, [r5, #0]
 8015ec2:	e7d6      	b.n	8015e72 <_free_r+0x22>
 8015ec4:	6820      	ldr	r0, [r4, #0]
 8015ec6:	1821      	adds	r1, r4, r0
 8015ec8:	428b      	cmp	r3, r1
 8015eca:	bf04      	itt	eq
 8015ecc:	6819      	ldreq	r1, [r3, #0]
 8015ece:	685b      	ldreq	r3, [r3, #4]
 8015ed0:	6063      	str	r3, [r4, #4]
 8015ed2:	bf04      	itt	eq
 8015ed4:	1809      	addeq	r1, r1, r0
 8015ed6:	6021      	streq	r1, [r4, #0]
 8015ed8:	6054      	str	r4, [r2, #4]
 8015eda:	e7ca      	b.n	8015e72 <_free_r+0x22>
 8015edc:	bd38      	pop	{r3, r4, r5, pc}
 8015ede:	bf00      	nop
 8015ee0:	2000dce4 	.word	0x2000dce4

08015ee4 <_malloc_usable_size_r>:
 8015ee4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8015ee8:	1f18      	subs	r0, r3, #4
 8015eea:	2b00      	cmp	r3, #0
 8015eec:	bfbc      	itt	lt
 8015eee:	580b      	ldrlt	r3, [r1, r0]
 8015ef0:	18c0      	addlt	r0, r0, r3
 8015ef2:	4770      	bx	lr

08015ef4 <__ssputs_r>:
 8015ef4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8015ef8:	688e      	ldr	r6, [r1, #8]
 8015efa:	461f      	mov	r7, r3
 8015efc:	42be      	cmp	r6, r7
 8015efe:	680b      	ldr	r3, [r1, #0]
 8015f00:	4682      	mov	sl, r0
 8015f02:	460c      	mov	r4, r1
 8015f04:	4690      	mov	r8, r2
 8015f06:	d82d      	bhi.n	8015f64 <__ssputs_r+0x70>
 8015f08:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8015f0c:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8015f10:	d026      	beq.n	8015f60 <__ssputs_r+0x6c>
 8015f12:	6965      	ldr	r5, [r4, #20]
 8015f14:	6909      	ldr	r1, [r1, #16]
 8015f16:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8015f1a:	eba3 0901 	sub.w	r9, r3, r1
 8015f1e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8015f22:	1c7b      	adds	r3, r7, #1
 8015f24:	444b      	add	r3, r9
 8015f26:	106d      	asrs	r5, r5, #1
 8015f28:	429d      	cmp	r5, r3
 8015f2a:	bf38      	it	cc
 8015f2c:	461d      	movcc	r5, r3
 8015f2e:	0553      	lsls	r3, r2, #21
 8015f30:	d527      	bpl.n	8015f82 <__ssputs_r+0x8e>
 8015f32:	4629      	mov	r1, r5
 8015f34:	f7ff fa94 	bl	8015460 <_malloc_r>
 8015f38:	4606      	mov	r6, r0
 8015f3a:	b360      	cbz	r0, 8015f96 <__ssputs_r+0xa2>
 8015f3c:	6921      	ldr	r1, [r4, #16]
 8015f3e:	464a      	mov	r2, r9
 8015f40:	f7ff ff4d 	bl	8015dde <memcpy>
 8015f44:	89a3      	ldrh	r3, [r4, #12]
 8015f46:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8015f4a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8015f4e:	81a3      	strh	r3, [r4, #12]
 8015f50:	6126      	str	r6, [r4, #16]
 8015f52:	6165      	str	r5, [r4, #20]
 8015f54:	444e      	add	r6, r9
 8015f56:	eba5 0509 	sub.w	r5, r5, r9
 8015f5a:	6026      	str	r6, [r4, #0]
 8015f5c:	60a5      	str	r5, [r4, #8]
 8015f5e:	463e      	mov	r6, r7
 8015f60:	42be      	cmp	r6, r7
 8015f62:	d900      	bls.n	8015f66 <__ssputs_r+0x72>
 8015f64:	463e      	mov	r6, r7
 8015f66:	6820      	ldr	r0, [r4, #0]
 8015f68:	4632      	mov	r2, r6
 8015f6a:	4641      	mov	r1, r8
 8015f6c:	f7ff fe54 	bl	8015c18 <memmove>
 8015f70:	68a3      	ldr	r3, [r4, #8]
 8015f72:	1b9b      	subs	r3, r3, r6
 8015f74:	60a3      	str	r3, [r4, #8]
 8015f76:	6823      	ldr	r3, [r4, #0]
 8015f78:	4433      	add	r3, r6
 8015f7a:	6023      	str	r3, [r4, #0]
 8015f7c:	2000      	movs	r0, #0
 8015f7e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8015f82:	462a      	mov	r2, r5
 8015f84:	f7ff fb6c 	bl	8015660 <_realloc_r>
 8015f88:	4606      	mov	r6, r0
 8015f8a:	2800      	cmp	r0, #0
 8015f8c:	d1e0      	bne.n	8015f50 <__ssputs_r+0x5c>
 8015f8e:	6921      	ldr	r1, [r4, #16]
 8015f90:	4650      	mov	r0, sl
 8015f92:	f7ff ff5d 	bl	8015e50 <_free_r>
 8015f96:	230c      	movs	r3, #12
 8015f98:	f8ca 3000 	str.w	r3, [sl]
 8015f9c:	89a3      	ldrh	r3, [r4, #12]
 8015f9e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8015fa2:	81a3      	strh	r3, [r4, #12]
 8015fa4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8015fa8:	e7e9      	b.n	8015f7e <__ssputs_r+0x8a>
	...

08015fac <_svfiprintf_r>:
 8015fac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015fb0:	4698      	mov	r8, r3
 8015fb2:	898b      	ldrh	r3, [r1, #12]
 8015fb4:	061b      	lsls	r3, r3, #24
 8015fb6:	b09d      	sub	sp, #116	@ 0x74
 8015fb8:	4607      	mov	r7, r0
 8015fba:	460d      	mov	r5, r1
 8015fbc:	4614      	mov	r4, r2
 8015fbe:	d510      	bpl.n	8015fe2 <_svfiprintf_r+0x36>
 8015fc0:	690b      	ldr	r3, [r1, #16]
 8015fc2:	b973      	cbnz	r3, 8015fe2 <_svfiprintf_r+0x36>
 8015fc4:	2140      	movs	r1, #64	@ 0x40
 8015fc6:	f7ff fa4b 	bl	8015460 <_malloc_r>
 8015fca:	6028      	str	r0, [r5, #0]
 8015fcc:	6128      	str	r0, [r5, #16]
 8015fce:	b930      	cbnz	r0, 8015fde <_svfiprintf_r+0x32>
 8015fd0:	230c      	movs	r3, #12
 8015fd2:	603b      	str	r3, [r7, #0]
 8015fd4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8015fd8:	b01d      	add	sp, #116	@ 0x74
 8015fda:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015fde:	2340      	movs	r3, #64	@ 0x40
 8015fe0:	616b      	str	r3, [r5, #20]
 8015fe2:	2300      	movs	r3, #0
 8015fe4:	9309      	str	r3, [sp, #36]	@ 0x24
 8015fe6:	2320      	movs	r3, #32
 8015fe8:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8015fec:	f8cd 800c 	str.w	r8, [sp, #12]
 8015ff0:	2330      	movs	r3, #48	@ 0x30
 8015ff2:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8016190 <_svfiprintf_r+0x1e4>
 8015ff6:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8015ffa:	f04f 0901 	mov.w	r9, #1
 8015ffe:	4623      	mov	r3, r4
 8016000:	469a      	mov	sl, r3
 8016002:	f813 2b01 	ldrb.w	r2, [r3], #1
 8016006:	b10a      	cbz	r2, 801600c <_svfiprintf_r+0x60>
 8016008:	2a25      	cmp	r2, #37	@ 0x25
 801600a:	d1f9      	bne.n	8016000 <_svfiprintf_r+0x54>
 801600c:	ebba 0b04 	subs.w	fp, sl, r4
 8016010:	d00b      	beq.n	801602a <_svfiprintf_r+0x7e>
 8016012:	465b      	mov	r3, fp
 8016014:	4622      	mov	r2, r4
 8016016:	4629      	mov	r1, r5
 8016018:	4638      	mov	r0, r7
 801601a:	f7ff ff6b 	bl	8015ef4 <__ssputs_r>
 801601e:	3001      	adds	r0, #1
 8016020:	f000 80a7 	beq.w	8016172 <_svfiprintf_r+0x1c6>
 8016024:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8016026:	445a      	add	r2, fp
 8016028:	9209      	str	r2, [sp, #36]	@ 0x24
 801602a:	f89a 3000 	ldrb.w	r3, [sl]
 801602e:	2b00      	cmp	r3, #0
 8016030:	f000 809f 	beq.w	8016172 <_svfiprintf_r+0x1c6>
 8016034:	2300      	movs	r3, #0
 8016036:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 801603a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801603e:	f10a 0a01 	add.w	sl, sl, #1
 8016042:	9304      	str	r3, [sp, #16]
 8016044:	9307      	str	r3, [sp, #28]
 8016046:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 801604a:	931a      	str	r3, [sp, #104]	@ 0x68
 801604c:	4654      	mov	r4, sl
 801604e:	2205      	movs	r2, #5
 8016050:	f814 1b01 	ldrb.w	r1, [r4], #1
 8016054:	484e      	ldr	r0, [pc, #312]	@ (8016190 <_svfiprintf_r+0x1e4>)
 8016056:	f7ea f8db 	bl	8000210 <memchr>
 801605a:	9a04      	ldr	r2, [sp, #16]
 801605c:	b9d8      	cbnz	r0, 8016096 <_svfiprintf_r+0xea>
 801605e:	06d0      	lsls	r0, r2, #27
 8016060:	bf44      	itt	mi
 8016062:	2320      	movmi	r3, #32
 8016064:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8016068:	0711      	lsls	r1, r2, #28
 801606a:	bf44      	itt	mi
 801606c:	232b      	movmi	r3, #43	@ 0x2b
 801606e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8016072:	f89a 3000 	ldrb.w	r3, [sl]
 8016076:	2b2a      	cmp	r3, #42	@ 0x2a
 8016078:	d015      	beq.n	80160a6 <_svfiprintf_r+0xfa>
 801607a:	9a07      	ldr	r2, [sp, #28]
 801607c:	4654      	mov	r4, sl
 801607e:	2000      	movs	r0, #0
 8016080:	f04f 0c0a 	mov.w	ip, #10
 8016084:	4621      	mov	r1, r4
 8016086:	f811 3b01 	ldrb.w	r3, [r1], #1
 801608a:	3b30      	subs	r3, #48	@ 0x30
 801608c:	2b09      	cmp	r3, #9
 801608e:	d94b      	bls.n	8016128 <_svfiprintf_r+0x17c>
 8016090:	b1b0      	cbz	r0, 80160c0 <_svfiprintf_r+0x114>
 8016092:	9207      	str	r2, [sp, #28]
 8016094:	e014      	b.n	80160c0 <_svfiprintf_r+0x114>
 8016096:	eba0 0308 	sub.w	r3, r0, r8
 801609a:	fa09 f303 	lsl.w	r3, r9, r3
 801609e:	4313      	orrs	r3, r2
 80160a0:	9304      	str	r3, [sp, #16]
 80160a2:	46a2      	mov	sl, r4
 80160a4:	e7d2      	b.n	801604c <_svfiprintf_r+0xa0>
 80160a6:	9b03      	ldr	r3, [sp, #12]
 80160a8:	1d19      	adds	r1, r3, #4
 80160aa:	681b      	ldr	r3, [r3, #0]
 80160ac:	9103      	str	r1, [sp, #12]
 80160ae:	2b00      	cmp	r3, #0
 80160b0:	bfbb      	ittet	lt
 80160b2:	425b      	neglt	r3, r3
 80160b4:	f042 0202 	orrlt.w	r2, r2, #2
 80160b8:	9307      	strge	r3, [sp, #28]
 80160ba:	9307      	strlt	r3, [sp, #28]
 80160bc:	bfb8      	it	lt
 80160be:	9204      	strlt	r2, [sp, #16]
 80160c0:	7823      	ldrb	r3, [r4, #0]
 80160c2:	2b2e      	cmp	r3, #46	@ 0x2e
 80160c4:	d10a      	bne.n	80160dc <_svfiprintf_r+0x130>
 80160c6:	7863      	ldrb	r3, [r4, #1]
 80160c8:	2b2a      	cmp	r3, #42	@ 0x2a
 80160ca:	d132      	bne.n	8016132 <_svfiprintf_r+0x186>
 80160cc:	9b03      	ldr	r3, [sp, #12]
 80160ce:	1d1a      	adds	r2, r3, #4
 80160d0:	681b      	ldr	r3, [r3, #0]
 80160d2:	9203      	str	r2, [sp, #12]
 80160d4:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80160d8:	3402      	adds	r4, #2
 80160da:	9305      	str	r3, [sp, #20]
 80160dc:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 80161a0 <_svfiprintf_r+0x1f4>
 80160e0:	7821      	ldrb	r1, [r4, #0]
 80160e2:	2203      	movs	r2, #3
 80160e4:	4650      	mov	r0, sl
 80160e6:	f7ea f893 	bl	8000210 <memchr>
 80160ea:	b138      	cbz	r0, 80160fc <_svfiprintf_r+0x150>
 80160ec:	9b04      	ldr	r3, [sp, #16]
 80160ee:	eba0 000a 	sub.w	r0, r0, sl
 80160f2:	2240      	movs	r2, #64	@ 0x40
 80160f4:	4082      	lsls	r2, r0
 80160f6:	4313      	orrs	r3, r2
 80160f8:	3401      	adds	r4, #1
 80160fa:	9304      	str	r3, [sp, #16]
 80160fc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8016100:	4824      	ldr	r0, [pc, #144]	@ (8016194 <_svfiprintf_r+0x1e8>)
 8016102:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8016106:	2206      	movs	r2, #6
 8016108:	f7ea f882 	bl	8000210 <memchr>
 801610c:	2800      	cmp	r0, #0
 801610e:	d036      	beq.n	801617e <_svfiprintf_r+0x1d2>
 8016110:	4b21      	ldr	r3, [pc, #132]	@ (8016198 <_svfiprintf_r+0x1ec>)
 8016112:	bb1b      	cbnz	r3, 801615c <_svfiprintf_r+0x1b0>
 8016114:	9b03      	ldr	r3, [sp, #12]
 8016116:	3307      	adds	r3, #7
 8016118:	f023 0307 	bic.w	r3, r3, #7
 801611c:	3308      	adds	r3, #8
 801611e:	9303      	str	r3, [sp, #12]
 8016120:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8016122:	4433      	add	r3, r6
 8016124:	9309      	str	r3, [sp, #36]	@ 0x24
 8016126:	e76a      	b.n	8015ffe <_svfiprintf_r+0x52>
 8016128:	fb0c 3202 	mla	r2, ip, r2, r3
 801612c:	460c      	mov	r4, r1
 801612e:	2001      	movs	r0, #1
 8016130:	e7a8      	b.n	8016084 <_svfiprintf_r+0xd8>
 8016132:	2300      	movs	r3, #0
 8016134:	3401      	adds	r4, #1
 8016136:	9305      	str	r3, [sp, #20]
 8016138:	4619      	mov	r1, r3
 801613a:	f04f 0c0a 	mov.w	ip, #10
 801613e:	4620      	mov	r0, r4
 8016140:	f810 2b01 	ldrb.w	r2, [r0], #1
 8016144:	3a30      	subs	r2, #48	@ 0x30
 8016146:	2a09      	cmp	r2, #9
 8016148:	d903      	bls.n	8016152 <_svfiprintf_r+0x1a6>
 801614a:	2b00      	cmp	r3, #0
 801614c:	d0c6      	beq.n	80160dc <_svfiprintf_r+0x130>
 801614e:	9105      	str	r1, [sp, #20]
 8016150:	e7c4      	b.n	80160dc <_svfiprintf_r+0x130>
 8016152:	fb0c 2101 	mla	r1, ip, r1, r2
 8016156:	4604      	mov	r4, r0
 8016158:	2301      	movs	r3, #1
 801615a:	e7f0      	b.n	801613e <_svfiprintf_r+0x192>
 801615c:	ab03      	add	r3, sp, #12
 801615e:	9300      	str	r3, [sp, #0]
 8016160:	462a      	mov	r2, r5
 8016162:	4b0e      	ldr	r3, [pc, #56]	@ (801619c <_svfiprintf_r+0x1f0>)
 8016164:	a904      	add	r1, sp, #16
 8016166:	4638      	mov	r0, r7
 8016168:	f3af 8000 	nop.w
 801616c:	1c42      	adds	r2, r0, #1
 801616e:	4606      	mov	r6, r0
 8016170:	d1d6      	bne.n	8016120 <_svfiprintf_r+0x174>
 8016172:	89ab      	ldrh	r3, [r5, #12]
 8016174:	065b      	lsls	r3, r3, #25
 8016176:	f53f af2d 	bmi.w	8015fd4 <_svfiprintf_r+0x28>
 801617a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801617c:	e72c      	b.n	8015fd8 <_svfiprintf_r+0x2c>
 801617e:	ab03      	add	r3, sp, #12
 8016180:	9300      	str	r3, [sp, #0]
 8016182:	462a      	mov	r2, r5
 8016184:	4b05      	ldr	r3, [pc, #20]	@ (801619c <_svfiprintf_r+0x1f0>)
 8016186:	a904      	add	r1, sp, #16
 8016188:	4638      	mov	r0, r7
 801618a:	f000 f9bb 	bl	8016504 <_printf_i>
 801618e:	e7ed      	b.n	801616c <_svfiprintf_r+0x1c0>
 8016190:	08017a10 	.word	0x08017a10
 8016194:	08017a1a 	.word	0x08017a1a
 8016198:	00000000 	.word	0x00000000
 801619c:	08015ef5 	.word	0x08015ef5
 80161a0:	08017a16 	.word	0x08017a16

080161a4 <__sfputc_r>:
 80161a4:	6893      	ldr	r3, [r2, #8]
 80161a6:	3b01      	subs	r3, #1
 80161a8:	2b00      	cmp	r3, #0
 80161aa:	b410      	push	{r4}
 80161ac:	6093      	str	r3, [r2, #8]
 80161ae:	da08      	bge.n	80161c2 <__sfputc_r+0x1e>
 80161b0:	6994      	ldr	r4, [r2, #24]
 80161b2:	42a3      	cmp	r3, r4
 80161b4:	db01      	blt.n	80161ba <__sfputc_r+0x16>
 80161b6:	290a      	cmp	r1, #10
 80161b8:	d103      	bne.n	80161c2 <__sfputc_r+0x1e>
 80161ba:	f85d 4b04 	ldr.w	r4, [sp], #4
 80161be:	f000 bb7f 	b.w	80168c0 <__swbuf_r>
 80161c2:	6813      	ldr	r3, [r2, #0]
 80161c4:	1c58      	adds	r0, r3, #1
 80161c6:	6010      	str	r0, [r2, #0]
 80161c8:	7019      	strb	r1, [r3, #0]
 80161ca:	4608      	mov	r0, r1
 80161cc:	f85d 4b04 	ldr.w	r4, [sp], #4
 80161d0:	4770      	bx	lr

080161d2 <__sfputs_r>:
 80161d2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80161d4:	4606      	mov	r6, r0
 80161d6:	460f      	mov	r7, r1
 80161d8:	4614      	mov	r4, r2
 80161da:	18d5      	adds	r5, r2, r3
 80161dc:	42ac      	cmp	r4, r5
 80161de:	d101      	bne.n	80161e4 <__sfputs_r+0x12>
 80161e0:	2000      	movs	r0, #0
 80161e2:	e007      	b.n	80161f4 <__sfputs_r+0x22>
 80161e4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80161e8:	463a      	mov	r2, r7
 80161ea:	4630      	mov	r0, r6
 80161ec:	f7ff ffda 	bl	80161a4 <__sfputc_r>
 80161f0:	1c43      	adds	r3, r0, #1
 80161f2:	d1f3      	bne.n	80161dc <__sfputs_r+0xa>
 80161f4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080161f8 <_vfiprintf_r>:
 80161f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80161fc:	460d      	mov	r5, r1
 80161fe:	b09d      	sub	sp, #116	@ 0x74
 8016200:	4614      	mov	r4, r2
 8016202:	4698      	mov	r8, r3
 8016204:	4606      	mov	r6, r0
 8016206:	b118      	cbz	r0, 8016210 <_vfiprintf_r+0x18>
 8016208:	6a03      	ldr	r3, [r0, #32]
 801620a:	b90b      	cbnz	r3, 8016210 <_vfiprintf_r+0x18>
 801620c:	f7ff fbfc 	bl	8015a08 <__sinit>
 8016210:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8016212:	07d9      	lsls	r1, r3, #31
 8016214:	d405      	bmi.n	8016222 <_vfiprintf_r+0x2a>
 8016216:	89ab      	ldrh	r3, [r5, #12]
 8016218:	059a      	lsls	r2, r3, #22
 801621a:	d402      	bmi.n	8016222 <_vfiprintf_r+0x2a>
 801621c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801621e:	f7ff fdd4 	bl	8015dca <__retarget_lock_acquire_recursive>
 8016222:	89ab      	ldrh	r3, [r5, #12]
 8016224:	071b      	lsls	r3, r3, #28
 8016226:	d501      	bpl.n	801622c <_vfiprintf_r+0x34>
 8016228:	692b      	ldr	r3, [r5, #16]
 801622a:	b99b      	cbnz	r3, 8016254 <_vfiprintf_r+0x5c>
 801622c:	4629      	mov	r1, r5
 801622e:	4630      	mov	r0, r6
 8016230:	f000 fb84 	bl	801693c <__swsetup_r>
 8016234:	b170      	cbz	r0, 8016254 <_vfiprintf_r+0x5c>
 8016236:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8016238:	07dc      	lsls	r4, r3, #31
 801623a:	d504      	bpl.n	8016246 <_vfiprintf_r+0x4e>
 801623c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8016240:	b01d      	add	sp, #116	@ 0x74
 8016242:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016246:	89ab      	ldrh	r3, [r5, #12]
 8016248:	0598      	lsls	r0, r3, #22
 801624a:	d4f7      	bmi.n	801623c <_vfiprintf_r+0x44>
 801624c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801624e:	f7ff fdbd 	bl	8015dcc <__retarget_lock_release_recursive>
 8016252:	e7f3      	b.n	801623c <_vfiprintf_r+0x44>
 8016254:	2300      	movs	r3, #0
 8016256:	9309      	str	r3, [sp, #36]	@ 0x24
 8016258:	2320      	movs	r3, #32
 801625a:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 801625e:	f8cd 800c 	str.w	r8, [sp, #12]
 8016262:	2330      	movs	r3, #48	@ 0x30
 8016264:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8016414 <_vfiprintf_r+0x21c>
 8016268:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 801626c:	f04f 0901 	mov.w	r9, #1
 8016270:	4623      	mov	r3, r4
 8016272:	469a      	mov	sl, r3
 8016274:	f813 2b01 	ldrb.w	r2, [r3], #1
 8016278:	b10a      	cbz	r2, 801627e <_vfiprintf_r+0x86>
 801627a:	2a25      	cmp	r2, #37	@ 0x25
 801627c:	d1f9      	bne.n	8016272 <_vfiprintf_r+0x7a>
 801627e:	ebba 0b04 	subs.w	fp, sl, r4
 8016282:	d00b      	beq.n	801629c <_vfiprintf_r+0xa4>
 8016284:	465b      	mov	r3, fp
 8016286:	4622      	mov	r2, r4
 8016288:	4629      	mov	r1, r5
 801628a:	4630      	mov	r0, r6
 801628c:	f7ff ffa1 	bl	80161d2 <__sfputs_r>
 8016290:	3001      	adds	r0, #1
 8016292:	f000 80a7 	beq.w	80163e4 <_vfiprintf_r+0x1ec>
 8016296:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8016298:	445a      	add	r2, fp
 801629a:	9209      	str	r2, [sp, #36]	@ 0x24
 801629c:	f89a 3000 	ldrb.w	r3, [sl]
 80162a0:	2b00      	cmp	r3, #0
 80162a2:	f000 809f 	beq.w	80163e4 <_vfiprintf_r+0x1ec>
 80162a6:	2300      	movs	r3, #0
 80162a8:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80162ac:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80162b0:	f10a 0a01 	add.w	sl, sl, #1
 80162b4:	9304      	str	r3, [sp, #16]
 80162b6:	9307      	str	r3, [sp, #28]
 80162b8:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80162bc:	931a      	str	r3, [sp, #104]	@ 0x68
 80162be:	4654      	mov	r4, sl
 80162c0:	2205      	movs	r2, #5
 80162c2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80162c6:	4853      	ldr	r0, [pc, #332]	@ (8016414 <_vfiprintf_r+0x21c>)
 80162c8:	f7e9 ffa2 	bl	8000210 <memchr>
 80162cc:	9a04      	ldr	r2, [sp, #16]
 80162ce:	b9d8      	cbnz	r0, 8016308 <_vfiprintf_r+0x110>
 80162d0:	06d1      	lsls	r1, r2, #27
 80162d2:	bf44      	itt	mi
 80162d4:	2320      	movmi	r3, #32
 80162d6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80162da:	0713      	lsls	r3, r2, #28
 80162dc:	bf44      	itt	mi
 80162de:	232b      	movmi	r3, #43	@ 0x2b
 80162e0:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80162e4:	f89a 3000 	ldrb.w	r3, [sl]
 80162e8:	2b2a      	cmp	r3, #42	@ 0x2a
 80162ea:	d015      	beq.n	8016318 <_vfiprintf_r+0x120>
 80162ec:	9a07      	ldr	r2, [sp, #28]
 80162ee:	4654      	mov	r4, sl
 80162f0:	2000      	movs	r0, #0
 80162f2:	f04f 0c0a 	mov.w	ip, #10
 80162f6:	4621      	mov	r1, r4
 80162f8:	f811 3b01 	ldrb.w	r3, [r1], #1
 80162fc:	3b30      	subs	r3, #48	@ 0x30
 80162fe:	2b09      	cmp	r3, #9
 8016300:	d94b      	bls.n	801639a <_vfiprintf_r+0x1a2>
 8016302:	b1b0      	cbz	r0, 8016332 <_vfiprintf_r+0x13a>
 8016304:	9207      	str	r2, [sp, #28]
 8016306:	e014      	b.n	8016332 <_vfiprintf_r+0x13a>
 8016308:	eba0 0308 	sub.w	r3, r0, r8
 801630c:	fa09 f303 	lsl.w	r3, r9, r3
 8016310:	4313      	orrs	r3, r2
 8016312:	9304      	str	r3, [sp, #16]
 8016314:	46a2      	mov	sl, r4
 8016316:	e7d2      	b.n	80162be <_vfiprintf_r+0xc6>
 8016318:	9b03      	ldr	r3, [sp, #12]
 801631a:	1d19      	adds	r1, r3, #4
 801631c:	681b      	ldr	r3, [r3, #0]
 801631e:	9103      	str	r1, [sp, #12]
 8016320:	2b00      	cmp	r3, #0
 8016322:	bfbb      	ittet	lt
 8016324:	425b      	neglt	r3, r3
 8016326:	f042 0202 	orrlt.w	r2, r2, #2
 801632a:	9307      	strge	r3, [sp, #28]
 801632c:	9307      	strlt	r3, [sp, #28]
 801632e:	bfb8      	it	lt
 8016330:	9204      	strlt	r2, [sp, #16]
 8016332:	7823      	ldrb	r3, [r4, #0]
 8016334:	2b2e      	cmp	r3, #46	@ 0x2e
 8016336:	d10a      	bne.n	801634e <_vfiprintf_r+0x156>
 8016338:	7863      	ldrb	r3, [r4, #1]
 801633a:	2b2a      	cmp	r3, #42	@ 0x2a
 801633c:	d132      	bne.n	80163a4 <_vfiprintf_r+0x1ac>
 801633e:	9b03      	ldr	r3, [sp, #12]
 8016340:	1d1a      	adds	r2, r3, #4
 8016342:	681b      	ldr	r3, [r3, #0]
 8016344:	9203      	str	r2, [sp, #12]
 8016346:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 801634a:	3402      	adds	r4, #2
 801634c:	9305      	str	r3, [sp, #20]
 801634e:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8016424 <_vfiprintf_r+0x22c>
 8016352:	7821      	ldrb	r1, [r4, #0]
 8016354:	2203      	movs	r2, #3
 8016356:	4650      	mov	r0, sl
 8016358:	f7e9 ff5a 	bl	8000210 <memchr>
 801635c:	b138      	cbz	r0, 801636e <_vfiprintf_r+0x176>
 801635e:	9b04      	ldr	r3, [sp, #16]
 8016360:	eba0 000a 	sub.w	r0, r0, sl
 8016364:	2240      	movs	r2, #64	@ 0x40
 8016366:	4082      	lsls	r2, r0
 8016368:	4313      	orrs	r3, r2
 801636a:	3401      	adds	r4, #1
 801636c:	9304      	str	r3, [sp, #16]
 801636e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8016372:	4829      	ldr	r0, [pc, #164]	@ (8016418 <_vfiprintf_r+0x220>)
 8016374:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8016378:	2206      	movs	r2, #6
 801637a:	f7e9 ff49 	bl	8000210 <memchr>
 801637e:	2800      	cmp	r0, #0
 8016380:	d03f      	beq.n	8016402 <_vfiprintf_r+0x20a>
 8016382:	4b26      	ldr	r3, [pc, #152]	@ (801641c <_vfiprintf_r+0x224>)
 8016384:	bb1b      	cbnz	r3, 80163ce <_vfiprintf_r+0x1d6>
 8016386:	9b03      	ldr	r3, [sp, #12]
 8016388:	3307      	adds	r3, #7
 801638a:	f023 0307 	bic.w	r3, r3, #7
 801638e:	3308      	adds	r3, #8
 8016390:	9303      	str	r3, [sp, #12]
 8016392:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8016394:	443b      	add	r3, r7
 8016396:	9309      	str	r3, [sp, #36]	@ 0x24
 8016398:	e76a      	b.n	8016270 <_vfiprintf_r+0x78>
 801639a:	fb0c 3202 	mla	r2, ip, r2, r3
 801639e:	460c      	mov	r4, r1
 80163a0:	2001      	movs	r0, #1
 80163a2:	e7a8      	b.n	80162f6 <_vfiprintf_r+0xfe>
 80163a4:	2300      	movs	r3, #0
 80163a6:	3401      	adds	r4, #1
 80163a8:	9305      	str	r3, [sp, #20]
 80163aa:	4619      	mov	r1, r3
 80163ac:	f04f 0c0a 	mov.w	ip, #10
 80163b0:	4620      	mov	r0, r4
 80163b2:	f810 2b01 	ldrb.w	r2, [r0], #1
 80163b6:	3a30      	subs	r2, #48	@ 0x30
 80163b8:	2a09      	cmp	r2, #9
 80163ba:	d903      	bls.n	80163c4 <_vfiprintf_r+0x1cc>
 80163bc:	2b00      	cmp	r3, #0
 80163be:	d0c6      	beq.n	801634e <_vfiprintf_r+0x156>
 80163c0:	9105      	str	r1, [sp, #20]
 80163c2:	e7c4      	b.n	801634e <_vfiprintf_r+0x156>
 80163c4:	fb0c 2101 	mla	r1, ip, r1, r2
 80163c8:	4604      	mov	r4, r0
 80163ca:	2301      	movs	r3, #1
 80163cc:	e7f0      	b.n	80163b0 <_vfiprintf_r+0x1b8>
 80163ce:	ab03      	add	r3, sp, #12
 80163d0:	9300      	str	r3, [sp, #0]
 80163d2:	462a      	mov	r2, r5
 80163d4:	4b12      	ldr	r3, [pc, #72]	@ (8016420 <_vfiprintf_r+0x228>)
 80163d6:	a904      	add	r1, sp, #16
 80163d8:	4630      	mov	r0, r6
 80163da:	f3af 8000 	nop.w
 80163de:	4607      	mov	r7, r0
 80163e0:	1c78      	adds	r0, r7, #1
 80163e2:	d1d6      	bne.n	8016392 <_vfiprintf_r+0x19a>
 80163e4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80163e6:	07d9      	lsls	r1, r3, #31
 80163e8:	d405      	bmi.n	80163f6 <_vfiprintf_r+0x1fe>
 80163ea:	89ab      	ldrh	r3, [r5, #12]
 80163ec:	059a      	lsls	r2, r3, #22
 80163ee:	d402      	bmi.n	80163f6 <_vfiprintf_r+0x1fe>
 80163f0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80163f2:	f7ff fceb 	bl	8015dcc <__retarget_lock_release_recursive>
 80163f6:	89ab      	ldrh	r3, [r5, #12]
 80163f8:	065b      	lsls	r3, r3, #25
 80163fa:	f53f af1f 	bmi.w	801623c <_vfiprintf_r+0x44>
 80163fe:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8016400:	e71e      	b.n	8016240 <_vfiprintf_r+0x48>
 8016402:	ab03      	add	r3, sp, #12
 8016404:	9300      	str	r3, [sp, #0]
 8016406:	462a      	mov	r2, r5
 8016408:	4b05      	ldr	r3, [pc, #20]	@ (8016420 <_vfiprintf_r+0x228>)
 801640a:	a904      	add	r1, sp, #16
 801640c:	4630      	mov	r0, r6
 801640e:	f000 f879 	bl	8016504 <_printf_i>
 8016412:	e7e4      	b.n	80163de <_vfiprintf_r+0x1e6>
 8016414:	08017a10 	.word	0x08017a10
 8016418:	08017a1a 	.word	0x08017a1a
 801641c:	00000000 	.word	0x00000000
 8016420:	080161d3 	.word	0x080161d3
 8016424:	08017a16 	.word	0x08017a16

08016428 <_printf_common>:
 8016428:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801642c:	4616      	mov	r6, r2
 801642e:	4698      	mov	r8, r3
 8016430:	688a      	ldr	r2, [r1, #8]
 8016432:	690b      	ldr	r3, [r1, #16]
 8016434:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8016438:	4293      	cmp	r3, r2
 801643a:	bfb8      	it	lt
 801643c:	4613      	movlt	r3, r2
 801643e:	6033      	str	r3, [r6, #0]
 8016440:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8016444:	4607      	mov	r7, r0
 8016446:	460c      	mov	r4, r1
 8016448:	b10a      	cbz	r2, 801644e <_printf_common+0x26>
 801644a:	3301      	adds	r3, #1
 801644c:	6033      	str	r3, [r6, #0]
 801644e:	6823      	ldr	r3, [r4, #0]
 8016450:	0699      	lsls	r1, r3, #26
 8016452:	bf42      	ittt	mi
 8016454:	6833      	ldrmi	r3, [r6, #0]
 8016456:	3302      	addmi	r3, #2
 8016458:	6033      	strmi	r3, [r6, #0]
 801645a:	6825      	ldr	r5, [r4, #0]
 801645c:	f015 0506 	ands.w	r5, r5, #6
 8016460:	d106      	bne.n	8016470 <_printf_common+0x48>
 8016462:	f104 0a19 	add.w	sl, r4, #25
 8016466:	68e3      	ldr	r3, [r4, #12]
 8016468:	6832      	ldr	r2, [r6, #0]
 801646a:	1a9b      	subs	r3, r3, r2
 801646c:	42ab      	cmp	r3, r5
 801646e:	dc26      	bgt.n	80164be <_printf_common+0x96>
 8016470:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8016474:	6822      	ldr	r2, [r4, #0]
 8016476:	3b00      	subs	r3, #0
 8016478:	bf18      	it	ne
 801647a:	2301      	movne	r3, #1
 801647c:	0692      	lsls	r2, r2, #26
 801647e:	d42b      	bmi.n	80164d8 <_printf_common+0xb0>
 8016480:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8016484:	4641      	mov	r1, r8
 8016486:	4638      	mov	r0, r7
 8016488:	47c8      	blx	r9
 801648a:	3001      	adds	r0, #1
 801648c:	d01e      	beq.n	80164cc <_printf_common+0xa4>
 801648e:	6823      	ldr	r3, [r4, #0]
 8016490:	6922      	ldr	r2, [r4, #16]
 8016492:	f003 0306 	and.w	r3, r3, #6
 8016496:	2b04      	cmp	r3, #4
 8016498:	bf02      	ittt	eq
 801649a:	68e5      	ldreq	r5, [r4, #12]
 801649c:	6833      	ldreq	r3, [r6, #0]
 801649e:	1aed      	subeq	r5, r5, r3
 80164a0:	68a3      	ldr	r3, [r4, #8]
 80164a2:	bf0c      	ite	eq
 80164a4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80164a8:	2500      	movne	r5, #0
 80164aa:	4293      	cmp	r3, r2
 80164ac:	bfc4      	itt	gt
 80164ae:	1a9b      	subgt	r3, r3, r2
 80164b0:	18ed      	addgt	r5, r5, r3
 80164b2:	2600      	movs	r6, #0
 80164b4:	341a      	adds	r4, #26
 80164b6:	42b5      	cmp	r5, r6
 80164b8:	d11a      	bne.n	80164f0 <_printf_common+0xc8>
 80164ba:	2000      	movs	r0, #0
 80164bc:	e008      	b.n	80164d0 <_printf_common+0xa8>
 80164be:	2301      	movs	r3, #1
 80164c0:	4652      	mov	r2, sl
 80164c2:	4641      	mov	r1, r8
 80164c4:	4638      	mov	r0, r7
 80164c6:	47c8      	blx	r9
 80164c8:	3001      	adds	r0, #1
 80164ca:	d103      	bne.n	80164d4 <_printf_common+0xac>
 80164cc:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80164d0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80164d4:	3501      	adds	r5, #1
 80164d6:	e7c6      	b.n	8016466 <_printf_common+0x3e>
 80164d8:	18e1      	adds	r1, r4, r3
 80164da:	1c5a      	adds	r2, r3, #1
 80164dc:	2030      	movs	r0, #48	@ 0x30
 80164de:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80164e2:	4422      	add	r2, r4
 80164e4:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80164e8:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80164ec:	3302      	adds	r3, #2
 80164ee:	e7c7      	b.n	8016480 <_printf_common+0x58>
 80164f0:	2301      	movs	r3, #1
 80164f2:	4622      	mov	r2, r4
 80164f4:	4641      	mov	r1, r8
 80164f6:	4638      	mov	r0, r7
 80164f8:	47c8      	blx	r9
 80164fa:	3001      	adds	r0, #1
 80164fc:	d0e6      	beq.n	80164cc <_printf_common+0xa4>
 80164fe:	3601      	adds	r6, #1
 8016500:	e7d9      	b.n	80164b6 <_printf_common+0x8e>
	...

08016504 <_printf_i>:
 8016504:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8016508:	7e0f      	ldrb	r7, [r1, #24]
 801650a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 801650c:	2f78      	cmp	r7, #120	@ 0x78
 801650e:	4691      	mov	r9, r2
 8016510:	4680      	mov	r8, r0
 8016512:	460c      	mov	r4, r1
 8016514:	469a      	mov	sl, r3
 8016516:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 801651a:	d807      	bhi.n	801652c <_printf_i+0x28>
 801651c:	2f62      	cmp	r7, #98	@ 0x62
 801651e:	d80a      	bhi.n	8016536 <_printf_i+0x32>
 8016520:	2f00      	cmp	r7, #0
 8016522:	f000 80d2 	beq.w	80166ca <_printf_i+0x1c6>
 8016526:	2f58      	cmp	r7, #88	@ 0x58
 8016528:	f000 80b9 	beq.w	801669e <_printf_i+0x19a>
 801652c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8016530:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8016534:	e03a      	b.n	80165ac <_printf_i+0xa8>
 8016536:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 801653a:	2b15      	cmp	r3, #21
 801653c:	d8f6      	bhi.n	801652c <_printf_i+0x28>
 801653e:	a101      	add	r1, pc, #4	@ (adr r1, 8016544 <_printf_i+0x40>)
 8016540:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8016544:	0801659d 	.word	0x0801659d
 8016548:	080165b1 	.word	0x080165b1
 801654c:	0801652d 	.word	0x0801652d
 8016550:	0801652d 	.word	0x0801652d
 8016554:	0801652d 	.word	0x0801652d
 8016558:	0801652d 	.word	0x0801652d
 801655c:	080165b1 	.word	0x080165b1
 8016560:	0801652d 	.word	0x0801652d
 8016564:	0801652d 	.word	0x0801652d
 8016568:	0801652d 	.word	0x0801652d
 801656c:	0801652d 	.word	0x0801652d
 8016570:	080166b1 	.word	0x080166b1
 8016574:	080165db 	.word	0x080165db
 8016578:	0801666b 	.word	0x0801666b
 801657c:	0801652d 	.word	0x0801652d
 8016580:	0801652d 	.word	0x0801652d
 8016584:	080166d3 	.word	0x080166d3
 8016588:	0801652d 	.word	0x0801652d
 801658c:	080165db 	.word	0x080165db
 8016590:	0801652d 	.word	0x0801652d
 8016594:	0801652d 	.word	0x0801652d
 8016598:	08016673 	.word	0x08016673
 801659c:	6833      	ldr	r3, [r6, #0]
 801659e:	1d1a      	adds	r2, r3, #4
 80165a0:	681b      	ldr	r3, [r3, #0]
 80165a2:	6032      	str	r2, [r6, #0]
 80165a4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80165a8:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80165ac:	2301      	movs	r3, #1
 80165ae:	e09d      	b.n	80166ec <_printf_i+0x1e8>
 80165b0:	6833      	ldr	r3, [r6, #0]
 80165b2:	6820      	ldr	r0, [r4, #0]
 80165b4:	1d19      	adds	r1, r3, #4
 80165b6:	6031      	str	r1, [r6, #0]
 80165b8:	0606      	lsls	r6, r0, #24
 80165ba:	d501      	bpl.n	80165c0 <_printf_i+0xbc>
 80165bc:	681d      	ldr	r5, [r3, #0]
 80165be:	e003      	b.n	80165c8 <_printf_i+0xc4>
 80165c0:	0645      	lsls	r5, r0, #25
 80165c2:	d5fb      	bpl.n	80165bc <_printf_i+0xb8>
 80165c4:	f9b3 5000 	ldrsh.w	r5, [r3]
 80165c8:	2d00      	cmp	r5, #0
 80165ca:	da03      	bge.n	80165d4 <_printf_i+0xd0>
 80165cc:	232d      	movs	r3, #45	@ 0x2d
 80165ce:	426d      	negs	r5, r5
 80165d0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80165d4:	4859      	ldr	r0, [pc, #356]	@ (801673c <_printf_i+0x238>)
 80165d6:	230a      	movs	r3, #10
 80165d8:	e011      	b.n	80165fe <_printf_i+0xfa>
 80165da:	6821      	ldr	r1, [r4, #0]
 80165dc:	6833      	ldr	r3, [r6, #0]
 80165de:	0608      	lsls	r0, r1, #24
 80165e0:	f853 5b04 	ldr.w	r5, [r3], #4
 80165e4:	d402      	bmi.n	80165ec <_printf_i+0xe8>
 80165e6:	0649      	lsls	r1, r1, #25
 80165e8:	bf48      	it	mi
 80165ea:	b2ad      	uxthmi	r5, r5
 80165ec:	2f6f      	cmp	r7, #111	@ 0x6f
 80165ee:	4853      	ldr	r0, [pc, #332]	@ (801673c <_printf_i+0x238>)
 80165f0:	6033      	str	r3, [r6, #0]
 80165f2:	bf14      	ite	ne
 80165f4:	230a      	movne	r3, #10
 80165f6:	2308      	moveq	r3, #8
 80165f8:	2100      	movs	r1, #0
 80165fa:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80165fe:	6866      	ldr	r6, [r4, #4]
 8016600:	60a6      	str	r6, [r4, #8]
 8016602:	2e00      	cmp	r6, #0
 8016604:	bfa2      	ittt	ge
 8016606:	6821      	ldrge	r1, [r4, #0]
 8016608:	f021 0104 	bicge.w	r1, r1, #4
 801660c:	6021      	strge	r1, [r4, #0]
 801660e:	b90d      	cbnz	r5, 8016614 <_printf_i+0x110>
 8016610:	2e00      	cmp	r6, #0
 8016612:	d04b      	beq.n	80166ac <_printf_i+0x1a8>
 8016614:	4616      	mov	r6, r2
 8016616:	fbb5 f1f3 	udiv	r1, r5, r3
 801661a:	fb03 5711 	mls	r7, r3, r1, r5
 801661e:	5dc7      	ldrb	r7, [r0, r7]
 8016620:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8016624:	462f      	mov	r7, r5
 8016626:	42bb      	cmp	r3, r7
 8016628:	460d      	mov	r5, r1
 801662a:	d9f4      	bls.n	8016616 <_printf_i+0x112>
 801662c:	2b08      	cmp	r3, #8
 801662e:	d10b      	bne.n	8016648 <_printf_i+0x144>
 8016630:	6823      	ldr	r3, [r4, #0]
 8016632:	07df      	lsls	r7, r3, #31
 8016634:	d508      	bpl.n	8016648 <_printf_i+0x144>
 8016636:	6923      	ldr	r3, [r4, #16]
 8016638:	6861      	ldr	r1, [r4, #4]
 801663a:	4299      	cmp	r1, r3
 801663c:	bfde      	ittt	le
 801663e:	2330      	movle	r3, #48	@ 0x30
 8016640:	f806 3c01 	strble.w	r3, [r6, #-1]
 8016644:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 8016648:	1b92      	subs	r2, r2, r6
 801664a:	6122      	str	r2, [r4, #16]
 801664c:	f8cd a000 	str.w	sl, [sp]
 8016650:	464b      	mov	r3, r9
 8016652:	aa03      	add	r2, sp, #12
 8016654:	4621      	mov	r1, r4
 8016656:	4640      	mov	r0, r8
 8016658:	f7ff fee6 	bl	8016428 <_printf_common>
 801665c:	3001      	adds	r0, #1
 801665e:	d14a      	bne.n	80166f6 <_printf_i+0x1f2>
 8016660:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8016664:	b004      	add	sp, #16
 8016666:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801666a:	6823      	ldr	r3, [r4, #0]
 801666c:	f043 0320 	orr.w	r3, r3, #32
 8016670:	6023      	str	r3, [r4, #0]
 8016672:	4833      	ldr	r0, [pc, #204]	@ (8016740 <_printf_i+0x23c>)
 8016674:	2778      	movs	r7, #120	@ 0x78
 8016676:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 801667a:	6823      	ldr	r3, [r4, #0]
 801667c:	6831      	ldr	r1, [r6, #0]
 801667e:	061f      	lsls	r7, r3, #24
 8016680:	f851 5b04 	ldr.w	r5, [r1], #4
 8016684:	d402      	bmi.n	801668c <_printf_i+0x188>
 8016686:	065f      	lsls	r7, r3, #25
 8016688:	bf48      	it	mi
 801668a:	b2ad      	uxthmi	r5, r5
 801668c:	6031      	str	r1, [r6, #0]
 801668e:	07d9      	lsls	r1, r3, #31
 8016690:	bf44      	itt	mi
 8016692:	f043 0320 	orrmi.w	r3, r3, #32
 8016696:	6023      	strmi	r3, [r4, #0]
 8016698:	b11d      	cbz	r5, 80166a2 <_printf_i+0x19e>
 801669a:	2310      	movs	r3, #16
 801669c:	e7ac      	b.n	80165f8 <_printf_i+0xf4>
 801669e:	4827      	ldr	r0, [pc, #156]	@ (801673c <_printf_i+0x238>)
 80166a0:	e7e9      	b.n	8016676 <_printf_i+0x172>
 80166a2:	6823      	ldr	r3, [r4, #0]
 80166a4:	f023 0320 	bic.w	r3, r3, #32
 80166a8:	6023      	str	r3, [r4, #0]
 80166aa:	e7f6      	b.n	801669a <_printf_i+0x196>
 80166ac:	4616      	mov	r6, r2
 80166ae:	e7bd      	b.n	801662c <_printf_i+0x128>
 80166b0:	6833      	ldr	r3, [r6, #0]
 80166b2:	6825      	ldr	r5, [r4, #0]
 80166b4:	6961      	ldr	r1, [r4, #20]
 80166b6:	1d18      	adds	r0, r3, #4
 80166b8:	6030      	str	r0, [r6, #0]
 80166ba:	062e      	lsls	r6, r5, #24
 80166bc:	681b      	ldr	r3, [r3, #0]
 80166be:	d501      	bpl.n	80166c4 <_printf_i+0x1c0>
 80166c0:	6019      	str	r1, [r3, #0]
 80166c2:	e002      	b.n	80166ca <_printf_i+0x1c6>
 80166c4:	0668      	lsls	r0, r5, #25
 80166c6:	d5fb      	bpl.n	80166c0 <_printf_i+0x1bc>
 80166c8:	8019      	strh	r1, [r3, #0]
 80166ca:	2300      	movs	r3, #0
 80166cc:	6123      	str	r3, [r4, #16]
 80166ce:	4616      	mov	r6, r2
 80166d0:	e7bc      	b.n	801664c <_printf_i+0x148>
 80166d2:	6833      	ldr	r3, [r6, #0]
 80166d4:	1d1a      	adds	r2, r3, #4
 80166d6:	6032      	str	r2, [r6, #0]
 80166d8:	681e      	ldr	r6, [r3, #0]
 80166da:	6862      	ldr	r2, [r4, #4]
 80166dc:	2100      	movs	r1, #0
 80166de:	4630      	mov	r0, r6
 80166e0:	f7e9 fd96 	bl	8000210 <memchr>
 80166e4:	b108      	cbz	r0, 80166ea <_printf_i+0x1e6>
 80166e6:	1b80      	subs	r0, r0, r6
 80166e8:	6060      	str	r0, [r4, #4]
 80166ea:	6863      	ldr	r3, [r4, #4]
 80166ec:	6123      	str	r3, [r4, #16]
 80166ee:	2300      	movs	r3, #0
 80166f0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80166f4:	e7aa      	b.n	801664c <_printf_i+0x148>
 80166f6:	6923      	ldr	r3, [r4, #16]
 80166f8:	4632      	mov	r2, r6
 80166fa:	4649      	mov	r1, r9
 80166fc:	4640      	mov	r0, r8
 80166fe:	47d0      	blx	sl
 8016700:	3001      	adds	r0, #1
 8016702:	d0ad      	beq.n	8016660 <_printf_i+0x15c>
 8016704:	6823      	ldr	r3, [r4, #0]
 8016706:	079b      	lsls	r3, r3, #30
 8016708:	d413      	bmi.n	8016732 <_printf_i+0x22e>
 801670a:	68e0      	ldr	r0, [r4, #12]
 801670c:	9b03      	ldr	r3, [sp, #12]
 801670e:	4298      	cmp	r0, r3
 8016710:	bfb8      	it	lt
 8016712:	4618      	movlt	r0, r3
 8016714:	e7a6      	b.n	8016664 <_printf_i+0x160>
 8016716:	2301      	movs	r3, #1
 8016718:	4632      	mov	r2, r6
 801671a:	4649      	mov	r1, r9
 801671c:	4640      	mov	r0, r8
 801671e:	47d0      	blx	sl
 8016720:	3001      	adds	r0, #1
 8016722:	d09d      	beq.n	8016660 <_printf_i+0x15c>
 8016724:	3501      	adds	r5, #1
 8016726:	68e3      	ldr	r3, [r4, #12]
 8016728:	9903      	ldr	r1, [sp, #12]
 801672a:	1a5b      	subs	r3, r3, r1
 801672c:	42ab      	cmp	r3, r5
 801672e:	dcf2      	bgt.n	8016716 <_printf_i+0x212>
 8016730:	e7eb      	b.n	801670a <_printf_i+0x206>
 8016732:	2500      	movs	r5, #0
 8016734:	f104 0619 	add.w	r6, r4, #25
 8016738:	e7f5      	b.n	8016726 <_printf_i+0x222>
 801673a:	bf00      	nop
 801673c:	08017a21 	.word	0x08017a21
 8016740:	08017a32 	.word	0x08017a32

08016744 <__sflush_r>:
 8016744:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8016748:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801674c:	0716      	lsls	r6, r2, #28
 801674e:	4605      	mov	r5, r0
 8016750:	460c      	mov	r4, r1
 8016752:	d454      	bmi.n	80167fe <__sflush_r+0xba>
 8016754:	684b      	ldr	r3, [r1, #4]
 8016756:	2b00      	cmp	r3, #0
 8016758:	dc02      	bgt.n	8016760 <__sflush_r+0x1c>
 801675a:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 801675c:	2b00      	cmp	r3, #0
 801675e:	dd48      	ble.n	80167f2 <__sflush_r+0xae>
 8016760:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8016762:	2e00      	cmp	r6, #0
 8016764:	d045      	beq.n	80167f2 <__sflush_r+0xae>
 8016766:	2300      	movs	r3, #0
 8016768:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 801676c:	682f      	ldr	r7, [r5, #0]
 801676e:	6a21      	ldr	r1, [r4, #32]
 8016770:	602b      	str	r3, [r5, #0]
 8016772:	d030      	beq.n	80167d6 <__sflush_r+0x92>
 8016774:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8016776:	89a3      	ldrh	r3, [r4, #12]
 8016778:	0759      	lsls	r1, r3, #29
 801677a:	d505      	bpl.n	8016788 <__sflush_r+0x44>
 801677c:	6863      	ldr	r3, [r4, #4]
 801677e:	1ad2      	subs	r2, r2, r3
 8016780:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8016782:	b10b      	cbz	r3, 8016788 <__sflush_r+0x44>
 8016784:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8016786:	1ad2      	subs	r2, r2, r3
 8016788:	2300      	movs	r3, #0
 801678a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 801678c:	6a21      	ldr	r1, [r4, #32]
 801678e:	4628      	mov	r0, r5
 8016790:	47b0      	blx	r6
 8016792:	1c43      	adds	r3, r0, #1
 8016794:	89a3      	ldrh	r3, [r4, #12]
 8016796:	d106      	bne.n	80167a6 <__sflush_r+0x62>
 8016798:	6829      	ldr	r1, [r5, #0]
 801679a:	291d      	cmp	r1, #29
 801679c:	d82b      	bhi.n	80167f6 <__sflush_r+0xb2>
 801679e:	4a2a      	ldr	r2, [pc, #168]	@ (8016848 <__sflush_r+0x104>)
 80167a0:	410a      	asrs	r2, r1
 80167a2:	07d6      	lsls	r6, r2, #31
 80167a4:	d427      	bmi.n	80167f6 <__sflush_r+0xb2>
 80167a6:	2200      	movs	r2, #0
 80167a8:	6062      	str	r2, [r4, #4]
 80167aa:	04d9      	lsls	r1, r3, #19
 80167ac:	6922      	ldr	r2, [r4, #16]
 80167ae:	6022      	str	r2, [r4, #0]
 80167b0:	d504      	bpl.n	80167bc <__sflush_r+0x78>
 80167b2:	1c42      	adds	r2, r0, #1
 80167b4:	d101      	bne.n	80167ba <__sflush_r+0x76>
 80167b6:	682b      	ldr	r3, [r5, #0]
 80167b8:	b903      	cbnz	r3, 80167bc <__sflush_r+0x78>
 80167ba:	6560      	str	r0, [r4, #84]	@ 0x54
 80167bc:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80167be:	602f      	str	r7, [r5, #0]
 80167c0:	b1b9      	cbz	r1, 80167f2 <__sflush_r+0xae>
 80167c2:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80167c6:	4299      	cmp	r1, r3
 80167c8:	d002      	beq.n	80167d0 <__sflush_r+0x8c>
 80167ca:	4628      	mov	r0, r5
 80167cc:	f7ff fb40 	bl	8015e50 <_free_r>
 80167d0:	2300      	movs	r3, #0
 80167d2:	6363      	str	r3, [r4, #52]	@ 0x34
 80167d4:	e00d      	b.n	80167f2 <__sflush_r+0xae>
 80167d6:	2301      	movs	r3, #1
 80167d8:	4628      	mov	r0, r5
 80167da:	47b0      	blx	r6
 80167dc:	4602      	mov	r2, r0
 80167de:	1c50      	adds	r0, r2, #1
 80167e0:	d1c9      	bne.n	8016776 <__sflush_r+0x32>
 80167e2:	682b      	ldr	r3, [r5, #0]
 80167e4:	2b00      	cmp	r3, #0
 80167e6:	d0c6      	beq.n	8016776 <__sflush_r+0x32>
 80167e8:	2b1d      	cmp	r3, #29
 80167ea:	d001      	beq.n	80167f0 <__sflush_r+0xac>
 80167ec:	2b16      	cmp	r3, #22
 80167ee:	d11e      	bne.n	801682e <__sflush_r+0xea>
 80167f0:	602f      	str	r7, [r5, #0]
 80167f2:	2000      	movs	r0, #0
 80167f4:	e022      	b.n	801683c <__sflush_r+0xf8>
 80167f6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80167fa:	b21b      	sxth	r3, r3
 80167fc:	e01b      	b.n	8016836 <__sflush_r+0xf2>
 80167fe:	690f      	ldr	r7, [r1, #16]
 8016800:	2f00      	cmp	r7, #0
 8016802:	d0f6      	beq.n	80167f2 <__sflush_r+0xae>
 8016804:	0793      	lsls	r3, r2, #30
 8016806:	680e      	ldr	r6, [r1, #0]
 8016808:	bf08      	it	eq
 801680a:	694b      	ldreq	r3, [r1, #20]
 801680c:	600f      	str	r7, [r1, #0]
 801680e:	bf18      	it	ne
 8016810:	2300      	movne	r3, #0
 8016812:	eba6 0807 	sub.w	r8, r6, r7
 8016816:	608b      	str	r3, [r1, #8]
 8016818:	f1b8 0f00 	cmp.w	r8, #0
 801681c:	dde9      	ble.n	80167f2 <__sflush_r+0xae>
 801681e:	6a21      	ldr	r1, [r4, #32]
 8016820:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8016822:	4643      	mov	r3, r8
 8016824:	463a      	mov	r2, r7
 8016826:	4628      	mov	r0, r5
 8016828:	47b0      	blx	r6
 801682a:	2800      	cmp	r0, #0
 801682c:	dc08      	bgt.n	8016840 <__sflush_r+0xfc>
 801682e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8016832:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8016836:	81a3      	strh	r3, [r4, #12]
 8016838:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801683c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016840:	4407      	add	r7, r0
 8016842:	eba8 0800 	sub.w	r8, r8, r0
 8016846:	e7e7      	b.n	8016818 <__sflush_r+0xd4>
 8016848:	dfbffffe 	.word	0xdfbffffe

0801684c <_fflush_r>:
 801684c:	b538      	push	{r3, r4, r5, lr}
 801684e:	690b      	ldr	r3, [r1, #16]
 8016850:	4605      	mov	r5, r0
 8016852:	460c      	mov	r4, r1
 8016854:	b913      	cbnz	r3, 801685c <_fflush_r+0x10>
 8016856:	2500      	movs	r5, #0
 8016858:	4628      	mov	r0, r5
 801685a:	bd38      	pop	{r3, r4, r5, pc}
 801685c:	b118      	cbz	r0, 8016866 <_fflush_r+0x1a>
 801685e:	6a03      	ldr	r3, [r0, #32]
 8016860:	b90b      	cbnz	r3, 8016866 <_fflush_r+0x1a>
 8016862:	f7ff f8d1 	bl	8015a08 <__sinit>
 8016866:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801686a:	2b00      	cmp	r3, #0
 801686c:	d0f3      	beq.n	8016856 <_fflush_r+0xa>
 801686e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8016870:	07d0      	lsls	r0, r2, #31
 8016872:	d404      	bmi.n	801687e <_fflush_r+0x32>
 8016874:	0599      	lsls	r1, r3, #22
 8016876:	d402      	bmi.n	801687e <_fflush_r+0x32>
 8016878:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801687a:	f7ff faa6 	bl	8015dca <__retarget_lock_acquire_recursive>
 801687e:	4628      	mov	r0, r5
 8016880:	4621      	mov	r1, r4
 8016882:	f7ff ff5f 	bl	8016744 <__sflush_r>
 8016886:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8016888:	07da      	lsls	r2, r3, #31
 801688a:	4605      	mov	r5, r0
 801688c:	d4e4      	bmi.n	8016858 <_fflush_r+0xc>
 801688e:	89a3      	ldrh	r3, [r4, #12]
 8016890:	059b      	lsls	r3, r3, #22
 8016892:	d4e1      	bmi.n	8016858 <_fflush_r+0xc>
 8016894:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8016896:	f7ff fa99 	bl	8015dcc <__retarget_lock_release_recursive>
 801689a:	e7dd      	b.n	8016858 <_fflush_r+0xc>

0801689c <fiprintf>:
 801689c:	b40e      	push	{r1, r2, r3}
 801689e:	b503      	push	{r0, r1, lr}
 80168a0:	4601      	mov	r1, r0
 80168a2:	ab03      	add	r3, sp, #12
 80168a4:	4805      	ldr	r0, [pc, #20]	@ (80168bc <fiprintf+0x20>)
 80168a6:	f853 2b04 	ldr.w	r2, [r3], #4
 80168aa:	6800      	ldr	r0, [r0, #0]
 80168ac:	9301      	str	r3, [sp, #4]
 80168ae:	f7ff fca3 	bl	80161f8 <_vfiprintf_r>
 80168b2:	b002      	add	sp, #8
 80168b4:	f85d eb04 	ldr.w	lr, [sp], #4
 80168b8:	b003      	add	sp, #12
 80168ba:	4770      	bx	lr
 80168bc:	20000148 	.word	0x20000148

080168c0 <__swbuf_r>:
 80168c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80168c2:	460e      	mov	r6, r1
 80168c4:	4614      	mov	r4, r2
 80168c6:	4605      	mov	r5, r0
 80168c8:	b118      	cbz	r0, 80168d2 <__swbuf_r+0x12>
 80168ca:	6a03      	ldr	r3, [r0, #32]
 80168cc:	b90b      	cbnz	r3, 80168d2 <__swbuf_r+0x12>
 80168ce:	f7ff f89b 	bl	8015a08 <__sinit>
 80168d2:	69a3      	ldr	r3, [r4, #24]
 80168d4:	60a3      	str	r3, [r4, #8]
 80168d6:	89a3      	ldrh	r3, [r4, #12]
 80168d8:	071a      	lsls	r2, r3, #28
 80168da:	d501      	bpl.n	80168e0 <__swbuf_r+0x20>
 80168dc:	6923      	ldr	r3, [r4, #16]
 80168de:	b943      	cbnz	r3, 80168f2 <__swbuf_r+0x32>
 80168e0:	4621      	mov	r1, r4
 80168e2:	4628      	mov	r0, r5
 80168e4:	f000 f82a 	bl	801693c <__swsetup_r>
 80168e8:	b118      	cbz	r0, 80168f2 <__swbuf_r+0x32>
 80168ea:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 80168ee:	4638      	mov	r0, r7
 80168f0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80168f2:	6823      	ldr	r3, [r4, #0]
 80168f4:	6922      	ldr	r2, [r4, #16]
 80168f6:	1a98      	subs	r0, r3, r2
 80168f8:	6963      	ldr	r3, [r4, #20]
 80168fa:	b2f6      	uxtb	r6, r6
 80168fc:	4283      	cmp	r3, r0
 80168fe:	4637      	mov	r7, r6
 8016900:	dc05      	bgt.n	801690e <__swbuf_r+0x4e>
 8016902:	4621      	mov	r1, r4
 8016904:	4628      	mov	r0, r5
 8016906:	f7ff ffa1 	bl	801684c <_fflush_r>
 801690a:	2800      	cmp	r0, #0
 801690c:	d1ed      	bne.n	80168ea <__swbuf_r+0x2a>
 801690e:	68a3      	ldr	r3, [r4, #8]
 8016910:	3b01      	subs	r3, #1
 8016912:	60a3      	str	r3, [r4, #8]
 8016914:	6823      	ldr	r3, [r4, #0]
 8016916:	1c5a      	adds	r2, r3, #1
 8016918:	6022      	str	r2, [r4, #0]
 801691a:	701e      	strb	r6, [r3, #0]
 801691c:	6962      	ldr	r2, [r4, #20]
 801691e:	1c43      	adds	r3, r0, #1
 8016920:	429a      	cmp	r2, r3
 8016922:	d004      	beq.n	801692e <__swbuf_r+0x6e>
 8016924:	89a3      	ldrh	r3, [r4, #12]
 8016926:	07db      	lsls	r3, r3, #31
 8016928:	d5e1      	bpl.n	80168ee <__swbuf_r+0x2e>
 801692a:	2e0a      	cmp	r6, #10
 801692c:	d1df      	bne.n	80168ee <__swbuf_r+0x2e>
 801692e:	4621      	mov	r1, r4
 8016930:	4628      	mov	r0, r5
 8016932:	f7ff ff8b 	bl	801684c <_fflush_r>
 8016936:	2800      	cmp	r0, #0
 8016938:	d0d9      	beq.n	80168ee <__swbuf_r+0x2e>
 801693a:	e7d6      	b.n	80168ea <__swbuf_r+0x2a>

0801693c <__swsetup_r>:
 801693c:	b538      	push	{r3, r4, r5, lr}
 801693e:	4b29      	ldr	r3, [pc, #164]	@ (80169e4 <__swsetup_r+0xa8>)
 8016940:	4605      	mov	r5, r0
 8016942:	6818      	ldr	r0, [r3, #0]
 8016944:	460c      	mov	r4, r1
 8016946:	b118      	cbz	r0, 8016950 <__swsetup_r+0x14>
 8016948:	6a03      	ldr	r3, [r0, #32]
 801694a:	b90b      	cbnz	r3, 8016950 <__swsetup_r+0x14>
 801694c:	f7ff f85c 	bl	8015a08 <__sinit>
 8016950:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8016954:	0719      	lsls	r1, r3, #28
 8016956:	d422      	bmi.n	801699e <__swsetup_r+0x62>
 8016958:	06da      	lsls	r2, r3, #27
 801695a:	d407      	bmi.n	801696c <__swsetup_r+0x30>
 801695c:	2209      	movs	r2, #9
 801695e:	602a      	str	r2, [r5, #0]
 8016960:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8016964:	81a3      	strh	r3, [r4, #12]
 8016966:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801696a:	e033      	b.n	80169d4 <__swsetup_r+0x98>
 801696c:	0758      	lsls	r0, r3, #29
 801696e:	d512      	bpl.n	8016996 <__swsetup_r+0x5a>
 8016970:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8016972:	b141      	cbz	r1, 8016986 <__swsetup_r+0x4a>
 8016974:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8016978:	4299      	cmp	r1, r3
 801697a:	d002      	beq.n	8016982 <__swsetup_r+0x46>
 801697c:	4628      	mov	r0, r5
 801697e:	f7ff fa67 	bl	8015e50 <_free_r>
 8016982:	2300      	movs	r3, #0
 8016984:	6363      	str	r3, [r4, #52]	@ 0x34
 8016986:	89a3      	ldrh	r3, [r4, #12]
 8016988:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 801698c:	81a3      	strh	r3, [r4, #12]
 801698e:	2300      	movs	r3, #0
 8016990:	6063      	str	r3, [r4, #4]
 8016992:	6923      	ldr	r3, [r4, #16]
 8016994:	6023      	str	r3, [r4, #0]
 8016996:	89a3      	ldrh	r3, [r4, #12]
 8016998:	f043 0308 	orr.w	r3, r3, #8
 801699c:	81a3      	strh	r3, [r4, #12]
 801699e:	6923      	ldr	r3, [r4, #16]
 80169a0:	b94b      	cbnz	r3, 80169b6 <__swsetup_r+0x7a>
 80169a2:	89a3      	ldrh	r3, [r4, #12]
 80169a4:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 80169a8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80169ac:	d003      	beq.n	80169b6 <__swsetup_r+0x7a>
 80169ae:	4621      	mov	r1, r4
 80169b0:	4628      	mov	r0, r5
 80169b2:	f000 f846 	bl	8016a42 <__smakebuf_r>
 80169b6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80169ba:	f013 0201 	ands.w	r2, r3, #1
 80169be:	d00a      	beq.n	80169d6 <__swsetup_r+0x9a>
 80169c0:	2200      	movs	r2, #0
 80169c2:	60a2      	str	r2, [r4, #8]
 80169c4:	6962      	ldr	r2, [r4, #20]
 80169c6:	4252      	negs	r2, r2
 80169c8:	61a2      	str	r2, [r4, #24]
 80169ca:	6922      	ldr	r2, [r4, #16]
 80169cc:	b942      	cbnz	r2, 80169e0 <__swsetup_r+0xa4>
 80169ce:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 80169d2:	d1c5      	bne.n	8016960 <__swsetup_r+0x24>
 80169d4:	bd38      	pop	{r3, r4, r5, pc}
 80169d6:	0799      	lsls	r1, r3, #30
 80169d8:	bf58      	it	pl
 80169da:	6962      	ldrpl	r2, [r4, #20]
 80169dc:	60a2      	str	r2, [r4, #8]
 80169de:	e7f4      	b.n	80169ca <__swsetup_r+0x8e>
 80169e0:	2000      	movs	r0, #0
 80169e2:	e7f7      	b.n	80169d4 <__swsetup_r+0x98>
 80169e4:	20000148 	.word	0x20000148

080169e8 <abort>:
 80169e8:	b508      	push	{r3, lr}
 80169ea:	2006      	movs	r0, #6
 80169ec:	f000 f88e 	bl	8016b0c <raise>
 80169f0:	2001      	movs	r0, #1
 80169f2:	f7eb ff89 	bl	8002908 <_exit>

080169f6 <__swhatbuf_r>:
 80169f6:	b570      	push	{r4, r5, r6, lr}
 80169f8:	460c      	mov	r4, r1
 80169fa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80169fe:	2900      	cmp	r1, #0
 8016a00:	b096      	sub	sp, #88	@ 0x58
 8016a02:	4615      	mov	r5, r2
 8016a04:	461e      	mov	r6, r3
 8016a06:	da0d      	bge.n	8016a24 <__swhatbuf_r+0x2e>
 8016a08:	89a3      	ldrh	r3, [r4, #12]
 8016a0a:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8016a0e:	f04f 0100 	mov.w	r1, #0
 8016a12:	bf14      	ite	ne
 8016a14:	2340      	movne	r3, #64	@ 0x40
 8016a16:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8016a1a:	2000      	movs	r0, #0
 8016a1c:	6031      	str	r1, [r6, #0]
 8016a1e:	602b      	str	r3, [r5, #0]
 8016a20:	b016      	add	sp, #88	@ 0x58
 8016a22:	bd70      	pop	{r4, r5, r6, pc}
 8016a24:	466a      	mov	r2, sp
 8016a26:	f000 f879 	bl	8016b1c <_fstat_r>
 8016a2a:	2800      	cmp	r0, #0
 8016a2c:	dbec      	blt.n	8016a08 <__swhatbuf_r+0x12>
 8016a2e:	9901      	ldr	r1, [sp, #4]
 8016a30:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8016a34:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8016a38:	4259      	negs	r1, r3
 8016a3a:	4159      	adcs	r1, r3
 8016a3c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8016a40:	e7eb      	b.n	8016a1a <__swhatbuf_r+0x24>

08016a42 <__smakebuf_r>:
 8016a42:	898b      	ldrh	r3, [r1, #12]
 8016a44:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8016a46:	079d      	lsls	r5, r3, #30
 8016a48:	4606      	mov	r6, r0
 8016a4a:	460c      	mov	r4, r1
 8016a4c:	d507      	bpl.n	8016a5e <__smakebuf_r+0x1c>
 8016a4e:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8016a52:	6023      	str	r3, [r4, #0]
 8016a54:	6123      	str	r3, [r4, #16]
 8016a56:	2301      	movs	r3, #1
 8016a58:	6163      	str	r3, [r4, #20]
 8016a5a:	b003      	add	sp, #12
 8016a5c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8016a5e:	ab01      	add	r3, sp, #4
 8016a60:	466a      	mov	r2, sp
 8016a62:	f7ff ffc8 	bl	80169f6 <__swhatbuf_r>
 8016a66:	9f00      	ldr	r7, [sp, #0]
 8016a68:	4605      	mov	r5, r0
 8016a6a:	4639      	mov	r1, r7
 8016a6c:	4630      	mov	r0, r6
 8016a6e:	f7fe fcf7 	bl	8015460 <_malloc_r>
 8016a72:	b948      	cbnz	r0, 8016a88 <__smakebuf_r+0x46>
 8016a74:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8016a78:	059a      	lsls	r2, r3, #22
 8016a7a:	d4ee      	bmi.n	8016a5a <__smakebuf_r+0x18>
 8016a7c:	f023 0303 	bic.w	r3, r3, #3
 8016a80:	f043 0302 	orr.w	r3, r3, #2
 8016a84:	81a3      	strh	r3, [r4, #12]
 8016a86:	e7e2      	b.n	8016a4e <__smakebuf_r+0xc>
 8016a88:	89a3      	ldrh	r3, [r4, #12]
 8016a8a:	6020      	str	r0, [r4, #0]
 8016a8c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8016a90:	81a3      	strh	r3, [r4, #12]
 8016a92:	9b01      	ldr	r3, [sp, #4]
 8016a94:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8016a98:	b15b      	cbz	r3, 8016ab2 <__smakebuf_r+0x70>
 8016a9a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8016a9e:	4630      	mov	r0, r6
 8016aa0:	f000 f84e 	bl	8016b40 <_isatty_r>
 8016aa4:	b128      	cbz	r0, 8016ab2 <__smakebuf_r+0x70>
 8016aa6:	89a3      	ldrh	r3, [r4, #12]
 8016aa8:	f023 0303 	bic.w	r3, r3, #3
 8016aac:	f043 0301 	orr.w	r3, r3, #1
 8016ab0:	81a3      	strh	r3, [r4, #12]
 8016ab2:	89a3      	ldrh	r3, [r4, #12]
 8016ab4:	431d      	orrs	r5, r3
 8016ab6:	81a5      	strh	r5, [r4, #12]
 8016ab8:	e7cf      	b.n	8016a5a <__smakebuf_r+0x18>

08016aba <_raise_r>:
 8016aba:	291f      	cmp	r1, #31
 8016abc:	b538      	push	{r3, r4, r5, lr}
 8016abe:	4605      	mov	r5, r0
 8016ac0:	460c      	mov	r4, r1
 8016ac2:	d904      	bls.n	8016ace <_raise_r+0x14>
 8016ac4:	2316      	movs	r3, #22
 8016ac6:	6003      	str	r3, [r0, #0]
 8016ac8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8016acc:	bd38      	pop	{r3, r4, r5, pc}
 8016ace:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8016ad0:	b112      	cbz	r2, 8016ad8 <_raise_r+0x1e>
 8016ad2:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8016ad6:	b94b      	cbnz	r3, 8016aec <_raise_r+0x32>
 8016ad8:	4628      	mov	r0, r5
 8016ada:	f000 f853 	bl	8016b84 <_getpid_r>
 8016ade:	4622      	mov	r2, r4
 8016ae0:	4601      	mov	r1, r0
 8016ae2:	4628      	mov	r0, r5
 8016ae4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8016ae8:	f000 b83a 	b.w	8016b60 <_kill_r>
 8016aec:	2b01      	cmp	r3, #1
 8016aee:	d00a      	beq.n	8016b06 <_raise_r+0x4c>
 8016af0:	1c59      	adds	r1, r3, #1
 8016af2:	d103      	bne.n	8016afc <_raise_r+0x42>
 8016af4:	2316      	movs	r3, #22
 8016af6:	6003      	str	r3, [r0, #0]
 8016af8:	2001      	movs	r0, #1
 8016afa:	e7e7      	b.n	8016acc <_raise_r+0x12>
 8016afc:	2100      	movs	r1, #0
 8016afe:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8016b02:	4620      	mov	r0, r4
 8016b04:	4798      	blx	r3
 8016b06:	2000      	movs	r0, #0
 8016b08:	e7e0      	b.n	8016acc <_raise_r+0x12>
	...

08016b0c <raise>:
 8016b0c:	4b02      	ldr	r3, [pc, #8]	@ (8016b18 <raise+0xc>)
 8016b0e:	4601      	mov	r1, r0
 8016b10:	6818      	ldr	r0, [r3, #0]
 8016b12:	f7ff bfd2 	b.w	8016aba <_raise_r>
 8016b16:	bf00      	nop
 8016b18:	20000148 	.word	0x20000148

08016b1c <_fstat_r>:
 8016b1c:	b538      	push	{r3, r4, r5, lr}
 8016b1e:	4d07      	ldr	r5, [pc, #28]	@ (8016b3c <_fstat_r+0x20>)
 8016b20:	2300      	movs	r3, #0
 8016b22:	4604      	mov	r4, r0
 8016b24:	4608      	mov	r0, r1
 8016b26:	4611      	mov	r1, r2
 8016b28:	602b      	str	r3, [r5, #0]
 8016b2a:	f7eb ff3d 	bl	80029a8 <_fstat>
 8016b2e:	1c43      	adds	r3, r0, #1
 8016b30:	d102      	bne.n	8016b38 <_fstat_r+0x1c>
 8016b32:	682b      	ldr	r3, [r5, #0]
 8016b34:	b103      	cbz	r3, 8016b38 <_fstat_r+0x1c>
 8016b36:	6023      	str	r3, [r4, #0]
 8016b38:	bd38      	pop	{r3, r4, r5, pc}
 8016b3a:	bf00      	nop
 8016b3c:	2000de28 	.word	0x2000de28

08016b40 <_isatty_r>:
 8016b40:	b538      	push	{r3, r4, r5, lr}
 8016b42:	4d06      	ldr	r5, [pc, #24]	@ (8016b5c <_isatty_r+0x1c>)
 8016b44:	2300      	movs	r3, #0
 8016b46:	4604      	mov	r4, r0
 8016b48:	4608      	mov	r0, r1
 8016b4a:	602b      	str	r3, [r5, #0]
 8016b4c:	f7eb ff3c 	bl	80029c8 <_isatty>
 8016b50:	1c43      	adds	r3, r0, #1
 8016b52:	d102      	bne.n	8016b5a <_isatty_r+0x1a>
 8016b54:	682b      	ldr	r3, [r5, #0]
 8016b56:	b103      	cbz	r3, 8016b5a <_isatty_r+0x1a>
 8016b58:	6023      	str	r3, [r4, #0]
 8016b5a:	bd38      	pop	{r3, r4, r5, pc}
 8016b5c:	2000de28 	.word	0x2000de28

08016b60 <_kill_r>:
 8016b60:	b538      	push	{r3, r4, r5, lr}
 8016b62:	4d07      	ldr	r5, [pc, #28]	@ (8016b80 <_kill_r+0x20>)
 8016b64:	2300      	movs	r3, #0
 8016b66:	4604      	mov	r4, r0
 8016b68:	4608      	mov	r0, r1
 8016b6a:	4611      	mov	r1, r2
 8016b6c:	602b      	str	r3, [r5, #0]
 8016b6e:	f7eb febb 	bl	80028e8 <_kill>
 8016b72:	1c43      	adds	r3, r0, #1
 8016b74:	d102      	bne.n	8016b7c <_kill_r+0x1c>
 8016b76:	682b      	ldr	r3, [r5, #0]
 8016b78:	b103      	cbz	r3, 8016b7c <_kill_r+0x1c>
 8016b7a:	6023      	str	r3, [r4, #0]
 8016b7c:	bd38      	pop	{r3, r4, r5, pc}
 8016b7e:	bf00      	nop
 8016b80:	2000de28 	.word	0x2000de28

08016b84 <_getpid_r>:
 8016b84:	f7eb bea8 	b.w	80028d8 <_getpid>

08016b88 <_init>:
 8016b88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8016b8a:	bf00      	nop
 8016b8c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8016b8e:	bc08      	pop	{r3}
 8016b90:	469e      	mov	lr, r3
 8016b92:	4770      	bx	lr

08016b94 <_fini>:
 8016b94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8016b96:	bf00      	nop
 8016b98:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8016b9a:	bc08      	pop	{r3}
 8016b9c:	469e      	mov	lr, r3
 8016b9e:	4770      	bx	lr
