
Microros_F411RE.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00016374  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000d7c  08016518  08016518  00017518  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08017294  08017294  00019110  2**0
                  CONTENTS
  4 .ARM          00000008  08017294  08017294  00018294  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801729c  0801729c  00019110  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  0801729c  0801729c  0001829c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080172a4  080172a4  000182a4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000110  20000000  080172a8  00019000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000dc38  20000110  080173b8  00019110  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  2000dd48  080173b8  00019d48  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00019110  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001b77f  00000000  00000000  00019140  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003fe9  00000000  00000000  000348bf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001690  00000000  00000000  000388a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000116d  00000000  00000000  00039f38  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001c081  00000000  00000000  0003b0a5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001a98e  00000000  00000000  00057126  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a4af7  00000000  00000000  00071ab4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000076  00000000  00000000  001165ab  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006dd0  00000000  00000000  00116624  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000079  00000000  00000000  0011d3f4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000110 	.word	0x20000110
 80001bc:	00000000 	.word	0x00000000
 80001c0:	080164fc 	.word	0x080164fc

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000114 	.word	0x20000114
 80001dc:	080164fc 	.word	0x080164fc

080001e0 <strcmp>:
 80001e0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001e4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001e8:	2a01      	cmp	r2, #1
 80001ea:	bf28      	it	cs
 80001ec:	429a      	cmpcs	r2, r3
 80001ee:	d0f7      	beq.n	80001e0 <strcmp>
 80001f0:	1ad0      	subs	r0, r2, r3
 80001f2:	4770      	bx	lr

080001f4 <strlen>:
 80001f4:	4603      	mov	r3, r0
 80001f6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001fa:	2a00      	cmp	r2, #0
 80001fc:	d1fb      	bne.n	80001f6 <strlen+0x2>
 80001fe:	1a18      	subs	r0, r3, r0
 8000200:	3801      	subs	r0, #1
 8000202:	4770      	bx	lr
	...

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_drsub>:
 80002b0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002b4:	e002      	b.n	80002bc <__adddf3>
 80002b6:	bf00      	nop

080002b8 <__aeabi_dsub>:
 80002b8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002bc <__adddf3>:
 80002bc:	b530      	push	{r4, r5, lr}
 80002be:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002c2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002c6:	ea94 0f05 	teq	r4, r5
 80002ca:	bf08      	it	eq
 80002cc:	ea90 0f02 	teqeq	r0, r2
 80002d0:	bf1f      	itttt	ne
 80002d2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002d6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002da:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002de:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002e2:	f000 80e2 	beq.w	80004aa <__adddf3+0x1ee>
 80002e6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ea:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ee:	bfb8      	it	lt
 80002f0:	426d      	neglt	r5, r5
 80002f2:	dd0c      	ble.n	800030e <__adddf3+0x52>
 80002f4:	442c      	add	r4, r5
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	ea82 0000 	eor.w	r0, r2, r0
 8000302:	ea83 0101 	eor.w	r1, r3, r1
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	2d36      	cmp	r5, #54	@ 0x36
 8000310:	bf88      	it	hi
 8000312:	bd30      	pophi	{r4, r5, pc}
 8000314:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000318:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800031c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000320:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000324:	d002      	beq.n	800032c <__adddf3+0x70>
 8000326:	4240      	negs	r0, r0
 8000328:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800032c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000330:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000334:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000338:	d002      	beq.n	8000340 <__adddf3+0x84>
 800033a:	4252      	negs	r2, r2
 800033c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000340:	ea94 0f05 	teq	r4, r5
 8000344:	f000 80a7 	beq.w	8000496 <__adddf3+0x1da>
 8000348:	f1a4 0401 	sub.w	r4, r4, #1
 800034c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000350:	db0d      	blt.n	800036e <__adddf3+0xb2>
 8000352:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000356:	fa22 f205 	lsr.w	r2, r2, r5
 800035a:	1880      	adds	r0, r0, r2
 800035c:	f141 0100 	adc.w	r1, r1, #0
 8000360:	fa03 f20e 	lsl.w	r2, r3, lr
 8000364:	1880      	adds	r0, r0, r2
 8000366:	fa43 f305 	asr.w	r3, r3, r5
 800036a:	4159      	adcs	r1, r3
 800036c:	e00e      	b.n	800038c <__adddf3+0xd0>
 800036e:	f1a5 0520 	sub.w	r5, r5, #32
 8000372:	f10e 0e20 	add.w	lr, lr, #32
 8000376:	2a01      	cmp	r2, #1
 8000378:	fa03 fc0e 	lsl.w	ip, r3, lr
 800037c:	bf28      	it	cs
 800037e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000382:	fa43 f305 	asr.w	r3, r3, r5
 8000386:	18c0      	adds	r0, r0, r3
 8000388:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800038c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000390:	d507      	bpl.n	80003a2 <__adddf3+0xe6>
 8000392:	f04f 0e00 	mov.w	lr, #0
 8000396:	f1dc 0c00 	rsbs	ip, ip, #0
 800039a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800039e:	eb6e 0101 	sbc.w	r1, lr, r1
 80003a2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003a6:	d31b      	bcc.n	80003e0 <__adddf3+0x124>
 80003a8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003ac:	d30c      	bcc.n	80003c8 <__adddf3+0x10c>
 80003ae:	0849      	lsrs	r1, r1, #1
 80003b0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003b4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003b8:	f104 0401 	add.w	r4, r4, #1
 80003bc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003c0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003c4:	f080 809a 	bcs.w	80004fc <__adddf3+0x240>
 80003c8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003cc:	bf08      	it	eq
 80003ce:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003d2:	f150 0000 	adcs.w	r0, r0, #0
 80003d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003da:	ea41 0105 	orr.w	r1, r1, r5
 80003de:	bd30      	pop	{r4, r5, pc}
 80003e0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003e4:	4140      	adcs	r0, r0
 80003e6:	eb41 0101 	adc.w	r1, r1, r1
 80003ea:	3c01      	subs	r4, #1
 80003ec:	bf28      	it	cs
 80003ee:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003f2:	d2e9      	bcs.n	80003c8 <__adddf3+0x10c>
 80003f4:	f091 0f00 	teq	r1, #0
 80003f8:	bf04      	itt	eq
 80003fa:	4601      	moveq	r1, r0
 80003fc:	2000      	moveq	r0, #0
 80003fe:	fab1 f381 	clz	r3, r1
 8000402:	bf08      	it	eq
 8000404:	3320      	addeq	r3, #32
 8000406:	f1a3 030b 	sub.w	r3, r3, #11
 800040a:	f1b3 0220 	subs.w	r2, r3, #32
 800040e:	da0c      	bge.n	800042a <__adddf3+0x16e>
 8000410:	320c      	adds	r2, #12
 8000412:	dd08      	ble.n	8000426 <__adddf3+0x16a>
 8000414:	f102 0c14 	add.w	ip, r2, #20
 8000418:	f1c2 020c 	rsb	r2, r2, #12
 800041c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000420:	fa21 f102 	lsr.w	r1, r1, r2
 8000424:	e00c      	b.n	8000440 <__adddf3+0x184>
 8000426:	f102 0214 	add.w	r2, r2, #20
 800042a:	bfd8      	it	le
 800042c:	f1c2 0c20 	rsble	ip, r2, #32
 8000430:	fa01 f102 	lsl.w	r1, r1, r2
 8000434:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000438:	bfdc      	itt	le
 800043a:	ea41 010c 	orrle.w	r1, r1, ip
 800043e:	4090      	lslle	r0, r2
 8000440:	1ae4      	subs	r4, r4, r3
 8000442:	bfa2      	ittt	ge
 8000444:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000448:	4329      	orrge	r1, r5
 800044a:	bd30      	popge	{r4, r5, pc}
 800044c:	ea6f 0404 	mvn.w	r4, r4
 8000450:	3c1f      	subs	r4, #31
 8000452:	da1c      	bge.n	800048e <__adddf3+0x1d2>
 8000454:	340c      	adds	r4, #12
 8000456:	dc0e      	bgt.n	8000476 <__adddf3+0x1ba>
 8000458:	f104 0414 	add.w	r4, r4, #20
 800045c:	f1c4 0220 	rsb	r2, r4, #32
 8000460:	fa20 f004 	lsr.w	r0, r0, r4
 8000464:	fa01 f302 	lsl.w	r3, r1, r2
 8000468:	ea40 0003 	orr.w	r0, r0, r3
 800046c:	fa21 f304 	lsr.w	r3, r1, r4
 8000470:	ea45 0103 	orr.w	r1, r5, r3
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f1c4 040c 	rsb	r4, r4, #12
 800047a:	f1c4 0220 	rsb	r2, r4, #32
 800047e:	fa20 f002 	lsr.w	r0, r0, r2
 8000482:	fa01 f304 	lsl.w	r3, r1, r4
 8000486:	ea40 0003 	orr.w	r0, r0, r3
 800048a:	4629      	mov	r1, r5
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	fa21 f004 	lsr.w	r0, r1, r4
 8000492:	4629      	mov	r1, r5
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f094 0f00 	teq	r4, #0
 800049a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800049e:	bf06      	itte	eq
 80004a0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004a4:	3401      	addeq	r4, #1
 80004a6:	3d01      	subne	r5, #1
 80004a8:	e74e      	b.n	8000348 <__adddf3+0x8c>
 80004aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ae:	bf18      	it	ne
 80004b0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004b4:	d029      	beq.n	800050a <__adddf3+0x24e>
 80004b6:	ea94 0f05 	teq	r4, r5
 80004ba:	bf08      	it	eq
 80004bc:	ea90 0f02 	teqeq	r0, r2
 80004c0:	d005      	beq.n	80004ce <__adddf3+0x212>
 80004c2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004c6:	bf04      	itt	eq
 80004c8:	4619      	moveq	r1, r3
 80004ca:	4610      	moveq	r0, r2
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	ea91 0f03 	teq	r1, r3
 80004d2:	bf1e      	ittt	ne
 80004d4:	2100      	movne	r1, #0
 80004d6:	2000      	movne	r0, #0
 80004d8:	bd30      	popne	{r4, r5, pc}
 80004da:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004de:	d105      	bne.n	80004ec <__adddf3+0x230>
 80004e0:	0040      	lsls	r0, r0, #1
 80004e2:	4149      	adcs	r1, r1
 80004e4:	bf28      	it	cs
 80004e6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ea:	bd30      	pop	{r4, r5, pc}
 80004ec:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004f0:	bf3c      	itt	cc
 80004f2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004f6:	bd30      	popcc	{r4, r5, pc}
 80004f8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004fc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000500:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000504:	f04f 0000 	mov.w	r0, #0
 8000508:	bd30      	pop	{r4, r5, pc}
 800050a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800050e:	bf1a      	itte	ne
 8000510:	4619      	movne	r1, r3
 8000512:	4610      	movne	r0, r2
 8000514:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000518:	bf1c      	itt	ne
 800051a:	460b      	movne	r3, r1
 800051c:	4602      	movne	r2, r0
 800051e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000522:	bf06      	itte	eq
 8000524:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000528:	ea91 0f03 	teqeq	r1, r3
 800052c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000530:	bd30      	pop	{r4, r5, pc}
 8000532:	bf00      	nop

08000534 <__aeabi_ui2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000548:	f04f 0500 	mov.w	r5, #0
 800054c:	f04f 0100 	mov.w	r1, #0
 8000550:	e750      	b.n	80003f4 <__adddf3+0x138>
 8000552:	bf00      	nop

08000554 <__aeabi_i2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000568:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800056c:	bf48      	it	mi
 800056e:	4240      	negmi	r0, r0
 8000570:	f04f 0100 	mov.w	r1, #0
 8000574:	e73e      	b.n	80003f4 <__adddf3+0x138>
 8000576:	bf00      	nop

08000578 <__aeabi_f2d>:
 8000578:	0042      	lsls	r2, r0, #1
 800057a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800057e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000582:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000586:	bf1f      	itttt	ne
 8000588:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800058c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000590:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000594:	4770      	bxne	lr
 8000596:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800059a:	bf08      	it	eq
 800059c:	4770      	bxeq	lr
 800059e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005a2:	bf04      	itt	eq
 80005a4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005a8:	4770      	bxeq	lr
 80005aa:	b530      	push	{r4, r5, lr}
 80005ac:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005b0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005b4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005b8:	e71c      	b.n	80003f4 <__adddf3+0x138>
 80005ba:	bf00      	nop

080005bc <__aeabi_ul2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f04f 0500 	mov.w	r5, #0
 80005ca:	e00a      	b.n	80005e2 <__aeabi_l2d+0x16>

080005cc <__aeabi_l2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005da:	d502      	bpl.n	80005e2 <__aeabi_l2d+0x16>
 80005dc:	4240      	negs	r0, r0
 80005de:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005e2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005e6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ea:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ee:	f43f aed8 	beq.w	80003a2 <__adddf3+0xe6>
 80005f2:	f04f 0203 	mov.w	r2, #3
 80005f6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005fa:	bf18      	it	ne
 80005fc:	3203      	addne	r2, #3
 80005fe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000602:	bf18      	it	ne
 8000604:	3203      	addne	r2, #3
 8000606:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800060a:	f1c2 0320 	rsb	r3, r2, #32
 800060e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000612:	fa20 f002 	lsr.w	r0, r0, r2
 8000616:	fa01 fe03 	lsl.w	lr, r1, r3
 800061a:	ea40 000e 	orr.w	r0, r0, lr
 800061e:	fa21 f102 	lsr.w	r1, r1, r2
 8000622:	4414      	add	r4, r2
 8000624:	e6bd      	b.n	80003a2 <__adddf3+0xe6>
 8000626:	bf00      	nop

08000628 <__aeabi_dmul>:
 8000628:	b570      	push	{r4, r5, r6, lr}
 800062a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800062e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000632:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000636:	bf1d      	ittte	ne
 8000638:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800063c:	ea94 0f0c 	teqne	r4, ip
 8000640:	ea95 0f0c 	teqne	r5, ip
 8000644:	f000 f8de 	bleq	8000804 <__aeabi_dmul+0x1dc>
 8000648:	442c      	add	r4, r5
 800064a:	ea81 0603 	eor.w	r6, r1, r3
 800064e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000652:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000656:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800065a:	bf18      	it	ne
 800065c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000660:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000664:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000668:	d038      	beq.n	80006dc <__aeabi_dmul+0xb4>
 800066a:	fba0 ce02 	umull	ip, lr, r0, r2
 800066e:	f04f 0500 	mov.w	r5, #0
 8000672:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000676:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800067a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800067e:	f04f 0600 	mov.w	r6, #0
 8000682:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000686:	f09c 0f00 	teq	ip, #0
 800068a:	bf18      	it	ne
 800068c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000690:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000694:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000698:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800069c:	d204      	bcs.n	80006a8 <__aeabi_dmul+0x80>
 800069e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006a2:	416d      	adcs	r5, r5
 80006a4:	eb46 0606 	adc.w	r6, r6, r6
 80006a8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006ac:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006b0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006b4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006b8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006bc:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006c0:	bf88      	it	hi
 80006c2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006c6:	d81e      	bhi.n	8000706 <__aeabi_dmul+0xde>
 80006c8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006cc:	bf08      	it	eq
 80006ce:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006d2:	f150 0000 	adcs.w	r0, r0, #0
 80006d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006e0:	ea46 0101 	orr.w	r1, r6, r1
 80006e4:	ea40 0002 	orr.w	r0, r0, r2
 80006e8:	ea81 0103 	eor.w	r1, r1, r3
 80006ec:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006f0:	bfc2      	ittt	gt
 80006f2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006f6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	popgt	{r4, r5, r6, pc}
 80006fc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000700:	f04f 0e00 	mov.w	lr, #0
 8000704:	3c01      	subs	r4, #1
 8000706:	f300 80ab 	bgt.w	8000860 <__aeabi_dmul+0x238>
 800070a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800070e:	bfde      	ittt	le
 8000710:	2000      	movle	r0, #0
 8000712:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000716:	bd70      	pople	{r4, r5, r6, pc}
 8000718:	f1c4 0400 	rsb	r4, r4, #0
 800071c:	3c20      	subs	r4, #32
 800071e:	da35      	bge.n	800078c <__aeabi_dmul+0x164>
 8000720:	340c      	adds	r4, #12
 8000722:	dc1b      	bgt.n	800075c <__aeabi_dmul+0x134>
 8000724:	f104 0414 	add.w	r4, r4, #20
 8000728:	f1c4 0520 	rsb	r5, r4, #32
 800072c:	fa00 f305 	lsl.w	r3, r0, r5
 8000730:	fa20 f004 	lsr.w	r0, r0, r4
 8000734:	fa01 f205 	lsl.w	r2, r1, r5
 8000738:	ea40 0002 	orr.w	r0, r0, r2
 800073c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000740:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000744:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000748:	fa21 f604 	lsr.w	r6, r1, r4
 800074c:	eb42 0106 	adc.w	r1, r2, r6
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 040c 	rsb	r4, r4, #12
 8000760:	f1c4 0520 	rsb	r5, r4, #32
 8000764:	fa00 f304 	lsl.w	r3, r0, r4
 8000768:	fa20 f005 	lsr.w	r0, r0, r5
 800076c:	fa01 f204 	lsl.w	r2, r1, r4
 8000770:	ea40 0002 	orr.w	r0, r0, r2
 8000774:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000778:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800077c:	f141 0100 	adc.w	r1, r1, #0
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f1c4 0520 	rsb	r5, r4, #32
 8000790:	fa00 f205 	lsl.w	r2, r0, r5
 8000794:	ea4e 0e02 	orr.w	lr, lr, r2
 8000798:	fa20 f304 	lsr.w	r3, r0, r4
 800079c:	fa01 f205 	lsl.w	r2, r1, r5
 80007a0:	ea43 0302 	orr.w	r3, r3, r2
 80007a4:	fa21 f004 	lsr.w	r0, r1, r4
 80007a8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007ac:	fa21 f204 	lsr.w	r2, r1, r4
 80007b0:	ea20 0002 	bic.w	r0, r0, r2
 80007b4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007bc:	bf08      	it	eq
 80007be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007c2:	bd70      	pop	{r4, r5, r6, pc}
 80007c4:	f094 0f00 	teq	r4, #0
 80007c8:	d10f      	bne.n	80007ea <__aeabi_dmul+0x1c2>
 80007ca:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007ce:	0040      	lsls	r0, r0, #1
 80007d0:	eb41 0101 	adc.w	r1, r1, r1
 80007d4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3c01      	subeq	r4, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1a6>
 80007de:	ea41 0106 	orr.w	r1, r1, r6
 80007e2:	f095 0f00 	teq	r5, #0
 80007e6:	bf18      	it	ne
 80007e8:	4770      	bxne	lr
 80007ea:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007ee:	0052      	lsls	r2, r2, #1
 80007f0:	eb43 0303 	adc.w	r3, r3, r3
 80007f4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3d01      	subeq	r5, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1c6>
 80007fe:	ea43 0306 	orr.w	r3, r3, r6
 8000802:	4770      	bx	lr
 8000804:	ea94 0f0c 	teq	r4, ip
 8000808:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800080c:	bf18      	it	ne
 800080e:	ea95 0f0c 	teqne	r5, ip
 8000812:	d00c      	beq.n	800082e <__aeabi_dmul+0x206>
 8000814:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000818:	bf18      	it	ne
 800081a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081e:	d1d1      	bne.n	80007c4 <__aeabi_dmul+0x19c>
 8000820:	ea81 0103 	eor.w	r1, r1, r3
 8000824:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000828:	f04f 0000 	mov.w	r0, #0
 800082c:	bd70      	pop	{r4, r5, r6, pc}
 800082e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000832:	bf06      	itte	eq
 8000834:	4610      	moveq	r0, r2
 8000836:	4619      	moveq	r1, r3
 8000838:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083c:	d019      	beq.n	8000872 <__aeabi_dmul+0x24a>
 800083e:	ea94 0f0c 	teq	r4, ip
 8000842:	d102      	bne.n	800084a <__aeabi_dmul+0x222>
 8000844:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000848:	d113      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800084a:	ea95 0f0c 	teq	r5, ip
 800084e:	d105      	bne.n	800085c <__aeabi_dmul+0x234>
 8000850:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000854:	bf1c      	itt	ne
 8000856:	4610      	movne	r0, r2
 8000858:	4619      	movne	r1, r3
 800085a:	d10a      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800085c:	ea81 0103 	eor.w	r1, r1, r3
 8000860:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000864:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000868:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800086c:	f04f 0000 	mov.w	r0, #0
 8000870:	bd70      	pop	{r4, r5, r6, pc}
 8000872:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000876:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800087a:	bd70      	pop	{r4, r5, r6, pc}

0800087c <__aeabi_ddiv>:
 800087c:	b570      	push	{r4, r5, r6, lr}
 800087e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000882:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000886:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800088a:	bf1d      	ittte	ne
 800088c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000890:	ea94 0f0c 	teqne	r4, ip
 8000894:	ea95 0f0c 	teqne	r5, ip
 8000898:	f000 f8a7 	bleq	80009ea <__aeabi_ddiv+0x16e>
 800089c:	eba4 0405 	sub.w	r4, r4, r5
 80008a0:	ea81 0e03 	eor.w	lr, r1, r3
 80008a4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008a8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008ac:	f000 8088 	beq.w	80009c0 <__aeabi_ddiv+0x144>
 80008b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008b4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008b8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008bc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008c0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008c4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008c8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008cc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008d0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008d4:	429d      	cmp	r5, r3
 80008d6:	bf08      	it	eq
 80008d8:	4296      	cmpeq	r6, r2
 80008da:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008de:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008e2:	d202      	bcs.n	80008ea <__aeabi_ddiv+0x6e>
 80008e4:	085b      	lsrs	r3, r3, #1
 80008e6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ea:	1ab6      	subs	r6, r6, r2
 80008ec:	eb65 0503 	sbc.w	r5, r5, r3
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008fa:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000928:	085b      	lsrs	r3, r3, #1
 800092a:	ea4f 0232 	mov.w	r2, r2, rrx
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000958:	ea55 0e06 	orrs.w	lr, r5, r6
 800095c:	d018      	beq.n	8000990 <__aeabi_ddiv+0x114>
 800095e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000962:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000966:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800096a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800096e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000972:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000976:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800097a:	d1c0      	bne.n	80008fe <__aeabi_ddiv+0x82>
 800097c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000980:	d10b      	bne.n	800099a <__aeabi_ddiv+0x11e>
 8000982:	ea41 0100 	orr.w	r1, r1, r0
 8000986:	f04f 0000 	mov.w	r0, #0
 800098a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800098e:	e7b6      	b.n	80008fe <__aeabi_ddiv+0x82>
 8000990:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000994:	bf04      	itt	eq
 8000996:	4301      	orreq	r1, r0
 8000998:	2000      	moveq	r0, #0
 800099a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800099e:	bf88      	it	hi
 80009a0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009a4:	f63f aeaf 	bhi.w	8000706 <__aeabi_dmul+0xde>
 80009a8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009ac:	bf04      	itt	eq
 80009ae:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009b2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009b6:	f150 0000 	adcs.w	r0, r0, #0
 80009ba:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009be:	bd70      	pop	{r4, r5, r6, pc}
 80009c0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009c4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009c8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009cc:	bfc2      	ittt	gt
 80009ce:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009d2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009d6:	bd70      	popgt	{r4, r5, r6, pc}
 80009d8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009dc:	f04f 0e00 	mov.w	lr, #0
 80009e0:	3c01      	subs	r4, #1
 80009e2:	e690      	b.n	8000706 <__aeabi_dmul+0xde>
 80009e4:	ea45 0e06 	orr.w	lr, r5, r6
 80009e8:	e68d      	b.n	8000706 <__aeabi_dmul+0xde>
 80009ea:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ee:	ea94 0f0c 	teq	r4, ip
 80009f2:	bf08      	it	eq
 80009f4:	ea95 0f0c 	teqeq	r5, ip
 80009f8:	f43f af3b 	beq.w	8000872 <__aeabi_dmul+0x24a>
 80009fc:	ea94 0f0c 	teq	r4, ip
 8000a00:	d10a      	bne.n	8000a18 <__aeabi_ddiv+0x19c>
 8000a02:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a06:	f47f af34 	bne.w	8000872 <__aeabi_dmul+0x24a>
 8000a0a:	ea95 0f0c 	teq	r5, ip
 8000a0e:	f47f af25 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a12:	4610      	mov	r0, r2
 8000a14:	4619      	mov	r1, r3
 8000a16:	e72c      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a18:	ea95 0f0c 	teq	r5, ip
 8000a1c:	d106      	bne.n	8000a2c <__aeabi_ddiv+0x1b0>
 8000a1e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a22:	f43f aefd 	beq.w	8000820 <__aeabi_dmul+0x1f8>
 8000a26:	4610      	mov	r0, r2
 8000a28:	4619      	mov	r1, r3
 8000a2a:	e722      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a2c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a30:	bf18      	it	ne
 8000a32:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a36:	f47f aec5 	bne.w	80007c4 <__aeabi_dmul+0x19c>
 8000a3a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a3e:	f47f af0d 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a42:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a46:	f47f aeeb 	bne.w	8000820 <__aeabi_dmul+0x1f8>
 8000a4a:	e712      	b.n	8000872 <__aeabi_dmul+0x24a>

08000a4c <__aeabi_d2uiz>:
 8000a4c:	004a      	lsls	r2, r1, #1
 8000a4e:	d211      	bcs.n	8000a74 <__aeabi_d2uiz+0x28>
 8000a50:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000a54:	d211      	bcs.n	8000a7a <__aeabi_d2uiz+0x2e>
 8000a56:	d50d      	bpl.n	8000a74 <__aeabi_d2uiz+0x28>
 8000a58:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000a5c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a60:	d40e      	bmi.n	8000a80 <__aeabi_d2uiz+0x34>
 8000a62:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a66:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000a6a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a6e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a72:	4770      	bx	lr
 8000a74:	f04f 0000 	mov.w	r0, #0
 8000a78:	4770      	bx	lr
 8000a7a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a7e:	d102      	bne.n	8000a86 <__aeabi_d2uiz+0x3a>
 8000a80:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000a84:	4770      	bx	lr
 8000a86:	f04f 0000 	mov.w	r0, #0
 8000a8a:	4770      	bx	lr

08000a8c <__aeabi_d2f>:
 8000a8c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a90:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000a94:	bf24      	itt	cs
 8000a96:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000a9a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000a9e:	d90d      	bls.n	8000abc <__aeabi_d2f+0x30>
 8000aa0:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000aa4:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000aa8:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000aac:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000ab0:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000ab4:	bf08      	it	eq
 8000ab6:	f020 0001 	biceq.w	r0, r0, #1
 8000aba:	4770      	bx	lr
 8000abc:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000ac0:	d121      	bne.n	8000b06 <__aeabi_d2f+0x7a>
 8000ac2:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000ac6:	bfbc      	itt	lt
 8000ac8:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000acc:	4770      	bxlt	lr
 8000ace:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000ad2:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000ad6:	f1c2 0218 	rsb	r2, r2, #24
 8000ada:	f1c2 0c20 	rsb	ip, r2, #32
 8000ade:	fa10 f30c 	lsls.w	r3, r0, ip
 8000ae2:	fa20 f002 	lsr.w	r0, r0, r2
 8000ae6:	bf18      	it	ne
 8000ae8:	f040 0001 	orrne.w	r0, r0, #1
 8000aec:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000af0:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000af4:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000af8:	ea40 000c 	orr.w	r0, r0, ip
 8000afc:	fa23 f302 	lsr.w	r3, r3, r2
 8000b00:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b04:	e7cc      	b.n	8000aa0 <__aeabi_d2f+0x14>
 8000b06:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b0a:	d107      	bne.n	8000b1c <__aeabi_d2f+0x90>
 8000b0c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b10:	bf1e      	ittt	ne
 8000b12:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000b16:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000b1a:	4770      	bxne	lr
 8000b1c:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000b20:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000b24:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000b28:	4770      	bx	lr
 8000b2a:	bf00      	nop

08000b2c <__aeabi_ldivmod>:
 8000b2c:	b97b      	cbnz	r3, 8000b4e <__aeabi_ldivmod+0x22>
 8000b2e:	b972      	cbnz	r2, 8000b4e <__aeabi_ldivmod+0x22>
 8000b30:	2900      	cmp	r1, #0
 8000b32:	bfbe      	ittt	lt
 8000b34:	2000      	movlt	r0, #0
 8000b36:	f04f 4100 	movlt.w	r1, #2147483648	@ 0x80000000
 8000b3a:	e006      	blt.n	8000b4a <__aeabi_ldivmod+0x1e>
 8000b3c:	bf08      	it	eq
 8000b3e:	2800      	cmpeq	r0, #0
 8000b40:	bf1c      	itt	ne
 8000b42:	f06f 4100 	mvnne.w	r1, #2147483648	@ 0x80000000
 8000b46:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000b4a:	f000 b9b5 	b.w	8000eb8 <__aeabi_idiv0>
 8000b4e:	f1ad 0c08 	sub.w	ip, sp, #8
 8000b52:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000b56:	2900      	cmp	r1, #0
 8000b58:	db09      	blt.n	8000b6e <__aeabi_ldivmod+0x42>
 8000b5a:	2b00      	cmp	r3, #0
 8000b5c:	db1a      	blt.n	8000b94 <__aeabi_ldivmod+0x68>
 8000b5e:	f000 f84d 	bl	8000bfc <__udivmoddi4>
 8000b62:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b66:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b6a:	b004      	add	sp, #16
 8000b6c:	4770      	bx	lr
 8000b6e:	4240      	negs	r0, r0
 8000b70:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000b74:	2b00      	cmp	r3, #0
 8000b76:	db1b      	blt.n	8000bb0 <__aeabi_ldivmod+0x84>
 8000b78:	f000 f840 	bl	8000bfc <__udivmoddi4>
 8000b7c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b80:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b84:	b004      	add	sp, #16
 8000b86:	4240      	negs	r0, r0
 8000b88:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000b8c:	4252      	negs	r2, r2
 8000b8e:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000b92:	4770      	bx	lr
 8000b94:	4252      	negs	r2, r2
 8000b96:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000b9a:	f000 f82f 	bl	8000bfc <__udivmoddi4>
 8000b9e:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000ba2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ba6:	b004      	add	sp, #16
 8000ba8:	4240      	negs	r0, r0
 8000baa:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000bae:	4770      	bx	lr
 8000bb0:	4252      	negs	r2, r2
 8000bb2:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000bb6:	f000 f821 	bl	8000bfc <__udivmoddi4>
 8000bba:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bbe:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bc2:	b004      	add	sp, #16
 8000bc4:	4252      	negs	r2, r2
 8000bc6:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000bca:	4770      	bx	lr

08000bcc <__aeabi_uldivmod>:
 8000bcc:	b953      	cbnz	r3, 8000be4 <__aeabi_uldivmod+0x18>
 8000bce:	b94a      	cbnz	r2, 8000be4 <__aeabi_uldivmod+0x18>
 8000bd0:	2900      	cmp	r1, #0
 8000bd2:	bf08      	it	eq
 8000bd4:	2800      	cmpeq	r0, #0
 8000bd6:	bf1c      	itt	ne
 8000bd8:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000bdc:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000be0:	f000 b96a 	b.w	8000eb8 <__aeabi_idiv0>
 8000be4:	f1ad 0c08 	sub.w	ip, sp, #8
 8000be8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bec:	f000 f806 	bl	8000bfc <__udivmoddi4>
 8000bf0:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bf4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bf8:	b004      	add	sp, #16
 8000bfa:	4770      	bx	lr

08000bfc <__udivmoddi4>:
 8000bfc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c00:	9d08      	ldr	r5, [sp, #32]
 8000c02:	460c      	mov	r4, r1
 8000c04:	2b00      	cmp	r3, #0
 8000c06:	d14e      	bne.n	8000ca6 <__udivmoddi4+0xaa>
 8000c08:	4694      	mov	ip, r2
 8000c0a:	458c      	cmp	ip, r1
 8000c0c:	4686      	mov	lr, r0
 8000c0e:	fab2 f282 	clz	r2, r2
 8000c12:	d962      	bls.n	8000cda <__udivmoddi4+0xde>
 8000c14:	b14a      	cbz	r2, 8000c2a <__udivmoddi4+0x2e>
 8000c16:	f1c2 0320 	rsb	r3, r2, #32
 8000c1a:	4091      	lsls	r1, r2
 8000c1c:	fa20 f303 	lsr.w	r3, r0, r3
 8000c20:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c24:	4319      	orrs	r1, r3
 8000c26:	fa00 fe02 	lsl.w	lr, r0, r2
 8000c2a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000c2e:	fa1f f68c 	uxth.w	r6, ip
 8000c32:	fbb1 f4f7 	udiv	r4, r1, r7
 8000c36:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000c3a:	fb07 1114 	mls	r1, r7, r4, r1
 8000c3e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c42:	fb04 f106 	mul.w	r1, r4, r6
 8000c46:	4299      	cmp	r1, r3
 8000c48:	d90a      	bls.n	8000c60 <__udivmoddi4+0x64>
 8000c4a:	eb1c 0303 	adds.w	r3, ip, r3
 8000c4e:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 8000c52:	f080 8112 	bcs.w	8000e7a <__udivmoddi4+0x27e>
 8000c56:	4299      	cmp	r1, r3
 8000c58:	f240 810f 	bls.w	8000e7a <__udivmoddi4+0x27e>
 8000c5c:	3c02      	subs	r4, #2
 8000c5e:	4463      	add	r3, ip
 8000c60:	1a59      	subs	r1, r3, r1
 8000c62:	fa1f f38e 	uxth.w	r3, lr
 8000c66:	fbb1 f0f7 	udiv	r0, r1, r7
 8000c6a:	fb07 1110 	mls	r1, r7, r0, r1
 8000c6e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c72:	fb00 f606 	mul.w	r6, r0, r6
 8000c76:	429e      	cmp	r6, r3
 8000c78:	d90a      	bls.n	8000c90 <__udivmoddi4+0x94>
 8000c7a:	eb1c 0303 	adds.w	r3, ip, r3
 8000c7e:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 8000c82:	f080 80fc 	bcs.w	8000e7e <__udivmoddi4+0x282>
 8000c86:	429e      	cmp	r6, r3
 8000c88:	f240 80f9 	bls.w	8000e7e <__udivmoddi4+0x282>
 8000c8c:	4463      	add	r3, ip
 8000c8e:	3802      	subs	r0, #2
 8000c90:	1b9b      	subs	r3, r3, r6
 8000c92:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000c96:	2100      	movs	r1, #0
 8000c98:	b11d      	cbz	r5, 8000ca2 <__udivmoddi4+0xa6>
 8000c9a:	40d3      	lsrs	r3, r2
 8000c9c:	2200      	movs	r2, #0
 8000c9e:	e9c5 3200 	strd	r3, r2, [r5]
 8000ca2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ca6:	428b      	cmp	r3, r1
 8000ca8:	d905      	bls.n	8000cb6 <__udivmoddi4+0xba>
 8000caa:	b10d      	cbz	r5, 8000cb0 <__udivmoddi4+0xb4>
 8000cac:	e9c5 0100 	strd	r0, r1, [r5]
 8000cb0:	2100      	movs	r1, #0
 8000cb2:	4608      	mov	r0, r1
 8000cb4:	e7f5      	b.n	8000ca2 <__udivmoddi4+0xa6>
 8000cb6:	fab3 f183 	clz	r1, r3
 8000cba:	2900      	cmp	r1, #0
 8000cbc:	d146      	bne.n	8000d4c <__udivmoddi4+0x150>
 8000cbe:	42a3      	cmp	r3, r4
 8000cc0:	d302      	bcc.n	8000cc8 <__udivmoddi4+0xcc>
 8000cc2:	4290      	cmp	r0, r2
 8000cc4:	f0c0 80f0 	bcc.w	8000ea8 <__udivmoddi4+0x2ac>
 8000cc8:	1a86      	subs	r6, r0, r2
 8000cca:	eb64 0303 	sbc.w	r3, r4, r3
 8000cce:	2001      	movs	r0, #1
 8000cd0:	2d00      	cmp	r5, #0
 8000cd2:	d0e6      	beq.n	8000ca2 <__udivmoddi4+0xa6>
 8000cd4:	e9c5 6300 	strd	r6, r3, [r5]
 8000cd8:	e7e3      	b.n	8000ca2 <__udivmoddi4+0xa6>
 8000cda:	2a00      	cmp	r2, #0
 8000cdc:	f040 8090 	bne.w	8000e00 <__udivmoddi4+0x204>
 8000ce0:	eba1 040c 	sub.w	r4, r1, ip
 8000ce4:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000ce8:	fa1f f78c 	uxth.w	r7, ip
 8000cec:	2101      	movs	r1, #1
 8000cee:	fbb4 f6f8 	udiv	r6, r4, r8
 8000cf2:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000cf6:	fb08 4416 	mls	r4, r8, r6, r4
 8000cfa:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000cfe:	fb07 f006 	mul.w	r0, r7, r6
 8000d02:	4298      	cmp	r0, r3
 8000d04:	d908      	bls.n	8000d18 <__udivmoddi4+0x11c>
 8000d06:	eb1c 0303 	adds.w	r3, ip, r3
 8000d0a:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 8000d0e:	d202      	bcs.n	8000d16 <__udivmoddi4+0x11a>
 8000d10:	4298      	cmp	r0, r3
 8000d12:	f200 80cd 	bhi.w	8000eb0 <__udivmoddi4+0x2b4>
 8000d16:	4626      	mov	r6, r4
 8000d18:	1a1c      	subs	r4, r3, r0
 8000d1a:	fa1f f38e 	uxth.w	r3, lr
 8000d1e:	fbb4 f0f8 	udiv	r0, r4, r8
 8000d22:	fb08 4410 	mls	r4, r8, r0, r4
 8000d26:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000d2a:	fb00 f707 	mul.w	r7, r0, r7
 8000d2e:	429f      	cmp	r7, r3
 8000d30:	d908      	bls.n	8000d44 <__udivmoddi4+0x148>
 8000d32:	eb1c 0303 	adds.w	r3, ip, r3
 8000d36:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 8000d3a:	d202      	bcs.n	8000d42 <__udivmoddi4+0x146>
 8000d3c:	429f      	cmp	r7, r3
 8000d3e:	f200 80b0 	bhi.w	8000ea2 <__udivmoddi4+0x2a6>
 8000d42:	4620      	mov	r0, r4
 8000d44:	1bdb      	subs	r3, r3, r7
 8000d46:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d4a:	e7a5      	b.n	8000c98 <__udivmoddi4+0x9c>
 8000d4c:	f1c1 0620 	rsb	r6, r1, #32
 8000d50:	408b      	lsls	r3, r1
 8000d52:	fa22 f706 	lsr.w	r7, r2, r6
 8000d56:	431f      	orrs	r7, r3
 8000d58:	fa20 fc06 	lsr.w	ip, r0, r6
 8000d5c:	fa04 f301 	lsl.w	r3, r4, r1
 8000d60:	ea43 030c 	orr.w	r3, r3, ip
 8000d64:	40f4      	lsrs	r4, r6
 8000d66:	fa00 f801 	lsl.w	r8, r0, r1
 8000d6a:	0c38      	lsrs	r0, r7, #16
 8000d6c:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000d70:	fbb4 fef0 	udiv	lr, r4, r0
 8000d74:	fa1f fc87 	uxth.w	ip, r7
 8000d78:	fb00 441e 	mls	r4, r0, lr, r4
 8000d7c:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000d80:	fb0e f90c 	mul.w	r9, lr, ip
 8000d84:	45a1      	cmp	r9, r4
 8000d86:	fa02 f201 	lsl.w	r2, r2, r1
 8000d8a:	d90a      	bls.n	8000da2 <__udivmoddi4+0x1a6>
 8000d8c:	193c      	adds	r4, r7, r4
 8000d8e:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 8000d92:	f080 8084 	bcs.w	8000e9e <__udivmoddi4+0x2a2>
 8000d96:	45a1      	cmp	r9, r4
 8000d98:	f240 8081 	bls.w	8000e9e <__udivmoddi4+0x2a2>
 8000d9c:	f1ae 0e02 	sub.w	lr, lr, #2
 8000da0:	443c      	add	r4, r7
 8000da2:	eba4 0409 	sub.w	r4, r4, r9
 8000da6:	fa1f f983 	uxth.w	r9, r3
 8000daa:	fbb4 f3f0 	udiv	r3, r4, r0
 8000dae:	fb00 4413 	mls	r4, r0, r3, r4
 8000db2:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000db6:	fb03 fc0c 	mul.w	ip, r3, ip
 8000dba:	45a4      	cmp	ip, r4
 8000dbc:	d907      	bls.n	8000dce <__udivmoddi4+0x1d2>
 8000dbe:	193c      	adds	r4, r7, r4
 8000dc0:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 8000dc4:	d267      	bcs.n	8000e96 <__udivmoddi4+0x29a>
 8000dc6:	45a4      	cmp	ip, r4
 8000dc8:	d965      	bls.n	8000e96 <__udivmoddi4+0x29a>
 8000dca:	3b02      	subs	r3, #2
 8000dcc:	443c      	add	r4, r7
 8000dce:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000dd2:	fba0 9302 	umull	r9, r3, r0, r2
 8000dd6:	eba4 040c 	sub.w	r4, r4, ip
 8000dda:	429c      	cmp	r4, r3
 8000ddc:	46ce      	mov	lr, r9
 8000dde:	469c      	mov	ip, r3
 8000de0:	d351      	bcc.n	8000e86 <__udivmoddi4+0x28a>
 8000de2:	d04e      	beq.n	8000e82 <__udivmoddi4+0x286>
 8000de4:	b155      	cbz	r5, 8000dfc <__udivmoddi4+0x200>
 8000de6:	ebb8 030e 	subs.w	r3, r8, lr
 8000dea:	eb64 040c 	sbc.w	r4, r4, ip
 8000dee:	fa04 f606 	lsl.w	r6, r4, r6
 8000df2:	40cb      	lsrs	r3, r1
 8000df4:	431e      	orrs	r6, r3
 8000df6:	40cc      	lsrs	r4, r1
 8000df8:	e9c5 6400 	strd	r6, r4, [r5]
 8000dfc:	2100      	movs	r1, #0
 8000dfe:	e750      	b.n	8000ca2 <__udivmoddi4+0xa6>
 8000e00:	f1c2 0320 	rsb	r3, r2, #32
 8000e04:	fa20 f103 	lsr.w	r1, r0, r3
 8000e08:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e0c:	fa24 f303 	lsr.w	r3, r4, r3
 8000e10:	4094      	lsls	r4, r2
 8000e12:	430c      	orrs	r4, r1
 8000e14:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000e18:	fa00 fe02 	lsl.w	lr, r0, r2
 8000e1c:	fa1f f78c 	uxth.w	r7, ip
 8000e20:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e24:	fb08 3110 	mls	r1, r8, r0, r3
 8000e28:	0c23      	lsrs	r3, r4, #16
 8000e2a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000e2e:	fb00 f107 	mul.w	r1, r0, r7
 8000e32:	4299      	cmp	r1, r3
 8000e34:	d908      	bls.n	8000e48 <__udivmoddi4+0x24c>
 8000e36:	eb1c 0303 	adds.w	r3, ip, r3
 8000e3a:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 8000e3e:	d22c      	bcs.n	8000e9a <__udivmoddi4+0x29e>
 8000e40:	4299      	cmp	r1, r3
 8000e42:	d92a      	bls.n	8000e9a <__udivmoddi4+0x29e>
 8000e44:	3802      	subs	r0, #2
 8000e46:	4463      	add	r3, ip
 8000e48:	1a5b      	subs	r3, r3, r1
 8000e4a:	b2a4      	uxth	r4, r4
 8000e4c:	fbb3 f1f8 	udiv	r1, r3, r8
 8000e50:	fb08 3311 	mls	r3, r8, r1, r3
 8000e54:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000e58:	fb01 f307 	mul.w	r3, r1, r7
 8000e5c:	42a3      	cmp	r3, r4
 8000e5e:	d908      	bls.n	8000e72 <__udivmoddi4+0x276>
 8000e60:	eb1c 0404 	adds.w	r4, ip, r4
 8000e64:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 8000e68:	d213      	bcs.n	8000e92 <__udivmoddi4+0x296>
 8000e6a:	42a3      	cmp	r3, r4
 8000e6c:	d911      	bls.n	8000e92 <__udivmoddi4+0x296>
 8000e6e:	3902      	subs	r1, #2
 8000e70:	4464      	add	r4, ip
 8000e72:	1ae4      	subs	r4, r4, r3
 8000e74:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000e78:	e739      	b.n	8000cee <__udivmoddi4+0xf2>
 8000e7a:	4604      	mov	r4, r0
 8000e7c:	e6f0      	b.n	8000c60 <__udivmoddi4+0x64>
 8000e7e:	4608      	mov	r0, r1
 8000e80:	e706      	b.n	8000c90 <__udivmoddi4+0x94>
 8000e82:	45c8      	cmp	r8, r9
 8000e84:	d2ae      	bcs.n	8000de4 <__udivmoddi4+0x1e8>
 8000e86:	ebb9 0e02 	subs.w	lr, r9, r2
 8000e8a:	eb63 0c07 	sbc.w	ip, r3, r7
 8000e8e:	3801      	subs	r0, #1
 8000e90:	e7a8      	b.n	8000de4 <__udivmoddi4+0x1e8>
 8000e92:	4631      	mov	r1, r6
 8000e94:	e7ed      	b.n	8000e72 <__udivmoddi4+0x276>
 8000e96:	4603      	mov	r3, r0
 8000e98:	e799      	b.n	8000dce <__udivmoddi4+0x1d2>
 8000e9a:	4630      	mov	r0, r6
 8000e9c:	e7d4      	b.n	8000e48 <__udivmoddi4+0x24c>
 8000e9e:	46d6      	mov	lr, sl
 8000ea0:	e77f      	b.n	8000da2 <__udivmoddi4+0x1a6>
 8000ea2:	4463      	add	r3, ip
 8000ea4:	3802      	subs	r0, #2
 8000ea6:	e74d      	b.n	8000d44 <__udivmoddi4+0x148>
 8000ea8:	4606      	mov	r6, r0
 8000eaa:	4623      	mov	r3, r4
 8000eac:	4608      	mov	r0, r1
 8000eae:	e70f      	b.n	8000cd0 <__udivmoddi4+0xd4>
 8000eb0:	3e02      	subs	r6, #2
 8000eb2:	4463      	add	r3, ip
 8000eb4:	e730      	b.n	8000d18 <__udivmoddi4+0x11c>
 8000eb6:	bf00      	nop

08000eb8 <__aeabi_idiv0>:
 8000eb8:	4770      	bx	lr
 8000eba:	bf00      	nop

08000ebc <PWM_init>:
 *      Author: beamk
 */

#include "PWM.h"

void PWM_init(PWM* pwm, TIM_HandleTypeDef* htimx, uint16_t tim_chx){
 8000ebc:	b580      	push	{r7, lr}
 8000ebe:	b084      	sub	sp, #16
 8000ec0:	af00      	add	r7, sp, #0
 8000ec2:	60f8      	str	r0, [r7, #12]
 8000ec4:	60b9      	str	r1, [r7, #8]
 8000ec6:	4613      	mov	r3, r2
 8000ec8:	80fb      	strh	r3, [r7, #6]
	pwm->CPU_FREQ = 170e6;
 8000eca:	68fb      	ldr	r3, [r7, #12]
 8000ecc:	4a0b      	ldr	r2, [pc, #44]	@ (8000efc <PWM_init+0x40>)
 8000ece:	611a      	str	r2, [r3, #16]
	pwm->htimx = htimx;
 8000ed0:	68fb      	ldr	r3, [r7, #12]
 8000ed2:	68ba      	ldr	r2, [r7, #8]
 8000ed4:	601a      	str	r2, [r3, #0]
	pwm->tim_chx = tim_chx;
 8000ed6:	68fb      	ldr	r3, [r7, #12]
 8000ed8:	88fa      	ldrh	r2, [r7, #6]
 8000eda:	809a      	strh	r2, [r3, #4]
	pwm->OC = 0;
 8000edc:	68fb      	ldr	r3, [r7, #12]
 8000ede:	2200      	movs	r2, #0
 8000ee0:	615a      	str	r2, [r3, #20]
	HAL_TIM_Base_Start(htimx);
 8000ee2:	68b8      	ldr	r0, [r7, #8]
 8000ee4:	f003 f8c8 	bl	8004078 <HAL_TIM_Base_Start>
	HAL_TIM_PWM_Start(htimx, tim_chx);
 8000ee8:	88fb      	ldrh	r3, [r7, #6]
 8000eea:	4619      	mov	r1, r3
 8000eec:	68b8      	ldr	r0, [r7, #8]
 8000eee:	f003 f9d9 	bl	80042a4 <HAL_TIM_PWM_Start>
}
 8000ef2:	bf00      	nop
 8000ef4:	3710      	adds	r7, #16
 8000ef6:	46bd      	mov	sp, r7
 8000ef8:	bd80      	pop	{r7, pc}
 8000efa:	bf00      	nop
 8000efc:	0a21fe80 	.word	0x0a21fe80

08000f00 <PWM_write_duty>:

void PWM_write_duty(PWM* pwm, float freq, float percent_duty){
 8000f00:	b5b0      	push	{r4, r5, r7, lr}
 8000f02:	b084      	sub	sp, #16
 8000f04:	af00      	add	r7, sp, #0
 8000f06:	60f8      	str	r0, [r7, #12]
 8000f08:	ed87 0a02 	vstr	s0, [r7, #8]
 8000f0c:	edc7 0a01 	vstr	s1, [r7, #4]
    if (freq == 0) {
 8000f10:	edd7 7a02 	vldr	s15, [r7, #8]
 8000f14:	eef5 7a40 	vcmp.f32	s15, #0.0
 8000f18:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000f1c:	d123      	bne.n	8000f66 <PWM_write_duty+0x66>
        __HAL_TIM_SET_COMPARE(pwm->htimx, pwm->tim_chx, 0);
 8000f1e:	68fb      	ldr	r3, [r7, #12]
 8000f20:	889b      	ldrh	r3, [r3, #4]
 8000f22:	2b00      	cmp	r3, #0
 8000f24:	d105      	bne.n	8000f32 <PWM_write_duty+0x32>
 8000f26:	68fb      	ldr	r3, [r7, #12]
 8000f28:	681b      	ldr	r3, [r3, #0]
 8000f2a:	681b      	ldr	r3, [r3, #0]
 8000f2c:	2200      	movs	r2, #0
 8000f2e:	635a      	str	r2, [r3, #52]	@ 0x34
    	pwm->OC = (uint16_t) (pwm->overflow * fabs(percent_duty) / 100.0);
        __HAL_TIM_SET_PRESCALER(pwm->htimx, pwm->prescaler);
        __HAL_TIM_SET_AUTORELOAD(pwm->htimx, pwm->overflow);
        __HAL_TIM_SET_COMPARE(pwm->htimx, pwm->tim_chx, pwm->OC);
    }
}
 8000f30:	e0b7      	b.n	80010a2 <PWM_write_duty+0x1a2>
        __HAL_TIM_SET_COMPARE(pwm->htimx, pwm->tim_chx, 0);
 8000f32:	68fb      	ldr	r3, [r7, #12]
 8000f34:	889b      	ldrh	r3, [r3, #4]
 8000f36:	2b04      	cmp	r3, #4
 8000f38:	d105      	bne.n	8000f46 <PWM_write_duty+0x46>
 8000f3a:	68fb      	ldr	r3, [r7, #12]
 8000f3c:	681b      	ldr	r3, [r3, #0]
 8000f3e:	681a      	ldr	r2, [r3, #0]
 8000f40:	2300      	movs	r3, #0
 8000f42:	6393      	str	r3, [r2, #56]	@ 0x38
 8000f44:	e0ad      	b.n	80010a2 <PWM_write_duty+0x1a2>
 8000f46:	68fb      	ldr	r3, [r7, #12]
 8000f48:	889b      	ldrh	r3, [r3, #4]
 8000f4a:	2b08      	cmp	r3, #8
 8000f4c:	d105      	bne.n	8000f5a <PWM_write_duty+0x5a>
 8000f4e:	68fb      	ldr	r3, [r7, #12]
 8000f50:	681b      	ldr	r3, [r3, #0]
 8000f52:	681a      	ldr	r2, [r3, #0]
 8000f54:	2300      	movs	r3, #0
 8000f56:	63d3      	str	r3, [r2, #60]	@ 0x3c
 8000f58:	e0a3      	b.n	80010a2 <PWM_write_duty+0x1a2>
 8000f5a:	68fb      	ldr	r3, [r7, #12]
 8000f5c:	681b      	ldr	r3, [r3, #0]
 8000f5e:	681a      	ldr	r2, [r3, #0]
 8000f60:	2300      	movs	r3, #0
 8000f62:	6413      	str	r3, [r2, #64]	@ 0x40
}
 8000f64:	e09d      	b.n	80010a2 <PWM_write_duty+0x1a2>
    	pwm->period_cyc = (uint32_t) (pwm->CPU_FREQ / freq);
 8000f66:	68fb      	ldr	r3, [r7, #12]
 8000f68:	691b      	ldr	r3, [r3, #16]
 8000f6a:	ee07 3a90 	vmov	s15, r3
 8000f6e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8000f72:	ed97 7a02 	vldr	s14, [r7, #8]
 8000f76:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000f7a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000f7e:	ee17 2a90 	vmov	r2, s15
 8000f82:	68fb      	ldr	r3, [r7, #12]
 8000f84:	609a      	str	r2, [r3, #8]
    	pwm->prescaler = (uint16_t) ((pwm->period_cyc + 65535 - 1) / 65535) - 1; // Subtracting 1 since prescaler is zero-based
 8000f86:	68fb      	ldr	r3, [r7, #12]
 8000f88:	689b      	ldr	r3, [r3, #8]
 8000f8a:	f503 437f 	add.w	r3, r3, #65280	@ 0xff00
 8000f8e:	33fe      	adds	r3, #254	@ 0xfe
 8000f90:	4a46      	ldr	r2, [pc, #280]	@ (80010ac <PWM_write_duty+0x1ac>)
 8000f92:	fba2 2303 	umull	r2, r3, r2, r3
 8000f96:	0bdb      	lsrs	r3, r3, #15
 8000f98:	b29b      	uxth	r3, r3
 8000f9a:	3b01      	subs	r3, #1
 8000f9c:	b29a      	uxth	r2, r3
 8000f9e:	68fb      	ldr	r3, [r7, #12]
 8000fa0:	819a      	strh	r2, [r3, #12]
    	pwm->overflow = (uint16_t) ((pwm->CPU_FREQ / (float)(pwm->prescaler + 1) / freq) - 1);
 8000fa2:	68fb      	ldr	r3, [r7, #12]
 8000fa4:	691b      	ldr	r3, [r3, #16]
 8000fa6:	ee07 3a90 	vmov	s15, r3
 8000faa:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8000fae:	68fb      	ldr	r3, [r7, #12]
 8000fb0:	899b      	ldrh	r3, [r3, #12]
 8000fb2:	3301      	adds	r3, #1
 8000fb4:	ee07 3a90 	vmov	s15, r3
 8000fb8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000fbc:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8000fc0:	ed97 7a02 	vldr	s14, [r7, #8]
 8000fc4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000fc8:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8000fcc:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8000fd0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000fd4:	ee17 3a90 	vmov	r3, s15
 8000fd8:	b29a      	uxth	r2, r3
 8000fda:	68fb      	ldr	r3, [r7, #12]
 8000fdc:	81da      	strh	r2, [r3, #14]
    	pwm->OC = (uint16_t) (pwm->overflow * fabs(percent_duty) / 100.0);
 8000fde:	68fb      	ldr	r3, [r7, #12]
 8000fe0:	89db      	ldrh	r3, [r3, #14]
 8000fe2:	4618      	mov	r0, r3
 8000fe4:	f7ff fab6 	bl	8000554 <__aeabi_i2d>
 8000fe8:	4604      	mov	r4, r0
 8000fea:	460d      	mov	r5, r1
 8000fec:	edd7 7a01 	vldr	s15, [r7, #4]
 8000ff0:	eef0 7ae7 	vabs.f32	s15, s15
 8000ff4:	ee17 0a90 	vmov	r0, s15
 8000ff8:	f7ff fabe 	bl	8000578 <__aeabi_f2d>
 8000ffc:	4602      	mov	r2, r0
 8000ffe:	460b      	mov	r3, r1
 8001000:	4620      	mov	r0, r4
 8001002:	4629      	mov	r1, r5
 8001004:	f7ff fb10 	bl	8000628 <__aeabi_dmul>
 8001008:	4602      	mov	r2, r0
 800100a:	460b      	mov	r3, r1
 800100c:	4610      	mov	r0, r2
 800100e:	4619      	mov	r1, r3
 8001010:	f04f 0200 	mov.w	r2, #0
 8001014:	4b26      	ldr	r3, [pc, #152]	@ (80010b0 <PWM_write_duty+0x1b0>)
 8001016:	f7ff fc31 	bl	800087c <__aeabi_ddiv>
 800101a:	4602      	mov	r2, r0
 800101c:	460b      	mov	r3, r1
 800101e:	4610      	mov	r0, r2
 8001020:	4619      	mov	r1, r3
 8001022:	f7ff fd13 	bl	8000a4c <__aeabi_d2uiz>
 8001026:	4603      	mov	r3, r0
 8001028:	b29b      	uxth	r3, r3
 800102a:	461a      	mov	r2, r3
 800102c:	68fb      	ldr	r3, [r7, #12]
 800102e:	615a      	str	r2, [r3, #20]
        __HAL_TIM_SET_PRESCALER(pwm->htimx, pwm->prescaler);
 8001030:	68fb      	ldr	r3, [r7, #12]
 8001032:	899a      	ldrh	r2, [r3, #12]
 8001034:	68fb      	ldr	r3, [r7, #12]
 8001036:	681b      	ldr	r3, [r3, #0]
 8001038:	681b      	ldr	r3, [r3, #0]
 800103a:	629a      	str	r2, [r3, #40]	@ 0x28
        __HAL_TIM_SET_AUTORELOAD(pwm->htimx, pwm->overflow);
 800103c:	68fb      	ldr	r3, [r7, #12]
 800103e:	89da      	ldrh	r2, [r3, #14]
 8001040:	68fb      	ldr	r3, [r7, #12]
 8001042:	681b      	ldr	r3, [r3, #0]
 8001044:	681b      	ldr	r3, [r3, #0]
 8001046:	62da      	str	r2, [r3, #44]	@ 0x2c
 8001048:	68fb      	ldr	r3, [r7, #12]
 800104a:	89da      	ldrh	r2, [r3, #14]
 800104c:	68fb      	ldr	r3, [r7, #12]
 800104e:	681b      	ldr	r3, [r3, #0]
 8001050:	60da      	str	r2, [r3, #12]
        __HAL_TIM_SET_COMPARE(pwm->htimx, pwm->tim_chx, pwm->OC);
 8001052:	68fb      	ldr	r3, [r7, #12]
 8001054:	889b      	ldrh	r3, [r3, #4]
 8001056:	2b00      	cmp	r3, #0
 8001058:	d106      	bne.n	8001068 <PWM_write_duty+0x168>
 800105a:	68fb      	ldr	r3, [r7, #12]
 800105c:	681b      	ldr	r3, [r3, #0]
 800105e:	681b      	ldr	r3, [r3, #0]
 8001060:	68fa      	ldr	r2, [r7, #12]
 8001062:	6952      	ldr	r2, [r2, #20]
 8001064:	635a      	str	r2, [r3, #52]	@ 0x34
}
 8001066:	e01c      	b.n	80010a2 <PWM_write_duty+0x1a2>
        __HAL_TIM_SET_COMPARE(pwm->htimx, pwm->tim_chx, pwm->OC);
 8001068:	68fb      	ldr	r3, [r7, #12]
 800106a:	889b      	ldrh	r3, [r3, #4]
 800106c:	2b04      	cmp	r3, #4
 800106e:	d106      	bne.n	800107e <PWM_write_duty+0x17e>
 8001070:	68fb      	ldr	r3, [r7, #12]
 8001072:	681b      	ldr	r3, [r3, #0]
 8001074:	681a      	ldr	r2, [r3, #0]
 8001076:	68fb      	ldr	r3, [r7, #12]
 8001078:	695b      	ldr	r3, [r3, #20]
 800107a:	6393      	str	r3, [r2, #56]	@ 0x38
}
 800107c:	e011      	b.n	80010a2 <PWM_write_duty+0x1a2>
        __HAL_TIM_SET_COMPARE(pwm->htimx, pwm->tim_chx, pwm->OC);
 800107e:	68fb      	ldr	r3, [r7, #12]
 8001080:	889b      	ldrh	r3, [r3, #4]
 8001082:	2b08      	cmp	r3, #8
 8001084:	d106      	bne.n	8001094 <PWM_write_duty+0x194>
 8001086:	68fb      	ldr	r3, [r7, #12]
 8001088:	681b      	ldr	r3, [r3, #0]
 800108a:	681a      	ldr	r2, [r3, #0]
 800108c:	68fb      	ldr	r3, [r7, #12]
 800108e:	695b      	ldr	r3, [r3, #20]
 8001090:	63d3      	str	r3, [r2, #60]	@ 0x3c
}
 8001092:	e006      	b.n	80010a2 <PWM_write_duty+0x1a2>
        __HAL_TIM_SET_COMPARE(pwm->htimx, pwm->tim_chx, pwm->OC);
 8001094:	68fb      	ldr	r3, [r7, #12]
 8001096:	681b      	ldr	r3, [r3, #0]
 8001098:	681a      	ldr	r2, [r3, #0]
 800109a:	68fb      	ldr	r3, [r7, #12]
 800109c:	695b      	ldr	r3, [r3, #20]
 800109e:	6413      	str	r3, [r2, #64]	@ 0x40
}
 80010a0:	e7ff      	b.n	80010a2 <PWM_write_duty+0x1a2>
 80010a2:	bf00      	nop
 80010a4:	3710      	adds	r7, #16
 80010a6:	46bd      	mov	sp, r7
 80010a8:	bdb0      	pop	{r4, r5, r7, pc}
 80010aa:	bf00      	nop
 80010ac:	80008001 	.word	0x80008001
 80010b0:	40590000 	.word	0x40590000

080010b4 <pvPortMallocMicroROS>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMallocMicroROS( size_t xWantedSize )
{
 80010b4:	b580      	push	{r7, lr}
 80010b6:	b08a      	sub	sp, #40	@ 0x28
 80010b8:	af00      	add	r7, sp, #0
 80010ba:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80010bc:	2300      	movs	r3, #0
 80010be:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80010c0:	f006 fb60 	bl	8007784 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80010c4:	4b5a      	ldr	r3, [pc, #360]	@ (8001230 <pvPortMallocMicroROS+0x17c>)
 80010c6:	681b      	ldr	r3, [r3, #0]
 80010c8:	2b00      	cmp	r3, #0
 80010ca:	d101      	bne.n	80010d0 <pvPortMallocMicroROS+0x1c>
		{
			prvHeapInit();
 80010cc:	f000 f986 	bl	80013dc <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80010d0:	4b58      	ldr	r3, [pc, #352]	@ (8001234 <pvPortMallocMicroROS+0x180>)
 80010d2:	681a      	ldr	r2, [r3, #0]
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	4013      	ands	r3, r2
 80010d8:	2b00      	cmp	r3, #0
 80010da:	f040 8090 	bne.w	80011fe <pvPortMallocMicroROS+0x14a>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	2b00      	cmp	r3, #0
 80010e2:	d01e      	beq.n	8001122 <pvPortMallocMicroROS+0x6e>
			{
				xWantedSize += xHeapStructSize;
 80010e4:	2208      	movs	r2, #8
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	4413      	add	r3, r2
 80010ea:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	f003 0307 	and.w	r3, r3, #7
 80010f2:	2b00      	cmp	r3, #0
 80010f4:	d015      	beq.n	8001122 <pvPortMallocMicroROS+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	f023 0307 	bic.w	r3, r3, #7
 80010fc:	3308      	adds	r3, #8
 80010fe:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	f003 0307 	and.w	r3, r3, #7
 8001106:	2b00      	cmp	r3, #0
 8001108:	d00b      	beq.n	8001122 <pvPortMallocMicroROS+0x6e>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800110a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800110e:	f383 8811 	msr	BASEPRI, r3
 8001112:	f3bf 8f6f 	isb	sy
 8001116:	f3bf 8f4f 	dsb	sy
 800111a:	617b      	str	r3, [r7, #20]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800111c:	bf00      	nop
 800111e:	bf00      	nop
 8001120:	e7fd      	b.n	800111e <pvPortMallocMicroROS+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	2b00      	cmp	r3, #0
 8001126:	d06a      	beq.n	80011fe <pvPortMallocMicroROS+0x14a>
 8001128:	4b43      	ldr	r3, [pc, #268]	@ (8001238 <pvPortMallocMicroROS+0x184>)
 800112a:	681b      	ldr	r3, [r3, #0]
 800112c:	687a      	ldr	r2, [r7, #4]
 800112e:	429a      	cmp	r2, r3
 8001130:	d865      	bhi.n	80011fe <pvPortMallocMicroROS+0x14a>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8001132:	4b42      	ldr	r3, [pc, #264]	@ (800123c <pvPortMallocMicroROS+0x188>)
 8001134:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8001136:	4b41      	ldr	r3, [pc, #260]	@ (800123c <pvPortMallocMicroROS+0x188>)
 8001138:	681b      	ldr	r3, [r3, #0]
 800113a:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800113c:	e004      	b.n	8001148 <pvPortMallocMicroROS+0x94>
				{
					pxPreviousBlock = pxBlock;
 800113e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001140:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8001142:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001144:	681b      	ldr	r3, [r3, #0]
 8001146:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8001148:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800114a:	685b      	ldr	r3, [r3, #4]
 800114c:	687a      	ldr	r2, [r7, #4]
 800114e:	429a      	cmp	r2, r3
 8001150:	d903      	bls.n	800115a <pvPortMallocMicroROS+0xa6>
 8001152:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001154:	681b      	ldr	r3, [r3, #0]
 8001156:	2b00      	cmp	r3, #0
 8001158:	d1f1      	bne.n	800113e <pvPortMallocMicroROS+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800115a:	4b35      	ldr	r3, [pc, #212]	@ (8001230 <pvPortMallocMicroROS+0x17c>)
 800115c:	681b      	ldr	r3, [r3, #0]
 800115e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001160:	429a      	cmp	r2, r3
 8001162:	d04c      	beq.n	80011fe <pvPortMallocMicroROS+0x14a>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8001164:	6a3b      	ldr	r3, [r7, #32]
 8001166:	681b      	ldr	r3, [r3, #0]
 8001168:	2208      	movs	r2, #8
 800116a:	4413      	add	r3, r2
 800116c:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800116e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001170:	681a      	ldr	r2, [r3, #0]
 8001172:	6a3b      	ldr	r3, [r7, #32]
 8001174:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8001176:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001178:	685a      	ldr	r2, [r3, #4]
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	1ad2      	subs	r2, r2, r3
 800117e:	2308      	movs	r3, #8
 8001180:	005b      	lsls	r3, r3, #1
 8001182:	429a      	cmp	r2, r3
 8001184:	d920      	bls.n	80011c8 <pvPortMallocMicroROS+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8001186:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	4413      	add	r3, r2
 800118c:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800118e:	69bb      	ldr	r3, [r7, #24]
 8001190:	f003 0307 	and.w	r3, r3, #7
 8001194:	2b00      	cmp	r3, #0
 8001196:	d00b      	beq.n	80011b0 <pvPortMallocMicroROS+0xfc>
	__asm volatile
 8001198:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800119c:	f383 8811 	msr	BASEPRI, r3
 80011a0:	f3bf 8f6f 	isb	sy
 80011a4:	f3bf 8f4f 	dsb	sy
 80011a8:	613b      	str	r3, [r7, #16]
}
 80011aa:	bf00      	nop
 80011ac:	bf00      	nop
 80011ae:	e7fd      	b.n	80011ac <pvPortMallocMicroROS+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80011b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80011b2:	685a      	ldr	r2, [r3, #4]
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	1ad2      	subs	r2, r2, r3
 80011b8:	69bb      	ldr	r3, [r7, #24]
 80011ba:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80011bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80011be:	687a      	ldr	r2, [r7, #4]
 80011c0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80011c2:	69b8      	ldr	r0, [r7, #24]
 80011c4:	f000 f96c 	bl	80014a0 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80011c8:	4b1b      	ldr	r3, [pc, #108]	@ (8001238 <pvPortMallocMicroROS+0x184>)
 80011ca:	681a      	ldr	r2, [r3, #0]
 80011cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80011ce:	685b      	ldr	r3, [r3, #4]
 80011d0:	1ad3      	subs	r3, r2, r3
 80011d2:	4a19      	ldr	r2, [pc, #100]	@ (8001238 <pvPortMallocMicroROS+0x184>)
 80011d4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80011d6:	4b18      	ldr	r3, [pc, #96]	@ (8001238 <pvPortMallocMicroROS+0x184>)
 80011d8:	681a      	ldr	r2, [r3, #0]
 80011da:	4b19      	ldr	r3, [pc, #100]	@ (8001240 <pvPortMallocMicroROS+0x18c>)
 80011dc:	681b      	ldr	r3, [r3, #0]
 80011de:	429a      	cmp	r2, r3
 80011e0:	d203      	bcs.n	80011ea <pvPortMallocMicroROS+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80011e2:	4b15      	ldr	r3, [pc, #84]	@ (8001238 <pvPortMallocMicroROS+0x184>)
 80011e4:	681b      	ldr	r3, [r3, #0]
 80011e6:	4a16      	ldr	r2, [pc, #88]	@ (8001240 <pvPortMallocMicroROS+0x18c>)
 80011e8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80011ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80011ec:	685a      	ldr	r2, [r3, #4]
 80011ee:	4b11      	ldr	r3, [pc, #68]	@ (8001234 <pvPortMallocMicroROS+0x180>)
 80011f0:	681b      	ldr	r3, [r3, #0]
 80011f2:	431a      	orrs	r2, r3
 80011f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80011f6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80011f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80011fa:	2200      	movs	r2, #0
 80011fc:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80011fe:	f006 facf 	bl	80077a0 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8001202:	69fb      	ldr	r3, [r7, #28]
 8001204:	f003 0307 	and.w	r3, r3, #7
 8001208:	2b00      	cmp	r3, #0
 800120a:	d00b      	beq.n	8001224 <pvPortMallocMicroROS+0x170>
	__asm volatile
 800120c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001210:	f383 8811 	msr	BASEPRI, r3
 8001214:	f3bf 8f6f 	isb	sy
 8001218:	f3bf 8f4f 	dsb	sy
 800121c:	60fb      	str	r3, [r7, #12]
}
 800121e:	bf00      	nop
 8001220:	bf00      	nop
 8001222:	e7fd      	b.n	8001220 <pvPortMallocMicroROS+0x16c>
	return pvReturn;
 8001224:	69fb      	ldr	r3, [r7, #28]
}
 8001226:	4618      	mov	r0, r3
 8001228:	3728      	adds	r7, #40	@ 0x28
 800122a:	46bd      	mov	sp, r7
 800122c:	bd80      	pop	{r7, pc}
 800122e:	bf00      	nop
 8001230:	20003d34 	.word	0x20003d34
 8001234:	20003d40 	.word	0x20003d40
 8001238:	20003d38 	.word	0x20003d38
 800123c:	20003d2c 	.word	0x20003d2c
 8001240:	20003d3c 	.word	0x20003d3c

08001244 <vPortFreeMicroROS>:
/*-----------------------------------------------------------*/

void vPortFreeMicroROS( void *pv )
{
 8001244:	b580      	push	{r7, lr}
 8001246:	b086      	sub	sp, #24
 8001248:	af00      	add	r7, sp, #0
 800124a:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	2b00      	cmp	r3, #0
 8001254:	d04a      	beq.n	80012ec <vPortFreeMicroROS+0xa8>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8001256:	2308      	movs	r3, #8
 8001258:	425b      	negs	r3, r3
 800125a:	697a      	ldr	r2, [r7, #20]
 800125c:	4413      	add	r3, r2
 800125e:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8001260:	697b      	ldr	r3, [r7, #20]
 8001262:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8001264:	693b      	ldr	r3, [r7, #16]
 8001266:	685a      	ldr	r2, [r3, #4]
 8001268:	4b22      	ldr	r3, [pc, #136]	@ (80012f4 <vPortFreeMicroROS+0xb0>)
 800126a:	681b      	ldr	r3, [r3, #0]
 800126c:	4013      	ands	r3, r2
 800126e:	2b00      	cmp	r3, #0
 8001270:	d10b      	bne.n	800128a <vPortFreeMicroROS+0x46>
	__asm volatile
 8001272:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001276:	f383 8811 	msr	BASEPRI, r3
 800127a:	f3bf 8f6f 	isb	sy
 800127e:	f3bf 8f4f 	dsb	sy
 8001282:	60fb      	str	r3, [r7, #12]
}
 8001284:	bf00      	nop
 8001286:	bf00      	nop
 8001288:	e7fd      	b.n	8001286 <vPortFreeMicroROS+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800128a:	693b      	ldr	r3, [r7, #16]
 800128c:	681b      	ldr	r3, [r3, #0]
 800128e:	2b00      	cmp	r3, #0
 8001290:	d00b      	beq.n	80012aa <vPortFreeMicroROS+0x66>
	__asm volatile
 8001292:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001296:	f383 8811 	msr	BASEPRI, r3
 800129a:	f3bf 8f6f 	isb	sy
 800129e:	f3bf 8f4f 	dsb	sy
 80012a2:	60bb      	str	r3, [r7, #8]
}
 80012a4:	bf00      	nop
 80012a6:	bf00      	nop
 80012a8:	e7fd      	b.n	80012a6 <vPortFreeMicroROS+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80012aa:	693b      	ldr	r3, [r7, #16]
 80012ac:	685a      	ldr	r2, [r3, #4]
 80012ae:	4b11      	ldr	r3, [pc, #68]	@ (80012f4 <vPortFreeMicroROS+0xb0>)
 80012b0:	681b      	ldr	r3, [r3, #0]
 80012b2:	4013      	ands	r3, r2
 80012b4:	2b00      	cmp	r3, #0
 80012b6:	d019      	beq.n	80012ec <vPortFreeMicroROS+0xa8>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80012b8:	693b      	ldr	r3, [r7, #16]
 80012ba:	681b      	ldr	r3, [r3, #0]
 80012bc:	2b00      	cmp	r3, #0
 80012be:	d115      	bne.n	80012ec <vPortFreeMicroROS+0xa8>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80012c0:	693b      	ldr	r3, [r7, #16]
 80012c2:	685a      	ldr	r2, [r3, #4]
 80012c4:	4b0b      	ldr	r3, [pc, #44]	@ (80012f4 <vPortFreeMicroROS+0xb0>)
 80012c6:	681b      	ldr	r3, [r3, #0]
 80012c8:	43db      	mvns	r3, r3
 80012ca:	401a      	ands	r2, r3
 80012cc:	693b      	ldr	r3, [r7, #16]
 80012ce:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80012d0:	f006 fa58 	bl	8007784 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80012d4:	693b      	ldr	r3, [r7, #16]
 80012d6:	685a      	ldr	r2, [r3, #4]
 80012d8:	4b07      	ldr	r3, [pc, #28]	@ (80012f8 <vPortFreeMicroROS+0xb4>)
 80012da:	681b      	ldr	r3, [r3, #0]
 80012dc:	4413      	add	r3, r2
 80012de:	4a06      	ldr	r2, [pc, #24]	@ (80012f8 <vPortFreeMicroROS+0xb4>)
 80012e0:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80012e2:	6938      	ldr	r0, [r7, #16]
 80012e4:	f000 f8dc 	bl	80014a0 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 80012e8:	f006 fa5a 	bl	80077a0 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80012ec:	bf00      	nop
 80012ee:	3718      	adds	r7, #24
 80012f0:	46bd      	mov	sp, r7
 80012f2:	bd80      	pop	{r7, pc}
 80012f4:	20003d40 	.word	0x20003d40
 80012f8:	20003d38 	.word	0x20003d38

080012fc <getBlockSize>:
/*-----------------------------------------------------------*/

/*-----------------------------------------------------------*/
size_t getBlockSize( void *pv )
{
 80012fc:	b480      	push	{r7}
 80012fe:	b087      	sub	sp, #28
 8001300:	af00      	add	r7, sp, #0
 8001302:	6078      	str	r0, [r7, #4]

	uint8_t *puc = ( uint8_t * ) pv;
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	617b      	str	r3, [r7, #20]
	BlockLink_t *pxLink;

	puc -= xHeapStructSize;
 8001308:	2308      	movs	r3, #8
 800130a:	425b      	negs	r3, r3
 800130c:	697a      	ldr	r2, [r7, #20]
 800130e:	4413      	add	r3, r2
 8001310:	617b      	str	r3, [r7, #20]
	pxLink = ( void * ) puc;
 8001312:	697b      	ldr	r3, [r7, #20]
 8001314:	613b      	str	r3, [r7, #16]

	size_t count = pxLink->xBlockSize & ~xBlockAllocatedBit;
 8001316:	693b      	ldr	r3, [r7, #16]
 8001318:	685a      	ldr	r2, [r3, #4]
 800131a:	4b06      	ldr	r3, [pc, #24]	@ (8001334 <getBlockSize+0x38>)
 800131c:	681b      	ldr	r3, [r3, #0]
 800131e:	43db      	mvns	r3, r3
 8001320:	4013      	ands	r3, r2
 8001322:	60fb      	str	r3, [r7, #12]

	return count;
 8001324:	68fb      	ldr	r3, [r7, #12]
}
 8001326:	4618      	mov	r0, r3
 8001328:	371c      	adds	r7, #28
 800132a:	46bd      	mov	sp, r7
 800132c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001330:	4770      	bx	lr
 8001332:	bf00      	nop
 8001334:	20003d40 	.word	0x20003d40

08001338 <pvPortReallocMicroROS>:
/*-----------------------------------------------------------*/

void *pvPortReallocMicroROS( void *pv, size_t xWantedSize )
{
 8001338:	b580      	push	{r7, lr}
 800133a:	b084      	sub	sp, #16
 800133c:	af00      	add	r7, sp, #0
 800133e:	6078      	str	r0, [r7, #4]
 8001340:	6039      	str	r1, [r7, #0]
	vTaskSuspendAll();
 8001342:	f006 fa1f 	bl	8007784 <vTaskSuspendAll>

	void * newmem = pvPortMallocMicroROS(xWantedSize);
 8001346:	6838      	ldr	r0, [r7, #0]
 8001348:	f7ff feb4 	bl	80010b4 <pvPortMallocMicroROS>
 800134c:	60b8      	str	r0, [r7, #8]
	if (newmem != NULL && pv != NULL)
 800134e:	68bb      	ldr	r3, [r7, #8]
 8001350:	2b00      	cmp	r3, #0
 8001352:	d017      	beq.n	8001384 <pvPortReallocMicroROS+0x4c>
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	2b00      	cmp	r3, #0
 8001358:	d014      	beq.n	8001384 <pvPortReallocMicroROS+0x4c>
	{
		size_t count = getBlockSize(pv) - xHeapStructSize;
 800135a:	6878      	ldr	r0, [r7, #4]
 800135c:	f7ff ffce 	bl	80012fc <getBlockSize>
 8001360:	4603      	mov	r3, r0
 8001362:	2208      	movs	r2, #8
 8001364:	1a9b      	subs	r3, r3, r2
 8001366:	60fb      	str	r3, [r7, #12]
		if (xWantedSize < count)
 8001368:	683a      	ldr	r2, [r7, #0]
 800136a:	68fb      	ldr	r3, [r7, #12]
 800136c:	429a      	cmp	r2, r3
 800136e:	d201      	bcs.n	8001374 <pvPortReallocMicroROS+0x3c>
		{
			count = xWantedSize;
 8001370:	683b      	ldr	r3, [r7, #0]
 8001372:	60fb      	str	r3, [r7, #12]
		}
		memcpy(newmem, pv, count);
 8001374:	68fa      	ldr	r2, [r7, #12]
 8001376:	6879      	ldr	r1, [r7, #4]
 8001378:	68b8      	ldr	r0, [r7, #8]
 800137a:	f014 f9ea 	bl	8015752 <memcpy>

		vPortFreeMicroROS(pv);
 800137e:	6878      	ldr	r0, [r7, #4]
 8001380:	f7ff ff60 	bl	8001244 <vPortFreeMicroROS>
	}

	( void ) xTaskResumeAll();
 8001384:	f006 fa0c 	bl	80077a0 <xTaskResumeAll>

	return newmem;
 8001388:	68bb      	ldr	r3, [r7, #8]
}
 800138a:	4618      	mov	r0, r3
 800138c:	3710      	adds	r7, #16
 800138e:	46bd      	mov	sp, r7
 8001390:	bd80      	pop	{r7, pc}

08001392 <pvPortCallocMicroROS>:
/*-----------------------------------------------------------*/

void *pvPortCallocMicroROS( size_t num, size_t xWantedSize )
{
 8001392:	b580      	push	{r7, lr}
 8001394:	b086      	sub	sp, #24
 8001396:	af00      	add	r7, sp, #0
 8001398:	6078      	str	r0, [r7, #4]
 800139a:	6039      	str	r1, [r7, #0]
	vTaskSuspendAll();
 800139c:	f006 f9f2 	bl	8007784 <vTaskSuspendAll>
	size_t count = xWantedSize*num;
 80013a0:	683b      	ldr	r3, [r7, #0]
 80013a2:	687a      	ldr	r2, [r7, #4]
 80013a4:	fb02 f303 	mul.w	r3, r2, r3
 80013a8:	617b      	str	r3, [r7, #20]

	void * mem = pvPortMallocMicroROS(count);
 80013aa:	6978      	ldr	r0, [r7, #20]
 80013ac:	f7ff fe82 	bl	80010b4 <pvPortMallocMicroROS>
 80013b0:	60f8      	str	r0, [r7, #12]
  	char *in_dest = (char*)mem;
 80013b2:	68fb      	ldr	r3, [r7, #12]
 80013b4:	613b      	str	r3, [r7, #16]

  	while(count--)
 80013b6:	e004      	b.n	80013c2 <pvPortCallocMicroROS+0x30>
    	*in_dest++ = 0;
 80013b8:	693b      	ldr	r3, [r7, #16]
 80013ba:	1c5a      	adds	r2, r3, #1
 80013bc:	613a      	str	r2, [r7, #16]
 80013be:	2200      	movs	r2, #0
 80013c0:	701a      	strb	r2, [r3, #0]
  	while(count--)
 80013c2:	697b      	ldr	r3, [r7, #20]
 80013c4:	1e5a      	subs	r2, r3, #1
 80013c6:	617a      	str	r2, [r7, #20]
 80013c8:	2b00      	cmp	r3, #0
 80013ca:	d1f5      	bne.n	80013b8 <pvPortCallocMicroROS+0x26>

	( void ) xTaskResumeAll();
 80013cc:	f006 f9e8 	bl	80077a0 <xTaskResumeAll>
  	return mem;
 80013d0:	68fb      	ldr	r3, [r7, #12]
}
 80013d2:	4618      	mov	r0, r3
 80013d4:	3718      	adds	r7, #24
 80013d6:	46bd      	mov	sp, r7
 80013d8:	bd80      	pop	{r7, pc}
	...

080013dc <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80013dc:	b480      	push	{r7}
 80013de:	b085      	sub	sp, #20
 80013e0:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80013e2:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 80013e6:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80013e8:	4b27      	ldr	r3, [pc, #156]	@ (8001488 <prvHeapInit+0xac>)
 80013ea:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80013ec:	68fb      	ldr	r3, [r7, #12]
 80013ee:	f003 0307 	and.w	r3, r3, #7
 80013f2:	2b00      	cmp	r3, #0
 80013f4:	d00c      	beq.n	8001410 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80013f6:	68fb      	ldr	r3, [r7, #12]
 80013f8:	3307      	adds	r3, #7
 80013fa:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80013fc:	68fb      	ldr	r3, [r7, #12]
 80013fe:	f023 0307 	bic.w	r3, r3, #7
 8001402:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8001404:	68ba      	ldr	r2, [r7, #8]
 8001406:	68fb      	ldr	r3, [r7, #12]
 8001408:	1ad3      	subs	r3, r2, r3
 800140a:	4a1f      	ldr	r2, [pc, #124]	@ (8001488 <prvHeapInit+0xac>)
 800140c:	4413      	add	r3, r2
 800140e:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8001410:	68fb      	ldr	r3, [r7, #12]
 8001412:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8001414:	4a1d      	ldr	r2, [pc, #116]	@ (800148c <prvHeapInit+0xb0>)
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800141a:	4b1c      	ldr	r3, [pc, #112]	@ (800148c <prvHeapInit+0xb0>)
 800141c:	2200      	movs	r2, #0
 800141e:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	68ba      	ldr	r2, [r7, #8]
 8001424:	4413      	add	r3, r2
 8001426:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8001428:	2208      	movs	r2, #8
 800142a:	68fb      	ldr	r3, [r7, #12]
 800142c:	1a9b      	subs	r3, r3, r2
 800142e:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8001430:	68fb      	ldr	r3, [r7, #12]
 8001432:	f023 0307 	bic.w	r3, r3, #7
 8001436:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8001438:	68fb      	ldr	r3, [r7, #12]
 800143a:	4a15      	ldr	r2, [pc, #84]	@ (8001490 <prvHeapInit+0xb4>)
 800143c:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800143e:	4b14      	ldr	r3, [pc, #80]	@ (8001490 <prvHeapInit+0xb4>)
 8001440:	681b      	ldr	r3, [r3, #0]
 8001442:	2200      	movs	r2, #0
 8001444:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8001446:	4b12      	ldr	r3, [pc, #72]	@ (8001490 <prvHeapInit+0xb4>)
 8001448:	681b      	ldr	r3, [r3, #0]
 800144a:	2200      	movs	r2, #0
 800144c:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8001452:	683b      	ldr	r3, [r7, #0]
 8001454:	68fa      	ldr	r2, [r7, #12]
 8001456:	1ad2      	subs	r2, r2, r3
 8001458:	683b      	ldr	r3, [r7, #0]
 800145a:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800145c:	4b0c      	ldr	r3, [pc, #48]	@ (8001490 <prvHeapInit+0xb4>)
 800145e:	681a      	ldr	r2, [r3, #0]
 8001460:	683b      	ldr	r3, [r7, #0]
 8001462:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8001464:	683b      	ldr	r3, [r7, #0]
 8001466:	685b      	ldr	r3, [r3, #4]
 8001468:	4a0a      	ldr	r2, [pc, #40]	@ (8001494 <prvHeapInit+0xb8>)
 800146a:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800146c:	683b      	ldr	r3, [r7, #0]
 800146e:	685b      	ldr	r3, [r3, #4]
 8001470:	4a09      	ldr	r2, [pc, #36]	@ (8001498 <prvHeapInit+0xbc>)
 8001472:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8001474:	4b09      	ldr	r3, [pc, #36]	@ (800149c <prvHeapInit+0xc0>)
 8001476:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800147a:	601a      	str	r2, [r3, #0]
}
 800147c:	bf00      	nop
 800147e:	3714      	adds	r7, #20
 8001480:	46bd      	mov	sp, r7
 8001482:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001486:	4770      	bx	lr
 8001488:	2000012c 	.word	0x2000012c
 800148c:	20003d2c 	.word	0x20003d2c
 8001490:	20003d34 	.word	0x20003d34
 8001494:	20003d3c 	.word	0x20003d3c
 8001498:	20003d38 	.word	0x20003d38
 800149c:	20003d40 	.word	0x20003d40

080014a0 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80014a0:	b480      	push	{r7}
 80014a2:	b085      	sub	sp, #20
 80014a4:	af00      	add	r7, sp, #0
 80014a6:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80014a8:	4b28      	ldr	r3, [pc, #160]	@ (800154c <prvInsertBlockIntoFreeList+0xac>)
 80014aa:	60fb      	str	r3, [r7, #12]
 80014ac:	e002      	b.n	80014b4 <prvInsertBlockIntoFreeList+0x14>
 80014ae:	68fb      	ldr	r3, [r7, #12]
 80014b0:	681b      	ldr	r3, [r3, #0]
 80014b2:	60fb      	str	r3, [r7, #12]
 80014b4:	68fb      	ldr	r3, [r7, #12]
 80014b6:	681b      	ldr	r3, [r3, #0]
 80014b8:	687a      	ldr	r2, [r7, #4]
 80014ba:	429a      	cmp	r2, r3
 80014bc:	d8f7      	bhi.n	80014ae <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80014be:	68fb      	ldr	r3, [r7, #12]
 80014c0:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80014c2:	68fb      	ldr	r3, [r7, #12]
 80014c4:	685b      	ldr	r3, [r3, #4]
 80014c6:	68ba      	ldr	r2, [r7, #8]
 80014c8:	4413      	add	r3, r2
 80014ca:	687a      	ldr	r2, [r7, #4]
 80014cc:	429a      	cmp	r2, r3
 80014ce:	d108      	bne.n	80014e2 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80014d0:	68fb      	ldr	r3, [r7, #12]
 80014d2:	685a      	ldr	r2, [r3, #4]
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	685b      	ldr	r3, [r3, #4]
 80014d8:	441a      	add	r2, r3
 80014da:	68fb      	ldr	r3, [r7, #12]
 80014dc:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80014de:	68fb      	ldr	r3, [r7, #12]
 80014e0:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	685b      	ldr	r3, [r3, #4]
 80014ea:	68ba      	ldr	r2, [r7, #8]
 80014ec:	441a      	add	r2, r3
 80014ee:	68fb      	ldr	r3, [r7, #12]
 80014f0:	681b      	ldr	r3, [r3, #0]
 80014f2:	429a      	cmp	r2, r3
 80014f4:	d118      	bne.n	8001528 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80014f6:	68fb      	ldr	r3, [r7, #12]
 80014f8:	681a      	ldr	r2, [r3, #0]
 80014fa:	4b15      	ldr	r3, [pc, #84]	@ (8001550 <prvInsertBlockIntoFreeList+0xb0>)
 80014fc:	681b      	ldr	r3, [r3, #0]
 80014fe:	429a      	cmp	r2, r3
 8001500:	d00d      	beq.n	800151e <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	685a      	ldr	r2, [r3, #4]
 8001506:	68fb      	ldr	r3, [r7, #12]
 8001508:	681b      	ldr	r3, [r3, #0]
 800150a:	685b      	ldr	r3, [r3, #4]
 800150c:	441a      	add	r2, r3
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8001512:	68fb      	ldr	r3, [r7, #12]
 8001514:	681b      	ldr	r3, [r3, #0]
 8001516:	681a      	ldr	r2, [r3, #0]
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	601a      	str	r2, [r3, #0]
 800151c:	e008      	b.n	8001530 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800151e:	4b0c      	ldr	r3, [pc, #48]	@ (8001550 <prvInsertBlockIntoFreeList+0xb0>)
 8001520:	681a      	ldr	r2, [r3, #0]
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	601a      	str	r2, [r3, #0]
 8001526:	e003      	b.n	8001530 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8001528:	68fb      	ldr	r3, [r7, #12]
 800152a:	681a      	ldr	r2, [r3, #0]
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8001530:	68fa      	ldr	r2, [r7, #12]
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	429a      	cmp	r2, r3
 8001536:	d002      	beq.n	800153e <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8001538:	68fb      	ldr	r3, [r7, #12]
 800153a:	687a      	ldr	r2, [r7, #4]
 800153c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800153e:	bf00      	nop
 8001540:	3714      	adds	r7, #20
 8001542:	46bd      	mov	sp, r7
 8001544:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001548:	4770      	bx	lr
 800154a:	bf00      	nop
 800154c:	20003d2c 	.word	0x20003d2c
 8001550:	20003d34 	.word	0x20003d34

08001554 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001554:	b580      	push	{r7, lr}
 8001556:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001558:	f001 f9b0 	bl	80028bc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800155c:	f000 f844 	bl	80015e8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001560:	f000 f9f4 	bl	800194c <MX_GPIO_Init>
  MX_DMA_Init();
 8001564:	f000 f9ca 	bl	80018fc <MX_DMA_Init>
  MX_USART2_UART_Init();
 8001568:	f000 f99e 	bl	80018a8 <MX_USART2_UART_Init>
  MX_TIM2_Init();
 800156c:	f000 f8a6 	bl	80016bc <MX_TIM2_Init>
  MX_TIM3_Init();
 8001570:	f000 f924 	bl	80017bc <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
  PWM_init(&StepperL, &htim2, TIM_CHANNEL_1);
 8001574:	2200      	movs	r2, #0
 8001576:	4914      	ldr	r1, [pc, #80]	@ (80015c8 <main+0x74>)
 8001578:	4814      	ldr	r0, [pc, #80]	@ (80015cc <main+0x78>)
 800157a:	f7ff fc9f 	bl	8000ebc <PWM_init>
  PWM_init(&StepperR, &htim2, TIM_CHANNEL_2);
 800157e:	2204      	movs	r2, #4
 8001580:	4911      	ldr	r1, [pc, #68]	@ (80015c8 <main+0x74>)
 8001582:	4813      	ldr	r0, [pc, #76]	@ (80015d0 <main+0x7c>)
 8001584:	f7ff fc9a 	bl	8000ebc <PWM_init>
  PWM_init(&BrushMTR, &htim3, TIM_CHANNEL_1);
 8001588:	2200      	movs	r2, #0
 800158a:	4912      	ldr	r1, [pc, #72]	@ (80015d4 <main+0x80>)
 800158c:	4812      	ldr	r0, [pc, #72]	@ (80015d8 <main+0x84>)
 800158e:	f7ff fc95 	bl	8000ebc <PWM_init>

  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 8001592:	2100      	movs	r1, #0
 8001594:	480c      	ldr	r0, [pc, #48]	@ (80015c8 <main+0x74>)
 8001596:	f002 fe85 	bl	80042a4 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2);
 800159a:	2104      	movs	r1, #4
 800159c:	480a      	ldr	r0, [pc, #40]	@ (80015c8 <main+0x74>)
 800159e:	f002 fe81 	bl	80042a4 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 80015a2:	2100      	movs	r1, #0
 80015a4:	480b      	ldr	r0, [pc, #44]	@ (80015d4 <main+0x80>)
 80015a6:	f002 fe7d 	bl	80042a4 <HAL_TIM_PWM_Start>
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 80015aa:	f004 ffcd 	bl	8006548 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 80015ae:	4a0b      	ldr	r2, [pc, #44]	@ (80015dc <main+0x88>)
 80015b0:	2100      	movs	r1, #0
 80015b2:	480b      	ldr	r0, [pc, #44]	@ (80015e0 <main+0x8c>)
 80015b4:	f005 f812 	bl	80065dc <osThreadNew>
 80015b8:	4603      	mov	r3, r0
 80015ba:	4a0a      	ldr	r2, [pc, #40]	@ (80015e4 <main+0x90>)
 80015bc:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 80015be:	f004 ffe7 	bl	8006590 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80015c2:	bf00      	nop
 80015c4:	e7fd      	b.n	80015c2 <main+0x6e>
 80015c6:	bf00      	nop
 80015c8:	20003d44 	.word	0x20003d44
 80015cc:	20003eec 	.word	0x20003eec
 80015d0:	20003f04 	.word	0x20003f04
 80015d4:	20003d8c 	.word	0x20003d8c
 80015d8:	20003f1c 	.word	0x20003f1c
 80015dc:	080165d0 	.word	0x080165d0
 80015e0:	08001c41 	.word	0x08001c41
 80015e4:	20003edc 	.word	0x20003edc

080015e8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80015e8:	b580      	push	{r7, lr}
 80015ea:	b094      	sub	sp, #80	@ 0x50
 80015ec:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80015ee:	f107 0320 	add.w	r3, r7, #32
 80015f2:	2230      	movs	r2, #48	@ 0x30
 80015f4:	2100      	movs	r1, #0
 80015f6:	4618      	mov	r0, r3
 80015f8:	f013 ffe2 	bl	80155c0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80015fc:	f107 030c 	add.w	r3, r7, #12
 8001600:	2200      	movs	r2, #0
 8001602:	601a      	str	r2, [r3, #0]
 8001604:	605a      	str	r2, [r3, #4]
 8001606:	609a      	str	r2, [r3, #8]
 8001608:	60da      	str	r2, [r3, #12]
 800160a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800160c:	2300      	movs	r3, #0
 800160e:	60bb      	str	r3, [r7, #8]
 8001610:	4b28      	ldr	r3, [pc, #160]	@ (80016b4 <SystemClock_Config+0xcc>)
 8001612:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001614:	4a27      	ldr	r2, [pc, #156]	@ (80016b4 <SystemClock_Config+0xcc>)
 8001616:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800161a:	6413      	str	r3, [r2, #64]	@ 0x40
 800161c:	4b25      	ldr	r3, [pc, #148]	@ (80016b4 <SystemClock_Config+0xcc>)
 800161e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001620:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001624:	60bb      	str	r3, [r7, #8]
 8001626:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001628:	2300      	movs	r3, #0
 800162a:	607b      	str	r3, [r7, #4]
 800162c:	4b22      	ldr	r3, [pc, #136]	@ (80016b8 <SystemClock_Config+0xd0>)
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	4a21      	ldr	r2, [pc, #132]	@ (80016b8 <SystemClock_Config+0xd0>)
 8001632:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8001636:	6013      	str	r3, [r2, #0]
 8001638:	4b1f      	ldr	r3, [pc, #124]	@ (80016b8 <SystemClock_Config+0xd0>)
 800163a:	681b      	ldr	r3, [r3, #0]
 800163c:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8001640:	607b      	str	r3, [r7, #4]
 8001642:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001644:	2302      	movs	r3, #2
 8001646:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001648:	2301      	movs	r3, #1
 800164a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800164c:	2310      	movs	r3, #16
 800164e:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001650:	2302      	movs	r3, #2
 8001652:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001654:	2300      	movs	r3, #0
 8001656:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 8001658:	2310      	movs	r3, #16
 800165a:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 800165c:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 8001660:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8001662:	2304      	movs	r3, #4
 8001664:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001666:	2304      	movs	r3, #4
 8001668:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800166a:	f107 0320 	add.w	r3, r7, #32
 800166e:	4618      	mov	r0, r3
 8001670:	f001 ffe8 	bl	8003644 <HAL_RCC_OscConfig>
 8001674:	4603      	mov	r3, r0
 8001676:	2b00      	cmp	r3, #0
 8001678:	d001      	beq.n	800167e <SystemClock_Config+0x96>
  {
    Error_Handler();
 800167a:	f000 fbd7 	bl	8001e2c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800167e:	230f      	movs	r3, #15
 8001680:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001682:	2302      	movs	r3, #2
 8001684:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001686:	2300      	movs	r3, #0
 8001688:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800168a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800168e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001690:	2300      	movs	r3, #0
 8001692:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001694:	f107 030c 	add.w	r3, r7, #12
 8001698:	2102      	movs	r1, #2
 800169a:	4618      	mov	r0, r3
 800169c:	f002 fa4a 	bl	8003b34 <HAL_RCC_ClockConfig>
 80016a0:	4603      	mov	r3, r0
 80016a2:	2b00      	cmp	r3, #0
 80016a4:	d001      	beq.n	80016aa <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80016a6:	f000 fbc1 	bl	8001e2c <Error_Handler>
  }
}
 80016aa:	bf00      	nop
 80016ac:	3750      	adds	r7, #80	@ 0x50
 80016ae:	46bd      	mov	sp, r7
 80016b0:	bd80      	pop	{r7, pc}
 80016b2:	bf00      	nop
 80016b4:	40023800 	.word	0x40023800
 80016b8:	40007000 	.word	0x40007000

080016bc <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80016bc:	b580      	push	{r7, lr}
 80016be:	b08e      	sub	sp, #56	@ 0x38
 80016c0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80016c2:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80016c6:	2200      	movs	r2, #0
 80016c8:	601a      	str	r2, [r3, #0]
 80016ca:	605a      	str	r2, [r3, #4]
 80016cc:	609a      	str	r2, [r3, #8]
 80016ce:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80016d0:	f107 0320 	add.w	r3, r7, #32
 80016d4:	2200      	movs	r2, #0
 80016d6:	601a      	str	r2, [r3, #0]
 80016d8:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80016da:	1d3b      	adds	r3, r7, #4
 80016dc:	2200      	movs	r2, #0
 80016de:	601a      	str	r2, [r3, #0]
 80016e0:	605a      	str	r2, [r3, #4]
 80016e2:	609a      	str	r2, [r3, #8]
 80016e4:	60da      	str	r2, [r3, #12]
 80016e6:	611a      	str	r2, [r3, #16]
 80016e8:	615a      	str	r2, [r3, #20]
 80016ea:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80016ec:	4b32      	ldr	r3, [pc, #200]	@ (80017b8 <MX_TIM2_Init+0xfc>)
 80016ee:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80016f2:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 169;
 80016f4:	4b30      	ldr	r3, [pc, #192]	@ (80017b8 <MX_TIM2_Init+0xfc>)
 80016f6:	22a9      	movs	r2, #169	@ 0xa9
 80016f8:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80016fa:	4b2f      	ldr	r3, [pc, #188]	@ (80017b8 <MX_TIM2_Init+0xfc>)
 80016fc:	2200      	movs	r2, #0
 80016fe:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 999;
 8001700:	4b2d      	ldr	r3, [pc, #180]	@ (80017b8 <MX_TIM2_Init+0xfc>)
 8001702:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8001706:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001708:	4b2b      	ldr	r3, [pc, #172]	@ (80017b8 <MX_TIM2_Init+0xfc>)
 800170a:	2200      	movs	r2, #0
 800170c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800170e:	4b2a      	ldr	r3, [pc, #168]	@ (80017b8 <MX_TIM2_Init+0xfc>)
 8001710:	2200      	movs	r2, #0
 8001712:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001714:	4828      	ldr	r0, [pc, #160]	@ (80017b8 <MX_TIM2_Init+0xfc>)
 8001716:	f002 fc5f 	bl	8003fd8 <HAL_TIM_Base_Init>
 800171a:	4603      	mov	r3, r0
 800171c:	2b00      	cmp	r3, #0
 800171e:	d001      	beq.n	8001724 <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 8001720:	f000 fb84 	bl	8001e2c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001724:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001728:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800172a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800172e:	4619      	mov	r1, r3
 8001730:	4821      	ldr	r0, [pc, #132]	@ (80017b8 <MX_TIM2_Init+0xfc>)
 8001732:	f003 f819 	bl	8004768 <HAL_TIM_ConfigClockSource>
 8001736:	4603      	mov	r3, r0
 8001738:	2b00      	cmp	r3, #0
 800173a:	d001      	beq.n	8001740 <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 800173c:	f000 fb76 	bl	8001e2c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8001740:	481d      	ldr	r0, [pc, #116]	@ (80017b8 <MX_TIM2_Init+0xfc>)
 8001742:	f002 fd55 	bl	80041f0 <HAL_TIM_PWM_Init>
 8001746:	4603      	mov	r3, r0
 8001748:	2b00      	cmp	r3, #0
 800174a:	d001      	beq.n	8001750 <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 800174c:	f000 fb6e 	bl	8001e2c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001750:	2300      	movs	r3, #0
 8001752:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001754:	2300      	movs	r3, #0
 8001756:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001758:	f107 0320 	add.w	r3, r7, #32
 800175c:	4619      	mov	r1, r3
 800175e:	4816      	ldr	r0, [pc, #88]	@ (80017b8 <MX_TIM2_Init+0xfc>)
 8001760:	f003 fbca 	bl	8004ef8 <HAL_TIMEx_MasterConfigSynchronization>
 8001764:	4603      	mov	r3, r0
 8001766:	2b00      	cmp	r3, #0
 8001768:	d001      	beq.n	800176e <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 800176a:	f000 fb5f 	bl	8001e2c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800176e:	2360      	movs	r3, #96	@ 0x60
 8001770:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001772:	2300      	movs	r3, #0
 8001774:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001776:	2300      	movs	r3, #0
 8001778:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800177a:	2300      	movs	r3, #0
 800177c:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800177e:	1d3b      	adds	r3, r7, #4
 8001780:	2200      	movs	r2, #0
 8001782:	4619      	mov	r1, r3
 8001784:	480c      	ldr	r0, [pc, #48]	@ (80017b8 <MX_TIM2_Init+0xfc>)
 8001786:	f002 ff2d 	bl	80045e4 <HAL_TIM_PWM_ConfigChannel>
 800178a:	4603      	mov	r3, r0
 800178c:	2b00      	cmp	r3, #0
 800178e:	d001      	beq.n	8001794 <MX_TIM2_Init+0xd8>
  {
    Error_Handler();
 8001790:	f000 fb4c 	bl	8001e2c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001794:	1d3b      	adds	r3, r7, #4
 8001796:	2204      	movs	r2, #4
 8001798:	4619      	mov	r1, r3
 800179a:	4807      	ldr	r0, [pc, #28]	@ (80017b8 <MX_TIM2_Init+0xfc>)
 800179c:	f002 ff22 	bl	80045e4 <HAL_TIM_PWM_ConfigChannel>
 80017a0:	4603      	mov	r3, r0
 80017a2:	2b00      	cmp	r3, #0
 80017a4:	d001      	beq.n	80017aa <MX_TIM2_Init+0xee>
  {
    Error_Handler();
 80017a6:	f000 fb41 	bl	8001e2c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 80017aa:	4803      	ldr	r0, [pc, #12]	@ (80017b8 <MX_TIM2_Init+0xfc>)
 80017ac:	f000 fd0a 	bl	80021c4 <HAL_TIM_MspPostInit>

}
 80017b0:	bf00      	nop
 80017b2:	3738      	adds	r7, #56	@ 0x38
 80017b4:	46bd      	mov	sp, r7
 80017b6:	bd80      	pop	{r7, pc}
 80017b8:	20003d44 	.word	0x20003d44

080017bc <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80017bc:	b580      	push	{r7, lr}
 80017be:	b08e      	sub	sp, #56	@ 0x38
 80017c0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80017c2:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80017c6:	2200      	movs	r2, #0
 80017c8:	601a      	str	r2, [r3, #0]
 80017ca:	605a      	str	r2, [r3, #4]
 80017cc:	609a      	str	r2, [r3, #8]
 80017ce:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80017d0:	f107 0320 	add.w	r3, r7, #32
 80017d4:	2200      	movs	r2, #0
 80017d6:	601a      	str	r2, [r3, #0]
 80017d8:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80017da:	1d3b      	adds	r3, r7, #4
 80017dc:	2200      	movs	r2, #0
 80017de:	601a      	str	r2, [r3, #0]
 80017e0:	605a      	str	r2, [r3, #4]
 80017e2:	609a      	str	r2, [r3, #8]
 80017e4:	60da      	str	r2, [r3, #12]
 80017e6:	611a      	str	r2, [r3, #16]
 80017e8:	615a      	str	r2, [r3, #20]
 80017ea:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80017ec:	4b2c      	ldr	r3, [pc, #176]	@ (80018a0 <MX_TIM3_Init+0xe4>)
 80017ee:	4a2d      	ldr	r2, [pc, #180]	@ (80018a4 <MX_TIM3_Init+0xe8>)
 80017f0:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 169;
 80017f2:	4b2b      	ldr	r3, [pc, #172]	@ (80018a0 <MX_TIM3_Init+0xe4>)
 80017f4:	22a9      	movs	r2, #169	@ 0xa9
 80017f6:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80017f8:	4b29      	ldr	r3, [pc, #164]	@ (80018a0 <MX_TIM3_Init+0xe4>)
 80017fa:	2200      	movs	r2, #0
 80017fc:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 999;
 80017fe:	4b28      	ldr	r3, [pc, #160]	@ (80018a0 <MX_TIM3_Init+0xe4>)
 8001800:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8001804:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001806:	4b26      	ldr	r3, [pc, #152]	@ (80018a0 <MX_TIM3_Init+0xe4>)
 8001808:	2200      	movs	r2, #0
 800180a:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800180c:	4b24      	ldr	r3, [pc, #144]	@ (80018a0 <MX_TIM3_Init+0xe4>)
 800180e:	2200      	movs	r2, #0
 8001810:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001812:	4823      	ldr	r0, [pc, #140]	@ (80018a0 <MX_TIM3_Init+0xe4>)
 8001814:	f002 fbe0 	bl	8003fd8 <HAL_TIM_Base_Init>
 8001818:	4603      	mov	r3, r0
 800181a:	2b00      	cmp	r3, #0
 800181c:	d001      	beq.n	8001822 <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 800181e:	f000 fb05 	bl	8001e2c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001822:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001826:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001828:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800182c:	4619      	mov	r1, r3
 800182e:	481c      	ldr	r0, [pc, #112]	@ (80018a0 <MX_TIM3_Init+0xe4>)
 8001830:	f002 ff9a 	bl	8004768 <HAL_TIM_ConfigClockSource>
 8001834:	4603      	mov	r3, r0
 8001836:	2b00      	cmp	r3, #0
 8001838:	d001      	beq.n	800183e <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 800183a:	f000 faf7 	bl	8001e2c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 800183e:	4818      	ldr	r0, [pc, #96]	@ (80018a0 <MX_TIM3_Init+0xe4>)
 8001840:	f002 fcd6 	bl	80041f0 <HAL_TIM_PWM_Init>
 8001844:	4603      	mov	r3, r0
 8001846:	2b00      	cmp	r3, #0
 8001848:	d001      	beq.n	800184e <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 800184a:	f000 faef 	bl	8001e2c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800184e:	2300      	movs	r3, #0
 8001850:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001852:	2300      	movs	r3, #0
 8001854:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001856:	f107 0320 	add.w	r3, r7, #32
 800185a:	4619      	mov	r1, r3
 800185c:	4810      	ldr	r0, [pc, #64]	@ (80018a0 <MX_TIM3_Init+0xe4>)
 800185e:	f003 fb4b 	bl	8004ef8 <HAL_TIMEx_MasterConfigSynchronization>
 8001862:	4603      	mov	r3, r0
 8001864:	2b00      	cmp	r3, #0
 8001866:	d001      	beq.n	800186c <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 8001868:	f000 fae0 	bl	8001e2c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800186c:	2360      	movs	r3, #96	@ 0x60
 800186e:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001870:	2300      	movs	r3, #0
 8001872:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001874:	2300      	movs	r3, #0
 8001876:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001878:	2300      	movs	r3, #0
 800187a:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800187c:	1d3b      	adds	r3, r7, #4
 800187e:	2200      	movs	r2, #0
 8001880:	4619      	mov	r1, r3
 8001882:	4807      	ldr	r0, [pc, #28]	@ (80018a0 <MX_TIM3_Init+0xe4>)
 8001884:	f002 feae 	bl	80045e4 <HAL_TIM_PWM_ConfigChannel>
 8001888:	4603      	mov	r3, r0
 800188a:	2b00      	cmp	r3, #0
 800188c:	d001      	beq.n	8001892 <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 800188e:	f000 facd 	bl	8001e2c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8001892:	4803      	ldr	r0, [pc, #12]	@ (80018a0 <MX_TIM3_Init+0xe4>)
 8001894:	f000 fc96 	bl	80021c4 <HAL_TIM_MspPostInit>

}
 8001898:	bf00      	nop
 800189a:	3738      	adds	r7, #56	@ 0x38
 800189c:	46bd      	mov	sp, r7
 800189e:	bd80      	pop	{r7, pc}
 80018a0:	20003d8c 	.word	0x20003d8c
 80018a4:	40000400 	.word	0x40000400

080018a8 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80018a8:	b580      	push	{r7, lr}
 80018aa:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80018ac:	4b11      	ldr	r3, [pc, #68]	@ (80018f4 <MX_USART2_UART_Init+0x4c>)
 80018ae:	4a12      	ldr	r2, [pc, #72]	@ (80018f8 <MX_USART2_UART_Init+0x50>)
 80018b0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80018b2:	4b10      	ldr	r3, [pc, #64]	@ (80018f4 <MX_USART2_UART_Init+0x4c>)
 80018b4:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80018b8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80018ba:	4b0e      	ldr	r3, [pc, #56]	@ (80018f4 <MX_USART2_UART_Init+0x4c>)
 80018bc:	2200      	movs	r2, #0
 80018be:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80018c0:	4b0c      	ldr	r3, [pc, #48]	@ (80018f4 <MX_USART2_UART_Init+0x4c>)
 80018c2:	2200      	movs	r2, #0
 80018c4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80018c6:	4b0b      	ldr	r3, [pc, #44]	@ (80018f4 <MX_USART2_UART_Init+0x4c>)
 80018c8:	2200      	movs	r2, #0
 80018ca:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80018cc:	4b09      	ldr	r3, [pc, #36]	@ (80018f4 <MX_USART2_UART_Init+0x4c>)
 80018ce:	220c      	movs	r2, #12
 80018d0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80018d2:	4b08      	ldr	r3, [pc, #32]	@ (80018f4 <MX_USART2_UART_Init+0x4c>)
 80018d4:	2200      	movs	r2, #0
 80018d6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80018d8:	4b06      	ldr	r3, [pc, #24]	@ (80018f4 <MX_USART2_UART_Init+0x4c>)
 80018da:	2200      	movs	r2, #0
 80018dc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80018de:	4805      	ldr	r0, [pc, #20]	@ (80018f4 <MX_USART2_UART_Init+0x4c>)
 80018e0:	f003 fb8c 	bl	8004ffc <HAL_UART_Init>
 80018e4:	4603      	mov	r3, r0
 80018e6:	2b00      	cmp	r3, #0
 80018e8:	d001      	beq.n	80018ee <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80018ea:	f000 fa9f 	bl	8001e2c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80018ee:	bf00      	nop
 80018f0:	bd80      	pop	{r7, pc}
 80018f2:	bf00      	nop
 80018f4:	20003dd4 	.word	0x20003dd4
 80018f8:	40004400 	.word	0x40004400

080018fc <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80018fc:	b580      	push	{r7, lr}
 80018fe:	b082      	sub	sp, #8
 8001900:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001902:	2300      	movs	r3, #0
 8001904:	607b      	str	r3, [r7, #4]
 8001906:	4b10      	ldr	r3, [pc, #64]	@ (8001948 <MX_DMA_Init+0x4c>)
 8001908:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800190a:	4a0f      	ldr	r2, [pc, #60]	@ (8001948 <MX_DMA_Init+0x4c>)
 800190c:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001910:	6313      	str	r3, [r2, #48]	@ 0x30
 8001912:	4b0d      	ldr	r3, [pc, #52]	@ (8001948 <MX_DMA_Init+0x4c>)
 8001914:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001916:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800191a:	607b      	str	r3, [r7, #4]
 800191c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 5, 0);
 800191e:	2200      	movs	r2, #0
 8001920:	2105      	movs	r1, #5
 8001922:	2010      	movs	r0, #16
 8001924:	f001 f8c4 	bl	8002ab0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8001928:	2010      	movs	r0, #16
 800192a:	f001 f8dd 	bl	8002ae8 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 5, 0);
 800192e:	2200      	movs	r2, #0
 8001930:	2105      	movs	r1, #5
 8001932:	2011      	movs	r0, #17
 8001934:	f001 f8bc 	bl	8002ab0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 8001938:	2011      	movs	r0, #17
 800193a:	f001 f8d5 	bl	8002ae8 <HAL_NVIC_EnableIRQ>

}
 800193e:	bf00      	nop
 8001940:	3708      	adds	r7, #8
 8001942:	46bd      	mov	sp, r7
 8001944:	bd80      	pop	{r7, pc}
 8001946:	bf00      	nop
 8001948:	40023800 	.word	0x40023800

0800194c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800194c:	b580      	push	{r7, lr}
 800194e:	b08a      	sub	sp, #40	@ 0x28
 8001950:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001952:	f107 0314 	add.w	r3, r7, #20
 8001956:	2200      	movs	r2, #0
 8001958:	601a      	str	r2, [r3, #0]
 800195a:	605a      	str	r2, [r3, #4]
 800195c:	609a      	str	r2, [r3, #8]
 800195e:	60da      	str	r2, [r3, #12]
 8001960:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001962:	2300      	movs	r3, #0
 8001964:	613b      	str	r3, [r7, #16]
 8001966:	4b39      	ldr	r3, [pc, #228]	@ (8001a4c <MX_GPIO_Init+0x100>)
 8001968:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800196a:	4a38      	ldr	r2, [pc, #224]	@ (8001a4c <MX_GPIO_Init+0x100>)
 800196c:	f043 0304 	orr.w	r3, r3, #4
 8001970:	6313      	str	r3, [r2, #48]	@ 0x30
 8001972:	4b36      	ldr	r3, [pc, #216]	@ (8001a4c <MX_GPIO_Init+0x100>)
 8001974:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001976:	f003 0304 	and.w	r3, r3, #4
 800197a:	613b      	str	r3, [r7, #16]
 800197c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800197e:	2300      	movs	r3, #0
 8001980:	60fb      	str	r3, [r7, #12]
 8001982:	4b32      	ldr	r3, [pc, #200]	@ (8001a4c <MX_GPIO_Init+0x100>)
 8001984:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001986:	4a31      	ldr	r2, [pc, #196]	@ (8001a4c <MX_GPIO_Init+0x100>)
 8001988:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800198c:	6313      	str	r3, [r2, #48]	@ 0x30
 800198e:	4b2f      	ldr	r3, [pc, #188]	@ (8001a4c <MX_GPIO_Init+0x100>)
 8001990:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001992:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001996:	60fb      	str	r3, [r7, #12]
 8001998:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800199a:	2300      	movs	r3, #0
 800199c:	60bb      	str	r3, [r7, #8]
 800199e:	4b2b      	ldr	r3, [pc, #172]	@ (8001a4c <MX_GPIO_Init+0x100>)
 80019a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80019a2:	4a2a      	ldr	r2, [pc, #168]	@ (8001a4c <MX_GPIO_Init+0x100>)
 80019a4:	f043 0301 	orr.w	r3, r3, #1
 80019a8:	6313      	str	r3, [r2, #48]	@ 0x30
 80019aa:	4b28      	ldr	r3, [pc, #160]	@ (8001a4c <MX_GPIO_Init+0x100>)
 80019ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80019ae:	f003 0301 	and.w	r3, r3, #1
 80019b2:	60bb      	str	r3, [r7, #8]
 80019b4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80019b6:	2300      	movs	r3, #0
 80019b8:	607b      	str	r3, [r7, #4]
 80019ba:	4b24      	ldr	r3, [pc, #144]	@ (8001a4c <MX_GPIO_Init+0x100>)
 80019bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80019be:	4a23      	ldr	r2, [pc, #140]	@ (8001a4c <MX_GPIO_Init+0x100>)
 80019c0:	f043 0302 	orr.w	r3, r3, #2
 80019c4:	6313      	str	r3, [r2, #48]	@ 0x30
 80019c6:	4b21      	ldr	r3, [pc, #132]	@ (8001a4c <MX_GPIO_Init+0x100>)
 80019c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80019ca:	f003 0302 	and.w	r3, r3, #2
 80019ce:	607b      	str	r3, [r7, #4]
 80019d0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7|GPIO_PIN_9, GPIO_PIN_RESET);
 80019d2:	2200      	movs	r2, #0
 80019d4:	f44f 7120 	mov.w	r1, #640	@ 0x280
 80019d8:	481d      	ldr	r0, [pc, #116]	@ (8001a50 <MX_GPIO_Init+0x104>)
 80019da:	f001 fe19 	bl	8003610 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8, GPIO_PIN_RESET);
 80019de:	2200      	movs	r2, #0
 80019e0:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80019e4:	481b      	ldr	r0, [pc, #108]	@ (8001a54 <MX_GPIO_Init+0x108>)
 80019e6:	f001 fe13 	bl	8003610 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80019ea:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80019ee:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80019f0:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 80019f4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019f6:	2300      	movs	r3, #0
 80019f8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80019fa:	f107 0314 	add.w	r3, r7, #20
 80019fe:	4619      	mov	r1, r3
 8001a00:	4815      	ldr	r0, [pc, #84]	@ (8001a58 <MX_GPIO_Init+0x10c>)
 8001a02:	f001 fc81 	bl	8003308 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA7 PA9 */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_9;
 8001a06:	f44f 7320 	mov.w	r3, #640	@ 0x280
 8001a0a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a0c:	2301      	movs	r3, #1
 8001a0e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a10:	2300      	movs	r3, #0
 8001a12:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a14:	2300      	movs	r3, #0
 8001a16:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a18:	f107 0314 	add.w	r3, r7, #20
 8001a1c:	4619      	mov	r1, r3
 8001a1e:	480c      	ldr	r0, [pc, #48]	@ (8001a50 <MX_GPIO_Init+0x104>)
 8001a20:	f001 fc72 	bl	8003308 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001a24:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001a28:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a2a:	2301      	movs	r3, #1
 8001a2c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a2e:	2300      	movs	r3, #0
 8001a30:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a32:	2300      	movs	r3, #0
 8001a34:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001a36:	f107 0314 	add.w	r3, r7, #20
 8001a3a:	4619      	mov	r1, r3
 8001a3c:	4805      	ldr	r0, [pc, #20]	@ (8001a54 <MX_GPIO_Init+0x108>)
 8001a3e:	f001 fc63 	bl	8003308 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001a42:	bf00      	nop
 8001a44:	3728      	adds	r7, #40	@ 0x28
 8001a46:	46bd      	mov	sp, r7
 8001a48:	bd80      	pop	{r7, pc}
 8001a4a:	bf00      	nop
 8001a4c:	40023800 	.word	0x40023800
 8001a50:	40020000 	.word	0x40020000
 8001a54:	40020400 	.word	0x40020400
 8001a58:	40020800 	.word	0x40020800

08001a5c <StpperMotorControlled>:
    // Map from 1000-2010 to Min-Max
    return (int16_t)(((int32_t)(inputValue - 1000) * (Max - Min)) / 1010 + Min);
}

void StpperMotorControlled()
{
 8001a5c:	b580      	push	{r7, lr}
 8001a5e:	af00      	add	r7, sp, #0
	if (Speed_L < -170){
 8001a60:	4b49      	ldr	r3, [pc, #292]	@ (8001b88 <StpperMotorControlled+0x12c>)
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	f113 0faa 	cmn.w	r3, #170	@ 0xaa
 8001a68:	da1b      	bge.n	8001aa2 <StpperMotorControlled+0x46>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, SET);
 8001a6a:	2201      	movs	r2, #1
 8001a6c:	2180      	movs	r1, #128	@ 0x80
 8001a6e:	4847      	ldr	r0, [pc, #284]	@ (8001b8c <StpperMotorControlled+0x130>)
 8001a70:	f001 fdce 	bl	8003610 <HAL_GPIO_WritePin>
		PWM_write_duty(&StepperL, fabs(Speed_L), 50);
 8001a74:	4b44      	ldr	r3, [pc, #272]	@ (8001b88 <StpperMotorControlled+0x12c>)
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	4618      	mov	r0, r3
 8001a7a:	f7fe fd6b 	bl	8000554 <__aeabi_i2d>
 8001a7e:	4602      	mov	r2, r0
 8001a80:	460b      	mov	r3, r1
 8001a82:	4610      	mov	r0, r2
 8001a84:	4619      	mov	r1, r3
 8001a86:	f7ff f801 	bl	8000a8c <__aeabi_d2f>
 8001a8a:	ee07 0a90 	vmov	s15, r0
 8001a8e:	eef0 7ae7 	vabs.f32	s15, s15
 8001a92:	eddf 0a3f 	vldr	s1, [pc, #252]	@ 8001b90 <StpperMotorControlled+0x134>
 8001a96:	eeb0 0a67 	vmov.f32	s0, s15
 8001a9a:	483e      	ldr	r0, [pc, #248]	@ (8001b94 <StpperMotorControlled+0x138>)
 8001a9c:	f7ff fa30 	bl	8000f00 <PWM_write_duty>
 8001aa0:	e026      	b.n	8001af0 <StpperMotorControlled+0x94>
	}
	else if (Speed_L > 170){
 8001aa2:	4b39      	ldr	r3, [pc, #228]	@ (8001b88 <StpperMotorControlled+0x12c>)
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	2baa      	cmp	r3, #170	@ 0xaa
 8001aa8:	dd1b      	ble.n	8001ae2 <StpperMotorControlled+0x86>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, RESET);
 8001aaa:	2200      	movs	r2, #0
 8001aac:	2180      	movs	r1, #128	@ 0x80
 8001aae:	4837      	ldr	r0, [pc, #220]	@ (8001b8c <StpperMotorControlled+0x130>)
 8001ab0:	f001 fdae 	bl	8003610 <HAL_GPIO_WritePin>
		PWM_write_duty(&StepperL, fabs(Speed_L), 50);
 8001ab4:	4b34      	ldr	r3, [pc, #208]	@ (8001b88 <StpperMotorControlled+0x12c>)
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	4618      	mov	r0, r3
 8001aba:	f7fe fd4b 	bl	8000554 <__aeabi_i2d>
 8001abe:	4602      	mov	r2, r0
 8001ac0:	460b      	mov	r3, r1
 8001ac2:	4610      	mov	r0, r2
 8001ac4:	4619      	mov	r1, r3
 8001ac6:	f7fe ffe1 	bl	8000a8c <__aeabi_d2f>
 8001aca:	ee07 0a90 	vmov	s15, r0
 8001ace:	eef0 7ae7 	vabs.f32	s15, s15
 8001ad2:	eddf 0a2f 	vldr	s1, [pc, #188]	@ 8001b90 <StpperMotorControlled+0x134>
 8001ad6:	eeb0 0a67 	vmov.f32	s0, s15
 8001ada:	482e      	ldr	r0, [pc, #184]	@ (8001b94 <StpperMotorControlled+0x138>)
 8001adc:	f7ff fa10 	bl	8000f00 <PWM_write_duty>
 8001ae0:	e006      	b.n	8001af0 <StpperMotorControlled+0x94>
	}
	else{
		PWM_write_duty(&StepperL, 0, 50);
 8001ae2:	eddf 0a2b 	vldr	s1, [pc, #172]	@ 8001b90 <StpperMotorControlled+0x134>
 8001ae6:	ed9f 0a2c 	vldr	s0, [pc, #176]	@ 8001b98 <StpperMotorControlled+0x13c>
 8001aea:	482a      	ldr	r0, [pc, #168]	@ (8001b94 <StpperMotorControlled+0x138>)
 8001aec:	f7ff fa08 	bl	8000f00 <PWM_write_duty>
	}

	if (Speed_R < -170){
 8001af0:	4b2a      	ldr	r3, [pc, #168]	@ (8001b9c <StpperMotorControlled+0x140>)
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	f113 0faa 	cmn.w	r3, #170	@ 0xaa
 8001af8:	da1c      	bge.n	8001b34 <StpperMotorControlled+0xd8>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, RESET);
 8001afa:	2200      	movs	r2, #0
 8001afc:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001b00:	4822      	ldr	r0, [pc, #136]	@ (8001b8c <StpperMotorControlled+0x130>)
 8001b02:	f001 fd85 	bl	8003610 <HAL_GPIO_WritePin>
		PWM_write_duty(&StepperR, fabs(Speed_R), 50);
 8001b06:	4b25      	ldr	r3, [pc, #148]	@ (8001b9c <StpperMotorControlled+0x140>)
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	4618      	mov	r0, r3
 8001b0c:	f7fe fd22 	bl	8000554 <__aeabi_i2d>
 8001b10:	4602      	mov	r2, r0
 8001b12:	460b      	mov	r3, r1
 8001b14:	4610      	mov	r0, r2
 8001b16:	4619      	mov	r1, r3
 8001b18:	f7fe ffb8 	bl	8000a8c <__aeabi_d2f>
 8001b1c:	ee07 0a90 	vmov	s15, r0
 8001b20:	eef0 7ae7 	vabs.f32	s15, s15
 8001b24:	eddf 0a1a 	vldr	s1, [pc, #104]	@ 8001b90 <StpperMotorControlled+0x134>
 8001b28:	eeb0 0a67 	vmov.f32	s0, s15
 8001b2c:	481c      	ldr	r0, [pc, #112]	@ (8001ba0 <StpperMotorControlled+0x144>)
 8001b2e:	f7ff f9e7 	bl	8000f00 <PWM_write_duty>
//				PWM_write_duty(&StepperL, 0, 50);
//				PWM_write_duty(&StepperR, 0, 50);
//			}
//		}
//	}
}
 8001b32:	e027      	b.n	8001b84 <StpperMotorControlled+0x128>
	else if (Speed_R > 170){
 8001b34:	4b19      	ldr	r3, [pc, #100]	@ (8001b9c <StpperMotorControlled+0x140>)
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	2baa      	cmp	r3, #170	@ 0xaa
 8001b3a:	dd1c      	ble.n	8001b76 <StpperMotorControlled+0x11a>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, SET);
 8001b3c:	2201      	movs	r2, #1
 8001b3e:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001b42:	4812      	ldr	r0, [pc, #72]	@ (8001b8c <StpperMotorControlled+0x130>)
 8001b44:	f001 fd64 	bl	8003610 <HAL_GPIO_WritePin>
		PWM_write_duty(&StepperR, fabs(Speed_R), 50);
 8001b48:	4b14      	ldr	r3, [pc, #80]	@ (8001b9c <StpperMotorControlled+0x140>)
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	4618      	mov	r0, r3
 8001b4e:	f7fe fd01 	bl	8000554 <__aeabi_i2d>
 8001b52:	4602      	mov	r2, r0
 8001b54:	460b      	mov	r3, r1
 8001b56:	4610      	mov	r0, r2
 8001b58:	4619      	mov	r1, r3
 8001b5a:	f7fe ff97 	bl	8000a8c <__aeabi_d2f>
 8001b5e:	ee07 0a90 	vmov	s15, r0
 8001b62:	eef0 7ae7 	vabs.f32	s15, s15
 8001b66:	eddf 0a0a 	vldr	s1, [pc, #40]	@ 8001b90 <StpperMotorControlled+0x134>
 8001b6a:	eeb0 0a67 	vmov.f32	s0, s15
 8001b6e:	480c      	ldr	r0, [pc, #48]	@ (8001ba0 <StpperMotorControlled+0x144>)
 8001b70:	f7ff f9c6 	bl	8000f00 <PWM_write_duty>
}
 8001b74:	e006      	b.n	8001b84 <StpperMotorControlled+0x128>
		PWM_write_duty(&StepperR, 0, 50);
 8001b76:	eddf 0a06 	vldr	s1, [pc, #24]	@ 8001b90 <StpperMotorControlled+0x134>
 8001b7a:	ed9f 0a07 	vldr	s0, [pc, #28]	@ 8001b98 <StpperMotorControlled+0x13c>
 8001b7e:	4808      	ldr	r0, [pc, #32]	@ (8001ba0 <StpperMotorControlled+0x144>)
 8001b80:	f7ff f9be 	bl	8000f00 <PWM_write_duty>
}
 8001b84:	bf00      	nop
 8001b86:	bd80      	pop	{r7, pc}
 8001b88:	20003ee0 	.word	0x20003ee0
 8001b8c:	40020000 	.word	0x40020000
 8001b90:	42480000 	.word	0x42480000
 8001b94:	20003eec 	.word	0x20003eec
 8001b98:	00000000 	.word	0x00000000
 8001b9c:	20003ee4 	.word	0x20003ee4
 8001ba0:	20003f04 	.word	0x20003f04

08001ba4 <BrusheMotorControlled>:
void BrusheMotorControlled()
{
 8001ba4:	b580      	push	{r7, lr}
 8001ba6:	af00      	add	r7, sp, #0
	if (Brush)
 8001ba8:	4b0d      	ldr	r3, [pc, #52]	@ (8001be0 <BrusheMotorControlled+0x3c>)
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	2b00      	cmp	r3, #0
 8001bae:	d00d      	beq.n	8001bcc <BrusheMotorControlled+0x28>
	{
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8, RESET);
 8001bb0:	2200      	movs	r2, #0
 8001bb2:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001bb6:	480b      	ldr	r0, [pc, #44]	@ (8001be4 <BrusheMotorControlled+0x40>)
 8001bb8:	f001 fd2a 	bl	8003610 <HAL_GPIO_WritePin>
		PWM_write_duty(&BrushMTR, 2000, 100);
 8001bbc:	eddf 0a0a 	vldr	s1, [pc, #40]	@ 8001be8 <BrusheMotorControlled+0x44>
 8001bc0:	ed9f 0a0a 	vldr	s0, [pc, #40]	@ 8001bec <BrusheMotorControlled+0x48>
 8001bc4:	480a      	ldr	r0, [pc, #40]	@ (8001bf0 <BrusheMotorControlled+0x4c>)
 8001bc6:	f7ff f99b 	bl	8000f00 <PWM_write_duty>
	}
	else
	{
		PWM_write_duty(&BrushMTR, 2000, 0);
	}
}
 8001bca:	e006      	b.n	8001bda <BrusheMotorControlled+0x36>
		PWM_write_duty(&BrushMTR, 2000, 0);
 8001bcc:	eddf 0a09 	vldr	s1, [pc, #36]	@ 8001bf4 <BrusheMotorControlled+0x50>
 8001bd0:	ed9f 0a06 	vldr	s0, [pc, #24]	@ 8001bec <BrusheMotorControlled+0x48>
 8001bd4:	4806      	ldr	r0, [pc, #24]	@ (8001bf0 <BrusheMotorControlled+0x4c>)
 8001bd6:	f7ff f993 	bl	8000f00 <PWM_write_duty>
}
 8001bda:	bf00      	nop
 8001bdc:	bd80      	pop	{r7, pc}
 8001bde:	bf00      	nop
 8001be0:	20003ee8 	.word	0x20003ee8
 8001be4:	40020400 	.word	0x40020400
 8001be8:	42c80000 	.word	0x42c80000
 8001bec:	44fa0000 	.word	0x44fa0000
 8001bf0:	20003f1c 	.word	0x20003f1c
 8001bf4:	00000000 	.word	0x00000000

08001bf8 <subscription_callback>:

void subscription_callback(const void * msgin)
{
 8001bf8:	b480      	push	{r7}
 8001bfa:	b085      	sub	sp, #20
 8001bfc:	af00      	add	r7, sp, #0
 8001bfe:	6078      	str	r0, [r7, #4]
    const std_msgs__msg__Int32 * msg = (const std_msgs__msg__Int32 *)msgin;
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	60fb      	str	r3, [r7, #12]

//    Speed = msg->data;
    Speed_L = msg->data;
 8001c04:	68fb      	ldr	r3, [r7, #12]
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	4a03      	ldr	r2, [pc, #12]	@ (8001c18 <subscription_callback+0x20>)
 8001c0a:	6013      	str	r3, [r2, #0]
}
 8001c0c:	bf00      	nop
 8001c0e:	3714      	adds	r7, #20
 8001c10:	46bd      	mov	sp, r7
 8001c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c16:	4770      	bx	lr
 8001c18:	20003ee0 	.word	0x20003ee0

08001c1c <subscription_callback_R>:

void subscription_callback_R(const void * msgin)
{
 8001c1c:	b480      	push	{r7}
 8001c1e:	b085      	sub	sp, #20
 8001c20:	af00      	add	r7, sp, #0
 8001c22:	6078      	str	r0, [r7, #4]
    const std_msgs__msg__Int32 * msg = (const std_msgs__msg__Int32 *)msgin;
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	60fb      	str	r3, [r7, #12]
    Speed_R = msg->data;  // Update Turn (or handle the message however you need)
 8001c28:	68fb      	ldr	r3, [r7, #12]
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	4a03      	ldr	r2, [pc, #12]	@ (8001c3c <subscription_callback_R+0x20>)
 8001c2e:	6013      	str	r3, [r2, #0]
}
 8001c30:	bf00      	nop
 8001c32:	3714      	adds	r7, #20
 8001c34:	46bd      	mov	sp, r7
 8001c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c3a:	4770      	bx	lr
 8001c3c:	20003ee4 	.word	0x20003ee4

08001c40 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8001c40:	b5b0      	push	{r4, r5, r7, lr}
 8001c42:	b0cc      	sub	sp, #304	@ 0x130
 8001c44:	af02      	add	r7, sp, #8
 8001c46:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 8001c4a:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8001c4e:	6018      	str	r0, [r3, #0]
//    msg.data++;
//    osDelay(10);
//    rclc_executor_spin_some(&executor, RCL_MS_TO_NS(100));
//  }
//
	 setenv("ROS_DOMAIN_ID", "1", 1);
 8001c50:	2201      	movs	r2, #1
 8001c52:	495b      	ldr	r1, [pc, #364]	@ (8001dc0 <StartDefaultTask+0x180>)
 8001c54:	485b      	ldr	r0, [pc, #364]	@ (8001dc4 <StartDefaultTask+0x184>)
 8001c56:	f013 fa63 	bl	8015120 <setenv>


	 rmw_uros_set_custom_transport(
 8001c5a:	4b5b      	ldr	r3, [pc, #364]	@ (8001dc8 <StartDefaultTask+0x188>)
 8001c5c:	9301      	str	r3, [sp, #4]
 8001c5e:	4b5b      	ldr	r3, [pc, #364]	@ (8001dcc <StartDefaultTask+0x18c>)
 8001c60:	9300      	str	r3, [sp, #0]
 8001c62:	4b5b      	ldr	r3, [pc, #364]	@ (8001dd0 <StartDefaultTask+0x190>)
 8001c64:	4a5b      	ldr	r2, [pc, #364]	@ (8001dd4 <StartDefaultTask+0x194>)
 8001c66:	495c      	ldr	r1, [pc, #368]	@ (8001dd8 <StartDefaultTask+0x198>)
 8001c68:	2001      	movs	r0, #1
 8001c6a:	f008 fab9 	bl	800a1e0 <rmw_uros_set_custom_transport>
	    cubemx_transport_open,
	    cubemx_transport_close,
	    cubemx_transport_write,
	    cubemx_transport_read);

	  rcl_allocator_t freeRTOS_allocator = rcutils_get_zero_initialized_allocator();
 8001c6e:	f507 738a 	add.w	r3, r7, #276	@ 0x114
 8001c72:	4618      	mov	r0, r3
 8001c74:	f008 f9d4 	bl	800a020 <rcutils_get_zero_initialized_allocator>
	  freeRTOS_allocator.allocate = microros_allocate;
 8001c78:	4b58      	ldr	r3, [pc, #352]	@ (8001ddc <StartDefaultTask+0x19c>)
 8001c7a:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
	  freeRTOS_allocator.deallocate = microros_deallocate;
 8001c7e:	4b58      	ldr	r3, [pc, #352]	@ (8001de0 <StartDefaultTask+0x1a0>)
 8001c80:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
	  freeRTOS_allocator.reallocate = microros_reallocate;
 8001c84:	4b57      	ldr	r3, [pc, #348]	@ (8001de4 <StartDefaultTask+0x1a4>)
 8001c86:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
	  freeRTOS_allocator.zero_allocate = microros_zero_allocate;
 8001c8a:	4b57      	ldr	r3, [pc, #348]	@ (8001de8 <StartDefaultTask+0x1a8>)
 8001c8c:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120

	  if (!rcutils_set_default_allocator(&freeRTOS_allocator)) {
 8001c90:	f507 738a 	add.w	r3, r7, #276	@ 0x114
 8001c94:	4618      	mov	r0, r3
 8001c96:	f008 f9d1 	bl	800a03c <rcutils_set_default_allocator>
 8001c9a:	4603      	mov	r3, r0
 8001c9c:	f083 0301 	eor.w	r3, r3, #1
 8001ca0:	b2db      	uxtb	r3, r3
 8001ca2:	2b00      	cmp	r3, #0
 8001ca4:	d004      	beq.n	8001cb0 <StartDefaultTask+0x70>
	      printf("Error on default allocators (line %d)\n", __LINE__);
 8001ca6:	f240 21ae 	movw	r1, #686	@ 0x2ae
 8001caa:	4850      	ldr	r0, [pc, #320]	@ (8001dec <StartDefaultTask+0x1ac>)
 8001cac:	f013 fb9c 	bl	80153e8 <iprintf>
	  rclc_support_t support;
	  rcl_allocator_t allocator;
	  rcl_node_t node;
	  rclc_executor_t executor;

	  allocator = rcl_get_default_allocator();
 8001cb0:	463b      	mov	r3, r7
 8001cb2:	4618      	mov	r0, r3
 8001cb4:	f008 f9e0 	bl	800a078 <rcutils_get_default_allocator>
 8001cb8:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 8001cbc:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8001cc0:	f107 04bc 	add.w	r4, r7, #188	@ 0xbc
 8001cc4:	461d      	mov	r5, r3
 8001cc6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001cc8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001cca:	682b      	ldr	r3, [r5, #0]
 8001ccc:	6023      	str	r3, [r4, #0]

	  rcl_init_options_t init_options = rcl_get_zero_initialized_init_options();
 8001cce:	f007 f9e3 	bl	8009098 <rcl_get_zero_initialized_init_options>
 8001cd2:	4602      	mov	r2, r0
 8001cd4:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 8001cd8:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8001cdc:	601a      	str	r2, [r3, #0]
	  rcl_init_options_init(&init_options, allocator);
 8001cde:	f107 0424 	add.w	r4, r7, #36	@ 0x24
 8001ce2:	466a      	mov	r2, sp
 8001ce4:	f107 03c8 	add.w	r3, r7, #200	@ 0xc8
 8001ce8:	e893 0003 	ldmia.w	r3, {r0, r1}
 8001cec:	e882 0003 	stmia.w	r2, {r0, r1}
 8001cf0:	f107 03bc 	add.w	r3, r7, #188	@ 0xbc
 8001cf4:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001cf6:	4620      	mov	r0, r4
 8001cf8:	f007 f9d0 	bl	800909c <rcl_init_options_init>
	  rcl_init_options_set_domain_id(&init_options, 1);
 8001cfc:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001d00:	2101      	movs	r1, #1
 8001d02:	4618      	mov	r0, r3
 8001d04:	f007 fac6 	bl	8009294 <rcl_init_options_set_domain_id>

	  // Initialize rclc support object with custom options
//	  rclc_support_t support;
	  rclc_support_init_with_options(&support, 0, NULL, &init_options, &allocator);
 8001d08:	f107 0224 	add.w	r2, r7, #36	@ 0x24
 8001d0c:	f107 00d0 	add.w	r0, r7, #208	@ 0xd0
 8001d10:	f107 03bc 	add.w	r3, r7, #188	@ 0xbc
 8001d14:	9300      	str	r3, [sp, #0]
 8001d16:	4613      	mov	r3, r2
 8001d18:	2200      	movs	r2, #0
 8001d1a:	2100      	movs	r1, #0
 8001d1c:	f008 f8d4 	bl	8009ec8 <rclc_support_init_with_options>
	  // Create init_options
//	  rclc_support_init(&support, 0, NULL, &allocator);
//	  rclc_support_init_with_options(&support, 0, NULL, &init_options, &allocator);

	  // Create node
	  rclc_node_init_default(&node, "cubemx_node", "", &support);
 8001d20:	f107 03d0 	add.w	r3, r7, #208	@ 0xd0
 8001d24:	f107 00b4 	add.w	r0, r7, #180	@ 0xb4
 8001d28:	4a31      	ldr	r2, [pc, #196]	@ (8001df0 <StartDefaultTask+0x1b0>)
 8001d2a:	4932      	ldr	r1, [pc, #200]	@ (8001df4 <StartDefaultTask+0x1b4>)
 8001d2c:	f008 f900 	bl	8009f30 <rclc_node_init_default>

	  // Create subscriber
	  rclc_subscription_init_default(
 8001d30:	f009 fb52 	bl	800b3d8 <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Int32>
 8001d34:	4602      	mov	r2, r0
 8001d36:	f107 01b4 	add.w	r1, r7, #180	@ 0xb4
 8001d3a:	f507 7088 	add.w	r0, r7, #272	@ 0x110
 8001d3e:	4b2e      	ldr	r3, [pc, #184]	@ (8001df8 <StartDefaultTask+0x1b8>)
 8001d40:	f008 f932 	bl	8009fa8 <rclc_subscription_init_default>
	    &subscriber,
	    &node,
	    ROSIDL_GET_MSG_TYPE_SUPPORT(std_msgs, msg, Int32),
	    "cubemx_publisher");

	    rclc_subscription_init_default(
 8001d44:	f009 fb48 	bl	800b3d8 <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Int32>
 8001d48:	4602      	mov	r2, r0
 8001d4a:	f107 01b4 	add.w	r1, r7, #180	@ 0xb4
 8001d4e:	f507 7086 	add.w	r0, r7, #268	@ 0x10c
 8001d52:	4b2a      	ldr	r3, [pc, #168]	@ (8001dfc <StartDefaultTask+0x1bc>)
 8001d54:	f008 f928 	bl	8009fa8 <rclc_subscription_init_default>
	        ROSIDL_GET_MSG_TYPE_SUPPORT(std_msgs, msg, Int32),
	        "cubemx_publisher_R");


	  // Initialize the executor
	  rclc_executor_init(&executor, &support.context, 2, &allocator);
 8001d58:	f107 03bc 	add.w	r3, r7, #188	@ 0xbc
 8001d5c:	f107 01d0 	add.w	r1, r7, #208	@ 0xd0
 8001d60:	f107 0028 	add.w	r0, r7, #40	@ 0x28
 8001d64:	2202      	movs	r2, #2
 8001d66:	f007 fde7 	bl	8009938 <rclc_executor_init>

	  // Add the subscriber callback to the executor
	  rclc_executor_add_subscription(&executor, &subscriber, &msg, subscription_callback, ON_NEW_DATA);
 8001d6a:	f507 7284 	add.w	r2, r7, #264	@ 0x108
 8001d6e:	f507 7188 	add.w	r1, r7, #272	@ 0x110
 8001d72:	f107 0028 	add.w	r0, r7, #40	@ 0x28
 8001d76:	2300      	movs	r3, #0
 8001d78:	9300      	str	r3, [sp, #0]
 8001d7a:	4b21      	ldr	r3, [pc, #132]	@ (8001e00 <StartDefaultTask+0x1c0>)
 8001d7c:	f007 fe4c 	bl	8009a18 <rclc_executor_add_subscription>

	  rclc_executor_add_subscription(&executor, &subscriber_R, &msg_R, subscription_callback_R, ON_NEW_DATA);
 8001d80:	f507 7282 	add.w	r2, r7, #260	@ 0x104
 8001d84:	f507 7186 	add.w	r1, r7, #268	@ 0x10c
 8001d88:	f107 0028 	add.w	r0, r7, #40	@ 0x28
 8001d8c:	2300      	movs	r3, #0
 8001d8e:	9300      	str	r3, [sp, #0]
 8001d90:	4b1c      	ldr	r3, [pc, #112]	@ (8001e04 <StartDefaultTask+0x1c4>)
 8001d92:	f007 fe41 	bl	8009a18 <rclc_executor_add_subscription>


	  for(;;)
	  {
	    // Spin the executor to handle incoming messages
		StpperMotorControlled();
 8001d96:	f7ff fe61 	bl	8001a5c <StpperMotorControlled>
		BrusheMotorControlled();
 8001d9a:	f7ff ff03 	bl	8001ba4 <BrusheMotorControlled>
	    rclc_executor_spin_some(&executor, RCL_MS_TO_NS(100));
 8001d9e:	f107 0128 	add.w	r1, r7, #40	@ 0x28
 8001da2:	a305      	add	r3, pc, #20	@ (adr r3, 8001db8 <StartDefaultTask+0x178>)
 8001da4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001da8:	4608      	mov	r0, r1
 8001daa:	f008 f855 	bl	8009e58 <rclc_executor_spin_some>
	    osDelay(10);
 8001dae:	200a      	movs	r0, #10
 8001db0:	f004 fca6 	bl	8006700 <osDelay>
		StpperMotorControlled();
 8001db4:	bf00      	nop
 8001db6:	e7ee      	b.n	8001d96 <StartDefaultTask+0x156>
 8001db8:	05f5e100 	.word	0x05f5e100
 8001dbc:	00000000 	.word	0x00000000
 8001dc0:	08016524 	.word	0x08016524
 8001dc4:	08016528 	.word	0x08016528
 8001dc8:	080027c1 	.word	0x080027c1
 8001dcc:	08002759 	.word	0x08002759
 8001dd0:	08002739 	.word	0x08002739
 8001dd4:	0800270d 	.word	0x0800270d
 8001dd8:	20003dd4 	.word	0x20003dd4
 8001ddc:	08001e39 	.word	0x08001e39
 8001de0:	08001e7d 	.word	0x08001e7d
 8001de4:	08001eb5 	.word	0x08001eb5
 8001de8:	08001f21 	.word	0x08001f21
 8001dec:	08016538 	.word	0x08016538
 8001df0:	08016560 	.word	0x08016560
 8001df4:	08016564 	.word	0x08016564
 8001df8:	08016570 	.word	0x08016570
 8001dfc:	08016584 	.word	0x08016584
 8001e00:	08001bf9 	.word	0x08001bf9
 8001e04:	08001c1d 	.word	0x08001c1d

08001e08 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001e08:	b580      	push	{r7, lr}
 8001e0a:	b082      	sub	sp, #8
 8001e0c:	af00      	add	r7, sp, #0
 8001e0e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	4a04      	ldr	r2, [pc, #16]	@ (8001e28 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001e16:	4293      	cmp	r3, r2
 8001e18:	d101      	bne.n	8001e1e <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8001e1a:	f000 fd71 	bl	8002900 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001e1e:	bf00      	nop
 8001e20:	3708      	adds	r7, #8
 8001e22:	46bd      	mov	sp, r7
 8001e24:	bd80      	pop	{r7, pc}
 8001e26:	bf00      	nop
 8001e28:	40010000 	.word	0x40010000

08001e2c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001e2c:	b480      	push	{r7}
 8001e2e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001e30:	b672      	cpsid	i
}
 8001e32:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001e34:	bf00      	nop
 8001e36:	e7fd      	b.n	8001e34 <Error_Handler+0x8>

08001e38 <microros_allocate>:
void vPortFreeMicroROS( void *pv );
void *pvPortReallocMicroROS( void *pv, size_t xWantedSize );
size_t getBlockSize( void *pv );
void *pvPortCallocMicroROS( size_t num, size_t xWantedSize );

void * microros_allocate(size_t size, void * state){
 8001e38:	b580      	push	{r7, lr}
 8001e3a:	b082      	sub	sp, #8
 8001e3c:	af00      	add	r7, sp, #0
 8001e3e:	6078      	str	r0, [r7, #4]
 8001e40:	6039      	str	r1, [r7, #0]
  (void) state;
  // printf("-- Alloc %d (prev: %d B)\n",size, xPortGetFreeHeapSize());
  absoluteUsedMemory += size;
 8001e42:	4b0c      	ldr	r3, [pc, #48]	@ (8001e74 <microros_allocate+0x3c>)
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	461a      	mov	r2, r3
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	4413      	add	r3, r2
 8001e4c:	461a      	mov	r2, r3
 8001e4e:	4b09      	ldr	r3, [pc, #36]	@ (8001e74 <microros_allocate+0x3c>)
 8001e50:	601a      	str	r2, [r3, #0]
  usedMemory += size;
 8001e52:	4b09      	ldr	r3, [pc, #36]	@ (8001e78 <microros_allocate+0x40>)
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	461a      	mov	r2, r3
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	4413      	add	r3, r2
 8001e5c:	461a      	mov	r2, r3
 8001e5e:	4b06      	ldr	r3, [pc, #24]	@ (8001e78 <microros_allocate+0x40>)
 8001e60:	601a      	str	r2, [r3, #0]
  return pvPortMallocMicroROS(size);
 8001e62:	6878      	ldr	r0, [r7, #4]
 8001e64:	f7ff f926 	bl	80010b4 <pvPortMallocMicroROS>
 8001e68:	4603      	mov	r3, r0
}
 8001e6a:	4618      	mov	r0, r3
 8001e6c:	3708      	adds	r7, #8
 8001e6e:	46bd      	mov	sp, r7
 8001e70:	bd80      	pop	{r7, pc}
 8001e72:	bf00      	nop
 8001e74:	20003f34 	.word	0x20003f34
 8001e78:	20003f38 	.word	0x20003f38

08001e7c <microros_deallocate>:

void microros_deallocate(void * pointer, void * state){
 8001e7c:	b580      	push	{r7, lr}
 8001e7e:	b082      	sub	sp, #8
 8001e80:	af00      	add	r7, sp, #0
 8001e82:	6078      	str	r0, [r7, #4]
 8001e84:	6039      	str	r1, [r7, #0]
  (void) state;
  // printf("-- Free %d (prev: %d B)\n",getBlockSize(pointer), xPortGetFreeHeapSize());
  if (NULL != pointer){
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	2b00      	cmp	r3, #0
 8001e8a:	d00c      	beq.n	8001ea6 <microros_deallocate+0x2a>
    usedMemory -= getBlockSize(pointer);
 8001e8c:	6878      	ldr	r0, [r7, #4]
 8001e8e:	f7ff fa35 	bl	80012fc <getBlockSize>
 8001e92:	4603      	mov	r3, r0
 8001e94:	4a06      	ldr	r2, [pc, #24]	@ (8001eb0 <microros_deallocate+0x34>)
 8001e96:	6812      	ldr	r2, [r2, #0]
 8001e98:	1ad3      	subs	r3, r2, r3
 8001e9a:	461a      	mov	r2, r3
 8001e9c:	4b04      	ldr	r3, [pc, #16]	@ (8001eb0 <microros_deallocate+0x34>)
 8001e9e:	601a      	str	r2, [r3, #0]
    vPortFreeMicroROS(pointer);
 8001ea0:	6878      	ldr	r0, [r7, #4]
 8001ea2:	f7ff f9cf 	bl	8001244 <vPortFreeMicroROS>
  }
}
 8001ea6:	bf00      	nop
 8001ea8:	3708      	adds	r7, #8
 8001eaa:	46bd      	mov	sp, r7
 8001eac:	bd80      	pop	{r7, pc}
 8001eae:	bf00      	nop
 8001eb0:	20003f38 	.word	0x20003f38

08001eb4 <microros_reallocate>:

void * microros_reallocate(void * pointer, size_t size, void * state){
 8001eb4:	b580      	push	{r7, lr}
 8001eb6:	b084      	sub	sp, #16
 8001eb8:	af00      	add	r7, sp, #0
 8001eba:	60f8      	str	r0, [r7, #12]
 8001ebc:	60b9      	str	r1, [r7, #8]
 8001ebe:	607a      	str	r2, [r7, #4]
  (void) state;
  // printf("-- Realloc %d -> %d (prev: %d B)\n",getBlockSize(pointer),size, xPortGetFreeHeapSize());
  absoluteUsedMemory += size;
 8001ec0:	4b15      	ldr	r3, [pc, #84]	@ (8001f18 <microros_reallocate+0x64>)
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	461a      	mov	r2, r3
 8001ec6:	68bb      	ldr	r3, [r7, #8]
 8001ec8:	4413      	add	r3, r2
 8001eca:	461a      	mov	r2, r3
 8001ecc:	4b12      	ldr	r3, [pc, #72]	@ (8001f18 <microros_reallocate+0x64>)
 8001ece:	601a      	str	r2, [r3, #0]
  usedMemory += size;
 8001ed0:	4b12      	ldr	r3, [pc, #72]	@ (8001f1c <microros_reallocate+0x68>)
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	461a      	mov	r2, r3
 8001ed6:	68bb      	ldr	r3, [r7, #8]
 8001ed8:	4413      	add	r3, r2
 8001eda:	461a      	mov	r2, r3
 8001edc:	4b0f      	ldr	r3, [pc, #60]	@ (8001f1c <microros_reallocate+0x68>)
 8001ede:	601a      	str	r2, [r3, #0]
  if (NULL == pointer){
 8001ee0:	68fb      	ldr	r3, [r7, #12]
 8001ee2:	2b00      	cmp	r3, #0
 8001ee4:	d104      	bne.n	8001ef0 <microros_reallocate+0x3c>
    return pvPortMallocMicroROS(size);
 8001ee6:	68b8      	ldr	r0, [r7, #8]
 8001ee8:	f7ff f8e4 	bl	80010b4 <pvPortMallocMicroROS>
 8001eec:	4603      	mov	r3, r0
 8001eee:	e00e      	b.n	8001f0e <microros_reallocate+0x5a>
  } else {
    usedMemory -= getBlockSize(pointer);
 8001ef0:	68f8      	ldr	r0, [r7, #12]
 8001ef2:	f7ff fa03 	bl	80012fc <getBlockSize>
 8001ef6:	4603      	mov	r3, r0
 8001ef8:	4a08      	ldr	r2, [pc, #32]	@ (8001f1c <microros_reallocate+0x68>)
 8001efa:	6812      	ldr	r2, [r2, #0]
 8001efc:	1ad3      	subs	r3, r2, r3
 8001efe:	461a      	mov	r2, r3
 8001f00:	4b06      	ldr	r3, [pc, #24]	@ (8001f1c <microros_reallocate+0x68>)
 8001f02:	601a      	str	r2, [r3, #0]
    return pvPortReallocMicroROS(pointer,size);
 8001f04:	68b9      	ldr	r1, [r7, #8]
 8001f06:	68f8      	ldr	r0, [r7, #12]
 8001f08:	f7ff fa16 	bl	8001338 <pvPortReallocMicroROS>
 8001f0c:	4603      	mov	r3, r0
  }
}
 8001f0e:	4618      	mov	r0, r3
 8001f10:	3710      	adds	r7, #16
 8001f12:	46bd      	mov	sp, r7
 8001f14:	bd80      	pop	{r7, pc}
 8001f16:	bf00      	nop
 8001f18:	20003f34 	.word	0x20003f34
 8001f1c:	20003f38 	.word	0x20003f38

08001f20 <microros_zero_allocate>:

void * microros_zero_allocate(size_t number_of_elements, size_t size_of_element, void * state){
 8001f20:	b580      	push	{r7, lr}
 8001f22:	b084      	sub	sp, #16
 8001f24:	af00      	add	r7, sp, #0
 8001f26:	60f8      	str	r0, [r7, #12]
 8001f28:	60b9      	str	r1, [r7, #8]
 8001f2a:	607a      	str	r2, [r7, #4]
  (void) state;
  // printf("-- Calloc %d x %d = %d -> (prev: %d B)\n",number_of_elements,size_of_element, number_of_elements*size_of_element, xPortGetFreeHeapSize());
  absoluteUsedMemory += number_of_elements*size_of_element;
 8001f2c:	68fb      	ldr	r3, [r7, #12]
 8001f2e:	68ba      	ldr	r2, [r7, #8]
 8001f30:	fb02 f303 	mul.w	r3, r2, r3
 8001f34:	4a0c      	ldr	r2, [pc, #48]	@ (8001f68 <microros_zero_allocate+0x48>)
 8001f36:	6812      	ldr	r2, [r2, #0]
 8001f38:	4413      	add	r3, r2
 8001f3a:	461a      	mov	r2, r3
 8001f3c:	4b0a      	ldr	r3, [pc, #40]	@ (8001f68 <microros_zero_allocate+0x48>)
 8001f3e:	601a      	str	r2, [r3, #0]
  usedMemory += number_of_elements*size_of_element;
 8001f40:	68fb      	ldr	r3, [r7, #12]
 8001f42:	68ba      	ldr	r2, [r7, #8]
 8001f44:	fb02 f303 	mul.w	r3, r2, r3
 8001f48:	4a08      	ldr	r2, [pc, #32]	@ (8001f6c <microros_zero_allocate+0x4c>)
 8001f4a:	6812      	ldr	r2, [r2, #0]
 8001f4c:	4413      	add	r3, r2
 8001f4e:	461a      	mov	r2, r3
 8001f50:	4b06      	ldr	r3, [pc, #24]	@ (8001f6c <microros_zero_allocate+0x4c>)
 8001f52:	601a      	str	r2, [r3, #0]
  return pvPortCallocMicroROS(number_of_elements,size_of_element);
 8001f54:	68b9      	ldr	r1, [r7, #8]
 8001f56:	68f8      	ldr	r0, [r7, #12]
 8001f58:	f7ff fa1b 	bl	8001392 <pvPortCallocMicroROS>
 8001f5c:	4603      	mov	r3, r0
 8001f5e:	4618      	mov	r0, r3
 8001f60:	3710      	adds	r7, #16
 8001f62:	46bd      	mov	sp, r7
 8001f64:	bd80      	pop	{r7, pc}
 8001f66:	bf00      	nop
 8001f68:	20003f34 	.word	0x20003f34
 8001f6c:	20003f38 	.word	0x20003f38

08001f70 <UTILS_NanosecondsToTimespec>:
#define NANOSECONDS_PER_SECOND     ( 1000000000LL )                                /**< Nanoseconds per second. */
#define NANOSECONDS_PER_TICK       ( NANOSECONDS_PER_SECOND / configTICK_RATE_HZ ) /**< Nanoseconds per FreeRTOS tick. */

void UTILS_NanosecondsToTimespec( int64_t llSource,
                                  struct timespec * const pxDestination )
{
 8001f70:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001f74:	b086      	sub	sp, #24
 8001f76:	af00      	add	r7, sp, #0
 8001f78:	e9c7 0102 	strd	r0, r1, [r7, #8]
 8001f7c:	607a      	str	r2, [r7, #4]
    long lCarrySec = 0;
 8001f7e:	2300      	movs	r3, #0
 8001f80:	617b      	str	r3, [r7, #20]

    /* Convert to timespec. */
    pxDestination->tv_sec = ( time_t ) ( llSource / NANOSECONDS_PER_SECOND );
 8001f82:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001f86:	a320      	add	r3, pc, #128	@ (adr r3, 8002008 <UTILS_NanosecondsToTimespec+0x98>)
 8001f88:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f8c:	f7fe fdce 	bl	8000b2c <__aeabi_ldivmod>
 8001f90:	4602      	mov	r2, r0
 8001f92:	460b      	mov	r3, r1
 8001f94:	6879      	ldr	r1, [r7, #4]
 8001f96:	e9c1 2300 	strd	r2, r3, [r1]
    pxDestination->tv_nsec = ( long ) ( llSource % NANOSECONDS_PER_SECOND );
 8001f9a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001f9e:	a31a      	add	r3, pc, #104	@ (adr r3, 8002008 <UTILS_NanosecondsToTimespec+0x98>)
 8001fa0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001fa4:	f7fe fdc2 	bl	8000b2c <__aeabi_ldivmod>
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	609a      	str	r2, [r3, #8]

    /* Subtract from tv_sec if tv_nsec < 0. */
    if( pxDestination->tv_nsec < 0L )
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	689b      	ldr	r3, [r3, #8]
 8001fb0:	2b00      	cmp	r3, #0
 8001fb2:	da20      	bge.n	8001ff6 <UTILS_NanosecondsToTimespec+0x86>
    {
        /* Compute the number of seconds to carry. */
        lCarrySec = ( pxDestination->tv_nsec / ( long ) NANOSECONDS_PER_SECOND ) + 1L;
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	689b      	ldr	r3, [r3, #8]
 8001fb8:	4a11      	ldr	r2, [pc, #68]	@ (8002000 <UTILS_NanosecondsToTimespec+0x90>)
 8001fba:	fb82 1203 	smull	r1, r2, r2, r3
 8001fbe:	1712      	asrs	r2, r2, #28
 8001fc0:	17db      	asrs	r3, r3, #31
 8001fc2:	1ad3      	subs	r3, r2, r3
 8001fc4:	3301      	adds	r3, #1
 8001fc6:	617b      	str	r3, [r7, #20]

        pxDestination->tv_sec -= ( time_t ) ( lCarrySec );
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001fce:	6979      	ldr	r1, [r7, #20]
 8001fd0:	17c8      	asrs	r0, r1, #31
 8001fd2:	460c      	mov	r4, r1
 8001fd4:	4605      	mov	r5, r0
 8001fd6:	ebb2 0804 	subs.w	r8, r2, r4
 8001fda:	eb63 0905 	sbc.w	r9, r3, r5
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	e9c3 8900 	strd	r8, r9, [r3]
        pxDestination->tv_nsec += lCarrySec * ( long ) NANOSECONDS_PER_SECOND;
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	689a      	ldr	r2, [r3, #8]
 8001fe8:	697b      	ldr	r3, [r7, #20]
 8001fea:	4906      	ldr	r1, [pc, #24]	@ (8002004 <UTILS_NanosecondsToTimespec+0x94>)
 8001fec:	fb01 f303 	mul.w	r3, r1, r3
 8001ff0:	441a      	add	r2, r3
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	609a      	str	r2, [r3, #8]
    }
}
 8001ff6:	bf00      	nop
 8001ff8:	3718      	adds	r7, #24
 8001ffa:	46bd      	mov	sp, r7
 8001ffc:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8002000:	44b82fa1 	.word	0x44b82fa1
 8002004:	3b9aca00 	.word	0x3b9aca00
 8002008:	3b9aca00 	.word	0x3b9aca00
 800200c:	00000000 	.word	0x00000000

08002010 <clock_gettime>:

int clock_gettime( int clock_id,
                   struct timespec * tp )
{
 8002010:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002014:	b08e      	sub	sp, #56	@ 0x38
 8002016:	af00      	add	r7, sp, #0
 8002018:	6278      	str	r0, [r7, #36]	@ 0x24
 800201a:	6239      	str	r1, [r7, #32]
    TimeOut_t xCurrentTime = { 0 };
 800201c:	f107 0228 	add.w	r2, r7, #40	@ 0x28
 8002020:	2300      	movs	r3, #0
 8002022:	6013      	str	r3, [r2, #0]
 8002024:	6053      	str	r3, [r2, #4]

    /* Intermediate variable used to convert TimeOut_t to struct timespec.
     * Also used to detect overflow issues. It must be unsigned because the
     * behavior of signed integer overflow is undefined. */
    uint64_t ullTickCount = 0ULL;
 8002026:	f04f 0200 	mov.w	r2, #0
 800202a:	f04f 0300 	mov.w	r3, #0
 800202e:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30
    /* Silence warnings about unused parameters. */
    ( void ) clock_id;

    /* Get the current tick count and overflow count. vTaskSetTimeOutState()
     * is used to get these values because they are both static in tasks.c. */
    vTaskSetTimeOutState( &xCurrentTime );
 8002032:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8002036:	4618      	mov	r0, r3
 8002038:	f005 fe2e 	bl	8007c98 <vTaskSetTimeOutState>

    /* Adjust the tick count for the number of times a TickType_t has overflowed.
     * portMAX_DELAY should be the maximum value of a TickType_t. */
    ullTickCount = ( uint64_t ) ( xCurrentTime.xOverflowCount ) << ( sizeof( TickType_t ) * 8 );
 800203c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800203e:	17da      	asrs	r2, r3, #31
 8002040:	61bb      	str	r3, [r7, #24]
 8002042:	61fa      	str	r2, [r7, #28]
 8002044:	f04f 0200 	mov.w	r2, #0
 8002048:	f04f 0300 	mov.w	r3, #0
 800204c:	69b9      	ldr	r1, [r7, #24]
 800204e:	000b      	movs	r3, r1
 8002050:	2200      	movs	r2, #0
 8002052:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30

    /* Add the current tick count. */
    ullTickCount += xCurrentTime.xTimeOnEntering;
 8002056:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002058:	2200      	movs	r2, #0
 800205a:	461c      	mov	r4, r3
 800205c:	4615      	mov	r5, r2
 800205e:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 8002062:	1911      	adds	r1, r2, r4
 8002064:	60b9      	str	r1, [r7, #8]
 8002066:	416b      	adcs	r3, r5
 8002068:	60fb      	str	r3, [r7, #12]
 800206a:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 800206e:	e9c7 340c 	strd	r3, r4, [r7, #48]	@ 0x30

    /* Convert ullTickCount to timespec. */
    UTILS_NanosecondsToTimespec( ( int64_t ) ullTickCount * NANOSECONDS_PER_TICK, tp );
 8002072:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	@ 0x30
 8002076:	4602      	mov	r2, r0
 8002078:	460b      	mov	r3, r1
 800207a:	f04f 0400 	mov.w	r4, #0
 800207e:	f04f 0500 	mov.w	r5, #0
 8002082:	015d      	lsls	r5, r3, #5
 8002084:	ea45 65d2 	orr.w	r5, r5, r2, lsr #27
 8002088:	0154      	lsls	r4, r2, #5
 800208a:	4622      	mov	r2, r4
 800208c:	462b      	mov	r3, r5
 800208e:	ebb2 0800 	subs.w	r8, r2, r0
 8002092:	eb63 0901 	sbc.w	r9, r3, r1
 8002096:	f04f 0200 	mov.w	r2, #0
 800209a:	f04f 0300 	mov.w	r3, #0
 800209e:	ea4f 2349 	mov.w	r3, r9, lsl #9
 80020a2:	ea43 53d8 	orr.w	r3, r3, r8, lsr #23
 80020a6:	ea4f 2248 	mov.w	r2, r8, lsl #9
 80020aa:	4690      	mov	r8, r2
 80020ac:	4699      	mov	r9, r3
 80020ae:	eb18 0a00 	adds.w	sl, r8, r0
 80020b2:	eb49 0b01 	adc.w	fp, r9, r1
 80020b6:	f04f 0200 	mov.w	r2, #0
 80020ba:	f04f 0300 	mov.w	r3, #0
 80020be:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80020c2:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80020c6:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80020ca:	ebb2 040a 	subs.w	r4, r2, sl
 80020ce:	603c      	str	r4, [r7, #0]
 80020d0:	eb63 030b 	sbc.w	r3, r3, fp
 80020d4:	607b      	str	r3, [r7, #4]
 80020d6:	e9d7 4500 	ldrd	r4, r5, [r7]
 80020da:	4623      	mov	r3, r4
 80020dc:	181b      	adds	r3, r3, r0
 80020de:	613b      	str	r3, [r7, #16]
 80020e0:	462b      	mov	r3, r5
 80020e2:	eb41 0303 	adc.w	r3, r1, r3
 80020e6:	617b      	str	r3, [r7, #20]
 80020e8:	6a3a      	ldr	r2, [r7, #32]
 80020ea:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80020ee:	f7ff ff3f 	bl	8001f70 <UTILS_NanosecondsToTimespec>

    return 0;
 80020f2:	2300      	movs	r3, #0
 80020f4:	4618      	mov	r0, r3
 80020f6:	3738      	adds	r7, #56	@ 0x38
 80020f8:	46bd      	mov	sp, r7
 80020fa:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
	...

08002100 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002100:	b580      	push	{r7, lr}
 8002102:	b082      	sub	sp, #8
 8002104:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002106:	2300      	movs	r3, #0
 8002108:	607b      	str	r3, [r7, #4]
 800210a:	4b12      	ldr	r3, [pc, #72]	@ (8002154 <HAL_MspInit+0x54>)
 800210c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800210e:	4a11      	ldr	r2, [pc, #68]	@ (8002154 <HAL_MspInit+0x54>)
 8002110:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002114:	6453      	str	r3, [r2, #68]	@ 0x44
 8002116:	4b0f      	ldr	r3, [pc, #60]	@ (8002154 <HAL_MspInit+0x54>)
 8002118:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800211a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800211e:	607b      	str	r3, [r7, #4]
 8002120:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002122:	2300      	movs	r3, #0
 8002124:	603b      	str	r3, [r7, #0]
 8002126:	4b0b      	ldr	r3, [pc, #44]	@ (8002154 <HAL_MspInit+0x54>)
 8002128:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800212a:	4a0a      	ldr	r2, [pc, #40]	@ (8002154 <HAL_MspInit+0x54>)
 800212c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002130:	6413      	str	r3, [r2, #64]	@ 0x40
 8002132:	4b08      	ldr	r3, [pc, #32]	@ (8002154 <HAL_MspInit+0x54>)
 8002134:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002136:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800213a:	603b      	str	r3, [r7, #0]
 800213c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800213e:	2200      	movs	r2, #0
 8002140:	210f      	movs	r1, #15
 8002142:	f06f 0001 	mvn.w	r0, #1
 8002146:	f000 fcb3 	bl	8002ab0 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800214a:	bf00      	nop
 800214c:	3708      	adds	r7, #8
 800214e:	46bd      	mov	sp, r7
 8002150:	bd80      	pop	{r7, pc}
 8002152:	bf00      	nop
 8002154:	40023800 	.word	0x40023800

08002158 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002158:	b480      	push	{r7}
 800215a:	b085      	sub	sp, #20
 800215c:	af00      	add	r7, sp, #0
 800215e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002168:	d10e      	bne.n	8002188 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800216a:	2300      	movs	r3, #0
 800216c:	60fb      	str	r3, [r7, #12]
 800216e:	4b13      	ldr	r3, [pc, #76]	@ (80021bc <HAL_TIM_Base_MspInit+0x64>)
 8002170:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002172:	4a12      	ldr	r2, [pc, #72]	@ (80021bc <HAL_TIM_Base_MspInit+0x64>)
 8002174:	f043 0301 	orr.w	r3, r3, #1
 8002178:	6413      	str	r3, [r2, #64]	@ 0x40
 800217a:	4b10      	ldr	r3, [pc, #64]	@ (80021bc <HAL_TIM_Base_MspInit+0x64>)
 800217c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800217e:	f003 0301 	and.w	r3, r3, #1
 8002182:	60fb      	str	r3, [r7, #12]
 8002184:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8002186:	e012      	b.n	80021ae <HAL_TIM_Base_MspInit+0x56>
  else if(htim_base->Instance==TIM3)
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	4a0c      	ldr	r2, [pc, #48]	@ (80021c0 <HAL_TIM_Base_MspInit+0x68>)
 800218e:	4293      	cmp	r3, r2
 8002190:	d10d      	bne.n	80021ae <HAL_TIM_Base_MspInit+0x56>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002192:	2300      	movs	r3, #0
 8002194:	60bb      	str	r3, [r7, #8]
 8002196:	4b09      	ldr	r3, [pc, #36]	@ (80021bc <HAL_TIM_Base_MspInit+0x64>)
 8002198:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800219a:	4a08      	ldr	r2, [pc, #32]	@ (80021bc <HAL_TIM_Base_MspInit+0x64>)
 800219c:	f043 0302 	orr.w	r3, r3, #2
 80021a0:	6413      	str	r3, [r2, #64]	@ 0x40
 80021a2:	4b06      	ldr	r3, [pc, #24]	@ (80021bc <HAL_TIM_Base_MspInit+0x64>)
 80021a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80021a6:	f003 0302 	and.w	r3, r3, #2
 80021aa:	60bb      	str	r3, [r7, #8]
 80021ac:	68bb      	ldr	r3, [r7, #8]
}
 80021ae:	bf00      	nop
 80021b0:	3714      	adds	r7, #20
 80021b2:	46bd      	mov	sp, r7
 80021b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021b8:	4770      	bx	lr
 80021ba:	bf00      	nop
 80021bc:	40023800 	.word	0x40023800
 80021c0:	40000400 	.word	0x40000400

080021c4 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80021c4:	b580      	push	{r7, lr}
 80021c6:	b08a      	sub	sp, #40	@ 0x28
 80021c8:	af00      	add	r7, sp, #0
 80021ca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80021cc:	f107 0314 	add.w	r3, r7, #20
 80021d0:	2200      	movs	r2, #0
 80021d2:	601a      	str	r2, [r3, #0]
 80021d4:	605a      	str	r2, [r3, #4]
 80021d6:	609a      	str	r2, [r3, #8]
 80021d8:	60da      	str	r2, [r3, #12]
 80021da:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80021e4:	d11e      	bne.n	8002224 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80021e6:	2300      	movs	r3, #0
 80021e8:	613b      	str	r3, [r7, #16]
 80021ea:	4b22      	ldr	r3, [pc, #136]	@ (8002274 <HAL_TIM_MspPostInit+0xb0>)
 80021ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80021ee:	4a21      	ldr	r2, [pc, #132]	@ (8002274 <HAL_TIM_MspPostInit+0xb0>)
 80021f0:	f043 0301 	orr.w	r3, r3, #1
 80021f4:	6313      	str	r3, [r2, #48]	@ 0x30
 80021f6:	4b1f      	ldr	r3, [pc, #124]	@ (8002274 <HAL_TIM_MspPostInit+0xb0>)
 80021f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80021fa:	f003 0301 	and.w	r3, r3, #1
 80021fe:	613b      	str	r3, [r7, #16]
 8002200:	693b      	ldr	r3, [r7, #16]
    /**TIM2 GPIO Configuration
    PA1     ------> TIM2_CH2
    PA5     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_5;
 8002202:	2322      	movs	r3, #34	@ 0x22
 8002204:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002206:	2302      	movs	r3, #2
 8002208:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800220a:	2300      	movs	r3, #0
 800220c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800220e:	2300      	movs	r3, #0
 8002210:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8002212:	2301      	movs	r3, #1
 8002214:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002216:	f107 0314 	add.w	r3, r7, #20
 800221a:	4619      	mov	r1, r3
 800221c:	4816      	ldr	r0, [pc, #88]	@ (8002278 <HAL_TIM_MspPostInit+0xb4>)
 800221e:	f001 f873 	bl	8003308 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8002222:	e022      	b.n	800226a <HAL_TIM_MspPostInit+0xa6>
  else if(htim->Instance==TIM3)
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	4a14      	ldr	r2, [pc, #80]	@ (800227c <HAL_TIM_MspPostInit+0xb8>)
 800222a:	4293      	cmp	r3, r2
 800222c:	d11d      	bne.n	800226a <HAL_TIM_MspPostInit+0xa6>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800222e:	2300      	movs	r3, #0
 8002230:	60fb      	str	r3, [r7, #12]
 8002232:	4b10      	ldr	r3, [pc, #64]	@ (8002274 <HAL_TIM_MspPostInit+0xb0>)
 8002234:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002236:	4a0f      	ldr	r2, [pc, #60]	@ (8002274 <HAL_TIM_MspPostInit+0xb0>)
 8002238:	f043 0301 	orr.w	r3, r3, #1
 800223c:	6313      	str	r3, [r2, #48]	@ 0x30
 800223e:	4b0d      	ldr	r3, [pc, #52]	@ (8002274 <HAL_TIM_MspPostInit+0xb0>)
 8002240:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002242:	f003 0301 	and.w	r3, r3, #1
 8002246:	60fb      	str	r3, [r7, #12]
 8002248:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 800224a:	2340      	movs	r3, #64	@ 0x40
 800224c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800224e:	2302      	movs	r3, #2
 8002250:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002252:	2300      	movs	r3, #0
 8002254:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002256:	2300      	movs	r3, #0
 8002258:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800225a:	2302      	movs	r3, #2
 800225c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800225e:	f107 0314 	add.w	r3, r7, #20
 8002262:	4619      	mov	r1, r3
 8002264:	4804      	ldr	r0, [pc, #16]	@ (8002278 <HAL_TIM_MspPostInit+0xb4>)
 8002266:	f001 f84f 	bl	8003308 <HAL_GPIO_Init>
}
 800226a:	bf00      	nop
 800226c:	3728      	adds	r7, #40	@ 0x28
 800226e:	46bd      	mov	sp, r7
 8002270:	bd80      	pop	{r7, pc}
 8002272:	bf00      	nop
 8002274:	40023800 	.word	0x40023800
 8002278:	40020000 	.word	0x40020000
 800227c:	40000400 	.word	0x40000400

08002280 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002280:	b580      	push	{r7, lr}
 8002282:	b08a      	sub	sp, #40	@ 0x28
 8002284:	af00      	add	r7, sp, #0
 8002286:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002288:	f107 0314 	add.w	r3, r7, #20
 800228c:	2200      	movs	r2, #0
 800228e:	601a      	str	r2, [r3, #0]
 8002290:	605a      	str	r2, [r3, #4]
 8002292:	609a      	str	r2, [r3, #8]
 8002294:	60da      	str	r2, [r3, #12]
 8002296:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	4a4d      	ldr	r2, [pc, #308]	@ (80023d4 <HAL_UART_MspInit+0x154>)
 800229e:	4293      	cmp	r3, r2
 80022a0:	f040 8093 	bne.w	80023ca <HAL_UART_MspInit+0x14a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80022a4:	2300      	movs	r3, #0
 80022a6:	613b      	str	r3, [r7, #16]
 80022a8:	4b4b      	ldr	r3, [pc, #300]	@ (80023d8 <HAL_UART_MspInit+0x158>)
 80022aa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80022ac:	4a4a      	ldr	r2, [pc, #296]	@ (80023d8 <HAL_UART_MspInit+0x158>)
 80022ae:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80022b2:	6413      	str	r3, [r2, #64]	@ 0x40
 80022b4:	4b48      	ldr	r3, [pc, #288]	@ (80023d8 <HAL_UART_MspInit+0x158>)
 80022b6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80022b8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80022bc:	613b      	str	r3, [r7, #16]
 80022be:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80022c0:	2300      	movs	r3, #0
 80022c2:	60fb      	str	r3, [r7, #12]
 80022c4:	4b44      	ldr	r3, [pc, #272]	@ (80023d8 <HAL_UART_MspInit+0x158>)
 80022c6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80022c8:	4a43      	ldr	r2, [pc, #268]	@ (80023d8 <HAL_UART_MspInit+0x158>)
 80022ca:	f043 0301 	orr.w	r3, r3, #1
 80022ce:	6313      	str	r3, [r2, #48]	@ 0x30
 80022d0:	4b41      	ldr	r3, [pc, #260]	@ (80023d8 <HAL_UART_MspInit+0x158>)
 80022d2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80022d4:	f003 0301 	and.w	r3, r3, #1
 80022d8:	60fb      	str	r3, [r7, #12]
 80022da:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80022dc:	230c      	movs	r3, #12
 80022de:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80022e0:	2302      	movs	r3, #2
 80022e2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022e4:	2300      	movs	r3, #0
 80022e6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80022e8:	2303      	movs	r3, #3
 80022ea:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80022ec:	2307      	movs	r3, #7
 80022ee:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80022f0:	f107 0314 	add.w	r3, r7, #20
 80022f4:	4619      	mov	r1, r3
 80022f6:	4839      	ldr	r0, [pc, #228]	@ (80023dc <HAL_UART_MspInit+0x15c>)
 80022f8:	f001 f806 	bl	8003308 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Stream5;
 80022fc:	4b38      	ldr	r3, [pc, #224]	@ (80023e0 <HAL_UART_MspInit+0x160>)
 80022fe:	4a39      	ldr	r2, [pc, #228]	@ (80023e4 <HAL_UART_MspInit+0x164>)
 8002300:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Channel = DMA_CHANNEL_4;
 8002302:	4b37      	ldr	r3, [pc, #220]	@ (80023e0 <HAL_UART_MspInit+0x160>)
 8002304:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8002308:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800230a:	4b35      	ldr	r3, [pc, #212]	@ (80023e0 <HAL_UART_MspInit+0x160>)
 800230c:	2200      	movs	r2, #0
 800230e:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002310:	4b33      	ldr	r3, [pc, #204]	@ (80023e0 <HAL_UART_MspInit+0x160>)
 8002312:	2200      	movs	r2, #0
 8002314:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002316:	4b32      	ldr	r3, [pc, #200]	@ (80023e0 <HAL_UART_MspInit+0x160>)
 8002318:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800231c:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800231e:	4b30      	ldr	r3, [pc, #192]	@ (80023e0 <HAL_UART_MspInit+0x160>)
 8002320:	2200      	movs	r2, #0
 8002322:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002324:	4b2e      	ldr	r3, [pc, #184]	@ (80023e0 <HAL_UART_MspInit+0x160>)
 8002326:	2200      	movs	r2, #0
 8002328:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_CIRCULAR;
 800232a:	4b2d      	ldr	r3, [pc, #180]	@ (80023e0 <HAL_UART_MspInit+0x160>)
 800232c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002330:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8002332:	4b2b      	ldr	r3, [pc, #172]	@ (80023e0 <HAL_UART_MspInit+0x160>)
 8002334:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8002338:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800233a:	4b29      	ldr	r3, [pc, #164]	@ (80023e0 <HAL_UART_MspInit+0x160>)
 800233c:	2200      	movs	r2, #0
 800233e:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8002340:	4827      	ldr	r0, [pc, #156]	@ (80023e0 <HAL_UART_MspInit+0x160>)
 8002342:	f000 fbdf 	bl	8002b04 <HAL_DMA_Init>
 8002346:	4603      	mov	r3, r0
 8002348:	2b00      	cmp	r3, #0
 800234a:	d001      	beq.n	8002350 <HAL_UART_MspInit+0xd0>
    {
      Error_Handler();
 800234c:	f7ff fd6e 	bl	8001e2c <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	4a23      	ldr	r2, [pc, #140]	@ (80023e0 <HAL_UART_MspInit+0x160>)
 8002354:	63da      	str	r2, [r3, #60]	@ 0x3c
 8002356:	4a22      	ldr	r2, [pc, #136]	@ (80023e0 <HAL_UART_MspInit+0x160>)
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	6393      	str	r3, [r2, #56]	@ 0x38

    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA1_Stream6;
 800235c:	4b22      	ldr	r3, [pc, #136]	@ (80023e8 <HAL_UART_MspInit+0x168>)
 800235e:	4a23      	ldr	r2, [pc, #140]	@ (80023ec <HAL_UART_MspInit+0x16c>)
 8002360:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Channel = DMA_CHANNEL_4;
 8002362:	4b21      	ldr	r3, [pc, #132]	@ (80023e8 <HAL_UART_MspInit+0x168>)
 8002364:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8002368:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800236a:	4b1f      	ldr	r3, [pc, #124]	@ (80023e8 <HAL_UART_MspInit+0x168>)
 800236c:	2240      	movs	r2, #64	@ 0x40
 800236e:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002370:	4b1d      	ldr	r3, [pc, #116]	@ (80023e8 <HAL_UART_MspInit+0x168>)
 8002372:	2200      	movs	r2, #0
 8002374:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002376:	4b1c      	ldr	r3, [pc, #112]	@ (80023e8 <HAL_UART_MspInit+0x168>)
 8002378:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800237c:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800237e:	4b1a      	ldr	r3, [pc, #104]	@ (80023e8 <HAL_UART_MspInit+0x168>)
 8002380:	2200      	movs	r2, #0
 8002382:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002384:	4b18      	ldr	r3, [pc, #96]	@ (80023e8 <HAL_UART_MspInit+0x168>)
 8002386:	2200      	movs	r2, #0
 8002388:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 800238a:	4b17      	ldr	r3, [pc, #92]	@ (80023e8 <HAL_UART_MspInit+0x168>)
 800238c:	2200      	movs	r2, #0
 800238e:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8002390:	4b15      	ldr	r3, [pc, #84]	@ (80023e8 <HAL_UART_MspInit+0x168>)
 8002392:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8002396:	621a      	str	r2, [r3, #32]
    hdma_usart2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002398:	4b13      	ldr	r3, [pc, #76]	@ (80023e8 <HAL_UART_MspInit+0x168>)
 800239a:	2200      	movs	r2, #0
 800239c:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 800239e:	4812      	ldr	r0, [pc, #72]	@ (80023e8 <HAL_UART_MspInit+0x168>)
 80023a0:	f000 fbb0 	bl	8002b04 <HAL_DMA_Init>
 80023a4:	4603      	mov	r3, r0
 80023a6:	2b00      	cmp	r3, #0
 80023a8:	d001      	beq.n	80023ae <HAL_UART_MspInit+0x12e>
    {
      Error_Handler();
 80023aa:	f7ff fd3f 	bl	8001e2c <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	4a0d      	ldr	r2, [pc, #52]	@ (80023e8 <HAL_UART_MspInit+0x168>)
 80023b2:	639a      	str	r2, [r3, #56]	@ 0x38
 80023b4:	4a0c      	ldr	r2, [pc, #48]	@ (80023e8 <HAL_UART_MspInit+0x168>)
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	6393      	str	r3, [r2, #56]	@ 0x38

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 80023ba:	2200      	movs	r2, #0
 80023bc:	2105      	movs	r1, #5
 80023be:	2026      	movs	r0, #38	@ 0x26
 80023c0:	f000 fb76 	bl	8002ab0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80023c4:	2026      	movs	r0, #38	@ 0x26
 80023c6:	f000 fb8f 	bl	8002ae8 <HAL_NVIC_EnableIRQ>

  /* USER CODE END USART2_MspInit 1 */

  }

}
 80023ca:	bf00      	nop
 80023cc:	3728      	adds	r7, #40	@ 0x28
 80023ce:	46bd      	mov	sp, r7
 80023d0:	bd80      	pop	{r7, pc}
 80023d2:	bf00      	nop
 80023d4:	40004400 	.word	0x40004400
 80023d8:	40023800 	.word	0x40023800
 80023dc:	40020000 	.word	0x40020000
 80023e0:	20003e1c 	.word	0x20003e1c
 80023e4:	40026088 	.word	0x40026088
 80023e8:	20003e7c 	.word	0x20003e7c
 80023ec:	400260a0 	.word	0x400260a0

080023f0 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80023f0:	b580      	push	{r7, lr}
 80023f2:	b08c      	sub	sp, #48	@ 0x30
 80023f4:	af00      	add	r7, sp, #0
 80023f6:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 80023f8:	2300      	movs	r3, #0
 80023fa:	62bb      	str	r3, [r7, #40]	@ 0x28

  uint32_t              uwPrescalerValue = 0U;
 80023fc:	2300      	movs	r3, #0
 80023fe:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8002400:	2300      	movs	r3, #0
 8002402:	60bb      	str	r3, [r7, #8]
 8002404:	4b2e      	ldr	r3, [pc, #184]	@ (80024c0 <HAL_InitTick+0xd0>)
 8002406:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002408:	4a2d      	ldr	r2, [pc, #180]	@ (80024c0 <HAL_InitTick+0xd0>)
 800240a:	f043 0301 	orr.w	r3, r3, #1
 800240e:	6453      	str	r3, [r2, #68]	@ 0x44
 8002410:	4b2b      	ldr	r3, [pc, #172]	@ (80024c0 <HAL_InitTick+0xd0>)
 8002412:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002414:	f003 0301 	and.w	r3, r3, #1
 8002418:	60bb      	str	r3, [r7, #8]
 800241a:	68bb      	ldr	r3, [r7, #8]
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800241c:	f107 020c 	add.w	r2, r7, #12
 8002420:	f107 0310 	add.w	r3, r7, #16
 8002424:	4611      	mov	r1, r2
 8002426:	4618      	mov	r0, r3
 8002428:	f001 fda4 	bl	8003f74 <HAL_RCC_GetClockConfig>
  /* Compute TIM1 clock */
      uwTimclock = HAL_RCC_GetPCLK2Freq();
 800242c:	f001 fd8e 	bl	8003f4c <HAL_RCC_GetPCLK2Freq>
 8002430:	62b8      	str	r0, [r7, #40]	@ 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8002432:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002434:	4a23      	ldr	r2, [pc, #140]	@ (80024c4 <HAL_InitTick+0xd4>)
 8002436:	fba2 2303 	umull	r2, r3, r2, r3
 800243a:	0c9b      	lsrs	r3, r3, #18
 800243c:	3b01      	subs	r3, #1
 800243e:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8002440:	4b21      	ldr	r3, [pc, #132]	@ (80024c8 <HAL_InitTick+0xd8>)
 8002442:	4a22      	ldr	r2, [pc, #136]	@ (80024cc <HAL_InitTick+0xdc>)
 8002444:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8002446:	4b20      	ldr	r3, [pc, #128]	@ (80024c8 <HAL_InitTick+0xd8>)
 8002448:	f240 32e7 	movw	r2, #999	@ 0x3e7
 800244c:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 800244e:	4a1e      	ldr	r2, [pc, #120]	@ (80024c8 <HAL_InitTick+0xd8>)
 8002450:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002452:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8002454:	4b1c      	ldr	r3, [pc, #112]	@ (80024c8 <HAL_InitTick+0xd8>)
 8002456:	2200      	movs	r2, #0
 8002458:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800245a:	4b1b      	ldr	r3, [pc, #108]	@ (80024c8 <HAL_InitTick+0xd8>)
 800245c:	2200      	movs	r2, #0
 800245e:	609a      	str	r2, [r3, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002460:	4b19      	ldr	r3, [pc, #100]	@ (80024c8 <HAL_InitTick+0xd8>)
 8002462:	2200      	movs	r2, #0
 8002464:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim1);
 8002466:	4818      	ldr	r0, [pc, #96]	@ (80024c8 <HAL_InitTick+0xd8>)
 8002468:	f001 fdb6 	bl	8003fd8 <HAL_TIM_Base_Init>
 800246c:	4603      	mov	r3, r0
 800246e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  if (status == HAL_OK)
 8002472:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8002476:	2b00      	cmp	r3, #0
 8002478:	d11b      	bne.n	80024b2 <HAL_InitTick+0xc2>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 800247a:	4813      	ldr	r0, [pc, #76]	@ (80024c8 <HAL_InitTick+0xd8>)
 800247c:	f001 fe56 	bl	800412c <HAL_TIM_Base_Start_IT>
 8002480:	4603      	mov	r3, r0
 8002482:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    if (status == HAL_OK)
 8002486:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800248a:	2b00      	cmp	r3, #0
 800248c:	d111      	bne.n	80024b2 <HAL_InitTick+0xc2>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 800248e:	2019      	movs	r0, #25
 8002490:	f000 fb2a 	bl	8002ae8 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	2b0f      	cmp	r3, #15
 8002498:	d808      	bhi.n	80024ac <HAL_InitTick+0xbc>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority, 0U);
 800249a:	2200      	movs	r2, #0
 800249c:	6879      	ldr	r1, [r7, #4]
 800249e:	2019      	movs	r0, #25
 80024a0:	f000 fb06 	bl	8002ab0 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80024a4:	4a0a      	ldr	r2, [pc, #40]	@ (80024d0 <HAL_InitTick+0xe0>)
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	6013      	str	r3, [r2, #0]
 80024aa:	e002      	b.n	80024b2 <HAL_InitTick+0xc2>
      }
      else
      {
        status = HAL_ERROR;
 80024ac:	2301      	movs	r3, #1
 80024ae:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 80024b2:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 80024b6:	4618      	mov	r0, r3
 80024b8:	3730      	adds	r7, #48	@ 0x30
 80024ba:	46bd      	mov	sp, r7
 80024bc:	bd80      	pop	{r7, pc}
 80024be:	bf00      	nop
 80024c0:	40023800 	.word	0x40023800
 80024c4:	431bde83 	.word	0x431bde83
 80024c8:	20003f3c 	.word	0x20003f3c
 80024cc:	40010000 	.word	0x40010000
 80024d0:	20000008 	.word	0x20000008

080024d4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80024d4:	b480      	push	{r7}
 80024d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80024d8:	bf00      	nop
 80024da:	e7fd      	b.n	80024d8 <NMI_Handler+0x4>

080024dc <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80024dc:	b480      	push	{r7}
 80024de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80024e0:	bf00      	nop
 80024e2:	e7fd      	b.n	80024e0 <HardFault_Handler+0x4>

080024e4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80024e4:	b480      	push	{r7}
 80024e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80024e8:	bf00      	nop
 80024ea:	e7fd      	b.n	80024e8 <MemManage_Handler+0x4>

080024ec <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80024ec:	b480      	push	{r7}
 80024ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80024f0:	bf00      	nop
 80024f2:	e7fd      	b.n	80024f0 <BusFault_Handler+0x4>

080024f4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80024f4:	b480      	push	{r7}
 80024f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80024f8:	bf00      	nop
 80024fa:	e7fd      	b.n	80024f8 <UsageFault_Handler+0x4>

080024fc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80024fc:	b480      	push	{r7}
 80024fe:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002500:	bf00      	nop
 8002502:	46bd      	mov	sp, r7
 8002504:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002508:	4770      	bx	lr
	...

0800250c <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 800250c:	b580      	push	{r7, lr}
 800250e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8002510:	4802      	ldr	r0, [pc, #8]	@ (800251c <DMA1_Stream5_IRQHandler+0x10>)
 8002512:	f000 fc8f 	bl	8002e34 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 8002516:	bf00      	nop
 8002518:	bd80      	pop	{r7, pc}
 800251a:	bf00      	nop
 800251c:	20003e1c 	.word	0x20003e1c

08002520 <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 8002520:	b580      	push	{r7, lr}
 8002522:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8002524:	4802      	ldr	r0, [pc, #8]	@ (8002530 <DMA1_Stream6_IRQHandler+0x10>)
 8002526:	f000 fc85 	bl	8002e34 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 800252a:	bf00      	nop
 800252c:	bd80      	pop	{r7, pc}
 800252e:	bf00      	nop
 8002530:	20003e7c 	.word	0x20003e7c

08002534 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8002534:	b580      	push	{r7, lr}
 8002536:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8002538:	4802      	ldr	r0, [pc, #8]	@ (8002544 <TIM1_UP_TIM10_IRQHandler+0x10>)
 800253a:	f001 ff63 	bl	8004404 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 800253e:	bf00      	nop
 8002540:	bd80      	pop	{r7, pc}
 8002542:	bf00      	nop
 8002544:	20003f3c 	.word	0x20003f3c

08002548 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8002548:	b580      	push	{r7, lr}
 800254a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 800254c:	4802      	ldr	r0, [pc, #8]	@ (8002558 <USART2_IRQHandler+0x10>)
 800254e:	f002 feb9 	bl	80052c4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8002552:	bf00      	nop
 8002554:	bd80      	pop	{r7, pc}
 8002556:	bf00      	nop
 8002558:	20003dd4 	.word	0x20003dd4

0800255c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800255c:	b480      	push	{r7}
 800255e:	af00      	add	r7, sp, #0
  return 1;
 8002560:	2301      	movs	r3, #1
}
 8002562:	4618      	mov	r0, r3
 8002564:	46bd      	mov	sp, r7
 8002566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800256a:	4770      	bx	lr

0800256c <_kill>:

int _kill(int pid, int sig)
{
 800256c:	b580      	push	{r7, lr}
 800256e:	b082      	sub	sp, #8
 8002570:	af00      	add	r7, sp, #0
 8002572:	6078      	str	r0, [r7, #4]
 8002574:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8002576:	f013 f8b7 	bl	80156e8 <__errno>
 800257a:	4603      	mov	r3, r0
 800257c:	2216      	movs	r2, #22
 800257e:	601a      	str	r2, [r3, #0]
  return -1;
 8002580:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8002584:	4618      	mov	r0, r3
 8002586:	3708      	adds	r7, #8
 8002588:	46bd      	mov	sp, r7
 800258a:	bd80      	pop	{r7, pc}

0800258c <_exit>:

void _exit (int status)
{
 800258c:	b580      	push	{r7, lr}
 800258e:	b082      	sub	sp, #8
 8002590:	af00      	add	r7, sp, #0
 8002592:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002594:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8002598:	6878      	ldr	r0, [r7, #4]
 800259a:	f7ff ffe7 	bl	800256c <_kill>
  while (1) {}    /* Make sure we hang here */
 800259e:	bf00      	nop
 80025a0:	e7fd      	b.n	800259e <_exit+0x12>

080025a2 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80025a2:	b580      	push	{r7, lr}
 80025a4:	b086      	sub	sp, #24
 80025a6:	af00      	add	r7, sp, #0
 80025a8:	60f8      	str	r0, [r7, #12]
 80025aa:	60b9      	str	r1, [r7, #8]
 80025ac:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80025ae:	2300      	movs	r3, #0
 80025b0:	617b      	str	r3, [r7, #20]
 80025b2:	e00a      	b.n	80025ca <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80025b4:	f3af 8000 	nop.w
 80025b8:	4601      	mov	r1, r0
 80025ba:	68bb      	ldr	r3, [r7, #8]
 80025bc:	1c5a      	adds	r2, r3, #1
 80025be:	60ba      	str	r2, [r7, #8]
 80025c0:	b2ca      	uxtb	r2, r1
 80025c2:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80025c4:	697b      	ldr	r3, [r7, #20]
 80025c6:	3301      	adds	r3, #1
 80025c8:	617b      	str	r3, [r7, #20]
 80025ca:	697a      	ldr	r2, [r7, #20]
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	429a      	cmp	r2, r3
 80025d0:	dbf0      	blt.n	80025b4 <_read+0x12>
  }

  return len;
 80025d2:	687b      	ldr	r3, [r7, #4]
}
 80025d4:	4618      	mov	r0, r3
 80025d6:	3718      	adds	r7, #24
 80025d8:	46bd      	mov	sp, r7
 80025da:	bd80      	pop	{r7, pc}

080025dc <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80025dc:	b580      	push	{r7, lr}
 80025de:	b086      	sub	sp, #24
 80025e0:	af00      	add	r7, sp, #0
 80025e2:	60f8      	str	r0, [r7, #12]
 80025e4:	60b9      	str	r1, [r7, #8]
 80025e6:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80025e8:	2300      	movs	r3, #0
 80025ea:	617b      	str	r3, [r7, #20]
 80025ec:	e009      	b.n	8002602 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80025ee:	68bb      	ldr	r3, [r7, #8]
 80025f0:	1c5a      	adds	r2, r3, #1
 80025f2:	60ba      	str	r2, [r7, #8]
 80025f4:	781b      	ldrb	r3, [r3, #0]
 80025f6:	4618      	mov	r0, r3
 80025f8:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80025fc:	697b      	ldr	r3, [r7, #20]
 80025fe:	3301      	adds	r3, #1
 8002600:	617b      	str	r3, [r7, #20]
 8002602:	697a      	ldr	r2, [r7, #20]
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	429a      	cmp	r2, r3
 8002608:	dbf1      	blt.n	80025ee <_write+0x12>
  }
  return len;
 800260a:	687b      	ldr	r3, [r7, #4]
}
 800260c:	4618      	mov	r0, r3
 800260e:	3718      	adds	r7, #24
 8002610:	46bd      	mov	sp, r7
 8002612:	bd80      	pop	{r7, pc}

08002614 <_close>:

int _close(int file)
{
 8002614:	b480      	push	{r7}
 8002616:	b083      	sub	sp, #12
 8002618:	af00      	add	r7, sp, #0
 800261a:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800261c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8002620:	4618      	mov	r0, r3
 8002622:	370c      	adds	r7, #12
 8002624:	46bd      	mov	sp, r7
 8002626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800262a:	4770      	bx	lr

0800262c <_fstat>:


int _fstat(int file, struct stat *st)
{
 800262c:	b480      	push	{r7}
 800262e:	b083      	sub	sp, #12
 8002630:	af00      	add	r7, sp, #0
 8002632:	6078      	str	r0, [r7, #4]
 8002634:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002636:	683b      	ldr	r3, [r7, #0]
 8002638:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800263c:	605a      	str	r2, [r3, #4]
  return 0;
 800263e:	2300      	movs	r3, #0
}
 8002640:	4618      	mov	r0, r3
 8002642:	370c      	adds	r7, #12
 8002644:	46bd      	mov	sp, r7
 8002646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800264a:	4770      	bx	lr

0800264c <_isatty>:

int _isatty(int file)
{
 800264c:	b480      	push	{r7}
 800264e:	b083      	sub	sp, #12
 8002650:	af00      	add	r7, sp, #0
 8002652:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002654:	2301      	movs	r3, #1
}
 8002656:	4618      	mov	r0, r3
 8002658:	370c      	adds	r7, #12
 800265a:	46bd      	mov	sp, r7
 800265c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002660:	4770      	bx	lr

08002662 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002662:	b480      	push	{r7}
 8002664:	b085      	sub	sp, #20
 8002666:	af00      	add	r7, sp, #0
 8002668:	60f8      	str	r0, [r7, #12]
 800266a:	60b9      	str	r1, [r7, #8]
 800266c:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800266e:	2300      	movs	r3, #0
}
 8002670:	4618      	mov	r0, r3
 8002672:	3714      	adds	r7, #20
 8002674:	46bd      	mov	sp, r7
 8002676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800267a:	4770      	bx	lr

0800267c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800267c:	b580      	push	{r7, lr}
 800267e:	b086      	sub	sp, #24
 8002680:	af00      	add	r7, sp, #0
 8002682:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002684:	4a14      	ldr	r2, [pc, #80]	@ (80026d8 <_sbrk+0x5c>)
 8002686:	4b15      	ldr	r3, [pc, #84]	@ (80026dc <_sbrk+0x60>)
 8002688:	1ad3      	subs	r3, r2, r3
 800268a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800268c:	697b      	ldr	r3, [r7, #20]
 800268e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002690:	4b13      	ldr	r3, [pc, #76]	@ (80026e0 <_sbrk+0x64>)
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	2b00      	cmp	r3, #0
 8002696:	d102      	bne.n	800269e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002698:	4b11      	ldr	r3, [pc, #68]	@ (80026e0 <_sbrk+0x64>)
 800269a:	4a12      	ldr	r2, [pc, #72]	@ (80026e4 <_sbrk+0x68>)
 800269c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800269e:	4b10      	ldr	r3, [pc, #64]	@ (80026e0 <_sbrk+0x64>)
 80026a0:	681a      	ldr	r2, [r3, #0]
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	4413      	add	r3, r2
 80026a6:	693a      	ldr	r2, [r7, #16]
 80026a8:	429a      	cmp	r2, r3
 80026aa:	d207      	bcs.n	80026bc <_sbrk+0x40>
  {
    errno = ENOMEM;
 80026ac:	f013 f81c 	bl	80156e8 <__errno>
 80026b0:	4603      	mov	r3, r0
 80026b2:	220c      	movs	r2, #12
 80026b4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80026b6:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80026ba:	e009      	b.n	80026d0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80026bc:	4b08      	ldr	r3, [pc, #32]	@ (80026e0 <_sbrk+0x64>)
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80026c2:	4b07      	ldr	r3, [pc, #28]	@ (80026e0 <_sbrk+0x64>)
 80026c4:	681a      	ldr	r2, [r3, #0]
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	4413      	add	r3, r2
 80026ca:	4a05      	ldr	r2, [pc, #20]	@ (80026e0 <_sbrk+0x64>)
 80026cc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80026ce:	68fb      	ldr	r3, [r7, #12]
}
 80026d0:	4618      	mov	r0, r3
 80026d2:	3718      	adds	r7, #24
 80026d4:	46bd      	mov	sp, r7
 80026d6:	bd80      	pop	{r7, pc}
 80026d8:	20020000 	.word	0x20020000
 80026dc:	00000400 	.word	0x00000400
 80026e0:	20003f88 	.word	0x20003f88
 80026e4:	2000dd48 	.word	0x2000dd48

080026e8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80026e8:	b480      	push	{r7}
 80026ea:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80026ec:	4b06      	ldr	r3, [pc, #24]	@ (8002708 <SystemInit+0x20>)
 80026ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80026f2:	4a05      	ldr	r2, [pc, #20]	@ (8002708 <SystemInit+0x20>)
 80026f4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80026f8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80026fc:	bf00      	nop
 80026fe:	46bd      	mov	sp, r7
 8002700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002704:	4770      	bx	lr
 8002706:	bf00      	nop
 8002708:	e000ed00 	.word	0xe000ed00

0800270c <cubemx_transport_open>:
#define UART_DMA_BUFFER_SIZE 2048

static uint8_t dma_buffer[UART_DMA_BUFFER_SIZE];
static size_t dma_head = 0, dma_tail = 0;

bool cubemx_transport_open(struct uxrCustomTransport * transport){
 800270c:	b580      	push	{r7, lr}
 800270e:	b084      	sub	sp, #16
 8002710:	af00      	add	r7, sp, #0
 8002712:	6078      	str	r0, [r7, #4]
    UART_HandleTypeDef * uart = (UART_HandleTypeDef*) transport->args;
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	f8d3 328c 	ldr.w	r3, [r3, #652]	@ 0x28c
 800271a:	60fb      	str	r3, [r7, #12]
    HAL_UART_Receive_DMA(uart, dma_buffer, UART_DMA_BUFFER_SIZE);
 800271c:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8002720:	4904      	ldr	r1, [pc, #16]	@ (8002734 <cubemx_transport_open+0x28>)
 8002722:	68f8      	ldr	r0, [r7, #12]
 8002724:	f002 fd2a 	bl	800517c <HAL_UART_Receive_DMA>
    return true;
 8002728:	2301      	movs	r3, #1
}
 800272a:	4618      	mov	r0, r3
 800272c:	3710      	adds	r7, #16
 800272e:	46bd      	mov	sp, r7
 8002730:	bd80      	pop	{r7, pc}
 8002732:	bf00      	nop
 8002734:	20003f8c 	.word	0x20003f8c

08002738 <cubemx_transport_close>:

bool cubemx_transport_close(struct uxrCustomTransport * transport){
 8002738:	b580      	push	{r7, lr}
 800273a:	b084      	sub	sp, #16
 800273c:	af00      	add	r7, sp, #0
 800273e:	6078      	str	r0, [r7, #4]
    UART_HandleTypeDef * uart = (UART_HandleTypeDef*) transport->args;
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	f8d3 328c 	ldr.w	r3, [r3, #652]	@ 0x28c
 8002746:	60fb      	str	r3, [r7, #12]
    HAL_UART_DMAStop(uart);
 8002748:	68f8      	ldr	r0, [r7, #12]
 800274a:	f002 fd3c 	bl	80051c6 <HAL_UART_DMAStop>
    return true;
 800274e:	2301      	movs	r3, #1
}
 8002750:	4618      	mov	r0, r3
 8002752:	3710      	adds	r7, #16
 8002754:	46bd      	mov	sp, r7
 8002756:	bd80      	pop	{r7, pc}

08002758 <cubemx_transport_write>:

size_t cubemx_transport_write(struct uxrCustomTransport* transport, uint8_t * buf, size_t len, uint8_t * err){
 8002758:	b580      	push	{r7, lr}
 800275a:	b086      	sub	sp, #24
 800275c:	af00      	add	r7, sp, #0
 800275e:	60f8      	str	r0, [r7, #12]
 8002760:	60b9      	str	r1, [r7, #8]
 8002762:	607a      	str	r2, [r7, #4]
 8002764:	603b      	str	r3, [r7, #0]
    UART_HandleTypeDef * uart = (UART_HandleTypeDef*) transport->args;
 8002766:	68fb      	ldr	r3, [r7, #12]
 8002768:	f8d3 328c 	ldr.w	r3, [r3, #652]	@ 0x28c
 800276c:	617b      	str	r3, [r7, #20]

    HAL_StatusTypeDef ret;
    if (uart->gState == HAL_UART_STATE_READY){
 800276e:	697b      	ldr	r3, [r7, #20]
 8002770:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002774:	b2db      	uxtb	r3, r3
 8002776:	2b20      	cmp	r3, #32
 8002778:	d11c      	bne.n	80027b4 <cubemx_transport_write+0x5c>
        ret = HAL_UART_Transmit_DMA(uart, buf, len);
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	b29b      	uxth	r3, r3
 800277e:	461a      	mov	r2, r3
 8002780:	68b9      	ldr	r1, [r7, #8]
 8002782:	6978      	ldr	r0, [r7, #20]
 8002784:	f002 fc8a 	bl	800509c <HAL_UART_Transmit_DMA>
 8002788:	4603      	mov	r3, r0
 800278a:	74fb      	strb	r3, [r7, #19]
        while (ret == HAL_OK && uart->gState != HAL_UART_STATE_READY){
 800278c:	e002      	b.n	8002794 <cubemx_transport_write+0x3c>
            osDelay(1);
 800278e:	2001      	movs	r0, #1
 8002790:	f003 ffb6 	bl	8006700 <osDelay>
        while (ret == HAL_OK && uart->gState != HAL_UART_STATE_READY){
 8002794:	7cfb      	ldrb	r3, [r7, #19]
 8002796:	2b00      	cmp	r3, #0
 8002798:	d105      	bne.n	80027a6 <cubemx_transport_write+0x4e>
 800279a:	697b      	ldr	r3, [r7, #20]
 800279c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80027a0:	b2db      	uxtb	r3, r3
 80027a2:	2b20      	cmp	r3, #32
 80027a4:	d1f3      	bne.n	800278e <cubemx_transport_write+0x36>
        }

        return (ret == HAL_OK) ? len : 0;
 80027a6:	7cfb      	ldrb	r3, [r7, #19]
 80027a8:	2b00      	cmp	r3, #0
 80027aa:	d101      	bne.n	80027b0 <cubemx_transport_write+0x58>
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	e002      	b.n	80027b6 <cubemx_transport_write+0x5e>
 80027b0:	2300      	movs	r3, #0
 80027b2:	e000      	b.n	80027b6 <cubemx_transport_write+0x5e>
    }else{
        return 0;
 80027b4:	2300      	movs	r3, #0
    }
}
 80027b6:	4618      	mov	r0, r3
 80027b8:	3718      	adds	r7, #24
 80027ba:	46bd      	mov	sp, r7
 80027bc:	bd80      	pop	{r7, pc}
	...

080027c0 <cubemx_transport_read>:

size_t cubemx_transport_read(struct uxrCustomTransport* transport, uint8_t* buf, size_t len, int timeout, uint8_t* err){
 80027c0:	b580      	push	{r7, lr}
 80027c2:	b088      	sub	sp, #32
 80027c4:	af00      	add	r7, sp, #0
 80027c6:	60f8      	str	r0, [r7, #12]
 80027c8:	60b9      	str	r1, [r7, #8]
 80027ca:	607a      	str	r2, [r7, #4]
 80027cc:	603b      	str	r3, [r7, #0]
    UART_HandleTypeDef * uart = (UART_HandleTypeDef*) transport->args;
 80027ce:	68fb      	ldr	r3, [r7, #12]
 80027d0:	f8d3 328c 	ldr.w	r3, [r3, #652]	@ 0x28c
 80027d4:	617b      	str	r3, [r7, #20]

    int ms_used = 0;
 80027d6:	2300      	movs	r3, #0
 80027d8:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
 80027da:	b672      	cpsid	i
}
 80027dc:	bf00      	nop
    do
    {
        __disable_irq();
        dma_tail = UART_DMA_BUFFER_SIZE - __HAL_DMA_GET_COUNTER(uart->hdmarx);
 80027de:	697b      	ldr	r3, [r7, #20]
 80027e0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	685b      	ldr	r3, [r3, #4]
 80027e6:	f5c3 6300 	rsb	r3, r3, #2048	@ 0x800
 80027ea:	4a1c      	ldr	r2, [pc, #112]	@ (800285c <cubemx_transport_read+0x9c>)
 80027ec:	6013      	str	r3, [r2, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 80027ee:	b662      	cpsie	i
}
 80027f0:	bf00      	nop
        __enable_irq();
        ms_used++;
 80027f2:	69fb      	ldr	r3, [r7, #28]
 80027f4:	3301      	adds	r3, #1
 80027f6:	61fb      	str	r3, [r7, #28]
        osDelay(portTICK_RATE_MS);
 80027f8:	2001      	movs	r0, #1
 80027fa:	f003 ff81 	bl	8006700 <osDelay>
    } while (dma_head == dma_tail && ms_used < timeout);
 80027fe:	4b18      	ldr	r3, [pc, #96]	@ (8002860 <cubemx_transport_read+0xa0>)
 8002800:	681a      	ldr	r2, [r3, #0]
 8002802:	4b16      	ldr	r3, [pc, #88]	@ (800285c <cubemx_transport_read+0x9c>)
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	429a      	cmp	r2, r3
 8002808:	d103      	bne.n	8002812 <cubemx_transport_read+0x52>
 800280a:	69fa      	ldr	r2, [r7, #28]
 800280c:	683b      	ldr	r3, [r7, #0]
 800280e:	429a      	cmp	r2, r3
 8002810:	dbe3      	blt.n	80027da <cubemx_transport_read+0x1a>
    
    size_t wrote = 0;
 8002812:	2300      	movs	r3, #0
 8002814:	61bb      	str	r3, [r7, #24]
    while ((dma_head != dma_tail) && (wrote < len)){
 8002816:	e011      	b.n	800283c <cubemx_transport_read+0x7c>
        buf[wrote] = dma_buffer[dma_head];
 8002818:	4b11      	ldr	r3, [pc, #68]	@ (8002860 <cubemx_transport_read+0xa0>)
 800281a:	681a      	ldr	r2, [r3, #0]
 800281c:	68b9      	ldr	r1, [r7, #8]
 800281e:	69bb      	ldr	r3, [r7, #24]
 8002820:	440b      	add	r3, r1
 8002822:	4910      	ldr	r1, [pc, #64]	@ (8002864 <cubemx_transport_read+0xa4>)
 8002824:	5c8a      	ldrb	r2, [r1, r2]
 8002826:	701a      	strb	r2, [r3, #0]
        dma_head = (dma_head + 1) % UART_DMA_BUFFER_SIZE;
 8002828:	4b0d      	ldr	r3, [pc, #52]	@ (8002860 <cubemx_transport_read+0xa0>)
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	3301      	adds	r3, #1
 800282e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002832:	4a0b      	ldr	r2, [pc, #44]	@ (8002860 <cubemx_transport_read+0xa0>)
 8002834:	6013      	str	r3, [r2, #0]
        wrote++;
 8002836:	69bb      	ldr	r3, [r7, #24]
 8002838:	3301      	adds	r3, #1
 800283a:	61bb      	str	r3, [r7, #24]
    while ((dma_head != dma_tail) && (wrote < len)){
 800283c:	4b08      	ldr	r3, [pc, #32]	@ (8002860 <cubemx_transport_read+0xa0>)
 800283e:	681a      	ldr	r2, [r3, #0]
 8002840:	4b06      	ldr	r3, [pc, #24]	@ (800285c <cubemx_transport_read+0x9c>)
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	429a      	cmp	r2, r3
 8002846:	d003      	beq.n	8002850 <cubemx_transport_read+0x90>
 8002848:	69ba      	ldr	r2, [r7, #24]
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	429a      	cmp	r2, r3
 800284e:	d3e3      	bcc.n	8002818 <cubemx_transport_read+0x58>
    }
    
    return wrote;
 8002850:	69bb      	ldr	r3, [r7, #24]
}
 8002852:	4618      	mov	r0, r3
 8002854:	3720      	adds	r7, #32
 8002856:	46bd      	mov	sp, r7
 8002858:	bd80      	pop	{r7, pc}
 800285a:	bf00      	nop
 800285c:	20004790 	.word	0x20004790
 8002860:	2000478c 	.word	0x2000478c
 8002864:	20003f8c 	.word	0x20003f8c

08002868 <Reset_Handler>:
 8002868:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80028a0 <LoopFillZerobss+0xe>
 800286c:	f7ff ff3c 	bl	80026e8 <SystemInit>
 8002870:	480c      	ldr	r0, [pc, #48]	@ (80028a4 <LoopFillZerobss+0x12>)
 8002872:	490d      	ldr	r1, [pc, #52]	@ (80028a8 <LoopFillZerobss+0x16>)
 8002874:	4a0d      	ldr	r2, [pc, #52]	@ (80028ac <LoopFillZerobss+0x1a>)
 8002876:	2300      	movs	r3, #0
 8002878:	e002      	b.n	8002880 <LoopCopyDataInit>

0800287a <CopyDataInit>:
 800287a:	58d4      	ldr	r4, [r2, r3]
 800287c:	50c4      	str	r4, [r0, r3]
 800287e:	3304      	adds	r3, #4

08002880 <LoopCopyDataInit>:
 8002880:	18c4      	adds	r4, r0, r3
 8002882:	428c      	cmp	r4, r1
 8002884:	d3f9      	bcc.n	800287a <CopyDataInit>
 8002886:	4a0a      	ldr	r2, [pc, #40]	@ (80028b0 <LoopFillZerobss+0x1e>)
 8002888:	4c0a      	ldr	r4, [pc, #40]	@ (80028b4 <LoopFillZerobss+0x22>)
 800288a:	2300      	movs	r3, #0
 800288c:	e001      	b.n	8002892 <LoopFillZerobss>

0800288e <FillZerobss>:
 800288e:	6013      	str	r3, [r2, #0]
 8002890:	3204      	adds	r2, #4

08002892 <LoopFillZerobss>:
 8002892:	42a2      	cmp	r2, r4
 8002894:	d3fb      	bcc.n	800288e <FillZerobss>
 8002896:	f012 ff2d 	bl	80156f4 <__libc_init_array>
 800289a:	f7fe fe5b 	bl	8001554 <main>
 800289e:	4770      	bx	lr
 80028a0:	20020000 	.word	0x20020000
 80028a4:	20000000 	.word	0x20000000
 80028a8:	20000110 	.word	0x20000110
 80028ac:	080172a8 	.word	0x080172a8
 80028b0:	20000110 	.word	0x20000110
 80028b4:	2000dd48 	.word	0x2000dd48

080028b8 <ADC_IRQHandler>:
 80028b8:	e7fe      	b.n	80028b8 <ADC_IRQHandler>
	...

080028bc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80028bc:	b580      	push	{r7, lr}
 80028be:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80028c0:	4b0e      	ldr	r3, [pc, #56]	@ (80028fc <HAL_Init+0x40>)
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	4a0d      	ldr	r2, [pc, #52]	@ (80028fc <HAL_Init+0x40>)
 80028c6:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80028ca:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80028cc:	4b0b      	ldr	r3, [pc, #44]	@ (80028fc <HAL_Init+0x40>)
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	4a0a      	ldr	r2, [pc, #40]	@ (80028fc <HAL_Init+0x40>)
 80028d2:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80028d6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80028d8:	4b08      	ldr	r3, [pc, #32]	@ (80028fc <HAL_Init+0x40>)
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	4a07      	ldr	r2, [pc, #28]	@ (80028fc <HAL_Init+0x40>)
 80028de:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80028e2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80028e4:	2003      	movs	r0, #3
 80028e6:	f000 f8d8 	bl	8002a9a <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80028ea:	2000      	movs	r0, #0
 80028ec:	f7ff fd80 	bl	80023f0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80028f0:	f7ff fc06 	bl	8002100 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80028f4:	2300      	movs	r3, #0
}
 80028f6:	4618      	mov	r0, r3
 80028f8:	bd80      	pop	{r7, pc}
 80028fa:	bf00      	nop
 80028fc:	40023c00 	.word	0x40023c00

08002900 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002900:	b480      	push	{r7}
 8002902:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002904:	4b06      	ldr	r3, [pc, #24]	@ (8002920 <HAL_IncTick+0x20>)
 8002906:	781b      	ldrb	r3, [r3, #0]
 8002908:	461a      	mov	r2, r3
 800290a:	4b06      	ldr	r3, [pc, #24]	@ (8002924 <HAL_IncTick+0x24>)
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	4413      	add	r3, r2
 8002910:	4a04      	ldr	r2, [pc, #16]	@ (8002924 <HAL_IncTick+0x24>)
 8002912:	6013      	str	r3, [r2, #0]
}
 8002914:	bf00      	nop
 8002916:	46bd      	mov	sp, r7
 8002918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800291c:	4770      	bx	lr
 800291e:	bf00      	nop
 8002920:	2000000c 	.word	0x2000000c
 8002924:	20004794 	.word	0x20004794

08002928 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002928:	b480      	push	{r7}
 800292a:	af00      	add	r7, sp, #0
  return uwTick;
 800292c:	4b03      	ldr	r3, [pc, #12]	@ (800293c <HAL_GetTick+0x14>)
 800292e:	681b      	ldr	r3, [r3, #0]
}
 8002930:	4618      	mov	r0, r3
 8002932:	46bd      	mov	sp, r7
 8002934:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002938:	4770      	bx	lr
 800293a:	bf00      	nop
 800293c:	20004794 	.word	0x20004794

08002940 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002940:	b480      	push	{r7}
 8002942:	b085      	sub	sp, #20
 8002944:	af00      	add	r7, sp, #0
 8002946:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	f003 0307 	and.w	r3, r3, #7
 800294e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002950:	4b0c      	ldr	r3, [pc, #48]	@ (8002984 <__NVIC_SetPriorityGrouping+0x44>)
 8002952:	68db      	ldr	r3, [r3, #12]
 8002954:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002956:	68ba      	ldr	r2, [r7, #8]
 8002958:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800295c:	4013      	ands	r3, r2
 800295e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002960:	68fb      	ldr	r3, [r7, #12]
 8002962:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002964:	68bb      	ldr	r3, [r7, #8]
 8002966:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002968:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800296c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002970:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002972:	4a04      	ldr	r2, [pc, #16]	@ (8002984 <__NVIC_SetPriorityGrouping+0x44>)
 8002974:	68bb      	ldr	r3, [r7, #8]
 8002976:	60d3      	str	r3, [r2, #12]
}
 8002978:	bf00      	nop
 800297a:	3714      	adds	r7, #20
 800297c:	46bd      	mov	sp, r7
 800297e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002982:	4770      	bx	lr
 8002984:	e000ed00 	.word	0xe000ed00

08002988 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002988:	b480      	push	{r7}
 800298a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800298c:	4b04      	ldr	r3, [pc, #16]	@ (80029a0 <__NVIC_GetPriorityGrouping+0x18>)
 800298e:	68db      	ldr	r3, [r3, #12]
 8002990:	0a1b      	lsrs	r3, r3, #8
 8002992:	f003 0307 	and.w	r3, r3, #7
}
 8002996:	4618      	mov	r0, r3
 8002998:	46bd      	mov	sp, r7
 800299a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800299e:	4770      	bx	lr
 80029a0:	e000ed00 	.word	0xe000ed00

080029a4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80029a4:	b480      	push	{r7}
 80029a6:	b083      	sub	sp, #12
 80029a8:	af00      	add	r7, sp, #0
 80029aa:	4603      	mov	r3, r0
 80029ac:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80029ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80029b2:	2b00      	cmp	r3, #0
 80029b4:	db0b      	blt.n	80029ce <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80029b6:	79fb      	ldrb	r3, [r7, #7]
 80029b8:	f003 021f 	and.w	r2, r3, #31
 80029bc:	4907      	ldr	r1, [pc, #28]	@ (80029dc <__NVIC_EnableIRQ+0x38>)
 80029be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80029c2:	095b      	lsrs	r3, r3, #5
 80029c4:	2001      	movs	r0, #1
 80029c6:	fa00 f202 	lsl.w	r2, r0, r2
 80029ca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80029ce:	bf00      	nop
 80029d0:	370c      	adds	r7, #12
 80029d2:	46bd      	mov	sp, r7
 80029d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029d8:	4770      	bx	lr
 80029da:	bf00      	nop
 80029dc:	e000e100 	.word	0xe000e100

080029e0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80029e0:	b480      	push	{r7}
 80029e2:	b083      	sub	sp, #12
 80029e4:	af00      	add	r7, sp, #0
 80029e6:	4603      	mov	r3, r0
 80029e8:	6039      	str	r1, [r7, #0]
 80029ea:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80029ec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80029f0:	2b00      	cmp	r3, #0
 80029f2:	db0a      	blt.n	8002a0a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80029f4:	683b      	ldr	r3, [r7, #0]
 80029f6:	b2da      	uxtb	r2, r3
 80029f8:	490c      	ldr	r1, [pc, #48]	@ (8002a2c <__NVIC_SetPriority+0x4c>)
 80029fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80029fe:	0112      	lsls	r2, r2, #4
 8002a00:	b2d2      	uxtb	r2, r2
 8002a02:	440b      	add	r3, r1
 8002a04:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002a08:	e00a      	b.n	8002a20 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002a0a:	683b      	ldr	r3, [r7, #0]
 8002a0c:	b2da      	uxtb	r2, r3
 8002a0e:	4908      	ldr	r1, [pc, #32]	@ (8002a30 <__NVIC_SetPriority+0x50>)
 8002a10:	79fb      	ldrb	r3, [r7, #7]
 8002a12:	f003 030f 	and.w	r3, r3, #15
 8002a16:	3b04      	subs	r3, #4
 8002a18:	0112      	lsls	r2, r2, #4
 8002a1a:	b2d2      	uxtb	r2, r2
 8002a1c:	440b      	add	r3, r1
 8002a1e:	761a      	strb	r2, [r3, #24]
}
 8002a20:	bf00      	nop
 8002a22:	370c      	adds	r7, #12
 8002a24:	46bd      	mov	sp, r7
 8002a26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a2a:	4770      	bx	lr
 8002a2c:	e000e100 	.word	0xe000e100
 8002a30:	e000ed00 	.word	0xe000ed00

08002a34 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002a34:	b480      	push	{r7}
 8002a36:	b089      	sub	sp, #36	@ 0x24
 8002a38:	af00      	add	r7, sp, #0
 8002a3a:	60f8      	str	r0, [r7, #12]
 8002a3c:	60b9      	str	r1, [r7, #8]
 8002a3e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002a40:	68fb      	ldr	r3, [r7, #12]
 8002a42:	f003 0307 	and.w	r3, r3, #7
 8002a46:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002a48:	69fb      	ldr	r3, [r7, #28]
 8002a4a:	f1c3 0307 	rsb	r3, r3, #7
 8002a4e:	2b04      	cmp	r3, #4
 8002a50:	bf28      	it	cs
 8002a52:	2304      	movcs	r3, #4
 8002a54:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002a56:	69fb      	ldr	r3, [r7, #28]
 8002a58:	3304      	adds	r3, #4
 8002a5a:	2b06      	cmp	r3, #6
 8002a5c:	d902      	bls.n	8002a64 <NVIC_EncodePriority+0x30>
 8002a5e:	69fb      	ldr	r3, [r7, #28]
 8002a60:	3b03      	subs	r3, #3
 8002a62:	e000      	b.n	8002a66 <NVIC_EncodePriority+0x32>
 8002a64:	2300      	movs	r3, #0
 8002a66:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002a68:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8002a6c:	69bb      	ldr	r3, [r7, #24]
 8002a6e:	fa02 f303 	lsl.w	r3, r2, r3
 8002a72:	43da      	mvns	r2, r3
 8002a74:	68bb      	ldr	r3, [r7, #8]
 8002a76:	401a      	ands	r2, r3
 8002a78:	697b      	ldr	r3, [r7, #20]
 8002a7a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002a7c:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8002a80:	697b      	ldr	r3, [r7, #20]
 8002a82:	fa01 f303 	lsl.w	r3, r1, r3
 8002a86:	43d9      	mvns	r1, r3
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002a8c:	4313      	orrs	r3, r2
         );
}
 8002a8e:	4618      	mov	r0, r3
 8002a90:	3724      	adds	r7, #36	@ 0x24
 8002a92:	46bd      	mov	sp, r7
 8002a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a98:	4770      	bx	lr

08002a9a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002a9a:	b580      	push	{r7, lr}
 8002a9c:	b082      	sub	sp, #8
 8002a9e:	af00      	add	r7, sp, #0
 8002aa0:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002aa2:	6878      	ldr	r0, [r7, #4]
 8002aa4:	f7ff ff4c 	bl	8002940 <__NVIC_SetPriorityGrouping>
}
 8002aa8:	bf00      	nop
 8002aaa:	3708      	adds	r7, #8
 8002aac:	46bd      	mov	sp, r7
 8002aae:	bd80      	pop	{r7, pc}

08002ab0 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002ab0:	b580      	push	{r7, lr}
 8002ab2:	b086      	sub	sp, #24
 8002ab4:	af00      	add	r7, sp, #0
 8002ab6:	4603      	mov	r3, r0
 8002ab8:	60b9      	str	r1, [r7, #8]
 8002aba:	607a      	str	r2, [r7, #4]
 8002abc:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002abe:	2300      	movs	r3, #0
 8002ac0:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002ac2:	f7ff ff61 	bl	8002988 <__NVIC_GetPriorityGrouping>
 8002ac6:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002ac8:	687a      	ldr	r2, [r7, #4]
 8002aca:	68b9      	ldr	r1, [r7, #8]
 8002acc:	6978      	ldr	r0, [r7, #20]
 8002ace:	f7ff ffb1 	bl	8002a34 <NVIC_EncodePriority>
 8002ad2:	4602      	mov	r2, r0
 8002ad4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002ad8:	4611      	mov	r1, r2
 8002ada:	4618      	mov	r0, r3
 8002adc:	f7ff ff80 	bl	80029e0 <__NVIC_SetPriority>
}
 8002ae0:	bf00      	nop
 8002ae2:	3718      	adds	r7, #24
 8002ae4:	46bd      	mov	sp, r7
 8002ae6:	bd80      	pop	{r7, pc}

08002ae8 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002ae8:	b580      	push	{r7, lr}
 8002aea:	b082      	sub	sp, #8
 8002aec:	af00      	add	r7, sp, #0
 8002aee:	4603      	mov	r3, r0
 8002af0:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002af2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002af6:	4618      	mov	r0, r3
 8002af8:	f7ff ff54 	bl	80029a4 <__NVIC_EnableIRQ>
}
 8002afc:	bf00      	nop
 8002afe:	3708      	adds	r7, #8
 8002b00:	46bd      	mov	sp, r7
 8002b02:	bd80      	pop	{r7, pc}

08002b04 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002b04:	b580      	push	{r7, lr}
 8002b06:	b086      	sub	sp, #24
 8002b08:	af00      	add	r7, sp, #0
 8002b0a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002b0c:	2300      	movs	r3, #0
 8002b0e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002b10:	f7ff ff0a 	bl	8002928 <HAL_GetTick>
 8002b14:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	2b00      	cmp	r3, #0
 8002b1a:	d101      	bne.n	8002b20 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002b1c:	2301      	movs	r3, #1
 8002b1e:	e099      	b.n	8002c54 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	2202      	movs	r2, #2
 8002b24:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	2200      	movs	r2, #0
 8002b2c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	681a      	ldr	r2, [r3, #0]
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	f022 0201 	bic.w	r2, r2, #1
 8002b3e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002b40:	e00f      	b.n	8002b62 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002b42:	f7ff fef1 	bl	8002928 <HAL_GetTick>
 8002b46:	4602      	mov	r2, r0
 8002b48:	693b      	ldr	r3, [r7, #16]
 8002b4a:	1ad3      	subs	r3, r2, r3
 8002b4c:	2b05      	cmp	r3, #5
 8002b4e:	d908      	bls.n	8002b62 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	2220      	movs	r2, #32
 8002b54:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	2203      	movs	r2, #3
 8002b5a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 8002b5e:	2303      	movs	r3, #3
 8002b60:	e078      	b.n	8002c54 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	f003 0301 	and.w	r3, r3, #1
 8002b6c:	2b00      	cmp	r3, #0
 8002b6e:	d1e8      	bne.n	8002b42 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002b78:	697a      	ldr	r2, [r7, #20]
 8002b7a:	4b38      	ldr	r3, [pc, #224]	@ (8002c5c <HAL_DMA_Init+0x158>)
 8002b7c:	4013      	ands	r3, r2
 8002b7e:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	685a      	ldr	r2, [r3, #4]
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	689b      	ldr	r3, [r3, #8]
 8002b88:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002b8e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	691b      	ldr	r3, [r3, #16]
 8002b94:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002b9a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	699b      	ldr	r3, [r3, #24]
 8002ba0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002ba6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	6a1b      	ldr	r3, [r3, #32]
 8002bac:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002bae:	697a      	ldr	r2, [r7, #20]
 8002bb0:	4313      	orrs	r3, r2
 8002bb2:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002bb8:	2b04      	cmp	r3, #4
 8002bba:	d107      	bne.n	8002bcc <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002bc4:	4313      	orrs	r3, r2
 8002bc6:	697a      	ldr	r2, [r7, #20]
 8002bc8:	4313      	orrs	r3, r2
 8002bca:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	697a      	ldr	r2, [r7, #20]
 8002bd2:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	695b      	ldr	r3, [r3, #20]
 8002bda:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002bdc:	697b      	ldr	r3, [r7, #20]
 8002bde:	f023 0307 	bic.w	r3, r3, #7
 8002be2:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002be8:	697a      	ldr	r2, [r7, #20]
 8002bea:	4313      	orrs	r3, r2
 8002bec:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002bf2:	2b04      	cmp	r3, #4
 8002bf4:	d117      	bne.n	8002c26 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002bfa:	697a      	ldr	r2, [r7, #20]
 8002bfc:	4313      	orrs	r3, r2
 8002bfe:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002c04:	2b00      	cmp	r3, #0
 8002c06:	d00e      	beq.n	8002c26 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002c08:	6878      	ldr	r0, [r7, #4]
 8002c0a:	f000 fb01 	bl	8003210 <DMA_CheckFifoParam>
 8002c0e:	4603      	mov	r3, r0
 8002c10:	2b00      	cmp	r3, #0
 8002c12:	d008      	beq.n	8002c26 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	2240      	movs	r2, #64	@ 0x40
 8002c18:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	2201      	movs	r2, #1
 8002c1e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 8002c22:	2301      	movs	r3, #1
 8002c24:	e016      	b.n	8002c54 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	697a      	ldr	r2, [r7, #20]
 8002c2c:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002c2e:	6878      	ldr	r0, [r7, #4]
 8002c30:	f000 fab8 	bl	80031a4 <DMA_CalcBaseAndBitshift>
 8002c34:	4603      	mov	r3, r0
 8002c36:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002c3c:	223f      	movs	r2, #63	@ 0x3f
 8002c3e:	409a      	lsls	r2, r3
 8002c40:	68fb      	ldr	r3, [r7, #12]
 8002c42:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	2200      	movs	r2, #0
 8002c48:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	2201      	movs	r2, #1
 8002c4e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8002c52:	2300      	movs	r3, #0
}
 8002c54:	4618      	mov	r0, r3
 8002c56:	3718      	adds	r7, #24
 8002c58:	46bd      	mov	sp, r7
 8002c5a:	bd80      	pop	{r7, pc}
 8002c5c:	f010803f 	.word	0xf010803f

08002c60 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002c60:	b580      	push	{r7, lr}
 8002c62:	b086      	sub	sp, #24
 8002c64:	af00      	add	r7, sp, #0
 8002c66:	60f8      	str	r0, [r7, #12]
 8002c68:	60b9      	str	r1, [r7, #8]
 8002c6a:	607a      	str	r2, [r7, #4]
 8002c6c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002c6e:	2300      	movs	r3, #0
 8002c70:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002c72:	68fb      	ldr	r3, [r7, #12]
 8002c74:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002c76:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8002c78:	68fb      	ldr	r3, [r7, #12]
 8002c7a:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8002c7e:	2b01      	cmp	r3, #1
 8002c80:	d101      	bne.n	8002c86 <HAL_DMA_Start_IT+0x26>
 8002c82:	2302      	movs	r3, #2
 8002c84:	e040      	b.n	8002d08 <HAL_DMA_Start_IT+0xa8>
 8002c86:	68fb      	ldr	r3, [r7, #12]
 8002c88:	2201      	movs	r2, #1
 8002c8a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002c8e:	68fb      	ldr	r3, [r7, #12]
 8002c90:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002c94:	b2db      	uxtb	r3, r3
 8002c96:	2b01      	cmp	r3, #1
 8002c98:	d12f      	bne.n	8002cfa <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002c9a:	68fb      	ldr	r3, [r7, #12]
 8002c9c:	2202      	movs	r2, #2
 8002c9e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002ca2:	68fb      	ldr	r3, [r7, #12]
 8002ca4:	2200      	movs	r2, #0
 8002ca6:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002ca8:	683b      	ldr	r3, [r7, #0]
 8002caa:	687a      	ldr	r2, [r7, #4]
 8002cac:	68b9      	ldr	r1, [r7, #8]
 8002cae:	68f8      	ldr	r0, [r7, #12]
 8002cb0:	f000 fa4a 	bl	8003148 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002cb4:	68fb      	ldr	r3, [r7, #12]
 8002cb6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002cb8:	223f      	movs	r2, #63	@ 0x3f
 8002cba:	409a      	lsls	r2, r3
 8002cbc:	693b      	ldr	r3, [r7, #16]
 8002cbe:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8002cc0:	68fb      	ldr	r3, [r7, #12]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	681a      	ldr	r2, [r3, #0]
 8002cc6:	68fb      	ldr	r3, [r7, #12]
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	f042 0216 	orr.w	r2, r2, #22
 8002cce:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8002cd0:	68fb      	ldr	r3, [r7, #12]
 8002cd2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002cd4:	2b00      	cmp	r3, #0
 8002cd6:	d007      	beq.n	8002ce8 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8002cd8:	68fb      	ldr	r3, [r7, #12]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	681a      	ldr	r2, [r3, #0]
 8002cde:	68fb      	ldr	r3, [r7, #12]
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	f042 0208 	orr.w	r2, r2, #8
 8002ce6:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002ce8:	68fb      	ldr	r3, [r7, #12]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	681a      	ldr	r2, [r3, #0]
 8002cee:	68fb      	ldr	r3, [r7, #12]
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	f042 0201 	orr.w	r2, r2, #1
 8002cf6:	601a      	str	r2, [r3, #0]
 8002cf8:	e005      	b.n	8002d06 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8002cfa:	68fb      	ldr	r3, [r7, #12]
 8002cfc:	2200      	movs	r2, #0
 8002cfe:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8002d02:	2302      	movs	r3, #2
 8002d04:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8002d06:	7dfb      	ldrb	r3, [r7, #23]
}
 8002d08:	4618      	mov	r0, r3
 8002d0a:	3718      	adds	r7, #24
 8002d0c:	46bd      	mov	sp, r7
 8002d0e:	bd80      	pop	{r7, pc}

08002d10 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002d10:	b580      	push	{r7, lr}
 8002d12:	b084      	sub	sp, #16
 8002d14:	af00      	add	r7, sp, #0
 8002d16:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002d1c:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8002d1e:	f7ff fe03 	bl	8002928 <HAL_GetTick>
 8002d22:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002d2a:	b2db      	uxtb	r3, r3
 8002d2c:	2b02      	cmp	r3, #2
 8002d2e:	d008      	beq.n	8002d42 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	2280      	movs	r2, #128	@ 0x80
 8002d34:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	2200      	movs	r2, #0
 8002d3a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8002d3e:	2301      	movs	r3, #1
 8002d40:	e052      	b.n	8002de8 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	681a      	ldr	r2, [r3, #0]
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	f022 0216 	bic.w	r2, r2, #22
 8002d50:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	695a      	ldr	r2, [r3, #20]
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002d60:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d66:	2b00      	cmp	r3, #0
 8002d68:	d103      	bne.n	8002d72 <HAL_DMA_Abort+0x62>
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002d6e:	2b00      	cmp	r3, #0
 8002d70:	d007      	beq.n	8002d82 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	681a      	ldr	r2, [r3, #0]
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	f022 0208 	bic.w	r2, r2, #8
 8002d80:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	681a      	ldr	r2, [r3, #0]
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	f022 0201 	bic.w	r2, r2, #1
 8002d90:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002d92:	e013      	b.n	8002dbc <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002d94:	f7ff fdc8 	bl	8002928 <HAL_GetTick>
 8002d98:	4602      	mov	r2, r0
 8002d9a:	68bb      	ldr	r3, [r7, #8]
 8002d9c:	1ad3      	subs	r3, r2, r3
 8002d9e:	2b05      	cmp	r3, #5
 8002da0:	d90c      	bls.n	8002dbc <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	2220      	movs	r2, #32
 8002da6:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	2203      	movs	r2, #3
 8002dac:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	2200      	movs	r2, #0
 8002db4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 8002db8:	2303      	movs	r3, #3
 8002dba:	e015      	b.n	8002de8 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	f003 0301 	and.w	r3, r3, #1
 8002dc6:	2b00      	cmp	r3, #0
 8002dc8:	d1e4      	bne.n	8002d94 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002dce:	223f      	movs	r2, #63	@ 0x3f
 8002dd0:	409a      	lsls	r2, r3
 8002dd2:	68fb      	ldr	r3, [r7, #12]
 8002dd4:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	2201      	movs	r2, #1
 8002dda:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	2200      	movs	r2, #0
 8002de2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 8002de6:	2300      	movs	r3, #0
}
 8002de8:	4618      	mov	r0, r3
 8002dea:	3710      	adds	r7, #16
 8002dec:	46bd      	mov	sp, r7
 8002dee:	bd80      	pop	{r7, pc}

08002df0 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002df0:	b480      	push	{r7}
 8002df2:	b083      	sub	sp, #12
 8002df4:	af00      	add	r7, sp, #0
 8002df6:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002dfe:	b2db      	uxtb	r3, r3
 8002e00:	2b02      	cmp	r3, #2
 8002e02:	d004      	beq.n	8002e0e <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	2280      	movs	r2, #128	@ 0x80
 8002e08:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8002e0a:	2301      	movs	r3, #1
 8002e0c:	e00c      	b.n	8002e28 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	2205      	movs	r2, #5
 8002e12:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	681a      	ldr	r2, [r3, #0]
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	f022 0201 	bic.w	r2, r2, #1
 8002e24:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002e26:	2300      	movs	r3, #0
}
 8002e28:	4618      	mov	r0, r3
 8002e2a:	370c      	adds	r7, #12
 8002e2c:	46bd      	mov	sp, r7
 8002e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e32:	4770      	bx	lr

08002e34 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002e34:	b580      	push	{r7, lr}
 8002e36:	b086      	sub	sp, #24
 8002e38:	af00      	add	r7, sp, #0
 8002e3a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8002e3c:	2300      	movs	r3, #0
 8002e3e:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002e40:	4b8e      	ldr	r3, [pc, #568]	@ (800307c <HAL_DMA_IRQHandler+0x248>)
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	4a8e      	ldr	r2, [pc, #568]	@ (8003080 <HAL_DMA_IRQHandler+0x24c>)
 8002e46:	fba2 2303 	umull	r2, r3, r2, r3
 8002e4a:	0a9b      	lsrs	r3, r3, #10
 8002e4c:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002e52:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8002e54:	693b      	ldr	r3, [r7, #16]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002e5e:	2208      	movs	r2, #8
 8002e60:	409a      	lsls	r2, r3
 8002e62:	68fb      	ldr	r3, [r7, #12]
 8002e64:	4013      	ands	r3, r2
 8002e66:	2b00      	cmp	r3, #0
 8002e68:	d01a      	beq.n	8002ea0 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	f003 0304 	and.w	r3, r3, #4
 8002e74:	2b00      	cmp	r3, #0
 8002e76:	d013      	beq.n	8002ea0 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	681a      	ldr	r2, [r3, #0]
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	f022 0204 	bic.w	r2, r2, #4
 8002e86:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002e8c:	2208      	movs	r2, #8
 8002e8e:	409a      	lsls	r2, r3
 8002e90:	693b      	ldr	r3, [r7, #16]
 8002e92:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002e98:	f043 0201 	orr.w	r2, r3, #1
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002ea4:	2201      	movs	r2, #1
 8002ea6:	409a      	lsls	r2, r3
 8002ea8:	68fb      	ldr	r3, [r7, #12]
 8002eaa:	4013      	ands	r3, r2
 8002eac:	2b00      	cmp	r3, #0
 8002eae:	d012      	beq.n	8002ed6 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	695b      	ldr	r3, [r3, #20]
 8002eb6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002eba:	2b00      	cmp	r3, #0
 8002ebc:	d00b      	beq.n	8002ed6 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002ec2:	2201      	movs	r2, #1
 8002ec4:	409a      	lsls	r2, r3
 8002ec6:	693b      	ldr	r3, [r7, #16]
 8002ec8:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002ece:	f043 0202 	orr.w	r2, r3, #2
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002eda:	2204      	movs	r2, #4
 8002edc:	409a      	lsls	r2, r3
 8002ede:	68fb      	ldr	r3, [r7, #12]
 8002ee0:	4013      	ands	r3, r2
 8002ee2:	2b00      	cmp	r3, #0
 8002ee4:	d012      	beq.n	8002f0c <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	f003 0302 	and.w	r3, r3, #2
 8002ef0:	2b00      	cmp	r3, #0
 8002ef2:	d00b      	beq.n	8002f0c <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002ef8:	2204      	movs	r2, #4
 8002efa:	409a      	lsls	r2, r3
 8002efc:	693b      	ldr	r3, [r7, #16]
 8002efe:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002f04:	f043 0204 	orr.w	r2, r3, #4
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002f10:	2210      	movs	r2, #16
 8002f12:	409a      	lsls	r2, r3
 8002f14:	68fb      	ldr	r3, [r7, #12]
 8002f16:	4013      	ands	r3, r2
 8002f18:	2b00      	cmp	r3, #0
 8002f1a:	d043      	beq.n	8002fa4 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	f003 0308 	and.w	r3, r3, #8
 8002f26:	2b00      	cmp	r3, #0
 8002f28:	d03c      	beq.n	8002fa4 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002f2e:	2210      	movs	r2, #16
 8002f30:	409a      	lsls	r2, r3
 8002f32:	693b      	ldr	r3, [r7, #16]
 8002f34:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002f40:	2b00      	cmp	r3, #0
 8002f42:	d018      	beq.n	8002f76 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002f4e:	2b00      	cmp	r3, #0
 8002f50:	d108      	bne.n	8002f64 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f56:	2b00      	cmp	r3, #0
 8002f58:	d024      	beq.n	8002fa4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f5e:	6878      	ldr	r0, [r7, #4]
 8002f60:	4798      	blx	r3
 8002f62:	e01f      	b.n	8002fa4 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002f68:	2b00      	cmp	r3, #0
 8002f6a:	d01b      	beq.n	8002fa4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002f70:	6878      	ldr	r0, [r7, #4]
 8002f72:	4798      	blx	r3
 8002f74:	e016      	b.n	8002fa4 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002f80:	2b00      	cmp	r3, #0
 8002f82:	d107      	bne.n	8002f94 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	681a      	ldr	r2, [r3, #0]
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	f022 0208 	bic.w	r2, r2, #8
 8002f92:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f98:	2b00      	cmp	r3, #0
 8002f9a:	d003      	beq.n	8002fa4 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002fa0:	6878      	ldr	r0, [r7, #4]
 8002fa2:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002fa8:	2220      	movs	r2, #32
 8002faa:	409a      	lsls	r2, r3
 8002fac:	68fb      	ldr	r3, [r7, #12]
 8002fae:	4013      	ands	r3, r2
 8002fb0:	2b00      	cmp	r3, #0
 8002fb2:	f000 808f 	beq.w	80030d4 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	f003 0310 	and.w	r3, r3, #16
 8002fc0:	2b00      	cmp	r3, #0
 8002fc2:	f000 8087 	beq.w	80030d4 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002fca:	2220      	movs	r2, #32
 8002fcc:	409a      	lsls	r2, r3
 8002fce:	693b      	ldr	r3, [r7, #16]
 8002fd0:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002fd8:	b2db      	uxtb	r3, r3
 8002fda:	2b05      	cmp	r3, #5
 8002fdc:	d136      	bne.n	800304c <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	681a      	ldr	r2, [r3, #0]
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	f022 0216 	bic.w	r2, r2, #22
 8002fec:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	695a      	ldr	r2, [r3, #20]
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002ffc:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003002:	2b00      	cmp	r3, #0
 8003004:	d103      	bne.n	800300e <HAL_DMA_IRQHandler+0x1da>
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800300a:	2b00      	cmp	r3, #0
 800300c:	d007      	beq.n	800301e <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	681a      	ldr	r2, [r3, #0]
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	f022 0208 	bic.w	r2, r2, #8
 800301c:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003022:	223f      	movs	r2, #63	@ 0x3f
 8003024:	409a      	lsls	r2, r3
 8003026:	693b      	ldr	r3, [r7, #16]
 8003028:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	2201      	movs	r2, #1
 800302e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	2200      	movs	r2, #0
 8003036:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800303e:	2b00      	cmp	r3, #0
 8003040:	d07e      	beq.n	8003140 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003046:	6878      	ldr	r0, [r7, #4]
 8003048:	4798      	blx	r3
        }
        return;
 800304a:	e079      	b.n	8003140 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003056:	2b00      	cmp	r3, #0
 8003058:	d01d      	beq.n	8003096 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003064:	2b00      	cmp	r3, #0
 8003066:	d10d      	bne.n	8003084 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800306c:	2b00      	cmp	r3, #0
 800306e:	d031      	beq.n	80030d4 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003074:	6878      	ldr	r0, [r7, #4]
 8003076:	4798      	blx	r3
 8003078:	e02c      	b.n	80030d4 <HAL_DMA_IRQHandler+0x2a0>
 800307a:	bf00      	nop
 800307c:	20000004 	.word	0x20000004
 8003080:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003088:	2b00      	cmp	r3, #0
 800308a:	d023      	beq.n	80030d4 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003090:	6878      	ldr	r0, [r7, #4]
 8003092:	4798      	blx	r3
 8003094:	e01e      	b.n	80030d4 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80030a0:	2b00      	cmp	r3, #0
 80030a2:	d10f      	bne.n	80030c4 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	681a      	ldr	r2, [r3, #0]
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	f022 0210 	bic.w	r2, r2, #16
 80030b2:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	2201      	movs	r2, #1
 80030b8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	2200      	movs	r2, #0
 80030c0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80030c8:	2b00      	cmp	r3, #0
 80030ca:	d003      	beq.n	80030d4 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80030d0:	6878      	ldr	r0, [r7, #4]
 80030d2:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80030d8:	2b00      	cmp	r3, #0
 80030da:	d032      	beq.n	8003142 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80030e0:	f003 0301 	and.w	r3, r3, #1
 80030e4:	2b00      	cmp	r3, #0
 80030e6:	d022      	beq.n	800312e <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	2205      	movs	r2, #5
 80030ec:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	681a      	ldr	r2, [r3, #0]
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	f022 0201 	bic.w	r2, r2, #1
 80030fe:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8003100:	68bb      	ldr	r3, [r7, #8]
 8003102:	3301      	adds	r3, #1
 8003104:	60bb      	str	r3, [r7, #8]
 8003106:	697a      	ldr	r2, [r7, #20]
 8003108:	429a      	cmp	r2, r3
 800310a:	d307      	bcc.n	800311c <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	f003 0301 	and.w	r3, r3, #1
 8003116:	2b00      	cmp	r3, #0
 8003118:	d1f2      	bne.n	8003100 <HAL_DMA_IRQHandler+0x2cc>
 800311a:	e000      	b.n	800311e <HAL_DMA_IRQHandler+0x2ea>
          break;
 800311c:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	2201      	movs	r2, #1
 8003122:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	2200      	movs	r2, #0
 800312a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003132:	2b00      	cmp	r3, #0
 8003134:	d005      	beq.n	8003142 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800313a:	6878      	ldr	r0, [r7, #4]
 800313c:	4798      	blx	r3
 800313e:	e000      	b.n	8003142 <HAL_DMA_IRQHandler+0x30e>
        return;
 8003140:	bf00      	nop
    }
  }
}
 8003142:	3718      	adds	r7, #24
 8003144:	46bd      	mov	sp, r7
 8003146:	bd80      	pop	{r7, pc}

08003148 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003148:	b480      	push	{r7}
 800314a:	b085      	sub	sp, #20
 800314c:	af00      	add	r7, sp, #0
 800314e:	60f8      	str	r0, [r7, #12]
 8003150:	60b9      	str	r1, [r7, #8]
 8003152:	607a      	str	r2, [r7, #4]
 8003154:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8003156:	68fb      	ldr	r3, [r7, #12]
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	681a      	ldr	r2, [r3, #0]
 800315c:	68fb      	ldr	r3, [r7, #12]
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8003164:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8003166:	68fb      	ldr	r3, [r7, #12]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	683a      	ldr	r2, [r7, #0]
 800316c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800316e:	68fb      	ldr	r3, [r7, #12]
 8003170:	689b      	ldr	r3, [r3, #8]
 8003172:	2b40      	cmp	r3, #64	@ 0x40
 8003174:	d108      	bne.n	8003188 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8003176:	68fb      	ldr	r3, [r7, #12]
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	687a      	ldr	r2, [r7, #4]
 800317c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800317e:	68fb      	ldr	r3, [r7, #12]
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	68ba      	ldr	r2, [r7, #8]
 8003184:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8003186:	e007      	b.n	8003198 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8003188:	68fb      	ldr	r3, [r7, #12]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	68ba      	ldr	r2, [r7, #8]
 800318e:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8003190:	68fb      	ldr	r3, [r7, #12]
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	687a      	ldr	r2, [r7, #4]
 8003196:	60da      	str	r2, [r3, #12]
}
 8003198:	bf00      	nop
 800319a:	3714      	adds	r7, #20
 800319c:	46bd      	mov	sp, r7
 800319e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031a2:	4770      	bx	lr

080031a4 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80031a4:	b480      	push	{r7}
 80031a6:	b085      	sub	sp, #20
 80031a8:	af00      	add	r7, sp, #0
 80031aa:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	b2db      	uxtb	r3, r3
 80031b2:	3b10      	subs	r3, #16
 80031b4:	4a14      	ldr	r2, [pc, #80]	@ (8003208 <DMA_CalcBaseAndBitshift+0x64>)
 80031b6:	fba2 2303 	umull	r2, r3, r2, r3
 80031ba:	091b      	lsrs	r3, r3, #4
 80031bc:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80031be:	4a13      	ldr	r2, [pc, #76]	@ (800320c <DMA_CalcBaseAndBitshift+0x68>)
 80031c0:	68fb      	ldr	r3, [r7, #12]
 80031c2:	4413      	add	r3, r2
 80031c4:	781b      	ldrb	r3, [r3, #0]
 80031c6:	461a      	mov	r2, r3
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 80031cc:	68fb      	ldr	r3, [r7, #12]
 80031ce:	2b03      	cmp	r3, #3
 80031d0:	d909      	bls.n	80031e6 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 80031da:	f023 0303 	bic.w	r3, r3, #3
 80031de:	1d1a      	adds	r2, r3, #4
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	659a      	str	r2, [r3, #88]	@ 0x58
 80031e4:	e007      	b.n	80031f6 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 80031ee:	f023 0303 	bic.w	r3, r3, #3
 80031f2:	687a      	ldr	r2, [r7, #4]
 80031f4:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 80031fa:	4618      	mov	r0, r3
 80031fc:	3714      	adds	r7, #20
 80031fe:	46bd      	mov	sp, r7
 8003200:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003204:	4770      	bx	lr
 8003206:	bf00      	nop
 8003208:	aaaaaaab 	.word	0xaaaaaaab
 800320c:	0801660c 	.word	0x0801660c

08003210 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8003210:	b480      	push	{r7}
 8003212:	b085      	sub	sp, #20
 8003214:	af00      	add	r7, sp, #0
 8003216:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003218:	2300      	movs	r3, #0
 800321a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003220:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	699b      	ldr	r3, [r3, #24]
 8003226:	2b00      	cmp	r3, #0
 8003228:	d11f      	bne.n	800326a <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800322a:	68bb      	ldr	r3, [r7, #8]
 800322c:	2b03      	cmp	r3, #3
 800322e:	d856      	bhi.n	80032de <DMA_CheckFifoParam+0xce>
 8003230:	a201      	add	r2, pc, #4	@ (adr r2, 8003238 <DMA_CheckFifoParam+0x28>)
 8003232:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003236:	bf00      	nop
 8003238:	08003249 	.word	0x08003249
 800323c:	0800325b 	.word	0x0800325b
 8003240:	08003249 	.word	0x08003249
 8003244:	080032df 	.word	0x080032df
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800324c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003250:	2b00      	cmp	r3, #0
 8003252:	d046      	beq.n	80032e2 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8003254:	2301      	movs	r3, #1
 8003256:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003258:	e043      	b.n	80032e2 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800325e:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8003262:	d140      	bne.n	80032e6 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8003264:	2301      	movs	r3, #1
 8003266:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003268:	e03d      	b.n	80032e6 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	699b      	ldr	r3, [r3, #24]
 800326e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003272:	d121      	bne.n	80032b8 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8003274:	68bb      	ldr	r3, [r7, #8]
 8003276:	2b03      	cmp	r3, #3
 8003278:	d837      	bhi.n	80032ea <DMA_CheckFifoParam+0xda>
 800327a:	a201      	add	r2, pc, #4	@ (adr r2, 8003280 <DMA_CheckFifoParam+0x70>)
 800327c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003280:	08003291 	.word	0x08003291
 8003284:	08003297 	.word	0x08003297
 8003288:	08003291 	.word	0x08003291
 800328c:	080032a9 	.word	0x080032a9
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8003290:	2301      	movs	r3, #1
 8003292:	73fb      	strb	r3, [r7, #15]
      break;
 8003294:	e030      	b.n	80032f8 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800329a:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800329e:	2b00      	cmp	r3, #0
 80032a0:	d025      	beq.n	80032ee <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80032a2:	2301      	movs	r3, #1
 80032a4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80032a6:	e022      	b.n	80032ee <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80032ac:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80032b0:	d11f      	bne.n	80032f2 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80032b2:	2301      	movs	r3, #1
 80032b4:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80032b6:	e01c      	b.n	80032f2 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80032b8:	68bb      	ldr	r3, [r7, #8]
 80032ba:	2b02      	cmp	r3, #2
 80032bc:	d903      	bls.n	80032c6 <DMA_CheckFifoParam+0xb6>
 80032be:	68bb      	ldr	r3, [r7, #8]
 80032c0:	2b03      	cmp	r3, #3
 80032c2:	d003      	beq.n	80032cc <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80032c4:	e018      	b.n	80032f8 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80032c6:	2301      	movs	r3, #1
 80032c8:	73fb      	strb	r3, [r7, #15]
      break;
 80032ca:	e015      	b.n	80032f8 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80032d0:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80032d4:	2b00      	cmp	r3, #0
 80032d6:	d00e      	beq.n	80032f6 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80032d8:	2301      	movs	r3, #1
 80032da:	73fb      	strb	r3, [r7, #15]
      break;
 80032dc:	e00b      	b.n	80032f6 <DMA_CheckFifoParam+0xe6>
      break;
 80032de:	bf00      	nop
 80032e0:	e00a      	b.n	80032f8 <DMA_CheckFifoParam+0xe8>
      break;
 80032e2:	bf00      	nop
 80032e4:	e008      	b.n	80032f8 <DMA_CheckFifoParam+0xe8>
      break;
 80032e6:	bf00      	nop
 80032e8:	e006      	b.n	80032f8 <DMA_CheckFifoParam+0xe8>
      break;
 80032ea:	bf00      	nop
 80032ec:	e004      	b.n	80032f8 <DMA_CheckFifoParam+0xe8>
      break;
 80032ee:	bf00      	nop
 80032f0:	e002      	b.n	80032f8 <DMA_CheckFifoParam+0xe8>
      break;   
 80032f2:	bf00      	nop
 80032f4:	e000      	b.n	80032f8 <DMA_CheckFifoParam+0xe8>
      break;
 80032f6:	bf00      	nop
    }
  } 
  
  return status; 
 80032f8:	7bfb      	ldrb	r3, [r7, #15]
}
 80032fa:	4618      	mov	r0, r3
 80032fc:	3714      	adds	r7, #20
 80032fe:	46bd      	mov	sp, r7
 8003300:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003304:	4770      	bx	lr
 8003306:	bf00      	nop

08003308 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003308:	b480      	push	{r7}
 800330a:	b089      	sub	sp, #36	@ 0x24
 800330c:	af00      	add	r7, sp, #0
 800330e:	6078      	str	r0, [r7, #4]
 8003310:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003312:	2300      	movs	r3, #0
 8003314:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003316:	2300      	movs	r3, #0
 8003318:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800331a:	2300      	movs	r3, #0
 800331c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800331e:	2300      	movs	r3, #0
 8003320:	61fb      	str	r3, [r7, #28]
 8003322:	e159      	b.n	80035d8 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003324:	2201      	movs	r2, #1
 8003326:	69fb      	ldr	r3, [r7, #28]
 8003328:	fa02 f303 	lsl.w	r3, r2, r3
 800332c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800332e:	683b      	ldr	r3, [r7, #0]
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	697a      	ldr	r2, [r7, #20]
 8003334:	4013      	ands	r3, r2
 8003336:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003338:	693a      	ldr	r2, [r7, #16]
 800333a:	697b      	ldr	r3, [r7, #20]
 800333c:	429a      	cmp	r2, r3
 800333e:	f040 8148 	bne.w	80035d2 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003342:	683b      	ldr	r3, [r7, #0]
 8003344:	685b      	ldr	r3, [r3, #4]
 8003346:	f003 0303 	and.w	r3, r3, #3
 800334a:	2b01      	cmp	r3, #1
 800334c:	d005      	beq.n	800335a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800334e:	683b      	ldr	r3, [r7, #0]
 8003350:	685b      	ldr	r3, [r3, #4]
 8003352:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003356:	2b02      	cmp	r3, #2
 8003358:	d130      	bne.n	80033bc <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	689b      	ldr	r3, [r3, #8]
 800335e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003360:	69fb      	ldr	r3, [r7, #28]
 8003362:	005b      	lsls	r3, r3, #1
 8003364:	2203      	movs	r2, #3
 8003366:	fa02 f303 	lsl.w	r3, r2, r3
 800336a:	43db      	mvns	r3, r3
 800336c:	69ba      	ldr	r2, [r7, #24]
 800336e:	4013      	ands	r3, r2
 8003370:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003372:	683b      	ldr	r3, [r7, #0]
 8003374:	68da      	ldr	r2, [r3, #12]
 8003376:	69fb      	ldr	r3, [r7, #28]
 8003378:	005b      	lsls	r3, r3, #1
 800337a:	fa02 f303 	lsl.w	r3, r2, r3
 800337e:	69ba      	ldr	r2, [r7, #24]
 8003380:	4313      	orrs	r3, r2
 8003382:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	69ba      	ldr	r2, [r7, #24]
 8003388:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	685b      	ldr	r3, [r3, #4]
 800338e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003390:	2201      	movs	r2, #1
 8003392:	69fb      	ldr	r3, [r7, #28]
 8003394:	fa02 f303 	lsl.w	r3, r2, r3
 8003398:	43db      	mvns	r3, r3
 800339a:	69ba      	ldr	r2, [r7, #24]
 800339c:	4013      	ands	r3, r2
 800339e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80033a0:	683b      	ldr	r3, [r7, #0]
 80033a2:	685b      	ldr	r3, [r3, #4]
 80033a4:	091b      	lsrs	r3, r3, #4
 80033a6:	f003 0201 	and.w	r2, r3, #1
 80033aa:	69fb      	ldr	r3, [r7, #28]
 80033ac:	fa02 f303 	lsl.w	r3, r2, r3
 80033b0:	69ba      	ldr	r2, [r7, #24]
 80033b2:	4313      	orrs	r3, r2
 80033b4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	69ba      	ldr	r2, [r7, #24]
 80033ba:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80033bc:	683b      	ldr	r3, [r7, #0]
 80033be:	685b      	ldr	r3, [r3, #4]
 80033c0:	f003 0303 	and.w	r3, r3, #3
 80033c4:	2b03      	cmp	r3, #3
 80033c6:	d017      	beq.n	80033f8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	68db      	ldr	r3, [r3, #12]
 80033cc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80033ce:	69fb      	ldr	r3, [r7, #28]
 80033d0:	005b      	lsls	r3, r3, #1
 80033d2:	2203      	movs	r2, #3
 80033d4:	fa02 f303 	lsl.w	r3, r2, r3
 80033d8:	43db      	mvns	r3, r3
 80033da:	69ba      	ldr	r2, [r7, #24]
 80033dc:	4013      	ands	r3, r2
 80033de:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80033e0:	683b      	ldr	r3, [r7, #0]
 80033e2:	689a      	ldr	r2, [r3, #8]
 80033e4:	69fb      	ldr	r3, [r7, #28]
 80033e6:	005b      	lsls	r3, r3, #1
 80033e8:	fa02 f303 	lsl.w	r3, r2, r3
 80033ec:	69ba      	ldr	r2, [r7, #24]
 80033ee:	4313      	orrs	r3, r2
 80033f0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	69ba      	ldr	r2, [r7, #24]
 80033f6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80033f8:	683b      	ldr	r3, [r7, #0]
 80033fa:	685b      	ldr	r3, [r3, #4]
 80033fc:	f003 0303 	and.w	r3, r3, #3
 8003400:	2b02      	cmp	r3, #2
 8003402:	d123      	bne.n	800344c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003404:	69fb      	ldr	r3, [r7, #28]
 8003406:	08da      	lsrs	r2, r3, #3
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	3208      	adds	r2, #8
 800340c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003410:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003412:	69fb      	ldr	r3, [r7, #28]
 8003414:	f003 0307 	and.w	r3, r3, #7
 8003418:	009b      	lsls	r3, r3, #2
 800341a:	220f      	movs	r2, #15
 800341c:	fa02 f303 	lsl.w	r3, r2, r3
 8003420:	43db      	mvns	r3, r3
 8003422:	69ba      	ldr	r2, [r7, #24]
 8003424:	4013      	ands	r3, r2
 8003426:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003428:	683b      	ldr	r3, [r7, #0]
 800342a:	691a      	ldr	r2, [r3, #16]
 800342c:	69fb      	ldr	r3, [r7, #28]
 800342e:	f003 0307 	and.w	r3, r3, #7
 8003432:	009b      	lsls	r3, r3, #2
 8003434:	fa02 f303 	lsl.w	r3, r2, r3
 8003438:	69ba      	ldr	r2, [r7, #24]
 800343a:	4313      	orrs	r3, r2
 800343c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800343e:	69fb      	ldr	r3, [r7, #28]
 8003440:	08da      	lsrs	r2, r3, #3
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	3208      	adds	r2, #8
 8003446:	69b9      	ldr	r1, [r7, #24]
 8003448:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003452:	69fb      	ldr	r3, [r7, #28]
 8003454:	005b      	lsls	r3, r3, #1
 8003456:	2203      	movs	r2, #3
 8003458:	fa02 f303 	lsl.w	r3, r2, r3
 800345c:	43db      	mvns	r3, r3
 800345e:	69ba      	ldr	r2, [r7, #24]
 8003460:	4013      	ands	r3, r2
 8003462:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003464:	683b      	ldr	r3, [r7, #0]
 8003466:	685b      	ldr	r3, [r3, #4]
 8003468:	f003 0203 	and.w	r2, r3, #3
 800346c:	69fb      	ldr	r3, [r7, #28]
 800346e:	005b      	lsls	r3, r3, #1
 8003470:	fa02 f303 	lsl.w	r3, r2, r3
 8003474:	69ba      	ldr	r2, [r7, #24]
 8003476:	4313      	orrs	r3, r2
 8003478:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	69ba      	ldr	r2, [r7, #24]
 800347e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003480:	683b      	ldr	r3, [r7, #0]
 8003482:	685b      	ldr	r3, [r3, #4]
 8003484:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003488:	2b00      	cmp	r3, #0
 800348a:	f000 80a2 	beq.w	80035d2 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800348e:	2300      	movs	r3, #0
 8003490:	60fb      	str	r3, [r7, #12]
 8003492:	4b57      	ldr	r3, [pc, #348]	@ (80035f0 <HAL_GPIO_Init+0x2e8>)
 8003494:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003496:	4a56      	ldr	r2, [pc, #344]	@ (80035f0 <HAL_GPIO_Init+0x2e8>)
 8003498:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800349c:	6453      	str	r3, [r2, #68]	@ 0x44
 800349e:	4b54      	ldr	r3, [pc, #336]	@ (80035f0 <HAL_GPIO_Init+0x2e8>)
 80034a0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80034a2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80034a6:	60fb      	str	r3, [r7, #12]
 80034a8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80034aa:	4a52      	ldr	r2, [pc, #328]	@ (80035f4 <HAL_GPIO_Init+0x2ec>)
 80034ac:	69fb      	ldr	r3, [r7, #28]
 80034ae:	089b      	lsrs	r3, r3, #2
 80034b0:	3302      	adds	r3, #2
 80034b2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80034b6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80034b8:	69fb      	ldr	r3, [r7, #28]
 80034ba:	f003 0303 	and.w	r3, r3, #3
 80034be:	009b      	lsls	r3, r3, #2
 80034c0:	220f      	movs	r2, #15
 80034c2:	fa02 f303 	lsl.w	r3, r2, r3
 80034c6:	43db      	mvns	r3, r3
 80034c8:	69ba      	ldr	r2, [r7, #24]
 80034ca:	4013      	ands	r3, r2
 80034cc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	4a49      	ldr	r2, [pc, #292]	@ (80035f8 <HAL_GPIO_Init+0x2f0>)
 80034d2:	4293      	cmp	r3, r2
 80034d4:	d019      	beq.n	800350a <HAL_GPIO_Init+0x202>
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	4a48      	ldr	r2, [pc, #288]	@ (80035fc <HAL_GPIO_Init+0x2f4>)
 80034da:	4293      	cmp	r3, r2
 80034dc:	d013      	beq.n	8003506 <HAL_GPIO_Init+0x1fe>
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	4a47      	ldr	r2, [pc, #284]	@ (8003600 <HAL_GPIO_Init+0x2f8>)
 80034e2:	4293      	cmp	r3, r2
 80034e4:	d00d      	beq.n	8003502 <HAL_GPIO_Init+0x1fa>
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	4a46      	ldr	r2, [pc, #280]	@ (8003604 <HAL_GPIO_Init+0x2fc>)
 80034ea:	4293      	cmp	r3, r2
 80034ec:	d007      	beq.n	80034fe <HAL_GPIO_Init+0x1f6>
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	4a45      	ldr	r2, [pc, #276]	@ (8003608 <HAL_GPIO_Init+0x300>)
 80034f2:	4293      	cmp	r3, r2
 80034f4:	d101      	bne.n	80034fa <HAL_GPIO_Init+0x1f2>
 80034f6:	2304      	movs	r3, #4
 80034f8:	e008      	b.n	800350c <HAL_GPIO_Init+0x204>
 80034fa:	2307      	movs	r3, #7
 80034fc:	e006      	b.n	800350c <HAL_GPIO_Init+0x204>
 80034fe:	2303      	movs	r3, #3
 8003500:	e004      	b.n	800350c <HAL_GPIO_Init+0x204>
 8003502:	2302      	movs	r3, #2
 8003504:	e002      	b.n	800350c <HAL_GPIO_Init+0x204>
 8003506:	2301      	movs	r3, #1
 8003508:	e000      	b.n	800350c <HAL_GPIO_Init+0x204>
 800350a:	2300      	movs	r3, #0
 800350c:	69fa      	ldr	r2, [r7, #28]
 800350e:	f002 0203 	and.w	r2, r2, #3
 8003512:	0092      	lsls	r2, r2, #2
 8003514:	4093      	lsls	r3, r2
 8003516:	69ba      	ldr	r2, [r7, #24]
 8003518:	4313      	orrs	r3, r2
 800351a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800351c:	4935      	ldr	r1, [pc, #212]	@ (80035f4 <HAL_GPIO_Init+0x2ec>)
 800351e:	69fb      	ldr	r3, [r7, #28]
 8003520:	089b      	lsrs	r3, r3, #2
 8003522:	3302      	adds	r3, #2
 8003524:	69ba      	ldr	r2, [r7, #24]
 8003526:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800352a:	4b38      	ldr	r3, [pc, #224]	@ (800360c <HAL_GPIO_Init+0x304>)
 800352c:	689b      	ldr	r3, [r3, #8]
 800352e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003530:	693b      	ldr	r3, [r7, #16]
 8003532:	43db      	mvns	r3, r3
 8003534:	69ba      	ldr	r2, [r7, #24]
 8003536:	4013      	ands	r3, r2
 8003538:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800353a:	683b      	ldr	r3, [r7, #0]
 800353c:	685b      	ldr	r3, [r3, #4]
 800353e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003542:	2b00      	cmp	r3, #0
 8003544:	d003      	beq.n	800354e <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8003546:	69ba      	ldr	r2, [r7, #24]
 8003548:	693b      	ldr	r3, [r7, #16]
 800354a:	4313      	orrs	r3, r2
 800354c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800354e:	4a2f      	ldr	r2, [pc, #188]	@ (800360c <HAL_GPIO_Init+0x304>)
 8003550:	69bb      	ldr	r3, [r7, #24]
 8003552:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003554:	4b2d      	ldr	r3, [pc, #180]	@ (800360c <HAL_GPIO_Init+0x304>)
 8003556:	68db      	ldr	r3, [r3, #12]
 8003558:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800355a:	693b      	ldr	r3, [r7, #16]
 800355c:	43db      	mvns	r3, r3
 800355e:	69ba      	ldr	r2, [r7, #24]
 8003560:	4013      	ands	r3, r2
 8003562:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003564:	683b      	ldr	r3, [r7, #0]
 8003566:	685b      	ldr	r3, [r3, #4]
 8003568:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800356c:	2b00      	cmp	r3, #0
 800356e:	d003      	beq.n	8003578 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8003570:	69ba      	ldr	r2, [r7, #24]
 8003572:	693b      	ldr	r3, [r7, #16]
 8003574:	4313      	orrs	r3, r2
 8003576:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003578:	4a24      	ldr	r2, [pc, #144]	@ (800360c <HAL_GPIO_Init+0x304>)
 800357a:	69bb      	ldr	r3, [r7, #24]
 800357c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800357e:	4b23      	ldr	r3, [pc, #140]	@ (800360c <HAL_GPIO_Init+0x304>)
 8003580:	685b      	ldr	r3, [r3, #4]
 8003582:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003584:	693b      	ldr	r3, [r7, #16]
 8003586:	43db      	mvns	r3, r3
 8003588:	69ba      	ldr	r2, [r7, #24]
 800358a:	4013      	ands	r3, r2
 800358c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800358e:	683b      	ldr	r3, [r7, #0]
 8003590:	685b      	ldr	r3, [r3, #4]
 8003592:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003596:	2b00      	cmp	r3, #0
 8003598:	d003      	beq.n	80035a2 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800359a:	69ba      	ldr	r2, [r7, #24]
 800359c:	693b      	ldr	r3, [r7, #16]
 800359e:	4313      	orrs	r3, r2
 80035a0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80035a2:	4a1a      	ldr	r2, [pc, #104]	@ (800360c <HAL_GPIO_Init+0x304>)
 80035a4:	69bb      	ldr	r3, [r7, #24]
 80035a6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80035a8:	4b18      	ldr	r3, [pc, #96]	@ (800360c <HAL_GPIO_Init+0x304>)
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80035ae:	693b      	ldr	r3, [r7, #16]
 80035b0:	43db      	mvns	r3, r3
 80035b2:	69ba      	ldr	r2, [r7, #24]
 80035b4:	4013      	ands	r3, r2
 80035b6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80035b8:	683b      	ldr	r3, [r7, #0]
 80035ba:	685b      	ldr	r3, [r3, #4]
 80035bc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80035c0:	2b00      	cmp	r3, #0
 80035c2:	d003      	beq.n	80035cc <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80035c4:	69ba      	ldr	r2, [r7, #24]
 80035c6:	693b      	ldr	r3, [r7, #16]
 80035c8:	4313      	orrs	r3, r2
 80035ca:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80035cc:	4a0f      	ldr	r2, [pc, #60]	@ (800360c <HAL_GPIO_Init+0x304>)
 80035ce:	69bb      	ldr	r3, [r7, #24]
 80035d0:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80035d2:	69fb      	ldr	r3, [r7, #28]
 80035d4:	3301      	adds	r3, #1
 80035d6:	61fb      	str	r3, [r7, #28]
 80035d8:	69fb      	ldr	r3, [r7, #28]
 80035da:	2b0f      	cmp	r3, #15
 80035dc:	f67f aea2 	bls.w	8003324 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80035e0:	bf00      	nop
 80035e2:	bf00      	nop
 80035e4:	3724      	adds	r7, #36	@ 0x24
 80035e6:	46bd      	mov	sp, r7
 80035e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035ec:	4770      	bx	lr
 80035ee:	bf00      	nop
 80035f0:	40023800 	.word	0x40023800
 80035f4:	40013800 	.word	0x40013800
 80035f8:	40020000 	.word	0x40020000
 80035fc:	40020400 	.word	0x40020400
 8003600:	40020800 	.word	0x40020800
 8003604:	40020c00 	.word	0x40020c00
 8003608:	40021000 	.word	0x40021000
 800360c:	40013c00 	.word	0x40013c00

08003610 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003610:	b480      	push	{r7}
 8003612:	b083      	sub	sp, #12
 8003614:	af00      	add	r7, sp, #0
 8003616:	6078      	str	r0, [r7, #4]
 8003618:	460b      	mov	r3, r1
 800361a:	807b      	strh	r3, [r7, #2]
 800361c:	4613      	mov	r3, r2
 800361e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003620:	787b      	ldrb	r3, [r7, #1]
 8003622:	2b00      	cmp	r3, #0
 8003624:	d003      	beq.n	800362e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003626:	887a      	ldrh	r2, [r7, #2]
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800362c:	e003      	b.n	8003636 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800362e:	887b      	ldrh	r3, [r7, #2]
 8003630:	041a      	lsls	r2, r3, #16
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	619a      	str	r2, [r3, #24]
}
 8003636:	bf00      	nop
 8003638:	370c      	adds	r7, #12
 800363a:	46bd      	mov	sp, r7
 800363c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003640:	4770      	bx	lr
	...

08003644 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003644:	b580      	push	{r7, lr}
 8003646:	b086      	sub	sp, #24
 8003648:	af00      	add	r7, sp, #0
 800364a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	2b00      	cmp	r3, #0
 8003650:	d101      	bne.n	8003656 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003652:	2301      	movs	r3, #1
 8003654:	e267      	b.n	8003b26 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	f003 0301 	and.w	r3, r3, #1
 800365e:	2b00      	cmp	r3, #0
 8003660:	d075      	beq.n	800374e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003662:	4b88      	ldr	r3, [pc, #544]	@ (8003884 <HAL_RCC_OscConfig+0x240>)
 8003664:	689b      	ldr	r3, [r3, #8]
 8003666:	f003 030c 	and.w	r3, r3, #12
 800366a:	2b04      	cmp	r3, #4
 800366c:	d00c      	beq.n	8003688 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800366e:	4b85      	ldr	r3, [pc, #532]	@ (8003884 <HAL_RCC_OscConfig+0x240>)
 8003670:	689b      	ldr	r3, [r3, #8]
 8003672:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003676:	2b08      	cmp	r3, #8
 8003678:	d112      	bne.n	80036a0 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800367a:	4b82      	ldr	r3, [pc, #520]	@ (8003884 <HAL_RCC_OscConfig+0x240>)
 800367c:	685b      	ldr	r3, [r3, #4]
 800367e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003682:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003686:	d10b      	bne.n	80036a0 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003688:	4b7e      	ldr	r3, [pc, #504]	@ (8003884 <HAL_RCC_OscConfig+0x240>)
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003690:	2b00      	cmp	r3, #0
 8003692:	d05b      	beq.n	800374c <HAL_RCC_OscConfig+0x108>
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	685b      	ldr	r3, [r3, #4]
 8003698:	2b00      	cmp	r3, #0
 800369a:	d157      	bne.n	800374c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800369c:	2301      	movs	r3, #1
 800369e:	e242      	b.n	8003b26 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	685b      	ldr	r3, [r3, #4]
 80036a4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80036a8:	d106      	bne.n	80036b8 <HAL_RCC_OscConfig+0x74>
 80036aa:	4b76      	ldr	r3, [pc, #472]	@ (8003884 <HAL_RCC_OscConfig+0x240>)
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	4a75      	ldr	r2, [pc, #468]	@ (8003884 <HAL_RCC_OscConfig+0x240>)
 80036b0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80036b4:	6013      	str	r3, [r2, #0]
 80036b6:	e01d      	b.n	80036f4 <HAL_RCC_OscConfig+0xb0>
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	685b      	ldr	r3, [r3, #4]
 80036bc:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80036c0:	d10c      	bne.n	80036dc <HAL_RCC_OscConfig+0x98>
 80036c2:	4b70      	ldr	r3, [pc, #448]	@ (8003884 <HAL_RCC_OscConfig+0x240>)
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	4a6f      	ldr	r2, [pc, #444]	@ (8003884 <HAL_RCC_OscConfig+0x240>)
 80036c8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80036cc:	6013      	str	r3, [r2, #0]
 80036ce:	4b6d      	ldr	r3, [pc, #436]	@ (8003884 <HAL_RCC_OscConfig+0x240>)
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	4a6c      	ldr	r2, [pc, #432]	@ (8003884 <HAL_RCC_OscConfig+0x240>)
 80036d4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80036d8:	6013      	str	r3, [r2, #0]
 80036da:	e00b      	b.n	80036f4 <HAL_RCC_OscConfig+0xb0>
 80036dc:	4b69      	ldr	r3, [pc, #420]	@ (8003884 <HAL_RCC_OscConfig+0x240>)
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	4a68      	ldr	r2, [pc, #416]	@ (8003884 <HAL_RCC_OscConfig+0x240>)
 80036e2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80036e6:	6013      	str	r3, [r2, #0]
 80036e8:	4b66      	ldr	r3, [pc, #408]	@ (8003884 <HAL_RCC_OscConfig+0x240>)
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	4a65      	ldr	r2, [pc, #404]	@ (8003884 <HAL_RCC_OscConfig+0x240>)
 80036ee:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80036f2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	685b      	ldr	r3, [r3, #4]
 80036f8:	2b00      	cmp	r3, #0
 80036fa:	d013      	beq.n	8003724 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80036fc:	f7ff f914 	bl	8002928 <HAL_GetTick>
 8003700:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003702:	e008      	b.n	8003716 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003704:	f7ff f910 	bl	8002928 <HAL_GetTick>
 8003708:	4602      	mov	r2, r0
 800370a:	693b      	ldr	r3, [r7, #16]
 800370c:	1ad3      	subs	r3, r2, r3
 800370e:	2b64      	cmp	r3, #100	@ 0x64
 8003710:	d901      	bls.n	8003716 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003712:	2303      	movs	r3, #3
 8003714:	e207      	b.n	8003b26 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003716:	4b5b      	ldr	r3, [pc, #364]	@ (8003884 <HAL_RCC_OscConfig+0x240>)
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800371e:	2b00      	cmp	r3, #0
 8003720:	d0f0      	beq.n	8003704 <HAL_RCC_OscConfig+0xc0>
 8003722:	e014      	b.n	800374e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003724:	f7ff f900 	bl	8002928 <HAL_GetTick>
 8003728:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800372a:	e008      	b.n	800373e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800372c:	f7ff f8fc 	bl	8002928 <HAL_GetTick>
 8003730:	4602      	mov	r2, r0
 8003732:	693b      	ldr	r3, [r7, #16]
 8003734:	1ad3      	subs	r3, r2, r3
 8003736:	2b64      	cmp	r3, #100	@ 0x64
 8003738:	d901      	bls.n	800373e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800373a:	2303      	movs	r3, #3
 800373c:	e1f3      	b.n	8003b26 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800373e:	4b51      	ldr	r3, [pc, #324]	@ (8003884 <HAL_RCC_OscConfig+0x240>)
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003746:	2b00      	cmp	r3, #0
 8003748:	d1f0      	bne.n	800372c <HAL_RCC_OscConfig+0xe8>
 800374a:	e000      	b.n	800374e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800374c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	f003 0302 	and.w	r3, r3, #2
 8003756:	2b00      	cmp	r3, #0
 8003758:	d063      	beq.n	8003822 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800375a:	4b4a      	ldr	r3, [pc, #296]	@ (8003884 <HAL_RCC_OscConfig+0x240>)
 800375c:	689b      	ldr	r3, [r3, #8]
 800375e:	f003 030c 	and.w	r3, r3, #12
 8003762:	2b00      	cmp	r3, #0
 8003764:	d00b      	beq.n	800377e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003766:	4b47      	ldr	r3, [pc, #284]	@ (8003884 <HAL_RCC_OscConfig+0x240>)
 8003768:	689b      	ldr	r3, [r3, #8]
 800376a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800376e:	2b08      	cmp	r3, #8
 8003770:	d11c      	bne.n	80037ac <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003772:	4b44      	ldr	r3, [pc, #272]	@ (8003884 <HAL_RCC_OscConfig+0x240>)
 8003774:	685b      	ldr	r3, [r3, #4]
 8003776:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800377a:	2b00      	cmp	r3, #0
 800377c:	d116      	bne.n	80037ac <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800377e:	4b41      	ldr	r3, [pc, #260]	@ (8003884 <HAL_RCC_OscConfig+0x240>)
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	f003 0302 	and.w	r3, r3, #2
 8003786:	2b00      	cmp	r3, #0
 8003788:	d005      	beq.n	8003796 <HAL_RCC_OscConfig+0x152>
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	68db      	ldr	r3, [r3, #12]
 800378e:	2b01      	cmp	r3, #1
 8003790:	d001      	beq.n	8003796 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003792:	2301      	movs	r3, #1
 8003794:	e1c7      	b.n	8003b26 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003796:	4b3b      	ldr	r3, [pc, #236]	@ (8003884 <HAL_RCC_OscConfig+0x240>)
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	691b      	ldr	r3, [r3, #16]
 80037a2:	00db      	lsls	r3, r3, #3
 80037a4:	4937      	ldr	r1, [pc, #220]	@ (8003884 <HAL_RCC_OscConfig+0x240>)
 80037a6:	4313      	orrs	r3, r2
 80037a8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80037aa:	e03a      	b.n	8003822 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	68db      	ldr	r3, [r3, #12]
 80037b0:	2b00      	cmp	r3, #0
 80037b2:	d020      	beq.n	80037f6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80037b4:	4b34      	ldr	r3, [pc, #208]	@ (8003888 <HAL_RCC_OscConfig+0x244>)
 80037b6:	2201      	movs	r2, #1
 80037b8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80037ba:	f7ff f8b5 	bl	8002928 <HAL_GetTick>
 80037be:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80037c0:	e008      	b.n	80037d4 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80037c2:	f7ff f8b1 	bl	8002928 <HAL_GetTick>
 80037c6:	4602      	mov	r2, r0
 80037c8:	693b      	ldr	r3, [r7, #16]
 80037ca:	1ad3      	subs	r3, r2, r3
 80037cc:	2b02      	cmp	r3, #2
 80037ce:	d901      	bls.n	80037d4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80037d0:	2303      	movs	r3, #3
 80037d2:	e1a8      	b.n	8003b26 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80037d4:	4b2b      	ldr	r3, [pc, #172]	@ (8003884 <HAL_RCC_OscConfig+0x240>)
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	f003 0302 	and.w	r3, r3, #2
 80037dc:	2b00      	cmp	r3, #0
 80037de:	d0f0      	beq.n	80037c2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80037e0:	4b28      	ldr	r3, [pc, #160]	@ (8003884 <HAL_RCC_OscConfig+0x240>)
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	691b      	ldr	r3, [r3, #16]
 80037ec:	00db      	lsls	r3, r3, #3
 80037ee:	4925      	ldr	r1, [pc, #148]	@ (8003884 <HAL_RCC_OscConfig+0x240>)
 80037f0:	4313      	orrs	r3, r2
 80037f2:	600b      	str	r3, [r1, #0]
 80037f4:	e015      	b.n	8003822 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80037f6:	4b24      	ldr	r3, [pc, #144]	@ (8003888 <HAL_RCC_OscConfig+0x244>)
 80037f8:	2200      	movs	r2, #0
 80037fa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80037fc:	f7ff f894 	bl	8002928 <HAL_GetTick>
 8003800:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003802:	e008      	b.n	8003816 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003804:	f7ff f890 	bl	8002928 <HAL_GetTick>
 8003808:	4602      	mov	r2, r0
 800380a:	693b      	ldr	r3, [r7, #16]
 800380c:	1ad3      	subs	r3, r2, r3
 800380e:	2b02      	cmp	r3, #2
 8003810:	d901      	bls.n	8003816 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003812:	2303      	movs	r3, #3
 8003814:	e187      	b.n	8003b26 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003816:	4b1b      	ldr	r3, [pc, #108]	@ (8003884 <HAL_RCC_OscConfig+0x240>)
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	f003 0302 	and.w	r3, r3, #2
 800381e:	2b00      	cmp	r3, #0
 8003820:	d1f0      	bne.n	8003804 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	f003 0308 	and.w	r3, r3, #8
 800382a:	2b00      	cmp	r3, #0
 800382c:	d036      	beq.n	800389c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	695b      	ldr	r3, [r3, #20]
 8003832:	2b00      	cmp	r3, #0
 8003834:	d016      	beq.n	8003864 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003836:	4b15      	ldr	r3, [pc, #84]	@ (800388c <HAL_RCC_OscConfig+0x248>)
 8003838:	2201      	movs	r2, #1
 800383a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800383c:	f7ff f874 	bl	8002928 <HAL_GetTick>
 8003840:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003842:	e008      	b.n	8003856 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003844:	f7ff f870 	bl	8002928 <HAL_GetTick>
 8003848:	4602      	mov	r2, r0
 800384a:	693b      	ldr	r3, [r7, #16]
 800384c:	1ad3      	subs	r3, r2, r3
 800384e:	2b02      	cmp	r3, #2
 8003850:	d901      	bls.n	8003856 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003852:	2303      	movs	r3, #3
 8003854:	e167      	b.n	8003b26 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003856:	4b0b      	ldr	r3, [pc, #44]	@ (8003884 <HAL_RCC_OscConfig+0x240>)
 8003858:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800385a:	f003 0302 	and.w	r3, r3, #2
 800385e:	2b00      	cmp	r3, #0
 8003860:	d0f0      	beq.n	8003844 <HAL_RCC_OscConfig+0x200>
 8003862:	e01b      	b.n	800389c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003864:	4b09      	ldr	r3, [pc, #36]	@ (800388c <HAL_RCC_OscConfig+0x248>)
 8003866:	2200      	movs	r2, #0
 8003868:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800386a:	f7ff f85d 	bl	8002928 <HAL_GetTick>
 800386e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003870:	e00e      	b.n	8003890 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003872:	f7ff f859 	bl	8002928 <HAL_GetTick>
 8003876:	4602      	mov	r2, r0
 8003878:	693b      	ldr	r3, [r7, #16]
 800387a:	1ad3      	subs	r3, r2, r3
 800387c:	2b02      	cmp	r3, #2
 800387e:	d907      	bls.n	8003890 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003880:	2303      	movs	r3, #3
 8003882:	e150      	b.n	8003b26 <HAL_RCC_OscConfig+0x4e2>
 8003884:	40023800 	.word	0x40023800
 8003888:	42470000 	.word	0x42470000
 800388c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003890:	4b88      	ldr	r3, [pc, #544]	@ (8003ab4 <HAL_RCC_OscConfig+0x470>)
 8003892:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003894:	f003 0302 	and.w	r3, r3, #2
 8003898:	2b00      	cmp	r3, #0
 800389a:	d1ea      	bne.n	8003872 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	f003 0304 	and.w	r3, r3, #4
 80038a4:	2b00      	cmp	r3, #0
 80038a6:	f000 8097 	beq.w	80039d8 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80038aa:	2300      	movs	r3, #0
 80038ac:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80038ae:	4b81      	ldr	r3, [pc, #516]	@ (8003ab4 <HAL_RCC_OscConfig+0x470>)
 80038b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80038b2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80038b6:	2b00      	cmp	r3, #0
 80038b8:	d10f      	bne.n	80038da <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80038ba:	2300      	movs	r3, #0
 80038bc:	60bb      	str	r3, [r7, #8]
 80038be:	4b7d      	ldr	r3, [pc, #500]	@ (8003ab4 <HAL_RCC_OscConfig+0x470>)
 80038c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80038c2:	4a7c      	ldr	r2, [pc, #496]	@ (8003ab4 <HAL_RCC_OscConfig+0x470>)
 80038c4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80038c8:	6413      	str	r3, [r2, #64]	@ 0x40
 80038ca:	4b7a      	ldr	r3, [pc, #488]	@ (8003ab4 <HAL_RCC_OscConfig+0x470>)
 80038cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80038ce:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80038d2:	60bb      	str	r3, [r7, #8]
 80038d4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80038d6:	2301      	movs	r3, #1
 80038d8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80038da:	4b77      	ldr	r3, [pc, #476]	@ (8003ab8 <HAL_RCC_OscConfig+0x474>)
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80038e2:	2b00      	cmp	r3, #0
 80038e4:	d118      	bne.n	8003918 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80038e6:	4b74      	ldr	r3, [pc, #464]	@ (8003ab8 <HAL_RCC_OscConfig+0x474>)
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	4a73      	ldr	r2, [pc, #460]	@ (8003ab8 <HAL_RCC_OscConfig+0x474>)
 80038ec:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80038f0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80038f2:	f7ff f819 	bl	8002928 <HAL_GetTick>
 80038f6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80038f8:	e008      	b.n	800390c <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80038fa:	f7ff f815 	bl	8002928 <HAL_GetTick>
 80038fe:	4602      	mov	r2, r0
 8003900:	693b      	ldr	r3, [r7, #16]
 8003902:	1ad3      	subs	r3, r2, r3
 8003904:	2b02      	cmp	r3, #2
 8003906:	d901      	bls.n	800390c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003908:	2303      	movs	r3, #3
 800390a:	e10c      	b.n	8003b26 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800390c:	4b6a      	ldr	r3, [pc, #424]	@ (8003ab8 <HAL_RCC_OscConfig+0x474>)
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003914:	2b00      	cmp	r3, #0
 8003916:	d0f0      	beq.n	80038fa <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	689b      	ldr	r3, [r3, #8]
 800391c:	2b01      	cmp	r3, #1
 800391e:	d106      	bne.n	800392e <HAL_RCC_OscConfig+0x2ea>
 8003920:	4b64      	ldr	r3, [pc, #400]	@ (8003ab4 <HAL_RCC_OscConfig+0x470>)
 8003922:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003924:	4a63      	ldr	r2, [pc, #396]	@ (8003ab4 <HAL_RCC_OscConfig+0x470>)
 8003926:	f043 0301 	orr.w	r3, r3, #1
 800392a:	6713      	str	r3, [r2, #112]	@ 0x70
 800392c:	e01c      	b.n	8003968 <HAL_RCC_OscConfig+0x324>
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	689b      	ldr	r3, [r3, #8]
 8003932:	2b05      	cmp	r3, #5
 8003934:	d10c      	bne.n	8003950 <HAL_RCC_OscConfig+0x30c>
 8003936:	4b5f      	ldr	r3, [pc, #380]	@ (8003ab4 <HAL_RCC_OscConfig+0x470>)
 8003938:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800393a:	4a5e      	ldr	r2, [pc, #376]	@ (8003ab4 <HAL_RCC_OscConfig+0x470>)
 800393c:	f043 0304 	orr.w	r3, r3, #4
 8003940:	6713      	str	r3, [r2, #112]	@ 0x70
 8003942:	4b5c      	ldr	r3, [pc, #368]	@ (8003ab4 <HAL_RCC_OscConfig+0x470>)
 8003944:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003946:	4a5b      	ldr	r2, [pc, #364]	@ (8003ab4 <HAL_RCC_OscConfig+0x470>)
 8003948:	f043 0301 	orr.w	r3, r3, #1
 800394c:	6713      	str	r3, [r2, #112]	@ 0x70
 800394e:	e00b      	b.n	8003968 <HAL_RCC_OscConfig+0x324>
 8003950:	4b58      	ldr	r3, [pc, #352]	@ (8003ab4 <HAL_RCC_OscConfig+0x470>)
 8003952:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003954:	4a57      	ldr	r2, [pc, #348]	@ (8003ab4 <HAL_RCC_OscConfig+0x470>)
 8003956:	f023 0301 	bic.w	r3, r3, #1
 800395a:	6713      	str	r3, [r2, #112]	@ 0x70
 800395c:	4b55      	ldr	r3, [pc, #340]	@ (8003ab4 <HAL_RCC_OscConfig+0x470>)
 800395e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003960:	4a54      	ldr	r2, [pc, #336]	@ (8003ab4 <HAL_RCC_OscConfig+0x470>)
 8003962:	f023 0304 	bic.w	r3, r3, #4
 8003966:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	689b      	ldr	r3, [r3, #8]
 800396c:	2b00      	cmp	r3, #0
 800396e:	d015      	beq.n	800399c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003970:	f7fe ffda 	bl	8002928 <HAL_GetTick>
 8003974:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003976:	e00a      	b.n	800398e <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003978:	f7fe ffd6 	bl	8002928 <HAL_GetTick>
 800397c:	4602      	mov	r2, r0
 800397e:	693b      	ldr	r3, [r7, #16]
 8003980:	1ad3      	subs	r3, r2, r3
 8003982:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003986:	4293      	cmp	r3, r2
 8003988:	d901      	bls.n	800398e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800398a:	2303      	movs	r3, #3
 800398c:	e0cb      	b.n	8003b26 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800398e:	4b49      	ldr	r3, [pc, #292]	@ (8003ab4 <HAL_RCC_OscConfig+0x470>)
 8003990:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003992:	f003 0302 	and.w	r3, r3, #2
 8003996:	2b00      	cmp	r3, #0
 8003998:	d0ee      	beq.n	8003978 <HAL_RCC_OscConfig+0x334>
 800399a:	e014      	b.n	80039c6 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800399c:	f7fe ffc4 	bl	8002928 <HAL_GetTick>
 80039a0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80039a2:	e00a      	b.n	80039ba <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80039a4:	f7fe ffc0 	bl	8002928 <HAL_GetTick>
 80039a8:	4602      	mov	r2, r0
 80039aa:	693b      	ldr	r3, [r7, #16]
 80039ac:	1ad3      	subs	r3, r2, r3
 80039ae:	f241 3288 	movw	r2, #5000	@ 0x1388
 80039b2:	4293      	cmp	r3, r2
 80039b4:	d901      	bls.n	80039ba <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80039b6:	2303      	movs	r3, #3
 80039b8:	e0b5      	b.n	8003b26 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80039ba:	4b3e      	ldr	r3, [pc, #248]	@ (8003ab4 <HAL_RCC_OscConfig+0x470>)
 80039bc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80039be:	f003 0302 	and.w	r3, r3, #2
 80039c2:	2b00      	cmp	r3, #0
 80039c4:	d1ee      	bne.n	80039a4 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80039c6:	7dfb      	ldrb	r3, [r7, #23]
 80039c8:	2b01      	cmp	r3, #1
 80039ca:	d105      	bne.n	80039d8 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80039cc:	4b39      	ldr	r3, [pc, #228]	@ (8003ab4 <HAL_RCC_OscConfig+0x470>)
 80039ce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80039d0:	4a38      	ldr	r2, [pc, #224]	@ (8003ab4 <HAL_RCC_OscConfig+0x470>)
 80039d2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80039d6:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	699b      	ldr	r3, [r3, #24]
 80039dc:	2b00      	cmp	r3, #0
 80039de:	f000 80a1 	beq.w	8003b24 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80039e2:	4b34      	ldr	r3, [pc, #208]	@ (8003ab4 <HAL_RCC_OscConfig+0x470>)
 80039e4:	689b      	ldr	r3, [r3, #8]
 80039e6:	f003 030c 	and.w	r3, r3, #12
 80039ea:	2b08      	cmp	r3, #8
 80039ec:	d05c      	beq.n	8003aa8 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	699b      	ldr	r3, [r3, #24]
 80039f2:	2b02      	cmp	r3, #2
 80039f4:	d141      	bne.n	8003a7a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80039f6:	4b31      	ldr	r3, [pc, #196]	@ (8003abc <HAL_RCC_OscConfig+0x478>)
 80039f8:	2200      	movs	r2, #0
 80039fa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80039fc:	f7fe ff94 	bl	8002928 <HAL_GetTick>
 8003a00:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003a02:	e008      	b.n	8003a16 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003a04:	f7fe ff90 	bl	8002928 <HAL_GetTick>
 8003a08:	4602      	mov	r2, r0
 8003a0a:	693b      	ldr	r3, [r7, #16]
 8003a0c:	1ad3      	subs	r3, r2, r3
 8003a0e:	2b02      	cmp	r3, #2
 8003a10:	d901      	bls.n	8003a16 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8003a12:	2303      	movs	r3, #3
 8003a14:	e087      	b.n	8003b26 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003a16:	4b27      	ldr	r3, [pc, #156]	@ (8003ab4 <HAL_RCC_OscConfig+0x470>)
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003a1e:	2b00      	cmp	r3, #0
 8003a20:	d1f0      	bne.n	8003a04 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	69da      	ldr	r2, [r3, #28]
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	6a1b      	ldr	r3, [r3, #32]
 8003a2a:	431a      	orrs	r2, r3
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a30:	019b      	lsls	r3, r3, #6
 8003a32:	431a      	orrs	r2, r3
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003a38:	085b      	lsrs	r3, r3, #1
 8003a3a:	3b01      	subs	r3, #1
 8003a3c:	041b      	lsls	r3, r3, #16
 8003a3e:	431a      	orrs	r2, r3
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003a44:	061b      	lsls	r3, r3, #24
 8003a46:	491b      	ldr	r1, [pc, #108]	@ (8003ab4 <HAL_RCC_OscConfig+0x470>)
 8003a48:	4313      	orrs	r3, r2
 8003a4a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003a4c:	4b1b      	ldr	r3, [pc, #108]	@ (8003abc <HAL_RCC_OscConfig+0x478>)
 8003a4e:	2201      	movs	r2, #1
 8003a50:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003a52:	f7fe ff69 	bl	8002928 <HAL_GetTick>
 8003a56:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003a58:	e008      	b.n	8003a6c <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003a5a:	f7fe ff65 	bl	8002928 <HAL_GetTick>
 8003a5e:	4602      	mov	r2, r0
 8003a60:	693b      	ldr	r3, [r7, #16]
 8003a62:	1ad3      	subs	r3, r2, r3
 8003a64:	2b02      	cmp	r3, #2
 8003a66:	d901      	bls.n	8003a6c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003a68:	2303      	movs	r3, #3
 8003a6a:	e05c      	b.n	8003b26 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003a6c:	4b11      	ldr	r3, [pc, #68]	@ (8003ab4 <HAL_RCC_OscConfig+0x470>)
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003a74:	2b00      	cmp	r3, #0
 8003a76:	d0f0      	beq.n	8003a5a <HAL_RCC_OscConfig+0x416>
 8003a78:	e054      	b.n	8003b24 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003a7a:	4b10      	ldr	r3, [pc, #64]	@ (8003abc <HAL_RCC_OscConfig+0x478>)
 8003a7c:	2200      	movs	r2, #0
 8003a7e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003a80:	f7fe ff52 	bl	8002928 <HAL_GetTick>
 8003a84:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003a86:	e008      	b.n	8003a9a <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003a88:	f7fe ff4e 	bl	8002928 <HAL_GetTick>
 8003a8c:	4602      	mov	r2, r0
 8003a8e:	693b      	ldr	r3, [r7, #16]
 8003a90:	1ad3      	subs	r3, r2, r3
 8003a92:	2b02      	cmp	r3, #2
 8003a94:	d901      	bls.n	8003a9a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8003a96:	2303      	movs	r3, #3
 8003a98:	e045      	b.n	8003b26 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003a9a:	4b06      	ldr	r3, [pc, #24]	@ (8003ab4 <HAL_RCC_OscConfig+0x470>)
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003aa2:	2b00      	cmp	r3, #0
 8003aa4:	d1f0      	bne.n	8003a88 <HAL_RCC_OscConfig+0x444>
 8003aa6:	e03d      	b.n	8003b24 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	699b      	ldr	r3, [r3, #24]
 8003aac:	2b01      	cmp	r3, #1
 8003aae:	d107      	bne.n	8003ac0 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003ab0:	2301      	movs	r3, #1
 8003ab2:	e038      	b.n	8003b26 <HAL_RCC_OscConfig+0x4e2>
 8003ab4:	40023800 	.word	0x40023800
 8003ab8:	40007000 	.word	0x40007000
 8003abc:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003ac0:	4b1b      	ldr	r3, [pc, #108]	@ (8003b30 <HAL_RCC_OscConfig+0x4ec>)
 8003ac2:	685b      	ldr	r3, [r3, #4]
 8003ac4:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	699b      	ldr	r3, [r3, #24]
 8003aca:	2b01      	cmp	r3, #1
 8003acc:	d028      	beq.n	8003b20 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003ace:	68fb      	ldr	r3, [r7, #12]
 8003ad0:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003ad8:	429a      	cmp	r2, r3
 8003ada:	d121      	bne.n	8003b20 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003adc:	68fb      	ldr	r3, [r7, #12]
 8003ade:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003ae6:	429a      	cmp	r2, r3
 8003ae8:	d11a      	bne.n	8003b20 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003aea:	68fa      	ldr	r2, [r7, #12]
 8003aec:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8003af0:	4013      	ands	r3, r2
 8003af2:	687a      	ldr	r2, [r7, #4]
 8003af4:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8003af6:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003af8:	4293      	cmp	r3, r2
 8003afa:	d111      	bne.n	8003b20 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003afc:	68fb      	ldr	r3, [r7, #12]
 8003afe:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003b06:	085b      	lsrs	r3, r3, #1
 8003b08:	3b01      	subs	r3, #1
 8003b0a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003b0c:	429a      	cmp	r2, r3
 8003b0e:	d107      	bne.n	8003b20 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003b10:	68fb      	ldr	r3, [r7, #12]
 8003b12:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003b1a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003b1c:	429a      	cmp	r2, r3
 8003b1e:	d001      	beq.n	8003b24 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8003b20:	2301      	movs	r3, #1
 8003b22:	e000      	b.n	8003b26 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003b24:	2300      	movs	r3, #0
}
 8003b26:	4618      	mov	r0, r3
 8003b28:	3718      	adds	r7, #24
 8003b2a:	46bd      	mov	sp, r7
 8003b2c:	bd80      	pop	{r7, pc}
 8003b2e:	bf00      	nop
 8003b30:	40023800 	.word	0x40023800

08003b34 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003b34:	b580      	push	{r7, lr}
 8003b36:	b084      	sub	sp, #16
 8003b38:	af00      	add	r7, sp, #0
 8003b3a:	6078      	str	r0, [r7, #4]
 8003b3c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	2b00      	cmp	r3, #0
 8003b42:	d101      	bne.n	8003b48 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003b44:	2301      	movs	r3, #1
 8003b46:	e0cc      	b.n	8003ce2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003b48:	4b68      	ldr	r3, [pc, #416]	@ (8003cec <HAL_RCC_ClockConfig+0x1b8>)
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	f003 0307 	and.w	r3, r3, #7
 8003b50:	683a      	ldr	r2, [r7, #0]
 8003b52:	429a      	cmp	r2, r3
 8003b54:	d90c      	bls.n	8003b70 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003b56:	4b65      	ldr	r3, [pc, #404]	@ (8003cec <HAL_RCC_ClockConfig+0x1b8>)
 8003b58:	683a      	ldr	r2, [r7, #0]
 8003b5a:	b2d2      	uxtb	r2, r2
 8003b5c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003b5e:	4b63      	ldr	r3, [pc, #396]	@ (8003cec <HAL_RCC_ClockConfig+0x1b8>)
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	f003 0307 	and.w	r3, r3, #7
 8003b66:	683a      	ldr	r2, [r7, #0]
 8003b68:	429a      	cmp	r2, r3
 8003b6a:	d001      	beq.n	8003b70 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003b6c:	2301      	movs	r3, #1
 8003b6e:	e0b8      	b.n	8003ce2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	f003 0302 	and.w	r3, r3, #2
 8003b78:	2b00      	cmp	r3, #0
 8003b7a:	d020      	beq.n	8003bbe <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	f003 0304 	and.w	r3, r3, #4
 8003b84:	2b00      	cmp	r3, #0
 8003b86:	d005      	beq.n	8003b94 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003b88:	4b59      	ldr	r3, [pc, #356]	@ (8003cf0 <HAL_RCC_ClockConfig+0x1bc>)
 8003b8a:	689b      	ldr	r3, [r3, #8]
 8003b8c:	4a58      	ldr	r2, [pc, #352]	@ (8003cf0 <HAL_RCC_ClockConfig+0x1bc>)
 8003b8e:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8003b92:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	f003 0308 	and.w	r3, r3, #8
 8003b9c:	2b00      	cmp	r3, #0
 8003b9e:	d005      	beq.n	8003bac <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003ba0:	4b53      	ldr	r3, [pc, #332]	@ (8003cf0 <HAL_RCC_ClockConfig+0x1bc>)
 8003ba2:	689b      	ldr	r3, [r3, #8]
 8003ba4:	4a52      	ldr	r2, [pc, #328]	@ (8003cf0 <HAL_RCC_ClockConfig+0x1bc>)
 8003ba6:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8003baa:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003bac:	4b50      	ldr	r3, [pc, #320]	@ (8003cf0 <HAL_RCC_ClockConfig+0x1bc>)
 8003bae:	689b      	ldr	r3, [r3, #8]
 8003bb0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	689b      	ldr	r3, [r3, #8]
 8003bb8:	494d      	ldr	r1, [pc, #308]	@ (8003cf0 <HAL_RCC_ClockConfig+0x1bc>)
 8003bba:	4313      	orrs	r3, r2
 8003bbc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	f003 0301 	and.w	r3, r3, #1
 8003bc6:	2b00      	cmp	r3, #0
 8003bc8:	d044      	beq.n	8003c54 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	685b      	ldr	r3, [r3, #4]
 8003bce:	2b01      	cmp	r3, #1
 8003bd0:	d107      	bne.n	8003be2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003bd2:	4b47      	ldr	r3, [pc, #284]	@ (8003cf0 <HAL_RCC_ClockConfig+0x1bc>)
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003bda:	2b00      	cmp	r3, #0
 8003bdc:	d119      	bne.n	8003c12 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003bde:	2301      	movs	r3, #1
 8003be0:	e07f      	b.n	8003ce2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	685b      	ldr	r3, [r3, #4]
 8003be6:	2b02      	cmp	r3, #2
 8003be8:	d003      	beq.n	8003bf2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003bee:	2b03      	cmp	r3, #3
 8003bf0:	d107      	bne.n	8003c02 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003bf2:	4b3f      	ldr	r3, [pc, #252]	@ (8003cf0 <HAL_RCC_ClockConfig+0x1bc>)
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003bfa:	2b00      	cmp	r3, #0
 8003bfc:	d109      	bne.n	8003c12 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003bfe:	2301      	movs	r3, #1
 8003c00:	e06f      	b.n	8003ce2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003c02:	4b3b      	ldr	r3, [pc, #236]	@ (8003cf0 <HAL_RCC_ClockConfig+0x1bc>)
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	f003 0302 	and.w	r3, r3, #2
 8003c0a:	2b00      	cmp	r3, #0
 8003c0c:	d101      	bne.n	8003c12 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003c0e:	2301      	movs	r3, #1
 8003c10:	e067      	b.n	8003ce2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003c12:	4b37      	ldr	r3, [pc, #220]	@ (8003cf0 <HAL_RCC_ClockConfig+0x1bc>)
 8003c14:	689b      	ldr	r3, [r3, #8]
 8003c16:	f023 0203 	bic.w	r2, r3, #3
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	685b      	ldr	r3, [r3, #4]
 8003c1e:	4934      	ldr	r1, [pc, #208]	@ (8003cf0 <HAL_RCC_ClockConfig+0x1bc>)
 8003c20:	4313      	orrs	r3, r2
 8003c22:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003c24:	f7fe fe80 	bl	8002928 <HAL_GetTick>
 8003c28:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003c2a:	e00a      	b.n	8003c42 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003c2c:	f7fe fe7c 	bl	8002928 <HAL_GetTick>
 8003c30:	4602      	mov	r2, r0
 8003c32:	68fb      	ldr	r3, [r7, #12]
 8003c34:	1ad3      	subs	r3, r2, r3
 8003c36:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003c3a:	4293      	cmp	r3, r2
 8003c3c:	d901      	bls.n	8003c42 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003c3e:	2303      	movs	r3, #3
 8003c40:	e04f      	b.n	8003ce2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003c42:	4b2b      	ldr	r3, [pc, #172]	@ (8003cf0 <HAL_RCC_ClockConfig+0x1bc>)
 8003c44:	689b      	ldr	r3, [r3, #8]
 8003c46:	f003 020c 	and.w	r2, r3, #12
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	685b      	ldr	r3, [r3, #4]
 8003c4e:	009b      	lsls	r3, r3, #2
 8003c50:	429a      	cmp	r2, r3
 8003c52:	d1eb      	bne.n	8003c2c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003c54:	4b25      	ldr	r3, [pc, #148]	@ (8003cec <HAL_RCC_ClockConfig+0x1b8>)
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	f003 0307 	and.w	r3, r3, #7
 8003c5c:	683a      	ldr	r2, [r7, #0]
 8003c5e:	429a      	cmp	r2, r3
 8003c60:	d20c      	bcs.n	8003c7c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003c62:	4b22      	ldr	r3, [pc, #136]	@ (8003cec <HAL_RCC_ClockConfig+0x1b8>)
 8003c64:	683a      	ldr	r2, [r7, #0]
 8003c66:	b2d2      	uxtb	r2, r2
 8003c68:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003c6a:	4b20      	ldr	r3, [pc, #128]	@ (8003cec <HAL_RCC_ClockConfig+0x1b8>)
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	f003 0307 	and.w	r3, r3, #7
 8003c72:	683a      	ldr	r2, [r7, #0]
 8003c74:	429a      	cmp	r2, r3
 8003c76:	d001      	beq.n	8003c7c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003c78:	2301      	movs	r3, #1
 8003c7a:	e032      	b.n	8003ce2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	f003 0304 	and.w	r3, r3, #4
 8003c84:	2b00      	cmp	r3, #0
 8003c86:	d008      	beq.n	8003c9a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003c88:	4b19      	ldr	r3, [pc, #100]	@ (8003cf0 <HAL_RCC_ClockConfig+0x1bc>)
 8003c8a:	689b      	ldr	r3, [r3, #8]
 8003c8c:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	68db      	ldr	r3, [r3, #12]
 8003c94:	4916      	ldr	r1, [pc, #88]	@ (8003cf0 <HAL_RCC_ClockConfig+0x1bc>)
 8003c96:	4313      	orrs	r3, r2
 8003c98:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	f003 0308 	and.w	r3, r3, #8
 8003ca2:	2b00      	cmp	r3, #0
 8003ca4:	d009      	beq.n	8003cba <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003ca6:	4b12      	ldr	r3, [pc, #72]	@ (8003cf0 <HAL_RCC_ClockConfig+0x1bc>)
 8003ca8:	689b      	ldr	r3, [r3, #8]
 8003caa:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	691b      	ldr	r3, [r3, #16]
 8003cb2:	00db      	lsls	r3, r3, #3
 8003cb4:	490e      	ldr	r1, [pc, #56]	@ (8003cf0 <HAL_RCC_ClockConfig+0x1bc>)
 8003cb6:	4313      	orrs	r3, r2
 8003cb8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003cba:	f000 f821 	bl	8003d00 <HAL_RCC_GetSysClockFreq>
 8003cbe:	4602      	mov	r2, r0
 8003cc0:	4b0b      	ldr	r3, [pc, #44]	@ (8003cf0 <HAL_RCC_ClockConfig+0x1bc>)
 8003cc2:	689b      	ldr	r3, [r3, #8]
 8003cc4:	091b      	lsrs	r3, r3, #4
 8003cc6:	f003 030f 	and.w	r3, r3, #15
 8003cca:	490a      	ldr	r1, [pc, #40]	@ (8003cf4 <HAL_RCC_ClockConfig+0x1c0>)
 8003ccc:	5ccb      	ldrb	r3, [r1, r3]
 8003cce:	fa22 f303 	lsr.w	r3, r2, r3
 8003cd2:	4a09      	ldr	r2, [pc, #36]	@ (8003cf8 <HAL_RCC_ClockConfig+0x1c4>)
 8003cd4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003cd6:	4b09      	ldr	r3, [pc, #36]	@ (8003cfc <HAL_RCC_ClockConfig+0x1c8>)
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	4618      	mov	r0, r3
 8003cdc:	f7fe fb88 	bl	80023f0 <HAL_InitTick>

  return HAL_OK;
 8003ce0:	2300      	movs	r3, #0
}
 8003ce2:	4618      	mov	r0, r3
 8003ce4:	3710      	adds	r7, #16
 8003ce6:	46bd      	mov	sp, r7
 8003ce8:	bd80      	pop	{r7, pc}
 8003cea:	bf00      	nop
 8003cec:	40023c00 	.word	0x40023c00
 8003cf0:	40023800 	.word	0x40023800
 8003cf4:	080165f4 	.word	0x080165f4
 8003cf8:	20000004 	.word	0x20000004
 8003cfc:	20000008 	.word	0x20000008

08003d00 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003d00:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003d04:	b094      	sub	sp, #80	@ 0x50
 8003d06:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003d08:	2300      	movs	r3, #0
 8003d0a:	647b      	str	r3, [r7, #68]	@ 0x44
 8003d0c:	2300      	movs	r3, #0
 8003d0e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003d10:	2300      	movs	r3, #0
 8003d12:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8003d14:	2300      	movs	r3, #0
 8003d16:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003d18:	4b79      	ldr	r3, [pc, #484]	@ (8003f00 <HAL_RCC_GetSysClockFreq+0x200>)
 8003d1a:	689b      	ldr	r3, [r3, #8]
 8003d1c:	f003 030c 	and.w	r3, r3, #12
 8003d20:	2b08      	cmp	r3, #8
 8003d22:	d00d      	beq.n	8003d40 <HAL_RCC_GetSysClockFreq+0x40>
 8003d24:	2b08      	cmp	r3, #8
 8003d26:	f200 80e1 	bhi.w	8003eec <HAL_RCC_GetSysClockFreq+0x1ec>
 8003d2a:	2b00      	cmp	r3, #0
 8003d2c:	d002      	beq.n	8003d34 <HAL_RCC_GetSysClockFreq+0x34>
 8003d2e:	2b04      	cmp	r3, #4
 8003d30:	d003      	beq.n	8003d3a <HAL_RCC_GetSysClockFreq+0x3a>
 8003d32:	e0db      	b.n	8003eec <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003d34:	4b73      	ldr	r3, [pc, #460]	@ (8003f04 <HAL_RCC_GetSysClockFreq+0x204>)
 8003d36:	64bb      	str	r3, [r7, #72]	@ 0x48
       break;
 8003d38:	e0db      	b.n	8003ef2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003d3a:	4b73      	ldr	r3, [pc, #460]	@ (8003f08 <HAL_RCC_GetSysClockFreq+0x208>)
 8003d3c:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003d3e:	e0d8      	b.n	8003ef2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003d40:	4b6f      	ldr	r3, [pc, #444]	@ (8003f00 <HAL_RCC_GetSysClockFreq+0x200>)
 8003d42:	685b      	ldr	r3, [r3, #4]
 8003d44:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003d48:	647b      	str	r3, [r7, #68]	@ 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003d4a:	4b6d      	ldr	r3, [pc, #436]	@ (8003f00 <HAL_RCC_GetSysClockFreq+0x200>)
 8003d4c:	685b      	ldr	r3, [r3, #4]
 8003d4e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003d52:	2b00      	cmp	r3, #0
 8003d54:	d063      	beq.n	8003e1e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003d56:	4b6a      	ldr	r3, [pc, #424]	@ (8003f00 <HAL_RCC_GetSysClockFreq+0x200>)
 8003d58:	685b      	ldr	r3, [r3, #4]
 8003d5a:	099b      	lsrs	r3, r3, #6
 8003d5c:	2200      	movs	r2, #0
 8003d5e:	63bb      	str	r3, [r7, #56]	@ 0x38
 8003d60:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8003d62:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003d64:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003d68:	633b      	str	r3, [r7, #48]	@ 0x30
 8003d6a:	2300      	movs	r3, #0
 8003d6c:	637b      	str	r3, [r7, #52]	@ 0x34
 8003d6e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8003d72:	4622      	mov	r2, r4
 8003d74:	462b      	mov	r3, r5
 8003d76:	f04f 0000 	mov.w	r0, #0
 8003d7a:	f04f 0100 	mov.w	r1, #0
 8003d7e:	0159      	lsls	r1, r3, #5
 8003d80:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003d84:	0150      	lsls	r0, r2, #5
 8003d86:	4602      	mov	r2, r0
 8003d88:	460b      	mov	r3, r1
 8003d8a:	4621      	mov	r1, r4
 8003d8c:	1a51      	subs	r1, r2, r1
 8003d8e:	6139      	str	r1, [r7, #16]
 8003d90:	4629      	mov	r1, r5
 8003d92:	eb63 0301 	sbc.w	r3, r3, r1
 8003d96:	617b      	str	r3, [r7, #20]
 8003d98:	f04f 0200 	mov.w	r2, #0
 8003d9c:	f04f 0300 	mov.w	r3, #0
 8003da0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003da4:	4659      	mov	r1, fp
 8003da6:	018b      	lsls	r3, r1, #6
 8003da8:	4651      	mov	r1, sl
 8003daa:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003dae:	4651      	mov	r1, sl
 8003db0:	018a      	lsls	r2, r1, #6
 8003db2:	4651      	mov	r1, sl
 8003db4:	ebb2 0801 	subs.w	r8, r2, r1
 8003db8:	4659      	mov	r1, fp
 8003dba:	eb63 0901 	sbc.w	r9, r3, r1
 8003dbe:	f04f 0200 	mov.w	r2, #0
 8003dc2:	f04f 0300 	mov.w	r3, #0
 8003dc6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003dca:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003dce:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003dd2:	4690      	mov	r8, r2
 8003dd4:	4699      	mov	r9, r3
 8003dd6:	4623      	mov	r3, r4
 8003dd8:	eb18 0303 	adds.w	r3, r8, r3
 8003ddc:	60bb      	str	r3, [r7, #8]
 8003dde:	462b      	mov	r3, r5
 8003de0:	eb49 0303 	adc.w	r3, r9, r3
 8003de4:	60fb      	str	r3, [r7, #12]
 8003de6:	f04f 0200 	mov.w	r2, #0
 8003dea:	f04f 0300 	mov.w	r3, #0
 8003dee:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8003df2:	4629      	mov	r1, r5
 8003df4:	024b      	lsls	r3, r1, #9
 8003df6:	4621      	mov	r1, r4
 8003df8:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003dfc:	4621      	mov	r1, r4
 8003dfe:	024a      	lsls	r2, r1, #9
 8003e00:	4610      	mov	r0, r2
 8003e02:	4619      	mov	r1, r3
 8003e04:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003e06:	2200      	movs	r2, #0
 8003e08:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003e0a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003e0c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8003e10:	f7fc fedc 	bl	8000bcc <__aeabi_uldivmod>
 8003e14:	4602      	mov	r2, r0
 8003e16:	460b      	mov	r3, r1
 8003e18:	4613      	mov	r3, r2
 8003e1a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003e1c:	e058      	b.n	8003ed0 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003e1e:	4b38      	ldr	r3, [pc, #224]	@ (8003f00 <HAL_RCC_GetSysClockFreq+0x200>)
 8003e20:	685b      	ldr	r3, [r3, #4]
 8003e22:	099b      	lsrs	r3, r3, #6
 8003e24:	2200      	movs	r2, #0
 8003e26:	4618      	mov	r0, r3
 8003e28:	4611      	mov	r1, r2
 8003e2a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8003e2e:	623b      	str	r3, [r7, #32]
 8003e30:	2300      	movs	r3, #0
 8003e32:	627b      	str	r3, [r7, #36]	@ 0x24
 8003e34:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8003e38:	4642      	mov	r2, r8
 8003e3a:	464b      	mov	r3, r9
 8003e3c:	f04f 0000 	mov.w	r0, #0
 8003e40:	f04f 0100 	mov.w	r1, #0
 8003e44:	0159      	lsls	r1, r3, #5
 8003e46:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003e4a:	0150      	lsls	r0, r2, #5
 8003e4c:	4602      	mov	r2, r0
 8003e4e:	460b      	mov	r3, r1
 8003e50:	4641      	mov	r1, r8
 8003e52:	ebb2 0a01 	subs.w	sl, r2, r1
 8003e56:	4649      	mov	r1, r9
 8003e58:	eb63 0b01 	sbc.w	fp, r3, r1
 8003e5c:	f04f 0200 	mov.w	r2, #0
 8003e60:	f04f 0300 	mov.w	r3, #0
 8003e64:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8003e68:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8003e6c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8003e70:	ebb2 040a 	subs.w	r4, r2, sl
 8003e74:	eb63 050b 	sbc.w	r5, r3, fp
 8003e78:	f04f 0200 	mov.w	r2, #0
 8003e7c:	f04f 0300 	mov.w	r3, #0
 8003e80:	00eb      	lsls	r3, r5, #3
 8003e82:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003e86:	00e2      	lsls	r2, r4, #3
 8003e88:	4614      	mov	r4, r2
 8003e8a:	461d      	mov	r5, r3
 8003e8c:	4643      	mov	r3, r8
 8003e8e:	18e3      	adds	r3, r4, r3
 8003e90:	603b      	str	r3, [r7, #0]
 8003e92:	464b      	mov	r3, r9
 8003e94:	eb45 0303 	adc.w	r3, r5, r3
 8003e98:	607b      	str	r3, [r7, #4]
 8003e9a:	f04f 0200 	mov.w	r2, #0
 8003e9e:	f04f 0300 	mov.w	r3, #0
 8003ea2:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003ea6:	4629      	mov	r1, r5
 8003ea8:	028b      	lsls	r3, r1, #10
 8003eaa:	4621      	mov	r1, r4
 8003eac:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003eb0:	4621      	mov	r1, r4
 8003eb2:	028a      	lsls	r2, r1, #10
 8003eb4:	4610      	mov	r0, r2
 8003eb6:	4619      	mov	r1, r3
 8003eb8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003eba:	2200      	movs	r2, #0
 8003ebc:	61bb      	str	r3, [r7, #24]
 8003ebe:	61fa      	str	r2, [r7, #28]
 8003ec0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003ec4:	f7fc fe82 	bl	8000bcc <__aeabi_uldivmod>
 8003ec8:	4602      	mov	r2, r0
 8003eca:	460b      	mov	r3, r1
 8003ecc:	4613      	mov	r3, r2
 8003ece:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003ed0:	4b0b      	ldr	r3, [pc, #44]	@ (8003f00 <HAL_RCC_GetSysClockFreq+0x200>)
 8003ed2:	685b      	ldr	r3, [r3, #4]
 8003ed4:	0c1b      	lsrs	r3, r3, #16
 8003ed6:	f003 0303 	and.w	r3, r3, #3
 8003eda:	3301      	adds	r3, #1
 8003edc:	005b      	lsls	r3, r3, #1
 8003ede:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco/pllp;
 8003ee0:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8003ee2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003ee4:	fbb2 f3f3 	udiv	r3, r2, r3
 8003ee8:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003eea:	e002      	b.n	8003ef2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003eec:	4b05      	ldr	r3, [pc, #20]	@ (8003f04 <HAL_RCC_GetSysClockFreq+0x204>)
 8003eee:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003ef0:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003ef2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8003ef4:	4618      	mov	r0, r3
 8003ef6:	3750      	adds	r7, #80	@ 0x50
 8003ef8:	46bd      	mov	sp, r7
 8003efa:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003efe:	bf00      	nop
 8003f00:	40023800 	.word	0x40023800
 8003f04:	00f42400 	.word	0x00f42400
 8003f08:	007a1200 	.word	0x007a1200

08003f0c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003f0c:	b480      	push	{r7}
 8003f0e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003f10:	4b03      	ldr	r3, [pc, #12]	@ (8003f20 <HAL_RCC_GetHCLKFreq+0x14>)
 8003f12:	681b      	ldr	r3, [r3, #0]
}
 8003f14:	4618      	mov	r0, r3
 8003f16:	46bd      	mov	sp, r7
 8003f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f1c:	4770      	bx	lr
 8003f1e:	bf00      	nop
 8003f20:	20000004 	.word	0x20000004

08003f24 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003f24:	b580      	push	{r7, lr}
 8003f26:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003f28:	f7ff fff0 	bl	8003f0c <HAL_RCC_GetHCLKFreq>
 8003f2c:	4602      	mov	r2, r0
 8003f2e:	4b05      	ldr	r3, [pc, #20]	@ (8003f44 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003f30:	689b      	ldr	r3, [r3, #8]
 8003f32:	0a9b      	lsrs	r3, r3, #10
 8003f34:	f003 0307 	and.w	r3, r3, #7
 8003f38:	4903      	ldr	r1, [pc, #12]	@ (8003f48 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003f3a:	5ccb      	ldrb	r3, [r1, r3]
 8003f3c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003f40:	4618      	mov	r0, r3
 8003f42:	bd80      	pop	{r7, pc}
 8003f44:	40023800 	.word	0x40023800
 8003f48:	08016604 	.word	0x08016604

08003f4c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003f4c:	b580      	push	{r7, lr}
 8003f4e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003f50:	f7ff ffdc 	bl	8003f0c <HAL_RCC_GetHCLKFreq>
 8003f54:	4602      	mov	r2, r0
 8003f56:	4b05      	ldr	r3, [pc, #20]	@ (8003f6c <HAL_RCC_GetPCLK2Freq+0x20>)
 8003f58:	689b      	ldr	r3, [r3, #8]
 8003f5a:	0b5b      	lsrs	r3, r3, #13
 8003f5c:	f003 0307 	and.w	r3, r3, #7
 8003f60:	4903      	ldr	r1, [pc, #12]	@ (8003f70 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003f62:	5ccb      	ldrb	r3, [r1, r3]
 8003f64:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003f68:	4618      	mov	r0, r3
 8003f6a:	bd80      	pop	{r7, pc}
 8003f6c:	40023800 	.word	0x40023800
 8003f70:	08016604 	.word	0x08016604

08003f74 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8003f74:	b480      	push	{r7}
 8003f76:	b083      	sub	sp, #12
 8003f78:	af00      	add	r7, sp, #0
 8003f7a:	6078      	str	r0, [r7, #4]
 8003f7c:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	220f      	movs	r2, #15
 8003f82:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8003f84:	4b12      	ldr	r3, [pc, #72]	@ (8003fd0 <HAL_RCC_GetClockConfig+0x5c>)
 8003f86:	689b      	ldr	r3, [r3, #8]
 8003f88:	f003 0203 	and.w	r2, r3, #3
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8003f90:	4b0f      	ldr	r3, [pc, #60]	@ (8003fd0 <HAL_RCC_GetClockConfig+0x5c>)
 8003f92:	689b      	ldr	r3, [r3, #8]
 8003f94:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8003f9c:	4b0c      	ldr	r3, [pc, #48]	@ (8003fd0 <HAL_RCC_GetClockConfig+0x5c>)
 8003f9e:	689b      	ldr	r3, [r3, #8]
 8003fa0:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8003fa8:	4b09      	ldr	r3, [pc, #36]	@ (8003fd0 <HAL_RCC_GetClockConfig+0x5c>)
 8003faa:	689b      	ldr	r3, [r3, #8]
 8003fac:	08db      	lsrs	r3, r3, #3
 8003fae:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8003fb6:	4b07      	ldr	r3, [pc, #28]	@ (8003fd4 <HAL_RCC_GetClockConfig+0x60>)
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	f003 0207 	and.w	r2, r3, #7
 8003fbe:	683b      	ldr	r3, [r7, #0]
 8003fc0:	601a      	str	r2, [r3, #0]
}
 8003fc2:	bf00      	nop
 8003fc4:	370c      	adds	r7, #12
 8003fc6:	46bd      	mov	sp, r7
 8003fc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fcc:	4770      	bx	lr
 8003fce:	bf00      	nop
 8003fd0:	40023800 	.word	0x40023800
 8003fd4:	40023c00 	.word	0x40023c00

08003fd8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003fd8:	b580      	push	{r7, lr}
 8003fda:	b082      	sub	sp, #8
 8003fdc:	af00      	add	r7, sp, #0
 8003fde:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	2b00      	cmp	r3, #0
 8003fe4:	d101      	bne.n	8003fea <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003fe6:	2301      	movs	r3, #1
 8003fe8:	e041      	b.n	800406e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003ff0:	b2db      	uxtb	r3, r3
 8003ff2:	2b00      	cmp	r3, #0
 8003ff4:	d106      	bne.n	8004004 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	2200      	movs	r2, #0
 8003ffa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003ffe:	6878      	ldr	r0, [r7, #4]
 8004000:	f7fe f8aa 	bl	8002158 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	2202      	movs	r2, #2
 8004008:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	681a      	ldr	r2, [r3, #0]
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	3304      	adds	r3, #4
 8004014:	4619      	mov	r1, r3
 8004016:	4610      	mov	r0, r2
 8004018:	f000 fc96 	bl	8004948 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	2201      	movs	r2, #1
 8004020:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	2201      	movs	r2, #1
 8004028:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	2201      	movs	r2, #1
 8004030:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	2201      	movs	r2, #1
 8004038:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	2201      	movs	r2, #1
 8004040:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	2201      	movs	r2, #1
 8004048:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	2201      	movs	r2, #1
 8004050:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	2201      	movs	r2, #1
 8004058:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	2201      	movs	r2, #1
 8004060:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	2201      	movs	r2, #1
 8004068:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800406c:	2300      	movs	r3, #0
}
 800406e:	4618      	mov	r0, r3
 8004070:	3708      	adds	r7, #8
 8004072:	46bd      	mov	sp, r7
 8004074:	bd80      	pop	{r7, pc}
	...

08004078 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8004078:	b480      	push	{r7}
 800407a:	b085      	sub	sp, #20
 800407c:	af00      	add	r7, sp, #0
 800407e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004086:	b2db      	uxtb	r3, r3
 8004088:	2b01      	cmp	r3, #1
 800408a:	d001      	beq.n	8004090 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 800408c:	2301      	movs	r3, #1
 800408e:	e03c      	b.n	800410a <HAL_TIM_Base_Start+0x92>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	2202      	movs	r2, #2
 8004094:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	4a1e      	ldr	r2, [pc, #120]	@ (8004118 <HAL_TIM_Base_Start+0xa0>)
 800409e:	4293      	cmp	r3, r2
 80040a0:	d018      	beq.n	80040d4 <HAL_TIM_Base_Start+0x5c>
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80040aa:	d013      	beq.n	80040d4 <HAL_TIM_Base_Start+0x5c>
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	4a1a      	ldr	r2, [pc, #104]	@ (800411c <HAL_TIM_Base_Start+0xa4>)
 80040b2:	4293      	cmp	r3, r2
 80040b4:	d00e      	beq.n	80040d4 <HAL_TIM_Base_Start+0x5c>
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	4a19      	ldr	r2, [pc, #100]	@ (8004120 <HAL_TIM_Base_Start+0xa8>)
 80040bc:	4293      	cmp	r3, r2
 80040be:	d009      	beq.n	80040d4 <HAL_TIM_Base_Start+0x5c>
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	4a17      	ldr	r2, [pc, #92]	@ (8004124 <HAL_TIM_Base_Start+0xac>)
 80040c6:	4293      	cmp	r3, r2
 80040c8:	d004      	beq.n	80040d4 <HAL_TIM_Base_Start+0x5c>
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	4a16      	ldr	r2, [pc, #88]	@ (8004128 <HAL_TIM_Base_Start+0xb0>)
 80040d0:	4293      	cmp	r3, r2
 80040d2:	d111      	bne.n	80040f8 <HAL_TIM_Base_Start+0x80>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	689b      	ldr	r3, [r3, #8]
 80040da:	f003 0307 	and.w	r3, r3, #7
 80040de:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80040e0:	68fb      	ldr	r3, [r7, #12]
 80040e2:	2b06      	cmp	r3, #6
 80040e4:	d010      	beq.n	8004108 <HAL_TIM_Base_Start+0x90>
    {
      __HAL_TIM_ENABLE(htim);
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	681a      	ldr	r2, [r3, #0]
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	f042 0201 	orr.w	r2, r2, #1
 80040f4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80040f6:	e007      	b.n	8004108 <HAL_TIM_Base_Start+0x90>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	681a      	ldr	r2, [r3, #0]
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	f042 0201 	orr.w	r2, r2, #1
 8004106:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004108:	2300      	movs	r3, #0
}
 800410a:	4618      	mov	r0, r3
 800410c:	3714      	adds	r7, #20
 800410e:	46bd      	mov	sp, r7
 8004110:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004114:	4770      	bx	lr
 8004116:	bf00      	nop
 8004118:	40010000 	.word	0x40010000
 800411c:	40000400 	.word	0x40000400
 8004120:	40000800 	.word	0x40000800
 8004124:	40000c00 	.word	0x40000c00
 8004128:	40014000 	.word	0x40014000

0800412c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800412c:	b480      	push	{r7}
 800412e:	b085      	sub	sp, #20
 8004130:	af00      	add	r7, sp, #0
 8004132:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800413a:	b2db      	uxtb	r3, r3
 800413c:	2b01      	cmp	r3, #1
 800413e:	d001      	beq.n	8004144 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004140:	2301      	movs	r3, #1
 8004142:	e044      	b.n	80041ce <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	2202      	movs	r2, #2
 8004148:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	68da      	ldr	r2, [r3, #12]
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	f042 0201 	orr.w	r2, r2, #1
 800415a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	4a1e      	ldr	r2, [pc, #120]	@ (80041dc <HAL_TIM_Base_Start_IT+0xb0>)
 8004162:	4293      	cmp	r3, r2
 8004164:	d018      	beq.n	8004198 <HAL_TIM_Base_Start_IT+0x6c>
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800416e:	d013      	beq.n	8004198 <HAL_TIM_Base_Start_IT+0x6c>
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	4a1a      	ldr	r2, [pc, #104]	@ (80041e0 <HAL_TIM_Base_Start_IT+0xb4>)
 8004176:	4293      	cmp	r3, r2
 8004178:	d00e      	beq.n	8004198 <HAL_TIM_Base_Start_IT+0x6c>
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	4a19      	ldr	r2, [pc, #100]	@ (80041e4 <HAL_TIM_Base_Start_IT+0xb8>)
 8004180:	4293      	cmp	r3, r2
 8004182:	d009      	beq.n	8004198 <HAL_TIM_Base_Start_IT+0x6c>
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	4a17      	ldr	r2, [pc, #92]	@ (80041e8 <HAL_TIM_Base_Start_IT+0xbc>)
 800418a:	4293      	cmp	r3, r2
 800418c:	d004      	beq.n	8004198 <HAL_TIM_Base_Start_IT+0x6c>
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	4a16      	ldr	r2, [pc, #88]	@ (80041ec <HAL_TIM_Base_Start_IT+0xc0>)
 8004194:	4293      	cmp	r3, r2
 8004196:	d111      	bne.n	80041bc <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	689b      	ldr	r3, [r3, #8]
 800419e:	f003 0307 	and.w	r3, r3, #7
 80041a2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80041a4:	68fb      	ldr	r3, [r7, #12]
 80041a6:	2b06      	cmp	r3, #6
 80041a8:	d010      	beq.n	80041cc <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	681a      	ldr	r2, [r3, #0]
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	f042 0201 	orr.w	r2, r2, #1
 80041b8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80041ba:	e007      	b.n	80041cc <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	681a      	ldr	r2, [r3, #0]
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	f042 0201 	orr.w	r2, r2, #1
 80041ca:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80041cc:	2300      	movs	r3, #0
}
 80041ce:	4618      	mov	r0, r3
 80041d0:	3714      	adds	r7, #20
 80041d2:	46bd      	mov	sp, r7
 80041d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041d8:	4770      	bx	lr
 80041da:	bf00      	nop
 80041dc:	40010000 	.word	0x40010000
 80041e0:	40000400 	.word	0x40000400
 80041e4:	40000800 	.word	0x40000800
 80041e8:	40000c00 	.word	0x40000c00
 80041ec:	40014000 	.word	0x40014000

080041f0 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80041f0:	b580      	push	{r7, lr}
 80041f2:	b082      	sub	sp, #8
 80041f4:	af00      	add	r7, sp, #0
 80041f6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	2b00      	cmp	r3, #0
 80041fc:	d101      	bne.n	8004202 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80041fe:	2301      	movs	r3, #1
 8004200:	e041      	b.n	8004286 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004208:	b2db      	uxtb	r3, r3
 800420a:	2b00      	cmp	r3, #0
 800420c:	d106      	bne.n	800421c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	2200      	movs	r2, #0
 8004212:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004216:	6878      	ldr	r0, [r7, #4]
 8004218:	f000 f839 	bl	800428e <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	2202      	movs	r2, #2
 8004220:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	681a      	ldr	r2, [r3, #0]
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	3304      	adds	r3, #4
 800422c:	4619      	mov	r1, r3
 800422e:	4610      	mov	r0, r2
 8004230:	f000 fb8a 	bl	8004948 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	2201      	movs	r2, #1
 8004238:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	2201      	movs	r2, #1
 8004240:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	2201      	movs	r2, #1
 8004248:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	2201      	movs	r2, #1
 8004250:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	2201      	movs	r2, #1
 8004258:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	2201      	movs	r2, #1
 8004260:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	2201      	movs	r2, #1
 8004268:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	2201      	movs	r2, #1
 8004270:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	2201      	movs	r2, #1
 8004278:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	2201      	movs	r2, #1
 8004280:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004284:	2300      	movs	r3, #0
}
 8004286:	4618      	mov	r0, r3
 8004288:	3708      	adds	r7, #8
 800428a:	46bd      	mov	sp, r7
 800428c:	bd80      	pop	{r7, pc}

0800428e <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800428e:	b480      	push	{r7}
 8004290:	b083      	sub	sp, #12
 8004292:	af00      	add	r7, sp, #0
 8004294:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8004296:	bf00      	nop
 8004298:	370c      	adds	r7, #12
 800429a:	46bd      	mov	sp, r7
 800429c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042a0:	4770      	bx	lr
	...

080042a4 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80042a4:	b580      	push	{r7, lr}
 80042a6:	b084      	sub	sp, #16
 80042a8:	af00      	add	r7, sp, #0
 80042aa:	6078      	str	r0, [r7, #4]
 80042ac:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80042ae:	683b      	ldr	r3, [r7, #0]
 80042b0:	2b00      	cmp	r3, #0
 80042b2:	d109      	bne.n	80042c8 <HAL_TIM_PWM_Start+0x24>
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80042ba:	b2db      	uxtb	r3, r3
 80042bc:	2b01      	cmp	r3, #1
 80042be:	bf14      	ite	ne
 80042c0:	2301      	movne	r3, #1
 80042c2:	2300      	moveq	r3, #0
 80042c4:	b2db      	uxtb	r3, r3
 80042c6:	e022      	b.n	800430e <HAL_TIM_PWM_Start+0x6a>
 80042c8:	683b      	ldr	r3, [r7, #0]
 80042ca:	2b04      	cmp	r3, #4
 80042cc:	d109      	bne.n	80042e2 <HAL_TIM_PWM_Start+0x3e>
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80042d4:	b2db      	uxtb	r3, r3
 80042d6:	2b01      	cmp	r3, #1
 80042d8:	bf14      	ite	ne
 80042da:	2301      	movne	r3, #1
 80042dc:	2300      	moveq	r3, #0
 80042de:	b2db      	uxtb	r3, r3
 80042e0:	e015      	b.n	800430e <HAL_TIM_PWM_Start+0x6a>
 80042e2:	683b      	ldr	r3, [r7, #0]
 80042e4:	2b08      	cmp	r3, #8
 80042e6:	d109      	bne.n	80042fc <HAL_TIM_PWM_Start+0x58>
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80042ee:	b2db      	uxtb	r3, r3
 80042f0:	2b01      	cmp	r3, #1
 80042f2:	bf14      	ite	ne
 80042f4:	2301      	movne	r3, #1
 80042f6:	2300      	moveq	r3, #0
 80042f8:	b2db      	uxtb	r3, r3
 80042fa:	e008      	b.n	800430e <HAL_TIM_PWM_Start+0x6a>
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004302:	b2db      	uxtb	r3, r3
 8004304:	2b01      	cmp	r3, #1
 8004306:	bf14      	ite	ne
 8004308:	2301      	movne	r3, #1
 800430a:	2300      	moveq	r3, #0
 800430c:	b2db      	uxtb	r3, r3
 800430e:	2b00      	cmp	r3, #0
 8004310:	d001      	beq.n	8004316 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8004312:	2301      	movs	r3, #1
 8004314:	e068      	b.n	80043e8 <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004316:	683b      	ldr	r3, [r7, #0]
 8004318:	2b00      	cmp	r3, #0
 800431a:	d104      	bne.n	8004326 <HAL_TIM_PWM_Start+0x82>
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	2202      	movs	r2, #2
 8004320:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004324:	e013      	b.n	800434e <HAL_TIM_PWM_Start+0xaa>
 8004326:	683b      	ldr	r3, [r7, #0]
 8004328:	2b04      	cmp	r3, #4
 800432a:	d104      	bne.n	8004336 <HAL_TIM_PWM_Start+0x92>
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	2202      	movs	r2, #2
 8004330:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004334:	e00b      	b.n	800434e <HAL_TIM_PWM_Start+0xaa>
 8004336:	683b      	ldr	r3, [r7, #0]
 8004338:	2b08      	cmp	r3, #8
 800433a:	d104      	bne.n	8004346 <HAL_TIM_PWM_Start+0xa2>
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	2202      	movs	r2, #2
 8004340:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004344:	e003      	b.n	800434e <HAL_TIM_PWM_Start+0xaa>
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	2202      	movs	r2, #2
 800434a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	2201      	movs	r2, #1
 8004354:	6839      	ldr	r1, [r7, #0]
 8004356:	4618      	mov	r0, r3
 8004358:	f000 fda8 	bl	8004eac <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	4a23      	ldr	r2, [pc, #140]	@ (80043f0 <HAL_TIM_PWM_Start+0x14c>)
 8004362:	4293      	cmp	r3, r2
 8004364:	d107      	bne.n	8004376 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8004374:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	4a1d      	ldr	r2, [pc, #116]	@ (80043f0 <HAL_TIM_PWM_Start+0x14c>)
 800437c:	4293      	cmp	r3, r2
 800437e:	d018      	beq.n	80043b2 <HAL_TIM_PWM_Start+0x10e>
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004388:	d013      	beq.n	80043b2 <HAL_TIM_PWM_Start+0x10e>
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	4a19      	ldr	r2, [pc, #100]	@ (80043f4 <HAL_TIM_PWM_Start+0x150>)
 8004390:	4293      	cmp	r3, r2
 8004392:	d00e      	beq.n	80043b2 <HAL_TIM_PWM_Start+0x10e>
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	4a17      	ldr	r2, [pc, #92]	@ (80043f8 <HAL_TIM_PWM_Start+0x154>)
 800439a:	4293      	cmp	r3, r2
 800439c:	d009      	beq.n	80043b2 <HAL_TIM_PWM_Start+0x10e>
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	4a16      	ldr	r2, [pc, #88]	@ (80043fc <HAL_TIM_PWM_Start+0x158>)
 80043a4:	4293      	cmp	r3, r2
 80043a6:	d004      	beq.n	80043b2 <HAL_TIM_PWM_Start+0x10e>
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	4a14      	ldr	r2, [pc, #80]	@ (8004400 <HAL_TIM_PWM_Start+0x15c>)
 80043ae:	4293      	cmp	r3, r2
 80043b0:	d111      	bne.n	80043d6 <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	689b      	ldr	r3, [r3, #8]
 80043b8:	f003 0307 	and.w	r3, r3, #7
 80043bc:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80043be:	68fb      	ldr	r3, [r7, #12]
 80043c0:	2b06      	cmp	r3, #6
 80043c2:	d010      	beq.n	80043e6 <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	681a      	ldr	r2, [r3, #0]
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	f042 0201 	orr.w	r2, r2, #1
 80043d2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80043d4:	e007      	b.n	80043e6 <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	681a      	ldr	r2, [r3, #0]
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	f042 0201 	orr.w	r2, r2, #1
 80043e4:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80043e6:	2300      	movs	r3, #0
}
 80043e8:	4618      	mov	r0, r3
 80043ea:	3710      	adds	r7, #16
 80043ec:	46bd      	mov	sp, r7
 80043ee:	bd80      	pop	{r7, pc}
 80043f0:	40010000 	.word	0x40010000
 80043f4:	40000400 	.word	0x40000400
 80043f8:	40000800 	.word	0x40000800
 80043fc:	40000c00 	.word	0x40000c00
 8004400:	40014000 	.word	0x40014000

08004404 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004404:	b580      	push	{r7, lr}
 8004406:	b084      	sub	sp, #16
 8004408:	af00      	add	r7, sp, #0
 800440a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	68db      	ldr	r3, [r3, #12]
 8004412:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	691b      	ldr	r3, [r3, #16]
 800441a:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800441c:	68bb      	ldr	r3, [r7, #8]
 800441e:	f003 0302 	and.w	r3, r3, #2
 8004422:	2b00      	cmp	r3, #0
 8004424:	d020      	beq.n	8004468 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8004426:	68fb      	ldr	r3, [r7, #12]
 8004428:	f003 0302 	and.w	r3, r3, #2
 800442c:	2b00      	cmp	r3, #0
 800442e:	d01b      	beq.n	8004468 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	f06f 0202 	mvn.w	r2, #2
 8004438:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	2201      	movs	r2, #1
 800443e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	699b      	ldr	r3, [r3, #24]
 8004446:	f003 0303 	and.w	r3, r3, #3
 800444a:	2b00      	cmp	r3, #0
 800444c:	d003      	beq.n	8004456 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800444e:	6878      	ldr	r0, [r7, #4]
 8004450:	f000 fa5b 	bl	800490a <HAL_TIM_IC_CaptureCallback>
 8004454:	e005      	b.n	8004462 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004456:	6878      	ldr	r0, [r7, #4]
 8004458:	f000 fa4d 	bl	80048f6 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800445c:	6878      	ldr	r0, [r7, #4]
 800445e:	f000 fa5e 	bl	800491e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	2200      	movs	r2, #0
 8004466:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8004468:	68bb      	ldr	r3, [r7, #8]
 800446a:	f003 0304 	and.w	r3, r3, #4
 800446e:	2b00      	cmp	r3, #0
 8004470:	d020      	beq.n	80044b4 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8004472:	68fb      	ldr	r3, [r7, #12]
 8004474:	f003 0304 	and.w	r3, r3, #4
 8004478:	2b00      	cmp	r3, #0
 800447a:	d01b      	beq.n	80044b4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	f06f 0204 	mvn.w	r2, #4
 8004484:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	2202      	movs	r2, #2
 800448a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	699b      	ldr	r3, [r3, #24]
 8004492:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004496:	2b00      	cmp	r3, #0
 8004498:	d003      	beq.n	80044a2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800449a:	6878      	ldr	r0, [r7, #4]
 800449c:	f000 fa35 	bl	800490a <HAL_TIM_IC_CaptureCallback>
 80044a0:	e005      	b.n	80044ae <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80044a2:	6878      	ldr	r0, [r7, #4]
 80044a4:	f000 fa27 	bl	80048f6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80044a8:	6878      	ldr	r0, [r7, #4]
 80044aa:	f000 fa38 	bl	800491e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	2200      	movs	r2, #0
 80044b2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80044b4:	68bb      	ldr	r3, [r7, #8]
 80044b6:	f003 0308 	and.w	r3, r3, #8
 80044ba:	2b00      	cmp	r3, #0
 80044bc:	d020      	beq.n	8004500 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80044be:	68fb      	ldr	r3, [r7, #12]
 80044c0:	f003 0308 	and.w	r3, r3, #8
 80044c4:	2b00      	cmp	r3, #0
 80044c6:	d01b      	beq.n	8004500 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	f06f 0208 	mvn.w	r2, #8
 80044d0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	2204      	movs	r2, #4
 80044d6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	69db      	ldr	r3, [r3, #28]
 80044de:	f003 0303 	and.w	r3, r3, #3
 80044e2:	2b00      	cmp	r3, #0
 80044e4:	d003      	beq.n	80044ee <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80044e6:	6878      	ldr	r0, [r7, #4]
 80044e8:	f000 fa0f 	bl	800490a <HAL_TIM_IC_CaptureCallback>
 80044ec:	e005      	b.n	80044fa <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80044ee:	6878      	ldr	r0, [r7, #4]
 80044f0:	f000 fa01 	bl	80048f6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80044f4:	6878      	ldr	r0, [r7, #4]
 80044f6:	f000 fa12 	bl	800491e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	2200      	movs	r2, #0
 80044fe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8004500:	68bb      	ldr	r3, [r7, #8]
 8004502:	f003 0310 	and.w	r3, r3, #16
 8004506:	2b00      	cmp	r3, #0
 8004508:	d020      	beq.n	800454c <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800450a:	68fb      	ldr	r3, [r7, #12]
 800450c:	f003 0310 	and.w	r3, r3, #16
 8004510:	2b00      	cmp	r3, #0
 8004512:	d01b      	beq.n	800454c <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	f06f 0210 	mvn.w	r2, #16
 800451c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	2208      	movs	r2, #8
 8004522:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	69db      	ldr	r3, [r3, #28]
 800452a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800452e:	2b00      	cmp	r3, #0
 8004530:	d003      	beq.n	800453a <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004532:	6878      	ldr	r0, [r7, #4]
 8004534:	f000 f9e9 	bl	800490a <HAL_TIM_IC_CaptureCallback>
 8004538:	e005      	b.n	8004546 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800453a:	6878      	ldr	r0, [r7, #4]
 800453c:	f000 f9db 	bl	80048f6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004540:	6878      	ldr	r0, [r7, #4]
 8004542:	f000 f9ec 	bl	800491e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	2200      	movs	r2, #0
 800454a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800454c:	68bb      	ldr	r3, [r7, #8]
 800454e:	f003 0301 	and.w	r3, r3, #1
 8004552:	2b00      	cmp	r3, #0
 8004554:	d00c      	beq.n	8004570 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8004556:	68fb      	ldr	r3, [r7, #12]
 8004558:	f003 0301 	and.w	r3, r3, #1
 800455c:	2b00      	cmp	r3, #0
 800455e:	d007      	beq.n	8004570 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	f06f 0201 	mvn.w	r2, #1
 8004568:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800456a:	6878      	ldr	r0, [r7, #4]
 800456c:	f7fd fc4c 	bl	8001e08 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8004570:	68bb      	ldr	r3, [r7, #8]
 8004572:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004576:	2b00      	cmp	r3, #0
 8004578:	d00c      	beq.n	8004594 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800457a:	68fb      	ldr	r3, [r7, #12]
 800457c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004580:	2b00      	cmp	r3, #0
 8004582:	d007      	beq.n	8004594 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 800458c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800458e:	6878      	ldr	r0, [r7, #4]
 8004590:	f000 fd2a 	bl	8004fe8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8004594:	68bb      	ldr	r3, [r7, #8]
 8004596:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800459a:	2b00      	cmp	r3, #0
 800459c:	d00c      	beq.n	80045b8 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800459e:	68fb      	ldr	r3, [r7, #12]
 80045a0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80045a4:	2b00      	cmp	r3, #0
 80045a6:	d007      	beq.n	80045b8 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80045b0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80045b2:	6878      	ldr	r0, [r7, #4]
 80045b4:	f000 f9bd 	bl	8004932 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80045b8:	68bb      	ldr	r3, [r7, #8]
 80045ba:	f003 0320 	and.w	r3, r3, #32
 80045be:	2b00      	cmp	r3, #0
 80045c0:	d00c      	beq.n	80045dc <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80045c2:	68fb      	ldr	r3, [r7, #12]
 80045c4:	f003 0320 	and.w	r3, r3, #32
 80045c8:	2b00      	cmp	r3, #0
 80045ca:	d007      	beq.n	80045dc <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	f06f 0220 	mvn.w	r2, #32
 80045d4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80045d6:	6878      	ldr	r0, [r7, #4]
 80045d8:	f000 fcfc 	bl	8004fd4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80045dc:	bf00      	nop
 80045de:	3710      	adds	r7, #16
 80045e0:	46bd      	mov	sp, r7
 80045e2:	bd80      	pop	{r7, pc}

080045e4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80045e4:	b580      	push	{r7, lr}
 80045e6:	b086      	sub	sp, #24
 80045e8:	af00      	add	r7, sp, #0
 80045ea:	60f8      	str	r0, [r7, #12]
 80045ec:	60b9      	str	r1, [r7, #8]
 80045ee:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80045f0:	2300      	movs	r3, #0
 80045f2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80045f4:	68fb      	ldr	r3, [r7, #12]
 80045f6:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80045fa:	2b01      	cmp	r3, #1
 80045fc:	d101      	bne.n	8004602 <HAL_TIM_PWM_ConfigChannel+0x1e>
 80045fe:	2302      	movs	r3, #2
 8004600:	e0ae      	b.n	8004760 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8004602:	68fb      	ldr	r3, [r7, #12]
 8004604:	2201      	movs	r2, #1
 8004606:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	2b0c      	cmp	r3, #12
 800460e:	f200 809f 	bhi.w	8004750 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8004612:	a201      	add	r2, pc, #4	@ (adr r2, 8004618 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8004614:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004618:	0800464d 	.word	0x0800464d
 800461c:	08004751 	.word	0x08004751
 8004620:	08004751 	.word	0x08004751
 8004624:	08004751 	.word	0x08004751
 8004628:	0800468d 	.word	0x0800468d
 800462c:	08004751 	.word	0x08004751
 8004630:	08004751 	.word	0x08004751
 8004634:	08004751 	.word	0x08004751
 8004638:	080046cf 	.word	0x080046cf
 800463c:	08004751 	.word	0x08004751
 8004640:	08004751 	.word	0x08004751
 8004644:	08004751 	.word	0x08004751
 8004648:	0800470f 	.word	0x0800470f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800464c:	68fb      	ldr	r3, [r7, #12]
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	68b9      	ldr	r1, [r7, #8]
 8004652:	4618      	mov	r0, r3
 8004654:	f000 fa04 	bl	8004a60 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004658:	68fb      	ldr	r3, [r7, #12]
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	699a      	ldr	r2, [r3, #24]
 800465e:	68fb      	ldr	r3, [r7, #12]
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	f042 0208 	orr.w	r2, r2, #8
 8004666:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004668:	68fb      	ldr	r3, [r7, #12]
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	699a      	ldr	r2, [r3, #24]
 800466e:	68fb      	ldr	r3, [r7, #12]
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	f022 0204 	bic.w	r2, r2, #4
 8004676:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004678:	68fb      	ldr	r3, [r7, #12]
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	6999      	ldr	r1, [r3, #24]
 800467e:	68bb      	ldr	r3, [r7, #8]
 8004680:	691a      	ldr	r2, [r3, #16]
 8004682:	68fb      	ldr	r3, [r7, #12]
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	430a      	orrs	r2, r1
 8004688:	619a      	str	r2, [r3, #24]
      break;
 800468a:	e064      	b.n	8004756 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800468c:	68fb      	ldr	r3, [r7, #12]
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	68b9      	ldr	r1, [r7, #8]
 8004692:	4618      	mov	r0, r3
 8004694:	f000 fa4a 	bl	8004b2c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004698:	68fb      	ldr	r3, [r7, #12]
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	699a      	ldr	r2, [r3, #24]
 800469e:	68fb      	ldr	r3, [r7, #12]
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80046a6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80046a8:	68fb      	ldr	r3, [r7, #12]
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	699a      	ldr	r2, [r3, #24]
 80046ae:	68fb      	ldr	r3, [r7, #12]
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80046b6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80046b8:	68fb      	ldr	r3, [r7, #12]
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	6999      	ldr	r1, [r3, #24]
 80046be:	68bb      	ldr	r3, [r7, #8]
 80046c0:	691b      	ldr	r3, [r3, #16]
 80046c2:	021a      	lsls	r2, r3, #8
 80046c4:	68fb      	ldr	r3, [r7, #12]
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	430a      	orrs	r2, r1
 80046ca:	619a      	str	r2, [r3, #24]
      break;
 80046cc:	e043      	b.n	8004756 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80046ce:	68fb      	ldr	r3, [r7, #12]
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	68b9      	ldr	r1, [r7, #8]
 80046d4:	4618      	mov	r0, r3
 80046d6:	f000 fa95 	bl	8004c04 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80046da:	68fb      	ldr	r3, [r7, #12]
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	69da      	ldr	r2, [r3, #28]
 80046e0:	68fb      	ldr	r3, [r7, #12]
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	f042 0208 	orr.w	r2, r2, #8
 80046e8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80046ea:	68fb      	ldr	r3, [r7, #12]
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	69da      	ldr	r2, [r3, #28]
 80046f0:	68fb      	ldr	r3, [r7, #12]
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	f022 0204 	bic.w	r2, r2, #4
 80046f8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80046fa:	68fb      	ldr	r3, [r7, #12]
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	69d9      	ldr	r1, [r3, #28]
 8004700:	68bb      	ldr	r3, [r7, #8]
 8004702:	691a      	ldr	r2, [r3, #16]
 8004704:	68fb      	ldr	r3, [r7, #12]
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	430a      	orrs	r2, r1
 800470a:	61da      	str	r2, [r3, #28]
      break;
 800470c:	e023      	b.n	8004756 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800470e:	68fb      	ldr	r3, [r7, #12]
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	68b9      	ldr	r1, [r7, #8]
 8004714:	4618      	mov	r0, r3
 8004716:	f000 fadf 	bl	8004cd8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800471a:	68fb      	ldr	r3, [r7, #12]
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	69da      	ldr	r2, [r3, #28]
 8004720:	68fb      	ldr	r3, [r7, #12]
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004728:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800472a:	68fb      	ldr	r3, [r7, #12]
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	69da      	ldr	r2, [r3, #28]
 8004730:	68fb      	ldr	r3, [r7, #12]
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004738:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800473a:	68fb      	ldr	r3, [r7, #12]
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	69d9      	ldr	r1, [r3, #28]
 8004740:	68bb      	ldr	r3, [r7, #8]
 8004742:	691b      	ldr	r3, [r3, #16]
 8004744:	021a      	lsls	r2, r3, #8
 8004746:	68fb      	ldr	r3, [r7, #12]
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	430a      	orrs	r2, r1
 800474c:	61da      	str	r2, [r3, #28]
      break;
 800474e:	e002      	b.n	8004756 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8004750:	2301      	movs	r3, #1
 8004752:	75fb      	strb	r3, [r7, #23]
      break;
 8004754:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004756:	68fb      	ldr	r3, [r7, #12]
 8004758:	2200      	movs	r2, #0
 800475a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800475e:	7dfb      	ldrb	r3, [r7, #23]
}
 8004760:	4618      	mov	r0, r3
 8004762:	3718      	adds	r7, #24
 8004764:	46bd      	mov	sp, r7
 8004766:	bd80      	pop	{r7, pc}

08004768 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004768:	b580      	push	{r7, lr}
 800476a:	b084      	sub	sp, #16
 800476c:	af00      	add	r7, sp, #0
 800476e:	6078      	str	r0, [r7, #4]
 8004770:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004772:	2300      	movs	r3, #0
 8004774:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800477c:	2b01      	cmp	r3, #1
 800477e:	d101      	bne.n	8004784 <HAL_TIM_ConfigClockSource+0x1c>
 8004780:	2302      	movs	r3, #2
 8004782:	e0b4      	b.n	80048ee <HAL_TIM_ConfigClockSource+0x186>
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	2201      	movs	r2, #1
 8004788:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	2202      	movs	r2, #2
 8004790:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	689b      	ldr	r3, [r3, #8]
 800479a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800479c:	68bb      	ldr	r3, [r7, #8]
 800479e:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 80047a2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80047a4:	68bb      	ldr	r3, [r7, #8]
 80047a6:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80047aa:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	68ba      	ldr	r2, [r7, #8]
 80047b2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80047b4:	683b      	ldr	r3, [r7, #0]
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80047bc:	d03e      	beq.n	800483c <HAL_TIM_ConfigClockSource+0xd4>
 80047be:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80047c2:	f200 8087 	bhi.w	80048d4 <HAL_TIM_ConfigClockSource+0x16c>
 80047c6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80047ca:	f000 8086 	beq.w	80048da <HAL_TIM_ConfigClockSource+0x172>
 80047ce:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80047d2:	d87f      	bhi.n	80048d4 <HAL_TIM_ConfigClockSource+0x16c>
 80047d4:	2b70      	cmp	r3, #112	@ 0x70
 80047d6:	d01a      	beq.n	800480e <HAL_TIM_ConfigClockSource+0xa6>
 80047d8:	2b70      	cmp	r3, #112	@ 0x70
 80047da:	d87b      	bhi.n	80048d4 <HAL_TIM_ConfigClockSource+0x16c>
 80047dc:	2b60      	cmp	r3, #96	@ 0x60
 80047de:	d050      	beq.n	8004882 <HAL_TIM_ConfigClockSource+0x11a>
 80047e0:	2b60      	cmp	r3, #96	@ 0x60
 80047e2:	d877      	bhi.n	80048d4 <HAL_TIM_ConfigClockSource+0x16c>
 80047e4:	2b50      	cmp	r3, #80	@ 0x50
 80047e6:	d03c      	beq.n	8004862 <HAL_TIM_ConfigClockSource+0xfa>
 80047e8:	2b50      	cmp	r3, #80	@ 0x50
 80047ea:	d873      	bhi.n	80048d4 <HAL_TIM_ConfigClockSource+0x16c>
 80047ec:	2b40      	cmp	r3, #64	@ 0x40
 80047ee:	d058      	beq.n	80048a2 <HAL_TIM_ConfigClockSource+0x13a>
 80047f0:	2b40      	cmp	r3, #64	@ 0x40
 80047f2:	d86f      	bhi.n	80048d4 <HAL_TIM_ConfigClockSource+0x16c>
 80047f4:	2b30      	cmp	r3, #48	@ 0x30
 80047f6:	d064      	beq.n	80048c2 <HAL_TIM_ConfigClockSource+0x15a>
 80047f8:	2b30      	cmp	r3, #48	@ 0x30
 80047fa:	d86b      	bhi.n	80048d4 <HAL_TIM_ConfigClockSource+0x16c>
 80047fc:	2b20      	cmp	r3, #32
 80047fe:	d060      	beq.n	80048c2 <HAL_TIM_ConfigClockSource+0x15a>
 8004800:	2b20      	cmp	r3, #32
 8004802:	d867      	bhi.n	80048d4 <HAL_TIM_ConfigClockSource+0x16c>
 8004804:	2b00      	cmp	r3, #0
 8004806:	d05c      	beq.n	80048c2 <HAL_TIM_ConfigClockSource+0x15a>
 8004808:	2b10      	cmp	r3, #16
 800480a:	d05a      	beq.n	80048c2 <HAL_TIM_ConfigClockSource+0x15a>
 800480c:	e062      	b.n	80048d4 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004812:	683b      	ldr	r3, [r7, #0]
 8004814:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004816:	683b      	ldr	r3, [r7, #0]
 8004818:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800481a:	683b      	ldr	r3, [r7, #0]
 800481c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800481e:	f000 fb25 	bl	8004e6c <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	689b      	ldr	r3, [r3, #8]
 8004828:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800482a:	68bb      	ldr	r3, [r7, #8]
 800482c:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8004830:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	68ba      	ldr	r2, [r7, #8]
 8004838:	609a      	str	r2, [r3, #8]
      break;
 800483a:	e04f      	b.n	80048dc <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004840:	683b      	ldr	r3, [r7, #0]
 8004842:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004844:	683b      	ldr	r3, [r7, #0]
 8004846:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004848:	683b      	ldr	r3, [r7, #0]
 800484a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800484c:	f000 fb0e 	bl	8004e6c <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	689a      	ldr	r2, [r3, #8]
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800485e:	609a      	str	r2, [r3, #8]
      break;
 8004860:	e03c      	b.n	80048dc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004866:	683b      	ldr	r3, [r7, #0]
 8004868:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800486a:	683b      	ldr	r3, [r7, #0]
 800486c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800486e:	461a      	mov	r2, r3
 8004870:	f000 fa82 	bl	8004d78 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	2150      	movs	r1, #80	@ 0x50
 800487a:	4618      	mov	r0, r3
 800487c:	f000 fadb 	bl	8004e36 <TIM_ITRx_SetConfig>
      break;
 8004880:	e02c      	b.n	80048dc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004886:	683b      	ldr	r3, [r7, #0]
 8004888:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800488a:	683b      	ldr	r3, [r7, #0]
 800488c:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800488e:	461a      	mov	r2, r3
 8004890:	f000 faa1 	bl	8004dd6 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	2160      	movs	r1, #96	@ 0x60
 800489a:	4618      	mov	r0, r3
 800489c:	f000 facb 	bl	8004e36 <TIM_ITRx_SetConfig>
      break;
 80048a0:	e01c      	b.n	80048dc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80048a6:	683b      	ldr	r3, [r7, #0]
 80048a8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80048aa:	683b      	ldr	r3, [r7, #0]
 80048ac:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80048ae:	461a      	mov	r2, r3
 80048b0:	f000 fa62 	bl	8004d78 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	2140      	movs	r1, #64	@ 0x40
 80048ba:	4618      	mov	r0, r3
 80048bc:	f000 fabb 	bl	8004e36 <TIM_ITRx_SetConfig>
      break;
 80048c0:	e00c      	b.n	80048dc <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	681a      	ldr	r2, [r3, #0]
 80048c6:	683b      	ldr	r3, [r7, #0]
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	4619      	mov	r1, r3
 80048cc:	4610      	mov	r0, r2
 80048ce:	f000 fab2 	bl	8004e36 <TIM_ITRx_SetConfig>
      break;
 80048d2:	e003      	b.n	80048dc <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80048d4:	2301      	movs	r3, #1
 80048d6:	73fb      	strb	r3, [r7, #15]
      break;
 80048d8:	e000      	b.n	80048dc <HAL_TIM_ConfigClockSource+0x174>
      break;
 80048da:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	2201      	movs	r2, #1
 80048e0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	2200      	movs	r2, #0
 80048e8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80048ec:	7bfb      	ldrb	r3, [r7, #15]
}
 80048ee:	4618      	mov	r0, r3
 80048f0:	3710      	adds	r7, #16
 80048f2:	46bd      	mov	sp, r7
 80048f4:	bd80      	pop	{r7, pc}

080048f6 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80048f6:	b480      	push	{r7}
 80048f8:	b083      	sub	sp, #12
 80048fa:	af00      	add	r7, sp, #0
 80048fc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80048fe:	bf00      	nop
 8004900:	370c      	adds	r7, #12
 8004902:	46bd      	mov	sp, r7
 8004904:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004908:	4770      	bx	lr

0800490a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800490a:	b480      	push	{r7}
 800490c:	b083      	sub	sp, #12
 800490e:	af00      	add	r7, sp, #0
 8004910:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004912:	bf00      	nop
 8004914:	370c      	adds	r7, #12
 8004916:	46bd      	mov	sp, r7
 8004918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800491c:	4770      	bx	lr

0800491e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800491e:	b480      	push	{r7}
 8004920:	b083      	sub	sp, #12
 8004922:	af00      	add	r7, sp, #0
 8004924:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004926:	bf00      	nop
 8004928:	370c      	adds	r7, #12
 800492a:	46bd      	mov	sp, r7
 800492c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004930:	4770      	bx	lr

08004932 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004932:	b480      	push	{r7}
 8004934:	b083      	sub	sp, #12
 8004936:	af00      	add	r7, sp, #0
 8004938:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800493a:	bf00      	nop
 800493c:	370c      	adds	r7, #12
 800493e:	46bd      	mov	sp, r7
 8004940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004944:	4770      	bx	lr
	...

08004948 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004948:	b480      	push	{r7}
 800494a:	b085      	sub	sp, #20
 800494c:	af00      	add	r7, sp, #0
 800494e:	6078      	str	r0, [r7, #4]
 8004950:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	4a3a      	ldr	r2, [pc, #232]	@ (8004a44 <TIM_Base_SetConfig+0xfc>)
 800495c:	4293      	cmp	r3, r2
 800495e:	d00f      	beq.n	8004980 <TIM_Base_SetConfig+0x38>
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004966:	d00b      	beq.n	8004980 <TIM_Base_SetConfig+0x38>
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	4a37      	ldr	r2, [pc, #220]	@ (8004a48 <TIM_Base_SetConfig+0x100>)
 800496c:	4293      	cmp	r3, r2
 800496e:	d007      	beq.n	8004980 <TIM_Base_SetConfig+0x38>
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	4a36      	ldr	r2, [pc, #216]	@ (8004a4c <TIM_Base_SetConfig+0x104>)
 8004974:	4293      	cmp	r3, r2
 8004976:	d003      	beq.n	8004980 <TIM_Base_SetConfig+0x38>
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	4a35      	ldr	r2, [pc, #212]	@ (8004a50 <TIM_Base_SetConfig+0x108>)
 800497c:	4293      	cmp	r3, r2
 800497e:	d108      	bne.n	8004992 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004980:	68fb      	ldr	r3, [r7, #12]
 8004982:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004986:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004988:	683b      	ldr	r3, [r7, #0]
 800498a:	685b      	ldr	r3, [r3, #4]
 800498c:	68fa      	ldr	r2, [r7, #12]
 800498e:	4313      	orrs	r3, r2
 8004990:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	4a2b      	ldr	r2, [pc, #172]	@ (8004a44 <TIM_Base_SetConfig+0xfc>)
 8004996:	4293      	cmp	r3, r2
 8004998:	d01b      	beq.n	80049d2 <TIM_Base_SetConfig+0x8a>
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80049a0:	d017      	beq.n	80049d2 <TIM_Base_SetConfig+0x8a>
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	4a28      	ldr	r2, [pc, #160]	@ (8004a48 <TIM_Base_SetConfig+0x100>)
 80049a6:	4293      	cmp	r3, r2
 80049a8:	d013      	beq.n	80049d2 <TIM_Base_SetConfig+0x8a>
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	4a27      	ldr	r2, [pc, #156]	@ (8004a4c <TIM_Base_SetConfig+0x104>)
 80049ae:	4293      	cmp	r3, r2
 80049b0:	d00f      	beq.n	80049d2 <TIM_Base_SetConfig+0x8a>
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	4a26      	ldr	r2, [pc, #152]	@ (8004a50 <TIM_Base_SetConfig+0x108>)
 80049b6:	4293      	cmp	r3, r2
 80049b8:	d00b      	beq.n	80049d2 <TIM_Base_SetConfig+0x8a>
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	4a25      	ldr	r2, [pc, #148]	@ (8004a54 <TIM_Base_SetConfig+0x10c>)
 80049be:	4293      	cmp	r3, r2
 80049c0:	d007      	beq.n	80049d2 <TIM_Base_SetConfig+0x8a>
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	4a24      	ldr	r2, [pc, #144]	@ (8004a58 <TIM_Base_SetConfig+0x110>)
 80049c6:	4293      	cmp	r3, r2
 80049c8:	d003      	beq.n	80049d2 <TIM_Base_SetConfig+0x8a>
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	4a23      	ldr	r2, [pc, #140]	@ (8004a5c <TIM_Base_SetConfig+0x114>)
 80049ce:	4293      	cmp	r3, r2
 80049d0:	d108      	bne.n	80049e4 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80049d2:	68fb      	ldr	r3, [r7, #12]
 80049d4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80049d8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80049da:	683b      	ldr	r3, [r7, #0]
 80049dc:	68db      	ldr	r3, [r3, #12]
 80049de:	68fa      	ldr	r2, [r7, #12]
 80049e0:	4313      	orrs	r3, r2
 80049e2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80049e4:	68fb      	ldr	r3, [r7, #12]
 80049e6:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80049ea:	683b      	ldr	r3, [r7, #0]
 80049ec:	695b      	ldr	r3, [r3, #20]
 80049ee:	4313      	orrs	r3, r2
 80049f0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	68fa      	ldr	r2, [r7, #12]
 80049f6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80049f8:	683b      	ldr	r3, [r7, #0]
 80049fa:	689a      	ldr	r2, [r3, #8]
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004a00:	683b      	ldr	r3, [r7, #0]
 8004a02:	681a      	ldr	r2, [r3, #0]
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	4a0e      	ldr	r2, [pc, #56]	@ (8004a44 <TIM_Base_SetConfig+0xfc>)
 8004a0c:	4293      	cmp	r3, r2
 8004a0e:	d103      	bne.n	8004a18 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004a10:	683b      	ldr	r3, [r7, #0]
 8004a12:	691a      	ldr	r2, [r3, #16]
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	2201      	movs	r2, #1
 8004a1c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	691b      	ldr	r3, [r3, #16]
 8004a22:	f003 0301 	and.w	r3, r3, #1
 8004a26:	2b01      	cmp	r3, #1
 8004a28:	d105      	bne.n	8004a36 <TIM_Base_SetConfig+0xee>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	691b      	ldr	r3, [r3, #16]
 8004a2e:	f023 0201 	bic.w	r2, r3, #1
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	611a      	str	r2, [r3, #16]
  }
}
 8004a36:	bf00      	nop
 8004a38:	3714      	adds	r7, #20
 8004a3a:	46bd      	mov	sp, r7
 8004a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a40:	4770      	bx	lr
 8004a42:	bf00      	nop
 8004a44:	40010000 	.word	0x40010000
 8004a48:	40000400 	.word	0x40000400
 8004a4c:	40000800 	.word	0x40000800
 8004a50:	40000c00 	.word	0x40000c00
 8004a54:	40014000 	.word	0x40014000
 8004a58:	40014400 	.word	0x40014400
 8004a5c:	40014800 	.word	0x40014800

08004a60 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004a60:	b480      	push	{r7}
 8004a62:	b087      	sub	sp, #28
 8004a64:	af00      	add	r7, sp, #0
 8004a66:	6078      	str	r0, [r7, #4]
 8004a68:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	6a1b      	ldr	r3, [r3, #32]
 8004a6e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	6a1b      	ldr	r3, [r3, #32]
 8004a74:	f023 0201 	bic.w	r2, r3, #1
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	685b      	ldr	r3, [r3, #4]
 8004a80:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	699b      	ldr	r3, [r3, #24]
 8004a86:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004a88:	68fb      	ldr	r3, [r7, #12]
 8004a8a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004a8e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004a90:	68fb      	ldr	r3, [r7, #12]
 8004a92:	f023 0303 	bic.w	r3, r3, #3
 8004a96:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004a98:	683b      	ldr	r3, [r7, #0]
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	68fa      	ldr	r2, [r7, #12]
 8004a9e:	4313      	orrs	r3, r2
 8004aa0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004aa2:	697b      	ldr	r3, [r7, #20]
 8004aa4:	f023 0302 	bic.w	r3, r3, #2
 8004aa8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004aaa:	683b      	ldr	r3, [r7, #0]
 8004aac:	689b      	ldr	r3, [r3, #8]
 8004aae:	697a      	ldr	r2, [r7, #20]
 8004ab0:	4313      	orrs	r3, r2
 8004ab2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	4a1c      	ldr	r2, [pc, #112]	@ (8004b28 <TIM_OC1_SetConfig+0xc8>)
 8004ab8:	4293      	cmp	r3, r2
 8004aba:	d10c      	bne.n	8004ad6 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004abc:	697b      	ldr	r3, [r7, #20]
 8004abe:	f023 0308 	bic.w	r3, r3, #8
 8004ac2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004ac4:	683b      	ldr	r3, [r7, #0]
 8004ac6:	68db      	ldr	r3, [r3, #12]
 8004ac8:	697a      	ldr	r2, [r7, #20]
 8004aca:	4313      	orrs	r3, r2
 8004acc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004ace:	697b      	ldr	r3, [r7, #20]
 8004ad0:	f023 0304 	bic.w	r3, r3, #4
 8004ad4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	4a13      	ldr	r2, [pc, #76]	@ (8004b28 <TIM_OC1_SetConfig+0xc8>)
 8004ada:	4293      	cmp	r3, r2
 8004adc:	d111      	bne.n	8004b02 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004ade:	693b      	ldr	r3, [r7, #16]
 8004ae0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004ae4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004ae6:	693b      	ldr	r3, [r7, #16]
 8004ae8:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8004aec:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004aee:	683b      	ldr	r3, [r7, #0]
 8004af0:	695b      	ldr	r3, [r3, #20]
 8004af2:	693a      	ldr	r2, [r7, #16]
 8004af4:	4313      	orrs	r3, r2
 8004af6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004af8:	683b      	ldr	r3, [r7, #0]
 8004afa:	699b      	ldr	r3, [r3, #24]
 8004afc:	693a      	ldr	r2, [r7, #16]
 8004afe:	4313      	orrs	r3, r2
 8004b00:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	693a      	ldr	r2, [r7, #16]
 8004b06:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	68fa      	ldr	r2, [r7, #12]
 8004b0c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004b0e:	683b      	ldr	r3, [r7, #0]
 8004b10:	685a      	ldr	r2, [r3, #4]
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	697a      	ldr	r2, [r7, #20]
 8004b1a:	621a      	str	r2, [r3, #32]
}
 8004b1c:	bf00      	nop
 8004b1e:	371c      	adds	r7, #28
 8004b20:	46bd      	mov	sp, r7
 8004b22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b26:	4770      	bx	lr
 8004b28:	40010000 	.word	0x40010000

08004b2c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004b2c:	b480      	push	{r7}
 8004b2e:	b087      	sub	sp, #28
 8004b30:	af00      	add	r7, sp, #0
 8004b32:	6078      	str	r0, [r7, #4]
 8004b34:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	6a1b      	ldr	r3, [r3, #32]
 8004b3a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	6a1b      	ldr	r3, [r3, #32]
 8004b40:	f023 0210 	bic.w	r2, r3, #16
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	685b      	ldr	r3, [r3, #4]
 8004b4c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	699b      	ldr	r3, [r3, #24]
 8004b52:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004b54:	68fb      	ldr	r3, [r7, #12]
 8004b56:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004b5a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004b5c:	68fb      	ldr	r3, [r7, #12]
 8004b5e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004b62:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004b64:	683b      	ldr	r3, [r7, #0]
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	021b      	lsls	r3, r3, #8
 8004b6a:	68fa      	ldr	r2, [r7, #12]
 8004b6c:	4313      	orrs	r3, r2
 8004b6e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004b70:	697b      	ldr	r3, [r7, #20]
 8004b72:	f023 0320 	bic.w	r3, r3, #32
 8004b76:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004b78:	683b      	ldr	r3, [r7, #0]
 8004b7a:	689b      	ldr	r3, [r3, #8]
 8004b7c:	011b      	lsls	r3, r3, #4
 8004b7e:	697a      	ldr	r2, [r7, #20]
 8004b80:	4313      	orrs	r3, r2
 8004b82:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	4a1e      	ldr	r2, [pc, #120]	@ (8004c00 <TIM_OC2_SetConfig+0xd4>)
 8004b88:	4293      	cmp	r3, r2
 8004b8a:	d10d      	bne.n	8004ba8 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004b8c:	697b      	ldr	r3, [r7, #20]
 8004b8e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004b92:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004b94:	683b      	ldr	r3, [r7, #0]
 8004b96:	68db      	ldr	r3, [r3, #12]
 8004b98:	011b      	lsls	r3, r3, #4
 8004b9a:	697a      	ldr	r2, [r7, #20]
 8004b9c:	4313      	orrs	r3, r2
 8004b9e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004ba0:	697b      	ldr	r3, [r7, #20]
 8004ba2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004ba6:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	4a15      	ldr	r2, [pc, #84]	@ (8004c00 <TIM_OC2_SetConfig+0xd4>)
 8004bac:	4293      	cmp	r3, r2
 8004bae:	d113      	bne.n	8004bd8 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004bb0:	693b      	ldr	r3, [r7, #16]
 8004bb2:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8004bb6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004bb8:	693b      	ldr	r3, [r7, #16]
 8004bba:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8004bbe:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004bc0:	683b      	ldr	r3, [r7, #0]
 8004bc2:	695b      	ldr	r3, [r3, #20]
 8004bc4:	009b      	lsls	r3, r3, #2
 8004bc6:	693a      	ldr	r2, [r7, #16]
 8004bc8:	4313      	orrs	r3, r2
 8004bca:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004bcc:	683b      	ldr	r3, [r7, #0]
 8004bce:	699b      	ldr	r3, [r3, #24]
 8004bd0:	009b      	lsls	r3, r3, #2
 8004bd2:	693a      	ldr	r2, [r7, #16]
 8004bd4:	4313      	orrs	r3, r2
 8004bd6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	693a      	ldr	r2, [r7, #16]
 8004bdc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	68fa      	ldr	r2, [r7, #12]
 8004be2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004be4:	683b      	ldr	r3, [r7, #0]
 8004be6:	685a      	ldr	r2, [r3, #4]
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	697a      	ldr	r2, [r7, #20]
 8004bf0:	621a      	str	r2, [r3, #32]
}
 8004bf2:	bf00      	nop
 8004bf4:	371c      	adds	r7, #28
 8004bf6:	46bd      	mov	sp, r7
 8004bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bfc:	4770      	bx	lr
 8004bfe:	bf00      	nop
 8004c00:	40010000 	.word	0x40010000

08004c04 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004c04:	b480      	push	{r7}
 8004c06:	b087      	sub	sp, #28
 8004c08:	af00      	add	r7, sp, #0
 8004c0a:	6078      	str	r0, [r7, #4]
 8004c0c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	6a1b      	ldr	r3, [r3, #32]
 8004c12:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	6a1b      	ldr	r3, [r3, #32]
 8004c18:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	685b      	ldr	r3, [r3, #4]
 8004c24:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	69db      	ldr	r3, [r3, #28]
 8004c2a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004c2c:	68fb      	ldr	r3, [r7, #12]
 8004c2e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004c32:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004c34:	68fb      	ldr	r3, [r7, #12]
 8004c36:	f023 0303 	bic.w	r3, r3, #3
 8004c3a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004c3c:	683b      	ldr	r3, [r7, #0]
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	68fa      	ldr	r2, [r7, #12]
 8004c42:	4313      	orrs	r3, r2
 8004c44:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004c46:	697b      	ldr	r3, [r7, #20]
 8004c48:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8004c4c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004c4e:	683b      	ldr	r3, [r7, #0]
 8004c50:	689b      	ldr	r3, [r3, #8]
 8004c52:	021b      	lsls	r3, r3, #8
 8004c54:	697a      	ldr	r2, [r7, #20]
 8004c56:	4313      	orrs	r3, r2
 8004c58:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	4a1d      	ldr	r2, [pc, #116]	@ (8004cd4 <TIM_OC3_SetConfig+0xd0>)
 8004c5e:	4293      	cmp	r3, r2
 8004c60:	d10d      	bne.n	8004c7e <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004c62:	697b      	ldr	r3, [r7, #20]
 8004c64:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8004c68:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004c6a:	683b      	ldr	r3, [r7, #0]
 8004c6c:	68db      	ldr	r3, [r3, #12]
 8004c6e:	021b      	lsls	r3, r3, #8
 8004c70:	697a      	ldr	r2, [r7, #20]
 8004c72:	4313      	orrs	r3, r2
 8004c74:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004c76:	697b      	ldr	r3, [r7, #20]
 8004c78:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8004c7c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	4a14      	ldr	r2, [pc, #80]	@ (8004cd4 <TIM_OC3_SetConfig+0xd0>)
 8004c82:	4293      	cmp	r3, r2
 8004c84:	d113      	bne.n	8004cae <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004c86:	693b      	ldr	r3, [r7, #16]
 8004c88:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8004c8c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004c8e:	693b      	ldr	r3, [r7, #16]
 8004c90:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8004c94:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004c96:	683b      	ldr	r3, [r7, #0]
 8004c98:	695b      	ldr	r3, [r3, #20]
 8004c9a:	011b      	lsls	r3, r3, #4
 8004c9c:	693a      	ldr	r2, [r7, #16]
 8004c9e:	4313      	orrs	r3, r2
 8004ca0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004ca2:	683b      	ldr	r3, [r7, #0]
 8004ca4:	699b      	ldr	r3, [r3, #24]
 8004ca6:	011b      	lsls	r3, r3, #4
 8004ca8:	693a      	ldr	r2, [r7, #16]
 8004caa:	4313      	orrs	r3, r2
 8004cac:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	693a      	ldr	r2, [r7, #16]
 8004cb2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	68fa      	ldr	r2, [r7, #12]
 8004cb8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004cba:	683b      	ldr	r3, [r7, #0]
 8004cbc:	685a      	ldr	r2, [r3, #4]
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	697a      	ldr	r2, [r7, #20]
 8004cc6:	621a      	str	r2, [r3, #32]
}
 8004cc8:	bf00      	nop
 8004cca:	371c      	adds	r7, #28
 8004ccc:	46bd      	mov	sp, r7
 8004cce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cd2:	4770      	bx	lr
 8004cd4:	40010000 	.word	0x40010000

08004cd8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004cd8:	b480      	push	{r7}
 8004cda:	b087      	sub	sp, #28
 8004cdc:	af00      	add	r7, sp, #0
 8004cde:	6078      	str	r0, [r7, #4]
 8004ce0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	6a1b      	ldr	r3, [r3, #32]
 8004ce6:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	6a1b      	ldr	r3, [r3, #32]
 8004cec:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	685b      	ldr	r3, [r3, #4]
 8004cf8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	69db      	ldr	r3, [r3, #28]
 8004cfe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004d00:	68fb      	ldr	r3, [r7, #12]
 8004d02:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004d06:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004d08:	68fb      	ldr	r3, [r7, #12]
 8004d0a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004d0e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004d10:	683b      	ldr	r3, [r7, #0]
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	021b      	lsls	r3, r3, #8
 8004d16:	68fa      	ldr	r2, [r7, #12]
 8004d18:	4313      	orrs	r3, r2
 8004d1a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004d1c:	693b      	ldr	r3, [r7, #16]
 8004d1e:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8004d22:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004d24:	683b      	ldr	r3, [r7, #0]
 8004d26:	689b      	ldr	r3, [r3, #8]
 8004d28:	031b      	lsls	r3, r3, #12
 8004d2a:	693a      	ldr	r2, [r7, #16]
 8004d2c:	4313      	orrs	r3, r2
 8004d2e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	4a10      	ldr	r2, [pc, #64]	@ (8004d74 <TIM_OC4_SetConfig+0x9c>)
 8004d34:	4293      	cmp	r3, r2
 8004d36:	d109      	bne.n	8004d4c <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004d38:	697b      	ldr	r3, [r7, #20]
 8004d3a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8004d3e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004d40:	683b      	ldr	r3, [r7, #0]
 8004d42:	695b      	ldr	r3, [r3, #20]
 8004d44:	019b      	lsls	r3, r3, #6
 8004d46:	697a      	ldr	r2, [r7, #20]
 8004d48:	4313      	orrs	r3, r2
 8004d4a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	697a      	ldr	r2, [r7, #20]
 8004d50:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	68fa      	ldr	r2, [r7, #12]
 8004d56:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004d58:	683b      	ldr	r3, [r7, #0]
 8004d5a:	685a      	ldr	r2, [r3, #4]
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	693a      	ldr	r2, [r7, #16]
 8004d64:	621a      	str	r2, [r3, #32]
}
 8004d66:	bf00      	nop
 8004d68:	371c      	adds	r7, #28
 8004d6a:	46bd      	mov	sp, r7
 8004d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d70:	4770      	bx	lr
 8004d72:	bf00      	nop
 8004d74:	40010000 	.word	0x40010000

08004d78 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004d78:	b480      	push	{r7}
 8004d7a:	b087      	sub	sp, #28
 8004d7c:	af00      	add	r7, sp, #0
 8004d7e:	60f8      	str	r0, [r7, #12]
 8004d80:	60b9      	str	r1, [r7, #8]
 8004d82:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004d84:	68fb      	ldr	r3, [r7, #12]
 8004d86:	6a1b      	ldr	r3, [r3, #32]
 8004d88:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004d8a:	68fb      	ldr	r3, [r7, #12]
 8004d8c:	6a1b      	ldr	r3, [r3, #32]
 8004d8e:	f023 0201 	bic.w	r2, r3, #1
 8004d92:	68fb      	ldr	r3, [r7, #12]
 8004d94:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004d96:	68fb      	ldr	r3, [r7, #12]
 8004d98:	699b      	ldr	r3, [r3, #24]
 8004d9a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004d9c:	693b      	ldr	r3, [r7, #16]
 8004d9e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004da2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	011b      	lsls	r3, r3, #4
 8004da8:	693a      	ldr	r2, [r7, #16]
 8004daa:	4313      	orrs	r3, r2
 8004dac:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004dae:	697b      	ldr	r3, [r7, #20]
 8004db0:	f023 030a 	bic.w	r3, r3, #10
 8004db4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004db6:	697a      	ldr	r2, [r7, #20]
 8004db8:	68bb      	ldr	r3, [r7, #8]
 8004dba:	4313      	orrs	r3, r2
 8004dbc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004dbe:	68fb      	ldr	r3, [r7, #12]
 8004dc0:	693a      	ldr	r2, [r7, #16]
 8004dc2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004dc4:	68fb      	ldr	r3, [r7, #12]
 8004dc6:	697a      	ldr	r2, [r7, #20]
 8004dc8:	621a      	str	r2, [r3, #32]
}
 8004dca:	bf00      	nop
 8004dcc:	371c      	adds	r7, #28
 8004dce:	46bd      	mov	sp, r7
 8004dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dd4:	4770      	bx	lr

08004dd6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004dd6:	b480      	push	{r7}
 8004dd8:	b087      	sub	sp, #28
 8004dda:	af00      	add	r7, sp, #0
 8004ddc:	60f8      	str	r0, [r7, #12]
 8004dde:	60b9      	str	r1, [r7, #8]
 8004de0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8004de2:	68fb      	ldr	r3, [r7, #12]
 8004de4:	6a1b      	ldr	r3, [r3, #32]
 8004de6:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004de8:	68fb      	ldr	r3, [r7, #12]
 8004dea:	6a1b      	ldr	r3, [r3, #32]
 8004dec:	f023 0210 	bic.w	r2, r3, #16
 8004df0:	68fb      	ldr	r3, [r7, #12]
 8004df2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004df4:	68fb      	ldr	r3, [r7, #12]
 8004df6:	699b      	ldr	r3, [r3, #24]
 8004df8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004dfa:	693b      	ldr	r3, [r7, #16]
 8004dfc:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8004e00:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	031b      	lsls	r3, r3, #12
 8004e06:	693a      	ldr	r2, [r7, #16]
 8004e08:	4313      	orrs	r3, r2
 8004e0a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004e0c:	697b      	ldr	r3, [r7, #20]
 8004e0e:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8004e12:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004e14:	68bb      	ldr	r3, [r7, #8]
 8004e16:	011b      	lsls	r3, r3, #4
 8004e18:	697a      	ldr	r2, [r7, #20]
 8004e1a:	4313      	orrs	r3, r2
 8004e1c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004e1e:	68fb      	ldr	r3, [r7, #12]
 8004e20:	693a      	ldr	r2, [r7, #16]
 8004e22:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004e24:	68fb      	ldr	r3, [r7, #12]
 8004e26:	697a      	ldr	r2, [r7, #20]
 8004e28:	621a      	str	r2, [r3, #32]
}
 8004e2a:	bf00      	nop
 8004e2c:	371c      	adds	r7, #28
 8004e2e:	46bd      	mov	sp, r7
 8004e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e34:	4770      	bx	lr

08004e36 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004e36:	b480      	push	{r7}
 8004e38:	b085      	sub	sp, #20
 8004e3a:	af00      	add	r7, sp, #0
 8004e3c:	6078      	str	r0, [r7, #4]
 8004e3e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	689b      	ldr	r3, [r3, #8]
 8004e44:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004e46:	68fb      	ldr	r3, [r7, #12]
 8004e48:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004e4c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004e4e:	683a      	ldr	r2, [r7, #0]
 8004e50:	68fb      	ldr	r3, [r7, #12]
 8004e52:	4313      	orrs	r3, r2
 8004e54:	f043 0307 	orr.w	r3, r3, #7
 8004e58:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	68fa      	ldr	r2, [r7, #12]
 8004e5e:	609a      	str	r2, [r3, #8]
}
 8004e60:	bf00      	nop
 8004e62:	3714      	adds	r7, #20
 8004e64:	46bd      	mov	sp, r7
 8004e66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e6a:	4770      	bx	lr

08004e6c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004e6c:	b480      	push	{r7}
 8004e6e:	b087      	sub	sp, #28
 8004e70:	af00      	add	r7, sp, #0
 8004e72:	60f8      	str	r0, [r7, #12]
 8004e74:	60b9      	str	r1, [r7, #8]
 8004e76:	607a      	str	r2, [r7, #4]
 8004e78:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004e7a:	68fb      	ldr	r3, [r7, #12]
 8004e7c:	689b      	ldr	r3, [r3, #8]
 8004e7e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004e80:	697b      	ldr	r3, [r7, #20]
 8004e82:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8004e86:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004e88:	683b      	ldr	r3, [r7, #0]
 8004e8a:	021a      	lsls	r2, r3, #8
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	431a      	orrs	r2, r3
 8004e90:	68bb      	ldr	r3, [r7, #8]
 8004e92:	4313      	orrs	r3, r2
 8004e94:	697a      	ldr	r2, [r7, #20]
 8004e96:	4313      	orrs	r3, r2
 8004e98:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004e9a:	68fb      	ldr	r3, [r7, #12]
 8004e9c:	697a      	ldr	r2, [r7, #20]
 8004e9e:	609a      	str	r2, [r3, #8]
}
 8004ea0:	bf00      	nop
 8004ea2:	371c      	adds	r7, #28
 8004ea4:	46bd      	mov	sp, r7
 8004ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eaa:	4770      	bx	lr

08004eac <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004eac:	b480      	push	{r7}
 8004eae:	b087      	sub	sp, #28
 8004eb0:	af00      	add	r7, sp, #0
 8004eb2:	60f8      	str	r0, [r7, #12]
 8004eb4:	60b9      	str	r1, [r7, #8]
 8004eb6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004eb8:	68bb      	ldr	r3, [r7, #8]
 8004eba:	f003 031f 	and.w	r3, r3, #31
 8004ebe:	2201      	movs	r2, #1
 8004ec0:	fa02 f303 	lsl.w	r3, r2, r3
 8004ec4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004ec6:	68fb      	ldr	r3, [r7, #12]
 8004ec8:	6a1a      	ldr	r2, [r3, #32]
 8004eca:	697b      	ldr	r3, [r7, #20]
 8004ecc:	43db      	mvns	r3, r3
 8004ece:	401a      	ands	r2, r3
 8004ed0:	68fb      	ldr	r3, [r7, #12]
 8004ed2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004ed4:	68fb      	ldr	r3, [r7, #12]
 8004ed6:	6a1a      	ldr	r2, [r3, #32]
 8004ed8:	68bb      	ldr	r3, [r7, #8]
 8004eda:	f003 031f 	and.w	r3, r3, #31
 8004ede:	6879      	ldr	r1, [r7, #4]
 8004ee0:	fa01 f303 	lsl.w	r3, r1, r3
 8004ee4:	431a      	orrs	r2, r3
 8004ee6:	68fb      	ldr	r3, [r7, #12]
 8004ee8:	621a      	str	r2, [r3, #32]
}
 8004eea:	bf00      	nop
 8004eec:	371c      	adds	r7, #28
 8004eee:	46bd      	mov	sp, r7
 8004ef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ef4:	4770      	bx	lr
	...

08004ef8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004ef8:	b480      	push	{r7}
 8004efa:	b085      	sub	sp, #20
 8004efc:	af00      	add	r7, sp, #0
 8004efe:	6078      	str	r0, [r7, #4]
 8004f00:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004f08:	2b01      	cmp	r3, #1
 8004f0a:	d101      	bne.n	8004f10 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004f0c:	2302      	movs	r3, #2
 8004f0e:	e050      	b.n	8004fb2 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	2201      	movs	r2, #1
 8004f14:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	2202      	movs	r2, #2
 8004f1c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	685b      	ldr	r3, [r3, #4]
 8004f26:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	689b      	ldr	r3, [r3, #8]
 8004f2e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004f30:	68fb      	ldr	r3, [r7, #12]
 8004f32:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004f36:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004f38:	683b      	ldr	r3, [r7, #0]
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	68fa      	ldr	r2, [r7, #12]
 8004f3e:	4313      	orrs	r3, r2
 8004f40:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	68fa      	ldr	r2, [r7, #12]
 8004f48:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	681b      	ldr	r3, [r3, #0]
 8004f4e:	4a1c      	ldr	r2, [pc, #112]	@ (8004fc0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8004f50:	4293      	cmp	r3, r2
 8004f52:	d018      	beq.n	8004f86 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	681b      	ldr	r3, [r3, #0]
 8004f58:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004f5c:	d013      	beq.n	8004f86 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	681b      	ldr	r3, [r3, #0]
 8004f62:	4a18      	ldr	r2, [pc, #96]	@ (8004fc4 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8004f64:	4293      	cmp	r3, r2
 8004f66:	d00e      	beq.n	8004f86 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	4a16      	ldr	r2, [pc, #88]	@ (8004fc8 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8004f6e:	4293      	cmp	r3, r2
 8004f70:	d009      	beq.n	8004f86 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	681b      	ldr	r3, [r3, #0]
 8004f76:	4a15      	ldr	r2, [pc, #84]	@ (8004fcc <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8004f78:	4293      	cmp	r3, r2
 8004f7a:	d004      	beq.n	8004f86 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	681b      	ldr	r3, [r3, #0]
 8004f80:	4a13      	ldr	r2, [pc, #76]	@ (8004fd0 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8004f82:	4293      	cmp	r3, r2
 8004f84:	d10c      	bne.n	8004fa0 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004f86:	68bb      	ldr	r3, [r7, #8]
 8004f88:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004f8c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004f8e:	683b      	ldr	r3, [r7, #0]
 8004f90:	685b      	ldr	r3, [r3, #4]
 8004f92:	68ba      	ldr	r2, [r7, #8]
 8004f94:	4313      	orrs	r3, r2
 8004f96:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	681b      	ldr	r3, [r3, #0]
 8004f9c:	68ba      	ldr	r2, [r7, #8]
 8004f9e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	2201      	movs	r2, #1
 8004fa4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	2200      	movs	r2, #0
 8004fac:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8004fb0:	2300      	movs	r3, #0
}
 8004fb2:	4618      	mov	r0, r3
 8004fb4:	3714      	adds	r7, #20
 8004fb6:	46bd      	mov	sp, r7
 8004fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fbc:	4770      	bx	lr
 8004fbe:	bf00      	nop
 8004fc0:	40010000 	.word	0x40010000
 8004fc4:	40000400 	.word	0x40000400
 8004fc8:	40000800 	.word	0x40000800
 8004fcc:	40000c00 	.word	0x40000c00
 8004fd0:	40014000 	.word	0x40014000

08004fd4 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004fd4:	b480      	push	{r7}
 8004fd6:	b083      	sub	sp, #12
 8004fd8:	af00      	add	r7, sp, #0
 8004fda:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004fdc:	bf00      	nop
 8004fde:	370c      	adds	r7, #12
 8004fe0:	46bd      	mov	sp, r7
 8004fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fe6:	4770      	bx	lr

08004fe8 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004fe8:	b480      	push	{r7}
 8004fea:	b083      	sub	sp, #12
 8004fec:	af00      	add	r7, sp, #0
 8004fee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004ff0:	bf00      	nop
 8004ff2:	370c      	adds	r7, #12
 8004ff4:	46bd      	mov	sp, r7
 8004ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ffa:	4770      	bx	lr

08004ffc <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004ffc:	b580      	push	{r7, lr}
 8004ffe:	b082      	sub	sp, #8
 8005000:	af00      	add	r7, sp, #0
 8005002:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	2b00      	cmp	r3, #0
 8005008:	d101      	bne.n	800500e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800500a:	2301      	movs	r3, #1
 800500c:	e042      	b.n	8005094 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005014:	b2db      	uxtb	r3, r3
 8005016:	2b00      	cmp	r3, #0
 8005018:	d106      	bne.n	8005028 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	2200      	movs	r2, #0
 800501e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005022:	6878      	ldr	r0, [r7, #4]
 8005024:	f7fd f92c 	bl	8002280 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	2224      	movs	r2, #36	@ 0x24
 800502c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	681b      	ldr	r3, [r3, #0]
 8005034:	68da      	ldr	r2, [r3, #12]
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	681b      	ldr	r3, [r3, #0]
 800503a:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800503e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005040:	6878      	ldr	r0, [r7, #4]
 8005042:	f000 ffc9 	bl	8005fd8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	691a      	ldr	r2, [r3, #16]
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	681b      	ldr	r3, [r3, #0]
 8005050:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8005054:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	681b      	ldr	r3, [r3, #0]
 800505a:	695a      	ldr	r2, [r3, #20]
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8005064:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	681b      	ldr	r3, [r3, #0]
 800506a:	68da      	ldr	r2, [r3, #12]
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	681b      	ldr	r3, [r3, #0]
 8005070:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8005074:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	2200      	movs	r2, #0
 800507a:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	2220      	movs	r2, #32
 8005080:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	2220      	movs	r2, #32
 8005088:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	2200      	movs	r2, #0
 8005090:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8005092:	2300      	movs	r3, #0
}
 8005094:	4618      	mov	r0, r3
 8005096:	3708      	adds	r7, #8
 8005098:	46bd      	mov	sp, r7
 800509a:	bd80      	pop	{r7, pc}

0800509c <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 800509c:	b580      	push	{r7, lr}
 800509e:	b08c      	sub	sp, #48	@ 0x30
 80050a0:	af00      	add	r7, sp, #0
 80050a2:	60f8      	str	r0, [r7, #12]
 80050a4:	60b9      	str	r1, [r7, #8]
 80050a6:	4613      	mov	r3, r2
 80050a8:	80fb      	strh	r3, [r7, #6]
  const uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80050aa:	68fb      	ldr	r3, [r7, #12]
 80050ac:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80050b0:	b2db      	uxtb	r3, r3
 80050b2:	2b20      	cmp	r3, #32
 80050b4:	d156      	bne.n	8005164 <HAL_UART_Transmit_DMA+0xc8>
  {
    if ((pData == NULL) || (Size == 0U))
 80050b6:	68bb      	ldr	r3, [r7, #8]
 80050b8:	2b00      	cmp	r3, #0
 80050ba:	d002      	beq.n	80050c2 <HAL_UART_Transmit_DMA+0x26>
 80050bc:	88fb      	ldrh	r3, [r7, #6]
 80050be:	2b00      	cmp	r3, #0
 80050c0:	d101      	bne.n	80050c6 <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 80050c2:	2301      	movs	r3, #1
 80050c4:	e04f      	b.n	8005166 <HAL_UART_Transmit_DMA+0xca>
    }

    huart->pTxBuffPtr = pData;
 80050c6:	68ba      	ldr	r2, [r7, #8]
 80050c8:	68fb      	ldr	r3, [r7, #12]
 80050ca:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 80050cc:	68fb      	ldr	r3, [r7, #12]
 80050ce:	88fa      	ldrh	r2, [r7, #6]
 80050d0:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 80050d2:	68fb      	ldr	r3, [r7, #12]
 80050d4:	88fa      	ldrh	r2, [r7, #6]
 80050d6:	84da      	strh	r2, [r3, #38]	@ 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80050d8:	68fb      	ldr	r3, [r7, #12]
 80050da:	2200      	movs	r2, #0
 80050dc:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80050de:	68fb      	ldr	r3, [r7, #12]
 80050e0:	2221      	movs	r2, #33	@ 0x21
 80050e2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 80050e6:	68fb      	ldr	r3, [r7, #12]
 80050e8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80050ea:	4a21      	ldr	r2, [pc, #132]	@ (8005170 <HAL_UART_Transmit_DMA+0xd4>)
 80050ec:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 80050ee:	68fb      	ldr	r3, [r7, #12]
 80050f0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80050f2:	4a20      	ldr	r2, [pc, #128]	@ (8005174 <HAL_UART_Transmit_DMA+0xd8>)
 80050f4:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 80050f6:	68fb      	ldr	r3, [r7, #12]
 80050f8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80050fa:	4a1f      	ldr	r2, [pc, #124]	@ (8005178 <HAL_UART_Transmit_DMA+0xdc>)
 80050fc:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 80050fe:	68fb      	ldr	r3, [r7, #12]
 8005100:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005102:	2200      	movs	r2, #0
 8005104:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Enable the UART transmit DMA stream */
    tmp = (const uint32_t *)&pData;
 8005106:	f107 0308 	add.w	r3, r7, #8
 800510a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_DMA_Start_IT(huart->hdmatx, *(const uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 800510c:	68fb      	ldr	r3, [r7, #12]
 800510e:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 8005110:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005112:	6819      	ldr	r1, [r3, #0]
 8005114:	68fb      	ldr	r3, [r7, #12]
 8005116:	681b      	ldr	r3, [r3, #0]
 8005118:	3304      	adds	r3, #4
 800511a:	461a      	mov	r2, r3
 800511c:	88fb      	ldrh	r3, [r7, #6]
 800511e:	f7fd fd9f 	bl	8002c60 <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 8005122:	68fb      	ldr	r3, [r7, #12]
 8005124:	681b      	ldr	r3, [r3, #0]
 8005126:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800512a:	601a      	str	r2, [r3, #0]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800512c:	68fb      	ldr	r3, [r7, #12]
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	3314      	adds	r3, #20
 8005132:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005134:	69bb      	ldr	r3, [r7, #24]
 8005136:	e853 3f00 	ldrex	r3, [r3]
 800513a:	617b      	str	r3, [r7, #20]
   return(result);
 800513c:	697b      	ldr	r3, [r7, #20]
 800513e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005142:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005144:	68fb      	ldr	r3, [r7, #12]
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	3314      	adds	r3, #20
 800514a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800514c:	627a      	str	r2, [r7, #36]	@ 0x24
 800514e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005150:	6a39      	ldr	r1, [r7, #32]
 8005152:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005154:	e841 2300 	strex	r3, r2, [r1]
 8005158:	61fb      	str	r3, [r7, #28]
   return(result);
 800515a:	69fb      	ldr	r3, [r7, #28]
 800515c:	2b00      	cmp	r3, #0
 800515e:	d1e5      	bne.n	800512c <HAL_UART_Transmit_DMA+0x90>

    return HAL_OK;
 8005160:	2300      	movs	r3, #0
 8005162:	e000      	b.n	8005166 <HAL_UART_Transmit_DMA+0xca>
  }
  else
  {
    return HAL_BUSY;
 8005164:	2302      	movs	r3, #2
  }
}
 8005166:	4618      	mov	r0, r3
 8005168:	3730      	adds	r7, #48	@ 0x30
 800516a:	46bd      	mov	sp, r7
 800516c:	bd80      	pop	{r7, pc}
 800516e:	bf00      	nop
 8005170:	08005865 	.word	0x08005865
 8005174:	080058ff 	.word	0x080058ff
 8005178:	08005a83 	.word	0x08005a83

0800517c <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800517c:	b580      	push	{r7, lr}
 800517e:	b084      	sub	sp, #16
 8005180:	af00      	add	r7, sp, #0
 8005182:	60f8      	str	r0, [r7, #12]
 8005184:	60b9      	str	r1, [r7, #8]
 8005186:	4613      	mov	r3, r2
 8005188:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800518a:	68fb      	ldr	r3, [r7, #12]
 800518c:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8005190:	b2db      	uxtb	r3, r3
 8005192:	2b20      	cmp	r3, #32
 8005194:	d112      	bne.n	80051bc <HAL_UART_Receive_DMA+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8005196:	68bb      	ldr	r3, [r7, #8]
 8005198:	2b00      	cmp	r3, #0
 800519a:	d002      	beq.n	80051a2 <HAL_UART_Receive_DMA+0x26>
 800519c:	88fb      	ldrh	r3, [r7, #6]
 800519e:	2b00      	cmp	r3, #0
 80051a0:	d101      	bne.n	80051a6 <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 80051a2:	2301      	movs	r3, #1
 80051a4:	e00b      	b.n	80051be <HAL_UART_Receive_DMA+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80051a6:	68fb      	ldr	r3, [r7, #12]
 80051a8:	2200      	movs	r2, #0
 80051aa:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_DMA(huart, pData, Size));
 80051ac:	88fb      	ldrh	r3, [r7, #6]
 80051ae:	461a      	mov	r2, r3
 80051b0:	68b9      	ldr	r1, [r7, #8]
 80051b2:	68f8      	ldr	r0, [r7, #12]
 80051b4:	f000 fcb0 	bl	8005b18 <UART_Start_Receive_DMA>
 80051b8:	4603      	mov	r3, r0
 80051ba:	e000      	b.n	80051be <HAL_UART_Receive_DMA+0x42>
  }
  else
  {
    return HAL_BUSY;
 80051bc:	2302      	movs	r3, #2
  }
}
 80051be:	4618      	mov	r0, r3
 80051c0:	3710      	adds	r7, #16
 80051c2:	46bd      	mov	sp, r7
 80051c4:	bd80      	pop	{r7, pc}

080051c6 <HAL_UART_DMAStop>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DMAStop(UART_HandleTypeDef *huart)
{
 80051c6:	b580      	push	{r7, lr}
 80051c8:	b090      	sub	sp, #64	@ 0x40
 80051ca:	af00      	add	r7, sp, #0
 80051cc:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 80051ce:	2300      	movs	r3, #0
 80051d0:	63fb      	str	r3, [r7, #60]	@ 0x3c
     when calling HAL_DMA_Abort() API the DMA TX/RX Transfer complete interrupt is generated
     and the correspond call back is executed HAL_UART_TxCpltCallback() / HAL_UART_RxCpltCallback()
     */

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	681b      	ldr	r3, [r3, #0]
 80051d6:	695b      	ldr	r3, [r3, #20]
 80051d8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80051dc:	2b80      	cmp	r3, #128	@ 0x80
 80051de:	bf0c      	ite	eq
 80051e0:	2301      	moveq	r3, #1
 80051e2:	2300      	movne	r3, #0
 80051e4:	b2db      	uxtb	r3, r3
 80051e6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80051ee:	b2db      	uxtb	r3, r3
 80051f0:	2b21      	cmp	r3, #33	@ 0x21
 80051f2:	d128      	bne.n	8005246 <HAL_UART_DMAStop+0x80>
 80051f4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80051f6:	2b00      	cmp	r3, #0
 80051f8:	d025      	beq.n	8005246 <HAL_UART_DMAStop+0x80>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	681b      	ldr	r3, [r3, #0]
 80051fe:	3314      	adds	r3, #20
 8005200:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005202:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005204:	e853 3f00 	ldrex	r3, [r3]
 8005208:	623b      	str	r3, [r7, #32]
   return(result);
 800520a:	6a3b      	ldr	r3, [r7, #32]
 800520c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005210:	63bb      	str	r3, [r7, #56]	@ 0x38
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	681b      	ldr	r3, [r3, #0]
 8005216:	3314      	adds	r3, #20
 8005218:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800521a:	633a      	str	r2, [r7, #48]	@ 0x30
 800521c:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800521e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005220:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005222:	e841 2300 	strex	r3, r2, [r1]
 8005226:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8005228:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800522a:	2b00      	cmp	r3, #0
 800522c:	d1e5      	bne.n	80051fa <HAL_UART_DMAStop+0x34>

    /* Abort the UART DMA Tx stream */
    if (huart->hdmatx != NULL)
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005232:	2b00      	cmp	r3, #0
 8005234:	d004      	beq.n	8005240 <HAL_UART_DMAStop+0x7a>
    {
      HAL_DMA_Abort(huart->hdmatx);
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800523a:	4618      	mov	r0, r3
 800523c:	f7fd fd68 	bl	8002d10 <HAL_DMA_Abort>
    }
    UART_EndTxTransfer(huart);
 8005240:	6878      	ldr	r0, [r7, #4]
 8005242:	f000 fd03 	bl	8005c4c <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	681b      	ldr	r3, [r3, #0]
 800524a:	695b      	ldr	r3, [r3, #20]
 800524c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005250:	2b40      	cmp	r3, #64	@ 0x40
 8005252:	bf0c      	ite	eq
 8005254:	2301      	moveq	r3, #1
 8005256:	2300      	movne	r3, #0
 8005258:	b2db      	uxtb	r3, r3
 800525a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8005262:	b2db      	uxtb	r3, r3
 8005264:	2b22      	cmp	r3, #34	@ 0x22
 8005266:	d128      	bne.n	80052ba <HAL_UART_DMAStop+0xf4>
 8005268:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800526a:	2b00      	cmp	r3, #0
 800526c:	d025      	beq.n	80052ba <HAL_UART_DMAStop+0xf4>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	681b      	ldr	r3, [r3, #0]
 8005272:	3314      	adds	r3, #20
 8005274:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005276:	693b      	ldr	r3, [r7, #16]
 8005278:	e853 3f00 	ldrex	r3, [r3]
 800527c:	60fb      	str	r3, [r7, #12]
   return(result);
 800527e:	68fb      	ldr	r3, [r7, #12]
 8005280:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005284:	637b      	str	r3, [r7, #52]	@ 0x34
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	681b      	ldr	r3, [r3, #0]
 800528a:	3314      	adds	r3, #20
 800528c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800528e:	61fa      	str	r2, [r7, #28]
 8005290:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005292:	69b9      	ldr	r1, [r7, #24]
 8005294:	69fa      	ldr	r2, [r7, #28]
 8005296:	e841 2300 	strex	r3, r2, [r1]
 800529a:	617b      	str	r3, [r7, #20]
   return(result);
 800529c:	697b      	ldr	r3, [r7, #20]
 800529e:	2b00      	cmp	r3, #0
 80052a0:	d1e5      	bne.n	800526e <HAL_UART_DMAStop+0xa8>

    /* Abort the UART DMA Rx stream */
    if (huart->hdmarx != NULL)
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80052a6:	2b00      	cmp	r3, #0
 80052a8:	d004      	beq.n	80052b4 <HAL_UART_DMAStop+0xee>
    {
      HAL_DMA_Abort(huart->hdmarx);
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80052ae:	4618      	mov	r0, r3
 80052b0:	f7fd fd2e 	bl	8002d10 <HAL_DMA_Abort>
    }
    UART_EndRxTransfer(huart);
 80052b4:	6878      	ldr	r0, [r7, #4]
 80052b6:	f000 fcf1 	bl	8005c9c <UART_EndRxTransfer>
  }

  return HAL_OK;
 80052ba:	2300      	movs	r3, #0
}
 80052bc:	4618      	mov	r0, r3
 80052be:	3740      	adds	r7, #64	@ 0x40
 80052c0:	46bd      	mov	sp, r7
 80052c2:	bd80      	pop	{r7, pc}

080052c4 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80052c4:	b580      	push	{r7, lr}
 80052c6:	b0ba      	sub	sp, #232	@ 0xe8
 80052c8:	af00      	add	r7, sp, #0
 80052ca:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	681b      	ldr	r3, [r3, #0]
 80052d2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	681b      	ldr	r3, [r3, #0]
 80052da:	68db      	ldr	r3, [r3, #12]
 80052dc:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	695b      	ldr	r3, [r3, #20]
 80052e6:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 80052ea:	2300      	movs	r3, #0
 80052ec:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 80052f0:	2300      	movs	r3, #0
 80052f2:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80052f6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80052fa:	f003 030f 	and.w	r3, r3, #15
 80052fe:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8005302:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8005306:	2b00      	cmp	r3, #0
 8005308:	d10f      	bne.n	800532a <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800530a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800530e:	f003 0320 	and.w	r3, r3, #32
 8005312:	2b00      	cmp	r3, #0
 8005314:	d009      	beq.n	800532a <HAL_UART_IRQHandler+0x66>
 8005316:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800531a:	f003 0320 	and.w	r3, r3, #32
 800531e:	2b00      	cmp	r3, #0
 8005320:	d003      	beq.n	800532a <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8005322:	6878      	ldr	r0, [r7, #4]
 8005324:	f000 fd99 	bl	8005e5a <UART_Receive_IT>
      return;
 8005328:	e25b      	b.n	80057e2 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800532a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800532e:	2b00      	cmp	r3, #0
 8005330:	f000 80de 	beq.w	80054f0 <HAL_UART_IRQHandler+0x22c>
 8005334:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005338:	f003 0301 	and.w	r3, r3, #1
 800533c:	2b00      	cmp	r3, #0
 800533e:	d106      	bne.n	800534e <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8005340:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005344:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8005348:	2b00      	cmp	r3, #0
 800534a:	f000 80d1 	beq.w	80054f0 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800534e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005352:	f003 0301 	and.w	r3, r3, #1
 8005356:	2b00      	cmp	r3, #0
 8005358:	d00b      	beq.n	8005372 <HAL_UART_IRQHandler+0xae>
 800535a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800535e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005362:	2b00      	cmp	r3, #0
 8005364:	d005      	beq.n	8005372 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800536a:	f043 0201 	orr.w	r2, r3, #1
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005372:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005376:	f003 0304 	and.w	r3, r3, #4
 800537a:	2b00      	cmp	r3, #0
 800537c:	d00b      	beq.n	8005396 <HAL_UART_IRQHandler+0xd2>
 800537e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005382:	f003 0301 	and.w	r3, r3, #1
 8005386:	2b00      	cmp	r3, #0
 8005388:	d005      	beq.n	8005396 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800538e:	f043 0202 	orr.w	r2, r3, #2
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005396:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800539a:	f003 0302 	and.w	r3, r3, #2
 800539e:	2b00      	cmp	r3, #0
 80053a0:	d00b      	beq.n	80053ba <HAL_UART_IRQHandler+0xf6>
 80053a2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80053a6:	f003 0301 	and.w	r3, r3, #1
 80053aa:	2b00      	cmp	r3, #0
 80053ac:	d005      	beq.n	80053ba <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80053b2:	f043 0204 	orr.w	r2, r3, #4
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80053ba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80053be:	f003 0308 	and.w	r3, r3, #8
 80053c2:	2b00      	cmp	r3, #0
 80053c4:	d011      	beq.n	80053ea <HAL_UART_IRQHandler+0x126>
 80053c6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80053ca:	f003 0320 	and.w	r3, r3, #32
 80053ce:	2b00      	cmp	r3, #0
 80053d0:	d105      	bne.n	80053de <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80053d2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80053d6:	f003 0301 	and.w	r3, r3, #1
 80053da:	2b00      	cmp	r3, #0
 80053dc:	d005      	beq.n	80053ea <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80053e2:	f043 0208 	orr.w	r2, r3, #8
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80053ee:	2b00      	cmp	r3, #0
 80053f0:	f000 81f2 	beq.w	80057d8 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80053f4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80053f8:	f003 0320 	and.w	r3, r3, #32
 80053fc:	2b00      	cmp	r3, #0
 80053fe:	d008      	beq.n	8005412 <HAL_UART_IRQHandler+0x14e>
 8005400:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005404:	f003 0320 	and.w	r3, r3, #32
 8005408:	2b00      	cmp	r3, #0
 800540a:	d002      	beq.n	8005412 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 800540c:	6878      	ldr	r0, [r7, #4]
 800540e:	f000 fd24 	bl	8005e5a <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	681b      	ldr	r3, [r3, #0]
 8005416:	695b      	ldr	r3, [r3, #20]
 8005418:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800541c:	2b40      	cmp	r3, #64	@ 0x40
 800541e:	bf0c      	ite	eq
 8005420:	2301      	moveq	r3, #1
 8005422:	2300      	movne	r3, #0
 8005424:	b2db      	uxtb	r3, r3
 8005426:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800542e:	f003 0308 	and.w	r3, r3, #8
 8005432:	2b00      	cmp	r3, #0
 8005434:	d103      	bne.n	800543e <HAL_UART_IRQHandler+0x17a>
 8005436:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800543a:	2b00      	cmp	r3, #0
 800543c:	d04f      	beq.n	80054de <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800543e:	6878      	ldr	r0, [r7, #4]
 8005440:	f000 fc2c 	bl	8005c9c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	681b      	ldr	r3, [r3, #0]
 8005448:	695b      	ldr	r3, [r3, #20]
 800544a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800544e:	2b40      	cmp	r3, #64	@ 0x40
 8005450:	d141      	bne.n	80054d6 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	681b      	ldr	r3, [r3, #0]
 8005456:	3314      	adds	r3, #20
 8005458:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800545c:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8005460:	e853 3f00 	ldrex	r3, [r3]
 8005464:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8005468:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800546c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005470:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	681b      	ldr	r3, [r3, #0]
 8005478:	3314      	adds	r3, #20
 800547a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800547e:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8005482:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005486:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800548a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800548e:	e841 2300 	strex	r3, r2, [r1]
 8005492:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8005496:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800549a:	2b00      	cmp	r3, #0
 800549c:	d1d9      	bne.n	8005452 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80054a2:	2b00      	cmp	r3, #0
 80054a4:	d013      	beq.n	80054ce <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80054aa:	4a7e      	ldr	r2, [pc, #504]	@ (80056a4 <HAL_UART_IRQHandler+0x3e0>)
 80054ac:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80054b2:	4618      	mov	r0, r3
 80054b4:	f7fd fc9c 	bl	8002df0 <HAL_DMA_Abort_IT>
 80054b8:	4603      	mov	r3, r0
 80054ba:	2b00      	cmp	r3, #0
 80054bc:	d016      	beq.n	80054ec <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80054c2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80054c4:	687a      	ldr	r2, [r7, #4]
 80054c6:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 80054c8:	4610      	mov	r0, r2
 80054ca:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80054cc:	e00e      	b.n	80054ec <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80054ce:	6878      	ldr	r0, [r7, #4]
 80054d0:	f000 f9b2 	bl	8005838 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80054d4:	e00a      	b.n	80054ec <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80054d6:	6878      	ldr	r0, [r7, #4]
 80054d8:	f000 f9ae 	bl	8005838 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80054dc:	e006      	b.n	80054ec <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80054de:	6878      	ldr	r0, [r7, #4]
 80054e0:	f000 f9aa 	bl	8005838 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	2200      	movs	r2, #0
 80054e8:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 80054ea:	e175      	b.n	80057d8 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80054ec:	bf00      	nop
    return;
 80054ee:	e173      	b.n	80057d8 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80054f4:	2b01      	cmp	r3, #1
 80054f6:	f040 814f 	bne.w	8005798 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80054fa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80054fe:	f003 0310 	and.w	r3, r3, #16
 8005502:	2b00      	cmp	r3, #0
 8005504:	f000 8148 	beq.w	8005798 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8005508:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800550c:	f003 0310 	and.w	r3, r3, #16
 8005510:	2b00      	cmp	r3, #0
 8005512:	f000 8141 	beq.w	8005798 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005516:	2300      	movs	r3, #0
 8005518:	60bb      	str	r3, [r7, #8]
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	681b      	ldr	r3, [r3, #0]
 800551e:	681b      	ldr	r3, [r3, #0]
 8005520:	60bb      	str	r3, [r7, #8]
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	681b      	ldr	r3, [r3, #0]
 8005526:	685b      	ldr	r3, [r3, #4]
 8005528:	60bb      	str	r3, [r7, #8]
 800552a:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	681b      	ldr	r3, [r3, #0]
 8005530:	695b      	ldr	r3, [r3, #20]
 8005532:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005536:	2b40      	cmp	r3, #64	@ 0x40
 8005538:	f040 80b6 	bne.w	80056a8 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005540:	681b      	ldr	r3, [r3, #0]
 8005542:	685b      	ldr	r3, [r3, #4]
 8005544:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8005548:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 800554c:	2b00      	cmp	r3, #0
 800554e:	f000 8145 	beq.w	80057dc <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8005556:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800555a:	429a      	cmp	r2, r3
 800555c:	f080 813e 	bcs.w	80057dc <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8005566:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800556c:	69db      	ldr	r3, [r3, #28]
 800556e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005572:	f000 8088 	beq.w	8005686 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	681b      	ldr	r3, [r3, #0]
 800557a:	330c      	adds	r3, #12
 800557c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005580:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8005584:	e853 3f00 	ldrex	r3, [r3]
 8005588:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 800558c:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8005590:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005594:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	681b      	ldr	r3, [r3, #0]
 800559c:	330c      	adds	r3, #12
 800559e:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 80055a2:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80055a6:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80055aa:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 80055ae:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80055b2:	e841 2300 	strex	r3, r2, [r1]
 80055b6:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 80055ba:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80055be:	2b00      	cmp	r3, #0
 80055c0:	d1d9      	bne.n	8005576 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	681b      	ldr	r3, [r3, #0]
 80055c6:	3314      	adds	r3, #20
 80055c8:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80055ca:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80055cc:	e853 3f00 	ldrex	r3, [r3]
 80055d0:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 80055d2:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80055d4:	f023 0301 	bic.w	r3, r3, #1
 80055d8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	681b      	ldr	r3, [r3, #0]
 80055e0:	3314      	adds	r3, #20
 80055e2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80055e6:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 80055ea:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80055ec:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 80055ee:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 80055f2:	e841 2300 	strex	r3, r2, [r1]
 80055f6:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 80055f8:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80055fa:	2b00      	cmp	r3, #0
 80055fc:	d1e1      	bne.n	80055c2 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	681b      	ldr	r3, [r3, #0]
 8005602:	3314      	adds	r3, #20
 8005604:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005606:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8005608:	e853 3f00 	ldrex	r3, [r3]
 800560c:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800560e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005610:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005614:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	681b      	ldr	r3, [r3, #0]
 800561c:	3314      	adds	r3, #20
 800561e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8005622:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8005624:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005626:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8005628:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800562a:	e841 2300 	strex	r3, r2, [r1]
 800562e:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8005630:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005632:	2b00      	cmp	r3, #0
 8005634:	d1e3      	bne.n	80055fe <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	2220      	movs	r2, #32
 800563a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	2200      	movs	r2, #0
 8005642:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	681b      	ldr	r3, [r3, #0]
 8005648:	330c      	adds	r3, #12
 800564a:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800564c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800564e:	e853 3f00 	ldrex	r3, [r3]
 8005652:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8005654:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005656:	f023 0310 	bic.w	r3, r3, #16
 800565a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	681b      	ldr	r3, [r3, #0]
 8005662:	330c      	adds	r3, #12
 8005664:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8005668:	65ba      	str	r2, [r7, #88]	@ 0x58
 800566a:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800566c:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800566e:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8005670:	e841 2300 	strex	r3, r2, [r1]
 8005674:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8005676:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005678:	2b00      	cmp	r3, #0
 800567a:	d1e3      	bne.n	8005644 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005680:	4618      	mov	r0, r3
 8005682:	f7fd fb45 	bl	8002d10 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	2202      	movs	r2, #2
 800568a:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8005694:	b29b      	uxth	r3, r3
 8005696:	1ad3      	subs	r3, r2, r3
 8005698:	b29b      	uxth	r3, r3
 800569a:	4619      	mov	r1, r3
 800569c:	6878      	ldr	r0, [r7, #4]
 800569e:	f000 f8d5 	bl	800584c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80056a2:	e09b      	b.n	80057dc <HAL_UART_IRQHandler+0x518>
 80056a4:	08005d63 	.word	0x08005d63
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80056b0:	b29b      	uxth	r3, r3
 80056b2:	1ad3      	subs	r3, r2, r3
 80056b4:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80056bc:	b29b      	uxth	r3, r3
 80056be:	2b00      	cmp	r3, #0
 80056c0:	f000 808e 	beq.w	80057e0 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 80056c4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80056c8:	2b00      	cmp	r3, #0
 80056ca:	f000 8089 	beq.w	80057e0 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	681b      	ldr	r3, [r3, #0]
 80056d2:	330c      	adds	r3, #12
 80056d4:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80056d6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80056d8:	e853 3f00 	ldrex	r3, [r3]
 80056dc:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80056de:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80056e0:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80056e4:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	681b      	ldr	r3, [r3, #0]
 80056ec:	330c      	adds	r3, #12
 80056ee:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 80056f2:	647a      	str	r2, [r7, #68]	@ 0x44
 80056f4:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80056f6:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80056f8:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80056fa:	e841 2300 	strex	r3, r2, [r1]
 80056fe:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8005700:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005702:	2b00      	cmp	r3, #0
 8005704:	d1e3      	bne.n	80056ce <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	681b      	ldr	r3, [r3, #0]
 800570a:	3314      	adds	r3, #20
 800570c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800570e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005710:	e853 3f00 	ldrex	r3, [r3]
 8005714:	623b      	str	r3, [r7, #32]
   return(result);
 8005716:	6a3b      	ldr	r3, [r7, #32]
 8005718:	f023 0301 	bic.w	r3, r3, #1
 800571c:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	681b      	ldr	r3, [r3, #0]
 8005724:	3314      	adds	r3, #20
 8005726:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800572a:	633a      	str	r2, [r7, #48]	@ 0x30
 800572c:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800572e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005730:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005732:	e841 2300 	strex	r3, r2, [r1]
 8005736:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8005738:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800573a:	2b00      	cmp	r3, #0
 800573c:	d1e3      	bne.n	8005706 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	2220      	movs	r2, #32
 8005742:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	2200      	movs	r2, #0
 800574a:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	681b      	ldr	r3, [r3, #0]
 8005750:	330c      	adds	r3, #12
 8005752:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005754:	693b      	ldr	r3, [r7, #16]
 8005756:	e853 3f00 	ldrex	r3, [r3]
 800575a:	60fb      	str	r3, [r7, #12]
   return(result);
 800575c:	68fb      	ldr	r3, [r7, #12]
 800575e:	f023 0310 	bic.w	r3, r3, #16
 8005762:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	681b      	ldr	r3, [r3, #0]
 800576a:	330c      	adds	r3, #12
 800576c:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8005770:	61fa      	str	r2, [r7, #28]
 8005772:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005774:	69b9      	ldr	r1, [r7, #24]
 8005776:	69fa      	ldr	r2, [r7, #28]
 8005778:	e841 2300 	strex	r3, r2, [r1]
 800577c:	617b      	str	r3, [r7, #20]
   return(result);
 800577e:	697b      	ldr	r3, [r7, #20]
 8005780:	2b00      	cmp	r3, #0
 8005782:	d1e3      	bne.n	800574c <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	2202      	movs	r2, #2
 8005788:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800578a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800578e:	4619      	mov	r1, r3
 8005790:	6878      	ldr	r0, [r7, #4]
 8005792:	f000 f85b 	bl	800584c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8005796:	e023      	b.n	80057e0 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8005798:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800579c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80057a0:	2b00      	cmp	r3, #0
 80057a2:	d009      	beq.n	80057b8 <HAL_UART_IRQHandler+0x4f4>
 80057a4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80057a8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80057ac:	2b00      	cmp	r3, #0
 80057ae:	d003      	beq.n	80057b8 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 80057b0:	6878      	ldr	r0, [r7, #4]
 80057b2:	f000 faea 	bl	8005d8a <UART_Transmit_IT>
    return;
 80057b6:	e014      	b.n	80057e2 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80057b8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80057bc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80057c0:	2b00      	cmp	r3, #0
 80057c2:	d00e      	beq.n	80057e2 <HAL_UART_IRQHandler+0x51e>
 80057c4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80057c8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80057cc:	2b00      	cmp	r3, #0
 80057ce:	d008      	beq.n	80057e2 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 80057d0:	6878      	ldr	r0, [r7, #4]
 80057d2:	f000 fb2a 	bl	8005e2a <UART_EndTransmit_IT>
    return;
 80057d6:	e004      	b.n	80057e2 <HAL_UART_IRQHandler+0x51e>
    return;
 80057d8:	bf00      	nop
 80057da:	e002      	b.n	80057e2 <HAL_UART_IRQHandler+0x51e>
      return;
 80057dc:	bf00      	nop
 80057de:	e000      	b.n	80057e2 <HAL_UART_IRQHandler+0x51e>
      return;
 80057e0:	bf00      	nop
  }
}
 80057e2:	37e8      	adds	r7, #232	@ 0xe8
 80057e4:	46bd      	mov	sp, r7
 80057e6:	bd80      	pop	{r7, pc}

080057e8 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80057e8:	b480      	push	{r7}
 80057ea:	b083      	sub	sp, #12
 80057ec:	af00      	add	r7, sp, #0
 80057ee:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80057f0:	bf00      	nop
 80057f2:	370c      	adds	r7, #12
 80057f4:	46bd      	mov	sp, r7
 80057f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057fa:	4770      	bx	lr

080057fc <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80057fc:	b480      	push	{r7}
 80057fe:	b083      	sub	sp, #12
 8005800:	af00      	add	r7, sp, #0
 8005802:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 8005804:	bf00      	nop
 8005806:	370c      	adds	r7, #12
 8005808:	46bd      	mov	sp, r7
 800580a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800580e:	4770      	bx	lr

08005810 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8005810:	b480      	push	{r7}
 8005812:	b083      	sub	sp, #12
 8005814:	af00      	add	r7, sp, #0
 8005816:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8005818:	bf00      	nop
 800581a:	370c      	adds	r7, #12
 800581c:	46bd      	mov	sp, r7
 800581e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005822:	4770      	bx	lr

08005824 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8005824:	b480      	push	{r7}
 8005826:	b083      	sub	sp, #12
 8005828:	af00      	add	r7, sp, #0
 800582a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 800582c:	bf00      	nop
 800582e:	370c      	adds	r7, #12
 8005830:	46bd      	mov	sp, r7
 8005832:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005836:	4770      	bx	lr

08005838 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005838:	b480      	push	{r7}
 800583a:	b083      	sub	sp, #12
 800583c:	af00      	add	r7, sp, #0
 800583e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8005840:	bf00      	nop
 8005842:	370c      	adds	r7, #12
 8005844:	46bd      	mov	sp, r7
 8005846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800584a:	4770      	bx	lr

0800584c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800584c:	b480      	push	{r7}
 800584e:	b083      	sub	sp, #12
 8005850:	af00      	add	r7, sp, #0
 8005852:	6078      	str	r0, [r7, #4]
 8005854:	460b      	mov	r3, r1
 8005856:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8005858:	bf00      	nop
 800585a:	370c      	adds	r7, #12
 800585c:	46bd      	mov	sp, r7
 800585e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005862:	4770      	bx	lr

08005864 <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8005864:	b580      	push	{r7, lr}
 8005866:	b090      	sub	sp, #64	@ 0x40
 8005868:	af00      	add	r7, sp, #0
 800586a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005870:	63fb      	str	r3, [r7, #60]	@ 0x3c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	681b      	ldr	r3, [r3, #0]
 8005876:	681b      	ldr	r3, [r3, #0]
 8005878:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800587c:	2b00      	cmp	r3, #0
 800587e:	d137      	bne.n	80058f0 <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0x00U;
 8005880:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005882:	2200      	movs	r2, #0
 8005884:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8005886:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005888:	681b      	ldr	r3, [r3, #0]
 800588a:	3314      	adds	r3, #20
 800588c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800588e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005890:	e853 3f00 	ldrex	r3, [r3]
 8005894:	623b      	str	r3, [r7, #32]
   return(result);
 8005896:	6a3b      	ldr	r3, [r7, #32]
 8005898:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800589c:	63bb      	str	r3, [r7, #56]	@ 0x38
 800589e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80058a0:	681b      	ldr	r3, [r3, #0]
 80058a2:	3314      	adds	r3, #20
 80058a4:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80058a6:	633a      	str	r2, [r7, #48]	@ 0x30
 80058a8:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80058aa:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80058ac:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80058ae:	e841 2300 	strex	r3, r2, [r1]
 80058b2:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80058b4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80058b6:	2b00      	cmp	r3, #0
 80058b8:	d1e5      	bne.n	8005886 <UART_DMATransmitCplt+0x22>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80058ba:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80058bc:	681b      	ldr	r3, [r3, #0]
 80058be:	330c      	adds	r3, #12
 80058c0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80058c2:	693b      	ldr	r3, [r7, #16]
 80058c4:	e853 3f00 	ldrex	r3, [r3]
 80058c8:	60fb      	str	r3, [r7, #12]
   return(result);
 80058ca:	68fb      	ldr	r3, [r7, #12]
 80058cc:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80058d0:	637b      	str	r3, [r7, #52]	@ 0x34
 80058d2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80058d4:	681b      	ldr	r3, [r3, #0]
 80058d6:	330c      	adds	r3, #12
 80058d8:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80058da:	61fa      	str	r2, [r7, #28]
 80058dc:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80058de:	69b9      	ldr	r1, [r7, #24]
 80058e0:	69fa      	ldr	r2, [r7, #28]
 80058e2:	e841 2300 	strex	r3, r2, [r1]
 80058e6:	617b      	str	r3, [r7, #20]
   return(result);
 80058e8:	697b      	ldr	r3, [r7, #20]
 80058ea:	2b00      	cmp	r3, #0
 80058ec:	d1e5      	bne.n	80058ba <UART_DMATransmitCplt+0x56>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80058ee:	e002      	b.n	80058f6 <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 80058f0:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 80058f2:	f7ff ff79 	bl	80057e8 <HAL_UART_TxCpltCallback>
}
 80058f6:	bf00      	nop
 80058f8:	3740      	adds	r7, #64	@ 0x40
 80058fa:	46bd      	mov	sp, r7
 80058fc:	bd80      	pop	{r7, pc}

080058fe <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80058fe:	b580      	push	{r7, lr}
 8005900:	b084      	sub	sp, #16
 8005902:	af00      	add	r7, sp, #0
 8005904:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800590a:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 800590c:	68f8      	ldr	r0, [r7, #12]
 800590e:	f7ff ff75 	bl	80057fc <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005912:	bf00      	nop
 8005914:	3710      	adds	r7, #16
 8005916:	46bd      	mov	sp, r7
 8005918:	bd80      	pop	{r7, pc}

0800591a <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800591a:	b580      	push	{r7, lr}
 800591c:	b09c      	sub	sp, #112	@ 0x70
 800591e:	af00      	add	r7, sp, #0
 8005920:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005926:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	681b      	ldr	r3, [r3, #0]
 800592c:	681b      	ldr	r3, [r3, #0]
 800592e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005932:	2b00      	cmp	r3, #0
 8005934:	d172      	bne.n	8005a1c <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 8005936:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005938:	2200      	movs	r2, #0
 800593a:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800593c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800593e:	681b      	ldr	r3, [r3, #0]
 8005940:	330c      	adds	r3, #12
 8005942:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005944:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005946:	e853 3f00 	ldrex	r3, [r3]
 800594a:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800594c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800594e:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005952:	66bb      	str	r3, [r7, #104]	@ 0x68
 8005954:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005956:	681b      	ldr	r3, [r3, #0]
 8005958:	330c      	adds	r3, #12
 800595a:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 800595c:	65ba      	str	r2, [r7, #88]	@ 0x58
 800595e:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005960:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8005962:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8005964:	e841 2300 	strex	r3, r2, [r1]
 8005968:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800596a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800596c:	2b00      	cmp	r3, #0
 800596e:	d1e5      	bne.n	800593c <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005970:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005972:	681b      	ldr	r3, [r3, #0]
 8005974:	3314      	adds	r3, #20
 8005976:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005978:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800597a:	e853 3f00 	ldrex	r3, [r3]
 800597e:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8005980:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005982:	f023 0301 	bic.w	r3, r3, #1
 8005986:	667b      	str	r3, [r7, #100]	@ 0x64
 8005988:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800598a:	681b      	ldr	r3, [r3, #0]
 800598c:	3314      	adds	r3, #20
 800598e:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8005990:	647a      	str	r2, [r7, #68]	@ 0x44
 8005992:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005994:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8005996:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005998:	e841 2300 	strex	r3, r2, [r1]
 800599c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800599e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80059a0:	2b00      	cmp	r3, #0
 80059a2:	d1e5      	bne.n	8005970 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80059a4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80059a6:	681b      	ldr	r3, [r3, #0]
 80059a8:	3314      	adds	r3, #20
 80059aa:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80059ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80059ae:	e853 3f00 	ldrex	r3, [r3]
 80059b2:	623b      	str	r3, [r7, #32]
   return(result);
 80059b4:	6a3b      	ldr	r3, [r7, #32]
 80059b6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80059ba:	663b      	str	r3, [r7, #96]	@ 0x60
 80059bc:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80059be:	681b      	ldr	r3, [r3, #0]
 80059c0:	3314      	adds	r3, #20
 80059c2:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 80059c4:	633a      	str	r2, [r7, #48]	@ 0x30
 80059c6:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80059c8:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80059ca:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80059cc:	e841 2300 	strex	r3, r2, [r1]
 80059d0:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80059d2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80059d4:	2b00      	cmp	r3, #0
 80059d6:	d1e5      	bne.n	80059a4 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80059d8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80059da:	2220      	movs	r2, #32
 80059dc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80059e0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80059e2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80059e4:	2b01      	cmp	r3, #1
 80059e6:	d119      	bne.n	8005a1c <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80059e8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80059ea:	681b      	ldr	r3, [r3, #0]
 80059ec:	330c      	adds	r3, #12
 80059ee:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80059f0:	693b      	ldr	r3, [r7, #16]
 80059f2:	e853 3f00 	ldrex	r3, [r3]
 80059f6:	60fb      	str	r3, [r7, #12]
   return(result);
 80059f8:	68fb      	ldr	r3, [r7, #12]
 80059fa:	f023 0310 	bic.w	r3, r3, #16
 80059fe:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8005a00:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005a02:	681b      	ldr	r3, [r3, #0]
 8005a04:	330c      	adds	r3, #12
 8005a06:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8005a08:	61fa      	str	r2, [r7, #28]
 8005a0a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a0c:	69b9      	ldr	r1, [r7, #24]
 8005a0e:	69fa      	ldr	r2, [r7, #28]
 8005a10:	e841 2300 	strex	r3, r2, [r1]
 8005a14:	617b      	str	r3, [r7, #20]
   return(result);
 8005a16:	697b      	ldr	r3, [r7, #20]
 8005a18:	2b00      	cmp	r3, #0
 8005a1a:	d1e5      	bne.n	80059e8 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
   In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005a1c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005a1e:	2200      	movs	r2, #0
 8005a20:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005a22:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005a24:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005a26:	2b01      	cmp	r3, #1
 8005a28:	d106      	bne.n	8005a38 <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005a2a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005a2c:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8005a2e:	4619      	mov	r1, r3
 8005a30:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8005a32:	f7ff ff0b 	bl	800584c <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8005a36:	e002      	b.n	8005a3e <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 8005a38:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8005a3a:	f7ff fee9 	bl	8005810 <HAL_UART_RxCpltCallback>
}
 8005a3e:	bf00      	nop
 8005a40:	3770      	adds	r7, #112	@ 0x70
 8005a42:	46bd      	mov	sp, r7
 8005a44:	bd80      	pop	{r7, pc}

08005a46 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8005a46:	b580      	push	{r7, lr}
 8005a48:	b084      	sub	sp, #16
 8005a4a:	af00      	add	r7, sp, #0
 8005a4c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005a52:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 8005a54:	68fb      	ldr	r3, [r7, #12]
 8005a56:	2201      	movs	r2, #1
 8005a58:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005a5a:	68fb      	ldr	r3, [r7, #12]
 8005a5c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005a5e:	2b01      	cmp	r3, #1
 8005a60:	d108      	bne.n	8005a74 <UART_DMARxHalfCplt+0x2e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8005a62:	68fb      	ldr	r3, [r7, #12]
 8005a64:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8005a66:	085b      	lsrs	r3, r3, #1
 8005a68:	b29b      	uxth	r3, r3
 8005a6a:	4619      	mov	r1, r3
 8005a6c:	68f8      	ldr	r0, [r7, #12]
 8005a6e:	f7ff feed 	bl	800584c <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8005a72:	e002      	b.n	8005a7a <UART_DMARxHalfCplt+0x34>
    HAL_UART_RxHalfCpltCallback(huart);
 8005a74:	68f8      	ldr	r0, [r7, #12]
 8005a76:	f7ff fed5 	bl	8005824 <HAL_UART_RxHalfCpltCallback>
}
 8005a7a:	bf00      	nop
 8005a7c:	3710      	adds	r7, #16
 8005a7e:	46bd      	mov	sp, r7
 8005a80:	bd80      	pop	{r7, pc}

08005a82 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8005a82:	b580      	push	{r7, lr}
 8005a84:	b084      	sub	sp, #16
 8005a86:	af00      	add	r7, sp, #0
 8005a88:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8005a8a:	2300      	movs	r3, #0
 8005a8c:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005a92:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8005a94:	68bb      	ldr	r3, [r7, #8]
 8005a96:	681b      	ldr	r3, [r3, #0]
 8005a98:	695b      	ldr	r3, [r3, #20]
 8005a9a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005a9e:	2b80      	cmp	r3, #128	@ 0x80
 8005aa0:	bf0c      	ite	eq
 8005aa2:	2301      	moveq	r3, #1
 8005aa4:	2300      	movne	r3, #0
 8005aa6:	b2db      	uxtb	r3, r3
 8005aa8:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8005aaa:	68bb      	ldr	r3, [r7, #8]
 8005aac:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005ab0:	b2db      	uxtb	r3, r3
 8005ab2:	2b21      	cmp	r3, #33	@ 0x21
 8005ab4:	d108      	bne.n	8005ac8 <UART_DMAError+0x46>
 8005ab6:	68fb      	ldr	r3, [r7, #12]
 8005ab8:	2b00      	cmp	r3, #0
 8005aba:	d005      	beq.n	8005ac8 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8005abc:	68bb      	ldr	r3, [r7, #8]
 8005abe:	2200      	movs	r2, #0
 8005ac0:	84da      	strh	r2, [r3, #38]	@ 0x26
    UART_EndTxTransfer(huart);
 8005ac2:	68b8      	ldr	r0, [r7, #8]
 8005ac4:	f000 f8c2 	bl	8005c4c <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8005ac8:	68bb      	ldr	r3, [r7, #8]
 8005aca:	681b      	ldr	r3, [r3, #0]
 8005acc:	695b      	ldr	r3, [r3, #20]
 8005ace:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005ad2:	2b40      	cmp	r3, #64	@ 0x40
 8005ad4:	bf0c      	ite	eq
 8005ad6:	2301      	moveq	r3, #1
 8005ad8:	2300      	movne	r3, #0
 8005ada:	b2db      	uxtb	r3, r3
 8005adc:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8005ade:	68bb      	ldr	r3, [r7, #8]
 8005ae0:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8005ae4:	b2db      	uxtb	r3, r3
 8005ae6:	2b22      	cmp	r3, #34	@ 0x22
 8005ae8:	d108      	bne.n	8005afc <UART_DMAError+0x7a>
 8005aea:	68fb      	ldr	r3, [r7, #12]
 8005aec:	2b00      	cmp	r3, #0
 8005aee:	d005      	beq.n	8005afc <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8005af0:	68bb      	ldr	r3, [r7, #8]
 8005af2:	2200      	movs	r2, #0
 8005af4:	85da      	strh	r2, [r3, #46]	@ 0x2e
    UART_EndRxTransfer(huart);
 8005af6:	68b8      	ldr	r0, [r7, #8]
 8005af8:	f000 f8d0 	bl	8005c9c <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8005afc:	68bb      	ldr	r3, [r7, #8]
 8005afe:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005b00:	f043 0210 	orr.w	r2, r3, #16
 8005b04:	68bb      	ldr	r3, [r7, #8]
 8005b06:	645a      	str	r2, [r3, #68]	@ 0x44
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005b08:	68b8      	ldr	r0, [r7, #8]
 8005b0a:	f7ff fe95 	bl	8005838 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005b0e:	bf00      	nop
 8005b10:	3710      	adds	r7, #16
 8005b12:	46bd      	mov	sp, r7
 8005b14:	bd80      	pop	{r7, pc}
	...

08005b18 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005b18:	b580      	push	{r7, lr}
 8005b1a:	b098      	sub	sp, #96	@ 0x60
 8005b1c:	af00      	add	r7, sp, #0
 8005b1e:	60f8      	str	r0, [r7, #12]
 8005b20:	60b9      	str	r1, [r7, #8]
 8005b22:	4613      	mov	r3, r2
 8005b24:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 8005b26:	68ba      	ldr	r2, [r7, #8]
 8005b28:	68fb      	ldr	r3, [r7, #12]
 8005b2a:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 8005b2c:	68fb      	ldr	r3, [r7, #12]
 8005b2e:	88fa      	ldrh	r2, [r7, #6]
 8005b30:	859a      	strh	r2, [r3, #44]	@ 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005b32:	68fb      	ldr	r3, [r7, #12]
 8005b34:	2200      	movs	r2, #0
 8005b36:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005b38:	68fb      	ldr	r3, [r7, #12]
 8005b3a:	2222      	movs	r2, #34	@ 0x22
 8005b3c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8005b40:	68fb      	ldr	r3, [r7, #12]
 8005b42:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005b44:	4a3e      	ldr	r2, [pc, #248]	@ (8005c40 <UART_Start_Receive_DMA+0x128>)
 8005b46:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8005b48:	68fb      	ldr	r3, [r7, #12]
 8005b4a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005b4c:	4a3d      	ldr	r2, [pc, #244]	@ (8005c44 <UART_Start_Receive_DMA+0x12c>)
 8005b4e:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 8005b50:	68fb      	ldr	r3, [r7, #12]
 8005b52:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005b54:	4a3c      	ldr	r2, [pc, #240]	@ (8005c48 <UART_Start_Receive_DMA+0x130>)
 8005b56:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 8005b58:	68fb      	ldr	r3, [r7, #12]
 8005b5a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005b5c:	2200      	movs	r2, #0
 8005b5e:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 8005b60:	f107 0308 	add.w	r3, r7, #8
 8005b64:	65fb      	str	r3, [r7, #92]	@ 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8005b66:	68fb      	ldr	r3, [r7, #12]
 8005b68:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 8005b6a:	68fb      	ldr	r3, [r7, #12]
 8005b6c:	681b      	ldr	r3, [r3, #0]
 8005b6e:	3304      	adds	r3, #4
 8005b70:	4619      	mov	r1, r3
 8005b72:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005b74:	681a      	ldr	r2, [r3, #0]
 8005b76:	88fb      	ldrh	r3, [r7, #6]
 8005b78:	f7fd f872 	bl	8002c60 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 8005b7c:	2300      	movs	r3, #0
 8005b7e:	613b      	str	r3, [r7, #16]
 8005b80:	68fb      	ldr	r3, [r7, #12]
 8005b82:	681b      	ldr	r3, [r3, #0]
 8005b84:	681b      	ldr	r3, [r3, #0]
 8005b86:	613b      	str	r3, [r7, #16]
 8005b88:	68fb      	ldr	r3, [r7, #12]
 8005b8a:	681b      	ldr	r3, [r3, #0]
 8005b8c:	685b      	ldr	r3, [r3, #4]
 8005b8e:	613b      	str	r3, [r7, #16]
 8005b90:	693b      	ldr	r3, [r7, #16]

  if (huart->Init.Parity != UART_PARITY_NONE)
 8005b92:	68fb      	ldr	r3, [r7, #12]
 8005b94:	691b      	ldr	r3, [r3, #16]
 8005b96:	2b00      	cmp	r3, #0
 8005b98:	d019      	beq.n	8005bce <UART_Start_Receive_DMA+0xb6>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005b9a:	68fb      	ldr	r3, [r7, #12]
 8005b9c:	681b      	ldr	r3, [r3, #0]
 8005b9e:	330c      	adds	r3, #12
 8005ba0:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ba2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005ba4:	e853 3f00 	ldrex	r3, [r3]
 8005ba8:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8005baa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005bac:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005bb0:	65bb      	str	r3, [r7, #88]	@ 0x58
 8005bb2:	68fb      	ldr	r3, [r7, #12]
 8005bb4:	681b      	ldr	r3, [r3, #0]
 8005bb6:	330c      	adds	r3, #12
 8005bb8:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8005bba:	64fa      	str	r2, [r7, #76]	@ 0x4c
 8005bbc:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005bbe:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 8005bc0:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8005bc2:	e841 2300 	strex	r3, r2, [r1]
 8005bc6:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 8005bc8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005bca:	2b00      	cmp	r3, #0
 8005bcc:	d1e5      	bne.n	8005b9a <UART_Start_Receive_DMA+0x82>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005bce:	68fb      	ldr	r3, [r7, #12]
 8005bd0:	681b      	ldr	r3, [r3, #0]
 8005bd2:	3314      	adds	r3, #20
 8005bd4:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005bd6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005bd8:	e853 3f00 	ldrex	r3, [r3]
 8005bdc:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8005bde:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005be0:	f043 0301 	orr.w	r3, r3, #1
 8005be4:	657b      	str	r3, [r7, #84]	@ 0x54
 8005be6:	68fb      	ldr	r3, [r7, #12]
 8005be8:	681b      	ldr	r3, [r3, #0]
 8005bea:	3314      	adds	r3, #20
 8005bec:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8005bee:	63ba      	str	r2, [r7, #56]	@ 0x38
 8005bf0:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005bf2:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8005bf4:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8005bf6:	e841 2300 	strex	r3, r2, [r1]
 8005bfa:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8005bfc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005bfe:	2b00      	cmp	r3, #0
 8005c00:	d1e5      	bne.n	8005bce <UART_Start_Receive_DMA+0xb6>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005c02:	68fb      	ldr	r3, [r7, #12]
 8005c04:	681b      	ldr	r3, [r3, #0]
 8005c06:	3314      	adds	r3, #20
 8005c08:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c0a:	69bb      	ldr	r3, [r7, #24]
 8005c0c:	e853 3f00 	ldrex	r3, [r3]
 8005c10:	617b      	str	r3, [r7, #20]
   return(result);
 8005c12:	697b      	ldr	r3, [r7, #20]
 8005c14:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005c18:	653b      	str	r3, [r7, #80]	@ 0x50
 8005c1a:	68fb      	ldr	r3, [r7, #12]
 8005c1c:	681b      	ldr	r3, [r3, #0]
 8005c1e:	3314      	adds	r3, #20
 8005c20:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8005c22:	627a      	str	r2, [r7, #36]	@ 0x24
 8005c24:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c26:	6a39      	ldr	r1, [r7, #32]
 8005c28:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005c2a:	e841 2300 	strex	r3, r2, [r1]
 8005c2e:	61fb      	str	r3, [r7, #28]
   return(result);
 8005c30:	69fb      	ldr	r3, [r7, #28]
 8005c32:	2b00      	cmp	r3, #0
 8005c34:	d1e5      	bne.n	8005c02 <UART_Start_Receive_DMA+0xea>

  return HAL_OK;
 8005c36:	2300      	movs	r3, #0
}
 8005c38:	4618      	mov	r0, r3
 8005c3a:	3760      	adds	r7, #96	@ 0x60
 8005c3c:	46bd      	mov	sp, r7
 8005c3e:	bd80      	pop	{r7, pc}
 8005c40:	0800591b 	.word	0x0800591b
 8005c44:	08005a47 	.word	0x08005a47
 8005c48:	08005a83 	.word	0x08005a83

08005c4c <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8005c4c:	b480      	push	{r7}
 8005c4e:	b089      	sub	sp, #36	@ 0x24
 8005c50:	af00      	add	r7, sp, #0
 8005c52:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	681b      	ldr	r3, [r3, #0]
 8005c58:	330c      	adds	r3, #12
 8005c5a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c5c:	68fb      	ldr	r3, [r7, #12]
 8005c5e:	e853 3f00 	ldrex	r3, [r3]
 8005c62:	60bb      	str	r3, [r7, #8]
   return(result);
 8005c64:	68bb      	ldr	r3, [r7, #8]
 8005c66:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8005c6a:	61fb      	str	r3, [r7, #28]
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	681b      	ldr	r3, [r3, #0]
 8005c70:	330c      	adds	r3, #12
 8005c72:	69fa      	ldr	r2, [r7, #28]
 8005c74:	61ba      	str	r2, [r7, #24]
 8005c76:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c78:	6979      	ldr	r1, [r7, #20]
 8005c7a:	69ba      	ldr	r2, [r7, #24]
 8005c7c:	e841 2300 	strex	r3, r2, [r1]
 8005c80:	613b      	str	r3, [r7, #16]
   return(result);
 8005c82:	693b      	ldr	r3, [r7, #16]
 8005c84:	2b00      	cmp	r3, #0
 8005c86:	d1e5      	bne.n	8005c54 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	2220      	movs	r2, #32
 8005c8c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
}
 8005c90:	bf00      	nop
 8005c92:	3724      	adds	r7, #36	@ 0x24
 8005c94:	46bd      	mov	sp, r7
 8005c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c9a:	4770      	bx	lr

08005c9c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005c9c:	b480      	push	{r7}
 8005c9e:	b095      	sub	sp, #84	@ 0x54
 8005ca0:	af00      	add	r7, sp, #0
 8005ca2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	681b      	ldr	r3, [r3, #0]
 8005ca8:	330c      	adds	r3, #12
 8005caa:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005cac:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005cae:	e853 3f00 	ldrex	r3, [r3]
 8005cb2:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8005cb4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005cb6:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005cba:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	681b      	ldr	r3, [r3, #0]
 8005cc0:	330c      	adds	r3, #12
 8005cc2:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8005cc4:	643a      	str	r2, [r7, #64]	@ 0x40
 8005cc6:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005cc8:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8005cca:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8005ccc:	e841 2300 	strex	r3, r2, [r1]
 8005cd0:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8005cd2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005cd4:	2b00      	cmp	r3, #0
 8005cd6:	d1e5      	bne.n	8005ca4 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	681b      	ldr	r3, [r3, #0]
 8005cdc:	3314      	adds	r3, #20
 8005cde:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ce0:	6a3b      	ldr	r3, [r7, #32]
 8005ce2:	e853 3f00 	ldrex	r3, [r3]
 8005ce6:	61fb      	str	r3, [r7, #28]
   return(result);
 8005ce8:	69fb      	ldr	r3, [r7, #28]
 8005cea:	f023 0301 	bic.w	r3, r3, #1
 8005cee:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	681b      	ldr	r3, [r3, #0]
 8005cf4:	3314      	adds	r3, #20
 8005cf6:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005cf8:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005cfa:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005cfc:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005cfe:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005d00:	e841 2300 	strex	r3, r2, [r1]
 8005d04:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8005d06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d08:	2b00      	cmp	r3, #0
 8005d0a:	d1e5      	bne.n	8005cd8 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005d10:	2b01      	cmp	r3, #1
 8005d12:	d119      	bne.n	8005d48 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	681b      	ldr	r3, [r3, #0]
 8005d18:	330c      	adds	r3, #12
 8005d1a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d1c:	68fb      	ldr	r3, [r7, #12]
 8005d1e:	e853 3f00 	ldrex	r3, [r3]
 8005d22:	60bb      	str	r3, [r7, #8]
   return(result);
 8005d24:	68bb      	ldr	r3, [r7, #8]
 8005d26:	f023 0310 	bic.w	r3, r3, #16
 8005d2a:	647b      	str	r3, [r7, #68]	@ 0x44
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	681b      	ldr	r3, [r3, #0]
 8005d30:	330c      	adds	r3, #12
 8005d32:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005d34:	61ba      	str	r2, [r7, #24]
 8005d36:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d38:	6979      	ldr	r1, [r7, #20]
 8005d3a:	69ba      	ldr	r2, [r7, #24]
 8005d3c:	e841 2300 	strex	r3, r2, [r1]
 8005d40:	613b      	str	r3, [r7, #16]
   return(result);
 8005d42:	693b      	ldr	r3, [r7, #16]
 8005d44:	2b00      	cmp	r3, #0
 8005d46:	d1e5      	bne.n	8005d14 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	2220      	movs	r2, #32
 8005d4c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	2200      	movs	r2, #0
 8005d54:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8005d56:	bf00      	nop
 8005d58:	3754      	adds	r7, #84	@ 0x54
 8005d5a:	46bd      	mov	sp, r7
 8005d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d60:	4770      	bx	lr

08005d62 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005d62:	b580      	push	{r7, lr}
 8005d64:	b084      	sub	sp, #16
 8005d66:	af00      	add	r7, sp, #0
 8005d68:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005d6e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8005d70:	68fb      	ldr	r3, [r7, #12]
 8005d72:	2200      	movs	r2, #0
 8005d74:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 8005d76:	68fb      	ldr	r3, [r7, #12]
 8005d78:	2200      	movs	r2, #0
 8005d7a:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005d7c:	68f8      	ldr	r0, [r7, #12]
 8005d7e:	f7ff fd5b 	bl	8005838 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005d82:	bf00      	nop
 8005d84:	3710      	adds	r7, #16
 8005d86:	46bd      	mov	sp, r7
 8005d88:	bd80      	pop	{r7, pc}

08005d8a <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8005d8a:	b480      	push	{r7}
 8005d8c:	b085      	sub	sp, #20
 8005d8e:	af00      	add	r7, sp, #0
 8005d90:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005d98:	b2db      	uxtb	r3, r3
 8005d9a:	2b21      	cmp	r3, #33	@ 0x21
 8005d9c:	d13e      	bne.n	8005e1c <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	689b      	ldr	r3, [r3, #8]
 8005da2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005da6:	d114      	bne.n	8005dd2 <UART_Transmit_IT+0x48>
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	691b      	ldr	r3, [r3, #16]
 8005dac:	2b00      	cmp	r3, #0
 8005dae:	d110      	bne.n	8005dd2 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	6a1b      	ldr	r3, [r3, #32]
 8005db4:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8005db6:	68fb      	ldr	r3, [r7, #12]
 8005db8:	881b      	ldrh	r3, [r3, #0]
 8005dba:	461a      	mov	r2, r3
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	681b      	ldr	r3, [r3, #0]
 8005dc0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005dc4:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	6a1b      	ldr	r3, [r3, #32]
 8005dca:	1c9a      	adds	r2, r3, #2
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	621a      	str	r2, [r3, #32]
 8005dd0:	e008      	b.n	8005de4 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	6a1b      	ldr	r3, [r3, #32]
 8005dd6:	1c59      	adds	r1, r3, #1
 8005dd8:	687a      	ldr	r2, [r7, #4]
 8005dda:	6211      	str	r1, [r2, #32]
 8005ddc:	781a      	ldrb	r2, [r3, #0]
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	681b      	ldr	r3, [r3, #0]
 8005de2:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8005de8:	b29b      	uxth	r3, r3
 8005dea:	3b01      	subs	r3, #1
 8005dec:	b29b      	uxth	r3, r3
 8005dee:	687a      	ldr	r2, [r7, #4]
 8005df0:	4619      	mov	r1, r3
 8005df2:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8005df4:	2b00      	cmp	r3, #0
 8005df6:	d10f      	bne.n	8005e18 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	681b      	ldr	r3, [r3, #0]
 8005dfc:	68da      	ldr	r2, [r3, #12]
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	681b      	ldr	r3, [r3, #0]
 8005e02:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8005e06:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	681b      	ldr	r3, [r3, #0]
 8005e0c:	68da      	ldr	r2, [r3, #12]
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	681b      	ldr	r3, [r3, #0]
 8005e12:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8005e16:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8005e18:	2300      	movs	r3, #0
 8005e1a:	e000      	b.n	8005e1e <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8005e1c:	2302      	movs	r3, #2
  }
}
 8005e1e:	4618      	mov	r0, r3
 8005e20:	3714      	adds	r7, #20
 8005e22:	46bd      	mov	sp, r7
 8005e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e28:	4770      	bx	lr

08005e2a <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005e2a:	b580      	push	{r7, lr}
 8005e2c:	b082      	sub	sp, #8
 8005e2e:	af00      	add	r7, sp, #0
 8005e30:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	681b      	ldr	r3, [r3, #0]
 8005e36:	68da      	ldr	r2, [r3, #12]
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	681b      	ldr	r3, [r3, #0]
 8005e3c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005e40:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	2220      	movs	r2, #32
 8005e46:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005e4a:	6878      	ldr	r0, [r7, #4]
 8005e4c:	f7ff fccc 	bl	80057e8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8005e50:	2300      	movs	r3, #0
}
 8005e52:	4618      	mov	r0, r3
 8005e54:	3708      	adds	r7, #8
 8005e56:	46bd      	mov	sp, r7
 8005e58:	bd80      	pop	{r7, pc}

08005e5a <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8005e5a:	b580      	push	{r7, lr}
 8005e5c:	b08c      	sub	sp, #48	@ 0x30
 8005e5e:	af00      	add	r7, sp, #0
 8005e60:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8005e68:	b2db      	uxtb	r3, r3
 8005e6a:	2b22      	cmp	r3, #34	@ 0x22
 8005e6c:	f040 80ae 	bne.w	8005fcc <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	689b      	ldr	r3, [r3, #8]
 8005e74:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005e78:	d117      	bne.n	8005eaa <UART_Receive_IT+0x50>
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	691b      	ldr	r3, [r3, #16]
 8005e7e:	2b00      	cmp	r3, #0
 8005e80:	d113      	bne.n	8005eaa <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8005e82:	2300      	movs	r3, #0
 8005e84:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005e8a:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	681b      	ldr	r3, [r3, #0]
 8005e90:	685b      	ldr	r3, [r3, #4]
 8005e92:	b29b      	uxth	r3, r3
 8005e94:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005e98:	b29a      	uxth	r2, r3
 8005e9a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005e9c:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005ea2:	1c9a      	adds	r2, r3, #2
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	629a      	str	r2, [r3, #40]	@ 0x28
 8005ea8:	e026      	b.n	8005ef8 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005eae:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 8005eb0:	2300      	movs	r3, #0
 8005eb2:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	689b      	ldr	r3, [r3, #8]
 8005eb8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005ebc:	d007      	beq.n	8005ece <UART_Receive_IT+0x74>
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	689b      	ldr	r3, [r3, #8]
 8005ec2:	2b00      	cmp	r3, #0
 8005ec4:	d10a      	bne.n	8005edc <UART_Receive_IT+0x82>
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	691b      	ldr	r3, [r3, #16]
 8005eca:	2b00      	cmp	r3, #0
 8005ecc:	d106      	bne.n	8005edc <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	681b      	ldr	r3, [r3, #0]
 8005ed2:	685b      	ldr	r3, [r3, #4]
 8005ed4:	b2da      	uxtb	r2, r3
 8005ed6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005ed8:	701a      	strb	r2, [r3, #0]
 8005eda:	e008      	b.n	8005eee <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	681b      	ldr	r3, [r3, #0]
 8005ee0:	685b      	ldr	r3, [r3, #4]
 8005ee2:	b2db      	uxtb	r3, r3
 8005ee4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005ee8:	b2da      	uxtb	r2, r3
 8005eea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005eec:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005ef2:	1c5a      	adds	r2, r3, #1
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8005efc:	b29b      	uxth	r3, r3
 8005efe:	3b01      	subs	r3, #1
 8005f00:	b29b      	uxth	r3, r3
 8005f02:	687a      	ldr	r2, [r7, #4]
 8005f04:	4619      	mov	r1, r3
 8005f06:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8005f08:	2b00      	cmp	r3, #0
 8005f0a:	d15d      	bne.n	8005fc8 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	681b      	ldr	r3, [r3, #0]
 8005f10:	68da      	ldr	r2, [r3, #12]
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	681b      	ldr	r3, [r3, #0]
 8005f16:	f022 0220 	bic.w	r2, r2, #32
 8005f1a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	681b      	ldr	r3, [r3, #0]
 8005f20:	68da      	ldr	r2, [r3, #12]
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	681b      	ldr	r3, [r3, #0]
 8005f26:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8005f2a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	681b      	ldr	r3, [r3, #0]
 8005f30:	695a      	ldr	r2, [r3, #20]
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	681b      	ldr	r3, [r3, #0]
 8005f36:	f022 0201 	bic.w	r2, r2, #1
 8005f3a:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	2220      	movs	r2, #32
 8005f40:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	2200      	movs	r2, #0
 8005f48:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005f4e:	2b01      	cmp	r3, #1
 8005f50:	d135      	bne.n	8005fbe <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	2200      	movs	r2, #0
 8005f56:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	681b      	ldr	r3, [r3, #0]
 8005f5c:	330c      	adds	r3, #12
 8005f5e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f60:	697b      	ldr	r3, [r7, #20]
 8005f62:	e853 3f00 	ldrex	r3, [r3]
 8005f66:	613b      	str	r3, [r7, #16]
   return(result);
 8005f68:	693b      	ldr	r3, [r7, #16]
 8005f6a:	f023 0310 	bic.w	r3, r3, #16
 8005f6e:	627b      	str	r3, [r7, #36]	@ 0x24
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	681b      	ldr	r3, [r3, #0]
 8005f74:	330c      	adds	r3, #12
 8005f76:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005f78:	623a      	str	r2, [r7, #32]
 8005f7a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f7c:	69f9      	ldr	r1, [r7, #28]
 8005f7e:	6a3a      	ldr	r2, [r7, #32]
 8005f80:	e841 2300 	strex	r3, r2, [r1]
 8005f84:	61bb      	str	r3, [r7, #24]
   return(result);
 8005f86:	69bb      	ldr	r3, [r7, #24]
 8005f88:	2b00      	cmp	r3, #0
 8005f8a:	d1e5      	bne.n	8005f58 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	681b      	ldr	r3, [r3, #0]
 8005f90:	681b      	ldr	r3, [r3, #0]
 8005f92:	f003 0310 	and.w	r3, r3, #16
 8005f96:	2b10      	cmp	r3, #16
 8005f98:	d10a      	bne.n	8005fb0 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005f9a:	2300      	movs	r3, #0
 8005f9c:	60fb      	str	r3, [r7, #12]
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	681b      	ldr	r3, [r3, #0]
 8005fa2:	681b      	ldr	r3, [r3, #0]
 8005fa4:	60fb      	str	r3, [r7, #12]
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	681b      	ldr	r3, [r3, #0]
 8005faa:	685b      	ldr	r3, [r3, #4]
 8005fac:	60fb      	str	r3, [r7, #12]
 8005fae:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8005fb4:	4619      	mov	r1, r3
 8005fb6:	6878      	ldr	r0, [r7, #4]
 8005fb8:	f7ff fc48 	bl	800584c <HAL_UARTEx_RxEventCallback>
 8005fbc:	e002      	b.n	8005fc4 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8005fbe:	6878      	ldr	r0, [r7, #4]
 8005fc0:	f7ff fc26 	bl	8005810 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8005fc4:	2300      	movs	r3, #0
 8005fc6:	e002      	b.n	8005fce <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8005fc8:	2300      	movs	r3, #0
 8005fca:	e000      	b.n	8005fce <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8005fcc:	2302      	movs	r3, #2
  }
}
 8005fce:	4618      	mov	r0, r3
 8005fd0:	3730      	adds	r7, #48	@ 0x30
 8005fd2:	46bd      	mov	sp, r7
 8005fd4:	bd80      	pop	{r7, pc}
	...

08005fd8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005fd8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005fdc:	b0c0      	sub	sp, #256	@ 0x100
 8005fde:	af00      	add	r7, sp, #0
 8005fe0:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005fe4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005fe8:	681b      	ldr	r3, [r3, #0]
 8005fea:	691b      	ldr	r3, [r3, #16]
 8005fec:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8005ff0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005ff4:	68d9      	ldr	r1, [r3, #12]
 8005ff6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005ffa:	681a      	ldr	r2, [r3, #0]
 8005ffc:	ea40 0301 	orr.w	r3, r0, r1
 8006000:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8006002:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006006:	689a      	ldr	r2, [r3, #8]
 8006008:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800600c:	691b      	ldr	r3, [r3, #16]
 800600e:	431a      	orrs	r2, r3
 8006010:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006014:	695b      	ldr	r3, [r3, #20]
 8006016:	431a      	orrs	r2, r3
 8006018:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800601c:	69db      	ldr	r3, [r3, #28]
 800601e:	4313      	orrs	r3, r2
 8006020:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8006024:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006028:	681b      	ldr	r3, [r3, #0]
 800602a:	68db      	ldr	r3, [r3, #12]
 800602c:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8006030:	f021 010c 	bic.w	r1, r1, #12
 8006034:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006038:	681a      	ldr	r2, [r3, #0]
 800603a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800603e:	430b      	orrs	r3, r1
 8006040:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8006042:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006046:	681b      	ldr	r3, [r3, #0]
 8006048:	695b      	ldr	r3, [r3, #20]
 800604a:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 800604e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006052:	6999      	ldr	r1, [r3, #24]
 8006054:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006058:	681a      	ldr	r2, [r3, #0]
 800605a:	ea40 0301 	orr.w	r3, r0, r1
 800605e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8006060:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006064:	681a      	ldr	r2, [r3, #0]
 8006066:	4b8f      	ldr	r3, [pc, #572]	@ (80062a4 <UART_SetConfig+0x2cc>)
 8006068:	429a      	cmp	r2, r3
 800606a:	d005      	beq.n	8006078 <UART_SetConfig+0xa0>
 800606c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006070:	681a      	ldr	r2, [r3, #0]
 8006072:	4b8d      	ldr	r3, [pc, #564]	@ (80062a8 <UART_SetConfig+0x2d0>)
 8006074:	429a      	cmp	r2, r3
 8006076:	d104      	bne.n	8006082 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8006078:	f7fd ff68 	bl	8003f4c <HAL_RCC_GetPCLK2Freq>
 800607c:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8006080:	e003      	b.n	800608a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8006082:	f7fd ff4f 	bl	8003f24 <HAL_RCC_GetPCLK1Freq>
 8006086:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800608a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800608e:	69db      	ldr	r3, [r3, #28]
 8006090:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006094:	f040 810c 	bne.w	80062b0 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8006098:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800609c:	2200      	movs	r2, #0
 800609e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80060a2:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 80060a6:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 80060aa:	4622      	mov	r2, r4
 80060ac:	462b      	mov	r3, r5
 80060ae:	1891      	adds	r1, r2, r2
 80060b0:	65b9      	str	r1, [r7, #88]	@ 0x58
 80060b2:	415b      	adcs	r3, r3
 80060b4:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80060b6:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 80060ba:	4621      	mov	r1, r4
 80060bc:	eb12 0801 	adds.w	r8, r2, r1
 80060c0:	4629      	mov	r1, r5
 80060c2:	eb43 0901 	adc.w	r9, r3, r1
 80060c6:	f04f 0200 	mov.w	r2, #0
 80060ca:	f04f 0300 	mov.w	r3, #0
 80060ce:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80060d2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80060d6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80060da:	4690      	mov	r8, r2
 80060dc:	4699      	mov	r9, r3
 80060de:	4623      	mov	r3, r4
 80060e0:	eb18 0303 	adds.w	r3, r8, r3
 80060e4:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80060e8:	462b      	mov	r3, r5
 80060ea:	eb49 0303 	adc.w	r3, r9, r3
 80060ee:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80060f2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80060f6:	685b      	ldr	r3, [r3, #4]
 80060f8:	2200      	movs	r2, #0
 80060fa:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80060fe:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8006102:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8006106:	460b      	mov	r3, r1
 8006108:	18db      	adds	r3, r3, r3
 800610a:	653b      	str	r3, [r7, #80]	@ 0x50
 800610c:	4613      	mov	r3, r2
 800610e:	eb42 0303 	adc.w	r3, r2, r3
 8006112:	657b      	str	r3, [r7, #84]	@ 0x54
 8006114:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8006118:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 800611c:	f7fa fd56 	bl	8000bcc <__aeabi_uldivmod>
 8006120:	4602      	mov	r2, r0
 8006122:	460b      	mov	r3, r1
 8006124:	4b61      	ldr	r3, [pc, #388]	@ (80062ac <UART_SetConfig+0x2d4>)
 8006126:	fba3 2302 	umull	r2, r3, r3, r2
 800612a:	095b      	lsrs	r3, r3, #5
 800612c:	011c      	lsls	r4, r3, #4
 800612e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006132:	2200      	movs	r2, #0
 8006134:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8006138:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 800613c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8006140:	4642      	mov	r2, r8
 8006142:	464b      	mov	r3, r9
 8006144:	1891      	adds	r1, r2, r2
 8006146:	64b9      	str	r1, [r7, #72]	@ 0x48
 8006148:	415b      	adcs	r3, r3
 800614a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800614c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8006150:	4641      	mov	r1, r8
 8006152:	eb12 0a01 	adds.w	sl, r2, r1
 8006156:	4649      	mov	r1, r9
 8006158:	eb43 0b01 	adc.w	fp, r3, r1
 800615c:	f04f 0200 	mov.w	r2, #0
 8006160:	f04f 0300 	mov.w	r3, #0
 8006164:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8006168:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800616c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006170:	4692      	mov	sl, r2
 8006172:	469b      	mov	fp, r3
 8006174:	4643      	mov	r3, r8
 8006176:	eb1a 0303 	adds.w	r3, sl, r3
 800617a:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800617e:	464b      	mov	r3, r9
 8006180:	eb4b 0303 	adc.w	r3, fp, r3
 8006184:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8006188:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800618c:	685b      	ldr	r3, [r3, #4]
 800618e:	2200      	movs	r2, #0
 8006190:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8006194:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8006198:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 800619c:	460b      	mov	r3, r1
 800619e:	18db      	adds	r3, r3, r3
 80061a0:	643b      	str	r3, [r7, #64]	@ 0x40
 80061a2:	4613      	mov	r3, r2
 80061a4:	eb42 0303 	adc.w	r3, r2, r3
 80061a8:	647b      	str	r3, [r7, #68]	@ 0x44
 80061aa:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 80061ae:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 80061b2:	f7fa fd0b 	bl	8000bcc <__aeabi_uldivmod>
 80061b6:	4602      	mov	r2, r0
 80061b8:	460b      	mov	r3, r1
 80061ba:	4611      	mov	r1, r2
 80061bc:	4b3b      	ldr	r3, [pc, #236]	@ (80062ac <UART_SetConfig+0x2d4>)
 80061be:	fba3 2301 	umull	r2, r3, r3, r1
 80061c2:	095b      	lsrs	r3, r3, #5
 80061c4:	2264      	movs	r2, #100	@ 0x64
 80061c6:	fb02 f303 	mul.w	r3, r2, r3
 80061ca:	1acb      	subs	r3, r1, r3
 80061cc:	00db      	lsls	r3, r3, #3
 80061ce:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 80061d2:	4b36      	ldr	r3, [pc, #216]	@ (80062ac <UART_SetConfig+0x2d4>)
 80061d4:	fba3 2302 	umull	r2, r3, r3, r2
 80061d8:	095b      	lsrs	r3, r3, #5
 80061da:	005b      	lsls	r3, r3, #1
 80061dc:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 80061e0:	441c      	add	r4, r3
 80061e2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80061e6:	2200      	movs	r2, #0
 80061e8:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80061ec:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 80061f0:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 80061f4:	4642      	mov	r2, r8
 80061f6:	464b      	mov	r3, r9
 80061f8:	1891      	adds	r1, r2, r2
 80061fa:	63b9      	str	r1, [r7, #56]	@ 0x38
 80061fc:	415b      	adcs	r3, r3
 80061fe:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006200:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8006204:	4641      	mov	r1, r8
 8006206:	1851      	adds	r1, r2, r1
 8006208:	6339      	str	r1, [r7, #48]	@ 0x30
 800620a:	4649      	mov	r1, r9
 800620c:	414b      	adcs	r3, r1
 800620e:	637b      	str	r3, [r7, #52]	@ 0x34
 8006210:	f04f 0200 	mov.w	r2, #0
 8006214:	f04f 0300 	mov.w	r3, #0
 8006218:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 800621c:	4659      	mov	r1, fp
 800621e:	00cb      	lsls	r3, r1, #3
 8006220:	4651      	mov	r1, sl
 8006222:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006226:	4651      	mov	r1, sl
 8006228:	00ca      	lsls	r2, r1, #3
 800622a:	4610      	mov	r0, r2
 800622c:	4619      	mov	r1, r3
 800622e:	4603      	mov	r3, r0
 8006230:	4642      	mov	r2, r8
 8006232:	189b      	adds	r3, r3, r2
 8006234:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8006238:	464b      	mov	r3, r9
 800623a:	460a      	mov	r2, r1
 800623c:	eb42 0303 	adc.w	r3, r2, r3
 8006240:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8006244:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006248:	685b      	ldr	r3, [r3, #4]
 800624a:	2200      	movs	r2, #0
 800624c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8006250:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8006254:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8006258:	460b      	mov	r3, r1
 800625a:	18db      	adds	r3, r3, r3
 800625c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800625e:	4613      	mov	r3, r2
 8006260:	eb42 0303 	adc.w	r3, r2, r3
 8006264:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006266:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800626a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 800626e:	f7fa fcad 	bl	8000bcc <__aeabi_uldivmod>
 8006272:	4602      	mov	r2, r0
 8006274:	460b      	mov	r3, r1
 8006276:	4b0d      	ldr	r3, [pc, #52]	@ (80062ac <UART_SetConfig+0x2d4>)
 8006278:	fba3 1302 	umull	r1, r3, r3, r2
 800627c:	095b      	lsrs	r3, r3, #5
 800627e:	2164      	movs	r1, #100	@ 0x64
 8006280:	fb01 f303 	mul.w	r3, r1, r3
 8006284:	1ad3      	subs	r3, r2, r3
 8006286:	00db      	lsls	r3, r3, #3
 8006288:	3332      	adds	r3, #50	@ 0x32
 800628a:	4a08      	ldr	r2, [pc, #32]	@ (80062ac <UART_SetConfig+0x2d4>)
 800628c:	fba2 2303 	umull	r2, r3, r2, r3
 8006290:	095b      	lsrs	r3, r3, #5
 8006292:	f003 0207 	and.w	r2, r3, #7
 8006296:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800629a:	681b      	ldr	r3, [r3, #0]
 800629c:	4422      	add	r2, r4
 800629e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80062a0:	e106      	b.n	80064b0 <UART_SetConfig+0x4d8>
 80062a2:	bf00      	nop
 80062a4:	40011000 	.word	0x40011000
 80062a8:	40011400 	.word	0x40011400
 80062ac:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80062b0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80062b4:	2200      	movs	r2, #0
 80062b6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80062ba:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 80062be:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 80062c2:	4642      	mov	r2, r8
 80062c4:	464b      	mov	r3, r9
 80062c6:	1891      	adds	r1, r2, r2
 80062c8:	6239      	str	r1, [r7, #32]
 80062ca:	415b      	adcs	r3, r3
 80062cc:	627b      	str	r3, [r7, #36]	@ 0x24
 80062ce:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80062d2:	4641      	mov	r1, r8
 80062d4:	1854      	adds	r4, r2, r1
 80062d6:	4649      	mov	r1, r9
 80062d8:	eb43 0501 	adc.w	r5, r3, r1
 80062dc:	f04f 0200 	mov.w	r2, #0
 80062e0:	f04f 0300 	mov.w	r3, #0
 80062e4:	00eb      	lsls	r3, r5, #3
 80062e6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80062ea:	00e2      	lsls	r2, r4, #3
 80062ec:	4614      	mov	r4, r2
 80062ee:	461d      	mov	r5, r3
 80062f0:	4643      	mov	r3, r8
 80062f2:	18e3      	adds	r3, r4, r3
 80062f4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80062f8:	464b      	mov	r3, r9
 80062fa:	eb45 0303 	adc.w	r3, r5, r3
 80062fe:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8006302:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006306:	685b      	ldr	r3, [r3, #4]
 8006308:	2200      	movs	r2, #0
 800630a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800630e:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8006312:	f04f 0200 	mov.w	r2, #0
 8006316:	f04f 0300 	mov.w	r3, #0
 800631a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 800631e:	4629      	mov	r1, r5
 8006320:	008b      	lsls	r3, r1, #2
 8006322:	4621      	mov	r1, r4
 8006324:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006328:	4621      	mov	r1, r4
 800632a:	008a      	lsls	r2, r1, #2
 800632c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8006330:	f7fa fc4c 	bl	8000bcc <__aeabi_uldivmod>
 8006334:	4602      	mov	r2, r0
 8006336:	460b      	mov	r3, r1
 8006338:	4b60      	ldr	r3, [pc, #384]	@ (80064bc <UART_SetConfig+0x4e4>)
 800633a:	fba3 2302 	umull	r2, r3, r3, r2
 800633e:	095b      	lsrs	r3, r3, #5
 8006340:	011c      	lsls	r4, r3, #4
 8006342:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006346:	2200      	movs	r2, #0
 8006348:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800634c:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8006350:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8006354:	4642      	mov	r2, r8
 8006356:	464b      	mov	r3, r9
 8006358:	1891      	adds	r1, r2, r2
 800635a:	61b9      	str	r1, [r7, #24]
 800635c:	415b      	adcs	r3, r3
 800635e:	61fb      	str	r3, [r7, #28]
 8006360:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006364:	4641      	mov	r1, r8
 8006366:	1851      	adds	r1, r2, r1
 8006368:	6139      	str	r1, [r7, #16]
 800636a:	4649      	mov	r1, r9
 800636c:	414b      	adcs	r3, r1
 800636e:	617b      	str	r3, [r7, #20]
 8006370:	f04f 0200 	mov.w	r2, #0
 8006374:	f04f 0300 	mov.w	r3, #0
 8006378:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800637c:	4659      	mov	r1, fp
 800637e:	00cb      	lsls	r3, r1, #3
 8006380:	4651      	mov	r1, sl
 8006382:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006386:	4651      	mov	r1, sl
 8006388:	00ca      	lsls	r2, r1, #3
 800638a:	4610      	mov	r0, r2
 800638c:	4619      	mov	r1, r3
 800638e:	4603      	mov	r3, r0
 8006390:	4642      	mov	r2, r8
 8006392:	189b      	adds	r3, r3, r2
 8006394:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8006398:	464b      	mov	r3, r9
 800639a:	460a      	mov	r2, r1
 800639c:	eb42 0303 	adc.w	r3, r2, r3
 80063a0:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80063a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80063a8:	685b      	ldr	r3, [r3, #4]
 80063aa:	2200      	movs	r2, #0
 80063ac:	67bb      	str	r3, [r7, #120]	@ 0x78
 80063ae:	67fa      	str	r2, [r7, #124]	@ 0x7c
 80063b0:	f04f 0200 	mov.w	r2, #0
 80063b4:	f04f 0300 	mov.w	r3, #0
 80063b8:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 80063bc:	4649      	mov	r1, r9
 80063be:	008b      	lsls	r3, r1, #2
 80063c0:	4641      	mov	r1, r8
 80063c2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80063c6:	4641      	mov	r1, r8
 80063c8:	008a      	lsls	r2, r1, #2
 80063ca:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 80063ce:	f7fa fbfd 	bl	8000bcc <__aeabi_uldivmod>
 80063d2:	4602      	mov	r2, r0
 80063d4:	460b      	mov	r3, r1
 80063d6:	4611      	mov	r1, r2
 80063d8:	4b38      	ldr	r3, [pc, #224]	@ (80064bc <UART_SetConfig+0x4e4>)
 80063da:	fba3 2301 	umull	r2, r3, r3, r1
 80063de:	095b      	lsrs	r3, r3, #5
 80063e0:	2264      	movs	r2, #100	@ 0x64
 80063e2:	fb02 f303 	mul.w	r3, r2, r3
 80063e6:	1acb      	subs	r3, r1, r3
 80063e8:	011b      	lsls	r3, r3, #4
 80063ea:	3332      	adds	r3, #50	@ 0x32
 80063ec:	4a33      	ldr	r2, [pc, #204]	@ (80064bc <UART_SetConfig+0x4e4>)
 80063ee:	fba2 2303 	umull	r2, r3, r2, r3
 80063f2:	095b      	lsrs	r3, r3, #5
 80063f4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80063f8:	441c      	add	r4, r3
 80063fa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80063fe:	2200      	movs	r2, #0
 8006400:	673b      	str	r3, [r7, #112]	@ 0x70
 8006402:	677a      	str	r2, [r7, #116]	@ 0x74
 8006404:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8006408:	4642      	mov	r2, r8
 800640a:	464b      	mov	r3, r9
 800640c:	1891      	adds	r1, r2, r2
 800640e:	60b9      	str	r1, [r7, #8]
 8006410:	415b      	adcs	r3, r3
 8006412:	60fb      	str	r3, [r7, #12]
 8006414:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8006418:	4641      	mov	r1, r8
 800641a:	1851      	adds	r1, r2, r1
 800641c:	6039      	str	r1, [r7, #0]
 800641e:	4649      	mov	r1, r9
 8006420:	414b      	adcs	r3, r1
 8006422:	607b      	str	r3, [r7, #4]
 8006424:	f04f 0200 	mov.w	r2, #0
 8006428:	f04f 0300 	mov.w	r3, #0
 800642c:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8006430:	4659      	mov	r1, fp
 8006432:	00cb      	lsls	r3, r1, #3
 8006434:	4651      	mov	r1, sl
 8006436:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800643a:	4651      	mov	r1, sl
 800643c:	00ca      	lsls	r2, r1, #3
 800643e:	4610      	mov	r0, r2
 8006440:	4619      	mov	r1, r3
 8006442:	4603      	mov	r3, r0
 8006444:	4642      	mov	r2, r8
 8006446:	189b      	adds	r3, r3, r2
 8006448:	66bb      	str	r3, [r7, #104]	@ 0x68
 800644a:	464b      	mov	r3, r9
 800644c:	460a      	mov	r2, r1
 800644e:	eb42 0303 	adc.w	r3, r2, r3
 8006452:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8006454:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006458:	685b      	ldr	r3, [r3, #4]
 800645a:	2200      	movs	r2, #0
 800645c:	663b      	str	r3, [r7, #96]	@ 0x60
 800645e:	667a      	str	r2, [r7, #100]	@ 0x64
 8006460:	f04f 0200 	mov.w	r2, #0
 8006464:	f04f 0300 	mov.w	r3, #0
 8006468:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 800646c:	4649      	mov	r1, r9
 800646e:	008b      	lsls	r3, r1, #2
 8006470:	4641      	mov	r1, r8
 8006472:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006476:	4641      	mov	r1, r8
 8006478:	008a      	lsls	r2, r1, #2
 800647a:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 800647e:	f7fa fba5 	bl	8000bcc <__aeabi_uldivmod>
 8006482:	4602      	mov	r2, r0
 8006484:	460b      	mov	r3, r1
 8006486:	4b0d      	ldr	r3, [pc, #52]	@ (80064bc <UART_SetConfig+0x4e4>)
 8006488:	fba3 1302 	umull	r1, r3, r3, r2
 800648c:	095b      	lsrs	r3, r3, #5
 800648e:	2164      	movs	r1, #100	@ 0x64
 8006490:	fb01 f303 	mul.w	r3, r1, r3
 8006494:	1ad3      	subs	r3, r2, r3
 8006496:	011b      	lsls	r3, r3, #4
 8006498:	3332      	adds	r3, #50	@ 0x32
 800649a:	4a08      	ldr	r2, [pc, #32]	@ (80064bc <UART_SetConfig+0x4e4>)
 800649c:	fba2 2303 	umull	r2, r3, r2, r3
 80064a0:	095b      	lsrs	r3, r3, #5
 80064a2:	f003 020f 	and.w	r2, r3, #15
 80064a6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80064aa:	681b      	ldr	r3, [r3, #0]
 80064ac:	4422      	add	r2, r4
 80064ae:	609a      	str	r2, [r3, #8]
}
 80064b0:	bf00      	nop
 80064b2:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 80064b6:	46bd      	mov	sp, r7
 80064b8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80064bc:	51eb851f 	.word	0x51eb851f

080064c0 <__NVIC_SetPriority>:
{
 80064c0:	b480      	push	{r7}
 80064c2:	b083      	sub	sp, #12
 80064c4:	af00      	add	r7, sp, #0
 80064c6:	4603      	mov	r3, r0
 80064c8:	6039      	str	r1, [r7, #0]
 80064ca:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80064cc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80064d0:	2b00      	cmp	r3, #0
 80064d2:	db0a      	blt.n	80064ea <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80064d4:	683b      	ldr	r3, [r7, #0]
 80064d6:	b2da      	uxtb	r2, r3
 80064d8:	490c      	ldr	r1, [pc, #48]	@ (800650c <__NVIC_SetPriority+0x4c>)
 80064da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80064de:	0112      	lsls	r2, r2, #4
 80064e0:	b2d2      	uxtb	r2, r2
 80064e2:	440b      	add	r3, r1
 80064e4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 80064e8:	e00a      	b.n	8006500 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80064ea:	683b      	ldr	r3, [r7, #0]
 80064ec:	b2da      	uxtb	r2, r3
 80064ee:	4908      	ldr	r1, [pc, #32]	@ (8006510 <__NVIC_SetPriority+0x50>)
 80064f0:	79fb      	ldrb	r3, [r7, #7]
 80064f2:	f003 030f 	and.w	r3, r3, #15
 80064f6:	3b04      	subs	r3, #4
 80064f8:	0112      	lsls	r2, r2, #4
 80064fa:	b2d2      	uxtb	r2, r2
 80064fc:	440b      	add	r3, r1
 80064fe:	761a      	strb	r2, [r3, #24]
}
 8006500:	bf00      	nop
 8006502:	370c      	adds	r7, #12
 8006504:	46bd      	mov	sp, r7
 8006506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800650a:	4770      	bx	lr
 800650c:	e000e100 	.word	0xe000e100
 8006510:	e000ed00 	.word	0xe000ed00

08006514 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8006514:	b580      	push	{r7, lr}
 8006516:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8006518:	4b05      	ldr	r3, [pc, #20]	@ (8006530 <SysTick_Handler+0x1c>)
 800651a:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 800651c:	f001 fd40 	bl	8007fa0 <xTaskGetSchedulerState>
 8006520:	4603      	mov	r3, r0
 8006522:	2b01      	cmp	r3, #1
 8006524:	d001      	beq.n	800652a <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8006526:	f002 fb37 	bl	8008b98 <xPortSysTickHandler>
  }
}
 800652a:	bf00      	nop
 800652c:	bd80      	pop	{r7, pc}
 800652e:	bf00      	nop
 8006530:	e000e010 	.word	0xe000e010

08006534 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8006534:	b580      	push	{r7, lr}
 8006536:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8006538:	2100      	movs	r1, #0
 800653a:	f06f 0004 	mvn.w	r0, #4
 800653e:	f7ff ffbf 	bl	80064c0 <__NVIC_SetPriority>
#endif
}
 8006542:	bf00      	nop
 8006544:	bd80      	pop	{r7, pc}
	...

08006548 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8006548:	b480      	push	{r7}
 800654a:	b083      	sub	sp, #12
 800654c:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800654e:	f3ef 8305 	mrs	r3, IPSR
 8006552:	603b      	str	r3, [r7, #0]
  return(result);
 8006554:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8006556:	2b00      	cmp	r3, #0
 8006558:	d003      	beq.n	8006562 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800655a:	f06f 0305 	mvn.w	r3, #5
 800655e:	607b      	str	r3, [r7, #4]
 8006560:	e00c      	b.n	800657c <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8006562:	4b0a      	ldr	r3, [pc, #40]	@ (800658c <osKernelInitialize+0x44>)
 8006564:	681b      	ldr	r3, [r3, #0]
 8006566:	2b00      	cmp	r3, #0
 8006568:	d105      	bne.n	8006576 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800656a:	4b08      	ldr	r3, [pc, #32]	@ (800658c <osKernelInitialize+0x44>)
 800656c:	2201      	movs	r2, #1
 800656e:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8006570:	2300      	movs	r3, #0
 8006572:	607b      	str	r3, [r7, #4]
 8006574:	e002      	b.n	800657c <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8006576:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800657a:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800657c:	687b      	ldr	r3, [r7, #4]
}
 800657e:	4618      	mov	r0, r3
 8006580:	370c      	adds	r7, #12
 8006582:	46bd      	mov	sp, r7
 8006584:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006588:	4770      	bx	lr
 800658a:	bf00      	nop
 800658c:	20004798 	.word	0x20004798

08006590 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8006590:	b580      	push	{r7, lr}
 8006592:	b082      	sub	sp, #8
 8006594:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006596:	f3ef 8305 	mrs	r3, IPSR
 800659a:	603b      	str	r3, [r7, #0]
  return(result);
 800659c:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800659e:	2b00      	cmp	r3, #0
 80065a0:	d003      	beq.n	80065aa <osKernelStart+0x1a>
    stat = osErrorISR;
 80065a2:	f06f 0305 	mvn.w	r3, #5
 80065a6:	607b      	str	r3, [r7, #4]
 80065a8:	e010      	b.n	80065cc <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 80065aa:	4b0b      	ldr	r3, [pc, #44]	@ (80065d8 <osKernelStart+0x48>)
 80065ac:	681b      	ldr	r3, [r3, #0]
 80065ae:	2b01      	cmp	r3, #1
 80065b0:	d109      	bne.n	80065c6 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 80065b2:	f7ff ffbf 	bl	8006534 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 80065b6:	4b08      	ldr	r3, [pc, #32]	@ (80065d8 <osKernelStart+0x48>)
 80065b8:	2202      	movs	r2, #2
 80065ba:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 80065bc:	f001 f87a 	bl	80076b4 <vTaskStartScheduler>
      stat = osOK;
 80065c0:	2300      	movs	r3, #0
 80065c2:	607b      	str	r3, [r7, #4]
 80065c4:	e002      	b.n	80065cc <osKernelStart+0x3c>
    } else {
      stat = osError;
 80065c6:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80065ca:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80065cc:	687b      	ldr	r3, [r7, #4]
}
 80065ce:	4618      	mov	r0, r3
 80065d0:	3708      	adds	r7, #8
 80065d2:	46bd      	mov	sp, r7
 80065d4:	bd80      	pop	{r7, pc}
 80065d6:	bf00      	nop
 80065d8:	20004798 	.word	0x20004798

080065dc <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 80065dc:	b580      	push	{r7, lr}
 80065de:	b08e      	sub	sp, #56	@ 0x38
 80065e0:	af04      	add	r7, sp, #16
 80065e2:	60f8      	str	r0, [r7, #12]
 80065e4:	60b9      	str	r1, [r7, #8]
 80065e6:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 80065e8:	2300      	movs	r3, #0
 80065ea:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80065ec:	f3ef 8305 	mrs	r3, IPSR
 80065f0:	617b      	str	r3, [r7, #20]
  return(result);
 80065f2:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 80065f4:	2b00      	cmp	r3, #0
 80065f6:	d17e      	bne.n	80066f6 <osThreadNew+0x11a>
 80065f8:	68fb      	ldr	r3, [r7, #12]
 80065fa:	2b00      	cmp	r3, #0
 80065fc:	d07b      	beq.n	80066f6 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 80065fe:	2380      	movs	r3, #128	@ 0x80
 8006600:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8006602:	2318      	movs	r3, #24
 8006604:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8006606:	2300      	movs	r3, #0
 8006608:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 800660a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800660e:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	2b00      	cmp	r3, #0
 8006614:	d045      	beq.n	80066a2 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	681b      	ldr	r3, [r3, #0]
 800661a:	2b00      	cmp	r3, #0
 800661c:	d002      	beq.n	8006624 <osThreadNew+0x48>
        name = attr->name;
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	681b      	ldr	r3, [r3, #0]
 8006622:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	699b      	ldr	r3, [r3, #24]
 8006628:	2b00      	cmp	r3, #0
 800662a:	d002      	beq.n	8006632 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	699b      	ldr	r3, [r3, #24]
 8006630:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8006632:	69fb      	ldr	r3, [r7, #28]
 8006634:	2b00      	cmp	r3, #0
 8006636:	d008      	beq.n	800664a <osThreadNew+0x6e>
 8006638:	69fb      	ldr	r3, [r7, #28]
 800663a:	2b38      	cmp	r3, #56	@ 0x38
 800663c:	d805      	bhi.n	800664a <osThreadNew+0x6e>
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	685b      	ldr	r3, [r3, #4]
 8006642:	f003 0301 	and.w	r3, r3, #1
 8006646:	2b00      	cmp	r3, #0
 8006648:	d001      	beq.n	800664e <osThreadNew+0x72>
        return (NULL);
 800664a:	2300      	movs	r3, #0
 800664c:	e054      	b.n	80066f8 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	695b      	ldr	r3, [r3, #20]
 8006652:	2b00      	cmp	r3, #0
 8006654:	d003      	beq.n	800665e <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	695b      	ldr	r3, [r3, #20]
 800665a:	089b      	lsrs	r3, r3, #2
 800665c:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	689b      	ldr	r3, [r3, #8]
 8006662:	2b00      	cmp	r3, #0
 8006664:	d00e      	beq.n	8006684 <osThreadNew+0xa8>
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	68db      	ldr	r3, [r3, #12]
 800666a:	2b5b      	cmp	r3, #91	@ 0x5b
 800666c:	d90a      	bls.n	8006684 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8006672:	2b00      	cmp	r3, #0
 8006674:	d006      	beq.n	8006684 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	695b      	ldr	r3, [r3, #20]
 800667a:	2b00      	cmp	r3, #0
 800667c:	d002      	beq.n	8006684 <osThreadNew+0xa8>
        mem = 1;
 800667e:	2301      	movs	r3, #1
 8006680:	61bb      	str	r3, [r7, #24]
 8006682:	e010      	b.n	80066a6 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	689b      	ldr	r3, [r3, #8]
 8006688:	2b00      	cmp	r3, #0
 800668a:	d10c      	bne.n	80066a6 <osThreadNew+0xca>
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	68db      	ldr	r3, [r3, #12]
 8006690:	2b00      	cmp	r3, #0
 8006692:	d108      	bne.n	80066a6 <osThreadNew+0xca>
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	691b      	ldr	r3, [r3, #16]
 8006698:	2b00      	cmp	r3, #0
 800669a:	d104      	bne.n	80066a6 <osThreadNew+0xca>
          mem = 0;
 800669c:	2300      	movs	r3, #0
 800669e:	61bb      	str	r3, [r7, #24]
 80066a0:	e001      	b.n	80066a6 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 80066a2:	2300      	movs	r3, #0
 80066a4:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 80066a6:	69bb      	ldr	r3, [r7, #24]
 80066a8:	2b01      	cmp	r3, #1
 80066aa:	d110      	bne.n	80066ce <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 80066b0:	687a      	ldr	r2, [r7, #4]
 80066b2:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80066b4:	9202      	str	r2, [sp, #8]
 80066b6:	9301      	str	r3, [sp, #4]
 80066b8:	69fb      	ldr	r3, [r7, #28]
 80066ba:	9300      	str	r3, [sp, #0]
 80066bc:	68bb      	ldr	r3, [r7, #8]
 80066be:	6a3a      	ldr	r2, [r7, #32]
 80066c0:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80066c2:	68f8      	ldr	r0, [r7, #12]
 80066c4:	f000 fe1a 	bl	80072fc <xTaskCreateStatic>
 80066c8:	4603      	mov	r3, r0
 80066ca:	613b      	str	r3, [r7, #16]
 80066cc:	e013      	b.n	80066f6 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 80066ce:	69bb      	ldr	r3, [r7, #24]
 80066d0:	2b00      	cmp	r3, #0
 80066d2:	d110      	bne.n	80066f6 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 80066d4:	6a3b      	ldr	r3, [r7, #32]
 80066d6:	b29a      	uxth	r2, r3
 80066d8:	f107 0310 	add.w	r3, r7, #16
 80066dc:	9301      	str	r3, [sp, #4]
 80066de:	69fb      	ldr	r3, [r7, #28]
 80066e0:	9300      	str	r3, [sp, #0]
 80066e2:	68bb      	ldr	r3, [r7, #8]
 80066e4:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80066e6:	68f8      	ldr	r0, [r7, #12]
 80066e8:	f000 fe68 	bl	80073bc <xTaskCreate>
 80066ec:	4603      	mov	r3, r0
 80066ee:	2b01      	cmp	r3, #1
 80066f0:	d001      	beq.n	80066f6 <osThreadNew+0x11a>
            hTask = NULL;
 80066f2:	2300      	movs	r3, #0
 80066f4:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 80066f6:	693b      	ldr	r3, [r7, #16]
}
 80066f8:	4618      	mov	r0, r3
 80066fa:	3728      	adds	r7, #40	@ 0x28
 80066fc:	46bd      	mov	sp, r7
 80066fe:	bd80      	pop	{r7, pc}

08006700 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8006700:	b580      	push	{r7, lr}
 8006702:	b084      	sub	sp, #16
 8006704:	af00      	add	r7, sp, #0
 8006706:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006708:	f3ef 8305 	mrs	r3, IPSR
 800670c:	60bb      	str	r3, [r7, #8]
  return(result);
 800670e:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8006710:	2b00      	cmp	r3, #0
 8006712:	d003      	beq.n	800671c <osDelay+0x1c>
    stat = osErrorISR;
 8006714:	f06f 0305 	mvn.w	r3, #5
 8006718:	60fb      	str	r3, [r7, #12]
 800671a:	e007      	b.n	800672c <osDelay+0x2c>
  }
  else {
    stat = osOK;
 800671c:	2300      	movs	r3, #0
 800671e:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	2b00      	cmp	r3, #0
 8006724:	d002      	beq.n	800672c <osDelay+0x2c>
      vTaskDelay(ticks);
 8006726:	6878      	ldr	r0, [r7, #4]
 8006728:	f000 ff8e 	bl	8007648 <vTaskDelay>
    }
  }

  return (stat);
 800672c:	68fb      	ldr	r3, [r7, #12]
}
 800672e:	4618      	mov	r0, r3
 8006730:	3710      	adds	r7, #16
 8006732:	46bd      	mov	sp, r7
 8006734:	bd80      	pop	{r7, pc}
	...

08006738 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8006738:	b480      	push	{r7}
 800673a:	b085      	sub	sp, #20
 800673c:	af00      	add	r7, sp, #0
 800673e:	60f8      	str	r0, [r7, #12]
 8006740:	60b9      	str	r1, [r7, #8]
 8006742:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8006744:	68fb      	ldr	r3, [r7, #12]
 8006746:	4a07      	ldr	r2, [pc, #28]	@ (8006764 <vApplicationGetIdleTaskMemory+0x2c>)
 8006748:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800674a:	68bb      	ldr	r3, [r7, #8]
 800674c:	4a06      	ldr	r2, [pc, #24]	@ (8006768 <vApplicationGetIdleTaskMemory+0x30>)
 800674e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	2280      	movs	r2, #128	@ 0x80
 8006754:	601a      	str	r2, [r3, #0]
}
 8006756:	bf00      	nop
 8006758:	3714      	adds	r7, #20
 800675a:	46bd      	mov	sp, r7
 800675c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006760:	4770      	bx	lr
 8006762:	bf00      	nop
 8006764:	2000479c 	.word	0x2000479c
 8006768:	200047f8 	.word	0x200047f8

0800676c <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800676c:	b480      	push	{r7}
 800676e:	b085      	sub	sp, #20
 8006770:	af00      	add	r7, sp, #0
 8006772:	60f8      	str	r0, [r7, #12]
 8006774:	60b9      	str	r1, [r7, #8]
 8006776:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8006778:	68fb      	ldr	r3, [r7, #12]
 800677a:	4a07      	ldr	r2, [pc, #28]	@ (8006798 <vApplicationGetTimerTaskMemory+0x2c>)
 800677c:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800677e:	68bb      	ldr	r3, [r7, #8]
 8006780:	4a06      	ldr	r2, [pc, #24]	@ (800679c <vApplicationGetTimerTaskMemory+0x30>)
 8006782:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800678a:	601a      	str	r2, [r3, #0]
}
 800678c:	bf00      	nop
 800678e:	3714      	adds	r7, #20
 8006790:	46bd      	mov	sp, r7
 8006792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006796:	4770      	bx	lr
 8006798:	200049f8 	.word	0x200049f8
 800679c:	20004a54 	.word	0x20004a54

080067a0 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80067a0:	b480      	push	{r7}
 80067a2:	b083      	sub	sp, #12
 80067a4:	af00      	add	r7, sp, #0
 80067a6:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	f103 0208 	add.w	r2, r3, #8
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80067b8:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	f103 0208 	add.w	r2, r3, #8
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	f103 0208 	add.w	r2, r3, #8
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	2200      	movs	r2, #0
 80067d2:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80067d4:	bf00      	nop
 80067d6:	370c      	adds	r7, #12
 80067d8:	46bd      	mov	sp, r7
 80067da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067de:	4770      	bx	lr

080067e0 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80067e0:	b480      	push	{r7}
 80067e2:	b083      	sub	sp, #12
 80067e4:	af00      	add	r7, sp, #0
 80067e6:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	2200      	movs	r2, #0
 80067ec:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80067ee:	bf00      	nop
 80067f0:	370c      	adds	r7, #12
 80067f2:	46bd      	mov	sp, r7
 80067f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067f8:	4770      	bx	lr

080067fa <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80067fa:	b480      	push	{r7}
 80067fc:	b085      	sub	sp, #20
 80067fe:	af00      	add	r7, sp, #0
 8006800:	6078      	str	r0, [r7, #4]
 8006802:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	685b      	ldr	r3, [r3, #4]
 8006808:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800680a:	683b      	ldr	r3, [r7, #0]
 800680c:	68fa      	ldr	r2, [r7, #12]
 800680e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8006810:	68fb      	ldr	r3, [r7, #12]
 8006812:	689a      	ldr	r2, [r3, #8]
 8006814:	683b      	ldr	r3, [r7, #0]
 8006816:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8006818:	68fb      	ldr	r3, [r7, #12]
 800681a:	689b      	ldr	r3, [r3, #8]
 800681c:	683a      	ldr	r2, [r7, #0]
 800681e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8006820:	68fb      	ldr	r3, [r7, #12]
 8006822:	683a      	ldr	r2, [r7, #0]
 8006824:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8006826:	683b      	ldr	r3, [r7, #0]
 8006828:	687a      	ldr	r2, [r7, #4]
 800682a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	681b      	ldr	r3, [r3, #0]
 8006830:	1c5a      	adds	r2, r3, #1
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	601a      	str	r2, [r3, #0]
}
 8006836:	bf00      	nop
 8006838:	3714      	adds	r7, #20
 800683a:	46bd      	mov	sp, r7
 800683c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006840:	4770      	bx	lr

08006842 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8006842:	b480      	push	{r7}
 8006844:	b085      	sub	sp, #20
 8006846:	af00      	add	r7, sp, #0
 8006848:	6078      	str	r0, [r7, #4]
 800684a:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800684c:	683b      	ldr	r3, [r7, #0]
 800684e:	681b      	ldr	r3, [r3, #0]
 8006850:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8006852:	68bb      	ldr	r3, [r7, #8]
 8006854:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8006858:	d103      	bne.n	8006862 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	691b      	ldr	r3, [r3, #16]
 800685e:	60fb      	str	r3, [r7, #12]
 8006860:	e00c      	b.n	800687c <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	3308      	adds	r3, #8
 8006866:	60fb      	str	r3, [r7, #12]
 8006868:	e002      	b.n	8006870 <vListInsert+0x2e>
 800686a:	68fb      	ldr	r3, [r7, #12]
 800686c:	685b      	ldr	r3, [r3, #4]
 800686e:	60fb      	str	r3, [r7, #12]
 8006870:	68fb      	ldr	r3, [r7, #12]
 8006872:	685b      	ldr	r3, [r3, #4]
 8006874:	681b      	ldr	r3, [r3, #0]
 8006876:	68ba      	ldr	r2, [r7, #8]
 8006878:	429a      	cmp	r2, r3
 800687a:	d2f6      	bcs.n	800686a <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800687c:	68fb      	ldr	r3, [r7, #12]
 800687e:	685a      	ldr	r2, [r3, #4]
 8006880:	683b      	ldr	r3, [r7, #0]
 8006882:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8006884:	683b      	ldr	r3, [r7, #0]
 8006886:	685b      	ldr	r3, [r3, #4]
 8006888:	683a      	ldr	r2, [r7, #0]
 800688a:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800688c:	683b      	ldr	r3, [r7, #0]
 800688e:	68fa      	ldr	r2, [r7, #12]
 8006890:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8006892:	68fb      	ldr	r3, [r7, #12]
 8006894:	683a      	ldr	r2, [r7, #0]
 8006896:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8006898:	683b      	ldr	r3, [r7, #0]
 800689a:	687a      	ldr	r2, [r7, #4]
 800689c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	681b      	ldr	r3, [r3, #0]
 80068a2:	1c5a      	adds	r2, r3, #1
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	601a      	str	r2, [r3, #0]
}
 80068a8:	bf00      	nop
 80068aa:	3714      	adds	r7, #20
 80068ac:	46bd      	mov	sp, r7
 80068ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068b2:	4770      	bx	lr

080068b4 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80068b4:	b480      	push	{r7}
 80068b6:	b085      	sub	sp, #20
 80068b8:	af00      	add	r7, sp, #0
 80068ba:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	691b      	ldr	r3, [r3, #16]
 80068c0:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	685b      	ldr	r3, [r3, #4]
 80068c6:	687a      	ldr	r2, [r7, #4]
 80068c8:	6892      	ldr	r2, [r2, #8]
 80068ca:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	689b      	ldr	r3, [r3, #8]
 80068d0:	687a      	ldr	r2, [r7, #4]
 80068d2:	6852      	ldr	r2, [r2, #4]
 80068d4:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80068d6:	68fb      	ldr	r3, [r7, #12]
 80068d8:	685b      	ldr	r3, [r3, #4]
 80068da:	687a      	ldr	r2, [r7, #4]
 80068dc:	429a      	cmp	r2, r3
 80068de:	d103      	bne.n	80068e8 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	689a      	ldr	r2, [r3, #8]
 80068e4:	68fb      	ldr	r3, [r7, #12]
 80068e6:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	2200      	movs	r2, #0
 80068ec:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80068ee:	68fb      	ldr	r3, [r7, #12]
 80068f0:	681b      	ldr	r3, [r3, #0]
 80068f2:	1e5a      	subs	r2, r3, #1
 80068f4:	68fb      	ldr	r3, [r7, #12]
 80068f6:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80068f8:	68fb      	ldr	r3, [r7, #12]
 80068fa:	681b      	ldr	r3, [r3, #0]
}
 80068fc:	4618      	mov	r0, r3
 80068fe:	3714      	adds	r7, #20
 8006900:	46bd      	mov	sp, r7
 8006902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006906:	4770      	bx	lr

08006908 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8006908:	b580      	push	{r7, lr}
 800690a:	b084      	sub	sp, #16
 800690c:	af00      	add	r7, sp, #0
 800690e:	6078      	str	r0, [r7, #4]
 8006910:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8006916:	68fb      	ldr	r3, [r7, #12]
 8006918:	2b00      	cmp	r3, #0
 800691a:	d10b      	bne.n	8006934 <xQueueGenericReset+0x2c>
	__asm volatile
 800691c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006920:	f383 8811 	msr	BASEPRI, r3
 8006924:	f3bf 8f6f 	isb	sy
 8006928:	f3bf 8f4f 	dsb	sy
 800692c:	60bb      	str	r3, [r7, #8]
}
 800692e:	bf00      	nop
 8006930:	bf00      	nop
 8006932:	e7fd      	b.n	8006930 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8006934:	f002 f8a0 	bl	8008a78 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8006938:	68fb      	ldr	r3, [r7, #12]
 800693a:	681a      	ldr	r2, [r3, #0]
 800693c:	68fb      	ldr	r3, [r7, #12]
 800693e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006940:	68f9      	ldr	r1, [r7, #12]
 8006942:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8006944:	fb01 f303 	mul.w	r3, r1, r3
 8006948:	441a      	add	r2, r3
 800694a:	68fb      	ldr	r3, [r7, #12]
 800694c:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800694e:	68fb      	ldr	r3, [r7, #12]
 8006950:	2200      	movs	r2, #0
 8006952:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8006954:	68fb      	ldr	r3, [r7, #12]
 8006956:	681a      	ldr	r2, [r3, #0]
 8006958:	68fb      	ldr	r3, [r7, #12]
 800695a:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800695c:	68fb      	ldr	r3, [r7, #12]
 800695e:	681a      	ldr	r2, [r3, #0]
 8006960:	68fb      	ldr	r3, [r7, #12]
 8006962:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006964:	3b01      	subs	r3, #1
 8006966:	68f9      	ldr	r1, [r7, #12]
 8006968:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800696a:	fb01 f303 	mul.w	r3, r1, r3
 800696e:	441a      	add	r2, r3
 8006970:	68fb      	ldr	r3, [r7, #12]
 8006972:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8006974:	68fb      	ldr	r3, [r7, #12]
 8006976:	22ff      	movs	r2, #255	@ 0xff
 8006978:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800697c:	68fb      	ldr	r3, [r7, #12]
 800697e:	22ff      	movs	r2, #255	@ 0xff
 8006980:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8006984:	683b      	ldr	r3, [r7, #0]
 8006986:	2b00      	cmp	r3, #0
 8006988:	d114      	bne.n	80069b4 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800698a:	68fb      	ldr	r3, [r7, #12]
 800698c:	691b      	ldr	r3, [r3, #16]
 800698e:	2b00      	cmp	r3, #0
 8006990:	d01a      	beq.n	80069c8 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006992:	68fb      	ldr	r3, [r7, #12]
 8006994:	3310      	adds	r3, #16
 8006996:	4618      	mov	r0, r3
 8006998:	f001 f91a 	bl	8007bd0 <xTaskRemoveFromEventList>
 800699c:	4603      	mov	r3, r0
 800699e:	2b00      	cmp	r3, #0
 80069a0:	d012      	beq.n	80069c8 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80069a2:	4b0d      	ldr	r3, [pc, #52]	@ (80069d8 <xQueueGenericReset+0xd0>)
 80069a4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80069a8:	601a      	str	r2, [r3, #0]
 80069aa:	f3bf 8f4f 	dsb	sy
 80069ae:	f3bf 8f6f 	isb	sy
 80069b2:	e009      	b.n	80069c8 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80069b4:	68fb      	ldr	r3, [r7, #12]
 80069b6:	3310      	adds	r3, #16
 80069b8:	4618      	mov	r0, r3
 80069ba:	f7ff fef1 	bl	80067a0 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80069be:	68fb      	ldr	r3, [r7, #12]
 80069c0:	3324      	adds	r3, #36	@ 0x24
 80069c2:	4618      	mov	r0, r3
 80069c4:	f7ff feec 	bl	80067a0 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80069c8:	f002 f888 	bl	8008adc <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80069cc:	2301      	movs	r3, #1
}
 80069ce:	4618      	mov	r0, r3
 80069d0:	3710      	adds	r7, #16
 80069d2:	46bd      	mov	sp, r7
 80069d4:	bd80      	pop	{r7, pc}
 80069d6:	bf00      	nop
 80069d8:	e000ed04 	.word	0xe000ed04

080069dc <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80069dc:	b580      	push	{r7, lr}
 80069de:	b08e      	sub	sp, #56	@ 0x38
 80069e0:	af02      	add	r7, sp, #8
 80069e2:	60f8      	str	r0, [r7, #12]
 80069e4:	60b9      	str	r1, [r7, #8]
 80069e6:	607a      	str	r2, [r7, #4]
 80069e8:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80069ea:	68fb      	ldr	r3, [r7, #12]
 80069ec:	2b00      	cmp	r3, #0
 80069ee:	d10b      	bne.n	8006a08 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 80069f0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80069f4:	f383 8811 	msr	BASEPRI, r3
 80069f8:	f3bf 8f6f 	isb	sy
 80069fc:	f3bf 8f4f 	dsb	sy
 8006a00:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8006a02:	bf00      	nop
 8006a04:	bf00      	nop
 8006a06:	e7fd      	b.n	8006a04 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8006a08:	683b      	ldr	r3, [r7, #0]
 8006a0a:	2b00      	cmp	r3, #0
 8006a0c:	d10b      	bne.n	8006a26 <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 8006a0e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006a12:	f383 8811 	msr	BASEPRI, r3
 8006a16:	f3bf 8f6f 	isb	sy
 8006a1a:	f3bf 8f4f 	dsb	sy
 8006a1e:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8006a20:	bf00      	nop
 8006a22:	bf00      	nop
 8006a24:	e7fd      	b.n	8006a22 <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	2b00      	cmp	r3, #0
 8006a2a:	d002      	beq.n	8006a32 <xQueueGenericCreateStatic+0x56>
 8006a2c:	68bb      	ldr	r3, [r7, #8]
 8006a2e:	2b00      	cmp	r3, #0
 8006a30:	d001      	beq.n	8006a36 <xQueueGenericCreateStatic+0x5a>
 8006a32:	2301      	movs	r3, #1
 8006a34:	e000      	b.n	8006a38 <xQueueGenericCreateStatic+0x5c>
 8006a36:	2300      	movs	r3, #0
 8006a38:	2b00      	cmp	r3, #0
 8006a3a:	d10b      	bne.n	8006a54 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 8006a3c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006a40:	f383 8811 	msr	BASEPRI, r3
 8006a44:	f3bf 8f6f 	isb	sy
 8006a48:	f3bf 8f4f 	dsb	sy
 8006a4c:	623b      	str	r3, [r7, #32]
}
 8006a4e:	bf00      	nop
 8006a50:	bf00      	nop
 8006a52:	e7fd      	b.n	8006a50 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	2b00      	cmp	r3, #0
 8006a58:	d102      	bne.n	8006a60 <xQueueGenericCreateStatic+0x84>
 8006a5a:	68bb      	ldr	r3, [r7, #8]
 8006a5c:	2b00      	cmp	r3, #0
 8006a5e:	d101      	bne.n	8006a64 <xQueueGenericCreateStatic+0x88>
 8006a60:	2301      	movs	r3, #1
 8006a62:	e000      	b.n	8006a66 <xQueueGenericCreateStatic+0x8a>
 8006a64:	2300      	movs	r3, #0
 8006a66:	2b00      	cmp	r3, #0
 8006a68:	d10b      	bne.n	8006a82 <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 8006a6a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006a6e:	f383 8811 	msr	BASEPRI, r3
 8006a72:	f3bf 8f6f 	isb	sy
 8006a76:	f3bf 8f4f 	dsb	sy
 8006a7a:	61fb      	str	r3, [r7, #28]
}
 8006a7c:	bf00      	nop
 8006a7e:	bf00      	nop
 8006a80:	e7fd      	b.n	8006a7e <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8006a82:	2350      	movs	r3, #80	@ 0x50
 8006a84:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8006a86:	697b      	ldr	r3, [r7, #20]
 8006a88:	2b50      	cmp	r3, #80	@ 0x50
 8006a8a:	d00b      	beq.n	8006aa4 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 8006a8c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006a90:	f383 8811 	msr	BASEPRI, r3
 8006a94:	f3bf 8f6f 	isb	sy
 8006a98:	f3bf 8f4f 	dsb	sy
 8006a9c:	61bb      	str	r3, [r7, #24]
}
 8006a9e:	bf00      	nop
 8006aa0:	bf00      	nop
 8006aa2:	e7fd      	b.n	8006aa0 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8006aa4:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8006aa6:	683b      	ldr	r3, [r7, #0]
 8006aa8:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 8006aaa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006aac:	2b00      	cmp	r3, #0
 8006aae:	d00d      	beq.n	8006acc <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8006ab0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006ab2:	2201      	movs	r2, #1
 8006ab4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8006ab8:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 8006abc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006abe:	9300      	str	r3, [sp, #0]
 8006ac0:	4613      	mov	r3, r2
 8006ac2:	687a      	ldr	r2, [r7, #4]
 8006ac4:	68b9      	ldr	r1, [r7, #8]
 8006ac6:	68f8      	ldr	r0, [r7, #12]
 8006ac8:	f000 f805 	bl	8006ad6 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8006acc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 8006ace:	4618      	mov	r0, r3
 8006ad0:	3730      	adds	r7, #48	@ 0x30
 8006ad2:	46bd      	mov	sp, r7
 8006ad4:	bd80      	pop	{r7, pc}

08006ad6 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8006ad6:	b580      	push	{r7, lr}
 8006ad8:	b084      	sub	sp, #16
 8006ada:	af00      	add	r7, sp, #0
 8006adc:	60f8      	str	r0, [r7, #12]
 8006ade:	60b9      	str	r1, [r7, #8]
 8006ae0:	607a      	str	r2, [r7, #4]
 8006ae2:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8006ae4:	68bb      	ldr	r3, [r7, #8]
 8006ae6:	2b00      	cmp	r3, #0
 8006ae8:	d103      	bne.n	8006af2 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8006aea:	69bb      	ldr	r3, [r7, #24]
 8006aec:	69ba      	ldr	r2, [r7, #24]
 8006aee:	601a      	str	r2, [r3, #0]
 8006af0:	e002      	b.n	8006af8 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8006af2:	69bb      	ldr	r3, [r7, #24]
 8006af4:	687a      	ldr	r2, [r7, #4]
 8006af6:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8006af8:	69bb      	ldr	r3, [r7, #24]
 8006afa:	68fa      	ldr	r2, [r7, #12]
 8006afc:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8006afe:	69bb      	ldr	r3, [r7, #24]
 8006b00:	68ba      	ldr	r2, [r7, #8]
 8006b02:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8006b04:	2101      	movs	r1, #1
 8006b06:	69b8      	ldr	r0, [r7, #24]
 8006b08:	f7ff fefe 	bl	8006908 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8006b0c:	69bb      	ldr	r3, [r7, #24]
 8006b0e:	78fa      	ldrb	r2, [r7, #3]
 8006b10:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8006b14:	bf00      	nop
 8006b16:	3710      	adds	r7, #16
 8006b18:	46bd      	mov	sp, r7
 8006b1a:	bd80      	pop	{r7, pc}

08006b1c <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8006b1c:	b580      	push	{r7, lr}
 8006b1e:	b08e      	sub	sp, #56	@ 0x38
 8006b20:	af00      	add	r7, sp, #0
 8006b22:	60f8      	str	r0, [r7, #12]
 8006b24:	60b9      	str	r1, [r7, #8]
 8006b26:	607a      	str	r2, [r7, #4]
 8006b28:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8006b2a:	2300      	movs	r3, #0
 8006b2c:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8006b2e:	68fb      	ldr	r3, [r7, #12]
 8006b30:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8006b32:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006b34:	2b00      	cmp	r3, #0
 8006b36:	d10b      	bne.n	8006b50 <xQueueGenericSend+0x34>
	__asm volatile
 8006b38:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006b3c:	f383 8811 	msr	BASEPRI, r3
 8006b40:	f3bf 8f6f 	isb	sy
 8006b44:	f3bf 8f4f 	dsb	sy
 8006b48:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8006b4a:	bf00      	nop
 8006b4c:	bf00      	nop
 8006b4e:	e7fd      	b.n	8006b4c <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006b50:	68bb      	ldr	r3, [r7, #8]
 8006b52:	2b00      	cmp	r3, #0
 8006b54:	d103      	bne.n	8006b5e <xQueueGenericSend+0x42>
 8006b56:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006b58:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006b5a:	2b00      	cmp	r3, #0
 8006b5c:	d101      	bne.n	8006b62 <xQueueGenericSend+0x46>
 8006b5e:	2301      	movs	r3, #1
 8006b60:	e000      	b.n	8006b64 <xQueueGenericSend+0x48>
 8006b62:	2300      	movs	r3, #0
 8006b64:	2b00      	cmp	r3, #0
 8006b66:	d10b      	bne.n	8006b80 <xQueueGenericSend+0x64>
	__asm volatile
 8006b68:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006b6c:	f383 8811 	msr	BASEPRI, r3
 8006b70:	f3bf 8f6f 	isb	sy
 8006b74:	f3bf 8f4f 	dsb	sy
 8006b78:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8006b7a:	bf00      	nop
 8006b7c:	bf00      	nop
 8006b7e:	e7fd      	b.n	8006b7c <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8006b80:	683b      	ldr	r3, [r7, #0]
 8006b82:	2b02      	cmp	r3, #2
 8006b84:	d103      	bne.n	8006b8e <xQueueGenericSend+0x72>
 8006b86:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006b88:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006b8a:	2b01      	cmp	r3, #1
 8006b8c:	d101      	bne.n	8006b92 <xQueueGenericSend+0x76>
 8006b8e:	2301      	movs	r3, #1
 8006b90:	e000      	b.n	8006b94 <xQueueGenericSend+0x78>
 8006b92:	2300      	movs	r3, #0
 8006b94:	2b00      	cmp	r3, #0
 8006b96:	d10b      	bne.n	8006bb0 <xQueueGenericSend+0x94>
	__asm volatile
 8006b98:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006b9c:	f383 8811 	msr	BASEPRI, r3
 8006ba0:	f3bf 8f6f 	isb	sy
 8006ba4:	f3bf 8f4f 	dsb	sy
 8006ba8:	623b      	str	r3, [r7, #32]
}
 8006baa:	bf00      	nop
 8006bac:	bf00      	nop
 8006bae:	e7fd      	b.n	8006bac <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8006bb0:	f001 f9f6 	bl	8007fa0 <xTaskGetSchedulerState>
 8006bb4:	4603      	mov	r3, r0
 8006bb6:	2b00      	cmp	r3, #0
 8006bb8:	d102      	bne.n	8006bc0 <xQueueGenericSend+0xa4>
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	2b00      	cmp	r3, #0
 8006bbe:	d101      	bne.n	8006bc4 <xQueueGenericSend+0xa8>
 8006bc0:	2301      	movs	r3, #1
 8006bc2:	e000      	b.n	8006bc6 <xQueueGenericSend+0xaa>
 8006bc4:	2300      	movs	r3, #0
 8006bc6:	2b00      	cmp	r3, #0
 8006bc8:	d10b      	bne.n	8006be2 <xQueueGenericSend+0xc6>
	__asm volatile
 8006bca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006bce:	f383 8811 	msr	BASEPRI, r3
 8006bd2:	f3bf 8f6f 	isb	sy
 8006bd6:	f3bf 8f4f 	dsb	sy
 8006bda:	61fb      	str	r3, [r7, #28]
}
 8006bdc:	bf00      	nop
 8006bde:	bf00      	nop
 8006be0:	e7fd      	b.n	8006bde <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8006be2:	f001 ff49 	bl	8008a78 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8006be6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006be8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006bea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006bec:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006bee:	429a      	cmp	r2, r3
 8006bf0:	d302      	bcc.n	8006bf8 <xQueueGenericSend+0xdc>
 8006bf2:	683b      	ldr	r3, [r7, #0]
 8006bf4:	2b02      	cmp	r3, #2
 8006bf6:	d129      	bne.n	8006c4c <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8006bf8:	683a      	ldr	r2, [r7, #0]
 8006bfa:	68b9      	ldr	r1, [r7, #8]
 8006bfc:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8006bfe:	f000 fa0f 	bl	8007020 <prvCopyDataToQueue>
 8006c02:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006c04:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006c06:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006c08:	2b00      	cmp	r3, #0
 8006c0a:	d010      	beq.n	8006c2e <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006c0c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006c0e:	3324      	adds	r3, #36	@ 0x24
 8006c10:	4618      	mov	r0, r3
 8006c12:	f000 ffdd 	bl	8007bd0 <xTaskRemoveFromEventList>
 8006c16:	4603      	mov	r3, r0
 8006c18:	2b00      	cmp	r3, #0
 8006c1a:	d013      	beq.n	8006c44 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8006c1c:	4b3f      	ldr	r3, [pc, #252]	@ (8006d1c <xQueueGenericSend+0x200>)
 8006c1e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006c22:	601a      	str	r2, [r3, #0]
 8006c24:	f3bf 8f4f 	dsb	sy
 8006c28:	f3bf 8f6f 	isb	sy
 8006c2c:	e00a      	b.n	8006c44 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8006c2e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006c30:	2b00      	cmp	r3, #0
 8006c32:	d007      	beq.n	8006c44 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8006c34:	4b39      	ldr	r3, [pc, #228]	@ (8006d1c <xQueueGenericSend+0x200>)
 8006c36:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006c3a:	601a      	str	r2, [r3, #0]
 8006c3c:	f3bf 8f4f 	dsb	sy
 8006c40:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8006c44:	f001 ff4a 	bl	8008adc <vPortExitCritical>
				return pdPASS;
 8006c48:	2301      	movs	r3, #1
 8006c4a:	e063      	b.n	8006d14 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	2b00      	cmp	r3, #0
 8006c50:	d103      	bne.n	8006c5a <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8006c52:	f001 ff43 	bl	8008adc <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8006c56:	2300      	movs	r3, #0
 8006c58:	e05c      	b.n	8006d14 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8006c5a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006c5c:	2b00      	cmp	r3, #0
 8006c5e:	d106      	bne.n	8006c6e <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8006c60:	f107 0314 	add.w	r3, r7, #20
 8006c64:	4618      	mov	r0, r3
 8006c66:	f001 f83f 	bl	8007ce8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8006c6a:	2301      	movs	r3, #1
 8006c6c:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8006c6e:	f001 ff35 	bl	8008adc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8006c72:	f000 fd87 	bl	8007784 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8006c76:	f001 feff 	bl	8008a78 <vPortEnterCritical>
 8006c7a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006c7c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8006c80:	b25b      	sxtb	r3, r3
 8006c82:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8006c86:	d103      	bne.n	8006c90 <xQueueGenericSend+0x174>
 8006c88:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006c8a:	2200      	movs	r2, #0
 8006c8c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006c90:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006c92:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8006c96:	b25b      	sxtb	r3, r3
 8006c98:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8006c9c:	d103      	bne.n	8006ca6 <xQueueGenericSend+0x18a>
 8006c9e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006ca0:	2200      	movs	r2, #0
 8006ca2:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8006ca6:	f001 ff19 	bl	8008adc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8006caa:	1d3a      	adds	r2, r7, #4
 8006cac:	f107 0314 	add.w	r3, r7, #20
 8006cb0:	4611      	mov	r1, r2
 8006cb2:	4618      	mov	r0, r3
 8006cb4:	f001 f82e 	bl	8007d14 <xTaskCheckForTimeOut>
 8006cb8:	4603      	mov	r3, r0
 8006cba:	2b00      	cmp	r3, #0
 8006cbc:	d124      	bne.n	8006d08 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8006cbe:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8006cc0:	f000 faa6 	bl	8007210 <prvIsQueueFull>
 8006cc4:	4603      	mov	r3, r0
 8006cc6:	2b00      	cmp	r3, #0
 8006cc8:	d018      	beq.n	8006cfc <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8006cca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006ccc:	3310      	adds	r3, #16
 8006cce:	687a      	ldr	r2, [r7, #4]
 8006cd0:	4611      	mov	r1, r2
 8006cd2:	4618      	mov	r0, r3
 8006cd4:	f000 ff2a 	bl	8007b2c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8006cd8:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8006cda:	f000 fa31 	bl	8007140 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8006cde:	f000 fd5f 	bl	80077a0 <xTaskResumeAll>
 8006ce2:	4603      	mov	r3, r0
 8006ce4:	2b00      	cmp	r3, #0
 8006ce6:	f47f af7c 	bne.w	8006be2 <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 8006cea:	4b0c      	ldr	r3, [pc, #48]	@ (8006d1c <xQueueGenericSend+0x200>)
 8006cec:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006cf0:	601a      	str	r2, [r3, #0]
 8006cf2:	f3bf 8f4f 	dsb	sy
 8006cf6:	f3bf 8f6f 	isb	sy
 8006cfa:	e772      	b.n	8006be2 <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8006cfc:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8006cfe:	f000 fa1f 	bl	8007140 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8006d02:	f000 fd4d 	bl	80077a0 <xTaskResumeAll>
 8006d06:	e76c      	b.n	8006be2 <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8006d08:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8006d0a:	f000 fa19 	bl	8007140 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8006d0e:	f000 fd47 	bl	80077a0 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8006d12:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8006d14:	4618      	mov	r0, r3
 8006d16:	3738      	adds	r7, #56	@ 0x38
 8006d18:	46bd      	mov	sp, r7
 8006d1a:	bd80      	pop	{r7, pc}
 8006d1c:	e000ed04 	.word	0xe000ed04

08006d20 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8006d20:	b580      	push	{r7, lr}
 8006d22:	b090      	sub	sp, #64	@ 0x40
 8006d24:	af00      	add	r7, sp, #0
 8006d26:	60f8      	str	r0, [r7, #12]
 8006d28:	60b9      	str	r1, [r7, #8]
 8006d2a:	607a      	str	r2, [r7, #4]
 8006d2c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8006d2e:	68fb      	ldr	r3, [r7, #12]
 8006d30:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 8006d32:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006d34:	2b00      	cmp	r3, #0
 8006d36:	d10b      	bne.n	8006d50 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 8006d38:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006d3c:	f383 8811 	msr	BASEPRI, r3
 8006d40:	f3bf 8f6f 	isb	sy
 8006d44:	f3bf 8f4f 	dsb	sy
 8006d48:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8006d4a:	bf00      	nop
 8006d4c:	bf00      	nop
 8006d4e:	e7fd      	b.n	8006d4c <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006d50:	68bb      	ldr	r3, [r7, #8]
 8006d52:	2b00      	cmp	r3, #0
 8006d54:	d103      	bne.n	8006d5e <xQueueGenericSendFromISR+0x3e>
 8006d56:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006d58:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006d5a:	2b00      	cmp	r3, #0
 8006d5c:	d101      	bne.n	8006d62 <xQueueGenericSendFromISR+0x42>
 8006d5e:	2301      	movs	r3, #1
 8006d60:	e000      	b.n	8006d64 <xQueueGenericSendFromISR+0x44>
 8006d62:	2300      	movs	r3, #0
 8006d64:	2b00      	cmp	r3, #0
 8006d66:	d10b      	bne.n	8006d80 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 8006d68:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006d6c:	f383 8811 	msr	BASEPRI, r3
 8006d70:	f3bf 8f6f 	isb	sy
 8006d74:	f3bf 8f4f 	dsb	sy
 8006d78:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8006d7a:	bf00      	nop
 8006d7c:	bf00      	nop
 8006d7e:	e7fd      	b.n	8006d7c <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8006d80:	683b      	ldr	r3, [r7, #0]
 8006d82:	2b02      	cmp	r3, #2
 8006d84:	d103      	bne.n	8006d8e <xQueueGenericSendFromISR+0x6e>
 8006d86:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006d88:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006d8a:	2b01      	cmp	r3, #1
 8006d8c:	d101      	bne.n	8006d92 <xQueueGenericSendFromISR+0x72>
 8006d8e:	2301      	movs	r3, #1
 8006d90:	e000      	b.n	8006d94 <xQueueGenericSendFromISR+0x74>
 8006d92:	2300      	movs	r3, #0
 8006d94:	2b00      	cmp	r3, #0
 8006d96:	d10b      	bne.n	8006db0 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 8006d98:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006d9c:	f383 8811 	msr	BASEPRI, r3
 8006da0:	f3bf 8f6f 	isb	sy
 8006da4:	f3bf 8f4f 	dsb	sy
 8006da8:	623b      	str	r3, [r7, #32]
}
 8006daa:	bf00      	nop
 8006dac:	bf00      	nop
 8006dae:	e7fd      	b.n	8006dac <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8006db0:	f001 ff42 	bl	8008c38 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8006db4:	f3ef 8211 	mrs	r2, BASEPRI
 8006db8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006dbc:	f383 8811 	msr	BASEPRI, r3
 8006dc0:	f3bf 8f6f 	isb	sy
 8006dc4:	f3bf 8f4f 	dsb	sy
 8006dc8:	61fa      	str	r2, [r7, #28]
 8006dca:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8006dcc:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8006dce:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8006dd0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006dd2:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006dd4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006dd6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006dd8:	429a      	cmp	r2, r3
 8006dda:	d302      	bcc.n	8006de2 <xQueueGenericSendFromISR+0xc2>
 8006ddc:	683b      	ldr	r3, [r7, #0]
 8006dde:	2b02      	cmp	r3, #2
 8006de0:	d12f      	bne.n	8006e42 <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8006de2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006de4:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8006de8:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006dec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006dee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006df0:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8006df2:	683a      	ldr	r2, [r7, #0]
 8006df4:	68b9      	ldr	r1, [r7, #8]
 8006df6:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8006df8:	f000 f912 	bl	8007020 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8006dfc:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 8006e00:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8006e04:	d112      	bne.n	8006e2c <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006e06:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006e08:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006e0a:	2b00      	cmp	r3, #0
 8006e0c:	d016      	beq.n	8006e3c <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006e0e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006e10:	3324      	adds	r3, #36	@ 0x24
 8006e12:	4618      	mov	r0, r3
 8006e14:	f000 fedc 	bl	8007bd0 <xTaskRemoveFromEventList>
 8006e18:	4603      	mov	r3, r0
 8006e1a:	2b00      	cmp	r3, #0
 8006e1c:	d00e      	beq.n	8006e3c <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8006e1e:	687b      	ldr	r3, [r7, #4]
 8006e20:	2b00      	cmp	r3, #0
 8006e22:	d00b      	beq.n	8006e3c <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	2201      	movs	r2, #1
 8006e28:	601a      	str	r2, [r3, #0]
 8006e2a:	e007      	b.n	8006e3c <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8006e2c:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8006e30:	3301      	adds	r3, #1
 8006e32:	b2db      	uxtb	r3, r3
 8006e34:	b25a      	sxtb	r2, r3
 8006e36:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006e38:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8006e3c:	2301      	movs	r3, #1
 8006e3e:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 8006e40:	e001      	b.n	8006e46 <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8006e42:	2300      	movs	r3, #0
 8006e44:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006e46:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006e48:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8006e4a:	697b      	ldr	r3, [r7, #20]
 8006e4c:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8006e50:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8006e52:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8006e54:	4618      	mov	r0, r3
 8006e56:	3740      	adds	r7, #64	@ 0x40
 8006e58:	46bd      	mov	sp, r7
 8006e5a:	bd80      	pop	{r7, pc}

08006e5c <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8006e5c:	b580      	push	{r7, lr}
 8006e5e:	b08c      	sub	sp, #48	@ 0x30
 8006e60:	af00      	add	r7, sp, #0
 8006e62:	60f8      	str	r0, [r7, #12]
 8006e64:	60b9      	str	r1, [r7, #8]
 8006e66:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8006e68:	2300      	movs	r3, #0
 8006e6a:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8006e6c:	68fb      	ldr	r3, [r7, #12]
 8006e6e:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8006e70:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006e72:	2b00      	cmp	r3, #0
 8006e74:	d10b      	bne.n	8006e8e <xQueueReceive+0x32>
	__asm volatile
 8006e76:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006e7a:	f383 8811 	msr	BASEPRI, r3
 8006e7e:	f3bf 8f6f 	isb	sy
 8006e82:	f3bf 8f4f 	dsb	sy
 8006e86:	623b      	str	r3, [r7, #32]
}
 8006e88:	bf00      	nop
 8006e8a:	bf00      	nop
 8006e8c:	e7fd      	b.n	8006e8a <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006e8e:	68bb      	ldr	r3, [r7, #8]
 8006e90:	2b00      	cmp	r3, #0
 8006e92:	d103      	bne.n	8006e9c <xQueueReceive+0x40>
 8006e94:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006e96:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006e98:	2b00      	cmp	r3, #0
 8006e9a:	d101      	bne.n	8006ea0 <xQueueReceive+0x44>
 8006e9c:	2301      	movs	r3, #1
 8006e9e:	e000      	b.n	8006ea2 <xQueueReceive+0x46>
 8006ea0:	2300      	movs	r3, #0
 8006ea2:	2b00      	cmp	r3, #0
 8006ea4:	d10b      	bne.n	8006ebe <xQueueReceive+0x62>
	__asm volatile
 8006ea6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006eaa:	f383 8811 	msr	BASEPRI, r3
 8006eae:	f3bf 8f6f 	isb	sy
 8006eb2:	f3bf 8f4f 	dsb	sy
 8006eb6:	61fb      	str	r3, [r7, #28]
}
 8006eb8:	bf00      	nop
 8006eba:	bf00      	nop
 8006ebc:	e7fd      	b.n	8006eba <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8006ebe:	f001 f86f 	bl	8007fa0 <xTaskGetSchedulerState>
 8006ec2:	4603      	mov	r3, r0
 8006ec4:	2b00      	cmp	r3, #0
 8006ec6:	d102      	bne.n	8006ece <xQueueReceive+0x72>
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	2b00      	cmp	r3, #0
 8006ecc:	d101      	bne.n	8006ed2 <xQueueReceive+0x76>
 8006ece:	2301      	movs	r3, #1
 8006ed0:	e000      	b.n	8006ed4 <xQueueReceive+0x78>
 8006ed2:	2300      	movs	r3, #0
 8006ed4:	2b00      	cmp	r3, #0
 8006ed6:	d10b      	bne.n	8006ef0 <xQueueReceive+0x94>
	__asm volatile
 8006ed8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006edc:	f383 8811 	msr	BASEPRI, r3
 8006ee0:	f3bf 8f6f 	isb	sy
 8006ee4:	f3bf 8f4f 	dsb	sy
 8006ee8:	61bb      	str	r3, [r7, #24]
}
 8006eea:	bf00      	nop
 8006eec:	bf00      	nop
 8006eee:	e7fd      	b.n	8006eec <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8006ef0:	f001 fdc2 	bl	8008a78 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006ef4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006ef6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006ef8:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8006efa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006efc:	2b00      	cmp	r3, #0
 8006efe:	d01f      	beq.n	8006f40 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8006f00:	68b9      	ldr	r1, [r7, #8]
 8006f02:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006f04:	f000 f8f6 	bl	80070f4 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8006f08:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006f0a:	1e5a      	subs	r2, r3, #1
 8006f0c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006f0e:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006f10:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006f12:	691b      	ldr	r3, [r3, #16]
 8006f14:	2b00      	cmp	r3, #0
 8006f16:	d00f      	beq.n	8006f38 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006f18:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006f1a:	3310      	adds	r3, #16
 8006f1c:	4618      	mov	r0, r3
 8006f1e:	f000 fe57 	bl	8007bd0 <xTaskRemoveFromEventList>
 8006f22:	4603      	mov	r3, r0
 8006f24:	2b00      	cmp	r3, #0
 8006f26:	d007      	beq.n	8006f38 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8006f28:	4b3c      	ldr	r3, [pc, #240]	@ (800701c <xQueueReceive+0x1c0>)
 8006f2a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006f2e:	601a      	str	r2, [r3, #0]
 8006f30:	f3bf 8f4f 	dsb	sy
 8006f34:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8006f38:	f001 fdd0 	bl	8008adc <vPortExitCritical>
				return pdPASS;
 8006f3c:	2301      	movs	r3, #1
 8006f3e:	e069      	b.n	8007014 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	2b00      	cmp	r3, #0
 8006f44:	d103      	bne.n	8006f4e <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8006f46:	f001 fdc9 	bl	8008adc <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8006f4a:	2300      	movs	r3, #0
 8006f4c:	e062      	b.n	8007014 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8006f4e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006f50:	2b00      	cmp	r3, #0
 8006f52:	d106      	bne.n	8006f62 <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8006f54:	f107 0310 	add.w	r3, r7, #16
 8006f58:	4618      	mov	r0, r3
 8006f5a:	f000 fec5 	bl	8007ce8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8006f5e:	2301      	movs	r3, #1
 8006f60:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8006f62:	f001 fdbb 	bl	8008adc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8006f66:	f000 fc0d 	bl	8007784 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8006f6a:	f001 fd85 	bl	8008a78 <vPortEnterCritical>
 8006f6e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006f70:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8006f74:	b25b      	sxtb	r3, r3
 8006f76:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8006f7a:	d103      	bne.n	8006f84 <xQueueReceive+0x128>
 8006f7c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006f7e:	2200      	movs	r2, #0
 8006f80:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006f84:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006f86:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8006f8a:	b25b      	sxtb	r3, r3
 8006f8c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8006f90:	d103      	bne.n	8006f9a <xQueueReceive+0x13e>
 8006f92:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006f94:	2200      	movs	r2, #0
 8006f96:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8006f9a:	f001 fd9f 	bl	8008adc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8006f9e:	1d3a      	adds	r2, r7, #4
 8006fa0:	f107 0310 	add.w	r3, r7, #16
 8006fa4:	4611      	mov	r1, r2
 8006fa6:	4618      	mov	r0, r3
 8006fa8:	f000 feb4 	bl	8007d14 <xTaskCheckForTimeOut>
 8006fac:	4603      	mov	r3, r0
 8006fae:	2b00      	cmp	r3, #0
 8006fb0:	d123      	bne.n	8006ffa <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006fb2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006fb4:	f000 f916 	bl	80071e4 <prvIsQueueEmpty>
 8006fb8:	4603      	mov	r3, r0
 8006fba:	2b00      	cmp	r3, #0
 8006fbc:	d017      	beq.n	8006fee <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8006fbe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006fc0:	3324      	adds	r3, #36	@ 0x24
 8006fc2:	687a      	ldr	r2, [r7, #4]
 8006fc4:	4611      	mov	r1, r2
 8006fc6:	4618      	mov	r0, r3
 8006fc8:	f000 fdb0 	bl	8007b2c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8006fcc:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006fce:	f000 f8b7 	bl	8007140 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8006fd2:	f000 fbe5 	bl	80077a0 <xTaskResumeAll>
 8006fd6:	4603      	mov	r3, r0
 8006fd8:	2b00      	cmp	r3, #0
 8006fda:	d189      	bne.n	8006ef0 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 8006fdc:	4b0f      	ldr	r3, [pc, #60]	@ (800701c <xQueueReceive+0x1c0>)
 8006fde:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006fe2:	601a      	str	r2, [r3, #0]
 8006fe4:	f3bf 8f4f 	dsb	sy
 8006fe8:	f3bf 8f6f 	isb	sy
 8006fec:	e780      	b.n	8006ef0 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8006fee:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006ff0:	f000 f8a6 	bl	8007140 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8006ff4:	f000 fbd4 	bl	80077a0 <xTaskResumeAll>
 8006ff8:	e77a      	b.n	8006ef0 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8006ffa:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006ffc:	f000 f8a0 	bl	8007140 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8007000:	f000 fbce 	bl	80077a0 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8007004:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007006:	f000 f8ed 	bl	80071e4 <prvIsQueueEmpty>
 800700a:	4603      	mov	r3, r0
 800700c:	2b00      	cmp	r3, #0
 800700e:	f43f af6f 	beq.w	8006ef0 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8007012:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8007014:	4618      	mov	r0, r3
 8007016:	3730      	adds	r7, #48	@ 0x30
 8007018:	46bd      	mov	sp, r7
 800701a:	bd80      	pop	{r7, pc}
 800701c:	e000ed04 	.word	0xe000ed04

08007020 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8007020:	b580      	push	{r7, lr}
 8007022:	b086      	sub	sp, #24
 8007024:	af00      	add	r7, sp, #0
 8007026:	60f8      	str	r0, [r7, #12]
 8007028:	60b9      	str	r1, [r7, #8]
 800702a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800702c:	2300      	movs	r3, #0
 800702e:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007030:	68fb      	ldr	r3, [r7, #12]
 8007032:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007034:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8007036:	68fb      	ldr	r3, [r7, #12]
 8007038:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800703a:	2b00      	cmp	r3, #0
 800703c:	d10d      	bne.n	800705a <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800703e:	68fb      	ldr	r3, [r7, #12]
 8007040:	681b      	ldr	r3, [r3, #0]
 8007042:	2b00      	cmp	r3, #0
 8007044:	d14d      	bne.n	80070e2 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8007046:	68fb      	ldr	r3, [r7, #12]
 8007048:	689b      	ldr	r3, [r3, #8]
 800704a:	4618      	mov	r0, r3
 800704c:	f000 ffc6 	bl	8007fdc <xTaskPriorityDisinherit>
 8007050:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8007052:	68fb      	ldr	r3, [r7, #12]
 8007054:	2200      	movs	r2, #0
 8007056:	609a      	str	r2, [r3, #8]
 8007058:	e043      	b.n	80070e2 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800705a:	687b      	ldr	r3, [r7, #4]
 800705c:	2b00      	cmp	r3, #0
 800705e:	d119      	bne.n	8007094 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8007060:	68fb      	ldr	r3, [r7, #12]
 8007062:	6858      	ldr	r0, [r3, #4]
 8007064:	68fb      	ldr	r3, [r7, #12]
 8007066:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007068:	461a      	mov	r2, r3
 800706a:	68b9      	ldr	r1, [r7, #8]
 800706c:	f00e fb71 	bl	8015752 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8007070:	68fb      	ldr	r3, [r7, #12]
 8007072:	685a      	ldr	r2, [r3, #4]
 8007074:	68fb      	ldr	r3, [r7, #12]
 8007076:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007078:	441a      	add	r2, r3
 800707a:	68fb      	ldr	r3, [r7, #12]
 800707c:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800707e:	68fb      	ldr	r3, [r7, #12]
 8007080:	685a      	ldr	r2, [r3, #4]
 8007082:	68fb      	ldr	r3, [r7, #12]
 8007084:	689b      	ldr	r3, [r3, #8]
 8007086:	429a      	cmp	r2, r3
 8007088:	d32b      	bcc.n	80070e2 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800708a:	68fb      	ldr	r3, [r7, #12]
 800708c:	681a      	ldr	r2, [r3, #0]
 800708e:	68fb      	ldr	r3, [r7, #12]
 8007090:	605a      	str	r2, [r3, #4]
 8007092:	e026      	b.n	80070e2 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8007094:	68fb      	ldr	r3, [r7, #12]
 8007096:	68d8      	ldr	r0, [r3, #12]
 8007098:	68fb      	ldr	r3, [r7, #12]
 800709a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800709c:	461a      	mov	r2, r3
 800709e:	68b9      	ldr	r1, [r7, #8]
 80070a0:	f00e fb57 	bl	8015752 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80070a4:	68fb      	ldr	r3, [r7, #12]
 80070a6:	68da      	ldr	r2, [r3, #12]
 80070a8:	68fb      	ldr	r3, [r7, #12]
 80070aa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80070ac:	425b      	negs	r3, r3
 80070ae:	441a      	add	r2, r3
 80070b0:	68fb      	ldr	r3, [r7, #12]
 80070b2:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80070b4:	68fb      	ldr	r3, [r7, #12]
 80070b6:	68da      	ldr	r2, [r3, #12]
 80070b8:	68fb      	ldr	r3, [r7, #12]
 80070ba:	681b      	ldr	r3, [r3, #0]
 80070bc:	429a      	cmp	r2, r3
 80070be:	d207      	bcs.n	80070d0 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80070c0:	68fb      	ldr	r3, [r7, #12]
 80070c2:	689a      	ldr	r2, [r3, #8]
 80070c4:	68fb      	ldr	r3, [r7, #12]
 80070c6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80070c8:	425b      	negs	r3, r3
 80070ca:	441a      	add	r2, r3
 80070cc:	68fb      	ldr	r3, [r7, #12]
 80070ce:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80070d0:	687b      	ldr	r3, [r7, #4]
 80070d2:	2b02      	cmp	r3, #2
 80070d4:	d105      	bne.n	80070e2 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80070d6:	693b      	ldr	r3, [r7, #16]
 80070d8:	2b00      	cmp	r3, #0
 80070da:	d002      	beq.n	80070e2 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80070dc:	693b      	ldr	r3, [r7, #16]
 80070de:	3b01      	subs	r3, #1
 80070e0:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80070e2:	693b      	ldr	r3, [r7, #16]
 80070e4:	1c5a      	adds	r2, r3, #1
 80070e6:	68fb      	ldr	r3, [r7, #12]
 80070e8:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 80070ea:	697b      	ldr	r3, [r7, #20]
}
 80070ec:	4618      	mov	r0, r3
 80070ee:	3718      	adds	r7, #24
 80070f0:	46bd      	mov	sp, r7
 80070f2:	bd80      	pop	{r7, pc}

080070f4 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80070f4:	b580      	push	{r7, lr}
 80070f6:	b082      	sub	sp, #8
 80070f8:	af00      	add	r7, sp, #0
 80070fa:	6078      	str	r0, [r7, #4]
 80070fc:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80070fe:	687b      	ldr	r3, [r7, #4]
 8007100:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007102:	2b00      	cmp	r3, #0
 8007104:	d018      	beq.n	8007138 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8007106:	687b      	ldr	r3, [r7, #4]
 8007108:	68da      	ldr	r2, [r3, #12]
 800710a:	687b      	ldr	r3, [r7, #4]
 800710c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800710e:	441a      	add	r2, r3
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8007114:	687b      	ldr	r3, [r7, #4]
 8007116:	68da      	ldr	r2, [r3, #12]
 8007118:	687b      	ldr	r3, [r7, #4]
 800711a:	689b      	ldr	r3, [r3, #8]
 800711c:	429a      	cmp	r2, r3
 800711e:	d303      	bcc.n	8007128 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8007120:	687b      	ldr	r3, [r7, #4]
 8007122:	681a      	ldr	r2, [r3, #0]
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8007128:	687b      	ldr	r3, [r7, #4]
 800712a:	68d9      	ldr	r1, [r3, #12]
 800712c:	687b      	ldr	r3, [r7, #4]
 800712e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007130:	461a      	mov	r2, r3
 8007132:	6838      	ldr	r0, [r7, #0]
 8007134:	f00e fb0d 	bl	8015752 <memcpy>
	}
}
 8007138:	bf00      	nop
 800713a:	3708      	adds	r7, #8
 800713c:	46bd      	mov	sp, r7
 800713e:	bd80      	pop	{r7, pc}

08007140 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8007140:	b580      	push	{r7, lr}
 8007142:	b084      	sub	sp, #16
 8007144:	af00      	add	r7, sp, #0
 8007146:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8007148:	f001 fc96 	bl	8008a78 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8007152:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8007154:	e011      	b.n	800717a <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007156:	687b      	ldr	r3, [r7, #4]
 8007158:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800715a:	2b00      	cmp	r3, #0
 800715c:	d012      	beq.n	8007184 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800715e:	687b      	ldr	r3, [r7, #4]
 8007160:	3324      	adds	r3, #36	@ 0x24
 8007162:	4618      	mov	r0, r3
 8007164:	f000 fd34 	bl	8007bd0 <xTaskRemoveFromEventList>
 8007168:	4603      	mov	r3, r0
 800716a:	2b00      	cmp	r3, #0
 800716c:	d001      	beq.n	8007172 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800716e:	f000 fe35 	bl	8007ddc <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8007172:	7bfb      	ldrb	r3, [r7, #15]
 8007174:	3b01      	subs	r3, #1
 8007176:	b2db      	uxtb	r3, r3
 8007178:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800717a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800717e:	2b00      	cmp	r3, #0
 8007180:	dce9      	bgt.n	8007156 <prvUnlockQueue+0x16>
 8007182:	e000      	b.n	8007186 <prvUnlockQueue+0x46>
					break;
 8007184:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8007186:	687b      	ldr	r3, [r7, #4]
 8007188:	22ff      	movs	r2, #255	@ 0xff
 800718a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 800718e:	f001 fca5 	bl	8008adc <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8007192:	f001 fc71 	bl	8008a78 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8007196:	687b      	ldr	r3, [r7, #4]
 8007198:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800719c:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800719e:	e011      	b.n	80071c4 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80071a0:	687b      	ldr	r3, [r7, #4]
 80071a2:	691b      	ldr	r3, [r3, #16]
 80071a4:	2b00      	cmp	r3, #0
 80071a6:	d012      	beq.n	80071ce <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	3310      	adds	r3, #16
 80071ac:	4618      	mov	r0, r3
 80071ae:	f000 fd0f 	bl	8007bd0 <xTaskRemoveFromEventList>
 80071b2:	4603      	mov	r3, r0
 80071b4:	2b00      	cmp	r3, #0
 80071b6:	d001      	beq.n	80071bc <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80071b8:	f000 fe10 	bl	8007ddc <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80071bc:	7bbb      	ldrb	r3, [r7, #14]
 80071be:	3b01      	subs	r3, #1
 80071c0:	b2db      	uxtb	r3, r3
 80071c2:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80071c4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80071c8:	2b00      	cmp	r3, #0
 80071ca:	dce9      	bgt.n	80071a0 <prvUnlockQueue+0x60>
 80071cc:	e000      	b.n	80071d0 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80071ce:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80071d0:	687b      	ldr	r3, [r7, #4]
 80071d2:	22ff      	movs	r2, #255	@ 0xff
 80071d4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 80071d8:	f001 fc80 	bl	8008adc <vPortExitCritical>
}
 80071dc:	bf00      	nop
 80071de:	3710      	adds	r7, #16
 80071e0:	46bd      	mov	sp, r7
 80071e2:	bd80      	pop	{r7, pc}

080071e4 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80071e4:	b580      	push	{r7, lr}
 80071e6:	b084      	sub	sp, #16
 80071e8:	af00      	add	r7, sp, #0
 80071ea:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80071ec:	f001 fc44 	bl	8008a78 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80071f4:	2b00      	cmp	r3, #0
 80071f6:	d102      	bne.n	80071fe <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80071f8:	2301      	movs	r3, #1
 80071fa:	60fb      	str	r3, [r7, #12]
 80071fc:	e001      	b.n	8007202 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80071fe:	2300      	movs	r3, #0
 8007200:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8007202:	f001 fc6b 	bl	8008adc <vPortExitCritical>

	return xReturn;
 8007206:	68fb      	ldr	r3, [r7, #12]
}
 8007208:	4618      	mov	r0, r3
 800720a:	3710      	adds	r7, #16
 800720c:	46bd      	mov	sp, r7
 800720e:	bd80      	pop	{r7, pc}

08007210 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8007210:	b580      	push	{r7, lr}
 8007212:	b084      	sub	sp, #16
 8007214:	af00      	add	r7, sp, #0
 8007216:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8007218:	f001 fc2e 	bl	8008a78 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800721c:	687b      	ldr	r3, [r7, #4]
 800721e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007224:	429a      	cmp	r2, r3
 8007226:	d102      	bne.n	800722e <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8007228:	2301      	movs	r3, #1
 800722a:	60fb      	str	r3, [r7, #12]
 800722c:	e001      	b.n	8007232 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800722e:	2300      	movs	r3, #0
 8007230:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8007232:	f001 fc53 	bl	8008adc <vPortExitCritical>

	return xReturn;
 8007236:	68fb      	ldr	r3, [r7, #12]
}
 8007238:	4618      	mov	r0, r3
 800723a:	3710      	adds	r7, #16
 800723c:	46bd      	mov	sp, r7
 800723e:	bd80      	pop	{r7, pc}

08007240 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8007240:	b480      	push	{r7}
 8007242:	b085      	sub	sp, #20
 8007244:	af00      	add	r7, sp, #0
 8007246:	6078      	str	r0, [r7, #4]
 8007248:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800724a:	2300      	movs	r3, #0
 800724c:	60fb      	str	r3, [r7, #12]
 800724e:	e014      	b.n	800727a <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8007250:	4a0f      	ldr	r2, [pc, #60]	@ (8007290 <vQueueAddToRegistry+0x50>)
 8007252:	68fb      	ldr	r3, [r7, #12]
 8007254:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8007258:	2b00      	cmp	r3, #0
 800725a:	d10b      	bne.n	8007274 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800725c:	490c      	ldr	r1, [pc, #48]	@ (8007290 <vQueueAddToRegistry+0x50>)
 800725e:	68fb      	ldr	r3, [r7, #12]
 8007260:	683a      	ldr	r2, [r7, #0]
 8007262:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8007266:	4a0a      	ldr	r2, [pc, #40]	@ (8007290 <vQueueAddToRegistry+0x50>)
 8007268:	68fb      	ldr	r3, [r7, #12]
 800726a:	00db      	lsls	r3, r3, #3
 800726c:	4413      	add	r3, r2
 800726e:	687a      	ldr	r2, [r7, #4]
 8007270:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8007272:	e006      	b.n	8007282 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8007274:	68fb      	ldr	r3, [r7, #12]
 8007276:	3301      	adds	r3, #1
 8007278:	60fb      	str	r3, [r7, #12]
 800727a:	68fb      	ldr	r3, [r7, #12]
 800727c:	2b07      	cmp	r3, #7
 800727e:	d9e7      	bls.n	8007250 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8007280:	bf00      	nop
 8007282:	bf00      	nop
 8007284:	3714      	adds	r7, #20
 8007286:	46bd      	mov	sp, r7
 8007288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800728c:	4770      	bx	lr
 800728e:	bf00      	nop
 8007290:	20004e54 	.word	0x20004e54

08007294 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8007294:	b580      	push	{r7, lr}
 8007296:	b086      	sub	sp, #24
 8007298:	af00      	add	r7, sp, #0
 800729a:	60f8      	str	r0, [r7, #12]
 800729c:	60b9      	str	r1, [r7, #8]
 800729e:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 80072a0:	68fb      	ldr	r3, [r7, #12]
 80072a2:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 80072a4:	f001 fbe8 	bl	8008a78 <vPortEnterCritical>
 80072a8:	697b      	ldr	r3, [r7, #20]
 80072aa:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80072ae:	b25b      	sxtb	r3, r3
 80072b0:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80072b4:	d103      	bne.n	80072be <vQueueWaitForMessageRestricted+0x2a>
 80072b6:	697b      	ldr	r3, [r7, #20]
 80072b8:	2200      	movs	r2, #0
 80072ba:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80072be:	697b      	ldr	r3, [r7, #20]
 80072c0:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80072c4:	b25b      	sxtb	r3, r3
 80072c6:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80072ca:	d103      	bne.n	80072d4 <vQueueWaitForMessageRestricted+0x40>
 80072cc:	697b      	ldr	r3, [r7, #20]
 80072ce:	2200      	movs	r2, #0
 80072d0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80072d4:	f001 fc02 	bl	8008adc <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80072d8:	697b      	ldr	r3, [r7, #20]
 80072da:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80072dc:	2b00      	cmp	r3, #0
 80072de:	d106      	bne.n	80072ee <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80072e0:	697b      	ldr	r3, [r7, #20]
 80072e2:	3324      	adds	r3, #36	@ 0x24
 80072e4:	687a      	ldr	r2, [r7, #4]
 80072e6:	68b9      	ldr	r1, [r7, #8]
 80072e8:	4618      	mov	r0, r3
 80072ea:	f000 fc45 	bl	8007b78 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 80072ee:	6978      	ldr	r0, [r7, #20]
 80072f0:	f7ff ff26 	bl	8007140 <prvUnlockQueue>
	}
 80072f4:	bf00      	nop
 80072f6:	3718      	adds	r7, #24
 80072f8:	46bd      	mov	sp, r7
 80072fa:	bd80      	pop	{r7, pc}

080072fc <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80072fc:	b580      	push	{r7, lr}
 80072fe:	b08e      	sub	sp, #56	@ 0x38
 8007300:	af04      	add	r7, sp, #16
 8007302:	60f8      	str	r0, [r7, #12]
 8007304:	60b9      	str	r1, [r7, #8]
 8007306:	607a      	str	r2, [r7, #4]
 8007308:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800730a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800730c:	2b00      	cmp	r3, #0
 800730e:	d10b      	bne.n	8007328 <xTaskCreateStatic+0x2c>
	__asm volatile
 8007310:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007314:	f383 8811 	msr	BASEPRI, r3
 8007318:	f3bf 8f6f 	isb	sy
 800731c:	f3bf 8f4f 	dsb	sy
 8007320:	623b      	str	r3, [r7, #32]
}
 8007322:	bf00      	nop
 8007324:	bf00      	nop
 8007326:	e7fd      	b.n	8007324 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8007328:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800732a:	2b00      	cmp	r3, #0
 800732c:	d10b      	bne.n	8007346 <xTaskCreateStatic+0x4a>
	__asm volatile
 800732e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007332:	f383 8811 	msr	BASEPRI, r3
 8007336:	f3bf 8f6f 	isb	sy
 800733a:	f3bf 8f4f 	dsb	sy
 800733e:	61fb      	str	r3, [r7, #28]
}
 8007340:	bf00      	nop
 8007342:	bf00      	nop
 8007344:	e7fd      	b.n	8007342 <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8007346:	235c      	movs	r3, #92	@ 0x5c
 8007348:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800734a:	693b      	ldr	r3, [r7, #16]
 800734c:	2b5c      	cmp	r3, #92	@ 0x5c
 800734e:	d00b      	beq.n	8007368 <xTaskCreateStatic+0x6c>
	__asm volatile
 8007350:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007354:	f383 8811 	msr	BASEPRI, r3
 8007358:	f3bf 8f6f 	isb	sy
 800735c:	f3bf 8f4f 	dsb	sy
 8007360:	61bb      	str	r3, [r7, #24]
}
 8007362:	bf00      	nop
 8007364:	bf00      	nop
 8007366:	e7fd      	b.n	8007364 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8007368:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800736a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800736c:	2b00      	cmp	r3, #0
 800736e:	d01e      	beq.n	80073ae <xTaskCreateStatic+0xb2>
 8007370:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007372:	2b00      	cmp	r3, #0
 8007374:	d01b      	beq.n	80073ae <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8007376:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007378:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800737a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800737c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800737e:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8007380:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007382:	2202      	movs	r2, #2
 8007384:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8007388:	2300      	movs	r3, #0
 800738a:	9303      	str	r3, [sp, #12]
 800738c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800738e:	9302      	str	r3, [sp, #8]
 8007390:	f107 0314 	add.w	r3, r7, #20
 8007394:	9301      	str	r3, [sp, #4]
 8007396:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007398:	9300      	str	r3, [sp, #0]
 800739a:	683b      	ldr	r3, [r7, #0]
 800739c:	687a      	ldr	r2, [r7, #4]
 800739e:	68b9      	ldr	r1, [r7, #8]
 80073a0:	68f8      	ldr	r0, [r7, #12]
 80073a2:	f000 f850 	bl	8007446 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80073a6:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80073a8:	f000 f8de 	bl	8007568 <prvAddNewTaskToReadyList>
 80073ac:	e001      	b.n	80073b2 <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 80073ae:	2300      	movs	r3, #0
 80073b0:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80073b2:	697b      	ldr	r3, [r7, #20]
	}
 80073b4:	4618      	mov	r0, r3
 80073b6:	3728      	adds	r7, #40	@ 0x28
 80073b8:	46bd      	mov	sp, r7
 80073ba:	bd80      	pop	{r7, pc}

080073bc <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80073bc:	b580      	push	{r7, lr}
 80073be:	b08c      	sub	sp, #48	@ 0x30
 80073c0:	af04      	add	r7, sp, #16
 80073c2:	60f8      	str	r0, [r7, #12]
 80073c4:	60b9      	str	r1, [r7, #8]
 80073c6:	603b      	str	r3, [r7, #0]
 80073c8:	4613      	mov	r3, r2
 80073ca:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80073cc:	88fb      	ldrh	r3, [r7, #6]
 80073ce:	009b      	lsls	r3, r3, #2
 80073d0:	4618      	mov	r0, r3
 80073d2:	f001 fc73 	bl	8008cbc <pvPortMalloc>
 80073d6:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80073d8:	697b      	ldr	r3, [r7, #20]
 80073da:	2b00      	cmp	r3, #0
 80073dc:	d00e      	beq.n	80073fc <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80073de:	205c      	movs	r0, #92	@ 0x5c
 80073e0:	f001 fc6c 	bl	8008cbc <pvPortMalloc>
 80073e4:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80073e6:	69fb      	ldr	r3, [r7, #28]
 80073e8:	2b00      	cmp	r3, #0
 80073ea:	d003      	beq.n	80073f4 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80073ec:	69fb      	ldr	r3, [r7, #28]
 80073ee:	697a      	ldr	r2, [r7, #20]
 80073f0:	631a      	str	r2, [r3, #48]	@ 0x30
 80073f2:	e005      	b.n	8007400 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80073f4:	6978      	ldr	r0, [r7, #20]
 80073f6:	f001 fd2f 	bl	8008e58 <vPortFree>
 80073fa:	e001      	b.n	8007400 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80073fc:	2300      	movs	r3, #0
 80073fe:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8007400:	69fb      	ldr	r3, [r7, #28]
 8007402:	2b00      	cmp	r3, #0
 8007404:	d017      	beq.n	8007436 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8007406:	69fb      	ldr	r3, [r7, #28]
 8007408:	2200      	movs	r2, #0
 800740a:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800740e:	88fa      	ldrh	r2, [r7, #6]
 8007410:	2300      	movs	r3, #0
 8007412:	9303      	str	r3, [sp, #12]
 8007414:	69fb      	ldr	r3, [r7, #28]
 8007416:	9302      	str	r3, [sp, #8]
 8007418:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800741a:	9301      	str	r3, [sp, #4]
 800741c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800741e:	9300      	str	r3, [sp, #0]
 8007420:	683b      	ldr	r3, [r7, #0]
 8007422:	68b9      	ldr	r1, [r7, #8]
 8007424:	68f8      	ldr	r0, [r7, #12]
 8007426:	f000 f80e 	bl	8007446 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800742a:	69f8      	ldr	r0, [r7, #28]
 800742c:	f000 f89c 	bl	8007568 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8007430:	2301      	movs	r3, #1
 8007432:	61bb      	str	r3, [r7, #24]
 8007434:	e002      	b.n	800743c <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8007436:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800743a:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800743c:	69bb      	ldr	r3, [r7, #24]
	}
 800743e:	4618      	mov	r0, r3
 8007440:	3720      	adds	r7, #32
 8007442:	46bd      	mov	sp, r7
 8007444:	bd80      	pop	{r7, pc}

08007446 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8007446:	b580      	push	{r7, lr}
 8007448:	b088      	sub	sp, #32
 800744a:	af00      	add	r7, sp, #0
 800744c:	60f8      	str	r0, [r7, #12]
 800744e:	60b9      	str	r1, [r7, #8]
 8007450:	607a      	str	r2, [r7, #4]
 8007452:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8007454:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007456:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8007458:	687b      	ldr	r3, [r7, #4]
 800745a:	009b      	lsls	r3, r3, #2
 800745c:	461a      	mov	r2, r3
 800745e:	21a5      	movs	r1, #165	@ 0xa5
 8007460:	f00e f8ae 	bl	80155c0 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8007464:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007466:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8007468:	687b      	ldr	r3, [r7, #4]
 800746a:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800746e:	3b01      	subs	r3, #1
 8007470:	009b      	lsls	r3, r3, #2
 8007472:	4413      	add	r3, r2
 8007474:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8007476:	69bb      	ldr	r3, [r7, #24]
 8007478:	f023 0307 	bic.w	r3, r3, #7
 800747c:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800747e:	69bb      	ldr	r3, [r7, #24]
 8007480:	f003 0307 	and.w	r3, r3, #7
 8007484:	2b00      	cmp	r3, #0
 8007486:	d00b      	beq.n	80074a0 <prvInitialiseNewTask+0x5a>
	__asm volatile
 8007488:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800748c:	f383 8811 	msr	BASEPRI, r3
 8007490:	f3bf 8f6f 	isb	sy
 8007494:	f3bf 8f4f 	dsb	sy
 8007498:	617b      	str	r3, [r7, #20]
}
 800749a:	bf00      	nop
 800749c:	bf00      	nop
 800749e:	e7fd      	b.n	800749c <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80074a0:	68bb      	ldr	r3, [r7, #8]
 80074a2:	2b00      	cmp	r3, #0
 80074a4:	d01f      	beq.n	80074e6 <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80074a6:	2300      	movs	r3, #0
 80074a8:	61fb      	str	r3, [r7, #28]
 80074aa:	e012      	b.n	80074d2 <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80074ac:	68ba      	ldr	r2, [r7, #8]
 80074ae:	69fb      	ldr	r3, [r7, #28]
 80074b0:	4413      	add	r3, r2
 80074b2:	7819      	ldrb	r1, [r3, #0]
 80074b4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80074b6:	69fb      	ldr	r3, [r7, #28]
 80074b8:	4413      	add	r3, r2
 80074ba:	3334      	adds	r3, #52	@ 0x34
 80074bc:	460a      	mov	r2, r1
 80074be:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80074c0:	68ba      	ldr	r2, [r7, #8]
 80074c2:	69fb      	ldr	r3, [r7, #28]
 80074c4:	4413      	add	r3, r2
 80074c6:	781b      	ldrb	r3, [r3, #0]
 80074c8:	2b00      	cmp	r3, #0
 80074ca:	d006      	beq.n	80074da <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80074cc:	69fb      	ldr	r3, [r7, #28]
 80074ce:	3301      	adds	r3, #1
 80074d0:	61fb      	str	r3, [r7, #28]
 80074d2:	69fb      	ldr	r3, [r7, #28]
 80074d4:	2b0f      	cmp	r3, #15
 80074d6:	d9e9      	bls.n	80074ac <prvInitialiseNewTask+0x66>
 80074d8:	e000      	b.n	80074dc <prvInitialiseNewTask+0x96>
			{
				break;
 80074da:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80074dc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80074de:	2200      	movs	r2, #0
 80074e0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80074e4:	e003      	b.n	80074ee <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80074e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80074e8:	2200      	movs	r2, #0
 80074ea:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80074ee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80074f0:	2b37      	cmp	r3, #55	@ 0x37
 80074f2:	d901      	bls.n	80074f8 <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80074f4:	2337      	movs	r3, #55	@ 0x37
 80074f6:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80074f8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80074fa:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80074fc:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80074fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007500:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8007502:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8007504:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007506:	2200      	movs	r2, #0
 8007508:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800750a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800750c:	3304      	adds	r3, #4
 800750e:	4618      	mov	r0, r3
 8007510:	f7ff f966 	bl	80067e0 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8007514:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007516:	3318      	adds	r3, #24
 8007518:	4618      	mov	r0, r3
 800751a:	f7ff f961 	bl	80067e0 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800751e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007520:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007522:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007524:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007526:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800752a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800752c:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800752e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007530:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007532:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8007534:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007536:	2200      	movs	r2, #0
 8007538:	655a      	str	r2, [r3, #84]	@ 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800753a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800753c:	2200      	movs	r2, #0
 800753e:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8007542:	683a      	ldr	r2, [r7, #0]
 8007544:	68f9      	ldr	r1, [r7, #12]
 8007546:	69b8      	ldr	r0, [r7, #24]
 8007548:	f001 f966 	bl	8008818 <pxPortInitialiseStack>
 800754c:	4602      	mov	r2, r0
 800754e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007550:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8007552:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007554:	2b00      	cmp	r3, #0
 8007556:	d002      	beq.n	800755e <prvInitialiseNewTask+0x118>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8007558:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800755a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800755c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800755e:	bf00      	nop
 8007560:	3720      	adds	r7, #32
 8007562:	46bd      	mov	sp, r7
 8007564:	bd80      	pop	{r7, pc}
	...

08007568 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8007568:	b580      	push	{r7, lr}
 800756a:	b082      	sub	sp, #8
 800756c:	af00      	add	r7, sp, #0
 800756e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8007570:	f001 fa82 	bl	8008a78 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8007574:	4b2d      	ldr	r3, [pc, #180]	@ (800762c <prvAddNewTaskToReadyList+0xc4>)
 8007576:	681b      	ldr	r3, [r3, #0]
 8007578:	3301      	adds	r3, #1
 800757a:	4a2c      	ldr	r2, [pc, #176]	@ (800762c <prvAddNewTaskToReadyList+0xc4>)
 800757c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800757e:	4b2c      	ldr	r3, [pc, #176]	@ (8007630 <prvAddNewTaskToReadyList+0xc8>)
 8007580:	681b      	ldr	r3, [r3, #0]
 8007582:	2b00      	cmp	r3, #0
 8007584:	d109      	bne.n	800759a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8007586:	4a2a      	ldr	r2, [pc, #168]	@ (8007630 <prvAddNewTaskToReadyList+0xc8>)
 8007588:	687b      	ldr	r3, [r7, #4]
 800758a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800758c:	4b27      	ldr	r3, [pc, #156]	@ (800762c <prvAddNewTaskToReadyList+0xc4>)
 800758e:	681b      	ldr	r3, [r3, #0]
 8007590:	2b01      	cmp	r3, #1
 8007592:	d110      	bne.n	80075b6 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8007594:	f000 fc46 	bl	8007e24 <prvInitialiseTaskLists>
 8007598:	e00d      	b.n	80075b6 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800759a:	4b26      	ldr	r3, [pc, #152]	@ (8007634 <prvAddNewTaskToReadyList+0xcc>)
 800759c:	681b      	ldr	r3, [r3, #0]
 800759e:	2b00      	cmp	r3, #0
 80075a0:	d109      	bne.n	80075b6 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80075a2:	4b23      	ldr	r3, [pc, #140]	@ (8007630 <prvAddNewTaskToReadyList+0xc8>)
 80075a4:	681b      	ldr	r3, [r3, #0]
 80075a6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80075a8:	687b      	ldr	r3, [r7, #4]
 80075aa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80075ac:	429a      	cmp	r2, r3
 80075ae:	d802      	bhi.n	80075b6 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80075b0:	4a1f      	ldr	r2, [pc, #124]	@ (8007630 <prvAddNewTaskToReadyList+0xc8>)
 80075b2:	687b      	ldr	r3, [r7, #4]
 80075b4:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80075b6:	4b20      	ldr	r3, [pc, #128]	@ (8007638 <prvAddNewTaskToReadyList+0xd0>)
 80075b8:	681b      	ldr	r3, [r3, #0]
 80075ba:	3301      	adds	r3, #1
 80075bc:	4a1e      	ldr	r2, [pc, #120]	@ (8007638 <prvAddNewTaskToReadyList+0xd0>)
 80075be:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 80075c0:	4b1d      	ldr	r3, [pc, #116]	@ (8007638 <prvAddNewTaskToReadyList+0xd0>)
 80075c2:	681a      	ldr	r2, [r3, #0]
 80075c4:	687b      	ldr	r3, [r7, #4]
 80075c6:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80075c8:	687b      	ldr	r3, [r7, #4]
 80075ca:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80075cc:	4b1b      	ldr	r3, [pc, #108]	@ (800763c <prvAddNewTaskToReadyList+0xd4>)
 80075ce:	681b      	ldr	r3, [r3, #0]
 80075d0:	429a      	cmp	r2, r3
 80075d2:	d903      	bls.n	80075dc <prvAddNewTaskToReadyList+0x74>
 80075d4:	687b      	ldr	r3, [r7, #4]
 80075d6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80075d8:	4a18      	ldr	r2, [pc, #96]	@ (800763c <prvAddNewTaskToReadyList+0xd4>)
 80075da:	6013      	str	r3, [r2, #0]
 80075dc:	687b      	ldr	r3, [r7, #4]
 80075de:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80075e0:	4613      	mov	r3, r2
 80075e2:	009b      	lsls	r3, r3, #2
 80075e4:	4413      	add	r3, r2
 80075e6:	009b      	lsls	r3, r3, #2
 80075e8:	4a15      	ldr	r2, [pc, #84]	@ (8007640 <prvAddNewTaskToReadyList+0xd8>)
 80075ea:	441a      	add	r2, r3
 80075ec:	687b      	ldr	r3, [r7, #4]
 80075ee:	3304      	adds	r3, #4
 80075f0:	4619      	mov	r1, r3
 80075f2:	4610      	mov	r0, r2
 80075f4:	f7ff f901 	bl	80067fa <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80075f8:	f001 fa70 	bl	8008adc <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80075fc:	4b0d      	ldr	r3, [pc, #52]	@ (8007634 <prvAddNewTaskToReadyList+0xcc>)
 80075fe:	681b      	ldr	r3, [r3, #0]
 8007600:	2b00      	cmp	r3, #0
 8007602:	d00e      	beq.n	8007622 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8007604:	4b0a      	ldr	r3, [pc, #40]	@ (8007630 <prvAddNewTaskToReadyList+0xc8>)
 8007606:	681b      	ldr	r3, [r3, #0]
 8007608:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800760a:	687b      	ldr	r3, [r7, #4]
 800760c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800760e:	429a      	cmp	r2, r3
 8007610:	d207      	bcs.n	8007622 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8007612:	4b0c      	ldr	r3, [pc, #48]	@ (8007644 <prvAddNewTaskToReadyList+0xdc>)
 8007614:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007618:	601a      	str	r2, [r3, #0]
 800761a:	f3bf 8f4f 	dsb	sy
 800761e:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007622:	bf00      	nop
 8007624:	3708      	adds	r7, #8
 8007626:	46bd      	mov	sp, r7
 8007628:	bd80      	pop	{r7, pc}
 800762a:	bf00      	nop
 800762c:	20005368 	.word	0x20005368
 8007630:	20004e94 	.word	0x20004e94
 8007634:	20005374 	.word	0x20005374
 8007638:	20005384 	.word	0x20005384
 800763c:	20005370 	.word	0x20005370
 8007640:	20004e98 	.word	0x20004e98
 8007644:	e000ed04 	.word	0xe000ed04

08007648 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8007648:	b580      	push	{r7, lr}
 800764a:	b084      	sub	sp, #16
 800764c:	af00      	add	r7, sp, #0
 800764e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8007650:	2300      	movs	r3, #0
 8007652:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8007654:	687b      	ldr	r3, [r7, #4]
 8007656:	2b00      	cmp	r3, #0
 8007658:	d018      	beq.n	800768c <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800765a:	4b14      	ldr	r3, [pc, #80]	@ (80076ac <vTaskDelay+0x64>)
 800765c:	681b      	ldr	r3, [r3, #0]
 800765e:	2b00      	cmp	r3, #0
 8007660:	d00b      	beq.n	800767a <vTaskDelay+0x32>
	__asm volatile
 8007662:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007666:	f383 8811 	msr	BASEPRI, r3
 800766a:	f3bf 8f6f 	isb	sy
 800766e:	f3bf 8f4f 	dsb	sy
 8007672:	60bb      	str	r3, [r7, #8]
}
 8007674:	bf00      	nop
 8007676:	bf00      	nop
 8007678:	e7fd      	b.n	8007676 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800767a:	f000 f883 	bl	8007784 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800767e:	2100      	movs	r1, #0
 8007680:	6878      	ldr	r0, [r7, #4]
 8007682:	f000 fd1b 	bl	80080bc <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8007686:	f000 f88b 	bl	80077a0 <xTaskResumeAll>
 800768a:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800768c:	68fb      	ldr	r3, [r7, #12]
 800768e:	2b00      	cmp	r3, #0
 8007690:	d107      	bne.n	80076a2 <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 8007692:	4b07      	ldr	r3, [pc, #28]	@ (80076b0 <vTaskDelay+0x68>)
 8007694:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007698:	601a      	str	r2, [r3, #0]
 800769a:	f3bf 8f4f 	dsb	sy
 800769e:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80076a2:	bf00      	nop
 80076a4:	3710      	adds	r7, #16
 80076a6:	46bd      	mov	sp, r7
 80076a8:	bd80      	pop	{r7, pc}
 80076aa:	bf00      	nop
 80076ac:	20005390 	.word	0x20005390
 80076b0:	e000ed04 	.word	0xe000ed04

080076b4 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80076b4:	b580      	push	{r7, lr}
 80076b6:	b08a      	sub	sp, #40	@ 0x28
 80076b8:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80076ba:	2300      	movs	r3, #0
 80076bc:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80076be:	2300      	movs	r3, #0
 80076c0:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80076c2:	463a      	mov	r2, r7
 80076c4:	1d39      	adds	r1, r7, #4
 80076c6:	f107 0308 	add.w	r3, r7, #8
 80076ca:	4618      	mov	r0, r3
 80076cc:	f7ff f834 	bl	8006738 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80076d0:	6839      	ldr	r1, [r7, #0]
 80076d2:	687b      	ldr	r3, [r7, #4]
 80076d4:	68ba      	ldr	r2, [r7, #8]
 80076d6:	9202      	str	r2, [sp, #8]
 80076d8:	9301      	str	r3, [sp, #4]
 80076da:	2300      	movs	r3, #0
 80076dc:	9300      	str	r3, [sp, #0]
 80076de:	2300      	movs	r3, #0
 80076e0:	460a      	mov	r2, r1
 80076e2:	4922      	ldr	r1, [pc, #136]	@ (800776c <vTaskStartScheduler+0xb8>)
 80076e4:	4822      	ldr	r0, [pc, #136]	@ (8007770 <vTaskStartScheduler+0xbc>)
 80076e6:	f7ff fe09 	bl	80072fc <xTaskCreateStatic>
 80076ea:	4603      	mov	r3, r0
 80076ec:	4a21      	ldr	r2, [pc, #132]	@ (8007774 <vTaskStartScheduler+0xc0>)
 80076ee:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80076f0:	4b20      	ldr	r3, [pc, #128]	@ (8007774 <vTaskStartScheduler+0xc0>)
 80076f2:	681b      	ldr	r3, [r3, #0]
 80076f4:	2b00      	cmp	r3, #0
 80076f6:	d002      	beq.n	80076fe <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80076f8:	2301      	movs	r3, #1
 80076fa:	617b      	str	r3, [r7, #20]
 80076fc:	e001      	b.n	8007702 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80076fe:	2300      	movs	r3, #0
 8007700:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8007702:	697b      	ldr	r3, [r7, #20]
 8007704:	2b01      	cmp	r3, #1
 8007706:	d102      	bne.n	800770e <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8007708:	f000 fd2c 	bl	8008164 <xTimerCreateTimerTask>
 800770c:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800770e:	697b      	ldr	r3, [r7, #20]
 8007710:	2b01      	cmp	r3, #1
 8007712:	d116      	bne.n	8007742 <vTaskStartScheduler+0x8e>
	__asm volatile
 8007714:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007718:	f383 8811 	msr	BASEPRI, r3
 800771c:	f3bf 8f6f 	isb	sy
 8007720:	f3bf 8f4f 	dsb	sy
 8007724:	613b      	str	r3, [r7, #16]
}
 8007726:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8007728:	4b13      	ldr	r3, [pc, #76]	@ (8007778 <vTaskStartScheduler+0xc4>)
 800772a:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800772e:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8007730:	4b12      	ldr	r3, [pc, #72]	@ (800777c <vTaskStartScheduler+0xc8>)
 8007732:	2201      	movs	r2, #1
 8007734:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8007736:	4b12      	ldr	r3, [pc, #72]	@ (8007780 <vTaskStartScheduler+0xcc>)
 8007738:	2200      	movs	r2, #0
 800773a:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800773c:	f001 f8f8 	bl	8008930 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8007740:	e00f      	b.n	8007762 <vTaskStartScheduler+0xae>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8007742:	697b      	ldr	r3, [r7, #20]
 8007744:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8007748:	d10b      	bne.n	8007762 <vTaskStartScheduler+0xae>
	__asm volatile
 800774a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800774e:	f383 8811 	msr	BASEPRI, r3
 8007752:	f3bf 8f6f 	isb	sy
 8007756:	f3bf 8f4f 	dsb	sy
 800775a:	60fb      	str	r3, [r7, #12]
}
 800775c:	bf00      	nop
 800775e:	bf00      	nop
 8007760:	e7fd      	b.n	800775e <vTaskStartScheduler+0xaa>
}
 8007762:	bf00      	nop
 8007764:	3718      	adds	r7, #24
 8007766:	46bd      	mov	sp, r7
 8007768:	bd80      	pop	{r7, pc}
 800776a:	bf00      	nop
 800776c:	08016598 	.word	0x08016598
 8007770:	08007df5 	.word	0x08007df5
 8007774:	2000538c 	.word	0x2000538c
 8007778:	20005388 	.word	0x20005388
 800777c:	20005374 	.word	0x20005374
 8007780:	2000536c 	.word	0x2000536c

08007784 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8007784:	b480      	push	{r7}
 8007786:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8007788:	4b04      	ldr	r3, [pc, #16]	@ (800779c <vTaskSuspendAll+0x18>)
 800778a:	681b      	ldr	r3, [r3, #0]
 800778c:	3301      	adds	r3, #1
 800778e:	4a03      	ldr	r2, [pc, #12]	@ (800779c <vTaskSuspendAll+0x18>)
 8007790:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8007792:	bf00      	nop
 8007794:	46bd      	mov	sp, r7
 8007796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800779a:	4770      	bx	lr
 800779c:	20005390 	.word	0x20005390

080077a0 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80077a0:	b580      	push	{r7, lr}
 80077a2:	b084      	sub	sp, #16
 80077a4:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80077a6:	2300      	movs	r3, #0
 80077a8:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80077aa:	2300      	movs	r3, #0
 80077ac:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80077ae:	4b42      	ldr	r3, [pc, #264]	@ (80078b8 <xTaskResumeAll+0x118>)
 80077b0:	681b      	ldr	r3, [r3, #0]
 80077b2:	2b00      	cmp	r3, #0
 80077b4:	d10b      	bne.n	80077ce <xTaskResumeAll+0x2e>
	__asm volatile
 80077b6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80077ba:	f383 8811 	msr	BASEPRI, r3
 80077be:	f3bf 8f6f 	isb	sy
 80077c2:	f3bf 8f4f 	dsb	sy
 80077c6:	603b      	str	r3, [r7, #0]
}
 80077c8:	bf00      	nop
 80077ca:	bf00      	nop
 80077cc:	e7fd      	b.n	80077ca <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80077ce:	f001 f953 	bl	8008a78 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80077d2:	4b39      	ldr	r3, [pc, #228]	@ (80078b8 <xTaskResumeAll+0x118>)
 80077d4:	681b      	ldr	r3, [r3, #0]
 80077d6:	3b01      	subs	r3, #1
 80077d8:	4a37      	ldr	r2, [pc, #220]	@ (80078b8 <xTaskResumeAll+0x118>)
 80077da:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80077dc:	4b36      	ldr	r3, [pc, #216]	@ (80078b8 <xTaskResumeAll+0x118>)
 80077de:	681b      	ldr	r3, [r3, #0]
 80077e0:	2b00      	cmp	r3, #0
 80077e2:	d162      	bne.n	80078aa <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80077e4:	4b35      	ldr	r3, [pc, #212]	@ (80078bc <xTaskResumeAll+0x11c>)
 80077e6:	681b      	ldr	r3, [r3, #0]
 80077e8:	2b00      	cmp	r3, #0
 80077ea:	d05e      	beq.n	80078aa <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80077ec:	e02f      	b.n	800784e <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80077ee:	4b34      	ldr	r3, [pc, #208]	@ (80078c0 <xTaskResumeAll+0x120>)
 80077f0:	68db      	ldr	r3, [r3, #12]
 80077f2:	68db      	ldr	r3, [r3, #12]
 80077f4:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80077f6:	68fb      	ldr	r3, [r7, #12]
 80077f8:	3318      	adds	r3, #24
 80077fa:	4618      	mov	r0, r3
 80077fc:	f7ff f85a 	bl	80068b4 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007800:	68fb      	ldr	r3, [r7, #12]
 8007802:	3304      	adds	r3, #4
 8007804:	4618      	mov	r0, r3
 8007806:	f7ff f855 	bl	80068b4 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800780a:	68fb      	ldr	r3, [r7, #12]
 800780c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800780e:	4b2d      	ldr	r3, [pc, #180]	@ (80078c4 <xTaskResumeAll+0x124>)
 8007810:	681b      	ldr	r3, [r3, #0]
 8007812:	429a      	cmp	r2, r3
 8007814:	d903      	bls.n	800781e <xTaskResumeAll+0x7e>
 8007816:	68fb      	ldr	r3, [r7, #12]
 8007818:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800781a:	4a2a      	ldr	r2, [pc, #168]	@ (80078c4 <xTaskResumeAll+0x124>)
 800781c:	6013      	str	r3, [r2, #0]
 800781e:	68fb      	ldr	r3, [r7, #12]
 8007820:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007822:	4613      	mov	r3, r2
 8007824:	009b      	lsls	r3, r3, #2
 8007826:	4413      	add	r3, r2
 8007828:	009b      	lsls	r3, r3, #2
 800782a:	4a27      	ldr	r2, [pc, #156]	@ (80078c8 <xTaskResumeAll+0x128>)
 800782c:	441a      	add	r2, r3
 800782e:	68fb      	ldr	r3, [r7, #12]
 8007830:	3304      	adds	r3, #4
 8007832:	4619      	mov	r1, r3
 8007834:	4610      	mov	r0, r2
 8007836:	f7fe ffe0 	bl	80067fa <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800783a:	68fb      	ldr	r3, [r7, #12]
 800783c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800783e:	4b23      	ldr	r3, [pc, #140]	@ (80078cc <xTaskResumeAll+0x12c>)
 8007840:	681b      	ldr	r3, [r3, #0]
 8007842:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007844:	429a      	cmp	r2, r3
 8007846:	d302      	bcc.n	800784e <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 8007848:	4b21      	ldr	r3, [pc, #132]	@ (80078d0 <xTaskResumeAll+0x130>)
 800784a:	2201      	movs	r2, #1
 800784c:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800784e:	4b1c      	ldr	r3, [pc, #112]	@ (80078c0 <xTaskResumeAll+0x120>)
 8007850:	681b      	ldr	r3, [r3, #0]
 8007852:	2b00      	cmp	r3, #0
 8007854:	d1cb      	bne.n	80077ee <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8007856:	68fb      	ldr	r3, [r7, #12]
 8007858:	2b00      	cmp	r3, #0
 800785a:	d001      	beq.n	8007860 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800785c:	f000 fb80 	bl	8007f60 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8007860:	4b1c      	ldr	r3, [pc, #112]	@ (80078d4 <xTaskResumeAll+0x134>)
 8007862:	681b      	ldr	r3, [r3, #0]
 8007864:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8007866:	687b      	ldr	r3, [r7, #4]
 8007868:	2b00      	cmp	r3, #0
 800786a:	d010      	beq.n	800788e <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800786c:	f000 f846 	bl	80078fc <xTaskIncrementTick>
 8007870:	4603      	mov	r3, r0
 8007872:	2b00      	cmp	r3, #0
 8007874:	d002      	beq.n	800787c <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 8007876:	4b16      	ldr	r3, [pc, #88]	@ (80078d0 <xTaskResumeAll+0x130>)
 8007878:	2201      	movs	r2, #1
 800787a:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800787c:	687b      	ldr	r3, [r7, #4]
 800787e:	3b01      	subs	r3, #1
 8007880:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8007882:	687b      	ldr	r3, [r7, #4]
 8007884:	2b00      	cmp	r3, #0
 8007886:	d1f1      	bne.n	800786c <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 8007888:	4b12      	ldr	r3, [pc, #72]	@ (80078d4 <xTaskResumeAll+0x134>)
 800788a:	2200      	movs	r2, #0
 800788c:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800788e:	4b10      	ldr	r3, [pc, #64]	@ (80078d0 <xTaskResumeAll+0x130>)
 8007890:	681b      	ldr	r3, [r3, #0]
 8007892:	2b00      	cmp	r3, #0
 8007894:	d009      	beq.n	80078aa <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8007896:	2301      	movs	r3, #1
 8007898:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800789a:	4b0f      	ldr	r3, [pc, #60]	@ (80078d8 <xTaskResumeAll+0x138>)
 800789c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80078a0:	601a      	str	r2, [r3, #0]
 80078a2:	f3bf 8f4f 	dsb	sy
 80078a6:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80078aa:	f001 f917 	bl	8008adc <vPortExitCritical>

	return xAlreadyYielded;
 80078ae:	68bb      	ldr	r3, [r7, #8]
}
 80078b0:	4618      	mov	r0, r3
 80078b2:	3710      	adds	r7, #16
 80078b4:	46bd      	mov	sp, r7
 80078b6:	bd80      	pop	{r7, pc}
 80078b8:	20005390 	.word	0x20005390
 80078bc:	20005368 	.word	0x20005368
 80078c0:	20005328 	.word	0x20005328
 80078c4:	20005370 	.word	0x20005370
 80078c8:	20004e98 	.word	0x20004e98
 80078cc:	20004e94 	.word	0x20004e94
 80078d0:	2000537c 	.word	0x2000537c
 80078d4:	20005378 	.word	0x20005378
 80078d8:	e000ed04 	.word	0xe000ed04

080078dc <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80078dc:	b480      	push	{r7}
 80078de:	b083      	sub	sp, #12
 80078e0:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 80078e2:	4b05      	ldr	r3, [pc, #20]	@ (80078f8 <xTaskGetTickCount+0x1c>)
 80078e4:	681b      	ldr	r3, [r3, #0]
 80078e6:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 80078e8:	687b      	ldr	r3, [r7, #4]
}
 80078ea:	4618      	mov	r0, r3
 80078ec:	370c      	adds	r7, #12
 80078ee:	46bd      	mov	sp, r7
 80078f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078f4:	4770      	bx	lr
 80078f6:	bf00      	nop
 80078f8:	2000536c 	.word	0x2000536c

080078fc <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80078fc:	b580      	push	{r7, lr}
 80078fe:	b086      	sub	sp, #24
 8007900:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8007902:	2300      	movs	r3, #0
 8007904:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007906:	4b4f      	ldr	r3, [pc, #316]	@ (8007a44 <xTaskIncrementTick+0x148>)
 8007908:	681b      	ldr	r3, [r3, #0]
 800790a:	2b00      	cmp	r3, #0
 800790c:	f040 8090 	bne.w	8007a30 <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8007910:	4b4d      	ldr	r3, [pc, #308]	@ (8007a48 <xTaskIncrementTick+0x14c>)
 8007912:	681b      	ldr	r3, [r3, #0]
 8007914:	3301      	adds	r3, #1
 8007916:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8007918:	4a4b      	ldr	r2, [pc, #300]	@ (8007a48 <xTaskIncrementTick+0x14c>)
 800791a:	693b      	ldr	r3, [r7, #16]
 800791c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800791e:	693b      	ldr	r3, [r7, #16]
 8007920:	2b00      	cmp	r3, #0
 8007922:	d121      	bne.n	8007968 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8007924:	4b49      	ldr	r3, [pc, #292]	@ (8007a4c <xTaskIncrementTick+0x150>)
 8007926:	681b      	ldr	r3, [r3, #0]
 8007928:	681b      	ldr	r3, [r3, #0]
 800792a:	2b00      	cmp	r3, #0
 800792c:	d00b      	beq.n	8007946 <xTaskIncrementTick+0x4a>
	__asm volatile
 800792e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007932:	f383 8811 	msr	BASEPRI, r3
 8007936:	f3bf 8f6f 	isb	sy
 800793a:	f3bf 8f4f 	dsb	sy
 800793e:	603b      	str	r3, [r7, #0]
}
 8007940:	bf00      	nop
 8007942:	bf00      	nop
 8007944:	e7fd      	b.n	8007942 <xTaskIncrementTick+0x46>
 8007946:	4b41      	ldr	r3, [pc, #260]	@ (8007a4c <xTaskIncrementTick+0x150>)
 8007948:	681b      	ldr	r3, [r3, #0]
 800794a:	60fb      	str	r3, [r7, #12]
 800794c:	4b40      	ldr	r3, [pc, #256]	@ (8007a50 <xTaskIncrementTick+0x154>)
 800794e:	681b      	ldr	r3, [r3, #0]
 8007950:	4a3e      	ldr	r2, [pc, #248]	@ (8007a4c <xTaskIncrementTick+0x150>)
 8007952:	6013      	str	r3, [r2, #0]
 8007954:	4a3e      	ldr	r2, [pc, #248]	@ (8007a50 <xTaskIncrementTick+0x154>)
 8007956:	68fb      	ldr	r3, [r7, #12]
 8007958:	6013      	str	r3, [r2, #0]
 800795a:	4b3e      	ldr	r3, [pc, #248]	@ (8007a54 <xTaskIncrementTick+0x158>)
 800795c:	681b      	ldr	r3, [r3, #0]
 800795e:	3301      	adds	r3, #1
 8007960:	4a3c      	ldr	r2, [pc, #240]	@ (8007a54 <xTaskIncrementTick+0x158>)
 8007962:	6013      	str	r3, [r2, #0]
 8007964:	f000 fafc 	bl	8007f60 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8007968:	4b3b      	ldr	r3, [pc, #236]	@ (8007a58 <xTaskIncrementTick+0x15c>)
 800796a:	681b      	ldr	r3, [r3, #0]
 800796c:	693a      	ldr	r2, [r7, #16]
 800796e:	429a      	cmp	r2, r3
 8007970:	d349      	bcc.n	8007a06 <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007972:	4b36      	ldr	r3, [pc, #216]	@ (8007a4c <xTaskIncrementTick+0x150>)
 8007974:	681b      	ldr	r3, [r3, #0]
 8007976:	681b      	ldr	r3, [r3, #0]
 8007978:	2b00      	cmp	r3, #0
 800797a:	d104      	bne.n	8007986 <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800797c:	4b36      	ldr	r3, [pc, #216]	@ (8007a58 <xTaskIncrementTick+0x15c>)
 800797e:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8007982:	601a      	str	r2, [r3, #0]
					break;
 8007984:	e03f      	b.n	8007a06 <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007986:	4b31      	ldr	r3, [pc, #196]	@ (8007a4c <xTaskIncrementTick+0x150>)
 8007988:	681b      	ldr	r3, [r3, #0]
 800798a:	68db      	ldr	r3, [r3, #12]
 800798c:	68db      	ldr	r3, [r3, #12]
 800798e:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8007990:	68bb      	ldr	r3, [r7, #8]
 8007992:	685b      	ldr	r3, [r3, #4]
 8007994:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8007996:	693a      	ldr	r2, [r7, #16]
 8007998:	687b      	ldr	r3, [r7, #4]
 800799a:	429a      	cmp	r2, r3
 800799c:	d203      	bcs.n	80079a6 <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800799e:	4a2e      	ldr	r2, [pc, #184]	@ (8007a58 <xTaskIncrementTick+0x15c>)
 80079a0:	687b      	ldr	r3, [r7, #4]
 80079a2:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80079a4:	e02f      	b.n	8007a06 <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80079a6:	68bb      	ldr	r3, [r7, #8]
 80079a8:	3304      	adds	r3, #4
 80079aa:	4618      	mov	r0, r3
 80079ac:	f7fe ff82 	bl	80068b4 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80079b0:	68bb      	ldr	r3, [r7, #8]
 80079b2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80079b4:	2b00      	cmp	r3, #0
 80079b6:	d004      	beq.n	80079c2 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80079b8:	68bb      	ldr	r3, [r7, #8]
 80079ba:	3318      	adds	r3, #24
 80079bc:	4618      	mov	r0, r3
 80079be:	f7fe ff79 	bl	80068b4 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80079c2:	68bb      	ldr	r3, [r7, #8]
 80079c4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80079c6:	4b25      	ldr	r3, [pc, #148]	@ (8007a5c <xTaskIncrementTick+0x160>)
 80079c8:	681b      	ldr	r3, [r3, #0]
 80079ca:	429a      	cmp	r2, r3
 80079cc:	d903      	bls.n	80079d6 <xTaskIncrementTick+0xda>
 80079ce:	68bb      	ldr	r3, [r7, #8]
 80079d0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80079d2:	4a22      	ldr	r2, [pc, #136]	@ (8007a5c <xTaskIncrementTick+0x160>)
 80079d4:	6013      	str	r3, [r2, #0]
 80079d6:	68bb      	ldr	r3, [r7, #8]
 80079d8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80079da:	4613      	mov	r3, r2
 80079dc:	009b      	lsls	r3, r3, #2
 80079de:	4413      	add	r3, r2
 80079e0:	009b      	lsls	r3, r3, #2
 80079e2:	4a1f      	ldr	r2, [pc, #124]	@ (8007a60 <xTaskIncrementTick+0x164>)
 80079e4:	441a      	add	r2, r3
 80079e6:	68bb      	ldr	r3, [r7, #8]
 80079e8:	3304      	adds	r3, #4
 80079ea:	4619      	mov	r1, r3
 80079ec:	4610      	mov	r0, r2
 80079ee:	f7fe ff04 	bl	80067fa <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80079f2:	68bb      	ldr	r3, [r7, #8]
 80079f4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80079f6:	4b1b      	ldr	r3, [pc, #108]	@ (8007a64 <xTaskIncrementTick+0x168>)
 80079f8:	681b      	ldr	r3, [r3, #0]
 80079fa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80079fc:	429a      	cmp	r2, r3
 80079fe:	d3b8      	bcc.n	8007972 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8007a00:	2301      	movs	r3, #1
 8007a02:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007a04:	e7b5      	b.n	8007972 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8007a06:	4b17      	ldr	r3, [pc, #92]	@ (8007a64 <xTaskIncrementTick+0x168>)
 8007a08:	681b      	ldr	r3, [r3, #0]
 8007a0a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007a0c:	4914      	ldr	r1, [pc, #80]	@ (8007a60 <xTaskIncrementTick+0x164>)
 8007a0e:	4613      	mov	r3, r2
 8007a10:	009b      	lsls	r3, r3, #2
 8007a12:	4413      	add	r3, r2
 8007a14:	009b      	lsls	r3, r3, #2
 8007a16:	440b      	add	r3, r1
 8007a18:	681b      	ldr	r3, [r3, #0]
 8007a1a:	2b01      	cmp	r3, #1
 8007a1c:	d901      	bls.n	8007a22 <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 8007a1e:	2301      	movs	r3, #1
 8007a20:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8007a22:	4b11      	ldr	r3, [pc, #68]	@ (8007a68 <xTaskIncrementTick+0x16c>)
 8007a24:	681b      	ldr	r3, [r3, #0]
 8007a26:	2b00      	cmp	r3, #0
 8007a28:	d007      	beq.n	8007a3a <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 8007a2a:	2301      	movs	r3, #1
 8007a2c:	617b      	str	r3, [r7, #20]
 8007a2e:	e004      	b.n	8007a3a <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8007a30:	4b0e      	ldr	r3, [pc, #56]	@ (8007a6c <xTaskIncrementTick+0x170>)
 8007a32:	681b      	ldr	r3, [r3, #0]
 8007a34:	3301      	adds	r3, #1
 8007a36:	4a0d      	ldr	r2, [pc, #52]	@ (8007a6c <xTaskIncrementTick+0x170>)
 8007a38:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8007a3a:	697b      	ldr	r3, [r7, #20]
}
 8007a3c:	4618      	mov	r0, r3
 8007a3e:	3718      	adds	r7, #24
 8007a40:	46bd      	mov	sp, r7
 8007a42:	bd80      	pop	{r7, pc}
 8007a44:	20005390 	.word	0x20005390
 8007a48:	2000536c 	.word	0x2000536c
 8007a4c:	20005320 	.word	0x20005320
 8007a50:	20005324 	.word	0x20005324
 8007a54:	20005380 	.word	0x20005380
 8007a58:	20005388 	.word	0x20005388
 8007a5c:	20005370 	.word	0x20005370
 8007a60:	20004e98 	.word	0x20004e98
 8007a64:	20004e94 	.word	0x20004e94
 8007a68:	2000537c 	.word	0x2000537c
 8007a6c:	20005378 	.word	0x20005378

08007a70 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8007a70:	b480      	push	{r7}
 8007a72:	b085      	sub	sp, #20
 8007a74:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8007a76:	4b28      	ldr	r3, [pc, #160]	@ (8007b18 <vTaskSwitchContext+0xa8>)
 8007a78:	681b      	ldr	r3, [r3, #0]
 8007a7a:	2b00      	cmp	r3, #0
 8007a7c:	d003      	beq.n	8007a86 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8007a7e:	4b27      	ldr	r3, [pc, #156]	@ (8007b1c <vTaskSwitchContext+0xac>)
 8007a80:	2201      	movs	r2, #1
 8007a82:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8007a84:	e042      	b.n	8007b0c <vTaskSwitchContext+0x9c>
		xYieldPending = pdFALSE;
 8007a86:	4b25      	ldr	r3, [pc, #148]	@ (8007b1c <vTaskSwitchContext+0xac>)
 8007a88:	2200      	movs	r2, #0
 8007a8a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007a8c:	4b24      	ldr	r3, [pc, #144]	@ (8007b20 <vTaskSwitchContext+0xb0>)
 8007a8e:	681b      	ldr	r3, [r3, #0]
 8007a90:	60fb      	str	r3, [r7, #12]
 8007a92:	e011      	b.n	8007ab8 <vTaskSwitchContext+0x48>
 8007a94:	68fb      	ldr	r3, [r7, #12]
 8007a96:	2b00      	cmp	r3, #0
 8007a98:	d10b      	bne.n	8007ab2 <vTaskSwitchContext+0x42>
	__asm volatile
 8007a9a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007a9e:	f383 8811 	msr	BASEPRI, r3
 8007aa2:	f3bf 8f6f 	isb	sy
 8007aa6:	f3bf 8f4f 	dsb	sy
 8007aaa:	607b      	str	r3, [r7, #4]
}
 8007aac:	bf00      	nop
 8007aae:	bf00      	nop
 8007ab0:	e7fd      	b.n	8007aae <vTaskSwitchContext+0x3e>
 8007ab2:	68fb      	ldr	r3, [r7, #12]
 8007ab4:	3b01      	subs	r3, #1
 8007ab6:	60fb      	str	r3, [r7, #12]
 8007ab8:	491a      	ldr	r1, [pc, #104]	@ (8007b24 <vTaskSwitchContext+0xb4>)
 8007aba:	68fa      	ldr	r2, [r7, #12]
 8007abc:	4613      	mov	r3, r2
 8007abe:	009b      	lsls	r3, r3, #2
 8007ac0:	4413      	add	r3, r2
 8007ac2:	009b      	lsls	r3, r3, #2
 8007ac4:	440b      	add	r3, r1
 8007ac6:	681b      	ldr	r3, [r3, #0]
 8007ac8:	2b00      	cmp	r3, #0
 8007aca:	d0e3      	beq.n	8007a94 <vTaskSwitchContext+0x24>
 8007acc:	68fa      	ldr	r2, [r7, #12]
 8007ace:	4613      	mov	r3, r2
 8007ad0:	009b      	lsls	r3, r3, #2
 8007ad2:	4413      	add	r3, r2
 8007ad4:	009b      	lsls	r3, r3, #2
 8007ad6:	4a13      	ldr	r2, [pc, #76]	@ (8007b24 <vTaskSwitchContext+0xb4>)
 8007ad8:	4413      	add	r3, r2
 8007ada:	60bb      	str	r3, [r7, #8]
 8007adc:	68bb      	ldr	r3, [r7, #8]
 8007ade:	685b      	ldr	r3, [r3, #4]
 8007ae0:	685a      	ldr	r2, [r3, #4]
 8007ae2:	68bb      	ldr	r3, [r7, #8]
 8007ae4:	605a      	str	r2, [r3, #4]
 8007ae6:	68bb      	ldr	r3, [r7, #8]
 8007ae8:	685a      	ldr	r2, [r3, #4]
 8007aea:	68bb      	ldr	r3, [r7, #8]
 8007aec:	3308      	adds	r3, #8
 8007aee:	429a      	cmp	r2, r3
 8007af0:	d104      	bne.n	8007afc <vTaskSwitchContext+0x8c>
 8007af2:	68bb      	ldr	r3, [r7, #8]
 8007af4:	685b      	ldr	r3, [r3, #4]
 8007af6:	685a      	ldr	r2, [r3, #4]
 8007af8:	68bb      	ldr	r3, [r7, #8]
 8007afa:	605a      	str	r2, [r3, #4]
 8007afc:	68bb      	ldr	r3, [r7, #8]
 8007afe:	685b      	ldr	r3, [r3, #4]
 8007b00:	68db      	ldr	r3, [r3, #12]
 8007b02:	4a09      	ldr	r2, [pc, #36]	@ (8007b28 <vTaskSwitchContext+0xb8>)
 8007b04:	6013      	str	r3, [r2, #0]
 8007b06:	4a06      	ldr	r2, [pc, #24]	@ (8007b20 <vTaskSwitchContext+0xb0>)
 8007b08:	68fb      	ldr	r3, [r7, #12]
 8007b0a:	6013      	str	r3, [r2, #0]
}
 8007b0c:	bf00      	nop
 8007b0e:	3714      	adds	r7, #20
 8007b10:	46bd      	mov	sp, r7
 8007b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b16:	4770      	bx	lr
 8007b18:	20005390 	.word	0x20005390
 8007b1c:	2000537c 	.word	0x2000537c
 8007b20:	20005370 	.word	0x20005370
 8007b24:	20004e98 	.word	0x20004e98
 8007b28:	20004e94 	.word	0x20004e94

08007b2c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8007b2c:	b580      	push	{r7, lr}
 8007b2e:	b084      	sub	sp, #16
 8007b30:	af00      	add	r7, sp, #0
 8007b32:	6078      	str	r0, [r7, #4]
 8007b34:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8007b36:	687b      	ldr	r3, [r7, #4]
 8007b38:	2b00      	cmp	r3, #0
 8007b3a:	d10b      	bne.n	8007b54 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 8007b3c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007b40:	f383 8811 	msr	BASEPRI, r3
 8007b44:	f3bf 8f6f 	isb	sy
 8007b48:	f3bf 8f4f 	dsb	sy
 8007b4c:	60fb      	str	r3, [r7, #12]
}
 8007b4e:	bf00      	nop
 8007b50:	bf00      	nop
 8007b52:	e7fd      	b.n	8007b50 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8007b54:	4b07      	ldr	r3, [pc, #28]	@ (8007b74 <vTaskPlaceOnEventList+0x48>)
 8007b56:	681b      	ldr	r3, [r3, #0]
 8007b58:	3318      	adds	r3, #24
 8007b5a:	4619      	mov	r1, r3
 8007b5c:	6878      	ldr	r0, [r7, #4]
 8007b5e:	f7fe fe70 	bl	8006842 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8007b62:	2101      	movs	r1, #1
 8007b64:	6838      	ldr	r0, [r7, #0]
 8007b66:	f000 faa9 	bl	80080bc <prvAddCurrentTaskToDelayedList>
}
 8007b6a:	bf00      	nop
 8007b6c:	3710      	adds	r7, #16
 8007b6e:	46bd      	mov	sp, r7
 8007b70:	bd80      	pop	{r7, pc}
 8007b72:	bf00      	nop
 8007b74:	20004e94 	.word	0x20004e94

08007b78 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8007b78:	b580      	push	{r7, lr}
 8007b7a:	b086      	sub	sp, #24
 8007b7c:	af00      	add	r7, sp, #0
 8007b7e:	60f8      	str	r0, [r7, #12]
 8007b80:	60b9      	str	r1, [r7, #8]
 8007b82:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8007b84:	68fb      	ldr	r3, [r7, #12]
 8007b86:	2b00      	cmp	r3, #0
 8007b88:	d10b      	bne.n	8007ba2 <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 8007b8a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007b8e:	f383 8811 	msr	BASEPRI, r3
 8007b92:	f3bf 8f6f 	isb	sy
 8007b96:	f3bf 8f4f 	dsb	sy
 8007b9a:	617b      	str	r3, [r7, #20]
}
 8007b9c:	bf00      	nop
 8007b9e:	bf00      	nop
 8007ba0:	e7fd      	b.n	8007b9e <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8007ba2:	4b0a      	ldr	r3, [pc, #40]	@ (8007bcc <vTaskPlaceOnEventListRestricted+0x54>)
 8007ba4:	681b      	ldr	r3, [r3, #0]
 8007ba6:	3318      	adds	r3, #24
 8007ba8:	4619      	mov	r1, r3
 8007baa:	68f8      	ldr	r0, [r7, #12]
 8007bac:	f7fe fe25 	bl	80067fa <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8007bb0:	687b      	ldr	r3, [r7, #4]
 8007bb2:	2b00      	cmp	r3, #0
 8007bb4:	d002      	beq.n	8007bbc <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 8007bb6:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8007bba:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8007bbc:	6879      	ldr	r1, [r7, #4]
 8007bbe:	68b8      	ldr	r0, [r7, #8]
 8007bc0:	f000 fa7c 	bl	80080bc <prvAddCurrentTaskToDelayedList>
	}
 8007bc4:	bf00      	nop
 8007bc6:	3718      	adds	r7, #24
 8007bc8:	46bd      	mov	sp, r7
 8007bca:	bd80      	pop	{r7, pc}
 8007bcc:	20004e94 	.word	0x20004e94

08007bd0 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8007bd0:	b580      	push	{r7, lr}
 8007bd2:	b086      	sub	sp, #24
 8007bd4:	af00      	add	r7, sp, #0
 8007bd6:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007bd8:	687b      	ldr	r3, [r7, #4]
 8007bda:	68db      	ldr	r3, [r3, #12]
 8007bdc:	68db      	ldr	r3, [r3, #12]
 8007bde:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8007be0:	693b      	ldr	r3, [r7, #16]
 8007be2:	2b00      	cmp	r3, #0
 8007be4:	d10b      	bne.n	8007bfe <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 8007be6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007bea:	f383 8811 	msr	BASEPRI, r3
 8007bee:	f3bf 8f6f 	isb	sy
 8007bf2:	f3bf 8f4f 	dsb	sy
 8007bf6:	60fb      	str	r3, [r7, #12]
}
 8007bf8:	bf00      	nop
 8007bfa:	bf00      	nop
 8007bfc:	e7fd      	b.n	8007bfa <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8007bfe:	693b      	ldr	r3, [r7, #16]
 8007c00:	3318      	adds	r3, #24
 8007c02:	4618      	mov	r0, r3
 8007c04:	f7fe fe56 	bl	80068b4 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007c08:	4b1d      	ldr	r3, [pc, #116]	@ (8007c80 <xTaskRemoveFromEventList+0xb0>)
 8007c0a:	681b      	ldr	r3, [r3, #0]
 8007c0c:	2b00      	cmp	r3, #0
 8007c0e:	d11d      	bne.n	8007c4c <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8007c10:	693b      	ldr	r3, [r7, #16]
 8007c12:	3304      	adds	r3, #4
 8007c14:	4618      	mov	r0, r3
 8007c16:	f7fe fe4d 	bl	80068b4 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8007c1a:	693b      	ldr	r3, [r7, #16]
 8007c1c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007c1e:	4b19      	ldr	r3, [pc, #100]	@ (8007c84 <xTaskRemoveFromEventList+0xb4>)
 8007c20:	681b      	ldr	r3, [r3, #0]
 8007c22:	429a      	cmp	r2, r3
 8007c24:	d903      	bls.n	8007c2e <xTaskRemoveFromEventList+0x5e>
 8007c26:	693b      	ldr	r3, [r7, #16]
 8007c28:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007c2a:	4a16      	ldr	r2, [pc, #88]	@ (8007c84 <xTaskRemoveFromEventList+0xb4>)
 8007c2c:	6013      	str	r3, [r2, #0]
 8007c2e:	693b      	ldr	r3, [r7, #16]
 8007c30:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007c32:	4613      	mov	r3, r2
 8007c34:	009b      	lsls	r3, r3, #2
 8007c36:	4413      	add	r3, r2
 8007c38:	009b      	lsls	r3, r3, #2
 8007c3a:	4a13      	ldr	r2, [pc, #76]	@ (8007c88 <xTaskRemoveFromEventList+0xb8>)
 8007c3c:	441a      	add	r2, r3
 8007c3e:	693b      	ldr	r3, [r7, #16]
 8007c40:	3304      	adds	r3, #4
 8007c42:	4619      	mov	r1, r3
 8007c44:	4610      	mov	r0, r2
 8007c46:	f7fe fdd8 	bl	80067fa <vListInsertEnd>
 8007c4a:	e005      	b.n	8007c58 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8007c4c:	693b      	ldr	r3, [r7, #16]
 8007c4e:	3318      	adds	r3, #24
 8007c50:	4619      	mov	r1, r3
 8007c52:	480e      	ldr	r0, [pc, #56]	@ (8007c8c <xTaskRemoveFromEventList+0xbc>)
 8007c54:	f7fe fdd1 	bl	80067fa <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8007c58:	693b      	ldr	r3, [r7, #16]
 8007c5a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007c5c:	4b0c      	ldr	r3, [pc, #48]	@ (8007c90 <xTaskRemoveFromEventList+0xc0>)
 8007c5e:	681b      	ldr	r3, [r3, #0]
 8007c60:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007c62:	429a      	cmp	r2, r3
 8007c64:	d905      	bls.n	8007c72 <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8007c66:	2301      	movs	r3, #1
 8007c68:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8007c6a:	4b0a      	ldr	r3, [pc, #40]	@ (8007c94 <xTaskRemoveFromEventList+0xc4>)
 8007c6c:	2201      	movs	r2, #1
 8007c6e:	601a      	str	r2, [r3, #0]
 8007c70:	e001      	b.n	8007c76 <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 8007c72:	2300      	movs	r3, #0
 8007c74:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8007c76:	697b      	ldr	r3, [r7, #20]
}
 8007c78:	4618      	mov	r0, r3
 8007c7a:	3718      	adds	r7, #24
 8007c7c:	46bd      	mov	sp, r7
 8007c7e:	bd80      	pop	{r7, pc}
 8007c80:	20005390 	.word	0x20005390
 8007c84:	20005370 	.word	0x20005370
 8007c88:	20004e98 	.word	0x20004e98
 8007c8c:	20005328 	.word	0x20005328
 8007c90:	20004e94 	.word	0x20004e94
 8007c94:	2000537c 	.word	0x2000537c

08007c98 <vTaskSetTimeOutState>:
	}
}
/*-----------------------------------------------------------*/

void vTaskSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8007c98:	b580      	push	{r7, lr}
 8007c9a:	b084      	sub	sp, #16
 8007c9c:	af00      	add	r7, sp, #0
 8007c9e:	6078      	str	r0, [r7, #4]
	configASSERT( pxTimeOut );
 8007ca0:	687b      	ldr	r3, [r7, #4]
 8007ca2:	2b00      	cmp	r3, #0
 8007ca4:	d10b      	bne.n	8007cbe <vTaskSetTimeOutState+0x26>
	__asm volatile
 8007ca6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007caa:	f383 8811 	msr	BASEPRI, r3
 8007cae:	f3bf 8f6f 	isb	sy
 8007cb2:	f3bf 8f4f 	dsb	sy
 8007cb6:	60fb      	str	r3, [r7, #12]
}
 8007cb8:	bf00      	nop
 8007cba:	bf00      	nop
 8007cbc:	e7fd      	b.n	8007cba <vTaskSetTimeOutState+0x22>
	taskENTER_CRITICAL();
 8007cbe:	f000 fedb 	bl	8008a78 <vPortEnterCritical>
	{
		pxTimeOut->xOverflowCount = xNumOfOverflows;
 8007cc2:	4b07      	ldr	r3, [pc, #28]	@ (8007ce0 <vTaskSetTimeOutState+0x48>)
 8007cc4:	681a      	ldr	r2, [r3, #0]
 8007cc6:	687b      	ldr	r3, [r7, #4]
 8007cc8:	601a      	str	r2, [r3, #0]
		pxTimeOut->xTimeOnEntering = xTickCount;
 8007cca:	4b06      	ldr	r3, [pc, #24]	@ (8007ce4 <vTaskSetTimeOutState+0x4c>)
 8007ccc:	681a      	ldr	r2, [r3, #0]
 8007cce:	687b      	ldr	r3, [r7, #4]
 8007cd0:	605a      	str	r2, [r3, #4]
	}
	taskEXIT_CRITICAL();
 8007cd2:	f000 ff03 	bl	8008adc <vPortExitCritical>
}
 8007cd6:	bf00      	nop
 8007cd8:	3710      	adds	r7, #16
 8007cda:	46bd      	mov	sp, r7
 8007cdc:	bd80      	pop	{r7, pc}
 8007cde:	bf00      	nop
 8007ce0:	20005380 	.word	0x20005380
 8007ce4:	2000536c 	.word	0x2000536c

08007ce8 <vTaskInternalSetTimeOutState>:
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8007ce8:	b480      	push	{r7}
 8007cea:	b083      	sub	sp, #12
 8007cec:	af00      	add	r7, sp, #0
 8007cee:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8007cf0:	4b06      	ldr	r3, [pc, #24]	@ (8007d0c <vTaskInternalSetTimeOutState+0x24>)
 8007cf2:	681a      	ldr	r2, [r3, #0]
 8007cf4:	687b      	ldr	r3, [r7, #4]
 8007cf6:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8007cf8:	4b05      	ldr	r3, [pc, #20]	@ (8007d10 <vTaskInternalSetTimeOutState+0x28>)
 8007cfa:	681a      	ldr	r2, [r3, #0]
 8007cfc:	687b      	ldr	r3, [r7, #4]
 8007cfe:	605a      	str	r2, [r3, #4]
}
 8007d00:	bf00      	nop
 8007d02:	370c      	adds	r7, #12
 8007d04:	46bd      	mov	sp, r7
 8007d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d0a:	4770      	bx	lr
 8007d0c:	20005380 	.word	0x20005380
 8007d10:	2000536c 	.word	0x2000536c

08007d14 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8007d14:	b580      	push	{r7, lr}
 8007d16:	b088      	sub	sp, #32
 8007d18:	af00      	add	r7, sp, #0
 8007d1a:	6078      	str	r0, [r7, #4]
 8007d1c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8007d1e:	687b      	ldr	r3, [r7, #4]
 8007d20:	2b00      	cmp	r3, #0
 8007d22:	d10b      	bne.n	8007d3c <xTaskCheckForTimeOut+0x28>
	__asm volatile
 8007d24:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007d28:	f383 8811 	msr	BASEPRI, r3
 8007d2c:	f3bf 8f6f 	isb	sy
 8007d30:	f3bf 8f4f 	dsb	sy
 8007d34:	613b      	str	r3, [r7, #16]
}
 8007d36:	bf00      	nop
 8007d38:	bf00      	nop
 8007d3a:	e7fd      	b.n	8007d38 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8007d3c:	683b      	ldr	r3, [r7, #0]
 8007d3e:	2b00      	cmp	r3, #0
 8007d40:	d10b      	bne.n	8007d5a <xTaskCheckForTimeOut+0x46>
	__asm volatile
 8007d42:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007d46:	f383 8811 	msr	BASEPRI, r3
 8007d4a:	f3bf 8f6f 	isb	sy
 8007d4e:	f3bf 8f4f 	dsb	sy
 8007d52:	60fb      	str	r3, [r7, #12]
}
 8007d54:	bf00      	nop
 8007d56:	bf00      	nop
 8007d58:	e7fd      	b.n	8007d56 <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 8007d5a:	f000 fe8d 	bl	8008a78 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8007d5e:	4b1d      	ldr	r3, [pc, #116]	@ (8007dd4 <xTaskCheckForTimeOut+0xc0>)
 8007d60:	681b      	ldr	r3, [r3, #0]
 8007d62:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8007d64:	687b      	ldr	r3, [r7, #4]
 8007d66:	685b      	ldr	r3, [r3, #4]
 8007d68:	69ba      	ldr	r2, [r7, #24]
 8007d6a:	1ad3      	subs	r3, r2, r3
 8007d6c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8007d6e:	683b      	ldr	r3, [r7, #0]
 8007d70:	681b      	ldr	r3, [r3, #0]
 8007d72:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8007d76:	d102      	bne.n	8007d7e <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8007d78:	2300      	movs	r3, #0
 8007d7a:	61fb      	str	r3, [r7, #28]
 8007d7c:	e023      	b.n	8007dc6 <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8007d7e:	687b      	ldr	r3, [r7, #4]
 8007d80:	681a      	ldr	r2, [r3, #0]
 8007d82:	4b15      	ldr	r3, [pc, #84]	@ (8007dd8 <xTaskCheckForTimeOut+0xc4>)
 8007d84:	681b      	ldr	r3, [r3, #0]
 8007d86:	429a      	cmp	r2, r3
 8007d88:	d007      	beq.n	8007d9a <xTaskCheckForTimeOut+0x86>
 8007d8a:	687b      	ldr	r3, [r7, #4]
 8007d8c:	685b      	ldr	r3, [r3, #4]
 8007d8e:	69ba      	ldr	r2, [r7, #24]
 8007d90:	429a      	cmp	r2, r3
 8007d92:	d302      	bcc.n	8007d9a <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8007d94:	2301      	movs	r3, #1
 8007d96:	61fb      	str	r3, [r7, #28]
 8007d98:	e015      	b.n	8007dc6 <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8007d9a:	683b      	ldr	r3, [r7, #0]
 8007d9c:	681b      	ldr	r3, [r3, #0]
 8007d9e:	697a      	ldr	r2, [r7, #20]
 8007da0:	429a      	cmp	r2, r3
 8007da2:	d20b      	bcs.n	8007dbc <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8007da4:	683b      	ldr	r3, [r7, #0]
 8007da6:	681a      	ldr	r2, [r3, #0]
 8007da8:	697b      	ldr	r3, [r7, #20]
 8007daa:	1ad2      	subs	r2, r2, r3
 8007dac:	683b      	ldr	r3, [r7, #0]
 8007dae:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8007db0:	6878      	ldr	r0, [r7, #4]
 8007db2:	f7ff ff99 	bl	8007ce8 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8007db6:	2300      	movs	r3, #0
 8007db8:	61fb      	str	r3, [r7, #28]
 8007dba:	e004      	b.n	8007dc6 <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 8007dbc:	683b      	ldr	r3, [r7, #0]
 8007dbe:	2200      	movs	r2, #0
 8007dc0:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8007dc2:	2301      	movs	r3, #1
 8007dc4:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8007dc6:	f000 fe89 	bl	8008adc <vPortExitCritical>

	return xReturn;
 8007dca:	69fb      	ldr	r3, [r7, #28]
}
 8007dcc:	4618      	mov	r0, r3
 8007dce:	3720      	adds	r7, #32
 8007dd0:	46bd      	mov	sp, r7
 8007dd2:	bd80      	pop	{r7, pc}
 8007dd4:	2000536c 	.word	0x2000536c
 8007dd8:	20005380 	.word	0x20005380

08007ddc <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8007ddc:	b480      	push	{r7}
 8007dde:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8007de0:	4b03      	ldr	r3, [pc, #12]	@ (8007df0 <vTaskMissedYield+0x14>)
 8007de2:	2201      	movs	r2, #1
 8007de4:	601a      	str	r2, [r3, #0]
}
 8007de6:	bf00      	nop
 8007de8:	46bd      	mov	sp, r7
 8007dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dee:	4770      	bx	lr
 8007df0:	2000537c 	.word	0x2000537c

08007df4 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8007df4:	b580      	push	{r7, lr}
 8007df6:	b082      	sub	sp, #8
 8007df8:	af00      	add	r7, sp, #0
 8007dfa:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8007dfc:	f000 f852 	bl	8007ea4 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8007e00:	4b06      	ldr	r3, [pc, #24]	@ (8007e1c <prvIdleTask+0x28>)
 8007e02:	681b      	ldr	r3, [r3, #0]
 8007e04:	2b01      	cmp	r3, #1
 8007e06:	d9f9      	bls.n	8007dfc <prvIdleTask+0x8>
			{
				taskYIELD();
 8007e08:	4b05      	ldr	r3, [pc, #20]	@ (8007e20 <prvIdleTask+0x2c>)
 8007e0a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007e0e:	601a      	str	r2, [r3, #0]
 8007e10:	f3bf 8f4f 	dsb	sy
 8007e14:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8007e18:	e7f0      	b.n	8007dfc <prvIdleTask+0x8>
 8007e1a:	bf00      	nop
 8007e1c:	20004e98 	.word	0x20004e98
 8007e20:	e000ed04 	.word	0xe000ed04

08007e24 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8007e24:	b580      	push	{r7, lr}
 8007e26:	b082      	sub	sp, #8
 8007e28:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8007e2a:	2300      	movs	r3, #0
 8007e2c:	607b      	str	r3, [r7, #4]
 8007e2e:	e00c      	b.n	8007e4a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8007e30:	687a      	ldr	r2, [r7, #4]
 8007e32:	4613      	mov	r3, r2
 8007e34:	009b      	lsls	r3, r3, #2
 8007e36:	4413      	add	r3, r2
 8007e38:	009b      	lsls	r3, r3, #2
 8007e3a:	4a12      	ldr	r2, [pc, #72]	@ (8007e84 <prvInitialiseTaskLists+0x60>)
 8007e3c:	4413      	add	r3, r2
 8007e3e:	4618      	mov	r0, r3
 8007e40:	f7fe fcae 	bl	80067a0 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8007e44:	687b      	ldr	r3, [r7, #4]
 8007e46:	3301      	adds	r3, #1
 8007e48:	607b      	str	r3, [r7, #4]
 8007e4a:	687b      	ldr	r3, [r7, #4]
 8007e4c:	2b37      	cmp	r3, #55	@ 0x37
 8007e4e:	d9ef      	bls.n	8007e30 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8007e50:	480d      	ldr	r0, [pc, #52]	@ (8007e88 <prvInitialiseTaskLists+0x64>)
 8007e52:	f7fe fca5 	bl	80067a0 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8007e56:	480d      	ldr	r0, [pc, #52]	@ (8007e8c <prvInitialiseTaskLists+0x68>)
 8007e58:	f7fe fca2 	bl	80067a0 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8007e5c:	480c      	ldr	r0, [pc, #48]	@ (8007e90 <prvInitialiseTaskLists+0x6c>)
 8007e5e:	f7fe fc9f 	bl	80067a0 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8007e62:	480c      	ldr	r0, [pc, #48]	@ (8007e94 <prvInitialiseTaskLists+0x70>)
 8007e64:	f7fe fc9c 	bl	80067a0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8007e68:	480b      	ldr	r0, [pc, #44]	@ (8007e98 <prvInitialiseTaskLists+0x74>)
 8007e6a:	f7fe fc99 	bl	80067a0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8007e6e:	4b0b      	ldr	r3, [pc, #44]	@ (8007e9c <prvInitialiseTaskLists+0x78>)
 8007e70:	4a05      	ldr	r2, [pc, #20]	@ (8007e88 <prvInitialiseTaskLists+0x64>)
 8007e72:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8007e74:	4b0a      	ldr	r3, [pc, #40]	@ (8007ea0 <prvInitialiseTaskLists+0x7c>)
 8007e76:	4a05      	ldr	r2, [pc, #20]	@ (8007e8c <prvInitialiseTaskLists+0x68>)
 8007e78:	601a      	str	r2, [r3, #0]
}
 8007e7a:	bf00      	nop
 8007e7c:	3708      	adds	r7, #8
 8007e7e:	46bd      	mov	sp, r7
 8007e80:	bd80      	pop	{r7, pc}
 8007e82:	bf00      	nop
 8007e84:	20004e98 	.word	0x20004e98
 8007e88:	200052f8 	.word	0x200052f8
 8007e8c:	2000530c 	.word	0x2000530c
 8007e90:	20005328 	.word	0x20005328
 8007e94:	2000533c 	.word	0x2000533c
 8007e98:	20005354 	.word	0x20005354
 8007e9c:	20005320 	.word	0x20005320
 8007ea0:	20005324 	.word	0x20005324

08007ea4 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8007ea4:	b580      	push	{r7, lr}
 8007ea6:	b082      	sub	sp, #8
 8007ea8:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8007eaa:	e019      	b.n	8007ee0 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8007eac:	f000 fde4 	bl	8008a78 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007eb0:	4b10      	ldr	r3, [pc, #64]	@ (8007ef4 <prvCheckTasksWaitingTermination+0x50>)
 8007eb2:	68db      	ldr	r3, [r3, #12]
 8007eb4:	68db      	ldr	r3, [r3, #12]
 8007eb6:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007eb8:	687b      	ldr	r3, [r7, #4]
 8007eba:	3304      	adds	r3, #4
 8007ebc:	4618      	mov	r0, r3
 8007ebe:	f7fe fcf9 	bl	80068b4 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8007ec2:	4b0d      	ldr	r3, [pc, #52]	@ (8007ef8 <prvCheckTasksWaitingTermination+0x54>)
 8007ec4:	681b      	ldr	r3, [r3, #0]
 8007ec6:	3b01      	subs	r3, #1
 8007ec8:	4a0b      	ldr	r2, [pc, #44]	@ (8007ef8 <prvCheckTasksWaitingTermination+0x54>)
 8007eca:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8007ecc:	4b0b      	ldr	r3, [pc, #44]	@ (8007efc <prvCheckTasksWaitingTermination+0x58>)
 8007ece:	681b      	ldr	r3, [r3, #0]
 8007ed0:	3b01      	subs	r3, #1
 8007ed2:	4a0a      	ldr	r2, [pc, #40]	@ (8007efc <prvCheckTasksWaitingTermination+0x58>)
 8007ed4:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8007ed6:	f000 fe01 	bl	8008adc <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8007eda:	6878      	ldr	r0, [r7, #4]
 8007edc:	f000 f810 	bl	8007f00 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8007ee0:	4b06      	ldr	r3, [pc, #24]	@ (8007efc <prvCheckTasksWaitingTermination+0x58>)
 8007ee2:	681b      	ldr	r3, [r3, #0]
 8007ee4:	2b00      	cmp	r3, #0
 8007ee6:	d1e1      	bne.n	8007eac <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8007ee8:	bf00      	nop
 8007eea:	bf00      	nop
 8007eec:	3708      	adds	r7, #8
 8007eee:	46bd      	mov	sp, r7
 8007ef0:	bd80      	pop	{r7, pc}
 8007ef2:	bf00      	nop
 8007ef4:	2000533c 	.word	0x2000533c
 8007ef8:	20005368 	.word	0x20005368
 8007efc:	20005350 	.word	0x20005350

08007f00 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8007f00:	b580      	push	{r7, lr}
 8007f02:	b084      	sub	sp, #16
 8007f04:	af00      	add	r7, sp, #0
 8007f06:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8007f08:	687b      	ldr	r3, [r7, #4]
 8007f0a:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 8007f0e:	2b00      	cmp	r3, #0
 8007f10:	d108      	bne.n	8007f24 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8007f12:	687b      	ldr	r3, [r7, #4]
 8007f14:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007f16:	4618      	mov	r0, r3
 8007f18:	f000 ff9e 	bl	8008e58 <vPortFree>
				vPortFree( pxTCB );
 8007f1c:	6878      	ldr	r0, [r7, #4]
 8007f1e:	f000 ff9b 	bl	8008e58 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8007f22:	e019      	b.n	8007f58 <prvDeleteTCB+0x58>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8007f24:	687b      	ldr	r3, [r7, #4]
 8007f26:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 8007f2a:	2b01      	cmp	r3, #1
 8007f2c:	d103      	bne.n	8007f36 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8007f2e:	6878      	ldr	r0, [r7, #4]
 8007f30:	f000 ff92 	bl	8008e58 <vPortFree>
	}
 8007f34:	e010      	b.n	8007f58 <prvDeleteTCB+0x58>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8007f36:	687b      	ldr	r3, [r7, #4]
 8007f38:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 8007f3c:	2b02      	cmp	r3, #2
 8007f3e:	d00b      	beq.n	8007f58 <prvDeleteTCB+0x58>
	__asm volatile
 8007f40:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007f44:	f383 8811 	msr	BASEPRI, r3
 8007f48:	f3bf 8f6f 	isb	sy
 8007f4c:	f3bf 8f4f 	dsb	sy
 8007f50:	60fb      	str	r3, [r7, #12]
}
 8007f52:	bf00      	nop
 8007f54:	bf00      	nop
 8007f56:	e7fd      	b.n	8007f54 <prvDeleteTCB+0x54>
	}
 8007f58:	bf00      	nop
 8007f5a:	3710      	adds	r7, #16
 8007f5c:	46bd      	mov	sp, r7
 8007f5e:	bd80      	pop	{r7, pc}

08007f60 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8007f60:	b480      	push	{r7}
 8007f62:	b083      	sub	sp, #12
 8007f64:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007f66:	4b0c      	ldr	r3, [pc, #48]	@ (8007f98 <prvResetNextTaskUnblockTime+0x38>)
 8007f68:	681b      	ldr	r3, [r3, #0]
 8007f6a:	681b      	ldr	r3, [r3, #0]
 8007f6c:	2b00      	cmp	r3, #0
 8007f6e:	d104      	bne.n	8007f7a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8007f70:	4b0a      	ldr	r3, [pc, #40]	@ (8007f9c <prvResetNextTaskUnblockTime+0x3c>)
 8007f72:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8007f76:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8007f78:	e008      	b.n	8007f8c <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007f7a:	4b07      	ldr	r3, [pc, #28]	@ (8007f98 <prvResetNextTaskUnblockTime+0x38>)
 8007f7c:	681b      	ldr	r3, [r3, #0]
 8007f7e:	68db      	ldr	r3, [r3, #12]
 8007f80:	68db      	ldr	r3, [r3, #12]
 8007f82:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8007f84:	687b      	ldr	r3, [r7, #4]
 8007f86:	685b      	ldr	r3, [r3, #4]
 8007f88:	4a04      	ldr	r2, [pc, #16]	@ (8007f9c <prvResetNextTaskUnblockTime+0x3c>)
 8007f8a:	6013      	str	r3, [r2, #0]
}
 8007f8c:	bf00      	nop
 8007f8e:	370c      	adds	r7, #12
 8007f90:	46bd      	mov	sp, r7
 8007f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f96:	4770      	bx	lr
 8007f98:	20005320 	.word	0x20005320
 8007f9c:	20005388 	.word	0x20005388

08007fa0 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8007fa0:	b480      	push	{r7}
 8007fa2:	b083      	sub	sp, #12
 8007fa4:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8007fa6:	4b0b      	ldr	r3, [pc, #44]	@ (8007fd4 <xTaskGetSchedulerState+0x34>)
 8007fa8:	681b      	ldr	r3, [r3, #0]
 8007faa:	2b00      	cmp	r3, #0
 8007fac:	d102      	bne.n	8007fb4 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8007fae:	2301      	movs	r3, #1
 8007fb0:	607b      	str	r3, [r7, #4]
 8007fb2:	e008      	b.n	8007fc6 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007fb4:	4b08      	ldr	r3, [pc, #32]	@ (8007fd8 <xTaskGetSchedulerState+0x38>)
 8007fb6:	681b      	ldr	r3, [r3, #0]
 8007fb8:	2b00      	cmp	r3, #0
 8007fba:	d102      	bne.n	8007fc2 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8007fbc:	2302      	movs	r3, #2
 8007fbe:	607b      	str	r3, [r7, #4]
 8007fc0:	e001      	b.n	8007fc6 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8007fc2:	2300      	movs	r3, #0
 8007fc4:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8007fc6:	687b      	ldr	r3, [r7, #4]
	}
 8007fc8:	4618      	mov	r0, r3
 8007fca:	370c      	adds	r7, #12
 8007fcc:	46bd      	mov	sp, r7
 8007fce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fd2:	4770      	bx	lr
 8007fd4:	20005374 	.word	0x20005374
 8007fd8:	20005390 	.word	0x20005390

08007fdc <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8007fdc:	b580      	push	{r7, lr}
 8007fde:	b086      	sub	sp, #24
 8007fe0:	af00      	add	r7, sp, #0
 8007fe2:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8007fe4:	687b      	ldr	r3, [r7, #4]
 8007fe6:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8007fe8:	2300      	movs	r3, #0
 8007fea:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8007fec:	687b      	ldr	r3, [r7, #4]
 8007fee:	2b00      	cmp	r3, #0
 8007ff0:	d058      	beq.n	80080a4 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8007ff2:	4b2f      	ldr	r3, [pc, #188]	@ (80080b0 <xTaskPriorityDisinherit+0xd4>)
 8007ff4:	681b      	ldr	r3, [r3, #0]
 8007ff6:	693a      	ldr	r2, [r7, #16]
 8007ff8:	429a      	cmp	r2, r3
 8007ffa:	d00b      	beq.n	8008014 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 8007ffc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008000:	f383 8811 	msr	BASEPRI, r3
 8008004:	f3bf 8f6f 	isb	sy
 8008008:	f3bf 8f4f 	dsb	sy
 800800c:	60fb      	str	r3, [r7, #12]
}
 800800e:	bf00      	nop
 8008010:	bf00      	nop
 8008012:	e7fd      	b.n	8008010 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8008014:	693b      	ldr	r3, [r7, #16]
 8008016:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008018:	2b00      	cmp	r3, #0
 800801a:	d10b      	bne.n	8008034 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 800801c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008020:	f383 8811 	msr	BASEPRI, r3
 8008024:	f3bf 8f6f 	isb	sy
 8008028:	f3bf 8f4f 	dsb	sy
 800802c:	60bb      	str	r3, [r7, #8]
}
 800802e:	bf00      	nop
 8008030:	bf00      	nop
 8008032:	e7fd      	b.n	8008030 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 8008034:	693b      	ldr	r3, [r7, #16]
 8008036:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008038:	1e5a      	subs	r2, r3, #1
 800803a:	693b      	ldr	r3, [r7, #16]
 800803c:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800803e:	693b      	ldr	r3, [r7, #16]
 8008040:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008042:	693b      	ldr	r3, [r7, #16]
 8008044:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008046:	429a      	cmp	r2, r3
 8008048:	d02c      	beq.n	80080a4 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800804a:	693b      	ldr	r3, [r7, #16]
 800804c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800804e:	2b00      	cmp	r3, #0
 8008050:	d128      	bne.n	80080a4 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008052:	693b      	ldr	r3, [r7, #16]
 8008054:	3304      	adds	r3, #4
 8008056:	4618      	mov	r0, r3
 8008058:	f7fe fc2c 	bl	80068b4 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800805c:	693b      	ldr	r3, [r7, #16]
 800805e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8008060:	693b      	ldr	r3, [r7, #16]
 8008062:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008064:	693b      	ldr	r3, [r7, #16]
 8008066:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008068:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800806c:	693b      	ldr	r3, [r7, #16]
 800806e:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8008070:	693b      	ldr	r3, [r7, #16]
 8008072:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008074:	4b0f      	ldr	r3, [pc, #60]	@ (80080b4 <xTaskPriorityDisinherit+0xd8>)
 8008076:	681b      	ldr	r3, [r3, #0]
 8008078:	429a      	cmp	r2, r3
 800807a:	d903      	bls.n	8008084 <xTaskPriorityDisinherit+0xa8>
 800807c:	693b      	ldr	r3, [r7, #16]
 800807e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008080:	4a0c      	ldr	r2, [pc, #48]	@ (80080b4 <xTaskPriorityDisinherit+0xd8>)
 8008082:	6013      	str	r3, [r2, #0]
 8008084:	693b      	ldr	r3, [r7, #16]
 8008086:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008088:	4613      	mov	r3, r2
 800808a:	009b      	lsls	r3, r3, #2
 800808c:	4413      	add	r3, r2
 800808e:	009b      	lsls	r3, r3, #2
 8008090:	4a09      	ldr	r2, [pc, #36]	@ (80080b8 <xTaskPriorityDisinherit+0xdc>)
 8008092:	441a      	add	r2, r3
 8008094:	693b      	ldr	r3, [r7, #16]
 8008096:	3304      	adds	r3, #4
 8008098:	4619      	mov	r1, r3
 800809a:	4610      	mov	r0, r2
 800809c:	f7fe fbad 	bl	80067fa <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80080a0:	2301      	movs	r3, #1
 80080a2:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80080a4:	697b      	ldr	r3, [r7, #20]
	}
 80080a6:	4618      	mov	r0, r3
 80080a8:	3718      	adds	r7, #24
 80080aa:	46bd      	mov	sp, r7
 80080ac:	bd80      	pop	{r7, pc}
 80080ae:	bf00      	nop
 80080b0:	20004e94 	.word	0x20004e94
 80080b4:	20005370 	.word	0x20005370
 80080b8:	20004e98 	.word	0x20004e98

080080bc <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80080bc:	b580      	push	{r7, lr}
 80080be:	b084      	sub	sp, #16
 80080c0:	af00      	add	r7, sp, #0
 80080c2:	6078      	str	r0, [r7, #4]
 80080c4:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80080c6:	4b21      	ldr	r3, [pc, #132]	@ (800814c <prvAddCurrentTaskToDelayedList+0x90>)
 80080c8:	681b      	ldr	r3, [r3, #0]
 80080ca:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80080cc:	4b20      	ldr	r3, [pc, #128]	@ (8008150 <prvAddCurrentTaskToDelayedList+0x94>)
 80080ce:	681b      	ldr	r3, [r3, #0]
 80080d0:	3304      	adds	r3, #4
 80080d2:	4618      	mov	r0, r3
 80080d4:	f7fe fbee 	bl	80068b4 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80080d8:	687b      	ldr	r3, [r7, #4]
 80080da:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80080de:	d10a      	bne.n	80080f6 <prvAddCurrentTaskToDelayedList+0x3a>
 80080e0:	683b      	ldr	r3, [r7, #0]
 80080e2:	2b00      	cmp	r3, #0
 80080e4:	d007      	beq.n	80080f6 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80080e6:	4b1a      	ldr	r3, [pc, #104]	@ (8008150 <prvAddCurrentTaskToDelayedList+0x94>)
 80080e8:	681b      	ldr	r3, [r3, #0]
 80080ea:	3304      	adds	r3, #4
 80080ec:	4619      	mov	r1, r3
 80080ee:	4819      	ldr	r0, [pc, #100]	@ (8008154 <prvAddCurrentTaskToDelayedList+0x98>)
 80080f0:	f7fe fb83 	bl	80067fa <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80080f4:	e026      	b.n	8008144 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80080f6:	68fa      	ldr	r2, [r7, #12]
 80080f8:	687b      	ldr	r3, [r7, #4]
 80080fa:	4413      	add	r3, r2
 80080fc:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80080fe:	4b14      	ldr	r3, [pc, #80]	@ (8008150 <prvAddCurrentTaskToDelayedList+0x94>)
 8008100:	681b      	ldr	r3, [r3, #0]
 8008102:	68ba      	ldr	r2, [r7, #8]
 8008104:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8008106:	68ba      	ldr	r2, [r7, #8]
 8008108:	68fb      	ldr	r3, [r7, #12]
 800810a:	429a      	cmp	r2, r3
 800810c:	d209      	bcs.n	8008122 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800810e:	4b12      	ldr	r3, [pc, #72]	@ (8008158 <prvAddCurrentTaskToDelayedList+0x9c>)
 8008110:	681a      	ldr	r2, [r3, #0]
 8008112:	4b0f      	ldr	r3, [pc, #60]	@ (8008150 <prvAddCurrentTaskToDelayedList+0x94>)
 8008114:	681b      	ldr	r3, [r3, #0]
 8008116:	3304      	adds	r3, #4
 8008118:	4619      	mov	r1, r3
 800811a:	4610      	mov	r0, r2
 800811c:	f7fe fb91 	bl	8006842 <vListInsert>
}
 8008120:	e010      	b.n	8008144 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008122:	4b0e      	ldr	r3, [pc, #56]	@ (800815c <prvAddCurrentTaskToDelayedList+0xa0>)
 8008124:	681a      	ldr	r2, [r3, #0]
 8008126:	4b0a      	ldr	r3, [pc, #40]	@ (8008150 <prvAddCurrentTaskToDelayedList+0x94>)
 8008128:	681b      	ldr	r3, [r3, #0]
 800812a:	3304      	adds	r3, #4
 800812c:	4619      	mov	r1, r3
 800812e:	4610      	mov	r0, r2
 8008130:	f7fe fb87 	bl	8006842 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8008134:	4b0a      	ldr	r3, [pc, #40]	@ (8008160 <prvAddCurrentTaskToDelayedList+0xa4>)
 8008136:	681b      	ldr	r3, [r3, #0]
 8008138:	68ba      	ldr	r2, [r7, #8]
 800813a:	429a      	cmp	r2, r3
 800813c:	d202      	bcs.n	8008144 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800813e:	4a08      	ldr	r2, [pc, #32]	@ (8008160 <prvAddCurrentTaskToDelayedList+0xa4>)
 8008140:	68bb      	ldr	r3, [r7, #8]
 8008142:	6013      	str	r3, [r2, #0]
}
 8008144:	bf00      	nop
 8008146:	3710      	adds	r7, #16
 8008148:	46bd      	mov	sp, r7
 800814a:	bd80      	pop	{r7, pc}
 800814c:	2000536c 	.word	0x2000536c
 8008150:	20004e94 	.word	0x20004e94
 8008154:	20005354 	.word	0x20005354
 8008158:	20005324 	.word	0x20005324
 800815c:	20005320 	.word	0x20005320
 8008160:	20005388 	.word	0x20005388

08008164 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8008164:	b580      	push	{r7, lr}
 8008166:	b08a      	sub	sp, #40	@ 0x28
 8008168:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800816a:	2300      	movs	r3, #0
 800816c:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800816e:	f000 fb13 	bl	8008798 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8008172:	4b1d      	ldr	r3, [pc, #116]	@ (80081e8 <xTimerCreateTimerTask+0x84>)
 8008174:	681b      	ldr	r3, [r3, #0]
 8008176:	2b00      	cmp	r3, #0
 8008178:	d021      	beq.n	80081be <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800817a:	2300      	movs	r3, #0
 800817c:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800817e:	2300      	movs	r3, #0
 8008180:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8008182:	1d3a      	adds	r2, r7, #4
 8008184:	f107 0108 	add.w	r1, r7, #8
 8008188:	f107 030c 	add.w	r3, r7, #12
 800818c:	4618      	mov	r0, r3
 800818e:	f7fe faed 	bl	800676c <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8008192:	6879      	ldr	r1, [r7, #4]
 8008194:	68bb      	ldr	r3, [r7, #8]
 8008196:	68fa      	ldr	r2, [r7, #12]
 8008198:	9202      	str	r2, [sp, #8]
 800819a:	9301      	str	r3, [sp, #4]
 800819c:	2302      	movs	r3, #2
 800819e:	9300      	str	r3, [sp, #0]
 80081a0:	2300      	movs	r3, #0
 80081a2:	460a      	mov	r2, r1
 80081a4:	4911      	ldr	r1, [pc, #68]	@ (80081ec <xTimerCreateTimerTask+0x88>)
 80081a6:	4812      	ldr	r0, [pc, #72]	@ (80081f0 <xTimerCreateTimerTask+0x8c>)
 80081a8:	f7ff f8a8 	bl	80072fc <xTaskCreateStatic>
 80081ac:	4603      	mov	r3, r0
 80081ae:	4a11      	ldr	r2, [pc, #68]	@ (80081f4 <xTimerCreateTimerTask+0x90>)
 80081b0:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 80081b2:	4b10      	ldr	r3, [pc, #64]	@ (80081f4 <xTimerCreateTimerTask+0x90>)
 80081b4:	681b      	ldr	r3, [r3, #0]
 80081b6:	2b00      	cmp	r3, #0
 80081b8:	d001      	beq.n	80081be <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 80081ba:	2301      	movs	r3, #1
 80081bc:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 80081be:	697b      	ldr	r3, [r7, #20]
 80081c0:	2b00      	cmp	r3, #0
 80081c2:	d10b      	bne.n	80081dc <xTimerCreateTimerTask+0x78>
	__asm volatile
 80081c4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80081c8:	f383 8811 	msr	BASEPRI, r3
 80081cc:	f3bf 8f6f 	isb	sy
 80081d0:	f3bf 8f4f 	dsb	sy
 80081d4:	613b      	str	r3, [r7, #16]
}
 80081d6:	bf00      	nop
 80081d8:	bf00      	nop
 80081da:	e7fd      	b.n	80081d8 <xTimerCreateTimerTask+0x74>
	return xReturn;
 80081dc:	697b      	ldr	r3, [r7, #20]
}
 80081de:	4618      	mov	r0, r3
 80081e0:	3718      	adds	r7, #24
 80081e2:	46bd      	mov	sp, r7
 80081e4:	bd80      	pop	{r7, pc}
 80081e6:	bf00      	nop
 80081e8:	200053c4 	.word	0x200053c4
 80081ec:	080165a0 	.word	0x080165a0
 80081f0:	08008331 	.word	0x08008331
 80081f4:	200053c8 	.word	0x200053c8

080081f8 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 80081f8:	b580      	push	{r7, lr}
 80081fa:	b08a      	sub	sp, #40	@ 0x28
 80081fc:	af00      	add	r7, sp, #0
 80081fe:	60f8      	str	r0, [r7, #12]
 8008200:	60b9      	str	r1, [r7, #8]
 8008202:	607a      	str	r2, [r7, #4]
 8008204:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8008206:	2300      	movs	r3, #0
 8008208:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800820a:	68fb      	ldr	r3, [r7, #12]
 800820c:	2b00      	cmp	r3, #0
 800820e:	d10b      	bne.n	8008228 <xTimerGenericCommand+0x30>
	__asm volatile
 8008210:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008214:	f383 8811 	msr	BASEPRI, r3
 8008218:	f3bf 8f6f 	isb	sy
 800821c:	f3bf 8f4f 	dsb	sy
 8008220:	623b      	str	r3, [r7, #32]
}
 8008222:	bf00      	nop
 8008224:	bf00      	nop
 8008226:	e7fd      	b.n	8008224 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8008228:	4b19      	ldr	r3, [pc, #100]	@ (8008290 <xTimerGenericCommand+0x98>)
 800822a:	681b      	ldr	r3, [r3, #0]
 800822c:	2b00      	cmp	r3, #0
 800822e:	d02a      	beq.n	8008286 <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8008230:	68bb      	ldr	r3, [r7, #8]
 8008232:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8008234:	687b      	ldr	r3, [r7, #4]
 8008236:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8008238:	68fb      	ldr	r3, [r7, #12]
 800823a:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800823c:	68bb      	ldr	r3, [r7, #8]
 800823e:	2b05      	cmp	r3, #5
 8008240:	dc18      	bgt.n	8008274 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8008242:	f7ff fead 	bl	8007fa0 <xTaskGetSchedulerState>
 8008246:	4603      	mov	r3, r0
 8008248:	2b02      	cmp	r3, #2
 800824a:	d109      	bne.n	8008260 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800824c:	4b10      	ldr	r3, [pc, #64]	@ (8008290 <xTimerGenericCommand+0x98>)
 800824e:	6818      	ldr	r0, [r3, #0]
 8008250:	f107 0110 	add.w	r1, r7, #16
 8008254:	2300      	movs	r3, #0
 8008256:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008258:	f7fe fc60 	bl	8006b1c <xQueueGenericSend>
 800825c:	6278      	str	r0, [r7, #36]	@ 0x24
 800825e:	e012      	b.n	8008286 <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8008260:	4b0b      	ldr	r3, [pc, #44]	@ (8008290 <xTimerGenericCommand+0x98>)
 8008262:	6818      	ldr	r0, [r3, #0]
 8008264:	f107 0110 	add.w	r1, r7, #16
 8008268:	2300      	movs	r3, #0
 800826a:	2200      	movs	r2, #0
 800826c:	f7fe fc56 	bl	8006b1c <xQueueGenericSend>
 8008270:	6278      	str	r0, [r7, #36]	@ 0x24
 8008272:	e008      	b.n	8008286 <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8008274:	4b06      	ldr	r3, [pc, #24]	@ (8008290 <xTimerGenericCommand+0x98>)
 8008276:	6818      	ldr	r0, [r3, #0]
 8008278:	f107 0110 	add.w	r1, r7, #16
 800827c:	2300      	movs	r3, #0
 800827e:	683a      	ldr	r2, [r7, #0]
 8008280:	f7fe fd4e 	bl	8006d20 <xQueueGenericSendFromISR>
 8008284:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8008286:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8008288:	4618      	mov	r0, r3
 800828a:	3728      	adds	r7, #40	@ 0x28
 800828c:	46bd      	mov	sp, r7
 800828e:	bd80      	pop	{r7, pc}
 8008290:	200053c4 	.word	0x200053c4

08008294 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8008294:	b580      	push	{r7, lr}
 8008296:	b088      	sub	sp, #32
 8008298:	af02      	add	r7, sp, #8
 800829a:	6078      	str	r0, [r7, #4]
 800829c:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800829e:	4b23      	ldr	r3, [pc, #140]	@ (800832c <prvProcessExpiredTimer+0x98>)
 80082a0:	681b      	ldr	r3, [r3, #0]
 80082a2:	68db      	ldr	r3, [r3, #12]
 80082a4:	68db      	ldr	r3, [r3, #12]
 80082a6:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80082a8:	697b      	ldr	r3, [r7, #20]
 80082aa:	3304      	adds	r3, #4
 80082ac:	4618      	mov	r0, r3
 80082ae:	f7fe fb01 	bl	80068b4 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80082b2:	697b      	ldr	r3, [r7, #20]
 80082b4:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80082b8:	f003 0304 	and.w	r3, r3, #4
 80082bc:	2b00      	cmp	r3, #0
 80082be:	d023      	beq.n	8008308 <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 80082c0:	697b      	ldr	r3, [r7, #20]
 80082c2:	699a      	ldr	r2, [r3, #24]
 80082c4:	687b      	ldr	r3, [r7, #4]
 80082c6:	18d1      	adds	r1, r2, r3
 80082c8:	687b      	ldr	r3, [r7, #4]
 80082ca:	683a      	ldr	r2, [r7, #0]
 80082cc:	6978      	ldr	r0, [r7, #20]
 80082ce:	f000 f8d5 	bl	800847c <prvInsertTimerInActiveList>
 80082d2:	4603      	mov	r3, r0
 80082d4:	2b00      	cmp	r3, #0
 80082d6:	d020      	beq.n	800831a <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80082d8:	2300      	movs	r3, #0
 80082da:	9300      	str	r3, [sp, #0]
 80082dc:	2300      	movs	r3, #0
 80082de:	687a      	ldr	r2, [r7, #4]
 80082e0:	2100      	movs	r1, #0
 80082e2:	6978      	ldr	r0, [r7, #20]
 80082e4:	f7ff ff88 	bl	80081f8 <xTimerGenericCommand>
 80082e8:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 80082ea:	693b      	ldr	r3, [r7, #16]
 80082ec:	2b00      	cmp	r3, #0
 80082ee:	d114      	bne.n	800831a <prvProcessExpiredTimer+0x86>
	__asm volatile
 80082f0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80082f4:	f383 8811 	msr	BASEPRI, r3
 80082f8:	f3bf 8f6f 	isb	sy
 80082fc:	f3bf 8f4f 	dsb	sy
 8008300:	60fb      	str	r3, [r7, #12]
}
 8008302:	bf00      	nop
 8008304:	bf00      	nop
 8008306:	e7fd      	b.n	8008304 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8008308:	697b      	ldr	r3, [r7, #20]
 800830a:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800830e:	f023 0301 	bic.w	r3, r3, #1
 8008312:	b2da      	uxtb	r2, r3
 8008314:	697b      	ldr	r3, [r7, #20]
 8008316:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800831a:	697b      	ldr	r3, [r7, #20]
 800831c:	6a1b      	ldr	r3, [r3, #32]
 800831e:	6978      	ldr	r0, [r7, #20]
 8008320:	4798      	blx	r3
}
 8008322:	bf00      	nop
 8008324:	3718      	adds	r7, #24
 8008326:	46bd      	mov	sp, r7
 8008328:	bd80      	pop	{r7, pc}
 800832a:	bf00      	nop
 800832c:	200053bc 	.word	0x200053bc

08008330 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8008330:	b580      	push	{r7, lr}
 8008332:	b084      	sub	sp, #16
 8008334:	af00      	add	r7, sp, #0
 8008336:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8008338:	f107 0308 	add.w	r3, r7, #8
 800833c:	4618      	mov	r0, r3
 800833e:	f000 f859 	bl	80083f4 <prvGetNextExpireTime>
 8008342:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8008344:	68bb      	ldr	r3, [r7, #8]
 8008346:	4619      	mov	r1, r3
 8008348:	68f8      	ldr	r0, [r7, #12]
 800834a:	f000 f805 	bl	8008358 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800834e:	f000 f8d7 	bl	8008500 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8008352:	bf00      	nop
 8008354:	e7f0      	b.n	8008338 <prvTimerTask+0x8>
	...

08008358 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8008358:	b580      	push	{r7, lr}
 800835a:	b084      	sub	sp, #16
 800835c:	af00      	add	r7, sp, #0
 800835e:	6078      	str	r0, [r7, #4]
 8008360:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8008362:	f7ff fa0f 	bl	8007784 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8008366:	f107 0308 	add.w	r3, r7, #8
 800836a:	4618      	mov	r0, r3
 800836c:	f000 f866 	bl	800843c <prvSampleTimeNow>
 8008370:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8008372:	68bb      	ldr	r3, [r7, #8]
 8008374:	2b00      	cmp	r3, #0
 8008376:	d130      	bne.n	80083da <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8008378:	683b      	ldr	r3, [r7, #0]
 800837a:	2b00      	cmp	r3, #0
 800837c:	d10a      	bne.n	8008394 <prvProcessTimerOrBlockTask+0x3c>
 800837e:	687a      	ldr	r2, [r7, #4]
 8008380:	68fb      	ldr	r3, [r7, #12]
 8008382:	429a      	cmp	r2, r3
 8008384:	d806      	bhi.n	8008394 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8008386:	f7ff fa0b 	bl	80077a0 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800838a:	68f9      	ldr	r1, [r7, #12]
 800838c:	6878      	ldr	r0, [r7, #4]
 800838e:	f7ff ff81 	bl	8008294 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8008392:	e024      	b.n	80083de <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8008394:	683b      	ldr	r3, [r7, #0]
 8008396:	2b00      	cmp	r3, #0
 8008398:	d008      	beq.n	80083ac <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800839a:	4b13      	ldr	r3, [pc, #76]	@ (80083e8 <prvProcessTimerOrBlockTask+0x90>)
 800839c:	681b      	ldr	r3, [r3, #0]
 800839e:	681b      	ldr	r3, [r3, #0]
 80083a0:	2b00      	cmp	r3, #0
 80083a2:	d101      	bne.n	80083a8 <prvProcessTimerOrBlockTask+0x50>
 80083a4:	2301      	movs	r3, #1
 80083a6:	e000      	b.n	80083aa <prvProcessTimerOrBlockTask+0x52>
 80083a8:	2300      	movs	r3, #0
 80083aa:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80083ac:	4b0f      	ldr	r3, [pc, #60]	@ (80083ec <prvProcessTimerOrBlockTask+0x94>)
 80083ae:	6818      	ldr	r0, [r3, #0]
 80083b0:	687a      	ldr	r2, [r7, #4]
 80083b2:	68fb      	ldr	r3, [r7, #12]
 80083b4:	1ad3      	subs	r3, r2, r3
 80083b6:	683a      	ldr	r2, [r7, #0]
 80083b8:	4619      	mov	r1, r3
 80083ba:	f7fe ff6b 	bl	8007294 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 80083be:	f7ff f9ef 	bl	80077a0 <xTaskResumeAll>
 80083c2:	4603      	mov	r3, r0
 80083c4:	2b00      	cmp	r3, #0
 80083c6:	d10a      	bne.n	80083de <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 80083c8:	4b09      	ldr	r3, [pc, #36]	@ (80083f0 <prvProcessTimerOrBlockTask+0x98>)
 80083ca:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80083ce:	601a      	str	r2, [r3, #0]
 80083d0:	f3bf 8f4f 	dsb	sy
 80083d4:	f3bf 8f6f 	isb	sy
}
 80083d8:	e001      	b.n	80083de <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 80083da:	f7ff f9e1 	bl	80077a0 <xTaskResumeAll>
}
 80083de:	bf00      	nop
 80083e0:	3710      	adds	r7, #16
 80083e2:	46bd      	mov	sp, r7
 80083e4:	bd80      	pop	{r7, pc}
 80083e6:	bf00      	nop
 80083e8:	200053c0 	.word	0x200053c0
 80083ec:	200053c4 	.word	0x200053c4
 80083f0:	e000ed04 	.word	0xe000ed04

080083f4 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 80083f4:	b480      	push	{r7}
 80083f6:	b085      	sub	sp, #20
 80083f8:	af00      	add	r7, sp, #0
 80083fa:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80083fc:	4b0e      	ldr	r3, [pc, #56]	@ (8008438 <prvGetNextExpireTime+0x44>)
 80083fe:	681b      	ldr	r3, [r3, #0]
 8008400:	681b      	ldr	r3, [r3, #0]
 8008402:	2b00      	cmp	r3, #0
 8008404:	d101      	bne.n	800840a <prvGetNextExpireTime+0x16>
 8008406:	2201      	movs	r2, #1
 8008408:	e000      	b.n	800840c <prvGetNextExpireTime+0x18>
 800840a:	2200      	movs	r2, #0
 800840c:	687b      	ldr	r3, [r7, #4]
 800840e:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8008410:	687b      	ldr	r3, [r7, #4]
 8008412:	681b      	ldr	r3, [r3, #0]
 8008414:	2b00      	cmp	r3, #0
 8008416:	d105      	bne.n	8008424 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8008418:	4b07      	ldr	r3, [pc, #28]	@ (8008438 <prvGetNextExpireTime+0x44>)
 800841a:	681b      	ldr	r3, [r3, #0]
 800841c:	68db      	ldr	r3, [r3, #12]
 800841e:	681b      	ldr	r3, [r3, #0]
 8008420:	60fb      	str	r3, [r7, #12]
 8008422:	e001      	b.n	8008428 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8008424:	2300      	movs	r3, #0
 8008426:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8008428:	68fb      	ldr	r3, [r7, #12]
}
 800842a:	4618      	mov	r0, r3
 800842c:	3714      	adds	r7, #20
 800842e:	46bd      	mov	sp, r7
 8008430:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008434:	4770      	bx	lr
 8008436:	bf00      	nop
 8008438:	200053bc 	.word	0x200053bc

0800843c <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800843c:	b580      	push	{r7, lr}
 800843e:	b084      	sub	sp, #16
 8008440:	af00      	add	r7, sp, #0
 8008442:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8008444:	f7ff fa4a 	bl	80078dc <xTaskGetTickCount>
 8008448:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800844a:	4b0b      	ldr	r3, [pc, #44]	@ (8008478 <prvSampleTimeNow+0x3c>)
 800844c:	681b      	ldr	r3, [r3, #0]
 800844e:	68fa      	ldr	r2, [r7, #12]
 8008450:	429a      	cmp	r2, r3
 8008452:	d205      	bcs.n	8008460 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8008454:	f000 f93a 	bl	80086cc <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8008458:	687b      	ldr	r3, [r7, #4]
 800845a:	2201      	movs	r2, #1
 800845c:	601a      	str	r2, [r3, #0]
 800845e:	e002      	b.n	8008466 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8008460:	687b      	ldr	r3, [r7, #4]
 8008462:	2200      	movs	r2, #0
 8008464:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8008466:	4a04      	ldr	r2, [pc, #16]	@ (8008478 <prvSampleTimeNow+0x3c>)
 8008468:	68fb      	ldr	r3, [r7, #12]
 800846a:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800846c:	68fb      	ldr	r3, [r7, #12]
}
 800846e:	4618      	mov	r0, r3
 8008470:	3710      	adds	r7, #16
 8008472:	46bd      	mov	sp, r7
 8008474:	bd80      	pop	{r7, pc}
 8008476:	bf00      	nop
 8008478:	200053cc 	.word	0x200053cc

0800847c <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800847c:	b580      	push	{r7, lr}
 800847e:	b086      	sub	sp, #24
 8008480:	af00      	add	r7, sp, #0
 8008482:	60f8      	str	r0, [r7, #12]
 8008484:	60b9      	str	r1, [r7, #8]
 8008486:	607a      	str	r2, [r7, #4]
 8008488:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800848a:	2300      	movs	r3, #0
 800848c:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800848e:	68fb      	ldr	r3, [r7, #12]
 8008490:	68ba      	ldr	r2, [r7, #8]
 8008492:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8008494:	68fb      	ldr	r3, [r7, #12]
 8008496:	68fa      	ldr	r2, [r7, #12]
 8008498:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800849a:	68ba      	ldr	r2, [r7, #8]
 800849c:	687b      	ldr	r3, [r7, #4]
 800849e:	429a      	cmp	r2, r3
 80084a0:	d812      	bhi.n	80084c8 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80084a2:	687a      	ldr	r2, [r7, #4]
 80084a4:	683b      	ldr	r3, [r7, #0]
 80084a6:	1ad2      	subs	r2, r2, r3
 80084a8:	68fb      	ldr	r3, [r7, #12]
 80084aa:	699b      	ldr	r3, [r3, #24]
 80084ac:	429a      	cmp	r2, r3
 80084ae:	d302      	bcc.n	80084b6 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 80084b0:	2301      	movs	r3, #1
 80084b2:	617b      	str	r3, [r7, #20]
 80084b4:	e01b      	b.n	80084ee <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80084b6:	4b10      	ldr	r3, [pc, #64]	@ (80084f8 <prvInsertTimerInActiveList+0x7c>)
 80084b8:	681a      	ldr	r2, [r3, #0]
 80084ba:	68fb      	ldr	r3, [r7, #12]
 80084bc:	3304      	adds	r3, #4
 80084be:	4619      	mov	r1, r3
 80084c0:	4610      	mov	r0, r2
 80084c2:	f7fe f9be 	bl	8006842 <vListInsert>
 80084c6:	e012      	b.n	80084ee <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 80084c8:	687a      	ldr	r2, [r7, #4]
 80084ca:	683b      	ldr	r3, [r7, #0]
 80084cc:	429a      	cmp	r2, r3
 80084ce:	d206      	bcs.n	80084de <prvInsertTimerInActiveList+0x62>
 80084d0:	68ba      	ldr	r2, [r7, #8]
 80084d2:	683b      	ldr	r3, [r7, #0]
 80084d4:	429a      	cmp	r2, r3
 80084d6:	d302      	bcc.n	80084de <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 80084d8:	2301      	movs	r3, #1
 80084da:	617b      	str	r3, [r7, #20]
 80084dc:	e007      	b.n	80084ee <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80084de:	4b07      	ldr	r3, [pc, #28]	@ (80084fc <prvInsertTimerInActiveList+0x80>)
 80084e0:	681a      	ldr	r2, [r3, #0]
 80084e2:	68fb      	ldr	r3, [r7, #12]
 80084e4:	3304      	adds	r3, #4
 80084e6:	4619      	mov	r1, r3
 80084e8:	4610      	mov	r0, r2
 80084ea:	f7fe f9aa 	bl	8006842 <vListInsert>
		}
	}

	return xProcessTimerNow;
 80084ee:	697b      	ldr	r3, [r7, #20]
}
 80084f0:	4618      	mov	r0, r3
 80084f2:	3718      	adds	r7, #24
 80084f4:	46bd      	mov	sp, r7
 80084f6:	bd80      	pop	{r7, pc}
 80084f8:	200053c0 	.word	0x200053c0
 80084fc:	200053bc 	.word	0x200053bc

08008500 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8008500:	b580      	push	{r7, lr}
 8008502:	b08e      	sub	sp, #56	@ 0x38
 8008504:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8008506:	e0ce      	b.n	80086a6 <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8008508:	687b      	ldr	r3, [r7, #4]
 800850a:	2b00      	cmp	r3, #0
 800850c:	da19      	bge.n	8008542 <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800850e:	1d3b      	adds	r3, r7, #4
 8008510:	3304      	adds	r3, #4
 8008512:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8008514:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008516:	2b00      	cmp	r3, #0
 8008518:	d10b      	bne.n	8008532 <prvProcessReceivedCommands+0x32>
	__asm volatile
 800851a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800851e:	f383 8811 	msr	BASEPRI, r3
 8008522:	f3bf 8f6f 	isb	sy
 8008526:	f3bf 8f4f 	dsb	sy
 800852a:	61fb      	str	r3, [r7, #28]
}
 800852c:	bf00      	nop
 800852e:	bf00      	nop
 8008530:	e7fd      	b.n	800852e <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8008532:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008534:	681b      	ldr	r3, [r3, #0]
 8008536:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008538:	6850      	ldr	r0, [r2, #4]
 800853a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800853c:	6892      	ldr	r2, [r2, #8]
 800853e:	4611      	mov	r1, r2
 8008540:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8008542:	687b      	ldr	r3, [r7, #4]
 8008544:	2b00      	cmp	r3, #0
 8008546:	f2c0 80ae 	blt.w	80086a6 <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800854a:	68fb      	ldr	r3, [r7, #12]
 800854c:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800854e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008550:	695b      	ldr	r3, [r3, #20]
 8008552:	2b00      	cmp	r3, #0
 8008554:	d004      	beq.n	8008560 <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8008556:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008558:	3304      	adds	r3, #4
 800855a:	4618      	mov	r0, r3
 800855c:	f7fe f9aa 	bl	80068b4 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8008560:	463b      	mov	r3, r7
 8008562:	4618      	mov	r0, r3
 8008564:	f7ff ff6a 	bl	800843c <prvSampleTimeNow>
 8008568:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 800856a:	687b      	ldr	r3, [r7, #4]
 800856c:	2b09      	cmp	r3, #9
 800856e:	f200 8097 	bhi.w	80086a0 <prvProcessReceivedCommands+0x1a0>
 8008572:	a201      	add	r2, pc, #4	@ (adr r2, 8008578 <prvProcessReceivedCommands+0x78>)
 8008574:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008578:	080085a1 	.word	0x080085a1
 800857c:	080085a1 	.word	0x080085a1
 8008580:	080085a1 	.word	0x080085a1
 8008584:	08008617 	.word	0x08008617
 8008588:	0800862b 	.word	0x0800862b
 800858c:	08008677 	.word	0x08008677
 8008590:	080085a1 	.word	0x080085a1
 8008594:	080085a1 	.word	0x080085a1
 8008598:	08008617 	.word	0x08008617
 800859c:	0800862b 	.word	0x0800862b
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80085a0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80085a2:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80085a6:	f043 0301 	orr.w	r3, r3, #1
 80085aa:	b2da      	uxtb	r2, r3
 80085ac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80085ae:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80085b2:	68ba      	ldr	r2, [r7, #8]
 80085b4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80085b6:	699b      	ldr	r3, [r3, #24]
 80085b8:	18d1      	adds	r1, r2, r3
 80085ba:	68bb      	ldr	r3, [r7, #8]
 80085bc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80085be:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80085c0:	f7ff ff5c 	bl	800847c <prvInsertTimerInActiveList>
 80085c4:	4603      	mov	r3, r0
 80085c6:	2b00      	cmp	r3, #0
 80085c8:	d06c      	beq.n	80086a4 <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80085ca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80085cc:	6a1b      	ldr	r3, [r3, #32]
 80085ce:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80085d0:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80085d2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80085d4:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80085d8:	f003 0304 	and.w	r3, r3, #4
 80085dc:	2b00      	cmp	r3, #0
 80085de:	d061      	beq.n	80086a4 <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 80085e0:	68ba      	ldr	r2, [r7, #8]
 80085e2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80085e4:	699b      	ldr	r3, [r3, #24]
 80085e6:	441a      	add	r2, r3
 80085e8:	2300      	movs	r3, #0
 80085ea:	9300      	str	r3, [sp, #0]
 80085ec:	2300      	movs	r3, #0
 80085ee:	2100      	movs	r1, #0
 80085f0:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80085f2:	f7ff fe01 	bl	80081f8 <xTimerGenericCommand>
 80085f6:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 80085f8:	6a3b      	ldr	r3, [r7, #32]
 80085fa:	2b00      	cmp	r3, #0
 80085fc:	d152      	bne.n	80086a4 <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 80085fe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008602:	f383 8811 	msr	BASEPRI, r3
 8008606:	f3bf 8f6f 	isb	sy
 800860a:	f3bf 8f4f 	dsb	sy
 800860e:	61bb      	str	r3, [r7, #24]
}
 8008610:	bf00      	nop
 8008612:	bf00      	nop
 8008614:	e7fd      	b.n	8008612 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8008616:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008618:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800861c:	f023 0301 	bic.w	r3, r3, #1
 8008620:	b2da      	uxtb	r2, r3
 8008622:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008624:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8008628:	e03d      	b.n	80086a6 <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800862a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800862c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8008630:	f043 0301 	orr.w	r3, r3, #1
 8008634:	b2da      	uxtb	r2, r3
 8008636:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008638:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800863c:	68ba      	ldr	r2, [r7, #8]
 800863e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008640:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8008642:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008644:	699b      	ldr	r3, [r3, #24]
 8008646:	2b00      	cmp	r3, #0
 8008648:	d10b      	bne.n	8008662 <prvProcessReceivedCommands+0x162>
	__asm volatile
 800864a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800864e:	f383 8811 	msr	BASEPRI, r3
 8008652:	f3bf 8f6f 	isb	sy
 8008656:	f3bf 8f4f 	dsb	sy
 800865a:	617b      	str	r3, [r7, #20]
}
 800865c:	bf00      	nop
 800865e:	bf00      	nop
 8008660:	e7fd      	b.n	800865e <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8008662:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008664:	699a      	ldr	r2, [r3, #24]
 8008666:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008668:	18d1      	adds	r1, r2, r3
 800866a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800866c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800866e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008670:	f7ff ff04 	bl	800847c <prvInsertTimerInActiveList>
					break;
 8008674:	e017      	b.n	80086a6 <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8008676:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008678:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800867c:	f003 0302 	and.w	r3, r3, #2
 8008680:	2b00      	cmp	r3, #0
 8008682:	d103      	bne.n	800868c <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 8008684:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008686:	f000 fbe7 	bl	8008e58 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800868a:	e00c      	b.n	80086a6 <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800868c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800868e:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8008692:	f023 0301 	bic.w	r3, r3, #1
 8008696:	b2da      	uxtb	r2, r3
 8008698:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800869a:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800869e:	e002      	b.n	80086a6 <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 80086a0:	bf00      	nop
 80086a2:	e000      	b.n	80086a6 <prvProcessReceivedCommands+0x1a6>
					break;
 80086a4:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80086a6:	4b08      	ldr	r3, [pc, #32]	@ (80086c8 <prvProcessReceivedCommands+0x1c8>)
 80086a8:	681b      	ldr	r3, [r3, #0]
 80086aa:	1d39      	adds	r1, r7, #4
 80086ac:	2200      	movs	r2, #0
 80086ae:	4618      	mov	r0, r3
 80086b0:	f7fe fbd4 	bl	8006e5c <xQueueReceive>
 80086b4:	4603      	mov	r3, r0
 80086b6:	2b00      	cmp	r3, #0
 80086b8:	f47f af26 	bne.w	8008508 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 80086bc:	bf00      	nop
 80086be:	bf00      	nop
 80086c0:	3730      	adds	r7, #48	@ 0x30
 80086c2:	46bd      	mov	sp, r7
 80086c4:	bd80      	pop	{r7, pc}
 80086c6:	bf00      	nop
 80086c8:	200053c4 	.word	0x200053c4

080086cc <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 80086cc:	b580      	push	{r7, lr}
 80086ce:	b088      	sub	sp, #32
 80086d0:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80086d2:	e049      	b.n	8008768 <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80086d4:	4b2e      	ldr	r3, [pc, #184]	@ (8008790 <prvSwitchTimerLists+0xc4>)
 80086d6:	681b      	ldr	r3, [r3, #0]
 80086d8:	68db      	ldr	r3, [r3, #12]
 80086da:	681b      	ldr	r3, [r3, #0]
 80086dc:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80086de:	4b2c      	ldr	r3, [pc, #176]	@ (8008790 <prvSwitchTimerLists+0xc4>)
 80086e0:	681b      	ldr	r3, [r3, #0]
 80086e2:	68db      	ldr	r3, [r3, #12]
 80086e4:	68db      	ldr	r3, [r3, #12]
 80086e6:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80086e8:	68fb      	ldr	r3, [r7, #12]
 80086ea:	3304      	adds	r3, #4
 80086ec:	4618      	mov	r0, r3
 80086ee:	f7fe f8e1 	bl	80068b4 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80086f2:	68fb      	ldr	r3, [r7, #12]
 80086f4:	6a1b      	ldr	r3, [r3, #32]
 80086f6:	68f8      	ldr	r0, [r7, #12]
 80086f8:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80086fa:	68fb      	ldr	r3, [r7, #12]
 80086fc:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8008700:	f003 0304 	and.w	r3, r3, #4
 8008704:	2b00      	cmp	r3, #0
 8008706:	d02f      	beq.n	8008768 <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8008708:	68fb      	ldr	r3, [r7, #12]
 800870a:	699b      	ldr	r3, [r3, #24]
 800870c:	693a      	ldr	r2, [r7, #16]
 800870e:	4413      	add	r3, r2
 8008710:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8008712:	68ba      	ldr	r2, [r7, #8]
 8008714:	693b      	ldr	r3, [r7, #16]
 8008716:	429a      	cmp	r2, r3
 8008718:	d90e      	bls.n	8008738 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800871a:	68fb      	ldr	r3, [r7, #12]
 800871c:	68ba      	ldr	r2, [r7, #8]
 800871e:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8008720:	68fb      	ldr	r3, [r7, #12]
 8008722:	68fa      	ldr	r2, [r7, #12]
 8008724:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8008726:	4b1a      	ldr	r3, [pc, #104]	@ (8008790 <prvSwitchTimerLists+0xc4>)
 8008728:	681a      	ldr	r2, [r3, #0]
 800872a:	68fb      	ldr	r3, [r7, #12]
 800872c:	3304      	adds	r3, #4
 800872e:	4619      	mov	r1, r3
 8008730:	4610      	mov	r0, r2
 8008732:	f7fe f886 	bl	8006842 <vListInsert>
 8008736:	e017      	b.n	8008768 <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8008738:	2300      	movs	r3, #0
 800873a:	9300      	str	r3, [sp, #0]
 800873c:	2300      	movs	r3, #0
 800873e:	693a      	ldr	r2, [r7, #16]
 8008740:	2100      	movs	r1, #0
 8008742:	68f8      	ldr	r0, [r7, #12]
 8008744:	f7ff fd58 	bl	80081f8 <xTimerGenericCommand>
 8008748:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800874a:	687b      	ldr	r3, [r7, #4]
 800874c:	2b00      	cmp	r3, #0
 800874e:	d10b      	bne.n	8008768 <prvSwitchTimerLists+0x9c>
	__asm volatile
 8008750:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008754:	f383 8811 	msr	BASEPRI, r3
 8008758:	f3bf 8f6f 	isb	sy
 800875c:	f3bf 8f4f 	dsb	sy
 8008760:	603b      	str	r3, [r7, #0]
}
 8008762:	bf00      	nop
 8008764:	bf00      	nop
 8008766:	e7fd      	b.n	8008764 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8008768:	4b09      	ldr	r3, [pc, #36]	@ (8008790 <prvSwitchTimerLists+0xc4>)
 800876a:	681b      	ldr	r3, [r3, #0]
 800876c:	681b      	ldr	r3, [r3, #0]
 800876e:	2b00      	cmp	r3, #0
 8008770:	d1b0      	bne.n	80086d4 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8008772:	4b07      	ldr	r3, [pc, #28]	@ (8008790 <prvSwitchTimerLists+0xc4>)
 8008774:	681b      	ldr	r3, [r3, #0]
 8008776:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8008778:	4b06      	ldr	r3, [pc, #24]	@ (8008794 <prvSwitchTimerLists+0xc8>)
 800877a:	681b      	ldr	r3, [r3, #0]
 800877c:	4a04      	ldr	r2, [pc, #16]	@ (8008790 <prvSwitchTimerLists+0xc4>)
 800877e:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8008780:	4a04      	ldr	r2, [pc, #16]	@ (8008794 <prvSwitchTimerLists+0xc8>)
 8008782:	697b      	ldr	r3, [r7, #20]
 8008784:	6013      	str	r3, [r2, #0]
}
 8008786:	bf00      	nop
 8008788:	3718      	adds	r7, #24
 800878a:	46bd      	mov	sp, r7
 800878c:	bd80      	pop	{r7, pc}
 800878e:	bf00      	nop
 8008790:	200053bc 	.word	0x200053bc
 8008794:	200053c0 	.word	0x200053c0

08008798 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8008798:	b580      	push	{r7, lr}
 800879a:	b082      	sub	sp, #8
 800879c:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800879e:	f000 f96b 	bl	8008a78 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 80087a2:	4b15      	ldr	r3, [pc, #84]	@ (80087f8 <prvCheckForValidListAndQueue+0x60>)
 80087a4:	681b      	ldr	r3, [r3, #0]
 80087a6:	2b00      	cmp	r3, #0
 80087a8:	d120      	bne.n	80087ec <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 80087aa:	4814      	ldr	r0, [pc, #80]	@ (80087fc <prvCheckForValidListAndQueue+0x64>)
 80087ac:	f7fd fff8 	bl	80067a0 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 80087b0:	4813      	ldr	r0, [pc, #76]	@ (8008800 <prvCheckForValidListAndQueue+0x68>)
 80087b2:	f7fd fff5 	bl	80067a0 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 80087b6:	4b13      	ldr	r3, [pc, #76]	@ (8008804 <prvCheckForValidListAndQueue+0x6c>)
 80087b8:	4a10      	ldr	r2, [pc, #64]	@ (80087fc <prvCheckForValidListAndQueue+0x64>)
 80087ba:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 80087bc:	4b12      	ldr	r3, [pc, #72]	@ (8008808 <prvCheckForValidListAndQueue+0x70>)
 80087be:	4a10      	ldr	r2, [pc, #64]	@ (8008800 <prvCheckForValidListAndQueue+0x68>)
 80087c0:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 80087c2:	2300      	movs	r3, #0
 80087c4:	9300      	str	r3, [sp, #0]
 80087c6:	4b11      	ldr	r3, [pc, #68]	@ (800880c <prvCheckForValidListAndQueue+0x74>)
 80087c8:	4a11      	ldr	r2, [pc, #68]	@ (8008810 <prvCheckForValidListAndQueue+0x78>)
 80087ca:	2110      	movs	r1, #16
 80087cc:	200a      	movs	r0, #10
 80087ce:	f7fe f905 	bl	80069dc <xQueueGenericCreateStatic>
 80087d2:	4603      	mov	r3, r0
 80087d4:	4a08      	ldr	r2, [pc, #32]	@ (80087f8 <prvCheckForValidListAndQueue+0x60>)
 80087d6:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 80087d8:	4b07      	ldr	r3, [pc, #28]	@ (80087f8 <prvCheckForValidListAndQueue+0x60>)
 80087da:	681b      	ldr	r3, [r3, #0]
 80087dc:	2b00      	cmp	r3, #0
 80087de:	d005      	beq.n	80087ec <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 80087e0:	4b05      	ldr	r3, [pc, #20]	@ (80087f8 <prvCheckForValidListAndQueue+0x60>)
 80087e2:	681b      	ldr	r3, [r3, #0]
 80087e4:	490b      	ldr	r1, [pc, #44]	@ (8008814 <prvCheckForValidListAndQueue+0x7c>)
 80087e6:	4618      	mov	r0, r3
 80087e8:	f7fe fd2a 	bl	8007240 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80087ec:	f000 f976 	bl	8008adc <vPortExitCritical>
}
 80087f0:	bf00      	nop
 80087f2:	46bd      	mov	sp, r7
 80087f4:	bd80      	pop	{r7, pc}
 80087f6:	bf00      	nop
 80087f8:	200053c4 	.word	0x200053c4
 80087fc:	20005394 	.word	0x20005394
 8008800:	200053a8 	.word	0x200053a8
 8008804:	200053bc 	.word	0x200053bc
 8008808:	200053c0 	.word	0x200053c0
 800880c:	20005470 	.word	0x20005470
 8008810:	200053d0 	.word	0x200053d0
 8008814:	080165a8 	.word	0x080165a8

08008818 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8008818:	b480      	push	{r7}
 800881a:	b085      	sub	sp, #20
 800881c:	af00      	add	r7, sp, #0
 800881e:	60f8      	str	r0, [r7, #12]
 8008820:	60b9      	str	r1, [r7, #8]
 8008822:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8008824:	68fb      	ldr	r3, [r7, #12]
 8008826:	3b04      	subs	r3, #4
 8008828:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800882a:	68fb      	ldr	r3, [r7, #12]
 800882c:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8008830:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8008832:	68fb      	ldr	r3, [r7, #12]
 8008834:	3b04      	subs	r3, #4
 8008836:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8008838:	68bb      	ldr	r3, [r7, #8]
 800883a:	f023 0201 	bic.w	r2, r3, #1
 800883e:	68fb      	ldr	r3, [r7, #12]
 8008840:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8008842:	68fb      	ldr	r3, [r7, #12]
 8008844:	3b04      	subs	r3, #4
 8008846:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8008848:	4a0c      	ldr	r2, [pc, #48]	@ (800887c <pxPortInitialiseStack+0x64>)
 800884a:	68fb      	ldr	r3, [r7, #12]
 800884c:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800884e:	68fb      	ldr	r3, [r7, #12]
 8008850:	3b14      	subs	r3, #20
 8008852:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8008854:	687a      	ldr	r2, [r7, #4]
 8008856:	68fb      	ldr	r3, [r7, #12]
 8008858:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800885a:	68fb      	ldr	r3, [r7, #12]
 800885c:	3b04      	subs	r3, #4
 800885e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8008860:	68fb      	ldr	r3, [r7, #12]
 8008862:	f06f 0202 	mvn.w	r2, #2
 8008866:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8008868:	68fb      	ldr	r3, [r7, #12]
 800886a:	3b20      	subs	r3, #32
 800886c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800886e:	68fb      	ldr	r3, [r7, #12]
}
 8008870:	4618      	mov	r0, r3
 8008872:	3714      	adds	r7, #20
 8008874:	46bd      	mov	sp, r7
 8008876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800887a:	4770      	bx	lr
 800887c:	08008881 	.word	0x08008881

08008880 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8008880:	b480      	push	{r7}
 8008882:	b085      	sub	sp, #20
 8008884:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8008886:	2300      	movs	r3, #0
 8008888:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800888a:	4b13      	ldr	r3, [pc, #76]	@ (80088d8 <prvTaskExitError+0x58>)
 800888c:	681b      	ldr	r3, [r3, #0]
 800888e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8008892:	d00b      	beq.n	80088ac <prvTaskExitError+0x2c>
	__asm volatile
 8008894:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008898:	f383 8811 	msr	BASEPRI, r3
 800889c:	f3bf 8f6f 	isb	sy
 80088a0:	f3bf 8f4f 	dsb	sy
 80088a4:	60fb      	str	r3, [r7, #12]
}
 80088a6:	bf00      	nop
 80088a8:	bf00      	nop
 80088aa:	e7fd      	b.n	80088a8 <prvTaskExitError+0x28>
	__asm volatile
 80088ac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80088b0:	f383 8811 	msr	BASEPRI, r3
 80088b4:	f3bf 8f6f 	isb	sy
 80088b8:	f3bf 8f4f 	dsb	sy
 80088bc:	60bb      	str	r3, [r7, #8]
}
 80088be:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80088c0:	bf00      	nop
 80088c2:	687b      	ldr	r3, [r7, #4]
 80088c4:	2b00      	cmp	r3, #0
 80088c6:	d0fc      	beq.n	80088c2 <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80088c8:	bf00      	nop
 80088ca:	bf00      	nop
 80088cc:	3714      	adds	r7, #20
 80088ce:	46bd      	mov	sp, r7
 80088d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088d4:	4770      	bx	lr
 80088d6:	bf00      	nop
 80088d8:	20000010 	.word	0x20000010
 80088dc:	00000000 	.word	0x00000000

080088e0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80088e0:	4b07      	ldr	r3, [pc, #28]	@ (8008900 <pxCurrentTCBConst2>)
 80088e2:	6819      	ldr	r1, [r3, #0]
 80088e4:	6808      	ldr	r0, [r1, #0]
 80088e6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80088ea:	f380 8809 	msr	PSP, r0
 80088ee:	f3bf 8f6f 	isb	sy
 80088f2:	f04f 0000 	mov.w	r0, #0
 80088f6:	f380 8811 	msr	BASEPRI, r0
 80088fa:	4770      	bx	lr
 80088fc:	f3af 8000 	nop.w

08008900 <pxCurrentTCBConst2>:
 8008900:	20004e94 	.word	0x20004e94
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8008904:	bf00      	nop
 8008906:	bf00      	nop

08008908 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8008908:	4808      	ldr	r0, [pc, #32]	@ (800892c <prvPortStartFirstTask+0x24>)
 800890a:	6800      	ldr	r0, [r0, #0]
 800890c:	6800      	ldr	r0, [r0, #0]
 800890e:	f380 8808 	msr	MSP, r0
 8008912:	f04f 0000 	mov.w	r0, #0
 8008916:	f380 8814 	msr	CONTROL, r0
 800891a:	b662      	cpsie	i
 800891c:	b661      	cpsie	f
 800891e:	f3bf 8f4f 	dsb	sy
 8008922:	f3bf 8f6f 	isb	sy
 8008926:	df00      	svc	0
 8008928:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800892a:	bf00      	nop
 800892c:	e000ed08 	.word	0xe000ed08

08008930 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8008930:	b580      	push	{r7, lr}
 8008932:	b086      	sub	sp, #24
 8008934:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8008936:	4b47      	ldr	r3, [pc, #284]	@ (8008a54 <xPortStartScheduler+0x124>)
 8008938:	681b      	ldr	r3, [r3, #0]
 800893a:	4a47      	ldr	r2, [pc, #284]	@ (8008a58 <xPortStartScheduler+0x128>)
 800893c:	4293      	cmp	r3, r2
 800893e:	d10b      	bne.n	8008958 <xPortStartScheduler+0x28>
	__asm volatile
 8008940:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008944:	f383 8811 	msr	BASEPRI, r3
 8008948:	f3bf 8f6f 	isb	sy
 800894c:	f3bf 8f4f 	dsb	sy
 8008950:	613b      	str	r3, [r7, #16]
}
 8008952:	bf00      	nop
 8008954:	bf00      	nop
 8008956:	e7fd      	b.n	8008954 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8008958:	4b3e      	ldr	r3, [pc, #248]	@ (8008a54 <xPortStartScheduler+0x124>)
 800895a:	681b      	ldr	r3, [r3, #0]
 800895c:	4a3f      	ldr	r2, [pc, #252]	@ (8008a5c <xPortStartScheduler+0x12c>)
 800895e:	4293      	cmp	r3, r2
 8008960:	d10b      	bne.n	800897a <xPortStartScheduler+0x4a>
	__asm volatile
 8008962:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008966:	f383 8811 	msr	BASEPRI, r3
 800896a:	f3bf 8f6f 	isb	sy
 800896e:	f3bf 8f4f 	dsb	sy
 8008972:	60fb      	str	r3, [r7, #12]
}
 8008974:	bf00      	nop
 8008976:	bf00      	nop
 8008978:	e7fd      	b.n	8008976 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800897a:	4b39      	ldr	r3, [pc, #228]	@ (8008a60 <xPortStartScheduler+0x130>)
 800897c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800897e:	697b      	ldr	r3, [r7, #20]
 8008980:	781b      	ldrb	r3, [r3, #0]
 8008982:	b2db      	uxtb	r3, r3
 8008984:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8008986:	697b      	ldr	r3, [r7, #20]
 8008988:	22ff      	movs	r2, #255	@ 0xff
 800898a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800898c:	697b      	ldr	r3, [r7, #20]
 800898e:	781b      	ldrb	r3, [r3, #0]
 8008990:	b2db      	uxtb	r3, r3
 8008992:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8008994:	78fb      	ldrb	r3, [r7, #3]
 8008996:	b2db      	uxtb	r3, r3
 8008998:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800899c:	b2da      	uxtb	r2, r3
 800899e:	4b31      	ldr	r3, [pc, #196]	@ (8008a64 <xPortStartScheduler+0x134>)
 80089a0:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80089a2:	4b31      	ldr	r3, [pc, #196]	@ (8008a68 <xPortStartScheduler+0x138>)
 80089a4:	2207      	movs	r2, #7
 80089a6:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80089a8:	e009      	b.n	80089be <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 80089aa:	4b2f      	ldr	r3, [pc, #188]	@ (8008a68 <xPortStartScheduler+0x138>)
 80089ac:	681b      	ldr	r3, [r3, #0]
 80089ae:	3b01      	subs	r3, #1
 80089b0:	4a2d      	ldr	r2, [pc, #180]	@ (8008a68 <xPortStartScheduler+0x138>)
 80089b2:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80089b4:	78fb      	ldrb	r3, [r7, #3]
 80089b6:	b2db      	uxtb	r3, r3
 80089b8:	005b      	lsls	r3, r3, #1
 80089ba:	b2db      	uxtb	r3, r3
 80089bc:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80089be:	78fb      	ldrb	r3, [r7, #3]
 80089c0:	b2db      	uxtb	r3, r3
 80089c2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80089c6:	2b80      	cmp	r3, #128	@ 0x80
 80089c8:	d0ef      	beq.n	80089aa <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80089ca:	4b27      	ldr	r3, [pc, #156]	@ (8008a68 <xPortStartScheduler+0x138>)
 80089cc:	681b      	ldr	r3, [r3, #0]
 80089ce:	f1c3 0307 	rsb	r3, r3, #7
 80089d2:	2b04      	cmp	r3, #4
 80089d4:	d00b      	beq.n	80089ee <xPortStartScheduler+0xbe>
	__asm volatile
 80089d6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80089da:	f383 8811 	msr	BASEPRI, r3
 80089de:	f3bf 8f6f 	isb	sy
 80089e2:	f3bf 8f4f 	dsb	sy
 80089e6:	60bb      	str	r3, [r7, #8]
}
 80089e8:	bf00      	nop
 80089ea:	bf00      	nop
 80089ec:	e7fd      	b.n	80089ea <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80089ee:	4b1e      	ldr	r3, [pc, #120]	@ (8008a68 <xPortStartScheduler+0x138>)
 80089f0:	681b      	ldr	r3, [r3, #0]
 80089f2:	021b      	lsls	r3, r3, #8
 80089f4:	4a1c      	ldr	r2, [pc, #112]	@ (8008a68 <xPortStartScheduler+0x138>)
 80089f6:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80089f8:	4b1b      	ldr	r3, [pc, #108]	@ (8008a68 <xPortStartScheduler+0x138>)
 80089fa:	681b      	ldr	r3, [r3, #0]
 80089fc:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8008a00:	4a19      	ldr	r2, [pc, #100]	@ (8008a68 <xPortStartScheduler+0x138>)
 8008a02:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8008a04:	687b      	ldr	r3, [r7, #4]
 8008a06:	b2da      	uxtb	r2, r3
 8008a08:	697b      	ldr	r3, [r7, #20]
 8008a0a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8008a0c:	4b17      	ldr	r3, [pc, #92]	@ (8008a6c <xPortStartScheduler+0x13c>)
 8008a0e:	681b      	ldr	r3, [r3, #0]
 8008a10:	4a16      	ldr	r2, [pc, #88]	@ (8008a6c <xPortStartScheduler+0x13c>)
 8008a12:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8008a16:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8008a18:	4b14      	ldr	r3, [pc, #80]	@ (8008a6c <xPortStartScheduler+0x13c>)
 8008a1a:	681b      	ldr	r3, [r3, #0]
 8008a1c:	4a13      	ldr	r2, [pc, #76]	@ (8008a6c <xPortStartScheduler+0x13c>)
 8008a1e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8008a22:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8008a24:	f000 f8da 	bl	8008bdc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8008a28:	4b11      	ldr	r3, [pc, #68]	@ (8008a70 <xPortStartScheduler+0x140>)
 8008a2a:	2200      	movs	r2, #0
 8008a2c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8008a2e:	f000 f8f9 	bl	8008c24 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8008a32:	4b10      	ldr	r3, [pc, #64]	@ (8008a74 <xPortStartScheduler+0x144>)
 8008a34:	681b      	ldr	r3, [r3, #0]
 8008a36:	4a0f      	ldr	r2, [pc, #60]	@ (8008a74 <xPortStartScheduler+0x144>)
 8008a38:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 8008a3c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8008a3e:	f7ff ff63 	bl	8008908 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8008a42:	f7ff f815 	bl	8007a70 <vTaskSwitchContext>
	prvTaskExitError();
 8008a46:	f7ff ff1b 	bl	8008880 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8008a4a:	2300      	movs	r3, #0
}
 8008a4c:	4618      	mov	r0, r3
 8008a4e:	3718      	adds	r7, #24
 8008a50:	46bd      	mov	sp, r7
 8008a52:	bd80      	pop	{r7, pc}
 8008a54:	e000ed00 	.word	0xe000ed00
 8008a58:	410fc271 	.word	0x410fc271
 8008a5c:	410fc270 	.word	0x410fc270
 8008a60:	e000e400 	.word	0xe000e400
 8008a64:	200054c0 	.word	0x200054c0
 8008a68:	200054c4 	.word	0x200054c4
 8008a6c:	e000ed20 	.word	0xe000ed20
 8008a70:	20000010 	.word	0x20000010
 8008a74:	e000ef34 	.word	0xe000ef34

08008a78 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8008a78:	b480      	push	{r7}
 8008a7a:	b083      	sub	sp, #12
 8008a7c:	af00      	add	r7, sp, #0
	__asm volatile
 8008a7e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008a82:	f383 8811 	msr	BASEPRI, r3
 8008a86:	f3bf 8f6f 	isb	sy
 8008a8a:	f3bf 8f4f 	dsb	sy
 8008a8e:	607b      	str	r3, [r7, #4]
}
 8008a90:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8008a92:	4b10      	ldr	r3, [pc, #64]	@ (8008ad4 <vPortEnterCritical+0x5c>)
 8008a94:	681b      	ldr	r3, [r3, #0]
 8008a96:	3301      	adds	r3, #1
 8008a98:	4a0e      	ldr	r2, [pc, #56]	@ (8008ad4 <vPortEnterCritical+0x5c>)
 8008a9a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8008a9c:	4b0d      	ldr	r3, [pc, #52]	@ (8008ad4 <vPortEnterCritical+0x5c>)
 8008a9e:	681b      	ldr	r3, [r3, #0]
 8008aa0:	2b01      	cmp	r3, #1
 8008aa2:	d110      	bne.n	8008ac6 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8008aa4:	4b0c      	ldr	r3, [pc, #48]	@ (8008ad8 <vPortEnterCritical+0x60>)
 8008aa6:	681b      	ldr	r3, [r3, #0]
 8008aa8:	b2db      	uxtb	r3, r3
 8008aaa:	2b00      	cmp	r3, #0
 8008aac:	d00b      	beq.n	8008ac6 <vPortEnterCritical+0x4e>
	__asm volatile
 8008aae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008ab2:	f383 8811 	msr	BASEPRI, r3
 8008ab6:	f3bf 8f6f 	isb	sy
 8008aba:	f3bf 8f4f 	dsb	sy
 8008abe:	603b      	str	r3, [r7, #0]
}
 8008ac0:	bf00      	nop
 8008ac2:	bf00      	nop
 8008ac4:	e7fd      	b.n	8008ac2 <vPortEnterCritical+0x4a>
	}
}
 8008ac6:	bf00      	nop
 8008ac8:	370c      	adds	r7, #12
 8008aca:	46bd      	mov	sp, r7
 8008acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ad0:	4770      	bx	lr
 8008ad2:	bf00      	nop
 8008ad4:	20000010 	.word	0x20000010
 8008ad8:	e000ed04 	.word	0xe000ed04

08008adc <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8008adc:	b480      	push	{r7}
 8008ade:	b083      	sub	sp, #12
 8008ae0:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8008ae2:	4b12      	ldr	r3, [pc, #72]	@ (8008b2c <vPortExitCritical+0x50>)
 8008ae4:	681b      	ldr	r3, [r3, #0]
 8008ae6:	2b00      	cmp	r3, #0
 8008ae8:	d10b      	bne.n	8008b02 <vPortExitCritical+0x26>
	__asm volatile
 8008aea:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008aee:	f383 8811 	msr	BASEPRI, r3
 8008af2:	f3bf 8f6f 	isb	sy
 8008af6:	f3bf 8f4f 	dsb	sy
 8008afa:	607b      	str	r3, [r7, #4]
}
 8008afc:	bf00      	nop
 8008afe:	bf00      	nop
 8008b00:	e7fd      	b.n	8008afe <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8008b02:	4b0a      	ldr	r3, [pc, #40]	@ (8008b2c <vPortExitCritical+0x50>)
 8008b04:	681b      	ldr	r3, [r3, #0]
 8008b06:	3b01      	subs	r3, #1
 8008b08:	4a08      	ldr	r2, [pc, #32]	@ (8008b2c <vPortExitCritical+0x50>)
 8008b0a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8008b0c:	4b07      	ldr	r3, [pc, #28]	@ (8008b2c <vPortExitCritical+0x50>)
 8008b0e:	681b      	ldr	r3, [r3, #0]
 8008b10:	2b00      	cmp	r3, #0
 8008b12:	d105      	bne.n	8008b20 <vPortExitCritical+0x44>
 8008b14:	2300      	movs	r3, #0
 8008b16:	603b      	str	r3, [r7, #0]
	__asm volatile
 8008b18:	683b      	ldr	r3, [r7, #0]
 8008b1a:	f383 8811 	msr	BASEPRI, r3
}
 8008b1e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8008b20:	bf00      	nop
 8008b22:	370c      	adds	r7, #12
 8008b24:	46bd      	mov	sp, r7
 8008b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b2a:	4770      	bx	lr
 8008b2c:	20000010 	.word	0x20000010

08008b30 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8008b30:	f3ef 8009 	mrs	r0, PSP
 8008b34:	f3bf 8f6f 	isb	sy
 8008b38:	4b15      	ldr	r3, [pc, #84]	@ (8008b90 <pxCurrentTCBConst>)
 8008b3a:	681a      	ldr	r2, [r3, #0]
 8008b3c:	f01e 0f10 	tst.w	lr, #16
 8008b40:	bf08      	it	eq
 8008b42:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8008b46:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008b4a:	6010      	str	r0, [r2, #0]
 8008b4c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8008b50:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8008b54:	f380 8811 	msr	BASEPRI, r0
 8008b58:	f3bf 8f4f 	dsb	sy
 8008b5c:	f3bf 8f6f 	isb	sy
 8008b60:	f7fe ff86 	bl	8007a70 <vTaskSwitchContext>
 8008b64:	f04f 0000 	mov.w	r0, #0
 8008b68:	f380 8811 	msr	BASEPRI, r0
 8008b6c:	bc09      	pop	{r0, r3}
 8008b6e:	6819      	ldr	r1, [r3, #0]
 8008b70:	6808      	ldr	r0, [r1, #0]
 8008b72:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008b76:	f01e 0f10 	tst.w	lr, #16
 8008b7a:	bf08      	it	eq
 8008b7c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8008b80:	f380 8809 	msr	PSP, r0
 8008b84:	f3bf 8f6f 	isb	sy
 8008b88:	4770      	bx	lr
 8008b8a:	bf00      	nop
 8008b8c:	f3af 8000 	nop.w

08008b90 <pxCurrentTCBConst>:
 8008b90:	20004e94 	.word	0x20004e94
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8008b94:	bf00      	nop
 8008b96:	bf00      	nop

08008b98 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8008b98:	b580      	push	{r7, lr}
 8008b9a:	b082      	sub	sp, #8
 8008b9c:	af00      	add	r7, sp, #0
	__asm volatile
 8008b9e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008ba2:	f383 8811 	msr	BASEPRI, r3
 8008ba6:	f3bf 8f6f 	isb	sy
 8008baa:	f3bf 8f4f 	dsb	sy
 8008bae:	607b      	str	r3, [r7, #4]
}
 8008bb0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8008bb2:	f7fe fea3 	bl	80078fc <xTaskIncrementTick>
 8008bb6:	4603      	mov	r3, r0
 8008bb8:	2b00      	cmp	r3, #0
 8008bba:	d003      	beq.n	8008bc4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8008bbc:	4b06      	ldr	r3, [pc, #24]	@ (8008bd8 <xPortSysTickHandler+0x40>)
 8008bbe:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008bc2:	601a      	str	r2, [r3, #0]
 8008bc4:	2300      	movs	r3, #0
 8008bc6:	603b      	str	r3, [r7, #0]
	__asm volatile
 8008bc8:	683b      	ldr	r3, [r7, #0]
 8008bca:	f383 8811 	msr	BASEPRI, r3
}
 8008bce:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8008bd0:	bf00      	nop
 8008bd2:	3708      	adds	r7, #8
 8008bd4:	46bd      	mov	sp, r7
 8008bd6:	bd80      	pop	{r7, pc}
 8008bd8:	e000ed04 	.word	0xe000ed04

08008bdc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8008bdc:	b480      	push	{r7}
 8008bde:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8008be0:	4b0b      	ldr	r3, [pc, #44]	@ (8008c10 <vPortSetupTimerInterrupt+0x34>)
 8008be2:	2200      	movs	r2, #0
 8008be4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8008be6:	4b0b      	ldr	r3, [pc, #44]	@ (8008c14 <vPortSetupTimerInterrupt+0x38>)
 8008be8:	2200      	movs	r2, #0
 8008bea:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8008bec:	4b0a      	ldr	r3, [pc, #40]	@ (8008c18 <vPortSetupTimerInterrupt+0x3c>)
 8008bee:	681b      	ldr	r3, [r3, #0]
 8008bf0:	4a0a      	ldr	r2, [pc, #40]	@ (8008c1c <vPortSetupTimerInterrupt+0x40>)
 8008bf2:	fba2 2303 	umull	r2, r3, r2, r3
 8008bf6:	099b      	lsrs	r3, r3, #6
 8008bf8:	4a09      	ldr	r2, [pc, #36]	@ (8008c20 <vPortSetupTimerInterrupt+0x44>)
 8008bfa:	3b01      	subs	r3, #1
 8008bfc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8008bfe:	4b04      	ldr	r3, [pc, #16]	@ (8008c10 <vPortSetupTimerInterrupt+0x34>)
 8008c00:	2207      	movs	r2, #7
 8008c02:	601a      	str	r2, [r3, #0]
}
 8008c04:	bf00      	nop
 8008c06:	46bd      	mov	sp, r7
 8008c08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c0c:	4770      	bx	lr
 8008c0e:	bf00      	nop
 8008c10:	e000e010 	.word	0xe000e010
 8008c14:	e000e018 	.word	0xe000e018
 8008c18:	20000004 	.word	0x20000004
 8008c1c:	10624dd3 	.word	0x10624dd3
 8008c20:	e000e014 	.word	0xe000e014

08008c24 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8008c24:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8008c34 <vPortEnableVFP+0x10>
 8008c28:	6801      	ldr	r1, [r0, #0]
 8008c2a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8008c2e:	6001      	str	r1, [r0, #0]
 8008c30:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8008c32:	bf00      	nop
 8008c34:	e000ed88 	.word	0xe000ed88

08008c38 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8008c38:	b480      	push	{r7}
 8008c3a:	b085      	sub	sp, #20
 8008c3c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8008c3e:	f3ef 8305 	mrs	r3, IPSR
 8008c42:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8008c44:	68fb      	ldr	r3, [r7, #12]
 8008c46:	2b0f      	cmp	r3, #15
 8008c48:	d915      	bls.n	8008c76 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8008c4a:	4a18      	ldr	r2, [pc, #96]	@ (8008cac <vPortValidateInterruptPriority+0x74>)
 8008c4c:	68fb      	ldr	r3, [r7, #12]
 8008c4e:	4413      	add	r3, r2
 8008c50:	781b      	ldrb	r3, [r3, #0]
 8008c52:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8008c54:	4b16      	ldr	r3, [pc, #88]	@ (8008cb0 <vPortValidateInterruptPriority+0x78>)
 8008c56:	781b      	ldrb	r3, [r3, #0]
 8008c58:	7afa      	ldrb	r2, [r7, #11]
 8008c5a:	429a      	cmp	r2, r3
 8008c5c:	d20b      	bcs.n	8008c76 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 8008c5e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008c62:	f383 8811 	msr	BASEPRI, r3
 8008c66:	f3bf 8f6f 	isb	sy
 8008c6a:	f3bf 8f4f 	dsb	sy
 8008c6e:	607b      	str	r3, [r7, #4]
}
 8008c70:	bf00      	nop
 8008c72:	bf00      	nop
 8008c74:	e7fd      	b.n	8008c72 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8008c76:	4b0f      	ldr	r3, [pc, #60]	@ (8008cb4 <vPortValidateInterruptPriority+0x7c>)
 8008c78:	681b      	ldr	r3, [r3, #0]
 8008c7a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8008c7e:	4b0e      	ldr	r3, [pc, #56]	@ (8008cb8 <vPortValidateInterruptPriority+0x80>)
 8008c80:	681b      	ldr	r3, [r3, #0]
 8008c82:	429a      	cmp	r2, r3
 8008c84:	d90b      	bls.n	8008c9e <vPortValidateInterruptPriority+0x66>
	__asm volatile
 8008c86:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008c8a:	f383 8811 	msr	BASEPRI, r3
 8008c8e:	f3bf 8f6f 	isb	sy
 8008c92:	f3bf 8f4f 	dsb	sy
 8008c96:	603b      	str	r3, [r7, #0]
}
 8008c98:	bf00      	nop
 8008c9a:	bf00      	nop
 8008c9c:	e7fd      	b.n	8008c9a <vPortValidateInterruptPriority+0x62>
	}
 8008c9e:	bf00      	nop
 8008ca0:	3714      	adds	r7, #20
 8008ca2:	46bd      	mov	sp, r7
 8008ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ca8:	4770      	bx	lr
 8008caa:	bf00      	nop
 8008cac:	e000e3f0 	.word	0xe000e3f0
 8008cb0:	200054c0 	.word	0x200054c0
 8008cb4:	e000ed0c 	.word	0xe000ed0c
 8008cb8:	200054c4 	.word	0x200054c4

08008cbc <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8008cbc:	b580      	push	{r7, lr}
 8008cbe:	b08a      	sub	sp, #40	@ 0x28
 8008cc0:	af00      	add	r7, sp, #0
 8008cc2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8008cc4:	2300      	movs	r3, #0
 8008cc6:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8008cc8:	f7fe fd5c 	bl	8007784 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8008ccc:	4b5c      	ldr	r3, [pc, #368]	@ (8008e40 <pvPortMalloc+0x184>)
 8008cce:	681b      	ldr	r3, [r3, #0]
 8008cd0:	2b00      	cmp	r3, #0
 8008cd2:	d101      	bne.n	8008cd8 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8008cd4:	f000 f924 	bl	8008f20 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8008cd8:	4b5a      	ldr	r3, [pc, #360]	@ (8008e44 <pvPortMalloc+0x188>)
 8008cda:	681a      	ldr	r2, [r3, #0]
 8008cdc:	687b      	ldr	r3, [r7, #4]
 8008cde:	4013      	ands	r3, r2
 8008ce0:	2b00      	cmp	r3, #0
 8008ce2:	f040 8095 	bne.w	8008e10 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8008ce6:	687b      	ldr	r3, [r7, #4]
 8008ce8:	2b00      	cmp	r3, #0
 8008cea:	d01e      	beq.n	8008d2a <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 8008cec:	2208      	movs	r2, #8
 8008cee:	687b      	ldr	r3, [r7, #4]
 8008cf0:	4413      	add	r3, r2
 8008cf2:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8008cf4:	687b      	ldr	r3, [r7, #4]
 8008cf6:	f003 0307 	and.w	r3, r3, #7
 8008cfa:	2b00      	cmp	r3, #0
 8008cfc:	d015      	beq.n	8008d2a <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8008cfe:	687b      	ldr	r3, [r7, #4]
 8008d00:	f023 0307 	bic.w	r3, r3, #7
 8008d04:	3308      	adds	r3, #8
 8008d06:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8008d08:	687b      	ldr	r3, [r7, #4]
 8008d0a:	f003 0307 	and.w	r3, r3, #7
 8008d0e:	2b00      	cmp	r3, #0
 8008d10:	d00b      	beq.n	8008d2a <pvPortMalloc+0x6e>
	__asm volatile
 8008d12:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008d16:	f383 8811 	msr	BASEPRI, r3
 8008d1a:	f3bf 8f6f 	isb	sy
 8008d1e:	f3bf 8f4f 	dsb	sy
 8008d22:	617b      	str	r3, [r7, #20]
}
 8008d24:	bf00      	nop
 8008d26:	bf00      	nop
 8008d28:	e7fd      	b.n	8008d26 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8008d2a:	687b      	ldr	r3, [r7, #4]
 8008d2c:	2b00      	cmp	r3, #0
 8008d2e:	d06f      	beq.n	8008e10 <pvPortMalloc+0x154>
 8008d30:	4b45      	ldr	r3, [pc, #276]	@ (8008e48 <pvPortMalloc+0x18c>)
 8008d32:	681b      	ldr	r3, [r3, #0]
 8008d34:	687a      	ldr	r2, [r7, #4]
 8008d36:	429a      	cmp	r2, r3
 8008d38:	d86a      	bhi.n	8008e10 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8008d3a:	4b44      	ldr	r3, [pc, #272]	@ (8008e4c <pvPortMalloc+0x190>)
 8008d3c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8008d3e:	4b43      	ldr	r3, [pc, #268]	@ (8008e4c <pvPortMalloc+0x190>)
 8008d40:	681b      	ldr	r3, [r3, #0]
 8008d42:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8008d44:	e004      	b.n	8008d50 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8008d46:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008d48:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8008d4a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008d4c:	681b      	ldr	r3, [r3, #0]
 8008d4e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8008d50:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008d52:	685b      	ldr	r3, [r3, #4]
 8008d54:	687a      	ldr	r2, [r7, #4]
 8008d56:	429a      	cmp	r2, r3
 8008d58:	d903      	bls.n	8008d62 <pvPortMalloc+0xa6>
 8008d5a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008d5c:	681b      	ldr	r3, [r3, #0]
 8008d5e:	2b00      	cmp	r3, #0
 8008d60:	d1f1      	bne.n	8008d46 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8008d62:	4b37      	ldr	r3, [pc, #220]	@ (8008e40 <pvPortMalloc+0x184>)
 8008d64:	681b      	ldr	r3, [r3, #0]
 8008d66:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008d68:	429a      	cmp	r2, r3
 8008d6a:	d051      	beq.n	8008e10 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8008d6c:	6a3b      	ldr	r3, [r7, #32]
 8008d6e:	681b      	ldr	r3, [r3, #0]
 8008d70:	2208      	movs	r2, #8
 8008d72:	4413      	add	r3, r2
 8008d74:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8008d76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008d78:	681a      	ldr	r2, [r3, #0]
 8008d7a:	6a3b      	ldr	r3, [r7, #32]
 8008d7c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8008d7e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008d80:	685a      	ldr	r2, [r3, #4]
 8008d82:	687b      	ldr	r3, [r7, #4]
 8008d84:	1ad2      	subs	r2, r2, r3
 8008d86:	2308      	movs	r3, #8
 8008d88:	005b      	lsls	r3, r3, #1
 8008d8a:	429a      	cmp	r2, r3
 8008d8c:	d920      	bls.n	8008dd0 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8008d8e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008d90:	687b      	ldr	r3, [r7, #4]
 8008d92:	4413      	add	r3, r2
 8008d94:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8008d96:	69bb      	ldr	r3, [r7, #24]
 8008d98:	f003 0307 	and.w	r3, r3, #7
 8008d9c:	2b00      	cmp	r3, #0
 8008d9e:	d00b      	beq.n	8008db8 <pvPortMalloc+0xfc>
	__asm volatile
 8008da0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008da4:	f383 8811 	msr	BASEPRI, r3
 8008da8:	f3bf 8f6f 	isb	sy
 8008dac:	f3bf 8f4f 	dsb	sy
 8008db0:	613b      	str	r3, [r7, #16]
}
 8008db2:	bf00      	nop
 8008db4:	bf00      	nop
 8008db6:	e7fd      	b.n	8008db4 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8008db8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008dba:	685a      	ldr	r2, [r3, #4]
 8008dbc:	687b      	ldr	r3, [r7, #4]
 8008dbe:	1ad2      	subs	r2, r2, r3
 8008dc0:	69bb      	ldr	r3, [r7, #24]
 8008dc2:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8008dc4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008dc6:	687a      	ldr	r2, [r7, #4]
 8008dc8:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8008dca:	69b8      	ldr	r0, [r7, #24]
 8008dcc:	f000 f90a 	bl	8008fe4 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8008dd0:	4b1d      	ldr	r3, [pc, #116]	@ (8008e48 <pvPortMalloc+0x18c>)
 8008dd2:	681a      	ldr	r2, [r3, #0]
 8008dd4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008dd6:	685b      	ldr	r3, [r3, #4]
 8008dd8:	1ad3      	subs	r3, r2, r3
 8008dda:	4a1b      	ldr	r2, [pc, #108]	@ (8008e48 <pvPortMalloc+0x18c>)
 8008ddc:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8008dde:	4b1a      	ldr	r3, [pc, #104]	@ (8008e48 <pvPortMalloc+0x18c>)
 8008de0:	681a      	ldr	r2, [r3, #0]
 8008de2:	4b1b      	ldr	r3, [pc, #108]	@ (8008e50 <pvPortMalloc+0x194>)
 8008de4:	681b      	ldr	r3, [r3, #0]
 8008de6:	429a      	cmp	r2, r3
 8008de8:	d203      	bcs.n	8008df2 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8008dea:	4b17      	ldr	r3, [pc, #92]	@ (8008e48 <pvPortMalloc+0x18c>)
 8008dec:	681b      	ldr	r3, [r3, #0]
 8008dee:	4a18      	ldr	r2, [pc, #96]	@ (8008e50 <pvPortMalloc+0x194>)
 8008df0:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8008df2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008df4:	685a      	ldr	r2, [r3, #4]
 8008df6:	4b13      	ldr	r3, [pc, #76]	@ (8008e44 <pvPortMalloc+0x188>)
 8008df8:	681b      	ldr	r3, [r3, #0]
 8008dfa:	431a      	orrs	r2, r3
 8008dfc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008dfe:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8008e00:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008e02:	2200      	movs	r2, #0
 8008e04:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8008e06:	4b13      	ldr	r3, [pc, #76]	@ (8008e54 <pvPortMalloc+0x198>)
 8008e08:	681b      	ldr	r3, [r3, #0]
 8008e0a:	3301      	adds	r3, #1
 8008e0c:	4a11      	ldr	r2, [pc, #68]	@ (8008e54 <pvPortMalloc+0x198>)
 8008e0e:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8008e10:	f7fe fcc6 	bl	80077a0 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8008e14:	69fb      	ldr	r3, [r7, #28]
 8008e16:	f003 0307 	and.w	r3, r3, #7
 8008e1a:	2b00      	cmp	r3, #0
 8008e1c:	d00b      	beq.n	8008e36 <pvPortMalloc+0x17a>
	__asm volatile
 8008e1e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008e22:	f383 8811 	msr	BASEPRI, r3
 8008e26:	f3bf 8f6f 	isb	sy
 8008e2a:	f3bf 8f4f 	dsb	sy
 8008e2e:	60fb      	str	r3, [r7, #12]
}
 8008e30:	bf00      	nop
 8008e32:	bf00      	nop
 8008e34:	e7fd      	b.n	8008e32 <pvPortMalloc+0x176>
	return pvReturn;
 8008e36:	69fb      	ldr	r3, [r7, #28]
}
 8008e38:	4618      	mov	r0, r3
 8008e3a:	3728      	adds	r7, #40	@ 0x28
 8008e3c:	46bd      	mov	sp, r7
 8008e3e:	bd80      	pop	{r7, pc}
 8008e40:	200090d0 	.word	0x200090d0
 8008e44:	200090e4 	.word	0x200090e4
 8008e48:	200090d4 	.word	0x200090d4
 8008e4c:	200090c8 	.word	0x200090c8
 8008e50:	200090d8 	.word	0x200090d8
 8008e54:	200090dc 	.word	0x200090dc

08008e58 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8008e58:	b580      	push	{r7, lr}
 8008e5a:	b086      	sub	sp, #24
 8008e5c:	af00      	add	r7, sp, #0
 8008e5e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8008e60:	687b      	ldr	r3, [r7, #4]
 8008e62:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8008e64:	687b      	ldr	r3, [r7, #4]
 8008e66:	2b00      	cmp	r3, #0
 8008e68:	d04f      	beq.n	8008f0a <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8008e6a:	2308      	movs	r3, #8
 8008e6c:	425b      	negs	r3, r3
 8008e6e:	697a      	ldr	r2, [r7, #20]
 8008e70:	4413      	add	r3, r2
 8008e72:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8008e74:	697b      	ldr	r3, [r7, #20]
 8008e76:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8008e78:	693b      	ldr	r3, [r7, #16]
 8008e7a:	685a      	ldr	r2, [r3, #4]
 8008e7c:	4b25      	ldr	r3, [pc, #148]	@ (8008f14 <vPortFree+0xbc>)
 8008e7e:	681b      	ldr	r3, [r3, #0]
 8008e80:	4013      	ands	r3, r2
 8008e82:	2b00      	cmp	r3, #0
 8008e84:	d10b      	bne.n	8008e9e <vPortFree+0x46>
	__asm volatile
 8008e86:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008e8a:	f383 8811 	msr	BASEPRI, r3
 8008e8e:	f3bf 8f6f 	isb	sy
 8008e92:	f3bf 8f4f 	dsb	sy
 8008e96:	60fb      	str	r3, [r7, #12]
}
 8008e98:	bf00      	nop
 8008e9a:	bf00      	nop
 8008e9c:	e7fd      	b.n	8008e9a <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8008e9e:	693b      	ldr	r3, [r7, #16]
 8008ea0:	681b      	ldr	r3, [r3, #0]
 8008ea2:	2b00      	cmp	r3, #0
 8008ea4:	d00b      	beq.n	8008ebe <vPortFree+0x66>
	__asm volatile
 8008ea6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008eaa:	f383 8811 	msr	BASEPRI, r3
 8008eae:	f3bf 8f6f 	isb	sy
 8008eb2:	f3bf 8f4f 	dsb	sy
 8008eb6:	60bb      	str	r3, [r7, #8]
}
 8008eb8:	bf00      	nop
 8008eba:	bf00      	nop
 8008ebc:	e7fd      	b.n	8008eba <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8008ebe:	693b      	ldr	r3, [r7, #16]
 8008ec0:	685a      	ldr	r2, [r3, #4]
 8008ec2:	4b14      	ldr	r3, [pc, #80]	@ (8008f14 <vPortFree+0xbc>)
 8008ec4:	681b      	ldr	r3, [r3, #0]
 8008ec6:	4013      	ands	r3, r2
 8008ec8:	2b00      	cmp	r3, #0
 8008eca:	d01e      	beq.n	8008f0a <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8008ecc:	693b      	ldr	r3, [r7, #16]
 8008ece:	681b      	ldr	r3, [r3, #0]
 8008ed0:	2b00      	cmp	r3, #0
 8008ed2:	d11a      	bne.n	8008f0a <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8008ed4:	693b      	ldr	r3, [r7, #16]
 8008ed6:	685a      	ldr	r2, [r3, #4]
 8008ed8:	4b0e      	ldr	r3, [pc, #56]	@ (8008f14 <vPortFree+0xbc>)
 8008eda:	681b      	ldr	r3, [r3, #0]
 8008edc:	43db      	mvns	r3, r3
 8008ede:	401a      	ands	r2, r3
 8008ee0:	693b      	ldr	r3, [r7, #16]
 8008ee2:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8008ee4:	f7fe fc4e 	bl	8007784 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8008ee8:	693b      	ldr	r3, [r7, #16]
 8008eea:	685a      	ldr	r2, [r3, #4]
 8008eec:	4b0a      	ldr	r3, [pc, #40]	@ (8008f18 <vPortFree+0xc0>)
 8008eee:	681b      	ldr	r3, [r3, #0]
 8008ef0:	4413      	add	r3, r2
 8008ef2:	4a09      	ldr	r2, [pc, #36]	@ (8008f18 <vPortFree+0xc0>)
 8008ef4:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8008ef6:	6938      	ldr	r0, [r7, #16]
 8008ef8:	f000 f874 	bl	8008fe4 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8008efc:	4b07      	ldr	r3, [pc, #28]	@ (8008f1c <vPortFree+0xc4>)
 8008efe:	681b      	ldr	r3, [r3, #0]
 8008f00:	3301      	adds	r3, #1
 8008f02:	4a06      	ldr	r2, [pc, #24]	@ (8008f1c <vPortFree+0xc4>)
 8008f04:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8008f06:	f7fe fc4b 	bl	80077a0 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8008f0a:	bf00      	nop
 8008f0c:	3718      	adds	r7, #24
 8008f0e:	46bd      	mov	sp, r7
 8008f10:	bd80      	pop	{r7, pc}
 8008f12:	bf00      	nop
 8008f14:	200090e4 	.word	0x200090e4
 8008f18:	200090d4 	.word	0x200090d4
 8008f1c:	200090e0 	.word	0x200090e0

08008f20 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8008f20:	b480      	push	{r7}
 8008f22:	b085      	sub	sp, #20
 8008f24:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8008f26:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 8008f2a:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8008f2c:	4b27      	ldr	r3, [pc, #156]	@ (8008fcc <prvHeapInit+0xac>)
 8008f2e:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8008f30:	68fb      	ldr	r3, [r7, #12]
 8008f32:	f003 0307 	and.w	r3, r3, #7
 8008f36:	2b00      	cmp	r3, #0
 8008f38:	d00c      	beq.n	8008f54 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8008f3a:	68fb      	ldr	r3, [r7, #12]
 8008f3c:	3307      	adds	r3, #7
 8008f3e:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008f40:	68fb      	ldr	r3, [r7, #12]
 8008f42:	f023 0307 	bic.w	r3, r3, #7
 8008f46:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8008f48:	68ba      	ldr	r2, [r7, #8]
 8008f4a:	68fb      	ldr	r3, [r7, #12]
 8008f4c:	1ad3      	subs	r3, r2, r3
 8008f4e:	4a1f      	ldr	r2, [pc, #124]	@ (8008fcc <prvHeapInit+0xac>)
 8008f50:	4413      	add	r3, r2
 8008f52:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8008f54:	68fb      	ldr	r3, [r7, #12]
 8008f56:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8008f58:	4a1d      	ldr	r2, [pc, #116]	@ (8008fd0 <prvHeapInit+0xb0>)
 8008f5a:	687b      	ldr	r3, [r7, #4]
 8008f5c:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8008f5e:	4b1c      	ldr	r3, [pc, #112]	@ (8008fd0 <prvHeapInit+0xb0>)
 8008f60:	2200      	movs	r2, #0
 8008f62:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8008f64:	687b      	ldr	r3, [r7, #4]
 8008f66:	68ba      	ldr	r2, [r7, #8]
 8008f68:	4413      	add	r3, r2
 8008f6a:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8008f6c:	2208      	movs	r2, #8
 8008f6e:	68fb      	ldr	r3, [r7, #12]
 8008f70:	1a9b      	subs	r3, r3, r2
 8008f72:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008f74:	68fb      	ldr	r3, [r7, #12]
 8008f76:	f023 0307 	bic.w	r3, r3, #7
 8008f7a:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8008f7c:	68fb      	ldr	r3, [r7, #12]
 8008f7e:	4a15      	ldr	r2, [pc, #84]	@ (8008fd4 <prvHeapInit+0xb4>)
 8008f80:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8008f82:	4b14      	ldr	r3, [pc, #80]	@ (8008fd4 <prvHeapInit+0xb4>)
 8008f84:	681b      	ldr	r3, [r3, #0]
 8008f86:	2200      	movs	r2, #0
 8008f88:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8008f8a:	4b12      	ldr	r3, [pc, #72]	@ (8008fd4 <prvHeapInit+0xb4>)
 8008f8c:	681b      	ldr	r3, [r3, #0]
 8008f8e:	2200      	movs	r2, #0
 8008f90:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8008f92:	687b      	ldr	r3, [r7, #4]
 8008f94:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8008f96:	683b      	ldr	r3, [r7, #0]
 8008f98:	68fa      	ldr	r2, [r7, #12]
 8008f9a:	1ad2      	subs	r2, r2, r3
 8008f9c:	683b      	ldr	r3, [r7, #0]
 8008f9e:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8008fa0:	4b0c      	ldr	r3, [pc, #48]	@ (8008fd4 <prvHeapInit+0xb4>)
 8008fa2:	681a      	ldr	r2, [r3, #0]
 8008fa4:	683b      	ldr	r3, [r7, #0]
 8008fa6:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8008fa8:	683b      	ldr	r3, [r7, #0]
 8008faa:	685b      	ldr	r3, [r3, #4]
 8008fac:	4a0a      	ldr	r2, [pc, #40]	@ (8008fd8 <prvHeapInit+0xb8>)
 8008fae:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8008fb0:	683b      	ldr	r3, [r7, #0]
 8008fb2:	685b      	ldr	r3, [r3, #4]
 8008fb4:	4a09      	ldr	r2, [pc, #36]	@ (8008fdc <prvHeapInit+0xbc>)
 8008fb6:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8008fb8:	4b09      	ldr	r3, [pc, #36]	@ (8008fe0 <prvHeapInit+0xc0>)
 8008fba:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8008fbe:	601a      	str	r2, [r3, #0]
}
 8008fc0:	bf00      	nop
 8008fc2:	3714      	adds	r7, #20
 8008fc4:	46bd      	mov	sp, r7
 8008fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fca:	4770      	bx	lr
 8008fcc:	200054c8 	.word	0x200054c8
 8008fd0:	200090c8 	.word	0x200090c8
 8008fd4:	200090d0 	.word	0x200090d0
 8008fd8:	200090d8 	.word	0x200090d8
 8008fdc:	200090d4 	.word	0x200090d4
 8008fe0:	200090e4 	.word	0x200090e4

08008fe4 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8008fe4:	b480      	push	{r7}
 8008fe6:	b085      	sub	sp, #20
 8008fe8:	af00      	add	r7, sp, #0
 8008fea:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8008fec:	4b28      	ldr	r3, [pc, #160]	@ (8009090 <prvInsertBlockIntoFreeList+0xac>)
 8008fee:	60fb      	str	r3, [r7, #12]
 8008ff0:	e002      	b.n	8008ff8 <prvInsertBlockIntoFreeList+0x14>
 8008ff2:	68fb      	ldr	r3, [r7, #12]
 8008ff4:	681b      	ldr	r3, [r3, #0]
 8008ff6:	60fb      	str	r3, [r7, #12]
 8008ff8:	68fb      	ldr	r3, [r7, #12]
 8008ffa:	681b      	ldr	r3, [r3, #0]
 8008ffc:	687a      	ldr	r2, [r7, #4]
 8008ffe:	429a      	cmp	r2, r3
 8009000:	d8f7      	bhi.n	8008ff2 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8009002:	68fb      	ldr	r3, [r7, #12]
 8009004:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8009006:	68fb      	ldr	r3, [r7, #12]
 8009008:	685b      	ldr	r3, [r3, #4]
 800900a:	68ba      	ldr	r2, [r7, #8]
 800900c:	4413      	add	r3, r2
 800900e:	687a      	ldr	r2, [r7, #4]
 8009010:	429a      	cmp	r2, r3
 8009012:	d108      	bne.n	8009026 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8009014:	68fb      	ldr	r3, [r7, #12]
 8009016:	685a      	ldr	r2, [r3, #4]
 8009018:	687b      	ldr	r3, [r7, #4]
 800901a:	685b      	ldr	r3, [r3, #4]
 800901c:	441a      	add	r2, r3
 800901e:	68fb      	ldr	r3, [r7, #12]
 8009020:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8009022:	68fb      	ldr	r3, [r7, #12]
 8009024:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8009026:	687b      	ldr	r3, [r7, #4]
 8009028:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800902a:	687b      	ldr	r3, [r7, #4]
 800902c:	685b      	ldr	r3, [r3, #4]
 800902e:	68ba      	ldr	r2, [r7, #8]
 8009030:	441a      	add	r2, r3
 8009032:	68fb      	ldr	r3, [r7, #12]
 8009034:	681b      	ldr	r3, [r3, #0]
 8009036:	429a      	cmp	r2, r3
 8009038:	d118      	bne.n	800906c <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800903a:	68fb      	ldr	r3, [r7, #12]
 800903c:	681a      	ldr	r2, [r3, #0]
 800903e:	4b15      	ldr	r3, [pc, #84]	@ (8009094 <prvInsertBlockIntoFreeList+0xb0>)
 8009040:	681b      	ldr	r3, [r3, #0]
 8009042:	429a      	cmp	r2, r3
 8009044:	d00d      	beq.n	8009062 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8009046:	687b      	ldr	r3, [r7, #4]
 8009048:	685a      	ldr	r2, [r3, #4]
 800904a:	68fb      	ldr	r3, [r7, #12]
 800904c:	681b      	ldr	r3, [r3, #0]
 800904e:	685b      	ldr	r3, [r3, #4]
 8009050:	441a      	add	r2, r3
 8009052:	687b      	ldr	r3, [r7, #4]
 8009054:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8009056:	68fb      	ldr	r3, [r7, #12]
 8009058:	681b      	ldr	r3, [r3, #0]
 800905a:	681a      	ldr	r2, [r3, #0]
 800905c:	687b      	ldr	r3, [r7, #4]
 800905e:	601a      	str	r2, [r3, #0]
 8009060:	e008      	b.n	8009074 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8009062:	4b0c      	ldr	r3, [pc, #48]	@ (8009094 <prvInsertBlockIntoFreeList+0xb0>)
 8009064:	681a      	ldr	r2, [r3, #0]
 8009066:	687b      	ldr	r3, [r7, #4]
 8009068:	601a      	str	r2, [r3, #0]
 800906a:	e003      	b.n	8009074 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800906c:	68fb      	ldr	r3, [r7, #12]
 800906e:	681a      	ldr	r2, [r3, #0]
 8009070:	687b      	ldr	r3, [r7, #4]
 8009072:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8009074:	68fa      	ldr	r2, [r7, #12]
 8009076:	687b      	ldr	r3, [r7, #4]
 8009078:	429a      	cmp	r2, r3
 800907a:	d002      	beq.n	8009082 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800907c:	68fb      	ldr	r3, [r7, #12]
 800907e:	687a      	ldr	r2, [r7, #4]
 8009080:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8009082:	bf00      	nop
 8009084:	3714      	adds	r7, #20
 8009086:	46bd      	mov	sp, r7
 8009088:	f85d 7b04 	ldr.w	r7, [sp], #4
 800908c:	4770      	bx	lr
 800908e:	bf00      	nop
 8009090:	200090c8 	.word	0x200090c8
 8009094:	200090d0 	.word	0x200090d0

08009098 <rcl_get_zero_initialized_init_options>:
 8009098:	2000      	movs	r0, #0
 800909a:	4770      	bx	lr

0800909c <rcl_init_options_init>:
 800909c:	b084      	sub	sp, #16
 800909e:	b5f0      	push	{r4, r5, r6, r7, lr}
 80090a0:	b097      	sub	sp, #92	@ 0x5c
 80090a2:	ae1d      	add	r6, sp, #116	@ 0x74
 80090a4:	e886 000e 	stmia.w	r6, {r1, r2, r3}
 80090a8:	2800      	cmp	r0, #0
 80090aa:	d058      	beq.n	800915e <rcl_init_options_init+0xc2>
 80090ac:	6803      	ldr	r3, [r0, #0]
 80090ae:	4605      	mov	r5, r0
 80090b0:	b133      	cbz	r3, 80090c0 <rcl_init_options_init+0x24>
 80090b2:	2464      	movs	r4, #100	@ 0x64
 80090b4:	4620      	mov	r0, r4
 80090b6:	b017      	add	sp, #92	@ 0x5c
 80090b8:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 80090bc:	b004      	add	sp, #16
 80090be:	4770      	bx	lr
 80090c0:	4630      	mov	r0, r6
 80090c2:	f000 ffe7 	bl	800a094 <rcutils_allocator_is_valid>
 80090c6:	2800      	cmp	r0, #0
 80090c8:	d049      	beq.n	800915e <rcl_init_options_init+0xc2>
 80090ca:	46b4      	mov	ip, r6
 80090cc:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 80090d0:	ac11      	add	r4, sp, #68	@ 0x44
 80090d2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80090d4:	f8dc 3000 	ldr.w	r3, [ip]
 80090d8:	6023      	str	r3, [r4, #0]
 80090da:	9921      	ldr	r1, [sp, #132]	@ 0x84
 80090dc:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 80090de:	2050      	movs	r0, #80	@ 0x50
 80090e0:	4798      	blx	r3
 80090e2:	4604      	mov	r4, r0
 80090e4:	6028      	str	r0, [r5, #0]
 80090e6:	2800      	cmp	r0, #0
 80090e8:	d03b      	beq.n	8009162 <rcl_init_options_init+0xc6>
 80090ea:	f10d 0c44 	add.w	ip, sp, #68	@ 0x44
 80090ee:	4686      	mov	lr, r0
 80090f0:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 80090f4:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 80090f8:	f8dc 3000 	ldr.w	r3, [ip]
 80090fc:	f8ce 3000 	str.w	r3, [lr]
 8009100:	a802      	add	r0, sp, #8
 8009102:	f001 f859 	bl	800a1b8 <rmw_get_zero_initialized_init_options>
 8009106:	f10d 0e08 	add.w	lr, sp, #8
 800910a:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800910e:	f104 0c18 	add.w	ip, r4, #24
 8009112:	682f      	ldr	r7, [r5, #0]
 8009114:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8009118:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800911c:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8009120:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8009124:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8009128:	e89e 0003 	ldmia.w	lr, {r0, r1}
 800912c:	ac20      	add	r4, sp, #128	@ 0x80
 800912e:	e88c 0003 	stmia.w	ip, {r0, r1}
 8009132:	e894 0003 	ldmia.w	r4, {r0, r1}
 8009136:	e88d 0003 	stmia.w	sp, {r0, r1}
 800913a:	e896 000e 	ldmia.w	r6, {r1, r2, r3}
 800913e:	f107 0018 	add.w	r0, r7, #24
 8009142:	f001 f863 	bl	800a20c <rmw_init_options_init>
 8009146:	4604      	mov	r4, r0
 8009148:	2800      	cmp	r0, #0
 800914a:	d0b3      	beq.n	80090b4 <rcl_init_options_init+0x18>
 800914c:	9921      	ldr	r1, [sp, #132]	@ 0x84
 800914e:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 8009150:	6828      	ldr	r0, [r5, #0]
 8009152:	4798      	blx	r3
 8009154:	4620      	mov	r0, r4
 8009156:	f006 fc75 	bl	800fa44 <rcl_convert_rmw_ret_to_rcl_ret>
 800915a:	4604      	mov	r4, r0
 800915c:	e7aa      	b.n	80090b4 <rcl_init_options_init+0x18>
 800915e:	240b      	movs	r4, #11
 8009160:	e7a8      	b.n	80090b4 <rcl_init_options_init+0x18>
 8009162:	240a      	movs	r4, #10
 8009164:	e7a6      	b.n	80090b4 <rcl_init_options_init+0x18>
 8009166:	bf00      	nop

08009168 <rcl_init_options_fini>:
 8009168:	b530      	push	{r4, r5, lr}
 800916a:	b087      	sub	sp, #28
 800916c:	b1f0      	cbz	r0, 80091ac <rcl_init_options_fini+0x44>
 800916e:	6803      	ldr	r3, [r0, #0]
 8009170:	4604      	mov	r4, r0
 8009172:	b1db      	cbz	r3, 80091ac <rcl_init_options_fini+0x44>
 8009174:	469c      	mov	ip, r3
 8009176:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800917a:	f10d 0e04 	add.w	lr, sp, #4
 800917e:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8009182:	f8dc 3000 	ldr.w	r3, [ip]
 8009186:	f8ce 3000 	str.w	r3, [lr]
 800918a:	a801      	add	r0, sp, #4
 800918c:	f000 ff82 	bl	800a094 <rcutils_allocator_is_valid>
 8009190:	b160      	cbz	r0, 80091ac <rcl_init_options_fini+0x44>
 8009192:	6820      	ldr	r0, [r4, #0]
 8009194:	3018      	adds	r0, #24
 8009196:	f001 f8e9 	bl	800a36c <rmw_init_options_fini>
 800919a:	4605      	mov	r5, r0
 800919c:	b950      	cbnz	r0, 80091b4 <rcl_init_options_fini+0x4c>
 800919e:	6820      	ldr	r0, [r4, #0]
 80091a0:	9b02      	ldr	r3, [sp, #8]
 80091a2:	9905      	ldr	r1, [sp, #20]
 80091a4:	4798      	blx	r3
 80091a6:	4628      	mov	r0, r5
 80091a8:	b007      	add	sp, #28
 80091aa:	bd30      	pop	{r4, r5, pc}
 80091ac:	250b      	movs	r5, #11
 80091ae:	4628      	mov	r0, r5
 80091b0:	b007      	add	sp, #28
 80091b2:	bd30      	pop	{r4, r5, pc}
 80091b4:	f006 fc46 	bl	800fa44 <rcl_convert_rmw_ret_to_rcl_ret>
 80091b8:	4605      	mov	r5, r0
 80091ba:	e7f8      	b.n	80091ae <rcl_init_options_fini+0x46>

080091bc <rcl_init_options_copy>:
 80091bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80091c0:	b094      	sub	sp, #80	@ 0x50
 80091c2:	2800      	cmp	r0, #0
 80091c4:	d058      	beq.n	8009278 <rcl_init_options_copy+0xbc>
 80091c6:	4604      	mov	r4, r0
 80091c8:	6800      	ldr	r0, [r0, #0]
 80091ca:	2800      	cmp	r0, #0
 80091cc:	d054      	beq.n	8009278 <rcl_init_options_copy+0xbc>
 80091ce:	460e      	mov	r6, r1
 80091d0:	f000 ff60 	bl	800a094 <rcutils_allocator_is_valid>
 80091d4:	2800      	cmp	r0, #0
 80091d6:	d04f      	beq.n	8009278 <rcl_init_options_copy+0xbc>
 80091d8:	2e00      	cmp	r6, #0
 80091da:	d04d      	beq.n	8009278 <rcl_init_options_copy+0xbc>
 80091dc:	6833      	ldr	r3, [r6, #0]
 80091de:	b123      	cbz	r3, 80091ea <rcl_init_options_copy+0x2e>
 80091e0:	2464      	movs	r4, #100	@ 0x64
 80091e2:	4620      	mov	r0, r4
 80091e4:	b014      	add	sp, #80	@ 0x50
 80091e6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80091ea:	6827      	ldr	r7, [r4, #0]
 80091ec:	46bc      	mov	ip, r7
 80091ee:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 80091f2:	ad0f      	add	r5, sp, #60	@ 0x3c
 80091f4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80091f6:	f8dc 3000 	ldr.w	r3, [ip]
 80091fa:	f8d7 8000 	ldr.w	r8, [r7]
 80091fe:	602b      	str	r3, [r5, #0]
 8009200:	4619      	mov	r1, r3
 8009202:	2050      	movs	r0, #80	@ 0x50
 8009204:	47c0      	blx	r8
 8009206:	4605      	mov	r5, r0
 8009208:	6030      	str	r0, [r6, #0]
 800920a:	b3d0      	cbz	r0, 8009282 <rcl_init_options_copy+0xc6>
 800920c:	f10d 0c3c 	add.w	ip, sp, #60	@ 0x3c
 8009210:	4686      	mov	lr, r0
 8009212:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8009216:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800921a:	f8dc 3000 	ldr.w	r3, [ip]
 800921e:	f8ce 3000 	str.w	r3, [lr]
 8009222:	4668      	mov	r0, sp
 8009224:	f000 ffc8 	bl	800a1b8 <rmw_get_zero_initialized_init_options>
 8009228:	46ee      	mov	lr, sp
 800922a:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800922e:	f105 0c18 	add.w	ip, r5, #24
 8009232:	6824      	ldr	r4, [r4, #0]
 8009234:	6835      	ldr	r5, [r6, #0]
 8009236:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800923a:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800923e:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8009242:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8009246:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800924a:	e89e 0003 	ldmia.w	lr, {r0, r1}
 800924e:	e88c 0003 	stmia.w	ip, {r0, r1}
 8009252:	f104 0018 	add.w	r0, r4, #24
 8009256:	f105 0118 	add.w	r1, r5, #24
 800925a:	f001 f83f 	bl	800a2dc <rmw_init_options_copy>
 800925e:	4604      	mov	r4, r0
 8009260:	2800      	cmp	r0, #0
 8009262:	d0be      	beq.n	80091e2 <rcl_init_options_copy+0x26>
 8009264:	f000 ff24 	bl	800a0b0 <rcutils_get_error_string>
 8009268:	f000 ff3a 	bl	800a0e0 <rcutils_reset_error>
 800926c:	4630      	mov	r0, r6
 800926e:	f7ff ff7b 	bl	8009168 <rcl_init_options_fini>
 8009272:	b140      	cbz	r0, 8009286 <rcl_init_options_copy+0xca>
 8009274:	4604      	mov	r4, r0
 8009276:	e7b4      	b.n	80091e2 <rcl_init_options_copy+0x26>
 8009278:	240b      	movs	r4, #11
 800927a:	4620      	mov	r0, r4
 800927c:	b014      	add	sp, #80	@ 0x50
 800927e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009282:	240a      	movs	r4, #10
 8009284:	e7ad      	b.n	80091e2 <rcl_init_options_copy+0x26>
 8009286:	4620      	mov	r0, r4
 8009288:	b014      	add	sp, #80	@ 0x50
 800928a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800928e:	f006 bbd9 	b.w	800fa44 <rcl_convert_rmw_ret_to_rcl_ret>
 8009292:	bf00      	nop

08009294 <rcl_init_options_set_domain_id>:
 8009294:	b120      	cbz	r0, 80092a0 <rcl_init_options_set_domain_id+0xc>
 8009296:	6803      	ldr	r3, [r0, #0]
 8009298:	b113      	cbz	r3, 80092a0 <rcl_init_options_set_domain_id+0xc>
 800929a:	6259      	str	r1, [r3, #36]	@ 0x24
 800929c:	2000      	movs	r0, #0
 800929e:	4770      	bx	lr
 80092a0:	200b      	movs	r0, #11
 80092a2:	4770      	bx	lr

080092a4 <_rclc_check_for_new_data>:
 80092a4:	2800      	cmp	r0, #0
 80092a6:	d046      	beq.n	8009336 <_rclc_check_for_new_data+0x92>
 80092a8:	b510      	push	{r4, lr}
 80092aa:	7802      	ldrb	r2, [r0, #0]
 80092ac:	b084      	sub	sp, #16
 80092ae:	4603      	mov	r3, r0
 80092b0:	2a0a      	cmp	r2, #10
 80092b2:	d842      	bhi.n	800933a <_rclc_check_for_new_data+0x96>
 80092b4:	e8df f002 	tbb	[pc, r2]
 80092b8:	14181212 	.word	0x14181212
 80092bc:	06060614 	.word	0x06060614
 80092c0:	2e1a      	.short	0x2e1a
 80092c2:	16          	.byte	0x16
 80092c3:	00          	.byte	0x00
 80092c4:	6a0a      	ldr	r2, [r1, #32]
 80092c6:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 80092c8:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 80092cc:	2000      	movs	r0, #0
 80092ce:	1a12      	subs	r2, r2, r0
 80092d0:	bf18      	it	ne
 80092d2:	2201      	movne	r2, #1
 80092d4:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39
 80092d8:	b004      	add	sp, #16
 80092da:	bd10      	pop	{r4, pc}
 80092dc:	680a      	ldr	r2, [r1, #0]
 80092de:	e7f2      	b.n	80092c6 <_rclc_check_for_new_data+0x22>
 80092e0:	698a      	ldr	r2, [r1, #24]
 80092e2:	e7f0      	b.n	80092c6 <_rclc_check_for_new_data+0x22>
 80092e4:	688a      	ldr	r2, [r1, #8]
 80092e6:	e7ee      	b.n	80092c6 <_rclc_check_for_new_data+0x22>
 80092e8:	690a      	ldr	r2, [r1, #16]
 80092ea:	e7ec      	b.n	80092c6 <_rclc_check_for_new_data+0x22>
 80092ec:	685c      	ldr	r4, [r3, #4]
 80092ee:	4608      	mov	r0, r1
 80092f0:	f104 0244 	add.w	r2, r4, #68	@ 0x44
 80092f4:	f104 0143 	add.w	r1, r4, #67	@ 0x43
 80092f8:	f104 0342 	add.w	r3, r4, #66	@ 0x42
 80092fc:	e9cd 2101 	strd	r2, r1, [sp, #4]
 8009300:	9300      	str	r3, [sp, #0]
 8009302:	f104 0240 	add.w	r2, r4, #64	@ 0x40
 8009306:	f104 0341 	add.w	r3, r4, #65	@ 0x41
 800930a:	f104 0110 	add.w	r1, r4, #16
 800930e:	f008 fbb3 	bl	8011a78 <rcl_action_client_wait_set_get_entities_ready>
 8009312:	e7e1      	b.n	80092d8 <_rclc_check_for_new_data+0x34>
 8009314:	685c      	ldr	r4, [r3, #4]
 8009316:	f104 0223 	add.w	r2, r4, #35	@ 0x23
 800931a:	f104 0322 	add.w	r3, r4, #34	@ 0x22
 800931e:	e9cd 3200 	strd	r3, r2, [sp]
 8009322:	4608      	mov	r0, r1
 8009324:	f104 0321 	add.w	r3, r4, #33	@ 0x21
 8009328:	f104 0220 	add.w	r2, r4, #32
 800932c:	f104 0110 	add.w	r1, r4, #16
 8009330:	f008 fdba 	bl	8011ea8 <rcl_action_server_wait_set_get_entities_ready>
 8009334:	e7d0      	b.n	80092d8 <_rclc_check_for_new_data+0x34>
 8009336:	200b      	movs	r0, #11
 8009338:	4770      	bx	lr
 800933a:	2001      	movs	r0, #1
 800933c:	e7cc      	b.n	80092d8 <_rclc_check_for_new_data+0x34>
 800933e:	bf00      	nop

08009340 <_rclc_take_new_data>:
 8009340:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009342:	b09b      	sub	sp, #108	@ 0x6c
 8009344:	2800      	cmp	r0, #0
 8009346:	f000 8088 	beq.w	800945a <_rclc_take_new_data+0x11a>
 800934a:	7803      	ldrb	r3, [r0, #0]
 800934c:	4604      	mov	r4, r0
 800934e:	2b0a      	cmp	r3, #10
 8009350:	f200 8167 	bhi.w	8009622 <_rclc_take_new_data+0x2e2>
 8009354:	e8df f003 	tbb	[pc, r3]
 8009358:	44152d2d 	.word	0x44152d2d
 800935c:	19191944 	.word	0x19191944
 8009360:	065a      	.short	0x065a
 8009362:	15          	.byte	0x15
 8009363:	00          	.byte	0x00
 8009364:	6840      	ldr	r0, [r0, #4]
 8009366:	f890 3020 	ldrb.w	r3, [r0, #32]
 800936a:	2b00      	cmp	r3, #0
 800936c:	f040 80b2 	bne.w	80094d4 <_rclc_take_new_data+0x194>
 8009370:	f890 3022 	ldrb.w	r3, [r0, #34]	@ 0x22
 8009374:	2b00      	cmp	r3, #0
 8009376:	f040 80e4 	bne.w	8009542 <_rclc_take_new_data+0x202>
 800937a:	f890 3021 	ldrb.w	r3, [r0, #33]	@ 0x21
 800937e:	2b00      	cmp	r3, #0
 8009380:	d16f      	bne.n	8009462 <_rclc_take_new_data+0x122>
 8009382:	2500      	movs	r5, #0
 8009384:	4628      	mov	r0, r5
 8009386:	b01b      	add	sp, #108	@ 0x6c
 8009388:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800938a:	6b42      	ldr	r2, [r0, #52]	@ 0x34
 800938c:	6a0b      	ldr	r3, [r1, #32]
 800938e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009392:	2b00      	cmp	r3, #0
 8009394:	d0f5      	beq.n	8009382 <_rclc_take_new_data+0x42>
 8009396:	e9d0 0201 	ldrd	r0, r2, [r0, #4]
 800939a:	f104 0110 	add.w	r1, r4, #16
 800939e:	f007 f849 	bl	8010434 <rcl_take_request>
 80093a2:	4605      	mov	r5, r0
 80093a4:	2800      	cmp	r0, #0
 80093a6:	d0ec      	beq.n	8009382 <_rclc_take_new_data+0x42>
 80093a8:	f240 2359 	movw	r3, #601	@ 0x259
 80093ac:	4298      	cmp	r0, r3
 80093ae:	d013      	beq.n	80093d8 <_rclc_take_new_data+0x98>
 80093b0:	e029      	b.n	8009406 <_rclc_take_new_data+0xc6>
 80093b2:	6b42      	ldr	r2, [r0, #52]	@ 0x34
 80093b4:	680b      	ldr	r3, [r1, #0]
 80093b6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80093ba:	2b00      	cmp	r3, #0
 80093bc:	d0e1      	beq.n	8009382 <_rclc_take_new_data+0x42>
 80093be:	e9d0 0101 	ldrd	r0, r1, [r0, #4]
 80093c2:	2300      	movs	r3, #0
 80093c4:	aa0a      	add	r2, sp, #40	@ 0x28
 80093c6:	f007 f973 	bl	80106b0 <rcl_take>
 80093ca:	4605      	mov	r5, r0
 80093cc:	2800      	cmp	r0, #0
 80093ce:	d0d9      	beq.n	8009384 <_rclc_take_new_data+0x44>
 80093d0:	f240 1391 	movw	r3, #401	@ 0x191
 80093d4:	4298      	cmp	r0, r3
 80093d6:	d116      	bne.n	8009406 <_rclc_take_new_data+0xc6>
 80093d8:	2300      	movs	r3, #0
 80093da:	f884 3039 	strb.w	r3, [r4, #57]	@ 0x39
 80093de:	e7d1      	b.n	8009384 <_rclc_take_new_data+0x44>
 80093e0:	6b42      	ldr	r2, [r0, #52]	@ 0x34
 80093e2:	698b      	ldr	r3, [r1, #24]
 80093e4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80093e8:	2b00      	cmp	r3, #0
 80093ea:	d0ca      	beq.n	8009382 <_rclc_take_new_data+0x42>
 80093ec:	e9d0 0201 	ldrd	r0, r2, [r0, #4]
 80093f0:	f104 0110 	add.w	r1, r4, #16
 80093f4:	f006 fad4 	bl	800f9a0 <rcl_take_response>
 80093f8:	4605      	mov	r5, r0
 80093fa:	2800      	cmp	r0, #0
 80093fc:	d0c1      	beq.n	8009382 <_rclc_take_new_data+0x42>
 80093fe:	f240 13f5 	movw	r3, #501	@ 0x1f5
 8009402:	4298      	cmp	r0, r3
 8009404:	d0be      	beq.n	8009384 <_rclc_take_new_data+0x44>
 8009406:	f000 fe6b 	bl	800a0e0 <rcutils_reset_error>
 800940a:	e7bb      	b.n	8009384 <_rclc_take_new_data+0x44>
 800940c:	6840      	ldr	r0, [r0, #4]
 800940e:	f890 3042 	ldrb.w	r3, [r0, #66]	@ 0x42
 8009412:	2b00      	cmp	r3, #0
 8009414:	d17d      	bne.n	8009512 <_rclc_take_new_data+0x1d2>
 8009416:	69c3      	ldr	r3, [r0, #28]
 8009418:	b11b      	cbz	r3, 8009422 <_rclc_take_new_data+0xe2>
 800941a:	f890 3040 	ldrb.w	r3, [r0, #64]	@ 0x40
 800941e:	2b00      	cmp	r3, #0
 8009420:	d144      	bne.n	80094ac <_rclc_take_new_data+0x16c>
 8009422:	f890 3044 	ldrb.w	r3, [r0, #68]	@ 0x44
 8009426:	2b00      	cmp	r3, #0
 8009428:	f040 80ac 	bne.w	8009584 <_rclc_take_new_data+0x244>
 800942c:	f890 3043 	ldrb.w	r3, [r0, #67]	@ 0x43
 8009430:	2b00      	cmp	r3, #0
 8009432:	d0a6      	beq.n	8009382 <_rclc_take_new_data+0x42>
 8009434:	6ac2      	ldr	r2, [r0, #44]	@ 0x2c
 8009436:	a90a      	add	r1, sp, #40	@ 0x28
 8009438:	3010      	adds	r0, #16
 800943a:	f008 f9f5 	bl	8011828 <rcl_action_take_result_response>
 800943e:	4605      	mov	r5, r0
 8009440:	2800      	cmp	r0, #0
 8009442:	d1e0      	bne.n	8009406 <_rclc_take_new_data+0xc6>
 8009444:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8009448:	6860      	ldr	r0, [r4, #4]
 800944a:	f008 fe51 	bl	80120f0 <rclc_action_find_handle_by_result_request_sequence_number>
 800944e:	2800      	cmp	r0, #0
 8009450:	d098      	beq.n	8009384 <_rclc_take_new_data+0x44>
 8009452:	2301      	movs	r3, #1
 8009454:	f880 3023 	strb.w	r3, [r0, #35]	@ 0x23
 8009458:	e794      	b.n	8009384 <_rclc_take_new_data+0x44>
 800945a:	250b      	movs	r5, #11
 800945c:	4628      	mov	r0, r5
 800945e:	b01b      	add	sp, #108	@ 0x6c
 8009460:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009462:	ae04      	add	r6, sp, #16
 8009464:	aa0a      	add	r2, sp, #40	@ 0x28
 8009466:	3010      	adds	r0, #16
 8009468:	4631      	mov	r1, r6
 800946a:	f008 fc51 	bl	8011d10 <rcl_action_take_cancel_request>
 800946e:	4605      	mov	r5, r0
 8009470:	2800      	cmp	r0, #0
 8009472:	d1c8      	bne.n	8009406 <_rclc_take_new_data+0xc6>
 8009474:	6860      	ldr	r0, [r4, #4]
 8009476:	a90a      	add	r1, sp, #40	@ 0x28
 8009478:	f008 fdf8 	bl	801206c <rclc_action_find_goal_handle_by_uuid>
 800947c:	4607      	mov	r7, r0
 800947e:	2800      	cmp	r0, #0
 8009480:	f000 80bb 	beq.w	80095fa <_rclc_take_new_data+0x2ba>
 8009484:	f990 0008 	ldrsb.w	r0, [r0, #8]
 8009488:	2101      	movs	r1, #1
 800948a:	f008 fd79 	bl	8011f80 <rcl_action_transition_goal_state>
 800948e:	2803      	cmp	r0, #3
 8009490:	4684      	mov	ip, r0
 8009492:	f040 80a7 	bne.w	80095e4 <_rclc_take_new_data+0x2a4>
 8009496:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8009498:	f107 0458 	add.w	r4, r7, #88	@ 0x58
 800949c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800949e:	e896 0003 	ldmia.w	r6, {r0, r1}
 80094a2:	e884 0003 	stmia.w	r4, {r0, r1}
 80094a6:	f887 c008 	strb.w	ip, [r7, #8]
 80094aa:	e76b      	b.n	8009384 <_rclc_take_new_data+0x44>
 80094ac:	6a81      	ldr	r1, [r0, #40]	@ 0x28
 80094ae:	3010      	adds	r0, #16
 80094b0:	f008 fa3a 	bl	8011928 <rcl_action_take_feedback>
 80094b4:	4605      	mov	r5, r0
 80094b6:	2800      	cmp	r0, #0
 80094b8:	d1a5      	bne.n	8009406 <_rclc_take_new_data+0xc6>
 80094ba:	6860      	ldr	r0, [r4, #4]
 80094bc:	6a81      	ldr	r1, [r0, #40]	@ 0x28
 80094be:	f008 fdd5 	bl	801206c <rclc_action_find_goal_handle_by_uuid>
 80094c2:	4603      	mov	r3, r0
 80094c4:	2800      	cmp	r0, #0
 80094c6:	f000 80a3 	beq.w	8009610 <_rclc_take_new_data+0x2d0>
 80094ca:	2201      	movs	r2, #1
 80094cc:	6860      	ldr	r0, [r4, #4]
 80094ce:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22
 80094d2:	e7a6      	b.n	8009422 <_rclc_take_new_data+0xe2>
 80094d4:	f008 fda4 	bl	8012020 <rclc_action_take_goal_handle>
 80094d8:	4606      	mov	r6, r0
 80094da:	6860      	ldr	r0, [r4, #4]
 80094dc:	2e00      	cmp	r6, #0
 80094de:	f43f af47 	beq.w	8009370 <_rclc_take_new_data+0x30>
 80094e2:	6070      	str	r0, [r6, #4]
 80094e4:	69f2      	ldr	r2, [r6, #28]
 80094e6:	f106 0128 	add.w	r1, r6, #40	@ 0x28
 80094ea:	3010      	adds	r0, #16
 80094ec:	f008 fb58 	bl	8011ba0 <rcl_action_take_goal_request>
 80094f0:	4605      	mov	r5, r0
 80094f2:	2800      	cmp	r0, #0
 80094f4:	f040 808e 	bne.w	8009614 <_rclc_take_new_data+0x2d4>
 80094f8:	69f7      	ldr	r7, [r6, #28]
 80094fa:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 80094fc:	7235      	strb	r5, [r6, #8]
 80094fe:	f8c6 0009 	str.w	r0, [r6, #9]
 8009502:	f8c6 100d 	str.w	r1, [r6, #13]
 8009506:	6860      	ldr	r0, [r4, #4]
 8009508:	f8c6 2011 	str.w	r2, [r6, #17]
 800950c:	f8c6 3015 	str.w	r3, [r6, #21]
 8009510:	e72e      	b.n	8009370 <_rclc_take_new_data+0x30>
 8009512:	aa04      	add	r2, sp, #16
 8009514:	a90a      	add	r1, sp, #40	@ 0x28
 8009516:	3010      	adds	r0, #16
 8009518:	f008 f90e 	bl	8011738 <rcl_action_take_goal_response>
 800951c:	4605      	mov	r5, r0
 800951e:	2800      	cmp	r0, #0
 8009520:	f47f af71 	bne.w	8009406 <_rclc_take_new_data+0xc6>
 8009524:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8009528:	6860      	ldr	r0, [r4, #4]
 800952a:	f008 fdcf 	bl	80120cc <rclc_action_find_handle_by_goal_request_sequence_number>
 800952e:	b130      	cbz	r0, 800953e <_rclc_take_new_data+0x1fe>
 8009530:	f89d 3010 	ldrb.w	r3, [sp, #16]
 8009534:	f880 3021 	strb.w	r3, [r0, #33]	@ 0x21
 8009538:	2201      	movs	r2, #1
 800953a:	f880 2020 	strb.w	r2, [r0, #32]
 800953e:	6860      	ldr	r0, [r4, #4]
 8009540:	e769      	b.n	8009416 <_rclc_take_new_data+0xd6>
 8009542:	aa04      	add	r2, sp, #16
 8009544:	3010      	adds	r0, #16
 8009546:	a90a      	add	r1, sp, #40	@ 0x28
 8009548:	f008 fba2 	bl	8011c90 <rcl_action_take_result_request>
 800954c:	4605      	mov	r5, r0
 800954e:	2800      	cmp	r0, #0
 8009550:	f47f af59 	bne.w	8009406 <_rclc_take_new_data+0xc6>
 8009554:	6860      	ldr	r0, [r4, #4]
 8009556:	a904      	add	r1, sp, #16
 8009558:	f008 fd88 	bl	801206c <rclc_action_find_goal_handle_by_uuid>
 800955c:	4607      	mov	r7, r0
 800955e:	b160      	cbz	r0, 800957a <_rclc_take_new_data+0x23a>
 8009560:	ad0a      	add	r5, sp, #40	@ 0x28
 8009562:	f100 0640 	add.w	r6, r0, #64	@ 0x40
 8009566:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8009568:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 800956a:	e895 0003 	ldmia.w	r5, {r0, r1}
 800956e:	f04f 0c02 	mov.w	ip, #2
 8009572:	e886 0003 	stmia.w	r6, {r0, r1}
 8009576:	f887 c008 	strb.w	ip, [r7, #8]
 800957a:	6860      	ldr	r0, [r4, #4]
 800957c:	2300      	movs	r3, #0
 800957e:	f880 3022 	strb.w	r3, [r0, #34]	@ 0x22
 8009582:	e6fa      	b.n	800937a <_rclc_take_new_data+0x3a>
 8009584:	f100 0230 	add.w	r2, r0, #48	@ 0x30
 8009588:	a90a      	add	r1, sp, #40	@ 0x28
 800958a:	3010      	adds	r0, #16
 800958c:	f008 f98c 	bl	80118a8 <rcl_action_take_cancel_response>
 8009590:	4605      	mov	r5, r0
 8009592:	2800      	cmp	r0, #0
 8009594:	f47f af37 	bne.w	8009406 <_rclc_take_new_data+0xc6>
 8009598:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800959c:	6860      	ldr	r0, [r4, #4]
 800959e:	f008 fdb9 	bl	8012114 <rclc_action_find_handle_by_cancel_request_sequence_number>
 80095a2:	4606      	mov	r6, r0
 80095a4:	6860      	ldr	r0, [r4, #4]
 80095a6:	2e00      	cmp	r6, #0
 80095a8:	f43f af40 	beq.w	800942c <_rclc_take_new_data+0xec>
 80095ac:	6b83      	ldr	r3, [r0, #56]	@ 0x38
 80095ae:	2701      	movs	r7, #1
 80095b0:	84b7      	strh	r7, [r6, #36]	@ 0x24
 80095b2:	2b00      	cmp	r3, #0
 80095b4:	f43f af3a 	beq.w	800942c <_rclc_take_new_data+0xec>
 80095b8:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 80095ba:	eb05 0145 	add.w	r1, r5, r5, lsl #1
 80095be:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
 80095c2:	f008 fd53 	bl	801206c <rclc_action_find_goal_handle_by_uuid>
 80095c6:	b138      	cbz	r0, 80095d8 <_rclc_take_new_data+0x298>
 80095c8:	6860      	ldr	r0, [r4, #4]
 80095ca:	6b83      	ldr	r3, [r0, #56]	@ 0x38
 80095cc:	f886 7025 	strb.w	r7, [r6, #37]	@ 0x25
 80095d0:	3501      	adds	r5, #1
 80095d2:	42ab      	cmp	r3, r5
 80095d4:	d8f0      	bhi.n	80095b8 <_rclc_take_new_data+0x278>
 80095d6:	e729      	b.n	800942c <_rclc_take_new_data+0xec>
 80095d8:	6860      	ldr	r0, [r4, #4]
 80095da:	6b83      	ldr	r3, [r0, #56]	@ 0x38
 80095dc:	3501      	adds	r5, #1
 80095de:	42ab      	cmp	r3, r5
 80095e0:	d8ea      	bhi.n	80095b8 <_rclc_take_new_data+0x278>
 80095e2:	e723      	b.n	800942c <_rclc_take_new_data+0xec>
 80095e4:	ab06      	add	r3, sp, #24
 80095e6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80095e8:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 80095ec:	2103      	movs	r1, #3
 80095ee:	e896 000c 	ldmia.w	r6, {r2, r3}
 80095f2:	6860      	ldr	r0, [r4, #4]
 80095f4:	f008 fe04 	bl	8012200 <rclc_action_server_goal_cancel_reject>
 80095f8:	e6c4      	b.n	8009384 <_rclc_take_new_data+0x44>
 80095fa:	ab06      	add	r3, sp, #24
 80095fc:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80095fe:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 8009602:	2102      	movs	r1, #2
 8009604:	e896 000c 	ldmia.w	r6, {r2, r3}
 8009608:	6860      	ldr	r0, [r4, #4]
 800960a:	f008 fdf9 	bl	8012200 <rclc_action_server_goal_cancel_reject>
 800960e:	e6b9      	b.n	8009384 <_rclc_take_new_data+0x44>
 8009610:	6860      	ldr	r0, [r4, #4]
 8009612:	e706      	b.n	8009422 <_rclc_take_new_data+0xe2>
 8009614:	6860      	ldr	r0, [r4, #4]
 8009616:	4631      	mov	r1, r6
 8009618:	f008 fd12 	bl	8012040 <rclc_action_remove_used_goal_handle>
 800961c:	f000 fd60 	bl	800a0e0 <rcutils_reset_error>
 8009620:	e6b0      	b.n	8009384 <_rclc_take_new_data+0x44>
 8009622:	2501      	movs	r5, #1
 8009624:	e6ae      	b.n	8009384 <_rclc_take_new_data+0x44>
 8009626:	bf00      	nop

08009628 <_rclc_execute.part.0>:
 8009628:	b5f0      	push	{r4, r5, r6, r7, lr}
 800962a:	7803      	ldrb	r3, [r0, #0]
 800962c:	b087      	sub	sp, #28
 800962e:	4604      	mov	r4, r0
 8009630:	2b0a      	cmp	r3, #10
 8009632:	f200 8136 	bhi.w	80098a2 <_rclc_execute.part.0+0x27a>
 8009636:	e8df f003 	tbb	[pc, r3]
 800963a:	435e      	.short	0x435e
 800963c:	06a1664f 	.word	0x06a1664f
 8009640:	6c1e0606 	.word	0x6c1e0606
 8009644:	59          	.byte	0x59
 8009645:	00          	.byte	0x00
 8009646:	2b06      	cmp	r3, #6
 8009648:	f000 8122 	beq.w	8009890 <_rclc_execute.part.0+0x268>
 800964c:	2b07      	cmp	r3, #7
 800964e:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 8009650:	f040 8118 	bne.w	8009884 <_rclc_execute.part.0+0x25c>
 8009654:	e9d0 120a 	ldrd	r1, r2, [r0, #40]	@ 0x28
 8009658:	6880      	ldr	r0, [r0, #8]
 800965a:	4798      	blx	r3
 800965c:	f104 0110 	add.w	r1, r4, #16
 8009660:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
 8009662:	6860      	ldr	r0, [r4, #4]
 8009664:	f006 ff26 	bl	80104b4 <rcl_send_response>
 8009668:	2800      	cmp	r0, #0
 800966a:	d033      	beq.n	80096d4 <_rclc_execute.part.0+0xac>
 800966c:	9005      	str	r0, [sp, #20]
 800966e:	f000 fd37 	bl	800a0e0 <rcutils_reset_error>
 8009672:	9805      	ldr	r0, [sp, #20]
 8009674:	e02e      	b.n	80096d4 <_rclc_execute.part.0+0xac>
 8009676:	6840      	ldr	r0, [r0, #4]
 8009678:	f890 3042 	ldrb.w	r3, [r0, #66]	@ 0x42
 800967c:	2b00      	cmp	r3, #0
 800967e:	f000 8086 	beq.w	800978e <_rclc_execute.part.0+0x166>
 8009682:	2600      	movs	r6, #0
 8009684:	2701      	movs	r7, #1
 8009686:	e004      	b.n	8009692 <_rclc_execute.part.0+0x6a>
 8009688:	f008 fca4 	bl	8011fd4 <rclc_action_send_result_request>
 800968c:	b998      	cbnz	r0, 80096b6 <_rclc_execute.part.0+0x8e>
 800968e:	722f      	strb	r7, [r5, #8]
 8009690:	6860      	ldr	r0, [r4, #4]
 8009692:	f008 fd51 	bl	8012138 <rclc_action_find_first_handle_with_goal_response>
 8009696:	4605      	mov	r5, r0
 8009698:	2800      	cmp	r0, #0
 800969a:	d077      	beq.n	800978c <_rclc_execute.part.0+0x164>
 800969c:	6863      	ldr	r3, [r4, #4]
 800969e:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 80096a0:	699b      	ldr	r3, [r3, #24]
 80096a2:	f895 1021 	ldrb.w	r1, [r5, #33]	@ 0x21
 80096a6:	f885 6020 	strb.w	r6, [r5, #32]
 80096aa:	4798      	blx	r3
 80096ac:	f895 3021 	ldrb.w	r3, [r5, #33]	@ 0x21
 80096b0:	4628      	mov	r0, r5
 80096b2:	2b00      	cmp	r3, #0
 80096b4:	d1e8      	bne.n	8009688 <_rclc_execute.part.0+0x60>
 80096b6:	6860      	ldr	r0, [r4, #4]
 80096b8:	4629      	mov	r1, r5
 80096ba:	f008 fcc1 	bl	8012040 <rclc_action_remove_used_goal_handle>
 80096be:	e7e7      	b.n	8009690 <_rclc_execute.part.0+0x68>
 80096c0:	f890 5039 	ldrb.w	r5, [r0, #57]	@ 0x39
 80096c4:	e9d0 130b 	ldrd	r1, r3, [r0, #44]	@ 0x2c
 80096c8:	2d00      	cmp	r5, #0
 80096ca:	f000 80c9 	beq.w	8009860 <_rclc_execute.part.0+0x238>
 80096ce:	6880      	ldr	r0, [r0, #8]
 80096d0:	4798      	blx	r3
 80096d2:	2000      	movs	r0, #0
 80096d4:	b007      	add	sp, #28
 80096d6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80096d8:	6840      	ldr	r0, [r0, #4]
 80096da:	f007 f8ed 	bl	80108b8 <rcl_timer_call>
 80096de:	f240 3321 	movw	r3, #801	@ 0x321
 80096e2:	4298      	cmp	r0, r3
 80096e4:	d004      	beq.n	80096f0 <_rclc_execute.part.0+0xc8>
 80096e6:	2800      	cmp	r0, #0
 80096e8:	d0f4      	beq.n	80096d4 <_rclc_execute.part.0+0xac>
 80096ea:	e7bf      	b.n	800966c <_rclc_execute.part.0+0x44>
 80096ec:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 80096ee:	4798      	blx	r3
 80096f0:	2000      	movs	r0, #0
 80096f2:	b007      	add	sp, #28
 80096f4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80096f6:	f890 5039 	ldrb.w	r5, [r0, #57]	@ 0x39
 80096fa:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 80096fc:	b925      	cbnz	r5, 8009708 <_rclc_execute.part.0+0xe0>
 80096fe:	4628      	mov	r0, r5
 8009700:	4798      	blx	r3
 8009702:	4628      	mov	r0, r5
 8009704:	e7e6      	b.n	80096d4 <_rclc_execute.part.0+0xac>
 8009706:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 8009708:	68a0      	ldr	r0, [r4, #8]
 800970a:	4798      	blx	r3
 800970c:	2000      	movs	r0, #0
 800970e:	b007      	add	sp, #28
 8009710:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009712:	6840      	ldr	r0, [r0, #4]
 8009714:	f890 3024 	ldrb.w	r3, [r0, #36]	@ 0x24
 8009718:	bb3b      	cbnz	r3, 800976a <_rclc_execute.part.0+0x142>
 800971a:	f890 3020 	ldrb.w	r3, [r0, #32]
 800971e:	2b00      	cmp	r3, #0
 8009720:	d07b      	beq.n	800981a <_rclc_execute.part.0+0x1f2>
 8009722:	f640 0634 	movw	r6, #2100	@ 0x834
 8009726:	2701      	movs	r7, #1
 8009728:	e007      	b.n	800973a <_rclc_execute.part.0+0x112>
 800972a:	4628      	mov	r0, r5
 800972c:	f008 fd1c 	bl	8012168 <rclc_action_server_response_goal_request>
 8009730:	6860      	ldr	r0, [r4, #4]
 8009732:	4629      	mov	r1, r5
 8009734:	f008 fc84 	bl	8012040 <rclc_action_remove_used_goal_handle>
 8009738:	6860      	ldr	r0, [r4, #4]
 800973a:	2100      	movs	r1, #0
 800973c:	f008 fcae 	bl	801209c <rclc_action_find_first_handle_by_status>
 8009740:	4605      	mov	r5, r0
 8009742:	2800      	cmp	r0, #0
 8009744:	d066      	beq.n	8009814 <_rclc_execute.part.0+0x1ec>
 8009746:	6863      	ldr	r3, [r4, #4]
 8009748:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 800974a:	699b      	ldr	r3, [r3, #24]
 800974c:	4798      	blx	r3
 800974e:	42b0      	cmp	r0, r6
 8009750:	f04f 0100 	mov.w	r1, #0
 8009754:	d1e9      	bne.n	800972a <_rclc_execute.part.0+0x102>
 8009756:	2101      	movs	r1, #1
 8009758:	4628      	mov	r0, r5
 800975a:	f008 fd05 	bl	8012168 <rclc_action_server_response_goal_request>
 800975e:	722f      	strb	r7, [r5, #8]
 8009760:	e7ea      	b.n	8009738 <_rclc_execute.part.0+0x110>
 8009762:	6848      	ldr	r0, [r1, #4]
 8009764:	f008 fc6c 	bl	8012040 <rclc_action_remove_used_goal_handle>
 8009768:	6860      	ldr	r0, [r4, #4]
 800976a:	f008 fca3 	bl	80120b4 <rclc_action_find_first_terminated_handle>
 800976e:	4601      	mov	r1, r0
 8009770:	2800      	cmp	r0, #0
 8009772:	d1f6      	bne.n	8009762 <_rclc_execute.part.0+0x13a>
 8009774:	6860      	ldr	r0, [r4, #4]
 8009776:	f880 1024 	strb.w	r1, [r0, #36]	@ 0x24
 800977a:	e7ce      	b.n	800971a <_rclc_execute.part.0+0xf2>
 800977c:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 800977e:	6880      	ldr	r0, [r0, #8]
 8009780:	f104 0110 	add.w	r1, r4, #16
 8009784:	4798      	blx	r3
 8009786:	2000      	movs	r0, #0
 8009788:	b007      	add	sp, #28
 800978a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800978c:	6860      	ldr	r0, [r4, #4]
 800978e:	f890 3040 	ldrb.w	r3, [r0, #64]	@ 0x40
 8009792:	b18b      	cbz	r3, 80097b8 <_rclc_execute.part.0+0x190>
 8009794:	68c5      	ldr	r5, [r0, #12]
 8009796:	b32d      	cbz	r5, 80097e4 <_rclc_execute.part.0+0x1bc>
 8009798:	2600      	movs	r6, #0
 800979a:	f895 3022 	ldrb.w	r3, [r5, #34]	@ 0x22
 800979e:	b143      	cbz	r3, 80097b2 <_rclc_execute.part.0+0x18a>
 80097a0:	69c3      	ldr	r3, [r0, #28]
 80097a2:	f885 6022 	strb.w	r6, [r5, #34]	@ 0x22
 80097a6:	b123      	cbz	r3, 80097b2 <_rclc_execute.part.0+0x18a>
 80097a8:	6a81      	ldr	r1, [r0, #40]	@ 0x28
 80097aa:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 80097ac:	4628      	mov	r0, r5
 80097ae:	4798      	blx	r3
 80097b0:	6860      	ldr	r0, [r4, #4]
 80097b2:	682d      	ldr	r5, [r5, #0]
 80097b4:	2d00      	cmp	r5, #0
 80097b6:	d1f0      	bne.n	800979a <_rclc_execute.part.0+0x172>
 80097b8:	f890 3044 	ldrb.w	r3, [r0, #68]	@ 0x44
 80097bc:	b193      	cbz	r3, 80097e4 <_rclc_execute.part.0+0x1bc>
 80097be:	68c5      	ldr	r5, [r0, #12]
 80097c0:	b185      	cbz	r5, 80097e4 <_rclc_execute.part.0+0x1bc>
 80097c2:	2600      	movs	r6, #0
 80097c4:	f895 3024 	ldrb.w	r3, [r5, #36]	@ 0x24
 80097c8:	b14b      	cbz	r3, 80097de <_rclc_execute.part.0+0x1b6>
 80097ca:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 80097cc:	f885 6024 	strb.w	r6, [r5, #36]	@ 0x24
 80097d0:	b12b      	cbz	r3, 80097de <_rclc_execute.part.0+0x1b6>
 80097d2:	4628      	mov	r0, r5
 80097d4:	f895 1025 	ldrb.w	r1, [r5, #37]	@ 0x25
 80097d8:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 80097da:	4798      	blx	r3
 80097dc:	6860      	ldr	r0, [r4, #4]
 80097de:	682d      	ldr	r5, [r5, #0]
 80097e0:	2d00      	cmp	r5, #0
 80097e2:	d1ef      	bne.n	80097c4 <_rclc_execute.part.0+0x19c>
 80097e4:	f890 3043 	ldrb.w	r3, [r0, #67]	@ 0x43
 80097e8:	2b00      	cmp	r3, #0
 80097ea:	d081      	beq.n	80096f0 <_rclc_execute.part.0+0xc8>
 80097ec:	2700      	movs	r7, #0
 80097ee:	e00b      	b.n	8009808 <_rclc_execute.part.0+0x1e0>
 80097f0:	6863      	ldr	r3, [r4, #4]
 80097f2:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 80097f4:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80097f6:	6a1e      	ldr	r6, [r3, #32]
 80097f8:	f885 7023 	strb.w	r7, [r5, #35]	@ 0x23
 80097fc:	47b0      	blx	r6
 80097fe:	6860      	ldr	r0, [r4, #4]
 8009800:	4629      	mov	r1, r5
 8009802:	f008 fc1d 	bl	8012040 <rclc_action_remove_used_goal_handle>
 8009806:	6860      	ldr	r0, [r4, #4]
 8009808:	f008 fca2 	bl	8012150 <rclc_action_find_first_handle_with_result_response>
 800980c:	4605      	mov	r5, r0
 800980e:	2800      	cmp	r0, #0
 8009810:	d1ee      	bne.n	80097f0 <_rclc_execute.part.0+0x1c8>
 8009812:	e76d      	b.n	80096f0 <_rclc_execute.part.0+0xc8>
 8009814:	6860      	ldr	r0, [r4, #4]
 8009816:	f880 5020 	strb.w	r5, [r0, #32]
 800981a:	f890 3021 	ldrb.w	r3, [r0, #33]	@ 0x21
 800981e:	2b00      	cmp	r3, #0
 8009820:	f43f af66 	beq.w	80096f0 <_rclc_execute.part.0+0xc8>
 8009824:	68c5      	ldr	r5, [r0, #12]
 8009826:	b1b5      	cbz	r5, 8009856 <_rclc_execute.part.0+0x22e>
 8009828:	2602      	movs	r6, #2
 800982a:	e001      	b.n	8009830 <_rclc_execute.part.0+0x208>
 800982c:	682d      	ldr	r5, [r5, #0]
 800982e:	b195      	cbz	r5, 8009856 <_rclc_execute.part.0+0x22e>
 8009830:	f995 3008 	ldrsb.w	r3, [r5, #8]
 8009834:	2b03      	cmp	r3, #3
 8009836:	d1f9      	bne.n	800982c <_rclc_execute.part.0+0x204>
 8009838:	69c3      	ldr	r3, [r0, #28]
 800983a:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 800983c:	4628      	mov	r0, r5
 800983e:	4798      	blx	r3
 8009840:	4603      	mov	r3, r0
 8009842:	f105 0260 	add.w	r2, r5, #96	@ 0x60
 8009846:	4628      	mov	r0, r5
 8009848:	f885 3025 	strb.w	r3, [r5, #37]	@ 0x25
 800984c:	b163      	cbz	r3, 8009868 <_rclc_execute.part.0+0x240>
 800984e:	f008 fcab 	bl	80121a8 <rclc_action_server_goal_cancel_accept>
 8009852:	6860      	ldr	r0, [r4, #4]
 8009854:	e7ea      	b.n	800982c <_rclc_execute.part.0+0x204>
 8009856:	2300      	movs	r3, #0
 8009858:	f880 3021 	strb.w	r3, [r0, #33]	@ 0x21
 800985c:	4618      	mov	r0, r3
 800985e:	e739      	b.n	80096d4 <_rclc_execute.part.0+0xac>
 8009860:	4628      	mov	r0, r5
 8009862:	4798      	blx	r3
 8009864:	4628      	mov	r0, r5
 8009866:	e735      	b.n	80096d4 <_rclc_execute.part.0+0xac>
 8009868:	ca0f      	ldmia	r2, {r0, r1, r2, r3}
 800986a:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 800986e:	f105 0758 	add.w	r7, r5, #88	@ 0x58
 8009872:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009876:	6860      	ldr	r0, [r4, #4]
 8009878:	2101      	movs	r1, #1
 800987a:	f008 fcc1 	bl	8012200 <rclc_action_server_goal_cancel_reject>
 800987e:	722e      	strb	r6, [r5, #8]
 8009880:	6860      	ldr	r0, [r4, #4]
 8009882:	e7d3      	b.n	800982c <_rclc_execute.part.0+0x204>
 8009884:	6a81      	ldr	r1, [r0, #40]	@ 0x28
 8009886:	6880      	ldr	r0, [r0, #8]
 8009888:	4798      	blx	r3
 800988a:	f104 0110 	add.w	r1, r4, #16
 800988e:	e6e7      	b.n	8009660 <_rclc_execute.part.0+0x38>
 8009890:	f100 0110 	add.w	r1, r0, #16
 8009894:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 8009896:	6a82      	ldr	r2, [r0, #40]	@ 0x28
 8009898:	6880      	ldr	r0, [r0, #8]
 800989a:	9105      	str	r1, [sp, #20]
 800989c:	4798      	blx	r3
 800989e:	9905      	ldr	r1, [sp, #20]
 80098a0:	e6de      	b.n	8009660 <_rclc_execute.part.0+0x38>
 80098a2:	2001      	movs	r0, #1
 80098a4:	e716      	b.n	80096d4 <_rclc_execute.part.0+0xac>
 80098a6:	bf00      	nop

080098a8 <rclc_executor_trigger_any>:
 80098a8:	2800      	cmp	r0, #0
 80098aa:	d03f      	beq.n	800992c <rclc_executor_trigger_any+0x84>
 80098ac:	2900      	cmp	r1, #0
 80098ae:	d03e      	beq.n	800992e <rclc_executor_trigger_any+0x86>
 80098b0:	4603      	mov	r3, r0
 80098b2:	f890 0038 	ldrb.w	r0, [r0, #56]	@ 0x38
 80098b6:	2200      	movs	r2, #0
 80098b8:	2800      	cmp	r0, #0
 80098ba:	d037      	beq.n	800992c <rclc_executor_trigger_any+0x84>
 80098bc:	b430      	push	{r4, r5}
 80098be:	f893 c000 	ldrb.w	ip, [r3]
 80098c2:	f1bc 0f08 	cmp.w	ip, #8
 80098c6:	d11e      	bne.n	8009906 <rclc_executor_trigger_any+0x5e>
 80098c8:	685c      	ldr	r4, [r3, #4]
 80098ca:	6c25      	ldr	r5, [r4, #64]	@ 0x40
 80098cc:	f035 457f 	bics.w	r5, r5, #4278190080	@ 0xff000000
 80098d0:	d105      	bne.n	80098de <rclc_executor_trigger_any+0x36>
 80098d2:	f894 0044 	ldrb.w	r0, [r4, #68]	@ 0x44
 80098d6:	b910      	cbnz	r0, 80098de <rclc_executor_trigger_any+0x36>
 80098d8:	f894 0043 	ldrb.w	r0, [r4, #67]	@ 0x43
 80098dc:	b128      	cbz	r0, 80098ea <rclc_executor_trigger_any+0x42>
 80098de:	bc30      	pop	{r4, r5}
 80098e0:	4770      	bx	lr
 80098e2:	f893 0039 	ldrb.w	r0, [r3, #57]	@ 0x39
 80098e6:	2800      	cmp	r0, #0
 80098e8:	d1f9      	bne.n	80098de <rclc_executor_trigger_any+0x36>
 80098ea:	3201      	adds	r2, #1
 80098ec:	4291      	cmp	r1, r2
 80098ee:	f103 0340 	add.w	r3, r3, #64	@ 0x40
 80098f2:	d018      	beq.n	8009926 <rclc_executor_trigger_any+0x7e>
 80098f4:	f893 0038 	ldrb.w	r0, [r3, #56]	@ 0x38
 80098f8:	2800      	cmp	r0, #0
 80098fa:	d0f0      	beq.n	80098de <rclc_executor_trigger_any+0x36>
 80098fc:	f893 c000 	ldrb.w	ip, [r3]
 8009900:	f1bc 0f08 	cmp.w	ip, #8
 8009904:	d0e0      	beq.n	80098c8 <rclc_executor_trigger_any+0x20>
 8009906:	f1bc 0f09 	cmp.w	ip, #9
 800990a:	d1ea      	bne.n	80098e2 <rclc_executor_trigger_any+0x3a>
 800990c:	685c      	ldr	r4, [r3, #4]
 800990e:	6a25      	ldr	r5, [r4, #32]
 8009910:	2d00      	cmp	r5, #0
 8009912:	d1e4      	bne.n	80098de <rclc_executor_trigger_any+0x36>
 8009914:	f894 0024 	ldrb.w	r0, [r4, #36]	@ 0x24
 8009918:	2800      	cmp	r0, #0
 800991a:	d1e0      	bne.n	80098de <rclc_executor_trigger_any+0x36>
 800991c:	3201      	adds	r2, #1
 800991e:	4291      	cmp	r1, r2
 8009920:	f103 0340 	add.w	r3, r3, #64	@ 0x40
 8009924:	d1e6      	bne.n	80098f4 <rclc_executor_trigger_any+0x4c>
 8009926:	2000      	movs	r0, #0
 8009928:	bc30      	pop	{r4, r5}
 800992a:	4770      	bx	lr
 800992c:	4770      	bx	lr
 800992e:	4608      	mov	r0, r1
 8009930:	4770      	bx	lr
 8009932:	bf00      	nop
 8009934:	0000      	movs	r0, r0
	...

08009938 <rclc_executor_init>:
 8009938:	2800      	cmp	r0, #0
 800993a:	d05f      	beq.n	80099fc <rclc_executor_init+0xc4>
 800993c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009940:	460c      	mov	r4, r1
 8009942:	b0b0      	sub	sp, #192	@ 0xc0
 8009944:	2900      	cmp	r1, #0
 8009946:	d051      	beq.n	80099ec <rclc_executor_init+0xb4>
 8009948:	4605      	mov	r5, r0
 800994a:	4618      	mov	r0, r3
 800994c:	4616      	mov	r6, r2
 800994e:	461f      	mov	r7, r3
 8009950:	f000 fba0 	bl	800a094 <rcutils_allocator_is_valid>
 8009954:	2800      	cmp	r0, #0
 8009956:	d049      	beq.n	80099ec <rclc_executor_init+0xb4>
 8009958:	2e00      	cmp	r6, #0
 800995a:	d047      	beq.n	80099ec <rclc_executor_init+0xb4>
 800995c:	492c      	ldr	r1, [pc, #176]	@ (8009a10 <rclc_executor_init+0xd8>)
 800995e:	2288      	movs	r2, #136	@ 0x88
 8009960:	a80e      	add	r0, sp, #56	@ 0x38
 8009962:	f00b fef6 	bl	8015752 <memcpy>
 8009966:	a90e      	add	r1, sp, #56	@ 0x38
 8009968:	2288      	movs	r2, #136	@ 0x88
 800996a:	4628      	mov	r0, r5
 800996c:	f00b fef1 	bl	8015752 <memcpy>
 8009970:	602c      	str	r4, [r5, #0]
 8009972:	4668      	mov	r0, sp
 8009974:	60ae      	str	r6, [r5, #8]
 8009976:	466c      	mov	r4, sp
 8009978:	f007 f910 	bl	8010b9c <rcl_get_zero_initialized_wait_set>
 800997c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800997e:	f105 0c14 	add.w	ip, r5, #20
 8009982:	f8d7 8000 	ldr.w	r8, [r7]
 8009986:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800998a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800998c:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8009990:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8009992:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8009996:	ed9f 7b1c 	vldr	d7, [pc, #112]	@ 8009a08 <rclc_executor_init+0xd0>
 800999a:	6823      	ldr	r3, [r4, #0]
 800999c:	f8cc 3000 	str.w	r3, [ip]
 80099a0:	6939      	ldr	r1, [r7, #16]
 80099a2:	612f      	str	r7, [r5, #16]
 80099a4:	ed85 7b1a 	vstr	d7, [r5, #104]	@ 0x68
 80099a8:	01b0      	lsls	r0, r6, #6
 80099aa:	47c0      	blx	r8
 80099ac:	6068      	str	r0, [r5, #4]
 80099ae:	b338      	cbz	r0, 8009a00 <rclc_executor_init+0xc8>
 80099b0:	2400      	movs	r4, #0
 80099b2:	e000      	b.n	80099b6 <rclc_executor_init+0x7e>
 80099b4:	6868      	ldr	r0, [r5, #4]
 80099b6:	eb00 1084 	add.w	r0, r0, r4, lsl #6
 80099ba:	4631      	mov	r1, r6
 80099bc:	3401      	adds	r4, #1
 80099be:	f000 fa6b 	bl	8009e98 <rclc_executor_handle_init>
 80099c2:	42a6      	cmp	r6, r4
 80099c4:	d1f6      	bne.n	80099b4 <rclc_executor_init+0x7c>
 80099c6:	f105 0048 	add.w	r0, r5, #72	@ 0x48
 80099ca:	f000 fa5b 	bl	8009e84 <rclc_executor_handle_counters_zero_init>
 80099ce:	4a11      	ldr	r2, [pc, #68]	@ (8009a14 <rclc_executor_init+0xdc>)
 80099d0:	686b      	ldr	r3, [r5, #4]
 80099d2:	2000      	movs	r0, #0
 80099d4:	e9c5 201e 	strd	r2, r0, [r5, #120]	@ 0x78
 80099d8:	b163      	cbz	r3, 80099f4 <rclc_executor_init+0xbc>
 80099da:	692b      	ldr	r3, [r5, #16]
 80099dc:	b153      	cbz	r3, 80099f4 <rclc_executor_init+0xbc>
 80099de:	68ab      	ldr	r3, [r5, #8]
 80099e0:	b143      	cbz	r3, 80099f4 <rclc_executor_init+0xbc>
 80099e2:	f885 0080 	strb.w	r0, [r5, #128]	@ 0x80
 80099e6:	b030      	add	sp, #192	@ 0xc0
 80099e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80099ec:	200b      	movs	r0, #11
 80099ee:	b030      	add	sp, #192	@ 0xc0
 80099f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80099f4:	4618      	mov	r0, r3
 80099f6:	b030      	add	sp, #192	@ 0xc0
 80099f8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80099fc:	200b      	movs	r0, #11
 80099fe:	4770      	bx	lr
 8009a00:	200a      	movs	r0, #10
 8009a02:	e7f4      	b.n	80099ee <rclc_executor_init+0xb6>
 8009a04:	f3af 8000 	nop.w
 8009a08:	3b9aca00 	.word	0x3b9aca00
 8009a0c:	00000000 	.word	0x00000000
 8009a10:	08016618 	.word	0x08016618
 8009a14:	080098a9 	.word	0x080098a9

08009a18 <rclc_executor_add_subscription>:
 8009a18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009a1a:	f89d e018 	ldrb.w	lr, [sp, #24]
 8009a1e:	b338      	cbz	r0, 8009a70 <rclc_executor_add_subscription+0x58>
 8009a20:	b331      	cbz	r1, 8009a70 <rclc_executor_add_subscription+0x58>
 8009a22:	b32a      	cbz	r2, 8009a70 <rclc_executor_add_subscription+0x58>
 8009a24:	b323      	cbz	r3, 8009a70 <rclc_executor_add_subscription+0x58>
 8009a26:	4604      	mov	r4, r0
 8009a28:	e9d0 5002 	ldrd	r5, r0, [r0, #8]
 8009a2c:	42a8      	cmp	r0, r5
 8009a2e:	d301      	bcc.n	8009a34 <rclc_executor_add_subscription+0x1c>
 8009a30:	2001      	movs	r0, #1
 8009a32:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009a34:	6866      	ldr	r6, [r4, #4]
 8009a36:	0187      	lsls	r7, r0, #6
 8009a38:	eb06 1c80 	add.w	ip, r6, r0, lsl #6
 8009a3c:	2500      	movs	r5, #0
 8009a3e:	55f5      	strb	r5, [r6, r7]
 8009a40:	3001      	adds	r0, #1
 8009a42:	f8cc 3030 	str.w	r3, [ip, #48]	@ 0x30
 8009a46:	f8cc 502c 	str.w	r5, [ip, #44]	@ 0x2c
 8009a4a:	2301      	movs	r3, #1
 8009a4c:	f104 0514 	add.w	r5, r4, #20
 8009a50:	e9cc 1201 	strd	r1, r2, [ip, #4]
 8009a54:	f88c e001 	strb.w	lr, [ip, #1]
 8009a58:	f8ac 3038 	strh.w	r3, [ip, #56]	@ 0x38
 8009a5c:	60e0      	str	r0, [r4, #12]
 8009a5e:	4628      	mov	r0, r5
 8009a60:	f007 f8b0 	bl	8010bc4 <rcl_wait_set_is_valid>
 8009a64:	b930      	cbnz	r0, 8009a74 <rclc_executor_add_subscription+0x5c>
 8009a66:	6ca3      	ldr	r3, [r4, #72]	@ 0x48
 8009a68:	3301      	adds	r3, #1
 8009a6a:	2000      	movs	r0, #0
 8009a6c:	64a3      	str	r3, [r4, #72]	@ 0x48
 8009a6e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009a70:	200b      	movs	r0, #11
 8009a72:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009a74:	4628      	mov	r0, r5
 8009a76:	f007 f8ab 	bl	8010bd0 <rcl_wait_set_fini>
 8009a7a:	2800      	cmp	r0, #0
 8009a7c:	d0f3      	beq.n	8009a66 <rclc_executor_add_subscription+0x4e>
 8009a7e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08009a80 <rclc_executor_prepare>:
 8009a80:	2800      	cmp	r0, #0
 8009a82:	d044      	beq.n	8009b0e <rclc_executor_prepare+0x8e>
 8009a84:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009a86:	f100 0514 	add.w	r5, r0, #20
 8009a8a:	b09b      	sub	sp, #108	@ 0x6c
 8009a8c:	4604      	mov	r4, r0
 8009a8e:	4628      	mov	r0, r5
 8009a90:	f007 f898 	bl	8010bc4 <rcl_wait_set_is_valid>
 8009a94:	b110      	cbz	r0, 8009a9c <rclc_executor_prepare+0x1c>
 8009a96:	2000      	movs	r0, #0
 8009a98:	b01b      	add	sp, #108	@ 0x6c
 8009a9a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009a9c:	4628      	mov	r0, r5
 8009a9e:	f007 f897 	bl	8010bd0 <rcl_wait_set_fini>
 8009aa2:	2800      	cmp	r0, #0
 8009aa4:	d130      	bne.n	8009b08 <rclc_executor_prepare+0x88>
 8009aa6:	a80c      	add	r0, sp, #48	@ 0x30
 8009aa8:	f007 f878 	bl	8010b9c <rcl_get_zero_initialized_wait_set>
 8009aac:	f10d 0c30 	add.w	ip, sp, #48	@ 0x30
 8009ab0:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8009ab4:	46ae      	mov	lr, r5
 8009ab6:	6927      	ldr	r7, [r4, #16]
 8009ab8:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8009abc:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8009ac0:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8009ac4:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8009ac8:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8009acc:	f8dc 3000 	ldr.w	r3, [ip]
 8009ad0:	f8ce 3000 	str.w	r3, [lr]
 8009ad4:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 8009ad6:	ae04      	add	r6, sp, #16
 8009ad8:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8009ada:	683b      	ldr	r3, [r7, #0]
 8009adc:	6822      	ldr	r2, [r4, #0]
 8009ade:	6033      	str	r3, [r6, #0]
 8009ae0:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8009ae2:	6d61      	ldr	r1, [r4, #84]	@ 0x54
 8009ae4:	e9cd 3202 	strd	r3, r2, [sp, #8]
 8009ae8:	e9d4 3213 	ldrd	r3, r2, [r4, #76]	@ 0x4c
 8009aec:	e9cd 2100 	strd	r2, r1, [sp]
 8009af0:	4628      	mov	r0, r5
 8009af2:	6e22      	ldr	r2, [r4, #96]	@ 0x60
 8009af4:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 8009af6:	f007 fb69 	bl	80111cc <rcl_wait_set_init>
 8009afa:	2800      	cmp	r0, #0
 8009afc:	d0cc      	beq.n	8009a98 <rclc_executor_prepare+0x18>
 8009afe:	900b      	str	r0, [sp, #44]	@ 0x2c
 8009b00:	f000 faee 	bl	800a0e0 <rcutils_reset_error>
 8009b04:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 8009b06:	e7c7      	b.n	8009a98 <rclc_executor_prepare+0x18>
 8009b08:	f000 faea 	bl	800a0e0 <rcutils_reset_error>
 8009b0c:	e7cb      	b.n	8009aa6 <rclc_executor_prepare+0x26>
 8009b0e:	200b      	movs	r0, #11
 8009b10:	4770      	bx	lr
 8009b12:	bf00      	nop

08009b14 <rclc_executor_spin_some.part.0>:
 8009b14:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009b18:	f100 0614 	add.w	r6, r0, #20
 8009b1c:	b083      	sub	sp, #12
 8009b1e:	4691      	mov	r9, r2
 8009b20:	4698      	mov	r8, r3
 8009b22:	4605      	mov	r5, r0
 8009b24:	f7ff ffac 	bl	8009a80 <rclc_executor_prepare>
 8009b28:	4630      	mov	r0, r6
 8009b2a:	f007 f91d 	bl	8010d68 <rcl_wait_set_clear>
 8009b2e:	4607      	mov	r7, r0
 8009b30:	2800      	cmp	r0, #0
 8009b32:	f040 80ed 	bne.w	8009d10 <rclc_executor_spin_some.part.0+0x1fc>
 8009b36:	68ab      	ldr	r3, [r5, #8]
 8009b38:	4604      	mov	r4, r0
 8009b3a:	b303      	cbz	r3, 8009b7e <rclc_executor_spin_some.part.0+0x6a>
 8009b3c:	6869      	ldr	r1, [r5, #4]
 8009b3e:	eb01 1c84 	add.w	ip, r1, r4, lsl #6
 8009b42:	01a2      	lsls	r2, r4, #6
 8009b44:	f89c 3038 	ldrb.w	r3, [ip, #56]	@ 0x38
 8009b48:	b1cb      	cbz	r3, 8009b7e <rclc_executor_spin_some.part.0+0x6a>
 8009b4a:	5c8b      	ldrb	r3, [r1, r2]
 8009b4c:	2b0a      	cmp	r3, #10
 8009b4e:	f200 80d8 	bhi.w	8009d02 <rclc_executor_spin_some.part.0+0x1ee>
 8009b52:	e8df f003 	tbb	[pc, r3]
 8009b56:	9c9c      	.short	0x9c9c
 8009b58:	068c8ca7 	.word	0x068c8ca7
 8009b5c:	bdc90606 	.word	0xbdc90606
 8009b60:	b2          	.byte	0xb2
 8009b61:	00          	.byte	0x00
 8009b62:	f8dc 1004 	ldr.w	r1, [ip, #4]
 8009b66:	f10c 0234 	add.w	r2, ip, #52	@ 0x34
 8009b6a:	4630      	mov	r0, r6
 8009b6c:	f007 fc44 	bl	80113f8 <rcl_wait_set_add_service>
 8009b70:	2800      	cmp	r0, #0
 8009b72:	f040 8086 	bne.w	8009c82 <rclc_executor_spin_some.part.0+0x16e>
 8009b76:	68ab      	ldr	r3, [r5, #8]
 8009b78:	3401      	adds	r4, #1
 8009b7a:	429c      	cmp	r4, r3
 8009b7c:	d3de      	bcc.n	8009b3c <rclc_executor_spin_some.part.0+0x28>
 8009b7e:	4643      	mov	r3, r8
 8009b80:	464a      	mov	r2, r9
 8009b82:	4630      	mov	r0, r6
 8009b84:	f007 fc64 	bl	8011450 <rcl_wait>
 8009b88:	f895 3080 	ldrb.w	r3, [r5, #128]	@ 0x80
 8009b8c:	2b00      	cmp	r3, #0
 8009b8e:	f000 80c7 	beq.w	8009d20 <rclc_executor_spin_some.part.0+0x20c>
 8009b92:	2b01      	cmp	r3, #1
 8009b94:	f040 80b5 	bne.w	8009d02 <rclc_executor_spin_some.part.0+0x1ee>
 8009b98:	68ab      	ldr	r3, [r5, #8]
 8009b9a:	2b00      	cmp	r3, #0
 8009b9c:	f000 8159 	beq.w	8009e52 <rclc_executor_spin_some.part.0+0x33e>
 8009ba0:	2400      	movs	r4, #0
 8009ba2:	46a0      	mov	r8, r4
 8009ba4:	f240 1991 	movw	r9, #401	@ 0x191
 8009ba8:	e00a      	b.n	8009bc0 <rclc_executor_spin_some.part.0+0xac>
 8009baa:	f7ff fb7b 	bl	80092a4 <_rclc_check_for_new_data>
 8009bae:	4604      	mov	r4, r0
 8009bb0:	b110      	cbz	r0, 8009bb8 <rclc_executor_spin_some.part.0+0xa4>
 8009bb2:	4548      	cmp	r0, r9
 8009bb4:	f040 80b2 	bne.w	8009d1c <rclc_executor_spin_some.part.0+0x208>
 8009bb8:	68ab      	ldr	r3, [r5, #8]
 8009bba:	4598      	cmp	r8, r3
 8009bbc:	f080 8126 	bcs.w	8009e0c <rclc_executor_spin_some.part.0+0x2f8>
 8009bc0:	686a      	ldr	r2, [r5, #4]
 8009bc2:	eb02 1088 	add.w	r0, r2, r8, lsl #6
 8009bc6:	4631      	mov	r1, r6
 8009bc8:	f890 c038 	ldrb.w	ip, [r0, #56]	@ 0x38
 8009bcc:	f108 0801 	add.w	r8, r8, #1
 8009bd0:	f1bc 0f00 	cmp.w	ip, #0
 8009bd4:	d1e9      	bne.n	8009baa <rclc_executor_spin_some.part.0+0x96>
 8009bd6:	4619      	mov	r1, r3
 8009bd8:	4610      	mov	r0, r2
 8009bda:	e9d5 321e 	ldrd	r3, r2, [r5, #120]	@ 0x78
 8009bde:	4798      	blx	r3
 8009be0:	2800      	cmp	r0, #0
 8009be2:	f000 809b 	beq.w	8009d1c <rclc_executor_spin_some.part.0+0x208>
 8009be6:	68ab      	ldr	r3, [r5, #8]
 8009be8:	2b00      	cmp	r3, #0
 8009bea:	f000 8097 	beq.w	8009d1c <rclc_executor_spin_some.part.0+0x208>
 8009bee:	f04f 0800 	mov.w	r8, #0
 8009bf2:	f240 1991 	movw	r9, #401	@ 0x191
 8009bf6:	e009      	b.n	8009c0c <rclc_executor_spin_some.part.0+0xf8>
 8009bf8:	f7ff fba2 	bl	8009340 <_rclc_take_new_data>
 8009bfc:	4604      	mov	r4, r0
 8009bfe:	b110      	cbz	r0, 8009c06 <rclc_executor_spin_some.part.0+0xf2>
 8009c00:	4548      	cmp	r0, r9
 8009c02:	f040 808b 	bne.w	8009d1c <rclc_executor_spin_some.part.0+0x208>
 8009c06:	68ab      	ldr	r3, [r5, #8]
 8009c08:	4598      	cmp	r8, r3
 8009c0a:	d209      	bcs.n	8009c20 <rclc_executor_spin_some.part.0+0x10c>
 8009c0c:	6868      	ldr	r0, [r5, #4]
 8009c0e:	eb00 1088 	add.w	r0, r0, r8, lsl #6
 8009c12:	4631      	mov	r1, r6
 8009c14:	f890 2038 	ldrb.w	r2, [r0, #56]	@ 0x38
 8009c18:	f108 0801 	add.w	r8, r8, #1
 8009c1c:	2a00      	cmp	r2, #0
 8009c1e:	d1eb      	bne.n	8009bf8 <rclc_executor_spin_some.part.0+0xe4>
 8009c20:	2600      	movs	r6, #0
 8009c22:	b97b      	cbnz	r3, 8009c44 <rclc_executor_spin_some.part.0+0x130>
 8009c24:	e07a      	b.n	8009d1c <rclc_executor_spin_some.part.0+0x208>
 8009c26:	f812 200c 	ldrb.w	r2, [r2, ip]
 8009c2a:	2a08      	cmp	r2, #8
 8009c2c:	f000 80fd 	beq.w	8009e2a <rclc_executor_spin_some.part.0+0x316>
 8009c30:	2a09      	cmp	r2, #9
 8009c32:	f000 80ef 	beq.w	8009e14 <rclc_executor_spin_some.part.0+0x300>
 8009c36:	f890 2039 	ldrb.w	r2, [r0, #57]	@ 0x39
 8009c3a:	b98a      	cbnz	r2, 8009c60 <rclc_executor_spin_some.part.0+0x14c>
 8009c3c:	3601      	adds	r6, #1
 8009c3e:	429e      	cmp	r6, r3
 8009c40:	d262      	bcs.n	8009d08 <rclc_executor_spin_some.part.0+0x1f4>
 8009c42:	2400      	movs	r4, #0
 8009c44:	686a      	ldr	r2, [r5, #4]
 8009c46:	eb02 1086 	add.w	r0, r2, r6, lsl #6
 8009c4a:	ea4f 1c86 	mov.w	ip, r6, lsl #6
 8009c4e:	f890 1038 	ldrb.w	r1, [r0, #56]	@ 0x38
 8009c52:	2900      	cmp	r1, #0
 8009c54:	d062      	beq.n	8009d1c <rclc_executor_spin_some.part.0+0x208>
 8009c56:	7841      	ldrb	r1, [r0, #1]
 8009c58:	2900      	cmp	r1, #0
 8009c5a:	d0e4      	beq.n	8009c26 <rclc_executor_spin_some.part.0+0x112>
 8009c5c:	2901      	cmp	r1, #1
 8009c5e:	d1ed      	bne.n	8009c3c <rclc_executor_spin_some.part.0+0x128>
 8009c60:	f7ff fce2 	bl	8009628 <_rclc_execute.part.0>
 8009c64:	2800      	cmp	r0, #0
 8009c66:	f040 80b6 	bne.w	8009dd6 <rclc_executor_spin_some.part.0+0x2c2>
 8009c6a:	68ab      	ldr	r3, [r5, #8]
 8009c6c:	e7e6      	b.n	8009c3c <rclc_executor_spin_some.part.0+0x128>
 8009c6e:	f8dc 1004 	ldr.w	r1, [ip, #4]
 8009c72:	f10c 0234 	add.w	r2, ip, #52	@ 0x34
 8009c76:	4630      	mov	r0, r6
 8009c78:	f007 fb92 	bl	80113a0 <rcl_wait_set_add_client>
 8009c7c:	2800      	cmp	r0, #0
 8009c7e:	f43f af7a 	beq.w	8009b76 <rclc_executor_spin_some.part.0+0x62>
 8009c82:	9001      	str	r0, [sp, #4]
 8009c84:	f000 fa2c 	bl	800a0e0 <rcutils_reset_error>
 8009c88:	9801      	ldr	r0, [sp, #4]
 8009c8a:	4607      	mov	r7, r0
 8009c8c:	e03c      	b.n	8009d08 <rclc_executor_spin_some.part.0+0x1f4>
 8009c8e:	f8dc 1004 	ldr.w	r1, [ip, #4]
 8009c92:	f10c 0234 	add.w	r2, ip, #52	@ 0x34
 8009c96:	4630      	mov	r0, r6
 8009c98:	f007 f83a 	bl	8010d10 <rcl_wait_set_add_subscription>
 8009c9c:	2800      	cmp	r0, #0
 8009c9e:	f43f af6a 	beq.w	8009b76 <rclc_executor_spin_some.part.0+0x62>
 8009ca2:	e7ee      	b.n	8009c82 <rclc_executor_spin_some.part.0+0x16e>
 8009ca4:	f8dc 1004 	ldr.w	r1, [ip, #4]
 8009ca8:	f10c 0234 	add.w	r2, ip, #52	@ 0x34
 8009cac:	4630      	mov	r0, r6
 8009cae:	f007 fb47 	bl	8011340 <rcl_wait_set_add_timer>
 8009cb2:	2800      	cmp	r0, #0
 8009cb4:	f43f af5f 	beq.w	8009b76 <rclc_executor_spin_some.part.0+0x62>
 8009cb8:	e7e3      	b.n	8009c82 <rclc_executor_spin_some.part.0+0x16e>
 8009cba:	f8dc 1004 	ldr.w	r1, [ip, #4]
 8009cbe:	f10c 0234 	add.w	r2, ip, #52	@ 0x34
 8009cc2:	4630      	mov	r0, r6
 8009cc4:	f007 fb10 	bl	80112e8 <rcl_wait_set_add_guard_condition>
 8009cc8:	2800      	cmp	r0, #0
 8009cca:	f43f af54 	beq.w	8009b76 <rclc_executor_spin_some.part.0+0x62>
 8009cce:	e7d8      	b.n	8009c82 <rclc_executor_spin_some.part.0+0x16e>
 8009cd0:	f8dc 1004 	ldr.w	r1, [ip, #4]
 8009cd4:	f10c 0234 	add.w	r2, ip, #52	@ 0x34
 8009cd8:	3110      	adds	r1, #16
 8009cda:	4630      	mov	r0, r6
 8009cdc:	f008 f890 	bl	8011e00 <rcl_action_wait_set_add_action_server>
 8009ce0:	2800      	cmp	r0, #0
 8009ce2:	f43f af48 	beq.w	8009b76 <rclc_executor_spin_some.part.0+0x62>
 8009ce6:	e7cc      	b.n	8009c82 <rclc_executor_spin_some.part.0+0x16e>
 8009ce8:	f8dc 1004 	ldr.w	r1, [ip, #4]
 8009cec:	f10c 0234 	add.w	r2, ip, #52	@ 0x34
 8009cf0:	3110      	adds	r1, #16
 8009cf2:	2300      	movs	r3, #0
 8009cf4:	4630      	mov	r0, r6
 8009cf6:	f007 fe5b 	bl	80119b0 <rcl_action_wait_set_add_action_client>
 8009cfa:	2800      	cmp	r0, #0
 8009cfc:	f43f af3b 	beq.w	8009b76 <rclc_executor_spin_some.part.0+0x62>
 8009d00:	e7bf      	b.n	8009c82 <rclc_executor_spin_some.part.0+0x16e>
 8009d02:	f000 f9ed 	bl	800a0e0 <rcutils_reset_error>
 8009d06:	2701      	movs	r7, #1
 8009d08:	4638      	mov	r0, r7
 8009d0a:	b003      	add	sp, #12
 8009d0c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009d10:	f000 f9e6 	bl	800a0e0 <rcutils_reset_error>
 8009d14:	4638      	mov	r0, r7
 8009d16:	b003      	add	sp, #12
 8009d18:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009d1c:	4627      	mov	r7, r4
 8009d1e:	e7f3      	b.n	8009d08 <rclc_executor_spin_some.part.0+0x1f4>
 8009d20:	68ab      	ldr	r3, [r5, #8]
 8009d22:	2b00      	cmp	r3, #0
 8009d24:	f000 8092 	beq.w	8009e4c <rclc_executor_spin_some.part.0+0x338>
 8009d28:	2400      	movs	r4, #0
 8009d2a:	46a0      	mov	r8, r4
 8009d2c:	f240 1991 	movw	r9, #401	@ 0x191
 8009d30:	e008      	b.n	8009d44 <rclc_executor_spin_some.part.0+0x230>
 8009d32:	f7ff fab7 	bl	80092a4 <_rclc_check_for_new_data>
 8009d36:	4604      	mov	r4, r0
 8009d38:	b108      	cbz	r0, 8009d3e <rclc_executor_spin_some.part.0+0x22a>
 8009d3a:	4548      	cmp	r0, r9
 8009d3c:	d1ee      	bne.n	8009d1c <rclc_executor_spin_some.part.0+0x208>
 8009d3e:	68ab      	ldr	r3, [r5, #8]
 8009d40:	4598      	cmp	r8, r3
 8009d42:	d265      	bcs.n	8009e10 <rclc_executor_spin_some.part.0+0x2fc>
 8009d44:	686a      	ldr	r2, [r5, #4]
 8009d46:	eb02 1088 	add.w	r0, r2, r8, lsl #6
 8009d4a:	4631      	mov	r1, r6
 8009d4c:	f890 c038 	ldrb.w	ip, [r0, #56]	@ 0x38
 8009d50:	f108 0801 	add.w	r8, r8, #1
 8009d54:	f1bc 0f00 	cmp.w	ip, #0
 8009d58:	d1eb      	bne.n	8009d32 <rclc_executor_spin_some.part.0+0x21e>
 8009d5a:	4619      	mov	r1, r3
 8009d5c:	4610      	mov	r0, r2
 8009d5e:	e9d5 321e 	ldrd	r3, r2, [r5, #120]	@ 0x78
 8009d62:	4798      	blx	r3
 8009d64:	2800      	cmp	r0, #0
 8009d66:	d0d9      	beq.n	8009d1c <rclc_executor_spin_some.part.0+0x208>
 8009d68:	68ab      	ldr	r3, [r5, #8]
 8009d6a:	2b00      	cmp	r3, #0
 8009d6c:	d0d6      	beq.n	8009d1c <rclc_executor_spin_some.part.0+0x208>
 8009d6e:	f04f 0800 	mov.w	r8, #0
 8009d72:	f240 1991 	movw	r9, #401	@ 0x191
 8009d76:	f240 2a59 	movw	sl, #601	@ 0x259
 8009d7a:	e00e      	b.n	8009d9a <rclc_executor_spin_some.part.0+0x286>
 8009d7c:	f813 300b 	ldrb.w	r3, [r3, fp]
 8009d80:	2b08      	cmp	r3, #8
 8009d82:	d033      	beq.n	8009dec <rclc_executor_spin_some.part.0+0x2d8>
 8009d84:	2b09      	cmp	r3, #9
 8009d86:	d028      	beq.n	8009dda <rclc_executor_spin_some.part.0+0x2c6>
 8009d88:	f890 3039 	ldrb.w	r3, [r0, #57]	@ 0x39
 8009d8c:	b9fb      	cbnz	r3, 8009dce <rclc_executor_spin_some.part.0+0x2ba>
 8009d8e:	68ab      	ldr	r3, [r5, #8]
 8009d90:	f108 0801 	add.w	r8, r8, #1
 8009d94:	4598      	cmp	r8, r3
 8009d96:	d2b7      	bcs.n	8009d08 <rclc_executor_spin_some.part.0+0x1f4>
 8009d98:	2400      	movs	r4, #0
 8009d9a:	6868      	ldr	r0, [r5, #4]
 8009d9c:	eb00 1088 	add.w	r0, r0, r8, lsl #6
 8009da0:	ea4f 1b88 	mov.w	fp, r8, lsl #6
 8009da4:	f890 3038 	ldrb.w	r3, [r0, #56]	@ 0x38
 8009da8:	2b00      	cmp	r3, #0
 8009daa:	d0b7      	beq.n	8009d1c <rclc_executor_spin_some.part.0+0x208>
 8009dac:	4631      	mov	r1, r6
 8009dae:	f7ff fac7 	bl	8009340 <_rclc_take_new_data>
 8009db2:	b118      	cbz	r0, 8009dbc <rclc_executor_spin_some.part.0+0x2a8>
 8009db4:	4548      	cmp	r0, r9
 8009db6:	d001      	beq.n	8009dbc <rclc_executor_spin_some.part.0+0x2a8>
 8009db8:	4550      	cmp	r0, sl
 8009dba:	d10c      	bne.n	8009dd6 <rclc_executor_spin_some.part.0+0x2c2>
 8009dbc:	686b      	ldr	r3, [r5, #4]
 8009dbe:	eb13 000b 	adds.w	r0, r3, fp
 8009dc2:	d021      	beq.n	8009e08 <rclc_executor_spin_some.part.0+0x2f4>
 8009dc4:	7842      	ldrb	r2, [r0, #1]
 8009dc6:	2a00      	cmp	r2, #0
 8009dc8:	d0d8      	beq.n	8009d7c <rclc_executor_spin_some.part.0+0x268>
 8009dca:	2a01      	cmp	r2, #1
 8009dcc:	d1df      	bne.n	8009d8e <rclc_executor_spin_some.part.0+0x27a>
 8009dce:	f7ff fc2b 	bl	8009628 <_rclc_execute.part.0>
 8009dd2:	2800      	cmp	r0, #0
 8009dd4:	d0db      	beq.n	8009d8e <rclc_executor_spin_some.part.0+0x27a>
 8009dd6:	4607      	mov	r7, r0
 8009dd8:	e796      	b.n	8009d08 <rclc_executor_spin_some.part.0+0x1f4>
 8009dda:	6843      	ldr	r3, [r0, #4]
 8009ddc:	6a1a      	ldr	r2, [r3, #32]
 8009dde:	2a00      	cmp	r2, #0
 8009de0:	d1f5      	bne.n	8009dce <rclc_executor_spin_some.part.0+0x2ba>
 8009de2:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8009de6:	2b00      	cmp	r3, #0
 8009de8:	d0d1      	beq.n	8009d8e <rclc_executor_spin_some.part.0+0x27a>
 8009dea:	e7f0      	b.n	8009dce <rclc_executor_spin_some.part.0+0x2ba>
 8009dec:	6843      	ldr	r3, [r0, #4]
 8009dee:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8009df0:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 8009df4:	d1eb      	bne.n	8009dce <rclc_executor_spin_some.part.0+0x2ba>
 8009df6:	f893 2044 	ldrb.w	r2, [r3, #68]	@ 0x44
 8009dfa:	2a00      	cmp	r2, #0
 8009dfc:	d1e7      	bne.n	8009dce <rclc_executor_spin_some.part.0+0x2ba>
 8009dfe:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8009e02:	2b00      	cmp	r3, #0
 8009e04:	d0c3      	beq.n	8009d8e <rclc_executor_spin_some.part.0+0x27a>
 8009e06:	e7e2      	b.n	8009dce <rclc_executor_spin_some.part.0+0x2ba>
 8009e08:	270b      	movs	r7, #11
 8009e0a:	e77d      	b.n	8009d08 <rclc_executor_spin_some.part.0+0x1f4>
 8009e0c:	686a      	ldr	r2, [r5, #4]
 8009e0e:	e6e2      	b.n	8009bd6 <rclc_executor_spin_some.part.0+0xc2>
 8009e10:	686a      	ldr	r2, [r5, #4]
 8009e12:	e7a2      	b.n	8009d5a <rclc_executor_spin_some.part.0+0x246>
 8009e14:	6842      	ldr	r2, [r0, #4]
 8009e16:	6a11      	ldr	r1, [r2, #32]
 8009e18:	2900      	cmp	r1, #0
 8009e1a:	f47f af21 	bne.w	8009c60 <rclc_executor_spin_some.part.0+0x14c>
 8009e1e:	f892 2024 	ldrb.w	r2, [r2, #36]	@ 0x24
 8009e22:	2a00      	cmp	r2, #0
 8009e24:	f43f af0a 	beq.w	8009c3c <rclc_executor_spin_some.part.0+0x128>
 8009e28:	e71a      	b.n	8009c60 <rclc_executor_spin_some.part.0+0x14c>
 8009e2a:	6842      	ldr	r2, [r0, #4]
 8009e2c:	6c11      	ldr	r1, [r2, #64]	@ 0x40
 8009e2e:	f031 417f 	bics.w	r1, r1, #4278190080	@ 0xff000000
 8009e32:	f47f af15 	bne.w	8009c60 <rclc_executor_spin_some.part.0+0x14c>
 8009e36:	f892 1044 	ldrb.w	r1, [r2, #68]	@ 0x44
 8009e3a:	2900      	cmp	r1, #0
 8009e3c:	f47f af10 	bne.w	8009c60 <rclc_executor_spin_some.part.0+0x14c>
 8009e40:	f892 2043 	ldrb.w	r2, [r2, #67]	@ 0x43
 8009e44:	2a00      	cmp	r2, #0
 8009e46:	f43f aef9 	beq.w	8009c3c <rclc_executor_spin_some.part.0+0x128>
 8009e4a:	e709      	b.n	8009c60 <rclc_executor_spin_some.part.0+0x14c>
 8009e4c:	686a      	ldr	r2, [r5, #4]
 8009e4e:	461c      	mov	r4, r3
 8009e50:	e783      	b.n	8009d5a <rclc_executor_spin_some.part.0+0x246>
 8009e52:	686a      	ldr	r2, [r5, #4]
 8009e54:	461c      	mov	r4, r3
 8009e56:	e6be      	b.n	8009bd6 <rclc_executor_spin_some.part.0+0xc2>

08009e58 <rclc_executor_spin_some>:
 8009e58:	b190      	cbz	r0, 8009e80 <rclc_executor_spin_some+0x28>
 8009e5a:	b570      	push	{r4, r5, r6, lr}
 8009e5c:	4604      	mov	r4, r0
 8009e5e:	6800      	ldr	r0, [r0, #0]
 8009e60:	4616      	mov	r6, r2
 8009e62:	461d      	mov	r5, r3
 8009e64:	f005 fe0c 	bl	800fa80 <rcl_context_is_valid>
 8009e68:	b130      	cbz	r0, 8009e78 <rclc_executor_spin_some+0x20>
 8009e6a:	4632      	mov	r2, r6
 8009e6c:	462b      	mov	r3, r5
 8009e6e:	4620      	mov	r0, r4
 8009e70:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8009e74:	f7ff be4e 	b.w	8009b14 <rclc_executor_spin_some.part.0>
 8009e78:	f000 f932 	bl	800a0e0 <rcutils_reset_error>
 8009e7c:	2001      	movs	r0, #1
 8009e7e:	bd70      	pop	{r4, r5, r6, pc}
 8009e80:	200b      	movs	r0, #11
 8009e82:	4770      	bx	lr

08009e84 <rclc_executor_handle_counters_zero_init>:
 8009e84:	b130      	cbz	r0, 8009e94 <rclc_executor_handle_counters_zero_init+0x10>
 8009e86:	b508      	push	{r3, lr}
 8009e88:	2220      	movs	r2, #32
 8009e8a:	2100      	movs	r1, #0
 8009e8c:	f00b fb98 	bl	80155c0 <memset>
 8009e90:	2000      	movs	r0, #0
 8009e92:	bd08      	pop	{r3, pc}
 8009e94:	200b      	movs	r0, #11
 8009e96:	4770      	bx	lr

08009e98 <rclc_executor_handle_init>:
 8009e98:	b168      	cbz	r0, 8009eb6 <rclc_executor_handle_init+0x1e>
 8009e9a:	ed9f 7b09 	vldr	d7, [pc, #36]	@ 8009ec0 <rclc_executor_handle_init+0x28>
 8009e9e:	2300      	movs	r3, #0
 8009ea0:	220b      	movs	r2, #11
 8009ea2:	ed80 7b0a 	vstr	d7, [r0, #40]	@ 0x28
 8009ea6:	e9c0 3301 	strd	r3, r3, [r0, #4]
 8009eaa:	e9c0 310c 	strd	r3, r1, [r0, #48]	@ 0x30
 8009eae:	8002      	strh	r2, [r0, #0]
 8009eb0:	8703      	strh	r3, [r0, #56]	@ 0x38
 8009eb2:	4618      	mov	r0, r3
 8009eb4:	4770      	bx	lr
 8009eb6:	200b      	movs	r0, #11
 8009eb8:	4770      	bx	lr
 8009eba:	bf00      	nop
 8009ebc:	f3af 8000 	nop.w
	...

08009ec8 <rclc_support_init_with_options>:
 8009ec8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8009ecc:	b083      	sub	sp, #12
 8009ece:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 8009ed0:	b340      	cbz	r0, 8009f24 <rclc_support_init_with_options+0x5c>
 8009ed2:	461d      	mov	r5, r3
 8009ed4:	b333      	cbz	r3, 8009f24 <rclc_support_init_with_options+0x5c>
 8009ed6:	b32e      	cbz	r6, 8009f24 <rclc_support_init_with_options+0x5c>
 8009ed8:	46e9      	mov	r9, sp
 8009eda:	4604      	mov	r4, r0
 8009edc:	4648      	mov	r0, r9
 8009ede:	460f      	mov	r7, r1
 8009ee0:	4690      	mov	r8, r2
 8009ee2:	f005 fdc3 	bl	800fa6c <rcl_get_zero_initialized_context>
 8009ee6:	e899 0003 	ldmia.w	r9, {r0, r1}
 8009eea:	462a      	mov	r2, r5
 8009eec:	e884 0003 	stmia.w	r4, {r0, r1}
 8009ef0:	4623      	mov	r3, r4
 8009ef2:	4641      	mov	r1, r8
 8009ef4:	4638      	mov	r0, r7
 8009ef6:	f005 fe29 	bl	800fb4c <rcl_init>
 8009efa:	4605      	mov	r5, r0
 8009efc:	b960      	cbnz	r0, 8009f18 <rclc_support_init_with_options+0x50>
 8009efe:	60a6      	str	r6, [r4, #8]
 8009f00:	4632      	mov	r2, r6
 8009f02:	f104 010c 	add.w	r1, r4, #12
 8009f06:	2003      	movs	r0, #3
 8009f08:	f006 fc52 	bl	80107b0 <rcl_clock_init>
 8009f0c:	4605      	mov	r5, r0
 8009f0e:	b918      	cbnz	r0, 8009f18 <rclc_support_init_with_options+0x50>
 8009f10:	4628      	mov	r0, r5
 8009f12:	b003      	add	sp, #12
 8009f14:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009f18:	f000 f8e2 	bl	800a0e0 <rcutils_reset_error>
 8009f1c:	4628      	mov	r0, r5
 8009f1e:	b003      	add	sp, #12
 8009f20:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009f24:	250b      	movs	r5, #11
 8009f26:	4628      	mov	r0, r5
 8009f28:	b003      	add	sp, #12
 8009f2a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009f2e:	bf00      	nop

08009f30 <rclc_node_init_default>:
 8009f30:	b3b8      	cbz	r0, 8009fa2 <rclc_node_init_default+0x72>
 8009f32:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8009f36:	460d      	mov	r5, r1
 8009f38:	b0a1      	sub	sp, #132	@ 0x84
 8009f3a:	b329      	cbz	r1, 8009f88 <rclc_node_init_default+0x58>
 8009f3c:	4616      	mov	r6, r2
 8009f3e:	b31a      	cbz	r2, 8009f88 <rclc_node_init_default+0x58>
 8009f40:	461f      	mov	r7, r3
 8009f42:	b30b      	cbz	r3, 8009f88 <rclc_node_init_default+0x58>
 8009f44:	f10d 0810 	add.w	r8, sp, #16
 8009f48:	4604      	mov	r4, r0
 8009f4a:	4640      	mov	r0, r8
 8009f4c:	f005 ff24 	bl	800fd98 <rcl_get_zero_initialized_node>
 8009f50:	e898 0003 	ldmia.w	r8, {r0, r1}
 8009f54:	f10d 0918 	add.w	r9, sp, #24
 8009f58:	e884 0003 	stmia.w	r4, {r0, r1}
 8009f5c:	4648      	mov	r0, r9
 8009f5e:	f006 f893 	bl	8010088 <rcl_node_get_default_options>
 8009f62:	4640      	mov	r0, r8
 8009f64:	f005 ff18 	bl	800fd98 <rcl_get_zero_initialized_node>
 8009f68:	f8cd 9000 	str.w	r9, [sp]
 8009f6c:	e898 0003 	ldmia.w	r8, {r0, r1}
 8009f70:	463b      	mov	r3, r7
 8009f72:	e884 0003 	stmia.w	r4, {r0, r1}
 8009f76:	4632      	mov	r2, r6
 8009f78:	4629      	mov	r1, r5
 8009f7a:	4620      	mov	r0, r4
 8009f7c:	f005 ff16 	bl	800fdac <rcl_node_init>
 8009f80:	b930      	cbnz	r0, 8009f90 <rclc_node_init_default+0x60>
 8009f82:	b021      	add	sp, #132	@ 0x84
 8009f84:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009f88:	200b      	movs	r0, #11
 8009f8a:	b021      	add	sp, #132	@ 0x84
 8009f8c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009f90:	9003      	str	r0, [sp, #12]
 8009f92:	f000 f8a5 	bl	800a0e0 <rcutils_reset_error>
 8009f96:	f000 f8a3 	bl	800a0e0 <rcutils_reset_error>
 8009f9a:	9803      	ldr	r0, [sp, #12]
 8009f9c:	b021      	add	sp, #132	@ 0x84
 8009f9e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009fa2:	200b      	movs	r0, #11
 8009fa4:	4770      	bx	lr
 8009fa6:	bf00      	nop

08009fa8 <rclc_subscription_init_default>:
 8009fa8:	b368      	cbz	r0, 800a006 <rclc_subscription_init_default+0x5e>
 8009faa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009fae:	460d      	mov	r5, r1
 8009fb0:	b0a0      	sub	sp, #128	@ 0x80
 8009fb2:	b321      	cbz	r1, 8009ffe <rclc_subscription_init_default+0x56>
 8009fb4:	4616      	mov	r6, r2
 8009fb6:	b312      	cbz	r2, 8009ffe <rclc_subscription_init_default+0x56>
 8009fb8:	461f      	mov	r7, r3
 8009fba:	b303      	cbz	r3, 8009ffe <rclc_subscription_init_default+0x56>
 8009fbc:	4604      	mov	r4, r0
 8009fbe:	f006 fa9b 	bl	80104f8 <rcl_get_zero_initialized_subscription>
 8009fc2:	f10d 0810 	add.w	r8, sp, #16
 8009fc6:	6020      	str	r0, [r4, #0]
 8009fc8:	4640      	mov	r0, r8
 8009fca:	f006 fb43 	bl	8010654 <rcl_subscription_get_default_options>
 8009fce:	490f      	ldr	r1, [pc, #60]	@ (800a00c <rclc_subscription_init_default+0x64>)
 8009fd0:	2250      	movs	r2, #80	@ 0x50
 8009fd2:	4640      	mov	r0, r8
 8009fd4:	f00b fbbd 	bl	8015752 <memcpy>
 8009fd8:	f8cd 8000 	str.w	r8, [sp]
 8009fdc:	463b      	mov	r3, r7
 8009fde:	4632      	mov	r2, r6
 8009fe0:	4629      	mov	r1, r5
 8009fe2:	4620      	mov	r0, r4
 8009fe4:	f006 fa8e 	bl	8010504 <rcl_subscription_init>
 8009fe8:	b910      	cbnz	r0, 8009ff0 <rclc_subscription_init_default+0x48>
 8009fea:	b020      	add	sp, #128	@ 0x80
 8009fec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009ff0:	9003      	str	r0, [sp, #12]
 8009ff2:	f000 f875 	bl	800a0e0 <rcutils_reset_error>
 8009ff6:	9803      	ldr	r0, [sp, #12]
 8009ff8:	b020      	add	sp, #128	@ 0x80
 8009ffa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009ffe:	200b      	movs	r0, #11
 800a000:	b020      	add	sp, #128	@ 0x80
 800a002:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a006:	200b      	movs	r0, #11
 800a008:	4770      	bx	lr
 800a00a:	bf00      	nop
 800a00c:	080166a0 	.word	0x080166a0

0800a010 <__default_zero_allocate>:
 800a010:	f00a be4a 	b.w	8014ca8 <calloc>

0800a014 <__default_reallocate>:
 800a014:	f00a bfd6 	b.w	8014fc4 <realloc>

0800a018 <__default_deallocate>:
 800a018:	f00a beb2 	b.w	8014d80 <free>

0800a01c <__default_allocate>:
 800a01c:	f00a bea8 	b.w	8014d70 <malloc>

0800a020 <rcutils_get_zero_initialized_allocator>:
 800a020:	b510      	push	{r4, lr}
 800a022:	4c05      	ldr	r4, [pc, #20]	@ (800a038 <rcutils_get_zero_initialized_allocator+0x18>)
 800a024:	4686      	mov	lr, r0
 800a026:	4684      	mov	ip, r0
 800a028:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800a02a:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800a02e:	6823      	ldr	r3, [r4, #0]
 800a030:	f8cc 3000 	str.w	r3, [ip]
 800a034:	4670      	mov	r0, lr
 800a036:	bd10      	pop	{r4, pc}
 800a038:	080166f0 	.word	0x080166f0

0800a03c <rcutils_set_default_allocator>:
 800a03c:	b1a8      	cbz	r0, 800a06a <rcutils_set_default_allocator+0x2e>
 800a03e:	6802      	ldr	r2, [r0, #0]
 800a040:	b1a2      	cbz	r2, 800a06c <rcutils_set_default_allocator+0x30>
 800a042:	6841      	ldr	r1, [r0, #4]
 800a044:	b1a1      	cbz	r1, 800a070 <rcutils_set_default_allocator+0x34>
 800a046:	b410      	push	{r4}
 800a048:	68c4      	ldr	r4, [r0, #12]
 800a04a:	b164      	cbz	r4, 800a066 <rcutils_set_default_allocator+0x2a>
 800a04c:	6880      	ldr	r0, [r0, #8]
 800a04e:	b138      	cbz	r0, 800a060 <rcutils_set_default_allocator+0x24>
 800a050:	4b08      	ldr	r3, [pc, #32]	@ (800a074 <rcutils_set_default_allocator+0x38>)
 800a052:	601a      	str	r2, [r3, #0]
 800a054:	2200      	movs	r2, #0
 800a056:	e9c3 4203 	strd	r4, r2, [r3, #12]
 800a05a:	e9c3 1001 	strd	r1, r0, [r3, #4]
 800a05e:	2001      	movs	r0, #1
 800a060:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a064:	4770      	bx	lr
 800a066:	4620      	mov	r0, r4
 800a068:	e7fa      	b.n	800a060 <rcutils_set_default_allocator+0x24>
 800a06a:	4770      	bx	lr
 800a06c:	4610      	mov	r0, r2
 800a06e:	4770      	bx	lr
 800a070:	4608      	mov	r0, r1
 800a072:	4770      	bx	lr
 800a074:	20000014 	.word	0x20000014

0800a078 <rcutils_get_default_allocator>:
 800a078:	b510      	push	{r4, lr}
 800a07a:	4c05      	ldr	r4, [pc, #20]	@ (800a090 <rcutils_get_default_allocator+0x18>)
 800a07c:	4686      	mov	lr, r0
 800a07e:	4684      	mov	ip, r0
 800a080:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800a082:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800a086:	6823      	ldr	r3, [r4, #0]
 800a088:	f8cc 3000 	str.w	r3, [ip]
 800a08c:	4670      	mov	r0, lr
 800a08e:	bd10      	pop	{r4, pc}
 800a090:	20000014 	.word	0x20000014

0800a094 <rcutils_allocator_is_valid>:
 800a094:	b158      	cbz	r0, 800a0ae <rcutils_allocator_is_valid+0x1a>
 800a096:	6803      	ldr	r3, [r0, #0]
 800a098:	b143      	cbz	r3, 800a0ac <rcutils_allocator_is_valid+0x18>
 800a09a:	6843      	ldr	r3, [r0, #4]
 800a09c:	b133      	cbz	r3, 800a0ac <rcutils_allocator_is_valid+0x18>
 800a09e:	68c3      	ldr	r3, [r0, #12]
 800a0a0:	b123      	cbz	r3, 800a0ac <rcutils_allocator_is_valid+0x18>
 800a0a2:	6880      	ldr	r0, [r0, #8]
 800a0a4:	3800      	subs	r0, #0
 800a0a6:	bf18      	it	ne
 800a0a8:	2001      	movne	r0, #1
 800a0aa:	4770      	bx	lr
 800a0ac:	4618      	mov	r0, r3
 800a0ae:	4770      	bx	lr

0800a0b0 <rcutils_get_error_string>:
 800a0b0:	4b06      	ldr	r3, [pc, #24]	@ (800a0cc <rcutils_get_error_string+0x1c>)
 800a0b2:	781b      	ldrb	r3, [r3, #0]
 800a0b4:	b13b      	cbz	r3, 800a0c6 <rcutils_get_error_string+0x16>
 800a0b6:	4b06      	ldr	r3, [pc, #24]	@ (800a0d0 <rcutils_get_error_string+0x20>)
 800a0b8:	781a      	ldrb	r2, [r3, #0]
 800a0ba:	b90a      	cbnz	r2, 800a0c0 <rcutils_get_error_string+0x10>
 800a0bc:	2201      	movs	r2, #1
 800a0be:	701a      	strb	r2, [r3, #0]
 800a0c0:	4b04      	ldr	r3, [pc, #16]	@ (800a0d4 <rcutils_get_error_string+0x24>)
 800a0c2:	7818      	ldrb	r0, [r3, #0]
 800a0c4:	4770      	bx	lr
 800a0c6:	4b04      	ldr	r3, [pc, #16]	@ (800a0d8 <rcutils_get_error_string+0x28>)
 800a0c8:	7818      	ldrb	r0, [r3, #0]
 800a0ca:	4770      	bx	lr
 800a0cc:	200090e8 	.word	0x200090e8
 800a0d0:	20009101 	.word	0x20009101
 800a0d4:	20009100 	.word	0x20009100
 800a0d8:	08016704 	.word	0x08016704
 800a0dc:	00000000 	.word	0x00000000

0800a0e0 <rcutils_reset_error>:
 800a0e0:	ed9f 7b07 	vldr	d7, [pc, #28]	@ 800a100 <rcutils_reset_error+0x20>
 800a0e4:	4a08      	ldr	r2, [pc, #32]	@ (800a108 <rcutils_reset_error+0x28>)
 800a0e6:	4809      	ldr	r0, [pc, #36]	@ (800a10c <rcutils_reset_error+0x2c>)
 800a0e8:	4909      	ldr	r1, [pc, #36]	@ (800a110 <rcutils_reset_error+0x30>)
 800a0ea:	2300      	movs	r3, #0
 800a0ec:	8013      	strh	r3, [r2, #0]
 800a0ee:	ed82 7b02 	vstr	d7, [r2, #8]
 800a0f2:	4a08      	ldr	r2, [pc, #32]	@ (800a114 <rcutils_reset_error+0x34>)
 800a0f4:	7003      	strb	r3, [r0, #0]
 800a0f6:	700b      	strb	r3, [r1, #0]
 800a0f8:	7013      	strb	r3, [r2, #0]
 800a0fa:	4770      	bx	lr
 800a0fc:	f3af 8000 	nop.w
	...
 800a108:	200090f0 	.word	0x200090f0
 800a10c:	20009101 	.word	0x20009101
 800a110:	20009100 	.word	0x20009100
 800a114:	200090e8 	.word	0x200090e8

0800a118 <rcutils_system_time_now>:
 800a118:	b308      	cbz	r0, 800a15e <rcutils_system_time_now+0x46>
 800a11a:	b570      	push	{r4, r5, r6, lr}
 800a11c:	b084      	sub	sp, #16
 800a11e:	4604      	mov	r4, r0
 800a120:	4669      	mov	r1, sp
 800a122:	2001      	movs	r0, #1
 800a124:	f7f7 ff74 	bl	8002010 <clock_gettime>
 800a128:	e9dd 3500 	ldrd	r3, r5, [sp]
 800a12c:	2d00      	cmp	r5, #0
 800a12e:	db13      	blt.n	800a158 <rcutils_system_time_now+0x40>
 800a130:	9902      	ldr	r1, [sp, #8]
 800a132:	2900      	cmp	r1, #0
 800a134:	db0d      	blt.n	800a152 <rcutils_system_time_now+0x3a>
 800a136:	4e0b      	ldr	r6, [pc, #44]	@ (800a164 <rcutils_system_time_now+0x4c>)
 800a138:	fba3 3206 	umull	r3, r2, r3, r6
 800a13c:	185b      	adds	r3, r3, r1
 800a13e:	fb06 2205 	mla	r2, r6, r5, r2
 800a142:	f04f 0000 	mov.w	r0, #0
 800a146:	eb42 72e1 	adc.w	r2, r2, r1, asr #31
 800a14a:	e9c4 3200 	strd	r3, r2, [r4]
 800a14e:	b004      	add	sp, #16
 800a150:	bd70      	pop	{r4, r5, r6, pc}
 800a152:	ea53 0205 	orrs.w	r2, r3, r5
 800a156:	d1ee      	bne.n	800a136 <rcutils_system_time_now+0x1e>
 800a158:	2002      	movs	r0, #2
 800a15a:	b004      	add	sp, #16
 800a15c:	bd70      	pop	{r4, r5, r6, pc}
 800a15e:	200b      	movs	r0, #11
 800a160:	4770      	bx	lr
 800a162:	bf00      	nop
 800a164:	3b9aca00 	.word	0x3b9aca00

0800a168 <rcutils_steady_time_now>:
 800a168:	b308      	cbz	r0, 800a1ae <rcutils_steady_time_now+0x46>
 800a16a:	b570      	push	{r4, r5, r6, lr}
 800a16c:	b084      	sub	sp, #16
 800a16e:	4604      	mov	r4, r0
 800a170:	4669      	mov	r1, sp
 800a172:	2000      	movs	r0, #0
 800a174:	f7f7 ff4c 	bl	8002010 <clock_gettime>
 800a178:	e9dd 3500 	ldrd	r3, r5, [sp]
 800a17c:	2d00      	cmp	r5, #0
 800a17e:	db13      	blt.n	800a1a8 <rcutils_steady_time_now+0x40>
 800a180:	9902      	ldr	r1, [sp, #8]
 800a182:	2900      	cmp	r1, #0
 800a184:	db0d      	blt.n	800a1a2 <rcutils_steady_time_now+0x3a>
 800a186:	4e0b      	ldr	r6, [pc, #44]	@ (800a1b4 <rcutils_steady_time_now+0x4c>)
 800a188:	fba3 3206 	umull	r3, r2, r3, r6
 800a18c:	185b      	adds	r3, r3, r1
 800a18e:	fb06 2205 	mla	r2, r6, r5, r2
 800a192:	f04f 0000 	mov.w	r0, #0
 800a196:	eb42 72e1 	adc.w	r2, r2, r1, asr #31
 800a19a:	e9c4 3200 	strd	r3, r2, [r4]
 800a19e:	b004      	add	sp, #16
 800a1a0:	bd70      	pop	{r4, r5, r6, pc}
 800a1a2:	ea53 0205 	orrs.w	r2, r3, r5
 800a1a6:	d1ee      	bne.n	800a186 <rcutils_steady_time_now+0x1e>
 800a1a8:	2002      	movs	r0, #2
 800a1aa:	b004      	add	sp, #16
 800a1ac:	bd70      	pop	{r4, r5, r6, pc}
 800a1ae:	200b      	movs	r0, #11
 800a1b0:	4770      	bx	lr
 800a1b2:	bf00      	nop
 800a1b4:	3b9aca00 	.word	0x3b9aca00

0800a1b8 <rmw_get_zero_initialized_init_options>:
 800a1b8:	b510      	push	{r4, lr}
 800a1ba:	2238      	movs	r2, #56	@ 0x38
 800a1bc:	4604      	mov	r4, r0
 800a1be:	2100      	movs	r1, #0
 800a1c0:	f00b f9fe 	bl	80155c0 <memset>
 800a1c4:	f104 0010 	add.w	r0, r4, #16
 800a1c8:	f000 f806 	bl	800a1d8 <rmw_get_default_security_options>
 800a1cc:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800a1d0:	60e3      	str	r3, [r4, #12]
 800a1d2:	4620      	mov	r0, r4
 800a1d4:	bd10      	pop	{r4, pc}
 800a1d6:	bf00      	nop

0800a1d8 <rmw_get_default_security_options>:
 800a1d8:	2200      	movs	r2, #0
 800a1da:	7002      	strb	r2, [r0, #0]
 800a1dc:	6042      	str	r2, [r0, #4]
 800a1de:	4770      	bx	lr

0800a1e0 <rmw_uros_set_custom_transport>:
 800a1e0:	b470      	push	{r4, r5, r6}
 800a1e2:	e9dd 5603 	ldrd	r5, r6, [sp, #12]
 800a1e6:	b162      	cbz	r2, 800a202 <rmw_uros_set_custom_transport+0x22>
 800a1e8:	b15b      	cbz	r3, 800a202 <rmw_uros_set_custom_transport+0x22>
 800a1ea:	b155      	cbz	r5, 800a202 <rmw_uros_set_custom_transport+0x22>
 800a1ec:	b14e      	cbz	r6, 800a202 <rmw_uros_set_custom_transport+0x22>
 800a1ee:	4c06      	ldr	r4, [pc, #24]	@ (800a208 <rmw_uros_set_custom_transport+0x28>)
 800a1f0:	7020      	strb	r0, [r4, #0]
 800a1f2:	e9c4 1201 	strd	r1, r2, [r4, #4]
 800a1f6:	e9c4 3503 	strd	r3, r5, [r4, #12]
 800a1fa:	6166      	str	r6, [r4, #20]
 800a1fc:	2000      	movs	r0, #0
 800a1fe:	bc70      	pop	{r4, r5, r6}
 800a200:	4770      	bx	lr
 800a202:	200b      	movs	r0, #11
 800a204:	bc70      	pop	{r4, r5, r6}
 800a206:	4770      	bx	lr
 800a208:	20009104 	.word	0x20009104

0800a20c <rmw_init_options_init>:
 800a20c:	b084      	sub	sp, #16
 800a20e:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a210:	b083      	sub	sp, #12
 800a212:	ad09      	add	r5, sp, #36	@ 0x24
 800a214:	e885 000e 	stmia.w	r5, {r1, r2, r3}
 800a218:	b130      	cbz	r0, 800a228 <rmw_init_options_init+0x1c>
 800a21a:	4604      	mov	r4, r0
 800a21c:	4628      	mov	r0, r5
 800a21e:	f7ff ff39 	bl	800a094 <rcutils_allocator_is_valid>
 800a222:	b108      	cbz	r0, 800a228 <rmw_init_options_init+0x1c>
 800a224:	68a6      	ldr	r6, [r4, #8]
 800a226:	b12e      	cbz	r6, 800a234 <rmw_init_options_init+0x28>
 800a228:	200b      	movs	r0, #11
 800a22a:	b003      	add	sp, #12
 800a22c:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 800a230:	b004      	add	sp, #16
 800a232:	4770      	bx	lr
 800a234:	2200      	movs	r2, #0
 800a236:	2300      	movs	r3, #0
 800a238:	e9c4 2300 	strd	r2, r3, [r4]
 800a23c:	4b22      	ldr	r3, [pc, #136]	@ (800a2c8 <rmw_init_options_init+0xbc>)
 800a23e:	f8df e098 	ldr.w	lr, [pc, #152]	@ 800a2d8 <rmw_init_options_init+0xcc>
 800a242:	681b      	ldr	r3, [r3, #0]
 800a244:	60a3      	str	r3, [r4, #8]
 800a246:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800a248:	f104 0c20 	add.w	ip, r4, #32
 800a24c:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800a250:	466f      	mov	r7, sp
 800a252:	682b      	ldr	r3, [r5, #0]
 800a254:	f8cc 3000 	str.w	r3, [ip]
 800a258:	4638      	mov	r0, r7
 800a25a:	f8c4 e01c 	str.w	lr, [r4, #28]
 800a25e:	60e6      	str	r6, [r4, #12]
 800a260:	f7ff ffba 	bl	800a1d8 <rmw_get_default_security_options>
 800a264:	e897 0003 	ldmia.w	r7, {r0, r1}
 800a268:	f104 0310 	add.w	r3, r4, #16
 800a26c:	e883 0003 	stmia.w	r3, {r0, r1}
 800a270:	2203      	movs	r2, #3
 800a272:	4816      	ldr	r0, [pc, #88]	@ (800a2cc <rmw_init_options_init+0xc0>)
 800a274:	4916      	ldr	r1, [pc, #88]	@ (800a2d0 <rmw_init_options_init+0xc4>)
 800a276:	7626      	strb	r6, [r4, #24]
 800a278:	f000 fe3c 	bl	800aef4 <rmw_uxrce_init_init_options_impl_memory>
 800a27c:	4813      	ldr	r0, [pc, #76]	@ (800a2cc <rmw_init_options_init+0xc0>)
 800a27e:	f008 fe13 	bl	8012ea8 <get_memory>
 800a282:	b1f0      	cbz	r0, 800a2c2 <rmw_init_options_init+0xb6>
 800a284:	4a13      	ldr	r2, [pc, #76]	@ (800a2d4 <rmw_init_options_init+0xc8>)
 800a286:	6883      	ldr	r3, [r0, #8]
 800a288:	6851      	ldr	r1, [r2, #4]
 800a28a:	7810      	ldrb	r0, [r2, #0]
 800a28c:	6363      	str	r3, [r4, #52]	@ 0x34
 800a28e:	7418      	strb	r0, [r3, #16]
 800a290:	6159      	str	r1, [r3, #20]
 800a292:	68d1      	ldr	r1, [r2, #12]
 800a294:	61d9      	str	r1, [r3, #28]
 800a296:	6911      	ldr	r1, [r2, #16]
 800a298:	6219      	str	r1, [r3, #32]
 800a29a:	6951      	ldr	r1, [r2, #20]
 800a29c:	6892      	ldr	r2, [r2, #8]
 800a29e:	619a      	str	r2, [r3, #24]
 800a2a0:	6259      	str	r1, [r3, #36]	@ 0x24
 800a2a2:	f004 fb77 	bl	800e994 <uxr_nanos>
 800a2a6:	f00a fe21 	bl	8014eec <srand>
 800a2aa:	f00a fe4d 	bl	8014f48 <rand>
 800a2ae:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800a2b0:	6298      	str	r0, [r3, #40]	@ 0x28
 800a2b2:	2800      	cmp	r0, #0
 800a2b4:	d0f9      	beq.n	800a2aa <rmw_init_options_init+0x9e>
 800a2b6:	2000      	movs	r0, #0
 800a2b8:	b003      	add	sp, #12
 800a2ba:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 800a2be:	b004      	add	sp, #16
 800a2c0:	4770      	bx	lr
 800a2c2:	2001      	movs	r0, #1
 800a2c4:	e7b1      	b.n	800a22a <rmw_init_options_init+0x1e>
 800a2c6:	bf00      	nop
 800a2c8:	0801705c 	.word	0x0801705c
 800a2cc:	2000da1c 	.word	0x2000da1c
 800a2d0:	200092b8 	.word	0x200092b8
 800a2d4:	20009104 	.word	0x20009104
 800a2d8:	08016708 	.word	0x08016708

0800a2dc <rmw_init_options_copy>:
 800a2dc:	b570      	push	{r4, r5, r6, lr}
 800a2de:	b158      	cbz	r0, 800a2f8 <rmw_init_options_copy+0x1c>
 800a2e0:	460d      	mov	r5, r1
 800a2e2:	b149      	cbz	r1, 800a2f8 <rmw_init_options_copy+0x1c>
 800a2e4:	4604      	mov	r4, r0
 800a2e6:	6880      	ldr	r0, [r0, #8]
 800a2e8:	b120      	cbz	r0, 800a2f4 <rmw_init_options_copy+0x18>
 800a2ea:	4b1e      	ldr	r3, [pc, #120]	@ (800a364 <rmw_init_options_copy+0x88>)
 800a2ec:	6819      	ldr	r1, [r3, #0]
 800a2ee:	f7f5 ff77 	bl	80001e0 <strcmp>
 800a2f2:	bb90      	cbnz	r0, 800a35a <rmw_init_options_copy+0x7e>
 800a2f4:	68ab      	ldr	r3, [r5, #8]
 800a2f6:	b113      	cbz	r3, 800a2fe <rmw_init_options_copy+0x22>
 800a2f8:	250b      	movs	r5, #11
 800a2fa:	4628      	mov	r0, r5
 800a2fc:	bd70      	pop	{r4, r5, r6, pc}
 800a2fe:	4623      	mov	r3, r4
 800a300:	462a      	mov	r2, r5
 800a302:	f104 0630 	add.w	r6, r4, #48	@ 0x30
 800a306:	f8d3 c000 	ldr.w	ip, [r3]
 800a30a:	6858      	ldr	r0, [r3, #4]
 800a30c:	6899      	ldr	r1, [r3, #8]
 800a30e:	f8d3 e00c 	ldr.w	lr, [r3, #12]
 800a312:	f8c2 e00c 	str.w	lr, [r2, #12]
 800a316:	3310      	adds	r3, #16
 800a318:	42b3      	cmp	r3, r6
 800a31a:	f8c2 c000 	str.w	ip, [r2]
 800a31e:	6050      	str	r0, [r2, #4]
 800a320:	6091      	str	r1, [r2, #8]
 800a322:	f102 0210 	add.w	r2, r2, #16
 800a326:	d1ee      	bne.n	800a306 <rmw_init_options_copy+0x2a>
 800a328:	6819      	ldr	r1, [r3, #0]
 800a32a:	685b      	ldr	r3, [r3, #4]
 800a32c:	480e      	ldr	r0, [pc, #56]	@ (800a368 <rmw_init_options_copy+0x8c>)
 800a32e:	6053      	str	r3, [r2, #4]
 800a330:	6011      	str	r1, [r2, #0]
 800a332:	f008 fdb9 	bl	8012ea8 <get_memory>
 800a336:	b198      	cbz	r0, 800a360 <rmw_init_options_copy+0x84>
 800a338:	6883      	ldr	r3, [r0, #8]
 800a33a:	636b      	str	r3, [r5, #52]	@ 0x34
 800a33c:	6b62      	ldr	r2, [r4, #52]	@ 0x34
 800a33e:	f102 0c10 	add.w	ip, r2, #16
 800a342:	f103 0410 	add.w	r4, r3, #16
 800a346:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800a34a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800a34c:	e89c 0007 	ldmia.w	ip, {r0, r1, r2}
 800a350:	2500      	movs	r5, #0
 800a352:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800a356:	4628      	mov	r0, r5
 800a358:	bd70      	pop	{r4, r5, r6, pc}
 800a35a:	250c      	movs	r5, #12
 800a35c:	4628      	mov	r0, r5
 800a35e:	bd70      	pop	{r4, r5, r6, pc}
 800a360:	2501      	movs	r5, #1
 800a362:	e7ca      	b.n	800a2fa <rmw_init_options_copy+0x1e>
 800a364:	0801705c 	.word	0x0801705c
 800a368:	2000da1c 	.word	0x2000da1c

0800a36c <rmw_init_options_fini>:
 800a36c:	2800      	cmp	r0, #0
 800a36e:	d03d      	beq.n	800a3ec <rmw_init_options_fini+0x80>
 800a370:	b510      	push	{r4, lr}
 800a372:	4604      	mov	r4, r0
 800a374:	b08e      	sub	sp, #56	@ 0x38
 800a376:	3020      	adds	r0, #32
 800a378:	f7ff fe8c 	bl	800a094 <rcutils_allocator_is_valid>
 800a37c:	b360      	cbz	r0, 800a3d8 <rmw_init_options_fini+0x6c>
 800a37e:	68a0      	ldr	r0, [r4, #8]
 800a380:	b120      	cbz	r0, 800a38c <rmw_init_options_fini+0x20>
 800a382:	4b1c      	ldr	r3, [pc, #112]	@ (800a3f4 <rmw_init_options_fini+0x88>)
 800a384:	6819      	ldr	r1, [r3, #0]
 800a386:	f7f5 ff2b 	bl	80001e0 <strcmp>
 800a38a:	bb68      	cbnz	r0, 800a3e8 <rmw_init_options_fini+0x7c>
 800a38c:	4b1a      	ldr	r3, [pc, #104]	@ (800a3f8 <rmw_init_options_fini+0x8c>)
 800a38e:	6819      	ldr	r1, [r3, #0]
 800a390:	b331      	cbz	r1, 800a3e0 <rmw_init_options_fini+0x74>
 800a392:	6b62      	ldr	r2, [r4, #52]	@ 0x34
 800a394:	e001      	b.n	800a39a <rmw_init_options_fini+0x2e>
 800a396:	6849      	ldr	r1, [r1, #4]
 800a398:	b311      	cbz	r1, 800a3e0 <rmw_init_options_fini+0x74>
 800a39a:	688b      	ldr	r3, [r1, #8]
 800a39c:	429a      	cmp	r2, r3
 800a39e:	d1fa      	bne.n	800a396 <rmw_init_options_fini+0x2a>
 800a3a0:	4815      	ldr	r0, [pc, #84]	@ (800a3f8 <rmw_init_options_fini+0x8c>)
 800a3a2:	f008 fd91 	bl	8012ec8 <put_memory>
 800a3a6:	4668      	mov	r0, sp
 800a3a8:	f7ff ff06 	bl	800a1b8 <rmw_get_zero_initialized_init_options>
 800a3ac:	46ee      	mov	lr, sp
 800a3ae:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800a3b2:	46a4      	mov	ip, r4
 800a3b4:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800a3b8:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800a3bc:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800a3c0:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800a3c4:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800a3c8:	e89e 0003 	ldmia.w	lr, {r0, r1}
 800a3cc:	e88c 0003 	stmia.w	ip, {r0, r1}
 800a3d0:	2300      	movs	r3, #0
 800a3d2:	4618      	mov	r0, r3
 800a3d4:	b00e      	add	sp, #56	@ 0x38
 800a3d6:	bd10      	pop	{r4, pc}
 800a3d8:	230b      	movs	r3, #11
 800a3da:	4618      	mov	r0, r3
 800a3dc:	b00e      	add	sp, #56	@ 0x38
 800a3de:	bd10      	pop	{r4, pc}
 800a3e0:	2301      	movs	r3, #1
 800a3e2:	4618      	mov	r0, r3
 800a3e4:	b00e      	add	sp, #56	@ 0x38
 800a3e6:	bd10      	pop	{r4, pc}
 800a3e8:	230c      	movs	r3, #12
 800a3ea:	e7f2      	b.n	800a3d2 <rmw_init_options_fini+0x66>
 800a3ec:	230b      	movs	r3, #11
 800a3ee:	4618      	mov	r0, r3
 800a3f0:	4770      	bx	lr
 800a3f2:	bf00      	nop
 800a3f4:	0801705c 	.word	0x0801705c
 800a3f8:	2000da1c 	.word	0x2000da1c

0800a3fc <rmw_init>:
 800a3fc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800a400:	b083      	sub	sp, #12
 800a402:	2800      	cmp	r0, #0
 800a404:	f000 80d3 	beq.w	800a5ae <rmw_init+0x1b2>
 800a408:	460e      	mov	r6, r1
 800a40a:	2900      	cmp	r1, #0
 800a40c:	f000 80cf 	beq.w	800a5ae <rmw_init+0x1b2>
 800a410:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 800a412:	4605      	mov	r5, r0
 800a414:	2b00      	cmp	r3, #0
 800a416:	f000 80ca 	beq.w	800a5ae <rmw_init+0x1b2>
 800a41a:	4b78      	ldr	r3, [pc, #480]	@ (800a5fc <rmw_init+0x200>)
 800a41c:	6880      	ldr	r0, [r0, #8]
 800a41e:	681f      	ldr	r7, [r3, #0]
 800a420:	b128      	cbz	r0, 800a42e <rmw_init+0x32>
 800a422:	4639      	mov	r1, r7
 800a424:	f7f5 fedc 	bl	80001e0 <strcmp>
 800a428:	2800      	cmp	r0, #0
 800a42a:	f040 80ca 	bne.w	800a5c2 <rmw_init+0x1c6>
 800a42e:	e9d5 2300 	ldrd	r2, r3, [r5]
 800a432:	4c73      	ldr	r4, [pc, #460]	@ (800a600 <rmw_init+0x204>)
 800a434:	4973      	ldr	r1, [pc, #460]	@ (800a604 <rmw_init+0x208>)
 800a436:	4874      	ldr	r0, [pc, #464]	@ (800a608 <rmw_init+0x20c>)
 800a438:	60b7      	str	r7, [r6, #8]
 800a43a:	e9c6 2300 	strd	r2, r3, [r6]
 800a43e:	68eb      	ldr	r3, [r5, #12]
 800a440:	64b3      	str	r3, [r6, #72]	@ 0x48
 800a442:	2201      	movs	r2, #1
 800a444:	f000 fcf6 	bl	800ae34 <rmw_uxrce_init_session_memory>
 800a448:	4620      	mov	r0, r4
 800a44a:	4970      	ldr	r1, [pc, #448]	@ (800a60c <rmw_init+0x210>)
 800a44c:	2204      	movs	r2, #4
 800a44e:	f000 fd31 	bl	800aeb4 <rmw_uxrce_init_static_input_buffer_memory>
 800a452:	f04f 0800 	mov.w	r8, #0
 800a456:	486c      	ldr	r0, [pc, #432]	@ (800a608 <rmw_init+0x20c>)
 800a458:	f884 800d 	strb.w	r8, [r4, #13]
 800a45c:	f008 fd24 	bl	8012ea8 <get_memory>
 800a460:	2800      	cmp	r0, #0
 800a462:	f000 80a9 	beq.w	800a5b8 <rmw_init+0x1bc>
 800a466:	6884      	ldr	r4, [r0, #8]
 800a468:	6b68      	ldr	r0, [r5, #52]	@ 0x34
 800a46a:	6a41      	ldr	r1, [r0, #36]	@ 0x24
 800a46c:	f890 c010 	ldrb.w	ip, [r0, #16]
 800a470:	e9d0 2306 	ldrd	r2, r3, [r0, #24]
 800a474:	9101      	str	r1, [sp, #4]
 800a476:	6a00      	ldr	r0, [r0, #32]
 800a478:	9000      	str	r0, [sp, #0]
 800a47a:	f104 0910 	add.w	r9, r4, #16
 800a47e:	4661      	mov	r1, ip
 800a480:	4648      	mov	r0, r9
 800a482:	f002 fa23 	bl	800c8cc <uxr_set_custom_transport_callbacks>
 800a486:	f504 5380 	add.w	r3, r4, #4096	@ 0x1000
 800a48a:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800a48e:	e9c4 22e3 	strd	r2, r2, [r4, #908]	@ 0x38c
 800a492:	f504 725e 	add.w	r2, r4, #888	@ 0x378
 800a496:	e9c4 22e1 	strd	r2, r2, [r4, #900]	@ 0x384
 800a49a:	495d      	ldr	r1, [pc, #372]	@ (800a610 <rmw_init+0x214>)
 800a49c:	f8c3 8594 	str.w	r8, [r3, #1428]	@ 0x594
 800a4a0:	f8c3 8598 	str.w	r8, [r3, #1432]	@ 0x598
 800a4a4:	f8c3 859c 	str.w	r8, [r3, #1436]	@ 0x59c
 800a4a8:	f8c3 85a0 	str.w	r8, [r3, #1440]	@ 0x5a0
 800a4ac:	4859      	ldr	r0, [pc, #356]	@ (800a614 <rmw_init+0x218>)
 800a4ae:	e9c4 78da 	strd	r7, r8, [r4, #872]	@ 0x368
 800a4b2:	2201      	movs	r2, #1
 800a4b4:	64f4      	str	r4, [r6, #76]	@ 0x4c
 800a4b6:	f000 fc9d 	bl	800adf4 <rmw_uxrce_init_node_memory>
 800a4ba:	4957      	ldr	r1, [pc, #348]	@ (800a618 <rmw_init+0x21c>)
 800a4bc:	4857      	ldr	r0, [pc, #348]	@ (800a61c <rmw_init+0x220>)
 800a4be:	2205      	movs	r2, #5
 800a4c0:	f000 fc78 	bl	800adb4 <rmw_uxrce_init_subscription_memory>
 800a4c4:	4956      	ldr	r1, [pc, #344]	@ (800a620 <rmw_init+0x224>)
 800a4c6:	4857      	ldr	r0, [pc, #348]	@ (800a624 <rmw_init+0x228>)
 800a4c8:	220a      	movs	r2, #10
 800a4ca:	f000 fc53 	bl	800ad74 <rmw_uxrce_init_publisher_memory>
 800a4ce:	4956      	ldr	r1, [pc, #344]	@ (800a628 <rmw_init+0x22c>)
 800a4d0:	4856      	ldr	r0, [pc, #344]	@ (800a62c <rmw_init+0x230>)
 800a4d2:	2201      	movs	r2, #1
 800a4d4:	f000 fc0e 	bl	800acf4 <rmw_uxrce_init_service_memory>
 800a4d8:	4955      	ldr	r1, [pc, #340]	@ (800a630 <rmw_init+0x234>)
 800a4da:	4856      	ldr	r0, [pc, #344]	@ (800a634 <rmw_init+0x238>)
 800a4dc:	2201      	movs	r2, #1
 800a4de:	f000 fc29 	bl	800ad34 <rmw_uxrce_init_client_memory>
 800a4e2:	4955      	ldr	r1, [pc, #340]	@ (800a638 <rmw_init+0x23c>)
 800a4e4:	4855      	ldr	r0, [pc, #340]	@ (800a63c <rmw_init+0x240>)
 800a4e6:	220f      	movs	r2, #15
 800a4e8:	f000 fcc4 	bl	800ae74 <rmw_uxrce_init_topic_memory>
 800a4ec:	4954      	ldr	r1, [pc, #336]	@ (800a640 <rmw_init+0x244>)
 800a4ee:	4855      	ldr	r0, [pc, #340]	@ (800a644 <rmw_init+0x248>)
 800a4f0:	2203      	movs	r2, #3
 800a4f2:	f000 fcff 	bl	800aef4 <rmw_uxrce_init_init_options_impl_memory>
 800a4f6:	4954      	ldr	r1, [pc, #336]	@ (800a648 <rmw_init+0x24c>)
 800a4f8:	4854      	ldr	r0, [pc, #336]	@ (800a64c <rmw_init+0x250>)
 800a4fa:	2204      	movs	r2, #4
 800a4fc:	f000 fd1a 	bl	800af34 <rmw_uxrce_init_wait_set_memory>
 800a500:	4953      	ldr	r1, [pc, #332]	@ (800a650 <rmw_init+0x254>)
 800a502:	4854      	ldr	r0, [pc, #336]	@ (800a654 <rmw_init+0x258>)
 800a504:	2204      	movs	r2, #4
 800a506:	f000 fd35 	bl	800af74 <rmw_uxrce_init_guard_condition_memory>
 800a50a:	6b69      	ldr	r1, [r5, #52]	@ 0x34
 800a50c:	6cf0      	ldr	r0, [r6, #76]	@ 0x4c
 800a50e:	4642      	mov	r2, r8
 800a510:	f000 fbd8 	bl	800acc4 <rmw_uxrce_transport_init>
 800a514:	4607      	mov	r7, r0
 800a516:	2800      	cmp	r0, #0
 800a518:	d158      	bne.n	800a5cc <rmw_init+0x1d0>
 800a51a:	6b6b      	ldr	r3, [r5, #52]	@ 0x34
 800a51c:	f504 7528 	add.w	r5, r4, #672	@ 0x2a0
 800a520:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800a522:	f504 7122 	add.w	r1, r4, #648	@ 0x288
 800a526:	4628      	mov	r0, r5
 800a528:	f002 fc06 	bl	800cd38 <uxr_init_session>
 800a52c:	494a      	ldr	r1, [pc, #296]	@ (800a658 <rmw_init+0x25c>)
 800a52e:	4622      	mov	r2, r4
 800a530:	4628      	mov	r0, r5
 800a532:	f002 fc25 	bl	800cd80 <uxr_set_topic_callback>
 800a536:	4949      	ldr	r1, [pc, #292]	@ (800a65c <rmw_init+0x260>)
 800a538:	463a      	mov	r2, r7
 800a53a:	4628      	mov	r0, r5
 800a53c:	f002 fc1c 	bl	800cd78 <uxr_set_status_callback>
 800a540:	4947      	ldr	r1, [pc, #284]	@ (800a660 <rmw_init+0x264>)
 800a542:	463a      	mov	r2, r7
 800a544:	4628      	mov	r0, r5
 800a546:	f002 fc1f 	bl	800cd88 <uxr_set_request_callback>
 800a54a:	4946      	ldr	r1, [pc, #280]	@ (800a664 <rmw_init+0x268>)
 800a54c:	463a      	mov	r2, r7
 800a54e:	4628      	mov	r0, r5
 800a550:	f002 fc1e 	bl	800cd90 <uxr_set_reply_callback>
 800a554:	f8b4 2298 	ldrh.w	r2, [r4, #664]	@ 0x298
 800a558:	2304      	movs	r3, #4
 800a55a:	0092      	lsls	r2, r2, #2
 800a55c:	f504 7165 	add.w	r1, r4, #916	@ 0x394
 800a560:	4628      	mov	r0, r5
 800a562:	f002 fc53 	bl	800ce0c <uxr_create_input_reliable_stream>
 800a566:	f8b4 2298 	ldrh.w	r2, [r4, #664]	@ 0x298
 800a56a:	f8c4 0374 	str.w	r0, [r4, #884]	@ 0x374
 800a56e:	0092      	lsls	r2, r2, #2
 800a570:	2304      	movs	r3, #4
 800a572:	f604 3194 	addw	r1, r4, #2964	@ 0xb94
 800a576:	4628      	mov	r0, r5
 800a578:	f002 fc20 	bl	800cdbc <uxr_create_output_reliable_stream>
 800a57c:	f8c4 0378 	str.w	r0, [r4, #888]	@ 0x378
 800a580:	4628      	mov	r0, r5
 800a582:	f002 fc3d 	bl	800ce00 <uxr_create_input_best_effort_stream>
 800a586:	f504 519c 	add.w	r1, r4, #4992	@ 0x1380
 800a58a:	f8c4 0380 	str.w	r0, [r4, #896]	@ 0x380
 800a58e:	f8b4 2298 	ldrh.w	r2, [r4, #664]	@ 0x298
 800a592:	3114      	adds	r1, #20
 800a594:	4628      	mov	r0, r5
 800a596:	f002 fbff 	bl	800cd98 <uxr_create_output_best_effort_stream>
 800a59a:	f8c4 037c 	str.w	r0, [r4, #892]	@ 0x37c
 800a59e:	4628      	mov	r0, r5
 800a5a0:	f003 f98a 	bl	800d8b8 <uxr_create_session>
 800a5a4:	b1f8      	cbz	r0, 800a5e6 <rmw_init+0x1ea>
 800a5a6:	4638      	mov	r0, r7
 800a5a8:	b003      	add	sp, #12
 800a5aa:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a5ae:	270b      	movs	r7, #11
 800a5b0:	4638      	mov	r0, r7
 800a5b2:	b003      	add	sp, #12
 800a5b4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a5b8:	2701      	movs	r7, #1
 800a5ba:	4638      	mov	r0, r7
 800a5bc:	b003      	add	sp, #12
 800a5be:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a5c2:	270c      	movs	r7, #12
 800a5c4:	4638      	mov	r0, r7
 800a5c6:	b003      	add	sp, #12
 800a5c8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a5cc:	4648      	mov	r0, r9
 800a5ce:	f002 f9bf 	bl	800c950 <uxr_close_custom_transport>
 800a5d2:	480d      	ldr	r0, [pc, #52]	@ (800a608 <rmw_init+0x20c>)
 800a5d4:	4621      	mov	r1, r4
 800a5d6:	f008 fc77 	bl	8012ec8 <put_memory>
 800a5da:	4638      	mov	r0, r7
 800a5dc:	f8c6 804c 	str.w	r8, [r6, #76]	@ 0x4c
 800a5e0:	b003      	add	sp, #12
 800a5e2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a5e6:	4648      	mov	r0, r9
 800a5e8:	f002 f9b2 	bl	800c950 <uxr_close_custom_transport>
 800a5ec:	4806      	ldr	r0, [pc, #24]	@ (800a608 <rmw_init+0x20c>)
 800a5ee:	4621      	mov	r1, r4
 800a5f0:	f008 fc6a 	bl	8012ec8 <put_memory>
 800a5f4:	64f7      	str	r7, [r6, #76]	@ 0x4c
 800a5f6:	2701      	movs	r7, #1
 800a5f8:	e7d5      	b.n	800a5a6 <rmw_init+0x1aa>
 800a5fa:	bf00      	nop
 800a5fc:	0801705c 	.word	0x0801705c
 800a600:	2000da6c 	.word	0x2000da6c
 800a604:	20009d18 	.word	0x20009d18
 800a608:	2000da5c 	.word	0x2000da5c
 800a60c:	2000b2c0 	.word	0x2000b2c0
 800a610:	2000933c 	.word	0x2000933c
 800a614:	2000da2c 	.word	0x2000da2c
 800a618:	2000d3c0 	.word	0x2000d3c0
 800a61c:	2000da7c 	.word	0x2000da7c
 800a620:	200093e0 	.word	0x200093e0
 800a624:	2000da3c 	.word	0x2000da3c
 800a628:	20009c50 	.word	0x20009c50
 800a62c:	2000da4c 	.word	0x2000da4c
 800a630:	20009170 	.word	0x20009170
 800a634:	2000915c 	.word	0x2000915c
 800a638:	2000d7f8 	.word	0x2000d7f8
 800a63c:	2000da8c 	.word	0x2000da8c
 800a640:	200092b8 	.word	0x200092b8
 800a644:	2000da1c 	.word	0x2000da1c
 800a648:	2000d99c 	.word	0x2000d99c
 800a64c:	2000da9c 	.word	0x2000da9c
 800a650:	20009238 	.word	0x20009238
 800a654:	2000da0c 	.word	0x2000da0c
 800a658:	08012ce1 	.word	0x08012ce1
 800a65c:	08012cd9 	.word	0x08012cd9
 800a660:	08012d79 	.word	0x08012d79
 800a664:	08012e15 	.word	0x08012e15

0800a668 <rmw_context_fini>:
 800a668:	4b17      	ldr	r3, [pc, #92]	@ (800a6c8 <rmw_context_fini+0x60>)
 800a66a:	6cc1      	ldr	r1, [r0, #76]	@ 0x4c
 800a66c:	b570      	push	{r4, r5, r6, lr}
 800a66e:	681c      	ldr	r4, [r3, #0]
 800a670:	4605      	mov	r5, r0
 800a672:	b334      	cbz	r4, 800a6c2 <rmw_context_fini+0x5a>
 800a674:	2600      	movs	r6, #0
 800a676:	e9d4 4001 	ldrd	r4, r0, [r4, #4]
 800a67a:	6902      	ldr	r2, [r0, #16]
 800a67c:	428a      	cmp	r2, r1
 800a67e:	d018      	beq.n	800a6b2 <rmw_context_fini+0x4a>
 800a680:	2c00      	cmp	r4, #0
 800a682:	d1f8      	bne.n	800a676 <rmw_context_fini+0xe>
 800a684:	b189      	cbz	r1, 800a6aa <rmw_context_fini+0x42>
 800a686:	f8d1 3388 	ldr.w	r3, [r1, #904]	@ 0x388
 800a68a:	789b      	ldrb	r3, [r3, #2]
 800a68c:	2b01      	cmp	r3, #1
 800a68e:	f501 7028 	add.w	r0, r1, #672	@ 0x2a0
 800a692:	bf14      	ite	ne
 800a694:	210a      	movne	r1, #10
 800a696:	2100      	moveq	r1, #0
 800a698:	f003 f8e6 	bl	800d868 <uxr_delete_session_retries>
 800a69c:	6ce8      	ldr	r0, [r5, #76]	@ 0x4c
 800a69e:	f000 fc89 	bl	800afb4 <rmw_uxrce_fini_session_memory>
 800a6a2:	6ce8      	ldr	r0, [r5, #76]	@ 0x4c
 800a6a4:	3010      	adds	r0, #16
 800a6a6:	f002 f953 	bl	800c950 <uxr_close_custom_transport>
 800a6aa:	2300      	movs	r3, #0
 800a6ac:	64eb      	str	r3, [r5, #76]	@ 0x4c
 800a6ae:	4630      	mov	r0, r6
 800a6b0:	bd70      	pop	{r4, r5, r6, pc}
 800a6b2:	3018      	adds	r0, #24
 800a6b4:	f000 f89c 	bl	800a7f0 <rmw_destroy_node>
 800a6b8:	6ce9      	ldr	r1, [r5, #76]	@ 0x4c
 800a6ba:	4606      	mov	r6, r0
 800a6bc:	2c00      	cmp	r4, #0
 800a6be:	d1da      	bne.n	800a676 <rmw_context_fini+0xe>
 800a6c0:	e7e0      	b.n	800a684 <rmw_context_fini+0x1c>
 800a6c2:	4626      	mov	r6, r4
 800a6c4:	e7de      	b.n	800a684 <rmw_context_fini+0x1c>
 800a6c6:	bf00      	nop
 800a6c8:	2000da2c 	.word	0x2000da2c

0800a6cc <create_node>:
 800a6cc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800a6d0:	b083      	sub	sp, #12
 800a6d2:	2b00      	cmp	r3, #0
 800a6d4:	d05f      	beq.n	800a796 <create_node+0xca>
 800a6d6:	4606      	mov	r6, r0
 800a6d8:	4835      	ldr	r0, [pc, #212]	@ (800a7b0 <create_node+0xe4>)
 800a6da:	460f      	mov	r7, r1
 800a6dc:	4690      	mov	r8, r2
 800a6de:	461d      	mov	r5, r3
 800a6e0:	f008 fbe2 	bl	8012ea8 <get_memory>
 800a6e4:	2800      	cmp	r0, #0
 800a6e6:	d056      	beq.n	800a796 <create_node+0xca>
 800a6e8:	6884      	ldr	r4, [r0, #8]
 800a6ea:	6ceb      	ldr	r3, [r5, #76]	@ 0x4c
 800a6ec:	6123      	str	r3, [r4, #16]
 800a6ee:	f008 fc43 	bl	8012f78 <rmw_get_implementation_identifier>
 800a6f2:	f104 092c 	add.w	r9, r4, #44	@ 0x2c
 800a6f6:	e9c4 0406 	strd	r0, r4, [r4, #24]
 800a6fa:	f8c4 9020 	str.w	r9, [r4, #32]
 800a6fe:	4630      	mov	r0, r6
 800a700:	f7f5 fd78 	bl	80001f4 <strlen>
 800a704:	1c42      	adds	r2, r0, #1
 800a706:	2a3c      	cmp	r2, #60	@ 0x3c
 800a708:	f104 0518 	add.w	r5, r4, #24
 800a70c:	d840      	bhi.n	800a790 <create_node+0xc4>
 800a70e:	4648      	mov	r0, r9
 800a710:	4631      	mov	r1, r6
 800a712:	f104 0968 	add.w	r9, r4, #104	@ 0x68
 800a716:	f00b f81c 	bl	8015752 <memcpy>
 800a71a:	f8c4 9024 	str.w	r9, [r4, #36]	@ 0x24
 800a71e:	4638      	mov	r0, r7
 800a720:	f7f5 fd68 	bl	80001f4 <strlen>
 800a724:	1c42      	adds	r2, r0, #1
 800a726:	2a3c      	cmp	r2, #60	@ 0x3c
 800a728:	d832      	bhi.n	800a790 <create_node+0xc4>
 800a72a:	4639      	mov	r1, r7
 800a72c:	4648      	mov	r0, r9
 800a72e:	f00b f810 	bl	8015752 <memcpy>
 800a732:	6923      	ldr	r3, [r4, #16]
 800a734:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800a738:	2101      	movs	r1, #1
 800a73a:	f8b3 0594 	ldrh.w	r0, [r3, #1428]	@ 0x594
 800a73e:	1842      	adds	r2, r0, r1
 800a740:	f8a3 2594 	strh.w	r2, [r3, #1428]	@ 0x594
 800a744:	f002 f908 	bl	800c958 <uxr_object_id>
 800a748:	6160      	str	r0, [r4, #20]
 800a74a:	783b      	ldrb	r3, [r7, #0]
 800a74c:	2b2f      	cmp	r3, #47	@ 0x2f
 800a74e:	d127      	bne.n	800a7a0 <create_node+0xd4>
 800a750:	787b      	ldrb	r3, [r7, #1]
 800a752:	bb2b      	cbnz	r3, 800a7a0 <create_node+0xd4>
 800a754:	4a17      	ldr	r2, [pc, #92]	@ (800a7b4 <create_node+0xe8>)
 800a756:	4818      	ldr	r0, [pc, #96]	@ (800a7b8 <create_node+0xec>)
 800a758:	4633      	mov	r3, r6
 800a75a:	213c      	movs	r1, #60	@ 0x3c
 800a75c:	f00a fe56 	bl	801540c <sniprintf>
 800a760:	6920      	ldr	r0, [r4, #16]
 800a762:	4915      	ldr	r1, [pc, #84]	@ (800a7b8 <create_node+0xec>)
 800a764:	f8d0 2384 	ldr.w	r2, [r0, #900]	@ 0x384
 800a768:	9100      	str	r1, [sp, #0]
 800a76a:	2106      	movs	r1, #6
 800a76c:	9101      	str	r1, [sp, #4]
 800a76e:	6811      	ldr	r1, [r2, #0]
 800a770:	6962      	ldr	r2, [r4, #20]
 800a772:	fa1f f388 	uxth.w	r3, r8
 800a776:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800a77a:	f001 ff1b 	bl	800c5b4 <uxr_buffer_create_participant_bin>
 800a77e:	4602      	mov	r2, r0
 800a780:	6920      	ldr	r0, [r4, #16]
 800a782:	f8d0 338c 	ldr.w	r3, [r0, #908]	@ 0x38c
 800a786:	f8d0 1384 	ldr.w	r1, [r0, #900]	@ 0x384
 800a78a:	f000 fd8b 	bl	800b2a4 <run_xrce_session>
 800a78e:	b918      	cbnz	r0, 800a798 <create_node+0xcc>
 800a790:	4628      	mov	r0, r5
 800a792:	f000 fc15 	bl	800afc0 <rmw_uxrce_fini_node_memory>
 800a796:	2500      	movs	r5, #0
 800a798:	4628      	mov	r0, r5
 800a79a:	b003      	add	sp, #12
 800a79c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a7a0:	4a06      	ldr	r2, [pc, #24]	@ (800a7bc <create_node+0xf0>)
 800a7a2:	9600      	str	r6, [sp, #0]
 800a7a4:	463b      	mov	r3, r7
 800a7a6:	213c      	movs	r1, #60	@ 0x3c
 800a7a8:	4803      	ldr	r0, [pc, #12]	@ (800a7b8 <create_node+0xec>)
 800a7aa:	f00a fe2f 	bl	801540c <sniprintf>
 800a7ae:	e7d7      	b.n	800a760 <create_node+0x94>
 800a7b0:	2000da2c 	.word	0x2000da2c
 800a7b4:	08016748 	.word	0x08016748
 800a7b8:	20009120 	.word	0x20009120
 800a7bc:	0801670c 	.word	0x0801670c

0800a7c0 <rmw_create_node>:
 800a7c0:	b199      	cbz	r1, 800a7ea <rmw_create_node+0x2a>
 800a7c2:	780b      	ldrb	r3, [r1, #0]
 800a7c4:	468c      	mov	ip, r1
 800a7c6:	b183      	cbz	r3, 800a7ea <rmw_create_node+0x2a>
 800a7c8:	b410      	push	{r4}
 800a7ca:	4614      	mov	r4, r2
 800a7cc:	b14a      	cbz	r2, 800a7e2 <rmw_create_node+0x22>
 800a7ce:	7813      	ldrb	r3, [r2, #0]
 800a7d0:	b13b      	cbz	r3, 800a7e2 <rmw_create_node+0x22>
 800a7d2:	6c82      	ldr	r2, [r0, #72]	@ 0x48
 800a7d4:	4603      	mov	r3, r0
 800a7d6:	4621      	mov	r1, r4
 800a7d8:	4660      	mov	r0, ip
 800a7da:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a7de:	f7ff bf75 	b.w	800a6cc <create_node>
 800a7e2:	2000      	movs	r0, #0
 800a7e4:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a7e8:	4770      	bx	lr
 800a7ea:	2000      	movs	r0, #0
 800a7ec:	4770      	bx	lr
 800a7ee:	bf00      	nop

0800a7f0 <rmw_destroy_node>:
 800a7f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a7f2:	b328      	cbz	r0, 800a840 <rmw_destroy_node+0x50>
 800a7f4:	4607      	mov	r7, r0
 800a7f6:	6800      	ldr	r0, [r0, #0]
 800a7f8:	b120      	cbz	r0, 800a804 <rmw_destroy_node+0x14>
 800a7fa:	4b36      	ldr	r3, [pc, #216]	@ (800a8d4 <rmw_destroy_node+0xe4>)
 800a7fc:	6819      	ldr	r1, [r3, #0]
 800a7fe:	f7f5 fcef 	bl	80001e0 <strcmp>
 800a802:	b9e8      	cbnz	r0, 800a840 <rmw_destroy_node+0x50>
 800a804:	687d      	ldr	r5, [r7, #4]
 800a806:	b1dd      	cbz	r5, 800a840 <rmw_destroy_node+0x50>
 800a808:	4b33      	ldr	r3, [pc, #204]	@ (800a8d8 <rmw_destroy_node+0xe8>)
 800a80a:	681c      	ldr	r4, [r3, #0]
 800a80c:	2c00      	cmp	r4, #0
 800a80e:	d05f      	beq.n	800a8d0 <rmw_destroy_node+0xe0>
 800a810:	2600      	movs	r6, #0
 800a812:	e9d4 4101 	ldrd	r4, r1, [r4, #4]
 800a816:	f8d1 3080 	ldr.w	r3, [r1, #128]	@ 0x80
 800a81a:	429d      	cmp	r5, r3
 800a81c:	d013      	beq.n	800a846 <rmw_destroy_node+0x56>
 800a81e:	2c00      	cmp	r4, #0
 800a820:	d1f7      	bne.n	800a812 <rmw_destroy_node+0x22>
 800a822:	4b2e      	ldr	r3, [pc, #184]	@ (800a8dc <rmw_destroy_node+0xec>)
 800a824:	681c      	ldr	r4, [r3, #0]
 800a826:	b1c4      	cbz	r4, 800a85a <rmw_destroy_node+0x6a>
 800a828:	e9d4 4101 	ldrd	r4, r1, [r4, #4]
 800a82c:	6a0b      	ldr	r3, [r1, #32]
 800a82e:	429d      	cmp	r5, r3
 800a830:	d1f9      	bne.n	800a826 <rmw_destroy_node+0x36>
 800a832:	317c      	adds	r1, #124	@ 0x7c
 800a834:	4638      	mov	r0, r7
 800a836:	f000 f9e5 	bl	800ac04 <rmw_destroy_subscription>
 800a83a:	2801      	cmp	r0, #1
 800a83c:	4606      	mov	r6, r0
 800a83e:	d1f2      	bne.n	800a826 <rmw_destroy_node+0x36>
 800a840:	2601      	movs	r6, #1
 800a842:	4630      	mov	r0, r6
 800a844:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a846:	3184      	adds	r1, #132	@ 0x84
 800a848:	4638      	mov	r0, r7
 800a84a:	f000 f853 	bl	800a8f4 <rmw_destroy_publisher>
 800a84e:	2801      	cmp	r0, #1
 800a850:	4606      	mov	r6, r0
 800a852:	d0f5      	beq.n	800a840 <rmw_destroy_node+0x50>
 800a854:	2c00      	cmp	r4, #0
 800a856:	d1dc      	bne.n	800a812 <rmw_destroy_node+0x22>
 800a858:	e7e3      	b.n	800a822 <rmw_destroy_node+0x32>
 800a85a:	4b21      	ldr	r3, [pc, #132]	@ (800a8e0 <rmw_destroy_node+0xf0>)
 800a85c:	681c      	ldr	r4, [r3, #0]
 800a85e:	b16c      	cbz	r4, 800a87c <rmw_destroy_node+0x8c>
 800a860:	e9d4 4101 	ldrd	r4, r1, [r4, #4]
 800a864:	6f8b      	ldr	r3, [r1, #120]	@ 0x78
 800a866:	429d      	cmp	r5, r3
 800a868:	d1f9      	bne.n	800a85e <rmw_destroy_node+0x6e>
 800a86a:	317c      	adds	r1, #124	@ 0x7c
 800a86c:	4638      	mov	r0, r7
 800a86e:	f000 f893 	bl	800a998 <rmw_destroy_service>
 800a872:	2801      	cmp	r0, #1
 800a874:	4606      	mov	r6, r0
 800a876:	d0e3      	beq.n	800a840 <rmw_destroy_node+0x50>
 800a878:	2c00      	cmp	r4, #0
 800a87a:	d1f1      	bne.n	800a860 <rmw_destroy_node+0x70>
 800a87c:	4b19      	ldr	r3, [pc, #100]	@ (800a8e4 <rmw_destroy_node+0xf4>)
 800a87e:	681c      	ldr	r4, [r3, #0]
 800a880:	b16c      	cbz	r4, 800a89e <rmw_destroy_node+0xae>
 800a882:	e9d4 4101 	ldrd	r4, r1, [r4, #4]
 800a886:	6f8b      	ldr	r3, [r1, #120]	@ 0x78
 800a888:	429d      	cmp	r5, r3
 800a88a:	d1f9      	bne.n	800a880 <rmw_destroy_node+0x90>
 800a88c:	317c      	adds	r1, #124	@ 0x7c
 800a88e:	4638      	mov	r0, r7
 800a890:	f008 fb2e 	bl	8012ef0 <rmw_destroy_client>
 800a894:	2801      	cmp	r0, #1
 800a896:	4606      	mov	r6, r0
 800a898:	d0d2      	beq.n	800a840 <rmw_destroy_node+0x50>
 800a89a:	2c00      	cmp	r4, #0
 800a89c:	d1f1      	bne.n	800a882 <rmw_destroy_node+0x92>
 800a89e:	6928      	ldr	r0, [r5, #16]
 800a8a0:	696a      	ldr	r2, [r5, #20]
 800a8a2:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 800a8a6:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800a8aa:	6819      	ldr	r1, [r3, #0]
 800a8ac:	f001 fe36 	bl	800c51c <uxr_buffer_delete_entity>
 800a8b0:	4602      	mov	r2, r0
 800a8b2:	6928      	ldr	r0, [r5, #16]
 800a8b4:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 800a8b8:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 800a8bc:	f000 fcf2 	bl	800b2a4 <run_xrce_session>
 800a8c0:	2800      	cmp	r0, #0
 800a8c2:	bf08      	it	eq
 800a8c4:	2602      	moveq	r6, #2
 800a8c6:	4638      	mov	r0, r7
 800a8c8:	f000 fb7a 	bl	800afc0 <rmw_uxrce_fini_node_memory>
 800a8cc:	4630      	mov	r0, r6
 800a8ce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a8d0:	4626      	mov	r6, r4
 800a8d2:	e7a6      	b.n	800a822 <rmw_destroy_node+0x32>
 800a8d4:	0801705c 	.word	0x0801705c
 800a8d8:	2000da3c 	.word	0x2000da3c
 800a8dc:	2000da7c 	.word	0x2000da7c
 800a8e0:	2000da4c 	.word	0x2000da4c
 800a8e4:	2000915c 	.word	0x2000915c

0800a8e8 <rmw_node_get_graph_guard_condition>:
 800a8e8:	6843      	ldr	r3, [r0, #4]
 800a8ea:	6918      	ldr	r0, [r3, #16]
 800a8ec:	f500 705a 	add.w	r0, r0, #872	@ 0x368
 800a8f0:	4770      	bx	lr
 800a8f2:	bf00      	nop

0800a8f4 <rmw_destroy_publisher>:
 800a8f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a8f6:	b128      	cbz	r0, 800a904 <rmw_destroy_publisher+0x10>
 800a8f8:	4604      	mov	r4, r0
 800a8fa:	6800      	ldr	r0, [r0, #0]
 800a8fc:	460d      	mov	r5, r1
 800a8fe:	f000 fd51 	bl	800b3a4 <is_uxrce_rmw_identifier_valid>
 800a902:	b910      	cbnz	r0, 800a90a <rmw_destroy_publisher+0x16>
 800a904:	2401      	movs	r4, #1
 800a906:	4620      	mov	r0, r4
 800a908:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a90a:	6863      	ldr	r3, [r4, #4]
 800a90c:	2b00      	cmp	r3, #0
 800a90e:	d0f9      	beq.n	800a904 <rmw_destroy_publisher+0x10>
 800a910:	2d00      	cmp	r5, #0
 800a912:	d0f7      	beq.n	800a904 <rmw_destroy_publisher+0x10>
 800a914:	6828      	ldr	r0, [r5, #0]
 800a916:	f000 fd45 	bl	800b3a4 <is_uxrce_rmw_identifier_valid>
 800a91a:	2800      	cmp	r0, #0
 800a91c:	d0f2      	beq.n	800a904 <rmw_destroy_publisher+0x10>
 800a91e:	686c      	ldr	r4, [r5, #4]
 800a920:	2c00      	cmp	r4, #0
 800a922:	d0ef      	beq.n	800a904 <rmw_destroy_publisher+0x10>
 800a924:	6a60      	ldr	r0, [r4, #36]	@ 0x24
 800a926:	f8d4 7080 	ldr.w	r7, [r4, #128]	@ 0x80
 800a92a:	f008 fb7b 	bl	8013024 <destroy_topic>
 800a92e:	f8d4 3080 	ldr.w	r3, [r4, #128]	@ 0x80
 800a932:	6962      	ldr	r2, [r4, #20]
 800a934:	6918      	ldr	r0, [r3, #16]
 800a936:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 800a93a:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800a93e:	6819      	ldr	r1, [r3, #0]
 800a940:	f001 fdec 	bl	800c51c <uxr_buffer_delete_entity>
 800a944:	f8d4 3080 	ldr.w	r3, [r4, #128]	@ 0x80
 800a948:	6922      	ldr	r2, [r4, #16]
 800a94a:	691b      	ldr	r3, [r3, #16]
 800a94c:	f8d3 1388 	ldr.w	r1, [r3, #904]	@ 0x388
 800a950:	4604      	mov	r4, r0
 800a952:	6809      	ldr	r1, [r1, #0]
 800a954:	f503 7028 	add.w	r0, r3, #672	@ 0x2a0
 800a958:	f001 fde0 	bl	800c51c <uxr_buffer_delete_entity>
 800a95c:	693e      	ldr	r6, [r7, #16]
 800a95e:	4622      	mov	r2, r4
 800a960:	f8d6 3390 	ldr.w	r3, [r6, #912]	@ 0x390
 800a964:	f8d6 1388 	ldr.w	r1, [r6, #904]	@ 0x388
 800a968:	4604      	mov	r4, r0
 800a96a:	4630      	mov	r0, r6
 800a96c:	f000 fc9a 	bl	800b2a4 <run_xrce_session>
 800a970:	693e      	ldr	r6, [r7, #16]
 800a972:	4622      	mov	r2, r4
 800a974:	f8d6 3390 	ldr.w	r3, [r6, #912]	@ 0x390
 800a978:	f8d6 1388 	ldr.w	r1, [r6, #904]	@ 0x388
 800a97c:	4604      	mov	r4, r0
 800a97e:	4630      	mov	r0, r6
 800a980:	f000 fc90 	bl	800b2a4 <run_xrce_session>
 800a984:	b12c      	cbz	r4, 800a992 <rmw_destroy_publisher+0x9e>
 800a986:	b120      	cbz	r0, 800a992 <rmw_destroy_publisher+0x9e>
 800a988:	2400      	movs	r4, #0
 800a98a:	4628      	mov	r0, r5
 800a98c:	f000 fb30 	bl	800aff0 <rmw_uxrce_fini_publisher_memory>
 800a990:	e7b9      	b.n	800a906 <rmw_destroy_publisher+0x12>
 800a992:	2402      	movs	r4, #2
 800a994:	e7f9      	b.n	800a98a <rmw_destroy_publisher+0x96>
 800a996:	bf00      	nop

0800a998 <rmw_destroy_service>:
 800a998:	b570      	push	{r4, r5, r6, lr}
 800a99a:	b128      	cbz	r0, 800a9a8 <rmw_destroy_service+0x10>
 800a99c:	4604      	mov	r4, r0
 800a99e:	6800      	ldr	r0, [r0, #0]
 800a9a0:	460d      	mov	r5, r1
 800a9a2:	f000 fcff 	bl	800b3a4 <is_uxrce_rmw_identifier_valid>
 800a9a6:	b910      	cbnz	r0, 800a9ae <rmw_destroy_service+0x16>
 800a9a8:	2401      	movs	r4, #1
 800a9aa:	4620      	mov	r0, r4
 800a9ac:	bd70      	pop	{r4, r5, r6, pc}
 800a9ae:	6863      	ldr	r3, [r4, #4]
 800a9b0:	2b00      	cmp	r3, #0
 800a9b2:	d0f9      	beq.n	800a9a8 <rmw_destroy_service+0x10>
 800a9b4:	2d00      	cmp	r5, #0
 800a9b6:	d0f7      	beq.n	800a9a8 <rmw_destroy_service+0x10>
 800a9b8:	6828      	ldr	r0, [r5, #0]
 800a9ba:	f000 fcf3 	bl	800b3a4 <is_uxrce_rmw_identifier_valid>
 800a9be:	2800      	cmp	r0, #0
 800a9c0:	d0f2      	beq.n	800a9a8 <rmw_destroy_service+0x10>
 800a9c2:	686e      	ldr	r6, [r5, #4]
 800a9c4:	2e00      	cmp	r6, #0
 800a9c6:	d0ef      	beq.n	800a9a8 <rmw_destroy_service+0x10>
 800a9c8:	6864      	ldr	r4, [r4, #4]
 800a9ca:	6932      	ldr	r2, [r6, #16]
 800a9cc:	6920      	ldr	r0, [r4, #16]
 800a9ce:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 800a9d2:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800a9d6:	6819      	ldr	r1, [r3, #0]
 800a9d8:	f002 f828 	bl	800ca2c <uxr_buffer_cancel_data>
 800a9dc:	4602      	mov	r2, r0
 800a9de:	6920      	ldr	r0, [r4, #16]
 800a9e0:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 800a9e4:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 800a9e8:	f000 fc5c 	bl	800b2a4 <run_xrce_session>
 800a9ec:	6920      	ldr	r0, [r4, #16]
 800a9ee:	6932      	ldr	r2, [r6, #16]
 800a9f0:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 800a9f4:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800a9f8:	6819      	ldr	r1, [r3, #0]
 800a9fa:	f001 fd8f 	bl	800c51c <uxr_buffer_delete_entity>
 800a9fe:	4602      	mov	r2, r0
 800aa00:	6920      	ldr	r0, [r4, #16]
 800aa02:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 800aa06:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 800aa0a:	f000 fc4b 	bl	800b2a4 <run_xrce_session>
 800aa0e:	2800      	cmp	r0, #0
 800aa10:	4628      	mov	r0, r5
 800aa12:	bf14      	ite	ne
 800aa14:	2400      	movne	r4, #0
 800aa16:	2402      	moveq	r4, #2
 800aa18:	f000 fb16 	bl	800b048 <rmw_uxrce_fini_service_memory>
 800aa1c:	e7c5      	b.n	800a9aa <rmw_destroy_service+0x12>
 800aa1e:	bf00      	nop

0800aa20 <rmw_create_subscription>:
 800aa20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aa24:	b08d      	sub	sp, #52	@ 0x34
 800aa26:	2800      	cmp	r0, #0
 800aa28:	f000 80d1 	beq.w	800abce <rmw_create_subscription+0x1ae>
 800aa2c:	460e      	mov	r6, r1
 800aa2e:	2900      	cmp	r1, #0
 800aa30:	f000 80cd 	beq.w	800abce <rmw_create_subscription+0x1ae>
 800aa34:	4604      	mov	r4, r0
 800aa36:	6800      	ldr	r0, [r0, #0]
 800aa38:	4615      	mov	r5, r2
 800aa3a:	4698      	mov	r8, r3
 800aa3c:	f000 fcb2 	bl	800b3a4 <is_uxrce_rmw_identifier_valid>
 800aa40:	2800      	cmp	r0, #0
 800aa42:	f000 80c4 	beq.w	800abce <rmw_create_subscription+0x1ae>
 800aa46:	2d00      	cmp	r5, #0
 800aa48:	f000 80c1 	beq.w	800abce <rmw_create_subscription+0x1ae>
 800aa4c:	782b      	ldrb	r3, [r5, #0]
 800aa4e:	2b00      	cmp	r3, #0
 800aa50:	f000 80bd 	beq.w	800abce <rmw_create_subscription+0x1ae>
 800aa54:	f1b8 0f00 	cmp.w	r8, #0
 800aa58:	f000 80b9 	beq.w	800abce <rmw_create_subscription+0x1ae>
 800aa5c:	485e      	ldr	r0, [pc, #376]	@ (800abd8 <rmw_create_subscription+0x1b8>)
 800aa5e:	f8d4 9004 	ldr.w	r9, [r4, #4]
 800aa62:	f008 fa21 	bl	8012ea8 <get_memory>
 800aa66:	4604      	mov	r4, r0
 800aa68:	2800      	cmp	r0, #0
 800aa6a:	f000 80b1 	beq.w	800abd0 <rmw_create_subscription+0x1b0>
 800aa6e:	6887      	ldr	r7, [r0, #8]
 800aa70:	f8c7 7080 	str.w	r7, [r7, #128]	@ 0x80
 800aa74:	f008 fa80 	bl	8012f78 <rmw_get_implementation_identifier>
 800aa78:	f107 0a98 	add.w	sl, r7, #152	@ 0x98
 800aa7c:	67f8      	str	r0, [r7, #124]	@ 0x7c
 800aa7e:	f8c7 a084 	str.w	sl, [r7, #132]	@ 0x84
 800aa82:	4628      	mov	r0, r5
 800aa84:	f7f5 fbb6 	bl	80001f4 <strlen>
 800aa88:	3001      	adds	r0, #1
 800aa8a:	283c      	cmp	r0, #60	@ 0x3c
 800aa8c:	f107 047c 	add.w	r4, r7, #124	@ 0x7c
 800aa90:	f200 8096 	bhi.w	800abc0 <rmw_create_subscription+0x1a0>
 800aa94:	4a51      	ldr	r2, [pc, #324]	@ (800abdc <rmw_create_subscription+0x1bc>)
 800aa96:	462b      	mov	r3, r5
 800aa98:	213c      	movs	r1, #60	@ 0x3c
 800aa9a:	4650      	mov	r0, sl
 800aa9c:	f00a fcb6 	bl	801540c <sniprintf>
 800aaa0:	4641      	mov	r1, r8
 800aaa2:	f8c7 9020 	str.w	r9, [r7, #32]
 800aaa6:	2250      	movs	r2, #80	@ 0x50
 800aaa8:	f107 0028 	add.w	r0, r7, #40	@ 0x28
 800aaac:	f00a fe51 	bl	8015752 <memcpy>
 800aab0:	494b      	ldr	r1, [pc, #300]	@ (800abe0 <rmw_create_subscription+0x1c0>)
 800aab2:	4630      	mov	r0, r6
 800aab4:	f000 fc84 	bl	800b3c0 <get_message_typesupport_handle>
 800aab8:	2800      	cmp	r0, #0
 800aaba:	f000 8081 	beq.w	800abc0 <rmw_create_subscription+0x1a0>
 800aabe:	6842      	ldr	r2, [r0, #4]
 800aac0:	61ba      	str	r2, [r7, #24]
 800aac2:	2a00      	cmp	r2, #0
 800aac4:	d07c      	beq.n	800abc0 <rmw_create_subscription+0x1a0>
 800aac6:	4629      	mov	r1, r5
 800aac8:	4643      	mov	r3, r8
 800aaca:	4648      	mov	r0, r9
 800aacc:	f008 fa5a 	bl	8012f84 <create_topic>
 800aad0:	61f8      	str	r0, [r7, #28]
 800aad2:	2800      	cmp	r0, #0
 800aad4:	d078      	beq.n	800abc8 <rmw_create_subscription+0x1a8>
 800aad6:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800aada:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800aade:	2104      	movs	r1, #4
 800aae0:	f8b3 059c 	ldrh.w	r0, [r3, #1436]	@ 0x59c
 800aae4:	1c42      	adds	r2, r0, #1
 800aae6:	f8a3 259c 	strh.w	r2, [r3, #1436]	@ 0x59c
 800aaea:	f001 ff35 	bl	800c958 <uxr_object_id>
 800aaee:	6138      	str	r0, [r7, #16]
 800aaf0:	f8d9 0010 	ldr.w	r0, [r9, #16]
 800aaf4:	2506      	movs	r5, #6
 800aaf6:	f8d0 3384 	ldr.w	r3, [r0, #900]	@ 0x384
 800aafa:	9500      	str	r5, [sp, #0]
 800aafc:	6819      	ldr	r1, [r3, #0]
 800aafe:	693a      	ldr	r2, [r7, #16]
 800ab00:	f8d9 3014 	ldr.w	r3, [r9, #20]
 800ab04:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800ab08:	f001 fdbc 	bl	800c684 <uxr_buffer_create_subscriber_bin>
 800ab0c:	4602      	mov	r2, r0
 800ab0e:	f8d9 0010 	ldr.w	r0, [r9, #16]
 800ab12:	f8d0 338c 	ldr.w	r3, [r0, #908]	@ 0x38c
 800ab16:	f8d0 1384 	ldr.w	r1, [r0, #900]	@ 0x384
 800ab1a:	f000 fbc3 	bl	800b2a4 <run_xrce_session>
 800ab1e:	2800      	cmp	r0, #0
 800ab20:	d04e      	beq.n	800abc0 <rmw_create_subscription+0x1a0>
 800ab22:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800ab26:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800ab2a:	4629      	mov	r1, r5
 800ab2c:	f8b3 059e 	ldrh.w	r0, [r3, #1438]	@ 0x59e
 800ab30:	1c42      	adds	r2, r0, #1
 800ab32:	f8a3 259e 	strh.w	r2, [r3, #1438]	@ 0x59e
 800ab36:	f001 ff0f 	bl	800c958 <uxr_object_id>
 800ab3a:	ae08      	add	r6, sp, #32
 800ab3c:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800ab40:	69fb      	ldr	r3, [r7, #28]
 800ab42:	6178      	str	r0, [r7, #20]
 800ab44:	4641      	mov	r1, r8
 800ab46:	4630      	mov	r0, r6
 800ab48:	f8da b384 	ldr.w	fp, [sl, #900]	@ 0x384
 800ab4c:	9305      	str	r3, [sp, #20]
 800ab4e:	f000 fbc5 	bl	800b2dc <convert_qos_profile>
 800ab52:	9503      	str	r5, [sp, #12]
 800ab54:	e896 0003 	ldmia.w	r6, {r0, r1}
 800ab58:	9b05      	ldr	r3, [sp, #20]
 800ab5a:	9001      	str	r0, [sp, #4]
 800ab5c:	f8ad 1008 	strh.w	r1, [sp, #8]
 800ab60:	691b      	ldr	r3, [r3, #16]
 800ab62:	9300      	str	r3, [sp, #0]
 800ab64:	e9d7 3204 	ldrd	r3, r2, [r7, #16]
 800ab68:	f8db 1000 	ldr.w	r1, [fp]
 800ab6c:	f50a 7028 	add.w	r0, sl, #672	@ 0x2a0
 800ab70:	f001 fdb8 	bl	800c6e4 <uxr_buffer_create_datareader_bin>
 800ab74:	4602      	mov	r2, r0
 800ab76:	f8d9 0010 	ldr.w	r0, [r9, #16]
 800ab7a:	f8d0 338c 	ldr.w	r3, [r0, #908]	@ 0x38c
 800ab7e:	f8d0 1384 	ldr.w	r1, [r0, #900]	@ 0x384
 800ab82:	f000 fb8f 	bl	800b2a4 <run_xrce_session>
 800ab86:	b1d8      	cbz	r0, 800abc0 <rmw_create_subscription+0x1a0>
 800ab88:	f898 3008 	ldrb.w	r3, [r8, #8]
 800ab8c:	f8d9 0010 	ldr.w	r0, [r9, #16]
 800ab90:	2b02      	cmp	r3, #2
 800ab92:	bf0c      	ite	eq
 800ab94:	f8d0 3380 	ldreq.w	r3, [r0, #896]	@ 0x380
 800ab98:	f8d0 3374 	ldrne.w	r3, [r0, #884]	@ 0x374
 800ab9c:	9307      	str	r3, [sp, #28]
 800ab9e:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 800aba2:	2200      	movs	r2, #0
 800aba4:	e9cd 120a 	strd	r1, r2, [sp, #40]	@ 0x28
 800aba8:	ab0a      	add	r3, sp, #40	@ 0x28
 800abaa:	f8d0 1384 	ldr.w	r1, [r0, #900]	@ 0x384
 800abae:	9300      	str	r3, [sp, #0]
 800abb0:	697a      	ldr	r2, [r7, #20]
 800abb2:	9b07      	ldr	r3, [sp, #28]
 800abb4:	6809      	ldr	r1, [r1, #0]
 800abb6:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800abba:	f001 fefd 	bl	800c9b8 <uxr_buffer_request_data>
 800abbe:	e007      	b.n	800abd0 <rmw_create_subscription+0x1b0>
 800abc0:	69f8      	ldr	r0, [r7, #28]
 800abc2:	b108      	cbz	r0, 800abc8 <rmw_create_subscription+0x1a8>
 800abc4:	f000 fa6c 	bl	800b0a0 <rmw_uxrce_fini_topic_memory>
 800abc8:	4620      	mov	r0, r4
 800abca:	f000 fa27 	bl	800b01c <rmw_uxrce_fini_subscription_memory>
 800abce:	2400      	movs	r4, #0
 800abd0:	4620      	mov	r0, r4
 800abd2:	b00d      	add	sp, #52	@ 0x34
 800abd4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800abd8:	2000da7c 	.word	0x2000da7c
 800abdc:	08016748 	.word	0x08016748
 800abe0:	08016714 	.word	0x08016714

0800abe4 <rmw_subscription_get_actual_qos>:
 800abe4:	b150      	cbz	r0, 800abfc <rmw_subscription_get_actual_qos+0x18>
 800abe6:	b508      	push	{r3, lr}
 800abe8:	460b      	mov	r3, r1
 800abea:	b149      	cbz	r1, 800ac00 <rmw_subscription_get_actual_qos+0x1c>
 800abec:	6841      	ldr	r1, [r0, #4]
 800abee:	2250      	movs	r2, #80	@ 0x50
 800abf0:	3128      	adds	r1, #40	@ 0x28
 800abf2:	4618      	mov	r0, r3
 800abf4:	f00a fdad 	bl	8015752 <memcpy>
 800abf8:	2000      	movs	r0, #0
 800abfa:	bd08      	pop	{r3, pc}
 800abfc:	200b      	movs	r0, #11
 800abfe:	4770      	bx	lr
 800ac00:	200b      	movs	r0, #11
 800ac02:	bd08      	pop	{r3, pc}

0800ac04 <rmw_destroy_subscription>:
 800ac04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ac06:	b128      	cbz	r0, 800ac14 <rmw_destroy_subscription+0x10>
 800ac08:	4604      	mov	r4, r0
 800ac0a:	6800      	ldr	r0, [r0, #0]
 800ac0c:	460d      	mov	r5, r1
 800ac0e:	f000 fbc9 	bl	800b3a4 <is_uxrce_rmw_identifier_valid>
 800ac12:	b910      	cbnz	r0, 800ac1a <rmw_destroy_subscription+0x16>
 800ac14:	2401      	movs	r4, #1
 800ac16:	4620      	mov	r0, r4
 800ac18:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ac1a:	6863      	ldr	r3, [r4, #4]
 800ac1c:	2b00      	cmp	r3, #0
 800ac1e:	d0f9      	beq.n	800ac14 <rmw_destroy_subscription+0x10>
 800ac20:	2d00      	cmp	r5, #0
 800ac22:	d0f7      	beq.n	800ac14 <rmw_destroy_subscription+0x10>
 800ac24:	6828      	ldr	r0, [r5, #0]
 800ac26:	f000 fbbd 	bl	800b3a4 <is_uxrce_rmw_identifier_valid>
 800ac2a:	2800      	cmp	r0, #0
 800ac2c:	d0f2      	beq.n	800ac14 <rmw_destroy_subscription+0x10>
 800ac2e:	686c      	ldr	r4, [r5, #4]
 800ac30:	2c00      	cmp	r4, #0
 800ac32:	d0ef      	beq.n	800ac14 <rmw_destroy_subscription+0x10>
 800ac34:	6a26      	ldr	r6, [r4, #32]
 800ac36:	6962      	ldr	r2, [r4, #20]
 800ac38:	6930      	ldr	r0, [r6, #16]
 800ac3a:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 800ac3e:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800ac42:	6819      	ldr	r1, [r3, #0]
 800ac44:	f001 fef2 	bl	800ca2c <uxr_buffer_cancel_data>
 800ac48:	4602      	mov	r2, r0
 800ac4a:	6930      	ldr	r0, [r6, #16]
 800ac4c:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 800ac50:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 800ac54:	f000 fb26 	bl	800b2a4 <run_xrce_session>
 800ac58:	69e0      	ldr	r0, [r4, #28]
 800ac5a:	f008 f9e3 	bl	8013024 <destroy_topic>
 800ac5e:	6a23      	ldr	r3, [r4, #32]
 800ac60:	6962      	ldr	r2, [r4, #20]
 800ac62:	6918      	ldr	r0, [r3, #16]
 800ac64:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 800ac68:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800ac6c:	6819      	ldr	r1, [r3, #0]
 800ac6e:	f001 fc55 	bl	800c51c <uxr_buffer_delete_entity>
 800ac72:	6a23      	ldr	r3, [r4, #32]
 800ac74:	6922      	ldr	r2, [r4, #16]
 800ac76:	691b      	ldr	r3, [r3, #16]
 800ac78:	f8d3 1388 	ldr.w	r1, [r3, #904]	@ 0x388
 800ac7c:	4604      	mov	r4, r0
 800ac7e:	6809      	ldr	r1, [r1, #0]
 800ac80:	f503 7028 	add.w	r0, r3, #672	@ 0x2a0
 800ac84:	f001 fc4a 	bl	800c51c <uxr_buffer_delete_entity>
 800ac88:	6937      	ldr	r7, [r6, #16]
 800ac8a:	4622      	mov	r2, r4
 800ac8c:	f8d7 3390 	ldr.w	r3, [r7, #912]	@ 0x390
 800ac90:	f8d7 1388 	ldr.w	r1, [r7, #904]	@ 0x388
 800ac94:	4604      	mov	r4, r0
 800ac96:	4638      	mov	r0, r7
 800ac98:	f000 fb04 	bl	800b2a4 <run_xrce_session>
 800ac9c:	6936      	ldr	r6, [r6, #16]
 800ac9e:	4622      	mov	r2, r4
 800aca0:	f8d6 3390 	ldr.w	r3, [r6, #912]	@ 0x390
 800aca4:	f8d6 1388 	ldr.w	r1, [r6, #904]	@ 0x388
 800aca8:	4604      	mov	r4, r0
 800acaa:	4630      	mov	r0, r6
 800acac:	f000 fafa 	bl	800b2a4 <run_xrce_session>
 800acb0:	b12c      	cbz	r4, 800acbe <rmw_destroy_subscription+0xba>
 800acb2:	b120      	cbz	r0, 800acbe <rmw_destroy_subscription+0xba>
 800acb4:	2400      	movs	r4, #0
 800acb6:	4628      	mov	r0, r5
 800acb8:	f000 f9b0 	bl	800b01c <rmw_uxrce_fini_subscription_memory>
 800acbc:	e7ab      	b.n	800ac16 <rmw_destroy_subscription+0x12>
 800acbe:	2402      	movs	r4, #2
 800acc0:	e7f9      	b.n	800acb6 <rmw_destroy_subscription+0xb2>
 800acc2:	bf00      	nop

0800acc4 <rmw_uxrce_transport_init>:
 800acc4:	b508      	push	{r3, lr}
 800acc6:	b108      	cbz	r0, 800accc <rmw_uxrce_transport_init+0x8>
 800acc8:	f100 0210 	add.w	r2, r0, #16
 800accc:	b139      	cbz	r1, 800acde <rmw_uxrce_transport_init+0x1a>
 800acce:	6949      	ldr	r1, [r1, #20]
 800acd0:	4610      	mov	r0, r2
 800acd2:	f001 fe09 	bl	800c8e8 <uxr_init_custom_transport>
 800acd6:	f080 0001 	eor.w	r0, r0, #1
 800acda:	b2c0      	uxtb	r0, r0
 800acdc:	bd08      	pop	{r3, pc}
 800acde:	4b04      	ldr	r3, [pc, #16]	@ (800acf0 <rmw_uxrce_transport_init+0x2c>)
 800ace0:	4610      	mov	r0, r2
 800ace2:	6859      	ldr	r1, [r3, #4]
 800ace4:	f001 fe00 	bl	800c8e8 <uxr_init_custom_transport>
 800ace8:	f080 0001 	eor.w	r0, r0, #1
 800acec:	b2c0      	uxtb	r0, r0
 800acee:	bd08      	pop	{r3, pc}
 800acf0:	20009104 	.word	0x20009104

0800acf4 <rmw_uxrce_init_service_memory>:
 800acf4:	b1e2      	cbz	r2, 800ad30 <rmw_uxrce_init_service_memory+0x3c>
 800acf6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800acfa:	7b05      	ldrb	r5, [r0, #12]
 800acfc:	4606      	mov	r6, r0
 800acfe:	b9ad      	cbnz	r5, 800ad2c <rmw_uxrce_init_service_memory+0x38>
 800ad00:	23c8      	movs	r3, #200	@ 0xc8
 800ad02:	e9c0 5500 	strd	r5, r5, [r0]
 800ad06:	6083      	str	r3, [r0, #8]
 800ad08:	f240 1301 	movw	r3, #257	@ 0x101
 800ad0c:	4617      	mov	r7, r2
 800ad0e:	8183      	strh	r3, [r0, #12]
 800ad10:	460c      	mov	r4, r1
 800ad12:	46a8      	mov	r8, r5
 800ad14:	4621      	mov	r1, r4
 800ad16:	4630      	mov	r0, r6
 800ad18:	3501      	adds	r5, #1
 800ad1a:	f008 f8d5 	bl	8012ec8 <put_memory>
 800ad1e:	42af      	cmp	r7, r5
 800ad20:	60a4      	str	r4, [r4, #8]
 800ad22:	f884 800c 	strb.w	r8, [r4, #12]
 800ad26:	f104 04c8 	add.w	r4, r4, #200	@ 0xc8
 800ad2a:	d1f3      	bne.n	800ad14 <rmw_uxrce_init_service_memory+0x20>
 800ad2c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ad30:	4770      	bx	lr
 800ad32:	bf00      	nop

0800ad34 <rmw_uxrce_init_client_memory>:
 800ad34:	b1e2      	cbz	r2, 800ad70 <rmw_uxrce_init_client_memory+0x3c>
 800ad36:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ad3a:	7b05      	ldrb	r5, [r0, #12]
 800ad3c:	4606      	mov	r6, r0
 800ad3e:	b9ad      	cbnz	r5, 800ad6c <rmw_uxrce_init_client_memory+0x38>
 800ad40:	23c8      	movs	r3, #200	@ 0xc8
 800ad42:	e9c0 5500 	strd	r5, r5, [r0]
 800ad46:	6083      	str	r3, [r0, #8]
 800ad48:	f240 1301 	movw	r3, #257	@ 0x101
 800ad4c:	4617      	mov	r7, r2
 800ad4e:	8183      	strh	r3, [r0, #12]
 800ad50:	460c      	mov	r4, r1
 800ad52:	46a8      	mov	r8, r5
 800ad54:	4621      	mov	r1, r4
 800ad56:	4630      	mov	r0, r6
 800ad58:	3501      	adds	r5, #1
 800ad5a:	f008 f8b5 	bl	8012ec8 <put_memory>
 800ad5e:	42af      	cmp	r7, r5
 800ad60:	60a4      	str	r4, [r4, #8]
 800ad62:	f884 800c 	strb.w	r8, [r4, #12]
 800ad66:	f104 04c8 	add.w	r4, r4, #200	@ 0xc8
 800ad6a:	d1f3      	bne.n	800ad54 <rmw_uxrce_init_client_memory+0x20>
 800ad6c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ad70:	4770      	bx	lr
 800ad72:	bf00      	nop

0800ad74 <rmw_uxrce_init_publisher_memory>:
 800ad74:	b1e2      	cbz	r2, 800adb0 <rmw_uxrce_init_publisher_memory+0x3c>
 800ad76:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ad7a:	7b05      	ldrb	r5, [r0, #12]
 800ad7c:	4606      	mov	r6, r0
 800ad7e:	b9ad      	cbnz	r5, 800adac <rmw_uxrce_init_publisher_memory+0x38>
 800ad80:	23d8      	movs	r3, #216	@ 0xd8
 800ad82:	e9c0 5500 	strd	r5, r5, [r0]
 800ad86:	6083      	str	r3, [r0, #8]
 800ad88:	f240 1301 	movw	r3, #257	@ 0x101
 800ad8c:	4617      	mov	r7, r2
 800ad8e:	8183      	strh	r3, [r0, #12]
 800ad90:	460c      	mov	r4, r1
 800ad92:	46a8      	mov	r8, r5
 800ad94:	4621      	mov	r1, r4
 800ad96:	4630      	mov	r0, r6
 800ad98:	3501      	adds	r5, #1
 800ad9a:	f008 f895 	bl	8012ec8 <put_memory>
 800ad9e:	42af      	cmp	r7, r5
 800ada0:	60a4      	str	r4, [r4, #8]
 800ada2:	f884 800c 	strb.w	r8, [r4, #12]
 800ada6:	f104 04d8 	add.w	r4, r4, #216	@ 0xd8
 800adaa:	d1f3      	bne.n	800ad94 <rmw_uxrce_init_publisher_memory+0x20>
 800adac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800adb0:	4770      	bx	lr
 800adb2:	bf00      	nop

0800adb4 <rmw_uxrce_init_subscription_memory>:
 800adb4:	b1e2      	cbz	r2, 800adf0 <rmw_uxrce_init_subscription_memory+0x3c>
 800adb6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800adba:	7b05      	ldrb	r5, [r0, #12]
 800adbc:	4606      	mov	r6, r0
 800adbe:	b9ad      	cbnz	r5, 800adec <rmw_uxrce_init_subscription_memory+0x38>
 800adc0:	23d8      	movs	r3, #216	@ 0xd8
 800adc2:	e9c0 5500 	strd	r5, r5, [r0]
 800adc6:	6083      	str	r3, [r0, #8]
 800adc8:	f240 1301 	movw	r3, #257	@ 0x101
 800adcc:	4617      	mov	r7, r2
 800adce:	8183      	strh	r3, [r0, #12]
 800add0:	460c      	mov	r4, r1
 800add2:	46a8      	mov	r8, r5
 800add4:	4621      	mov	r1, r4
 800add6:	4630      	mov	r0, r6
 800add8:	3501      	adds	r5, #1
 800adda:	f008 f875 	bl	8012ec8 <put_memory>
 800adde:	42af      	cmp	r7, r5
 800ade0:	60a4      	str	r4, [r4, #8]
 800ade2:	f884 800c 	strb.w	r8, [r4, #12]
 800ade6:	f104 04d8 	add.w	r4, r4, #216	@ 0xd8
 800adea:	d1f3      	bne.n	800add4 <rmw_uxrce_init_subscription_memory+0x20>
 800adec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800adf0:	4770      	bx	lr
 800adf2:	bf00      	nop

0800adf4 <rmw_uxrce_init_node_memory>:
 800adf4:	b1e2      	cbz	r2, 800ae30 <rmw_uxrce_init_node_memory+0x3c>
 800adf6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800adfa:	7b05      	ldrb	r5, [r0, #12]
 800adfc:	4606      	mov	r6, r0
 800adfe:	b9ad      	cbnz	r5, 800ae2c <rmw_uxrce_init_node_memory+0x38>
 800ae00:	23a4      	movs	r3, #164	@ 0xa4
 800ae02:	e9c0 5500 	strd	r5, r5, [r0]
 800ae06:	6083      	str	r3, [r0, #8]
 800ae08:	f240 1301 	movw	r3, #257	@ 0x101
 800ae0c:	4617      	mov	r7, r2
 800ae0e:	8183      	strh	r3, [r0, #12]
 800ae10:	460c      	mov	r4, r1
 800ae12:	46a8      	mov	r8, r5
 800ae14:	4621      	mov	r1, r4
 800ae16:	4630      	mov	r0, r6
 800ae18:	3501      	adds	r5, #1
 800ae1a:	f008 f855 	bl	8012ec8 <put_memory>
 800ae1e:	42af      	cmp	r7, r5
 800ae20:	60a4      	str	r4, [r4, #8]
 800ae22:	f884 800c 	strb.w	r8, [r4, #12]
 800ae26:	f104 04a4 	add.w	r4, r4, #164	@ 0xa4
 800ae2a:	d1f3      	bne.n	800ae14 <rmw_uxrce_init_node_memory+0x20>
 800ae2c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ae30:	4770      	bx	lr
 800ae32:	bf00      	nop

0800ae34 <rmw_uxrce_init_session_memory>:
 800ae34:	b1ea      	cbz	r2, 800ae72 <rmw_uxrce_init_session_memory+0x3e>
 800ae36:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ae3a:	7b05      	ldrb	r5, [r0, #12]
 800ae3c:	4606      	mov	r6, r0
 800ae3e:	b9b5      	cbnz	r5, 800ae6e <rmw_uxrce_init_session_memory+0x3a>
 800ae40:	e9c0 5500 	strd	r5, r5, [r0]
 800ae44:	f241 58a8 	movw	r8, #5544	@ 0x15a8
 800ae48:	f240 1301 	movw	r3, #257	@ 0x101
 800ae4c:	4617      	mov	r7, r2
 800ae4e:	f8c0 8008 	str.w	r8, [r0, #8]
 800ae52:	460c      	mov	r4, r1
 800ae54:	8183      	strh	r3, [r0, #12]
 800ae56:	46a9      	mov	r9, r5
 800ae58:	4621      	mov	r1, r4
 800ae5a:	4630      	mov	r0, r6
 800ae5c:	3501      	adds	r5, #1
 800ae5e:	f008 f833 	bl	8012ec8 <put_memory>
 800ae62:	42af      	cmp	r7, r5
 800ae64:	60a4      	str	r4, [r4, #8]
 800ae66:	f884 900c 	strb.w	r9, [r4, #12]
 800ae6a:	4444      	add	r4, r8
 800ae6c:	d1f4      	bne.n	800ae58 <rmw_uxrce_init_session_memory+0x24>
 800ae6e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ae72:	4770      	bx	lr

0800ae74 <rmw_uxrce_init_topic_memory>:
 800ae74:	b1e2      	cbz	r2, 800aeb0 <rmw_uxrce_init_topic_memory+0x3c>
 800ae76:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ae7a:	7b05      	ldrb	r5, [r0, #12]
 800ae7c:	4606      	mov	r6, r0
 800ae7e:	b9ad      	cbnz	r5, 800aeac <rmw_uxrce_init_topic_memory+0x38>
 800ae80:	231c      	movs	r3, #28
 800ae82:	e9c0 5500 	strd	r5, r5, [r0]
 800ae86:	6083      	str	r3, [r0, #8]
 800ae88:	f240 1301 	movw	r3, #257	@ 0x101
 800ae8c:	4617      	mov	r7, r2
 800ae8e:	8183      	strh	r3, [r0, #12]
 800ae90:	460c      	mov	r4, r1
 800ae92:	46a8      	mov	r8, r5
 800ae94:	4621      	mov	r1, r4
 800ae96:	4630      	mov	r0, r6
 800ae98:	3501      	adds	r5, #1
 800ae9a:	f008 f815 	bl	8012ec8 <put_memory>
 800ae9e:	42af      	cmp	r7, r5
 800aea0:	60a4      	str	r4, [r4, #8]
 800aea2:	f884 800c 	strb.w	r8, [r4, #12]
 800aea6:	f104 041c 	add.w	r4, r4, #28
 800aeaa:	d1f3      	bne.n	800ae94 <rmw_uxrce_init_topic_memory+0x20>
 800aeac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800aeb0:	4770      	bx	lr
 800aeb2:	bf00      	nop

0800aeb4 <rmw_uxrce_init_static_input_buffer_memory>:
 800aeb4:	b1ea      	cbz	r2, 800aef2 <rmw_uxrce_init_static_input_buffer_memory+0x3e>
 800aeb6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800aeba:	7b05      	ldrb	r5, [r0, #12]
 800aebc:	4606      	mov	r6, r0
 800aebe:	b9b5      	cbnz	r5, 800aeee <rmw_uxrce_init_static_input_buffer_memory+0x3a>
 800aec0:	f44f 6304 	mov.w	r3, #2112	@ 0x840
 800aec4:	e9c0 5500 	strd	r5, r5, [r0]
 800aec8:	6083      	str	r3, [r0, #8]
 800aeca:	f240 1301 	movw	r3, #257	@ 0x101
 800aece:	4617      	mov	r7, r2
 800aed0:	8183      	strh	r3, [r0, #12]
 800aed2:	460c      	mov	r4, r1
 800aed4:	46a8      	mov	r8, r5
 800aed6:	4621      	mov	r1, r4
 800aed8:	4630      	mov	r0, r6
 800aeda:	3501      	adds	r5, #1
 800aedc:	f007 fff4 	bl	8012ec8 <put_memory>
 800aee0:	42af      	cmp	r7, r5
 800aee2:	60a4      	str	r4, [r4, #8]
 800aee4:	f884 800c 	strb.w	r8, [r4, #12]
 800aee8:	f504 6404 	add.w	r4, r4, #2112	@ 0x840
 800aeec:	d1f3      	bne.n	800aed6 <rmw_uxrce_init_static_input_buffer_memory+0x22>
 800aeee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800aef2:	4770      	bx	lr

0800aef4 <rmw_uxrce_init_init_options_impl_memory>:
 800aef4:	b1e2      	cbz	r2, 800af30 <rmw_uxrce_init_init_options_impl_memory+0x3c>
 800aef6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800aefa:	7b05      	ldrb	r5, [r0, #12]
 800aefc:	4606      	mov	r6, r0
 800aefe:	b9ad      	cbnz	r5, 800af2c <rmw_uxrce_init_init_options_impl_memory+0x38>
 800af00:	232c      	movs	r3, #44	@ 0x2c
 800af02:	e9c0 5500 	strd	r5, r5, [r0]
 800af06:	6083      	str	r3, [r0, #8]
 800af08:	f240 1301 	movw	r3, #257	@ 0x101
 800af0c:	4617      	mov	r7, r2
 800af0e:	8183      	strh	r3, [r0, #12]
 800af10:	460c      	mov	r4, r1
 800af12:	46a8      	mov	r8, r5
 800af14:	4621      	mov	r1, r4
 800af16:	4630      	mov	r0, r6
 800af18:	3501      	adds	r5, #1
 800af1a:	f007 ffd5 	bl	8012ec8 <put_memory>
 800af1e:	42af      	cmp	r7, r5
 800af20:	60a4      	str	r4, [r4, #8]
 800af22:	f884 800c 	strb.w	r8, [r4, #12]
 800af26:	f104 042c 	add.w	r4, r4, #44	@ 0x2c
 800af2a:	d1f3      	bne.n	800af14 <rmw_uxrce_init_init_options_impl_memory+0x20>
 800af2c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800af30:	4770      	bx	lr
 800af32:	bf00      	nop

0800af34 <rmw_uxrce_init_wait_set_memory>:
 800af34:	b1e2      	cbz	r2, 800af70 <rmw_uxrce_init_wait_set_memory+0x3c>
 800af36:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800af3a:	7b05      	ldrb	r5, [r0, #12]
 800af3c:	4606      	mov	r6, r0
 800af3e:	b9ad      	cbnz	r5, 800af6c <rmw_uxrce_init_wait_set_memory+0x38>
 800af40:	231c      	movs	r3, #28
 800af42:	e9c0 5500 	strd	r5, r5, [r0]
 800af46:	6083      	str	r3, [r0, #8]
 800af48:	f240 1301 	movw	r3, #257	@ 0x101
 800af4c:	4617      	mov	r7, r2
 800af4e:	8183      	strh	r3, [r0, #12]
 800af50:	460c      	mov	r4, r1
 800af52:	46a8      	mov	r8, r5
 800af54:	4621      	mov	r1, r4
 800af56:	4630      	mov	r0, r6
 800af58:	3501      	adds	r5, #1
 800af5a:	f007 ffb5 	bl	8012ec8 <put_memory>
 800af5e:	42af      	cmp	r7, r5
 800af60:	60a4      	str	r4, [r4, #8]
 800af62:	f884 800c 	strb.w	r8, [r4, #12]
 800af66:	f104 041c 	add.w	r4, r4, #28
 800af6a:	d1f3      	bne.n	800af54 <rmw_uxrce_init_wait_set_memory+0x20>
 800af6c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800af70:	4770      	bx	lr
 800af72:	bf00      	nop

0800af74 <rmw_uxrce_init_guard_condition_memory>:
 800af74:	b1e2      	cbz	r2, 800afb0 <rmw_uxrce_init_guard_condition_memory+0x3c>
 800af76:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800af7a:	7b05      	ldrb	r5, [r0, #12]
 800af7c:	4606      	mov	r6, r0
 800af7e:	b9ad      	cbnz	r5, 800afac <rmw_uxrce_init_guard_condition_memory+0x38>
 800af80:	2320      	movs	r3, #32
 800af82:	e9c0 5500 	strd	r5, r5, [r0]
 800af86:	6083      	str	r3, [r0, #8]
 800af88:	f240 1301 	movw	r3, #257	@ 0x101
 800af8c:	4617      	mov	r7, r2
 800af8e:	8183      	strh	r3, [r0, #12]
 800af90:	460c      	mov	r4, r1
 800af92:	46a8      	mov	r8, r5
 800af94:	4621      	mov	r1, r4
 800af96:	4630      	mov	r0, r6
 800af98:	3501      	adds	r5, #1
 800af9a:	f007 ff95 	bl	8012ec8 <put_memory>
 800af9e:	42af      	cmp	r7, r5
 800afa0:	60a4      	str	r4, [r4, #8]
 800afa2:	f884 800c 	strb.w	r8, [r4, #12]
 800afa6:	f104 0420 	add.w	r4, r4, #32
 800afaa:	d1f3      	bne.n	800af94 <rmw_uxrce_init_guard_condition_memory+0x20>
 800afac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800afb0:	4770      	bx	lr
 800afb2:	bf00      	nop

0800afb4 <rmw_uxrce_fini_session_memory>:
 800afb4:	4601      	mov	r1, r0
 800afb6:	4801      	ldr	r0, [pc, #4]	@ (800afbc <rmw_uxrce_fini_session_memory+0x8>)
 800afb8:	f007 bf86 	b.w	8012ec8 <put_memory>
 800afbc:	2000da5c 	.word	0x2000da5c

0800afc0 <rmw_uxrce_fini_node_memory>:
 800afc0:	b538      	push	{r3, r4, r5, lr}
 800afc2:	4604      	mov	r4, r0
 800afc4:	6800      	ldr	r0, [r0, #0]
 800afc6:	b128      	cbz	r0, 800afd4 <rmw_uxrce_fini_node_memory+0x14>
 800afc8:	4b07      	ldr	r3, [pc, #28]	@ (800afe8 <rmw_uxrce_fini_node_memory+0x28>)
 800afca:	6819      	ldr	r1, [r3, #0]
 800afcc:	f7f5 f908 	bl	80001e0 <strcmp>
 800afd0:	b940      	cbnz	r0, 800afe4 <rmw_uxrce_fini_node_memory+0x24>
 800afd2:	6020      	str	r0, [r4, #0]
 800afd4:	6861      	ldr	r1, [r4, #4]
 800afd6:	b129      	cbz	r1, 800afe4 <rmw_uxrce_fini_node_memory+0x24>
 800afd8:	2500      	movs	r5, #0
 800afda:	4804      	ldr	r0, [pc, #16]	@ (800afec <rmw_uxrce_fini_node_memory+0x2c>)
 800afdc:	610d      	str	r5, [r1, #16]
 800afde:	f007 ff73 	bl	8012ec8 <put_memory>
 800afe2:	6065      	str	r5, [r4, #4]
 800afe4:	bd38      	pop	{r3, r4, r5, pc}
 800afe6:	bf00      	nop
 800afe8:	0801705c 	.word	0x0801705c
 800afec:	2000da2c 	.word	0x2000da2c

0800aff0 <rmw_uxrce_fini_publisher_memory>:
 800aff0:	b510      	push	{r4, lr}
 800aff2:	4604      	mov	r4, r0
 800aff4:	6800      	ldr	r0, [r0, #0]
 800aff6:	b128      	cbz	r0, 800b004 <rmw_uxrce_fini_publisher_memory+0x14>
 800aff8:	4b06      	ldr	r3, [pc, #24]	@ (800b014 <rmw_uxrce_fini_publisher_memory+0x24>)
 800affa:	6819      	ldr	r1, [r3, #0]
 800affc:	f7f5 f8f0 	bl	80001e0 <strcmp>
 800b000:	b938      	cbnz	r0, 800b012 <rmw_uxrce_fini_publisher_memory+0x22>
 800b002:	6020      	str	r0, [r4, #0]
 800b004:	6861      	ldr	r1, [r4, #4]
 800b006:	b121      	cbz	r1, 800b012 <rmw_uxrce_fini_publisher_memory+0x22>
 800b008:	4803      	ldr	r0, [pc, #12]	@ (800b018 <rmw_uxrce_fini_publisher_memory+0x28>)
 800b00a:	f007 ff5d 	bl	8012ec8 <put_memory>
 800b00e:	2300      	movs	r3, #0
 800b010:	6063      	str	r3, [r4, #4]
 800b012:	bd10      	pop	{r4, pc}
 800b014:	0801705c 	.word	0x0801705c
 800b018:	2000da3c 	.word	0x2000da3c

0800b01c <rmw_uxrce_fini_subscription_memory>:
 800b01c:	b510      	push	{r4, lr}
 800b01e:	4604      	mov	r4, r0
 800b020:	6800      	ldr	r0, [r0, #0]
 800b022:	b128      	cbz	r0, 800b030 <rmw_uxrce_fini_subscription_memory+0x14>
 800b024:	4b06      	ldr	r3, [pc, #24]	@ (800b040 <rmw_uxrce_fini_subscription_memory+0x24>)
 800b026:	6819      	ldr	r1, [r3, #0]
 800b028:	f7f5 f8da 	bl	80001e0 <strcmp>
 800b02c:	b938      	cbnz	r0, 800b03e <rmw_uxrce_fini_subscription_memory+0x22>
 800b02e:	6020      	str	r0, [r4, #0]
 800b030:	6861      	ldr	r1, [r4, #4]
 800b032:	b121      	cbz	r1, 800b03e <rmw_uxrce_fini_subscription_memory+0x22>
 800b034:	4803      	ldr	r0, [pc, #12]	@ (800b044 <rmw_uxrce_fini_subscription_memory+0x28>)
 800b036:	f007 ff47 	bl	8012ec8 <put_memory>
 800b03a:	2300      	movs	r3, #0
 800b03c:	6063      	str	r3, [r4, #4]
 800b03e:	bd10      	pop	{r4, pc}
 800b040:	0801705c 	.word	0x0801705c
 800b044:	2000da7c 	.word	0x2000da7c

0800b048 <rmw_uxrce_fini_service_memory>:
 800b048:	b510      	push	{r4, lr}
 800b04a:	4604      	mov	r4, r0
 800b04c:	6800      	ldr	r0, [r0, #0]
 800b04e:	b128      	cbz	r0, 800b05c <rmw_uxrce_fini_service_memory+0x14>
 800b050:	4b06      	ldr	r3, [pc, #24]	@ (800b06c <rmw_uxrce_fini_service_memory+0x24>)
 800b052:	6819      	ldr	r1, [r3, #0]
 800b054:	f7f5 f8c4 	bl	80001e0 <strcmp>
 800b058:	b938      	cbnz	r0, 800b06a <rmw_uxrce_fini_service_memory+0x22>
 800b05a:	6020      	str	r0, [r4, #0]
 800b05c:	6861      	ldr	r1, [r4, #4]
 800b05e:	b121      	cbz	r1, 800b06a <rmw_uxrce_fini_service_memory+0x22>
 800b060:	4803      	ldr	r0, [pc, #12]	@ (800b070 <rmw_uxrce_fini_service_memory+0x28>)
 800b062:	f007 ff31 	bl	8012ec8 <put_memory>
 800b066:	2300      	movs	r3, #0
 800b068:	6063      	str	r3, [r4, #4]
 800b06a:	bd10      	pop	{r4, pc}
 800b06c:	0801705c 	.word	0x0801705c
 800b070:	2000da4c 	.word	0x2000da4c

0800b074 <rmw_uxrce_fini_client_memory>:
 800b074:	b510      	push	{r4, lr}
 800b076:	4604      	mov	r4, r0
 800b078:	6800      	ldr	r0, [r0, #0]
 800b07a:	b128      	cbz	r0, 800b088 <rmw_uxrce_fini_client_memory+0x14>
 800b07c:	4b06      	ldr	r3, [pc, #24]	@ (800b098 <rmw_uxrce_fini_client_memory+0x24>)
 800b07e:	6819      	ldr	r1, [r3, #0]
 800b080:	f7f5 f8ae 	bl	80001e0 <strcmp>
 800b084:	b938      	cbnz	r0, 800b096 <rmw_uxrce_fini_client_memory+0x22>
 800b086:	6020      	str	r0, [r4, #0]
 800b088:	6861      	ldr	r1, [r4, #4]
 800b08a:	b121      	cbz	r1, 800b096 <rmw_uxrce_fini_client_memory+0x22>
 800b08c:	4803      	ldr	r0, [pc, #12]	@ (800b09c <rmw_uxrce_fini_client_memory+0x28>)
 800b08e:	f007 ff1b 	bl	8012ec8 <put_memory>
 800b092:	2300      	movs	r3, #0
 800b094:	6063      	str	r3, [r4, #4]
 800b096:	bd10      	pop	{r4, pc}
 800b098:	0801705c 	.word	0x0801705c
 800b09c:	2000915c 	.word	0x2000915c

0800b0a0 <rmw_uxrce_fini_topic_memory>:
 800b0a0:	b510      	push	{r4, lr}
 800b0a2:	4604      	mov	r4, r0
 800b0a4:	4621      	mov	r1, r4
 800b0a6:	4803      	ldr	r0, [pc, #12]	@ (800b0b4 <rmw_uxrce_fini_topic_memory+0x14>)
 800b0a8:	f007 ff0e 	bl	8012ec8 <put_memory>
 800b0ac:	2300      	movs	r3, #0
 800b0ae:	61a3      	str	r3, [r4, #24]
 800b0b0:	bd10      	pop	{r4, pc}
 800b0b2:	bf00      	nop
 800b0b4:	2000da8c 	.word	0x2000da8c

0800b0b8 <rmw_uxrce_get_static_input_buffer_for_entity>:
 800b0b8:	b082      	sub	sp, #8
 800b0ba:	b530      	push	{r4, r5, lr}
 800b0bc:	4925      	ldr	r1, [pc, #148]	@ (800b154 <rmw_uxrce_get_static_input_buffer_for_entity+0x9c>)
 800b0be:	680d      	ldr	r5, [r1, #0]
 800b0c0:	ac03      	add	r4, sp, #12
 800b0c2:	e884 000c 	stmia.w	r4, {r2, r3}
 800b0c6:	461c      	mov	r4, r3
 800b0c8:	2d00      	cmp	r5, #0
 800b0ca:	d041      	beq.n	800b150 <rmw_uxrce_get_static_input_buffer_for_entity+0x98>
 800b0cc:	462b      	mov	r3, r5
 800b0ce:	2100      	movs	r1, #0
 800b0d0:	689a      	ldr	r2, [r3, #8]
 800b0d2:	685b      	ldr	r3, [r3, #4]
 800b0d4:	f8d2 2814 	ldr.w	r2, [r2, #2068]	@ 0x814
 800b0d8:	4290      	cmp	r0, r2
 800b0da:	bf08      	it	eq
 800b0dc:	3101      	addeq	r1, #1
 800b0de:	2b00      	cmp	r3, #0
 800b0e0:	d1f6      	bne.n	800b0d0 <rmw_uxrce_get_static_input_buffer_for_entity+0x18>
 800b0e2:	f89d 300c 	ldrb.w	r3, [sp, #12]
 800b0e6:	2b02      	cmp	r3, #2
 800b0e8:	d029      	beq.n	800b13e <rmw_uxrce_get_static_input_buffer_for_entity+0x86>
 800b0ea:	d907      	bls.n	800b0fc <rmw_uxrce_get_static_input_buffer_for_entity+0x44>
 800b0ec:	2b03      	cmp	r3, #3
 800b0ee:	d005      	beq.n	800b0fc <rmw_uxrce_get_static_input_buffer_for_entity+0x44>
 800b0f0:	2100      	movs	r1, #0
 800b0f2:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800b0f6:	4608      	mov	r0, r1
 800b0f8:	b002      	add	sp, #8
 800b0fa:	4770      	bx	lr
 800b0fc:	b314      	cbz	r4, 800b144 <rmw_uxrce_get_static_input_buffer_for_entity+0x8c>
 800b0fe:	428c      	cmp	r4, r1
 800b100:	d820      	bhi.n	800b144 <rmw_uxrce_get_static_input_buffer_for_entity+0x8c>
 800b102:	2d00      	cmp	r5, #0
 800b104:	d0f4      	beq.n	800b0f0 <rmw_uxrce_get_static_input_buffer_for_entity+0x38>
 800b106:	2100      	movs	r1, #0
 800b108:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
 800b10c:	f06f 4400 	mvn.w	r4, #2147483648	@ 0x80000000
 800b110:	e002      	b.n	800b118 <rmw_uxrce_get_static_input_buffer_for_entity+0x60>
 800b112:	686d      	ldr	r5, [r5, #4]
 800b114:	2d00      	cmp	r5, #0
 800b116:	d0ec      	beq.n	800b0f2 <rmw_uxrce_get_static_input_buffer_for_entity+0x3a>
 800b118:	68ab      	ldr	r3, [r5, #8]
 800b11a:	f8d3 2814 	ldr.w	r2, [r3, #2068]	@ 0x814
 800b11e:	4290      	cmp	r0, r2
 800b120:	d1f7      	bne.n	800b112 <rmw_uxrce_get_static_input_buffer_for_entity+0x5a>
 800b122:	f8d3 2818 	ldr.w	r2, [r3, #2072]	@ 0x818
 800b126:	f503 6302 	add.w	r3, r3, #2080	@ 0x820
 800b12a:	4562      	cmp	r2, ip
 800b12c:	f853 3c04 	ldr.w	r3, [r3, #-4]
 800b130:	eb73 0e04 	sbcs.w	lr, r3, r4
 800b134:	daed      	bge.n	800b112 <rmw_uxrce_get_static_input_buffer_for_entity+0x5a>
 800b136:	4694      	mov	ip, r2
 800b138:	461c      	mov	r4, r3
 800b13a:	4629      	mov	r1, r5
 800b13c:	e7e9      	b.n	800b112 <rmw_uxrce_get_static_input_buffer_for_entity+0x5a>
 800b13e:	b10c      	cbz	r4, 800b144 <rmw_uxrce_get_static_input_buffer_for_entity+0x8c>
 800b140:	428c      	cmp	r4, r1
 800b142:	d9d5      	bls.n	800b0f0 <rmw_uxrce_get_static_input_buffer_for_entity+0x38>
 800b144:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800b148:	4802      	ldr	r0, [pc, #8]	@ (800b154 <rmw_uxrce_get_static_input_buffer_for_entity+0x9c>)
 800b14a:	b002      	add	sp, #8
 800b14c:	f007 beac 	b.w	8012ea8 <get_memory>
 800b150:	4629      	mov	r1, r5
 800b152:	e7c6      	b.n	800b0e2 <rmw_uxrce_get_static_input_buffer_for_entity+0x2a>
 800b154:	2000da6c 	.word	0x2000da6c

0800b158 <rmw_uxrce_find_static_input_buffer_by_owner>:
 800b158:	4b11      	ldr	r3, [pc, #68]	@ (800b1a0 <rmw_uxrce_find_static_input_buffer_by_owner+0x48>)
 800b15a:	681b      	ldr	r3, [r3, #0]
 800b15c:	b530      	push	{r4, r5, lr}
 800b15e:	b1e3      	cbz	r3, 800b19a <rmw_uxrce_find_static_input_buffer_by_owner+0x42>
 800b160:	f04f 3eff 	mov.w	lr, #4294967295	@ 0xffffffff
 800b164:	f06f 4c00 	mvn.w	ip, #2147483648	@ 0x80000000
 800b168:	2400      	movs	r4, #0
 800b16a:	e001      	b.n	800b170 <rmw_uxrce_find_static_input_buffer_by_owner+0x18>
 800b16c:	685b      	ldr	r3, [r3, #4]
 800b16e:	b193      	cbz	r3, 800b196 <rmw_uxrce_find_static_input_buffer_by_owner+0x3e>
 800b170:	689a      	ldr	r2, [r3, #8]
 800b172:	f8d2 1814 	ldr.w	r1, [r2, #2068]	@ 0x814
 800b176:	4288      	cmp	r0, r1
 800b178:	d1f8      	bne.n	800b16c <rmw_uxrce_find_static_input_buffer_by_owner+0x14>
 800b17a:	f8d2 1818 	ldr.w	r1, [r2, #2072]	@ 0x818
 800b17e:	f8d2 281c 	ldr.w	r2, [r2, #2076]	@ 0x81c
 800b182:	4571      	cmp	r1, lr
 800b184:	eb72 050c 	sbcs.w	r5, r2, ip
 800b188:	daf0      	bge.n	800b16c <rmw_uxrce_find_static_input_buffer_by_owner+0x14>
 800b18a:	461c      	mov	r4, r3
 800b18c:	685b      	ldr	r3, [r3, #4]
 800b18e:	468e      	mov	lr, r1
 800b190:	4694      	mov	ip, r2
 800b192:	2b00      	cmp	r3, #0
 800b194:	d1ec      	bne.n	800b170 <rmw_uxrce_find_static_input_buffer_by_owner+0x18>
 800b196:	4620      	mov	r0, r4
 800b198:	bd30      	pop	{r4, r5, pc}
 800b19a:	461c      	mov	r4, r3
 800b19c:	4620      	mov	r0, r4
 800b19e:	bd30      	pop	{r4, r5, pc}
 800b1a0:	2000da6c 	.word	0x2000da6c
 800b1a4:	00000000 	.word	0x00000000

0800b1a8 <rmw_uxrce_clean_expired_static_input_buffer>:
 800b1a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b1ac:	4b3c      	ldr	r3, [pc, #240]	@ (800b2a0 <rmw_uxrce_clean_expired_static_input_buffer+0xf8>)
 800b1ae:	ed2d 8b06 	vpush	{d8-d10}
 800b1b2:	681f      	ldr	r7, [r3, #0]
 800b1b4:	b08d      	sub	sp, #52	@ 0x34
 800b1b6:	f008 fa93 	bl	80136e0 <rmw_uros_epoch_nanos>
 800b1ba:	2f00      	cmp	r7, #0
 800b1bc:	d05d      	beq.n	800b27a <rmw_uxrce_clean_expired_static_input_buffer+0xd2>
 800b1be:	46b8      	mov	r8, r7
 800b1c0:	ed9f 8b31 	vldr	d8, [pc, #196]	@ 800b288 <rmw_uxrce_clean_expired_static_input_buffer+0xe0>
 800b1c4:	f8d8 5008 	ldr.w	r5, [r8, #8]
 800b1c8:	f895 3820 	ldrb.w	r3, [r5, #2080]	@ 0x820
 800b1cc:	2b04      	cmp	r3, #4
 800b1ce:	ed9f ab30 	vldr	d10, [pc, #192]	@ 800b290 <rmw_uxrce_clean_expired_static_input_buffer+0xe8>
 800b1d2:	ed9f 9b31 	vldr	d9, [pc, #196]	@ 800b298 <rmw_uxrce_clean_expired_static_input_buffer+0xf0>
 800b1d6:	4681      	mov	r9, r0
 800b1d8:	468a      	mov	sl, r1
 800b1da:	ac04      	add	r4, sp, #16
 800b1dc:	d03f      	beq.n	800b25e <rmw_uxrce_clean_expired_static_input_buffer+0xb6>
 800b1de:	2b05      	cmp	r3, #5
 800b1e0:	d044      	beq.n	800b26c <rmw_uxrce_clean_expired_static_input_buffer+0xc4>
 800b1e2:	2b03      	cmp	r3, #3
 800b1e4:	d03b      	beq.n	800b25e <rmw_uxrce_clean_expired_static_input_buffer+0xb6>
 800b1e6:	ed8d 8b04 	vstr	d8, [sp, #16]
 800b1ea:	ed8d ab06 	vstr	d10, [sp, #24]
 800b1ee:	ed8d 8b08 	vstr	d8, [sp, #32]
 800b1f2:	ed8d 8b0a 	vstr	d8, [sp, #40]	@ 0x28
 800b1f6:	ab08      	add	r3, sp, #32
 800b1f8:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800b1fa:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 800b1fe:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800b202:	f007 fb9d 	bl	8012940 <rmw_time_equal>
 800b206:	b118      	cbz	r0, 800b210 <rmw_uxrce_clean_expired_static_input_buffer+0x68>
 800b208:	ed8d 9b04 	vstr	d9, [sp, #16]
 800b20c:	ed8d 8b06 	vstr	d8, [sp, #24]
 800b210:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800b214:	f8d5 6818 	ldr.w	r6, [r5, #2072]	@ 0x818
 800b218:	f8d5 781c 	ldr.w	r7, [r5, #2076]	@ 0x81c
 800b21c:	f8d8 b004 	ldr.w	fp, [r8, #4]
 800b220:	f007 fbe2 	bl	80129e8 <rmw_time_total_nsec>
 800b224:	1830      	adds	r0, r6, r0
 800b226:	eb47 0101 	adc.w	r1, r7, r1
 800b22a:	4548      	cmp	r0, r9
 800b22c:	eb71 030a 	sbcs.w	r3, r1, sl
 800b230:	f505 6502 	add.w	r5, r5, #2080	@ 0x820
 800b234:	db05      	blt.n	800b242 <rmw_uxrce_clean_expired_static_input_buffer+0x9a>
 800b236:	e955 2302 	ldrd	r2, r3, [r5, #-8]
 800b23a:	4591      	cmp	r9, r2
 800b23c:	eb7a 0303 	sbcs.w	r3, sl, r3
 800b240:	da03      	bge.n	800b24a <rmw_uxrce_clean_expired_static_input_buffer+0xa2>
 800b242:	4817      	ldr	r0, [pc, #92]	@ (800b2a0 <rmw_uxrce_clean_expired_static_input_buffer+0xf8>)
 800b244:	4641      	mov	r1, r8
 800b246:	f007 fe3f 	bl	8012ec8 <put_memory>
 800b24a:	f1bb 0f00 	cmp.w	fp, #0
 800b24e:	d014      	beq.n	800b27a <rmw_uxrce_clean_expired_static_input_buffer+0xd2>
 800b250:	46d8      	mov	r8, fp
 800b252:	f8d8 5008 	ldr.w	r5, [r8, #8]
 800b256:	f895 3820 	ldrb.w	r3, [r5, #2080]	@ 0x820
 800b25a:	2b04      	cmp	r3, #4
 800b25c:	d1bf      	bne.n	800b1de <rmw_uxrce_clean_expired_static_input_buffer+0x36>
 800b25e:	f8d5 3814 	ldr.w	r3, [r5, #2068]	@ 0x814
 800b262:	3340      	adds	r3, #64	@ 0x40
 800b264:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800b266:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800b26a:	e7c0      	b.n	800b1ee <rmw_uxrce_clean_expired_static_input_buffer+0x46>
 800b26c:	f8d5 3814 	ldr.w	r3, [r5, #2068]	@ 0x814
 800b270:	3348      	adds	r3, #72	@ 0x48
 800b272:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800b274:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800b278:	e7b9      	b.n	800b1ee <rmw_uxrce_clean_expired_static_input_buffer+0x46>
 800b27a:	b00d      	add	sp, #52	@ 0x34
 800b27c:	ecbd 8b06 	vpop	{d8-d10}
 800b280:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b284:	f3af 8000 	nop.w
	...
 800b290:	00000001 	.word	0x00000001
 800b294:	00000000 	.word	0x00000000
 800b298:	0000001e 	.word	0x0000001e
 800b29c:	00000000 	.word	0x00000000
 800b2a0:	2000da6c 	.word	0x2000da6c

0800b2a4 <run_xrce_session>:
 800b2a4:	b510      	push	{r4, lr}
 800b2a6:	788c      	ldrb	r4, [r1, #2]
 800b2a8:	b086      	sub	sp, #24
 800b2aa:	2c01      	cmp	r4, #1
 800b2ac:	f8ad 200e 	strh.w	r2, [sp, #14]
 800b2b0:	d00c      	beq.n	800b2cc <run_xrce_session+0x28>
 800b2b2:	4619      	mov	r1, r3
 800b2b4:	2301      	movs	r3, #1
 800b2b6:	9300      	str	r3, [sp, #0]
 800b2b8:	f10d 020e 	add.w	r2, sp, #14
 800b2bc:	f10d 0317 	add.w	r3, sp, #23
 800b2c0:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800b2c4:	f002 f9ae 	bl	800d624 <uxr_run_session_until_all_status>
 800b2c8:	b006      	add	sp, #24
 800b2ca:	bd10      	pop	{r4, pc}
 800b2cc:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800b2d0:	f001 fdc2 	bl	800ce58 <uxr_flash_output_streams>
 800b2d4:	4620      	mov	r0, r4
 800b2d6:	b006      	add	sp, #24
 800b2d8:	bd10      	pop	{r4, pc}
 800b2da:	bf00      	nop

0800b2dc <convert_qos_profile>:
 800b2dc:	7a4a      	ldrb	r2, [r1, #9]
 800b2de:	f891 c008 	ldrb.w	ip, [r1, #8]
 800b2e2:	2a02      	cmp	r2, #2
 800b2e4:	bf18      	it	ne
 800b2e6:	2200      	movne	r2, #0
 800b2e8:	7002      	strb	r2, [r0, #0]
 800b2ea:	780a      	ldrb	r2, [r1, #0]
 800b2ec:	8889      	ldrh	r1, [r1, #4]
 800b2ee:	8081      	strh	r1, [r0, #4]
 800b2f0:	f1ac 0c02 	sub.w	ip, ip, #2
 800b2f4:	f1a2 0202 	sub.w	r2, r2, #2
 800b2f8:	fabc fc8c 	clz	ip, ip
 800b2fc:	fab2 f282 	clz	r2, r2
 800b300:	ea4f 1c5c 	mov.w	ip, ip, lsr #5
 800b304:	0952      	lsrs	r2, r2, #5
 800b306:	f880 c001 	strb.w	ip, [r0, #1]
 800b30a:	7082      	strb	r2, [r0, #2]
 800b30c:	4770      	bx	lr
 800b30e:	bf00      	nop

0800b310 <generate_type_name>:
 800b310:	b530      	push	{r4, r5, lr}
 800b312:	2300      	movs	r3, #0
 800b314:	700b      	strb	r3, [r1, #0]
 800b316:	6803      	ldr	r3, [r0, #0]
 800b318:	b087      	sub	sp, #28
 800b31a:	4614      	mov	r4, r2
 800b31c:	b1d3      	cbz	r3, 800b354 <generate_type_name+0x44>
 800b31e:	4a0f      	ldr	r2, [pc, #60]	@ (800b35c <generate_type_name+0x4c>)
 800b320:	4615      	mov	r5, r2
 800b322:	9203      	str	r2, [sp, #12]
 800b324:	9500      	str	r5, [sp, #0]
 800b326:	6842      	ldr	r2, [r0, #4]
 800b328:	480d      	ldr	r0, [pc, #52]	@ (800b360 <generate_type_name+0x50>)
 800b32a:	9001      	str	r0, [sp, #4]
 800b32c:	4608      	mov	r0, r1
 800b32e:	490d      	ldr	r1, [pc, #52]	@ (800b364 <generate_type_name+0x54>)
 800b330:	9204      	str	r2, [sp, #16]
 800b332:	9105      	str	r1, [sp, #20]
 800b334:	9102      	str	r1, [sp, #8]
 800b336:	4a0c      	ldr	r2, [pc, #48]	@ (800b368 <generate_type_name+0x58>)
 800b338:	4621      	mov	r1, r4
 800b33a:	f00a f867 	bl	801540c <sniprintf>
 800b33e:	2800      	cmp	r0, #0
 800b340:	db05      	blt.n	800b34e <generate_type_name+0x3e>
 800b342:	4284      	cmp	r4, r0
 800b344:	bfd4      	ite	le
 800b346:	2000      	movle	r0, #0
 800b348:	2001      	movgt	r0, #1
 800b34a:	b007      	add	sp, #28
 800b34c:	bd30      	pop	{r4, r5, pc}
 800b34e:	2000      	movs	r0, #0
 800b350:	b007      	add	sp, #28
 800b352:	bd30      	pop	{r4, r5, pc}
 800b354:	4b05      	ldr	r3, [pc, #20]	@ (800b36c <generate_type_name+0x5c>)
 800b356:	4a01      	ldr	r2, [pc, #4]	@ (800b35c <generate_type_name+0x4c>)
 800b358:	461d      	mov	r5, r3
 800b35a:	e7e2      	b.n	800b322 <generate_type_name+0x12>
 800b35c:	08016738 	.word	0x08016738
 800b360:	08016750 	.word	0x08016750
 800b364:	0801674c 	.word	0x0801674c
 800b368:	0801673c 	.word	0x0801673c
 800b36c:	08016e34 	.word	0x08016e34

0800b370 <generate_topic_name>:
 800b370:	b510      	push	{r4, lr}
 800b372:	b082      	sub	sp, #8
 800b374:	4614      	mov	r4, r2
 800b376:	9000      	str	r0, [sp, #0]
 800b378:	4b08      	ldr	r3, [pc, #32]	@ (800b39c <generate_topic_name+0x2c>)
 800b37a:	4a09      	ldr	r2, [pc, #36]	@ (800b3a0 <generate_topic_name+0x30>)
 800b37c:	4608      	mov	r0, r1
 800b37e:	4621      	mov	r1, r4
 800b380:	f00a f844 	bl	801540c <sniprintf>
 800b384:	2800      	cmp	r0, #0
 800b386:	db05      	blt.n	800b394 <generate_topic_name+0x24>
 800b388:	4284      	cmp	r4, r0
 800b38a:	bfd4      	ite	le
 800b38c:	2000      	movle	r0, #0
 800b38e:	2001      	movgt	r0, #1
 800b390:	b002      	add	sp, #8
 800b392:	bd10      	pop	{r4, pc}
 800b394:	2000      	movs	r0, #0
 800b396:	b002      	add	sp, #8
 800b398:	bd10      	pop	{r4, pc}
 800b39a:	bf00      	nop
 800b39c:	0801675c 	.word	0x0801675c
 800b3a0:	08016754 	.word	0x08016754

0800b3a4 <is_uxrce_rmw_identifier_valid>:
 800b3a4:	b510      	push	{r4, lr}
 800b3a6:	4604      	mov	r4, r0
 800b3a8:	b140      	cbz	r0, 800b3bc <is_uxrce_rmw_identifier_valid+0x18>
 800b3aa:	f007 fde5 	bl	8012f78 <rmw_get_implementation_identifier>
 800b3ae:	4601      	mov	r1, r0
 800b3b0:	4620      	mov	r0, r4
 800b3b2:	f7f4 ff15 	bl	80001e0 <strcmp>
 800b3b6:	fab0 f080 	clz	r0, r0
 800b3ba:	0940      	lsrs	r0, r0, #5
 800b3bc:	bd10      	pop	{r4, pc}
 800b3be:	bf00      	nop

0800b3c0 <get_message_typesupport_handle>:
 800b3c0:	6883      	ldr	r3, [r0, #8]
 800b3c2:	4718      	bx	r3

0800b3c4 <get_message_typesupport_handle_function>:
 800b3c4:	b510      	push	{r4, lr}
 800b3c6:	4604      	mov	r4, r0
 800b3c8:	6800      	ldr	r0, [r0, #0]
 800b3ca:	f7f4 ff09 	bl	80001e0 <strcmp>
 800b3ce:	2800      	cmp	r0, #0
 800b3d0:	bf0c      	ite	eq
 800b3d2:	4620      	moveq	r0, r4
 800b3d4:	2000      	movne	r0, #0
 800b3d6:	bd10      	pop	{r4, pc}

0800b3d8 <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Int32>:
 800b3d8:	4b04      	ldr	r3, [pc, #16]	@ (800b3ec <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Int32+0x14>)
 800b3da:	681a      	ldr	r2, [r3, #0]
 800b3dc:	b10a      	cbz	r2, 800b3e2 <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Int32+0xa>
 800b3de:	4803      	ldr	r0, [pc, #12]	@ (800b3ec <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Int32+0x14>)
 800b3e0:	4770      	bx	lr
 800b3e2:	4a03      	ldr	r2, [pc, #12]	@ (800b3f0 <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Int32+0x18>)
 800b3e4:	4801      	ldr	r0, [pc, #4]	@ (800b3ec <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Int32+0x14>)
 800b3e6:	6812      	ldr	r2, [r2, #0]
 800b3e8:	601a      	str	r2, [r3, #0]
 800b3ea:	4770      	bx	lr
 800b3ec:	20000030 	.word	0x20000030
 800b3f0:	200000ac 	.word	0x200000ac

0800b3f4 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Int32>:
 800b3f4:	4a02      	ldr	r2, [pc, #8]	@ (800b400 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Int32+0xc>)
 800b3f6:	4b03      	ldr	r3, [pc, #12]	@ (800b404 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Int32+0x10>)
 800b3f8:	6812      	ldr	r2, [r2, #0]
 800b3fa:	601a      	str	r2, [r3, #0]
 800b3fc:	4770      	bx	lr
 800b3fe:	bf00      	nop
 800b400:	200000ac 	.word	0x200000ac
 800b404:	20000030 	.word	0x20000030

0800b408 <std_msgs__msg__Int32__rosidl_typesupport_introspection_c__Int32_init_function>:
 800b408:	f008 b9a6 	b.w	8013758 <std_msgs__msg__Int32__init>

0800b40c <std_msgs__msg__Int32__rosidl_typesupport_introspection_c__Int32_fini_function>:
 800b40c:	f008 b9a8 	b.w	8013760 <std_msgs__msg__Int32__fini>

0800b410 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Int32>:
 800b410:	4b04      	ldr	r3, [pc, #16]	@ (800b424 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Int32+0x14>)
 800b412:	681a      	ldr	r2, [r3, #0]
 800b414:	b10a      	cbz	r2, 800b41a <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Int32+0xa>
 800b416:	4803      	ldr	r0, [pc, #12]	@ (800b424 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Int32+0x14>)
 800b418:	4770      	bx	lr
 800b41a:	4a03      	ldr	r2, [pc, #12]	@ (800b428 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Int32+0x18>)
 800b41c:	4801      	ldr	r0, [pc, #4]	@ (800b424 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Int32+0x14>)
 800b41e:	6812      	ldr	r2, [r2, #0]
 800b420:	601a      	str	r2, [r3, #0]
 800b422:	4770      	bx	lr
 800b424:	20000078 	.word	0x20000078
 800b428:	200000b0 	.word	0x200000b0

0800b42c <_Int32__max_serialized_size>:
 800b42c:	b508      	push	{r3, lr}
 800b42e:	2104      	movs	r1, #4
 800b430:	2000      	movs	r0, #0
 800b432:	f001 f807 	bl	800c444 <ucdr_alignment>
 800b436:	3004      	adds	r0, #4
 800b438:	bd08      	pop	{r3, pc}
 800b43a:	bf00      	nop

0800b43c <_Int32__cdr_deserialize>:
 800b43c:	b109      	cbz	r1, 800b442 <_Int32__cdr_deserialize+0x6>
 800b43e:	f000 bf19 	b.w	800c274 <ucdr_deserialize_int32_t>
 800b442:	4608      	mov	r0, r1
 800b444:	4770      	bx	lr
 800b446:	bf00      	nop

0800b448 <get_serialized_size_std_msgs__msg__Int32>:
 800b448:	b138      	cbz	r0, 800b45a <get_serialized_size_std_msgs__msg__Int32+0x12>
 800b44a:	b508      	push	{r3, lr}
 800b44c:	460b      	mov	r3, r1
 800b44e:	4618      	mov	r0, r3
 800b450:	2104      	movs	r1, #4
 800b452:	f000 fff7 	bl	800c444 <ucdr_alignment>
 800b456:	3004      	adds	r0, #4
 800b458:	bd08      	pop	{r3, pc}
 800b45a:	4770      	bx	lr

0800b45c <_Int32__cdr_serialize>:
 800b45c:	460a      	mov	r2, r1
 800b45e:	b118      	cbz	r0, 800b468 <_Int32__cdr_serialize+0xc>
 800b460:	6801      	ldr	r1, [r0, #0]
 800b462:	4610      	mov	r0, r2
 800b464:	f000 be6e 	b.w	800c144 <ucdr_serialize_int32_t>
 800b468:	4770      	bx	lr
 800b46a:	bf00      	nop

0800b46c <_Int32__get_serialized_size>:
 800b46c:	b130      	cbz	r0, 800b47c <_Int32__get_serialized_size+0x10>
 800b46e:	b508      	push	{r3, lr}
 800b470:	2104      	movs	r1, #4
 800b472:	2000      	movs	r0, #0
 800b474:	f000 ffe6 	bl	800c444 <ucdr_alignment>
 800b478:	3004      	adds	r0, #4
 800b47a:	bd08      	pop	{r3, pc}
 800b47c:	4770      	bx	lr
 800b47e:	bf00      	nop

0800b480 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__Int32>:
 800b480:	4800      	ldr	r0, [pc, #0]	@ (800b484 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__Int32+0x4>)
 800b482:	4770      	bx	lr
 800b484:	20000084 	.word	0x20000084

0800b488 <ucdr_serialize_bool>:
 800b488:	b538      	push	{r3, r4, r5, lr}
 800b48a:	460d      	mov	r5, r1
 800b48c:	2101      	movs	r1, #1
 800b48e:	4604      	mov	r4, r0
 800b490:	f000 ff8c 	bl	800c3ac <ucdr_check_final_buffer_behavior>
 800b494:	b148      	cbz	r0, 800b4aa <ucdr_serialize_bool+0x22>
 800b496:	68a3      	ldr	r3, [r4, #8]
 800b498:	701d      	strb	r5, [r3, #0]
 800b49a:	68a2      	ldr	r2, [r4, #8]
 800b49c:	6923      	ldr	r3, [r4, #16]
 800b49e:	2101      	movs	r1, #1
 800b4a0:	440a      	add	r2, r1
 800b4a2:	440b      	add	r3, r1
 800b4a4:	60a2      	str	r2, [r4, #8]
 800b4a6:	6123      	str	r3, [r4, #16]
 800b4a8:	7561      	strb	r1, [r4, #21]
 800b4aa:	7da0      	ldrb	r0, [r4, #22]
 800b4ac:	f080 0001 	eor.w	r0, r0, #1
 800b4b0:	bd38      	pop	{r3, r4, r5, pc}
 800b4b2:	bf00      	nop

0800b4b4 <ucdr_deserialize_bool>:
 800b4b4:	b538      	push	{r3, r4, r5, lr}
 800b4b6:	460d      	mov	r5, r1
 800b4b8:	2101      	movs	r1, #1
 800b4ba:	4604      	mov	r4, r0
 800b4bc:	f000 ff76 	bl	800c3ac <ucdr_check_final_buffer_behavior>
 800b4c0:	b160      	cbz	r0, 800b4dc <ucdr_deserialize_bool+0x28>
 800b4c2:	68a2      	ldr	r2, [r4, #8]
 800b4c4:	6923      	ldr	r3, [r4, #16]
 800b4c6:	f812 1b01 	ldrb.w	r1, [r2], #1
 800b4ca:	3900      	subs	r1, #0
 800b4cc:	bf18      	it	ne
 800b4ce:	2101      	movne	r1, #1
 800b4d0:	7029      	strb	r1, [r5, #0]
 800b4d2:	3301      	adds	r3, #1
 800b4d4:	2101      	movs	r1, #1
 800b4d6:	60a2      	str	r2, [r4, #8]
 800b4d8:	6123      	str	r3, [r4, #16]
 800b4da:	7561      	strb	r1, [r4, #21]
 800b4dc:	7da0      	ldrb	r0, [r4, #22]
 800b4de:	f080 0001 	eor.w	r0, r0, #1
 800b4e2:	bd38      	pop	{r3, r4, r5, pc}

0800b4e4 <ucdr_serialize_uint8_t>:
 800b4e4:	b538      	push	{r3, r4, r5, lr}
 800b4e6:	460d      	mov	r5, r1
 800b4e8:	2101      	movs	r1, #1
 800b4ea:	4604      	mov	r4, r0
 800b4ec:	f000 ff5e 	bl	800c3ac <ucdr_check_final_buffer_behavior>
 800b4f0:	b148      	cbz	r0, 800b506 <ucdr_serialize_uint8_t+0x22>
 800b4f2:	68a3      	ldr	r3, [r4, #8]
 800b4f4:	701d      	strb	r5, [r3, #0]
 800b4f6:	68a2      	ldr	r2, [r4, #8]
 800b4f8:	6923      	ldr	r3, [r4, #16]
 800b4fa:	2101      	movs	r1, #1
 800b4fc:	440a      	add	r2, r1
 800b4fe:	440b      	add	r3, r1
 800b500:	60a2      	str	r2, [r4, #8]
 800b502:	6123      	str	r3, [r4, #16]
 800b504:	7561      	strb	r1, [r4, #21]
 800b506:	7da0      	ldrb	r0, [r4, #22]
 800b508:	f080 0001 	eor.w	r0, r0, #1
 800b50c:	bd38      	pop	{r3, r4, r5, pc}
 800b50e:	bf00      	nop

0800b510 <ucdr_deserialize_uint8_t>:
 800b510:	b538      	push	{r3, r4, r5, lr}
 800b512:	460d      	mov	r5, r1
 800b514:	2101      	movs	r1, #1
 800b516:	4604      	mov	r4, r0
 800b518:	f000 ff48 	bl	800c3ac <ucdr_check_final_buffer_behavior>
 800b51c:	b150      	cbz	r0, 800b534 <ucdr_deserialize_uint8_t+0x24>
 800b51e:	68a3      	ldr	r3, [r4, #8]
 800b520:	781b      	ldrb	r3, [r3, #0]
 800b522:	702b      	strb	r3, [r5, #0]
 800b524:	68a2      	ldr	r2, [r4, #8]
 800b526:	6923      	ldr	r3, [r4, #16]
 800b528:	2101      	movs	r1, #1
 800b52a:	440a      	add	r2, r1
 800b52c:	440b      	add	r3, r1
 800b52e:	60a2      	str	r2, [r4, #8]
 800b530:	6123      	str	r3, [r4, #16]
 800b532:	7561      	strb	r1, [r4, #21]
 800b534:	7da0      	ldrb	r0, [r4, #22]
 800b536:	f080 0001 	eor.w	r0, r0, #1
 800b53a:	bd38      	pop	{r3, r4, r5, pc}

0800b53c <ucdr_serialize_uint16_t>:
 800b53c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b540:	b082      	sub	sp, #8
 800b542:	460b      	mov	r3, r1
 800b544:	2102      	movs	r1, #2
 800b546:	4604      	mov	r4, r0
 800b548:	f8ad 3006 	strh.w	r3, [sp, #6]
 800b54c:	f000 ff82 	bl	800c454 <ucdr_buffer_alignment>
 800b550:	4601      	mov	r1, r0
 800b552:	4620      	mov	r0, r4
 800b554:	7d67      	ldrb	r7, [r4, #21]
 800b556:	f000 ffc1 	bl	800c4dc <ucdr_advance_buffer>
 800b55a:	2102      	movs	r1, #2
 800b55c:	4620      	mov	r0, r4
 800b55e:	f000 ff19 	bl	800c394 <ucdr_check_buffer_available_for>
 800b562:	bb78      	cbnz	r0, 800b5c4 <ucdr_serialize_uint16_t+0x88>
 800b564:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 800b568:	42ab      	cmp	r3, r5
 800b56a:	d926      	bls.n	800b5ba <ucdr_serialize_uint16_t+0x7e>
 800b56c:	1b5e      	subs	r6, r3, r5
 800b56e:	60a3      	str	r3, [r4, #8]
 800b570:	6923      	ldr	r3, [r4, #16]
 800b572:	f1c6 0802 	rsb	r8, r6, #2
 800b576:	4433      	add	r3, r6
 800b578:	6123      	str	r3, [r4, #16]
 800b57a:	4641      	mov	r1, r8
 800b57c:	4620      	mov	r0, r4
 800b57e:	f000 ff15 	bl	800c3ac <ucdr_check_final_buffer_behavior>
 800b582:	2800      	cmp	r0, #0
 800b584:	d03b      	beq.n	800b5fe <ucdr_serialize_uint16_t+0xc2>
 800b586:	7d23      	ldrb	r3, [r4, #20]
 800b588:	2b01      	cmp	r3, #1
 800b58a:	d04a      	beq.n	800b622 <ucdr_serialize_uint16_t+0xe6>
 800b58c:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800b590:	702b      	strb	r3, [r5, #0]
 800b592:	2e00      	cmp	r6, #0
 800b594:	d040      	beq.n	800b618 <ucdr_serialize_uint16_t+0xdc>
 800b596:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800b59a:	706b      	strb	r3, [r5, #1]
 800b59c:	6923      	ldr	r3, [r4, #16]
 800b59e:	68a2      	ldr	r2, [r4, #8]
 800b5a0:	7da0      	ldrb	r0, [r4, #22]
 800b5a2:	3302      	adds	r3, #2
 800b5a4:	1b9e      	subs	r6, r3, r6
 800b5a6:	4442      	add	r2, r8
 800b5a8:	2302      	movs	r3, #2
 800b5aa:	f080 0001 	eor.w	r0, r0, #1
 800b5ae:	60a2      	str	r2, [r4, #8]
 800b5b0:	6126      	str	r6, [r4, #16]
 800b5b2:	7563      	strb	r3, [r4, #21]
 800b5b4:	b002      	add	sp, #8
 800b5b6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b5ba:	2102      	movs	r1, #2
 800b5bc:	4620      	mov	r0, r4
 800b5be:	f000 fef5 	bl	800c3ac <ucdr_check_final_buffer_behavior>
 800b5c2:	b190      	cbz	r0, 800b5ea <ucdr_serialize_uint16_t+0xae>
 800b5c4:	7d23      	ldrb	r3, [r4, #20]
 800b5c6:	2b01      	cmp	r3, #1
 800b5c8:	68a3      	ldr	r3, [r4, #8]
 800b5ca:	d014      	beq.n	800b5f6 <ucdr_serialize_uint16_t+0xba>
 800b5cc:	f89d 2007 	ldrb.w	r2, [sp, #7]
 800b5d0:	701a      	strb	r2, [r3, #0]
 800b5d2:	68a3      	ldr	r3, [r4, #8]
 800b5d4:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800b5d8:	705a      	strb	r2, [r3, #1]
 800b5da:	68a2      	ldr	r2, [r4, #8]
 800b5dc:	6923      	ldr	r3, [r4, #16]
 800b5de:	3202      	adds	r2, #2
 800b5e0:	3302      	adds	r3, #2
 800b5e2:	2102      	movs	r1, #2
 800b5e4:	60a2      	str	r2, [r4, #8]
 800b5e6:	6123      	str	r3, [r4, #16]
 800b5e8:	7561      	strb	r1, [r4, #21]
 800b5ea:	7da0      	ldrb	r0, [r4, #22]
 800b5ec:	f080 0001 	eor.w	r0, r0, #1
 800b5f0:	b002      	add	sp, #8
 800b5f2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b5f6:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 800b5fa:	801a      	strh	r2, [r3, #0]
 800b5fc:	e7ed      	b.n	800b5da <ucdr_serialize_uint16_t+0x9e>
 800b5fe:	68a2      	ldr	r2, [r4, #8]
 800b600:	6923      	ldr	r3, [r4, #16]
 800b602:	7da0      	ldrb	r0, [r4, #22]
 800b604:	7567      	strb	r7, [r4, #21]
 800b606:	1b92      	subs	r2, r2, r6
 800b608:	1b9b      	subs	r3, r3, r6
 800b60a:	f080 0001 	eor.w	r0, r0, #1
 800b60e:	60a2      	str	r2, [r4, #8]
 800b610:	6123      	str	r3, [r4, #16]
 800b612:	b002      	add	sp, #8
 800b614:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b618:	68a3      	ldr	r3, [r4, #8]
 800b61a:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800b61e:	701a      	strb	r2, [r3, #0]
 800b620:	e7bc      	b.n	800b59c <ucdr_serialize_uint16_t+0x60>
 800b622:	4628      	mov	r0, r5
 800b624:	f10d 0506 	add.w	r5, sp, #6
 800b628:	4629      	mov	r1, r5
 800b62a:	4632      	mov	r2, r6
 800b62c:	f00a f891 	bl	8015752 <memcpy>
 800b630:	68a0      	ldr	r0, [r4, #8]
 800b632:	4642      	mov	r2, r8
 800b634:	19a9      	adds	r1, r5, r6
 800b636:	f00a f88c 	bl	8015752 <memcpy>
 800b63a:	e7af      	b.n	800b59c <ucdr_serialize_uint16_t+0x60>

0800b63c <ucdr_serialize_endian_uint16_t>:
 800b63c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800b640:	b083      	sub	sp, #12
 800b642:	460d      	mov	r5, r1
 800b644:	2102      	movs	r1, #2
 800b646:	4604      	mov	r4, r0
 800b648:	f8ad 2006 	strh.w	r2, [sp, #6]
 800b64c:	f000 ff02 	bl	800c454 <ucdr_buffer_alignment>
 800b650:	4601      	mov	r1, r0
 800b652:	4620      	mov	r0, r4
 800b654:	f894 8015 	ldrb.w	r8, [r4, #21]
 800b658:	f000 ff40 	bl	800c4dc <ucdr_advance_buffer>
 800b65c:	2102      	movs	r1, #2
 800b65e:	4620      	mov	r0, r4
 800b660:	f000 fe98 	bl	800c394 <ucdr_check_buffer_available_for>
 800b664:	bb70      	cbnz	r0, 800b6c4 <ucdr_serialize_endian_uint16_t+0x88>
 800b666:	e9d4 6701 	ldrd	r6, r7, [r4, #4]
 800b66a:	42be      	cmp	r6, r7
 800b66c:	d925      	bls.n	800b6ba <ucdr_serialize_endian_uint16_t+0x7e>
 800b66e:	6923      	ldr	r3, [r4, #16]
 800b670:	60a6      	str	r6, [r4, #8]
 800b672:	1bf6      	subs	r6, r6, r7
 800b674:	4433      	add	r3, r6
 800b676:	f1c6 0902 	rsb	r9, r6, #2
 800b67a:	6123      	str	r3, [r4, #16]
 800b67c:	4649      	mov	r1, r9
 800b67e:	4620      	mov	r0, r4
 800b680:	f000 fe94 	bl	800c3ac <ucdr_check_final_buffer_behavior>
 800b684:	2800      	cmp	r0, #0
 800b686:	d039      	beq.n	800b6fc <ucdr_serialize_endian_uint16_t+0xc0>
 800b688:	2d01      	cmp	r5, #1
 800b68a:	d04a      	beq.n	800b722 <ucdr_serialize_endian_uint16_t+0xe6>
 800b68c:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800b690:	703b      	strb	r3, [r7, #0]
 800b692:	2e00      	cmp	r6, #0
 800b694:	d040      	beq.n	800b718 <ucdr_serialize_endian_uint16_t+0xdc>
 800b696:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800b69a:	707b      	strb	r3, [r7, #1]
 800b69c:	6923      	ldr	r3, [r4, #16]
 800b69e:	68a2      	ldr	r2, [r4, #8]
 800b6a0:	7da0      	ldrb	r0, [r4, #22]
 800b6a2:	3302      	adds	r3, #2
 800b6a4:	444a      	add	r2, r9
 800b6a6:	1b9b      	subs	r3, r3, r6
 800b6a8:	2102      	movs	r1, #2
 800b6aa:	f080 0001 	eor.w	r0, r0, #1
 800b6ae:	60a2      	str	r2, [r4, #8]
 800b6b0:	6123      	str	r3, [r4, #16]
 800b6b2:	7561      	strb	r1, [r4, #21]
 800b6b4:	b003      	add	sp, #12
 800b6b6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b6ba:	2102      	movs	r1, #2
 800b6bc:	4620      	mov	r0, r4
 800b6be:	f000 fe75 	bl	800c3ac <ucdr_check_final_buffer_behavior>
 800b6c2:	b188      	cbz	r0, 800b6e8 <ucdr_serialize_endian_uint16_t+0xac>
 800b6c4:	2d01      	cmp	r5, #1
 800b6c6:	68a3      	ldr	r3, [r4, #8]
 800b6c8:	d014      	beq.n	800b6f4 <ucdr_serialize_endian_uint16_t+0xb8>
 800b6ca:	f89d 2007 	ldrb.w	r2, [sp, #7]
 800b6ce:	701a      	strb	r2, [r3, #0]
 800b6d0:	68a3      	ldr	r3, [r4, #8]
 800b6d2:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800b6d6:	705a      	strb	r2, [r3, #1]
 800b6d8:	68a2      	ldr	r2, [r4, #8]
 800b6da:	6923      	ldr	r3, [r4, #16]
 800b6dc:	3202      	adds	r2, #2
 800b6de:	3302      	adds	r3, #2
 800b6e0:	2102      	movs	r1, #2
 800b6e2:	60a2      	str	r2, [r4, #8]
 800b6e4:	6123      	str	r3, [r4, #16]
 800b6e6:	7561      	strb	r1, [r4, #21]
 800b6e8:	7da0      	ldrb	r0, [r4, #22]
 800b6ea:	f080 0001 	eor.w	r0, r0, #1
 800b6ee:	b003      	add	sp, #12
 800b6f0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b6f4:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 800b6f8:	801a      	strh	r2, [r3, #0]
 800b6fa:	e7ed      	b.n	800b6d8 <ucdr_serialize_endian_uint16_t+0x9c>
 800b6fc:	68a2      	ldr	r2, [r4, #8]
 800b6fe:	6923      	ldr	r3, [r4, #16]
 800b700:	7da0      	ldrb	r0, [r4, #22]
 800b702:	f884 8015 	strb.w	r8, [r4, #21]
 800b706:	1b92      	subs	r2, r2, r6
 800b708:	1b9b      	subs	r3, r3, r6
 800b70a:	f080 0001 	eor.w	r0, r0, #1
 800b70e:	60a2      	str	r2, [r4, #8]
 800b710:	6123      	str	r3, [r4, #16]
 800b712:	b003      	add	sp, #12
 800b714:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b718:	68a3      	ldr	r3, [r4, #8]
 800b71a:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800b71e:	701a      	strb	r2, [r3, #0]
 800b720:	e7bc      	b.n	800b69c <ucdr_serialize_endian_uint16_t+0x60>
 800b722:	f10d 0506 	add.w	r5, sp, #6
 800b726:	4629      	mov	r1, r5
 800b728:	4632      	mov	r2, r6
 800b72a:	4638      	mov	r0, r7
 800b72c:	f00a f811 	bl	8015752 <memcpy>
 800b730:	68a0      	ldr	r0, [r4, #8]
 800b732:	464a      	mov	r2, r9
 800b734:	19a9      	adds	r1, r5, r6
 800b736:	f00a f80c 	bl	8015752 <memcpy>
 800b73a:	e7af      	b.n	800b69c <ucdr_serialize_endian_uint16_t+0x60>

0800b73c <ucdr_deserialize_uint16_t>:
 800b73c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b740:	460d      	mov	r5, r1
 800b742:	2102      	movs	r1, #2
 800b744:	4604      	mov	r4, r0
 800b746:	f000 fe85 	bl	800c454 <ucdr_buffer_alignment>
 800b74a:	4601      	mov	r1, r0
 800b74c:	4620      	mov	r0, r4
 800b74e:	f894 8015 	ldrb.w	r8, [r4, #21]
 800b752:	f000 fec3 	bl	800c4dc <ucdr_advance_buffer>
 800b756:	2102      	movs	r1, #2
 800b758:	4620      	mov	r0, r4
 800b75a:	f000 fe1b 	bl	800c394 <ucdr_check_buffer_available_for>
 800b75e:	bb60      	cbnz	r0, 800b7ba <ucdr_deserialize_uint16_t+0x7e>
 800b760:	e9d4 6701 	ldrd	r6, r7, [r4, #4]
 800b764:	42be      	cmp	r6, r7
 800b766:	d923      	bls.n	800b7b0 <ucdr_deserialize_uint16_t+0x74>
 800b768:	6923      	ldr	r3, [r4, #16]
 800b76a:	60a6      	str	r6, [r4, #8]
 800b76c:	1bf6      	subs	r6, r6, r7
 800b76e:	4433      	add	r3, r6
 800b770:	f1c6 0902 	rsb	r9, r6, #2
 800b774:	6123      	str	r3, [r4, #16]
 800b776:	4649      	mov	r1, r9
 800b778:	4620      	mov	r0, r4
 800b77a:	f000 fe17 	bl	800c3ac <ucdr_check_final_buffer_behavior>
 800b77e:	2800      	cmp	r0, #0
 800b780:	d034      	beq.n	800b7ec <ucdr_deserialize_uint16_t+0xb0>
 800b782:	7d23      	ldrb	r3, [r4, #20]
 800b784:	2b01      	cmp	r3, #1
 800b786:	d042      	beq.n	800b80e <ucdr_deserialize_uint16_t+0xd2>
 800b788:	787b      	ldrb	r3, [r7, #1]
 800b78a:	702b      	strb	r3, [r5, #0]
 800b78c:	2e00      	cmp	r6, #0
 800b78e:	d03a      	beq.n	800b806 <ucdr_deserialize_uint16_t+0xca>
 800b790:	783b      	ldrb	r3, [r7, #0]
 800b792:	706b      	strb	r3, [r5, #1]
 800b794:	6923      	ldr	r3, [r4, #16]
 800b796:	68a2      	ldr	r2, [r4, #8]
 800b798:	7da0      	ldrb	r0, [r4, #22]
 800b79a:	2102      	movs	r1, #2
 800b79c:	3302      	adds	r3, #2
 800b79e:	444a      	add	r2, r9
 800b7a0:	1b9b      	subs	r3, r3, r6
 800b7a2:	7561      	strb	r1, [r4, #21]
 800b7a4:	60a2      	str	r2, [r4, #8]
 800b7a6:	6123      	str	r3, [r4, #16]
 800b7a8:	f080 0001 	eor.w	r0, r0, #1
 800b7ac:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b7b0:	2102      	movs	r1, #2
 800b7b2:	4620      	mov	r0, r4
 800b7b4:	f000 fdfa 	bl	800c3ac <ucdr_check_final_buffer_behavior>
 800b7b8:	b180      	cbz	r0, 800b7dc <ucdr_deserialize_uint16_t+0xa0>
 800b7ba:	7d23      	ldrb	r3, [r4, #20]
 800b7bc:	2b01      	cmp	r3, #1
 800b7be:	68a3      	ldr	r3, [r4, #8]
 800b7c0:	d011      	beq.n	800b7e6 <ucdr_deserialize_uint16_t+0xaa>
 800b7c2:	785b      	ldrb	r3, [r3, #1]
 800b7c4:	702b      	strb	r3, [r5, #0]
 800b7c6:	68a3      	ldr	r3, [r4, #8]
 800b7c8:	781b      	ldrb	r3, [r3, #0]
 800b7ca:	706b      	strb	r3, [r5, #1]
 800b7cc:	68a2      	ldr	r2, [r4, #8]
 800b7ce:	6923      	ldr	r3, [r4, #16]
 800b7d0:	3202      	adds	r2, #2
 800b7d2:	3302      	adds	r3, #2
 800b7d4:	2102      	movs	r1, #2
 800b7d6:	60a2      	str	r2, [r4, #8]
 800b7d8:	6123      	str	r3, [r4, #16]
 800b7da:	7561      	strb	r1, [r4, #21]
 800b7dc:	7da0      	ldrb	r0, [r4, #22]
 800b7de:	f080 0001 	eor.w	r0, r0, #1
 800b7e2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b7e6:	881b      	ldrh	r3, [r3, #0]
 800b7e8:	802b      	strh	r3, [r5, #0]
 800b7ea:	e7ef      	b.n	800b7cc <ucdr_deserialize_uint16_t+0x90>
 800b7ec:	68a2      	ldr	r2, [r4, #8]
 800b7ee:	6923      	ldr	r3, [r4, #16]
 800b7f0:	7da0      	ldrb	r0, [r4, #22]
 800b7f2:	f884 8015 	strb.w	r8, [r4, #21]
 800b7f6:	1b92      	subs	r2, r2, r6
 800b7f8:	1b9b      	subs	r3, r3, r6
 800b7fa:	60a2      	str	r2, [r4, #8]
 800b7fc:	6123      	str	r3, [r4, #16]
 800b7fe:	f080 0001 	eor.w	r0, r0, #1
 800b802:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b806:	68a3      	ldr	r3, [r4, #8]
 800b808:	781b      	ldrb	r3, [r3, #0]
 800b80a:	706b      	strb	r3, [r5, #1]
 800b80c:	e7c2      	b.n	800b794 <ucdr_deserialize_uint16_t+0x58>
 800b80e:	4639      	mov	r1, r7
 800b810:	4632      	mov	r2, r6
 800b812:	4628      	mov	r0, r5
 800b814:	f009 ff9d 	bl	8015752 <memcpy>
 800b818:	68a1      	ldr	r1, [r4, #8]
 800b81a:	464a      	mov	r2, r9
 800b81c:	19a8      	adds	r0, r5, r6
 800b81e:	f009 ff98 	bl	8015752 <memcpy>
 800b822:	e7b7      	b.n	800b794 <ucdr_deserialize_uint16_t+0x58>

0800b824 <ucdr_deserialize_endian_uint16_t>:
 800b824:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b828:	460e      	mov	r6, r1
 800b82a:	2102      	movs	r1, #2
 800b82c:	4604      	mov	r4, r0
 800b82e:	4615      	mov	r5, r2
 800b830:	f000 fe10 	bl	800c454 <ucdr_buffer_alignment>
 800b834:	4601      	mov	r1, r0
 800b836:	4620      	mov	r0, r4
 800b838:	f894 9015 	ldrb.w	r9, [r4, #21]
 800b83c:	f000 fe4e 	bl	800c4dc <ucdr_advance_buffer>
 800b840:	2102      	movs	r1, #2
 800b842:	4620      	mov	r0, r4
 800b844:	f000 fda6 	bl	800c394 <ucdr_check_buffer_available_for>
 800b848:	bb70      	cbnz	r0, 800b8a8 <ucdr_deserialize_endian_uint16_t+0x84>
 800b84a:	e9d4 7801 	ldrd	r7, r8, [r4, #4]
 800b84e:	4547      	cmp	r7, r8
 800b850:	d925      	bls.n	800b89e <ucdr_deserialize_endian_uint16_t+0x7a>
 800b852:	6923      	ldr	r3, [r4, #16]
 800b854:	60a7      	str	r7, [r4, #8]
 800b856:	eba7 0708 	sub.w	r7, r7, r8
 800b85a:	443b      	add	r3, r7
 800b85c:	f1c7 0a02 	rsb	sl, r7, #2
 800b860:	6123      	str	r3, [r4, #16]
 800b862:	4651      	mov	r1, sl
 800b864:	4620      	mov	r0, r4
 800b866:	f000 fda1 	bl	800c3ac <ucdr_check_final_buffer_behavior>
 800b86a:	2800      	cmp	r0, #0
 800b86c:	d034      	beq.n	800b8d8 <ucdr_deserialize_endian_uint16_t+0xb4>
 800b86e:	2e01      	cmp	r6, #1
 800b870:	d043      	beq.n	800b8fa <ucdr_deserialize_endian_uint16_t+0xd6>
 800b872:	f898 3001 	ldrb.w	r3, [r8, #1]
 800b876:	702b      	strb	r3, [r5, #0]
 800b878:	2f00      	cmp	r7, #0
 800b87a:	d03a      	beq.n	800b8f2 <ucdr_deserialize_endian_uint16_t+0xce>
 800b87c:	f898 3000 	ldrb.w	r3, [r8]
 800b880:	706b      	strb	r3, [r5, #1]
 800b882:	6923      	ldr	r3, [r4, #16]
 800b884:	68a2      	ldr	r2, [r4, #8]
 800b886:	7da0      	ldrb	r0, [r4, #22]
 800b888:	2102      	movs	r1, #2
 800b88a:	3302      	adds	r3, #2
 800b88c:	4452      	add	r2, sl
 800b88e:	1bdb      	subs	r3, r3, r7
 800b890:	7561      	strb	r1, [r4, #21]
 800b892:	60a2      	str	r2, [r4, #8]
 800b894:	6123      	str	r3, [r4, #16]
 800b896:	f080 0001 	eor.w	r0, r0, #1
 800b89a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b89e:	2102      	movs	r1, #2
 800b8a0:	4620      	mov	r0, r4
 800b8a2:	f000 fd83 	bl	800c3ac <ucdr_check_final_buffer_behavior>
 800b8a6:	b178      	cbz	r0, 800b8c8 <ucdr_deserialize_endian_uint16_t+0xa4>
 800b8a8:	2e01      	cmp	r6, #1
 800b8aa:	68a3      	ldr	r3, [r4, #8]
 800b8ac:	d011      	beq.n	800b8d2 <ucdr_deserialize_endian_uint16_t+0xae>
 800b8ae:	785b      	ldrb	r3, [r3, #1]
 800b8b0:	702b      	strb	r3, [r5, #0]
 800b8b2:	68a3      	ldr	r3, [r4, #8]
 800b8b4:	781b      	ldrb	r3, [r3, #0]
 800b8b6:	706b      	strb	r3, [r5, #1]
 800b8b8:	68a2      	ldr	r2, [r4, #8]
 800b8ba:	6923      	ldr	r3, [r4, #16]
 800b8bc:	3202      	adds	r2, #2
 800b8be:	3302      	adds	r3, #2
 800b8c0:	2102      	movs	r1, #2
 800b8c2:	60a2      	str	r2, [r4, #8]
 800b8c4:	6123      	str	r3, [r4, #16]
 800b8c6:	7561      	strb	r1, [r4, #21]
 800b8c8:	7da0      	ldrb	r0, [r4, #22]
 800b8ca:	f080 0001 	eor.w	r0, r0, #1
 800b8ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b8d2:	881b      	ldrh	r3, [r3, #0]
 800b8d4:	802b      	strh	r3, [r5, #0]
 800b8d6:	e7ef      	b.n	800b8b8 <ucdr_deserialize_endian_uint16_t+0x94>
 800b8d8:	68a2      	ldr	r2, [r4, #8]
 800b8da:	6923      	ldr	r3, [r4, #16]
 800b8dc:	7da0      	ldrb	r0, [r4, #22]
 800b8de:	f884 9015 	strb.w	r9, [r4, #21]
 800b8e2:	1bd2      	subs	r2, r2, r7
 800b8e4:	1bdb      	subs	r3, r3, r7
 800b8e6:	60a2      	str	r2, [r4, #8]
 800b8e8:	6123      	str	r3, [r4, #16]
 800b8ea:	f080 0001 	eor.w	r0, r0, #1
 800b8ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b8f2:	68a3      	ldr	r3, [r4, #8]
 800b8f4:	781b      	ldrb	r3, [r3, #0]
 800b8f6:	706b      	strb	r3, [r5, #1]
 800b8f8:	e7c3      	b.n	800b882 <ucdr_deserialize_endian_uint16_t+0x5e>
 800b8fa:	4641      	mov	r1, r8
 800b8fc:	463a      	mov	r2, r7
 800b8fe:	4628      	mov	r0, r5
 800b900:	f009 ff27 	bl	8015752 <memcpy>
 800b904:	68a1      	ldr	r1, [r4, #8]
 800b906:	4652      	mov	r2, sl
 800b908:	19e8      	adds	r0, r5, r7
 800b90a:	f009 ff22 	bl	8015752 <memcpy>
 800b90e:	e7b8      	b.n	800b882 <ucdr_deserialize_endian_uint16_t+0x5e>

0800b910 <ucdr_serialize_uint32_t>:
 800b910:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b914:	b082      	sub	sp, #8
 800b916:	4604      	mov	r4, r0
 800b918:	9101      	str	r1, [sp, #4]
 800b91a:	2104      	movs	r1, #4
 800b91c:	f000 fd9a 	bl	800c454 <ucdr_buffer_alignment>
 800b920:	4601      	mov	r1, r0
 800b922:	4620      	mov	r0, r4
 800b924:	7d67      	ldrb	r7, [r4, #21]
 800b926:	f000 fdd9 	bl	800c4dc <ucdr_advance_buffer>
 800b92a:	2104      	movs	r1, #4
 800b92c:	4620      	mov	r0, r4
 800b92e:	f000 fd31 	bl	800c394 <ucdr_check_buffer_available_for>
 800b932:	2800      	cmp	r0, #0
 800b934:	d139      	bne.n	800b9aa <ucdr_serialize_uint32_t+0x9a>
 800b936:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 800b93a:	42ab      	cmp	r3, r5
 800b93c:	d930      	bls.n	800b9a0 <ucdr_serialize_uint32_t+0x90>
 800b93e:	1b5e      	subs	r6, r3, r5
 800b940:	60a3      	str	r3, [r4, #8]
 800b942:	6923      	ldr	r3, [r4, #16]
 800b944:	f1c6 0804 	rsb	r8, r6, #4
 800b948:	4433      	add	r3, r6
 800b94a:	6123      	str	r3, [r4, #16]
 800b94c:	4641      	mov	r1, r8
 800b94e:	4620      	mov	r0, r4
 800b950:	f000 fd2c 	bl	800c3ac <ucdr_check_final_buffer_behavior>
 800b954:	2800      	cmp	r0, #0
 800b956:	d04c      	beq.n	800b9f2 <ucdr_serialize_uint32_t+0xe2>
 800b958:	7d23      	ldrb	r3, [r4, #20]
 800b95a:	2b01      	cmp	r3, #1
 800b95c:	d063      	beq.n	800ba26 <ucdr_serialize_uint32_t+0x116>
 800b95e:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800b962:	702b      	strb	r3, [r5, #0]
 800b964:	2e00      	cmp	r6, #0
 800b966:	d051      	beq.n	800ba0c <ucdr_serialize_uint32_t+0xfc>
 800b968:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800b96c:	706b      	strb	r3, [r5, #1]
 800b96e:	2e01      	cmp	r6, #1
 800b970:	d050      	beq.n	800ba14 <ucdr_serialize_uint32_t+0x104>
 800b972:	f89d 3005 	ldrb.w	r3, [sp, #5]
 800b976:	70ab      	strb	r3, [r5, #2]
 800b978:	2e02      	cmp	r6, #2
 800b97a:	d04f      	beq.n	800ba1c <ucdr_serialize_uint32_t+0x10c>
 800b97c:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800b980:	70eb      	strb	r3, [r5, #3]
 800b982:	6923      	ldr	r3, [r4, #16]
 800b984:	68a2      	ldr	r2, [r4, #8]
 800b986:	7da0      	ldrb	r0, [r4, #22]
 800b988:	3304      	adds	r3, #4
 800b98a:	1b9e      	subs	r6, r3, r6
 800b98c:	4442      	add	r2, r8
 800b98e:	2304      	movs	r3, #4
 800b990:	f080 0001 	eor.w	r0, r0, #1
 800b994:	60a2      	str	r2, [r4, #8]
 800b996:	6126      	str	r6, [r4, #16]
 800b998:	7563      	strb	r3, [r4, #21]
 800b99a:	b002      	add	sp, #8
 800b99c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b9a0:	2104      	movs	r1, #4
 800b9a2:	4620      	mov	r0, r4
 800b9a4:	f000 fd02 	bl	800c3ac <ucdr_check_final_buffer_behavior>
 800b9a8:	b1d0      	cbz	r0, 800b9e0 <ucdr_serialize_uint32_t+0xd0>
 800b9aa:	7d23      	ldrb	r3, [r4, #20]
 800b9ac:	2b01      	cmp	r3, #1
 800b9ae:	68a3      	ldr	r3, [r4, #8]
 800b9b0:	d01c      	beq.n	800b9ec <ucdr_serialize_uint32_t+0xdc>
 800b9b2:	f89d 2007 	ldrb.w	r2, [sp, #7]
 800b9b6:	701a      	strb	r2, [r3, #0]
 800b9b8:	68a3      	ldr	r3, [r4, #8]
 800b9ba:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800b9be:	705a      	strb	r2, [r3, #1]
 800b9c0:	68a3      	ldr	r3, [r4, #8]
 800b9c2:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800b9c6:	709a      	strb	r2, [r3, #2]
 800b9c8:	68a3      	ldr	r3, [r4, #8]
 800b9ca:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800b9ce:	70da      	strb	r2, [r3, #3]
 800b9d0:	68a2      	ldr	r2, [r4, #8]
 800b9d2:	6923      	ldr	r3, [r4, #16]
 800b9d4:	3204      	adds	r2, #4
 800b9d6:	3304      	adds	r3, #4
 800b9d8:	2104      	movs	r1, #4
 800b9da:	60a2      	str	r2, [r4, #8]
 800b9dc:	6123      	str	r3, [r4, #16]
 800b9de:	7561      	strb	r1, [r4, #21]
 800b9e0:	7da0      	ldrb	r0, [r4, #22]
 800b9e2:	f080 0001 	eor.w	r0, r0, #1
 800b9e6:	b002      	add	sp, #8
 800b9e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b9ec:	9a01      	ldr	r2, [sp, #4]
 800b9ee:	601a      	str	r2, [r3, #0]
 800b9f0:	e7ee      	b.n	800b9d0 <ucdr_serialize_uint32_t+0xc0>
 800b9f2:	68a2      	ldr	r2, [r4, #8]
 800b9f4:	6923      	ldr	r3, [r4, #16]
 800b9f6:	7da0      	ldrb	r0, [r4, #22]
 800b9f8:	7567      	strb	r7, [r4, #21]
 800b9fa:	1b92      	subs	r2, r2, r6
 800b9fc:	1b9b      	subs	r3, r3, r6
 800b9fe:	f080 0001 	eor.w	r0, r0, #1
 800ba02:	60a2      	str	r2, [r4, #8]
 800ba04:	6123      	str	r3, [r4, #16]
 800ba06:	b002      	add	sp, #8
 800ba08:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ba0c:	68a3      	ldr	r3, [r4, #8]
 800ba0e:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800ba12:	701a      	strb	r2, [r3, #0]
 800ba14:	68a3      	ldr	r3, [r4, #8]
 800ba16:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800ba1a:	701a      	strb	r2, [r3, #0]
 800ba1c:	68a3      	ldr	r3, [r4, #8]
 800ba1e:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800ba22:	701a      	strb	r2, [r3, #0]
 800ba24:	e7ad      	b.n	800b982 <ucdr_serialize_uint32_t+0x72>
 800ba26:	4628      	mov	r0, r5
 800ba28:	ad01      	add	r5, sp, #4
 800ba2a:	4629      	mov	r1, r5
 800ba2c:	4632      	mov	r2, r6
 800ba2e:	f009 fe90 	bl	8015752 <memcpy>
 800ba32:	68a0      	ldr	r0, [r4, #8]
 800ba34:	4642      	mov	r2, r8
 800ba36:	19a9      	adds	r1, r5, r6
 800ba38:	f009 fe8b 	bl	8015752 <memcpy>
 800ba3c:	e7a1      	b.n	800b982 <ucdr_serialize_uint32_t+0x72>
 800ba3e:	bf00      	nop

0800ba40 <ucdr_serialize_endian_uint32_t>:
 800ba40:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800ba44:	b083      	sub	sp, #12
 800ba46:	460d      	mov	r5, r1
 800ba48:	2104      	movs	r1, #4
 800ba4a:	4604      	mov	r4, r0
 800ba4c:	9201      	str	r2, [sp, #4]
 800ba4e:	f000 fd01 	bl	800c454 <ucdr_buffer_alignment>
 800ba52:	4601      	mov	r1, r0
 800ba54:	4620      	mov	r0, r4
 800ba56:	f894 8015 	ldrb.w	r8, [r4, #21]
 800ba5a:	f000 fd3f 	bl	800c4dc <ucdr_advance_buffer>
 800ba5e:	2104      	movs	r1, #4
 800ba60:	4620      	mov	r0, r4
 800ba62:	f000 fc97 	bl	800c394 <ucdr_check_buffer_available_for>
 800ba66:	2800      	cmp	r0, #0
 800ba68:	d138      	bne.n	800badc <ucdr_serialize_endian_uint32_t+0x9c>
 800ba6a:	e9d4 7601 	ldrd	r7, r6, [r4, #4]
 800ba6e:	42b7      	cmp	r7, r6
 800ba70:	d92f      	bls.n	800bad2 <ucdr_serialize_endian_uint32_t+0x92>
 800ba72:	6923      	ldr	r3, [r4, #16]
 800ba74:	60a7      	str	r7, [r4, #8]
 800ba76:	1bbf      	subs	r7, r7, r6
 800ba78:	443b      	add	r3, r7
 800ba7a:	f1c7 0904 	rsb	r9, r7, #4
 800ba7e:	6123      	str	r3, [r4, #16]
 800ba80:	4649      	mov	r1, r9
 800ba82:	4620      	mov	r0, r4
 800ba84:	f000 fc92 	bl	800c3ac <ucdr_check_final_buffer_behavior>
 800ba88:	2800      	cmp	r0, #0
 800ba8a:	d04a      	beq.n	800bb22 <ucdr_serialize_endian_uint32_t+0xe2>
 800ba8c:	2d01      	cmp	r5, #1
 800ba8e:	d063      	beq.n	800bb58 <ucdr_serialize_endian_uint32_t+0x118>
 800ba90:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800ba94:	7033      	strb	r3, [r6, #0]
 800ba96:	2f00      	cmp	r7, #0
 800ba98:	d051      	beq.n	800bb3e <ucdr_serialize_endian_uint32_t+0xfe>
 800ba9a:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800ba9e:	7073      	strb	r3, [r6, #1]
 800baa0:	2f01      	cmp	r7, #1
 800baa2:	d050      	beq.n	800bb46 <ucdr_serialize_endian_uint32_t+0x106>
 800baa4:	f89d 3005 	ldrb.w	r3, [sp, #5]
 800baa8:	70b3      	strb	r3, [r6, #2]
 800baaa:	2f02      	cmp	r7, #2
 800baac:	d04f      	beq.n	800bb4e <ucdr_serialize_endian_uint32_t+0x10e>
 800baae:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800bab2:	70f3      	strb	r3, [r6, #3]
 800bab4:	6923      	ldr	r3, [r4, #16]
 800bab6:	68a2      	ldr	r2, [r4, #8]
 800bab8:	7da0      	ldrb	r0, [r4, #22]
 800baba:	3304      	adds	r3, #4
 800babc:	444a      	add	r2, r9
 800babe:	1bdb      	subs	r3, r3, r7
 800bac0:	2104      	movs	r1, #4
 800bac2:	f080 0001 	eor.w	r0, r0, #1
 800bac6:	60a2      	str	r2, [r4, #8]
 800bac8:	6123      	str	r3, [r4, #16]
 800baca:	7561      	strb	r1, [r4, #21]
 800bacc:	b003      	add	sp, #12
 800bace:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800bad2:	2104      	movs	r1, #4
 800bad4:	4620      	mov	r0, r4
 800bad6:	f000 fc69 	bl	800c3ac <ucdr_check_final_buffer_behavior>
 800bada:	b1c8      	cbz	r0, 800bb10 <ucdr_serialize_endian_uint32_t+0xd0>
 800badc:	2d01      	cmp	r5, #1
 800bade:	68a3      	ldr	r3, [r4, #8]
 800bae0:	d01c      	beq.n	800bb1c <ucdr_serialize_endian_uint32_t+0xdc>
 800bae2:	f89d 2007 	ldrb.w	r2, [sp, #7]
 800bae6:	701a      	strb	r2, [r3, #0]
 800bae8:	68a3      	ldr	r3, [r4, #8]
 800baea:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800baee:	705a      	strb	r2, [r3, #1]
 800baf0:	68a3      	ldr	r3, [r4, #8]
 800baf2:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800baf6:	709a      	strb	r2, [r3, #2]
 800baf8:	68a3      	ldr	r3, [r4, #8]
 800bafa:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800bafe:	70da      	strb	r2, [r3, #3]
 800bb00:	68a2      	ldr	r2, [r4, #8]
 800bb02:	6923      	ldr	r3, [r4, #16]
 800bb04:	3204      	adds	r2, #4
 800bb06:	3304      	adds	r3, #4
 800bb08:	2104      	movs	r1, #4
 800bb0a:	60a2      	str	r2, [r4, #8]
 800bb0c:	6123      	str	r3, [r4, #16]
 800bb0e:	7561      	strb	r1, [r4, #21]
 800bb10:	7da0      	ldrb	r0, [r4, #22]
 800bb12:	f080 0001 	eor.w	r0, r0, #1
 800bb16:	b003      	add	sp, #12
 800bb18:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800bb1c:	9a01      	ldr	r2, [sp, #4]
 800bb1e:	601a      	str	r2, [r3, #0]
 800bb20:	e7ee      	b.n	800bb00 <ucdr_serialize_endian_uint32_t+0xc0>
 800bb22:	68a2      	ldr	r2, [r4, #8]
 800bb24:	6923      	ldr	r3, [r4, #16]
 800bb26:	7da0      	ldrb	r0, [r4, #22]
 800bb28:	f884 8015 	strb.w	r8, [r4, #21]
 800bb2c:	1bd2      	subs	r2, r2, r7
 800bb2e:	1bdb      	subs	r3, r3, r7
 800bb30:	f080 0001 	eor.w	r0, r0, #1
 800bb34:	60a2      	str	r2, [r4, #8]
 800bb36:	6123      	str	r3, [r4, #16]
 800bb38:	b003      	add	sp, #12
 800bb3a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800bb3e:	68a3      	ldr	r3, [r4, #8]
 800bb40:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800bb44:	701a      	strb	r2, [r3, #0]
 800bb46:	68a3      	ldr	r3, [r4, #8]
 800bb48:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800bb4c:	701a      	strb	r2, [r3, #0]
 800bb4e:	68a3      	ldr	r3, [r4, #8]
 800bb50:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800bb54:	701a      	strb	r2, [r3, #0]
 800bb56:	e7ad      	b.n	800bab4 <ucdr_serialize_endian_uint32_t+0x74>
 800bb58:	ad01      	add	r5, sp, #4
 800bb5a:	4629      	mov	r1, r5
 800bb5c:	463a      	mov	r2, r7
 800bb5e:	4630      	mov	r0, r6
 800bb60:	f009 fdf7 	bl	8015752 <memcpy>
 800bb64:	68a0      	ldr	r0, [r4, #8]
 800bb66:	464a      	mov	r2, r9
 800bb68:	19e9      	adds	r1, r5, r7
 800bb6a:	f009 fdf2 	bl	8015752 <memcpy>
 800bb6e:	e7a1      	b.n	800bab4 <ucdr_serialize_endian_uint32_t+0x74>

0800bb70 <ucdr_deserialize_uint32_t>:
 800bb70:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800bb74:	460d      	mov	r5, r1
 800bb76:	2104      	movs	r1, #4
 800bb78:	4604      	mov	r4, r0
 800bb7a:	f000 fc6b 	bl	800c454 <ucdr_buffer_alignment>
 800bb7e:	4601      	mov	r1, r0
 800bb80:	4620      	mov	r0, r4
 800bb82:	f894 8015 	ldrb.w	r8, [r4, #21]
 800bb86:	f000 fca9 	bl	800c4dc <ucdr_advance_buffer>
 800bb8a:	2104      	movs	r1, #4
 800bb8c:	4620      	mov	r0, r4
 800bb8e:	f000 fc01 	bl	800c394 <ucdr_check_buffer_available_for>
 800bb92:	2800      	cmp	r0, #0
 800bb94:	d138      	bne.n	800bc08 <ucdr_deserialize_uint32_t+0x98>
 800bb96:	e9d4 7601 	ldrd	r7, r6, [r4, #4]
 800bb9a:	42b7      	cmp	r7, r6
 800bb9c:	d92f      	bls.n	800bbfe <ucdr_deserialize_uint32_t+0x8e>
 800bb9e:	6923      	ldr	r3, [r4, #16]
 800bba0:	60a7      	str	r7, [r4, #8]
 800bba2:	1bbf      	subs	r7, r7, r6
 800bba4:	443b      	add	r3, r7
 800bba6:	f1c7 0904 	rsb	r9, r7, #4
 800bbaa:	6123      	str	r3, [r4, #16]
 800bbac:	4649      	mov	r1, r9
 800bbae:	4620      	mov	r0, r4
 800bbb0:	f000 fbfc 	bl	800c3ac <ucdr_check_final_buffer_behavior>
 800bbb4:	2800      	cmp	r0, #0
 800bbb6:	d046      	beq.n	800bc46 <ucdr_deserialize_uint32_t+0xd6>
 800bbb8:	7d23      	ldrb	r3, [r4, #20]
 800bbba:	2b01      	cmp	r3, #1
 800bbbc:	d05c      	beq.n	800bc78 <ucdr_deserialize_uint32_t+0x108>
 800bbbe:	78f3      	ldrb	r3, [r6, #3]
 800bbc0:	702b      	strb	r3, [r5, #0]
 800bbc2:	2f00      	cmp	r7, #0
 800bbc4:	d04c      	beq.n	800bc60 <ucdr_deserialize_uint32_t+0xf0>
 800bbc6:	78b3      	ldrb	r3, [r6, #2]
 800bbc8:	706b      	strb	r3, [r5, #1]
 800bbca:	2f01      	cmp	r7, #1
 800bbcc:	f105 0302 	add.w	r3, r5, #2
 800bbd0:	d04a      	beq.n	800bc68 <ucdr_deserialize_uint32_t+0xf8>
 800bbd2:	7873      	ldrb	r3, [r6, #1]
 800bbd4:	70ab      	strb	r3, [r5, #2]
 800bbd6:	2f02      	cmp	r7, #2
 800bbd8:	f105 0303 	add.w	r3, r5, #3
 800bbdc:	d048      	beq.n	800bc70 <ucdr_deserialize_uint32_t+0x100>
 800bbde:	7833      	ldrb	r3, [r6, #0]
 800bbe0:	70eb      	strb	r3, [r5, #3]
 800bbe2:	6923      	ldr	r3, [r4, #16]
 800bbe4:	68a2      	ldr	r2, [r4, #8]
 800bbe6:	7da0      	ldrb	r0, [r4, #22]
 800bbe8:	2104      	movs	r1, #4
 800bbea:	3304      	adds	r3, #4
 800bbec:	444a      	add	r2, r9
 800bbee:	1bdb      	subs	r3, r3, r7
 800bbf0:	7561      	strb	r1, [r4, #21]
 800bbf2:	60a2      	str	r2, [r4, #8]
 800bbf4:	6123      	str	r3, [r4, #16]
 800bbf6:	f080 0001 	eor.w	r0, r0, #1
 800bbfa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800bbfe:	2104      	movs	r1, #4
 800bc00:	4620      	mov	r0, r4
 800bc02:	f000 fbd3 	bl	800c3ac <ucdr_check_final_buffer_behavior>
 800bc06:	b1b0      	cbz	r0, 800bc36 <ucdr_deserialize_uint32_t+0xc6>
 800bc08:	7d23      	ldrb	r3, [r4, #20]
 800bc0a:	2b01      	cmp	r3, #1
 800bc0c:	68a3      	ldr	r3, [r4, #8]
 800bc0e:	d017      	beq.n	800bc40 <ucdr_deserialize_uint32_t+0xd0>
 800bc10:	78db      	ldrb	r3, [r3, #3]
 800bc12:	702b      	strb	r3, [r5, #0]
 800bc14:	68a3      	ldr	r3, [r4, #8]
 800bc16:	789b      	ldrb	r3, [r3, #2]
 800bc18:	706b      	strb	r3, [r5, #1]
 800bc1a:	68a3      	ldr	r3, [r4, #8]
 800bc1c:	785b      	ldrb	r3, [r3, #1]
 800bc1e:	70ab      	strb	r3, [r5, #2]
 800bc20:	68a3      	ldr	r3, [r4, #8]
 800bc22:	781b      	ldrb	r3, [r3, #0]
 800bc24:	70eb      	strb	r3, [r5, #3]
 800bc26:	68a2      	ldr	r2, [r4, #8]
 800bc28:	6923      	ldr	r3, [r4, #16]
 800bc2a:	3204      	adds	r2, #4
 800bc2c:	3304      	adds	r3, #4
 800bc2e:	2104      	movs	r1, #4
 800bc30:	60a2      	str	r2, [r4, #8]
 800bc32:	6123      	str	r3, [r4, #16]
 800bc34:	7561      	strb	r1, [r4, #21]
 800bc36:	7da0      	ldrb	r0, [r4, #22]
 800bc38:	f080 0001 	eor.w	r0, r0, #1
 800bc3c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800bc40:	681b      	ldr	r3, [r3, #0]
 800bc42:	602b      	str	r3, [r5, #0]
 800bc44:	e7ef      	b.n	800bc26 <ucdr_deserialize_uint32_t+0xb6>
 800bc46:	68a2      	ldr	r2, [r4, #8]
 800bc48:	6923      	ldr	r3, [r4, #16]
 800bc4a:	7da0      	ldrb	r0, [r4, #22]
 800bc4c:	f884 8015 	strb.w	r8, [r4, #21]
 800bc50:	1bd2      	subs	r2, r2, r7
 800bc52:	1bdb      	subs	r3, r3, r7
 800bc54:	60a2      	str	r2, [r4, #8]
 800bc56:	6123      	str	r3, [r4, #16]
 800bc58:	f080 0001 	eor.w	r0, r0, #1
 800bc5c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800bc60:	68a3      	ldr	r3, [r4, #8]
 800bc62:	789b      	ldrb	r3, [r3, #2]
 800bc64:	706b      	strb	r3, [r5, #1]
 800bc66:	1cab      	adds	r3, r5, #2
 800bc68:	68a2      	ldr	r2, [r4, #8]
 800bc6a:	7852      	ldrb	r2, [r2, #1]
 800bc6c:	f803 2b01 	strb.w	r2, [r3], #1
 800bc70:	68a2      	ldr	r2, [r4, #8]
 800bc72:	7812      	ldrb	r2, [r2, #0]
 800bc74:	701a      	strb	r2, [r3, #0]
 800bc76:	e7b4      	b.n	800bbe2 <ucdr_deserialize_uint32_t+0x72>
 800bc78:	4631      	mov	r1, r6
 800bc7a:	463a      	mov	r2, r7
 800bc7c:	4628      	mov	r0, r5
 800bc7e:	f009 fd68 	bl	8015752 <memcpy>
 800bc82:	68a1      	ldr	r1, [r4, #8]
 800bc84:	464a      	mov	r2, r9
 800bc86:	19e8      	adds	r0, r5, r7
 800bc88:	f009 fd63 	bl	8015752 <memcpy>
 800bc8c:	e7a9      	b.n	800bbe2 <ucdr_deserialize_uint32_t+0x72>
 800bc8e:	bf00      	nop

0800bc90 <ucdr_deserialize_endian_uint32_t>:
 800bc90:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800bc94:	460e      	mov	r6, r1
 800bc96:	2104      	movs	r1, #4
 800bc98:	4604      	mov	r4, r0
 800bc9a:	4615      	mov	r5, r2
 800bc9c:	f000 fbda 	bl	800c454 <ucdr_buffer_alignment>
 800bca0:	4601      	mov	r1, r0
 800bca2:	4620      	mov	r0, r4
 800bca4:	f894 9015 	ldrb.w	r9, [r4, #21]
 800bca8:	f000 fc18 	bl	800c4dc <ucdr_advance_buffer>
 800bcac:	2104      	movs	r1, #4
 800bcae:	4620      	mov	r0, r4
 800bcb0:	f000 fb70 	bl	800c394 <ucdr_check_buffer_available_for>
 800bcb4:	2800      	cmp	r0, #0
 800bcb6:	d13c      	bne.n	800bd32 <ucdr_deserialize_endian_uint32_t+0xa2>
 800bcb8:	e9d4 3701 	ldrd	r3, r7, [r4, #4]
 800bcbc:	42bb      	cmp	r3, r7
 800bcbe:	d933      	bls.n	800bd28 <ucdr_deserialize_endian_uint32_t+0x98>
 800bcc0:	eba3 0807 	sub.w	r8, r3, r7
 800bcc4:	60a3      	str	r3, [r4, #8]
 800bcc6:	6923      	ldr	r3, [r4, #16]
 800bcc8:	f1c8 0a04 	rsb	sl, r8, #4
 800bccc:	4443      	add	r3, r8
 800bcce:	6123      	str	r3, [r4, #16]
 800bcd0:	4651      	mov	r1, sl
 800bcd2:	4620      	mov	r0, r4
 800bcd4:	f000 fb6a 	bl	800c3ac <ucdr_check_final_buffer_behavior>
 800bcd8:	2800      	cmp	r0, #0
 800bcda:	d048      	beq.n	800bd6e <ucdr_deserialize_endian_uint32_t+0xde>
 800bcdc:	2e01      	cmp	r6, #1
 800bcde:	d061      	beq.n	800bda4 <ucdr_deserialize_endian_uint32_t+0x114>
 800bce0:	78fb      	ldrb	r3, [r7, #3]
 800bce2:	702b      	strb	r3, [r5, #0]
 800bce4:	f1b8 0f00 	cmp.w	r8, #0
 800bce8:	d050      	beq.n	800bd8c <ucdr_deserialize_endian_uint32_t+0xfc>
 800bcea:	78bb      	ldrb	r3, [r7, #2]
 800bcec:	706b      	strb	r3, [r5, #1]
 800bcee:	f1b8 0f01 	cmp.w	r8, #1
 800bcf2:	f105 0302 	add.w	r3, r5, #2
 800bcf6:	d04d      	beq.n	800bd94 <ucdr_deserialize_endian_uint32_t+0x104>
 800bcf8:	787b      	ldrb	r3, [r7, #1]
 800bcfa:	70ab      	strb	r3, [r5, #2]
 800bcfc:	f1b8 0f02 	cmp.w	r8, #2
 800bd00:	f105 0303 	add.w	r3, r5, #3
 800bd04:	d04a      	beq.n	800bd9c <ucdr_deserialize_endian_uint32_t+0x10c>
 800bd06:	783b      	ldrb	r3, [r7, #0]
 800bd08:	70eb      	strb	r3, [r5, #3]
 800bd0a:	6923      	ldr	r3, [r4, #16]
 800bd0c:	68a2      	ldr	r2, [r4, #8]
 800bd0e:	7da0      	ldrb	r0, [r4, #22]
 800bd10:	2104      	movs	r1, #4
 800bd12:	3304      	adds	r3, #4
 800bd14:	4452      	add	r2, sl
 800bd16:	eba3 0308 	sub.w	r3, r3, r8
 800bd1a:	7561      	strb	r1, [r4, #21]
 800bd1c:	60a2      	str	r2, [r4, #8]
 800bd1e:	6123      	str	r3, [r4, #16]
 800bd20:	f080 0001 	eor.w	r0, r0, #1
 800bd24:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bd28:	2104      	movs	r1, #4
 800bd2a:	4620      	mov	r0, r4
 800bd2c:	f000 fb3e 	bl	800c3ac <ucdr_check_final_buffer_behavior>
 800bd30:	b1a8      	cbz	r0, 800bd5e <ucdr_deserialize_endian_uint32_t+0xce>
 800bd32:	2e01      	cmp	r6, #1
 800bd34:	68a3      	ldr	r3, [r4, #8]
 800bd36:	d017      	beq.n	800bd68 <ucdr_deserialize_endian_uint32_t+0xd8>
 800bd38:	78db      	ldrb	r3, [r3, #3]
 800bd3a:	702b      	strb	r3, [r5, #0]
 800bd3c:	68a3      	ldr	r3, [r4, #8]
 800bd3e:	789b      	ldrb	r3, [r3, #2]
 800bd40:	706b      	strb	r3, [r5, #1]
 800bd42:	68a3      	ldr	r3, [r4, #8]
 800bd44:	785b      	ldrb	r3, [r3, #1]
 800bd46:	70ab      	strb	r3, [r5, #2]
 800bd48:	68a3      	ldr	r3, [r4, #8]
 800bd4a:	781b      	ldrb	r3, [r3, #0]
 800bd4c:	70eb      	strb	r3, [r5, #3]
 800bd4e:	68a2      	ldr	r2, [r4, #8]
 800bd50:	6923      	ldr	r3, [r4, #16]
 800bd52:	3204      	adds	r2, #4
 800bd54:	3304      	adds	r3, #4
 800bd56:	2104      	movs	r1, #4
 800bd58:	60a2      	str	r2, [r4, #8]
 800bd5a:	6123      	str	r3, [r4, #16]
 800bd5c:	7561      	strb	r1, [r4, #21]
 800bd5e:	7da0      	ldrb	r0, [r4, #22]
 800bd60:	f080 0001 	eor.w	r0, r0, #1
 800bd64:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bd68:	681b      	ldr	r3, [r3, #0]
 800bd6a:	602b      	str	r3, [r5, #0]
 800bd6c:	e7ef      	b.n	800bd4e <ucdr_deserialize_endian_uint32_t+0xbe>
 800bd6e:	68a2      	ldr	r2, [r4, #8]
 800bd70:	6923      	ldr	r3, [r4, #16]
 800bd72:	7da0      	ldrb	r0, [r4, #22]
 800bd74:	f884 9015 	strb.w	r9, [r4, #21]
 800bd78:	eba2 0208 	sub.w	r2, r2, r8
 800bd7c:	eba3 0308 	sub.w	r3, r3, r8
 800bd80:	60a2      	str	r2, [r4, #8]
 800bd82:	6123      	str	r3, [r4, #16]
 800bd84:	f080 0001 	eor.w	r0, r0, #1
 800bd88:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bd8c:	68a3      	ldr	r3, [r4, #8]
 800bd8e:	789b      	ldrb	r3, [r3, #2]
 800bd90:	706b      	strb	r3, [r5, #1]
 800bd92:	1cab      	adds	r3, r5, #2
 800bd94:	68a2      	ldr	r2, [r4, #8]
 800bd96:	7852      	ldrb	r2, [r2, #1]
 800bd98:	f803 2b01 	strb.w	r2, [r3], #1
 800bd9c:	68a2      	ldr	r2, [r4, #8]
 800bd9e:	7812      	ldrb	r2, [r2, #0]
 800bda0:	701a      	strb	r2, [r3, #0]
 800bda2:	e7b2      	b.n	800bd0a <ucdr_deserialize_endian_uint32_t+0x7a>
 800bda4:	4639      	mov	r1, r7
 800bda6:	4642      	mov	r2, r8
 800bda8:	4628      	mov	r0, r5
 800bdaa:	f009 fcd2 	bl	8015752 <memcpy>
 800bdae:	68a1      	ldr	r1, [r4, #8]
 800bdb0:	4652      	mov	r2, sl
 800bdb2:	eb05 0008 	add.w	r0, r5, r8
 800bdb6:	f009 fccc 	bl	8015752 <memcpy>
 800bdba:	e7a6      	b.n	800bd0a <ucdr_deserialize_endian_uint32_t+0x7a>

0800bdbc <ucdr_serialize_uint64_t>:
 800bdbc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bdc0:	2108      	movs	r1, #8
 800bdc2:	b082      	sub	sp, #8
 800bdc4:	4604      	mov	r4, r0
 800bdc6:	e9cd 2300 	strd	r2, r3, [sp]
 800bdca:	f000 fb43 	bl	800c454 <ucdr_buffer_alignment>
 800bdce:	4601      	mov	r1, r0
 800bdd0:	4620      	mov	r0, r4
 800bdd2:	7d67      	ldrb	r7, [r4, #21]
 800bdd4:	f000 fb82 	bl	800c4dc <ucdr_advance_buffer>
 800bdd8:	2108      	movs	r1, #8
 800bdda:	4620      	mov	r0, r4
 800bddc:	f000 fada 	bl	800c394 <ucdr_check_buffer_available_for>
 800bde0:	2800      	cmp	r0, #0
 800bde2:	d14e      	bne.n	800be82 <ucdr_serialize_uint64_t+0xc6>
 800bde4:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 800bde8:	42ab      	cmp	r3, r5
 800bdea:	d945      	bls.n	800be78 <ucdr_serialize_uint64_t+0xbc>
 800bdec:	1b5e      	subs	r6, r3, r5
 800bdee:	60a3      	str	r3, [r4, #8]
 800bdf0:	6923      	ldr	r3, [r4, #16]
 800bdf2:	f1c6 0808 	rsb	r8, r6, #8
 800bdf6:	4433      	add	r3, r6
 800bdf8:	6123      	str	r3, [r4, #16]
 800bdfa:	4641      	mov	r1, r8
 800bdfc:	4620      	mov	r0, r4
 800bdfe:	f000 fad5 	bl	800c3ac <ucdr_check_final_buffer_behavior>
 800be02:	2800      	cmp	r0, #0
 800be04:	d074      	beq.n	800bef0 <ucdr_serialize_uint64_t+0x134>
 800be06:	7d23      	ldrb	r3, [r4, #20]
 800be08:	2b01      	cmp	r3, #1
 800be0a:	f000 809b 	beq.w	800bf44 <ucdr_serialize_uint64_t+0x188>
 800be0e:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800be12:	702b      	strb	r3, [r5, #0]
 800be14:	2e00      	cmp	r6, #0
 800be16:	d078      	beq.n	800bf0a <ucdr_serialize_uint64_t+0x14e>
 800be18:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800be1c:	706b      	strb	r3, [r5, #1]
 800be1e:	2e01      	cmp	r6, #1
 800be20:	d077      	beq.n	800bf12 <ucdr_serialize_uint64_t+0x156>
 800be22:	f89d 3005 	ldrb.w	r3, [sp, #5]
 800be26:	70ab      	strb	r3, [r5, #2]
 800be28:	2e02      	cmp	r6, #2
 800be2a:	d076      	beq.n	800bf1a <ucdr_serialize_uint64_t+0x15e>
 800be2c:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800be30:	70eb      	strb	r3, [r5, #3]
 800be32:	2e03      	cmp	r6, #3
 800be34:	d075      	beq.n	800bf22 <ucdr_serialize_uint64_t+0x166>
 800be36:	f89d 3003 	ldrb.w	r3, [sp, #3]
 800be3a:	712b      	strb	r3, [r5, #4]
 800be3c:	2e04      	cmp	r6, #4
 800be3e:	d074      	beq.n	800bf2a <ucdr_serialize_uint64_t+0x16e>
 800be40:	f89d 3002 	ldrb.w	r3, [sp, #2]
 800be44:	716b      	strb	r3, [r5, #5]
 800be46:	2e05      	cmp	r6, #5
 800be48:	d073      	beq.n	800bf32 <ucdr_serialize_uint64_t+0x176>
 800be4a:	f89d 3001 	ldrb.w	r3, [sp, #1]
 800be4e:	71ab      	strb	r3, [r5, #6]
 800be50:	2e06      	cmp	r6, #6
 800be52:	d072      	beq.n	800bf3a <ucdr_serialize_uint64_t+0x17e>
 800be54:	f89d 3000 	ldrb.w	r3, [sp]
 800be58:	71eb      	strb	r3, [r5, #7]
 800be5a:	6923      	ldr	r3, [r4, #16]
 800be5c:	68a2      	ldr	r2, [r4, #8]
 800be5e:	7da0      	ldrb	r0, [r4, #22]
 800be60:	3308      	adds	r3, #8
 800be62:	1b9e      	subs	r6, r3, r6
 800be64:	4442      	add	r2, r8
 800be66:	2308      	movs	r3, #8
 800be68:	f080 0001 	eor.w	r0, r0, #1
 800be6c:	60a2      	str	r2, [r4, #8]
 800be6e:	6126      	str	r6, [r4, #16]
 800be70:	7563      	strb	r3, [r4, #21]
 800be72:	b002      	add	sp, #8
 800be74:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800be78:	2108      	movs	r1, #8
 800be7a:	4620      	mov	r0, r4
 800be7c:	f000 fa96 	bl	800c3ac <ucdr_check_final_buffer_behavior>
 800be80:	b350      	cbz	r0, 800bed8 <ucdr_serialize_uint64_t+0x11c>
 800be82:	7d23      	ldrb	r3, [r4, #20]
 800be84:	2b01      	cmp	r3, #1
 800be86:	d02d      	beq.n	800bee4 <ucdr_serialize_uint64_t+0x128>
 800be88:	68a3      	ldr	r3, [r4, #8]
 800be8a:	f89d 2007 	ldrb.w	r2, [sp, #7]
 800be8e:	701a      	strb	r2, [r3, #0]
 800be90:	68a3      	ldr	r3, [r4, #8]
 800be92:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800be96:	705a      	strb	r2, [r3, #1]
 800be98:	68a3      	ldr	r3, [r4, #8]
 800be9a:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800be9e:	709a      	strb	r2, [r3, #2]
 800bea0:	68a3      	ldr	r3, [r4, #8]
 800bea2:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800bea6:	70da      	strb	r2, [r3, #3]
 800bea8:	68a3      	ldr	r3, [r4, #8]
 800beaa:	f89d 2003 	ldrb.w	r2, [sp, #3]
 800beae:	711a      	strb	r2, [r3, #4]
 800beb0:	68a3      	ldr	r3, [r4, #8]
 800beb2:	f89d 2002 	ldrb.w	r2, [sp, #2]
 800beb6:	715a      	strb	r2, [r3, #5]
 800beb8:	68a3      	ldr	r3, [r4, #8]
 800beba:	f89d 2001 	ldrb.w	r2, [sp, #1]
 800bebe:	719a      	strb	r2, [r3, #6]
 800bec0:	68a3      	ldr	r3, [r4, #8]
 800bec2:	f89d 2000 	ldrb.w	r2, [sp]
 800bec6:	71da      	strb	r2, [r3, #7]
 800bec8:	68a2      	ldr	r2, [r4, #8]
 800beca:	6923      	ldr	r3, [r4, #16]
 800becc:	3208      	adds	r2, #8
 800bece:	3308      	adds	r3, #8
 800bed0:	2108      	movs	r1, #8
 800bed2:	60a2      	str	r2, [r4, #8]
 800bed4:	6123      	str	r3, [r4, #16]
 800bed6:	7561      	strb	r1, [r4, #21]
 800bed8:	7da0      	ldrb	r0, [r4, #22]
 800beda:	f080 0001 	eor.w	r0, r0, #1
 800bede:	b002      	add	sp, #8
 800bee0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bee4:	466b      	mov	r3, sp
 800bee6:	cb03      	ldmia	r3!, {r0, r1}
 800bee8:	68a3      	ldr	r3, [r4, #8]
 800beea:	6018      	str	r0, [r3, #0]
 800beec:	6059      	str	r1, [r3, #4]
 800beee:	e7eb      	b.n	800bec8 <ucdr_serialize_uint64_t+0x10c>
 800bef0:	68a2      	ldr	r2, [r4, #8]
 800bef2:	6923      	ldr	r3, [r4, #16]
 800bef4:	7da0      	ldrb	r0, [r4, #22]
 800bef6:	7567      	strb	r7, [r4, #21]
 800bef8:	1b92      	subs	r2, r2, r6
 800befa:	1b9b      	subs	r3, r3, r6
 800befc:	f080 0001 	eor.w	r0, r0, #1
 800bf00:	60a2      	str	r2, [r4, #8]
 800bf02:	6123      	str	r3, [r4, #16]
 800bf04:	b002      	add	sp, #8
 800bf06:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bf0a:	68a3      	ldr	r3, [r4, #8]
 800bf0c:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800bf10:	701a      	strb	r2, [r3, #0]
 800bf12:	68a3      	ldr	r3, [r4, #8]
 800bf14:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800bf18:	701a      	strb	r2, [r3, #0]
 800bf1a:	68a3      	ldr	r3, [r4, #8]
 800bf1c:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800bf20:	701a      	strb	r2, [r3, #0]
 800bf22:	68a3      	ldr	r3, [r4, #8]
 800bf24:	f89d 2003 	ldrb.w	r2, [sp, #3]
 800bf28:	701a      	strb	r2, [r3, #0]
 800bf2a:	68a3      	ldr	r3, [r4, #8]
 800bf2c:	f89d 2002 	ldrb.w	r2, [sp, #2]
 800bf30:	701a      	strb	r2, [r3, #0]
 800bf32:	68a3      	ldr	r3, [r4, #8]
 800bf34:	f89d 2001 	ldrb.w	r2, [sp, #1]
 800bf38:	701a      	strb	r2, [r3, #0]
 800bf3a:	68a3      	ldr	r3, [r4, #8]
 800bf3c:	f89d 2000 	ldrb.w	r2, [sp]
 800bf40:	701a      	strb	r2, [r3, #0]
 800bf42:	e78a      	b.n	800be5a <ucdr_serialize_uint64_t+0x9e>
 800bf44:	4628      	mov	r0, r5
 800bf46:	466d      	mov	r5, sp
 800bf48:	4629      	mov	r1, r5
 800bf4a:	4632      	mov	r2, r6
 800bf4c:	f009 fc01 	bl	8015752 <memcpy>
 800bf50:	68a0      	ldr	r0, [r4, #8]
 800bf52:	4642      	mov	r2, r8
 800bf54:	19a9      	adds	r1, r5, r6
 800bf56:	f009 fbfc 	bl	8015752 <memcpy>
 800bf5a:	e77e      	b.n	800be5a <ucdr_serialize_uint64_t+0x9e>

0800bf5c <ucdr_serialize_int16_t>:
 800bf5c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bf60:	b082      	sub	sp, #8
 800bf62:	460b      	mov	r3, r1
 800bf64:	2102      	movs	r1, #2
 800bf66:	4604      	mov	r4, r0
 800bf68:	f8ad 3006 	strh.w	r3, [sp, #6]
 800bf6c:	f000 fa72 	bl	800c454 <ucdr_buffer_alignment>
 800bf70:	4601      	mov	r1, r0
 800bf72:	4620      	mov	r0, r4
 800bf74:	7d67      	ldrb	r7, [r4, #21]
 800bf76:	f000 fab1 	bl	800c4dc <ucdr_advance_buffer>
 800bf7a:	2102      	movs	r1, #2
 800bf7c:	4620      	mov	r0, r4
 800bf7e:	f000 fa09 	bl	800c394 <ucdr_check_buffer_available_for>
 800bf82:	bb78      	cbnz	r0, 800bfe4 <ucdr_serialize_int16_t+0x88>
 800bf84:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 800bf88:	42ab      	cmp	r3, r5
 800bf8a:	d926      	bls.n	800bfda <ucdr_serialize_int16_t+0x7e>
 800bf8c:	1b5e      	subs	r6, r3, r5
 800bf8e:	60a3      	str	r3, [r4, #8]
 800bf90:	6923      	ldr	r3, [r4, #16]
 800bf92:	f1c6 0802 	rsb	r8, r6, #2
 800bf96:	4433      	add	r3, r6
 800bf98:	6123      	str	r3, [r4, #16]
 800bf9a:	4641      	mov	r1, r8
 800bf9c:	4620      	mov	r0, r4
 800bf9e:	f000 fa05 	bl	800c3ac <ucdr_check_final_buffer_behavior>
 800bfa2:	2800      	cmp	r0, #0
 800bfa4:	d03b      	beq.n	800c01e <ucdr_serialize_int16_t+0xc2>
 800bfa6:	7d23      	ldrb	r3, [r4, #20]
 800bfa8:	2b01      	cmp	r3, #1
 800bfaa:	d04a      	beq.n	800c042 <ucdr_serialize_int16_t+0xe6>
 800bfac:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800bfb0:	702b      	strb	r3, [r5, #0]
 800bfb2:	2e00      	cmp	r6, #0
 800bfb4:	d040      	beq.n	800c038 <ucdr_serialize_int16_t+0xdc>
 800bfb6:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800bfba:	706b      	strb	r3, [r5, #1]
 800bfbc:	6923      	ldr	r3, [r4, #16]
 800bfbe:	68a2      	ldr	r2, [r4, #8]
 800bfc0:	7da0      	ldrb	r0, [r4, #22]
 800bfc2:	3302      	adds	r3, #2
 800bfc4:	1b9e      	subs	r6, r3, r6
 800bfc6:	4442      	add	r2, r8
 800bfc8:	2302      	movs	r3, #2
 800bfca:	f080 0001 	eor.w	r0, r0, #1
 800bfce:	60a2      	str	r2, [r4, #8]
 800bfd0:	6126      	str	r6, [r4, #16]
 800bfd2:	7563      	strb	r3, [r4, #21]
 800bfd4:	b002      	add	sp, #8
 800bfd6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bfda:	2102      	movs	r1, #2
 800bfdc:	4620      	mov	r0, r4
 800bfde:	f000 f9e5 	bl	800c3ac <ucdr_check_final_buffer_behavior>
 800bfe2:	b190      	cbz	r0, 800c00a <ucdr_serialize_int16_t+0xae>
 800bfe4:	7d23      	ldrb	r3, [r4, #20]
 800bfe6:	2b01      	cmp	r3, #1
 800bfe8:	68a3      	ldr	r3, [r4, #8]
 800bfea:	d014      	beq.n	800c016 <ucdr_serialize_int16_t+0xba>
 800bfec:	f89d 2007 	ldrb.w	r2, [sp, #7]
 800bff0:	701a      	strb	r2, [r3, #0]
 800bff2:	68a3      	ldr	r3, [r4, #8]
 800bff4:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800bff8:	705a      	strb	r2, [r3, #1]
 800bffa:	68a2      	ldr	r2, [r4, #8]
 800bffc:	6923      	ldr	r3, [r4, #16]
 800bffe:	3202      	adds	r2, #2
 800c000:	3302      	adds	r3, #2
 800c002:	2102      	movs	r1, #2
 800c004:	60a2      	str	r2, [r4, #8]
 800c006:	6123      	str	r3, [r4, #16]
 800c008:	7561      	strb	r1, [r4, #21]
 800c00a:	7da0      	ldrb	r0, [r4, #22]
 800c00c:	f080 0001 	eor.w	r0, r0, #1
 800c010:	b002      	add	sp, #8
 800c012:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c016:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 800c01a:	801a      	strh	r2, [r3, #0]
 800c01c:	e7ed      	b.n	800bffa <ucdr_serialize_int16_t+0x9e>
 800c01e:	68a2      	ldr	r2, [r4, #8]
 800c020:	6923      	ldr	r3, [r4, #16]
 800c022:	7da0      	ldrb	r0, [r4, #22]
 800c024:	7567      	strb	r7, [r4, #21]
 800c026:	1b92      	subs	r2, r2, r6
 800c028:	1b9b      	subs	r3, r3, r6
 800c02a:	f080 0001 	eor.w	r0, r0, #1
 800c02e:	60a2      	str	r2, [r4, #8]
 800c030:	6123      	str	r3, [r4, #16]
 800c032:	b002      	add	sp, #8
 800c034:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c038:	68a3      	ldr	r3, [r4, #8]
 800c03a:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800c03e:	701a      	strb	r2, [r3, #0]
 800c040:	e7bc      	b.n	800bfbc <ucdr_serialize_int16_t+0x60>
 800c042:	4628      	mov	r0, r5
 800c044:	f10d 0506 	add.w	r5, sp, #6
 800c048:	4629      	mov	r1, r5
 800c04a:	4632      	mov	r2, r6
 800c04c:	f009 fb81 	bl	8015752 <memcpy>
 800c050:	68a0      	ldr	r0, [r4, #8]
 800c052:	4642      	mov	r2, r8
 800c054:	19a9      	adds	r1, r5, r6
 800c056:	f009 fb7c 	bl	8015752 <memcpy>
 800c05a:	e7af      	b.n	800bfbc <ucdr_serialize_int16_t+0x60>

0800c05c <ucdr_deserialize_int16_t>:
 800c05c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c060:	460d      	mov	r5, r1
 800c062:	2102      	movs	r1, #2
 800c064:	4604      	mov	r4, r0
 800c066:	f000 f9f5 	bl	800c454 <ucdr_buffer_alignment>
 800c06a:	4601      	mov	r1, r0
 800c06c:	4620      	mov	r0, r4
 800c06e:	f894 8015 	ldrb.w	r8, [r4, #21]
 800c072:	f000 fa33 	bl	800c4dc <ucdr_advance_buffer>
 800c076:	2102      	movs	r1, #2
 800c078:	4620      	mov	r0, r4
 800c07a:	f000 f98b 	bl	800c394 <ucdr_check_buffer_available_for>
 800c07e:	bb60      	cbnz	r0, 800c0da <ucdr_deserialize_int16_t+0x7e>
 800c080:	e9d4 6701 	ldrd	r6, r7, [r4, #4]
 800c084:	42be      	cmp	r6, r7
 800c086:	d923      	bls.n	800c0d0 <ucdr_deserialize_int16_t+0x74>
 800c088:	6923      	ldr	r3, [r4, #16]
 800c08a:	60a6      	str	r6, [r4, #8]
 800c08c:	1bf6      	subs	r6, r6, r7
 800c08e:	4433      	add	r3, r6
 800c090:	f1c6 0902 	rsb	r9, r6, #2
 800c094:	6123      	str	r3, [r4, #16]
 800c096:	4649      	mov	r1, r9
 800c098:	4620      	mov	r0, r4
 800c09a:	f000 f987 	bl	800c3ac <ucdr_check_final_buffer_behavior>
 800c09e:	2800      	cmp	r0, #0
 800c0a0:	d034      	beq.n	800c10c <ucdr_deserialize_int16_t+0xb0>
 800c0a2:	7d23      	ldrb	r3, [r4, #20]
 800c0a4:	2b01      	cmp	r3, #1
 800c0a6:	d042      	beq.n	800c12e <ucdr_deserialize_int16_t+0xd2>
 800c0a8:	787b      	ldrb	r3, [r7, #1]
 800c0aa:	702b      	strb	r3, [r5, #0]
 800c0ac:	2e00      	cmp	r6, #0
 800c0ae:	d03a      	beq.n	800c126 <ucdr_deserialize_int16_t+0xca>
 800c0b0:	783b      	ldrb	r3, [r7, #0]
 800c0b2:	706b      	strb	r3, [r5, #1]
 800c0b4:	6923      	ldr	r3, [r4, #16]
 800c0b6:	68a2      	ldr	r2, [r4, #8]
 800c0b8:	7da0      	ldrb	r0, [r4, #22]
 800c0ba:	2102      	movs	r1, #2
 800c0bc:	3302      	adds	r3, #2
 800c0be:	444a      	add	r2, r9
 800c0c0:	1b9b      	subs	r3, r3, r6
 800c0c2:	7561      	strb	r1, [r4, #21]
 800c0c4:	60a2      	str	r2, [r4, #8]
 800c0c6:	6123      	str	r3, [r4, #16]
 800c0c8:	f080 0001 	eor.w	r0, r0, #1
 800c0cc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c0d0:	2102      	movs	r1, #2
 800c0d2:	4620      	mov	r0, r4
 800c0d4:	f000 f96a 	bl	800c3ac <ucdr_check_final_buffer_behavior>
 800c0d8:	b180      	cbz	r0, 800c0fc <ucdr_deserialize_int16_t+0xa0>
 800c0da:	7d23      	ldrb	r3, [r4, #20]
 800c0dc:	2b01      	cmp	r3, #1
 800c0de:	68a3      	ldr	r3, [r4, #8]
 800c0e0:	d011      	beq.n	800c106 <ucdr_deserialize_int16_t+0xaa>
 800c0e2:	785b      	ldrb	r3, [r3, #1]
 800c0e4:	702b      	strb	r3, [r5, #0]
 800c0e6:	68a3      	ldr	r3, [r4, #8]
 800c0e8:	781b      	ldrb	r3, [r3, #0]
 800c0ea:	706b      	strb	r3, [r5, #1]
 800c0ec:	68a2      	ldr	r2, [r4, #8]
 800c0ee:	6923      	ldr	r3, [r4, #16]
 800c0f0:	3202      	adds	r2, #2
 800c0f2:	3302      	adds	r3, #2
 800c0f4:	2102      	movs	r1, #2
 800c0f6:	60a2      	str	r2, [r4, #8]
 800c0f8:	6123      	str	r3, [r4, #16]
 800c0fa:	7561      	strb	r1, [r4, #21]
 800c0fc:	7da0      	ldrb	r0, [r4, #22]
 800c0fe:	f080 0001 	eor.w	r0, r0, #1
 800c102:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c106:	881b      	ldrh	r3, [r3, #0]
 800c108:	802b      	strh	r3, [r5, #0]
 800c10a:	e7ef      	b.n	800c0ec <ucdr_deserialize_int16_t+0x90>
 800c10c:	68a2      	ldr	r2, [r4, #8]
 800c10e:	6923      	ldr	r3, [r4, #16]
 800c110:	7da0      	ldrb	r0, [r4, #22]
 800c112:	f884 8015 	strb.w	r8, [r4, #21]
 800c116:	1b92      	subs	r2, r2, r6
 800c118:	1b9b      	subs	r3, r3, r6
 800c11a:	60a2      	str	r2, [r4, #8]
 800c11c:	6123      	str	r3, [r4, #16]
 800c11e:	f080 0001 	eor.w	r0, r0, #1
 800c122:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c126:	68a3      	ldr	r3, [r4, #8]
 800c128:	781b      	ldrb	r3, [r3, #0]
 800c12a:	706b      	strb	r3, [r5, #1]
 800c12c:	e7c2      	b.n	800c0b4 <ucdr_deserialize_int16_t+0x58>
 800c12e:	4639      	mov	r1, r7
 800c130:	4632      	mov	r2, r6
 800c132:	4628      	mov	r0, r5
 800c134:	f009 fb0d 	bl	8015752 <memcpy>
 800c138:	68a1      	ldr	r1, [r4, #8]
 800c13a:	464a      	mov	r2, r9
 800c13c:	19a8      	adds	r0, r5, r6
 800c13e:	f009 fb08 	bl	8015752 <memcpy>
 800c142:	e7b7      	b.n	800c0b4 <ucdr_deserialize_int16_t+0x58>

0800c144 <ucdr_serialize_int32_t>:
 800c144:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c148:	b082      	sub	sp, #8
 800c14a:	4604      	mov	r4, r0
 800c14c:	9101      	str	r1, [sp, #4]
 800c14e:	2104      	movs	r1, #4
 800c150:	f000 f980 	bl	800c454 <ucdr_buffer_alignment>
 800c154:	4601      	mov	r1, r0
 800c156:	4620      	mov	r0, r4
 800c158:	7d67      	ldrb	r7, [r4, #21]
 800c15a:	f000 f9bf 	bl	800c4dc <ucdr_advance_buffer>
 800c15e:	2104      	movs	r1, #4
 800c160:	4620      	mov	r0, r4
 800c162:	f000 f917 	bl	800c394 <ucdr_check_buffer_available_for>
 800c166:	2800      	cmp	r0, #0
 800c168:	d139      	bne.n	800c1de <ucdr_serialize_int32_t+0x9a>
 800c16a:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 800c16e:	42ab      	cmp	r3, r5
 800c170:	d930      	bls.n	800c1d4 <ucdr_serialize_int32_t+0x90>
 800c172:	1b5e      	subs	r6, r3, r5
 800c174:	60a3      	str	r3, [r4, #8]
 800c176:	6923      	ldr	r3, [r4, #16]
 800c178:	f1c6 0804 	rsb	r8, r6, #4
 800c17c:	4433      	add	r3, r6
 800c17e:	6123      	str	r3, [r4, #16]
 800c180:	4641      	mov	r1, r8
 800c182:	4620      	mov	r0, r4
 800c184:	f000 f912 	bl	800c3ac <ucdr_check_final_buffer_behavior>
 800c188:	2800      	cmp	r0, #0
 800c18a:	d04c      	beq.n	800c226 <ucdr_serialize_int32_t+0xe2>
 800c18c:	7d23      	ldrb	r3, [r4, #20]
 800c18e:	2b01      	cmp	r3, #1
 800c190:	d063      	beq.n	800c25a <ucdr_serialize_int32_t+0x116>
 800c192:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800c196:	702b      	strb	r3, [r5, #0]
 800c198:	2e00      	cmp	r6, #0
 800c19a:	d051      	beq.n	800c240 <ucdr_serialize_int32_t+0xfc>
 800c19c:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800c1a0:	706b      	strb	r3, [r5, #1]
 800c1a2:	2e01      	cmp	r6, #1
 800c1a4:	d050      	beq.n	800c248 <ucdr_serialize_int32_t+0x104>
 800c1a6:	f89d 3005 	ldrb.w	r3, [sp, #5]
 800c1aa:	70ab      	strb	r3, [r5, #2]
 800c1ac:	2e02      	cmp	r6, #2
 800c1ae:	d04f      	beq.n	800c250 <ucdr_serialize_int32_t+0x10c>
 800c1b0:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800c1b4:	70eb      	strb	r3, [r5, #3]
 800c1b6:	6923      	ldr	r3, [r4, #16]
 800c1b8:	68a2      	ldr	r2, [r4, #8]
 800c1ba:	7da0      	ldrb	r0, [r4, #22]
 800c1bc:	3304      	adds	r3, #4
 800c1be:	1b9e      	subs	r6, r3, r6
 800c1c0:	4442      	add	r2, r8
 800c1c2:	2304      	movs	r3, #4
 800c1c4:	f080 0001 	eor.w	r0, r0, #1
 800c1c8:	60a2      	str	r2, [r4, #8]
 800c1ca:	6126      	str	r6, [r4, #16]
 800c1cc:	7563      	strb	r3, [r4, #21]
 800c1ce:	b002      	add	sp, #8
 800c1d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c1d4:	2104      	movs	r1, #4
 800c1d6:	4620      	mov	r0, r4
 800c1d8:	f000 f8e8 	bl	800c3ac <ucdr_check_final_buffer_behavior>
 800c1dc:	b1d0      	cbz	r0, 800c214 <ucdr_serialize_int32_t+0xd0>
 800c1de:	7d23      	ldrb	r3, [r4, #20]
 800c1e0:	2b01      	cmp	r3, #1
 800c1e2:	68a3      	ldr	r3, [r4, #8]
 800c1e4:	d01c      	beq.n	800c220 <ucdr_serialize_int32_t+0xdc>
 800c1e6:	f89d 2007 	ldrb.w	r2, [sp, #7]
 800c1ea:	701a      	strb	r2, [r3, #0]
 800c1ec:	68a3      	ldr	r3, [r4, #8]
 800c1ee:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800c1f2:	705a      	strb	r2, [r3, #1]
 800c1f4:	68a3      	ldr	r3, [r4, #8]
 800c1f6:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800c1fa:	709a      	strb	r2, [r3, #2]
 800c1fc:	68a3      	ldr	r3, [r4, #8]
 800c1fe:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800c202:	70da      	strb	r2, [r3, #3]
 800c204:	68a2      	ldr	r2, [r4, #8]
 800c206:	6923      	ldr	r3, [r4, #16]
 800c208:	3204      	adds	r2, #4
 800c20a:	3304      	adds	r3, #4
 800c20c:	2104      	movs	r1, #4
 800c20e:	60a2      	str	r2, [r4, #8]
 800c210:	6123      	str	r3, [r4, #16]
 800c212:	7561      	strb	r1, [r4, #21]
 800c214:	7da0      	ldrb	r0, [r4, #22]
 800c216:	f080 0001 	eor.w	r0, r0, #1
 800c21a:	b002      	add	sp, #8
 800c21c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c220:	9a01      	ldr	r2, [sp, #4]
 800c222:	601a      	str	r2, [r3, #0]
 800c224:	e7ee      	b.n	800c204 <ucdr_serialize_int32_t+0xc0>
 800c226:	68a2      	ldr	r2, [r4, #8]
 800c228:	6923      	ldr	r3, [r4, #16]
 800c22a:	7da0      	ldrb	r0, [r4, #22]
 800c22c:	7567      	strb	r7, [r4, #21]
 800c22e:	1b92      	subs	r2, r2, r6
 800c230:	1b9b      	subs	r3, r3, r6
 800c232:	f080 0001 	eor.w	r0, r0, #1
 800c236:	60a2      	str	r2, [r4, #8]
 800c238:	6123      	str	r3, [r4, #16]
 800c23a:	b002      	add	sp, #8
 800c23c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c240:	68a3      	ldr	r3, [r4, #8]
 800c242:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800c246:	701a      	strb	r2, [r3, #0]
 800c248:	68a3      	ldr	r3, [r4, #8]
 800c24a:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800c24e:	701a      	strb	r2, [r3, #0]
 800c250:	68a3      	ldr	r3, [r4, #8]
 800c252:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800c256:	701a      	strb	r2, [r3, #0]
 800c258:	e7ad      	b.n	800c1b6 <ucdr_serialize_int32_t+0x72>
 800c25a:	4628      	mov	r0, r5
 800c25c:	ad01      	add	r5, sp, #4
 800c25e:	4629      	mov	r1, r5
 800c260:	4632      	mov	r2, r6
 800c262:	f009 fa76 	bl	8015752 <memcpy>
 800c266:	68a0      	ldr	r0, [r4, #8]
 800c268:	4642      	mov	r2, r8
 800c26a:	19a9      	adds	r1, r5, r6
 800c26c:	f009 fa71 	bl	8015752 <memcpy>
 800c270:	e7a1      	b.n	800c1b6 <ucdr_serialize_int32_t+0x72>
 800c272:	bf00      	nop

0800c274 <ucdr_deserialize_int32_t>:
 800c274:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c278:	460d      	mov	r5, r1
 800c27a:	2104      	movs	r1, #4
 800c27c:	4604      	mov	r4, r0
 800c27e:	f000 f8e9 	bl	800c454 <ucdr_buffer_alignment>
 800c282:	4601      	mov	r1, r0
 800c284:	4620      	mov	r0, r4
 800c286:	f894 8015 	ldrb.w	r8, [r4, #21]
 800c28a:	f000 f927 	bl	800c4dc <ucdr_advance_buffer>
 800c28e:	2104      	movs	r1, #4
 800c290:	4620      	mov	r0, r4
 800c292:	f000 f87f 	bl	800c394 <ucdr_check_buffer_available_for>
 800c296:	2800      	cmp	r0, #0
 800c298:	d138      	bne.n	800c30c <ucdr_deserialize_int32_t+0x98>
 800c29a:	e9d4 7601 	ldrd	r7, r6, [r4, #4]
 800c29e:	42b7      	cmp	r7, r6
 800c2a0:	d92f      	bls.n	800c302 <ucdr_deserialize_int32_t+0x8e>
 800c2a2:	6923      	ldr	r3, [r4, #16]
 800c2a4:	60a7      	str	r7, [r4, #8]
 800c2a6:	1bbf      	subs	r7, r7, r6
 800c2a8:	443b      	add	r3, r7
 800c2aa:	f1c7 0904 	rsb	r9, r7, #4
 800c2ae:	6123      	str	r3, [r4, #16]
 800c2b0:	4649      	mov	r1, r9
 800c2b2:	4620      	mov	r0, r4
 800c2b4:	f000 f87a 	bl	800c3ac <ucdr_check_final_buffer_behavior>
 800c2b8:	2800      	cmp	r0, #0
 800c2ba:	d046      	beq.n	800c34a <ucdr_deserialize_int32_t+0xd6>
 800c2bc:	7d23      	ldrb	r3, [r4, #20]
 800c2be:	2b01      	cmp	r3, #1
 800c2c0:	d05c      	beq.n	800c37c <ucdr_deserialize_int32_t+0x108>
 800c2c2:	78f3      	ldrb	r3, [r6, #3]
 800c2c4:	702b      	strb	r3, [r5, #0]
 800c2c6:	2f00      	cmp	r7, #0
 800c2c8:	d04c      	beq.n	800c364 <ucdr_deserialize_int32_t+0xf0>
 800c2ca:	78b3      	ldrb	r3, [r6, #2]
 800c2cc:	706b      	strb	r3, [r5, #1]
 800c2ce:	2f01      	cmp	r7, #1
 800c2d0:	f105 0302 	add.w	r3, r5, #2
 800c2d4:	d04a      	beq.n	800c36c <ucdr_deserialize_int32_t+0xf8>
 800c2d6:	7873      	ldrb	r3, [r6, #1]
 800c2d8:	70ab      	strb	r3, [r5, #2]
 800c2da:	2f02      	cmp	r7, #2
 800c2dc:	f105 0303 	add.w	r3, r5, #3
 800c2e0:	d048      	beq.n	800c374 <ucdr_deserialize_int32_t+0x100>
 800c2e2:	7833      	ldrb	r3, [r6, #0]
 800c2e4:	70eb      	strb	r3, [r5, #3]
 800c2e6:	6923      	ldr	r3, [r4, #16]
 800c2e8:	68a2      	ldr	r2, [r4, #8]
 800c2ea:	7da0      	ldrb	r0, [r4, #22]
 800c2ec:	2104      	movs	r1, #4
 800c2ee:	3304      	adds	r3, #4
 800c2f0:	444a      	add	r2, r9
 800c2f2:	1bdb      	subs	r3, r3, r7
 800c2f4:	7561      	strb	r1, [r4, #21]
 800c2f6:	60a2      	str	r2, [r4, #8]
 800c2f8:	6123      	str	r3, [r4, #16]
 800c2fa:	f080 0001 	eor.w	r0, r0, #1
 800c2fe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c302:	2104      	movs	r1, #4
 800c304:	4620      	mov	r0, r4
 800c306:	f000 f851 	bl	800c3ac <ucdr_check_final_buffer_behavior>
 800c30a:	b1b0      	cbz	r0, 800c33a <ucdr_deserialize_int32_t+0xc6>
 800c30c:	7d23      	ldrb	r3, [r4, #20]
 800c30e:	2b01      	cmp	r3, #1
 800c310:	68a3      	ldr	r3, [r4, #8]
 800c312:	d017      	beq.n	800c344 <ucdr_deserialize_int32_t+0xd0>
 800c314:	78db      	ldrb	r3, [r3, #3]
 800c316:	702b      	strb	r3, [r5, #0]
 800c318:	68a3      	ldr	r3, [r4, #8]
 800c31a:	789b      	ldrb	r3, [r3, #2]
 800c31c:	706b      	strb	r3, [r5, #1]
 800c31e:	68a3      	ldr	r3, [r4, #8]
 800c320:	785b      	ldrb	r3, [r3, #1]
 800c322:	70ab      	strb	r3, [r5, #2]
 800c324:	68a3      	ldr	r3, [r4, #8]
 800c326:	781b      	ldrb	r3, [r3, #0]
 800c328:	70eb      	strb	r3, [r5, #3]
 800c32a:	68a2      	ldr	r2, [r4, #8]
 800c32c:	6923      	ldr	r3, [r4, #16]
 800c32e:	3204      	adds	r2, #4
 800c330:	3304      	adds	r3, #4
 800c332:	2104      	movs	r1, #4
 800c334:	60a2      	str	r2, [r4, #8]
 800c336:	6123      	str	r3, [r4, #16]
 800c338:	7561      	strb	r1, [r4, #21]
 800c33a:	7da0      	ldrb	r0, [r4, #22]
 800c33c:	f080 0001 	eor.w	r0, r0, #1
 800c340:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c344:	681b      	ldr	r3, [r3, #0]
 800c346:	602b      	str	r3, [r5, #0]
 800c348:	e7ef      	b.n	800c32a <ucdr_deserialize_int32_t+0xb6>
 800c34a:	68a2      	ldr	r2, [r4, #8]
 800c34c:	6923      	ldr	r3, [r4, #16]
 800c34e:	7da0      	ldrb	r0, [r4, #22]
 800c350:	f884 8015 	strb.w	r8, [r4, #21]
 800c354:	1bd2      	subs	r2, r2, r7
 800c356:	1bdb      	subs	r3, r3, r7
 800c358:	60a2      	str	r2, [r4, #8]
 800c35a:	6123      	str	r3, [r4, #16]
 800c35c:	f080 0001 	eor.w	r0, r0, #1
 800c360:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c364:	68a3      	ldr	r3, [r4, #8]
 800c366:	789b      	ldrb	r3, [r3, #2]
 800c368:	706b      	strb	r3, [r5, #1]
 800c36a:	1cab      	adds	r3, r5, #2
 800c36c:	68a2      	ldr	r2, [r4, #8]
 800c36e:	7852      	ldrb	r2, [r2, #1]
 800c370:	f803 2b01 	strb.w	r2, [r3], #1
 800c374:	68a2      	ldr	r2, [r4, #8]
 800c376:	7812      	ldrb	r2, [r2, #0]
 800c378:	701a      	strb	r2, [r3, #0]
 800c37a:	e7b4      	b.n	800c2e6 <ucdr_deserialize_int32_t+0x72>
 800c37c:	4631      	mov	r1, r6
 800c37e:	463a      	mov	r2, r7
 800c380:	4628      	mov	r0, r5
 800c382:	f009 f9e6 	bl	8015752 <memcpy>
 800c386:	68a1      	ldr	r1, [r4, #8]
 800c388:	464a      	mov	r2, r9
 800c38a:	19e8      	adds	r0, r5, r7
 800c38c:	f009 f9e1 	bl	8015752 <memcpy>
 800c390:	e7a9      	b.n	800c2e6 <ucdr_deserialize_int32_t+0x72>
 800c392:	bf00      	nop

0800c394 <ucdr_check_buffer_available_for>:
 800c394:	7d83      	ldrb	r3, [r0, #22]
 800c396:	b93b      	cbnz	r3, 800c3a8 <ucdr_check_buffer_available_for+0x14>
 800c398:	e9d0 0301 	ldrd	r0, r3, [r0, #4]
 800c39c:	4419      	add	r1, r3
 800c39e:	4288      	cmp	r0, r1
 800c3a0:	bf34      	ite	cc
 800c3a2:	2000      	movcc	r0, #0
 800c3a4:	2001      	movcs	r0, #1
 800c3a6:	4770      	bx	lr
 800c3a8:	2000      	movs	r0, #0
 800c3aa:	4770      	bx	lr

0800c3ac <ucdr_check_final_buffer_behavior>:
 800c3ac:	7d83      	ldrb	r3, [r0, #22]
 800c3ae:	b943      	cbnz	r3, 800c3c2 <ucdr_check_final_buffer_behavior+0x16>
 800c3b0:	e9d0 2101 	ldrd	r2, r1, [r0, #4]
 800c3b4:	4291      	cmp	r1, r2
 800c3b6:	b510      	push	{r4, lr}
 800c3b8:	4604      	mov	r4, r0
 800c3ba:	d205      	bcs.n	800c3c8 <ucdr_check_final_buffer_behavior+0x1c>
 800c3bc:	2301      	movs	r3, #1
 800c3be:	4618      	mov	r0, r3
 800c3c0:	bd10      	pop	{r4, pc}
 800c3c2:	2300      	movs	r3, #0
 800c3c4:	4618      	mov	r0, r3
 800c3c6:	4770      	bx	lr
 800c3c8:	6982      	ldr	r2, [r0, #24]
 800c3ca:	b13a      	cbz	r2, 800c3dc <ucdr_check_final_buffer_behavior+0x30>
 800c3cc:	69c1      	ldr	r1, [r0, #28]
 800c3ce:	4790      	blx	r2
 800c3d0:	f080 0301 	eor.w	r3, r0, #1
 800c3d4:	b2db      	uxtb	r3, r3
 800c3d6:	75a0      	strb	r0, [r4, #22]
 800c3d8:	4618      	mov	r0, r3
 800c3da:	bd10      	pop	{r4, pc}
 800c3dc:	2001      	movs	r0, #1
 800c3de:	75a0      	strb	r0, [r4, #22]
 800c3e0:	e7fa      	b.n	800c3d8 <ucdr_check_final_buffer_behavior+0x2c>
 800c3e2:	bf00      	nop

0800c3e4 <ucdr_set_on_full_buffer_callback>:
 800c3e4:	e9c0 1206 	strd	r1, r2, [r0, #24]
 800c3e8:	4770      	bx	lr
 800c3ea:	bf00      	nop

0800c3ec <ucdr_init_buffer_origin_offset_endian>:
 800c3ec:	b410      	push	{r4}
 800c3ee:	9c01      	ldr	r4, [sp, #4]
 800c3f0:	6001      	str	r1, [r0, #0]
 800c3f2:	440a      	add	r2, r1
 800c3f4:	6042      	str	r2, [r0, #4]
 800c3f6:	190a      	adds	r2, r1, r4
 800c3f8:	441c      	add	r4, r3
 800c3fa:	e9c0 3403 	strd	r3, r4, [r0, #12]
 800c3fe:	6082      	str	r2, [r0, #8]
 800c400:	f89d 3008 	ldrb.w	r3, [sp, #8]
 800c404:	7503      	strb	r3, [r0, #20]
 800c406:	2200      	movs	r2, #0
 800c408:	e9c0 2206 	strd	r2, r2, [r0, #24]
 800c40c:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c410:	7542      	strb	r2, [r0, #21]
 800c412:	7582      	strb	r2, [r0, #22]
 800c414:	4770      	bx	lr
 800c416:	bf00      	nop

0800c418 <ucdr_init_buffer_origin_offset>:
 800c418:	b510      	push	{r4, lr}
 800c41a:	b082      	sub	sp, #8
 800c41c:	9c04      	ldr	r4, [sp, #16]
 800c41e:	9400      	str	r4, [sp, #0]
 800c420:	2401      	movs	r4, #1
 800c422:	9401      	str	r4, [sp, #4]
 800c424:	f7ff ffe2 	bl	800c3ec <ucdr_init_buffer_origin_offset_endian>
 800c428:	b002      	add	sp, #8
 800c42a:	bd10      	pop	{r4, pc}

0800c42c <ucdr_init_buffer_origin>:
 800c42c:	b510      	push	{r4, lr}
 800c42e:	b082      	sub	sp, #8
 800c430:	2400      	movs	r4, #0
 800c432:	9400      	str	r4, [sp, #0]
 800c434:	f7ff fff0 	bl	800c418 <ucdr_init_buffer_origin_offset>
 800c438:	b002      	add	sp, #8
 800c43a:	bd10      	pop	{r4, pc}

0800c43c <ucdr_init_buffer>:
 800c43c:	2300      	movs	r3, #0
 800c43e:	f7ff bff5 	b.w	800c42c <ucdr_init_buffer_origin>
 800c442:	bf00      	nop

0800c444 <ucdr_alignment>:
 800c444:	fbb0 f3f1 	udiv	r3, r0, r1
 800c448:	fb03 0011 	mls	r0, r3, r1, r0
 800c44c:	1a08      	subs	r0, r1, r0
 800c44e:	3901      	subs	r1, #1
 800c450:	4008      	ands	r0, r1
 800c452:	4770      	bx	lr

0800c454 <ucdr_buffer_alignment>:
 800c454:	7d43      	ldrb	r3, [r0, #21]
 800c456:	428b      	cmp	r3, r1
 800c458:	d208      	bcs.n	800c46c <ucdr_buffer_alignment+0x18>
 800c45a:	6900      	ldr	r0, [r0, #16]
 800c45c:	fbb0 f3f1 	udiv	r3, r0, r1
 800c460:	fb01 0013 	mls	r0, r1, r3, r0
 800c464:	1a08      	subs	r0, r1, r0
 800c466:	3901      	subs	r1, #1
 800c468:	4008      	ands	r0, r1
 800c46a:	4770      	bx	lr
 800c46c:	2000      	movs	r0, #0
 800c46e:	4770      	bx	lr

0800c470 <ucdr_align_to>:
 800c470:	b538      	push	{r3, r4, r5, lr}
 800c472:	4604      	mov	r4, r0
 800c474:	460d      	mov	r5, r1
 800c476:	f7ff ffed 	bl	800c454 <ucdr_buffer_alignment>
 800c47a:	68a3      	ldr	r3, [r4, #8]
 800c47c:	6921      	ldr	r1, [r4, #16]
 800c47e:	7565      	strb	r5, [r4, #21]
 800c480:	181a      	adds	r2, r3, r0
 800c482:	6863      	ldr	r3, [r4, #4]
 800c484:	4293      	cmp	r3, r2
 800c486:	4408      	add	r0, r1
 800c488:	bf28      	it	cs
 800c48a:	4613      	movcs	r3, r2
 800c48c:	6120      	str	r0, [r4, #16]
 800c48e:	60a3      	str	r3, [r4, #8]
 800c490:	bd38      	pop	{r3, r4, r5, pc}
 800c492:	bf00      	nop

0800c494 <ucdr_buffer_length>:
 800c494:	6882      	ldr	r2, [r0, #8]
 800c496:	6800      	ldr	r0, [r0, #0]
 800c498:	1a10      	subs	r0, r2, r0
 800c49a:	4770      	bx	lr

0800c49c <ucdr_buffer_remaining>:
 800c49c:	e9d0 2001 	ldrd	r2, r0, [r0, #4]
 800c4a0:	1a10      	subs	r0, r2, r0
 800c4a2:	4770      	bx	lr

0800c4a4 <ucdr_check_final_buffer_behavior_array>:
 800c4a4:	b538      	push	{r3, r4, r5, lr}
 800c4a6:	7d83      	ldrb	r3, [r0, #22]
 800c4a8:	b963      	cbnz	r3, 800c4c4 <ucdr_check_final_buffer_behavior_array+0x20>
 800c4aa:	e9d0 3201 	ldrd	r3, r2, [r0, #4]
 800c4ae:	429a      	cmp	r2, r3
 800c4b0:	4604      	mov	r4, r0
 800c4b2:	460d      	mov	r5, r1
 800c4b4:	d308      	bcc.n	800c4c8 <ucdr_check_final_buffer_behavior_array+0x24>
 800c4b6:	b139      	cbz	r1, 800c4c8 <ucdr_check_final_buffer_behavior_array+0x24>
 800c4b8:	6983      	ldr	r3, [r0, #24]
 800c4ba:	b163      	cbz	r3, 800c4d6 <ucdr_check_final_buffer_behavior_array+0x32>
 800c4bc:	69c1      	ldr	r1, [r0, #28]
 800c4be:	4798      	blx	r3
 800c4c0:	75a0      	strb	r0, [r4, #22]
 800c4c2:	b108      	cbz	r0, 800c4c8 <ucdr_check_final_buffer_behavior_array+0x24>
 800c4c4:	2000      	movs	r0, #0
 800c4c6:	bd38      	pop	{r3, r4, r5, pc}
 800c4c8:	4620      	mov	r0, r4
 800c4ca:	f7ff ffe7 	bl	800c49c <ucdr_buffer_remaining>
 800c4ce:	42a8      	cmp	r0, r5
 800c4d0:	bf28      	it	cs
 800c4d2:	4628      	movcs	r0, r5
 800c4d4:	bd38      	pop	{r3, r4, r5, pc}
 800c4d6:	2301      	movs	r3, #1
 800c4d8:	7583      	strb	r3, [r0, #22]
 800c4da:	e7f3      	b.n	800c4c4 <ucdr_check_final_buffer_behavior_array+0x20>

0800c4dc <ucdr_advance_buffer>:
 800c4dc:	b538      	push	{r3, r4, r5, lr}
 800c4de:	4604      	mov	r4, r0
 800c4e0:	460d      	mov	r5, r1
 800c4e2:	f7ff ff57 	bl	800c394 <ucdr_check_buffer_available_for>
 800c4e6:	b178      	cbz	r0, 800c508 <ucdr_advance_buffer+0x2c>
 800c4e8:	6923      	ldr	r3, [r4, #16]
 800c4ea:	68a2      	ldr	r2, [r4, #8]
 800c4ec:	442b      	add	r3, r5
 800c4ee:	6123      	str	r3, [r4, #16]
 800c4f0:	2301      	movs	r3, #1
 800c4f2:	442a      	add	r2, r5
 800c4f4:	7563      	strb	r3, [r4, #21]
 800c4f6:	60a2      	str	r2, [r4, #8]
 800c4f8:	bd38      	pop	{r3, r4, r5, pc}
 800c4fa:	68a2      	ldr	r2, [r4, #8]
 800c4fc:	6923      	ldr	r3, [r4, #16]
 800c4fe:	4402      	add	r2, r0
 800c500:	4403      	add	r3, r0
 800c502:	1a2d      	subs	r5, r5, r0
 800c504:	60a2      	str	r2, [r4, #8]
 800c506:	6123      	str	r3, [r4, #16]
 800c508:	4629      	mov	r1, r5
 800c50a:	2201      	movs	r2, #1
 800c50c:	4620      	mov	r0, r4
 800c50e:	f7ff ffc9 	bl	800c4a4 <ucdr_check_final_buffer_behavior_array>
 800c512:	2800      	cmp	r0, #0
 800c514:	d1f1      	bne.n	800c4fa <ucdr_advance_buffer+0x1e>
 800c516:	2301      	movs	r3, #1
 800c518:	7563      	strb	r3, [r4, #21]
 800c51a:	bd38      	pop	{r3, r4, r5, pc}

0800c51c <uxr_buffer_delete_entity>:
 800c51c:	b510      	push	{r4, lr}
 800c51e:	2300      	movs	r3, #0
 800c520:	b08e      	sub	sp, #56	@ 0x38
 800c522:	e9cd 3201 	strd	r3, r2, [sp, #4]
 800c526:	2303      	movs	r3, #3
 800c528:	9300      	str	r3, [sp, #0]
 800c52a:	2204      	movs	r2, #4
 800c52c:	ab06      	add	r3, sp, #24
 800c52e:	4604      	mov	r4, r0
 800c530:	9103      	str	r1, [sp, #12]
 800c532:	f001 fa9f 	bl	800da74 <uxr_prepare_stream_to_write_submessage>
 800c536:	b918      	cbnz	r0, 800c540 <uxr_buffer_delete_entity+0x24>
 800c538:	4604      	mov	r4, r0
 800c53a:	4620      	mov	r0, r4
 800c53c:	b00e      	add	sp, #56	@ 0x38
 800c53e:	bd10      	pop	{r4, pc}
 800c540:	9902      	ldr	r1, [sp, #8]
 800c542:	aa05      	add	r2, sp, #20
 800c544:	4620      	mov	r0, r4
 800c546:	f001 fbcb 	bl	800dce0 <uxr_init_base_object_request>
 800c54a:	a905      	add	r1, sp, #20
 800c54c:	4604      	mov	r4, r0
 800c54e:	a806      	add	r0, sp, #24
 800c550:	f003 f84e 	bl	800f5f0 <uxr_serialize_DELETE_Payload>
 800c554:	4620      	mov	r0, r4
 800c556:	b00e      	add	sp, #56	@ 0x38
 800c558:	bd10      	pop	{r4, pc}
 800c55a:	bf00      	nop

0800c55c <uxr_common_create_entity>:
 800c55c:	b510      	push	{r4, lr}
 800c55e:	f3c2 4c07 	ubfx	ip, r2, #16, #8
 800c562:	b08c      	sub	sp, #48	@ 0x30
 800c564:	e9cd 2102 	strd	r2, r1, [sp, #8]
 800c568:	f1bc 0f01 	cmp.w	ip, #1
 800c56c:	bf0c      	ite	eq
 800c56e:	f003 0201 	andeq.w	r2, r3, #1
 800c572:	2200      	movne	r2, #0
 800c574:	330e      	adds	r3, #14
 800c576:	f89d 1038 	ldrb.w	r1, [sp, #56]	@ 0x38
 800c57a:	9101      	str	r1, [sp, #4]
 800c57c:	441a      	add	r2, r3
 800c57e:	2301      	movs	r3, #1
 800c580:	9300      	str	r3, [sp, #0]
 800c582:	9903      	ldr	r1, [sp, #12]
 800c584:	ab04      	add	r3, sp, #16
 800c586:	b292      	uxth	r2, r2
 800c588:	4604      	mov	r4, r0
 800c58a:	f001 fa73 	bl	800da74 <uxr_prepare_stream_to_write_submessage>
 800c58e:	b918      	cbnz	r0, 800c598 <uxr_common_create_entity+0x3c>
 800c590:	4604      	mov	r4, r0
 800c592:	4620      	mov	r0, r4
 800c594:	b00c      	add	sp, #48	@ 0x30
 800c596:	bd10      	pop	{r4, pc}
 800c598:	9902      	ldr	r1, [sp, #8]
 800c59a:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800c59c:	4620      	mov	r0, r4
 800c59e:	f001 fb9f 	bl	800dce0 <uxr_init_base_object_request>
 800c5a2:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800c5a4:	4604      	mov	r4, r0
 800c5a6:	a804      	add	r0, sp, #16
 800c5a8:	f002 ff7e 	bl	800f4a8 <uxr_serialize_CREATE_Payload>
 800c5ac:	4620      	mov	r0, r4
 800c5ae:	b00c      	add	sp, #48	@ 0x30
 800c5b0:	bd10      	pop	{r4, pc}
 800c5b2:	bf00      	nop

0800c5b4 <uxr_buffer_create_participant_bin>:
 800c5b4:	b570      	push	{r4, r5, r6, lr}
 800c5b6:	f5ad 7d16 	sub.w	sp, sp, #600	@ 0x258
 800c5ba:	ac11      	add	r4, sp, #68	@ 0x44
 800c5bc:	f8ad 3254 	strh.w	r3, [sp, #596]	@ 0x254
 800c5c0:	2303      	movs	r3, #3
 800c5c2:	e9cd 2102 	strd	r2, r1, [sp, #8]
 800c5c6:	7223      	strb	r3, [r4, #8]
 800c5c8:	9b9a      	ldr	r3, [sp, #616]	@ 0x268
 800c5ca:	f89d 626c 	ldrb.w	r6, [sp, #620]	@ 0x26c
 800c5ce:	2201      	movs	r2, #1
 800c5d0:	2100      	movs	r1, #0
 800c5d2:	4605      	mov	r5, r0
 800c5d4:	7122      	strb	r2, [r4, #4]
 800c5d6:	f88d 1014 	strb.w	r1, [sp, #20]
 800c5da:	b1cb      	cbz	r3, 800c610 <uxr_buffer_create_participant_bin+0x5c>
 800c5dc:	f88d 201c 	strb.w	r2, [sp, #28]
 800c5e0:	9308      	str	r3, [sp, #32]
 800c5e2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800c5e6:	a915      	add	r1, sp, #84	@ 0x54
 800c5e8:	a809      	add	r0, sp, #36	@ 0x24
 800c5ea:	f7ff ff27 	bl	800c43c <ucdr_init_buffer>
 800c5ee:	a905      	add	r1, sp, #20
 800c5f0:	a809      	add	r0, sp, #36	@ 0x24
 800c5f2:	f002 fc17 	bl	800ee24 <uxr_serialize_OBJK_DomainParticipant_Binary>
 800c5f6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800c5f8:	9600      	str	r6, [sp, #0]
 800c5fa:	9401      	str	r4, [sp, #4]
 800c5fc:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 800c600:	60e3      	str	r3, [r4, #12]
 800c602:	4628      	mov	r0, r5
 800c604:	b29b      	uxth	r3, r3
 800c606:	f7ff ffa9 	bl	800c55c <uxr_common_create_entity>
 800c60a:	f50d 7d16 	add.w	sp, sp, #600	@ 0x258
 800c60e:	bd70      	pop	{r4, r5, r6, pc}
 800c610:	f88d 301c 	strb.w	r3, [sp, #28]
 800c614:	e7e5      	b.n	800c5e2 <uxr_buffer_create_participant_bin+0x2e>
 800c616:	bf00      	nop

0800c618 <uxr_buffer_create_topic_bin>:
 800c618:	b570      	push	{r4, r5, r6, lr}
 800c61a:	f5ad 7d18 	sub.w	sp, sp, #608	@ 0x260
 800c61e:	e9cd 3203 	strd	r3, r2, [sp, #12]
 800c622:	9105      	str	r1, [sp, #20]
 800c624:	4605      	mov	r5, r0
 800c626:	a997      	add	r1, sp, #604	@ 0x25c
 800c628:	4618      	mov	r0, r3
 800c62a:	2302      	movs	r3, #2
 800c62c:	f89d 6278 	ldrb.w	r6, [sp, #632]	@ 0x278
 800c630:	f88d 3050 	strb.w	r3, [sp, #80]	@ 0x50
 800c634:	f000 f9b2 	bl	800c99c <uxr_object_id_to_raw>
 800c638:	9b9c      	ldr	r3, [sp, #624]	@ 0x270
 800c63a:	9306      	str	r3, [sp, #24]
 800c63c:	9b9d      	ldr	r3, [sp, #628]	@ 0x274
 800c63e:	930a      	str	r3, [sp, #40]	@ 0x28
 800c640:	2303      	movs	r3, #3
 800c642:	f88d 3054 	strb.w	r3, [sp, #84]	@ 0x54
 800c646:	2301      	movs	r3, #1
 800c648:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800c64c:	f88d 3024 	strb.w	r3, [sp, #36]	@ 0x24
 800c650:	a917      	add	r1, sp, #92	@ 0x5c
 800c652:	2300      	movs	r3, #0
 800c654:	a80b      	add	r0, sp, #44	@ 0x2c
 800c656:	f88d 301c 	strb.w	r3, [sp, #28]
 800c65a:	f7ff feef 	bl	800c43c <ucdr_init_buffer>
 800c65e:	a906      	add	r1, sp, #24
 800c660:	a80b      	add	r0, sp, #44	@ 0x2c
 800c662:	f002 fc01 	bl	800ee68 <uxr_serialize_OBJK_Topic_Binary>
 800c666:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800c668:	9316      	str	r3, [sp, #88]	@ 0x58
 800c66a:	ac13      	add	r4, sp, #76	@ 0x4c
 800c66c:	e9dd 2104 	ldrd	r2, r1, [sp, #16]
 800c670:	9600      	str	r6, [sp, #0]
 800c672:	9401      	str	r4, [sp, #4]
 800c674:	b29b      	uxth	r3, r3
 800c676:	4628      	mov	r0, r5
 800c678:	f7ff ff70 	bl	800c55c <uxr_common_create_entity>
 800c67c:	f50d 7d18 	add.w	sp, sp, #608	@ 0x260
 800c680:	bd70      	pop	{r4, r5, r6, pc}
 800c682:	bf00      	nop

0800c684 <uxr_buffer_create_subscriber_bin>:
 800c684:	b570      	push	{r4, r5, r6, lr}
 800c686:	f5ad 6d91 	sub.w	sp, sp, #1160	@ 0x488
 800c68a:	e9cd 3203 	strd	r3, r2, [sp, #12]
 800c68e:	9105      	str	r1, [sp, #20]
 800c690:	4605      	mov	r5, r0
 800c692:	a992      	add	r1, sp, #584	@ 0x248
 800c694:	4618      	mov	r0, r3
 800c696:	2304      	movs	r3, #4
 800c698:	f89d 6498 	ldrb.w	r6, [sp, #1176]	@ 0x498
 800c69c:	f88d 303c 	strb.w	r3, [sp, #60]	@ 0x3c
 800c6a0:	f000 f97c 	bl	800c99c <uxr_object_id_to_raw>
 800c6a4:	2300      	movs	r3, #0
 800c6a6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800c6aa:	f88d 324c 	strb.w	r3, [sp, #588]	@ 0x24c
 800c6ae:	f88d 3254 	strb.w	r3, [sp, #596]	@ 0x254
 800c6b2:	a912      	add	r1, sp, #72	@ 0x48
 800c6b4:	2303      	movs	r3, #3
 800c6b6:	a806      	add	r0, sp, #24
 800c6b8:	f88d 3040 	strb.w	r3, [sp, #64]	@ 0x40
 800c6bc:	f7ff febe 	bl	800c43c <ucdr_init_buffer>
 800c6c0:	a993      	add	r1, sp, #588	@ 0x24c
 800c6c2:	a806      	add	r0, sp, #24
 800c6c4:	f002 fc84 	bl	800efd0 <uxr_serialize_OBJK_Subscriber_Binary>
 800c6c8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800c6ca:	9311      	str	r3, [sp, #68]	@ 0x44
 800c6cc:	ac0e      	add	r4, sp, #56	@ 0x38
 800c6ce:	e9dd 2104 	ldrd	r2, r1, [sp, #16]
 800c6d2:	9600      	str	r6, [sp, #0]
 800c6d4:	9401      	str	r4, [sp, #4]
 800c6d6:	b29b      	uxth	r3, r3
 800c6d8:	4628      	mov	r0, r5
 800c6da:	f7ff ff3f 	bl	800c55c <uxr_common_create_entity>
 800c6de:	f50d 6d91 	add.w	sp, sp, #1160	@ 0x488
 800c6e2:	bd70      	pop	{r4, r5, r6, pc}

0800c6e4 <uxr_buffer_create_datareader_bin>:
 800c6e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c6e8:	f5ad 7d24 	sub.w	sp, sp, #656	@ 0x290
 800c6ec:	ac1f      	add	r4, sp, #124	@ 0x7c
 800c6ee:	e9cd 3203 	strd	r3, r2, [sp, #12]
 800c6f2:	f8bd 52b0 	ldrh.w	r5, [sp, #688]	@ 0x2b0
 800c6f6:	9105      	str	r1, [sp, #20]
 800c6f8:	4606      	mov	r6, r0
 800c6fa:	a9a3      	add	r1, sp, #652	@ 0x28c
 800c6fc:	4618      	mov	r0, r3
 800c6fe:	2306      	movs	r3, #6
 800c700:	7123      	strb	r3, [r4, #4]
 800c702:	f89d 82b4 	ldrb.w	r8, [sp, #692]	@ 0x2b4
 800c706:	2703      	movs	r7, #3
 800c708:	f000 f948 	bl	800c99c <uxr_object_id_to_raw>
 800c70c:	98aa      	ldr	r0, [sp, #680]	@ 0x2a8
 800c70e:	7227      	strb	r7, [r4, #8]
 800c710:	a90e      	add	r1, sp, #56	@ 0x38
 800c712:	f000 f943 	bl	800c99c <uxr_object_id_to_raw>
 800c716:	2300      	movs	r3, #0
 800c718:	f8ad 5044 	strh.w	r5, [sp, #68]	@ 0x44
 800c71c:	f89d 22ad 	ldrb.w	r2, [sp, #685]	@ 0x2ad
 800c720:	f88d 3070 	strb.w	r3, [sp, #112]	@ 0x70
 800c724:	3d00      	subs	r5, #0
 800c726:	bf18      	it	ne
 800c728:	2501      	movne	r5, #1
 800c72a:	f88d 3064 	strb.w	r3, [sp, #100]	@ 0x64
 800c72e:	f88d 3046 	strb.w	r3, [sp, #70]	@ 0x46
 800c732:	f88d 304c 	strb.w	r3, [sp, #76]	@ 0x4c
 800c736:	f88d 3054 	strb.w	r3, [sp, #84]	@ 0x54
 800c73a:	f8ad 3040 	strh.w	r3, [sp, #64]	@ 0x40
 800c73e:	2301      	movs	r3, #1
 800c740:	f88d 5042 	strb.w	r5, [sp, #66]	@ 0x42
 800c744:	f88d 303a 	strb.w	r3, [sp, #58]	@ 0x3a
 800c748:	bb8a      	cbnz	r2, 800c7ae <uxr_buffer_create_datareader_bin+0xca>
 800c74a:	f8ad 3040 	strh.w	r3, [sp, #64]	@ 0x40
 800c74e:	f04f 0e23 	mov.w	lr, #35	@ 0x23
 800c752:	f04f 0c13 	mov.w	ip, #19
 800c756:	250b      	movs	r5, #11
 800c758:	2221      	movs	r2, #33	@ 0x21
 800c75a:	2111      	movs	r1, #17
 800c75c:	2009      	movs	r0, #9
 800c75e:	f89d 32ae 	ldrb.w	r3, [sp, #686]	@ 0x2ae
 800c762:	b923      	cbnz	r3, 800c76e <uxr_buffer_create_datareader_bin+0x8a>
 800c764:	f8ad 7040 	strh.w	r7, [sp, #64]	@ 0x40
 800c768:	4672      	mov	r2, lr
 800c76a:	4661      	mov	r1, ip
 800c76c:	4628      	mov	r0, r5
 800c76e:	f89d 32ac 	ldrb.w	r3, [sp, #684]	@ 0x2ac
 800c772:	2b01      	cmp	r3, #1
 800c774:	d025      	beq.n	800c7c2 <uxr_buffer_create_datareader_bin+0xde>
 800c776:	2b03      	cmp	r3, #3
 800c778:	d029      	beq.n	800c7ce <uxr_buffer_create_datareader_bin+0xea>
 800c77a:	b32b      	cbz	r3, 800c7c8 <uxr_buffer_create_datareader_bin+0xe4>
 800c77c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800c780:	a923      	add	r1, sp, #140	@ 0x8c
 800c782:	a806      	add	r0, sp, #24
 800c784:	f7ff fe5a 	bl	800c43c <ucdr_init_buffer>
 800c788:	a90e      	add	r1, sp, #56	@ 0x38
 800c78a:	a806      	add	r0, sp, #24
 800c78c:	f002 fc96 	bl	800f0bc <uxr_serialize_OBJK_DataReader_Binary>
 800c790:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800c792:	f8cd 8000 	str.w	r8, [sp]
 800c796:	9401      	str	r4, [sp, #4]
 800c798:	e9dd 2104 	ldrd	r2, r1, [sp, #16]
 800c79c:	60e3      	str	r3, [r4, #12]
 800c79e:	4630      	mov	r0, r6
 800c7a0:	b29b      	uxth	r3, r3
 800c7a2:	f7ff fedb 	bl	800c55c <uxr_common_create_entity>
 800c7a6:	f50d 7d24 	add.w	sp, sp, #656	@ 0x290
 800c7aa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c7ae:	f04f 0e22 	mov.w	lr, #34	@ 0x22
 800c7b2:	f04f 0c12 	mov.w	ip, #18
 800c7b6:	250a      	movs	r5, #10
 800c7b8:	2220      	movs	r2, #32
 800c7ba:	2110      	movs	r1, #16
 800c7bc:	2008      	movs	r0, #8
 800c7be:	2702      	movs	r7, #2
 800c7c0:	e7cd      	b.n	800c75e <uxr_buffer_create_datareader_bin+0x7a>
 800c7c2:	f8ad 1040 	strh.w	r1, [sp, #64]	@ 0x40
 800c7c6:	e7d9      	b.n	800c77c <uxr_buffer_create_datareader_bin+0x98>
 800c7c8:	f8ad 0040 	strh.w	r0, [sp, #64]	@ 0x40
 800c7cc:	e7d6      	b.n	800c77c <uxr_buffer_create_datareader_bin+0x98>
 800c7ce:	f8ad 2040 	strh.w	r2, [sp, #64]	@ 0x40
 800c7d2:	e7d3      	b.n	800c77c <uxr_buffer_create_datareader_bin+0x98>

0800c7d4 <get_custom_error>:
 800c7d4:	4b01      	ldr	r3, [pc, #4]	@ (800c7dc <get_custom_error+0x8>)
 800c7d6:	7818      	ldrb	r0, [r3, #0]
 800c7d8:	4770      	bx	lr
 800c7da:	bf00      	nop
 800c7dc:	2000daac 	.word	0x2000daac

0800c7e0 <recv_custom_msg>:
 800c7e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c7e4:	4693      	mov	fp, r2
 800c7e6:	b089      	sub	sp, #36	@ 0x24
 800c7e8:	f890 2200 	ldrb.w	r2, [r0, #512]	@ 0x200
 800c7ec:	9305      	str	r3, [sp, #20]
 800c7ee:	468a      	mov	sl, r1
 800c7f0:	2100      	movs	r1, #0
 800c7f2:	4604      	mov	r4, r0
 800c7f4:	f88d 101e 	strb.w	r1, [sp, #30]
 800c7f8:	b322      	cbz	r2, 800c844 <recv_custom_msg+0x64>
 800c7fa:	f200 2902 	addw	r9, r0, #514	@ 0x202
 800c7fe:	f10d 081f 	add.w	r8, sp, #31
 800c802:	af05      	add	r7, sp, #20
 800c804:	f10d 061e 	add.w	r6, sp, #30
 800c808:	f44f 7500 	mov.w	r5, #512	@ 0x200
 800c80c:	e002      	b.n	800c814 <recv_custom_msg+0x34>
 800c80e:	9b05      	ldr	r3, [sp, #20]
 800c810:	2b00      	cmp	r3, #0
 800c812:	dd0f      	ble.n	800c834 <recv_custom_msg+0x54>
 800c814:	f8d4 1274 	ldr.w	r1, [r4, #628]	@ 0x274
 800c818:	4623      	mov	r3, r4
 800c81a:	e9cd 7802 	strd	r7, r8, [sp, #8]
 800c81e:	e9cd 5600 	strd	r5, r6, [sp]
 800c822:	4622      	mov	r2, r4
 800c824:	4648      	mov	r0, r9
 800c826:	f001 fc89 	bl	800e13c <uxr_read_framed_msg>
 800c82a:	2800      	cmp	r0, #0
 800c82c:	d0ef      	beq.n	800c80e <recv_custom_msg+0x2e>
 800c82e:	f89d 301e 	ldrb.w	r3, [sp, #30]
 800c832:	b1b3      	cbz	r3, 800c862 <recv_custom_msg+0x82>
 800c834:	4b0f      	ldr	r3, [pc, #60]	@ (800c874 <recv_custom_msg+0x94>)
 800c836:	f89d 201f 	ldrb.w	r2, [sp, #31]
 800c83a:	701a      	strb	r2, [r3, #0]
 800c83c:	2000      	movs	r0, #0
 800c83e:	b009      	add	sp, #36	@ 0x24
 800c840:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c844:	f10d 021f 	add.w	r2, sp, #31
 800c848:	9200      	str	r2, [sp, #0]
 800c84a:	f8d0 5274 	ldr.w	r5, [r0, #628]	@ 0x274
 800c84e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800c852:	4601      	mov	r1, r0
 800c854:	47a8      	blx	r5
 800c856:	2800      	cmp	r0, #0
 800c858:	d0ec      	beq.n	800c834 <recv_custom_msg+0x54>
 800c85a:	f89d 301e 	ldrb.w	r3, [sp, #30]
 800c85e:	2b00      	cmp	r3, #0
 800c860:	d1e8      	bne.n	800c834 <recv_custom_msg+0x54>
 800c862:	f8cb 0000 	str.w	r0, [fp]
 800c866:	2001      	movs	r0, #1
 800c868:	f8ca 4000 	str.w	r4, [sl]
 800c86c:	b009      	add	sp, #36	@ 0x24
 800c86e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c872:	bf00      	nop
 800c874:	2000daac 	.word	0x2000daac

0800c878 <send_custom_msg>:
 800c878:	b530      	push	{r4, r5, lr}
 800c87a:	f890 4200 	ldrb.w	r4, [r0, #512]	@ 0x200
 800c87e:	b087      	sub	sp, #28
 800c880:	4615      	mov	r5, r2
 800c882:	b974      	cbnz	r4, 800c8a2 <send_custom_msg+0x2a>
 800c884:	f8d0 4270 	ldr.w	r4, [r0, #624]	@ 0x270
 800c888:	f10d 0317 	add.w	r3, sp, #23
 800c88c:	47a0      	blx	r4
 800c88e:	b108      	cbz	r0, 800c894 <send_custom_msg+0x1c>
 800c890:	42a8      	cmp	r0, r5
 800c892:	d015      	beq.n	800c8c0 <send_custom_msg+0x48>
 800c894:	4b0c      	ldr	r3, [pc, #48]	@ (800c8c8 <send_custom_msg+0x50>)
 800c896:	f89d 2017 	ldrb.w	r2, [sp, #23]
 800c89a:	701a      	strb	r2, [r3, #0]
 800c89c:	2000      	movs	r0, #0
 800c89e:	b007      	add	sp, #28
 800c8a0:	bd30      	pop	{r4, r5, pc}
 800c8a2:	460b      	mov	r3, r1
 800c8a4:	2200      	movs	r2, #0
 800c8a6:	f10d 0117 	add.w	r1, sp, #23
 800c8aa:	e9cd 2101 	strd	r2, r1, [sp, #4]
 800c8ae:	4602      	mov	r2, r0
 800c8b0:	f8d0 1270 	ldr.w	r1, [r0, #624]	@ 0x270
 800c8b4:	9500      	str	r5, [sp, #0]
 800c8b6:	f200 2002 	addw	r0, r0, #514	@ 0x202
 800c8ba:	f001 fa47 	bl	800dd4c <uxr_write_framed_msg>
 800c8be:	e7e6      	b.n	800c88e <send_custom_msg+0x16>
 800c8c0:	2001      	movs	r0, #1
 800c8c2:	b007      	add	sp, #28
 800c8c4:	bd30      	pop	{r4, r5, pc}
 800c8c6:	bf00      	nop
 800c8c8:	2000daac 	.word	0x2000daac

0800c8cc <uxr_set_custom_transport_callbacks>:
 800c8cc:	b410      	push	{r4}
 800c8ce:	9c01      	ldr	r4, [sp, #4]
 800c8d0:	f8c0 4270 	str.w	r4, [r0, #624]	@ 0x270
 800c8d4:	e9c0 239a 	strd	r2, r3, [r0, #616]	@ 0x268
 800c8d8:	9b02      	ldr	r3, [sp, #8]
 800c8da:	f880 1200 	strb.w	r1, [r0, #512]	@ 0x200
 800c8de:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c8e2:	f8c0 3274 	str.w	r3, [r0, #628]	@ 0x274
 800c8e6:	4770      	bx	lr

0800c8e8 <uxr_init_custom_transport>:
 800c8e8:	b538      	push	{r3, r4, r5, lr}
 800c8ea:	f8d0 3268 	ldr.w	r3, [r0, #616]	@ 0x268
 800c8ee:	b303      	cbz	r3, 800c932 <uxr_init_custom_transport+0x4a>
 800c8f0:	f8d0 226c 	ldr.w	r2, [r0, #620]	@ 0x26c
 800c8f4:	4604      	mov	r4, r0
 800c8f6:	b1e2      	cbz	r2, 800c932 <uxr_init_custom_transport+0x4a>
 800c8f8:	f8d0 2270 	ldr.w	r2, [r0, #624]	@ 0x270
 800c8fc:	b1ca      	cbz	r2, 800c932 <uxr_init_custom_transport+0x4a>
 800c8fe:	f8d0 2274 	ldr.w	r2, [r0, #628]	@ 0x274
 800c902:	b1b2      	cbz	r2, 800c932 <uxr_init_custom_transport+0x4a>
 800c904:	f8c0 128c 	str.w	r1, [r0, #652]	@ 0x28c
 800c908:	4798      	blx	r3
 800c90a:	4605      	mov	r5, r0
 800c90c:	b188      	cbz	r0, 800c932 <uxr_init_custom_transport+0x4a>
 800c90e:	f894 3200 	ldrb.w	r3, [r4, #512]	@ 0x200
 800c912:	b98b      	cbnz	r3, 800c938 <uxr_init_custom_transport+0x50>
 800c914:	490b      	ldr	r1, [pc, #44]	@ (800c944 <uxr_init_custom_transport+0x5c>)
 800c916:	4b0c      	ldr	r3, [pc, #48]	@ (800c948 <uxr_init_custom_transport+0x60>)
 800c918:	4a0c      	ldr	r2, [pc, #48]	@ (800c94c <uxr_init_custom_transport+0x64>)
 800c91a:	f8c4 3280 	str.w	r3, [r4, #640]	@ 0x280
 800c91e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800c922:	e9c4 419e 	strd	r4, r1, [r4, #632]	@ 0x278
 800c926:	f8c4 2284 	str.w	r2, [r4, #644]	@ 0x284
 800c92a:	f8a4 3288 	strh.w	r3, [r4, #648]	@ 0x288
 800c92e:	4628      	mov	r0, r5
 800c930:	bd38      	pop	{r3, r4, r5, pc}
 800c932:	2500      	movs	r5, #0
 800c934:	4628      	mov	r0, r5
 800c936:	bd38      	pop	{r3, r4, r5, pc}
 800c938:	2100      	movs	r1, #0
 800c93a:	f204 2002 	addw	r0, r4, #514	@ 0x202
 800c93e:	f001 f9ff 	bl	800dd40 <uxr_init_framing_io>
 800c942:	e7e7      	b.n	800c914 <uxr_init_custom_transport+0x2c>
 800c944:	0800c879 	.word	0x0800c879
 800c948:	0800c7e1 	.word	0x0800c7e1
 800c94c:	0800c7d5 	.word	0x0800c7d5

0800c950 <uxr_close_custom_transport>:
 800c950:	f8d0 326c 	ldr.w	r3, [r0, #620]	@ 0x26c
 800c954:	4718      	bx	r3
 800c956:	bf00      	nop

0800c958 <uxr_object_id>:
 800c958:	b082      	sub	sp, #8
 800c95a:	2300      	movs	r3, #0
 800c95c:	f88d 1006 	strb.w	r1, [sp, #6]
 800c960:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 800c964:	f360 030f 	bfi	r3, r0, #0, #16
 800c968:	f362 431f 	bfi	r3, r2, #16, #16
 800c96c:	4618      	mov	r0, r3
 800c96e:	b002      	add	sp, #8
 800c970:	4770      	bx	lr
 800c972:	bf00      	nop

0800c974 <uxr_object_id_from_raw>:
 800c974:	7843      	ldrb	r3, [r0, #1]
 800c976:	7801      	ldrb	r1, [r0, #0]
 800c978:	b082      	sub	sp, #8
 800c97a:	f003 020f 	and.w	r2, r3, #15
 800c97e:	f88d 2006 	strb.w	r2, [sp, #6]
 800c982:	091b      	lsrs	r3, r3, #4
 800c984:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 800c988:	eb03 1301 	add.w	r3, r3, r1, lsl #4
 800c98c:	2000      	movs	r0, #0
 800c98e:	f363 000f 	bfi	r0, r3, #0, #16
 800c992:	f362 401f 	bfi	r0, r2, #16, #16
 800c996:	b002      	add	sp, #8
 800c998:	4770      	bx	lr
 800c99a:	bf00      	nop

0800c99c <uxr_object_id_to_raw>:
 800c99c:	4602      	mov	r2, r0
 800c99e:	f3c0 4303 	ubfx	r3, r0, #16, #4
 800c9a2:	b082      	sub	sp, #8
 800c9a4:	f3c2 1c0b 	ubfx	ip, r2, #4, #12
 800c9a8:	eb03 1002 	add.w	r0, r3, r2, lsl #4
 800c9ac:	f881 c000 	strb.w	ip, [r1]
 800c9b0:	7048      	strb	r0, [r1, #1]
 800c9b2:	b002      	add	sp, #8
 800c9b4:	4770      	bx	lr
 800c9b6:	bf00      	nop

0800c9b8 <uxr_buffer_request_data>:
 800c9b8:	b530      	push	{r4, r5, lr}
 800c9ba:	b095      	sub	sp, #84	@ 0x54
 800c9bc:	e9cd 2104 	strd	r2, r1, [sp, #16]
 800c9c0:	9d18      	ldr	r5, [sp, #96]	@ 0x60
 800c9c2:	9303      	str	r3, [sp, #12]
 800c9c4:	2200      	movs	r2, #0
 800c9c6:	2d00      	cmp	r5, #0
 800c9c8:	bf14      	ite	ne
 800c9ca:	2101      	movne	r1, #1
 800c9cc:	4611      	moveq	r1, r2
 800c9ce:	4604      	mov	r4, r0
 800c9d0:	f88d 301c 	strb.w	r3, [sp, #28]
 800c9d4:	f88d 201d 	strb.w	r2, [sp, #29]
 800c9d8:	f88d 201e 	strb.w	r2, [sp, #30]
 800c9dc:	f88d 1024 	strb.w	r1, [sp, #36]	@ 0x24
 800c9e0:	d021      	beq.n	800ca26 <uxr_buffer_request_data+0x6e>
 800c9e2:	682a      	ldr	r2, [r5, #0]
 800c9e4:	686b      	ldr	r3, [r5, #4]
 800c9e6:	f8cd 2026 	str.w	r2, [sp, #38]	@ 0x26
 800c9ea:	f8cd 302a 	str.w	r3, [sp, #42]	@ 0x2a
 800c9ee:	2210      	movs	r2, #16
 800c9f0:	2308      	movs	r3, #8
 800c9f2:	2100      	movs	r1, #0
 800c9f4:	e9cd 3100 	strd	r3, r1, [sp]
 800c9f8:	4620      	mov	r0, r4
 800c9fa:	9905      	ldr	r1, [sp, #20]
 800c9fc:	ab0c      	add	r3, sp, #48	@ 0x30
 800c9fe:	f001 f839 	bl	800da74 <uxr_prepare_stream_to_write_submessage>
 800ca02:	b918      	cbnz	r0, 800ca0c <uxr_buffer_request_data+0x54>
 800ca04:	4604      	mov	r4, r0
 800ca06:	4620      	mov	r0, r4
 800ca08:	b015      	add	sp, #84	@ 0x54
 800ca0a:	bd30      	pop	{r4, r5, pc}
 800ca0c:	9904      	ldr	r1, [sp, #16]
 800ca0e:	aa06      	add	r2, sp, #24
 800ca10:	4620      	mov	r0, r4
 800ca12:	f001 f965 	bl	800dce0 <uxr_init_base_object_request>
 800ca16:	a906      	add	r1, sp, #24
 800ca18:	4604      	mov	r4, r0
 800ca1a:	a80c      	add	r0, sp, #48	@ 0x30
 800ca1c:	f002 fe92 	bl	800f744 <uxr_serialize_READ_DATA_Payload>
 800ca20:	4620      	mov	r0, r4
 800ca22:	b015      	add	sp, #84	@ 0x54
 800ca24:	bd30      	pop	{r4, r5, pc}
 800ca26:	2208      	movs	r2, #8
 800ca28:	e7e2      	b.n	800c9f0 <uxr_buffer_request_data+0x38>
 800ca2a:	bf00      	nop

0800ca2c <uxr_buffer_cancel_data>:
 800ca2c:	b510      	push	{r4, lr}
 800ca2e:	b094      	sub	sp, #80	@ 0x50
 800ca30:	2300      	movs	r3, #0
 800ca32:	9202      	str	r2, [sp, #8]
 800ca34:	9205      	str	r2, [sp, #20]
 800ca36:	9301      	str	r3, [sp, #4]
 800ca38:	2201      	movs	r2, #1
 800ca3a:	f8ad 301c 	strh.w	r3, [sp, #28]
 800ca3e:	f88d 301e 	strb.w	r3, [sp, #30]
 800ca42:	f8cd 3026 	str.w	r3, [sp, #38]	@ 0x26
 800ca46:	f8cd 302a 	str.w	r3, [sp, #42]	@ 0x2a
 800ca4a:	2308      	movs	r3, #8
 800ca4c:	f88d 2024 	strb.w	r2, [sp, #36]	@ 0x24
 800ca50:	9300      	str	r3, [sp, #0]
 800ca52:	2210      	movs	r2, #16
 800ca54:	ab0c      	add	r3, sp, #48	@ 0x30
 800ca56:	4604      	mov	r4, r0
 800ca58:	9103      	str	r1, [sp, #12]
 800ca5a:	f001 f80b 	bl	800da74 <uxr_prepare_stream_to_write_submessage>
 800ca5e:	b918      	cbnz	r0, 800ca68 <uxr_buffer_cancel_data+0x3c>
 800ca60:	4604      	mov	r4, r0
 800ca62:	4620      	mov	r0, r4
 800ca64:	b014      	add	sp, #80	@ 0x50
 800ca66:	bd10      	pop	{r4, pc}
 800ca68:	9905      	ldr	r1, [sp, #20]
 800ca6a:	aa06      	add	r2, sp, #24
 800ca6c:	4620      	mov	r0, r4
 800ca6e:	f001 f937 	bl	800dce0 <uxr_init_base_object_request>
 800ca72:	a906      	add	r1, sp, #24
 800ca74:	4604      	mov	r4, r0
 800ca76:	a80c      	add	r0, sp, #48	@ 0x30
 800ca78:	f002 fe64 	bl	800f744 <uxr_serialize_READ_DATA_Payload>
 800ca7c:	4620      	mov	r0, r4
 800ca7e:	b014      	add	sp, #80	@ 0x50
 800ca80:	bd10      	pop	{r4, pc}
 800ca82:	bf00      	nop

0800ca84 <read_submessage_format>:
 800ca84:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800ca88:	b095      	sub	sp, #84	@ 0x54
 800ca8a:	f8bd 6078 	ldrh.w	r6, [sp, #120]	@ 0x78
 800ca8e:	b113      	cbz	r3, 800ca96 <read_submessage_format+0x12>
 800ca90:	b015      	add	sp, #84	@ 0x54
 800ca92:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800ca96:	460c      	mov	r4, r1
 800ca98:	4615      	mov	r5, r2
 800ca9a:	e9d1 2101 	ldrd	r2, r1, [r1, #4]
 800ca9e:	4607      	mov	r7, r0
 800caa0:	981c      	ldr	r0, [sp, #112]	@ 0x70
 800caa2:	9004      	str	r0, [sp, #16]
 800caa4:	981d      	ldr	r0, [sp, #116]	@ 0x74
 800caa6:	9005      	str	r0, [sp, #20]
 800caa8:	1a52      	subs	r2, r2, r1
 800caaa:	a80c      	add	r0, sp, #48	@ 0x30
 800caac:	4699      	mov	r9, r3
 800caae:	f89d 8076 	ldrb.w	r8, [sp, #118]	@ 0x76
 800cab2:	f7ff fcc3 	bl	800c43c <ucdr_init_buffer>
 800cab6:	e9d4 1206 	ldrd	r1, r2, [r4, #24]
 800caba:	a80c      	add	r0, sp, #48	@ 0x30
 800cabc:	f7ff fc92 	bl	800c3e4 <ucdr_set_on_full_buffer_callback>
 800cac0:	69e2      	ldr	r2, [r4, #28]
 800cac2:	b19a      	cbz	r2, 800caec <read_submessage_format+0x68>
 800cac4:	f1b8 0f07 	cmp.w	r8, #7
 800cac8:	f882 9014 	strb.w	r9, [r2, #20]
 800cacc:	d040      	beq.n	800cb50 <read_submessage_format+0xcc>
 800cace:	f1b8 0f08 	cmp.w	r8, #8
 800cad2:	d02e      	beq.n	800cb32 <read_submessage_format+0xae>
 800cad4:	f1b8 0f06 	cmp.w	r8, #6
 800cad8:	d011      	beq.n	800cafe <read_submessage_format+0x7a>
 800cada:	2301      	movs	r3, #1
 800cadc:	7513      	strb	r3, [r2, #20]
 800cade:	4629      	mov	r1, r5
 800cae0:	4620      	mov	r0, r4
 800cae2:	f7ff fcfb 	bl	800c4dc <ucdr_advance_buffer>
 800cae6:	b015      	add	sp, #84	@ 0x54
 800cae8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800caec:	f1b8 0f07 	cmp.w	r8, #7
 800caf0:	d02e      	beq.n	800cb50 <read_submessage_format+0xcc>
 800caf2:	f1b8 0f08 	cmp.w	r8, #8
 800caf6:	d01c      	beq.n	800cb32 <read_submessage_format+0xae>
 800caf8:	f1b8 0f06 	cmp.w	r8, #6
 800cafc:	d1ef      	bne.n	800cade <read_submessage_format+0x5a>
 800cafe:	f8d7 8088 	ldr.w	r8, [r7, #136]	@ 0x88
 800cb02:	f1b8 0f00 	cmp.w	r8, #0
 800cb06:	d011      	beq.n	800cb2c <read_submessage_format+0xa8>
 800cb08:	ab0c      	add	r3, sp, #48	@ 0x30
 800cb0a:	e9cd 3500 	strd	r3, r5, [sp]
 800cb0e:	2306      	movs	r3, #6
 800cb10:	f88d 3016 	strb.w	r3, [sp, #22]
 800cb14:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800cb18:	9302      	str	r3, [sp, #8]
 800cb1a:	4632      	mov	r2, r6
 800cb1c:	e9dd 3104 	ldrd	r3, r1, [sp, #16]
 800cb20:	4638      	mov	r0, r7
 800cb22:	47c0      	blx	r8
 800cb24:	2301      	movs	r3, #1
 800cb26:	69e2      	ldr	r2, [r4, #28]
 800cb28:	f887 30b4 	strb.w	r3, [r7, #180]	@ 0xb4
 800cb2c:	2a00      	cmp	r2, #0
 800cb2e:	d1d4      	bne.n	800cada <read_submessage_format+0x56>
 800cb30:	e7d5      	b.n	800cade <read_submessage_format+0x5a>
 800cb32:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800cb36:	2b00      	cmp	r3, #0
 800cb38:	d0f8      	beq.n	800cb2c <read_submessage_format+0xa8>
 800cb3a:	a906      	add	r1, sp, #24
 800cb3c:	a80c      	add	r0, sp, #48	@ 0x30
 800cb3e:	f8dd 8040 	ldr.w	r8, [sp, #64]	@ 0x40
 800cb42:	f002 fec5 	bl	800f8d0 <uxr_deserialize_SampleIdentity>
 800cb46:	b9a0      	cbnz	r0, 800cb72 <read_submessage_format+0xee>
 800cb48:	69e2      	ldr	r2, [r4, #28]
 800cb4a:	2a00      	cmp	r2, #0
 800cb4c:	d1c5      	bne.n	800cada <read_submessage_format+0x56>
 800cb4e:	e7c6      	b.n	800cade <read_submessage_format+0x5a>
 800cb50:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800cb54:	b13b      	cbz	r3, 800cb66 <read_submessage_format+0xe2>
 800cb56:	a906      	add	r1, sp, #24
 800cb58:	a80c      	add	r0, sp, #48	@ 0x30
 800cb5a:	f8dd 8040 	ldr.w	r8, [sp, #64]	@ 0x40
 800cb5e:	f002 fb8b 	bl	800f278 <uxr_deserialize_BaseObjectRequest>
 800cb62:	bb60      	cbnz	r0, 800cbbe <read_submessage_format+0x13a>
 800cb64:	69e2      	ldr	r2, [r4, #28]
 800cb66:	68a3      	ldr	r3, [r4, #8]
 800cb68:	442b      	add	r3, r5
 800cb6a:	60a3      	str	r3, [r4, #8]
 800cb6c:	2a00      	cmp	r2, #0
 800cb6e:	d1b4      	bne.n	800cada <read_submessage_format+0x56>
 800cb70:	e7b5      	b.n	800cade <read_submessage_format+0x5a>
 800cb72:	e9dd 210d 	ldrd	r2, r1, [sp, #52]	@ 0x34
 800cb76:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800cb78:	1a52      	subs	r2, r2, r1
 800cb7a:	eba8 0803 	sub.w	r8, r8, r3
 800cb7e:	a80c      	add	r0, sp, #48	@ 0x30
 800cb80:	f7ff fc5c 	bl	800c43c <ucdr_init_buffer>
 800cb84:	44a8      	add	r8, r5
 800cb86:	e9d4 1206 	ldrd	r1, r2, [r4, #24]
 800cb8a:	a80c      	add	r0, sp, #48	@ 0x30
 800cb8c:	f7ff fc2a 	bl	800c3e4 <ucdr_set_on_full_buffer_callback>
 800cb90:	fa1f f888 	uxth.w	r8, r8
 800cb94:	ab0c      	add	r3, sp, #48	@ 0x30
 800cb96:	9300      	str	r3, [sp, #0]
 800cb98:	f8cd 8004 	str.w	r8, [sp, #4]
 800cb9c:	2108      	movs	r1, #8
 800cb9e:	f88d 1016 	strb.w	r1, [sp, #22]
 800cba2:	f8d7 10a8 	ldr.w	r1, [r7, #168]	@ 0xa8
 800cba6:	9102      	str	r1, [sp, #8]
 800cba8:	ab06      	add	r3, sp, #24
 800cbaa:	4632      	mov	r2, r6
 800cbac:	9905      	ldr	r1, [sp, #20]
 800cbae:	f8d7 60a4 	ldr.w	r6, [r7, #164]	@ 0xa4
 800cbb2:	4638      	mov	r0, r7
 800cbb4:	47b0      	blx	r6
 800cbb6:	2301      	movs	r3, #1
 800cbb8:	f887 30b4 	strb.w	r3, [r7, #180]	@ 0xb4
 800cbbc:	e7c4      	b.n	800cb48 <read_submessage_format+0xc4>
 800cbbe:	e9dd 210d 	ldrd	r2, r1, [sp, #52]	@ 0x34
 800cbc2:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800cbc4:	1a52      	subs	r2, r2, r1
 800cbc6:	a80c      	add	r0, sp, #48	@ 0x30
 800cbc8:	eba8 0803 	sub.w	r8, r8, r3
 800cbcc:	f7ff fc36 	bl	800c43c <ucdr_init_buffer>
 800cbd0:	e9d4 1206 	ldrd	r1, r2, [r4, #24]
 800cbd4:	a80c      	add	r0, sp, #48	@ 0x30
 800cbd6:	f7ff fc05 	bl	800c3e4 <ucdr_set_on_full_buffer_callback>
 800cbda:	ab0c      	add	r3, sp, #48	@ 0x30
 800cbdc:	9300      	str	r3, [sp, #0]
 800cbde:	f89d 1018 	ldrb.w	r1, [sp, #24]
 800cbe2:	f89d 3019 	ldrb.w	r3, [sp, #25]
 800cbe6:	44a8      	add	r8, r5
 800cbe8:	fa1f f888 	uxth.w	r8, r8
 800cbec:	f8cd 8004 	str.w	r8, [sp, #4]
 800cbf0:	eb03 2301 	add.w	r3, r3, r1, lsl #8
 800cbf4:	2107      	movs	r1, #7
 800cbf6:	f88d 1016 	strb.w	r1, [sp, #22]
 800cbfa:	f8d7 10b0 	ldr.w	r1, [r7, #176]	@ 0xb0
 800cbfe:	9102      	str	r1, [sp, #8]
 800cc00:	4632      	mov	r2, r6
 800cc02:	b29b      	uxth	r3, r3
 800cc04:	f8d7 60ac 	ldr.w	r6, [r7, #172]	@ 0xac
 800cc08:	9905      	ldr	r1, [sp, #20]
 800cc0a:	4638      	mov	r0, r7
 800cc0c:	47b0      	blx	r6
 800cc0e:	2301      	movs	r3, #1
 800cc10:	f887 30b4 	strb.w	r3, [r7, #180]	@ 0xb4
 800cc14:	e7a6      	b.n	800cb64 <read_submessage_format+0xe0>
 800cc16:	bf00      	nop

0800cc18 <on_get_fragmentation_info>:
 800cc18:	b500      	push	{lr}
 800cc1a:	b08b      	sub	sp, #44	@ 0x2c
 800cc1c:	4601      	mov	r1, r0
 800cc1e:	2204      	movs	r2, #4
 800cc20:	a802      	add	r0, sp, #8
 800cc22:	f7ff fc0b 	bl	800c43c <ucdr_init_buffer>
 800cc26:	f10d 0305 	add.w	r3, sp, #5
 800cc2a:	f10d 0206 	add.w	r2, sp, #6
 800cc2e:	a901      	add	r1, sp, #4
 800cc30:	a802      	add	r0, sp, #8
 800cc32:	f001 fe69 	bl	800e908 <uxr_read_submessage_header>
 800cc36:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800cc3a:	2b0d      	cmp	r3, #13
 800cc3c:	d003      	beq.n	800cc46 <on_get_fragmentation_info+0x2e>
 800cc3e:	2000      	movs	r0, #0
 800cc40:	b00b      	add	sp, #44	@ 0x2c
 800cc42:	f85d fb04 	ldr.w	pc, [sp], #4
 800cc46:	f89d 3005 	ldrb.w	r3, [sp, #5]
 800cc4a:	f013 0f02 	tst.w	r3, #2
 800cc4e:	bf14      	ite	ne
 800cc50:	2002      	movne	r0, #2
 800cc52:	2001      	moveq	r0, #1
 800cc54:	b00b      	add	sp, #44	@ 0x2c
 800cc56:	f85d fb04 	ldr.w	pc, [sp], #4
 800cc5a:	bf00      	nop

0800cc5c <read_submessage_get_info>:
 800cc5c:	b570      	push	{r4, r5, r6, lr}
 800cc5e:	2500      	movs	r5, #0
 800cc60:	f5ad 7d34 	sub.w	sp, sp, #720	@ 0x2d0
 800cc64:	4604      	mov	r4, r0
 800cc66:	f44f 7224 	mov.w	r2, #656	@ 0x290
 800cc6a:	460e      	mov	r6, r1
 800cc6c:	a810      	add	r0, sp, #64	@ 0x40
 800cc6e:	4629      	mov	r1, r5
 800cc70:	e9cd 5503 	strd	r5, r5, [sp, #12]
 800cc74:	f008 fca4 	bl	80155c0 <memset>
 800cc78:	a903      	add	r1, sp, #12
 800cc7a:	4630      	mov	r0, r6
 800cc7c:	f002 fca4 	bl	800f5c8 <uxr_deserialize_GET_INFO_Payload>
 800cc80:	f8bd 300c 	ldrh.w	r3, [sp, #12]
 800cc84:	f8ad 3040 	strh.w	r3, [sp, #64]	@ 0x40
 800cc88:	4620      	mov	r0, r4
 800cc8a:	f001 f821 	bl	800dcd0 <uxr_session_header_offset>
 800cc8e:	462b      	mov	r3, r5
 800cc90:	9000      	str	r0, [sp, #0]
 800cc92:	220c      	movs	r2, #12
 800cc94:	a905      	add	r1, sp, #20
 800cc96:	a808      	add	r0, sp, #32
 800cc98:	f7ff fbbe 	bl	800c418 <ucdr_init_buffer_origin_offset>
 800cc9c:	a910      	add	r1, sp, #64	@ 0x40
 800cc9e:	a808      	add	r0, sp, #32
 800cca0:	f002 fd04 	bl	800f6ac <uxr_serialize_INFO_Payload>
 800cca4:	9b08      	ldr	r3, [sp, #32]
 800cca6:	462a      	mov	r2, r5
 800cca8:	4629      	mov	r1, r5
 800ccaa:	4620      	mov	r0, r4
 800ccac:	f000 ffba 	bl	800dc24 <uxr_stamp_session_header>
 800ccb0:	a808      	add	r0, sp, #32
 800ccb2:	f7ff fbef 	bl	800c494 <ucdr_buffer_length>
 800ccb6:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 800ccb8:	4602      	mov	r2, r0
 800ccba:	a905      	add	r1, sp, #20
 800ccbc:	e9d3 0400 	ldrd	r0, r4, [r3]
 800ccc0:	47a0      	blx	r4
 800ccc2:	f50d 7d34 	add.w	sp, sp, #720	@ 0x2d0
 800ccc6:	bd70      	pop	{r4, r5, r6, pc}

0800ccc8 <write_submessage_acknack.isra.0>:
 800ccc8:	b570      	push	{r4, r5, r6, lr}
 800ccca:	b092      	sub	sp, #72	@ 0x48
 800cccc:	4605      	mov	r5, r0
 800ccce:	460e      	mov	r6, r1
 800ccd0:	4614      	mov	r4, r2
 800ccd2:	f000 fffd 	bl	800dcd0 <uxr_session_header_offset>
 800ccd6:	a905      	add	r1, sp, #20
 800ccd8:	9000      	str	r0, [sp, #0]
 800ccda:	2300      	movs	r3, #0
 800ccdc:	a80a      	add	r0, sp, #40	@ 0x28
 800ccde:	2211      	movs	r2, #17
 800cce0:	f7ff fb9a 	bl	800c418 <ucdr_init_buffer_origin_offset>
 800cce4:	2218      	movs	r2, #24
 800cce6:	fb02 5404 	mla	r4, r2, r4, r5
 800ccea:	2300      	movs	r3, #0
 800ccec:	2205      	movs	r2, #5
 800ccee:	3450      	adds	r4, #80	@ 0x50
 800ccf0:	210a      	movs	r1, #10
 800ccf2:	a80a      	add	r0, sp, #40	@ 0x28
 800ccf4:	f001 fdee 	bl	800e8d4 <uxr_buffer_submessage_header>
 800ccf8:	a903      	add	r1, sp, #12
 800ccfa:	4620      	mov	r0, r4
 800ccfc:	f007 f870 	bl	8013de0 <uxr_compute_acknack>
 800cd00:	ba40      	rev16	r0, r0
 800cd02:	f8ad 000e 	strh.w	r0, [sp, #14]
 800cd06:	a903      	add	r1, sp, #12
 800cd08:	a80a      	add	r0, sp, #40	@ 0x28
 800cd0a:	f88d 6010 	strb.w	r6, [sp, #16]
 800cd0e:	f002 fd3d 	bl	800f78c <uxr_serialize_ACKNACK_Payload>
 800cd12:	2200      	movs	r2, #0
 800cd14:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800cd16:	4611      	mov	r1, r2
 800cd18:	4628      	mov	r0, r5
 800cd1a:	f000 ff83 	bl	800dc24 <uxr_stamp_session_header>
 800cd1e:	a80a      	add	r0, sp, #40	@ 0x28
 800cd20:	f7ff fbb8 	bl	800c494 <ucdr_buffer_length>
 800cd24:	6f2b      	ldr	r3, [r5, #112]	@ 0x70
 800cd26:	4602      	mov	r2, r0
 800cd28:	a905      	add	r1, sp, #20
 800cd2a:	e9d3 0400 	ldrd	r0, r4, [r3]
 800cd2e:	47a0      	blx	r4
 800cd30:	b012      	add	sp, #72	@ 0x48
 800cd32:	bd70      	pop	{r4, r5, r6, pc}
 800cd34:	0000      	movs	r0, r0
	...

0800cd38 <uxr_init_session>:
 800cd38:	b510      	push	{r4, lr}
 800cd3a:	ed9f 7b0d 	vldr	d7, [pc, #52]	@ 800cd70 <uxr_init_session+0x38>
 800cd3e:	2300      	movs	r3, #0
 800cd40:	e9c0 131c 	strd	r1, r3, [r0, #112]	@ 0x70
 800cd44:	4604      	mov	r4, r0
 800cd46:	e9c0 331e 	strd	r3, r3, [r0, #120]	@ 0x78
 800cd4a:	e9c0 3320 	strd	r3, r3, [r0, #128]	@ 0x80
 800cd4e:	e9c0 3322 	strd	r3, r3, [r0, #136]	@ 0x88
 800cd52:	e9c0 3324 	strd	r3, r3, [r0, #144]	@ 0x90
 800cd56:	ed80 7b26 	vstr	d7, [r0, #152]	@ 0x98
 800cd5a:	f880 30a0 	strb.w	r3, [r0, #160]	@ 0xa0
 800cd5e:	2181      	movs	r1, #129	@ 0x81
 800cd60:	f000 fecc 	bl	800dafc <uxr_init_session_info>
 800cd64:	f104 0008 	add.w	r0, r4, #8
 800cd68:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800cd6c:	f001 bcce 	b.w	800e70c <uxr_init_stream_storage>
	...

0800cd78 <uxr_set_status_callback>:
 800cd78:	e9c0 1220 	strd	r1, r2, [r0, #128]	@ 0x80
 800cd7c:	4770      	bx	lr
 800cd7e:	bf00      	nop

0800cd80 <uxr_set_topic_callback>:
 800cd80:	e9c0 1222 	strd	r1, r2, [r0, #136]	@ 0x88
 800cd84:	4770      	bx	lr
 800cd86:	bf00      	nop

0800cd88 <uxr_set_request_callback>:
 800cd88:	e9c0 1229 	strd	r1, r2, [r0, #164]	@ 0xa4
 800cd8c:	4770      	bx	lr
 800cd8e:	bf00      	nop

0800cd90 <uxr_set_reply_callback>:
 800cd90:	e9c0 122b 	strd	r1, r2, [r0, #172]	@ 0xac
 800cd94:	4770      	bx	lr
 800cd96:	bf00      	nop

0800cd98 <uxr_create_output_best_effort_stream>:
 800cd98:	b510      	push	{r4, lr}
 800cd9a:	b084      	sub	sp, #16
 800cd9c:	e9cd 2100 	strd	r2, r1, [sp]
 800cda0:	4604      	mov	r4, r0
 800cda2:	f000 ff95 	bl	800dcd0 <uxr_session_header_offset>
 800cda6:	e9dd 2100 	ldrd	r2, r1, [sp]
 800cdaa:	4603      	mov	r3, r0
 800cdac:	f104 0008 	add.w	r0, r4, #8
 800cdb0:	b004      	add	sp, #16
 800cdb2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800cdb6:	f001 bcf3 	b.w	800e7a0 <uxr_add_output_best_effort_buffer>
 800cdba:	bf00      	nop

0800cdbc <uxr_create_output_reliable_stream>:
 800cdbc:	b510      	push	{r4, lr}
 800cdbe:	b088      	sub	sp, #32
 800cdc0:	e9cd 2104 	strd	r2, r1, [sp, #16]
 800cdc4:	4604      	mov	r4, r0
 800cdc6:	9303      	str	r3, [sp, #12]
 800cdc8:	f000 ff82 	bl	800dcd0 <uxr_session_header_offset>
 800cdcc:	e9dd 3203 	ldrd	r3, r2, [sp, #12]
 800cdd0:	9000      	str	r0, [sp, #0]
 800cdd2:	9905      	ldr	r1, [sp, #20]
 800cdd4:	f104 0008 	add.w	r0, r4, #8
 800cdd8:	f001 fcf6 	bl	800e7c8 <uxr_add_output_reliable_buffer>
 800cddc:	2200      	movs	r2, #0
 800cdde:	b2c3      	uxtb	r3, r0
 800cde0:	f363 0207 	bfi	r2, r3, #0, #8
 800cde4:	f3c0 2307 	ubfx	r3, r0, #8, #8
 800cde8:	f363 220f 	bfi	r2, r3, #8, #8
 800cdec:	f3c0 4307 	ubfx	r3, r0, #16, #8
 800cdf0:	f363 4217 	bfi	r2, r3, #16, #8
 800cdf4:	0e03      	lsrs	r3, r0, #24
 800cdf6:	f363 621f 	bfi	r2, r3, #24, #8
 800cdfa:	4610      	mov	r0, r2
 800cdfc:	b008      	add	sp, #32
 800cdfe:	bd10      	pop	{r4, pc}

0800ce00 <uxr_create_input_best_effort_stream>:
 800ce00:	b082      	sub	sp, #8
 800ce02:	3008      	adds	r0, #8
 800ce04:	b002      	add	sp, #8
 800ce06:	f001 bcf9 	b.w	800e7fc <uxr_add_input_best_effort_buffer>
 800ce0a:	bf00      	nop

0800ce0c <uxr_create_input_reliable_stream>:
 800ce0c:	b510      	push	{r4, lr}
 800ce0e:	b084      	sub	sp, #16
 800ce10:	4c0b      	ldr	r4, [pc, #44]	@ (800ce40 <uxr_create_input_reliable_stream+0x34>)
 800ce12:	9400      	str	r4, [sp, #0]
 800ce14:	3008      	adds	r0, #8
 800ce16:	f001 fd07 	bl	800e828 <uxr_add_input_reliable_buffer>
 800ce1a:	2200      	movs	r2, #0
 800ce1c:	b2c3      	uxtb	r3, r0
 800ce1e:	f363 0207 	bfi	r2, r3, #0, #8
 800ce22:	f3c0 2307 	ubfx	r3, r0, #8, #8
 800ce26:	f363 220f 	bfi	r2, r3, #8, #8
 800ce2a:	f3c0 4307 	ubfx	r3, r0, #16, #8
 800ce2e:	f363 4217 	bfi	r2, r3, #16, #8
 800ce32:	0e03      	lsrs	r3, r0, #24
 800ce34:	f363 621f 	bfi	r2, r3, #24, #8
 800ce38:	4610      	mov	r0, r2
 800ce3a:	b004      	add	sp, #16
 800ce3c:	bd10      	pop	{r4, pc}
 800ce3e:	bf00      	nop
 800ce40:	0800cc19 	.word	0x0800cc19

0800ce44 <uxr_epoch_nanos>:
 800ce44:	b510      	push	{r4, lr}
 800ce46:	4604      	mov	r4, r0
 800ce48:	f001 fda4 	bl	800e994 <uxr_nanos>
 800ce4c:	e9d4 3226 	ldrd	r3, r2, [r4, #152]	@ 0x98
 800ce50:	1ac0      	subs	r0, r0, r3
 800ce52:	eb61 0102 	sbc.w	r1, r1, r2
 800ce56:	bd10      	pop	{r4, pc}

0800ce58 <uxr_flash_output_streams>:
 800ce58:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ce5c:	7e03      	ldrb	r3, [r0, #24]
 800ce5e:	b084      	sub	sp, #16
 800ce60:	4604      	mov	r4, r0
 800ce62:	2b00      	cmp	r3, #0
 800ce64:	d035      	beq.n	800ced2 <uxr_flash_output_streams+0x7a>
 800ce66:	f04f 0900 	mov.w	r9, #0
 800ce6a:	4648      	mov	r0, r9
 800ce6c:	f10d 0802 	add.w	r8, sp, #2
 800ce70:	af03      	add	r7, sp, #12
 800ce72:	ae02      	add	r6, sp, #8
 800ce74:	e006      	b.n	800ce84 <uxr_flash_output_streams+0x2c>
 800ce76:	7e23      	ldrb	r3, [r4, #24]
 800ce78:	f109 0901 	add.w	r9, r9, #1
 800ce7c:	fa5f f089 	uxtb.w	r0, r9
 800ce80:	4283      	cmp	r3, r0
 800ce82:	d926      	bls.n	800ced2 <uxr_flash_output_streams+0x7a>
 800ce84:	2201      	movs	r2, #1
 800ce86:	4611      	mov	r1, r2
 800ce88:	eb04 1500 	add.w	r5, r4, r0, lsl #4
 800ce8c:	f001 fbea 	bl	800e664 <uxr_stream_id>
 800ce90:	3508      	adds	r5, #8
 800ce92:	4684      	mov	ip, r0
 800ce94:	4643      	mov	r3, r8
 800ce96:	463a      	mov	r2, r7
 800ce98:	4631      	mov	r1, r6
 800ce9a:	4628      	mov	r0, r5
 800ce9c:	f8cd c004 	str.w	ip, [sp, #4]
 800cea0:	f007 f824 	bl	8013eec <uxr_prepare_best_effort_buffer_to_send>
 800cea4:	2800      	cmp	r0, #0
 800cea6:	d0e6      	beq.n	800ce76 <uxr_flash_output_streams+0x1e>
 800cea8:	9b02      	ldr	r3, [sp, #8]
 800ceaa:	f8bd 2002 	ldrh.w	r2, [sp, #2]
 800ceae:	f89d 1004 	ldrb.w	r1, [sp, #4]
 800ceb2:	4620      	mov	r0, r4
 800ceb4:	f000 feb6 	bl	800dc24 <uxr_stamp_session_header>
 800ceb8:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 800ceba:	9a03      	ldr	r2, [sp, #12]
 800cebc:	685d      	ldr	r5, [r3, #4]
 800cebe:	6818      	ldr	r0, [r3, #0]
 800cec0:	9902      	ldr	r1, [sp, #8]
 800cec2:	47a8      	blx	r5
 800cec4:	f109 0901 	add.w	r9, r9, #1
 800cec8:	7e23      	ldrb	r3, [r4, #24]
 800ceca:	fa5f f089 	uxtb.w	r0, r9
 800cece:	4283      	cmp	r3, r0
 800ced0:	d8d8      	bhi.n	800ce84 <uxr_flash_output_streams+0x2c>
 800ced2:	f894 3048 	ldrb.w	r3, [r4, #72]	@ 0x48
 800ced6:	b38b      	cbz	r3, 800cf3c <uxr_flash_output_streams+0xe4>
 800ced8:	f04f 0900 	mov.w	r9, #0
 800cedc:	f10d 0802 	add.w	r8, sp, #2
 800cee0:	af03      	add	r7, sp, #12
 800cee2:	ae02      	add	r6, sp, #8
 800cee4:	4648      	mov	r0, r9
 800cee6:	2201      	movs	r2, #1
 800cee8:	2102      	movs	r1, #2
 800ceea:	eb00 0580 	add.w	r5, r0, r0, lsl #2
 800ceee:	f001 fbb9 	bl	800e664 <uxr_stream_id>
 800cef2:	eb04 05c5 	add.w	r5, r4, r5, lsl #3
 800cef6:	3520      	adds	r5, #32
 800cef8:	9001      	str	r0, [sp, #4]
 800cefa:	e00d      	b.n	800cf18 <uxr_flash_output_streams+0xc0>
 800cefc:	f8bd 2002 	ldrh.w	r2, [sp, #2]
 800cf00:	f89d 1004 	ldrb.w	r1, [sp, #4]
 800cf04:	9b02      	ldr	r3, [sp, #8]
 800cf06:	f000 fe8d 	bl	800dc24 <uxr_stamp_session_header>
 800cf0a:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 800cf0c:	9a03      	ldr	r2, [sp, #12]
 800cf0e:	f8d3 a004 	ldr.w	sl, [r3, #4]
 800cf12:	9902      	ldr	r1, [sp, #8]
 800cf14:	6818      	ldr	r0, [r3, #0]
 800cf16:	47d0      	blx	sl
 800cf18:	4643      	mov	r3, r8
 800cf1a:	463a      	mov	r2, r7
 800cf1c:	4631      	mov	r1, r6
 800cf1e:	4628      	mov	r0, r5
 800cf20:	f007 fa02 	bl	8014328 <uxr_prepare_next_reliable_buffer_to_send>
 800cf24:	4603      	mov	r3, r0
 800cf26:	4620      	mov	r0, r4
 800cf28:	2b00      	cmp	r3, #0
 800cf2a:	d1e7      	bne.n	800cefc <uxr_flash_output_streams+0xa4>
 800cf2c:	f894 3048 	ldrb.w	r3, [r4, #72]	@ 0x48
 800cf30:	f109 0901 	add.w	r9, r9, #1
 800cf34:	fa5f f089 	uxtb.w	r0, r9
 800cf38:	4283      	cmp	r3, r0
 800cf3a:	d8d4      	bhi.n	800cee6 <uxr_flash_output_streams+0x8e>
 800cf3c:	b004      	add	sp, #16
 800cf3e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cf42:	bf00      	nop

0800cf44 <read_submessage_info>:
 800cf44:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cf48:	460d      	mov	r5, r1
 800cf4a:	f5ad 7d24 	sub.w	sp, sp, #656	@ 0x290
 800cf4e:	4669      	mov	r1, sp
 800cf50:	4607      	mov	r7, r0
 800cf52:	4628      	mov	r0, r5
 800cf54:	f002 fa46 	bl	800f3e4 <uxr_deserialize_BaseObjectReply>
 800cf58:	a902      	add	r1, sp, #8
 800cf5a:	4604      	mov	r4, r0
 800cf5c:	4628      	mov	r0, r5
 800cf5e:	f89d 8005 	ldrb.w	r8, [sp, #5]
 800cf62:	f7fe faa7 	bl	800b4b4 <ucdr_deserialize_bool>
 800cf66:	f89d 3008 	ldrb.w	r3, [sp, #8]
 800cf6a:	4004      	ands	r4, r0
 800cf6c:	b2e4      	uxtb	r4, r4
 800cf6e:	b95b      	cbnz	r3, 800cf88 <read_submessage_info+0x44>
 800cf70:	a987      	add	r1, sp, #540	@ 0x21c
 800cf72:	4628      	mov	r0, r5
 800cf74:	f7fe fa9e 	bl	800b4b4 <ucdr_deserialize_bool>
 800cf78:	f89d 321c 	ldrb.w	r3, [sp, #540]	@ 0x21c
 800cf7c:	4606      	mov	r6, r0
 800cf7e:	b94b      	cbnz	r3, 800cf94 <read_submessage_info+0x50>
 800cf80:	f50d 7d24 	add.w	sp, sp, #656	@ 0x290
 800cf84:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cf88:	a903      	add	r1, sp, #12
 800cf8a:	4628      	mov	r0, r5
 800cf8c:	f002 f8d2 	bl	800f134 <uxr_deserialize_ObjectVariant>
 800cf90:	4004      	ands	r4, r0
 800cf92:	e7ed      	b.n	800cf70 <read_submessage_info+0x2c>
 800cf94:	a988      	add	r1, sp, #544	@ 0x220
 800cf96:	4628      	mov	r0, r5
 800cf98:	f7fe faba 	bl	800b510 <ucdr_deserialize_uint8_t>
 800cf9c:	4234      	tst	r4, r6
 800cf9e:	d0ef      	beq.n	800cf80 <read_submessage_info+0x3c>
 800cfa0:	2800      	cmp	r0, #0
 800cfa2:	d0ed      	beq.n	800cf80 <read_submessage_info+0x3c>
 800cfa4:	f89d 3220 	ldrb.w	r3, [sp, #544]	@ 0x220
 800cfa8:	2b0d      	cmp	r3, #13
 800cfaa:	d1e9      	bne.n	800cf80 <read_submessage_info+0x3c>
 800cfac:	a98a      	add	r1, sp, #552	@ 0x228
 800cfae:	4628      	mov	r0, r5
 800cfb0:	f7ff f854 	bl	800c05c <ucdr_deserialize_int16_t>
 800cfb4:	b140      	cbz	r0, 800cfc8 <read_submessage_info+0x84>
 800cfb6:	f9bd 3228 	ldrsh.w	r3, [sp, #552]	@ 0x228
 800cfba:	2b00      	cmp	r3, #0
 800cfbc:	dd07      	ble.n	800cfce <read_submessage_info+0x8a>
 800cfbe:	f1b8 0f00 	cmp.w	r8, #0
 800cfc2:	bf14      	ite	ne
 800cfc4:	2001      	movne	r0, #1
 800cfc6:	2002      	moveq	r0, #2
 800cfc8:	f887 00b5 	strb.w	r0, [r7, #181]	@ 0xb5
 800cfcc:	e7d8      	b.n	800cf80 <read_submessage_info+0x3c>
 800cfce:	2000      	movs	r0, #0
 800cfd0:	e7fa      	b.n	800cfc8 <read_submessage_info+0x84>
 800cfd2:	bf00      	nop

0800cfd4 <read_submessage_list>:
 800cfd4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cfd8:	b097      	sub	sp, #92	@ 0x5c
 800cfda:	4ec1      	ldr	r6, [pc, #772]	@ (800d2e0 <read_submessage_list+0x30c>)
 800cfdc:	9209      	str	r2, [sp, #36]	@ 0x24
 800cfde:	4604      	mov	r4, r0
 800cfe0:	460d      	mov	r5, r1
 800cfe2:	f04f 0801 	mov.w	r8, #1
 800cfe6:	f10d 032f 	add.w	r3, sp, #47	@ 0x2f
 800cfea:	aa0c      	add	r2, sp, #48	@ 0x30
 800cfec:	f10d 012e 	add.w	r1, sp, #46	@ 0x2e
 800cff0:	4628      	mov	r0, r5
 800cff2:	f001 fc89 	bl	800e908 <uxr_read_submessage_header>
 800cff6:	2800      	cmp	r0, #0
 800cff8:	f000 813e 	beq.w	800d278 <read_submessage_list+0x2a4>
 800cffc:	f89d 302e 	ldrb.w	r3, [sp, #46]	@ 0x2e
 800d000:	f89d 2026 	ldrb.w	r2, [sp, #38]	@ 0x26
 800d004:	3b02      	subs	r3, #2
 800d006:	2b0d      	cmp	r3, #13
 800d008:	d8ed      	bhi.n	800cfe6 <read_submessage_list+0x12>
 800d00a:	a101      	add	r1, pc, #4	@ (adr r1, 800d010 <read_submessage_list+0x3c>)
 800d00c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800d010:	0800d26f 	.word	0x0800d26f
 800d014:	0800cfe7 	.word	0x0800cfe7
 800d018:	0800d25f 	.word	0x0800d25f
 800d01c:	0800d1fd 	.word	0x0800d1fd
 800d020:	0800d1f3 	.word	0x0800d1f3
 800d024:	0800cfe7 	.word	0x0800cfe7
 800d028:	0800cfe7 	.word	0x0800cfe7
 800d02c:	0800d153 	.word	0x0800d153
 800d030:	0800d0e3 	.word	0x0800d0e3
 800d034:	0800d0a3 	.word	0x0800d0a3
 800d038:	0800cfe7 	.word	0x0800cfe7
 800d03c:	0800cfe7 	.word	0x0800cfe7
 800d040:	0800cfe7 	.word	0x0800cfe7
 800d044:	0800d049 	.word	0x0800d049
 800d048:	a910      	add	r1, sp, #64	@ 0x40
 800d04a:	4628      	mov	r0, r5
 800d04c:	f002 fbee 	bl	800f82c <uxr_deserialize_TIMESTAMP_REPLY_Payload>
 800d050:	f8d4 9090 	ldr.w	r9, [r4, #144]	@ 0x90
 800d054:	f1b9 0f00 	cmp.w	r9, #0
 800d058:	f000 8116 	beq.w	800d288 <read_submessage_list+0x2b4>
 800d05c:	f001 fc9a 	bl	800e994 <uxr_nanos>
 800d060:	9f15      	ldr	r7, [sp, #84]	@ 0x54
 800d062:	4602      	mov	r2, r0
 800d064:	460b      	mov	r3, r1
 800d066:	9814      	ldr	r0, [sp, #80]	@ 0x50
 800d068:	2100      	movs	r1, #0
 800d06a:	468c      	mov	ip, r1
 800d06c:	fbc0 7c06 	smlal	r7, ip, r0, r6
 800d070:	e9cd 7c04 	strd	r7, ip, [sp, #16]
 800d074:	9810      	ldr	r0, [sp, #64]	@ 0x40
 800d076:	9f11      	ldr	r7, [sp, #68]	@ 0x44
 800d078:	468c      	mov	ip, r1
 800d07a:	fbc0 7c06 	smlal	r7, ip, r0, r6
 800d07e:	46e2      	mov	sl, ip
 800d080:	46bc      	mov	ip, r7
 800d082:	e9dd 0712 	ldrd	r0, r7, [sp, #72]	@ 0x48
 800d086:	fbc0 7106 	smlal	r7, r1, r0, r6
 800d08a:	e9cd ca02 	strd	ip, sl, [sp, #8]
 800d08e:	e9cd 7100 	strd	r7, r1, [sp]
 800d092:	f8d4 1094 	ldr.w	r1, [r4, #148]	@ 0x94
 800d096:	9106      	str	r1, [sp, #24]
 800d098:	4620      	mov	r0, r4
 800d09a:	47c8      	blx	r9
 800d09c:	f884 80a0 	strb.w	r8, [r4, #160]	@ 0xa0
 800d0a0:	e7a1      	b.n	800cfe6 <read_submessage_list+0x12>
 800d0a2:	a910      	add	r1, sp, #64	@ 0x40
 800d0a4:	4628      	mov	r0, r5
 800d0a6:	f002 fbaf 	bl	800f808 <uxr_deserialize_HEARTBEAT_Payload>
 800d0aa:	2100      	movs	r1, #0
 800d0ac:	f89d 0044 	ldrb.w	r0, [sp, #68]	@ 0x44
 800d0b0:	f001 fb02 	bl	800e6b8 <uxr_stream_id_from_raw>
 800d0b4:	f3c0 2707 	ubfx	r7, r0, #8, #8
 800d0b8:	900f      	str	r0, [sp, #60]	@ 0x3c
 800d0ba:	4639      	mov	r1, r7
 800d0bc:	f104 0008 	add.w	r0, r4, #8
 800d0c0:	f001 fbe8 	bl	800e894 <uxr_get_input_reliable_stream>
 800d0c4:	2800      	cmp	r0, #0
 800d0c6:	d08e      	beq.n	800cfe6 <read_submessage_list+0x12>
 800d0c8:	f8bd 1040 	ldrh.w	r1, [sp, #64]	@ 0x40
 800d0cc:	f8bd 2042 	ldrh.w	r2, [sp, #66]	@ 0x42
 800d0d0:	f006 fe7a 	bl	8013dc8 <uxr_process_heartbeat>
 800d0d4:	f89d 103c 	ldrb.w	r1, [sp, #60]	@ 0x3c
 800d0d8:	463a      	mov	r2, r7
 800d0da:	4620      	mov	r0, r4
 800d0dc:	f7ff fdf4 	bl	800ccc8 <write_submessage_acknack.isra.0>
 800d0e0:	e781      	b.n	800cfe6 <read_submessage_list+0x12>
 800d0e2:	a910      	add	r1, sp, #64	@ 0x40
 800d0e4:	4628      	mov	r0, r5
 800d0e6:	f002 fb67 	bl	800f7b8 <uxr_deserialize_ACKNACK_Payload>
 800d0ea:	2100      	movs	r1, #0
 800d0ec:	f89d 0044 	ldrb.w	r0, [sp, #68]	@ 0x44
 800d0f0:	f001 fae2 	bl	800e6b8 <uxr_stream_id_from_raw>
 800d0f4:	900d      	str	r0, [sp, #52]	@ 0x34
 800d0f6:	f3c0 2107 	ubfx	r1, r0, #8, #8
 800d0fa:	f104 0008 	add.w	r0, r4, #8
 800d0fe:	f001 fbb5 	bl	800e86c <uxr_get_output_reliable_stream>
 800d102:	4607      	mov	r7, r0
 800d104:	2800      	cmp	r0, #0
 800d106:	f43f af6e 	beq.w	800cfe6 <read_submessage_list+0x12>
 800d10a:	f89d 3042 	ldrb.w	r3, [sp, #66]	@ 0x42
 800d10e:	f89d 1043 	ldrb.w	r1, [sp, #67]	@ 0x43
 800d112:	f8bd 2040 	ldrh.w	r2, [sp, #64]	@ 0x40
 800d116:	eb01 2103 	add.w	r1, r1, r3, lsl #8
 800d11a:	b289      	uxth	r1, r1
 800d11c:	f007 f9ae 	bl	801447c <uxr_process_acknack>
 800d120:	4638      	mov	r0, r7
 800d122:	f007 f96b 	bl	80143fc <uxr_begin_output_nack_buffer_it>
 800d126:	f10d 0a38 	add.w	sl, sp, #56	@ 0x38
 800d12a:	f8ad 0032 	strh.w	r0, [sp, #50]	@ 0x32
 800d12e:	e006      	b.n	800d13e <read_submessage_list+0x16a>
 800d130:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 800d132:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800d134:	f8d3 9004 	ldr.w	r9, [r3, #4]
 800d138:	990e      	ldr	r1, [sp, #56]	@ 0x38
 800d13a:	6818      	ldr	r0, [r3, #0]
 800d13c:	47c8      	blx	r9
 800d13e:	f10d 0332 	add.w	r3, sp, #50	@ 0x32
 800d142:	aa0f      	add	r2, sp, #60	@ 0x3c
 800d144:	4651      	mov	r1, sl
 800d146:	4638      	mov	r0, r7
 800d148:	f007 f95a 	bl	8014400 <uxr_next_reliable_nack_buffer_to_send>
 800d14c:	2800      	cmp	r0, #0
 800d14e:	d1ef      	bne.n	800d130 <read_submessage_list+0x15c>
 800d150:	e749      	b.n	800cfe6 <read_submessage_list+0x12>
 800d152:	f89d 3025 	ldrb.w	r3, [sp, #37]	@ 0x25
 800d156:	f88d 3035 	strb.w	r3, [sp, #53]	@ 0x35
 800d15a:	f10d 0a38 	add.w	sl, sp, #56	@ 0x38
 800d15e:	f89d 3027 	ldrb.w	r3, [sp, #39]	@ 0x27
 800d162:	f88d 3037 	strb.w	r3, [sp, #55]	@ 0x37
 800d166:	4651      	mov	r1, sl
 800d168:	f89d 3024 	ldrb.w	r3, [sp, #36]	@ 0x24
 800d16c:	f8bd 7030 	ldrh.w	r7, [sp, #48]	@ 0x30
 800d170:	f89d 902f 	ldrb.w	r9, [sp, #47]	@ 0x2f
 800d174:	f88d 2036 	strb.w	r2, [sp, #54]	@ 0x36
 800d178:	4628      	mov	r0, r5
 800d17a:	f88d 3034 	strb.w	r3, [sp, #52]	@ 0x34
 800d17e:	f002 f87b 	bl	800f278 <uxr_deserialize_BaseObjectRequest>
 800d182:	4650      	mov	r0, sl
 800d184:	a90f      	add	r1, sp, #60	@ 0x3c
 800d186:	f10d 0232 	add.w	r2, sp, #50	@ 0x32
 800d18a:	f000 fdc7 	bl	800dd1c <uxr_parse_base_object_request>
 800d18e:	f8d4 b080 	ldr.w	fp, [r4, #128]	@ 0x80
 800d192:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800d194:	f8bd a032 	ldrh.w	sl, [sp, #50]	@ 0x32
 800d198:	9110      	str	r1, [sp, #64]	@ 0x40
 800d19a:	3f04      	subs	r7, #4
 800d19c:	f009 090e 	and.w	r9, r9, #14
 800d1a0:	b2bf      	uxth	r7, r7
 800d1a2:	f1bb 0f00 	cmp.w	fp, #0
 800d1a6:	d006      	beq.n	800d1b6 <read_submessage_list+0x1e2>
 800d1a8:	f8d4 3084 	ldr.w	r3, [r4, #132]	@ 0x84
 800d1ac:	9300      	str	r3, [sp, #0]
 800d1ae:	4652      	mov	r2, sl
 800d1b0:	2300      	movs	r3, #0
 800d1b2:	4620      	mov	r0, r4
 800d1b4:	47d8      	blx	fp
 800d1b6:	6fe2      	ldr	r2, [r4, #124]	@ 0x7c
 800d1b8:	b16a      	cbz	r2, 800d1d6 <read_submessage_list+0x202>
 800d1ba:	6f60      	ldr	r0, [r4, #116]	@ 0x74
 800d1bc:	2100      	movs	r1, #0
 800d1be:	3802      	subs	r0, #2
 800d1c0:	e002      	b.n	800d1c8 <read_submessage_list+0x1f4>
 800d1c2:	3101      	adds	r1, #1
 800d1c4:	4291      	cmp	r1, r2
 800d1c6:	d006      	beq.n	800d1d6 <read_submessage_list+0x202>
 800d1c8:	f830 3f02 	ldrh.w	r3, [r0, #2]!
 800d1cc:	4553      	cmp	r3, sl
 800d1ce:	d1f8      	bne.n	800d1c2 <read_submessage_list+0x1ee>
 800d1d0:	6fa3      	ldr	r3, [r4, #120]	@ 0x78
 800d1d2:	2200      	movs	r2, #0
 800d1d4:	545a      	strb	r2, [r3, r1]
 800d1d6:	f8bd 1032 	ldrh.w	r1, [sp, #50]	@ 0x32
 800d1da:	9102      	str	r1, [sp, #8]
 800d1dc:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800d1de:	9101      	str	r1, [sp, #4]
 800d1e0:	990d      	ldr	r1, [sp, #52]	@ 0x34
 800d1e2:	9100      	str	r1, [sp, #0]
 800d1e4:	464b      	mov	r3, r9
 800d1e6:	463a      	mov	r2, r7
 800d1e8:	4629      	mov	r1, r5
 800d1ea:	4620      	mov	r0, r4
 800d1ec:	f7ff fc4a 	bl	800ca84 <read_submessage_format>
 800d1f0:	e6f9      	b.n	800cfe6 <read_submessage_list+0x12>
 800d1f2:	4629      	mov	r1, r5
 800d1f4:	4620      	mov	r0, r4
 800d1f6:	f7ff fea5 	bl	800cf44 <read_submessage_info>
 800d1fa:	e6f4      	b.n	800cfe6 <read_submessage_list+0x12>
 800d1fc:	2a00      	cmp	r2, #0
 800d1fe:	d03e      	beq.n	800d27e <read_submessage_list+0x2aa>
 800d200:	a910      	add	r1, sp, #64	@ 0x40
 800d202:	4628      	mov	r0, r5
 800d204:	f002 fa34 	bl	800f670 <uxr_deserialize_STATUS_Payload>
 800d208:	a90e      	add	r1, sp, #56	@ 0x38
 800d20a:	aa0d      	add	r2, sp, #52	@ 0x34
 800d20c:	a810      	add	r0, sp, #64	@ 0x40
 800d20e:	f000 fd85 	bl	800dd1c <uxr_parse_base_object_request>
 800d212:	f8d4 a080 	ldr.w	sl, [r4, #128]	@ 0x80
 800d216:	990e      	ldr	r1, [sp, #56]	@ 0x38
 800d218:	f89d 9044 	ldrb.w	r9, [sp, #68]	@ 0x44
 800d21c:	f8bd 7034 	ldrh.w	r7, [sp, #52]	@ 0x34
 800d220:	910f      	str	r1, [sp, #60]	@ 0x3c
 800d222:	f1ba 0f00 	cmp.w	sl, #0
 800d226:	d006      	beq.n	800d236 <read_submessage_list+0x262>
 800d228:	f8d4 3084 	ldr.w	r3, [r4, #132]	@ 0x84
 800d22c:	9300      	str	r3, [sp, #0]
 800d22e:	463a      	mov	r2, r7
 800d230:	464b      	mov	r3, r9
 800d232:	4620      	mov	r0, r4
 800d234:	47d0      	blx	sl
 800d236:	6fe2      	ldr	r2, [r4, #124]	@ 0x7c
 800d238:	2a00      	cmp	r2, #0
 800d23a:	f43f aed4 	beq.w	800cfe6 <read_submessage_list+0x12>
 800d23e:	6f60      	ldr	r0, [r4, #116]	@ 0x74
 800d240:	2100      	movs	r1, #0
 800d242:	3802      	subs	r0, #2
 800d244:	e003      	b.n	800d24e <read_submessage_list+0x27a>
 800d246:	3101      	adds	r1, #1
 800d248:	4291      	cmp	r1, r2
 800d24a:	f43f aecc 	beq.w	800cfe6 <read_submessage_list+0x12>
 800d24e:	f830 3f02 	ldrh.w	r3, [r0, #2]!
 800d252:	42bb      	cmp	r3, r7
 800d254:	d1f7      	bne.n	800d246 <read_submessage_list+0x272>
 800d256:	6fa3      	ldr	r3, [r4, #120]	@ 0x78
 800d258:	f803 9001 	strb.w	r9, [r3, r1]
 800d25c:	e6c3      	b.n	800cfe6 <read_submessage_list+0x12>
 800d25e:	2a00      	cmp	r2, #0
 800d260:	f47f aec1 	bne.w	800cfe6 <read_submessage_list+0x12>
 800d264:	4629      	mov	r1, r5
 800d266:	4620      	mov	r0, r4
 800d268:	f000 fc9e 	bl	800dba8 <uxr_read_create_session_status>
 800d26c:	e6bb      	b.n	800cfe6 <read_submessage_list+0x12>
 800d26e:	4629      	mov	r1, r5
 800d270:	4620      	mov	r0, r4
 800d272:	f7ff fcf3 	bl	800cc5c <read_submessage_get_info>
 800d276:	e6b6      	b.n	800cfe6 <read_submessage_list+0x12>
 800d278:	b017      	add	sp, #92	@ 0x5c
 800d27a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d27e:	4629      	mov	r1, r5
 800d280:	4620      	mov	r0, r4
 800d282:	f000 fc9d 	bl	800dbc0 <uxr_read_delete_session_status>
 800d286:	e6ae      	b.n	800cfe6 <read_submessage_list+0x12>
 800d288:	f001 fb84 	bl	800e994 <uxr_nanos>
 800d28c:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800d28e:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 800d290:	464f      	mov	r7, r9
 800d292:	fbc3 2706 	smlal	r2, r7, r3, r6
 800d296:	1812      	adds	r2, r2, r0
 800d298:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800d29a:	9813      	ldr	r0, [sp, #76]	@ 0x4c
 800d29c:	eb47 0101 	adc.w	r1, r7, r1
 800d2a0:	464f      	mov	r7, r9
 800d2a2:	fbc3 0706 	smlal	r0, r7, r3, r6
 800d2a6:	463b      	mov	r3, r7
 800d2a8:	4684      	mov	ip, r0
 800d2aa:	e9dd 7010 	ldrd	r7, r0, [sp, #64]	@ 0x40
 800d2ae:	fbc7 0906 	smlal	r0, r9, r7, r6
 800d2b2:	eb1c 0c00 	adds.w	ip, ip, r0
 800d2b6:	464f      	mov	r7, r9
 800d2b8:	eb43 0307 	adc.w	r3, r3, r7
 800d2bc:	ebb2 0c0c 	subs.w	ip, r2, ip
 800d2c0:	eb61 0303 	sbc.w	r3, r1, r3
 800d2c4:	0fda      	lsrs	r2, r3, #31
 800d2c6:	eb12 020c 	adds.w	r2, r2, ip
 800d2ca:	f143 0300 	adc.w	r3, r3, #0
 800d2ce:	0852      	lsrs	r2, r2, #1
 800d2d0:	ea42 72c3 	orr.w	r2, r2, r3, lsl #31
 800d2d4:	105b      	asrs	r3, r3, #1
 800d2d6:	f8c4 2098 	str.w	r2, [r4, #152]	@ 0x98
 800d2da:	f8c4 309c 	str.w	r3, [r4, #156]	@ 0x9c
 800d2de:	e6dd      	b.n	800d09c <read_submessage_list+0xc8>
 800d2e0:	3b9aca00 	.word	0x3b9aca00

0800d2e4 <listen_message_reliably>:
 800d2e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d2e8:	1e0b      	subs	r3, r1, #0
 800d2ea:	b09d      	sub	sp, #116	@ 0x74
 800d2ec:	bfb8      	it	lt
 800d2ee:	f06f 4300 	mvnlt.w	r3, #2147483648	@ 0x80000000
 800d2f2:	4680      	mov	r8, r0
 800d2f4:	9305      	str	r3, [sp, #20]
 800d2f6:	f001 fb33 	bl	800e960 <uxr_millis>
 800d2fa:	f898 2048 	ldrb.w	r2, [r8, #72]	@ 0x48
 800d2fe:	4681      	mov	r9, r0
 800d300:	2a00      	cmp	r2, #0
 800d302:	f000 80a1 	beq.w	800d448 <listen_message_reliably+0x164>
 800d306:	2600      	movs	r6, #0
 800d308:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 800d30c:	f04f 3bff 	mov.w	fp, #4294967295	@ 0xffffffff
 800d310:	9303      	str	r3, [sp, #12]
 800d312:	4630      	mov	r0, r6
 800d314:	460f      	mov	r7, r1
 800d316:	e00f      	b.n	800d338 <listen_message_reliably+0x54>
 800d318:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 800d31c:	9903      	ldr	r1, [sp, #12]
 800d31e:	455a      	cmp	r2, fp
 800d320:	f106 0601 	add.w	r6, r6, #1
 800d324:	eb73 0101 	sbcs.w	r1, r3, r1
 800d328:	b2f0      	uxtb	r0, r6
 800d32a:	da01      	bge.n	800d330 <listen_message_reliably+0x4c>
 800d32c:	4693      	mov	fp, r2
 800d32e:	9303      	str	r3, [sp, #12]
 800d330:	f898 3048 	ldrb.w	r3, [r8, #72]	@ 0x48
 800d334:	4283      	cmp	r3, r0
 800d336:	d960      	bls.n	800d3fa <listen_message_reliably+0x116>
 800d338:	eb00 0480 	add.w	r4, r0, r0, lsl #2
 800d33c:	2102      	movs	r1, #2
 800d33e:	2201      	movs	r2, #1
 800d340:	f001 f990 	bl	800e664 <uxr_stream_id>
 800d344:	00e4      	lsls	r4, r4, #3
 800d346:	f104 0520 	add.w	r5, r4, #32
 800d34a:	4445      	add	r5, r8
 800d34c:	4601      	mov	r1, r0
 800d34e:	463b      	mov	r3, r7
 800d350:	464a      	mov	r2, r9
 800d352:	4628      	mov	r0, r5
 800d354:	9109      	str	r1, [sp, #36]	@ 0x24
 800d356:	f007 f827 	bl	80143a8 <uxr_update_output_stream_heartbeat_timestamp>
 800d35a:	eb08 0304 	add.w	r3, r8, r4
 800d35e:	2800      	cmp	r0, #0
 800d360:	d0da      	beq.n	800d318 <listen_message_reliably+0x34>
 800d362:	f89d 3024 	ldrb.w	r3, [sp, #36]	@ 0x24
 800d366:	f89d 5025 	ldrb.w	r5, [sp, #37]	@ 0x25
 800d36a:	9304      	str	r3, [sp, #16]
 800d36c:	4640      	mov	r0, r8
 800d36e:	f000 fcaf 	bl	800dcd0 <uxr_session_header_offset>
 800d372:	3501      	adds	r5, #1
 800d374:	f10d 0a50 	add.w	sl, sp, #80	@ 0x50
 800d378:	eb05 0585 	add.w	r5, r5, r5, lsl #2
 800d37c:	eb08 05c5 	add.w	r5, r8, r5, lsl #3
 800d380:	2300      	movs	r3, #0
 800d382:	2211      	movs	r2, #17
 800d384:	9000      	str	r0, [sp, #0]
 800d386:	a90c      	add	r1, sp, #48	@ 0x30
 800d388:	4650      	mov	r0, sl
 800d38a:	f7ff f845 	bl	800c418 <ucdr_init_buffer_origin_offset>
 800d38e:	2300      	movs	r3, #0
 800d390:	2205      	movs	r2, #5
 800d392:	210b      	movs	r1, #11
 800d394:	4650      	mov	r0, sl
 800d396:	f001 fa9d 	bl	800e8d4 <uxr_buffer_submessage_header>
 800d39a:	8968      	ldrh	r0, [r5, #10]
 800d39c:	2101      	movs	r1, #1
 800d39e:	f007 f8a5 	bl	80144ec <uxr_seq_num_add>
 800d3a2:	892b      	ldrh	r3, [r5, #8]
 800d3a4:	f8ad 302a 	strh.w	r3, [sp, #42]	@ 0x2a
 800d3a8:	4602      	mov	r2, r0
 800d3aa:	9b04      	ldr	r3, [sp, #16]
 800d3ac:	f8ad 2028 	strh.w	r2, [sp, #40]	@ 0x28
 800d3b0:	a90a      	add	r1, sp, #40	@ 0x28
 800d3b2:	4650      	mov	r0, sl
 800d3b4:	f88d 302c 	strb.w	r3, [sp, #44]	@ 0x2c
 800d3b8:	f002 fa12 	bl	800f7e0 <uxr_serialize_HEARTBEAT_Payload>
 800d3bc:	2200      	movs	r2, #0
 800d3be:	4611      	mov	r1, r2
 800d3c0:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800d3c2:	4640      	mov	r0, r8
 800d3c4:	f000 fc2e 	bl	800dc24 <uxr_stamp_session_header>
 800d3c8:	4650      	mov	r0, sl
 800d3ca:	f7ff f863 	bl	800c494 <ucdr_buffer_length>
 800d3ce:	f8d8 3070 	ldr.w	r3, [r8, #112]	@ 0x70
 800d3d2:	4602      	mov	r2, r0
 800d3d4:	a90c      	add	r1, sp, #48	@ 0x30
 800d3d6:	e9d3 0500 	ldrd	r0, r5, [r3]
 800d3da:	4444      	add	r4, r8
 800d3dc:	47a8      	blx	r5
 800d3de:	e9d4 230e 	ldrd	r2, r3, [r4, #56]	@ 0x38
 800d3e2:	9903      	ldr	r1, [sp, #12]
 800d3e4:	455a      	cmp	r2, fp
 800d3e6:	f106 0601 	add.w	r6, r6, #1
 800d3ea:	eb73 0101 	sbcs.w	r1, r3, r1
 800d3ee:	b2f0      	uxtb	r0, r6
 800d3f0:	db9c      	blt.n	800d32c <listen_message_reliably+0x48>
 800d3f2:	f898 3048 	ldrb.w	r3, [r8, #72]	@ 0x48
 800d3f6:	4283      	cmp	r3, r0
 800d3f8:	d89e      	bhi.n	800d338 <listen_message_reliably+0x54>
 800d3fa:	9a03      	ldr	r2, [sp, #12]
 800d3fc:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 800d400:	429a      	cmp	r2, r3
 800d402:	bf08      	it	eq
 800d404:	f1bb 3fff 	cmpeq.w	fp, #4294967295	@ 0xffffffff
 800d408:	d01e      	beq.n	800d448 <listen_message_reliably+0x164>
 800d40a:	ebab 0309 	sub.w	r3, fp, r9
 800d40e:	9905      	ldr	r1, [sp, #20]
 800d410:	f8d8 2070 	ldr.w	r2, [r8, #112]	@ 0x70
 800d414:	2b00      	cmp	r3, #0
 800d416:	bf08      	it	eq
 800d418:	2301      	moveq	r3, #1
 800d41a:	4299      	cmp	r1, r3
 800d41c:	bfa8      	it	ge
 800d41e:	4619      	movge	r1, r3
 800d420:	6894      	ldr	r4, [r2, #8]
 800d422:	6810      	ldr	r0, [r2, #0]
 800d424:	4689      	mov	r9, r1
 800d426:	460b      	mov	r3, r1
 800d428:	aa08      	add	r2, sp, #32
 800d42a:	a907      	add	r1, sp, #28
 800d42c:	47a0      	blx	r4
 800d42e:	b968      	cbnz	r0, 800d44c <listen_message_reliably+0x168>
 800d430:	9b05      	ldr	r3, [sp, #20]
 800d432:	eba3 0309 	sub.w	r3, r3, r9
 800d436:	2b00      	cmp	r3, #0
 800d438:	9305      	str	r3, [sp, #20]
 800d43a:	f73f af5c 	bgt.w	800d2f6 <listen_message_reliably+0x12>
 800d43e:	4604      	mov	r4, r0
 800d440:	4620      	mov	r0, r4
 800d442:	b01d      	add	sp, #116	@ 0x74
 800d444:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d448:	9b05      	ldr	r3, [sp, #20]
 800d44a:	e7e0      	b.n	800d40e <listen_message_reliably+0x12a>
 800d44c:	e9dd 1207 	ldrd	r1, r2, [sp, #28]
 800d450:	4604      	mov	r4, r0
 800d452:	a80c      	add	r0, sp, #48	@ 0x30
 800d454:	f7fe fff2 	bl	800c43c <ucdr_init_buffer>
 800d458:	2500      	movs	r5, #0
 800d45a:	f10d 031a 	add.w	r3, sp, #26
 800d45e:	aa06      	add	r2, sp, #24
 800d460:	a90c      	add	r1, sp, #48	@ 0x30
 800d462:	4640      	mov	r0, r8
 800d464:	f88d 5018 	strb.w	r5, [sp, #24]
 800d468:	f000 fbf0 	bl	800dc4c <uxr_read_session_header>
 800d46c:	b918      	cbnz	r0, 800d476 <listen_message_reliably+0x192>
 800d46e:	4620      	mov	r0, r4
 800d470:	b01d      	add	sp, #116	@ 0x74
 800d472:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d476:	4629      	mov	r1, r5
 800d478:	f89d 0018 	ldrb.w	r0, [sp, #24]
 800d47c:	f001 f91c 	bl	800e6b8 <uxr_stream_id_from_raw>
 800d480:	f3c0 4507 	ubfx	r5, r0, #16, #8
 800d484:	2d01      	cmp	r5, #1
 800d486:	e9cd 0009 	strd	r0, r0, [sp, #36]	@ 0x24
 800d48a:	f8bd a01a 	ldrh.w	sl, [sp, #26]
 800d48e:	f3c0 2607 	ubfx	r6, r0, #8, #8
 800d492:	d04b      	beq.n	800d52c <listen_message_reliably+0x248>
 800d494:	2d02      	cmp	r5, #2
 800d496:	d00f      	beq.n	800d4b8 <listen_message_reliably+0x1d4>
 800d498:	2d00      	cmp	r5, #0
 800d49a:	d1e8      	bne.n	800d46e <listen_message_reliably+0x18a>
 800d49c:	4629      	mov	r1, r5
 800d49e:	4628      	mov	r0, r5
 800d4a0:	f001 f90a 	bl	800e6b8 <uxr_stream_id_from_raw>
 800d4a4:	a90c      	add	r1, sp, #48	@ 0x30
 800d4a6:	4602      	mov	r2, r0
 800d4a8:	4640      	mov	r0, r8
 800d4aa:	920a      	str	r2, [sp, #40]	@ 0x28
 800d4ac:	f7ff fd92 	bl	800cfd4 <read_submessage_list>
 800d4b0:	4620      	mov	r0, r4
 800d4b2:	b01d      	add	sp, #116	@ 0x74
 800d4b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d4b8:	4631      	mov	r1, r6
 800d4ba:	f108 0008 	add.w	r0, r8, #8
 800d4be:	f89d 9024 	ldrb.w	r9, [sp, #36]	@ 0x24
 800d4c2:	f001 f9e7 	bl	800e894 <uxr_get_input_reliable_stream>
 800d4c6:	4607      	mov	r7, r0
 800d4c8:	b338      	cbz	r0, 800d51a <listen_message_reliably+0x236>
 800d4ca:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800d4cc:	9203      	str	r2, [sp, #12]
 800d4ce:	a80c      	add	r0, sp, #48	@ 0x30
 800d4d0:	f7fe ffe4 	bl	800c49c <ucdr_buffer_remaining>
 800d4d4:	4603      	mov	r3, r0
 800d4d6:	f10d 0019 	add.w	r0, sp, #25
 800d4da:	9000      	str	r0, [sp, #0]
 800d4dc:	9a03      	ldr	r2, [sp, #12]
 800d4de:	4651      	mov	r1, sl
 800d4e0:	4638      	mov	r0, r7
 800d4e2:	f006 fb77 	bl	8013bd4 <uxr_receive_reliable_message>
 800d4e6:	b1c0      	cbz	r0, 800d51a <listen_message_reliably+0x236>
 800d4e8:	f89d 3019 	ldrb.w	r3, [sp, #25]
 800d4ec:	b393      	cbz	r3, 800d554 <listen_message_reliably+0x270>
 800d4ee:	ad14      	add	r5, sp, #80	@ 0x50
 800d4f0:	f04f 0a02 	mov.w	sl, #2
 800d4f4:	e00a      	b.n	800d50c <listen_message_reliably+0x228>
 800d4f6:	f88d 9028 	strb.w	r9, [sp, #40]	@ 0x28
 800d4fa:	f88d 6029 	strb.w	r6, [sp, #41]	@ 0x29
 800d4fe:	f88d a02a 	strb.w	sl, [sp, #42]	@ 0x2a
 800d502:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800d504:	4629      	mov	r1, r5
 800d506:	4640      	mov	r0, r8
 800d508:	f7ff fd64 	bl	800cfd4 <read_submessage_list>
 800d50c:	2204      	movs	r2, #4
 800d50e:	4629      	mov	r1, r5
 800d510:	4638      	mov	r0, r7
 800d512:	f006 fbdf 	bl	8013cd4 <uxr_next_input_reliable_buffer_available>
 800d516:	2800      	cmp	r0, #0
 800d518:	d1ed      	bne.n	800d4f6 <listen_message_reliably+0x212>
 800d51a:	4640      	mov	r0, r8
 800d51c:	4632      	mov	r2, r6
 800d51e:	4649      	mov	r1, r9
 800d520:	f7ff fbd2 	bl	800ccc8 <write_submessage_acknack.isra.0>
 800d524:	4620      	mov	r0, r4
 800d526:	b01d      	add	sp, #116	@ 0x74
 800d528:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d52c:	4631      	mov	r1, r6
 800d52e:	f108 0008 	add.w	r0, r8, #8
 800d532:	f001 f9a5 	bl	800e880 <uxr_get_input_best_effort_stream>
 800d536:	2800      	cmp	r0, #0
 800d538:	d099      	beq.n	800d46e <listen_message_reliably+0x18a>
 800d53a:	4651      	mov	r1, sl
 800d53c:	f006 fab6 	bl	8013aac <uxr_receive_best_effort_message>
 800d540:	2800      	cmp	r0, #0
 800d542:	d094      	beq.n	800d46e <listen_message_reliably+0x18a>
 800d544:	f88d 502a 	strb.w	r5, [sp, #42]	@ 0x2a
 800d548:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800d54a:	a90c      	add	r1, sp, #48	@ 0x30
 800d54c:	4640      	mov	r0, r8
 800d54e:	f7ff fd41 	bl	800cfd4 <read_submessage_list>
 800d552:	e78c      	b.n	800d46e <listen_message_reliably+0x18a>
 800d554:	f88d 502a 	strb.w	r5, [sp, #42]	@ 0x2a
 800d558:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800d55a:	a90c      	add	r1, sp, #48	@ 0x30
 800d55c:	4640      	mov	r0, r8
 800d55e:	f7ff fd39 	bl	800cfd4 <read_submessage_list>
 800d562:	e7c4      	b.n	800d4ee <listen_message_reliably+0x20a>

0800d564 <uxr_run_session_timeout>:
 800d564:	b570      	push	{r4, r5, r6, lr}
 800d566:	4604      	mov	r4, r0
 800d568:	460d      	mov	r5, r1
 800d56a:	f001 f9f9 	bl	800e960 <uxr_millis>
 800d56e:	4606      	mov	r6, r0
 800d570:	4620      	mov	r0, r4
 800d572:	f7ff fc71 	bl	800ce58 <uxr_flash_output_streams>
 800d576:	4629      	mov	r1, r5
 800d578:	4620      	mov	r0, r4
 800d57a:	f7ff feb3 	bl	800d2e4 <listen_message_reliably>
 800d57e:	f001 f9ef 	bl	800e960 <uxr_millis>
 800d582:	1b83      	subs	r3, r0, r6
 800d584:	1ae9      	subs	r1, r5, r3
 800d586:	2900      	cmp	r1, #0
 800d588:	dcf6      	bgt.n	800d578 <uxr_run_session_timeout+0x14>
 800d58a:	f104 0008 	add.w	r0, r4, #8
 800d58e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800d592:	f001 b989 	b.w	800e8a8 <uxr_output_streams_confirmed>
 800d596:	bf00      	nop

0800d598 <uxr_run_session_until_data>:
 800d598:	b570      	push	{r4, r5, r6, lr}
 800d59a:	4604      	mov	r4, r0
 800d59c:	460d      	mov	r5, r1
 800d59e:	f001 f9df 	bl	800e960 <uxr_millis>
 800d5a2:	4606      	mov	r6, r0
 800d5a4:	4620      	mov	r0, r4
 800d5a6:	f7ff fc57 	bl	800ce58 <uxr_flash_output_streams>
 800d5aa:	2300      	movs	r3, #0
 800d5ac:	f884 30b4 	strb.w	r3, [r4, #180]	@ 0xb4
 800d5b0:	4629      	mov	r1, r5
 800d5b2:	e005      	b.n	800d5c0 <uxr_run_session_until_data+0x28>
 800d5b4:	f001 f9d4 	bl	800e960 <uxr_millis>
 800d5b8:	1b83      	subs	r3, r0, r6
 800d5ba:	1ae9      	subs	r1, r5, r3
 800d5bc:	2900      	cmp	r1, #0
 800d5be:	dd07      	ble.n	800d5d0 <uxr_run_session_until_data+0x38>
 800d5c0:	4620      	mov	r0, r4
 800d5c2:	f7ff fe8f 	bl	800d2e4 <listen_message_reliably>
 800d5c6:	f894 00b4 	ldrb.w	r0, [r4, #180]	@ 0xb4
 800d5ca:	2800      	cmp	r0, #0
 800d5cc:	d0f2      	beq.n	800d5b4 <uxr_run_session_until_data+0x1c>
 800d5ce:	bd70      	pop	{r4, r5, r6, pc}
 800d5d0:	f894 00b4 	ldrb.w	r0, [r4, #180]	@ 0xb4
 800d5d4:	bd70      	pop	{r4, r5, r6, pc}
 800d5d6:	bf00      	nop

0800d5d8 <uxr_run_session_until_confirm_delivery>:
 800d5d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d5dc:	4606      	mov	r6, r0
 800d5de:	460d      	mov	r5, r1
 800d5e0:	f001 f9be 	bl	800e960 <uxr_millis>
 800d5e4:	4607      	mov	r7, r0
 800d5e6:	4630      	mov	r0, r6
 800d5e8:	f7ff fc36 	bl	800ce58 <uxr_flash_output_streams>
 800d5ec:	2d00      	cmp	r5, #0
 800d5ee:	f106 0808 	add.w	r8, r6, #8
 800d5f2:	bfa8      	it	ge
 800d5f4:	462c      	movge	r4, r5
 800d5f6:	da07      	bge.n	800d608 <uxr_run_session_until_confirm_delivery+0x30>
 800d5f8:	e00e      	b.n	800d618 <uxr_run_session_until_confirm_delivery+0x40>
 800d5fa:	f7ff fe73 	bl	800d2e4 <listen_message_reliably>
 800d5fe:	f001 f9af 	bl	800e960 <uxr_millis>
 800d602:	1bc3      	subs	r3, r0, r7
 800d604:	1aec      	subs	r4, r5, r3
 800d606:	d407      	bmi.n	800d618 <uxr_run_session_until_confirm_delivery+0x40>
 800d608:	4640      	mov	r0, r8
 800d60a:	f001 f94d 	bl	800e8a8 <uxr_output_streams_confirmed>
 800d60e:	4603      	mov	r3, r0
 800d610:	4621      	mov	r1, r4
 800d612:	4630      	mov	r0, r6
 800d614:	2b00      	cmp	r3, #0
 800d616:	d0f0      	beq.n	800d5fa <uxr_run_session_until_confirm_delivery+0x22>
 800d618:	4640      	mov	r0, r8
 800d61a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800d61e:	f001 b943 	b.w	800e8a8 <uxr_output_streams_confirmed>
 800d622:	bf00      	nop

0800d624 <uxr_run_session_until_all_status>:
 800d624:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d628:	9c08      	ldr	r4, [sp, #32]
 800d62a:	4606      	mov	r6, r0
 800d62c:	460f      	mov	r7, r1
 800d62e:	4691      	mov	r9, r2
 800d630:	461d      	mov	r5, r3
 800d632:	f7ff fc11 	bl	800ce58 <uxr_flash_output_streams>
 800d636:	b124      	cbz	r4, 800d642 <uxr_run_session_until_all_status+0x1e>
 800d638:	4622      	mov	r2, r4
 800d63a:	21ff      	movs	r1, #255	@ 0xff
 800d63c:	4628      	mov	r0, r5
 800d63e:	f007 ffbf 	bl	80155c0 <memset>
 800d642:	e9c6 951d 	strd	r9, r5, [r6, #116]	@ 0x74
 800d646:	67f4      	str	r4, [r6, #124]	@ 0x7c
 800d648:	f001 f98a 	bl	800e960 <uxr_millis>
 800d64c:	3d01      	subs	r5, #1
 800d64e:	f1a9 0902 	sub.w	r9, r9, #2
 800d652:	4680      	mov	r8, r0
 800d654:	4639      	mov	r1, r7
 800d656:	4630      	mov	r0, r6
 800d658:	f7ff fe44 	bl	800d2e4 <listen_message_reliably>
 800d65c:	f001 f980 	bl	800e960 <uxr_millis>
 800d660:	eba0 0008 	sub.w	r0, r0, r8
 800d664:	1a39      	subs	r1, r7, r0
 800d666:	b344      	cbz	r4, 800d6ba <uxr_run_session_until_all_status+0x96>
 800d668:	4628      	mov	r0, r5
 800d66a:	46ac      	mov	ip, r5
 800d66c:	2301      	movs	r3, #1
 800d66e:	e002      	b.n	800d676 <uxr_run_session_until_all_status+0x52>
 800d670:	42a3      	cmp	r3, r4
 800d672:	d20d      	bcs.n	800d690 <uxr_run_session_until_all_status+0x6c>
 800d674:	3301      	adds	r3, #1
 800d676:	f81c ef01 	ldrb.w	lr, [ip, #1]!
 800d67a:	f1be 0fff 	cmp.w	lr, #255	@ 0xff
 800d67e:	d1f7      	bne.n	800d670 <uxr_run_session_until_all_status+0x4c>
 800d680:	42a3      	cmp	r3, r4
 800d682:	f839 2013 	ldrh.w	r2, [r9, r3, lsl #1]
 800d686:	d213      	bcs.n	800d6b0 <uxr_run_session_until_all_status+0x8c>
 800d688:	2a00      	cmp	r2, #0
 800d68a:	d0f3      	beq.n	800d674 <uxr_run_session_until_all_status+0x50>
 800d68c:	2900      	cmp	r1, #0
 800d68e:	dce2      	bgt.n	800d656 <uxr_run_session_until_all_status+0x32>
 800d690:	2300      	movs	r3, #0
 800d692:	67f3      	str	r3, [r6, #124]	@ 0x7c
 800d694:	442c      	add	r4, r5
 800d696:	e001      	b.n	800d69c <uxr_run_session_until_all_status+0x78>
 800d698:	2b01      	cmp	r3, #1
 800d69a:	d812      	bhi.n	800d6c2 <uxr_run_session_until_all_status+0x9e>
 800d69c:	f810 3f01 	ldrb.w	r3, [r0, #1]!
 800d6a0:	4284      	cmp	r4, r0
 800d6a2:	d1f9      	bne.n	800d698 <uxr_run_session_until_all_status+0x74>
 800d6a4:	2b01      	cmp	r3, #1
 800d6a6:	bf8c      	ite	hi
 800d6a8:	2000      	movhi	r0, #0
 800d6aa:	2001      	movls	r0, #1
 800d6ac:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d6b0:	2900      	cmp	r1, #0
 800d6b2:	dded      	ble.n	800d690 <uxr_run_session_until_all_status+0x6c>
 800d6b4:	2a00      	cmp	r2, #0
 800d6b6:	d1ce      	bne.n	800d656 <uxr_run_session_until_all_status+0x32>
 800d6b8:	e7ea      	b.n	800d690 <uxr_run_session_until_all_status+0x6c>
 800d6ba:	67f4      	str	r4, [r6, #124]	@ 0x7c
 800d6bc:	2001      	movs	r0, #1
 800d6be:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d6c2:	2000      	movs	r0, #0
 800d6c4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

0800d6c8 <wait_session_status>:
 800d6c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d6cc:	4604      	mov	r4, r0
 800d6ce:	b09d      	sub	sp, #116	@ 0x74
 800d6d0:	20ff      	movs	r0, #255	@ 0xff
 800d6d2:	7160      	strb	r0, [r4, #5]
 800d6d4:	9303      	str	r3, [sp, #12]
 800d6d6:	2b00      	cmp	r3, #0
 800d6d8:	f000 80b6 	beq.w	800d848 <wait_session_status+0x180>
 800d6dc:	468a      	mov	sl, r1
 800d6de:	4691      	mov	r9, r2
 800d6e0:	f04f 0b00 	mov.w	fp, #0
 800d6e4:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 800d6e6:	464a      	mov	r2, r9
 800d6e8:	e9d3 0500 	ldrd	r0, r5, [r3]
 800d6ec:	4651      	mov	r1, sl
 800d6ee:	47a8      	blx	r5
 800d6f0:	f001 f936 	bl	800e960 <uxr_millis>
 800d6f4:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800d6f8:	4605      	mov	r5, r0
 800d6fa:	e009      	b.n	800d710 <wait_session_status+0x48>
 800d6fc:	f001 f930 	bl	800e960 <uxr_millis>
 800d700:	1b40      	subs	r0, r0, r5
 800d702:	f5c0 737a 	rsb	r3, r0, #1000	@ 0x3e8
 800d706:	2b00      	cmp	r3, #0
 800d708:	dd40      	ble.n	800d78c <wait_session_status+0xc4>
 800d70a:	7960      	ldrb	r0, [r4, #5]
 800d70c:	28ff      	cmp	r0, #255	@ 0xff
 800d70e:	d145      	bne.n	800d79c <wait_session_status+0xd4>
 800d710:	6f22      	ldr	r2, [r4, #112]	@ 0x70
 800d712:	a908      	add	r1, sp, #32
 800d714:	6896      	ldr	r6, [r2, #8]
 800d716:	6810      	ldr	r0, [r2, #0]
 800d718:	aa09      	add	r2, sp, #36	@ 0x24
 800d71a:	47b0      	blx	r6
 800d71c:	2800      	cmp	r0, #0
 800d71e:	d0ed      	beq.n	800d6fc <wait_session_status+0x34>
 800d720:	e9dd 1208 	ldrd	r1, r2, [sp, #32]
 800d724:	a80c      	add	r0, sp, #48	@ 0x30
 800d726:	f7fe fe89 	bl	800c43c <ucdr_init_buffer>
 800d72a:	2600      	movs	r6, #0
 800d72c:	f10d 031e 	add.w	r3, sp, #30
 800d730:	aa07      	add	r2, sp, #28
 800d732:	a90c      	add	r1, sp, #48	@ 0x30
 800d734:	4620      	mov	r0, r4
 800d736:	f88d 601c 	strb.w	r6, [sp, #28]
 800d73a:	f000 fa87 	bl	800dc4c <uxr_read_session_header>
 800d73e:	2800      	cmp	r0, #0
 800d740:	d0dc      	beq.n	800d6fc <wait_session_status+0x34>
 800d742:	4631      	mov	r1, r6
 800d744:	f89d 001c 	ldrb.w	r0, [sp, #28]
 800d748:	f000 ffb6 	bl	800e6b8 <uxr_stream_id_from_raw>
 800d74c:	f3c0 4707 	ubfx	r7, r0, #16, #8
 800d750:	f8bd 301e 	ldrh.w	r3, [sp, #30]
 800d754:	9302      	str	r3, [sp, #8]
 800d756:	2f01      	cmp	r7, #1
 800d758:	e9cd 000a 	strd	r0, r0, [sp, #40]	@ 0x28
 800d75c:	f3c0 2607 	ubfx	r6, r0, #8, #8
 800d760:	d05c      	beq.n	800d81c <wait_session_status+0x154>
 800d762:	2f02      	cmp	r7, #2
 800d764:	d020      	beq.n	800d7a8 <wait_session_status+0xe0>
 800d766:	2f00      	cmp	r7, #0
 800d768:	d1c8      	bne.n	800d6fc <wait_session_status+0x34>
 800d76a:	4639      	mov	r1, r7
 800d76c:	4638      	mov	r0, r7
 800d76e:	f000 ffa3 	bl	800e6b8 <uxr_stream_id_from_raw>
 800d772:	a90c      	add	r1, sp, #48	@ 0x30
 800d774:	4602      	mov	r2, r0
 800d776:	900b      	str	r0, [sp, #44]	@ 0x2c
 800d778:	4620      	mov	r0, r4
 800d77a:	f7ff fc2b 	bl	800cfd4 <read_submessage_list>
 800d77e:	f001 f8ef 	bl	800e960 <uxr_millis>
 800d782:	1b40      	subs	r0, r0, r5
 800d784:	f5c0 737a 	rsb	r3, r0, #1000	@ 0x3e8
 800d788:	2b00      	cmp	r3, #0
 800d78a:	dcbe      	bgt.n	800d70a <wait_session_status+0x42>
 800d78c:	9b03      	ldr	r3, [sp, #12]
 800d78e:	7960      	ldrb	r0, [r4, #5]
 800d790:	f10b 0b01 	add.w	fp, fp, #1
 800d794:	455b      	cmp	r3, fp
 800d796:	d001      	beq.n	800d79c <wait_session_status+0xd4>
 800d798:	28ff      	cmp	r0, #255	@ 0xff
 800d79a:	d0a3      	beq.n	800d6e4 <wait_session_status+0x1c>
 800d79c:	38ff      	subs	r0, #255	@ 0xff
 800d79e:	bf18      	it	ne
 800d7a0:	2001      	movne	r0, #1
 800d7a2:	b01d      	add	sp, #116	@ 0x74
 800d7a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d7a8:	f89d 3028 	ldrb.w	r3, [sp, #40]	@ 0x28
 800d7ac:	9304      	str	r3, [sp, #16]
 800d7ae:	4631      	mov	r1, r6
 800d7b0:	f104 0008 	add.w	r0, r4, #8
 800d7b4:	f001 f86e 	bl	800e894 <uxr_get_input_reliable_stream>
 800d7b8:	4680      	mov	r8, r0
 800d7ba:	b348      	cbz	r0, 800d810 <wait_session_status+0x148>
 800d7bc:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800d7be:	9205      	str	r2, [sp, #20]
 800d7c0:	a80c      	add	r0, sp, #48	@ 0x30
 800d7c2:	f7fe fe6b 	bl	800c49c <ucdr_buffer_remaining>
 800d7c6:	4603      	mov	r3, r0
 800d7c8:	f10d 001d 	add.w	r0, sp, #29
 800d7cc:	9000      	str	r0, [sp, #0]
 800d7ce:	9a05      	ldr	r2, [sp, #20]
 800d7d0:	9902      	ldr	r1, [sp, #8]
 800d7d2:	4640      	mov	r0, r8
 800d7d4:	f006 f9fe 	bl	8013bd4 <uxr_receive_reliable_message>
 800d7d8:	b1d0      	cbz	r0, 800d810 <wait_session_status+0x148>
 800d7da:	f89d 301d 	ldrb.w	r3, [sp, #29]
 800d7de:	2b00      	cmp	r3, #0
 800d7e0:	d03a      	beq.n	800d858 <wait_session_status+0x190>
 800d7e2:	9f04      	ldr	r7, [sp, #16]
 800d7e4:	e00a      	b.n	800d7fc <wait_session_status+0x134>
 800d7e6:	f04f 0302 	mov.w	r3, #2
 800d7ea:	f88d 702c 	strb.w	r7, [sp, #44]	@ 0x2c
 800d7ee:	f88d 602d 	strb.w	r6, [sp, #45]	@ 0x2d
 800d7f2:	f88d 302e 	strb.w	r3, [sp, #46]	@ 0x2e
 800d7f6:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800d7f8:	f7ff fbec 	bl	800cfd4 <read_submessage_list>
 800d7fc:	a914      	add	r1, sp, #80	@ 0x50
 800d7fe:	2204      	movs	r2, #4
 800d800:	4640      	mov	r0, r8
 800d802:	f006 fa67 	bl	8013cd4 <uxr_next_input_reliable_buffer_available>
 800d806:	4603      	mov	r3, r0
 800d808:	a914      	add	r1, sp, #80	@ 0x50
 800d80a:	4620      	mov	r0, r4
 800d80c:	2b00      	cmp	r3, #0
 800d80e:	d1ea      	bne.n	800d7e6 <wait_session_status+0x11e>
 800d810:	9904      	ldr	r1, [sp, #16]
 800d812:	4632      	mov	r2, r6
 800d814:	4620      	mov	r0, r4
 800d816:	f7ff fa57 	bl	800ccc8 <write_submessage_acknack.isra.0>
 800d81a:	e76f      	b.n	800d6fc <wait_session_status+0x34>
 800d81c:	4631      	mov	r1, r6
 800d81e:	f104 0008 	add.w	r0, r4, #8
 800d822:	f001 f82d 	bl	800e880 <uxr_get_input_best_effort_stream>
 800d826:	2800      	cmp	r0, #0
 800d828:	f43f af68 	beq.w	800d6fc <wait_session_status+0x34>
 800d82c:	9902      	ldr	r1, [sp, #8]
 800d82e:	f006 f93d 	bl	8013aac <uxr_receive_best_effort_message>
 800d832:	2800      	cmp	r0, #0
 800d834:	f43f af62 	beq.w	800d6fc <wait_session_status+0x34>
 800d838:	f88d 702e 	strb.w	r7, [sp, #46]	@ 0x2e
 800d83c:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800d83e:	a90c      	add	r1, sp, #48	@ 0x30
 800d840:	4620      	mov	r0, r4
 800d842:	f7ff fbc7 	bl	800cfd4 <read_submessage_list>
 800d846:	e759      	b.n	800d6fc <wait_session_status+0x34>
 800d848:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 800d84a:	e9d3 0400 	ldrd	r0, r4, [r3]
 800d84e:	47a0      	blx	r4
 800d850:	2001      	movs	r0, #1
 800d852:	b01d      	add	sp, #116	@ 0x74
 800d854:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d858:	f88d 702e 	strb.w	r7, [sp, #46]	@ 0x2e
 800d85c:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800d85e:	a90c      	add	r1, sp, #48	@ 0x30
 800d860:	4620      	mov	r0, r4
 800d862:	f7ff fbb7 	bl	800cfd4 <read_submessage_list>
 800d866:	e7bc      	b.n	800d7e2 <wait_session_status+0x11a>

0800d868 <uxr_delete_session_retries>:
 800d868:	b530      	push	{r4, r5, lr}
 800d86a:	b08f      	sub	sp, #60	@ 0x3c
 800d86c:	4604      	mov	r4, r0
 800d86e:	460d      	mov	r5, r1
 800d870:	f000 fa2e 	bl	800dcd0 <uxr_session_header_offset>
 800d874:	2300      	movs	r3, #0
 800d876:	2210      	movs	r2, #16
 800d878:	9000      	str	r0, [sp, #0]
 800d87a:	a902      	add	r1, sp, #8
 800d87c:	a806      	add	r0, sp, #24
 800d87e:	f7fe fdcb 	bl	800c418 <ucdr_init_buffer_origin_offset>
 800d882:	a906      	add	r1, sp, #24
 800d884:	4620      	mov	r0, r4
 800d886:	f000 f973 	bl	800db70 <uxr_buffer_delete_session>
 800d88a:	2200      	movs	r2, #0
 800d88c:	4611      	mov	r1, r2
 800d88e:	9b06      	ldr	r3, [sp, #24]
 800d890:	4620      	mov	r0, r4
 800d892:	f000 f9c7 	bl	800dc24 <uxr_stamp_session_header>
 800d896:	a806      	add	r0, sp, #24
 800d898:	f7fe fdfc 	bl	800c494 <ucdr_buffer_length>
 800d89c:	462b      	mov	r3, r5
 800d89e:	4602      	mov	r2, r0
 800d8a0:	a902      	add	r1, sp, #8
 800d8a2:	4620      	mov	r0, r4
 800d8a4:	f7ff ff10 	bl	800d6c8 <wait_session_status>
 800d8a8:	b118      	cbz	r0, 800d8b2 <uxr_delete_session_retries+0x4a>
 800d8aa:	7960      	ldrb	r0, [r4, #5]
 800d8ac:	fab0 f080 	clz	r0, r0
 800d8b0:	0940      	lsrs	r0, r0, #5
 800d8b2:	b00f      	add	sp, #60	@ 0x3c
 800d8b4:	bd30      	pop	{r4, r5, pc}
 800d8b6:	bf00      	nop

0800d8b8 <uxr_create_session>:
 800d8b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d8bc:	f100 0b08 	add.w	fp, r0, #8
 800d8c0:	b0ab      	sub	sp, #172	@ 0xac
 800d8c2:	4604      	mov	r4, r0
 800d8c4:	4658      	mov	r0, fp
 800d8c6:	f000 ff2b 	bl	800e720 <uxr_reset_stream_storage>
 800d8ca:	4620      	mov	r0, r4
 800d8cc:	f000 fa00 	bl	800dcd0 <uxr_session_header_offset>
 800d8d0:	2300      	movs	r3, #0
 800d8d2:	9000      	str	r0, [sp, #0]
 800d8d4:	221c      	movs	r2, #28
 800d8d6:	a90b      	add	r1, sp, #44	@ 0x2c
 800d8d8:	a812      	add	r0, sp, #72	@ 0x48
 800d8da:	f7fe fd9d 	bl	800c418 <ucdr_init_buffer_origin_offset>
 800d8de:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 800d8e0:	8a1a      	ldrh	r2, [r3, #16]
 800d8e2:	3a04      	subs	r2, #4
 800d8e4:	b292      	uxth	r2, r2
 800d8e6:	a912      	add	r1, sp, #72	@ 0x48
 800d8e8:	4620      	mov	r0, r4
 800d8ea:	f000 f917 	bl	800db1c <uxr_buffer_create_session>
 800d8ee:	9912      	ldr	r1, [sp, #72]	@ 0x48
 800d8f0:	4620      	mov	r0, r4
 800d8f2:	f000 f983 	bl	800dbfc <uxr_stamp_create_session_header>
 800d8f6:	a812      	add	r0, sp, #72	@ 0x48
 800d8f8:	f7fe fdcc 	bl	800c494 <ucdr_buffer_length>
 800d8fc:	23ff      	movs	r3, #255	@ 0xff
 800d8fe:	7163      	strb	r3, [r4, #5]
 800d900:	230a      	movs	r3, #10
 800d902:	46da      	mov	sl, fp
 800d904:	9303      	str	r3, [sp, #12]
 800d906:	4683      	mov	fp, r0
 800d908:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 800d90a:	465a      	mov	r2, fp
 800d90c:	e9d3 0500 	ldrd	r0, r5, [r3]
 800d910:	a90b      	add	r1, sp, #44	@ 0x2c
 800d912:	47a8      	blx	r5
 800d914:	f001 f824 	bl	800e960 <uxr_millis>
 800d918:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800d91c:	4605      	mov	r5, r0
 800d91e:	e009      	b.n	800d934 <uxr_create_session+0x7c>
 800d920:	f001 f81e 	bl	800e960 <uxr_millis>
 800d924:	1b40      	subs	r0, r0, r5
 800d926:	f5c0 737a 	rsb	r3, r0, #1000	@ 0x3e8
 800d92a:	2b00      	cmp	r3, #0
 800d92c:	7962      	ldrb	r2, [r4, #5]
 800d92e:	dd38      	ble.n	800d9a2 <uxr_create_session+0xea>
 800d930:	2aff      	cmp	r2, #255	@ 0xff
 800d932:	d13c      	bne.n	800d9ae <uxr_create_session+0xf6>
 800d934:	6f22      	ldr	r2, [r4, #112]	@ 0x70
 800d936:	a907      	add	r1, sp, #28
 800d938:	6896      	ldr	r6, [r2, #8]
 800d93a:	6810      	ldr	r0, [r2, #0]
 800d93c:	aa08      	add	r2, sp, #32
 800d93e:	47b0      	blx	r6
 800d940:	2800      	cmp	r0, #0
 800d942:	d0ed      	beq.n	800d920 <uxr_create_session+0x68>
 800d944:	e9dd 1207 	ldrd	r1, r2, [sp, #28]
 800d948:	a81a      	add	r0, sp, #104	@ 0x68
 800d94a:	f7fe fd77 	bl	800c43c <ucdr_init_buffer>
 800d94e:	2600      	movs	r6, #0
 800d950:	f10d 031a 	add.w	r3, sp, #26
 800d954:	aa06      	add	r2, sp, #24
 800d956:	a91a      	add	r1, sp, #104	@ 0x68
 800d958:	4620      	mov	r0, r4
 800d95a:	f88d 6018 	strb.w	r6, [sp, #24]
 800d95e:	f000 f975 	bl	800dc4c <uxr_read_session_header>
 800d962:	2800      	cmp	r0, #0
 800d964:	d0dc      	beq.n	800d920 <uxr_create_session+0x68>
 800d966:	4631      	mov	r1, r6
 800d968:	f89d 0018 	ldrb.w	r0, [sp, #24]
 800d96c:	f000 fea4 	bl	800e6b8 <uxr_stream_id_from_raw>
 800d970:	f3c0 4607 	ubfx	r6, r0, #16, #8
 800d974:	2e01      	cmp	r6, #1
 800d976:	e9cd 0009 	strd	r0, r0, [sp, #36]	@ 0x24
 800d97a:	f8bd 901a 	ldrh.w	r9, [sp, #26]
 800d97e:	f3c0 2707 	ubfx	r7, r0, #8, #8
 800d982:	d053      	beq.n	800da2c <uxr_create_session+0x174>
 800d984:	2e02      	cmp	r6, #2
 800d986:	d018      	beq.n	800d9ba <uxr_create_session+0x102>
 800d988:	2e00      	cmp	r6, #0
 800d98a:	d1c9      	bne.n	800d920 <uxr_create_session+0x68>
 800d98c:	4631      	mov	r1, r6
 800d98e:	4630      	mov	r0, r6
 800d990:	f000 fe92 	bl	800e6b8 <uxr_stream_id_from_raw>
 800d994:	a91a      	add	r1, sp, #104	@ 0x68
 800d996:	4602      	mov	r2, r0
 800d998:	900a      	str	r0, [sp, #40]	@ 0x28
 800d99a:	4620      	mov	r0, r4
 800d99c:	f7ff fb1a 	bl	800cfd4 <read_submessage_list>
 800d9a0:	e7be      	b.n	800d920 <uxr_create_session+0x68>
 800d9a2:	9b03      	ldr	r3, [sp, #12]
 800d9a4:	3b01      	subs	r3, #1
 800d9a6:	9303      	str	r3, [sp, #12]
 800d9a8:	d001      	beq.n	800d9ae <uxr_create_session+0xf6>
 800d9aa:	2aff      	cmp	r2, #255	@ 0xff
 800d9ac:	d0ac      	beq.n	800d908 <uxr_create_session+0x50>
 800d9ae:	2a00      	cmp	r2, #0
 800d9b0:	d051      	beq.n	800da56 <uxr_create_session+0x19e>
 800d9b2:	2000      	movs	r0, #0
 800d9b4:	b02b      	add	sp, #172	@ 0xac
 800d9b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d9ba:	f89d 3024 	ldrb.w	r3, [sp, #36]	@ 0x24
 800d9be:	9304      	str	r3, [sp, #16]
 800d9c0:	4639      	mov	r1, r7
 800d9c2:	4650      	mov	r0, sl
 800d9c4:	f000 ff66 	bl	800e894 <uxr_get_input_reliable_stream>
 800d9c8:	4680      	mov	r8, r0
 800d9ca:	b348      	cbz	r0, 800da20 <uxr_create_session+0x168>
 800d9cc:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 800d9ce:	9205      	str	r2, [sp, #20]
 800d9d0:	a81a      	add	r0, sp, #104	@ 0x68
 800d9d2:	f7fe fd63 	bl	800c49c <ucdr_buffer_remaining>
 800d9d6:	4603      	mov	r3, r0
 800d9d8:	f10d 0019 	add.w	r0, sp, #25
 800d9dc:	9000      	str	r0, [sp, #0]
 800d9de:	9a05      	ldr	r2, [sp, #20]
 800d9e0:	4649      	mov	r1, r9
 800d9e2:	4640      	mov	r0, r8
 800d9e4:	f006 f8f6 	bl	8013bd4 <uxr_receive_reliable_message>
 800d9e8:	b1d0      	cbz	r0, 800da20 <uxr_create_session+0x168>
 800d9ea:	f89d 3019 	ldrb.w	r3, [sp, #25]
 800d9ee:	2b00      	cmp	r3, #0
 800d9f0:	d038      	beq.n	800da64 <uxr_create_session+0x1ac>
 800d9f2:	9e04      	ldr	r6, [sp, #16]
 800d9f4:	e00a      	b.n	800da0c <uxr_create_session+0x154>
 800d9f6:	f04f 0302 	mov.w	r3, #2
 800d9fa:	f88d 6028 	strb.w	r6, [sp, #40]	@ 0x28
 800d9fe:	f88d 7029 	strb.w	r7, [sp, #41]	@ 0x29
 800da02:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800da06:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800da08:	f7ff fae4 	bl	800cfd4 <read_submessage_list>
 800da0c:	a922      	add	r1, sp, #136	@ 0x88
 800da0e:	2204      	movs	r2, #4
 800da10:	4640      	mov	r0, r8
 800da12:	f006 f95f 	bl	8013cd4 <uxr_next_input_reliable_buffer_available>
 800da16:	4603      	mov	r3, r0
 800da18:	a922      	add	r1, sp, #136	@ 0x88
 800da1a:	4620      	mov	r0, r4
 800da1c:	2b00      	cmp	r3, #0
 800da1e:	d1ea      	bne.n	800d9f6 <uxr_create_session+0x13e>
 800da20:	9904      	ldr	r1, [sp, #16]
 800da22:	463a      	mov	r2, r7
 800da24:	4620      	mov	r0, r4
 800da26:	f7ff f94f 	bl	800ccc8 <write_submessage_acknack.isra.0>
 800da2a:	e779      	b.n	800d920 <uxr_create_session+0x68>
 800da2c:	4639      	mov	r1, r7
 800da2e:	4650      	mov	r0, sl
 800da30:	f000 ff26 	bl	800e880 <uxr_get_input_best_effort_stream>
 800da34:	2800      	cmp	r0, #0
 800da36:	f43f af73 	beq.w	800d920 <uxr_create_session+0x68>
 800da3a:	4649      	mov	r1, r9
 800da3c:	f006 f836 	bl	8013aac <uxr_receive_best_effort_message>
 800da40:	2800      	cmp	r0, #0
 800da42:	f43f af6d 	beq.w	800d920 <uxr_create_session+0x68>
 800da46:	f88d 602a 	strb.w	r6, [sp, #42]	@ 0x2a
 800da4a:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800da4c:	a91a      	add	r1, sp, #104	@ 0x68
 800da4e:	4620      	mov	r0, r4
 800da50:	f7ff fac0 	bl	800cfd4 <read_submessage_list>
 800da54:	e764      	b.n	800d920 <uxr_create_session+0x68>
 800da56:	4650      	mov	r0, sl
 800da58:	f000 fe62 	bl	800e720 <uxr_reset_stream_storage>
 800da5c:	2001      	movs	r0, #1
 800da5e:	b02b      	add	sp, #172	@ 0xac
 800da60:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800da64:	f88d 602a 	strb.w	r6, [sp, #42]	@ 0x2a
 800da68:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800da6a:	a91a      	add	r1, sp, #104	@ 0x68
 800da6c:	4620      	mov	r0, r4
 800da6e:	f7ff fab1 	bl	800cfd4 <read_submessage_list>
 800da72:	e7be      	b.n	800d9f2 <uxr_create_session+0x13a>

0800da74 <uxr_prepare_stream_to_write_submessage>:
 800da74:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800da78:	b082      	sub	sp, #8
 800da7a:	4682      	mov	sl, r0
 800da7c:	4610      	mov	r0, r2
 800da7e:	4615      	mov	r5, r2
 800da80:	461e      	mov	r6, r3
 800da82:	f89d 7028 	ldrb.w	r7, [sp, #40]	@ 0x28
 800da86:	f89d 802c 	ldrb.w	r8, [sp, #44]	@ 0x2c
 800da8a:	9101      	str	r1, [sp, #4]
 800da8c:	f3c1 2407 	ubfx	r4, r1, #8, #8
 800da90:	f000 ff60 	bl	800e954 <uxr_submessage_padding>
 800da94:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800da98:	f105 0904 	add.w	r9, r5, #4
 800da9c:	2b01      	cmp	r3, #1
 800da9e:	4481      	add	r9, r0
 800daa0:	d01d      	beq.n	800dade <uxr_prepare_stream_to_write_submessage+0x6a>
 800daa2:	2b02      	cmp	r3, #2
 800daa4:	d116      	bne.n	800dad4 <uxr_prepare_stream_to_write_submessage+0x60>
 800daa6:	4621      	mov	r1, r4
 800daa8:	f10a 0008 	add.w	r0, sl, #8
 800daac:	f000 fede 	bl	800e86c <uxr_get_output_reliable_stream>
 800dab0:	4604      	mov	r4, r0
 800dab2:	b158      	cbz	r0, 800dacc <uxr_prepare_stream_to_write_submessage+0x58>
 800dab4:	4649      	mov	r1, r9
 800dab6:	4632      	mov	r2, r6
 800dab8:	f006 fac8 	bl	801404c <uxr_prepare_reliable_buffer_to_write>
 800dabc:	4604      	mov	r4, r0
 800dabe:	b12c      	cbz	r4, 800dacc <uxr_prepare_stream_to_write_submessage+0x58>
 800dac0:	4643      	mov	r3, r8
 800dac2:	b2aa      	uxth	r2, r5
 800dac4:	4639      	mov	r1, r7
 800dac6:	4630      	mov	r0, r6
 800dac8:	f000 ff04 	bl	800e8d4 <uxr_buffer_submessage_header>
 800dacc:	4620      	mov	r0, r4
 800dace:	b002      	add	sp, #8
 800dad0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800dad4:	2400      	movs	r4, #0
 800dad6:	4620      	mov	r0, r4
 800dad8:	b002      	add	sp, #8
 800dada:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800dade:	4621      	mov	r1, r4
 800dae0:	f10a 0008 	add.w	r0, sl, #8
 800dae4:	f000 feba 	bl	800e85c <uxr_get_output_best_effort_stream>
 800dae8:	4604      	mov	r4, r0
 800daea:	2800      	cmp	r0, #0
 800daec:	d0ee      	beq.n	800dacc <uxr_prepare_stream_to_write_submessage+0x58>
 800daee:	4649      	mov	r1, r9
 800daf0:	4632      	mov	r2, r6
 800daf2:	f006 f9db 	bl	8013eac <uxr_prepare_best_effort_buffer_to_write>
 800daf6:	4604      	mov	r4, r0
 800daf8:	e7e1      	b.n	800dabe <uxr_prepare_stream_to_write_submessage+0x4a>
 800dafa:	bf00      	nop

0800dafc <uxr_init_session_info>:
 800dafc:	0e13      	lsrs	r3, r2, #24
 800dafe:	7043      	strb	r3, [r0, #1]
 800db00:	f3c2 2307 	ubfx	r3, r2, #8, #8
 800db04:	f3c2 4c07 	ubfx	ip, r2, #16, #8
 800db08:	7001      	strb	r1, [r0, #0]
 800db0a:	70c3      	strb	r3, [r0, #3]
 800db0c:	2109      	movs	r1, #9
 800db0e:	23ff      	movs	r3, #255	@ 0xff
 800db10:	f880 c002 	strb.w	ip, [r0, #2]
 800db14:	7102      	strb	r2, [r0, #4]
 800db16:	80c1      	strh	r1, [r0, #6]
 800db18:	7143      	strb	r3, [r0, #5]
 800db1a:	4770      	bx	lr

0800db1c <uxr_buffer_create_session>:
 800db1c:	b530      	push	{r4, r5, lr}
 800db1e:	b089      	sub	sp, #36	@ 0x24
 800db20:	2300      	movs	r3, #0
 800db22:	4d12      	ldr	r5, [pc, #72]	@ (800db6c <uxr_buffer_create_session+0x50>)
 800db24:	9307      	str	r3, [sp, #28]
 800db26:	f8ad 201c 	strh.w	r2, [sp, #28]
 800db2a:	2201      	movs	r2, #1
 800db2c:	9301      	str	r3, [sp, #4]
 800db2e:	80c2      	strh	r2, [r0, #6]
 800db30:	f88d 2004 	strb.w	r2, [sp, #4]
 800db34:	682a      	ldr	r2, [r5, #0]
 800db36:	9200      	str	r2, [sp, #0]
 800db38:	88aa      	ldrh	r2, [r5, #4]
 800db3a:	f8ad 2006 	strh.w	r2, [sp, #6]
 800db3e:	f8d0 2001 	ldr.w	r2, [r0, #1]
 800db42:	9202      	str	r2, [sp, #8]
 800db44:	460c      	mov	r4, r1
 800db46:	7802      	ldrb	r2, [r0, #0]
 800db48:	9303      	str	r3, [sp, #12]
 800db4a:	4619      	mov	r1, r3
 800db4c:	f88d 200c 	strb.w	r2, [sp, #12]
 800db50:	4620      	mov	r0, r4
 800db52:	2210      	movs	r2, #16
 800db54:	e9cd 3304 	strd	r3, r3, [sp, #16]
 800db58:	9306      	str	r3, [sp, #24]
 800db5a:	f000 febb 	bl	800e8d4 <uxr_buffer_submessage_header>
 800db5e:	4669      	mov	r1, sp
 800db60:	4620      	mov	r0, r4
 800db62:	f001 fc9f 	bl	800f4a4 <uxr_serialize_CREATE_CLIENT_Payload>
 800db66:	b009      	add	sp, #36	@ 0x24
 800db68:	bd30      	pop	{r4, r5, pc}
 800db6a:	bf00      	nop
 800db6c:	080165b0 	.word	0x080165b0

0800db70 <uxr_buffer_delete_session>:
 800db70:	b510      	push	{r4, lr}
 800db72:	4b0c      	ldr	r3, [pc, #48]	@ (800dba4 <uxr_buffer_delete_session+0x34>)
 800db74:	b082      	sub	sp, #8
 800db76:	f8b3 c008 	ldrh.w	ip, [r3, #8]
 800db7a:	f8ad c006 	strh.w	ip, [sp, #6]
 800db7e:	460c      	mov	r4, r1
 800db80:	2202      	movs	r2, #2
 800db82:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800db86:	80c2      	strh	r2, [r0, #6]
 800db88:	f8ad 3004 	strh.w	r3, [sp, #4]
 800db8c:	2204      	movs	r2, #4
 800db8e:	2300      	movs	r3, #0
 800db90:	2103      	movs	r1, #3
 800db92:	4620      	mov	r0, r4
 800db94:	f000 fe9e 	bl	800e8d4 <uxr_buffer_submessage_header>
 800db98:	a901      	add	r1, sp, #4
 800db9a:	4620      	mov	r0, r4
 800db9c:	f001 fd28 	bl	800f5f0 <uxr_serialize_DELETE_Payload>
 800dba0:	b002      	add	sp, #8
 800dba2:	bd10      	pop	{r4, pc}
 800dba4:	080165b0 	.word	0x080165b0

0800dba8 <uxr_read_create_session_status>:
 800dba8:	b510      	push	{r4, lr}
 800dbaa:	b088      	sub	sp, #32
 800dbac:	4604      	mov	r4, r0
 800dbae:	4608      	mov	r0, r1
 800dbb0:	a901      	add	r1, sp, #4
 800dbb2:	f001 fd2d 	bl	800f610 <uxr_deserialize_STATUS_AGENT_Payload>
 800dbb6:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800dbba:	7163      	strb	r3, [r4, #5]
 800dbbc:	b008      	add	sp, #32
 800dbbe:	bd10      	pop	{r4, pc}

0800dbc0 <uxr_read_delete_session_status>:
 800dbc0:	b510      	push	{r4, lr}
 800dbc2:	4604      	mov	r4, r0
 800dbc4:	b084      	sub	sp, #16
 800dbc6:	4608      	mov	r0, r1
 800dbc8:	a902      	add	r1, sp, #8
 800dbca:	f001 fd51 	bl	800f670 <uxr_deserialize_STATUS_Payload>
 800dbce:	88e3      	ldrh	r3, [r4, #6]
 800dbd0:	2b02      	cmp	r3, #2
 800dbd2:	d001      	beq.n	800dbd8 <uxr_read_delete_session_status+0x18>
 800dbd4:	b004      	add	sp, #16
 800dbd6:	bd10      	pop	{r4, pc}
 800dbd8:	f10d 000a 	add.w	r0, sp, #10
 800dbdc:	f7fe feca 	bl	800c974 <uxr_object_id_from_raw>
 800dbe0:	f89d 2008 	ldrb.w	r2, [sp, #8]
 800dbe4:	f89d 3009 	ldrb.w	r3, [sp, #9]
 800dbe8:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 800dbec:	b29b      	uxth	r3, r3
 800dbee:	2b02      	cmp	r3, #2
 800dbf0:	bf04      	itt	eq
 800dbf2:	f89d 300c 	ldrbeq.w	r3, [sp, #12]
 800dbf6:	7163      	strbeq	r3, [r4, #5]
 800dbf8:	b004      	add	sp, #16
 800dbfa:	bd10      	pop	{r4, pc}

0800dbfc <uxr_stamp_create_session_header>:
 800dbfc:	b510      	push	{r4, lr}
 800dbfe:	2208      	movs	r2, #8
 800dc00:	b08a      	sub	sp, #40	@ 0x28
 800dc02:	4604      	mov	r4, r0
 800dc04:	eb0d 0002 	add.w	r0, sp, r2
 800dc08:	f7fe fc18 	bl	800c43c <ucdr_init_buffer>
 800dc0c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800dc10:	9400      	str	r4, [sp, #0]
 800dc12:	2300      	movs	r3, #0
 800dc14:	461a      	mov	r2, r3
 800dc16:	f001 0180 	and.w	r1, r1, #128	@ 0x80
 800dc1a:	a802      	add	r0, sp, #8
 800dc1c:	f000 fed0 	bl	800e9c0 <uxr_serialize_message_header>
 800dc20:	b00a      	add	sp, #40	@ 0x28
 800dc22:	bd10      	pop	{r4, pc}

0800dc24 <uxr_stamp_session_header>:
 800dc24:	b530      	push	{r4, r5, lr}
 800dc26:	b08d      	sub	sp, #52	@ 0x34
 800dc28:	4604      	mov	r4, r0
 800dc2a:	460d      	mov	r5, r1
 800dc2c:	9203      	str	r2, [sp, #12]
 800dc2e:	4619      	mov	r1, r3
 800dc30:	a804      	add	r0, sp, #16
 800dc32:	2208      	movs	r2, #8
 800dc34:	f7fe fc02 	bl	800c43c <ucdr_init_buffer>
 800dc38:	f814 1b01 	ldrb.w	r1, [r4], #1
 800dc3c:	9b03      	ldr	r3, [sp, #12]
 800dc3e:	9400      	str	r4, [sp, #0]
 800dc40:	462a      	mov	r2, r5
 800dc42:	a804      	add	r0, sp, #16
 800dc44:	f000 febc 	bl	800e9c0 <uxr_serialize_message_header>
 800dc48:	b00d      	add	sp, #52	@ 0x34
 800dc4a:	bd30      	pop	{r4, r5, pc}

0800dc4c <uxr_read_session_header>:
 800dc4c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800dc50:	4607      	mov	r7, r0
 800dc52:	b084      	sub	sp, #16
 800dc54:	4608      	mov	r0, r1
 800dc56:	460c      	mov	r4, r1
 800dc58:	4615      	mov	r5, r2
 800dc5a:	461e      	mov	r6, r3
 800dc5c:	f7fe fc1e 	bl	800c49c <ucdr_buffer_remaining>
 800dc60:	2808      	cmp	r0, #8
 800dc62:	d803      	bhi.n	800dc6c <uxr_read_session_header+0x20>
 800dc64:	2000      	movs	r0, #0
 800dc66:	b004      	add	sp, #16
 800dc68:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800dc6c:	f10d 080c 	add.w	r8, sp, #12
 800dc70:	4633      	mov	r3, r6
 800dc72:	462a      	mov	r2, r5
 800dc74:	f8cd 8000 	str.w	r8, [sp]
 800dc78:	4620      	mov	r0, r4
 800dc7a:	f10d 010b 	add.w	r1, sp, #11
 800dc7e:	f000 febd 	bl	800e9fc <uxr_deserialize_message_header>
 800dc82:	783a      	ldrb	r2, [r7, #0]
 800dc84:	f89d 300b 	ldrb.w	r3, [sp, #11]
 800dc88:	4293      	cmp	r3, r2
 800dc8a:	d1eb      	bne.n	800dc64 <uxr_read_session_header+0x18>
 800dc8c:	061b      	lsls	r3, r3, #24
 800dc8e:	d41c      	bmi.n	800dcca <uxr_read_session_header+0x7e>
 800dc90:	f89d 200c 	ldrb.w	r2, [sp, #12]
 800dc94:	787b      	ldrb	r3, [r7, #1]
 800dc96:	429a      	cmp	r2, r3
 800dc98:	d003      	beq.n	800dca2 <uxr_read_session_header+0x56>
 800dc9a:	2001      	movs	r0, #1
 800dc9c:	f080 0001 	eor.w	r0, r0, #1
 800dca0:	e7e1      	b.n	800dc66 <uxr_read_session_header+0x1a>
 800dca2:	f89d 200d 	ldrb.w	r2, [sp, #13]
 800dca6:	78bb      	ldrb	r3, [r7, #2]
 800dca8:	429a      	cmp	r2, r3
 800dcaa:	f107 0102 	add.w	r1, r7, #2
 800dcae:	d1f4      	bne.n	800dc9a <uxr_read_session_header+0x4e>
 800dcb0:	f89d 200e 	ldrb.w	r2, [sp, #14]
 800dcb4:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800dcb8:	429a      	cmp	r2, r3
 800dcba:	d1ee      	bne.n	800dc9a <uxr_read_session_header+0x4e>
 800dcbc:	f89d 200f 	ldrb.w	r2, [sp, #15]
 800dcc0:	784b      	ldrb	r3, [r1, #1]
 800dcc2:	429a      	cmp	r2, r3
 800dcc4:	d1e9      	bne.n	800dc9a <uxr_read_session_header+0x4e>
 800dcc6:	2000      	movs	r0, #0
 800dcc8:	e7e8      	b.n	800dc9c <uxr_read_session_header+0x50>
 800dcca:	2001      	movs	r0, #1
 800dccc:	e7cb      	b.n	800dc66 <uxr_read_session_header+0x1a>
 800dcce:	bf00      	nop

0800dcd0 <uxr_session_header_offset>:
 800dcd0:	f990 3000 	ldrsb.w	r3, [r0]
 800dcd4:	2b00      	cmp	r3, #0
 800dcd6:	bfac      	ite	ge
 800dcd8:	2008      	movge	r0, #8
 800dcda:	2004      	movlt	r0, #4
 800dcdc:	4770      	bx	lr
 800dcde:	bf00      	nop

0800dce0 <uxr_init_base_object_request>:
 800dce0:	b510      	push	{r4, lr}
 800dce2:	88c3      	ldrh	r3, [r0, #6]
 800dce4:	b082      	sub	sp, #8
 800dce6:	f64f 74f4 	movw	r4, #65524	@ 0xfff4
 800dcea:	9101      	str	r1, [sp, #4]
 800dcec:	f1a3 010a 	sub.w	r1, r3, #10
 800dcf0:	b289      	uxth	r1, r1
 800dcf2:	42a1      	cmp	r1, r4
 800dcf4:	d80e      	bhi.n	800dd14 <uxr_init_base_object_request+0x34>
 800dcf6:	3301      	adds	r3, #1
 800dcf8:	b29c      	uxth	r4, r3
 800dcfa:	f3c3 2107 	ubfx	r1, r3, #8, #8
 800dcfe:	b2db      	uxtb	r3, r3
 800dd00:	80c4      	strh	r4, [r0, #6]
 800dd02:	9801      	ldr	r0, [sp, #4]
 800dd04:	7011      	strb	r1, [r2, #0]
 800dd06:	7053      	strb	r3, [r2, #1]
 800dd08:	1c91      	adds	r1, r2, #2
 800dd0a:	f7fe fe47 	bl	800c99c <uxr_object_id_to_raw>
 800dd0e:	4620      	mov	r0, r4
 800dd10:	b002      	add	sp, #8
 800dd12:	bd10      	pop	{r4, pc}
 800dd14:	230a      	movs	r3, #10
 800dd16:	2100      	movs	r1, #0
 800dd18:	461c      	mov	r4, r3
 800dd1a:	e7f1      	b.n	800dd00 <uxr_init_base_object_request+0x20>

0800dd1c <uxr_parse_base_object_request>:
 800dd1c:	b570      	push	{r4, r5, r6, lr}
 800dd1e:	4604      	mov	r4, r0
 800dd20:	3002      	adds	r0, #2
 800dd22:	460d      	mov	r5, r1
 800dd24:	4616      	mov	r6, r2
 800dd26:	f7fe fe25 	bl	800c974 <uxr_object_id_from_raw>
 800dd2a:	f3c0 430f 	ubfx	r3, r0, #16, #16
 800dd2e:	8028      	strh	r0, [r5, #0]
 800dd30:	806b      	strh	r3, [r5, #2]
 800dd32:	7822      	ldrb	r2, [r4, #0]
 800dd34:	7863      	ldrb	r3, [r4, #1]
 800dd36:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 800dd3a:	8033      	strh	r3, [r6, #0]
 800dd3c:	bd70      	pop	{r4, r5, r6, pc}
 800dd3e:	bf00      	nop

0800dd40 <uxr_init_framing_io>:
 800dd40:	2300      	movs	r3, #0
 800dd42:	7041      	strb	r1, [r0, #1]
 800dd44:	7003      	strb	r3, [r0, #0]
 800dd46:	8583      	strh	r3, [r0, #44]	@ 0x2c
 800dd48:	4770      	bx	lr
 800dd4a:	bf00      	nop

0800dd4c <uxr_write_framed_msg>:
 800dd4c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dd50:	4617      	mov	r7, r2
 800dd52:	7842      	ldrb	r2, [r0, #1]
 800dd54:	b083      	sub	sp, #12
 800dd56:	460e      	mov	r6, r1
 800dd58:	f1a2 017d 	sub.w	r1, r2, #125	@ 0x7d
 800dd5c:	469a      	mov	sl, r3
 800dd5e:	2901      	cmp	r1, #1
 800dd60:	f04f 037e 	mov.w	r3, #126	@ 0x7e
 800dd64:	4604      	mov	r4, r0
 800dd66:	f880 3038 	strb.w	r3, [r0, #56]	@ 0x38
 800dd6a:	f8dd b038 	ldr.w	fp, [sp, #56]	@ 0x38
 800dd6e:	f89d 0034 	ldrb.w	r0, [sp, #52]	@ 0x34
 800dd72:	f240 8137 	bls.w	800dfe4 <uxr_write_framed_msg+0x298>
 800dd76:	f1a0 017d 	sub.w	r1, r0, #125	@ 0x7d
 800dd7a:	f884 2039 	strb.w	r2, [r4, #57]	@ 0x39
 800dd7e:	2901      	cmp	r1, #1
 800dd80:	f04f 0202 	mov.w	r2, #2
 800dd84:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 800dd88:	f240 808f 	bls.w	800deaa <uxr_write_framed_msg+0x15e>
 800dd8c:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800dd8e:	f884 003a 	strb.w	r0, [r4, #58]	@ 0x3a
 800dd92:	b2dd      	uxtb	r5, r3
 800dd94:	f1a5 017d 	sub.w	r1, r5, #125	@ 0x7d
 800dd98:	2203      	movs	r2, #3
 800dd9a:	2901      	cmp	r1, #1
 800dd9c:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 800dda0:	f240 809a 	bls.w	800ded8 <uxr_write_framed_msg+0x18c>
 800dda4:	18a1      	adds	r1, r4, r2
 800dda6:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800dda8:	f881 5038 	strb.w	r5, [r1, #56]	@ 0x38
 800ddac:	f3c3 2107 	ubfx	r1, r3, #8, #8
 800ddb0:	f1a1 007d 	sub.w	r0, r1, #125	@ 0x7d
 800ddb4:	3201      	adds	r2, #1
 800ddb6:	2801      	cmp	r0, #1
 800ddb8:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 800ddbc:	f240 80a0 	bls.w	800df00 <uxr_write_framed_msg+0x1b4>
 800ddc0:	18a0      	adds	r0, r4, r2
 800ddc2:	3201      	adds	r2, #1
 800ddc4:	b2d2      	uxtb	r2, r2
 800ddc6:	f880 1038 	strb.w	r1, [r0, #56]	@ 0x38
 800ddca:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 800ddce:	2b00      	cmp	r3, #0
 800ddd0:	f000 80a9 	beq.w	800df26 <uxr_write_framed_msg+0x1da>
 800ddd4:	f04f 0900 	mov.w	r9, #0
 800ddd8:	46c8      	mov	r8, r9
 800ddda:	f81a 3008 	ldrb.w	r3, [sl, r8]
 800ddde:	f1a3 017d 	sub.w	r1, r3, #125	@ 0x7d
 800dde2:	2901      	cmp	r1, #1
 800dde4:	f240 80c3 	bls.w	800df6e <uxr_write_framed_msg+0x222>
 800dde8:	2a29      	cmp	r2, #41	@ 0x29
 800ddea:	f200 809f 	bhi.w	800df2c <uxr_write_framed_msg+0x1e0>
 800ddee:	18a1      	adds	r1, r4, r2
 800ddf0:	3201      	adds	r2, #1
 800ddf2:	b2d2      	uxtb	r2, r2
 800ddf4:	f881 3038 	strb.w	r3, [r1, #56]	@ 0x38
 800ddf8:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 800ddfc:	ea89 0303 	eor.w	r3, r9, r3
 800de00:	498c      	ldr	r1, [pc, #560]	@ (800e034 <uxr_write_framed_msg+0x2e8>)
 800de02:	b2db      	uxtb	r3, r3
 800de04:	f108 0801 	add.w	r8, r8, #1
 800de08:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 800de0c:	ea83 2919 	eor.w	r9, r3, r9, lsr #8
 800de10:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800de12:	4543      	cmp	r3, r8
 800de14:	d8e1      	bhi.n	800ddda <uxr_write_framed_msg+0x8e>
 800de16:	ea4f 2319 	mov.w	r3, r9, lsr #8
 800de1a:	fa5f f889 	uxtb.w	r8, r9
 800de1e:	9301      	str	r3, [sp, #4]
 800de20:	f04f 0900 	mov.w	r9, #0
 800de24:	f1a8 0a7d 	sub.w	sl, r8, #125	@ 0x7d
 800de28:	fa5f f18a 	uxtb.w	r1, sl
 800de2c:	2901      	cmp	r1, #1
 800de2e:	d921      	bls.n	800de74 <uxr_write_framed_msg+0x128>
 800de30:	2a29      	cmp	r2, #41	@ 0x29
 800de32:	f240 80af 	bls.w	800df94 <uxr_write_framed_msg+0x248>
 800de36:	2500      	movs	r5, #0
 800de38:	e000      	b.n	800de3c <uxr_write_framed_msg+0xf0>
 800de3a:	b160      	cbz	r0, 800de56 <uxr_write_framed_msg+0x10a>
 800de3c:	f105 0138 	add.w	r1, r5, #56	@ 0x38
 800de40:	1b52      	subs	r2, r2, r5
 800de42:	465b      	mov	r3, fp
 800de44:	4421      	add	r1, r4
 800de46:	4638      	mov	r0, r7
 800de48:	47b0      	blx	r6
 800de4a:	f894 2062 	ldrb.w	r2, [r4, #98]	@ 0x62
 800de4e:	4405      	add	r5, r0
 800de50:	4295      	cmp	r5, r2
 800de52:	d3f2      	bcc.n	800de3a <uxr_write_framed_msg+0xee>
 800de54:	d003      	beq.n	800de5e <uxr_write_framed_msg+0x112>
 800de56:	2000      	movs	r0, #0
 800de58:	b003      	add	sp, #12
 800de5a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800de5e:	fa5f f18a 	uxtb.w	r1, sl
 800de62:	f04f 0300 	mov.w	r3, #0
 800de66:	2901      	cmp	r1, #1
 800de68:	f884 3062 	strb.w	r3, [r4, #98]	@ 0x62
 800de6c:	f04f 0200 	mov.w	r2, #0
 800de70:	f200 8090 	bhi.w	800df94 <uxr_write_framed_msg+0x248>
 800de74:	1c51      	adds	r1, r2, #1
 800de76:	b2c9      	uxtb	r1, r1
 800de78:	2929      	cmp	r1, #41	@ 0x29
 800de7a:	d8dc      	bhi.n	800de36 <uxr_write_framed_msg+0xea>
 800de7c:	18a5      	adds	r5, r4, r2
 800de7e:	4421      	add	r1, r4
 800de80:	3202      	adds	r2, #2
 800de82:	f088 0820 	eor.w	r8, r8, #32
 800de86:	4648      	mov	r0, r9
 800de88:	f04f 037d 	mov.w	r3, #125	@ 0x7d
 800de8c:	b2d2      	uxtb	r2, r2
 800de8e:	f885 3038 	strb.w	r3, [r5, #56]	@ 0x38
 800de92:	f04f 0901 	mov.w	r9, #1
 800de96:	f881 8038 	strb.w	r8, [r1, #56]	@ 0x38
 800de9a:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 800de9e:	2800      	cmp	r0, #0
 800dea0:	f040 8085 	bne.w	800dfae <uxr_write_framed_msg+0x262>
 800dea4:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800dea8:	e7bc      	b.n	800de24 <uxr_write_framed_msg+0xd8>
 800deaa:	4611      	mov	r1, r2
 800deac:	f04f 0c03 	mov.w	ip, #3
 800deb0:	2204      	movs	r2, #4
 800deb2:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800deb4:	4421      	add	r1, r4
 800deb6:	b2dd      	uxtb	r5, r3
 800deb8:	f04f 0e7d 	mov.w	lr, #125	@ 0x7d
 800debc:	f881 e038 	strb.w	lr, [r1, #56]	@ 0x38
 800dec0:	44a4      	add	ip, r4
 800dec2:	f1a5 017d 	sub.w	r1, r5, #125	@ 0x7d
 800dec6:	f080 0020 	eor.w	r0, r0, #32
 800deca:	2901      	cmp	r1, #1
 800decc:	f88c 0038 	strb.w	r0, [ip, #56]	@ 0x38
 800ded0:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 800ded4:	f63f af66 	bhi.w	800dda4 <uxr_write_framed_msg+0x58>
 800ded8:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800deda:	18a0      	adds	r0, r4, r2
 800dedc:	f085 0520 	eor.w	r5, r5, #32
 800dee0:	f04f 0c7d 	mov.w	ip, #125	@ 0x7d
 800dee4:	f3c3 2107 	ubfx	r1, r3, #8, #8
 800dee8:	f880 c038 	strb.w	ip, [r0, #56]	@ 0x38
 800deec:	f880 5039 	strb.w	r5, [r0, #57]	@ 0x39
 800def0:	f1a1 007d 	sub.w	r0, r1, #125	@ 0x7d
 800def4:	3202      	adds	r2, #2
 800def6:	2801      	cmp	r0, #1
 800def8:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 800defc:	f63f af60 	bhi.w	800ddc0 <uxr_write_framed_msg+0x74>
 800df00:	1c50      	adds	r0, r2, #1
 800df02:	18a5      	adds	r5, r4, r2
 800df04:	fa54 f080 	uxtab	r0, r4, r0
 800df08:	3202      	adds	r2, #2
 800df0a:	f081 0120 	eor.w	r1, r1, #32
 800df0e:	b2d2      	uxtb	r2, r2
 800df10:	f04f 0c7d 	mov.w	ip, #125	@ 0x7d
 800df14:	f885 c038 	strb.w	ip, [r5, #56]	@ 0x38
 800df18:	f880 1038 	strb.w	r1, [r0, #56]	@ 0x38
 800df1c:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 800df20:	2b00      	cmp	r3, #0
 800df22:	f47f af57 	bne.w	800ddd4 <uxr_write_framed_msg+0x88>
 800df26:	9301      	str	r3, [sp, #4]
 800df28:	4698      	mov	r8, r3
 800df2a:	e779      	b.n	800de20 <uxr_write_framed_msg+0xd4>
 800df2c:	2500      	movs	r5, #0
 800df2e:	e001      	b.n	800df34 <uxr_write_framed_msg+0x1e8>
 800df30:	2800      	cmp	r0, #0
 800df32:	d090      	beq.n	800de56 <uxr_write_framed_msg+0x10a>
 800df34:	f105 0138 	add.w	r1, r5, #56	@ 0x38
 800df38:	1b52      	subs	r2, r2, r5
 800df3a:	465b      	mov	r3, fp
 800df3c:	4421      	add	r1, r4
 800df3e:	4638      	mov	r0, r7
 800df40:	47b0      	blx	r6
 800df42:	f894 2062 	ldrb.w	r2, [r4, #98]	@ 0x62
 800df46:	4405      	add	r5, r0
 800df48:	4295      	cmp	r5, r2
 800df4a:	d3f1      	bcc.n	800df30 <uxr_write_framed_msg+0x1e4>
 800df4c:	d183      	bne.n	800de56 <uxr_write_framed_msg+0x10a>
 800df4e:	f04f 0300 	mov.w	r3, #0
 800df52:	f884 3062 	strb.w	r3, [r4, #98]	@ 0x62
 800df56:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800df58:	4543      	cmp	r3, r8
 800df5a:	d964      	bls.n	800e026 <uxr_write_framed_msg+0x2da>
 800df5c:	f81a 3008 	ldrb.w	r3, [sl, r8]
 800df60:	f1a3 017d 	sub.w	r1, r3, #125	@ 0x7d
 800df64:	2901      	cmp	r1, #1
 800df66:	f04f 0200 	mov.w	r2, #0
 800df6a:	f63f af3d 	bhi.w	800dde8 <uxr_write_framed_msg+0x9c>
 800df6e:	1c51      	adds	r1, r2, #1
 800df70:	b2c9      	uxtb	r1, r1
 800df72:	2929      	cmp	r1, #41	@ 0x29
 800df74:	d8da      	bhi.n	800df2c <uxr_write_framed_msg+0x1e0>
 800df76:	18a0      	adds	r0, r4, r2
 800df78:	4421      	add	r1, r4
 800df7a:	f04f 057d 	mov.w	r5, #125	@ 0x7d
 800df7e:	3202      	adds	r2, #2
 800df80:	f880 5038 	strb.w	r5, [r0, #56]	@ 0x38
 800df84:	b2d2      	uxtb	r2, r2
 800df86:	f083 0020 	eor.w	r0, r3, #32
 800df8a:	f881 0038 	strb.w	r0, [r1, #56]	@ 0x38
 800df8e:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 800df92:	e733      	b.n	800ddfc <uxr_write_framed_msg+0xb0>
 800df94:	18a1      	adds	r1, r4, r2
 800df96:	3201      	adds	r2, #1
 800df98:	4648      	mov	r0, r9
 800df9a:	b2d2      	uxtb	r2, r2
 800df9c:	f881 8038 	strb.w	r8, [r1, #56]	@ 0x38
 800dfa0:	f04f 0901 	mov.w	r9, #1
 800dfa4:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 800dfa8:	2800      	cmp	r0, #0
 800dfaa:	f43f af7b 	beq.w	800dea4 <uxr_write_framed_msg+0x158>
 800dfae:	2500      	movs	r5, #0
 800dfb0:	e002      	b.n	800dfb8 <uxr_write_framed_msg+0x26c>
 800dfb2:	2800      	cmp	r0, #0
 800dfb4:	f43f af4f 	beq.w	800de56 <uxr_write_framed_msg+0x10a>
 800dfb8:	f105 0138 	add.w	r1, r5, #56	@ 0x38
 800dfbc:	1b52      	subs	r2, r2, r5
 800dfbe:	465b      	mov	r3, fp
 800dfc0:	4421      	add	r1, r4
 800dfc2:	4638      	mov	r0, r7
 800dfc4:	47b0      	blx	r6
 800dfc6:	f894 2062 	ldrb.w	r2, [r4, #98]	@ 0x62
 800dfca:	4405      	add	r5, r0
 800dfcc:	4295      	cmp	r5, r2
 800dfce:	d3f0      	bcc.n	800dfb2 <uxr_write_framed_msg+0x266>
 800dfd0:	f47f af41 	bne.w	800de56 <uxr_write_framed_msg+0x10a>
 800dfd4:	2300      	movs	r3, #0
 800dfd6:	f884 3062 	strb.w	r3, [r4, #98]	@ 0x62
 800dfda:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800dfdc:	b298      	uxth	r0, r3
 800dfde:	b003      	add	sp, #12
 800dfe0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dfe4:	217d      	movs	r1, #125	@ 0x7d
 800dfe6:	f082 0220 	eor.w	r2, r2, #32
 800dfea:	f884 1039 	strb.w	r1, [r4, #57]	@ 0x39
 800dfee:	f1a0 017d 	sub.w	r1, r0, #125	@ 0x7d
 800dff2:	f884 203a 	strb.w	r2, [r4, #58]	@ 0x3a
 800dff6:	2901      	cmp	r1, #1
 800dff8:	f04f 0203 	mov.w	r2, #3
 800dffc:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 800e000:	d804      	bhi.n	800e00c <uxr_write_framed_msg+0x2c0>
 800e002:	4611      	mov	r1, r2
 800e004:	f04f 0c04 	mov.w	ip, #4
 800e008:	2205      	movs	r2, #5
 800e00a:	e752      	b.n	800deb2 <uxr_write_framed_msg+0x166>
 800e00c:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800e00e:	f884 003b 	strb.w	r0, [r4, #59]	@ 0x3b
 800e012:	b2dd      	uxtb	r5, r3
 800e014:	f1a5 017d 	sub.w	r1, r5, #125	@ 0x7d
 800e018:	2204      	movs	r2, #4
 800e01a:	2901      	cmp	r1, #1
 800e01c:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 800e020:	f63f aec0 	bhi.w	800dda4 <uxr_write_framed_msg+0x58>
 800e024:	e758      	b.n	800ded8 <uxr_write_framed_msg+0x18c>
 800e026:	ea4f 2319 	mov.w	r3, r9, lsr #8
 800e02a:	fa5f f889 	uxtb.w	r8, r9
 800e02e:	9301      	str	r3, [sp, #4]
 800e030:	2200      	movs	r2, #0
 800e032:	e6f5      	b.n	800de20 <uxr_write_framed_msg+0xd4>
 800e034:	080168b0 	.word	0x080168b0

0800e038 <uxr_framing_read_transport>:
 800e038:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e03c:	4604      	mov	r4, r0
 800e03e:	b083      	sub	sp, #12
 800e040:	461f      	mov	r7, r3
 800e042:	f8dd b034 	ldr.w	fp, [sp, #52]	@ 0x34
 800e046:	4689      	mov	r9, r1
 800e048:	4692      	mov	sl, r2
 800e04a:	f000 fc89 	bl	800e960 <uxr_millis>
 800e04e:	f894 302c 	ldrb.w	r3, [r4, #44]	@ 0x2c
 800e052:	f894 602d 	ldrb.w	r6, [r4, #45]	@ 0x2d
 800e056:	42b3      	cmp	r3, r6
 800e058:	4680      	mov	r8, r0
 800e05a:	d061      	beq.n	800e120 <uxr_framing_read_transport+0xe8>
 800e05c:	d81c      	bhi.n	800e098 <uxr_framing_read_transport+0x60>
 800e05e:	1e75      	subs	r5, r6, #1
 800e060:	1aed      	subs	r5, r5, r3
 800e062:	b2ed      	uxtb	r5, r5
 800e064:	2600      	movs	r6, #0
 800e066:	455d      	cmp	r5, fp
 800e068:	d81f      	bhi.n	800e0aa <uxr_framing_read_transport+0x72>
 800e06a:	19ab      	adds	r3, r5, r6
 800e06c:	455b      	cmp	r3, fp
 800e06e:	bf84      	itt	hi
 800e070:	ebab 0605 	subhi.w	r6, fp, r5
 800e074:	b2f6      	uxtbhi	r6, r6
 800e076:	b9ed      	cbnz	r5, 800e0b4 <uxr_framing_read_transport+0x7c>
 800e078:	f04f 0b00 	mov.w	fp, #0
 800e07c:	f000 fc70 	bl	800e960 <uxr_millis>
 800e080:	683b      	ldr	r3, [r7, #0]
 800e082:	eba0 0808 	sub.w	r8, r0, r8
 800e086:	eba3 0308 	sub.w	r3, r3, r8
 800e08a:	4658      	mov	r0, fp
 800e08c:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800e090:	603b      	str	r3, [r7, #0]
 800e092:	b003      	add	sp, #12
 800e094:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e098:	2e00      	cmp	r6, #0
 800e09a:	d049      	beq.n	800e130 <uxr_framing_read_transport+0xf8>
 800e09c:	f1c3 052a 	rsb	r5, r3, #42	@ 0x2a
 800e0a0:	b2ed      	uxtb	r5, r5
 800e0a2:	3e01      	subs	r6, #1
 800e0a4:	455d      	cmp	r5, fp
 800e0a6:	b2f6      	uxtb	r6, r6
 800e0a8:	d9df      	bls.n	800e06a <uxr_framing_read_transport+0x32>
 800e0aa:	fa5f f58b 	uxtb.w	r5, fp
 800e0ae:	2600      	movs	r6, #0
 800e0b0:	2d00      	cmp	r5, #0
 800e0b2:	d0e1      	beq.n	800e078 <uxr_framing_read_transport+0x40>
 800e0b4:	f894 102c 	ldrb.w	r1, [r4, #44]	@ 0x2c
 800e0b8:	3102      	adds	r1, #2
 800e0ba:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800e0bc:	9300      	str	r3, [sp, #0]
 800e0be:	683b      	ldr	r3, [r7, #0]
 800e0c0:	4421      	add	r1, r4
 800e0c2:	462a      	mov	r2, r5
 800e0c4:	4650      	mov	r0, sl
 800e0c6:	47c8      	blx	r9
 800e0c8:	f894 302c 	ldrb.w	r3, [r4, #44]	@ 0x2c
 800e0cc:	4a1a      	ldr	r2, [pc, #104]	@ (800e138 <uxr_framing_read_transport+0x100>)
 800e0ce:	4403      	add	r3, r0
 800e0d0:	0859      	lsrs	r1, r3, #1
 800e0d2:	fba2 2101 	umull	r2, r1, r2, r1
 800e0d6:	0889      	lsrs	r1, r1, #2
 800e0d8:	222a      	movs	r2, #42	@ 0x2a
 800e0da:	fb02 3111 	mls	r1, r2, r1, r3
 800e0de:	4683      	mov	fp, r0
 800e0e0:	f884 102c 	strb.w	r1, [r4, #44]	@ 0x2c
 800e0e4:	2800      	cmp	r0, #0
 800e0e6:	d0c7      	beq.n	800e078 <uxr_framing_read_transport+0x40>
 800e0e8:	42a8      	cmp	r0, r5
 800e0ea:	d1c7      	bne.n	800e07c <uxr_framing_read_transport+0x44>
 800e0ec:	2e00      	cmp	r6, #0
 800e0ee:	d0c5      	beq.n	800e07c <uxr_framing_read_transport+0x44>
 800e0f0:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800e0f2:	9300      	str	r3, [sp, #0]
 800e0f4:	3102      	adds	r1, #2
 800e0f6:	4632      	mov	r2, r6
 800e0f8:	4421      	add	r1, r4
 800e0fa:	2300      	movs	r3, #0
 800e0fc:	4650      	mov	r0, sl
 800e0fe:	47c8      	blx	r9
 800e100:	f894 102c 	ldrb.w	r1, [r4, #44]	@ 0x2c
 800e104:	4a0c      	ldr	r2, [pc, #48]	@ (800e138 <uxr_framing_read_transport+0x100>)
 800e106:	180b      	adds	r3, r1, r0
 800e108:	0859      	lsrs	r1, r3, #1
 800e10a:	fba2 1201 	umull	r1, r2, r2, r1
 800e10e:	0892      	lsrs	r2, r2, #2
 800e110:	212a      	movs	r1, #42	@ 0x2a
 800e112:	fb01 3312 	mls	r3, r1, r2, r3
 800e116:	eb00 0b05 	add.w	fp, r0, r5
 800e11a:	f884 302c 	strb.w	r3, [r4, #44]	@ 0x2c
 800e11e:	e7ad      	b.n	800e07c <uxr_framing_read_transport+0x44>
 800e120:	2600      	movs	r6, #0
 800e122:	f1bb 0f28 	cmp.w	fp, #40	@ 0x28
 800e126:	85a6      	strh	r6, [r4, #44]	@ 0x2c
 800e128:	d9bf      	bls.n	800e0aa <uxr_framing_read_transport+0x72>
 800e12a:	2102      	movs	r1, #2
 800e12c:	2529      	movs	r5, #41	@ 0x29
 800e12e:	e7c4      	b.n	800e0ba <uxr_framing_read_transport+0x82>
 800e130:	f1c3 0529 	rsb	r5, r3, #41	@ 0x29
 800e134:	b2ed      	uxtb	r5, r5
 800e136:	e796      	b.n	800e066 <uxr_framing_read_transport+0x2e>
 800e138:	30c30c31 	.word	0x30c30c31

0800e13c <uxr_read_framed_msg>:
 800e13c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e140:	461e      	mov	r6, r3
 800e142:	f890 502c 	ldrb.w	r5, [r0, #44]	@ 0x2c
 800e146:	f890 302d 	ldrb.w	r3, [r0, #45]	@ 0x2d
 800e14a:	429d      	cmp	r5, r3
 800e14c:	b083      	sub	sp, #12
 800e14e:	4604      	mov	r4, r0
 800e150:	4688      	mov	r8, r1
 800e152:	4691      	mov	r9, r2
 800e154:	f000 8188 	beq.w	800e468 <uxr_read_framed_msg+0x32c>
 800e158:	7823      	ldrb	r3, [r4, #0]
 800e15a:	4dc1      	ldr	r5, [pc, #772]	@ (800e460 <uxr_read_framed_msg+0x324>)
 800e15c:	4fc1      	ldr	r7, [pc, #772]	@ (800e464 <uxr_read_framed_msg+0x328>)
 800e15e:	2b07      	cmp	r3, #7
 800e160:	d8fd      	bhi.n	800e15e <uxr_read_framed_msg+0x22>
 800e162:	e8df f013 	tbh	[pc, r3, lsl #1]
 800e166:	0115      	.short	0x0115
 800e168:	00d600f6 	.word	0x00d600f6
 800e16c:	009000b9 	.word	0x009000b9
 800e170:	0030004d 	.word	0x0030004d
 800e174:	0008      	.short	0x0008
 800e176:	f894 102c 	ldrb.w	r1, [r4, #44]	@ 0x2c
 800e17a:	f894 302d 	ldrb.w	r3, [r4, #45]	@ 0x2d
 800e17e:	4299      	cmp	r1, r3
 800e180:	f000 814a 	beq.w	800e418 <uxr_read_framed_msg+0x2dc>
 800e184:	18e2      	adds	r2, r4, r3
 800e186:	7892      	ldrb	r2, [r2, #2]
 800e188:	2a7d      	cmp	r2, #125	@ 0x7d
 800e18a:	f000 8199 	beq.w	800e4c0 <uxr_read_framed_msg+0x384>
 800e18e:	3301      	adds	r3, #1
 800e190:	0858      	lsrs	r0, r3, #1
 800e192:	fba5 1000 	umull	r1, r0, r5, r0
 800e196:	0880      	lsrs	r0, r0, #2
 800e198:	212a      	movs	r1, #42	@ 0x2a
 800e19a:	fb01 3310 	mls	r3, r1, r0, r3
 800e19e:	2a7e      	cmp	r2, #126	@ 0x7e
 800e1a0:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 800e1a4:	f000 8252 	beq.w	800e64c <uxr_read_framed_msg+0x510>
 800e1a8:	8ea3      	ldrh	r3, [r4, #52]	@ 0x34
 800e1aa:	8ee1      	ldrh	r1, [r4, #54]	@ 0x36
 800e1ac:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 800e1b0:	b29b      	uxth	r3, r3
 800e1b2:	2200      	movs	r2, #0
 800e1b4:	4299      	cmp	r1, r3
 800e1b6:	86a3      	strh	r3, [r4, #52]	@ 0x34
 800e1b8:	7022      	strb	r2, [r4, #0]
 800e1ba:	f000 8179 	beq.w	800e4b0 <uxr_read_framed_msg+0x374>
 800e1be:	2000      	movs	r0, #0
 800e1c0:	b003      	add	sp, #12
 800e1c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e1c6:	f894 102c 	ldrb.w	r1, [r4, #44]	@ 0x2c
 800e1ca:	f894 302d 	ldrb.w	r3, [r4, #45]	@ 0x2d
 800e1ce:	4299      	cmp	r1, r3
 800e1d0:	f000 8131 	beq.w	800e436 <uxr_read_framed_msg+0x2fa>
 800e1d4:	18e2      	adds	r2, r4, r3
 800e1d6:	7890      	ldrb	r0, [r2, #2]
 800e1d8:	287d      	cmp	r0, #125	@ 0x7d
 800e1da:	f000 8190 	beq.w	800e4fe <uxr_read_framed_msg+0x3c2>
 800e1de:	3301      	adds	r3, #1
 800e1e0:	085a      	lsrs	r2, r3, #1
 800e1e2:	fba5 1202 	umull	r1, r2, r5, r2
 800e1e6:	0892      	lsrs	r2, r2, #2
 800e1e8:	212a      	movs	r1, #42	@ 0x2a
 800e1ea:	fb01 3312 	mls	r3, r1, r2, r3
 800e1ee:	287e      	cmp	r0, #126	@ 0x7e
 800e1f0:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 800e1f4:	f000 821a 	beq.w	800e62c <uxr_read_framed_msg+0x4f0>
 800e1f8:	2307      	movs	r3, #7
 800e1fa:	86a0      	strh	r0, [r4, #52]	@ 0x34
 800e1fc:	7023      	strb	r3, [r4, #0]
 800e1fe:	e7ae      	b.n	800e15e <uxr_read_framed_msg+0x22>
 800e200:	8e63      	ldrh	r3, [r4, #50]	@ 0x32
 800e202:	f8b4 e030 	ldrh.w	lr, [r4, #48]	@ 0x30
 800e206:	459e      	cmp	lr, r3
 800e208:	d938      	bls.n	800e27c <uxr_read_framed_msg+0x140>
 800e20a:	ee07 8a90 	vmov	s15, r8
 800e20e:	212a      	movs	r1, #42	@ 0x2a
 800e210:	e020      	b.n	800e254 <uxr_read_framed_msg+0x118>
 800e212:	f89b c002 	ldrb.w	ip, [fp, #2]
 800e216:	f1bc 0f7d 	cmp.w	ip, #125	@ 0x7d
 800e21a:	f000 80d4 	beq.w	800e3c6 <uxr_read_framed_msg+0x28a>
 800e21e:	f1bc 0f7e 	cmp.w	ip, #126	@ 0x7e
 800e222:	f884 202d 	strb.w	r2, [r4, #45]	@ 0x2d
 800e226:	f000 8219 	beq.w	800e65c <uxr_read_framed_msg+0x520>
 800e22a:	f806 c003 	strb.w	ip, [r6, r3]
 800e22e:	f8b4 a036 	ldrh.w	sl, [r4, #54]	@ 0x36
 800e232:	8e63      	ldrh	r3, [r4, #50]	@ 0x32
 800e234:	f8b4 e030 	ldrh.w	lr, [r4, #48]	@ 0x30
 800e238:	ea8a 000c 	eor.w	r0, sl, ip
 800e23c:	b2c0      	uxtb	r0, r0
 800e23e:	3301      	adds	r3, #1
 800e240:	f837 2010 	ldrh.w	r2, [r7, r0, lsl #1]
 800e244:	b29b      	uxth	r3, r3
 800e246:	ea82 221a 	eor.w	r2, r2, sl, lsr #8
 800e24a:	4573      	cmp	r3, lr
 800e24c:	8663      	strh	r3, [r4, #50]	@ 0x32
 800e24e:	86e2      	strh	r2, [r4, #54]	@ 0x36
 800e250:	f080 8120 	bcs.w	800e494 <uxr_read_framed_msg+0x358>
 800e254:	f894 002d 	ldrb.w	r0, [r4, #45]	@ 0x2d
 800e258:	f894 a02c 	ldrb.w	sl, [r4, #44]	@ 0x2c
 800e25c:	f100 0c01 	add.w	ip, r0, #1
 800e260:	ea4f 025c 	mov.w	r2, ip, lsr #1
 800e264:	fba5 8202 	umull	r8, r2, r5, r2
 800e268:	0892      	lsrs	r2, r2, #2
 800e26a:	4582      	cmp	sl, r0
 800e26c:	eb04 0b00 	add.w	fp, r4, r0
 800e270:	fb01 c212 	mls	r2, r1, r2, ip
 800e274:	d1cd      	bne.n	800e212 <uxr_read_framed_msg+0xd6>
 800e276:	ee17 8a90 	vmov	r8, s15
 800e27a:	459e      	cmp	lr, r3
 800e27c:	f040 8111 	bne.w	800e4a2 <uxr_read_framed_msg+0x366>
 800e280:	2306      	movs	r3, #6
 800e282:	7023      	strb	r3, [r4, #0]
 800e284:	e76b      	b.n	800e15e <uxr_read_framed_msg+0x22>
 800e286:	f894 002c 	ldrb.w	r0, [r4, #44]	@ 0x2c
 800e28a:	f894 302d 	ldrb.w	r3, [r4, #45]	@ 0x2d
 800e28e:	4298      	cmp	r0, r3
 800e290:	f000 80c2 	beq.w	800e418 <uxr_read_framed_msg+0x2dc>
 800e294:	18e2      	adds	r2, r4, r3
 800e296:	7891      	ldrb	r1, [r2, #2]
 800e298:	297d      	cmp	r1, #125	@ 0x7d
 800e29a:	f000 814c 	beq.w	800e536 <uxr_read_framed_msg+0x3fa>
 800e29e:	3301      	adds	r3, #1
 800e2a0:	085a      	lsrs	r2, r3, #1
 800e2a2:	fba5 0202 	umull	r0, r2, r5, r2
 800e2a6:	0892      	lsrs	r2, r2, #2
 800e2a8:	202a      	movs	r0, #42	@ 0x2a
 800e2aa:	fb00 3312 	mls	r3, r0, r2, r3
 800e2ae:	297e      	cmp	r1, #126	@ 0x7e
 800e2b0:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 800e2b4:	f000 81ca 	beq.w	800e64c <uxr_read_framed_msg+0x510>
 800e2b8:	8e23      	ldrh	r3, [r4, #48]	@ 0x30
 800e2ba:	eb03 2301 	add.w	r3, r3, r1, lsl #8
 800e2be:	990c      	ldr	r1, [sp, #48]	@ 0x30
 800e2c0:	b29b      	uxth	r3, r3
 800e2c2:	2000      	movs	r0, #0
 800e2c4:	428b      	cmp	r3, r1
 800e2c6:	8623      	strh	r3, [r4, #48]	@ 0x30
 800e2c8:	8660      	strh	r0, [r4, #50]	@ 0x32
 800e2ca:	86e0      	strh	r0, [r4, #54]	@ 0x36
 800e2cc:	f240 80df 	bls.w	800e48e <uxr_read_framed_msg+0x352>
 800e2d0:	7020      	strb	r0, [r4, #0]
 800e2d2:	b003      	add	sp, #12
 800e2d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e2d8:	f894 102c 	ldrb.w	r1, [r4, #44]	@ 0x2c
 800e2dc:	f894 302d 	ldrb.w	r3, [r4, #45]	@ 0x2d
 800e2e0:	4299      	cmp	r1, r3
 800e2e2:	f000 80a8 	beq.w	800e436 <uxr_read_framed_msg+0x2fa>
 800e2e6:	18e2      	adds	r2, r4, r3
 800e2e8:	7890      	ldrb	r0, [r2, #2]
 800e2ea:	287d      	cmp	r0, #125	@ 0x7d
 800e2ec:	f000 8164 	beq.w	800e5b8 <uxr_read_framed_msg+0x47c>
 800e2f0:	3301      	adds	r3, #1
 800e2f2:	085a      	lsrs	r2, r3, #1
 800e2f4:	fba5 1202 	umull	r1, r2, r5, r2
 800e2f8:	0892      	lsrs	r2, r2, #2
 800e2fa:	212a      	movs	r1, #42	@ 0x2a
 800e2fc:	fb01 3312 	mls	r3, r1, r2, r3
 800e300:	287e      	cmp	r0, #126	@ 0x7e
 800e302:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 800e306:	f000 8191 	beq.w	800e62c <uxr_read_framed_msg+0x4f0>
 800e30a:	2304      	movs	r3, #4
 800e30c:	8620      	strh	r0, [r4, #48]	@ 0x30
 800e30e:	7023      	strb	r3, [r4, #0]
 800e310:	e725      	b.n	800e15e <uxr_read_framed_msg+0x22>
 800e312:	f894 002c 	ldrb.w	r0, [r4, #44]	@ 0x2c
 800e316:	f894 202d 	ldrb.w	r2, [r4, #45]	@ 0x2d
 800e31a:	4290      	cmp	r0, r2
 800e31c:	f000 80b3 	beq.w	800e486 <uxr_read_framed_msg+0x34a>
 800e320:	18a3      	adds	r3, r4, r2
 800e322:	7899      	ldrb	r1, [r3, #2]
 800e324:	297d      	cmp	r1, #125	@ 0x7d
 800e326:	f000 8164 	beq.w	800e5f2 <uxr_read_framed_msg+0x4b6>
 800e32a:	3201      	adds	r2, #1
 800e32c:	0850      	lsrs	r0, r2, #1
 800e32e:	fba5 3000 	umull	r3, r0, r5, r0
 800e332:	0880      	lsrs	r0, r0, #2
 800e334:	232a      	movs	r3, #42	@ 0x2a
 800e336:	fb03 2210 	mls	r2, r3, r0, r2
 800e33a:	297e      	cmp	r1, #126	@ 0x7e
 800e33c:	f884 202d 	strb.w	r2, [r4, #45]	@ 0x2d
 800e340:	f000 8188 	beq.w	800e654 <uxr_read_framed_msg+0x518>
 800e344:	7863      	ldrb	r3, [r4, #1]
 800e346:	428b      	cmp	r3, r1
 800e348:	bf0c      	ite	eq
 800e34a:	2303      	moveq	r3, #3
 800e34c:	2300      	movne	r3, #0
 800e34e:	7023      	strb	r3, [r4, #0]
 800e350:	e705      	b.n	800e15e <uxr_read_framed_msg+0x22>
 800e352:	f894 102c 	ldrb.w	r1, [r4, #44]	@ 0x2c
 800e356:	f894 302d 	ldrb.w	r3, [r4, #45]	@ 0x2d
 800e35a:	2200      	movs	r2, #0
 800e35c:	4299      	cmp	r1, r3
 800e35e:	f884 202e 	strb.w	r2, [r4, #46]	@ 0x2e
 800e362:	d06c      	beq.n	800e43e <uxr_read_framed_msg+0x302>
 800e364:	18e2      	adds	r2, r4, r3
 800e366:	7890      	ldrb	r0, [r2, #2]
 800e368:	287d      	cmp	r0, #125	@ 0x7d
 800e36a:	f000 8101 	beq.w	800e570 <uxr_read_framed_msg+0x434>
 800e36e:	3301      	adds	r3, #1
 800e370:	085a      	lsrs	r2, r3, #1
 800e372:	fba5 1202 	umull	r1, r2, r5, r2
 800e376:	0892      	lsrs	r2, r2, #2
 800e378:	212a      	movs	r1, #42	@ 0x2a
 800e37a:	fb01 3312 	mls	r3, r1, r2, r3
 800e37e:	287e      	cmp	r0, #126	@ 0x7e
 800e380:	f884 002e 	strb.w	r0, [r4, #46]	@ 0x2e
 800e384:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 800e388:	d059      	beq.n	800e43e <uxr_read_framed_msg+0x302>
 800e38a:	2302      	movs	r3, #2
 800e38c:	7023      	strb	r3, [r4, #0]
 800e38e:	e6e6      	b.n	800e15e <uxr_read_framed_msg+0x22>
 800e390:	f894 a02c 	ldrb.w	sl, [r4, #44]	@ 0x2c
 800e394:	f894 202d 	ldrb.w	r2, [r4, #45]	@ 0x2d
 800e398:	f04f 0e2a 	mov.w	lr, #42	@ 0x2a
 800e39c:	1c51      	adds	r1, r2, #1
 800e39e:	084b      	lsrs	r3, r1, #1
 800e3a0:	fba5 c303 	umull	ip, r3, r5, r3
 800e3a4:	089b      	lsrs	r3, r3, #2
 800e3a6:	fb0e 1313 	mls	r3, lr, r3, r1
 800e3aa:	4592      	cmp	sl, r2
 800e3ac:	eb04 0002 	add.w	r0, r4, r2
 800e3b0:	b2da      	uxtb	r2, r3
 800e3b2:	f43f af04 	beq.w	800e1be <uxr_read_framed_msg+0x82>
 800e3b6:	7883      	ldrb	r3, [r0, #2]
 800e3b8:	f884 202d 	strb.w	r2, [r4, #45]	@ 0x2d
 800e3bc:	2b7e      	cmp	r3, #126	@ 0x7e
 800e3be:	d1ed      	bne.n	800e39c <uxr_read_framed_msg+0x260>
 800e3c0:	2301      	movs	r3, #1
 800e3c2:	7023      	strb	r3, [r4, #0]
 800e3c4:	e6cb      	b.n	800e15e <uxr_read_framed_msg+0x22>
 800e3c6:	f100 0c01 	add.w	ip, r0, #1
 800e3ca:	ea4f 025c 	mov.w	r2, ip, lsr #1
 800e3ce:	fba5 8202 	umull	r8, r2, r5, r2
 800e3d2:	0892      	lsrs	r2, r2, #2
 800e3d4:	fb01 c212 	mls	r2, r1, r2, ip
 800e3d8:	eb04 0c02 	add.w	ip, r4, r2
 800e3dc:	b2d2      	uxtb	r2, r2
 800e3de:	4592      	cmp	sl, r2
 800e3e0:	f100 0002 	add.w	r0, r0, #2
 800e3e4:	f43f af47 	beq.w	800e276 <uxr_read_framed_msg+0x13a>
 800e3e8:	0842      	lsrs	r2, r0, #1
 800e3ea:	f89c a002 	ldrb.w	sl, [ip, #2]
 800e3ee:	fba5 8202 	umull	r8, r2, r5, r2
 800e3f2:	0892      	lsrs	r2, r2, #2
 800e3f4:	fb01 0012 	mls	r0, r1, r2, r0
 800e3f8:	f1ba 0f7e 	cmp.w	sl, #126	@ 0x7e
 800e3fc:	f08a 0c20 	eor.w	ip, sl, #32
 800e400:	f884 002d 	strb.w	r0, [r4, #45]	@ 0x2d
 800e404:	f47f af11 	bne.w	800e22a <uxr_read_framed_msg+0xee>
 800e408:	459e      	cmp	lr, r3
 800e40a:	ee17 8a90 	vmov	r8, s15
 800e40e:	f43f af37 	beq.w	800e280 <uxr_read_framed_msg+0x144>
 800e412:	2301      	movs	r3, #1
 800e414:	7023      	strb	r3, [r4, #0]
 800e416:	e6a2      	b.n	800e15e <uxr_read_framed_msg+0x22>
 800e418:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800e41a:	9300      	str	r3, [sp, #0]
 800e41c:	2301      	movs	r3, #1
 800e41e:	9301      	str	r3, [sp, #4]
 800e420:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800e422:	464a      	mov	r2, r9
 800e424:	4641      	mov	r1, r8
 800e426:	4620      	mov	r0, r4
 800e428:	f7ff fe06 	bl	800e038 <uxr_framing_read_transport>
 800e42c:	2800      	cmp	r0, #0
 800e42e:	f43f aec6 	beq.w	800e1be <uxr_read_framed_msg+0x82>
 800e432:	7823      	ldrb	r3, [r4, #0]
 800e434:	e693      	b.n	800e15e <uxr_read_framed_msg+0x22>
 800e436:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800e438:	9300      	str	r3, [sp, #0]
 800e43a:	2302      	movs	r3, #2
 800e43c:	e7ef      	b.n	800e41e <uxr_read_framed_msg+0x2e2>
 800e43e:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800e440:	9300      	str	r3, [sp, #0]
 800e442:	2304      	movs	r3, #4
 800e444:	9301      	str	r3, [sp, #4]
 800e446:	464a      	mov	r2, r9
 800e448:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800e44a:	4641      	mov	r1, r8
 800e44c:	4620      	mov	r0, r4
 800e44e:	f7ff fdf3 	bl	800e038 <uxr_framing_read_transport>
 800e452:	2800      	cmp	r0, #0
 800e454:	d1ed      	bne.n	800e432 <uxr_read_framed_msg+0x2f6>
 800e456:	f894 302e 	ldrb.w	r3, [r4, #46]	@ 0x2e
 800e45a:	2b7e      	cmp	r3, #126	@ 0x7e
 800e45c:	d0e9      	beq.n	800e432 <uxr_read_framed_msg+0x2f6>
 800e45e:	e6ae      	b.n	800e1be <uxr_read_framed_msg+0x82>
 800e460:	30c30c31 	.word	0x30c30c31
 800e464:	080168b0 	.word	0x080168b0
 800e468:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800e46a:	9300      	str	r3, [sp, #0]
 800e46c:	2305      	movs	r3, #5
 800e46e:	9301      	str	r3, [sp, #4]
 800e470:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800e472:	f7ff fde1 	bl	800e038 <uxr_framing_read_transport>
 800e476:	f894 202d 	ldrb.w	r2, [r4, #45]	@ 0x2d
 800e47a:	f894 302c 	ldrb.w	r3, [r4, #44]	@ 0x2c
 800e47e:	429a      	cmp	r2, r3
 800e480:	f43f ae9d 	beq.w	800e1be <uxr_read_framed_msg+0x82>
 800e484:	e668      	b.n	800e158 <uxr_read_framed_msg+0x1c>
 800e486:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800e488:	9300      	str	r3, [sp, #0]
 800e48a:	2303      	movs	r3, #3
 800e48c:	e7c7      	b.n	800e41e <uxr_read_framed_msg+0x2e2>
 800e48e:	2305      	movs	r3, #5
 800e490:	7023      	strb	r3, [r4, #0]
 800e492:	e664      	b.n	800e15e <uxr_read_framed_msg+0x22>
 800e494:	ee17 8a90 	vmov	r8, s15
 800e498:	f43f aef2 	beq.w	800e280 <uxr_read_framed_msg+0x144>
 800e49c:	f1bc 0f7e 	cmp.w	ip, #126	@ 0x7e
 800e4a0:	d08e      	beq.n	800e3c0 <uxr_read_framed_msg+0x284>
 800e4a2:	ebae 0303 	sub.w	r3, lr, r3
 800e4a6:	3302      	adds	r3, #2
 800e4a8:	9301      	str	r3, [sp, #4]
 800e4aa:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800e4ac:	9300      	str	r3, [sp, #0]
 800e4ae:	e7b7      	b.n	800e420 <uxr_read_framed_msg+0x2e4>
 800e4b0:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800e4b2:	f894 302e 	ldrb.w	r3, [r4, #46]	@ 0x2e
 800e4b6:	7013      	strb	r3, [r2, #0]
 800e4b8:	8e20      	ldrh	r0, [r4, #48]	@ 0x30
 800e4ba:	b003      	add	sp, #12
 800e4bc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e4c0:	f103 0c01 	add.w	ip, r3, #1
 800e4c4:	ea4f 025c 	mov.w	r2, ip, lsr #1
 800e4c8:	fba5 0202 	umull	r0, r2, r5, r2
 800e4cc:	0892      	lsrs	r2, r2, #2
 800e4ce:	202a      	movs	r0, #42	@ 0x2a
 800e4d0:	fb00 c212 	mls	r2, r0, r2, ip
 800e4d4:	fa5f fc82 	uxtb.w	ip, r2
 800e4d8:	4561      	cmp	r1, ip
 800e4da:	d09d      	beq.n	800e418 <uxr_read_framed_msg+0x2dc>
 800e4dc:	3302      	adds	r3, #2
 800e4de:	4422      	add	r2, r4
 800e4e0:	0859      	lsrs	r1, r3, #1
 800e4e2:	7892      	ldrb	r2, [r2, #2]
 800e4e4:	fba5 c101 	umull	ip, r1, r5, r1
 800e4e8:	0889      	lsrs	r1, r1, #2
 800e4ea:	fb00 3311 	mls	r3, r0, r1, r3
 800e4ee:	2a7e      	cmp	r2, #126	@ 0x7e
 800e4f0:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 800e4f4:	f000 80aa 	beq.w	800e64c <uxr_read_framed_msg+0x510>
 800e4f8:	f082 0220 	eor.w	r2, r2, #32
 800e4fc:	e654      	b.n	800e1a8 <uxr_read_framed_msg+0x6c>
 800e4fe:	1c58      	adds	r0, r3, #1
 800e500:	0842      	lsrs	r2, r0, #1
 800e502:	fba5 c202 	umull	ip, r2, r5, r2
 800e506:	0892      	lsrs	r2, r2, #2
 800e508:	f04f 0c2a 	mov.w	ip, #42	@ 0x2a
 800e50c:	fb0c 0212 	mls	r2, ip, r2, r0
 800e510:	b2d0      	uxtb	r0, r2
 800e512:	4281      	cmp	r1, r0
 800e514:	d08f      	beq.n	800e436 <uxr_read_framed_msg+0x2fa>
 800e516:	4422      	add	r2, r4
 800e518:	3302      	adds	r3, #2
 800e51a:	7890      	ldrb	r0, [r2, #2]
 800e51c:	085a      	lsrs	r2, r3, #1
 800e51e:	fba5 1202 	umull	r1, r2, r5, r2
 800e522:	0892      	lsrs	r2, r2, #2
 800e524:	fb0c 3312 	mls	r3, ip, r2, r3
 800e528:	287e      	cmp	r0, #126	@ 0x7e
 800e52a:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 800e52e:	d07d      	beq.n	800e62c <uxr_read_framed_msg+0x4f0>
 800e530:	f080 0020 	eor.w	r0, r0, #32
 800e534:	e660      	b.n	800e1f8 <uxr_read_framed_msg+0xbc>
 800e536:	1c59      	adds	r1, r3, #1
 800e538:	084a      	lsrs	r2, r1, #1
 800e53a:	fba5 c202 	umull	ip, r2, r5, r2
 800e53e:	0892      	lsrs	r2, r2, #2
 800e540:	f04f 0c2a 	mov.w	ip, #42	@ 0x2a
 800e544:	fb0c 1212 	mls	r2, ip, r2, r1
 800e548:	b2d1      	uxtb	r1, r2
 800e54a:	4288      	cmp	r0, r1
 800e54c:	f43f af64 	beq.w	800e418 <uxr_read_framed_msg+0x2dc>
 800e550:	4422      	add	r2, r4
 800e552:	3302      	adds	r3, #2
 800e554:	7891      	ldrb	r1, [r2, #2]
 800e556:	085a      	lsrs	r2, r3, #1
 800e558:	fba5 0202 	umull	r0, r2, r5, r2
 800e55c:	0892      	lsrs	r2, r2, #2
 800e55e:	fb0c 3312 	mls	r3, ip, r2, r3
 800e562:	297e      	cmp	r1, #126	@ 0x7e
 800e564:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 800e568:	d070      	beq.n	800e64c <uxr_read_framed_msg+0x510>
 800e56a:	f081 0120 	eor.w	r1, r1, #32
 800e56e:	e6a3      	b.n	800e2b8 <uxr_read_framed_msg+0x17c>
 800e570:	f103 0c01 	add.w	ip, r3, #1
 800e574:	ea4f 025c 	mov.w	r2, ip, lsr #1
 800e578:	fba5 0202 	umull	r0, r2, r5, r2
 800e57c:	0892      	lsrs	r2, r2, #2
 800e57e:	202a      	movs	r0, #42	@ 0x2a
 800e580:	fb00 c212 	mls	r2, r0, r2, ip
 800e584:	fa5f fc82 	uxtb.w	ip, r2
 800e588:	4561      	cmp	r1, ip
 800e58a:	f43f af58 	beq.w	800e43e <uxr_read_framed_msg+0x302>
 800e58e:	4422      	add	r2, r4
 800e590:	3302      	adds	r3, #2
 800e592:	7891      	ldrb	r1, [r2, #2]
 800e594:	f884 102e 	strb.w	r1, [r4, #46]	@ 0x2e
 800e598:	085a      	lsrs	r2, r3, #1
 800e59a:	fba5 c202 	umull	ip, r2, r5, r2
 800e59e:	0892      	lsrs	r2, r2, #2
 800e5a0:	fb00 3312 	mls	r3, r0, r2, r3
 800e5a4:	297e      	cmp	r1, #126	@ 0x7e
 800e5a6:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 800e5aa:	f43f af48 	beq.w	800e43e <uxr_read_framed_msg+0x302>
 800e5ae:	f081 0120 	eor.w	r1, r1, #32
 800e5b2:	f884 102e 	strb.w	r1, [r4, #46]	@ 0x2e
 800e5b6:	e6e8      	b.n	800e38a <uxr_read_framed_msg+0x24e>
 800e5b8:	1c58      	adds	r0, r3, #1
 800e5ba:	0842      	lsrs	r2, r0, #1
 800e5bc:	fba5 c202 	umull	ip, r2, r5, r2
 800e5c0:	0892      	lsrs	r2, r2, #2
 800e5c2:	f04f 0c2a 	mov.w	ip, #42	@ 0x2a
 800e5c6:	fb0c 0212 	mls	r2, ip, r2, r0
 800e5ca:	b2d0      	uxtb	r0, r2
 800e5cc:	4281      	cmp	r1, r0
 800e5ce:	f43f af32 	beq.w	800e436 <uxr_read_framed_msg+0x2fa>
 800e5d2:	4422      	add	r2, r4
 800e5d4:	3302      	adds	r3, #2
 800e5d6:	7890      	ldrb	r0, [r2, #2]
 800e5d8:	085a      	lsrs	r2, r3, #1
 800e5da:	fba5 1202 	umull	r1, r2, r5, r2
 800e5de:	0892      	lsrs	r2, r2, #2
 800e5e0:	fb0c 3312 	mls	r3, ip, r2, r3
 800e5e4:	287e      	cmp	r0, #126	@ 0x7e
 800e5e6:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 800e5ea:	d01f      	beq.n	800e62c <uxr_read_framed_msg+0x4f0>
 800e5ec:	f080 0020 	eor.w	r0, r0, #32
 800e5f0:	e68b      	b.n	800e30a <uxr_read_framed_msg+0x1ce>
 800e5f2:	1c51      	adds	r1, r2, #1
 800e5f4:	084b      	lsrs	r3, r1, #1
 800e5f6:	fba5 c303 	umull	ip, r3, r5, r3
 800e5fa:	089b      	lsrs	r3, r3, #2
 800e5fc:	f04f 0c2a 	mov.w	ip, #42	@ 0x2a
 800e600:	fb0c 1313 	mls	r3, ip, r3, r1
 800e604:	b2d9      	uxtb	r1, r3
 800e606:	4288      	cmp	r0, r1
 800e608:	f43f af3d 	beq.w	800e486 <uxr_read_framed_msg+0x34a>
 800e60c:	3202      	adds	r2, #2
 800e60e:	4423      	add	r3, r4
 800e610:	0850      	lsrs	r0, r2, #1
 800e612:	789b      	ldrb	r3, [r3, #2]
 800e614:	fba5 1000 	umull	r1, r0, r5, r0
 800e618:	0880      	lsrs	r0, r0, #2
 800e61a:	fb0c 2210 	mls	r2, ip, r0, r2
 800e61e:	2b7e      	cmp	r3, #126	@ 0x7e
 800e620:	f884 202d 	strb.w	r2, [r4, #45]	@ 0x2d
 800e624:	d016      	beq.n	800e654 <uxr_read_framed_msg+0x518>
 800e626:	f083 0120 	eor.w	r1, r3, #32
 800e62a:	e68b      	b.n	800e344 <uxr_read_framed_msg+0x208>
 800e62c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800e62e:	9300      	str	r3, [sp, #0]
 800e630:	2302      	movs	r3, #2
 800e632:	9301      	str	r3, [sp, #4]
 800e634:	464a      	mov	r2, r9
 800e636:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800e638:	4641      	mov	r1, r8
 800e63a:	4620      	mov	r0, r4
 800e63c:	f7ff fcfc 	bl	800e038 <uxr_framing_read_transport>
 800e640:	2800      	cmp	r0, #0
 800e642:	f47f aef6 	bne.w	800e432 <uxr_read_framed_msg+0x2f6>
 800e646:	2301      	movs	r3, #1
 800e648:	7023      	strb	r3, [r4, #0]
 800e64a:	e588      	b.n	800e15e <uxr_read_framed_msg+0x22>
 800e64c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800e64e:	9300      	str	r3, [sp, #0]
 800e650:	2301      	movs	r3, #1
 800e652:	e7ee      	b.n	800e632 <uxr_read_framed_msg+0x4f6>
 800e654:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800e656:	9300      	str	r3, [sp, #0]
 800e658:	2303      	movs	r3, #3
 800e65a:	e7ea      	b.n	800e632 <uxr_read_framed_msg+0x4f6>
 800e65c:	ee17 8a90 	vmov	r8, s15
 800e660:	e6ae      	b.n	800e3c0 <uxr_read_framed_msg+0x284>
 800e662:	bf00      	nop

0800e664 <uxr_stream_id>:
 800e664:	2901      	cmp	r1, #1
 800e666:	b082      	sub	sp, #8
 800e668:	d01d      	beq.n	800e6a6 <uxr_stream_id+0x42>
 800e66a:	2902      	cmp	r1, #2
 800e66c:	f04f 0c00 	mov.w	ip, #0
 800e670:	d01e      	beq.n	800e6b0 <uxr_stream_id+0x4c>
 800e672:	2300      	movs	r3, #0
 800e674:	f36c 0307 	bfi	r3, ip, #0, #8
 800e678:	f360 230f 	bfi	r3, r0, #8, #8
 800e67c:	f361 4317 	bfi	r3, r1, #16, #8
 800e680:	f362 631f 	bfi	r3, r2, #24, #8
 800e684:	b2da      	uxtb	r2, r3
 800e686:	2000      	movs	r0, #0
 800e688:	f362 0007 	bfi	r0, r2, #0, #8
 800e68c:	f3c3 2207 	ubfx	r2, r3, #8, #8
 800e690:	f362 200f 	bfi	r0, r2, #8, #8
 800e694:	f3c3 4207 	ubfx	r2, r3, #16, #8
 800e698:	f362 4017 	bfi	r0, r2, #16, #8
 800e69c:	0e1b      	lsrs	r3, r3, #24
 800e69e:	f363 601f 	bfi	r0, r3, #24, #8
 800e6a2:	b002      	add	sp, #8
 800e6a4:	4770      	bx	lr
 800e6a6:	f100 0c01 	add.w	ip, r0, #1
 800e6aa:	fa5f fc8c 	uxtb.w	ip, ip
 800e6ae:	e7e0      	b.n	800e672 <uxr_stream_id+0xe>
 800e6b0:	f080 0c80 	eor.w	ip, r0, #128	@ 0x80
 800e6b4:	e7dd      	b.n	800e672 <uxr_stream_id+0xe>
 800e6b6:	bf00      	nop

0800e6b8 <uxr_stream_id_from_raw>:
 800e6b8:	b082      	sub	sp, #8
 800e6ba:	b130      	cbz	r0, 800e6ca <uxr_stream_id_from_raw+0x12>
 800e6bc:	0603      	lsls	r3, r0, #24
 800e6be:	d420      	bmi.n	800e702 <uxr_stream_id_from_raw+0x4a>
 800e6c0:	1e42      	subs	r2, r0, #1
 800e6c2:	b2d2      	uxtb	r2, r2
 800e6c4:	f04f 0c01 	mov.w	ip, #1
 800e6c8:	e001      	b.n	800e6ce <uxr_stream_id_from_raw+0x16>
 800e6ca:	4684      	mov	ip, r0
 800e6cc:	4602      	mov	r2, r0
 800e6ce:	2300      	movs	r3, #0
 800e6d0:	f360 0307 	bfi	r3, r0, #0, #8
 800e6d4:	f362 230f 	bfi	r3, r2, #8, #8
 800e6d8:	f36c 4317 	bfi	r3, ip, #16, #8
 800e6dc:	f361 631f 	bfi	r3, r1, #24, #8
 800e6e0:	b2da      	uxtb	r2, r3
 800e6e2:	2000      	movs	r0, #0
 800e6e4:	f362 0007 	bfi	r0, r2, #0, #8
 800e6e8:	f3c3 2207 	ubfx	r2, r3, #8, #8
 800e6ec:	f362 200f 	bfi	r0, r2, #8, #8
 800e6f0:	f3c3 4207 	ubfx	r2, r3, #16, #8
 800e6f4:	f362 4017 	bfi	r0, r2, #16, #8
 800e6f8:	0e1b      	lsrs	r3, r3, #24
 800e6fa:	f363 601f 	bfi	r0, r3, #24, #8
 800e6fe:	b002      	add	sp, #8
 800e700:	4770      	bx	lr
 800e702:	f080 0280 	eor.w	r2, r0, #128	@ 0x80
 800e706:	f04f 0c02 	mov.w	ip, #2
 800e70a:	e7e0      	b.n	800e6ce <uxr_stream_id_from_raw+0x16>

0800e70c <uxr_init_stream_storage>:
 800e70c:	2300      	movs	r3, #0
 800e70e:	7403      	strb	r3, [r0, #16]
 800e710:	f880 3040 	strb.w	r3, [r0, #64]	@ 0x40
 800e714:	f880 3044 	strb.w	r3, [r0, #68]	@ 0x44
 800e718:	f880 3060 	strb.w	r3, [r0, #96]	@ 0x60
 800e71c:	4770      	bx	lr
 800e71e:	bf00      	nop

0800e720 <uxr_reset_stream_storage>:
 800e720:	b570      	push	{r4, r5, r6, lr}
 800e722:	7c03      	ldrb	r3, [r0, #16]
 800e724:	4604      	mov	r4, r0
 800e726:	b153      	cbz	r3, 800e73e <uxr_reset_stream_storage+0x1e>
 800e728:	4606      	mov	r6, r0
 800e72a:	2500      	movs	r5, #0
 800e72c:	4630      	mov	r0, r6
 800e72e:	f005 fbb7 	bl	8013ea0 <uxr_reset_output_best_effort_stream>
 800e732:	7c23      	ldrb	r3, [r4, #16]
 800e734:	3501      	adds	r5, #1
 800e736:	42ab      	cmp	r3, r5
 800e738:	f106 0610 	add.w	r6, r6, #16
 800e73c:	d8f6      	bhi.n	800e72c <uxr_reset_stream_storage+0xc>
 800e73e:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 800e742:	b163      	cbz	r3, 800e75e <uxr_reset_stream_storage+0x3e>
 800e744:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800e748:	2500      	movs	r5, #0
 800e74a:	4630      	mov	r0, r6
 800e74c:	f005 f9aa 	bl	8013aa4 <uxr_reset_input_best_effort_stream>
 800e750:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 800e754:	3501      	adds	r5, #1
 800e756:	42ab      	cmp	r3, r5
 800e758:	f106 0602 	add.w	r6, r6, #2
 800e75c:	d8f5      	bhi.n	800e74a <uxr_reset_stream_storage+0x2a>
 800e75e:	f894 3040 	ldrb.w	r3, [r4, #64]	@ 0x40
 800e762:	b163      	cbz	r3, 800e77e <uxr_reset_stream_storage+0x5e>
 800e764:	f104 0618 	add.w	r6, r4, #24
 800e768:	2500      	movs	r5, #0
 800e76a:	4630      	mov	r0, r6
 800e76c:	f005 fc44 	bl	8013ff8 <uxr_reset_output_reliable_stream>
 800e770:	f894 3040 	ldrb.w	r3, [r4, #64]	@ 0x40
 800e774:	3501      	adds	r5, #1
 800e776:	42ab      	cmp	r3, r5
 800e778:	f106 0628 	add.w	r6, r6, #40	@ 0x28
 800e77c:	d8f5      	bhi.n	800e76a <uxr_reset_stream_storage+0x4a>
 800e77e:	f894 3060 	ldrb.w	r3, [r4, #96]	@ 0x60
 800e782:	b163      	cbz	r3, 800e79e <uxr_reset_stream_storage+0x7e>
 800e784:	f104 0648 	add.w	r6, r4, #72	@ 0x48
 800e788:	2500      	movs	r5, #0
 800e78a:	4630      	mov	r0, r6
 800e78c:	f005 f9fe 	bl	8013b8c <uxr_reset_input_reliable_stream>
 800e790:	f894 3060 	ldrb.w	r3, [r4, #96]	@ 0x60
 800e794:	3501      	adds	r5, #1
 800e796:	42ab      	cmp	r3, r5
 800e798:	f106 0618 	add.w	r6, r6, #24
 800e79c:	d8f5      	bhi.n	800e78a <uxr_reset_stream_storage+0x6a>
 800e79e:	bd70      	pop	{r4, r5, r6, pc}

0800e7a0 <uxr_add_output_best_effort_buffer>:
 800e7a0:	b510      	push	{r4, lr}
 800e7a2:	7c04      	ldrb	r4, [r0, #16]
 800e7a4:	f104 0c01 	add.w	ip, r4, #1
 800e7a8:	b082      	sub	sp, #8
 800e7aa:	f880 c010 	strb.w	ip, [r0, #16]
 800e7ae:	eb00 1004 	add.w	r0, r0, r4, lsl #4
 800e7b2:	f005 fb6b 	bl	8013e8c <uxr_init_output_best_effort_stream>
 800e7b6:	2201      	movs	r2, #1
 800e7b8:	4611      	mov	r1, r2
 800e7ba:	4620      	mov	r0, r4
 800e7bc:	b002      	add	sp, #8
 800e7be:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e7c2:	f7ff bf4f 	b.w	800e664 <uxr_stream_id>
 800e7c6:	bf00      	nop

0800e7c8 <uxr_add_output_reliable_buffer>:
 800e7c8:	b510      	push	{r4, lr}
 800e7ca:	b084      	sub	sp, #16
 800e7cc:	4684      	mov	ip, r0
 800e7ce:	f89d 0018 	ldrb.w	r0, [sp, #24]
 800e7d2:	9000      	str	r0, [sp, #0]
 800e7d4:	f89c 4040 	ldrb.w	r4, [ip, #64]	@ 0x40
 800e7d8:	2028      	movs	r0, #40	@ 0x28
 800e7da:	fb00 c004 	mla	r0, r0, r4, ip
 800e7de:	f104 0e01 	add.w	lr, r4, #1
 800e7e2:	3018      	adds	r0, #24
 800e7e4:	f88c e040 	strb.w	lr, [ip, #64]	@ 0x40
 800e7e8:	f005 fbce 	bl	8013f88 <uxr_init_output_reliable_stream>
 800e7ec:	2201      	movs	r2, #1
 800e7ee:	2102      	movs	r1, #2
 800e7f0:	4620      	mov	r0, r4
 800e7f2:	b004      	add	sp, #16
 800e7f4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e7f8:	f7ff bf34 	b.w	800e664 <uxr_stream_id>

0800e7fc <uxr_add_input_best_effort_buffer>:
 800e7fc:	b510      	push	{r4, lr}
 800e7fe:	f890 4044 	ldrb.w	r4, [r0, #68]	@ 0x44
 800e802:	4603      	mov	r3, r0
 800e804:	1c62      	adds	r2, r4, #1
 800e806:	f104 0021 	add.w	r0, r4, #33	@ 0x21
 800e80a:	b082      	sub	sp, #8
 800e80c:	eb03 0040 	add.w	r0, r3, r0, lsl #1
 800e810:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800e814:	f005 f942 	bl	8013a9c <uxr_init_input_best_effort_stream>
 800e818:	2200      	movs	r2, #0
 800e81a:	2101      	movs	r1, #1
 800e81c:	4620      	mov	r0, r4
 800e81e:	b002      	add	sp, #8
 800e820:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e824:	f7ff bf1e 	b.w	800e664 <uxr_stream_id>

0800e828 <uxr_add_input_reliable_buffer>:
 800e828:	b510      	push	{r4, lr}
 800e82a:	b084      	sub	sp, #16
 800e82c:	4684      	mov	ip, r0
 800e82e:	9806      	ldr	r0, [sp, #24]
 800e830:	9000      	str	r0, [sp, #0]
 800e832:	f89c 4060 	ldrb.w	r4, [ip, #96]	@ 0x60
 800e836:	2018      	movs	r0, #24
 800e838:	fb00 c004 	mla	r0, r0, r4, ip
 800e83c:	f104 0e01 	add.w	lr, r4, #1
 800e840:	3048      	adds	r0, #72	@ 0x48
 800e842:	f88c e060 	strb.w	lr, [ip, #96]	@ 0x60
 800e846:	f005 f975 	bl	8013b34 <uxr_init_input_reliable_stream>
 800e84a:	2200      	movs	r2, #0
 800e84c:	2102      	movs	r1, #2
 800e84e:	4620      	mov	r0, r4
 800e850:	b004      	add	sp, #16
 800e852:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e856:	f7ff bf05 	b.w	800e664 <uxr_stream_id>
 800e85a:	bf00      	nop

0800e85c <uxr_get_output_best_effort_stream>:
 800e85c:	7c03      	ldrb	r3, [r0, #16]
 800e85e:	428b      	cmp	r3, r1
 800e860:	bf8c      	ite	hi
 800e862:	eb00 1001 	addhi.w	r0, r0, r1, lsl #4
 800e866:	2000      	movls	r0, #0
 800e868:	4770      	bx	lr
 800e86a:	bf00      	nop

0800e86c <uxr_get_output_reliable_stream>:
 800e86c:	f890 3040 	ldrb.w	r3, [r0, #64]	@ 0x40
 800e870:	428b      	cmp	r3, r1
 800e872:	bf83      	ittte	hi
 800e874:	2328      	movhi	r3, #40	@ 0x28
 800e876:	fb03 0001 	mlahi	r0, r3, r1, r0
 800e87a:	3018      	addhi	r0, #24
 800e87c:	2000      	movls	r0, #0
 800e87e:	4770      	bx	lr

0800e880 <uxr_get_input_best_effort_stream>:
 800e880:	f890 3044 	ldrb.w	r3, [r0, #68]	@ 0x44
 800e884:	428b      	cmp	r3, r1
 800e886:	bf86      	itte	hi
 800e888:	3121      	addhi	r1, #33	@ 0x21
 800e88a:	eb00 0041 	addhi.w	r0, r0, r1, lsl #1
 800e88e:	2000      	movls	r0, #0
 800e890:	4770      	bx	lr
 800e892:	bf00      	nop

0800e894 <uxr_get_input_reliable_stream>:
 800e894:	f890 3060 	ldrb.w	r3, [r0, #96]	@ 0x60
 800e898:	428b      	cmp	r3, r1
 800e89a:	bf83      	ittte	hi
 800e89c:	2318      	movhi	r3, #24
 800e89e:	fb03 0001 	mlahi	r0, r3, r1, r0
 800e8a2:	3048      	addhi	r0, #72	@ 0x48
 800e8a4:	2000      	movls	r0, #0
 800e8a6:	4770      	bx	lr

0800e8a8 <uxr_output_streams_confirmed>:
 800e8a8:	f890 3040 	ldrb.w	r3, [r0, #64]	@ 0x40
 800e8ac:	b183      	cbz	r3, 800e8d0 <uxr_output_streams_confirmed+0x28>
 800e8ae:	b570      	push	{r4, r5, r6, lr}
 800e8b0:	4606      	mov	r6, r0
 800e8b2:	f100 0518 	add.w	r5, r0, #24
 800e8b6:	2400      	movs	r4, #0
 800e8b8:	e001      	b.n	800e8be <uxr_output_streams_confirmed+0x16>
 800e8ba:	3528      	adds	r5, #40	@ 0x28
 800e8bc:	b138      	cbz	r0, 800e8ce <uxr_output_streams_confirmed+0x26>
 800e8be:	4628      	mov	r0, r5
 800e8c0:	f005 fe0a 	bl	80144d8 <uxr_is_output_up_to_date>
 800e8c4:	f896 3040 	ldrb.w	r3, [r6, #64]	@ 0x40
 800e8c8:	3401      	adds	r4, #1
 800e8ca:	42a3      	cmp	r3, r4
 800e8cc:	d8f5      	bhi.n	800e8ba <uxr_output_streams_confirmed+0x12>
 800e8ce:	bd70      	pop	{r4, r5, r6, pc}
 800e8d0:	2001      	movs	r0, #1
 800e8d2:	4770      	bx	lr

0800e8d4 <uxr_buffer_submessage_header>:
 800e8d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e8d6:	4604      	mov	r4, r0
 800e8d8:	460e      	mov	r6, r1
 800e8da:	2104      	movs	r1, #4
 800e8dc:	4615      	mov	r5, r2
 800e8de:	461f      	mov	r7, r3
 800e8e0:	f7fd fdc6 	bl	800c470 <ucdr_align_to>
 800e8e4:	2301      	movs	r3, #1
 800e8e6:	ea47 0203 	orr.w	r2, r7, r3
 800e8ea:	4631      	mov	r1, r6
 800e8ec:	7523      	strb	r3, [r4, #20]
 800e8ee:	4620      	mov	r0, r4
 800e8f0:	462b      	mov	r3, r5
 800e8f2:	f000 f8a3 	bl	800ea3c <uxr_serialize_submessage_header>
 800e8f6:	4620      	mov	r0, r4
 800e8f8:	f7fd fdd0 	bl	800c49c <ucdr_buffer_remaining>
 800e8fc:	42a8      	cmp	r0, r5
 800e8fe:	bf34      	ite	cc
 800e900:	2000      	movcc	r0, #0
 800e902:	2001      	movcs	r0, #1
 800e904:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e906:	bf00      	nop

0800e908 <uxr_read_submessage_header>:
 800e908:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e90c:	4604      	mov	r4, r0
 800e90e:	460d      	mov	r5, r1
 800e910:	2104      	movs	r1, #4
 800e912:	4616      	mov	r6, r2
 800e914:	4698      	mov	r8, r3
 800e916:	f7fd fdab 	bl	800c470 <ucdr_align_to>
 800e91a:	4620      	mov	r0, r4
 800e91c:	f7fd fdbe 	bl	800c49c <ucdr_buffer_remaining>
 800e920:	2803      	cmp	r0, #3
 800e922:	bf8c      	ite	hi
 800e924:	2701      	movhi	r7, #1
 800e926:	2700      	movls	r7, #0
 800e928:	d802      	bhi.n	800e930 <uxr_read_submessage_header+0x28>
 800e92a:	4638      	mov	r0, r7
 800e92c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e930:	4633      	mov	r3, r6
 800e932:	4642      	mov	r2, r8
 800e934:	4620      	mov	r0, r4
 800e936:	4629      	mov	r1, r5
 800e938:	f000 f894 	bl	800ea64 <uxr_deserialize_submessage_header>
 800e93c:	f898 3000 	ldrb.w	r3, [r8]
 800e940:	f003 0201 	and.w	r2, r3, #1
 800e944:	f003 03fe 	and.w	r3, r3, #254	@ 0xfe
 800e948:	f888 3000 	strb.w	r3, [r8]
 800e94c:	7522      	strb	r2, [r4, #20]
 800e94e:	4638      	mov	r0, r7
 800e950:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800e954 <uxr_submessage_padding>:
 800e954:	f010 0003 	ands.w	r0, r0, #3
 800e958:	bf18      	it	ne
 800e95a:	f1c0 0004 	rsbne	r0, r0, #4
 800e95e:	4770      	bx	lr

0800e960 <uxr_millis>:
 800e960:	b510      	push	{r4, lr}
 800e962:	b084      	sub	sp, #16
 800e964:	4669      	mov	r1, sp
 800e966:	2001      	movs	r0, #1
 800e968:	f7f3 fb52 	bl	8002010 <clock_gettime>
 800e96c:	e89d 0015 	ldmia.w	sp, {r0, r2, r4}
 800e970:	4906      	ldr	r1, [pc, #24]	@ (800e98c <uxr_millis+0x2c>)
 800e972:	fba0 0301 	umull	r0, r3, r0, r1
 800e976:	1900      	adds	r0, r0, r4
 800e978:	fb01 3102 	mla	r1, r1, r2, r3
 800e97c:	eb41 71e4 	adc.w	r1, r1, r4, asr #31
 800e980:	4a03      	ldr	r2, [pc, #12]	@ (800e990 <uxr_millis+0x30>)
 800e982:	2300      	movs	r3, #0
 800e984:	f7f2 f8d2 	bl	8000b2c <__aeabi_ldivmod>
 800e988:	b004      	add	sp, #16
 800e98a:	bd10      	pop	{r4, pc}
 800e98c:	3b9aca00 	.word	0x3b9aca00
 800e990:	000f4240 	.word	0x000f4240

0800e994 <uxr_nanos>:
 800e994:	b510      	push	{r4, lr}
 800e996:	b084      	sub	sp, #16
 800e998:	4669      	mov	r1, sp
 800e99a:	2001      	movs	r0, #1
 800e99c:	f7f3 fb38 	bl	8002010 <clock_gettime>
 800e9a0:	4a06      	ldr	r2, [pc, #24]	@ (800e9bc <uxr_nanos+0x28>)
 800e9a2:	9800      	ldr	r0, [sp, #0]
 800e9a4:	9902      	ldr	r1, [sp, #8]
 800e9a6:	9c01      	ldr	r4, [sp, #4]
 800e9a8:	fba0 0302 	umull	r0, r3, r0, r2
 800e9ac:	1840      	adds	r0, r0, r1
 800e9ae:	fb02 3304 	mla	r3, r2, r4, r3
 800e9b2:	eb43 71e1 	adc.w	r1, r3, r1, asr #31
 800e9b6:	b004      	add	sp, #16
 800e9b8:	bd10      	pop	{r4, pc}
 800e9ba:	bf00      	nop
 800e9bc:	3b9aca00 	.word	0x3b9aca00

0800e9c0 <uxr_serialize_message_header>:
 800e9c0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e9c2:	b083      	sub	sp, #12
 800e9c4:	4616      	mov	r6, r2
 800e9c6:	4604      	mov	r4, r0
 800e9c8:	9301      	str	r3, [sp, #4]
 800e9ca:	460d      	mov	r5, r1
 800e9cc:	9f08      	ldr	r7, [sp, #32]
 800e9ce:	f7fc fd89 	bl	800b4e4 <ucdr_serialize_uint8_t>
 800e9d2:	4631      	mov	r1, r6
 800e9d4:	4620      	mov	r0, r4
 800e9d6:	f7fc fd85 	bl	800b4e4 <ucdr_serialize_uint8_t>
 800e9da:	9a01      	ldr	r2, [sp, #4]
 800e9dc:	2101      	movs	r1, #1
 800e9de:	4620      	mov	r0, r4
 800e9e0:	f7fc fe2c 	bl	800b63c <ucdr_serialize_endian_uint16_t>
 800e9e4:	062b      	lsls	r3, r5, #24
 800e9e6:	d501      	bpl.n	800e9ec <uxr_serialize_message_header+0x2c>
 800e9e8:	b003      	add	sp, #12
 800e9ea:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e9ec:	2204      	movs	r2, #4
 800e9ee:	4639      	mov	r1, r7
 800e9f0:	4620      	mov	r0, r4
 800e9f2:	b003      	add	sp, #12
 800e9f4:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 800e9f8:	f004 bf18 	b.w	801382c <ucdr_serialize_array_uint8_t>

0800e9fc <uxr_deserialize_message_header>:
 800e9fc:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e9fe:	b083      	sub	sp, #12
 800ea00:	4616      	mov	r6, r2
 800ea02:	4604      	mov	r4, r0
 800ea04:	9301      	str	r3, [sp, #4]
 800ea06:	460d      	mov	r5, r1
 800ea08:	9f08      	ldr	r7, [sp, #32]
 800ea0a:	f7fc fd81 	bl	800b510 <ucdr_deserialize_uint8_t>
 800ea0e:	4631      	mov	r1, r6
 800ea10:	4620      	mov	r0, r4
 800ea12:	f7fc fd7d 	bl	800b510 <ucdr_deserialize_uint8_t>
 800ea16:	9a01      	ldr	r2, [sp, #4]
 800ea18:	2101      	movs	r1, #1
 800ea1a:	4620      	mov	r0, r4
 800ea1c:	f7fc ff02 	bl	800b824 <ucdr_deserialize_endian_uint16_t>
 800ea20:	f995 3000 	ldrsb.w	r3, [r5]
 800ea24:	2b00      	cmp	r3, #0
 800ea26:	da01      	bge.n	800ea2c <uxr_deserialize_message_header+0x30>
 800ea28:	b003      	add	sp, #12
 800ea2a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ea2c:	2204      	movs	r2, #4
 800ea2e:	4639      	mov	r1, r7
 800ea30:	4620      	mov	r0, r4
 800ea32:	b003      	add	sp, #12
 800ea34:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 800ea38:	f004 bf5c 	b.w	80138f4 <ucdr_deserialize_array_uint8_t>

0800ea3c <uxr_serialize_submessage_header>:
 800ea3c:	b530      	push	{r4, r5, lr}
 800ea3e:	b083      	sub	sp, #12
 800ea40:	4615      	mov	r5, r2
 800ea42:	4604      	mov	r4, r0
 800ea44:	9301      	str	r3, [sp, #4]
 800ea46:	f7fc fd4d 	bl	800b4e4 <ucdr_serialize_uint8_t>
 800ea4a:	4629      	mov	r1, r5
 800ea4c:	4620      	mov	r0, r4
 800ea4e:	f7fc fd49 	bl	800b4e4 <ucdr_serialize_uint8_t>
 800ea52:	9a01      	ldr	r2, [sp, #4]
 800ea54:	2101      	movs	r1, #1
 800ea56:	4620      	mov	r0, r4
 800ea58:	b003      	add	sp, #12
 800ea5a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800ea5e:	f7fc bded 	b.w	800b63c <ucdr_serialize_endian_uint16_t>
 800ea62:	bf00      	nop

0800ea64 <uxr_deserialize_submessage_header>:
 800ea64:	b530      	push	{r4, r5, lr}
 800ea66:	b083      	sub	sp, #12
 800ea68:	4615      	mov	r5, r2
 800ea6a:	4604      	mov	r4, r0
 800ea6c:	9301      	str	r3, [sp, #4]
 800ea6e:	f7fc fd4f 	bl	800b510 <ucdr_deserialize_uint8_t>
 800ea72:	4629      	mov	r1, r5
 800ea74:	4620      	mov	r0, r4
 800ea76:	f7fc fd4b 	bl	800b510 <ucdr_deserialize_uint8_t>
 800ea7a:	9a01      	ldr	r2, [sp, #4]
 800ea7c:	2101      	movs	r1, #1
 800ea7e:	4620      	mov	r0, r4
 800ea80:	b003      	add	sp, #12
 800ea82:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800ea86:	f7fc becd 	b.w	800b824 <ucdr_deserialize_endian_uint16_t>
 800ea8a:	bf00      	nop

0800ea8c <uxr_serialize_CLIENT_Representation>:
 800ea8c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ea90:	2204      	movs	r2, #4
 800ea92:	460e      	mov	r6, r1
 800ea94:	4605      	mov	r5, r0
 800ea96:	f004 fec9 	bl	801382c <ucdr_serialize_array_uint8_t>
 800ea9a:	2202      	movs	r2, #2
 800ea9c:	4607      	mov	r7, r0
 800ea9e:	1d31      	adds	r1, r6, #4
 800eaa0:	4628      	mov	r0, r5
 800eaa2:	f004 fec3 	bl	801382c <ucdr_serialize_array_uint8_t>
 800eaa6:	4038      	ands	r0, r7
 800eaa8:	2202      	movs	r2, #2
 800eaaa:	1db1      	adds	r1, r6, #6
 800eaac:	b2c7      	uxtb	r7, r0
 800eaae:	4628      	mov	r0, r5
 800eab0:	f004 febc 	bl	801382c <ucdr_serialize_array_uint8_t>
 800eab4:	2204      	movs	r2, #4
 800eab6:	4007      	ands	r7, r0
 800eab8:	f106 0108 	add.w	r1, r6, #8
 800eabc:	4628      	mov	r0, r5
 800eabe:	f004 feb5 	bl	801382c <ucdr_serialize_array_uint8_t>
 800eac2:	7b31      	ldrb	r1, [r6, #12]
 800eac4:	4007      	ands	r7, r0
 800eac6:	4628      	mov	r0, r5
 800eac8:	f7fc fd0c 	bl	800b4e4 <ucdr_serialize_uint8_t>
 800eacc:	7b71      	ldrb	r1, [r6, #13]
 800eace:	4007      	ands	r7, r0
 800ead0:	4628      	mov	r0, r5
 800ead2:	f7fc fcd9 	bl	800b488 <ucdr_serialize_bool>
 800ead6:	7b73      	ldrb	r3, [r6, #13]
 800ead8:	ea07 0800 	and.w	r8, r7, r0
 800eadc:	b93b      	cbnz	r3, 800eaee <uxr_serialize_CLIENT_Representation+0x62>
 800eade:	8bb1      	ldrh	r1, [r6, #28]
 800eae0:	4628      	mov	r0, r5
 800eae2:	f7fc fd2b 	bl	800b53c <ucdr_serialize_uint16_t>
 800eae6:	ea08 0000 	and.w	r0, r8, r0
 800eaea:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800eaee:	6931      	ldr	r1, [r6, #16]
 800eaf0:	4628      	mov	r0, r5
 800eaf2:	f7fc ff0d 	bl	800b910 <ucdr_serialize_uint32_t>
 800eaf6:	6933      	ldr	r3, [r6, #16]
 800eaf8:	b1e3      	cbz	r3, 800eb34 <uxr_serialize_CLIENT_Representation+0xa8>
 800eafa:	b1c0      	cbz	r0, 800eb2e <uxr_serialize_CLIENT_Representation+0xa2>
 800eafc:	4637      	mov	r7, r6
 800eafe:	f04f 0900 	mov.w	r9, #0
 800eb02:	e001      	b.n	800eb08 <uxr_serialize_CLIENT_Representation+0x7c>
 800eb04:	3708      	adds	r7, #8
 800eb06:	b194      	cbz	r4, 800eb2e <uxr_serialize_CLIENT_Representation+0xa2>
 800eb08:	6979      	ldr	r1, [r7, #20]
 800eb0a:	4628      	mov	r0, r5
 800eb0c:	f004 ffae 	bl	8013a6c <ucdr_serialize_string>
 800eb10:	69b9      	ldr	r1, [r7, #24]
 800eb12:	4604      	mov	r4, r0
 800eb14:	4628      	mov	r0, r5
 800eb16:	f004 ffa9 	bl	8013a6c <ucdr_serialize_string>
 800eb1a:	6933      	ldr	r3, [r6, #16]
 800eb1c:	f109 0901 	add.w	r9, r9, #1
 800eb20:	4004      	ands	r4, r0
 800eb22:	4599      	cmp	r9, r3
 800eb24:	b2e4      	uxtb	r4, r4
 800eb26:	d3ed      	bcc.n	800eb04 <uxr_serialize_CLIENT_Representation+0x78>
 800eb28:	ea08 0804 	and.w	r8, r8, r4
 800eb2c:	e7d7      	b.n	800eade <uxr_serialize_CLIENT_Representation+0x52>
 800eb2e:	f04f 0800 	mov.w	r8, #0
 800eb32:	e7d4      	b.n	800eade <uxr_serialize_CLIENT_Representation+0x52>
 800eb34:	ea08 0800 	and.w	r8, r8, r0
 800eb38:	e7d1      	b.n	800eade <uxr_serialize_CLIENT_Representation+0x52>
 800eb3a:	bf00      	nop

0800eb3c <uxr_deserialize_CLIENT_Representation>:
 800eb3c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800eb40:	2204      	movs	r2, #4
 800eb42:	460c      	mov	r4, r1
 800eb44:	4605      	mov	r5, r0
 800eb46:	f004 fed5 	bl	80138f4 <ucdr_deserialize_array_uint8_t>
 800eb4a:	2202      	movs	r2, #2
 800eb4c:	4607      	mov	r7, r0
 800eb4e:	1d21      	adds	r1, r4, #4
 800eb50:	4628      	mov	r0, r5
 800eb52:	f004 fecf 	bl	80138f4 <ucdr_deserialize_array_uint8_t>
 800eb56:	4038      	ands	r0, r7
 800eb58:	2202      	movs	r2, #2
 800eb5a:	1da1      	adds	r1, r4, #6
 800eb5c:	b2c6      	uxtb	r6, r0
 800eb5e:	4628      	mov	r0, r5
 800eb60:	f004 fec8 	bl	80138f4 <ucdr_deserialize_array_uint8_t>
 800eb64:	2204      	movs	r2, #4
 800eb66:	4006      	ands	r6, r0
 800eb68:	f104 0108 	add.w	r1, r4, #8
 800eb6c:	4628      	mov	r0, r5
 800eb6e:	f004 fec1 	bl	80138f4 <ucdr_deserialize_array_uint8_t>
 800eb72:	f104 010c 	add.w	r1, r4, #12
 800eb76:	4006      	ands	r6, r0
 800eb78:	4628      	mov	r0, r5
 800eb7a:	f7fc fcc9 	bl	800b510 <ucdr_deserialize_uint8_t>
 800eb7e:	f104 010d 	add.w	r1, r4, #13
 800eb82:	ea06 0700 	and.w	r7, r6, r0
 800eb86:	4628      	mov	r0, r5
 800eb88:	f7fc fc94 	bl	800b4b4 <ucdr_deserialize_bool>
 800eb8c:	7b63      	ldrb	r3, [r4, #13]
 800eb8e:	4007      	ands	r7, r0
 800eb90:	b93b      	cbnz	r3, 800eba2 <uxr_deserialize_CLIENT_Representation+0x66>
 800eb92:	f104 011c 	add.w	r1, r4, #28
 800eb96:	4628      	mov	r0, r5
 800eb98:	f7fc fdd0 	bl	800b73c <ucdr_deserialize_uint16_t>
 800eb9c:	4038      	ands	r0, r7
 800eb9e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800eba2:	f104 0110 	add.w	r1, r4, #16
 800eba6:	4628      	mov	r0, r5
 800eba8:	f7fc ffe2 	bl	800bb70 <ucdr_deserialize_uint32_t>
 800ebac:	6923      	ldr	r3, [r4, #16]
 800ebae:	2b01      	cmp	r3, #1
 800ebb0:	d903      	bls.n	800ebba <uxr_deserialize_CLIENT_Representation+0x7e>
 800ebb2:	2301      	movs	r3, #1
 800ebb4:	75ab      	strb	r3, [r5, #22]
 800ebb6:	2700      	movs	r7, #0
 800ebb8:	e7eb      	b.n	800eb92 <uxr_deserialize_CLIENT_Representation+0x56>
 800ebba:	b30b      	cbz	r3, 800ec00 <uxr_deserialize_CLIENT_Representation+0xc4>
 800ebbc:	2800      	cmp	r0, #0
 800ebbe:	d0fa      	beq.n	800ebb6 <uxr_deserialize_CLIENT_Representation+0x7a>
 800ebc0:	46a0      	mov	r8, r4
 800ebc2:	f04f 0900 	mov.w	r9, #0
 800ebc6:	e001      	b.n	800ebcc <uxr_deserialize_CLIENT_Representation+0x90>
 800ebc8:	2e00      	cmp	r6, #0
 800ebca:	d0f4      	beq.n	800ebb6 <uxr_deserialize_CLIENT_Representation+0x7a>
 800ebcc:	f8d8 1014 	ldr.w	r1, [r8, #20]
 800ebd0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800ebd4:	4628      	mov	r0, r5
 800ebd6:	f004 ff59 	bl	8013a8c <ucdr_deserialize_string>
 800ebda:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800ebde:	4606      	mov	r6, r0
 800ebe0:	f8d8 1018 	ldr.w	r1, [r8, #24]
 800ebe4:	4628      	mov	r0, r5
 800ebe6:	f004 ff51 	bl	8013a8c <ucdr_deserialize_string>
 800ebea:	6923      	ldr	r3, [r4, #16]
 800ebec:	f109 0901 	add.w	r9, r9, #1
 800ebf0:	4006      	ands	r6, r0
 800ebf2:	4599      	cmp	r9, r3
 800ebf4:	f108 0808 	add.w	r8, r8, #8
 800ebf8:	b2f6      	uxtb	r6, r6
 800ebfa:	d3e5      	bcc.n	800ebc8 <uxr_deserialize_CLIENT_Representation+0x8c>
 800ebfc:	4037      	ands	r7, r6
 800ebfe:	e7c8      	b.n	800eb92 <uxr_deserialize_CLIENT_Representation+0x56>
 800ec00:	4007      	ands	r7, r0
 800ec02:	e7c6      	b.n	800eb92 <uxr_deserialize_CLIENT_Representation+0x56>

0800ec04 <uxr_serialize_AGENT_Representation>:
 800ec04:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ec08:	2204      	movs	r2, #4
 800ec0a:	460f      	mov	r7, r1
 800ec0c:	4605      	mov	r5, r0
 800ec0e:	f004 fe0d 	bl	801382c <ucdr_serialize_array_uint8_t>
 800ec12:	2202      	movs	r2, #2
 800ec14:	4604      	mov	r4, r0
 800ec16:	1d39      	adds	r1, r7, #4
 800ec18:	4628      	mov	r0, r5
 800ec1a:	f004 fe07 	bl	801382c <ucdr_serialize_array_uint8_t>
 800ec1e:	4020      	ands	r0, r4
 800ec20:	2202      	movs	r2, #2
 800ec22:	1db9      	adds	r1, r7, #6
 800ec24:	b2c4      	uxtb	r4, r0
 800ec26:	4628      	mov	r0, r5
 800ec28:	f004 fe00 	bl	801382c <ucdr_serialize_array_uint8_t>
 800ec2c:	7a39      	ldrb	r1, [r7, #8]
 800ec2e:	4004      	ands	r4, r0
 800ec30:	4628      	mov	r0, r5
 800ec32:	f7fc fc29 	bl	800b488 <ucdr_serialize_bool>
 800ec36:	7a3b      	ldrb	r3, [r7, #8]
 800ec38:	ea00 0804 	and.w	r8, r0, r4
 800ec3c:	b913      	cbnz	r3, 800ec44 <uxr_serialize_AGENT_Representation+0x40>
 800ec3e:	4640      	mov	r0, r8
 800ec40:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ec44:	68f9      	ldr	r1, [r7, #12]
 800ec46:	4628      	mov	r0, r5
 800ec48:	f7fc fe62 	bl	800b910 <ucdr_serialize_uint32_t>
 800ec4c:	68fb      	ldr	r3, [r7, #12]
 800ec4e:	b303      	cbz	r3, 800ec92 <uxr_serialize_AGENT_Representation+0x8e>
 800ec50:	b1d0      	cbz	r0, 800ec88 <uxr_serialize_AGENT_Representation+0x84>
 800ec52:	463e      	mov	r6, r7
 800ec54:	f04f 0900 	mov.w	r9, #0
 800ec58:	e001      	b.n	800ec5e <uxr_serialize_AGENT_Representation+0x5a>
 800ec5a:	3608      	adds	r6, #8
 800ec5c:	b1a4      	cbz	r4, 800ec88 <uxr_serialize_AGENT_Representation+0x84>
 800ec5e:	6931      	ldr	r1, [r6, #16]
 800ec60:	4628      	mov	r0, r5
 800ec62:	f004 ff03 	bl	8013a6c <ucdr_serialize_string>
 800ec66:	6971      	ldr	r1, [r6, #20]
 800ec68:	4604      	mov	r4, r0
 800ec6a:	4628      	mov	r0, r5
 800ec6c:	f004 fefe 	bl	8013a6c <ucdr_serialize_string>
 800ec70:	68fb      	ldr	r3, [r7, #12]
 800ec72:	f109 0901 	add.w	r9, r9, #1
 800ec76:	4004      	ands	r4, r0
 800ec78:	4599      	cmp	r9, r3
 800ec7a:	b2e4      	uxtb	r4, r4
 800ec7c:	d3ed      	bcc.n	800ec5a <uxr_serialize_AGENT_Representation+0x56>
 800ec7e:	ea08 0804 	and.w	r8, r8, r4
 800ec82:	4640      	mov	r0, r8
 800ec84:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ec88:	f04f 0800 	mov.w	r8, #0
 800ec8c:	4640      	mov	r0, r8
 800ec8e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ec92:	ea08 0800 	and.w	r8, r8, r0
 800ec96:	e7d2      	b.n	800ec3e <uxr_serialize_AGENT_Representation+0x3a>

0800ec98 <uxr_serialize_DATAWRITER_Representation>:
 800ec98:	b570      	push	{r4, r5, r6, lr}
 800ec9a:	460d      	mov	r5, r1
 800ec9c:	7809      	ldrb	r1, [r1, #0]
 800ec9e:	4606      	mov	r6, r0
 800eca0:	f7fc fc20 	bl	800b4e4 <ucdr_serialize_uint8_t>
 800eca4:	4604      	mov	r4, r0
 800eca6:	b130      	cbz	r0, 800ecb6 <uxr_serialize_DATAWRITER_Representation+0x1e>
 800eca8:	782b      	ldrb	r3, [r5, #0]
 800ecaa:	2b02      	cmp	r3, #2
 800ecac:	d00c      	beq.n	800ecc8 <uxr_serialize_DATAWRITER_Representation+0x30>
 800ecae:	2b03      	cmp	r3, #3
 800ecb0:	d010      	beq.n	800ecd4 <uxr_serialize_DATAWRITER_Representation+0x3c>
 800ecb2:	2b01      	cmp	r3, #1
 800ecb4:	d008      	beq.n	800ecc8 <uxr_serialize_DATAWRITER_Representation+0x30>
 800ecb6:	2202      	movs	r2, #2
 800ecb8:	f505 7102 	add.w	r1, r5, #520	@ 0x208
 800ecbc:	4630      	mov	r0, r6
 800ecbe:	f004 fdb5 	bl	801382c <ucdr_serialize_array_uint8_t>
 800ecc2:	4020      	ands	r0, r4
 800ecc4:	b2c0      	uxtb	r0, r0
 800ecc6:	bd70      	pop	{r4, r5, r6, pc}
 800ecc8:	6869      	ldr	r1, [r5, #4]
 800ecca:	4630      	mov	r0, r6
 800eccc:	f004 fece 	bl	8013a6c <ucdr_serialize_string>
 800ecd0:	4604      	mov	r4, r0
 800ecd2:	e7f0      	b.n	800ecb6 <uxr_serialize_DATAWRITER_Representation+0x1e>
 800ecd4:	4629      	mov	r1, r5
 800ecd6:	4630      	mov	r0, r6
 800ecd8:	f851 2f04 	ldr.w	r2, [r1, #4]!
 800ecdc:	3104      	adds	r1, #4
 800ecde:	f004 fe99 	bl	8013a14 <ucdr_serialize_sequence_uint8_t>
 800ece2:	4604      	mov	r4, r0
 800ece4:	e7e7      	b.n	800ecb6 <uxr_serialize_DATAWRITER_Representation+0x1e>
 800ece6:	bf00      	nop

0800ece8 <uxr_serialize_ObjectVariant.part.0>:
 800ece8:	b570      	push	{r4, r5, r6, lr}
 800ecea:	780b      	ldrb	r3, [r1, #0]
 800ecec:	3b01      	subs	r3, #1
 800ecee:	460c      	mov	r4, r1
 800ecf0:	4605      	mov	r5, r0
 800ecf2:	2b0d      	cmp	r3, #13
 800ecf4:	d854      	bhi.n	800eda0 <uxr_serialize_ObjectVariant.part.0+0xb8>
 800ecf6:	e8df f003 	tbb	[pc, r3]
 800ecfa:	0730      	.short	0x0730
 800ecfc:	07071b1b 	.word	0x07071b1b
 800ed00:	0c530707 	.word	0x0c530707
 800ed04:	494e0c0c 	.word	0x494e0c0c
 800ed08:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800ed0c:	3104      	adds	r1, #4
 800ed0e:	f7ff bfc3 	b.w	800ec98 <uxr_serialize_DATAWRITER_Representation>
 800ed12:	7909      	ldrb	r1, [r1, #4]
 800ed14:	f7fc fbe6 	bl	800b4e4 <ucdr_serialize_uint8_t>
 800ed18:	b1e8      	cbz	r0, 800ed56 <uxr_serialize_ObjectVariant.part.0+0x6e>
 800ed1a:	7923      	ldrb	r3, [r4, #4]
 800ed1c:	2b01      	cmp	r3, #1
 800ed1e:	d001      	beq.n	800ed24 <uxr_serialize_ObjectVariant.part.0+0x3c>
 800ed20:	2b02      	cmp	r3, #2
 800ed22:	d13d      	bne.n	800eda0 <uxr_serialize_ObjectVariant.part.0+0xb8>
 800ed24:	68a1      	ldr	r1, [r4, #8]
 800ed26:	4628      	mov	r0, r5
 800ed28:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800ed2c:	f004 be9e 	b.w	8013a6c <ucdr_serialize_string>
 800ed30:	7909      	ldrb	r1, [r1, #4]
 800ed32:	f7fc fbd7 	bl	800b4e4 <ucdr_serialize_uint8_t>
 800ed36:	4606      	mov	r6, r0
 800ed38:	b120      	cbz	r0, 800ed44 <uxr_serialize_ObjectVariant.part.0+0x5c>
 800ed3a:	7923      	ldrb	r3, [r4, #4]
 800ed3c:	2b02      	cmp	r3, #2
 800ed3e:	d039      	beq.n	800edb4 <uxr_serialize_ObjectVariant.part.0+0xcc>
 800ed40:	2b03      	cmp	r3, #3
 800ed42:	d02f      	beq.n	800eda4 <uxr_serialize_ObjectVariant.part.0+0xbc>
 800ed44:	2202      	movs	r2, #2
 800ed46:	f504 7103 	add.w	r1, r4, #524	@ 0x20c
 800ed4a:	4628      	mov	r0, r5
 800ed4c:	f004 fd6e 	bl	801382c <ucdr_serialize_array_uint8_t>
 800ed50:	4030      	ands	r0, r6
 800ed52:	b2c0      	uxtb	r0, r0
 800ed54:	bd70      	pop	{r4, r5, r6, pc}
 800ed56:	2000      	movs	r0, #0
 800ed58:	bd70      	pop	{r4, r5, r6, pc}
 800ed5a:	7909      	ldrb	r1, [r1, #4]
 800ed5c:	f7fc fbc2 	bl	800b4e4 <ucdr_serialize_uint8_t>
 800ed60:	4606      	mov	r6, r0
 800ed62:	b158      	cbz	r0, 800ed7c <uxr_serialize_ObjectVariant.part.0+0x94>
 800ed64:	7923      	ldrb	r3, [r4, #4]
 800ed66:	2b02      	cmp	r3, #2
 800ed68:	d003      	beq.n	800ed72 <uxr_serialize_ObjectVariant.part.0+0x8a>
 800ed6a:	2b03      	cmp	r3, #3
 800ed6c:	d028      	beq.n	800edc0 <uxr_serialize_ObjectVariant.part.0+0xd8>
 800ed6e:	2b01      	cmp	r3, #1
 800ed70:	d104      	bne.n	800ed7c <uxr_serialize_ObjectVariant.part.0+0x94>
 800ed72:	68a1      	ldr	r1, [r4, #8]
 800ed74:	4628      	mov	r0, r5
 800ed76:	f004 fe79 	bl	8013a6c <ucdr_serialize_string>
 800ed7a:	4606      	mov	r6, r0
 800ed7c:	f9b4 120c 	ldrsh.w	r1, [r4, #524]	@ 0x20c
 800ed80:	4628      	mov	r0, r5
 800ed82:	f7fd f8eb 	bl	800bf5c <ucdr_serialize_int16_t>
 800ed86:	4030      	ands	r0, r6
 800ed88:	b2c0      	uxtb	r0, r0
 800ed8a:	bd70      	pop	{r4, r5, r6, pc}
 800ed8c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800ed90:	3104      	adds	r1, #4
 800ed92:	f7ff be7b 	b.w	800ea8c <uxr_serialize_CLIENT_Representation>
 800ed96:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800ed9a:	3104      	adds	r1, #4
 800ed9c:	f7ff bf32 	b.w	800ec04 <uxr_serialize_AGENT_Representation>
 800eda0:	2001      	movs	r0, #1
 800eda2:	bd70      	pop	{r4, r5, r6, pc}
 800eda4:	68a2      	ldr	r2, [r4, #8]
 800eda6:	f104 010c 	add.w	r1, r4, #12
 800edaa:	4628      	mov	r0, r5
 800edac:	f004 fe32 	bl	8013a14 <ucdr_serialize_sequence_uint8_t>
 800edb0:	4606      	mov	r6, r0
 800edb2:	e7c7      	b.n	800ed44 <uxr_serialize_ObjectVariant.part.0+0x5c>
 800edb4:	68a1      	ldr	r1, [r4, #8]
 800edb6:	4628      	mov	r0, r5
 800edb8:	f004 fe58 	bl	8013a6c <ucdr_serialize_string>
 800edbc:	4606      	mov	r6, r0
 800edbe:	e7c1      	b.n	800ed44 <uxr_serialize_ObjectVariant.part.0+0x5c>
 800edc0:	68a2      	ldr	r2, [r4, #8]
 800edc2:	f104 010c 	add.w	r1, r4, #12
 800edc6:	4628      	mov	r0, r5
 800edc8:	f004 fe24 	bl	8013a14 <ucdr_serialize_sequence_uint8_t>
 800edcc:	4606      	mov	r6, r0
 800edce:	e7d5      	b.n	800ed7c <uxr_serialize_ObjectVariant.part.0+0x94>

0800edd0 <uxr_deserialize_DATAWRITER_Representation>:
 800edd0:	b570      	push	{r4, r5, r6, lr}
 800edd2:	4606      	mov	r6, r0
 800edd4:	460d      	mov	r5, r1
 800edd6:	f7fc fb9b 	bl	800b510 <ucdr_deserialize_uint8_t>
 800edda:	4604      	mov	r4, r0
 800eddc:	b130      	cbz	r0, 800edec <uxr_deserialize_DATAWRITER_Representation+0x1c>
 800edde:	782b      	ldrb	r3, [r5, #0]
 800ede0:	2b02      	cmp	r3, #2
 800ede2:	d00c      	beq.n	800edfe <uxr_deserialize_DATAWRITER_Representation+0x2e>
 800ede4:	2b03      	cmp	r3, #3
 800ede6:	d012      	beq.n	800ee0e <uxr_deserialize_DATAWRITER_Representation+0x3e>
 800ede8:	2b01      	cmp	r3, #1
 800edea:	d008      	beq.n	800edfe <uxr_deserialize_DATAWRITER_Representation+0x2e>
 800edec:	2202      	movs	r2, #2
 800edee:	f505 7102 	add.w	r1, r5, #520	@ 0x208
 800edf2:	4630      	mov	r0, r6
 800edf4:	f004 fd7e 	bl	80138f4 <ucdr_deserialize_array_uint8_t>
 800edf8:	4020      	ands	r0, r4
 800edfa:	b2c0      	uxtb	r0, r0
 800edfc:	bd70      	pop	{r4, r5, r6, pc}
 800edfe:	6869      	ldr	r1, [r5, #4]
 800ee00:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800ee04:	4630      	mov	r0, r6
 800ee06:	f004 fe41 	bl	8013a8c <ucdr_deserialize_string>
 800ee0a:	4604      	mov	r4, r0
 800ee0c:	e7ee      	b.n	800edec <uxr_deserialize_DATAWRITER_Representation+0x1c>
 800ee0e:	1d2b      	adds	r3, r5, #4
 800ee10:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800ee14:	f105 0108 	add.w	r1, r5, #8
 800ee18:	4630      	mov	r0, r6
 800ee1a:	f004 fe0d 	bl	8013a38 <ucdr_deserialize_sequence_uint8_t>
 800ee1e:	4604      	mov	r4, r0
 800ee20:	e7e4      	b.n	800edec <uxr_deserialize_DATAWRITER_Representation+0x1c>
 800ee22:	bf00      	nop

0800ee24 <uxr_serialize_OBJK_DomainParticipant_Binary>:
 800ee24:	b570      	push	{r4, r5, r6, lr}
 800ee26:	460d      	mov	r5, r1
 800ee28:	7809      	ldrb	r1, [r1, #0]
 800ee2a:	4606      	mov	r6, r0
 800ee2c:	f7fc fb2c 	bl	800b488 <ucdr_serialize_bool>
 800ee30:	782b      	ldrb	r3, [r5, #0]
 800ee32:	4604      	mov	r4, r0
 800ee34:	b94b      	cbnz	r3, 800ee4a <uxr_serialize_OBJK_DomainParticipant_Binary+0x26>
 800ee36:	7a29      	ldrb	r1, [r5, #8]
 800ee38:	4630      	mov	r0, r6
 800ee3a:	f7fc fb25 	bl	800b488 <ucdr_serialize_bool>
 800ee3e:	7a2b      	ldrb	r3, [r5, #8]
 800ee40:	4004      	ands	r4, r0
 800ee42:	b2e4      	uxtb	r4, r4
 800ee44:	b943      	cbnz	r3, 800ee58 <uxr_serialize_OBJK_DomainParticipant_Binary+0x34>
 800ee46:	4620      	mov	r0, r4
 800ee48:	bd70      	pop	{r4, r5, r6, pc}
 800ee4a:	6869      	ldr	r1, [r5, #4]
 800ee4c:	4630      	mov	r0, r6
 800ee4e:	f004 fe0d 	bl	8013a6c <ucdr_serialize_string>
 800ee52:	4004      	ands	r4, r0
 800ee54:	b2e4      	uxtb	r4, r4
 800ee56:	e7ee      	b.n	800ee36 <uxr_serialize_OBJK_DomainParticipant_Binary+0x12>
 800ee58:	68e9      	ldr	r1, [r5, #12]
 800ee5a:	4630      	mov	r0, r6
 800ee5c:	f004 fe06 	bl	8013a6c <ucdr_serialize_string>
 800ee60:	4004      	ands	r4, r0
 800ee62:	4620      	mov	r0, r4
 800ee64:	bd70      	pop	{r4, r5, r6, pc}
 800ee66:	bf00      	nop

0800ee68 <uxr_serialize_OBJK_Topic_Binary>:
 800ee68:	b570      	push	{r4, r5, r6, lr}
 800ee6a:	460d      	mov	r5, r1
 800ee6c:	6809      	ldr	r1, [r1, #0]
 800ee6e:	4606      	mov	r6, r0
 800ee70:	f004 fdfc 	bl	8013a6c <ucdr_serialize_string>
 800ee74:	7929      	ldrb	r1, [r5, #4]
 800ee76:	4604      	mov	r4, r0
 800ee78:	4630      	mov	r0, r6
 800ee7a:	f7fc fb05 	bl	800b488 <ucdr_serialize_bool>
 800ee7e:	792b      	ldrb	r3, [r5, #4]
 800ee80:	4004      	ands	r4, r0
 800ee82:	b2e4      	uxtb	r4, r4
 800ee84:	b943      	cbnz	r3, 800ee98 <uxr_serialize_OBJK_Topic_Binary+0x30>
 800ee86:	7b29      	ldrb	r1, [r5, #12]
 800ee88:	4630      	mov	r0, r6
 800ee8a:	f7fc fafd 	bl	800b488 <ucdr_serialize_bool>
 800ee8e:	7b2b      	ldrb	r3, [r5, #12]
 800ee90:	4004      	ands	r4, r0
 800ee92:	b93b      	cbnz	r3, 800eea4 <uxr_serialize_OBJK_Topic_Binary+0x3c>
 800ee94:	4620      	mov	r0, r4
 800ee96:	bd70      	pop	{r4, r5, r6, pc}
 800ee98:	68a9      	ldr	r1, [r5, #8]
 800ee9a:	4630      	mov	r0, r6
 800ee9c:	f004 fde6 	bl	8013a6c <ucdr_serialize_string>
 800eea0:	4004      	ands	r4, r0
 800eea2:	e7f0      	b.n	800ee86 <uxr_serialize_OBJK_Topic_Binary+0x1e>
 800eea4:	6929      	ldr	r1, [r5, #16]
 800eea6:	4630      	mov	r0, r6
 800eea8:	f004 fde0 	bl	8013a6c <ucdr_serialize_string>
 800eeac:	4004      	ands	r4, r0
 800eeae:	b2e4      	uxtb	r4, r4
 800eeb0:	4620      	mov	r0, r4
 800eeb2:	bd70      	pop	{r4, r5, r6, pc}

0800eeb4 <uxr_serialize_OBJK_Subscriber_Binary_Qos>:
 800eeb4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800eeb8:	460c      	mov	r4, r1
 800eeba:	7809      	ldrb	r1, [r1, #0]
 800eebc:	4606      	mov	r6, r0
 800eebe:	f7fc fae3 	bl	800b488 <ucdr_serialize_bool>
 800eec2:	7823      	ldrb	r3, [r4, #0]
 800eec4:	4605      	mov	r5, r0
 800eec6:	b96b      	cbnz	r3, 800eee4 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x30>
 800eec8:	f894 1028 	ldrb.w	r1, [r4, #40]	@ 0x28
 800eecc:	4630      	mov	r0, r6
 800eece:	f7fc fadb 	bl	800b488 <ucdr_serialize_bool>
 800eed2:	f894 3028 	ldrb.w	r3, [r4, #40]	@ 0x28
 800eed6:	4005      	ands	r5, r0
 800eed8:	b2ed      	uxtb	r5, r5
 800eeda:	2b00      	cmp	r3, #0
 800eedc:	d169      	bne.n	800efb2 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xfe>
 800eede:	4628      	mov	r0, r5
 800eee0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800eee4:	6861      	ldr	r1, [r4, #4]
 800eee6:	4630      	mov	r0, r6
 800eee8:	f7fc fd12 	bl	800b910 <ucdr_serialize_uint32_t>
 800eeec:	6863      	ldr	r3, [r4, #4]
 800eeee:	2b00      	cmp	r3, #0
 800eef0:	d06b      	beq.n	800efca <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x116>
 800eef2:	2800      	cmp	r0, #0
 800eef4:	d067      	beq.n	800efc6 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 800eef6:	68a1      	ldr	r1, [r4, #8]
 800eef8:	4630      	mov	r0, r6
 800eefa:	f004 fdb7 	bl	8013a6c <ucdr_serialize_string>
 800eefe:	6863      	ldr	r3, [r4, #4]
 800ef00:	2b01      	cmp	r3, #1
 800ef02:	d953      	bls.n	800efac <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 800ef04:	2800      	cmp	r0, #0
 800ef06:	d05e      	beq.n	800efc6 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 800ef08:	68e1      	ldr	r1, [r4, #12]
 800ef0a:	4630      	mov	r0, r6
 800ef0c:	f004 fdae 	bl	8013a6c <ucdr_serialize_string>
 800ef10:	6863      	ldr	r3, [r4, #4]
 800ef12:	2b02      	cmp	r3, #2
 800ef14:	d94a      	bls.n	800efac <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 800ef16:	2800      	cmp	r0, #0
 800ef18:	d055      	beq.n	800efc6 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 800ef1a:	6921      	ldr	r1, [r4, #16]
 800ef1c:	4630      	mov	r0, r6
 800ef1e:	f004 fda5 	bl	8013a6c <ucdr_serialize_string>
 800ef22:	6863      	ldr	r3, [r4, #4]
 800ef24:	2b03      	cmp	r3, #3
 800ef26:	d941      	bls.n	800efac <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 800ef28:	2800      	cmp	r0, #0
 800ef2a:	d04c      	beq.n	800efc6 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 800ef2c:	6961      	ldr	r1, [r4, #20]
 800ef2e:	4630      	mov	r0, r6
 800ef30:	f004 fd9c 	bl	8013a6c <ucdr_serialize_string>
 800ef34:	6863      	ldr	r3, [r4, #4]
 800ef36:	2b04      	cmp	r3, #4
 800ef38:	d938      	bls.n	800efac <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 800ef3a:	2800      	cmp	r0, #0
 800ef3c:	d043      	beq.n	800efc6 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 800ef3e:	69a1      	ldr	r1, [r4, #24]
 800ef40:	4630      	mov	r0, r6
 800ef42:	f004 fd93 	bl	8013a6c <ucdr_serialize_string>
 800ef46:	6863      	ldr	r3, [r4, #4]
 800ef48:	2b05      	cmp	r3, #5
 800ef4a:	d92f      	bls.n	800efac <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 800ef4c:	2800      	cmp	r0, #0
 800ef4e:	d03a      	beq.n	800efc6 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 800ef50:	69e1      	ldr	r1, [r4, #28]
 800ef52:	4630      	mov	r0, r6
 800ef54:	f004 fd8a 	bl	8013a6c <ucdr_serialize_string>
 800ef58:	6863      	ldr	r3, [r4, #4]
 800ef5a:	2b06      	cmp	r3, #6
 800ef5c:	d926      	bls.n	800efac <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 800ef5e:	b390      	cbz	r0, 800efc6 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 800ef60:	6a21      	ldr	r1, [r4, #32]
 800ef62:	4630      	mov	r0, r6
 800ef64:	f004 fd82 	bl	8013a6c <ucdr_serialize_string>
 800ef68:	6863      	ldr	r3, [r4, #4]
 800ef6a:	2b07      	cmp	r3, #7
 800ef6c:	d91e      	bls.n	800efac <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 800ef6e:	b350      	cbz	r0, 800efc6 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 800ef70:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 800ef72:	4630      	mov	r0, r6
 800ef74:	f004 fd7a 	bl	8013a6c <ucdr_serialize_string>
 800ef78:	6863      	ldr	r3, [r4, #4]
 800ef7a:	2b08      	cmp	r3, #8
 800ef7c:	d916      	bls.n	800efac <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 800ef7e:	b310      	cbz	r0, 800efc6 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 800ef80:	6aa1      	ldr	r1, [r4, #40]	@ 0x28
 800ef82:	4630      	mov	r0, r6
 800ef84:	f004 fd72 	bl	8013a6c <ucdr_serialize_string>
 800ef88:	6863      	ldr	r3, [r4, #4]
 800ef8a:	2b09      	cmp	r3, #9
 800ef8c:	d90e      	bls.n	800efac <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 800ef8e:	b1d0      	cbz	r0, 800efc6 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 800ef90:	f104 082c 	add.w	r8, r4, #44	@ 0x2c
 800ef94:	2709      	movs	r7, #9
 800ef96:	e000      	b.n	800ef9a <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xe6>
 800ef98:	b1a8      	cbz	r0, 800efc6 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 800ef9a:	f858 1b04 	ldr.w	r1, [r8], #4
 800ef9e:	4630      	mov	r0, r6
 800efa0:	f004 fd64 	bl	8013a6c <ucdr_serialize_string>
 800efa4:	6862      	ldr	r2, [r4, #4]
 800efa6:	3701      	adds	r7, #1
 800efa8:	4297      	cmp	r7, r2
 800efaa:	d3f5      	bcc.n	800ef98 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xe4>
 800efac:	4005      	ands	r5, r0
 800efae:	b2ed      	uxtb	r5, r5
 800efb0:	e78a      	b.n	800eec8 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x14>
 800efb2:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 800efb4:	f104 0130 	add.w	r1, r4, #48	@ 0x30
 800efb8:	4630      	mov	r0, r6
 800efba:	f004 fd2b 	bl	8013a14 <ucdr_serialize_sequence_uint8_t>
 800efbe:	4005      	ands	r5, r0
 800efc0:	4628      	mov	r0, r5
 800efc2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800efc6:	2500      	movs	r5, #0
 800efc8:	e77e      	b.n	800eec8 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x14>
 800efca:	4028      	ands	r0, r5
 800efcc:	b2c5      	uxtb	r5, r0
 800efce:	e77b      	b.n	800eec8 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x14>

0800efd0 <uxr_serialize_OBJK_Subscriber_Binary>:
 800efd0:	b570      	push	{r4, r5, r6, lr}
 800efd2:	460d      	mov	r5, r1
 800efd4:	7809      	ldrb	r1, [r1, #0]
 800efd6:	4606      	mov	r6, r0
 800efd8:	f7fc fa56 	bl	800b488 <ucdr_serialize_bool>
 800efdc:	782b      	ldrb	r3, [r5, #0]
 800efde:	4604      	mov	r4, r0
 800efe0:	b94b      	cbnz	r3, 800eff6 <uxr_serialize_OBJK_Subscriber_Binary+0x26>
 800efe2:	7a29      	ldrb	r1, [r5, #8]
 800efe4:	4630      	mov	r0, r6
 800efe6:	f7fc fa4f 	bl	800b488 <ucdr_serialize_bool>
 800efea:	7a2b      	ldrb	r3, [r5, #8]
 800efec:	4004      	ands	r4, r0
 800efee:	b2e4      	uxtb	r4, r4
 800eff0:	b943      	cbnz	r3, 800f004 <uxr_serialize_OBJK_Subscriber_Binary+0x34>
 800eff2:	4620      	mov	r0, r4
 800eff4:	bd70      	pop	{r4, r5, r6, pc}
 800eff6:	6869      	ldr	r1, [r5, #4]
 800eff8:	4630      	mov	r0, r6
 800effa:	f004 fd37 	bl	8013a6c <ucdr_serialize_string>
 800effe:	4004      	ands	r4, r0
 800f000:	b2e4      	uxtb	r4, r4
 800f002:	e7ee      	b.n	800efe2 <uxr_serialize_OBJK_Subscriber_Binary+0x12>
 800f004:	f105 010c 	add.w	r1, r5, #12
 800f008:	4630      	mov	r0, r6
 800f00a:	f7ff ff53 	bl	800eeb4 <uxr_serialize_OBJK_Subscriber_Binary_Qos>
 800f00e:	4004      	ands	r4, r0
 800f010:	4620      	mov	r0, r4
 800f012:	bd70      	pop	{r4, r5, r6, pc}

0800f014 <uxr_serialize_OBJK_Endpoint_QosBinary>:
 800f014:	e92d 4368 	stmdb	sp!, {r3, r5, r6, r8, r9, lr}
 800f018:	4688      	mov	r8, r1
 800f01a:	8809      	ldrh	r1, [r1, #0]
 800f01c:	4681      	mov	r9, r0
 800f01e:	f7fc fa8d 	bl	800b53c <ucdr_serialize_uint16_t>
 800f022:	f898 1002 	ldrb.w	r1, [r8, #2]
 800f026:	4606      	mov	r6, r0
 800f028:	4648      	mov	r0, r9
 800f02a:	f7fc fa2d 	bl	800b488 <ucdr_serialize_bool>
 800f02e:	f898 3002 	ldrb.w	r3, [r8, #2]
 800f032:	4006      	ands	r6, r0
 800f034:	b2f5      	uxtb	r5, r6
 800f036:	b9eb      	cbnz	r3, 800f074 <uxr_serialize_OBJK_Endpoint_QosBinary+0x60>
 800f038:	f898 1006 	ldrb.w	r1, [r8, #6]
 800f03c:	4648      	mov	r0, r9
 800f03e:	f7fc fa23 	bl	800b488 <ucdr_serialize_bool>
 800f042:	f898 3006 	ldrb.w	r3, [r8, #6]
 800f046:	4005      	ands	r5, r0
 800f048:	bb7b      	cbnz	r3, 800f0aa <uxr_serialize_OBJK_Endpoint_QosBinary+0x96>
 800f04a:	f898 100c 	ldrb.w	r1, [r8, #12]
 800f04e:	4648      	mov	r0, r9
 800f050:	f7fc fa1a 	bl	800b488 <ucdr_serialize_bool>
 800f054:	f898 300c 	ldrb.w	r3, [r8, #12]
 800f058:	4005      	ands	r5, r0
 800f05a:	b9f3      	cbnz	r3, 800f09a <uxr_serialize_OBJK_Endpoint_QosBinary+0x86>
 800f05c:	f898 1014 	ldrb.w	r1, [r8, #20]
 800f060:	4648      	mov	r0, r9
 800f062:	f7fc fa11 	bl	800b488 <ucdr_serialize_bool>
 800f066:	f898 3014 	ldrb.w	r3, [r8, #20]
 800f06a:	4005      	ands	r5, r0
 800f06c:	b94b      	cbnz	r3, 800f082 <uxr_serialize_OBJK_Endpoint_QosBinary+0x6e>
 800f06e:	4628      	mov	r0, r5
 800f070:	e8bd 8368 	ldmia.w	sp!, {r3, r5, r6, r8, r9, pc}
 800f074:	f8b8 1004 	ldrh.w	r1, [r8, #4]
 800f078:	4648      	mov	r0, r9
 800f07a:	f7fc fa5f 	bl	800b53c <ucdr_serialize_uint16_t>
 800f07e:	4005      	ands	r5, r0
 800f080:	e7da      	b.n	800f038 <uxr_serialize_OBJK_Endpoint_QosBinary+0x24>
 800f082:	f8d8 2018 	ldr.w	r2, [r8, #24]
 800f086:	f108 011c 	add.w	r1, r8, #28
 800f08a:	4648      	mov	r0, r9
 800f08c:	f004 fcc2 	bl	8013a14 <ucdr_serialize_sequence_uint8_t>
 800f090:	4028      	ands	r0, r5
 800f092:	b2c5      	uxtb	r5, r0
 800f094:	4628      	mov	r0, r5
 800f096:	e8bd 8368 	ldmia.w	sp!, {r3, r5, r6, r8, r9, pc}
 800f09a:	f8d8 1010 	ldr.w	r1, [r8, #16]
 800f09e:	4648      	mov	r0, r9
 800f0a0:	f7fc fc36 	bl	800b910 <ucdr_serialize_uint32_t>
 800f0a4:	4028      	ands	r0, r5
 800f0a6:	b2c5      	uxtb	r5, r0
 800f0a8:	e7d8      	b.n	800f05c <uxr_serialize_OBJK_Endpoint_QosBinary+0x48>
 800f0aa:	f8d8 1008 	ldr.w	r1, [r8, #8]
 800f0ae:	4648      	mov	r0, r9
 800f0b0:	f7fc fc2e 	bl	800b910 <ucdr_serialize_uint32_t>
 800f0b4:	4028      	ands	r0, r5
 800f0b6:	b2c5      	uxtb	r5, r0
 800f0b8:	e7c7      	b.n	800f04a <uxr_serialize_OBJK_Endpoint_QosBinary+0x36>
 800f0ba:	bf00      	nop

0800f0bc <uxr_serialize_OBJK_DataReader_Binary>:
 800f0bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f0be:	2202      	movs	r2, #2
 800f0c0:	460c      	mov	r4, r1
 800f0c2:	4606      	mov	r6, r0
 800f0c4:	f004 fbb2 	bl	801382c <ucdr_serialize_array_uint8_t>
 800f0c8:	78a1      	ldrb	r1, [r4, #2]
 800f0ca:	4605      	mov	r5, r0
 800f0cc:	4630      	mov	r0, r6
 800f0ce:	f7fc f9db 	bl	800b488 <ucdr_serialize_bool>
 800f0d2:	78a3      	ldrb	r3, [r4, #2]
 800f0d4:	4005      	ands	r5, r0
 800f0d6:	b2ed      	uxtb	r5, r5
 800f0d8:	b90b      	cbnz	r3, 800f0de <uxr_serialize_OBJK_DataReader_Binary+0x22>
 800f0da:	4628      	mov	r0, r5
 800f0dc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f0de:	f104 0108 	add.w	r1, r4, #8
 800f0e2:	4630      	mov	r0, r6
 800f0e4:	f7ff ff96 	bl	800f014 <uxr_serialize_OBJK_Endpoint_QosBinary>
 800f0e8:	f894 102c 	ldrb.w	r1, [r4, #44]	@ 0x2c
 800f0ec:	4607      	mov	r7, r0
 800f0ee:	4630      	mov	r0, r6
 800f0f0:	f7fc f9ca 	bl	800b488 <ucdr_serialize_bool>
 800f0f4:	f894 302c 	ldrb.w	r3, [r4, #44]	@ 0x2c
 800f0f8:	4038      	ands	r0, r7
 800f0fa:	b2c7      	uxtb	r7, r0
 800f0fc:	b95b      	cbnz	r3, 800f116 <uxr_serialize_OBJK_DataReader_Binary+0x5a>
 800f0fe:	f894 1038 	ldrb.w	r1, [r4, #56]	@ 0x38
 800f102:	4630      	mov	r0, r6
 800f104:	f7fc f9c0 	bl	800b488 <ucdr_serialize_bool>
 800f108:	f894 3038 	ldrb.w	r3, [r4, #56]	@ 0x38
 800f10c:	4007      	ands	r7, r0
 800f10e:	b94b      	cbnz	r3, 800f124 <uxr_serialize_OBJK_DataReader_Binary+0x68>
 800f110:	403d      	ands	r5, r7
 800f112:	4628      	mov	r0, r5
 800f114:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f116:	e9d4 230c 	ldrd	r2, r3, [r4, #48]	@ 0x30
 800f11a:	4630      	mov	r0, r6
 800f11c:	f7fc fe4e 	bl	800bdbc <ucdr_serialize_uint64_t>
 800f120:	4007      	ands	r7, r0
 800f122:	e7ec      	b.n	800f0fe <uxr_serialize_OBJK_DataReader_Binary+0x42>
 800f124:	6be1      	ldr	r1, [r4, #60]	@ 0x3c
 800f126:	4630      	mov	r0, r6
 800f128:	f004 fca0 	bl	8013a6c <ucdr_serialize_string>
 800f12c:	4007      	ands	r7, r0
 800f12e:	b2ff      	uxtb	r7, r7
 800f130:	e7ee      	b.n	800f110 <uxr_serialize_OBJK_DataReader_Binary+0x54>
 800f132:	bf00      	nop

0800f134 <uxr_deserialize_ObjectVariant>:
 800f134:	b570      	push	{r4, r5, r6, lr}
 800f136:	4605      	mov	r5, r0
 800f138:	460e      	mov	r6, r1
 800f13a:	f7fc f9e9 	bl	800b510 <ucdr_deserialize_uint8_t>
 800f13e:	b168      	cbz	r0, 800f15c <uxr_deserialize_ObjectVariant+0x28>
 800f140:	7833      	ldrb	r3, [r6, #0]
 800f142:	3b01      	subs	r3, #1
 800f144:	4604      	mov	r4, r0
 800f146:	2b0d      	cmp	r3, #13
 800f148:	d809      	bhi.n	800f15e <uxr_deserialize_ObjectVariant+0x2a>
 800f14a:	e8df f003 	tbb	[pc, r3]
 800f14e:	0a41      	.short	0x0a41
 800f150:	0a0a2323 	.word	0x0a0a2323
 800f154:	10080a0a 	.word	0x10080a0a
 800f158:	565c1010 	.word	0x565c1010
 800f15c:	2400      	movs	r4, #0
 800f15e:	4620      	mov	r0, r4
 800f160:	bd70      	pop	{r4, r5, r6, pc}
 800f162:	1d31      	adds	r1, r6, #4
 800f164:	4628      	mov	r0, r5
 800f166:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800f16a:	f7ff be31 	b.w	800edd0 <uxr_deserialize_DATAWRITER_Representation>
 800f16e:	1d31      	adds	r1, r6, #4
 800f170:	4628      	mov	r0, r5
 800f172:	f7fc f9cd 	bl	800b510 <ucdr_deserialize_uint8_t>
 800f176:	2800      	cmp	r0, #0
 800f178:	d0f0      	beq.n	800f15c <uxr_deserialize_ObjectVariant+0x28>
 800f17a:	7933      	ldrb	r3, [r6, #4]
 800f17c:	2b01      	cmp	r3, #1
 800f17e:	d001      	beq.n	800f184 <uxr_deserialize_ObjectVariant+0x50>
 800f180:	2b02      	cmp	r3, #2
 800f182:	d1ec      	bne.n	800f15e <uxr_deserialize_ObjectVariant+0x2a>
 800f184:	68b1      	ldr	r1, [r6, #8]
 800f186:	4628      	mov	r0, r5
 800f188:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800f18c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800f190:	f004 bc7c 	b.w	8013a8c <ucdr_deserialize_string>
 800f194:	1d31      	adds	r1, r6, #4
 800f196:	4628      	mov	r0, r5
 800f198:	f7fc f9ba 	bl	800b510 <ucdr_deserialize_uint8_t>
 800f19c:	4604      	mov	r4, r0
 800f19e:	b170      	cbz	r0, 800f1be <uxr_deserialize_ObjectVariant+0x8a>
 800f1a0:	7933      	ldrb	r3, [r6, #4]
 800f1a2:	2b02      	cmp	r3, #2
 800f1a4:	d04c      	beq.n	800f240 <uxr_deserialize_ObjectVariant+0x10c>
 800f1a6:	2b03      	cmp	r3, #3
 800f1a8:	d109      	bne.n	800f1be <uxr_deserialize_ObjectVariant+0x8a>
 800f1aa:	f106 0308 	add.w	r3, r6, #8
 800f1ae:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800f1b2:	f106 010c 	add.w	r1, r6, #12
 800f1b6:	4628      	mov	r0, r5
 800f1b8:	f004 fc3e 	bl	8013a38 <ucdr_deserialize_sequence_uint8_t>
 800f1bc:	4604      	mov	r4, r0
 800f1be:	2202      	movs	r2, #2
 800f1c0:	f506 7103 	add.w	r1, r6, #524	@ 0x20c
 800f1c4:	4628      	mov	r0, r5
 800f1c6:	f004 fb95 	bl	80138f4 <ucdr_deserialize_array_uint8_t>
 800f1ca:	4020      	ands	r0, r4
 800f1cc:	b2c4      	uxtb	r4, r0
 800f1ce:	e7c6      	b.n	800f15e <uxr_deserialize_ObjectVariant+0x2a>
 800f1d0:	1d31      	adds	r1, r6, #4
 800f1d2:	4628      	mov	r0, r5
 800f1d4:	f7fc f99c 	bl	800b510 <ucdr_deserialize_uint8_t>
 800f1d8:	4604      	mov	r4, r0
 800f1da:	b130      	cbz	r0, 800f1ea <uxr_deserialize_ObjectVariant+0xb6>
 800f1dc:	7933      	ldrb	r3, [r6, #4]
 800f1de:	2b02      	cmp	r3, #2
 800f1e0:	d036      	beq.n	800f250 <uxr_deserialize_ObjectVariant+0x11c>
 800f1e2:	2b03      	cmp	r3, #3
 800f1e4:	d03c      	beq.n	800f260 <uxr_deserialize_ObjectVariant+0x12c>
 800f1e6:	2b01      	cmp	r3, #1
 800f1e8:	d032      	beq.n	800f250 <uxr_deserialize_ObjectVariant+0x11c>
 800f1ea:	f506 7103 	add.w	r1, r6, #524	@ 0x20c
 800f1ee:	4628      	mov	r0, r5
 800f1f0:	f7fc ff34 	bl	800c05c <ucdr_deserialize_int16_t>
 800f1f4:	4020      	ands	r0, r4
 800f1f6:	b2c4      	uxtb	r4, r0
 800f1f8:	e7b1      	b.n	800f15e <uxr_deserialize_ObjectVariant+0x2a>
 800f1fa:	1d31      	adds	r1, r6, #4
 800f1fc:	4628      	mov	r0, r5
 800f1fe:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800f202:	f7ff bc9b 	b.w	800eb3c <uxr_deserialize_CLIENT_Representation>
 800f206:	2204      	movs	r2, #4
 800f208:	18b1      	adds	r1, r6, r2
 800f20a:	4628      	mov	r0, r5
 800f20c:	f004 fb72 	bl	80138f4 <ucdr_deserialize_array_uint8_t>
 800f210:	2202      	movs	r2, #2
 800f212:	f106 0108 	add.w	r1, r6, #8
 800f216:	4604      	mov	r4, r0
 800f218:	4628      	mov	r0, r5
 800f21a:	f004 fb6b 	bl	80138f4 <ucdr_deserialize_array_uint8_t>
 800f21e:	2202      	movs	r2, #2
 800f220:	4004      	ands	r4, r0
 800f222:	f106 010a 	add.w	r1, r6, #10
 800f226:	4628      	mov	r0, r5
 800f228:	f004 fb64 	bl	80138f4 <ucdr_deserialize_array_uint8_t>
 800f22c:	b2e4      	uxtb	r4, r4
 800f22e:	4603      	mov	r3, r0
 800f230:	f106 010c 	add.w	r1, r6, #12
 800f234:	4628      	mov	r0, r5
 800f236:	401c      	ands	r4, r3
 800f238:	f7fc f93c 	bl	800b4b4 <ucdr_deserialize_bool>
 800f23c:	4004      	ands	r4, r0
 800f23e:	e78e      	b.n	800f15e <uxr_deserialize_ObjectVariant+0x2a>
 800f240:	68b1      	ldr	r1, [r6, #8]
 800f242:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800f246:	4628      	mov	r0, r5
 800f248:	f004 fc20 	bl	8013a8c <ucdr_deserialize_string>
 800f24c:	4604      	mov	r4, r0
 800f24e:	e7b6      	b.n	800f1be <uxr_deserialize_ObjectVariant+0x8a>
 800f250:	68b1      	ldr	r1, [r6, #8]
 800f252:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800f256:	4628      	mov	r0, r5
 800f258:	f004 fc18 	bl	8013a8c <ucdr_deserialize_string>
 800f25c:	4604      	mov	r4, r0
 800f25e:	e7c4      	b.n	800f1ea <uxr_deserialize_ObjectVariant+0xb6>
 800f260:	f106 0308 	add.w	r3, r6, #8
 800f264:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800f268:	f106 010c 	add.w	r1, r6, #12
 800f26c:	4628      	mov	r0, r5
 800f26e:	f004 fbe3 	bl	8013a38 <ucdr_deserialize_sequence_uint8_t>
 800f272:	4604      	mov	r4, r0
 800f274:	e7b9      	b.n	800f1ea <uxr_deserialize_ObjectVariant+0xb6>
 800f276:	bf00      	nop

0800f278 <uxr_deserialize_BaseObjectRequest>:
 800f278:	b570      	push	{r4, r5, r6, lr}
 800f27a:	2202      	movs	r2, #2
 800f27c:	4605      	mov	r5, r0
 800f27e:	460e      	mov	r6, r1
 800f280:	f004 fb38 	bl	80138f4 <ucdr_deserialize_array_uint8_t>
 800f284:	2202      	movs	r2, #2
 800f286:	4604      	mov	r4, r0
 800f288:	18b1      	adds	r1, r6, r2
 800f28a:	4628      	mov	r0, r5
 800f28c:	f004 fb32 	bl	80138f4 <ucdr_deserialize_array_uint8_t>
 800f290:	4020      	ands	r0, r4
 800f292:	b2c0      	uxtb	r0, r0
 800f294:	bd70      	pop	{r4, r5, r6, pc}
 800f296:	bf00      	nop

0800f298 <uxr_serialize_ActivityInfoVariant>:
 800f298:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f29c:	460d      	mov	r5, r1
 800f29e:	7809      	ldrb	r1, [r1, #0]
 800f2a0:	4607      	mov	r7, r0
 800f2a2:	f7fc f91f 	bl	800b4e4 <ucdr_serialize_uint8_t>
 800f2a6:	4681      	mov	r9, r0
 800f2a8:	b138      	cbz	r0, 800f2ba <uxr_serialize_ActivityInfoVariant+0x22>
 800f2aa:	782b      	ldrb	r3, [r5, #0]
 800f2ac:	2b06      	cmp	r3, #6
 800f2ae:	f000 8082 	beq.w	800f3b6 <uxr_serialize_ActivityInfoVariant+0x11e>
 800f2b2:	2b0d      	cmp	r3, #13
 800f2b4:	d016      	beq.n	800f2e4 <uxr_serialize_ActivityInfoVariant+0x4c>
 800f2b6:	2b05      	cmp	r3, #5
 800f2b8:	d002      	beq.n	800f2c0 <uxr_serialize_ActivityInfoVariant+0x28>
 800f2ba:	4648      	mov	r0, r9
 800f2bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f2c0:	f9b5 1008 	ldrsh.w	r1, [r5, #8]
 800f2c4:	4638      	mov	r0, r7
 800f2c6:	f7fc fe49 	bl	800bf5c <ucdr_serialize_int16_t>
 800f2ca:	e9d5 2304 	ldrd	r2, r3, [r5, #16]
 800f2ce:	4681      	mov	r9, r0
 800f2d0:	4638      	mov	r0, r7
 800f2d2:	f7fc fd73 	bl	800bdbc <ucdr_serialize_uint64_t>
 800f2d6:	ea09 0000 	and.w	r0, r9, r0
 800f2da:	fa5f f980 	uxtb.w	r9, r0
 800f2de:	4648      	mov	r0, r9
 800f2e0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f2e4:	f9b5 1008 	ldrsh.w	r1, [r5, #8]
 800f2e8:	4638      	mov	r0, r7
 800f2ea:	f7fc fe37 	bl	800bf5c <ucdr_serialize_int16_t>
 800f2ee:	68e9      	ldr	r1, [r5, #12]
 800f2f0:	4681      	mov	r9, r0
 800f2f2:	4638      	mov	r0, r7
 800f2f4:	f7fc fb0c 	bl	800b910 <ucdr_serialize_uint32_t>
 800f2f8:	68eb      	ldr	r3, [r5, #12]
 800f2fa:	2b00      	cmp	r3, #0
 800f2fc:	d0eb      	beq.n	800f2d6 <uxr_serialize_ActivityInfoVariant+0x3e>
 800f2fe:	b320      	cbz	r0, 800f34a <uxr_serialize_ActivityInfoVariant+0xb2>
 800f300:	f105 080c 	add.w	r8, r5, #12
 800f304:	2600      	movs	r6, #0
 800f306:	eb06 0a46 	add.w	sl, r6, r6, lsl #1
 800f30a:	eb05 0aca 	add.w	sl, r5, sl, lsl #3
 800f30e:	f89a 1010 	ldrb.w	r1, [sl, #16]
 800f312:	4638      	mov	r0, r7
 800f314:	f7fc f8e6 	bl	800b4e4 <ucdr_serialize_uint8_t>
 800f318:	2800      	cmp	r0, #0
 800f31a:	d053      	beq.n	800f3c4 <uxr_serialize_ActivityInfoVariant+0x12c>
 800f31c:	f89a 3010 	ldrb.w	r3, [sl, #16]
 800f320:	eb06 0146 	add.w	r1, r6, r6, lsl #1
 800f324:	0074      	lsls	r4, r6, #1
 800f326:	00c9      	lsls	r1, r1, #3
 800f328:	2b03      	cmp	r3, #3
 800f32a:	d854      	bhi.n	800f3d6 <uxr_serialize_ActivityInfoVariant+0x13e>
 800f32c:	e8df f003 	tbb	[pc, r3]
 800f330:	02102132 	.word	0x02102132
 800f334:	4441      	add	r1, r8
 800f336:	4638      	mov	r0, r7
 800f338:	6889      	ldr	r1, [r1, #8]
 800f33a:	f004 fb97 	bl	8013a6c <ucdr_serialize_string>
 800f33e:	68ea      	ldr	r2, [r5, #12]
 800f340:	3601      	adds	r6, #1
 800f342:	4296      	cmp	r6, r2
 800f344:	d242      	bcs.n	800f3cc <uxr_serialize_ActivityInfoVariant+0x134>
 800f346:	2800      	cmp	r0, #0
 800f348:	d1dd      	bne.n	800f306 <uxr_serialize_ActivityInfoVariant+0x6e>
 800f34a:	f04f 0900 	mov.w	r9, #0
 800f34e:	e7b4      	b.n	800f2ba <uxr_serialize_ActivityInfoVariant+0x22>
 800f350:	3108      	adds	r1, #8
 800f352:	4441      	add	r1, r8
 800f354:	2210      	movs	r2, #16
 800f356:	4638      	mov	r0, r7
 800f358:	f004 fa68 	bl	801382c <ucdr_serialize_array_uint8_t>
 800f35c:	4434      	add	r4, r6
 800f35e:	eb05 03c4 	add.w	r3, r5, r4, lsl #3
 800f362:	4604      	mov	r4, r0
 800f364:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 800f366:	4638      	mov	r0, r7
 800f368:	f7fc fad2 	bl	800b910 <ucdr_serialize_uint32_t>
 800f36c:	4020      	ands	r0, r4
 800f36e:	b2c0      	uxtb	r0, r0
 800f370:	e7e5      	b.n	800f33e <uxr_serialize_ActivityInfoVariant+0xa6>
 800f372:	3108      	adds	r1, #8
 800f374:	4441      	add	r1, r8
 800f376:	2204      	movs	r2, #4
 800f378:	4638      	mov	r0, r7
 800f37a:	f004 fa57 	bl	801382c <ucdr_serialize_array_uint8_t>
 800f37e:	4434      	add	r4, r6
 800f380:	eb05 03c4 	add.w	r3, r5, r4, lsl #3
 800f384:	4604      	mov	r4, r0
 800f386:	8b19      	ldrh	r1, [r3, #24]
 800f388:	4638      	mov	r0, r7
 800f38a:	f7fc f8d7 	bl	800b53c <ucdr_serialize_uint16_t>
 800f38e:	4020      	ands	r0, r4
 800f390:	b2c0      	uxtb	r0, r0
 800f392:	e7d4      	b.n	800f33e <uxr_serialize_ActivityInfoVariant+0xa6>
 800f394:	3108      	adds	r1, #8
 800f396:	4441      	add	r1, r8
 800f398:	2202      	movs	r2, #2
 800f39a:	4638      	mov	r0, r7
 800f39c:	f004 fa46 	bl	801382c <ucdr_serialize_array_uint8_t>
 800f3a0:	4434      	add	r4, r6
 800f3a2:	eb05 03c4 	add.w	r3, r5, r4, lsl #3
 800f3a6:	4604      	mov	r4, r0
 800f3a8:	7d99      	ldrb	r1, [r3, #22]
 800f3aa:	4638      	mov	r0, r7
 800f3ac:	f7fc f89a 	bl	800b4e4 <ucdr_serialize_uint8_t>
 800f3b0:	4020      	ands	r0, r4
 800f3b2:	b2c0      	uxtb	r0, r0
 800f3b4:	e7c3      	b.n	800f33e <uxr_serialize_ActivityInfoVariant+0xa6>
 800f3b6:	f9b5 1008 	ldrsh.w	r1, [r5, #8]
 800f3ba:	4638      	mov	r0, r7
 800f3bc:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f3c0:	f7fc bdcc 	b.w	800bf5c <ucdr_serialize_int16_t>
 800f3c4:	68ea      	ldr	r2, [r5, #12]
 800f3c6:	3601      	adds	r6, #1
 800f3c8:	42b2      	cmp	r2, r6
 800f3ca:	d8be      	bhi.n	800f34a <uxr_serialize_ActivityInfoVariant+0xb2>
 800f3cc:	ea09 0900 	and.w	r9, r9, r0
 800f3d0:	fa5f f989 	uxtb.w	r9, r9
 800f3d4:	e771      	b.n	800f2ba <uxr_serialize_ActivityInfoVariant+0x22>
 800f3d6:	68eb      	ldr	r3, [r5, #12]
 800f3d8:	3601      	adds	r6, #1
 800f3da:	429e      	cmp	r6, r3
 800f3dc:	f10a 0a18 	add.w	sl, sl, #24
 800f3e0:	d395      	bcc.n	800f30e <uxr_serialize_ActivityInfoVariant+0x76>
 800f3e2:	e76a      	b.n	800f2ba <uxr_serialize_ActivityInfoVariant+0x22>

0800f3e4 <uxr_deserialize_BaseObjectReply>:
 800f3e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f3e8:	2202      	movs	r2, #2
 800f3ea:	4606      	mov	r6, r0
 800f3ec:	460f      	mov	r7, r1
 800f3ee:	f004 fa81 	bl	80138f4 <ucdr_deserialize_array_uint8_t>
 800f3f2:	2202      	movs	r2, #2
 800f3f4:	18b9      	adds	r1, r7, r2
 800f3f6:	4605      	mov	r5, r0
 800f3f8:	4630      	mov	r0, r6
 800f3fa:	f004 fa7b 	bl	80138f4 <ucdr_deserialize_array_uint8_t>
 800f3fe:	1d39      	adds	r1, r7, #4
 800f400:	4680      	mov	r8, r0
 800f402:	4630      	mov	r0, r6
 800f404:	f7fc f884 	bl	800b510 <ucdr_deserialize_uint8_t>
 800f408:	1d79      	adds	r1, r7, #5
 800f40a:	4604      	mov	r4, r0
 800f40c:	4630      	mov	r0, r6
 800f40e:	f7fc f87f 	bl	800b510 <ucdr_deserialize_uint8_t>
 800f412:	ea05 0508 	and.w	r5, r5, r8
 800f416:	402c      	ands	r4, r5
 800f418:	4020      	ands	r0, r4
 800f41a:	b2c0      	uxtb	r0, r0
 800f41c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800f420 <uxr_serialize_ReadSpecification>:
 800f420:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f424:	460e      	mov	r6, r1
 800f426:	7809      	ldrb	r1, [r1, #0]
 800f428:	4607      	mov	r7, r0
 800f42a:	f7fc f85b 	bl	800b4e4 <ucdr_serialize_uint8_t>
 800f42e:	7871      	ldrb	r1, [r6, #1]
 800f430:	4604      	mov	r4, r0
 800f432:	4638      	mov	r0, r7
 800f434:	f7fc f856 	bl	800b4e4 <ucdr_serialize_uint8_t>
 800f438:	78b1      	ldrb	r1, [r6, #2]
 800f43a:	4004      	ands	r4, r0
 800f43c:	4638      	mov	r0, r7
 800f43e:	f7fc f823 	bl	800b488 <ucdr_serialize_bool>
 800f442:	78b3      	ldrb	r3, [r6, #2]
 800f444:	b2e4      	uxtb	r4, r4
 800f446:	4004      	ands	r4, r0
 800f448:	b94b      	cbnz	r3, 800f45e <uxr_serialize_ReadSpecification+0x3e>
 800f44a:	7a31      	ldrb	r1, [r6, #8]
 800f44c:	4638      	mov	r0, r7
 800f44e:	f7fc f81b 	bl	800b488 <ucdr_serialize_bool>
 800f452:	7a33      	ldrb	r3, [r6, #8]
 800f454:	4004      	ands	r4, r0
 800f456:	b943      	cbnz	r3, 800f46a <uxr_serialize_ReadSpecification+0x4a>
 800f458:	4620      	mov	r0, r4
 800f45a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f45e:	6871      	ldr	r1, [r6, #4]
 800f460:	4638      	mov	r0, r7
 800f462:	f004 fb03 	bl	8013a6c <ucdr_serialize_string>
 800f466:	4004      	ands	r4, r0
 800f468:	e7ef      	b.n	800f44a <uxr_serialize_ReadSpecification+0x2a>
 800f46a:	8971      	ldrh	r1, [r6, #10]
 800f46c:	4638      	mov	r0, r7
 800f46e:	f7fc f865 	bl	800b53c <ucdr_serialize_uint16_t>
 800f472:	89b1      	ldrh	r1, [r6, #12]
 800f474:	4605      	mov	r5, r0
 800f476:	4638      	mov	r0, r7
 800f478:	f7fc f860 	bl	800b53c <ucdr_serialize_uint16_t>
 800f47c:	89f1      	ldrh	r1, [r6, #14]
 800f47e:	4005      	ands	r5, r0
 800f480:	4638      	mov	r0, r7
 800f482:	f7fc f85b 	bl	800b53c <ucdr_serialize_uint16_t>
 800f486:	8a31      	ldrh	r1, [r6, #16]
 800f488:	4680      	mov	r8, r0
 800f48a:	4638      	mov	r0, r7
 800f48c:	f7fc f856 	bl	800b53c <ucdr_serialize_uint16_t>
 800f490:	b2ed      	uxtb	r5, r5
 800f492:	4025      	ands	r5, r4
 800f494:	ea08 0505 	and.w	r5, r8, r5
 800f498:	ea00 0405 	and.w	r4, r0, r5
 800f49c:	4620      	mov	r0, r4
 800f49e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f4a2:	bf00      	nop

0800f4a4 <uxr_serialize_CREATE_CLIENT_Payload>:
 800f4a4:	f7ff baf2 	b.w	800ea8c <uxr_serialize_CLIENT_Representation>

0800f4a8 <uxr_serialize_CREATE_Payload>:
 800f4a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f4aa:	2202      	movs	r2, #2
 800f4ac:	4607      	mov	r7, r0
 800f4ae:	460e      	mov	r6, r1
 800f4b0:	f004 f9bc 	bl	801382c <ucdr_serialize_array_uint8_t>
 800f4b4:	2202      	movs	r2, #2
 800f4b6:	18b1      	adds	r1, r6, r2
 800f4b8:	4605      	mov	r5, r0
 800f4ba:	4638      	mov	r0, r7
 800f4bc:	f004 f9b6 	bl	801382c <ucdr_serialize_array_uint8_t>
 800f4c0:	7931      	ldrb	r1, [r6, #4]
 800f4c2:	4604      	mov	r4, r0
 800f4c4:	4638      	mov	r0, r7
 800f4c6:	f7fc f80d 	bl	800b4e4 <ucdr_serialize_uint8_t>
 800f4ca:	b170      	cbz	r0, 800f4ea <uxr_serialize_CREATE_Payload+0x42>
 800f4cc:	7933      	ldrb	r3, [r6, #4]
 800f4ce:	402c      	ands	r4, r5
 800f4d0:	3b01      	subs	r3, #1
 800f4d2:	b2e4      	uxtb	r4, r4
 800f4d4:	2b0d      	cmp	r3, #13
 800f4d6:	d809      	bhi.n	800f4ec <uxr_serialize_CREATE_Payload+0x44>
 800f4d8:	e8df f003 	tbb	[pc, r3]
 800f4dc:	23230a4c 	.word	0x23230a4c
 800f4e0:	0a0a0a0a 	.word	0x0a0a0a0a
 800f4e4:	12121208 	.word	0x12121208
 800f4e8:	3e45      	.short	0x3e45
 800f4ea:	2400      	movs	r4, #0
 800f4ec:	4620      	mov	r0, r4
 800f4ee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f4f0:	f106 0108 	add.w	r1, r6, #8
 800f4f4:	4638      	mov	r0, r7
 800f4f6:	f7ff fbcf 	bl	800ec98 <uxr_serialize_DATAWRITER_Representation>
 800f4fa:	4004      	ands	r4, r0
 800f4fc:	4620      	mov	r0, r4
 800f4fe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f500:	7a31      	ldrb	r1, [r6, #8]
 800f502:	4638      	mov	r0, r7
 800f504:	f7fb ffee 	bl	800b4e4 <ucdr_serialize_uint8_t>
 800f508:	2800      	cmp	r0, #0
 800f50a:	d0ee      	beq.n	800f4ea <uxr_serialize_CREATE_Payload+0x42>
 800f50c:	7a33      	ldrb	r3, [r6, #8]
 800f50e:	2b01      	cmp	r3, #1
 800f510:	d001      	beq.n	800f516 <uxr_serialize_CREATE_Payload+0x6e>
 800f512:	2b02      	cmp	r3, #2
 800f514:	d1ea      	bne.n	800f4ec <uxr_serialize_CREATE_Payload+0x44>
 800f516:	68f1      	ldr	r1, [r6, #12]
 800f518:	4638      	mov	r0, r7
 800f51a:	f004 faa7 	bl	8013a6c <ucdr_serialize_string>
 800f51e:	4004      	ands	r4, r0
 800f520:	e7e4      	b.n	800f4ec <uxr_serialize_CREATE_Payload+0x44>
 800f522:	7a31      	ldrb	r1, [r6, #8]
 800f524:	4638      	mov	r0, r7
 800f526:	f7fb ffdd 	bl	800b4e4 <ucdr_serialize_uint8_t>
 800f52a:	4605      	mov	r5, r0
 800f52c:	b158      	cbz	r0, 800f546 <uxr_serialize_CREATE_Payload+0x9e>
 800f52e:	7a33      	ldrb	r3, [r6, #8]
 800f530:	2b02      	cmp	r3, #2
 800f532:	d034      	beq.n	800f59e <uxr_serialize_CREATE_Payload+0xf6>
 800f534:	2b03      	cmp	r3, #3
 800f536:	d106      	bne.n	800f546 <uxr_serialize_CREATE_Payload+0x9e>
 800f538:	68f2      	ldr	r2, [r6, #12]
 800f53a:	f106 0110 	add.w	r1, r6, #16
 800f53e:	4638      	mov	r0, r7
 800f540:	f004 fa68 	bl	8013a14 <ucdr_serialize_sequence_uint8_t>
 800f544:	4605      	mov	r5, r0
 800f546:	2202      	movs	r2, #2
 800f548:	f506 7104 	add.w	r1, r6, #528	@ 0x210
 800f54c:	4638      	mov	r0, r7
 800f54e:	f004 f96d 	bl	801382c <ucdr_serialize_array_uint8_t>
 800f552:	4028      	ands	r0, r5
 800f554:	4004      	ands	r4, r0
 800f556:	e7c9      	b.n	800f4ec <uxr_serialize_CREATE_Payload+0x44>
 800f558:	f106 0108 	add.w	r1, r6, #8
 800f55c:	4638      	mov	r0, r7
 800f55e:	f7ff fa95 	bl	800ea8c <uxr_serialize_CLIENT_Representation>
 800f562:	4004      	ands	r4, r0
 800f564:	e7c2      	b.n	800f4ec <uxr_serialize_CREATE_Payload+0x44>
 800f566:	f106 0108 	add.w	r1, r6, #8
 800f56a:	4638      	mov	r0, r7
 800f56c:	f7ff fb4a 	bl	800ec04 <uxr_serialize_AGENT_Representation>
 800f570:	4004      	ands	r4, r0
 800f572:	e7bb      	b.n	800f4ec <uxr_serialize_CREATE_Payload+0x44>
 800f574:	7a31      	ldrb	r1, [r6, #8]
 800f576:	4638      	mov	r0, r7
 800f578:	f7fb ffb4 	bl	800b4e4 <ucdr_serialize_uint8_t>
 800f57c:	4605      	mov	r5, r0
 800f57e:	b130      	cbz	r0, 800f58e <uxr_serialize_CREATE_Payload+0xe6>
 800f580:	7a33      	ldrb	r3, [r6, #8]
 800f582:	2b02      	cmp	r3, #2
 800f584:	d011      	beq.n	800f5aa <uxr_serialize_CREATE_Payload+0x102>
 800f586:	2b03      	cmp	r3, #3
 800f588:	d015      	beq.n	800f5b6 <uxr_serialize_CREATE_Payload+0x10e>
 800f58a:	2b01      	cmp	r3, #1
 800f58c:	d00d      	beq.n	800f5aa <uxr_serialize_CREATE_Payload+0x102>
 800f58e:	f9b6 1210 	ldrsh.w	r1, [r6, #528]	@ 0x210
 800f592:	4638      	mov	r0, r7
 800f594:	f7fc fce2 	bl	800bf5c <ucdr_serialize_int16_t>
 800f598:	4028      	ands	r0, r5
 800f59a:	4004      	ands	r4, r0
 800f59c:	e7a6      	b.n	800f4ec <uxr_serialize_CREATE_Payload+0x44>
 800f59e:	68f1      	ldr	r1, [r6, #12]
 800f5a0:	4638      	mov	r0, r7
 800f5a2:	f004 fa63 	bl	8013a6c <ucdr_serialize_string>
 800f5a6:	4605      	mov	r5, r0
 800f5a8:	e7cd      	b.n	800f546 <uxr_serialize_CREATE_Payload+0x9e>
 800f5aa:	68f1      	ldr	r1, [r6, #12]
 800f5ac:	4638      	mov	r0, r7
 800f5ae:	f004 fa5d 	bl	8013a6c <ucdr_serialize_string>
 800f5b2:	4605      	mov	r5, r0
 800f5b4:	e7eb      	b.n	800f58e <uxr_serialize_CREATE_Payload+0xe6>
 800f5b6:	68f2      	ldr	r2, [r6, #12]
 800f5b8:	f106 0110 	add.w	r1, r6, #16
 800f5bc:	4638      	mov	r0, r7
 800f5be:	f004 fa29 	bl	8013a14 <ucdr_serialize_sequence_uint8_t>
 800f5c2:	4605      	mov	r5, r0
 800f5c4:	e7e3      	b.n	800f58e <uxr_serialize_CREATE_Payload+0xe6>
 800f5c6:	bf00      	nop

0800f5c8 <uxr_deserialize_GET_INFO_Payload>:
 800f5c8:	b570      	push	{r4, r5, r6, lr}
 800f5ca:	2202      	movs	r2, #2
 800f5cc:	4605      	mov	r5, r0
 800f5ce:	460e      	mov	r6, r1
 800f5d0:	f004 f990 	bl	80138f4 <ucdr_deserialize_array_uint8_t>
 800f5d4:	2202      	movs	r2, #2
 800f5d6:	18b1      	adds	r1, r6, r2
 800f5d8:	4604      	mov	r4, r0
 800f5da:	4628      	mov	r0, r5
 800f5dc:	f004 f98a 	bl	80138f4 <ucdr_deserialize_array_uint8_t>
 800f5e0:	1d31      	adds	r1, r6, #4
 800f5e2:	4004      	ands	r4, r0
 800f5e4:	4628      	mov	r0, r5
 800f5e6:	f7fc fac3 	bl	800bb70 <ucdr_deserialize_uint32_t>
 800f5ea:	b2e4      	uxtb	r4, r4
 800f5ec:	4020      	ands	r0, r4
 800f5ee:	bd70      	pop	{r4, r5, r6, pc}

0800f5f0 <uxr_serialize_DELETE_Payload>:
 800f5f0:	b570      	push	{r4, r5, r6, lr}
 800f5f2:	2202      	movs	r2, #2
 800f5f4:	4605      	mov	r5, r0
 800f5f6:	460e      	mov	r6, r1
 800f5f8:	f004 f918 	bl	801382c <ucdr_serialize_array_uint8_t>
 800f5fc:	2202      	movs	r2, #2
 800f5fe:	4604      	mov	r4, r0
 800f600:	18b1      	adds	r1, r6, r2
 800f602:	4628      	mov	r0, r5
 800f604:	f004 f912 	bl	801382c <ucdr_serialize_array_uint8_t>
 800f608:	4020      	ands	r0, r4
 800f60a:	b2c0      	uxtb	r0, r0
 800f60c:	bd70      	pop	{r4, r5, r6, pc}
 800f60e:	bf00      	nop

0800f610 <uxr_deserialize_STATUS_AGENT_Payload>:
 800f610:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f614:	4605      	mov	r5, r0
 800f616:	460e      	mov	r6, r1
 800f618:	f7fb ff7a 	bl	800b510 <ucdr_deserialize_uint8_t>
 800f61c:	1c71      	adds	r1, r6, #1
 800f61e:	4604      	mov	r4, r0
 800f620:	4628      	mov	r0, r5
 800f622:	f7fb ff75 	bl	800b510 <ucdr_deserialize_uint8_t>
 800f626:	2204      	movs	r2, #4
 800f628:	18b1      	adds	r1, r6, r2
 800f62a:	4680      	mov	r8, r0
 800f62c:	4628      	mov	r0, r5
 800f62e:	f004 f961 	bl	80138f4 <ucdr_deserialize_array_uint8_t>
 800f632:	f106 0108 	add.w	r1, r6, #8
 800f636:	4607      	mov	r7, r0
 800f638:	2202      	movs	r2, #2
 800f63a:	4628      	mov	r0, r5
 800f63c:	f004 f95a 	bl	80138f4 <ucdr_deserialize_array_uint8_t>
 800f640:	ea04 0308 	and.w	r3, r4, r8
 800f644:	b2db      	uxtb	r3, r3
 800f646:	ea03 0407 	and.w	r4, r3, r7
 800f64a:	2202      	movs	r2, #2
 800f64c:	4607      	mov	r7, r0
 800f64e:	f106 010a 	add.w	r1, r6, #10
 800f652:	4628      	mov	r0, r5
 800f654:	f004 f94e 	bl	80138f4 <ucdr_deserialize_array_uint8_t>
 800f658:	f106 010c 	add.w	r1, r6, #12
 800f65c:	4603      	mov	r3, r0
 800f65e:	4628      	mov	r0, r5
 800f660:	461d      	mov	r5, r3
 800f662:	f7fb ff27 	bl	800b4b4 <ucdr_deserialize_bool>
 800f666:	403c      	ands	r4, r7
 800f668:	4025      	ands	r5, r4
 800f66a:	4028      	ands	r0, r5
 800f66c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800f670 <uxr_deserialize_STATUS_Payload>:
 800f670:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f674:	2202      	movs	r2, #2
 800f676:	4606      	mov	r6, r0
 800f678:	460f      	mov	r7, r1
 800f67a:	f004 f93b 	bl	80138f4 <ucdr_deserialize_array_uint8_t>
 800f67e:	2202      	movs	r2, #2
 800f680:	18b9      	adds	r1, r7, r2
 800f682:	4605      	mov	r5, r0
 800f684:	4630      	mov	r0, r6
 800f686:	f004 f935 	bl	80138f4 <ucdr_deserialize_array_uint8_t>
 800f68a:	1d39      	adds	r1, r7, #4
 800f68c:	4680      	mov	r8, r0
 800f68e:	4630      	mov	r0, r6
 800f690:	f7fb ff3e 	bl	800b510 <ucdr_deserialize_uint8_t>
 800f694:	1d79      	adds	r1, r7, #5
 800f696:	4604      	mov	r4, r0
 800f698:	4630      	mov	r0, r6
 800f69a:	f7fb ff39 	bl	800b510 <ucdr_deserialize_uint8_t>
 800f69e:	ea05 0508 	and.w	r5, r5, r8
 800f6a2:	402c      	ands	r4, r5
 800f6a4:	4020      	ands	r0, r4
 800f6a6:	b2c0      	uxtb	r0, r0
 800f6a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800f6ac <uxr_serialize_INFO_Payload>:
 800f6ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f6b0:	2202      	movs	r2, #2
 800f6b2:	460c      	mov	r4, r1
 800f6b4:	4605      	mov	r5, r0
 800f6b6:	f004 f8b9 	bl	801382c <ucdr_serialize_array_uint8_t>
 800f6ba:	2202      	movs	r2, #2
 800f6bc:	18a1      	adds	r1, r4, r2
 800f6be:	4680      	mov	r8, r0
 800f6c0:	4628      	mov	r0, r5
 800f6c2:	f004 f8b3 	bl	801382c <ucdr_serialize_array_uint8_t>
 800f6c6:	7921      	ldrb	r1, [r4, #4]
 800f6c8:	4607      	mov	r7, r0
 800f6ca:	4628      	mov	r0, r5
 800f6cc:	f7fb ff0a 	bl	800b4e4 <ucdr_serialize_uint8_t>
 800f6d0:	7961      	ldrb	r1, [r4, #5]
 800f6d2:	4606      	mov	r6, r0
 800f6d4:	4628      	mov	r0, r5
 800f6d6:	f7fb ff05 	bl	800b4e4 <ucdr_serialize_uint8_t>
 800f6da:	ea08 0807 	and.w	r8, r8, r7
 800f6de:	ea06 0608 	and.w	r6, r6, r8
 800f6e2:	4006      	ands	r6, r0
 800f6e4:	7a21      	ldrb	r1, [r4, #8]
 800f6e6:	4628      	mov	r0, r5
 800f6e8:	f7fb fece 	bl	800b488 <ucdr_serialize_bool>
 800f6ec:	7a23      	ldrb	r3, [r4, #8]
 800f6ee:	b2f7      	uxtb	r7, r6
 800f6f0:	4606      	mov	r6, r0
 800f6f2:	b96b      	cbnz	r3, 800f710 <uxr_serialize_INFO_Payload+0x64>
 800f6f4:	f894 121c 	ldrb.w	r1, [r4, #540]	@ 0x21c
 800f6f8:	4628      	mov	r0, r5
 800f6fa:	f7fb fec5 	bl	800b488 <ucdr_serialize_bool>
 800f6fe:	f894 321c 	ldrb.w	r3, [r4, #540]	@ 0x21c
 800f702:	4030      	ands	r0, r6
 800f704:	b2c6      	uxtb	r6, r0
 800f706:	b983      	cbnz	r3, 800f72a <uxr_serialize_INFO_Payload+0x7e>
 800f708:	ea06 0007 	and.w	r0, r6, r7
 800f70c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f710:	7b21      	ldrb	r1, [r4, #12]
 800f712:	4628      	mov	r0, r5
 800f714:	f7fb fee6 	bl	800b4e4 <ucdr_serialize_uint8_t>
 800f718:	b188      	cbz	r0, 800f73e <uxr_serialize_INFO_Payload+0x92>
 800f71a:	f104 010c 	add.w	r1, r4, #12
 800f71e:	4628      	mov	r0, r5
 800f720:	f7ff fae2 	bl	800ece8 <uxr_serialize_ObjectVariant.part.0>
 800f724:	4030      	ands	r0, r6
 800f726:	b2c6      	uxtb	r6, r0
 800f728:	e7e4      	b.n	800f6f4 <uxr_serialize_INFO_Payload+0x48>
 800f72a:	f504 7108 	add.w	r1, r4, #544	@ 0x220
 800f72e:	4628      	mov	r0, r5
 800f730:	f7ff fdb2 	bl	800f298 <uxr_serialize_ActivityInfoVariant>
 800f734:	4006      	ands	r6, r0
 800f736:	ea06 0007 	and.w	r0, r6, r7
 800f73a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f73e:	4606      	mov	r6, r0
 800f740:	e7d8      	b.n	800f6f4 <uxr_serialize_INFO_Payload+0x48>
 800f742:	bf00      	nop

0800f744 <uxr_serialize_READ_DATA_Payload>:
 800f744:	b570      	push	{r4, r5, r6, lr}
 800f746:	2202      	movs	r2, #2
 800f748:	4605      	mov	r5, r0
 800f74a:	460e      	mov	r6, r1
 800f74c:	f004 f86e 	bl	801382c <ucdr_serialize_array_uint8_t>
 800f750:	2202      	movs	r2, #2
 800f752:	18b1      	adds	r1, r6, r2
 800f754:	4604      	mov	r4, r0
 800f756:	4628      	mov	r0, r5
 800f758:	f004 f868 	bl	801382c <ucdr_serialize_array_uint8_t>
 800f75c:	1d31      	adds	r1, r6, #4
 800f75e:	4004      	ands	r4, r0
 800f760:	4628      	mov	r0, r5
 800f762:	f7ff fe5d 	bl	800f420 <uxr_serialize_ReadSpecification>
 800f766:	b2e4      	uxtb	r4, r4
 800f768:	4020      	ands	r0, r4
 800f76a:	bd70      	pop	{r4, r5, r6, pc}

0800f76c <uxr_serialize_WRITE_DATA_Payload_Data>:
 800f76c:	b570      	push	{r4, r5, r6, lr}
 800f76e:	2202      	movs	r2, #2
 800f770:	4605      	mov	r5, r0
 800f772:	460e      	mov	r6, r1
 800f774:	f004 f85a 	bl	801382c <ucdr_serialize_array_uint8_t>
 800f778:	2202      	movs	r2, #2
 800f77a:	4604      	mov	r4, r0
 800f77c:	18b1      	adds	r1, r6, r2
 800f77e:	4628      	mov	r0, r5
 800f780:	f004 f854 	bl	801382c <ucdr_serialize_array_uint8_t>
 800f784:	4020      	ands	r0, r4
 800f786:	b2c0      	uxtb	r0, r0
 800f788:	bd70      	pop	{r4, r5, r6, pc}
 800f78a:	bf00      	nop

0800f78c <uxr_serialize_ACKNACK_Payload>:
 800f78c:	b570      	push	{r4, r5, r6, lr}
 800f78e:	460c      	mov	r4, r1
 800f790:	460e      	mov	r6, r1
 800f792:	f834 1b02 	ldrh.w	r1, [r4], #2
 800f796:	4605      	mov	r5, r0
 800f798:	f7fb fed0 	bl	800b53c <ucdr_serialize_uint16_t>
 800f79c:	2202      	movs	r2, #2
 800f79e:	4621      	mov	r1, r4
 800f7a0:	4604      	mov	r4, r0
 800f7a2:	4628      	mov	r0, r5
 800f7a4:	f004 f842 	bl	801382c <ucdr_serialize_array_uint8_t>
 800f7a8:	7931      	ldrb	r1, [r6, #4]
 800f7aa:	4004      	ands	r4, r0
 800f7ac:	4628      	mov	r0, r5
 800f7ae:	f7fb fe99 	bl	800b4e4 <ucdr_serialize_uint8_t>
 800f7b2:	b2e4      	uxtb	r4, r4
 800f7b4:	4020      	ands	r0, r4
 800f7b6:	bd70      	pop	{r4, r5, r6, pc}

0800f7b8 <uxr_deserialize_ACKNACK_Payload>:
 800f7b8:	b570      	push	{r4, r5, r6, lr}
 800f7ba:	4605      	mov	r5, r0
 800f7bc:	460e      	mov	r6, r1
 800f7be:	f7fb ffbd 	bl	800b73c <ucdr_deserialize_uint16_t>
 800f7c2:	2202      	movs	r2, #2
 800f7c4:	18b1      	adds	r1, r6, r2
 800f7c6:	4604      	mov	r4, r0
 800f7c8:	4628      	mov	r0, r5
 800f7ca:	f004 f893 	bl	80138f4 <ucdr_deserialize_array_uint8_t>
 800f7ce:	1d31      	adds	r1, r6, #4
 800f7d0:	4004      	ands	r4, r0
 800f7d2:	4628      	mov	r0, r5
 800f7d4:	f7fb fe9c 	bl	800b510 <ucdr_deserialize_uint8_t>
 800f7d8:	b2e4      	uxtb	r4, r4
 800f7da:	4020      	ands	r0, r4
 800f7dc:	bd70      	pop	{r4, r5, r6, pc}
 800f7de:	bf00      	nop

0800f7e0 <uxr_serialize_HEARTBEAT_Payload>:
 800f7e0:	b570      	push	{r4, r5, r6, lr}
 800f7e2:	460d      	mov	r5, r1
 800f7e4:	8809      	ldrh	r1, [r1, #0]
 800f7e6:	4606      	mov	r6, r0
 800f7e8:	f7fb fea8 	bl	800b53c <ucdr_serialize_uint16_t>
 800f7ec:	8869      	ldrh	r1, [r5, #2]
 800f7ee:	4604      	mov	r4, r0
 800f7f0:	4630      	mov	r0, r6
 800f7f2:	f7fb fea3 	bl	800b53c <ucdr_serialize_uint16_t>
 800f7f6:	7929      	ldrb	r1, [r5, #4]
 800f7f8:	4004      	ands	r4, r0
 800f7fa:	4630      	mov	r0, r6
 800f7fc:	f7fb fe72 	bl	800b4e4 <ucdr_serialize_uint8_t>
 800f800:	b2e4      	uxtb	r4, r4
 800f802:	4020      	ands	r0, r4
 800f804:	bd70      	pop	{r4, r5, r6, pc}
 800f806:	bf00      	nop

0800f808 <uxr_deserialize_HEARTBEAT_Payload>:
 800f808:	b570      	push	{r4, r5, r6, lr}
 800f80a:	4605      	mov	r5, r0
 800f80c:	460e      	mov	r6, r1
 800f80e:	f7fb ff95 	bl	800b73c <ucdr_deserialize_uint16_t>
 800f812:	1cb1      	adds	r1, r6, #2
 800f814:	4604      	mov	r4, r0
 800f816:	4628      	mov	r0, r5
 800f818:	f7fb ff90 	bl	800b73c <ucdr_deserialize_uint16_t>
 800f81c:	1d31      	adds	r1, r6, #4
 800f81e:	4004      	ands	r4, r0
 800f820:	4628      	mov	r0, r5
 800f822:	f7fb fe75 	bl	800b510 <ucdr_deserialize_uint8_t>
 800f826:	b2e4      	uxtb	r4, r4
 800f828:	4020      	ands	r0, r4
 800f82a:	bd70      	pop	{r4, r5, r6, pc}

0800f82c <uxr_deserialize_TIMESTAMP_REPLY_Payload>:
 800f82c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f830:	4605      	mov	r5, r0
 800f832:	460e      	mov	r6, r1
 800f834:	f7fc fd1e 	bl	800c274 <ucdr_deserialize_int32_t>
 800f838:	1d31      	adds	r1, r6, #4
 800f83a:	4607      	mov	r7, r0
 800f83c:	4628      	mov	r0, r5
 800f83e:	f7fc f997 	bl	800bb70 <ucdr_deserialize_uint32_t>
 800f842:	f106 0108 	add.w	r1, r6, #8
 800f846:	4680      	mov	r8, r0
 800f848:	4628      	mov	r0, r5
 800f84a:	f7fc fd13 	bl	800c274 <ucdr_deserialize_int32_t>
 800f84e:	f106 010c 	add.w	r1, r6, #12
 800f852:	4604      	mov	r4, r0
 800f854:	4628      	mov	r0, r5
 800f856:	f7fc f98b 	bl	800bb70 <ucdr_deserialize_uint32_t>
 800f85a:	ea07 0708 	and.w	r7, r7, r8
 800f85e:	403c      	ands	r4, r7
 800f860:	f106 0110 	add.w	r1, r6, #16
 800f864:	4004      	ands	r4, r0
 800f866:	4628      	mov	r0, r5
 800f868:	f7fc fd04 	bl	800c274 <ucdr_deserialize_int32_t>
 800f86c:	f106 0114 	add.w	r1, r6, #20
 800f870:	4607      	mov	r7, r0
 800f872:	4628      	mov	r0, r5
 800f874:	f7fc f97c 	bl	800bb70 <ucdr_deserialize_uint32_t>
 800f878:	b2e4      	uxtb	r4, r4
 800f87a:	403c      	ands	r4, r7
 800f87c:	4020      	ands	r0, r4
 800f87e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f882:	bf00      	nop

0800f884 <uxr_serialize_SampleIdentity>:
 800f884:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f888:	220c      	movs	r2, #12
 800f88a:	4604      	mov	r4, r0
 800f88c:	460d      	mov	r5, r1
 800f88e:	f003 ffcd 	bl	801382c <ucdr_serialize_array_uint8_t>
 800f892:	2203      	movs	r2, #3
 800f894:	f105 010c 	add.w	r1, r5, #12
 800f898:	4607      	mov	r7, r0
 800f89a:	4620      	mov	r0, r4
 800f89c:	f003 ffc6 	bl	801382c <ucdr_serialize_array_uint8_t>
 800f8a0:	7be9      	ldrb	r1, [r5, #15]
 800f8a2:	4680      	mov	r8, r0
 800f8a4:	4620      	mov	r0, r4
 800f8a6:	f7fb fe1d 	bl	800b4e4 <ucdr_serialize_uint8_t>
 800f8aa:	6929      	ldr	r1, [r5, #16]
 800f8ac:	4606      	mov	r6, r0
 800f8ae:	4620      	mov	r0, r4
 800f8b0:	f7fc fc48 	bl	800c144 <ucdr_serialize_int32_t>
 800f8b4:	6969      	ldr	r1, [r5, #20]
 800f8b6:	4603      	mov	r3, r0
 800f8b8:	4620      	mov	r0, r4
 800f8ba:	ea07 0708 	and.w	r7, r7, r8
 800f8be:	461c      	mov	r4, r3
 800f8c0:	f7fc f826 	bl	800b910 <ucdr_serialize_uint32_t>
 800f8c4:	403e      	ands	r6, r7
 800f8c6:	4034      	ands	r4, r6
 800f8c8:	4020      	ands	r0, r4
 800f8ca:	b2c0      	uxtb	r0, r0
 800f8cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800f8d0 <uxr_deserialize_SampleIdentity>:
 800f8d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f8d4:	220c      	movs	r2, #12
 800f8d6:	4604      	mov	r4, r0
 800f8d8:	460d      	mov	r5, r1
 800f8da:	f004 f80b 	bl	80138f4 <ucdr_deserialize_array_uint8_t>
 800f8de:	2203      	movs	r2, #3
 800f8e0:	f105 010c 	add.w	r1, r5, #12
 800f8e4:	4607      	mov	r7, r0
 800f8e6:	4620      	mov	r0, r4
 800f8e8:	f004 f804 	bl	80138f4 <ucdr_deserialize_array_uint8_t>
 800f8ec:	f105 010f 	add.w	r1, r5, #15
 800f8f0:	4680      	mov	r8, r0
 800f8f2:	4620      	mov	r0, r4
 800f8f4:	f7fb fe0c 	bl	800b510 <ucdr_deserialize_uint8_t>
 800f8f8:	f105 0110 	add.w	r1, r5, #16
 800f8fc:	4606      	mov	r6, r0
 800f8fe:	4620      	mov	r0, r4
 800f900:	f7fc fcb8 	bl	800c274 <ucdr_deserialize_int32_t>
 800f904:	f105 0114 	add.w	r1, r5, #20
 800f908:	4603      	mov	r3, r0
 800f90a:	4620      	mov	r0, r4
 800f90c:	ea07 0708 	and.w	r7, r7, r8
 800f910:	461c      	mov	r4, r3
 800f912:	f7fc f92d 	bl	800bb70 <ucdr_deserialize_uint32_t>
 800f916:	403e      	ands	r6, r7
 800f918:	4034      	ands	r4, r6
 800f91a:	4020      	ands	r0, r4
 800f91c:	b2c0      	uxtb	r0, r0
 800f91e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f922:	bf00      	nop

0800f924 <rcl_client_get_rmw_handle>:
 800f924:	b118      	cbz	r0, 800f92e <rcl_client_get_rmw_handle+0xa>
 800f926:	6800      	ldr	r0, [r0, #0]
 800f928:	b108      	cbz	r0, 800f92e <rcl_client_get_rmw_handle+0xa>
 800f92a:	f8d0 0108 	ldr.w	r0, [r0, #264]	@ 0x108
 800f92e:	4770      	bx	lr

0800f930 <rcl_send_request>:
 800f930:	b570      	push	{r4, r5, r6, lr}
 800f932:	b082      	sub	sp, #8
 800f934:	b1e8      	cbz	r0, 800f972 <rcl_send_request+0x42>
 800f936:	4604      	mov	r4, r0
 800f938:	6800      	ldr	r0, [r0, #0]
 800f93a:	b1d0      	cbz	r0, 800f972 <rcl_send_request+0x42>
 800f93c:	f8d0 3108 	ldr.w	r3, [r0, #264]	@ 0x108
 800f940:	b1bb      	cbz	r3, 800f972 <rcl_send_request+0x42>
 800f942:	460e      	mov	r6, r1
 800f944:	b1d1      	cbz	r1, 800f97c <rcl_send_request+0x4c>
 800f946:	4615      	mov	r5, r2
 800f948:	b1c2      	cbz	r2, 800f97c <rcl_send_request+0x4c>
 800f94a:	2105      	movs	r1, #5
 800f94c:	f500 7088 	add.w	r0, r0, #272	@ 0x110
 800f950:	f002 fc76 	bl	8012240 <__atomic_load_8>
 800f954:	6823      	ldr	r3, [r4, #0]
 800f956:	e9c5 0100 	strd	r0, r1, [r5]
 800f95a:	462a      	mov	r2, r5
 800f95c:	4631      	mov	r1, r6
 800f95e:	f8d3 0108 	ldr.w	r0, [r3, #264]	@ 0x108
 800f962:	f003 fb81 	bl	8013068 <rmw_send_request>
 800f966:	4606      	mov	r6, r0
 800f968:	b160      	cbz	r0, 800f984 <rcl_send_request+0x54>
 800f96a:	2601      	movs	r6, #1
 800f96c:	4630      	mov	r0, r6
 800f96e:	b002      	add	sp, #8
 800f970:	bd70      	pop	{r4, r5, r6, pc}
 800f972:	f44f 76fa 	mov.w	r6, #500	@ 0x1f4
 800f976:	4630      	mov	r0, r6
 800f978:	b002      	add	sp, #8
 800f97a:	bd70      	pop	{r4, r5, r6, pc}
 800f97c:	260b      	movs	r6, #11
 800f97e:	4630      	mov	r0, r6
 800f980:	b002      	add	sp, #8
 800f982:	bd70      	pop	{r4, r5, r6, pc}
 800f984:	6820      	ldr	r0, [r4, #0]
 800f986:	2105      	movs	r1, #5
 800f988:	e9d5 2300 	ldrd	r2, r3, [r5]
 800f98c:	f500 7088 	add.w	r0, r0, #272	@ 0x110
 800f990:	9100      	str	r1, [sp, #0]
 800f992:	f002 fcc1 	bl	8012318 <__atomic_exchange_8>
 800f996:	4630      	mov	r0, r6
 800f998:	b002      	add	sp, #8
 800f99a:	bd70      	pop	{r4, r5, r6, pc}
 800f99c:	0000      	movs	r0, r0
	...

0800f9a0 <rcl_take_response>:
 800f9a0:	b570      	push	{r4, r5, r6, lr}
 800f9a2:	468e      	mov	lr, r1
 800f9a4:	460c      	mov	r4, r1
 800f9a6:	4616      	mov	r6, r2
 800f9a8:	4605      	mov	r5, r0
 800f9aa:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800f9ae:	b08c      	sub	sp, #48	@ 0x30
 800f9b0:	f10d 0c18 	add.w	ip, sp, #24
 800f9b4:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800f9b8:	e89e 0003 	ldmia.w	lr, {r0, r1}
 800f9bc:	e88c 0003 	stmia.w	ip, {r0, r1}
 800f9c0:	b35d      	cbz	r5, 800fa1a <rcl_take_response+0x7a>
 800f9c2:	682b      	ldr	r3, [r5, #0]
 800f9c4:	b34b      	cbz	r3, 800fa1a <rcl_take_response+0x7a>
 800f9c6:	f8d3 0108 	ldr.w	r0, [r3, #264]	@ 0x108
 800f9ca:	b330      	cbz	r0, 800fa1a <rcl_take_response+0x7a>
 800f9cc:	b346      	cbz	r6, 800fa20 <rcl_take_response+0x80>
 800f9ce:	ed9f 7b16 	vldr	d7, [pc, #88]	@ 800fa28 <rcl_take_response+0x88>
 800f9d2:	2300      	movs	r3, #0
 800f9d4:	f88d 3007 	strb.w	r3, [sp, #7]
 800f9d8:	4632      	mov	r2, r6
 800f9da:	f10d 0307 	add.w	r3, sp, #7
 800f9de:	a902      	add	r1, sp, #8
 800f9e0:	ed8d 7b02 	vstr	d7, [sp, #8]
 800f9e4:	ed8d 7b04 	vstr	d7, [sp, #16]
 800f9e8:	f003 fc46 	bl	8013278 <rmw_take_response>
 800f9ec:	4605      	mov	r5, r0
 800f9ee:	b9c8      	cbnz	r0, 800fa24 <rcl_take_response+0x84>
 800f9f0:	f89d 2007 	ldrb.w	r2, [sp, #7]
 800f9f4:	f240 13f5 	movw	r3, #501	@ 0x1f5
 800f9f8:	2a00      	cmp	r2, #0
 800f9fa:	bf08      	it	eq
 800f9fc:	461d      	moveq	r5, r3
 800f9fe:	f10d 0e18 	add.w	lr, sp, #24
 800fa02:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800fa06:	46a4      	mov	ip, r4
 800fa08:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800fa0c:	e89e 0003 	ldmia.w	lr, {r0, r1}
 800fa10:	e88c 0003 	stmia.w	ip, {r0, r1}
 800fa14:	4628      	mov	r0, r5
 800fa16:	b00c      	add	sp, #48	@ 0x30
 800fa18:	bd70      	pop	{r4, r5, r6, pc}
 800fa1a:	f44f 75fa 	mov.w	r5, #500	@ 0x1f4
 800fa1e:	e7ee      	b.n	800f9fe <rcl_take_response+0x5e>
 800fa20:	250b      	movs	r5, #11
 800fa22:	e7ec      	b.n	800f9fe <rcl_take_response+0x5e>
 800fa24:	2501      	movs	r5, #1
 800fa26:	e7ea      	b.n	800f9fe <rcl_take_response+0x5e>
	...

0800fa30 <rcl_client_is_valid>:
 800fa30:	b130      	cbz	r0, 800fa40 <rcl_client_is_valid+0x10>
 800fa32:	6800      	ldr	r0, [r0, #0]
 800fa34:	b120      	cbz	r0, 800fa40 <rcl_client_is_valid+0x10>
 800fa36:	f8d0 0108 	ldr.w	r0, [r0, #264]	@ 0x108
 800fa3a:	3800      	subs	r0, #0
 800fa3c:	bf18      	it	ne
 800fa3e:	2001      	movne	r0, #1
 800fa40:	4770      	bx	lr
 800fa42:	bf00      	nop

0800fa44 <rcl_convert_rmw_ret_to_rcl_ret>:
 800fa44:	280b      	cmp	r0, #11
 800fa46:	dc0d      	bgt.n	800fa64 <rcl_convert_rmw_ret_to_rcl_ret+0x20>
 800fa48:	2800      	cmp	r0, #0
 800fa4a:	db09      	blt.n	800fa60 <rcl_convert_rmw_ret_to_rcl_ret+0x1c>
 800fa4c:	280b      	cmp	r0, #11
 800fa4e:	d807      	bhi.n	800fa60 <rcl_convert_rmw_ret_to_rcl_ret+0x1c>
 800fa50:	e8df f000 	tbb	[pc, r0]
 800fa54:	07060607 	.word	0x07060607
 800fa58:	06060606 	.word	0x06060606
 800fa5c:	07070606 	.word	0x07070606
 800fa60:	2001      	movs	r0, #1
 800fa62:	4770      	bx	lr
 800fa64:	28cb      	cmp	r0, #203	@ 0xcb
 800fa66:	bf18      	it	ne
 800fa68:	2001      	movne	r0, #1
 800fa6a:	4770      	bx	lr

0800fa6c <rcl_get_zero_initialized_context>:
 800fa6c:	4a03      	ldr	r2, [pc, #12]	@ (800fa7c <rcl_get_zero_initialized_context+0x10>)
 800fa6e:	4603      	mov	r3, r0
 800fa70:	e892 0003 	ldmia.w	r2, {r0, r1}
 800fa74:	e883 0003 	stmia.w	r3, {r0, r1}
 800fa78:	4618      	mov	r0, r3
 800fa7a:	4770      	bx	lr
 800fa7c:	08016ab0 	.word	0x08016ab0

0800fa80 <rcl_context_is_valid>:
 800fa80:	b118      	cbz	r0, 800fa8a <rcl_context_is_valid+0xa>
 800fa82:	6840      	ldr	r0, [r0, #4]
 800fa84:	3800      	subs	r0, #0
 800fa86:	bf18      	it	ne
 800fa88:	2001      	movne	r0, #1
 800fa8a:	4770      	bx	lr

0800fa8c <__cleanup_context>:
 800fa8c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800fa90:	4606      	mov	r6, r0
 800fa92:	6800      	ldr	r0, [r0, #0]
 800fa94:	2300      	movs	r3, #0
 800fa96:	6073      	str	r3, [r6, #4]
 800fa98:	2800      	cmp	r0, #0
 800fa9a:	d049      	beq.n	800fb30 <__cleanup_context+0xa4>
 800fa9c:	6947      	ldr	r7, [r0, #20]
 800fa9e:	f8d0 8004 	ldr.w	r8, [r0, #4]
 800faa2:	f8d0 9010 	ldr.w	r9, [r0, #16]
 800faa6:	b137      	cbz	r7, 800fab6 <__cleanup_context+0x2a>
 800faa8:	3014      	adds	r0, #20
 800faaa:	f7f9 fb5d 	bl	8009168 <rcl_init_options_fini>
 800faae:	4607      	mov	r7, r0
 800fab0:	2800      	cmp	r0, #0
 800fab2:	d144      	bne.n	800fb3e <__cleanup_context+0xb2>
 800fab4:	6830      	ldr	r0, [r6, #0]
 800fab6:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 800fab8:	b143      	cbz	r3, 800facc <__cleanup_context+0x40>
 800faba:	3028      	adds	r0, #40	@ 0x28
 800fabc:	f7fa fdd4 	bl	800a668 <rmw_context_fini>
 800fac0:	b118      	cbz	r0, 800faca <__cleanup_context+0x3e>
 800fac2:	2f00      	cmp	r7, #0
 800fac4:	d03e      	beq.n	800fb44 <__cleanup_context+0xb8>
 800fac6:	f7fa fb0b 	bl	800a0e0 <rcutils_reset_error>
 800faca:	6830      	ldr	r0, [r6, #0]
 800facc:	6a03      	ldr	r3, [r0, #32]
 800face:	b1db      	cbz	r3, 800fb08 <__cleanup_context+0x7c>
 800fad0:	e9d0 2c06 	ldrd	r2, ip, [r0, #24]
 800fad4:	2a01      	cmp	r2, #1
 800fad6:	f17c 0100 	sbcs.w	r1, ip, #0
 800fada:	db11      	blt.n	800fb00 <__cleanup_context+0x74>
 800fadc:	2400      	movs	r4, #0
 800fade:	4625      	mov	r5, r4
 800fae0:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 800fae4:	4649      	mov	r1, r9
 800fae6:	b1b8      	cbz	r0, 800fb18 <__cleanup_context+0x8c>
 800fae8:	47c0      	blx	r8
 800faea:	6833      	ldr	r3, [r6, #0]
 800faec:	e9d3 2c06 	ldrd	r2, ip, [r3, #24]
 800faf0:	3401      	adds	r4, #1
 800faf2:	f145 0500 	adc.w	r5, r5, #0
 800faf6:	4294      	cmp	r4, r2
 800faf8:	eb75 010c 	sbcs.w	r1, r5, ip
 800fafc:	6a1b      	ldr	r3, [r3, #32]
 800fafe:	dbef      	blt.n	800fae0 <__cleanup_context+0x54>
 800fb00:	4618      	mov	r0, r3
 800fb02:	4649      	mov	r1, r9
 800fb04:	47c0      	blx	r8
 800fb06:	6830      	ldr	r0, [r6, #0]
 800fb08:	4649      	mov	r1, r9
 800fb0a:	47c0      	blx	r8
 800fb0c:	2300      	movs	r3, #0
 800fb0e:	e9c6 3300 	strd	r3, r3, [r6]
 800fb12:	4638      	mov	r0, r7
 800fb14:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800fb18:	3401      	adds	r4, #1
 800fb1a:	f145 0500 	adc.w	r5, r5, #0
 800fb1e:	4294      	cmp	r4, r2
 800fb20:	eb75 010c 	sbcs.w	r1, r5, ip
 800fb24:	dbdc      	blt.n	800fae0 <__cleanup_context+0x54>
 800fb26:	4618      	mov	r0, r3
 800fb28:	4649      	mov	r1, r9
 800fb2a:	47c0      	blx	r8
 800fb2c:	6830      	ldr	r0, [r6, #0]
 800fb2e:	e7eb      	b.n	800fb08 <__cleanup_context+0x7c>
 800fb30:	4607      	mov	r7, r0
 800fb32:	2300      	movs	r3, #0
 800fb34:	e9c6 3300 	strd	r3, r3, [r6]
 800fb38:	4638      	mov	r0, r7
 800fb3a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800fb3e:	f7fa facf 	bl	800a0e0 <rcutils_reset_error>
 800fb42:	e7b7      	b.n	800fab4 <__cleanup_context+0x28>
 800fb44:	f7ff ff7e 	bl	800fa44 <rcl_convert_rmw_ret_to_rcl_ret>
 800fb48:	4607      	mov	r7, r0
 800fb4a:	e7bc      	b.n	800fac6 <__cleanup_context+0x3a>

0800fb4c <rcl_init>:
 800fb4c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800fb50:	1e05      	subs	r5, r0, #0
 800fb52:	b09e      	sub	sp, #120	@ 0x78
 800fb54:	460e      	mov	r6, r1
 800fb56:	4690      	mov	r8, r2
 800fb58:	461f      	mov	r7, r3
 800fb5a:	f340 809c 	ble.w	800fc96 <rcl_init+0x14a>
 800fb5e:	2900      	cmp	r1, #0
 800fb60:	f000 809c 	beq.w	800fc9c <rcl_init+0x150>
 800fb64:	f1a1 0e04 	sub.w	lr, r1, #4
 800fb68:	f04f 0c00 	mov.w	ip, #0
 800fb6c:	f85e 4f04 	ldr.w	r4, [lr, #4]!
 800fb70:	f10c 0c01 	add.w	ip, ip, #1
 800fb74:	2c00      	cmp	r4, #0
 800fb76:	f000 8091 	beq.w	800fc9c <rcl_init+0x150>
 800fb7a:	4565      	cmp	r5, ip
 800fb7c:	d1f6      	bne.n	800fb6c <rcl_init+0x20>
 800fb7e:	f1b8 0f00 	cmp.w	r8, #0
 800fb82:	f000 808b 	beq.w	800fc9c <rcl_init+0x150>
 800fb86:	f8d8 4000 	ldr.w	r4, [r8]
 800fb8a:	2c00      	cmp	r4, #0
 800fb8c:	f000 8086 	beq.w	800fc9c <rcl_init+0x150>
 800fb90:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800fb92:	f10d 0c64 	add.w	ip, sp, #100	@ 0x64
 800fb96:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800fb9a:	6823      	ldr	r3, [r4, #0]
 800fb9c:	f8cc 3000 	str.w	r3, [ip]
 800fba0:	a819      	add	r0, sp, #100	@ 0x64
 800fba2:	f7fa fa77 	bl	800a094 <rcutils_allocator_is_valid>
 800fba6:	2800      	cmp	r0, #0
 800fba8:	d078      	beq.n	800fc9c <rcl_init+0x150>
 800fbaa:	2f00      	cmp	r7, #0
 800fbac:	d076      	beq.n	800fc9c <rcl_init+0x150>
 800fbae:	683b      	ldr	r3, [r7, #0]
 800fbb0:	2b00      	cmp	r3, #0
 800fbb2:	d178      	bne.n	800fca6 <rcl_init+0x15a>
 800fbb4:	e9dd 321c 	ldrd	r3, r2, [sp, #112]	@ 0x70
 800fbb8:	2178      	movs	r1, #120	@ 0x78
 800fbba:	2001      	movs	r0, #1
 800fbbc:	4798      	blx	r3
 800fbbe:	4604      	mov	r4, r0
 800fbc0:	6038      	str	r0, [r7, #0]
 800fbc2:	2800      	cmp	r0, #0
 800fbc4:	f000 80b6 	beq.w	800fd34 <rcl_init+0x1e8>
 800fbc8:	a802      	add	r0, sp, #8
 800fbca:	f002 fe89 	bl	80128e0 <rmw_get_zero_initialized_context>
 800fbce:	a902      	add	r1, sp, #8
 800fbd0:	f104 0028 	add.w	r0, r4, #40	@ 0x28
 800fbd4:	2250      	movs	r2, #80	@ 0x50
 800fbd6:	ac19      	add	r4, sp, #100	@ 0x64
 800fbd8:	f005 fdbb 	bl	8015752 <memcpy>
 800fbdc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800fbde:	f8d7 e000 	ldr.w	lr, [r7]
 800fbe2:	46f4      	mov	ip, lr
 800fbe4:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800fbe8:	6823      	ldr	r3, [r4, #0]
 800fbea:	f8cc 3000 	str.w	r3, [ip]
 800fbee:	f10e 0114 	add.w	r1, lr, #20
 800fbf2:	4640      	mov	r0, r8
 800fbf4:	f7f9 fae2 	bl	80091bc <rcl_init_options_copy>
 800fbf8:	4604      	mov	r4, r0
 800fbfa:	2800      	cmp	r0, #0
 800fbfc:	d144      	bne.n	800fc88 <rcl_init+0x13c>
 800fbfe:	f8d7 9000 	ldr.w	r9, [r7]
 800fc02:	ea4f 78e5 	mov.w	r8, r5, asr #31
 800fc06:	f8c9 0020 	str.w	r0, [r9, #32]
 800fc0a:	f8c9 5018 	str.w	r5, [r9, #24]
 800fc0e:	f8c9 801c 	str.w	r8, [r9, #28]
 800fc12:	2d00      	cmp	r5, #0
 800fc14:	d04e      	beq.n	800fcb4 <rcl_init+0x168>
 800fc16:	2e00      	cmp	r6, #0
 800fc18:	d04c      	beq.n	800fcb4 <rcl_init+0x168>
 800fc1a:	e9dd 321c 	ldrd	r3, r2, [sp, #112]	@ 0x70
 800fc1e:	2104      	movs	r1, #4
 800fc20:	4628      	mov	r0, r5
 800fc22:	4798      	blx	r3
 800fc24:	f8c9 0020 	str.w	r0, [r9, #32]
 800fc28:	f8d7 9000 	ldr.w	r9, [r7]
 800fc2c:	f8d9 3020 	ldr.w	r3, [r9, #32]
 800fc30:	46ca      	mov	sl, r9
 800fc32:	b343      	cbz	r3, 800fc86 <rcl_init+0x13a>
 800fc34:	2d01      	cmp	r5, #1
 800fc36:	f178 0300 	sbcs.w	r3, r8, #0
 800fc3a:	db3b      	blt.n	800fcb4 <rcl_init+0x168>
 800fc3c:	2400      	movs	r4, #0
 800fc3e:	3e04      	subs	r6, #4
 800fc40:	46a1      	mov	r9, r4
 800fc42:	e00b      	b.n	800fc5c <rcl_init+0x110>
 800fc44:	6831      	ldr	r1, [r6, #0]
 800fc46:	f005 fd84 	bl	8015752 <memcpy>
 800fc4a:	3401      	adds	r4, #1
 800fc4c:	f149 0900 	adc.w	r9, r9, #0
 800fc50:	45c8      	cmp	r8, r9
 800fc52:	bf08      	it	eq
 800fc54:	42a5      	cmpeq	r5, r4
 800fc56:	d02b      	beq.n	800fcb0 <rcl_init+0x164>
 800fc58:	f8d7 a000 	ldr.w	sl, [r7]
 800fc5c:	f856 0f04 	ldr.w	r0, [r6, #4]!
 800fc60:	f7f0 fac8 	bl	80001f4 <strlen>
 800fc64:	1c42      	adds	r2, r0, #1
 800fc66:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800fc68:	991d      	ldr	r1, [sp, #116]	@ 0x74
 800fc6a:	f8da a020 	ldr.w	sl, [sl, #32]
 800fc6e:	9201      	str	r2, [sp, #4]
 800fc70:	4610      	mov	r0, r2
 800fc72:	4798      	blx	r3
 800fc74:	683b      	ldr	r3, [r7, #0]
 800fc76:	f84a 0024 	str.w	r0, [sl, r4, lsl #2]
 800fc7a:	6a1b      	ldr	r3, [r3, #32]
 800fc7c:	9a01      	ldr	r2, [sp, #4]
 800fc7e:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 800fc82:	2800      	cmp	r0, #0
 800fc84:	d1de      	bne.n	800fc44 <rcl_init+0xf8>
 800fc86:	240a      	movs	r4, #10
 800fc88:	4638      	mov	r0, r7
 800fc8a:	f7ff feff 	bl	800fa8c <__cleanup_context>
 800fc8e:	4620      	mov	r0, r4
 800fc90:	b01e      	add	sp, #120	@ 0x78
 800fc92:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800fc96:	2900      	cmp	r1, #0
 800fc98:	f43f af71 	beq.w	800fb7e <rcl_init+0x32>
 800fc9c:	240b      	movs	r4, #11
 800fc9e:	4620      	mov	r0, r4
 800fca0:	b01e      	add	sp, #120	@ 0x78
 800fca2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800fca6:	2464      	movs	r4, #100	@ 0x64
 800fca8:	4620      	mov	r0, r4
 800fcaa:	b01e      	add	sp, #120	@ 0x78
 800fcac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800fcb0:	f8d7 9000 	ldr.w	r9, [r7]
 800fcb4:	4926      	ldr	r1, [pc, #152]	@ (800fd50 <rcl_init+0x204>)
 800fcb6:	680b      	ldr	r3, [r1, #0]
 800fcb8:	3301      	adds	r3, #1
 800fcba:	d036      	beq.n	800fd2a <rcl_init+0x1de>
 800fcbc:	600b      	str	r3, [r1, #0]
 800fcbe:	461a      	mov	r2, r3
 800fcc0:	2400      	movs	r4, #0
 800fcc2:	f8d9 0014 	ldr.w	r0, [r9, #20]
 800fcc6:	607b      	str	r3, [r7, #4]
 800fcc8:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 800fcca:	3301      	adds	r3, #1
 800fccc:	e9c0 2406 	strd	r2, r4, [r0, #24]
 800fcd0:	d034      	beq.n	800fd3c <rcl_init+0x1f0>
 800fcd2:	f890 3030 	ldrb.w	r3, [r0, #48]	@ 0x30
 800fcd6:	b93b      	cbnz	r3, 800fce8 <rcl_init+0x19c>
 800fcd8:	3030      	adds	r0, #48	@ 0x30
 800fcda:	f000 f83b 	bl	800fd54 <rcl_get_localhost_only>
 800fcde:	4604      	mov	r4, r0
 800fce0:	2800      	cmp	r0, #0
 800fce2:	d1d1      	bne.n	800fc88 <rcl_init+0x13c>
 800fce4:	683b      	ldr	r3, [r7, #0]
 800fce6:	6958      	ldr	r0, [r3, #20]
 800fce8:	6b40      	ldr	r0, [r0, #52]	@ 0x34
 800fcea:	aa18      	add	r2, sp, #96	@ 0x60
 800fcec:	a917      	add	r1, sp, #92	@ 0x5c
 800fcee:	f000 ff43 	bl	8010b78 <rcl_validate_enclave_name>
 800fcf2:	4604      	mov	r4, r0
 800fcf4:	2800      	cmp	r0, #0
 800fcf6:	d1c7      	bne.n	800fc88 <rcl_init+0x13c>
 800fcf8:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800fcfa:	b9eb      	cbnz	r3, 800fd38 <rcl_init+0x1ec>
 800fcfc:	6839      	ldr	r1, [r7, #0]
 800fcfe:	694b      	ldr	r3, [r1, #20]
 800fd00:	6b58      	ldr	r0, [r3, #52]	@ 0x34
 800fd02:	f103 0228 	add.w	r2, r3, #40	@ 0x28
 800fd06:	f000 fb3f 	bl	8010388 <rcl_get_security_options_from_environment>
 800fd0a:	4604      	mov	r4, r0
 800fd0c:	2800      	cmp	r0, #0
 800fd0e:	d1bb      	bne.n	800fc88 <rcl_init+0x13c>
 800fd10:	6839      	ldr	r1, [r7, #0]
 800fd12:	6948      	ldr	r0, [r1, #20]
 800fd14:	3128      	adds	r1, #40	@ 0x28
 800fd16:	3018      	adds	r0, #24
 800fd18:	f7fa fb70 	bl	800a3fc <rmw_init>
 800fd1c:	4604      	mov	r4, r0
 800fd1e:	2800      	cmp	r0, #0
 800fd20:	d0bd      	beq.n	800fc9e <rcl_init+0x152>
 800fd22:	f7ff fe8f 	bl	800fa44 <rcl_convert_rmw_ret_to_rcl_ret>
 800fd26:	4604      	mov	r4, r0
 800fd28:	e7ae      	b.n	800fc88 <rcl_init+0x13c>
 800fd2a:	2201      	movs	r2, #1
 800fd2c:	461c      	mov	r4, r3
 800fd2e:	600a      	str	r2, [r1, #0]
 800fd30:	4613      	mov	r3, r2
 800fd32:	e7c6      	b.n	800fcc2 <rcl_init+0x176>
 800fd34:	240a      	movs	r4, #10
 800fd36:	e7b2      	b.n	800fc9e <rcl_init+0x152>
 800fd38:	2401      	movs	r4, #1
 800fd3a:	e7a5      	b.n	800fc88 <rcl_init+0x13c>
 800fd3c:	3024      	adds	r0, #36	@ 0x24
 800fd3e:	f004 fc25 	bl	801458c <rcl_get_default_domain_id>
 800fd42:	4604      	mov	r4, r0
 800fd44:	2800      	cmp	r0, #0
 800fd46:	d19f      	bne.n	800fc88 <rcl_init+0x13c>
 800fd48:	683b      	ldr	r3, [r7, #0]
 800fd4a:	6958      	ldr	r0, [r3, #20]
 800fd4c:	e7c1      	b.n	800fcd2 <rcl_init+0x186>
 800fd4e:	bf00      	nop
 800fd50:	2000dab0 	.word	0x2000dab0

0800fd54 <rcl_get_localhost_only>:
 800fd54:	b510      	push	{r4, lr}
 800fd56:	b082      	sub	sp, #8
 800fd58:	2300      	movs	r3, #0
 800fd5a:	9301      	str	r3, [sp, #4]
 800fd5c:	b1b8      	cbz	r0, 800fd8e <rcl_get_localhost_only+0x3a>
 800fd5e:	4604      	mov	r4, r0
 800fd60:	a901      	add	r1, sp, #4
 800fd62:	480c      	ldr	r0, [pc, #48]	@ (800fd94 <rcl_get_localhost_only+0x40>)
 800fd64:	f002 fb10 	bl	8012388 <rcutils_get_env>
 800fd68:	b110      	cbz	r0, 800fd70 <rcl_get_localhost_only+0x1c>
 800fd6a:	2001      	movs	r0, #1
 800fd6c:	b002      	add	sp, #8
 800fd6e:	bd10      	pop	{r4, pc}
 800fd70:	9b01      	ldr	r3, [sp, #4]
 800fd72:	b113      	cbz	r3, 800fd7a <rcl_get_localhost_only+0x26>
 800fd74:	781a      	ldrb	r2, [r3, #0]
 800fd76:	2a31      	cmp	r2, #49	@ 0x31
 800fd78:	d004      	beq.n	800fd84 <rcl_get_localhost_only+0x30>
 800fd7a:	2302      	movs	r3, #2
 800fd7c:	2000      	movs	r0, #0
 800fd7e:	7023      	strb	r3, [r4, #0]
 800fd80:	b002      	add	sp, #8
 800fd82:	bd10      	pop	{r4, pc}
 800fd84:	785b      	ldrb	r3, [r3, #1]
 800fd86:	2b00      	cmp	r3, #0
 800fd88:	d1f7      	bne.n	800fd7a <rcl_get_localhost_only+0x26>
 800fd8a:	2301      	movs	r3, #1
 800fd8c:	e7f6      	b.n	800fd7c <rcl_get_localhost_only+0x28>
 800fd8e:	200b      	movs	r0, #11
 800fd90:	b002      	add	sp, #8
 800fd92:	bd10      	pop	{r4, pc}
 800fd94:	08016ab8 	.word	0x08016ab8

0800fd98 <rcl_get_zero_initialized_node>:
 800fd98:	4a03      	ldr	r2, [pc, #12]	@ (800fda8 <rcl_get_zero_initialized_node+0x10>)
 800fd9a:	4603      	mov	r3, r0
 800fd9c:	e892 0003 	ldmia.w	r2, {r0, r1}
 800fda0:	e883 0003 	stmia.w	r3, {r0, r1}
 800fda4:	4618      	mov	r0, r3
 800fda6:	4770      	bx	lr
 800fda8:	08016ad4 	.word	0x08016ad4

0800fdac <rcl_node_init>:
 800fdac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fdb0:	b0a9      	sub	sp, #164	@ 0xa4
 800fdb2:	4604      	mov	r4, r0
 800fdb4:	f8dd 80c8 	ldr.w	r8, [sp, #200]	@ 0xc8
 800fdb8:	a823      	add	r0, sp, #140	@ 0x8c
 800fdba:	460e      	mov	r6, r1
 800fdbc:	4615      	mov	r5, r2
 800fdbe:	461f      	mov	r7, r3
 800fdc0:	f004 fe0c 	bl	80149dc <rcl_guard_condition_get_default_options>
 800fdc4:	f1b8 0f00 	cmp.w	r8, #0
 800fdc8:	f000 80e6 	beq.w	800ff98 <rcl_node_init+0x1ec>
 800fdcc:	4640      	mov	r0, r8
 800fdce:	f7fa f961 	bl	800a094 <rcutils_allocator_is_valid>
 800fdd2:	2800      	cmp	r0, #0
 800fdd4:	f000 80e0 	beq.w	800ff98 <rcl_node_init+0x1ec>
 800fdd8:	2e00      	cmp	r6, #0
 800fdda:	f000 80dd 	beq.w	800ff98 <rcl_node_init+0x1ec>
 800fdde:	2d00      	cmp	r5, #0
 800fde0:	f000 80da 	beq.w	800ff98 <rcl_node_init+0x1ec>
 800fde4:	2c00      	cmp	r4, #0
 800fde6:	f000 80d7 	beq.w	800ff98 <rcl_node_init+0x1ec>
 800fdea:	f8d4 9004 	ldr.w	r9, [r4, #4]
 800fdee:	f1b9 0f00 	cmp.w	r9, #0
 800fdf2:	f040 80fd 	bne.w	800fff0 <rcl_node_init+0x244>
 800fdf6:	2f00      	cmp	r7, #0
 800fdf8:	f000 80ce 	beq.w	800ff98 <rcl_node_init+0x1ec>
 800fdfc:	4638      	mov	r0, r7
 800fdfe:	f7ff fe3f 	bl	800fa80 <rcl_context_is_valid>
 800fe02:	4682      	mov	sl, r0
 800fe04:	2800      	cmp	r0, #0
 800fe06:	f000 80cd 	beq.w	800ffa4 <rcl_node_init+0x1f8>
 800fe0a:	464a      	mov	r2, r9
 800fe0c:	a922      	add	r1, sp, #136	@ 0x88
 800fe0e:	4630      	mov	r0, r6
 800fe10:	f8cd 9088 	str.w	r9, [sp, #136]	@ 0x88
 800fe14:	f002 ff02 	bl	8012c1c <rmw_validate_node_name>
 800fe18:	4681      	mov	r9, r0
 800fe1a:	2800      	cmp	r0, #0
 800fe1c:	f040 80be 	bne.w	800ff9c <rcl_node_init+0x1f0>
 800fe20:	9822      	ldr	r0, [sp, #136]	@ 0x88
 800fe22:	2800      	cmp	r0, #0
 800fe24:	f040 80f0 	bne.w	8010008 <rcl_node_init+0x25c>
 800fe28:	4628      	mov	r0, r5
 800fe2a:	f7f0 f9e3 	bl	80001f4 <strlen>
 800fe2e:	2800      	cmp	r0, #0
 800fe30:	f040 80bb 	bne.w	800ffaa <rcl_node_init+0x1fe>
 800fe34:	4d7c      	ldr	r5, [pc, #496]	@ (8010028 <rcl_node_init+0x27c>)
 800fe36:	a922      	add	r1, sp, #136	@ 0x88
 800fe38:	2200      	movs	r2, #0
 800fe3a:	4628      	mov	r0, r5
 800fe3c:	f002 fed0 	bl	8012be0 <rmw_validate_namespace>
 800fe40:	4681      	mov	r9, r0
 800fe42:	2800      	cmp	r0, #0
 800fe44:	f040 80aa 	bne.w	800ff9c <rcl_node_init+0x1f0>
 800fe48:	4682      	mov	sl, r0
 800fe4a:	9822      	ldr	r0, [sp, #136]	@ 0x88
 800fe4c:	2800      	cmp	r0, #0
 800fe4e:	f040 80e0 	bne.w	8010012 <rcl_node_init+0x266>
 800fe52:	f8d8 3000 	ldr.w	r3, [r8]
 800fe56:	f8d8 1010 	ldr.w	r1, [r8, #16]
 800fe5a:	2078      	movs	r0, #120	@ 0x78
 800fe5c:	4798      	blx	r3
 800fe5e:	4681      	mov	r9, r0
 800fe60:	6060      	str	r0, [r4, #4]
 800fe62:	2800      	cmp	r0, #0
 800fe64:	f000 80ca 	beq.w	800fffc <rcl_node_init+0x250>
 800fe68:	2200      	movs	r2, #0
 800fe6a:	2300      	movs	r3, #0
 800fe6c:	e9c9 231a 	strd	r2, r3, [r9, #104]	@ 0x68
 800fe70:	e9c9 231c 	strd	r2, r3, [r9, #112]	@ 0x70
 800fe74:	a808      	add	r0, sp, #32
 800fe76:	f000 f907 	bl	8010088 <rcl_node_get_default_options>
 800fe7a:	a908      	add	r1, sp, #32
 800fe7c:	4648      	mov	r0, r9
 800fe7e:	2268      	movs	r2, #104	@ 0x68
 800fe80:	f005 fc67 	bl	8015752 <memcpy>
 800fe84:	6861      	ldr	r1, [r4, #4]
 800fe86:	6027      	str	r7, [r4, #0]
 800fe88:	4640      	mov	r0, r8
 800fe8a:	f000 f90b 	bl	80100a4 <rcl_node_options_copy>
 800fe8e:	2800      	cmp	r0, #0
 800fe90:	d158      	bne.n	800ff44 <rcl_node_init+0x198>
 800fe92:	4628      	mov	r0, r5
 800fe94:	f7f0 f9ae 	bl	80001f4 <strlen>
 800fe98:	4428      	add	r0, r5
 800fe9a:	f810 3c01 	ldrb.w	r3, [r0, #-1]
 800fe9e:	e9cd 5603 	strd	r5, r6, [sp, #12]
 800fea2:	2b2f      	cmp	r3, #47	@ 0x2f
 800fea4:	f8d8 3010 	ldr.w	r3, [r8, #16]
 800fea8:	9300      	str	r3, [sp, #0]
 800feaa:	bf0c      	ite	eq
 800feac:	4b5f      	ldreq	r3, [pc, #380]	@ (801002c <rcl_node_init+0x280>)
 800feae:	4b60      	ldrne	r3, [pc, #384]	@ (8010030 <rcl_node_init+0x284>)
 800feb0:	9302      	str	r3, [sp, #8]
 800feb2:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800feb6:	9301      	str	r3, [sp, #4]
 800feb8:	e898 000f 	ldmia.w	r8, {r0, r1, r2, r3}
 800febc:	f8d4 9004 	ldr.w	r9, [r4, #4]
 800fec0:	f002 fa8a 	bl	80123d8 <rcutils_format_string_limit>
 800fec4:	6823      	ldr	r3, [r4, #0]
 800fec6:	f8c9 0074 	str.w	r0, [r9, #116]	@ 0x74
 800feca:	6818      	ldr	r0, [r3, #0]
 800fecc:	4631      	mov	r1, r6
 800fece:	3028      	adds	r0, #40	@ 0x28
 800fed0:	462a      	mov	r2, r5
 800fed2:	6866      	ldr	r6, [r4, #4]
 800fed4:	f7fa fc74 	bl	800a7c0 <rmw_create_node>
 800fed8:	6863      	ldr	r3, [r4, #4]
 800feda:	66b0      	str	r0, [r6, #104]	@ 0x68
 800fedc:	6e98      	ldr	r0, [r3, #104]	@ 0x68
 800fede:	2800      	cmp	r0, #0
 800fee0:	d032      	beq.n	800ff48 <rcl_node_init+0x19c>
 800fee2:	f7fa fd01 	bl	800a8e8 <rmw_node_get_graph_guard_condition>
 800fee6:	4681      	mov	r9, r0
 800fee8:	b360      	cbz	r0, 800ff44 <rcl_node_init+0x198>
 800feea:	f8d8 3000 	ldr.w	r3, [r8]
 800feee:	f8d8 1010 	ldr.w	r1, [r8, #16]
 800fef2:	6866      	ldr	r6, [r4, #4]
 800fef4:	2008      	movs	r0, #8
 800fef6:	4798      	blx	r3
 800fef8:	6863      	ldr	r3, [r4, #4]
 800fefa:	66f0      	str	r0, [r6, #108]	@ 0x6c
 800fefc:	f8d3 b06c 	ldr.w	fp, [r3, #108]	@ 0x6c
 800ff00:	f1bb 0f00 	cmp.w	fp, #0
 800ff04:	d020      	beq.n	800ff48 <rcl_node_init+0x19c>
 800ff06:	a806      	add	r0, sp, #24
 800ff08:	f004 fcd8 	bl	80148bc <rcl_get_zero_initialized_guard_condition>
 800ff0c:	a806      	add	r0, sp, #24
 800ff0e:	c803      	ldmia	r0, {r0, r1}
 800ff10:	6863      	ldr	r3, [r4, #4]
 800ff12:	46c4      	mov	ip, r8
 800ff14:	f8d3 e06c 	ldr.w	lr, [r3, #108]	@ 0x6c
 800ff18:	e88b 0003 	stmia.w	fp, {r0, r1}
 800ff1c:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800ff20:	ae23      	add	r6, sp, #140	@ 0x8c
 800ff22:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 800ff24:	f8dc 3000 	ldr.w	r3, [ip]
 800ff28:	6033      	str	r3, [r6, #0]
 800ff2a:	ab28      	add	r3, sp, #160	@ 0xa0
 800ff2c:	e913 000f 	ldmdb	r3, {r0, r1, r2, r3}
 800ff30:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 800ff34:	4649      	mov	r1, r9
 800ff36:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800ff38:	463a      	mov	r2, r7
 800ff3a:	4670      	mov	r0, lr
 800ff3c:	f004 fcc8 	bl	80148d0 <rcl_guard_condition_init_from_rmw>
 800ff40:	4681      	mov	r9, r0
 800ff42:	b328      	cbz	r0, 800ff90 <rcl_node_init+0x1e4>
 800ff44:	6863      	ldr	r3, [r4, #4]
 800ff46:	b1f3      	cbz	r3, 800ff86 <rcl_node_init+0x1da>
 800ff48:	6f58      	ldr	r0, [r3, #116]	@ 0x74
 800ff4a:	b128      	cbz	r0, 800ff58 <rcl_node_init+0x1ac>
 800ff4c:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800ff50:	f8d8 1010 	ldr.w	r1, [r8, #16]
 800ff54:	4798      	blx	r3
 800ff56:	6863      	ldr	r3, [r4, #4]
 800ff58:	6e98      	ldr	r0, [r3, #104]	@ 0x68
 800ff5a:	b110      	cbz	r0, 800ff62 <rcl_node_init+0x1b6>
 800ff5c:	f7fa fc48 	bl	800a7f0 <rmw_destroy_node>
 800ff60:	6863      	ldr	r3, [r4, #4]
 800ff62:	6ed8      	ldr	r0, [r3, #108]	@ 0x6c
 800ff64:	b148      	cbz	r0, 800ff7a <rcl_node_init+0x1ce>
 800ff66:	f004 fd13 	bl	8014990 <rcl_guard_condition_fini>
 800ff6a:	6863      	ldr	r3, [r4, #4]
 800ff6c:	f8d8 1010 	ldr.w	r1, [r8, #16]
 800ff70:	6ed8      	ldr	r0, [r3, #108]	@ 0x6c
 800ff72:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800ff76:	4798      	blx	r3
 800ff78:	6863      	ldr	r3, [r4, #4]
 800ff7a:	f8d8 1010 	ldr.w	r1, [r8, #16]
 800ff7e:	4618      	mov	r0, r3
 800ff80:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800ff84:	4798      	blx	r3
 800ff86:	2300      	movs	r3, #0
 800ff88:	e9c4 3300 	strd	r3, r3, [r4]
 800ff8c:	f04f 0901 	mov.w	r9, #1
 800ff90:	f1ba 0f00 	cmp.w	sl, #0
 800ff94:	d125      	bne.n	800ffe2 <rcl_node_init+0x236>
 800ff96:	e001      	b.n	800ff9c <rcl_node_init+0x1f0>
 800ff98:	f04f 090b 	mov.w	r9, #11
 800ff9c:	4648      	mov	r0, r9
 800ff9e:	b029      	add	sp, #164	@ 0xa4
 800ffa0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ffa4:	f04f 0965 	mov.w	r9, #101	@ 0x65
 800ffa8:	e7f8      	b.n	800ff9c <rcl_node_init+0x1f0>
 800ffaa:	782b      	ldrb	r3, [r5, #0]
 800ffac:	2b2f      	cmp	r3, #47	@ 0x2f
 800ffae:	f43f af42 	beq.w	800fe36 <rcl_node_init+0x8a>
 800ffb2:	9503      	str	r5, [sp, #12]
 800ffb4:	f8d8 3010 	ldr.w	r3, [r8, #16]
 800ffb8:	9300      	str	r3, [sp, #0]
 800ffba:	4b1e      	ldr	r3, [pc, #120]	@ (8010034 <rcl_node_init+0x288>)
 800ffbc:	9302      	str	r3, [sp, #8]
 800ffbe:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800ffc2:	9301      	str	r3, [sp, #4]
 800ffc4:	e898 000f 	ldmia.w	r8, {r0, r1, r2, r3}
 800ffc8:	f002 fa06 	bl	80123d8 <rcutils_format_string_limit>
 800ffcc:	4605      	mov	r5, r0
 800ffce:	b340      	cbz	r0, 8010022 <rcl_node_init+0x276>
 800ffd0:	2200      	movs	r2, #0
 800ffd2:	a922      	add	r1, sp, #136	@ 0x88
 800ffd4:	9222      	str	r2, [sp, #136]	@ 0x88
 800ffd6:	f002 fe03 	bl	8012be0 <rmw_validate_namespace>
 800ffda:	4681      	mov	r9, r0
 800ffdc:	2800      	cmp	r0, #0
 800ffde:	f43f af34 	beq.w	800fe4a <rcl_node_init+0x9e>
 800ffe2:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800ffe6:	f8d8 1010 	ldr.w	r1, [r8, #16]
 800ffea:	4628      	mov	r0, r5
 800ffec:	4798      	blx	r3
 800ffee:	e7d5      	b.n	800ff9c <rcl_node_init+0x1f0>
 800fff0:	f04f 0964 	mov.w	r9, #100	@ 0x64
 800fff4:	4648      	mov	r0, r9
 800fff6:	b029      	add	sp, #164	@ 0xa4
 800fff8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fffc:	f04f 090a 	mov.w	r9, #10
 8010000:	f1ba 0f00 	cmp.w	sl, #0
 8010004:	d1ed      	bne.n	800ffe2 <rcl_node_init+0x236>
 8010006:	e7c9      	b.n	800ff9c <rcl_node_init+0x1f0>
 8010008:	f002 fe5a 	bl	8012cc0 <rmw_node_name_validation_result_string>
 801000c:	f04f 09c9 	mov.w	r9, #201	@ 0xc9
 8010010:	e7c4      	b.n	800ff9c <rcl_node_init+0x1f0>
 8010012:	f002 fdf7 	bl	8012c04 <rmw_namespace_validation_result_string>
 8010016:	f04f 09ca 	mov.w	r9, #202	@ 0xca
 801001a:	f1ba 0f00 	cmp.w	sl, #0
 801001e:	d1e0      	bne.n	800ffe2 <rcl_node_init+0x236>
 8010020:	e7bc      	b.n	800ff9c <rcl_node_init+0x1f0>
 8010022:	f04f 090a 	mov.w	r9, #10
 8010026:	e7b9      	b.n	800ff9c <rcl_node_init+0x1f0>
 8010028:	08016708 	.word	0x08016708
 801002c:	08016754 	.word	0x08016754
 8010030:	0801670c 	.word	0x0801670c
 8010034:	08016ad0 	.word	0x08016ad0

08010038 <rcl_node_is_valid>:
 8010038:	b130      	cbz	r0, 8010048 <rcl_node_is_valid+0x10>
 801003a:	6843      	ldr	r3, [r0, #4]
 801003c:	b123      	cbz	r3, 8010048 <rcl_node_is_valid+0x10>
 801003e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8010040:	b113      	cbz	r3, 8010048 <rcl_node_is_valid+0x10>
 8010042:	6800      	ldr	r0, [r0, #0]
 8010044:	f7ff bd1c 	b.w	800fa80 <rcl_context_is_valid>
 8010048:	2000      	movs	r0, #0
 801004a:	4770      	bx	lr

0801004c <rcl_node_get_name>:
 801004c:	b120      	cbz	r0, 8010058 <rcl_node_get_name+0xc>
 801004e:	6840      	ldr	r0, [r0, #4]
 8010050:	b110      	cbz	r0, 8010058 <rcl_node_get_name+0xc>
 8010052:	6e80      	ldr	r0, [r0, #104]	@ 0x68
 8010054:	b100      	cbz	r0, 8010058 <rcl_node_get_name+0xc>
 8010056:	6880      	ldr	r0, [r0, #8]
 8010058:	4770      	bx	lr
 801005a:	bf00      	nop

0801005c <rcl_node_get_namespace>:
 801005c:	b120      	cbz	r0, 8010068 <rcl_node_get_namespace+0xc>
 801005e:	6840      	ldr	r0, [r0, #4]
 8010060:	b110      	cbz	r0, 8010068 <rcl_node_get_namespace+0xc>
 8010062:	6e80      	ldr	r0, [r0, #104]	@ 0x68
 8010064:	b100      	cbz	r0, 8010068 <rcl_node_get_namespace+0xc>
 8010066:	68c0      	ldr	r0, [r0, #12]
 8010068:	4770      	bx	lr
 801006a:	bf00      	nop

0801006c <rcl_node_get_options>:
 801006c:	b128      	cbz	r0, 801007a <rcl_node_get_options+0xe>
 801006e:	6840      	ldr	r0, [r0, #4]
 8010070:	b118      	cbz	r0, 801007a <rcl_node_get_options+0xe>
 8010072:	6e83      	ldr	r3, [r0, #104]	@ 0x68
 8010074:	2b00      	cmp	r3, #0
 8010076:	bf08      	it	eq
 8010078:	2000      	moveq	r0, #0
 801007a:	4770      	bx	lr

0801007c <rcl_node_get_rmw_handle>:
 801007c:	b110      	cbz	r0, 8010084 <rcl_node_get_rmw_handle+0x8>
 801007e:	6840      	ldr	r0, [r0, #4]
 8010080:	b100      	cbz	r0, 8010084 <rcl_node_get_rmw_handle+0x8>
 8010082:	6e80      	ldr	r0, [r0, #104]	@ 0x68
 8010084:	4770      	bx	lr
 8010086:	bf00      	nop

08010088 <rcl_node_get_default_options>:
 8010088:	b510      	push	{r4, lr}
 801008a:	2268      	movs	r2, #104	@ 0x68
 801008c:	4604      	mov	r4, r0
 801008e:	2100      	movs	r1, #0
 8010090:	f005 fa96 	bl	80155c0 <memset>
 8010094:	4620      	mov	r0, r4
 8010096:	f7f9 ffef 	bl	800a078 <rcutils_get_default_allocator>
 801009a:	2301      	movs	r3, #1
 801009c:	7523      	strb	r3, [r4, #20]
 801009e:	4620      	mov	r0, r4
 80100a0:	bd10      	pop	{r4, pc}
 80100a2:	bf00      	nop

080100a4 <rcl_node_options_copy>:
 80100a4:	b1d0      	cbz	r0, 80100dc <rcl_node_options_copy+0x38>
 80100a6:	b570      	push	{r4, r5, r6, lr}
 80100a8:	460c      	mov	r4, r1
 80100aa:	b1a9      	cbz	r1, 80100d8 <rcl_node_options_copy+0x34>
 80100ac:	4288      	cmp	r0, r1
 80100ae:	4684      	mov	ip, r0
 80100b0:	d012      	beq.n	80100d8 <rcl_node_options_copy+0x34>
 80100b2:	4605      	mov	r5, r0
 80100b4:	8a86      	ldrh	r6, [r0, #20]
 80100b6:	468e      	mov	lr, r1
 80100b8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80100ba:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 80100be:	682b      	ldr	r3, [r5, #0]
 80100c0:	f8ce 3000 	str.w	r3, [lr]
 80100c4:	f10c 0118 	add.w	r1, ip, #24
 80100c8:	2250      	movs	r2, #80	@ 0x50
 80100ca:	82a6      	strh	r6, [r4, #20]
 80100cc:	f104 0018 	add.w	r0, r4, #24
 80100d0:	f005 fb3f 	bl	8015752 <memcpy>
 80100d4:	2000      	movs	r0, #0
 80100d6:	bd70      	pop	{r4, r5, r6, pc}
 80100d8:	200b      	movs	r0, #11
 80100da:	bd70      	pop	{r4, r5, r6, pc}
 80100dc:	200b      	movs	r0, #11
 80100de:	4770      	bx	lr

080100e0 <rcl_node_resolve_name>:
 80100e0:	b082      	sub	sp, #8
 80100e2:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80100e6:	b091      	sub	sp, #68	@ 0x44
 80100e8:	ac1a      	add	r4, sp, #104	@ 0x68
 80100ea:	e884 000c 	stmia.w	r4, {r2, r3}
 80100ee:	f89d 807c 	ldrb.w	r8, [sp, #124]	@ 0x7c
 80100f2:	2800      	cmp	r0, #0
 80100f4:	d03b      	beq.n	801016e <rcl_node_resolve_name+0x8e>
 80100f6:	460c      	mov	r4, r1
 80100f8:	4605      	mov	r5, r0
 80100fa:	f7ff ffb7 	bl	801006c <rcl_node_get_options>
 80100fe:	2800      	cmp	r0, #0
 8010100:	d037      	beq.n	8010172 <rcl_node_resolve_name+0x92>
 8010102:	4628      	mov	r0, r5
 8010104:	f7ff ffa2 	bl	801004c <rcl_node_get_name>
 8010108:	4606      	mov	r6, r0
 801010a:	4628      	mov	r0, r5
 801010c:	f7ff ffa6 	bl	801005c <rcl_node_get_namespace>
 8010110:	f10d 0e68 	add.w	lr, sp, #104	@ 0x68
 8010114:	4681      	mov	r9, r0
 8010116:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 801011a:	ad0b      	add	r5, sp, #44	@ 0x2c
 801011c:	46ac      	mov	ip, r5
 801011e:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8010122:	f8de 3000 	ldr.w	r3, [lr]
 8010126:	f8cc 3000 	str.w	r3, [ip]
 801012a:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 801012c:	b1fb      	cbz	r3, 801016e <rcl_node_resolve_name+0x8e>
 801012e:	468a      	mov	sl, r1
 8010130:	f8dd b078 	ldr.w	fp, [sp, #120]	@ 0x78
 8010134:	f002 faa8 	bl	8012688 <rcutils_get_zero_initialized_string_map>
 8010138:	ab10      	add	r3, sp, #64	@ 0x40
 801013a:	9008      	str	r0, [sp, #32]
 801013c:	e913 0007 	ldmdb	r3, {r0, r1, r2}
 8010140:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 8010144:	2100      	movs	r1, #0
 8010146:	e895 000c 	ldmia.w	r5, {r2, r3}
 801014a:	a808      	add	r0, sp, #32
 801014c:	f002 fb14 	bl	8012778 <rcutils_string_map_init>
 8010150:	4607      	mov	r7, r0
 8010152:	b180      	cbz	r0, 8010176 <rcl_node_resolve_name+0x96>
 8010154:	f7f9 ffac 	bl	800a0b0 <rcutils_get_error_string>
 8010158:	f7f9 ffc2 	bl	800a0e0 <rcutils_reset_error>
 801015c:	2f0a      	cmp	r7, #10
 801015e:	bf18      	it	ne
 8010160:	2701      	movne	r7, #1
 8010162:	4638      	mov	r0, r7
 8010164:	b011      	add	sp, #68	@ 0x44
 8010166:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801016a:	b002      	add	sp, #8
 801016c:	4770      	bx	lr
 801016e:	270b      	movs	r7, #11
 8010170:	e7f7      	b.n	8010162 <rcl_node_resolve_name+0x82>
 8010172:	2701      	movs	r7, #1
 8010174:	e7f5      	b.n	8010162 <rcl_node_resolve_name+0x82>
 8010176:	9009      	str	r0, [sp, #36]	@ 0x24
 8010178:	9007      	str	r0, [sp, #28]
 801017a:	a808      	add	r0, sp, #32
 801017c:	f004 fb98 	bl	80148b0 <rcl_get_default_topic_name_substitutions>
 8010180:	4607      	mov	r7, r0
 8010182:	b1a8      	cbz	r0, 80101b0 <rcl_node_resolve_name+0xd0>
 8010184:	280a      	cmp	r0, #10
 8010186:	9c07      	ldr	r4, [sp, #28]
 8010188:	d000      	beq.n	801018c <rcl_node_resolve_name+0xac>
 801018a:	2701      	movs	r7, #1
 801018c:	a808      	add	r0, sp, #32
 801018e:	f002 fb33 	bl	80127f8 <rcutils_string_map_fini>
 8010192:	2800      	cmp	r0, #0
 8010194:	d13d      	bne.n	8010212 <rcl_node_resolve_name+0x132>
 8010196:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8010198:	4659      	mov	r1, fp
 801019a:	47d0      	blx	sl
 801019c:	4659      	mov	r1, fp
 801019e:	4620      	mov	r0, r4
 80101a0:	47d0      	blx	sl
 80101a2:	f1b8 0f00 	cmp.w	r8, #0
 80101a6:	d0dc      	beq.n	8010162 <rcl_node_resolve_name+0x82>
 80101a8:	2f67      	cmp	r7, #103	@ 0x67
 80101aa:	bf08      	it	eq
 80101ac:	2768      	moveq	r7, #104	@ 0x68
 80101ae:	e7d8      	b.n	8010162 <rcl_node_resolve_name+0x82>
 80101b0:	ab09      	add	r3, sp, #36	@ 0x24
 80101b2:	9305      	str	r3, [sp, #20]
 80101b4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80101b6:	46ec      	mov	ip, sp
 80101b8:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80101bc:	682b      	ldr	r3, [r5, #0]
 80101be:	f8cc 3000 	str.w	r3, [ip]
 80101c2:	464a      	mov	r2, r9
 80101c4:	4631      	mov	r1, r6
 80101c6:	4620      	mov	r0, r4
 80101c8:	ab08      	add	r3, sp, #32
 80101ca:	f004 fa13 	bl	80145f4 <rcl_expand_topic_name>
 80101ce:	4607      	mov	r7, r0
 80101d0:	b9b8      	cbnz	r0, 8010202 <rcl_node_resolve_name+0x122>
 80101d2:	9c09      	ldr	r4, [sp, #36]	@ 0x24
 80101d4:	9009      	str	r0, [sp, #36]	@ 0x24
 80101d6:	4602      	mov	r2, r0
 80101d8:	a90a      	add	r1, sp, #40	@ 0x28
 80101da:	4620      	mov	r0, r4
 80101dc:	f002 fc3c 	bl	8012a58 <rmw_validate_full_topic_name>
 80101e0:	b988      	cbnz	r0, 8010206 <rcl_node_resolve_name+0x126>
 80101e2:	9d0a      	ldr	r5, [sp, #40]	@ 0x28
 80101e4:	b9d5      	cbnz	r5, 801021c <rcl_node_resolve_name+0x13c>
 80101e6:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 80101e8:	a808      	add	r0, sp, #32
 80101ea:	601c      	str	r4, [r3, #0]
 80101ec:	f002 fb04 	bl	80127f8 <rcutils_string_map_fini>
 80101f0:	4607      	mov	r7, r0
 80101f2:	b1a8      	cbz	r0, 8010220 <rcl_node_resolve_name+0x140>
 80101f4:	f7f9 ff5c 	bl	800a0b0 <rcutils_get_error_string>
 80101f8:	462c      	mov	r4, r5
 80101fa:	f7f9 ff71 	bl	800a0e0 <rcutils_reset_error>
 80101fe:	2701      	movs	r7, #1
 8010200:	e7c9      	b.n	8010196 <rcl_node_resolve_name+0xb6>
 8010202:	9c07      	ldr	r4, [sp, #28]
 8010204:	e7c2      	b.n	801018c <rcl_node_resolve_name+0xac>
 8010206:	f7f9 ff53 	bl	800a0b0 <rcutils_get_error_string>
 801020a:	2701      	movs	r7, #1
 801020c:	f7f9 ff68 	bl	800a0e0 <rcutils_reset_error>
 8010210:	e7bc      	b.n	801018c <rcl_node_resolve_name+0xac>
 8010212:	f7f9 ff4d 	bl	800a0b0 <rcutils_get_error_string>
 8010216:	f7f9 ff63 	bl	800a0e0 <rcutils_reset_error>
 801021a:	e7bc      	b.n	8010196 <rcl_node_resolve_name+0xb6>
 801021c:	2767      	movs	r7, #103	@ 0x67
 801021e:	e7b5      	b.n	801018c <rcl_node_resolve_name+0xac>
 8010220:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8010222:	4659      	mov	r1, fp
 8010224:	47d0      	blx	sl
 8010226:	4659      	mov	r1, fp
 8010228:	4638      	mov	r0, r7
 801022a:	47d0      	blx	sl
 801022c:	e799      	b.n	8010162 <rcl_node_resolve_name+0x82>
 801022e:	bf00      	nop

08010230 <exact_match_lookup>:
 8010230:	b5f0      	push	{r4, r5, r6, r7, lr}
 8010232:	f102 0708 	add.w	r7, r2, #8
 8010236:	460b      	mov	r3, r1
 8010238:	4614      	mov	r4, r2
 801023a:	4606      	mov	r6, r0
 801023c:	e897 0007 	ldmia.w	r7, {r0, r1, r2}
 8010240:	b085      	sub	sp, #20
 8010242:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 8010246:	4618      	mov	r0, r3
 8010248:	4919      	ldr	r1, [pc, #100]	@ (80102b0 <exact_match_lookup+0x80>)
 801024a:	e894 000c 	ldmia.w	r4, {r2, r3}
 801024e:	f002 f8b5 	bl	80123bc <rcutils_join_path>
 8010252:	7833      	ldrb	r3, [r6, #0]
 8010254:	2b2f      	cmp	r3, #47	@ 0x2f
 8010256:	4605      	mov	r5, r0
 8010258:	d023      	beq.n	80102a2 <exact_match_lookup+0x72>
 801025a:	f104 030c 	add.w	r3, r4, #12
 801025e:	e893 0003 	ldmia.w	r3, {r0, r1}
 8010262:	e88d 0003 	stmia.w	sp, {r0, r1}
 8010266:	1c70      	adds	r0, r6, #1
 8010268:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 801026c:	f002 f8ac 	bl	80123c8 <rcutils_to_native_path>
 8010270:	4606      	mov	r6, r0
 8010272:	e897 0007 	ldmia.w	r7, {r0, r1, r2}
 8010276:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 801027a:	4631      	mov	r1, r6
 801027c:	e894 000c 	ldmia.w	r4, {r2, r3}
 8010280:	4628      	mov	r0, r5
 8010282:	f002 f89b 	bl	80123bc <rcutils_join_path>
 8010286:	6862      	ldr	r2, [r4, #4]
 8010288:	6921      	ldr	r1, [r4, #16]
 801028a:	4603      	mov	r3, r0
 801028c:	4630      	mov	r0, r6
 801028e:	461e      	mov	r6, r3
 8010290:	4790      	blx	r2
 8010292:	4628      	mov	r0, r5
 8010294:	6863      	ldr	r3, [r4, #4]
 8010296:	6921      	ldr	r1, [r4, #16]
 8010298:	4798      	blx	r3
 801029a:	4635      	mov	r5, r6
 801029c:	4628      	mov	r0, r5
 801029e:	b005      	add	sp, #20
 80102a0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80102a2:	7873      	ldrb	r3, [r6, #1]
 80102a4:	2b00      	cmp	r3, #0
 80102a6:	d1d8      	bne.n	801025a <exact_match_lookup+0x2a>
 80102a8:	4628      	mov	r0, r5
 80102aa:	b005      	add	sp, #20
 80102ac:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80102ae:	bf00      	nop
 80102b0:	08016b18 	.word	0x08016b18

080102b4 <rcl_get_secure_root>:
 80102b4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80102b8:	b085      	sub	sp, #20
 80102ba:	b168      	cbz	r0, 80102d8 <rcl_get_secure_root+0x24>
 80102bc:	4607      	mov	r7, r0
 80102be:	4608      	mov	r0, r1
 80102c0:	460c      	mov	r4, r1
 80102c2:	f7f9 fee7 	bl	800a094 <rcutils_allocator_is_valid>
 80102c6:	b138      	cbz	r0, 80102d8 <rcl_get_secure_root+0x24>
 80102c8:	2300      	movs	r3, #0
 80102ca:	482d      	ldr	r0, [pc, #180]	@ (8010380 <rcl_get_secure_root+0xcc>)
 80102cc:	9303      	str	r3, [sp, #12]
 80102ce:	a903      	add	r1, sp, #12
 80102d0:	f002 f85a 	bl	8012388 <rcutils_get_env>
 80102d4:	4605      	mov	r5, r0
 80102d6:	b120      	cbz	r0, 80102e2 <rcl_get_secure_root+0x2e>
 80102d8:	2500      	movs	r5, #0
 80102da:	4628      	mov	r0, r5
 80102dc:	b005      	add	sp, #20
 80102de:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80102e2:	9b03      	ldr	r3, [sp, #12]
 80102e4:	781a      	ldrb	r2, [r3, #0]
 80102e6:	2a00      	cmp	r2, #0
 80102e8:	d0f6      	beq.n	80102d8 <rcl_get_secure_root+0x24>
 80102ea:	f104 090c 	add.w	r9, r4, #12
 80102ee:	e899 0003 	ldmia.w	r9, {r0, r1}
 80102f2:	e88d 0003 	stmia.w	sp, {r0, r1}
 80102f6:	4618      	mov	r0, r3
 80102f8:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 80102fc:	f002 f986 	bl	801260c <rcutils_strdup>
 8010300:	4680      	mov	r8, r0
 8010302:	2800      	cmp	r0, #0
 8010304:	d0e8      	beq.n	80102d8 <rcl_get_secure_root+0x24>
 8010306:	481f      	ldr	r0, [pc, #124]	@ (8010384 <rcl_get_secure_root+0xd0>)
 8010308:	9503      	str	r5, [sp, #12]
 801030a:	a903      	add	r1, sp, #12
 801030c:	f002 f83c 	bl	8012388 <rcutils_get_env>
 8010310:	b160      	cbz	r0, 801032c <rcl_get_secure_root+0x78>
 8010312:	2600      	movs	r6, #0
 8010314:	6863      	ldr	r3, [r4, #4]
 8010316:	6921      	ldr	r1, [r4, #16]
 8010318:	4630      	mov	r0, r6
 801031a:	4798      	blx	r3
 801031c:	4640      	mov	r0, r8
 801031e:	6863      	ldr	r3, [r4, #4]
 8010320:	6921      	ldr	r1, [r4, #16]
 8010322:	4798      	blx	r3
 8010324:	4628      	mov	r0, r5
 8010326:	b005      	add	sp, #20
 8010328:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801032c:	9b03      	ldr	r3, [sp, #12]
 801032e:	781e      	ldrb	r6, [r3, #0]
 8010330:	b1f6      	cbz	r6, 8010370 <rcl_get_secure_root+0xbc>
 8010332:	e899 0003 	ldmia.w	r9, {r0, r1}
 8010336:	e88d 0003 	stmia.w	sp, {r0, r1}
 801033a:	4618      	mov	r0, r3
 801033c:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 8010340:	f002 f964 	bl	801260c <rcutils_strdup>
 8010344:	4606      	mov	r6, r0
 8010346:	2800      	cmp	r0, #0
 8010348:	d0e3      	beq.n	8010312 <rcl_get_secure_root+0x5e>
 801034a:	4622      	mov	r2, r4
 801034c:	4641      	mov	r1, r8
 801034e:	f7ff ff6f 	bl	8010230 <exact_match_lookup>
 8010352:	4605      	mov	r5, r0
 8010354:	2d00      	cmp	r5, #0
 8010356:	d0dd      	beq.n	8010314 <rcl_get_secure_root+0x60>
 8010358:	4628      	mov	r0, r5
 801035a:	f002 f82d 	bl	80123b8 <rcutils_is_directory>
 801035e:	4603      	mov	r3, r0
 8010360:	2800      	cmp	r0, #0
 8010362:	d1d7      	bne.n	8010314 <rcl_get_secure_root+0x60>
 8010364:	4628      	mov	r0, r5
 8010366:	6921      	ldr	r1, [r4, #16]
 8010368:	461d      	mov	r5, r3
 801036a:	6863      	ldr	r3, [r4, #4]
 801036c:	4798      	blx	r3
 801036e:	e7d1      	b.n	8010314 <rcl_get_secure_root+0x60>
 8010370:	4622      	mov	r2, r4
 8010372:	4638      	mov	r0, r7
 8010374:	4641      	mov	r1, r8
 8010376:	f7ff ff5b 	bl	8010230 <exact_match_lookup>
 801037a:	4605      	mov	r5, r0
 801037c:	e7ea      	b.n	8010354 <rcl_get_secure_root+0xa0>
 801037e:	bf00      	nop
 8010380:	08016b24 	.word	0x08016b24
 8010384:	08016b3c 	.word	0x08016b3c

08010388 <rcl_get_security_options_from_environment>:
 8010388:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801038c:	b082      	sub	sp, #8
 801038e:	2300      	movs	r3, #0
 8010390:	4606      	mov	r6, r0
 8010392:	460f      	mov	r7, r1
 8010394:	4820      	ldr	r0, [pc, #128]	@ (8010418 <rcl_get_security_options_from_environment+0x90>)
 8010396:	9301      	str	r3, [sp, #4]
 8010398:	a901      	add	r1, sp, #4
 801039a:	4690      	mov	r8, r2
 801039c:	f001 fff4 	bl	8012388 <rcutils_get_env>
 80103a0:	b120      	cbz	r0, 80103ac <rcl_get_security_options_from_environment+0x24>
 80103a2:	2501      	movs	r5, #1
 80103a4:	4628      	mov	r0, r5
 80103a6:	b002      	add	sp, #8
 80103a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80103ac:	491b      	ldr	r1, [pc, #108]	@ (801041c <rcl_get_security_options_from_environment+0x94>)
 80103ae:	4604      	mov	r4, r0
 80103b0:	9801      	ldr	r0, [sp, #4]
 80103b2:	f7ef ff15 	bl	80001e0 <strcmp>
 80103b6:	4605      	mov	r5, r0
 80103b8:	b9e8      	cbnz	r0, 80103f6 <rcl_get_security_options_from_environment+0x6e>
 80103ba:	9001      	str	r0, [sp, #4]
 80103bc:	f1b8 0f00 	cmp.w	r8, #0
 80103c0:	d020      	beq.n	8010404 <rcl_get_security_options_from_environment+0x7c>
 80103c2:	4817      	ldr	r0, [pc, #92]	@ (8010420 <rcl_get_security_options_from_environment+0x98>)
 80103c4:	a901      	add	r1, sp, #4
 80103c6:	f001 ffdf 	bl	8012388 <rcutils_get_env>
 80103ca:	2800      	cmp	r0, #0
 80103cc:	d1e9      	bne.n	80103a2 <rcl_get_security_options_from_environment+0x1a>
 80103ce:	4915      	ldr	r1, [pc, #84]	@ (8010424 <rcl_get_security_options_from_environment+0x9c>)
 80103d0:	9801      	ldr	r0, [sp, #4]
 80103d2:	f7ef ff05 	bl	80001e0 <strcmp>
 80103d6:	fab0 f080 	clz	r0, r0
 80103da:	0940      	lsrs	r0, r0, #5
 80103dc:	f888 0000 	strb.w	r0, [r8]
 80103e0:	4639      	mov	r1, r7
 80103e2:	4630      	mov	r0, r6
 80103e4:	f7ff ff66 	bl	80102b4 <rcl_get_secure_root>
 80103e8:	b170      	cbz	r0, 8010408 <rcl_get_security_options_from_environment+0x80>
 80103ea:	f8c8 0004 	str.w	r0, [r8, #4]
 80103ee:	4628      	mov	r0, r5
 80103f0:	b002      	add	sp, #8
 80103f2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80103f6:	4625      	mov	r5, r4
 80103f8:	4628      	mov	r0, r5
 80103fa:	f888 4000 	strb.w	r4, [r8]
 80103fe:	b002      	add	sp, #8
 8010400:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010404:	250b      	movs	r5, #11
 8010406:	e7cd      	b.n	80103a4 <rcl_get_security_options_from_environment+0x1c>
 8010408:	f898 5000 	ldrb.w	r5, [r8]
 801040c:	f1a5 0501 	sub.w	r5, r5, #1
 8010410:	fab5 f585 	clz	r5, r5
 8010414:	096d      	lsrs	r5, r5, #5
 8010416:	e7c5      	b.n	80103a4 <rcl_get_security_options_from_environment+0x1c>
 8010418:	08016adc 	.word	0x08016adc
 801041c:	08016af0 	.word	0x08016af0
 8010420:	08016af8 	.word	0x08016af8
 8010424:	08016b10 	.word	0x08016b10

08010428 <rcl_service_get_rmw_handle>:
 8010428:	b118      	cbz	r0, 8010432 <rcl_service_get_rmw_handle+0xa>
 801042a:	6800      	ldr	r0, [r0, #0]
 801042c:	b108      	cbz	r0, 8010432 <rcl_service_get_rmw_handle+0xa>
 801042e:	f8d0 0108 	ldr.w	r0, [r0, #264]	@ 0x108
 8010432:	4770      	bx	lr

08010434 <rcl_take_request>:
 8010434:	b570      	push	{r4, r5, r6, lr}
 8010436:	468e      	mov	lr, r1
 8010438:	460c      	mov	r4, r1
 801043a:	4616      	mov	r6, r2
 801043c:	4605      	mov	r5, r0
 801043e:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8010442:	b08c      	sub	sp, #48	@ 0x30
 8010444:	f10d 0c18 	add.w	ip, sp, #24
 8010448:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801044c:	e89e 0003 	ldmia.w	lr, {r0, r1}
 8010450:	e88c 0003 	stmia.w	ip, {r0, r1}
 8010454:	b30d      	cbz	r5, 801049a <rcl_take_request+0x66>
 8010456:	682b      	ldr	r3, [r5, #0]
 8010458:	b1fb      	cbz	r3, 801049a <rcl_take_request+0x66>
 801045a:	f8d3 0108 	ldr.w	r0, [r3, #264]	@ 0x108
 801045e:	b1e0      	cbz	r0, 801049a <rcl_take_request+0x66>
 8010460:	b336      	cbz	r6, 80104b0 <rcl_take_request+0x7c>
 8010462:	2300      	movs	r3, #0
 8010464:	f88d 3007 	strb.w	r3, [sp, #7]
 8010468:	4632      	mov	r2, r6
 801046a:	f10d 0307 	add.w	r3, sp, #7
 801046e:	a902      	add	r1, sp, #8
 8010470:	f002 fe48 	bl	8013104 <rmw_take_request>
 8010474:	4605      	mov	r5, r0
 8010476:	b198      	cbz	r0, 80104a0 <rcl_take_request+0x6c>
 8010478:	280a      	cmp	r0, #10
 801047a:	bf18      	it	ne
 801047c:	2501      	movne	r5, #1
 801047e:	f10d 0e18 	add.w	lr, sp, #24
 8010482:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8010486:	46a4      	mov	ip, r4
 8010488:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801048c:	e89e 0003 	ldmia.w	lr, {r0, r1}
 8010490:	e88c 0003 	stmia.w	ip, {r0, r1}
 8010494:	4628      	mov	r0, r5
 8010496:	b00c      	add	sp, #48	@ 0x30
 8010498:	bd70      	pop	{r4, r5, r6, pc}
 801049a:	f44f 7516 	mov.w	r5, #600	@ 0x258
 801049e:	e7ee      	b.n	801047e <rcl_take_request+0x4a>
 80104a0:	f89d 2007 	ldrb.w	r2, [sp, #7]
 80104a4:	f240 2359 	movw	r3, #601	@ 0x259
 80104a8:	2a00      	cmp	r2, #0
 80104aa:	bf08      	it	eq
 80104ac:	461d      	moveq	r5, r3
 80104ae:	e7e6      	b.n	801047e <rcl_take_request+0x4a>
 80104b0:	250b      	movs	r5, #11
 80104b2:	e7e4      	b.n	801047e <rcl_take_request+0x4a>

080104b4 <rcl_send_response>:
 80104b4:	b170      	cbz	r0, 80104d4 <rcl_send_response+0x20>
 80104b6:	6800      	ldr	r0, [r0, #0]
 80104b8:	b160      	cbz	r0, 80104d4 <rcl_send_response+0x20>
 80104ba:	f8d0 0108 	ldr.w	r0, [r0, #264]	@ 0x108
 80104be:	b148      	cbz	r0, 80104d4 <rcl_send_response+0x20>
 80104c0:	b159      	cbz	r1, 80104da <rcl_send_response+0x26>
 80104c2:	b510      	push	{r4, lr}
 80104c4:	b15a      	cbz	r2, 80104de <rcl_send_response+0x2a>
 80104c6:	f002 fe7b 	bl	80131c0 <rmw_send_response>
 80104ca:	b110      	cbz	r0, 80104d2 <rcl_send_response+0x1e>
 80104cc:	2802      	cmp	r0, #2
 80104ce:	bf18      	it	ne
 80104d0:	2001      	movne	r0, #1
 80104d2:	bd10      	pop	{r4, pc}
 80104d4:	f44f 7016 	mov.w	r0, #600	@ 0x258
 80104d8:	4770      	bx	lr
 80104da:	200b      	movs	r0, #11
 80104dc:	4770      	bx	lr
 80104de:	200b      	movs	r0, #11
 80104e0:	bd10      	pop	{r4, pc}
 80104e2:	bf00      	nop

080104e4 <rcl_service_is_valid>:
 80104e4:	b130      	cbz	r0, 80104f4 <rcl_service_is_valid+0x10>
 80104e6:	6800      	ldr	r0, [r0, #0]
 80104e8:	b120      	cbz	r0, 80104f4 <rcl_service_is_valid+0x10>
 80104ea:	f8d0 0108 	ldr.w	r0, [r0, #264]	@ 0x108
 80104ee:	3800      	subs	r0, #0
 80104f0:	bf18      	it	ne
 80104f2:	2001      	movne	r0, #1
 80104f4:	4770      	bx	lr
 80104f6:	bf00      	nop

080104f8 <rcl_get_zero_initialized_subscription>:
 80104f8:	4b01      	ldr	r3, [pc, #4]	@ (8010500 <rcl_get_zero_initialized_subscription+0x8>)
 80104fa:	6818      	ldr	r0, [r3, #0]
 80104fc:	4770      	bx	lr
 80104fe:	bf00      	nop
 8010500:	08016b5c 	.word	0x08016b5c

08010504 <rcl_subscription_init>:
 8010504:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8010508:	b089      	sub	sp, #36	@ 0x24
 801050a:	9e10      	ldr	r6, [sp, #64]	@ 0x40
 801050c:	b1d6      	cbz	r6, 8010544 <rcl_subscription_init+0x40>
 801050e:	f106 0950 	add.w	r9, r6, #80	@ 0x50
 8010512:	4604      	mov	r4, r0
 8010514:	4648      	mov	r0, r9
 8010516:	460d      	mov	r5, r1
 8010518:	4690      	mov	r8, r2
 801051a:	461f      	mov	r7, r3
 801051c:	f7f9 fdba 	bl	800a094 <rcutils_allocator_is_valid>
 8010520:	b180      	cbz	r0, 8010544 <rcl_subscription_init+0x40>
 8010522:	b17c      	cbz	r4, 8010544 <rcl_subscription_init+0x40>
 8010524:	4628      	mov	r0, r5
 8010526:	f7ff fd87 	bl	8010038 <rcl_node_is_valid>
 801052a:	2800      	cmp	r0, #0
 801052c:	d054      	beq.n	80105d8 <rcl_subscription_init+0xd4>
 801052e:	f1b8 0f00 	cmp.w	r8, #0
 8010532:	d007      	beq.n	8010544 <rcl_subscription_init+0x40>
 8010534:	b137      	cbz	r7, 8010544 <rcl_subscription_init+0x40>
 8010536:	6823      	ldr	r3, [r4, #0]
 8010538:	b14b      	cbz	r3, 801054e <rcl_subscription_init+0x4a>
 801053a:	2764      	movs	r7, #100	@ 0x64
 801053c:	4638      	mov	r0, r7
 801053e:	b009      	add	sp, #36	@ 0x24
 8010540:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8010544:	270b      	movs	r7, #11
 8010546:	4638      	mov	r0, r7
 8010548:	b009      	add	sp, #36	@ 0x24
 801054a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801054e:	e9cd 3303 	strd	r3, r3, [sp, #12]
 8010552:	aa07      	add	r2, sp, #28
 8010554:	9205      	str	r2, [sp, #20]
 8010556:	9307      	str	r3, [sp, #28]
 8010558:	f106 0358 	add.w	r3, r6, #88	@ 0x58
 801055c:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8010560:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 8010564:	4639      	mov	r1, r7
 8010566:	e899 000c 	ldmia.w	r9, {r2, r3}
 801056a:	4628      	mov	r0, r5
 801056c:	f7ff fdb8 	bl	80100e0 <rcl_node_resolve_name>
 8010570:	4607      	mov	r7, r0
 8010572:	2800      	cmp	r0, #0
 8010574:	d15f      	bne.n	8010636 <rcl_subscription_init+0x132>
 8010576:	e9d6 3217 	ldrd	r3, r2, [r6, #92]	@ 0x5c
 801057a:	21c8      	movs	r1, #200	@ 0xc8
 801057c:	2001      	movs	r0, #1
 801057e:	4798      	blx	r3
 8010580:	6020      	str	r0, [r4, #0]
 8010582:	2800      	cmp	r0, #0
 8010584:	d05d      	beq.n	8010642 <rcl_subscription_init+0x13e>
 8010586:	4628      	mov	r0, r5
 8010588:	f7ff fd78 	bl	801007c <rcl_node_get_rmw_handle>
 801058c:	f106 0364 	add.w	r3, r6, #100	@ 0x64
 8010590:	9300      	str	r3, [sp, #0]
 8010592:	9a07      	ldr	r2, [sp, #28]
 8010594:	6827      	ldr	r7, [r4, #0]
 8010596:	4641      	mov	r1, r8
 8010598:	4633      	mov	r3, r6
 801059a:	f7fa fa41 	bl	800aa20 <rmw_create_subscription>
 801059e:	f8c7 00c0 	str.w	r0, [r7, #192]	@ 0xc0
 80105a2:	6827      	ldr	r7, [r4, #0]
 80105a4:	f8d7 00c0 	ldr.w	r0, [r7, #192]	@ 0xc0
 80105a8:	b348      	cbz	r0, 80105fe <rcl_subscription_init+0xfa>
 80105aa:	f107 0170 	add.w	r1, r7, #112	@ 0x70
 80105ae:	f7fa fb19 	bl	800abe4 <rmw_subscription_get_actual_qos>
 80105b2:	4607      	mov	r7, r0
 80105b4:	b9a8      	cbnz	r0, 80105e2 <rcl_subscription_init+0xde>
 80105b6:	6820      	ldr	r0, [r4, #0]
 80105b8:	f896 3048 	ldrb.w	r3, [r6, #72]	@ 0x48
 80105bc:	f880 30b8 	strb.w	r3, [r0, #184]	@ 0xb8
 80105c0:	2270      	movs	r2, #112	@ 0x70
 80105c2:	4631      	mov	r1, r6
 80105c4:	f005 f8c5 	bl	8015752 <memcpy>
 80105c8:	9807      	ldr	r0, [sp, #28]
 80105ca:	6d73      	ldr	r3, [r6, #84]	@ 0x54
 80105cc:	6e31      	ldr	r1, [r6, #96]	@ 0x60
 80105ce:	4798      	blx	r3
 80105d0:	4638      	mov	r0, r7
 80105d2:	b009      	add	sp, #36	@ 0x24
 80105d4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80105d8:	27c8      	movs	r7, #200	@ 0xc8
 80105da:	4638      	mov	r0, r7
 80105dc:	b009      	add	sp, #36	@ 0x24
 80105de:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80105e2:	6827      	ldr	r7, [r4, #0]
 80105e4:	b32f      	cbz	r7, 8010632 <rcl_subscription_init+0x12e>
 80105e6:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80105ea:	b14b      	cbz	r3, 8010600 <rcl_subscription_init+0xfc>
 80105ec:	4628      	mov	r0, r5
 80105ee:	f7ff fd45 	bl	801007c <rcl_node_get_rmw_handle>
 80105f2:	6823      	ldr	r3, [r4, #0]
 80105f4:	f8d3 10c0 	ldr.w	r1, [r3, #192]	@ 0xc0
 80105f8:	f7fa fb04 	bl	800ac04 <rmw_destroy_subscription>
 80105fc:	6827      	ldr	r7, [r4, #0]
 80105fe:	b197      	cbz	r7, 8010626 <rcl_subscription_init+0x122>
 8010600:	f107 0550 	add.w	r5, r7, #80	@ 0x50
 8010604:	4628      	mov	r0, r5
 8010606:	f7f9 fd45 	bl	800a094 <rcutils_allocator_is_valid>
 801060a:	b158      	cbz	r0, 8010624 <rcl_subscription_init+0x120>
 801060c:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 801060e:	b148      	cbz	r0, 8010624 <rcl_subscription_init+0x120>
 8010610:	4629      	mov	r1, r5
 8010612:	f002 f975 	bl	8012900 <rmw_subscription_content_filter_options_fini>
 8010616:	4605      	mov	r5, r0
 8010618:	b9b8      	cbnz	r0, 801064a <rcl_subscription_init+0x146>
 801061a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801061c:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 801061e:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8010620:	4798      	blx	r3
 8010622:	66fd      	str	r5, [r7, #108]	@ 0x6c
 8010624:	6827      	ldr	r7, [r4, #0]
 8010626:	6d73      	ldr	r3, [r6, #84]	@ 0x54
 8010628:	6e31      	ldr	r1, [r6, #96]	@ 0x60
 801062a:	4638      	mov	r0, r7
 801062c:	4798      	blx	r3
 801062e:	2300      	movs	r3, #0
 8010630:	6023      	str	r3, [r4, #0]
 8010632:	2701      	movs	r7, #1
 8010634:	e7c8      	b.n	80105c8 <rcl_subscription_init+0xc4>
 8010636:	2867      	cmp	r0, #103	@ 0x67
 8010638:	d0c6      	beq.n	80105c8 <rcl_subscription_init+0xc4>
 801063a:	2869      	cmp	r0, #105	@ 0x69
 801063c:	d003      	beq.n	8010646 <rcl_subscription_init+0x142>
 801063e:	280a      	cmp	r0, #10
 8010640:	d1f7      	bne.n	8010632 <rcl_subscription_init+0x12e>
 8010642:	270a      	movs	r7, #10
 8010644:	e7c0      	b.n	80105c8 <rcl_subscription_init+0xc4>
 8010646:	2767      	movs	r7, #103	@ 0x67
 8010648:	e7be      	b.n	80105c8 <rcl_subscription_init+0xc4>
 801064a:	f7ff f9fb 	bl	800fa44 <rcl_convert_rmw_ret_to_rcl_ret>
 801064e:	6827      	ldr	r7, [r4, #0]
 8010650:	e7e9      	b.n	8010626 <rcl_subscription_init+0x122>
 8010652:	bf00      	nop

08010654 <rcl_subscription_get_default_options>:
 8010654:	b570      	push	{r4, r5, r6, lr}
 8010656:	4d14      	ldr	r5, [pc, #80]	@ (80106a8 <rcl_subscription_get_default_options+0x54>)
 8010658:	4914      	ldr	r1, [pc, #80]	@ (80106ac <rcl_subscription_get_default_options+0x58>)
 801065a:	b08a      	sub	sp, #40	@ 0x28
 801065c:	4604      	mov	r4, r0
 801065e:	2250      	movs	r2, #80	@ 0x50
 8010660:	4628      	mov	r0, r5
 8010662:	f005 f876 	bl	8015752 <memcpy>
 8010666:	a804      	add	r0, sp, #16
 8010668:	f7f9 fd06 	bl	800a078 <rcutils_get_default_allocator>
 801066c:	f10d 0c10 	add.w	ip, sp, #16
 8010670:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8010674:	f105 0e50 	add.w	lr, r5, #80	@ 0x50
 8010678:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 801067c:	466e      	mov	r6, sp
 801067e:	f8dc 3000 	ldr.w	r3, [ip]
 8010682:	f8ce 3000 	str.w	r3, [lr]
 8010686:	4630      	mov	r0, r6
 8010688:	f002 f954 	bl	8012934 <rmw_get_default_subscription_options>
 801068c:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
 8010690:	f105 0364 	add.w	r3, r5, #100	@ 0x64
 8010694:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8010698:	2270      	movs	r2, #112	@ 0x70
 801069a:	4629      	mov	r1, r5
 801069c:	4620      	mov	r0, r4
 801069e:	f005 f858 	bl	8015752 <memcpy>
 80106a2:	4620      	mov	r0, r4
 80106a4:	b00a      	add	sp, #40	@ 0x28
 80106a6:	bd70      	pop	{r4, r5, r6, pc}
 80106a8:	2000dab8 	.word	0x2000dab8
 80106ac:	08016b60 	.word	0x08016b60

080106b0 <rcl_take>:
 80106b0:	2800      	cmp	r0, #0
 80106b2:	d04a      	beq.n	801074a <rcl_take+0x9a>
 80106b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80106b8:	4604      	mov	r4, r0
 80106ba:	6800      	ldr	r0, [r0, #0]
 80106bc:	b0a4      	sub	sp, #144	@ 0x90
 80106be:	2800      	cmp	r0, #0
 80106c0:	d03b      	beq.n	801073a <rcl_take+0x8a>
 80106c2:	461f      	mov	r7, r3
 80106c4:	f8d0 30c0 	ldr.w	r3, [r0, #192]	@ 0xc0
 80106c8:	2b00      	cmp	r3, #0
 80106ca:	d036      	beq.n	801073a <rcl_take+0x8a>
 80106cc:	460e      	mov	r6, r1
 80106ce:	2900      	cmp	r1, #0
 80106d0:	d039      	beq.n	8010746 <rcl_take+0x96>
 80106d2:	4615      	mov	r5, r2
 80106d4:	2a00      	cmp	r2, #0
 80106d6:	d03c      	beq.n	8010752 <rcl_take+0xa2>
 80106d8:	a802      	add	r0, sp, #8
 80106da:	f002 f9b5 	bl	8012a48 <rmw_get_zero_initialized_message_info>
 80106de:	f10d 0c08 	add.w	ip, sp, #8
 80106e2:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 80106e6:	46ae      	mov	lr, r5
 80106e8:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 80106ec:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 80106f0:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 80106f4:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 80106f8:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 80106fc:	e89c 000f 	ldmia.w	ip, {r0, r1, r2, r3}
 8010700:	f04f 0800 	mov.w	r8, #0
 8010704:	e88e 000f 	stmia.w	lr, {r0, r1, r2, r3}
 8010708:	f88d 804f 	strb.w	r8, [sp, #79]	@ 0x4f
 801070c:	6822      	ldr	r2, [r4, #0]
 801070e:	462b      	mov	r3, r5
 8010710:	f8d2 00c0 	ldr.w	r0, [r2, #192]	@ 0xc0
 8010714:	9700      	str	r7, [sp, #0]
 8010716:	f10d 024f 	add.w	r2, sp, #79	@ 0x4f
 801071a:	4631      	mov	r1, r6
 801071c:	f002 fdf6 	bl	801330c <rmw_take_with_info>
 8010720:	4603      	mov	r3, r0
 8010722:	b9c0      	cbnz	r0, 8010756 <rcl_take+0xa6>
 8010724:	f89d 104f 	ldrb.w	r1, [sp, #79]	@ 0x4f
 8010728:	f240 1291 	movw	r2, #401	@ 0x191
 801072c:	2900      	cmp	r1, #0
 801072e:	bf08      	it	eq
 8010730:	4613      	moveq	r3, r2
 8010732:	4618      	mov	r0, r3
 8010734:	b024      	add	sp, #144	@ 0x90
 8010736:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801073a:	f44f 73c8 	mov.w	r3, #400	@ 0x190
 801073e:	4618      	mov	r0, r3
 8010740:	b024      	add	sp, #144	@ 0x90
 8010742:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010746:	230b      	movs	r3, #11
 8010748:	e7f3      	b.n	8010732 <rcl_take+0x82>
 801074a:	f44f 73c8 	mov.w	r3, #400	@ 0x190
 801074e:	4618      	mov	r0, r3
 8010750:	4770      	bx	lr
 8010752:	ad14      	add	r5, sp, #80	@ 0x50
 8010754:	e7c0      	b.n	80106d8 <rcl_take+0x28>
 8010756:	f7ff f975 	bl	800fa44 <rcl_convert_rmw_ret_to_rcl_ret>
 801075a:	4603      	mov	r3, r0
 801075c:	e7e9      	b.n	8010732 <rcl_take+0x82>
 801075e:	bf00      	nop

08010760 <rcl_subscription_get_rmw_handle>:
 8010760:	b118      	cbz	r0, 801076a <rcl_subscription_get_rmw_handle+0xa>
 8010762:	6800      	ldr	r0, [r0, #0]
 8010764:	b108      	cbz	r0, 801076a <rcl_subscription_get_rmw_handle+0xa>
 8010766:	f8d0 00c0 	ldr.w	r0, [r0, #192]	@ 0xc0
 801076a:	4770      	bx	lr

0801076c <rcl_subscription_is_valid>:
 801076c:	b130      	cbz	r0, 801077c <rcl_subscription_is_valid+0x10>
 801076e:	6800      	ldr	r0, [r0, #0]
 8010770:	b120      	cbz	r0, 801077c <rcl_subscription_is_valid+0x10>
 8010772:	f8d0 00c0 	ldr.w	r0, [r0, #192]	@ 0xc0
 8010776:	3800      	subs	r0, #0
 8010778:	bf18      	it	ne
 801077a:	2001      	movne	r0, #1
 801077c:	4770      	bx	lr
 801077e:	bf00      	nop

08010780 <rcl_get_system_time>:
 8010780:	4608      	mov	r0, r1
 8010782:	f7f9 bcc9 	b.w	800a118 <rcutils_system_time_now>
 8010786:	bf00      	nop

08010788 <rcl_get_steady_time>:
 8010788:	4608      	mov	r0, r1
 801078a:	f7f9 bced 	b.w	800a168 <rcutils_steady_time_now>
 801078e:	bf00      	nop

08010790 <rcl_get_ros_time>:
 8010790:	7a03      	ldrb	r3, [r0, #8]
 8010792:	b510      	push	{r4, lr}
 8010794:	460c      	mov	r4, r1
 8010796:	b133      	cbz	r3, 80107a6 <rcl_get_ros_time+0x16>
 8010798:	2105      	movs	r1, #5
 801079a:	f001 fd51 	bl	8012240 <__atomic_load_8>
 801079e:	e9c4 0100 	strd	r0, r1, [r4]
 80107a2:	2000      	movs	r0, #0
 80107a4:	bd10      	pop	{r4, pc}
 80107a6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80107aa:	4608      	mov	r0, r1
 80107ac:	f7f9 bcb4 	b.w	800a118 <rcutils_system_time_now>

080107b0 <rcl_clock_init>:
 80107b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80107b2:	4605      	mov	r5, r0
 80107b4:	4610      	mov	r0, r2
 80107b6:	4614      	mov	r4, r2
 80107b8:	460e      	mov	r6, r1
 80107ba:	f7f9 fc6b 	bl	800a094 <rcutils_allocator_is_valid>
 80107be:	b128      	cbz	r0, 80107cc <rcl_clock_init+0x1c>
 80107c0:	2d03      	cmp	r5, #3
 80107c2:	d803      	bhi.n	80107cc <rcl_clock_init+0x1c>
 80107c4:	e8df f005 	tbb	[pc, r5]
 80107c8:	06532e1d 	.word	0x06532e1d
 80107cc:	f04f 0c0b 	mov.w	ip, #11
 80107d0:	4660      	mov	r0, ip
 80107d2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80107d4:	2e00      	cmp	r6, #0
 80107d6:	d0f9      	beq.n	80107cc <rcl_clock_init+0x1c>
 80107d8:	2c00      	cmp	r4, #0
 80107da:	d0f7      	beq.n	80107cc <rcl_clock_init+0x1c>
 80107dc:	2300      	movs	r3, #0
 80107de:	e9c6 3301 	strd	r3, r3, [r6, #4]
 80107e2:	f8df e0b4 	ldr.w	lr, [pc, #180]	@ 8010898 <rcl_clock_init+0xe8>
 80107e6:	6133      	str	r3, [r6, #16]
 80107e8:	f106 0514 	add.w	r5, r6, #20
 80107ec:	469c      	mov	ip, r3
 80107ee:	2703      	movs	r7, #3
 80107f0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80107f2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80107f4:	6823      	ldr	r3, [r4, #0]
 80107f6:	602b      	str	r3, [r5, #0]
 80107f8:	7037      	strb	r7, [r6, #0]
 80107fa:	f8c6 e00c 	str.w	lr, [r6, #12]
 80107fe:	4660      	mov	r0, ip
 8010800:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010802:	2e00      	cmp	r6, #0
 8010804:	d0e2      	beq.n	80107cc <rcl_clock_init+0x1c>
 8010806:	2300      	movs	r3, #0
 8010808:	7033      	strb	r3, [r6, #0]
 801080a:	e9c6 3301 	strd	r3, r3, [r6, #4]
 801080e:	e9c6 3303 	strd	r3, r3, [r6, #12]
 8010812:	469c      	mov	ip, r3
 8010814:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8010816:	f106 0514 	add.w	r5, r6, #20
 801081a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 801081c:	6823      	ldr	r3, [r4, #0]
 801081e:	602b      	str	r3, [r5, #0]
 8010820:	4660      	mov	r0, ip
 8010822:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010824:	2e00      	cmp	r6, #0
 8010826:	d0d1      	beq.n	80107cc <rcl_clock_init+0x1c>
 8010828:	2c00      	cmp	r4, #0
 801082a:	d0cf      	beq.n	80107cc <rcl_clock_init+0x1c>
 801082c:	2700      	movs	r7, #0
 801082e:	7037      	strb	r7, [r6, #0]
 8010830:	46a4      	mov	ip, r4
 8010832:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8010836:	f106 0514 	add.w	r5, r6, #20
 801083a:	e9c6 7701 	strd	r7, r7, [r6, #4]
 801083e:	e9c6 7703 	strd	r7, r7, [r6, #12]
 8010842:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8010844:	f8dc 3000 	ldr.w	r3, [ip]
 8010848:	602b      	str	r3, [r5, #0]
 801084a:	6921      	ldr	r1, [r4, #16]
 801084c:	6823      	ldr	r3, [r4, #0]
 801084e:	2010      	movs	r0, #16
 8010850:	4798      	blx	r3
 8010852:	6130      	str	r0, [r6, #16]
 8010854:	b1d0      	cbz	r0, 801088c <rcl_clock_init+0xdc>
 8010856:	2200      	movs	r2, #0
 8010858:	2300      	movs	r3, #0
 801085a:	e9c0 2300 	strd	r2, r3, [r0]
 801085e:	2301      	movs	r3, #1
 8010860:	7207      	strb	r7, [r0, #8]
 8010862:	4a0c      	ldr	r2, [pc, #48]	@ (8010894 <rcl_clock_init+0xe4>)
 8010864:	7033      	strb	r3, [r6, #0]
 8010866:	46bc      	mov	ip, r7
 8010868:	60f2      	str	r2, [r6, #12]
 801086a:	4660      	mov	r0, ip
 801086c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801086e:	2e00      	cmp	r6, #0
 8010870:	d0ac      	beq.n	80107cc <rcl_clock_init+0x1c>
 8010872:	2c00      	cmp	r4, #0
 8010874:	d0aa      	beq.n	80107cc <rcl_clock_init+0x1c>
 8010876:	2300      	movs	r3, #0
 8010878:	e9c6 3301 	strd	r3, r3, [r6, #4]
 801087c:	f8df e01c 	ldr.w	lr, [pc, #28]	@ 801089c <rcl_clock_init+0xec>
 8010880:	6133      	str	r3, [r6, #16]
 8010882:	f106 0514 	add.w	r5, r6, #20
 8010886:	469c      	mov	ip, r3
 8010888:	2702      	movs	r7, #2
 801088a:	e7b1      	b.n	80107f0 <rcl_clock_init+0x40>
 801088c:	f04f 0c0a 	mov.w	ip, #10
 8010890:	e79e      	b.n	80107d0 <rcl_clock_init+0x20>
 8010892:	bf00      	nop
 8010894:	08010791 	.word	0x08010791
 8010898:	08010789 	.word	0x08010789
 801089c:	08010781 	.word	0x08010781

080108a0 <rcl_clock_get_now>:
 80108a0:	b140      	cbz	r0, 80108b4 <rcl_clock_get_now+0x14>
 80108a2:	b139      	cbz	r1, 80108b4 <rcl_clock_get_now+0x14>
 80108a4:	7803      	ldrb	r3, [r0, #0]
 80108a6:	b11b      	cbz	r3, 80108b0 <rcl_clock_get_now+0x10>
 80108a8:	68c3      	ldr	r3, [r0, #12]
 80108aa:	b10b      	cbz	r3, 80108b0 <rcl_clock_get_now+0x10>
 80108ac:	6900      	ldr	r0, [r0, #16]
 80108ae:	4718      	bx	r3
 80108b0:	2001      	movs	r0, #1
 80108b2:	4770      	bx	lr
 80108b4:	200b      	movs	r0, #11
 80108b6:	4770      	bx	lr

080108b8 <rcl_timer_call>:
 80108b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80108bc:	b087      	sub	sp, #28
 80108be:	2800      	cmp	r0, #0
 80108c0:	d06d      	beq.n	801099e <rcl_timer_call+0xe6>
 80108c2:	6803      	ldr	r3, [r0, #0]
 80108c4:	4604      	mov	r4, r0
 80108c6:	2b00      	cmp	r3, #0
 80108c8:	d063      	beq.n	8010992 <rcl_timer_call+0xda>
 80108ca:	f3bf 8f5b 	dmb	ish
 80108ce:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 80108d2:	f3bf 8f5b 	dmb	ish
 80108d6:	2b00      	cmp	r3, #0
 80108d8:	d150      	bne.n	801097c <rcl_timer_call+0xc4>
 80108da:	6803      	ldr	r3, [r0, #0]
 80108dc:	a904      	add	r1, sp, #16
 80108de:	6818      	ldr	r0, [r3, #0]
 80108e0:	f7ff ffde 	bl	80108a0 <rcl_clock_get_now>
 80108e4:	4605      	mov	r5, r0
 80108e6:	2800      	cmp	r0, #0
 80108e8:	d14a      	bne.n	8010980 <rcl_timer_call+0xc8>
 80108ea:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80108ee:	2b00      	cmp	r3, #0
 80108f0:	db4a      	blt.n	8010988 <rcl_timer_call+0xd0>
 80108f2:	6820      	ldr	r0, [r4, #0]
 80108f4:	f04f 0a05 	mov.w	sl, #5
 80108f8:	f8cd a000 	str.w	sl, [sp]
 80108fc:	3020      	adds	r0, #32
 80108fe:	f001 fd0b 	bl	8012318 <__atomic_exchange_8>
 8010902:	6823      	ldr	r3, [r4, #0]
 8010904:	f3bf 8f5b 	dmb	ish
 8010908:	4680      	mov	r8, r0
 801090a:	f8d3 b010 	ldr.w	fp, [r3, #16]
 801090e:	f3bf 8f5b 	dmb	ish
 8010912:	6820      	ldr	r0, [r4, #0]
 8010914:	4689      	mov	r9, r1
 8010916:	3028      	adds	r0, #40	@ 0x28
 8010918:	4651      	mov	r1, sl
 801091a:	f001 fc91 	bl	8012240 <__atomic_load_8>
 801091e:	4606      	mov	r6, r0
 8010920:	6820      	ldr	r0, [r4, #0]
 8010922:	460f      	mov	r7, r1
 8010924:	3018      	adds	r0, #24
 8010926:	4651      	mov	r1, sl
 8010928:	f001 fc8a 	bl	8012240 <__atomic_load_8>
 801092c:	1836      	adds	r6, r6, r0
 801092e:	4602      	mov	r2, r0
 8010930:	4682      	mov	sl, r0
 8010932:	e9dd 0c04 	ldrd	r0, ip, [sp, #16]
 8010936:	eb47 0701 	adc.w	r7, r7, r1
 801093a:	4286      	cmp	r6, r0
 801093c:	460b      	mov	r3, r1
 801093e:	eb77 010c 	sbcs.w	r1, r7, ip
 8010942:	da04      	bge.n	801094e <rcl_timer_call+0x96>
 8010944:	ea53 0102 	orrs.w	r1, r3, r2
 8010948:	d12e      	bne.n	80109a8 <rcl_timer_call+0xf0>
 801094a:	4606      	mov	r6, r0
 801094c:	4667      	mov	r7, ip
 801094e:	6820      	ldr	r0, [r4, #0]
 8010950:	2105      	movs	r1, #5
 8010952:	4632      	mov	r2, r6
 8010954:	463b      	mov	r3, r7
 8010956:	3028      	adds	r0, #40	@ 0x28
 8010958:	9100      	str	r1, [sp, #0]
 801095a:	f001 fca7 	bl	80122ac <__atomic_store_8>
 801095e:	f1bb 0f00 	cmp.w	fp, #0
 8010962:	d00d      	beq.n	8010980 <rcl_timer_call+0xc8>
 8010964:	9a04      	ldr	r2, [sp, #16]
 8010966:	9b05      	ldr	r3, [sp, #20]
 8010968:	ebb2 0208 	subs.w	r2, r2, r8
 801096c:	4620      	mov	r0, r4
 801096e:	eb63 0309 	sbc.w	r3, r3, r9
 8010972:	47d8      	blx	fp
 8010974:	4628      	mov	r0, r5
 8010976:	b007      	add	sp, #28
 8010978:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801097c:	f240 3521 	movw	r5, #801	@ 0x321
 8010980:	4628      	mov	r0, r5
 8010982:	b007      	add	sp, #28
 8010984:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010988:	2501      	movs	r5, #1
 801098a:	4628      	mov	r0, r5
 801098c:	b007      	add	sp, #28
 801098e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010992:	f44f 7548 	mov.w	r5, #800	@ 0x320
 8010996:	4628      	mov	r0, r5
 8010998:	b007      	add	sp, #28
 801099a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801099e:	250b      	movs	r5, #11
 80109a0:	4628      	mov	r0, r5
 80109a2:	b007      	add	sp, #28
 80109a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80109a8:	1b80      	subs	r0, r0, r6
 80109aa:	eb6c 0107 	sbc.w	r1, ip, r7
 80109ae:	3801      	subs	r0, #1
 80109b0:	f161 0100 	sbc.w	r1, r1, #0
 80109b4:	e9cd 3202 	strd	r3, r2, [sp, #8]
 80109b8:	f7f0 f8b8 	bl	8000b2c <__aeabi_ldivmod>
 80109bc:	9b02      	ldr	r3, [sp, #8]
 80109be:	3001      	adds	r0, #1
 80109c0:	f141 0100 	adc.w	r1, r1, #0
 80109c4:	fb00 f303 	mul.w	r3, r0, r3
 80109c8:	fb01 330a 	mla	r3, r1, sl, r3
 80109cc:	fba0 0a0a 	umull	r0, sl, r0, sl
 80109d0:	1986      	adds	r6, r0, r6
 80109d2:	4453      	add	r3, sl
 80109d4:	eb43 0707 	adc.w	r7, r3, r7
 80109d8:	e7b9      	b.n	801094e <rcl_timer_call+0x96>
 80109da:	bf00      	nop

080109dc <rcl_timer_is_ready>:
 80109dc:	b570      	push	{r4, r5, r6, lr}
 80109de:	b082      	sub	sp, #8
 80109e0:	b378      	cbz	r0, 8010a42 <rcl_timer_is_ready+0x66>
 80109e2:	6803      	ldr	r3, [r0, #0]
 80109e4:	4604      	mov	r4, r0
 80109e6:	b383      	cbz	r3, 8010a4a <rcl_timer_is_ready+0x6e>
 80109e8:	460d      	mov	r5, r1
 80109ea:	b351      	cbz	r1, 8010a42 <rcl_timer_is_ready+0x66>
 80109ec:	f3bf 8f5b 	dmb	ish
 80109f0:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 80109f4:	f3bf 8f5b 	dmb	ish
 80109f8:	b953      	cbnz	r3, 8010a10 <rcl_timer_is_ready+0x34>
 80109fa:	6803      	ldr	r3, [r0, #0]
 80109fc:	4669      	mov	r1, sp
 80109fe:	6818      	ldr	r0, [r3, #0]
 8010a00:	f7ff ff4e 	bl	80108a0 <rcl_clock_get_now>
 8010a04:	4606      	mov	r6, r0
 8010a06:	b140      	cbz	r0, 8010a1a <rcl_timer_is_ready+0x3e>
 8010a08:	f240 3321 	movw	r3, #801	@ 0x321
 8010a0c:	4298      	cmp	r0, r3
 8010a0e:	d101      	bne.n	8010a14 <rcl_timer_is_ready+0x38>
 8010a10:	2600      	movs	r6, #0
 8010a12:	702e      	strb	r6, [r5, #0]
 8010a14:	4630      	mov	r0, r6
 8010a16:	b002      	add	sp, #8
 8010a18:	bd70      	pop	{r4, r5, r6, pc}
 8010a1a:	6820      	ldr	r0, [r4, #0]
 8010a1c:	2105      	movs	r1, #5
 8010a1e:	3028      	adds	r0, #40	@ 0x28
 8010a20:	f001 fc0e 	bl	8012240 <__atomic_load_8>
 8010a24:	9b00      	ldr	r3, [sp, #0]
 8010a26:	1ac0      	subs	r0, r0, r3
 8010a28:	9b01      	ldr	r3, [sp, #4]
 8010a2a:	eb61 0103 	sbc.w	r1, r1, r3
 8010a2e:	2801      	cmp	r0, #1
 8010a30:	f171 0300 	sbcs.w	r3, r1, #0
 8010a34:	bfb4      	ite	lt
 8010a36:	2301      	movlt	r3, #1
 8010a38:	2300      	movge	r3, #0
 8010a3a:	4630      	mov	r0, r6
 8010a3c:	702b      	strb	r3, [r5, #0]
 8010a3e:	b002      	add	sp, #8
 8010a40:	bd70      	pop	{r4, r5, r6, pc}
 8010a42:	260b      	movs	r6, #11
 8010a44:	4630      	mov	r0, r6
 8010a46:	b002      	add	sp, #8
 8010a48:	bd70      	pop	{r4, r5, r6, pc}
 8010a4a:	f44f 7648 	mov.w	r6, #800	@ 0x320
 8010a4e:	e7e1      	b.n	8010a14 <rcl_timer_is_ready+0x38>

08010a50 <rcl_timer_get_time_until_next_call>:
 8010a50:	b570      	push	{r4, r5, r6, lr}
 8010a52:	b082      	sub	sp, #8
 8010a54:	b330      	cbz	r0, 8010aa4 <rcl_timer_get_time_until_next_call+0x54>
 8010a56:	6803      	ldr	r3, [r0, #0]
 8010a58:	4604      	mov	r4, r0
 8010a5a:	b33b      	cbz	r3, 8010aac <rcl_timer_get_time_until_next_call+0x5c>
 8010a5c:	460d      	mov	r5, r1
 8010a5e:	b309      	cbz	r1, 8010aa4 <rcl_timer_get_time_until_next_call+0x54>
 8010a60:	f3bf 8f5b 	dmb	ish
 8010a64:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8010a68:	f3bf 8f5b 	dmb	ish
 8010a6c:	b9ab      	cbnz	r3, 8010a9a <rcl_timer_get_time_until_next_call+0x4a>
 8010a6e:	6803      	ldr	r3, [r0, #0]
 8010a70:	4669      	mov	r1, sp
 8010a72:	6818      	ldr	r0, [r3, #0]
 8010a74:	f7ff ff14 	bl	80108a0 <rcl_clock_get_now>
 8010a78:	4606      	mov	r6, r0
 8010a7a:	b958      	cbnz	r0, 8010a94 <rcl_timer_get_time_until_next_call+0x44>
 8010a7c:	6820      	ldr	r0, [r4, #0]
 8010a7e:	2105      	movs	r1, #5
 8010a80:	3028      	adds	r0, #40	@ 0x28
 8010a82:	f001 fbdd 	bl	8012240 <__atomic_load_8>
 8010a86:	9b00      	ldr	r3, [sp, #0]
 8010a88:	1ac0      	subs	r0, r0, r3
 8010a8a:	9b01      	ldr	r3, [sp, #4]
 8010a8c:	6028      	str	r0, [r5, #0]
 8010a8e:	eb61 0103 	sbc.w	r1, r1, r3
 8010a92:	6069      	str	r1, [r5, #4]
 8010a94:	4630      	mov	r0, r6
 8010a96:	b002      	add	sp, #8
 8010a98:	bd70      	pop	{r4, r5, r6, pc}
 8010a9a:	f240 3621 	movw	r6, #801	@ 0x321
 8010a9e:	4630      	mov	r0, r6
 8010aa0:	b002      	add	sp, #8
 8010aa2:	bd70      	pop	{r4, r5, r6, pc}
 8010aa4:	260b      	movs	r6, #11
 8010aa6:	4630      	mov	r0, r6
 8010aa8:	b002      	add	sp, #8
 8010aaa:	bd70      	pop	{r4, r5, r6, pc}
 8010aac:	f44f 7648 	mov.w	r6, #800	@ 0x320
 8010ab0:	e7f0      	b.n	8010a94 <rcl_timer_get_time_until_next_call+0x44>
 8010ab2:	bf00      	nop

08010ab4 <rcl_timer_get_guard_condition>:
 8010ab4:	b130      	cbz	r0, 8010ac4 <rcl_timer_get_guard_condition+0x10>
 8010ab6:	6800      	ldr	r0, [r0, #0]
 8010ab8:	b120      	cbz	r0, 8010ac4 <rcl_timer_get_guard_condition+0x10>
 8010aba:	68c3      	ldr	r3, [r0, #12]
 8010abc:	b10b      	cbz	r3, 8010ac2 <rcl_timer_get_guard_condition+0xe>
 8010abe:	3008      	adds	r0, #8
 8010ac0:	4770      	bx	lr
 8010ac2:	4618      	mov	r0, r3
 8010ac4:	4770      	bx	lr
 8010ac6:	bf00      	nop

08010ac8 <rcl_validate_enclave_name_with_size>:
 8010ac8:	b378      	cbz	r0, 8010b2a <rcl_validate_enclave_name_with_size+0x62>
 8010aca:	b570      	push	{r4, r5, r6, lr}
 8010acc:	4615      	mov	r5, r2
 8010ace:	b0c2      	sub	sp, #264	@ 0x108
 8010ad0:	b302      	cbz	r2, 8010b14 <rcl_validate_enclave_name_with_size+0x4c>
 8010ad2:	461e      	mov	r6, r3
 8010ad4:	466a      	mov	r2, sp
 8010ad6:	ab01      	add	r3, sp, #4
 8010ad8:	460c      	mov	r4, r1
 8010ada:	f002 f833 	bl	8012b44 <rmw_validate_namespace_with_size>
 8010ade:	4684      	mov	ip, r0
 8010ae0:	b9e8      	cbnz	r0, 8010b1e <rcl_validate_enclave_name_with_size+0x56>
 8010ae2:	9b00      	ldr	r3, [sp, #0]
 8010ae4:	b923      	cbnz	r3, 8010af0 <rcl_validate_enclave_name_with_size+0x28>
 8010ae6:	2300      	movs	r3, #0
 8010ae8:	602b      	str	r3, [r5, #0]
 8010aea:	4660      	mov	r0, ip
 8010aec:	b042      	add	sp, #264	@ 0x108
 8010aee:	bd70      	pop	{r4, r5, r6, pc}
 8010af0:	2b07      	cmp	r3, #7
 8010af2:	d007      	beq.n	8010b04 <rcl_validate_enclave_name_with_size+0x3c>
 8010af4:	1e5a      	subs	r2, r3, #1
 8010af6:	2a05      	cmp	r2, #5
 8010af8:	d833      	bhi.n	8010b62 <rcl_validate_enclave_name_with_size+0x9a>
 8010afa:	e8df f002 	tbb	[pc, r2]
 8010afe:	2c2f      	.short	0x2c2f
 8010b00:	1a232629 	.word	0x1a232629
 8010b04:	2cff      	cmp	r4, #255	@ 0xff
 8010b06:	d9ee      	bls.n	8010ae6 <rcl_validate_enclave_name_with_size+0x1e>
 8010b08:	602b      	str	r3, [r5, #0]
 8010b0a:	2e00      	cmp	r6, #0
 8010b0c:	d0ed      	beq.n	8010aea <rcl_validate_enclave_name_with_size+0x22>
 8010b0e:	23fe      	movs	r3, #254	@ 0xfe
 8010b10:	6033      	str	r3, [r6, #0]
 8010b12:	e7ea      	b.n	8010aea <rcl_validate_enclave_name_with_size+0x22>
 8010b14:	f04f 0c0b 	mov.w	ip, #11
 8010b18:	4660      	mov	r0, ip
 8010b1a:	b042      	add	sp, #264	@ 0x108
 8010b1c:	bd70      	pop	{r4, r5, r6, pc}
 8010b1e:	f7fe ff91 	bl	800fa44 <rcl_convert_rmw_ret_to_rcl_ret>
 8010b22:	4684      	mov	ip, r0
 8010b24:	4660      	mov	r0, ip
 8010b26:	b042      	add	sp, #264	@ 0x108
 8010b28:	bd70      	pop	{r4, r5, r6, pc}
 8010b2a:	f04f 0c0b 	mov.w	ip, #11
 8010b2e:	4660      	mov	r0, ip
 8010b30:	4770      	bx	lr
 8010b32:	2306      	movs	r3, #6
 8010b34:	602b      	str	r3, [r5, #0]
 8010b36:	2e00      	cmp	r6, #0
 8010b38:	d0d7      	beq.n	8010aea <rcl_validate_enclave_name_with_size+0x22>
 8010b3a:	9b01      	ldr	r3, [sp, #4]
 8010b3c:	6033      	str	r3, [r6, #0]
 8010b3e:	4660      	mov	r0, ip
 8010b40:	b042      	add	sp, #264	@ 0x108
 8010b42:	bd70      	pop	{r4, r5, r6, pc}
 8010b44:	2305      	movs	r3, #5
 8010b46:	602b      	str	r3, [r5, #0]
 8010b48:	e7f5      	b.n	8010b36 <rcl_validate_enclave_name_with_size+0x6e>
 8010b4a:	2304      	movs	r3, #4
 8010b4c:	602b      	str	r3, [r5, #0]
 8010b4e:	e7f2      	b.n	8010b36 <rcl_validate_enclave_name_with_size+0x6e>
 8010b50:	2303      	movs	r3, #3
 8010b52:	602b      	str	r3, [r5, #0]
 8010b54:	e7ef      	b.n	8010b36 <rcl_validate_enclave_name_with_size+0x6e>
 8010b56:	2302      	movs	r3, #2
 8010b58:	602b      	str	r3, [r5, #0]
 8010b5a:	e7ec      	b.n	8010b36 <rcl_validate_enclave_name_with_size+0x6e>
 8010b5c:	2301      	movs	r3, #1
 8010b5e:	602b      	str	r3, [r5, #0]
 8010b60:	e7e9      	b.n	8010b36 <rcl_validate_enclave_name_with_size+0x6e>
 8010b62:	4a04      	ldr	r2, [pc, #16]	@ (8010b74 <rcl_validate_enclave_name_with_size+0xac>)
 8010b64:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8010b68:	a802      	add	r0, sp, #8
 8010b6a:	f001 fd23 	bl	80125b4 <rcutils_snprintf>
 8010b6e:	f04f 0c01 	mov.w	ip, #1
 8010b72:	e7ba      	b.n	8010aea <rcl_validate_enclave_name_with_size+0x22>
 8010b74:	08016bb0 	.word	0x08016bb0

08010b78 <rcl_validate_enclave_name>:
 8010b78:	b168      	cbz	r0, 8010b96 <rcl_validate_enclave_name+0x1e>
 8010b7a:	b570      	push	{r4, r5, r6, lr}
 8010b7c:	460d      	mov	r5, r1
 8010b7e:	4616      	mov	r6, r2
 8010b80:	4604      	mov	r4, r0
 8010b82:	f7ef fb37 	bl	80001f4 <strlen>
 8010b86:	4633      	mov	r3, r6
 8010b88:	4601      	mov	r1, r0
 8010b8a:	462a      	mov	r2, r5
 8010b8c:	4620      	mov	r0, r4
 8010b8e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8010b92:	f7ff bf99 	b.w	8010ac8 <rcl_validate_enclave_name_with_size>
 8010b96:	200b      	movs	r0, #11
 8010b98:	4770      	bx	lr
 8010b9a:	bf00      	nop

08010b9c <rcl_get_zero_initialized_wait_set>:
 8010b9c:	b510      	push	{r4, lr}
 8010b9e:	4c08      	ldr	r4, [pc, #32]	@ (8010bc0 <rcl_get_zero_initialized_wait_set+0x24>)
 8010ba0:	4686      	mov	lr, r0
 8010ba2:	4684      	mov	ip, r0
 8010ba4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8010ba6:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8010baa:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8010bac:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8010bb0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8010bb2:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8010bb6:	6823      	ldr	r3, [r4, #0]
 8010bb8:	f8cc 3000 	str.w	r3, [ip]
 8010bbc:	4670      	mov	r0, lr
 8010bbe:	bd10      	pop	{r4, pc}
 8010bc0:	08016c10 	.word	0x08016c10

08010bc4 <rcl_wait_set_is_valid>:
 8010bc4:	b118      	cbz	r0, 8010bce <rcl_wait_set_is_valid+0xa>
 8010bc6:	6b00      	ldr	r0, [r0, #48]	@ 0x30
 8010bc8:	3800      	subs	r0, #0
 8010bca:	bf18      	it	ne
 8010bcc:	2001      	movne	r0, #1
 8010bce:	4770      	bx	lr

08010bd0 <rcl_wait_set_fini>:
 8010bd0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010bd4:	b082      	sub	sp, #8
 8010bd6:	2800      	cmp	r0, #0
 8010bd8:	f000 8095 	beq.w	8010d06 <rcl_wait_set_fini+0x136>
 8010bdc:	6b06      	ldr	r6, [r0, #48]	@ 0x30
 8010bde:	4604      	mov	r4, r0
 8010be0:	2e00      	cmp	r6, #0
 8010be2:	f000 808c 	beq.w	8010cfe <rcl_wait_set_fini+0x12e>
 8010be6:	6bf0      	ldr	r0, [r6, #60]	@ 0x3c
 8010be8:	f002 fd66 	bl	80136b8 <rmw_destroy_wait_set>
 8010bec:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 8010bee:	1e06      	subs	r6, r0, #0
 8010bf0:	bf18      	it	ne
 8010bf2:	f44f 7661 	movne.w	r6, #900	@ 0x384
 8010bf6:	2d00      	cmp	r5, #0
 8010bf8:	f000 8081 	beq.w	8010cfe <rcl_wait_set_fini+0x12e>
 8010bfc:	6820      	ldr	r0, [r4, #0]
 8010bfe:	f8d5 804c 	ldr.w	r8, [r5, #76]	@ 0x4c
 8010c02:	6da9      	ldr	r1, [r5, #88]	@ 0x58
 8010c04:	2700      	movs	r7, #0
 8010c06:	6067      	str	r7, [r4, #4]
 8010c08:	602f      	str	r7, [r5, #0]
 8010c0a:	b120      	cbz	r0, 8010c16 <rcl_wait_set_fini+0x46>
 8010c0c:	9101      	str	r1, [sp, #4]
 8010c0e:	47c0      	blx	r8
 8010c10:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 8010c12:	9901      	ldr	r1, [sp, #4]
 8010c14:	6027      	str	r7, [r4, #0]
 8010c16:	68a8      	ldr	r0, [r5, #8]
 8010c18:	b120      	cbz	r0, 8010c24 <rcl_wait_set_fini+0x54>
 8010c1a:	47c0      	blx	r8
 8010c1c:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 8010c1e:	2300      	movs	r3, #0
 8010c20:	e9c5 3301 	strd	r3, r3, [r5, #4]
 8010c24:	68a0      	ldr	r0, [r4, #8]
 8010c26:	6cef      	ldr	r7, [r5, #76]	@ 0x4c
 8010c28:	6da9      	ldr	r1, [r5, #88]	@ 0x58
 8010c2a:	f04f 0800 	mov.w	r8, #0
 8010c2e:	f8c4 800c 	str.w	r8, [r4, #12]
 8010c32:	f8c5 800c 	str.w	r8, [r5, #12]
 8010c36:	b128      	cbz	r0, 8010c44 <rcl_wait_set_fini+0x74>
 8010c38:	47b8      	blx	r7
 8010c3a:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 8010c3c:	f8c4 8008 	str.w	r8, [r4, #8]
 8010c40:	6cef      	ldr	r7, [r5, #76]	@ 0x4c
 8010c42:	6da9      	ldr	r1, [r5, #88]	@ 0x58
 8010c44:	6968      	ldr	r0, [r5, #20]
 8010c46:	f04f 0800 	mov.w	r8, #0
 8010c4a:	f8c5 8010 	str.w	r8, [r5, #16]
 8010c4e:	b128      	cbz	r0, 8010c5c <rcl_wait_set_fini+0x8c>
 8010c50:	47b8      	blx	r7
 8010c52:	f8c5 8014 	str.w	r8, [r5, #20]
 8010c56:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 8010c58:	6cef      	ldr	r7, [r5, #76]	@ 0x4c
 8010c5a:	6da9      	ldr	r1, [r5, #88]	@ 0x58
 8010c5c:	6920      	ldr	r0, [r4, #16]
 8010c5e:	f04f 0800 	mov.w	r8, #0
 8010c62:	f8c4 8014 	str.w	r8, [r4, #20]
 8010c66:	f8c5 8040 	str.w	r8, [r5, #64]	@ 0x40
 8010c6a:	b128      	cbz	r0, 8010c78 <rcl_wait_set_fini+0xa8>
 8010c6c:	47b8      	blx	r7
 8010c6e:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 8010c70:	f8c4 8010 	str.w	r8, [r4, #16]
 8010c74:	6cef      	ldr	r7, [r5, #76]	@ 0x4c
 8010c76:	6da9      	ldr	r1, [r5, #88]	@ 0x58
 8010c78:	69a0      	ldr	r0, [r4, #24]
 8010c7a:	f04f 0800 	mov.w	r8, #0
 8010c7e:	f8c4 801c 	str.w	r8, [r4, #28]
 8010c82:	f8c5 8018 	str.w	r8, [r5, #24]
 8010c86:	b128      	cbz	r0, 8010c94 <rcl_wait_set_fini+0xc4>
 8010c88:	9101      	str	r1, [sp, #4]
 8010c8a:	47b8      	blx	r7
 8010c8c:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 8010c8e:	9901      	ldr	r1, [sp, #4]
 8010c90:	f8c4 8018 	str.w	r8, [r4, #24]
 8010c94:	6a28      	ldr	r0, [r5, #32]
 8010c96:	b120      	cbz	r0, 8010ca2 <rcl_wait_set_fini+0xd2>
 8010c98:	47b8      	blx	r7
 8010c9a:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 8010c9c:	2300      	movs	r3, #0
 8010c9e:	e9c5 3307 	strd	r3, r3, [r5, #28]
 8010ca2:	6a20      	ldr	r0, [r4, #32]
 8010ca4:	f8d5 804c 	ldr.w	r8, [r5, #76]	@ 0x4c
 8010ca8:	6da9      	ldr	r1, [r5, #88]	@ 0x58
 8010caa:	2700      	movs	r7, #0
 8010cac:	6267      	str	r7, [r4, #36]	@ 0x24
 8010cae:	626f      	str	r7, [r5, #36]	@ 0x24
 8010cb0:	b120      	cbz	r0, 8010cbc <rcl_wait_set_fini+0xec>
 8010cb2:	9101      	str	r1, [sp, #4]
 8010cb4:	47c0      	blx	r8
 8010cb6:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 8010cb8:	9901      	ldr	r1, [sp, #4]
 8010cba:	6227      	str	r7, [r4, #32]
 8010cbc:	6ae8      	ldr	r0, [r5, #44]	@ 0x2c
 8010cbe:	b120      	cbz	r0, 8010cca <rcl_wait_set_fini+0xfa>
 8010cc0:	47c0      	blx	r8
 8010cc2:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 8010cc4:	2300      	movs	r3, #0
 8010cc6:	e9c5 330a 	strd	r3, r3, [r5, #40]	@ 0x28
 8010cca:	6aa0      	ldr	r0, [r4, #40]	@ 0x28
 8010ccc:	f8d5 804c 	ldr.w	r8, [r5, #76]	@ 0x4c
 8010cd0:	6da9      	ldr	r1, [r5, #88]	@ 0x58
 8010cd2:	2700      	movs	r7, #0
 8010cd4:	62e7      	str	r7, [r4, #44]	@ 0x2c
 8010cd6:	632f      	str	r7, [r5, #48]	@ 0x30
 8010cd8:	b120      	cbz	r0, 8010ce4 <rcl_wait_set_fini+0x114>
 8010cda:	9101      	str	r1, [sp, #4]
 8010cdc:	47c0      	blx	r8
 8010cde:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 8010ce0:	9901      	ldr	r1, [sp, #4]
 8010ce2:	62a7      	str	r7, [r4, #40]	@ 0x28
 8010ce4:	6ba8      	ldr	r0, [r5, #56]	@ 0x38
 8010ce6:	b120      	cbz	r0, 8010cf2 <rcl_wait_set_fini+0x122>
 8010ce8:	47c0      	blx	r8
 8010cea:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 8010cec:	2300      	movs	r3, #0
 8010cee:	e9c5 330d 	strd	r3, r3, [r5, #52]	@ 0x34
 8010cf2:	6ceb      	ldr	r3, [r5, #76]	@ 0x4c
 8010cf4:	6da9      	ldr	r1, [r5, #88]	@ 0x58
 8010cf6:	4628      	mov	r0, r5
 8010cf8:	4798      	blx	r3
 8010cfa:	2300      	movs	r3, #0
 8010cfc:	6323      	str	r3, [r4, #48]	@ 0x30
 8010cfe:	4630      	mov	r0, r6
 8010d00:	b002      	add	sp, #8
 8010d02:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010d06:	260b      	movs	r6, #11
 8010d08:	4630      	mov	r0, r6
 8010d0a:	b002      	add	sp, #8
 8010d0c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08010d10 <rcl_wait_set_add_subscription>:
 8010d10:	b318      	cbz	r0, 8010d5a <rcl_wait_set_add_subscription+0x4a>
 8010d12:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 8010d14:	b570      	push	{r4, r5, r6, lr}
 8010d16:	4604      	mov	r4, r0
 8010d18:	b30b      	cbz	r3, 8010d5e <rcl_wait_set_add_subscription+0x4e>
 8010d1a:	b319      	cbz	r1, 8010d64 <rcl_wait_set_add_subscription+0x54>
 8010d1c:	681d      	ldr	r5, [r3, #0]
 8010d1e:	6840      	ldr	r0, [r0, #4]
 8010d20:	4285      	cmp	r5, r0
 8010d22:	d217      	bcs.n	8010d54 <rcl_wait_set_add_subscription+0x44>
 8010d24:	6820      	ldr	r0, [r4, #0]
 8010d26:	1c6e      	adds	r6, r5, #1
 8010d28:	601e      	str	r6, [r3, #0]
 8010d2a:	f840 1025 	str.w	r1, [r0, r5, lsl #2]
 8010d2e:	b102      	cbz	r2, 8010d32 <rcl_wait_set_add_subscription+0x22>
 8010d30:	6015      	str	r5, [r2, #0]
 8010d32:	4608      	mov	r0, r1
 8010d34:	f7ff fd14 	bl	8010760 <rcl_subscription_get_rmw_handle>
 8010d38:	b150      	cbz	r0, 8010d50 <rcl_wait_set_add_subscription+0x40>
 8010d3a:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8010d3c:	6842      	ldr	r2, [r0, #4]
 8010d3e:	689b      	ldr	r3, [r3, #8]
 8010d40:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8010d44:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 8010d46:	6853      	ldr	r3, [r2, #4]
 8010d48:	3301      	adds	r3, #1
 8010d4a:	2000      	movs	r0, #0
 8010d4c:	6053      	str	r3, [r2, #4]
 8010d4e:	bd70      	pop	{r4, r5, r6, pc}
 8010d50:	2001      	movs	r0, #1
 8010d52:	bd70      	pop	{r4, r5, r6, pc}
 8010d54:	f240 3086 	movw	r0, #902	@ 0x386
 8010d58:	bd70      	pop	{r4, r5, r6, pc}
 8010d5a:	200b      	movs	r0, #11
 8010d5c:	4770      	bx	lr
 8010d5e:	f44f 7061 	mov.w	r0, #900	@ 0x384
 8010d62:	bd70      	pop	{r4, r5, r6, pc}
 8010d64:	200b      	movs	r0, #11
 8010d66:	bd70      	pop	{r4, r5, r6, pc}

08010d68 <rcl_wait_set_clear>:
 8010d68:	2800      	cmp	r0, #0
 8010d6a:	d073      	beq.n	8010e54 <rcl_wait_set_clear+0xec>
 8010d6c:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 8010d6e:	b510      	push	{r4, lr}
 8010d70:	4604      	mov	r4, r0
 8010d72:	2b00      	cmp	r3, #0
 8010d74:	d070      	beq.n	8010e58 <rcl_wait_set_clear+0xf0>
 8010d76:	6800      	ldr	r0, [r0, #0]
 8010d78:	b138      	cbz	r0, 8010d8a <rcl_wait_set_clear+0x22>
 8010d7a:	6862      	ldr	r2, [r4, #4]
 8010d7c:	2100      	movs	r1, #0
 8010d7e:	0092      	lsls	r2, r2, #2
 8010d80:	f004 fc1e 	bl	80155c0 <memset>
 8010d84:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8010d86:	2200      	movs	r2, #0
 8010d88:	601a      	str	r2, [r3, #0]
 8010d8a:	68a0      	ldr	r0, [r4, #8]
 8010d8c:	b138      	cbz	r0, 8010d9e <rcl_wait_set_clear+0x36>
 8010d8e:	68e2      	ldr	r2, [r4, #12]
 8010d90:	2100      	movs	r1, #0
 8010d92:	0092      	lsls	r2, r2, #2
 8010d94:	f004 fc14 	bl	80155c0 <memset>
 8010d98:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8010d9a:	2200      	movs	r2, #0
 8010d9c:	60da      	str	r2, [r3, #12]
 8010d9e:	69a0      	ldr	r0, [r4, #24]
 8010da0:	b138      	cbz	r0, 8010db2 <rcl_wait_set_clear+0x4a>
 8010da2:	69e2      	ldr	r2, [r4, #28]
 8010da4:	2100      	movs	r1, #0
 8010da6:	0092      	lsls	r2, r2, #2
 8010da8:	f004 fc0a 	bl	80155c0 <memset>
 8010dac:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8010dae:	2200      	movs	r2, #0
 8010db0:	619a      	str	r2, [r3, #24]
 8010db2:	6a20      	ldr	r0, [r4, #32]
 8010db4:	b138      	cbz	r0, 8010dc6 <rcl_wait_set_clear+0x5e>
 8010db6:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 8010db8:	2100      	movs	r1, #0
 8010dba:	0092      	lsls	r2, r2, #2
 8010dbc:	f004 fc00 	bl	80155c0 <memset>
 8010dc0:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8010dc2:	2200      	movs	r2, #0
 8010dc4:	625a      	str	r2, [r3, #36]	@ 0x24
 8010dc6:	6aa0      	ldr	r0, [r4, #40]	@ 0x28
 8010dc8:	b138      	cbz	r0, 8010dda <rcl_wait_set_clear+0x72>
 8010dca:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 8010dcc:	2100      	movs	r1, #0
 8010dce:	0092      	lsls	r2, r2, #2
 8010dd0:	f004 fbf6 	bl	80155c0 <memset>
 8010dd4:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8010dd6:	2200      	movs	r2, #0
 8010dd8:	631a      	str	r2, [r3, #48]	@ 0x30
 8010dda:	6920      	ldr	r0, [r4, #16]
 8010ddc:	b138      	cbz	r0, 8010dee <rcl_wait_set_clear+0x86>
 8010dde:	6962      	ldr	r2, [r4, #20]
 8010de0:	2100      	movs	r1, #0
 8010de2:	0092      	lsls	r2, r2, #2
 8010de4:	f004 fbec 	bl	80155c0 <memset>
 8010de8:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8010dea:	2200      	movs	r2, #0
 8010dec:	641a      	str	r2, [r3, #64]	@ 0x40
 8010dee:	6898      	ldr	r0, [r3, #8]
 8010df0:	b138      	cbz	r0, 8010e02 <rcl_wait_set_clear+0x9a>
 8010df2:	685a      	ldr	r2, [r3, #4]
 8010df4:	2100      	movs	r1, #0
 8010df6:	0092      	lsls	r2, r2, #2
 8010df8:	f004 fbe2 	bl	80155c0 <memset>
 8010dfc:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8010dfe:	2200      	movs	r2, #0
 8010e00:	605a      	str	r2, [r3, #4]
 8010e02:	6958      	ldr	r0, [r3, #20]
 8010e04:	b138      	cbz	r0, 8010e16 <rcl_wait_set_clear+0xae>
 8010e06:	691a      	ldr	r2, [r3, #16]
 8010e08:	2100      	movs	r1, #0
 8010e0a:	0092      	lsls	r2, r2, #2
 8010e0c:	f004 fbd8 	bl	80155c0 <memset>
 8010e10:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8010e12:	2200      	movs	r2, #0
 8010e14:	611a      	str	r2, [r3, #16]
 8010e16:	6a18      	ldr	r0, [r3, #32]
 8010e18:	b138      	cbz	r0, 8010e2a <rcl_wait_set_clear+0xc2>
 8010e1a:	69da      	ldr	r2, [r3, #28]
 8010e1c:	2100      	movs	r1, #0
 8010e1e:	0092      	lsls	r2, r2, #2
 8010e20:	f004 fbce 	bl	80155c0 <memset>
 8010e24:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8010e26:	2200      	movs	r2, #0
 8010e28:	61da      	str	r2, [r3, #28]
 8010e2a:	6ad8      	ldr	r0, [r3, #44]	@ 0x2c
 8010e2c:	b138      	cbz	r0, 8010e3e <rcl_wait_set_clear+0xd6>
 8010e2e:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8010e30:	2100      	movs	r1, #0
 8010e32:	0092      	lsls	r2, r2, #2
 8010e34:	f004 fbc4 	bl	80155c0 <memset>
 8010e38:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8010e3a:	2200      	movs	r2, #0
 8010e3c:	629a      	str	r2, [r3, #40]	@ 0x28
 8010e3e:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 8010e40:	b138      	cbz	r0, 8010e52 <rcl_wait_set_clear+0xea>
 8010e42:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8010e44:	2100      	movs	r1, #0
 8010e46:	0092      	lsls	r2, r2, #2
 8010e48:	f004 fbba 	bl	80155c0 <memset>
 8010e4c:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8010e4e:	2000      	movs	r0, #0
 8010e50:	6358      	str	r0, [r3, #52]	@ 0x34
 8010e52:	bd10      	pop	{r4, pc}
 8010e54:	200b      	movs	r0, #11
 8010e56:	4770      	bx	lr
 8010e58:	f44f 7061 	mov.w	r0, #900	@ 0x384
 8010e5c:	bd10      	pop	{r4, pc}
 8010e5e:	bf00      	nop

08010e60 <rcl_wait_set_resize>:
 8010e60:	2800      	cmp	r0, #0
 8010e62:	f000 8185 	beq.w	8011170 <rcl_wait_set_resize+0x310>
 8010e66:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010e6a:	6b04      	ldr	r4, [r0, #48]	@ 0x30
 8010e6c:	b083      	sub	sp, #12
 8010e6e:	4605      	mov	r5, r0
 8010e70:	2c00      	cmp	r4, #0
 8010e72:	f000 817f 	beq.w	8011174 <rcl_wait_set_resize+0x314>
 8010e76:	f04f 0900 	mov.w	r9, #0
 8010e7a:	f8d4 a058 	ldr.w	sl, [r4, #88]	@ 0x58
 8010e7e:	461f      	mov	r7, r3
 8010e80:	4688      	mov	r8, r1
 8010e82:	e9d4 b313 	ldrd	fp, r3, [r4, #76]	@ 0x4c
 8010e86:	4616      	mov	r6, r2
 8010e88:	f8c0 9004 	str.w	r9, [r0, #4]
 8010e8c:	f8c4 9000 	str.w	r9, [r4]
 8010e90:	2900      	cmp	r1, #0
 8010e92:	f000 80bd 	beq.w	8011010 <rcl_wait_set_resize+0x1b0>
 8010e96:	008c      	lsls	r4, r1, #2
 8010e98:	6800      	ldr	r0, [r0, #0]
 8010e9a:	9301      	str	r3, [sp, #4]
 8010e9c:	4652      	mov	r2, sl
 8010e9e:	4621      	mov	r1, r4
 8010ea0:	4798      	blx	r3
 8010ea2:	9b01      	ldr	r3, [sp, #4]
 8010ea4:	6028      	str	r0, [r5, #0]
 8010ea6:	2800      	cmp	r0, #0
 8010ea8:	f000 80cb 	beq.w	8011042 <rcl_wait_set_resize+0x1e2>
 8010eac:	4622      	mov	r2, r4
 8010eae:	4649      	mov	r1, r9
 8010eb0:	9301      	str	r3, [sp, #4]
 8010eb2:	f004 fb85 	bl	80155c0 <memset>
 8010eb6:	f8c5 8004 	str.w	r8, [r5, #4]
 8010eba:	f8d5 8030 	ldr.w	r8, [r5, #48]	@ 0x30
 8010ebe:	9b01      	ldr	r3, [sp, #4]
 8010ec0:	f8d8 0008 	ldr.w	r0, [r8, #8]
 8010ec4:	f8c8 9004 	str.w	r9, [r8, #4]
 8010ec8:	4652      	mov	r2, sl
 8010eca:	4621      	mov	r1, r4
 8010ecc:	4798      	blx	r3
 8010ece:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 8010ed0:	f8c8 0008 	str.w	r0, [r8, #8]
 8010ed4:	689b      	ldr	r3, [r3, #8]
 8010ed6:	2b00      	cmp	r3, #0
 8010ed8:	f000 80ac 	beq.w	8011034 <rcl_wait_set_resize+0x1d4>
 8010edc:	4622      	mov	r2, r4
 8010ede:	4649      	mov	r1, r9
 8010ee0:	4618      	mov	r0, r3
 8010ee2:	f004 fb6d 	bl	80155c0 <memset>
 8010ee6:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 8010ee8:	f8d4 9058 	ldr.w	r9, [r4, #88]	@ 0x58
 8010eec:	f04f 0800 	mov.w	r8, #0
 8010ef0:	e9d4 2313 	ldrd	r2, r3, [r4, #76]	@ 0x4c
 8010ef4:	f8c5 800c 	str.w	r8, [r5, #12]
 8010ef8:	f8c4 800c 	str.w	r8, [r4, #12]
 8010efc:	2e00      	cmp	r6, #0
 8010efe:	f040 80a4 	bne.w	801104a <rcl_wait_set_resize+0x1ea>
 8010f02:	68a8      	ldr	r0, [r5, #8]
 8010f04:	b128      	cbz	r0, 8010f12 <rcl_wait_set_resize+0xb2>
 8010f06:	4649      	mov	r1, r9
 8010f08:	4790      	blx	r2
 8010f0a:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 8010f0c:	60ae      	str	r6, [r5, #8]
 8010f0e:	f8d4 9058 	ldr.w	r9, [r4, #88]	@ 0x58
 8010f12:	f04f 0800 	mov.w	r8, #0
 8010f16:	19f6      	adds	r6, r6, r7
 8010f18:	f8c4 8010 	str.w	r8, [r4, #16]
 8010f1c:	f040 80ac 	bne.w	8011078 <rcl_wait_set_resize+0x218>
 8010f20:	6960      	ldr	r0, [r4, #20]
 8010f22:	b130      	cbz	r0, 8010f32 <rcl_wait_set_resize+0xd2>
 8010f24:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
 8010f26:	4649      	mov	r1, r9
 8010f28:	4798      	blx	r3
 8010f2a:	6166      	str	r6, [r4, #20]
 8010f2c:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 8010f2e:	f8d4 9058 	ldr.w	r9, [r4, #88]	@ 0x58
 8010f32:	2600      	movs	r6, #0
 8010f34:	e9d4 a813 	ldrd	sl, r8, [r4, #76]	@ 0x4c
 8010f38:	616e      	str	r6, [r5, #20]
 8010f3a:	6426      	str	r6, [r4, #64]	@ 0x40
 8010f3c:	2f00      	cmp	r7, #0
 8010f3e:	f040 80ad 	bne.w	801109c <rcl_wait_set_resize+0x23c>
 8010f42:	6928      	ldr	r0, [r5, #16]
 8010f44:	b138      	cbz	r0, 8010f56 <rcl_wait_set_resize+0xf6>
 8010f46:	4649      	mov	r1, r9
 8010f48:	47d0      	blx	sl
 8010f4a:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 8010f4c:	612f      	str	r7, [r5, #16]
 8010f4e:	e9d4 a813 	ldrd	sl, r8, [r4, #76]	@ 0x4c
 8010f52:	f8d4 9058 	ldr.w	r9, [r4, #88]	@ 0x58
 8010f56:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8010f58:	2600      	movs	r6, #0
 8010f5a:	61ee      	str	r6, [r5, #28]
 8010f5c:	61a6      	str	r6, [r4, #24]
 8010f5e:	2b00      	cmp	r3, #0
 8010f60:	f040 80af 	bne.w	80110c2 <rcl_wait_set_resize+0x262>
 8010f64:	69a8      	ldr	r0, [r5, #24]
 8010f66:	b120      	cbz	r0, 8010f72 <rcl_wait_set_resize+0x112>
 8010f68:	4649      	mov	r1, r9
 8010f6a:	47d0      	blx	sl
 8010f6c:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8010f6e:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 8010f70:	61ab      	str	r3, [r5, #24]
 8010f72:	6a20      	ldr	r0, [r4, #32]
 8010f74:	b128      	cbz	r0, 8010f82 <rcl_wait_set_resize+0x122>
 8010f76:	4649      	mov	r1, r9
 8010f78:	47d0      	blx	sl
 8010f7a:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 8010f7c:	2300      	movs	r3, #0
 8010f7e:	e9c4 3307 	strd	r3, r3, [r4, #28]
 8010f82:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8010f84:	6da7      	ldr	r7, [r4, #88]	@ 0x58
 8010f86:	2600      	movs	r6, #0
 8010f88:	e9d4 8913 	ldrd	r8, r9, [r4, #76]	@ 0x4c
 8010f8c:	626e      	str	r6, [r5, #36]	@ 0x24
 8010f8e:	6266      	str	r6, [r4, #36]	@ 0x24
 8010f90:	2b00      	cmp	r3, #0
 8010f92:	f000 80b6 	beq.w	8011102 <rcl_wait_set_resize+0x2a2>
 8010f96:	ea4f 0a83 	mov.w	sl, r3, lsl #2
 8010f9a:	6a28      	ldr	r0, [r5, #32]
 8010f9c:	463a      	mov	r2, r7
 8010f9e:	4651      	mov	r1, sl
 8010fa0:	47c8      	blx	r9
 8010fa2:	6228      	str	r0, [r5, #32]
 8010fa4:	2800      	cmp	r0, #0
 8010fa6:	d04c      	beq.n	8011042 <rcl_wait_set_resize+0x1e2>
 8010fa8:	4652      	mov	r2, sl
 8010faa:	4631      	mov	r1, r6
 8010fac:	f004 fb08 	bl	80155c0 <memset>
 8010fb0:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 8010fb2:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8010fb4:	626b      	str	r3, [r5, #36]	@ 0x24
 8010fb6:	6ae0      	ldr	r0, [r4, #44]	@ 0x2c
 8010fb8:	62a6      	str	r6, [r4, #40]	@ 0x28
 8010fba:	463a      	mov	r2, r7
 8010fbc:	4651      	mov	r1, sl
 8010fbe:	47c8      	blx	r9
 8010fc0:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 8010fc2:	62e0      	str	r0, [r4, #44]	@ 0x2c
 8010fc4:	6adc      	ldr	r4, [r3, #44]	@ 0x2c
 8010fc6:	2c00      	cmp	r4, #0
 8010fc8:	f000 80f0 	beq.w	80111ac <rcl_wait_set_resize+0x34c>
 8010fcc:	4620      	mov	r0, r4
 8010fce:	4652      	mov	r2, sl
 8010fd0:	4631      	mov	r1, r6
 8010fd2:	f004 faf5 	bl	80155c0 <memset>
 8010fd6:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 8010fd8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8010fda:	6da7      	ldr	r7, [r4, #88]	@ 0x58
 8010fdc:	2600      	movs	r6, #0
 8010fde:	e9d4 8913 	ldrd	r8, r9, [r4, #76]	@ 0x4c
 8010fe2:	62ee      	str	r6, [r5, #44]	@ 0x2c
 8010fe4:	6326      	str	r6, [r4, #48]	@ 0x30
 8010fe6:	2b00      	cmp	r3, #0
 8010fe8:	f040 809d 	bne.w	8011126 <rcl_wait_set_resize+0x2c6>
 8010fec:	6aa8      	ldr	r0, [r5, #40]	@ 0x28
 8010fee:	b120      	cbz	r0, 8010ffa <rcl_wait_set_resize+0x19a>
 8010ff0:	4639      	mov	r1, r7
 8010ff2:	47c0      	blx	r8
 8010ff4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8010ff6:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 8010ff8:	62ab      	str	r3, [r5, #40]	@ 0x28
 8010ffa:	6ba0      	ldr	r0, [r4, #56]	@ 0x38
 8010ffc:	b310      	cbz	r0, 8011044 <rcl_wait_set_resize+0x1e4>
 8010ffe:	4639      	mov	r1, r7
 8011000:	47c0      	blx	r8
 8011002:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 8011004:	2000      	movs	r0, #0
 8011006:	e9c3 000d 	strd	r0, r0, [r3, #52]	@ 0x34
 801100a:	b003      	add	sp, #12
 801100c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011010:	6800      	ldr	r0, [r0, #0]
 8011012:	b120      	cbz	r0, 801101e <rcl_wait_set_resize+0x1be>
 8011014:	4651      	mov	r1, sl
 8011016:	47d8      	blx	fp
 8011018:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 801101a:	f8c5 8000 	str.w	r8, [r5]
 801101e:	68a0      	ldr	r0, [r4, #8]
 8011020:	2800      	cmp	r0, #0
 8011022:	f43f af61 	beq.w	8010ee8 <rcl_wait_set_resize+0x88>
 8011026:	4651      	mov	r1, sl
 8011028:	47d8      	blx	fp
 801102a:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 801102c:	2300      	movs	r3, #0
 801102e:	e9c4 3301 	strd	r3, r3, [r4, #4]
 8011032:	e759      	b.n	8010ee8 <rcl_wait_set_resize+0x88>
 8011034:	6828      	ldr	r0, [r5, #0]
 8011036:	9301      	str	r3, [sp, #4]
 8011038:	4651      	mov	r1, sl
 801103a:	47d8      	blx	fp
 801103c:	9b01      	ldr	r3, [sp, #4]
 801103e:	e9c5 3300 	strd	r3, r3, [r5]
 8011042:	200a      	movs	r0, #10
 8011044:	b003      	add	sp, #12
 8011046:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801104a:	00b4      	lsls	r4, r6, #2
 801104c:	68a8      	ldr	r0, [r5, #8]
 801104e:	464a      	mov	r2, r9
 8011050:	4621      	mov	r1, r4
 8011052:	4798      	blx	r3
 8011054:	60a8      	str	r0, [r5, #8]
 8011056:	2800      	cmp	r0, #0
 8011058:	d0f3      	beq.n	8011042 <rcl_wait_set_resize+0x1e2>
 801105a:	4622      	mov	r2, r4
 801105c:	4641      	mov	r1, r8
 801105e:	f004 faaf 	bl	80155c0 <memset>
 8011062:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 8011064:	60ee      	str	r6, [r5, #12]
 8011066:	f04f 0800 	mov.w	r8, #0
 801106a:	19f6      	adds	r6, r6, r7
 801106c:	f8d4 9058 	ldr.w	r9, [r4, #88]	@ 0x58
 8011070:	f8c4 8010 	str.w	r8, [r4, #16]
 8011074:	f43f af54 	beq.w	8010f20 <rcl_wait_set_resize+0xc0>
 8011078:	00b6      	lsls	r6, r6, #2
 801107a:	464a      	mov	r2, r9
 801107c:	6d23      	ldr	r3, [r4, #80]	@ 0x50
 801107e:	6960      	ldr	r0, [r4, #20]
 8011080:	4631      	mov	r1, r6
 8011082:	4798      	blx	r3
 8011084:	4681      	mov	r9, r0
 8011086:	6160      	str	r0, [r4, #20]
 8011088:	2800      	cmp	r0, #0
 801108a:	d076      	beq.n	801117a <rcl_wait_set_resize+0x31a>
 801108c:	4632      	mov	r2, r6
 801108e:	4641      	mov	r1, r8
 8011090:	f004 fa96 	bl	80155c0 <memset>
 8011094:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 8011096:	f8d4 9058 	ldr.w	r9, [r4, #88]	@ 0x58
 801109a:	e74a      	b.n	8010f32 <rcl_wait_set_resize+0xd2>
 801109c:	00bc      	lsls	r4, r7, #2
 801109e:	6928      	ldr	r0, [r5, #16]
 80110a0:	464a      	mov	r2, r9
 80110a2:	4621      	mov	r1, r4
 80110a4:	47c0      	blx	r8
 80110a6:	6128      	str	r0, [r5, #16]
 80110a8:	2800      	cmp	r0, #0
 80110aa:	d0ca      	beq.n	8011042 <rcl_wait_set_resize+0x1e2>
 80110ac:	4622      	mov	r2, r4
 80110ae:	4631      	mov	r1, r6
 80110b0:	f004 fa86 	bl	80155c0 <memset>
 80110b4:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 80110b6:	616f      	str	r7, [r5, #20]
 80110b8:	e9d4 a813 	ldrd	sl, r8, [r4, #76]	@ 0x4c
 80110bc:	f8d4 9058 	ldr.w	r9, [r4, #88]	@ 0x58
 80110c0:	e749      	b.n	8010f56 <rcl_wait_set_resize+0xf6>
 80110c2:	009c      	lsls	r4, r3, #2
 80110c4:	69a8      	ldr	r0, [r5, #24]
 80110c6:	464a      	mov	r2, r9
 80110c8:	4621      	mov	r1, r4
 80110ca:	47c0      	blx	r8
 80110cc:	61a8      	str	r0, [r5, #24]
 80110ce:	2800      	cmp	r0, #0
 80110d0:	d0b7      	beq.n	8011042 <rcl_wait_set_resize+0x1e2>
 80110d2:	4622      	mov	r2, r4
 80110d4:	4631      	mov	r1, r6
 80110d6:	f004 fa73 	bl	80155c0 <memset>
 80110da:	6b2f      	ldr	r7, [r5, #48]	@ 0x30
 80110dc:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80110de:	61eb      	str	r3, [r5, #28]
 80110e0:	6a38      	ldr	r0, [r7, #32]
 80110e2:	61fe      	str	r6, [r7, #28]
 80110e4:	464a      	mov	r2, r9
 80110e6:	4621      	mov	r1, r4
 80110e8:	47c0      	blx	r8
 80110ea:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 80110ec:	6238      	str	r0, [r7, #32]
 80110ee:	6a1f      	ldr	r7, [r3, #32]
 80110f0:	2f00      	cmp	r7, #0
 80110f2:	d054      	beq.n	801119e <rcl_wait_set_resize+0x33e>
 80110f4:	4622      	mov	r2, r4
 80110f6:	4631      	mov	r1, r6
 80110f8:	4638      	mov	r0, r7
 80110fa:	f004 fa61 	bl	80155c0 <memset>
 80110fe:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 8011100:	e73f      	b.n	8010f82 <rcl_wait_set_resize+0x122>
 8011102:	6a28      	ldr	r0, [r5, #32]
 8011104:	b120      	cbz	r0, 8011110 <rcl_wait_set_resize+0x2b0>
 8011106:	4639      	mov	r1, r7
 8011108:	47c0      	blx	r8
 801110a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801110c:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 801110e:	622b      	str	r3, [r5, #32]
 8011110:	6ae0      	ldr	r0, [r4, #44]	@ 0x2c
 8011112:	2800      	cmp	r0, #0
 8011114:	f43f af60 	beq.w	8010fd8 <rcl_wait_set_resize+0x178>
 8011118:	4639      	mov	r1, r7
 801111a:	47c0      	blx	r8
 801111c:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 801111e:	2300      	movs	r3, #0
 8011120:	e9c4 330a 	strd	r3, r3, [r4, #40]	@ 0x28
 8011124:	e758      	b.n	8010fd8 <rcl_wait_set_resize+0x178>
 8011126:	009c      	lsls	r4, r3, #2
 8011128:	6aa8      	ldr	r0, [r5, #40]	@ 0x28
 801112a:	463a      	mov	r2, r7
 801112c:	4621      	mov	r1, r4
 801112e:	47c8      	blx	r9
 8011130:	62a8      	str	r0, [r5, #40]	@ 0x28
 8011132:	2800      	cmp	r0, #0
 8011134:	d085      	beq.n	8011042 <rcl_wait_set_resize+0x1e2>
 8011136:	4622      	mov	r2, r4
 8011138:	4631      	mov	r1, r6
 801113a:	f004 fa41 	bl	80155c0 <memset>
 801113e:	f8d5 a030 	ldr.w	sl, [r5, #48]	@ 0x30
 8011142:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8011144:	62eb      	str	r3, [r5, #44]	@ 0x2c
 8011146:	f8da 0038 	ldr.w	r0, [sl, #56]	@ 0x38
 801114a:	f8ca 6034 	str.w	r6, [sl, #52]	@ 0x34
 801114e:	463a      	mov	r2, r7
 8011150:	4621      	mov	r1, r4
 8011152:	47c8      	blx	r9
 8011154:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 8011156:	f8ca 0038 	str.w	r0, [sl, #56]	@ 0x38
 801115a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801115c:	b36b      	cbz	r3, 80111ba <rcl_wait_set_resize+0x35a>
 801115e:	4622      	mov	r2, r4
 8011160:	4631      	mov	r1, r6
 8011162:	4618      	mov	r0, r3
 8011164:	f004 fa2c 	bl	80155c0 <memset>
 8011168:	4630      	mov	r0, r6
 801116a:	b003      	add	sp, #12
 801116c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011170:	200b      	movs	r0, #11
 8011172:	4770      	bx	lr
 8011174:	f44f 7061 	mov.w	r0, #900	@ 0x384
 8011178:	e764      	b.n	8011044 <rcl_wait_set_resize+0x1e4>
 801117a:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 801117c:	68a8      	ldr	r0, [r5, #8]
 801117e:	6d99      	ldr	r1, [r3, #88]	@ 0x58
 8011180:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8011182:	4798      	blx	r3
 8011184:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 8011186:	6928      	ldr	r0, [r5, #16]
 8011188:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 801118a:	6d99      	ldr	r1, [r3, #88]	@ 0x58
 801118c:	f8c5 900c 	str.w	r9, [r5, #12]
 8011190:	f8c5 9008 	str.w	r9, [r5, #8]
 8011194:	4790      	blx	r2
 8011196:	e9c5 9904 	strd	r9, r9, [r5, #16]
 801119a:	200a      	movs	r0, #10
 801119c:	e752      	b.n	8011044 <rcl_wait_set_resize+0x1e4>
 801119e:	69a8      	ldr	r0, [r5, #24]
 80111a0:	4649      	mov	r1, r9
 80111a2:	47d0      	blx	sl
 80111a4:	e9c5 7706 	strd	r7, r7, [r5, #24]
 80111a8:	200a      	movs	r0, #10
 80111aa:	e74b      	b.n	8011044 <rcl_wait_set_resize+0x1e4>
 80111ac:	6a28      	ldr	r0, [r5, #32]
 80111ae:	4639      	mov	r1, r7
 80111b0:	47c0      	blx	r8
 80111b2:	e9c5 4408 	strd	r4, r4, [r5, #32]
 80111b6:	200a      	movs	r0, #10
 80111b8:	e744      	b.n	8011044 <rcl_wait_set_resize+0x1e4>
 80111ba:	6aa8      	ldr	r0, [r5, #40]	@ 0x28
 80111bc:	9301      	str	r3, [sp, #4]
 80111be:	4639      	mov	r1, r7
 80111c0:	47c0      	blx	r8
 80111c2:	9b01      	ldr	r3, [sp, #4]
 80111c4:	200a      	movs	r0, #10
 80111c6:	e9c5 330a 	strd	r3, r3, [r5, #40]	@ 0x28
 80111ca:	e73b      	b.n	8011044 <rcl_wait_set_resize+0x1e4>

080111cc <rcl_wait_set_init>:
 80111cc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80111d0:	b084      	sub	sp, #16
 80111d2:	4604      	mov	r4, r0
 80111d4:	a810      	add	r0, sp, #64	@ 0x40
 80111d6:	f8dd a03c 	ldr.w	sl, [sp, #60]	@ 0x3c
 80111da:	460f      	mov	r7, r1
 80111dc:	4690      	mov	r8, r2
 80111de:	4699      	mov	r9, r3
 80111e0:	f7f8 ff58 	bl	800a094 <rcutils_allocator_is_valid>
 80111e4:	2800      	cmp	r0, #0
 80111e6:	d06b      	beq.n	80112c0 <rcl_wait_set_init+0xf4>
 80111e8:	2c00      	cmp	r4, #0
 80111ea:	d069      	beq.n	80112c0 <rcl_wait_set_init+0xf4>
 80111ec:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 80111ee:	b125      	cbz	r5, 80111fa <rcl_wait_set_init+0x2e>
 80111f0:	2564      	movs	r5, #100	@ 0x64
 80111f2:	4628      	mov	r0, r5
 80111f4:	b004      	add	sp, #16
 80111f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80111fa:	f1ba 0f00 	cmp.w	sl, #0
 80111fe:	d05f      	beq.n	80112c0 <rcl_wait_set_init+0xf4>
 8011200:	4650      	mov	r0, sl
 8011202:	f7fe fc3d 	bl	800fa80 <rcl_context_is_valid>
 8011206:	2800      	cmp	r0, #0
 8011208:	d067      	beq.n	80112da <rcl_wait_set_init+0x10e>
 801120a:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801120c:	9914      	ldr	r1, [sp, #80]	@ 0x50
 801120e:	205c      	movs	r0, #92	@ 0x5c
 8011210:	4798      	blx	r3
 8011212:	6320      	str	r0, [r4, #48]	@ 0x30
 8011214:	2800      	cmp	r0, #0
 8011216:	d062      	beq.n	80112de <rcl_wait_set_init+0x112>
 8011218:	4629      	mov	r1, r5
 801121a:	225c      	movs	r2, #92	@ 0x5c
 801121c:	f004 f9d0 	bl	80155c0 <memset>
 8011220:	e9dd 320d 	ldrd	r3, r2, [sp, #52]	@ 0x34
 8011224:	eb03 0e02 	add.w	lr, r3, r2
 8011228:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801122a:	6b26      	ldr	r6, [r4, #48]	@ 0x30
 801122c:	f10d 0c40 	add.w	ip, sp, #64	@ 0x40
 8011230:	449e      	add	lr, r3
 8011232:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8011236:	e9c6 5501 	strd	r5, r5, [r6, #4]
 801123a:	e9c6 5504 	strd	r5, r5, [r6, #16]
 801123e:	e9c6 5507 	strd	r5, r5, [r6, #28]
 8011242:	e9c6 550a 	strd	r5, r5, [r6, #40]	@ 0x28
 8011246:	e9c6 550d 	strd	r5, r5, [r6, #52]	@ 0x34
 801124a:	f106 0548 	add.w	r5, r6, #72	@ 0x48
 801124e:	f8c6 a044 	str.w	sl, [r6, #68]	@ 0x44
 8011252:	f8da a000 	ldr.w	sl, [sl]
 8011256:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8011258:	44c6      	add	lr, r8
 801125a:	f8dc 3000 	ldr.w	r3, [ip]
 801125e:	602b      	str	r3, [r5, #0]
 8011260:	eb0e 0147 	add.w	r1, lr, r7, lsl #1
 8011264:	f10a 0028 	add.w	r0, sl, #40	@ 0x28
 8011268:	f002 fa1c 	bl	80136a4 <rmw_create_wait_set>
 801126c:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 801126e:	63f0      	str	r0, [r6, #60]	@ 0x3c
 8011270:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 8011272:	b350      	cbz	r0, 80112ca <rcl_wait_set_init+0xfe>
 8011274:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8011276:	9302      	str	r3, [sp, #8]
 8011278:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801127a:	9301      	str	r3, [sp, #4]
 801127c:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801127e:	9300      	str	r3, [sp, #0]
 8011280:	4642      	mov	r2, r8
 8011282:	464b      	mov	r3, r9
 8011284:	4639      	mov	r1, r7
 8011286:	4620      	mov	r0, r4
 8011288:	f7ff fdea 	bl	8010e60 <rcl_wait_set_resize>
 801128c:	4605      	mov	r5, r0
 801128e:	2800      	cmp	r0, #0
 8011290:	d0af      	beq.n	80111f2 <rcl_wait_set_init+0x26>
 8011292:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8011294:	bb2b      	cbnz	r3, 80112e2 <rcl_wait_set_init+0x116>
 8011296:	2600      	movs	r6, #0
 8011298:	e9cd 6601 	strd	r6, r6, [sp, #4]
 801129c:	9600      	str	r6, [sp, #0]
 801129e:	4633      	mov	r3, r6
 80112a0:	4632      	mov	r2, r6
 80112a2:	4631      	mov	r1, r6
 80112a4:	4620      	mov	r0, r4
 80112a6:	f7ff fddb 	bl	8010e60 <rcl_wait_set_resize>
 80112aa:	6b20      	ldr	r0, [r4, #48]	@ 0x30
 80112ac:	2800      	cmp	r0, #0
 80112ae:	d0a0      	beq.n	80111f2 <rcl_wait_set_init+0x26>
 80112b0:	6cc3      	ldr	r3, [r0, #76]	@ 0x4c
 80112b2:	6d81      	ldr	r1, [r0, #88]	@ 0x58
 80112b4:	4798      	blx	r3
 80112b6:	4628      	mov	r0, r5
 80112b8:	6326      	str	r6, [r4, #48]	@ 0x30
 80112ba:	b004      	add	sp, #16
 80112bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80112c0:	250b      	movs	r5, #11
 80112c2:	4628      	mov	r0, r5
 80112c4:	b004      	add	sp, #16
 80112c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80112ca:	2501      	movs	r5, #1
 80112cc:	f002 f9f4 	bl	80136b8 <rmw_destroy_wait_set>
 80112d0:	2800      	cmp	r0, #0
 80112d2:	bf18      	it	ne
 80112d4:	f44f 7561 	movne.w	r5, #900	@ 0x384
 80112d8:	e7dd      	b.n	8011296 <rcl_wait_set_init+0xca>
 80112da:	2565      	movs	r5, #101	@ 0x65
 80112dc:	e789      	b.n	80111f2 <rcl_wait_set_init+0x26>
 80112de:	250a      	movs	r5, #10
 80112e0:	e787      	b.n	80111f2 <rcl_wait_set_init+0x26>
 80112e2:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 80112e4:	e7f2      	b.n	80112cc <rcl_wait_set_init+0x100>
 80112e6:	bf00      	nop

080112e8 <rcl_wait_set_add_guard_condition>:
 80112e8:	b318      	cbz	r0, 8011332 <rcl_wait_set_add_guard_condition+0x4a>
 80112ea:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 80112ec:	b570      	push	{r4, r5, r6, lr}
 80112ee:	4604      	mov	r4, r0
 80112f0:	b30b      	cbz	r3, 8011336 <rcl_wait_set_add_guard_condition+0x4e>
 80112f2:	b319      	cbz	r1, 801133c <rcl_wait_set_add_guard_condition+0x54>
 80112f4:	68dd      	ldr	r5, [r3, #12]
 80112f6:	68c0      	ldr	r0, [r0, #12]
 80112f8:	4285      	cmp	r5, r0
 80112fa:	d217      	bcs.n	801132c <rcl_wait_set_add_guard_condition+0x44>
 80112fc:	68a0      	ldr	r0, [r4, #8]
 80112fe:	1c6e      	adds	r6, r5, #1
 8011300:	60de      	str	r6, [r3, #12]
 8011302:	f840 1025 	str.w	r1, [r0, r5, lsl #2]
 8011306:	b102      	cbz	r2, 801130a <rcl_wait_set_add_guard_condition+0x22>
 8011308:	6015      	str	r5, [r2, #0]
 801130a:	4608      	mov	r0, r1
 801130c:	f003 fb82 	bl	8014a14 <rcl_guard_condition_get_rmw_handle>
 8011310:	b150      	cbz	r0, 8011328 <rcl_wait_set_add_guard_condition+0x40>
 8011312:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8011314:	6842      	ldr	r2, [r0, #4]
 8011316:	695b      	ldr	r3, [r3, #20]
 8011318:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 801131c:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 801131e:	6913      	ldr	r3, [r2, #16]
 8011320:	3301      	adds	r3, #1
 8011322:	2000      	movs	r0, #0
 8011324:	6113      	str	r3, [r2, #16]
 8011326:	bd70      	pop	{r4, r5, r6, pc}
 8011328:	2001      	movs	r0, #1
 801132a:	bd70      	pop	{r4, r5, r6, pc}
 801132c:	f240 3086 	movw	r0, #902	@ 0x386
 8011330:	bd70      	pop	{r4, r5, r6, pc}
 8011332:	200b      	movs	r0, #11
 8011334:	4770      	bx	lr
 8011336:	f44f 7061 	mov.w	r0, #900	@ 0x384
 801133a:	bd70      	pop	{r4, r5, r6, pc}
 801133c:	200b      	movs	r0, #11
 801133e:	bd70      	pop	{r4, r5, r6, pc}

08011340 <rcl_wait_set_add_timer>:
 8011340:	b328      	cbz	r0, 801138e <rcl_wait_set_add_timer+0x4e>
 8011342:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 8011344:	b570      	push	{r4, r5, r6, lr}
 8011346:	4604      	mov	r4, r0
 8011348:	b31b      	cbz	r3, 8011392 <rcl_wait_set_add_timer+0x52>
 801134a:	b329      	cbz	r1, 8011398 <rcl_wait_set_add_timer+0x58>
 801134c:	6c18      	ldr	r0, [r3, #64]	@ 0x40
 801134e:	6965      	ldr	r5, [r4, #20]
 8011350:	42a8      	cmp	r0, r5
 8011352:	d219      	bcs.n	8011388 <rcl_wait_set_add_timer+0x48>
 8011354:	6925      	ldr	r5, [r4, #16]
 8011356:	1c46      	adds	r6, r0, #1
 8011358:	641e      	str	r6, [r3, #64]	@ 0x40
 801135a:	f845 1020 	str.w	r1, [r5, r0, lsl #2]
 801135e:	b102      	cbz	r2, 8011362 <rcl_wait_set_add_timer+0x22>
 8011360:	6010      	str	r0, [r2, #0]
 8011362:	4608      	mov	r0, r1
 8011364:	f7ff fba6 	bl	8010ab4 <rcl_timer_get_guard_condition>
 8011368:	b168      	cbz	r0, 8011386 <rcl_wait_set_add_timer+0x46>
 801136a:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 801136c:	68e3      	ldr	r3, [r4, #12]
 801136e:	6c15      	ldr	r5, [r2, #64]	@ 0x40
 8011370:	3b01      	subs	r3, #1
 8011372:	441d      	add	r5, r3
 8011374:	f003 fb4e 	bl	8014a14 <rcl_guard_condition_get_rmw_handle>
 8011378:	b180      	cbz	r0, 801139c <rcl_wait_set_add_timer+0x5c>
 801137a:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 801137c:	6842      	ldr	r2, [r0, #4]
 801137e:	695b      	ldr	r3, [r3, #20]
 8011380:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8011384:	2000      	movs	r0, #0
 8011386:	bd70      	pop	{r4, r5, r6, pc}
 8011388:	f240 3086 	movw	r0, #902	@ 0x386
 801138c:	bd70      	pop	{r4, r5, r6, pc}
 801138e:	200b      	movs	r0, #11
 8011390:	4770      	bx	lr
 8011392:	f44f 7061 	mov.w	r0, #900	@ 0x384
 8011396:	bd70      	pop	{r4, r5, r6, pc}
 8011398:	200b      	movs	r0, #11
 801139a:	bd70      	pop	{r4, r5, r6, pc}
 801139c:	2001      	movs	r0, #1
 801139e:	bd70      	pop	{r4, r5, r6, pc}

080113a0 <rcl_wait_set_add_client>:
 80113a0:	b318      	cbz	r0, 80113ea <rcl_wait_set_add_client+0x4a>
 80113a2:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 80113a4:	b570      	push	{r4, r5, r6, lr}
 80113a6:	4604      	mov	r4, r0
 80113a8:	b30b      	cbz	r3, 80113ee <rcl_wait_set_add_client+0x4e>
 80113aa:	b319      	cbz	r1, 80113f4 <rcl_wait_set_add_client+0x54>
 80113ac:	699d      	ldr	r5, [r3, #24]
 80113ae:	69c0      	ldr	r0, [r0, #28]
 80113b0:	4285      	cmp	r5, r0
 80113b2:	d217      	bcs.n	80113e4 <rcl_wait_set_add_client+0x44>
 80113b4:	69a0      	ldr	r0, [r4, #24]
 80113b6:	1c6e      	adds	r6, r5, #1
 80113b8:	619e      	str	r6, [r3, #24]
 80113ba:	f840 1025 	str.w	r1, [r0, r5, lsl #2]
 80113be:	b102      	cbz	r2, 80113c2 <rcl_wait_set_add_client+0x22>
 80113c0:	6015      	str	r5, [r2, #0]
 80113c2:	4608      	mov	r0, r1
 80113c4:	f7fe faae 	bl	800f924 <rcl_client_get_rmw_handle>
 80113c8:	b150      	cbz	r0, 80113e0 <rcl_wait_set_add_client+0x40>
 80113ca:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 80113cc:	6842      	ldr	r2, [r0, #4]
 80113ce:	6a1b      	ldr	r3, [r3, #32]
 80113d0:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80113d4:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 80113d6:	69d3      	ldr	r3, [r2, #28]
 80113d8:	3301      	adds	r3, #1
 80113da:	2000      	movs	r0, #0
 80113dc:	61d3      	str	r3, [r2, #28]
 80113de:	bd70      	pop	{r4, r5, r6, pc}
 80113e0:	2001      	movs	r0, #1
 80113e2:	bd70      	pop	{r4, r5, r6, pc}
 80113e4:	f240 3086 	movw	r0, #902	@ 0x386
 80113e8:	bd70      	pop	{r4, r5, r6, pc}
 80113ea:	200b      	movs	r0, #11
 80113ec:	4770      	bx	lr
 80113ee:	f44f 7061 	mov.w	r0, #900	@ 0x384
 80113f2:	bd70      	pop	{r4, r5, r6, pc}
 80113f4:	200b      	movs	r0, #11
 80113f6:	bd70      	pop	{r4, r5, r6, pc}

080113f8 <rcl_wait_set_add_service>:
 80113f8:	b318      	cbz	r0, 8011442 <rcl_wait_set_add_service+0x4a>
 80113fa:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 80113fc:	b570      	push	{r4, r5, r6, lr}
 80113fe:	4604      	mov	r4, r0
 8011400:	b30b      	cbz	r3, 8011446 <rcl_wait_set_add_service+0x4e>
 8011402:	b319      	cbz	r1, 801144c <rcl_wait_set_add_service+0x54>
 8011404:	6a5d      	ldr	r5, [r3, #36]	@ 0x24
 8011406:	6a40      	ldr	r0, [r0, #36]	@ 0x24
 8011408:	4285      	cmp	r5, r0
 801140a:	d217      	bcs.n	801143c <rcl_wait_set_add_service+0x44>
 801140c:	6a20      	ldr	r0, [r4, #32]
 801140e:	1c6e      	adds	r6, r5, #1
 8011410:	625e      	str	r6, [r3, #36]	@ 0x24
 8011412:	f840 1025 	str.w	r1, [r0, r5, lsl #2]
 8011416:	b102      	cbz	r2, 801141a <rcl_wait_set_add_service+0x22>
 8011418:	6015      	str	r5, [r2, #0]
 801141a:	4608      	mov	r0, r1
 801141c:	f7ff f804 	bl	8010428 <rcl_service_get_rmw_handle>
 8011420:	b150      	cbz	r0, 8011438 <rcl_wait_set_add_service+0x40>
 8011422:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8011424:	6842      	ldr	r2, [r0, #4]
 8011426:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8011428:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 801142c:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 801142e:	6a93      	ldr	r3, [r2, #40]	@ 0x28
 8011430:	3301      	adds	r3, #1
 8011432:	2000      	movs	r0, #0
 8011434:	6293      	str	r3, [r2, #40]	@ 0x28
 8011436:	bd70      	pop	{r4, r5, r6, pc}
 8011438:	2001      	movs	r0, #1
 801143a:	bd70      	pop	{r4, r5, r6, pc}
 801143c:	f240 3086 	movw	r0, #902	@ 0x386
 8011440:	bd70      	pop	{r4, r5, r6, pc}
 8011442:	200b      	movs	r0, #11
 8011444:	4770      	bx	lr
 8011446:	f44f 7061 	mov.w	r0, #900	@ 0x384
 801144a:	bd70      	pop	{r4, r5, r6, pc}
 801144c:	200b      	movs	r0, #11
 801144e:	bd70      	pop	{r4, r5, r6, pc}

08011450 <rcl_wait>:
 8011450:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011454:	ed2d 8b02 	vpush	{d8}
 8011458:	b08d      	sub	sp, #52	@ 0x34
 801145a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 801145e:	2800      	cmp	r0, #0
 8011460:	f000 8143 	beq.w	80116ea <rcl_wait+0x29a>
 8011464:	6b06      	ldr	r6, [r0, #48]	@ 0x30
 8011466:	4605      	mov	r5, r0
 8011468:	2e00      	cmp	r6, #0
 801146a:	f000 8112 	beq.w	8011692 <rcl_wait+0x242>
 801146e:	6843      	ldr	r3, [r0, #4]
 8011470:	b983      	cbnz	r3, 8011494 <rcl_wait+0x44>
 8011472:	68eb      	ldr	r3, [r5, #12]
 8011474:	b973      	cbnz	r3, 8011494 <rcl_wait+0x44>
 8011476:	696b      	ldr	r3, [r5, #20]
 8011478:	b963      	cbnz	r3, 8011494 <rcl_wait+0x44>
 801147a:	69eb      	ldr	r3, [r5, #28]
 801147c:	b953      	cbnz	r3, 8011494 <rcl_wait+0x44>
 801147e:	6a6b      	ldr	r3, [r5, #36]	@ 0x24
 8011480:	b943      	cbnz	r3, 8011494 <rcl_wait+0x44>
 8011482:	6aeb      	ldr	r3, [r5, #44]	@ 0x2c
 8011484:	b933      	cbnz	r3, 8011494 <rcl_wait+0x44>
 8011486:	f240 3085 	movw	r0, #901	@ 0x385
 801148a:	b00d      	add	sp, #52	@ 0x34
 801148c:	ecbd 8b02 	vpop	{d8}
 8011490:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011494:	9b04      	ldr	r3, [sp, #16]
 8011496:	6c32      	ldr	r2, [r6, #64]	@ 0x40
 8011498:	2b01      	cmp	r3, #1
 801149a:	9b05      	ldr	r3, [sp, #20]
 801149c:	f173 0300 	sbcs.w	r3, r3, #0
 80114a0:	f2c0 80f0 	blt.w	8011684 <rcl_wait+0x234>
 80114a4:	e9dd 8704 	ldrd	r8, r7, [sp, #16]
 80114a8:	4643      	mov	r3, r8
 80114aa:	2a00      	cmp	r2, #0
 80114ac:	f000 8133 	beq.w	8011716 <rcl_wait+0x2c6>
 80114b0:	2400      	movs	r4, #0
 80114b2:	4613      	mov	r3, r2
 80114b4:	ed9f 8b9c 	vldr	d8, [pc, #624]	@ 8011728 <rcl_wait+0x2d8>
 80114b8:	46a2      	mov	sl, r4
 80114ba:	46a3      	mov	fp, r4
 80114bc:	f240 3921 	movw	r9, #801	@ 0x321
 80114c0:	4632      	mov	r2, r6
 80114c2:	e014      	b.n	80114ee <rcl_wait+0x9e>
 80114c4:	2800      	cmp	r0, #0
 80114c6:	d1e0      	bne.n	801148a <rcl_wait+0x3a>
 80114c8:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80114cc:	4542      	cmp	r2, r8
 80114ce:	eb73 0107 	sbcs.w	r1, r3, r7
 80114d2:	da03      	bge.n	80114dc <rcl_wait+0x8c>
 80114d4:	4690      	mov	r8, r2
 80114d6:	461f      	mov	r7, r3
 80114d8:	f04f 0b01 	mov.w	fp, #1
 80114dc:	6b2a      	ldr	r2, [r5, #48]	@ 0x30
 80114de:	6c13      	ldr	r3, [r2, #64]	@ 0x40
 80114e0:	3401      	adds	r4, #1
 80114e2:	f14a 0a00 	adc.w	sl, sl, #0
 80114e6:	429c      	cmp	r4, r3
 80114e8:	f17a 0100 	sbcs.w	r1, sl, #0
 80114ec:	d228      	bcs.n	8011540 <rcl_wait+0xf0>
 80114ee:	6928      	ldr	r0, [r5, #16]
 80114f0:	f850 0024 	ldr.w	r0, [r0, r4, lsl #2]
 80114f4:	a908      	add	r1, sp, #32
 80114f6:	00a6      	lsls	r6, r4, #2
 80114f8:	2800      	cmp	r0, #0
 80114fa:	d0f1      	beq.n	80114e0 <rcl_wait+0x90>
 80114fc:	68eb      	ldr	r3, [r5, #12]
 80114fe:	f8d2 c014 	ldr.w	ip, [r2, #20]
 8011502:	4423      	add	r3, r4
 8011504:	f85c e023 	ldr.w	lr, [ip, r3, lsl #2]
 8011508:	f1be 0f00 	cmp.w	lr, #0
 801150c:	d006      	beq.n	801151c <rcl_wait+0xcc>
 801150e:	6913      	ldr	r3, [r2, #16]
 8011510:	f84c e023 	str.w	lr, [ip, r3, lsl #2]
 8011514:	3301      	adds	r3, #1
 8011516:	6113      	str	r3, [r2, #16]
 8011518:	692b      	ldr	r3, [r5, #16]
 801151a:	5998      	ldr	r0, [r3, r6]
 801151c:	ed8d 8b08 	vstr	d8, [sp, #32]
 8011520:	f7ff fa96 	bl	8010a50 <rcl_timer_get_time_until_next_call>
 8011524:	4548      	cmp	r0, r9
 8011526:	d1cd      	bne.n	80114c4 <rcl_wait+0x74>
 8011528:	692b      	ldr	r3, [r5, #16]
 801152a:	6b2a      	ldr	r2, [r5, #48]	@ 0x30
 801152c:	2100      	movs	r1, #0
 801152e:	5199      	str	r1, [r3, r6]
 8011530:	6c13      	ldr	r3, [r2, #64]	@ 0x40
 8011532:	3401      	adds	r4, #1
 8011534:	f14a 0a00 	adc.w	sl, sl, #0
 8011538:	429c      	cmp	r4, r3
 801153a:	f17a 0100 	sbcs.w	r1, sl, #0
 801153e:	d3d6      	bcc.n	80114ee <rcl_wait+0x9e>
 8011540:	4616      	mov	r6, r2
 8011542:	e9dd 3204 	ldrd	r3, r2, [sp, #16]
 8011546:	4313      	orrs	r3, r2
 8011548:	46d9      	mov	r9, fp
 801154a:	f040 80a9 	bne.w	80116a0 <rcl_wait+0x250>
 801154e:	2300      	movs	r3, #0
 8011550:	2200      	movs	r2, #0
 8011552:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8011556:	e9cd 230a 	strd	r2, r3, [sp, #40]	@ 0x28
 801155a:	ab08      	add	r3, sp, #32
 801155c:	9302      	str	r3, [sp, #8]
 801155e:	6bf2      	ldr	r2, [r6, #60]	@ 0x3c
 8011560:	f106 0334 	add.w	r3, r6, #52	@ 0x34
 8011564:	e9cd 3200 	strd	r3, r2, [sp]
 8011568:	f106 0110 	add.w	r1, r6, #16
 801156c:	f106 031c 	add.w	r3, r6, #28
 8011570:	f106 0228 	add.w	r2, r6, #40	@ 0x28
 8011574:	1d30      	adds	r0, r6, #4
 8011576:	f001 ff1d 	bl	80133b4 <rmw_wait>
 801157a:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 801157c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 801157e:	4680      	mov	r8, r0
 8011580:	b1ca      	cbz	r2, 80115b6 <rcl_wait+0x166>
 8011582:	2400      	movs	r4, #0
 8011584:	4627      	mov	r7, r4
 8011586:	692a      	ldr	r2, [r5, #16]
 8011588:	f852 0024 	ldr.w	r0, [r2, r4, lsl #2]
 801158c:	f10d 011f 	add.w	r1, sp, #31
 8011590:	00a6      	lsls	r6, r4, #2
 8011592:	b160      	cbz	r0, 80115ae <rcl_wait+0x15e>
 8011594:	f88d 701f 	strb.w	r7, [sp, #31]
 8011598:	f7ff fa20 	bl	80109dc <rcl_timer_is_ready>
 801159c:	2800      	cmp	r0, #0
 801159e:	f47f af74 	bne.w	801148a <rcl_wait+0x3a>
 80115a2:	f89d 301f 	ldrb.w	r3, [sp, #31]
 80115a6:	b90b      	cbnz	r3, 80115ac <rcl_wait+0x15c>
 80115a8:	692a      	ldr	r2, [r5, #16]
 80115aa:	5193      	str	r3, [r2, r6]
 80115ac:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 80115ae:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80115b0:	3401      	adds	r4, #1
 80115b2:	42a2      	cmp	r2, r4
 80115b4:	d8e7      	bhi.n	8011586 <rcl_wait+0x136>
 80115b6:	f038 0002 	bics.w	r0, r8, #2
 80115ba:	f040 8090 	bne.w	80116de <rcl_wait+0x28e>
 80115be:	686e      	ldr	r6, [r5, #4]
 80115c0:	4602      	mov	r2, r0
 80115c2:	b91e      	cbnz	r6, 80115cc <rcl_wait+0x17c>
 80115c4:	e00d      	b.n	80115e2 <rcl_wait+0x192>
 80115c6:	3201      	adds	r2, #1
 80115c8:	42b2      	cmp	r2, r6
 80115ca:	d00a      	beq.n	80115e2 <rcl_wait+0x192>
 80115cc:	6899      	ldr	r1, [r3, #8]
 80115ce:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 80115d2:	2900      	cmp	r1, #0
 80115d4:	d1f7      	bne.n	80115c6 <rcl_wait+0x176>
 80115d6:	682c      	ldr	r4, [r5, #0]
 80115d8:	f844 1022 	str.w	r1, [r4, r2, lsl #2]
 80115dc:	3201      	adds	r2, #1
 80115de:	42b2      	cmp	r2, r6
 80115e0:	d1f4      	bne.n	80115cc <rcl_wait+0x17c>
 80115e2:	68ee      	ldr	r6, [r5, #12]
 80115e4:	2200      	movs	r2, #0
 80115e6:	b91e      	cbnz	r6, 80115f0 <rcl_wait+0x1a0>
 80115e8:	e00d      	b.n	8011606 <rcl_wait+0x1b6>
 80115ea:	3201      	adds	r2, #1
 80115ec:	42b2      	cmp	r2, r6
 80115ee:	d00a      	beq.n	8011606 <rcl_wait+0x1b6>
 80115f0:	6959      	ldr	r1, [r3, #20]
 80115f2:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 80115f6:	2900      	cmp	r1, #0
 80115f8:	d1f7      	bne.n	80115ea <rcl_wait+0x19a>
 80115fa:	68ac      	ldr	r4, [r5, #8]
 80115fc:	f844 1022 	str.w	r1, [r4, r2, lsl #2]
 8011600:	3201      	adds	r2, #1
 8011602:	42b2      	cmp	r2, r6
 8011604:	d1f4      	bne.n	80115f0 <rcl_wait+0x1a0>
 8011606:	69ee      	ldr	r6, [r5, #28]
 8011608:	2200      	movs	r2, #0
 801160a:	b91e      	cbnz	r6, 8011614 <rcl_wait+0x1c4>
 801160c:	e00d      	b.n	801162a <rcl_wait+0x1da>
 801160e:	3201      	adds	r2, #1
 8011610:	42b2      	cmp	r2, r6
 8011612:	d00a      	beq.n	801162a <rcl_wait+0x1da>
 8011614:	6a19      	ldr	r1, [r3, #32]
 8011616:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 801161a:	2900      	cmp	r1, #0
 801161c:	d1f7      	bne.n	801160e <rcl_wait+0x1be>
 801161e:	69ac      	ldr	r4, [r5, #24]
 8011620:	f844 1022 	str.w	r1, [r4, r2, lsl #2]
 8011624:	3201      	adds	r2, #1
 8011626:	42b2      	cmp	r2, r6
 8011628:	d1f4      	bne.n	8011614 <rcl_wait+0x1c4>
 801162a:	6a6e      	ldr	r6, [r5, #36]	@ 0x24
 801162c:	2200      	movs	r2, #0
 801162e:	b91e      	cbnz	r6, 8011638 <rcl_wait+0x1e8>
 8011630:	e00d      	b.n	801164e <rcl_wait+0x1fe>
 8011632:	3201      	adds	r2, #1
 8011634:	4296      	cmp	r6, r2
 8011636:	d00a      	beq.n	801164e <rcl_wait+0x1fe>
 8011638:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 801163a:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 801163e:	2900      	cmp	r1, #0
 8011640:	d1f7      	bne.n	8011632 <rcl_wait+0x1e2>
 8011642:	6a2c      	ldr	r4, [r5, #32]
 8011644:	f844 1022 	str.w	r1, [r4, r2, lsl #2]
 8011648:	3201      	adds	r2, #1
 801164a:	4296      	cmp	r6, r2
 801164c:	d1f4      	bne.n	8011638 <rcl_wait+0x1e8>
 801164e:	6aee      	ldr	r6, [r5, #44]	@ 0x2c
 8011650:	2200      	movs	r2, #0
 8011652:	b91e      	cbnz	r6, 801165c <rcl_wait+0x20c>
 8011654:	e00d      	b.n	8011672 <rcl_wait+0x222>
 8011656:	3201      	adds	r2, #1
 8011658:	42b2      	cmp	r2, r6
 801165a:	d00a      	beq.n	8011672 <rcl_wait+0x222>
 801165c:	6b99      	ldr	r1, [r3, #56]	@ 0x38
 801165e:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 8011662:	2900      	cmp	r1, #0
 8011664:	d1f7      	bne.n	8011656 <rcl_wait+0x206>
 8011666:	6aac      	ldr	r4, [r5, #40]	@ 0x28
 8011668:	f844 1022 	str.w	r1, [r4, r2, lsl #2]
 801166c:	3201      	adds	r2, #1
 801166e:	42b2      	cmp	r2, r6
 8011670:	d1f4      	bne.n	801165c <rcl_wait+0x20c>
 8011672:	f1b8 0f02 	cmp.w	r8, #2
 8011676:	f47f af08 	bne.w	801148a <rcl_wait+0x3a>
 801167a:	464b      	mov	r3, r9
 801167c:	2b00      	cmp	r3, #0
 801167e:	bf08      	it	eq
 8011680:	2002      	moveq	r0, #2
 8011682:	e702      	b.n	801148a <rcl_wait+0x3a>
 8011684:	2a00      	cmp	r2, #0
 8011686:	d03a      	beq.n	80116fe <rcl_wait+0x2ae>
 8011688:	f04f 38ff 	mov.w	r8, #4294967295	@ 0xffffffff
 801168c:	f06f 4700 	mvn.w	r7, #2147483648	@ 0x80000000
 8011690:	e70e      	b.n	80114b0 <rcl_wait+0x60>
 8011692:	f44f 7061 	mov.w	r0, #900	@ 0x384
 8011696:	b00d      	add	sp, #52	@ 0x34
 8011698:	ecbd 8b02 	vpop	{d8}
 801169c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80116a0:	9b04      	ldr	r3, [sp, #16]
 80116a2:	2b01      	cmp	r3, #1
 80116a4:	9b05      	ldr	r3, [sp, #20]
 80116a6:	f173 0300 	sbcs.w	r3, r3, #0
 80116aa:	db24      	blt.n	80116f6 <rcl_wait+0x2a6>
 80116ac:	2f00      	cmp	r7, #0
 80116ae:	bfbc      	itt	lt
 80116b0:	f04f 0800 	movlt.w	r8, #0
 80116b4:	4647      	movlt	r7, r8
 80116b6:	a31e      	add	r3, pc, #120	@ (adr r3, 8011730 <rcl_wait+0x2e0>)
 80116b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80116bc:	4640      	mov	r0, r8
 80116be:	4639      	mov	r1, r7
 80116c0:	f7ef fa34 	bl	8000b2c <__aeabi_ldivmod>
 80116c4:	a31a      	add	r3, pc, #104	@ (adr r3, 8011730 <rcl_wait+0x2e0>)
 80116c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80116ca:	e9cd 0108 	strd	r0, r1, [sp, #32]
 80116ce:	4640      	mov	r0, r8
 80116d0:	4639      	mov	r1, r7
 80116d2:	f7ef fa2b 	bl	8000b2c <__aeabi_ldivmod>
 80116d6:	e9cd 230a 	strd	r2, r3, [sp, #40]	@ 0x28
 80116da:	ab08      	add	r3, sp, #32
 80116dc:	e73e      	b.n	801155c <rcl_wait+0x10c>
 80116de:	2001      	movs	r0, #1
 80116e0:	b00d      	add	sp, #52	@ 0x34
 80116e2:	ecbd 8b02 	vpop	{d8}
 80116e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80116ea:	200b      	movs	r0, #11
 80116ec:	b00d      	add	sp, #52	@ 0x34
 80116ee:	ecbd 8b02 	vpop	{d8}
 80116f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80116f6:	465b      	mov	r3, fp
 80116f8:	2b00      	cmp	r3, #0
 80116fa:	d1d7      	bne.n	80116ac <rcl_wait+0x25c>
 80116fc:	e72e      	b.n	801155c <rcl_wait+0x10c>
 80116fe:	e9dd 3104 	ldrd	r3, r1, [sp, #16]
 8011702:	430b      	orrs	r3, r1
 8011704:	bf08      	it	eq
 8011706:	4691      	moveq	r9, r2
 8011708:	f43f af21 	beq.w	801154e <rcl_wait+0xfe>
 801170c:	9b04      	ldr	r3, [sp, #16]
 801170e:	f04f 38ff 	mov.w	r8, #4294967295	@ 0xffffffff
 8011712:	f06f 4700 	mvn.w	r7, #2147483648	@ 0x80000000
 8011716:	2b01      	cmp	r3, #1
 8011718:	9b05      	ldr	r3, [sp, #20]
 801171a:	f173 0300 	sbcs.w	r3, r3, #0
 801171e:	f04f 0300 	mov.w	r3, #0
 8011722:	4699      	mov	r9, r3
 8011724:	dac2      	bge.n	80116ac <rcl_wait+0x25c>
 8011726:	e719      	b.n	801155c <rcl_wait+0x10c>
 8011728:	ffffffff 	.word	0xffffffff
 801172c:	7fffffff 	.word	0x7fffffff
 8011730:	3b9aca00 	.word	0x3b9aca00
 8011734:	00000000 	.word	0x00000000

08011738 <rcl_action_take_goal_response>:
 8011738:	2800      	cmp	r0, #0
 801173a:	d039      	beq.n	80117b0 <rcl_action_take_goal_response+0x78>
 801173c:	b570      	push	{r4, r5, r6, lr}
 801173e:	4604      	mov	r4, r0
 8011740:	6800      	ldr	r0, [r0, #0]
 8011742:	b380      	cbz	r0, 80117a6 <rcl_action_take_goal_response+0x6e>
 8011744:	460d      	mov	r5, r1
 8011746:	4616      	mov	r6, r2
 8011748:	f7fe f972 	bl	800fa30 <rcl_client_is_valid>
 801174c:	b330      	cbz	r0, 801179c <rcl_action_take_goal_response+0x64>
 801174e:	6820      	ldr	r0, [r4, #0]
 8011750:	3004      	adds	r0, #4
 8011752:	f7fe f96d 	bl	800fa30 <rcl_client_is_valid>
 8011756:	b308      	cbz	r0, 801179c <rcl_action_take_goal_response+0x64>
 8011758:	6820      	ldr	r0, [r4, #0]
 801175a:	3008      	adds	r0, #8
 801175c:	f7fe f968 	bl	800fa30 <rcl_client_is_valid>
 8011760:	b1e0      	cbz	r0, 801179c <rcl_action_take_goal_response+0x64>
 8011762:	6820      	ldr	r0, [r4, #0]
 8011764:	300c      	adds	r0, #12
 8011766:	f7ff f801 	bl	801076c <rcl_subscription_is_valid>
 801176a:	b1b8      	cbz	r0, 801179c <rcl_action_take_goal_response+0x64>
 801176c:	6820      	ldr	r0, [r4, #0]
 801176e:	3010      	adds	r0, #16
 8011770:	f7fe fffc 	bl	801076c <rcl_subscription_is_valid>
 8011774:	b190      	cbz	r0, 801179c <rcl_action_take_goal_response+0x64>
 8011776:	b1cd      	cbz	r5, 80117ac <rcl_action_take_goal_response+0x74>
 8011778:	b1c6      	cbz	r6, 80117ac <rcl_action_take_goal_response+0x74>
 801177a:	6820      	ldr	r0, [r4, #0]
 801177c:	4632      	mov	r2, r6
 801177e:	4629      	mov	r1, r5
 8011780:	f7fe f90e 	bl	800f9a0 <rcl_take_response>
 8011784:	b148      	cbz	r0, 801179a <rcl_action_take_goal_response+0x62>
 8011786:	280a      	cmp	r0, #10
 8011788:	d007      	beq.n	801179a <rcl_action_take_goal_response+0x62>
 801178a:	f240 12f5 	movw	r2, #501	@ 0x1f5
 801178e:	f640 0337 	movw	r3, #2103	@ 0x837
 8011792:	4290      	cmp	r0, r2
 8011794:	bf0c      	ite	eq
 8011796:	4618      	moveq	r0, r3
 8011798:	2001      	movne	r0, #1
 801179a:	bd70      	pop	{r4, r5, r6, pc}
 801179c:	f7f8 fca0 	bl	800a0e0 <rcutils_reset_error>
 80117a0:	f640 0036 	movw	r0, #2102	@ 0x836
 80117a4:	bd70      	pop	{r4, r5, r6, pc}
 80117a6:	f640 0036 	movw	r0, #2102	@ 0x836
 80117aa:	bd70      	pop	{r4, r5, r6, pc}
 80117ac:	200b      	movs	r0, #11
 80117ae:	bd70      	pop	{r4, r5, r6, pc}
 80117b0:	f640 0036 	movw	r0, #2102	@ 0x836
 80117b4:	4770      	bx	lr
 80117b6:	bf00      	nop

080117b8 <rcl_action_send_result_request>:
 80117b8:	b390      	cbz	r0, 8011820 <rcl_action_send_result_request+0x68>
 80117ba:	b570      	push	{r4, r5, r6, lr}
 80117bc:	4604      	mov	r4, r0
 80117be:	6800      	ldr	r0, [r0, #0]
 80117c0:	b348      	cbz	r0, 8011816 <rcl_action_send_result_request+0x5e>
 80117c2:	460d      	mov	r5, r1
 80117c4:	4616      	mov	r6, r2
 80117c6:	f7fe f933 	bl	800fa30 <rcl_client_is_valid>
 80117ca:	b1f8      	cbz	r0, 801180c <rcl_action_send_result_request+0x54>
 80117cc:	6820      	ldr	r0, [r4, #0]
 80117ce:	3004      	adds	r0, #4
 80117d0:	f7fe f92e 	bl	800fa30 <rcl_client_is_valid>
 80117d4:	b1d0      	cbz	r0, 801180c <rcl_action_send_result_request+0x54>
 80117d6:	6820      	ldr	r0, [r4, #0]
 80117d8:	3008      	adds	r0, #8
 80117da:	f7fe f929 	bl	800fa30 <rcl_client_is_valid>
 80117de:	b1a8      	cbz	r0, 801180c <rcl_action_send_result_request+0x54>
 80117e0:	6820      	ldr	r0, [r4, #0]
 80117e2:	300c      	adds	r0, #12
 80117e4:	f7fe ffc2 	bl	801076c <rcl_subscription_is_valid>
 80117e8:	b180      	cbz	r0, 801180c <rcl_action_send_result_request+0x54>
 80117ea:	6820      	ldr	r0, [r4, #0]
 80117ec:	3010      	adds	r0, #16
 80117ee:	f7fe ffbd 	bl	801076c <rcl_subscription_is_valid>
 80117f2:	b158      	cbz	r0, 801180c <rcl_action_send_result_request+0x54>
 80117f4:	b195      	cbz	r5, 801181c <rcl_action_send_result_request+0x64>
 80117f6:	b18e      	cbz	r6, 801181c <rcl_action_send_result_request+0x64>
 80117f8:	6820      	ldr	r0, [r4, #0]
 80117fa:	4632      	mov	r2, r6
 80117fc:	4629      	mov	r1, r5
 80117fe:	3008      	adds	r0, #8
 8011800:	f7fe f896 	bl	800f930 <rcl_send_request>
 8011804:	3800      	subs	r0, #0
 8011806:	bf18      	it	ne
 8011808:	2001      	movne	r0, #1
 801180a:	bd70      	pop	{r4, r5, r6, pc}
 801180c:	f7f8 fc68 	bl	800a0e0 <rcutils_reset_error>
 8011810:	f640 0036 	movw	r0, #2102	@ 0x836
 8011814:	bd70      	pop	{r4, r5, r6, pc}
 8011816:	f640 0036 	movw	r0, #2102	@ 0x836
 801181a:	bd70      	pop	{r4, r5, r6, pc}
 801181c:	200b      	movs	r0, #11
 801181e:	bd70      	pop	{r4, r5, r6, pc}
 8011820:	f640 0036 	movw	r0, #2102	@ 0x836
 8011824:	4770      	bx	lr
 8011826:	bf00      	nop

08011828 <rcl_action_take_result_response>:
 8011828:	2800      	cmp	r0, #0
 801182a:	d03a      	beq.n	80118a2 <rcl_action_take_result_response+0x7a>
 801182c:	b570      	push	{r4, r5, r6, lr}
 801182e:	4604      	mov	r4, r0
 8011830:	6800      	ldr	r0, [r0, #0]
 8011832:	b388      	cbz	r0, 8011898 <rcl_action_take_result_response+0x70>
 8011834:	460d      	mov	r5, r1
 8011836:	4616      	mov	r6, r2
 8011838:	f7fe f8fa 	bl	800fa30 <rcl_client_is_valid>
 801183c:	b338      	cbz	r0, 801188e <rcl_action_take_result_response+0x66>
 801183e:	6820      	ldr	r0, [r4, #0]
 8011840:	3004      	adds	r0, #4
 8011842:	f7fe f8f5 	bl	800fa30 <rcl_client_is_valid>
 8011846:	b310      	cbz	r0, 801188e <rcl_action_take_result_response+0x66>
 8011848:	6820      	ldr	r0, [r4, #0]
 801184a:	3008      	adds	r0, #8
 801184c:	f7fe f8f0 	bl	800fa30 <rcl_client_is_valid>
 8011850:	b1e8      	cbz	r0, 801188e <rcl_action_take_result_response+0x66>
 8011852:	6820      	ldr	r0, [r4, #0]
 8011854:	300c      	adds	r0, #12
 8011856:	f7fe ff89 	bl	801076c <rcl_subscription_is_valid>
 801185a:	b1c0      	cbz	r0, 801188e <rcl_action_take_result_response+0x66>
 801185c:	6820      	ldr	r0, [r4, #0]
 801185e:	3010      	adds	r0, #16
 8011860:	f7fe ff84 	bl	801076c <rcl_subscription_is_valid>
 8011864:	b198      	cbz	r0, 801188e <rcl_action_take_result_response+0x66>
 8011866:	b1d5      	cbz	r5, 801189e <rcl_action_take_result_response+0x76>
 8011868:	b1ce      	cbz	r6, 801189e <rcl_action_take_result_response+0x76>
 801186a:	6820      	ldr	r0, [r4, #0]
 801186c:	4632      	mov	r2, r6
 801186e:	4629      	mov	r1, r5
 8011870:	3008      	adds	r0, #8
 8011872:	f7fe f895 	bl	800f9a0 <rcl_take_response>
 8011876:	b148      	cbz	r0, 801188c <rcl_action_take_result_response+0x64>
 8011878:	280a      	cmp	r0, #10
 801187a:	d007      	beq.n	801188c <rcl_action_take_result_response+0x64>
 801187c:	f240 12f5 	movw	r2, #501	@ 0x1f5
 8011880:	f640 0337 	movw	r3, #2103	@ 0x837
 8011884:	4290      	cmp	r0, r2
 8011886:	bf0c      	ite	eq
 8011888:	4618      	moveq	r0, r3
 801188a:	2001      	movne	r0, #1
 801188c:	bd70      	pop	{r4, r5, r6, pc}
 801188e:	f7f8 fc27 	bl	800a0e0 <rcutils_reset_error>
 8011892:	f640 0036 	movw	r0, #2102	@ 0x836
 8011896:	bd70      	pop	{r4, r5, r6, pc}
 8011898:	f640 0036 	movw	r0, #2102	@ 0x836
 801189c:	bd70      	pop	{r4, r5, r6, pc}
 801189e:	200b      	movs	r0, #11
 80118a0:	bd70      	pop	{r4, r5, r6, pc}
 80118a2:	f640 0036 	movw	r0, #2102	@ 0x836
 80118a6:	4770      	bx	lr

080118a8 <rcl_action_take_cancel_response>:
 80118a8:	2800      	cmp	r0, #0
 80118aa:	d03a      	beq.n	8011922 <rcl_action_take_cancel_response+0x7a>
 80118ac:	b570      	push	{r4, r5, r6, lr}
 80118ae:	4604      	mov	r4, r0
 80118b0:	6800      	ldr	r0, [r0, #0]
 80118b2:	b388      	cbz	r0, 8011918 <rcl_action_take_cancel_response+0x70>
 80118b4:	460d      	mov	r5, r1
 80118b6:	4616      	mov	r6, r2
 80118b8:	f7fe f8ba 	bl	800fa30 <rcl_client_is_valid>
 80118bc:	b338      	cbz	r0, 801190e <rcl_action_take_cancel_response+0x66>
 80118be:	6820      	ldr	r0, [r4, #0]
 80118c0:	3004      	adds	r0, #4
 80118c2:	f7fe f8b5 	bl	800fa30 <rcl_client_is_valid>
 80118c6:	b310      	cbz	r0, 801190e <rcl_action_take_cancel_response+0x66>
 80118c8:	6820      	ldr	r0, [r4, #0]
 80118ca:	3008      	adds	r0, #8
 80118cc:	f7fe f8b0 	bl	800fa30 <rcl_client_is_valid>
 80118d0:	b1e8      	cbz	r0, 801190e <rcl_action_take_cancel_response+0x66>
 80118d2:	6820      	ldr	r0, [r4, #0]
 80118d4:	300c      	adds	r0, #12
 80118d6:	f7fe ff49 	bl	801076c <rcl_subscription_is_valid>
 80118da:	b1c0      	cbz	r0, 801190e <rcl_action_take_cancel_response+0x66>
 80118dc:	6820      	ldr	r0, [r4, #0]
 80118de:	3010      	adds	r0, #16
 80118e0:	f7fe ff44 	bl	801076c <rcl_subscription_is_valid>
 80118e4:	b198      	cbz	r0, 801190e <rcl_action_take_cancel_response+0x66>
 80118e6:	b1d5      	cbz	r5, 801191e <rcl_action_take_cancel_response+0x76>
 80118e8:	b1ce      	cbz	r6, 801191e <rcl_action_take_cancel_response+0x76>
 80118ea:	6820      	ldr	r0, [r4, #0]
 80118ec:	4632      	mov	r2, r6
 80118ee:	4629      	mov	r1, r5
 80118f0:	3004      	adds	r0, #4
 80118f2:	f7fe f855 	bl	800f9a0 <rcl_take_response>
 80118f6:	b148      	cbz	r0, 801190c <rcl_action_take_cancel_response+0x64>
 80118f8:	280a      	cmp	r0, #10
 80118fa:	d007      	beq.n	801190c <rcl_action_take_cancel_response+0x64>
 80118fc:	f240 12f5 	movw	r2, #501	@ 0x1f5
 8011900:	f640 0337 	movw	r3, #2103	@ 0x837
 8011904:	4290      	cmp	r0, r2
 8011906:	bf0c      	ite	eq
 8011908:	4618      	moveq	r0, r3
 801190a:	2001      	movne	r0, #1
 801190c:	bd70      	pop	{r4, r5, r6, pc}
 801190e:	f7f8 fbe7 	bl	800a0e0 <rcutils_reset_error>
 8011912:	f640 0036 	movw	r0, #2102	@ 0x836
 8011916:	bd70      	pop	{r4, r5, r6, pc}
 8011918:	f640 0036 	movw	r0, #2102	@ 0x836
 801191c:	bd70      	pop	{r4, r5, r6, pc}
 801191e:	200b      	movs	r0, #11
 8011920:	bd70      	pop	{r4, r5, r6, pc}
 8011922:	f640 0036 	movw	r0, #2102	@ 0x836
 8011926:	4770      	bx	lr

08011928 <rcl_action_take_feedback>:
 8011928:	2800      	cmp	r0, #0
 801192a:	d038      	beq.n	801199e <rcl_action_take_feedback+0x76>
 801192c:	b530      	push	{r4, r5, lr}
 801192e:	4604      	mov	r4, r0
 8011930:	6800      	ldr	r0, [r0, #0]
 8011932:	b091      	sub	sp, #68	@ 0x44
 8011934:	b378      	cbz	r0, 8011996 <rcl_action_take_feedback+0x6e>
 8011936:	460d      	mov	r5, r1
 8011938:	f7fe f87a 	bl	800fa30 <rcl_client_is_valid>
 801193c:	b328      	cbz	r0, 801198a <rcl_action_take_feedback+0x62>
 801193e:	6820      	ldr	r0, [r4, #0]
 8011940:	3004      	adds	r0, #4
 8011942:	f7fe f875 	bl	800fa30 <rcl_client_is_valid>
 8011946:	b300      	cbz	r0, 801198a <rcl_action_take_feedback+0x62>
 8011948:	6820      	ldr	r0, [r4, #0]
 801194a:	3008      	adds	r0, #8
 801194c:	f7fe f870 	bl	800fa30 <rcl_client_is_valid>
 8011950:	b1d8      	cbz	r0, 801198a <rcl_action_take_feedback+0x62>
 8011952:	6820      	ldr	r0, [r4, #0]
 8011954:	300c      	adds	r0, #12
 8011956:	f7fe ff09 	bl	801076c <rcl_subscription_is_valid>
 801195a:	b1b0      	cbz	r0, 801198a <rcl_action_take_feedback+0x62>
 801195c:	6820      	ldr	r0, [r4, #0]
 801195e:	3010      	adds	r0, #16
 8011960:	f7fe ff04 	bl	801076c <rcl_subscription_is_valid>
 8011964:	b188      	cbz	r0, 801198a <rcl_action_take_feedback+0x62>
 8011966:	b1ed      	cbz	r5, 80119a4 <rcl_action_take_feedback+0x7c>
 8011968:	6820      	ldr	r0, [r4, #0]
 801196a:	2300      	movs	r3, #0
 801196c:	466a      	mov	r2, sp
 801196e:	4629      	mov	r1, r5
 8011970:	300c      	adds	r0, #12
 8011972:	f7fe fe9d 	bl	80106b0 <rcl_take>
 8011976:	b160      	cbz	r0, 8011992 <rcl_action_take_feedback+0x6a>
 8011978:	f240 1391 	movw	r3, #401	@ 0x191
 801197c:	4298      	cmp	r0, r3
 801197e:	d014      	beq.n	80119aa <rcl_action_take_feedback+0x82>
 8011980:	280a      	cmp	r0, #10
 8011982:	bf18      	it	ne
 8011984:	2001      	movne	r0, #1
 8011986:	b011      	add	sp, #68	@ 0x44
 8011988:	bd30      	pop	{r4, r5, pc}
 801198a:	f7f8 fba9 	bl	800a0e0 <rcutils_reset_error>
 801198e:	f640 0036 	movw	r0, #2102	@ 0x836
 8011992:	b011      	add	sp, #68	@ 0x44
 8011994:	bd30      	pop	{r4, r5, pc}
 8011996:	f640 0036 	movw	r0, #2102	@ 0x836
 801199a:	b011      	add	sp, #68	@ 0x44
 801199c:	bd30      	pop	{r4, r5, pc}
 801199e:	f640 0036 	movw	r0, #2102	@ 0x836
 80119a2:	4770      	bx	lr
 80119a4:	200b      	movs	r0, #11
 80119a6:	b011      	add	sp, #68	@ 0x44
 80119a8:	bd30      	pop	{r4, r5, pc}
 80119aa:	f640 0037 	movw	r0, #2103	@ 0x837
 80119ae:	e7f0      	b.n	8011992 <rcl_action_take_feedback+0x6a>

080119b0 <rcl_action_wait_set_add_action_client>:
 80119b0:	2800      	cmp	r0, #0
 80119b2:	d048      	beq.n	8011a46 <rcl_action_wait_set_add_action_client+0x96>
 80119b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80119b6:	460c      	mov	r4, r1
 80119b8:	2900      	cmp	r1, #0
 80119ba:	d03c      	beq.n	8011a36 <rcl_action_wait_set_add_action_client+0x86>
 80119bc:	4605      	mov	r5, r0
 80119be:	6808      	ldr	r0, [r1, #0]
 80119c0:	2800      	cmp	r0, #0
 80119c2:	d038      	beq.n	8011a36 <rcl_action_wait_set_add_action_client+0x86>
 80119c4:	4617      	mov	r7, r2
 80119c6:	461e      	mov	r6, r3
 80119c8:	f7fe f832 	bl	800fa30 <rcl_client_is_valid>
 80119cc:	b3b0      	cbz	r0, 8011a3c <rcl_action_wait_set_add_action_client+0x8c>
 80119ce:	6820      	ldr	r0, [r4, #0]
 80119d0:	3004      	adds	r0, #4
 80119d2:	f7fe f82d 	bl	800fa30 <rcl_client_is_valid>
 80119d6:	b388      	cbz	r0, 8011a3c <rcl_action_wait_set_add_action_client+0x8c>
 80119d8:	6820      	ldr	r0, [r4, #0]
 80119da:	3008      	adds	r0, #8
 80119dc:	f7fe f828 	bl	800fa30 <rcl_client_is_valid>
 80119e0:	b360      	cbz	r0, 8011a3c <rcl_action_wait_set_add_action_client+0x8c>
 80119e2:	6820      	ldr	r0, [r4, #0]
 80119e4:	300c      	adds	r0, #12
 80119e6:	f7fe fec1 	bl	801076c <rcl_subscription_is_valid>
 80119ea:	b338      	cbz	r0, 8011a3c <rcl_action_wait_set_add_action_client+0x8c>
 80119ec:	6820      	ldr	r0, [r4, #0]
 80119ee:	3010      	adds	r0, #16
 80119f0:	f7fe febc 	bl	801076c <rcl_subscription_is_valid>
 80119f4:	b310      	cbz	r0, 8011a3c <rcl_action_wait_set_add_action_client+0x8c>
 80119f6:	6821      	ldr	r1, [r4, #0]
 80119f8:	4628      	mov	r0, r5
 80119fa:	f501 72e2 	add.w	r2, r1, #452	@ 0x1c4
 80119fe:	f7ff fccf 	bl	80113a0 <rcl_wait_set_add_client>
 8011a02:	b9b8      	cbnz	r0, 8011a34 <rcl_action_wait_set_add_action_client+0x84>
 8011a04:	6821      	ldr	r1, [r4, #0]
 8011a06:	4628      	mov	r0, r5
 8011a08:	f501 72e4 	add.w	r2, r1, #456	@ 0x1c8
 8011a0c:	3104      	adds	r1, #4
 8011a0e:	f7ff fcc7 	bl	80113a0 <rcl_wait_set_add_client>
 8011a12:	b978      	cbnz	r0, 8011a34 <rcl_action_wait_set_add_action_client+0x84>
 8011a14:	6821      	ldr	r1, [r4, #0]
 8011a16:	4628      	mov	r0, r5
 8011a18:	f501 72e6 	add.w	r2, r1, #460	@ 0x1cc
 8011a1c:	3108      	adds	r1, #8
 8011a1e:	f7ff fcbf 	bl	80113a0 <rcl_wait_set_add_client>
 8011a22:	b938      	cbnz	r0, 8011a34 <rcl_action_wait_set_add_action_client+0x84>
 8011a24:	6821      	ldr	r1, [r4, #0]
 8011a26:	4628      	mov	r0, r5
 8011a28:	f501 72e8 	add.w	r2, r1, #464	@ 0x1d0
 8011a2c:	310c      	adds	r1, #12
 8011a2e:	f7ff f96f 	bl	8010d10 <rcl_wait_set_add_subscription>
 8011a32:	b158      	cbz	r0, 8011a4c <rcl_action_wait_set_add_action_client+0x9c>
 8011a34:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8011a36:	f640 0036 	movw	r0, #2102	@ 0x836
 8011a3a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8011a3c:	f7f8 fb50 	bl	800a0e0 <rcutils_reset_error>
 8011a40:	f640 0036 	movw	r0, #2102	@ 0x836
 8011a44:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8011a46:	f44f 7061 	mov.w	r0, #900	@ 0x384
 8011a4a:	4770      	bx	lr
 8011a4c:	6821      	ldr	r1, [r4, #0]
 8011a4e:	4628      	mov	r0, r5
 8011a50:	f501 72ea 	add.w	r2, r1, #468	@ 0x1d4
 8011a54:	3110      	adds	r1, #16
 8011a56:	f7ff f95b 	bl	8010d10 <rcl_wait_set_add_subscription>
 8011a5a:	2800      	cmp	r0, #0
 8011a5c:	d1ea      	bne.n	8011a34 <rcl_action_wait_set_add_action_client+0x84>
 8011a5e:	b11f      	cbz	r7, 8011a68 <rcl_action_wait_set_add_action_client+0xb8>
 8011a60:	6823      	ldr	r3, [r4, #0]
 8011a62:	f8d3 31c4 	ldr.w	r3, [r3, #452]	@ 0x1c4
 8011a66:	603b      	str	r3, [r7, #0]
 8011a68:	2e00      	cmp	r6, #0
 8011a6a:	d0e3      	beq.n	8011a34 <rcl_action_wait_set_add_action_client+0x84>
 8011a6c:	6823      	ldr	r3, [r4, #0]
 8011a6e:	f8d3 31d0 	ldr.w	r3, [r3, #464]	@ 0x1d0
 8011a72:	6033      	str	r3, [r6, #0]
 8011a74:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8011a76:	bf00      	nop

08011a78 <rcl_action_client_wait_set_get_entities_ready>:
 8011a78:	2800      	cmp	r0, #0
 8011a7a:	f000 808d 	beq.w	8011b98 <rcl_action_client_wait_set_get_entities_ready+0x120>
 8011a7e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011a82:	460c      	mov	r4, r1
 8011a84:	2900      	cmp	r1, #0
 8011a86:	d077      	beq.n	8011b78 <rcl_action_client_wait_set_get_entities_ready+0x100>
 8011a88:	4605      	mov	r5, r0
 8011a8a:	6808      	ldr	r0, [r1, #0]
 8011a8c:	2800      	cmp	r0, #0
 8011a8e:	d073      	beq.n	8011b78 <rcl_action_client_wait_set_get_entities_ready+0x100>
 8011a90:	4616      	mov	r6, r2
 8011a92:	461f      	mov	r7, r3
 8011a94:	f7fd ffcc 	bl	800fa30 <rcl_client_is_valid>
 8011a98:	2800      	cmp	r0, #0
 8011a9a:	d071      	beq.n	8011b80 <rcl_action_client_wait_set_get_entities_ready+0x108>
 8011a9c:	6820      	ldr	r0, [r4, #0]
 8011a9e:	3004      	adds	r0, #4
 8011aa0:	f7fd ffc6 	bl	800fa30 <rcl_client_is_valid>
 8011aa4:	2800      	cmp	r0, #0
 8011aa6:	d06b      	beq.n	8011b80 <rcl_action_client_wait_set_get_entities_ready+0x108>
 8011aa8:	6820      	ldr	r0, [r4, #0]
 8011aaa:	3008      	adds	r0, #8
 8011aac:	f7fd ffc0 	bl	800fa30 <rcl_client_is_valid>
 8011ab0:	2800      	cmp	r0, #0
 8011ab2:	d065      	beq.n	8011b80 <rcl_action_client_wait_set_get_entities_ready+0x108>
 8011ab4:	6820      	ldr	r0, [r4, #0]
 8011ab6:	300c      	adds	r0, #12
 8011ab8:	f7fe fe58 	bl	801076c <rcl_subscription_is_valid>
 8011abc:	2800      	cmp	r0, #0
 8011abe:	d05f      	beq.n	8011b80 <rcl_action_client_wait_set_get_entities_ready+0x108>
 8011ac0:	6820      	ldr	r0, [r4, #0]
 8011ac2:	3010      	adds	r0, #16
 8011ac4:	f7fe fe52 	bl	801076c <rcl_subscription_is_valid>
 8011ac8:	2800      	cmp	r0, #0
 8011aca:	d059      	beq.n	8011b80 <rcl_action_client_wait_set_get_entities_ready+0x108>
 8011acc:	2e00      	cmp	r6, #0
 8011ace:	d060      	beq.n	8011b92 <rcl_action_client_wait_set_get_entities_ready+0x11a>
 8011ad0:	2f00      	cmp	r7, #0
 8011ad2:	d05e      	beq.n	8011b92 <rcl_action_client_wait_set_get_entities_ready+0x11a>
 8011ad4:	9b06      	ldr	r3, [sp, #24]
 8011ad6:	2b00      	cmp	r3, #0
 8011ad8:	d05b      	beq.n	8011b92 <rcl_action_client_wait_set_get_entities_ready+0x11a>
 8011ada:	9b07      	ldr	r3, [sp, #28]
 8011adc:	2b00      	cmp	r3, #0
 8011ade:	d058      	beq.n	8011b92 <rcl_action_client_wait_set_get_entities_ready+0x11a>
 8011ae0:	9b08      	ldr	r3, [sp, #32]
 8011ae2:	2b00      	cmp	r3, #0
 8011ae4:	d055      	beq.n	8011b92 <rcl_action_client_wait_set_get_entities_ready+0x11a>
 8011ae6:	6823      	ldr	r3, [r4, #0]
 8011ae8:	686a      	ldr	r2, [r5, #4]
 8011aea:	f8d3 11d0 	ldr.w	r1, [r3, #464]	@ 0x1d0
 8011aee:	428a      	cmp	r2, r1
 8011af0:	d94c      	bls.n	8011b8c <rcl_action_client_wait_set_get_entities_ready+0x114>
 8011af2:	f8d3 01d4 	ldr.w	r0, [r3, #468]	@ 0x1d4
 8011af6:	4282      	cmp	r2, r0
 8011af8:	d948      	bls.n	8011b8c <rcl_action_client_wait_set_get_entities_ready+0x114>
 8011afa:	f8d3 41c4 	ldr.w	r4, [r3, #452]	@ 0x1c4
 8011afe:	69ea      	ldr	r2, [r5, #28]
 8011b00:	42a2      	cmp	r2, r4
 8011b02:	d943      	bls.n	8011b8c <rcl_action_client_wait_set_get_entities_ready+0x114>
 8011b04:	f8d3 c1c8 	ldr.w	ip, [r3, #456]	@ 0x1c8
 8011b08:	4562      	cmp	r2, ip
 8011b0a:	d93f      	bls.n	8011b8c <rcl_action_client_wait_set_get_entities_ready+0x114>
 8011b0c:	f8d3 e1cc 	ldr.w	lr, [r3, #460]	@ 0x1cc
 8011b10:	4572      	cmp	r2, lr
 8011b12:	d93b      	bls.n	8011b8c <rcl_action_client_wait_set_get_entities_ready+0x114>
 8011b14:	69aa      	ldr	r2, [r5, #24]
 8011b16:	682d      	ldr	r5, [r5, #0]
 8011b18:	f852 8024 	ldr.w	r8, [r2, r4, lsl #2]
 8011b1c:	f855 4020 	ldr.w	r4, [r5, r0, lsl #2]
 8011b20:	f855 5021 	ldr.w	r5, [r5, r1, lsl #2]
 8011b24:	f852 102c 	ldr.w	r1, [r2, ip, lsl #2]
 8011b28:	f852 202e 	ldr.w	r2, [r2, lr, lsl #2]
 8011b2c:	f103 0c0c 	add.w	ip, r3, #12
 8011b30:	eba5 050c 	sub.w	r5, r5, ip
 8011b34:	fab5 f585 	clz	r5, r5
 8011b38:	096d      	lsrs	r5, r5, #5
 8011b3a:	7035      	strb	r5, [r6, #0]
 8011b3c:	f103 0510 	add.w	r5, r3, #16
 8011b40:	1b64      	subs	r4, r4, r5
 8011b42:	fab4 f484 	clz	r4, r4
 8011b46:	0964      	lsrs	r4, r4, #5
 8011b48:	703c      	strb	r4, [r7, #0]
 8011b4a:	eba3 0008 	sub.w	r0, r3, r8
 8011b4e:	1d1c      	adds	r4, r3, #4
 8011b50:	3308      	adds	r3, #8
 8011b52:	1ad3      	subs	r3, r2, r3
 8011b54:	fab0 f080 	clz	r0, r0
 8011b58:	9a06      	ldr	r2, [sp, #24]
 8011b5a:	0940      	lsrs	r0, r0, #5
 8011b5c:	1b09      	subs	r1, r1, r4
 8011b5e:	7010      	strb	r0, [r2, #0]
 8011b60:	fab1 f181 	clz	r1, r1
 8011b64:	9a07      	ldr	r2, [sp, #28]
 8011b66:	0949      	lsrs	r1, r1, #5
 8011b68:	7011      	strb	r1, [r2, #0]
 8011b6a:	fab3 f383 	clz	r3, r3
 8011b6e:	9a08      	ldr	r2, [sp, #32]
 8011b70:	095b      	lsrs	r3, r3, #5
 8011b72:	2000      	movs	r0, #0
 8011b74:	7013      	strb	r3, [r2, #0]
 8011b76:	e001      	b.n	8011b7c <rcl_action_client_wait_set_get_entities_ready+0x104>
 8011b78:	f640 0036 	movw	r0, #2102	@ 0x836
 8011b7c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011b80:	f7f8 faae 	bl	800a0e0 <rcutils_reset_error>
 8011b84:	f640 0036 	movw	r0, #2102	@ 0x836
 8011b88:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011b8c:	2001      	movs	r0, #1
 8011b8e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011b92:	200b      	movs	r0, #11
 8011b94:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011b98:	f44f 7061 	mov.w	r0, #900	@ 0x384
 8011b9c:	4770      	bx	lr
 8011b9e:	bf00      	nop

08011ba0 <rcl_action_take_goal_request>:
 8011ba0:	2800      	cmp	r0, #0
 8011ba2:	d039      	beq.n	8011c18 <rcl_action_take_goal_request+0x78>
 8011ba4:	b570      	push	{r4, r5, r6, lr}
 8011ba6:	4604      	mov	r4, r0
 8011ba8:	6800      	ldr	r0, [r0, #0]
 8011baa:	b380      	cbz	r0, 8011c0e <rcl_action_take_goal_request+0x6e>
 8011bac:	460d      	mov	r5, r1
 8011bae:	4616      	mov	r6, r2
 8011bb0:	f7fe fc98 	bl	80104e4 <rcl_service_is_valid>
 8011bb4:	b330      	cbz	r0, 8011c04 <rcl_action_take_goal_request+0x64>
 8011bb6:	6820      	ldr	r0, [r4, #0]
 8011bb8:	3004      	adds	r0, #4
 8011bba:	f7fe fc93 	bl	80104e4 <rcl_service_is_valid>
 8011bbe:	b308      	cbz	r0, 8011c04 <rcl_action_take_goal_request+0x64>
 8011bc0:	6820      	ldr	r0, [r4, #0]
 8011bc2:	3008      	adds	r0, #8
 8011bc4:	f7fe fc8e 	bl	80104e4 <rcl_service_is_valid>
 8011bc8:	b1e0      	cbz	r0, 8011c04 <rcl_action_take_goal_request+0x64>
 8011bca:	6820      	ldr	r0, [r4, #0]
 8011bcc:	300c      	adds	r0, #12
 8011bce:	f002 ff27 	bl	8014a20 <rcl_publisher_is_valid>
 8011bd2:	b1b8      	cbz	r0, 8011c04 <rcl_action_take_goal_request+0x64>
 8011bd4:	6820      	ldr	r0, [r4, #0]
 8011bd6:	3010      	adds	r0, #16
 8011bd8:	f002 ff22 	bl	8014a20 <rcl_publisher_is_valid>
 8011bdc:	b190      	cbz	r0, 8011c04 <rcl_action_take_goal_request+0x64>
 8011bde:	b1cd      	cbz	r5, 8011c14 <rcl_action_take_goal_request+0x74>
 8011be0:	b1c6      	cbz	r6, 8011c14 <rcl_action_take_goal_request+0x74>
 8011be2:	6820      	ldr	r0, [r4, #0]
 8011be4:	4632      	mov	r2, r6
 8011be6:	4629      	mov	r1, r5
 8011be8:	f7fe fc24 	bl	8010434 <rcl_take_request>
 8011bec:	b148      	cbz	r0, 8011c02 <rcl_action_take_goal_request+0x62>
 8011bee:	280a      	cmp	r0, #10
 8011bf0:	d007      	beq.n	8011c02 <rcl_action_take_goal_request+0x62>
 8011bf2:	f240 2259 	movw	r2, #601	@ 0x259
 8011bf6:	f640 0399 	movw	r3, #2201	@ 0x899
 8011bfa:	4290      	cmp	r0, r2
 8011bfc:	bf0c      	ite	eq
 8011bfe:	4618      	moveq	r0, r3
 8011c00:	2001      	movne	r0, #1
 8011c02:	bd70      	pop	{r4, r5, r6, pc}
 8011c04:	f7f8 fa6c 	bl	800a0e0 <rcutils_reset_error>
 8011c08:	f640 0098 	movw	r0, #2200	@ 0x898
 8011c0c:	bd70      	pop	{r4, r5, r6, pc}
 8011c0e:	f640 0098 	movw	r0, #2200	@ 0x898
 8011c12:	bd70      	pop	{r4, r5, r6, pc}
 8011c14:	200b      	movs	r0, #11
 8011c16:	bd70      	pop	{r4, r5, r6, pc}
 8011c18:	f640 0098 	movw	r0, #2200	@ 0x898
 8011c1c:	4770      	bx	lr
 8011c1e:	bf00      	nop

08011c20 <rcl_action_send_goal_response>:
 8011c20:	b390      	cbz	r0, 8011c88 <rcl_action_send_goal_response+0x68>
 8011c22:	b570      	push	{r4, r5, r6, lr}
 8011c24:	4604      	mov	r4, r0
 8011c26:	6800      	ldr	r0, [r0, #0]
 8011c28:	b348      	cbz	r0, 8011c7e <rcl_action_send_goal_response+0x5e>
 8011c2a:	460d      	mov	r5, r1
 8011c2c:	4616      	mov	r6, r2
 8011c2e:	f7fe fc59 	bl	80104e4 <rcl_service_is_valid>
 8011c32:	b1f8      	cbz	r0, 8011c74 <rcl_action_send_goal_response+0x54>
 8011c34:	6820      	ldr	r0, [r4, #0]
 8011c36:	3004      	adds	r0, #4
 8011c38:	f7fe fc54 	bl	80104e4 <rcl_service_is_valid>
 8011c3c:	b1d0      	cbz	r0, 8011c74 <rcl_action_send_goal_response+0x54>
 8011c3e:	6820      	ldr	r0, [r4, #0]
 8011c40:	3008      	adds	r0, #8
 8011c42:	f7fe fc4f 	bl	80104e4 <rcl_service_is_valid>
 8011c46:	b1a8      	cbz	r0, 8011c74 <rcl_action_send_goal_response+0x54>
 8011c48:	6820      	ldr	r0, [r4, #0]
 8011c4a:	300c      	adds	r0, #12
 8011c4c:	f002 fee8 	bl	8014a20 <rcl_publisher_is_valid>
 8011c50:	b180      	cbz	r0, 8011c74 <rcl_action_send_goal_response+0x54>
 8011c52:	6820      	ldr	r0, [r4, #0]
 8011c54:	3010      	adds	r0, #16
 8011c56:	f002 fee3 	bl	8014a20 <rcl_publisher_is_valid>
 8011c5a:	b158      	cbz	r0, 8011c74 <rcl_action_send_goal_response+0x54>
 8011c5c:	b195      	cbz	r5, 8011c84 <rcl_action_send_goal_response+0x64>
 8011c5e:	b18e      	cbz	r6, 8011c84 <rcl_action_send_goal_response+0x64>
 8011c60:	6820      	ldr	r0, [r4, #0]
 8011c62:	4632      	mov	r2, r6
 8011c64:	4629      	mov	r1, r5
 8011c66:	f7fe fc25 	bl	80104b4 <rcl_send_response>
 8011c6a:	b110      	cbz	r0, 8011c72 <rcl_action_send_goal_response+0x52>
 8011c6c:	2802      	cmp	r0, #2
 8011c6e:	bf18      	it	ne
 8011c70:	2001      	movne	r0, #1
 8011c72:	bd70      	pop	{r4, r5, r6, pc}
 8011c74:	f7f8 fa34 	bl	800a0e0 <rcutils_reset_error>
 8011c78:	f640 0098 	movw	r0, #2200	@ 0x898
 8011c7c:	bd70      	pop	{r4, r5, r6, pc}
 8011c7e:	f640 0098 	movw	r0, #2200	@ 0x898
 8011c82:	bd70      	pop	{r4, r5, r6, pc}
 8011c84:	200b      	movs	r0, #11
 8011c86:	bd70      	pop	{r4, r5, r6, pc}
 8011c88:	f640 0098 	movw	r0, #2200	@ 0x898
 8011c8c:	4770      	bx	lr
 8011c8e:	bf00      	nop

08011c90 <rcl_action_take_result_request>:
 8011c90:	2800      	cmp	r0, #0
 8011c92:	d03a      	beq.n	8011d0a <rcl_action_take_result_request+0x7a>
 8011c94:	b570      	push	{r4, r5, r6, lr}
 8011c96:	4604      	mov	r4, r0
 8011c98:	6800      	ldr	r0, [r0, #0]
 8011c9a:	b388      	cbz	r0, 8011d00 <rcl_action_take_result_request+0x70>
 8011c9c:	460d      	mov	r5, r1
 8011c9e:	4616      	mov	r6, r2
 8011ca0:	f7fe fc20 	bl	80104e4 <rcl_service_is_valid>
 8011ca4:	b338      	cbz	r0, 8011cf6 <rcl_action_take_result_request+0x66>
 8011ca6:	6820      	ldr	r0, [r4, #0]
 8011ca8:	3004      	adds	r0, #4
 8011caa:	f7fe fc1b 	bl	80104e4 <rcl_service_is_valid>
 8011cae:	b310      	cbz	r0, 8011cf6 <rcl_action_take_result_request+0x66>
 8011cb0:	6820      	ldr	r0, [r4, #0]
 8011cb2:	3008      	adds	r0, #8
 8011cb4:	f7fe fc16 	bl	80104e4 <rcl_service_is_valid>
 8011cb8:	b1e8      	cbz	r0, 8011cf6 <rcl_action_take_result_request+0x66>
 8011cba:	6820      	ldr	r0, [r4, #0]
 8011cbc:	300c      	adds	r0, #12
 8011cbe:	f002 feaf 	bl	8014a20 <rcl_publisher_is_valid>
 8011cc2:	b1c0      	cbz	r0, 8011cf6 <rcl_action_take_result_request+0x66>
 8011cc4:	6820      	ldr	r0, [r4, #0]
 8011cc6:	3010      	adds	r0, #16
 8011cc8:	f002 feaa 	bl	8014a20 <rcl_publisher_is_valid>
 8011ccc:	b198      	cbz	r0, 8011cf6 <rcl_action_take_result_request+0x66>
 8011cce:	b1d5      	cbz	r5, 8011d06 <rcl_action_take_result_request+0x76>
 8011cd0:	b1ce      	cbz	r6, 8011d06 <rcl_action_take_result_request+0x76>
 8011cd2:	6820      	ldr	r0, [r4, #0]
 8011cd4:	4632      	mov	r2, r6
 8011cd6:	4629      	mov	r1, r5
 8011cd8:	3008      	adds	r0, #8
 8011cda:	f7fe fbab 	bl	8010434 <rcl_take_request>
 8011cde:	b148      	cbz	r0, 8011cf4 <rcl_action_take_result_request+0x64>
 8011ce0:	280a      	cmp	r0, #10
 8011ce2:	d007      	beq.n	8011cf4 <rcl_action_take_result_request+0x64>
 8011ce4:	f240 2259 	movw	r2, #601	@ 0x259
 8011ce8:	f640 0399 	movw	r3, #2201	@ 0x899
 8011cec:	4290      	cmp	r0, r2
 8011cee:	bf0c      	ite	eq
 8011cf0:	4618      	moveq	r0, r3
 8011cf2:	2001      	movne	r0, #1
 8011cf4:	bd70      	pop	{r4, r5, r6, pc}
 8011cf6:	f7f8 f9f3 	bl	800a0e0 <rcutils_reset_error>
 8011cfa:	f640 0098 	movw	r0, #2200	@ 0x898
 8011cfe:	bd70      	pop	{r4, r5, r6, pc}
 8011d00:	f640 0098 	movw	r0, #2200	@ 0x898
 8011d04:	bd70      	pop	{r4, r5, r6, pc}
 8011d06:	200b      	movs	r0, #11
 8011d08:	bd70      	pop	{r4, r5, r6, pc}
 8011d0a:	f640 0098 	movw	r0, #2200	@ 0x898
 8011d0e:	4770      	bx	lr

08011d10 <rcl_action_take_cancel_request>:
 8011d10:	2800      	cmp	r0, #0
 8011d12:	d03a      	beq.n	8011d8a <rcl_action_take_cancel_request+0x7a>
 8011d14:	b570      	push	{r4, r5, r6, lr}
 8011d16:	4604      	mov	r4, r0
 8011d18:	6800      	ldr	r0, [r0, #0]
 8011d1a:	b388      	cbz	r0, 8011d80 <rcl_action_take_cancel_request+0x70>
 8011d1c:	460d      	mov	r5, r1
 8011d1e:	4616      	mov	r6, r2
 8011d20:	f7fe fbe0 	bl	80104e4 <rcl_service_is_valid>
 8011d24:	b338      	cbz	r0, 8011d76 <rcl_action_take_cancel_request+0x66>
 8011d26:	6820      	ldr	r0, [r4, #0]
 8011d28:	3004      	adds	r0, #4
 8011d2a:	f7fe fbdb 	bl	80104e4 <rcl_service_is_valid>
 8011d2e:	b310      	cbz	r0, 8011d76 <rcl_action_take_cancel_request+0x66>
 8011d30:	6820      	ldr	r0, [r4, #0]
 8011d32:	3008      	adds	r0, #8
 8011d34:	f7fe fbd6 	bl	80104e4 <rcl_service_is_valid>
 8011d38:	b1e8      	cbz	r0, 8011d76 <rcl_action_take_cancel_request+0x66>
 8011d3a:	6820      	ldr	r0, [r4, #0]
 8011d3c:	300c      	adds	r0, #12
 8011d3e:	f002 fe6f 	bl	8014a20 <rcl_publisher_is_valid>
 8011d42:	b1c0      	cbz	r0, 8011d76 <rcl_action_take_cancel_request+0x66>
 8011d44:	6820      	ldr	r0, [r4, #0]
 8011d46:	3010      	adds	r0, #16
 8011d48:	f002 fe6a 	bl	8014a20 <rcl_publisher_is_valid>
 8011d4c:	b198      	cbz	r0, 8011d76 <rcl_action_take_cancel_request+0x66>
 8011d4e:	b1d5      	cbz	r5, 8011d86 <rcl_action_take_cancel_request+0x76>
 8011d50:	b1ce      	cbz	r6, 8011d86 <rcl_action_take_cancel_request+0x76>
 8011d52:	6820      	ldr	r0, [r4, #0]
 8011d54:	4632      	mov	r2, r6
 8011d56:	4629      	mov	r1, r5
 8011d58:	3004      	adds	r0, #4
 8011d5a:	f7fe fb6b 	bl	8010434 <rcl_take_request>
 8011d5e:	b148      	cbz	r0, 8011d74 <rcl_action_take_cancel_request+0x64>
 8011d60:	280a      	cmp	r0, #10
 8011d62:	d007      	beq.n	8011d74 <rcl_action_take_cancel_request+0x64>
 8011d64:	f240 2259 	movw	r2, #601	@ 0x259
 8011d68:	f640 0399 	movw	r3, #2201	@ 0x899
 8011d6c:	4290      	cmp	r0, r2
 8011d6e:	bf0c      	ite	eq
 8011d70:	4618      	moveq	r0, r3
 8011d72:	2001      	movne	r0, #1
 8011d74:	bd70      	pop	{r4, r5, r6, pc}
 8011d76:	f7f8 f9b3 	bl	800a0e0 <rcutils_reset_error>
 8011d7a:	f640 0098 	movw	r0, #2200	@ 0x898
 8011d7e:	bd70      	pop	{r4, r5, r6, pc}
 8011d80:	f640 0098 	movw	r0, #2200	@ 0x898
 8011d84:	bd70      	pop	{r4, r5, r6, pc}
 8011d86:	200b      	movs	r0, #11
 8011d88:	bd70      	pop	{r4, r5, r6, pc}
 8011d8a:	f640 0098 	movw	r0, #2200	@ 0x898
 8011d8e:	4770      	bx	lr

08011d90 <rcl_action_send_cancel_response>:
 8011d90:	b398      	cbz	r0, 8011dfa <rcl_action_send_cancel_response+0x6a>
 8011d92:	b570      	push	{r4, r5, r6, lr}
 8011d94:	4604      	mov	r4, r0
 8011d96:	6800      	ldr	r0, [r0, #0]
 8011d98:	b350      	cbz	r0, 8011df0 <rcl_action_send_cancel_response+0x60>
 8011d9a:	460d      	mov	r5, r1
 8011d9c:	4616      	mov	r6, r2
 8011d9e:	f7fe fba1 	bl	80104e4 <rcl_service_is_valid>
 8011da2:	b300      	cbz	r0, 8011de6 <rcl_action_send_cancel_response+0x56>
 8011da4:	6820      	ldr	r0, [r4, #0]
 8011da6:	3004      	adds	r0, #4
 8011da8:	f7fe fb9c 	bl	80104e4 <rcl_service_is_valid>
 8011dac:	b1d8      	cbz	r0, 8011de6 <rcl_action_send_cancel_response+0x56>
 8011dae:	6820      	ldr	r0, [r4, #0]
 8011db0:	3008      	adds	r0, #8
 8011db2:	f7fe fb97 	bl	80104e4 <rcl_service_is_valid>
 8011db6:	b1b0      	cbz	r0, 8011de6 <rcl_action_send_cancel_response+0x56>
 8011db8:	6820      	ldr	r0, [r4, #0]
 8011dba:	300c      	adds	r0, #12
 8011dbc:	f002 fe30 	bl	8014a20 <rcl_publisher_is_valid>
 8011dc0:	b188      	cbz	r0, 8011de6 <rcl_action_send_cancel_response+0x56>
 8011dc2:	6820      	ldr	r0, [r4, #0]
 8011dc4:	3010      	adds	r0, #16
 8011dc6:	f002 fe2b 	bl	8014a20 <rcl_publisher_is_valid>
 8011dca:	b160      	cbz	r0, 8011de6 <rcl_action_send_cancel_response+0x56>
 8011dcc:	b19d      	cbz	r5, 8011df6 <rcl_action_send_cancel_response+0x66>
 8011dce:	b196      	cbz	r6, 8011df6 <rcl_action_send_cancel_response+0x66>
 8011dd0:	6820      	ldr	r0, [r4, #0]
 8011dd2:	4632      	mov	r2, r6
 8011dd4:	4629      	mov	r1, r5
 8011dd6:	3004      	adds	r0, #4
 8011dd8:	f7fe fb6c 	bl	80104b4 <rcl_send_response>
 8011ddc:	b110      	cbz	r0, 8011de4 <rcl_action_send_cancel_response+0x54>
 8011dde:	2802      	cmp	r0, #2
 8011de0:	bf18      	it	ne
 8011de2:	2001      	movne	r0, #1
 8011de4:	bd70      	pop	{r4, r5, r6, pc}
 8011de6:	f7f8 f97b 	bl	800a0e0 <rcutils_reset_error>
 8011dea:	f640 0098 	movw	r0, #2200	@ 0x898
 8011dee:	bd70      	pop	{r4, r5, r6, pc}
 8011df0:	f640 0098 	movw	r0, #2200	@ 0x898
 8011df4:	bd70      	pop	{r4, r5, r6, pc}
 8011df6:	200b      	movs	r0, #11
 8011df8:	bd70      	pop	{r4, r5, r6, pc}
 8011dfa:	f640 0098 	movw	r0, #2200	@ 0x898
 8011dfe:	4770      	bx	lr

08011e00 <rcl_action_wait_set_add_action_server>:
 8011e00:	2800      	cmp	r0, #0
 8011e02:	d04d      	beq.n	8011ea0 <rcl_action_wait_set_add_action_server+0xa0>
 8011e04:	b570      	push	{r4, r5, r6, lr}
 8011e06:	460c      	mov	r4, r1
 8011e08:	b159      	cbz	r1, 8011e22 <rcl_action_wait_set_add_action_server+0x22>
 8011e0a:	4605      	mov	r5, r0
 8011e0c:	6808      	ldr	r0, [r1, #0]
 8011e0e:	b140      	cbz	r0, 8011e22 <rcl_action_wait_set_add_action_server+0x22>
 8011e10:	4616      	mov	r6, r2
 8011e12:	f7fe fb67 	bl	80104e4 <rcl_service_is_valid>
 8011e16:	b120      	cbz	r0, 8011e22 <rcl_action_wait_set_add_action_server+0x22>
 8011e18:	6820      	ldr	r0, [r4, #0]
 8011e1a:	3004      	adds	r0, #4
 8011e1c:	f7fe fb62 	bl	80104e4 <rcl_service_is_valid>
 8011e20:	b910      	cbnz	r0, 8011e28 <rcl_action_wait_set_add_action_server+0x28>
 8011e22:	f640 0098 	movw	r0, #2200	@ 0x898
 8011e26:	bd70      	pop	{r4, r5, r6, pc}
 8011e28:	6820      	ldr	r0, [r4, #0]
 8011e2a:	3008      	adds	r0, #8
 8011e2c:	f7fe fb5a 	bl	80104e4 <rcl_service_is_valid>
 8011e30:	2800      	cmp	r0, #0
 8011e32:	d0f6      	beq.n	8011e22 <rcl_action_wait_set_add_action_server+0x22>
 8011e34:	6820      	ldr	r0, [r4, #0]
 8011e36:	300c      	adds	r0, #12
 8011e38:	f002 fe0a 	bl	8014a50 <rcl_publisher_is_valid_except_context>
 8011e3c:	2800      	cmp	r0, #0
 8011e3e:	d0f0      	beq.n	8011e22 <rcl_action_wait_set_add_action_server+0x22>
 8011e40:	6820      	ldr	r0, [r4, #0]
 8011e42:	3010      	adds	r0, #16
 8011e44:	f002 fe04 	bl	8014a50 <rcl_publisher_is_valid_except_context>
 8011e48:	2800      	cmp	r0, #0
 8011e4a:	d0ea      	beq.n	8011e22 <rcl_action_wait_set_add_action_server+0x22>
 8011e4c:	6821      	ldr	r1, [r4, #0]
 8011e4e:	4628      	mov	r0, r5
 8011e50:	f501 72ee 	add.w	r2, r1, #476	@ 0x1dc
 8011e54:	f7ff fad0 	bl	80113f8 <rcl_wait_set_add_service>
 8011e58:	2800      	cmp	r0, #0
 8011e5a:	d1e4      	bne.n	8011e26 <rcl_action_wait_set_add_action_server+0x26>
 8011e5c:	6821      	ldr	r1, [r4, #0]
 8011e5e:	4628      	mov	r0, r5
 8011e60:	f501 72f0 	add.w	r2, r1, #480	@ 0x1e0
 8011e64:	3104      	adds	r1, #4
 8011e66:	f7ff fac7 	bl	80113f8 <rcl_wait_set_add_service>
 8011e6a:	2800      	cmp	r0, #0
 8011e6c:	d1db      	bne.n	8011e26 <rcl_action_wait_set_add_action_server+0x26>
 8011e6e:	6821      	ldr	r1, [r4, #0]
 8011e70:	4628      	mov	r0, r5
 8011e72:	f501 72f2 	add.w	r2, r1, #484	@ 0x1e4
 8011e76:	3108      	adds	r1, #8
 8011e78:	f7ff fabe 	bl	80113f8 <rcl_wait_set_add_service>
 8011e7c:	2800      	cmp	r0, #0
 8011e7e:	d1d2      	bne.n	8011e26 <rcl_action_wait_set_add_action_server+0x26>
 8011e80:	6821      	ldr	r1, [r4, #0]
 8011e82:	4628      	mov	r0, r5
 8011e84:	f501 72f4 	add.w	r2, r1, #488	@ 0x1e8
 8011e88:	3114      	adds	r1, #20
 8011e8a:	f7ff fa59 	bl	8011340 <rcl_wait_set_add_timer>
 8011e8e:	2800      	cmp	r0, #0
 8011e90:	d1c9      	bne.n	8011e26 <rcl_action_wait_set_add_action_server+0x26>
 8011e92:	2e00      	cmp	r6, #0
 8011e94:	d0c7      	beq.n	8011e26 <rcl_action_wait_set_add_action_server+0x26>
 8011e96:	6823      	ldr	r3, [r4, #0]
 8011e98:	f8d3 31dc 	ldr.w	r3, [r3, #476]	@ 0x1dc
 8011e9c:	6033      	str	r3, [r6, #0]
 8011e9e:	bd70      	pop	{r4, r5, r6, pc}
 8011ea0:	f44f 7061 	mov.w	r0, #900	@ 0x384
 8011ea4:	4770      	bx	lr
 8011ea6:	bf00      	nop

08011ea8 <rcl_action_server_wait_set_get_entities_ready>:
 8011ea8:	2800      	cmp	r0, #0
 8011eaa:	d05a      	beq.n	8011f62 <rcl_action_server_wait_set_get_entities_ready+0xba>
 8011eac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011eae:	460c      	mov	r4, r1
 8011eb0:	b161      	cbz	r1, 8011ecc <rcl_action_server_wait_set_get_entities_ready+0x24>
 8011eb2:	4605      	mov	r5, r0
 8011eb4:	6808      	ldr	r0, [r1, #0]
 8011eb6:	b148      	cbz	r0, 8011ecc <rcl_action_server_wait_set_get_entities_ready+0x24>
 8011eb8:	4616      	mov	r6, r2
 8011eba:	461f      	mov	r7, r3
 8011ebc:	f7fe fb12 	bl	80104e4 <rcl_service_is_valid>
 8011ec0:	b120      	cbz	r0, 8011ecc <rcl_action_server_wait_set_get_entities_ready+0x24>
 8011ec2:	6820      	ldr	r0, [r4, #0]
 8011ec4:	3004      	adds	r0, #4
 8011ec6:	f7fe fb0d 	bl	80104e4 <rcl_service_is_valid>
 8011eca:	b910      	cbnz	r0, 8011ed2 <rcl_action_server_wait_set_get_entities_ready+0x2a>
 8011ecc:	f640 0098 	movw	r0, #2200	@ 0x898
 8011ed0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8011ed2:	6820      	ldr	r0, [r4, #0]
 8011ed4:	3008      	adds	r0, #8
 8011ed6:	f7fe fb05 	bl	80104e4 <rcl_service_is_valid>
 8011eda:	2800      	cmp	r0, #0
 8011edc:	d0f6      	beq.n	8011ecc <rcl_action_server_wait_set_get_entities_ready+0x24>
 8011ede:	6820      	ldr	r0, [r4, #0]
 8011ee0:	300c      	adds	r0, #12
 8011ee2:	f002 fdb5 	bl	8014a50 <rcl_publisher_is_valid_except_context>
 8011ee6:	2800      	cmp	r0, #0
 8011ee8:	d0f0      	beq.n	8011ecc <rcl_action_server_wait_set_get_entities_ready+0x24>
 8011eea:	6820      	ldr	r0, [r4, #0]
 8011eec:	3010      	adds	r0, #16
 8011eee:	f002 fdaf 	bl	8014a50 <rcl_publisher_is_valid_except_context>
 8011ef2:	2800      	cmp	r0, #0
 8011ef4:	d0ea      	beq.n	8011ecc <rcl_action_server_wait_set_get_entities_ready+0x24>
 8011ef6:	b3be      	cbz	r6, 8011f68 <rcl_action_server_wait_set_get_entities_ready+0xc0>
 8011ef8:	b3b7      	cbz	r7, 8011f68 <rcl_action_server_wait_set_get_entities_ready+0xc0>
 8011efa:	9b06      	ldr	r3, [sp, #24]
 8011efc:	b3a3      	cbz	r3, 8011f68 <rcl_action_server_wait_set_get_entities_ready+0xc0>
 8011efe:	9b07      	ldr	r3, [sp, #28]
 8011f00:	b393      	cbz	r3, 8011f68 <rcl_action_server_wait_set_get_entities_ready+0xc0>
 8011f02:	6821      	ldr	r1, [r4, #0]
 8011f04:	692a      	ldr	r2, [r5, #16]
 8011f06:	6a2c      	ldr	r4, [r5, #32]
 8011f08:	f8d1 51e8 	ldr.w	r5, [r1, #488]	@ 0x1e8
 8011f0c:	f8d1 31e0 	ldr.w	r3, [r1, #480]	@ 0x1e0
 8011f10:	f852 2025 	ldr.w	r2, [r2, r5, lsl #2]
 8011f14:	f8d1 01e4 	ldr.w	r0, [r1, #484]	@ 0x1e4
 8011f18:	f8d1 51dc 	ldr.w	r5, [r1, #476]	@ 0x1dc
 8011f1c:	f854 0020 	ldr.w	r0, [r4, r0, lsl #2]
 8011f20:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 8011f24:	f854 4025 	ldr.w	r4, [r4, r5, lsl #2]
 8011f28:	1a64      	subs	r4, r4, r1
 8011f2a:	fab4 f484 	clz	r4, r4
 8011f2e:	0964      	lsrs	r4, r4, #5
 8011f30:	7034      	strb	r4, [r6, #0]
 8011f32:	1d0c      	adds	r4, r1, #4
 8011f34:	1b1b      	subs	r3, r3, r4
 8011f36:	fab3 f383 	clz	r3, r3
 8011f3a:	095b      	lsrs	r3, r3, #5
 8011f3c:	f101 0408 	add.w	r4, r1, #8
 8011f40:	703b      	strb	r3, [r7, #0]
 8011f42:	f101 0314 	add.w	r3, r1, #20
 8011f46:	1b01      	subs	r1, r0, r4
 8011f48:	1ad3      	subs	r3, r2, r3
 8011f4a:	fab1 f181 	clz	r1, r1
 8011f4e:	9a06      	ldr	r2, [sp, #24]
 8011f50:	0949      	lsrs	r1, r1, #5
 8011f52:	7011      	strb	r1, [r2, #0]
 8011f54:	fab3 f383 	clz	r3, r3
 8011f58:	9a07      	ldr	r2, [sp, #28]
 8011f5a:	095b      	lsrs	r3, r3, #5
 8011f5c:	2000      	movs	r0, #0
 8011f5e:	7013      	strb	r3, [r2, #0]
 8011f60:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8011f62:	f44f 7061 	mov.w	r0, #900	@ 0x384
 8011f66:	4770      	bx	lr
 8011f68:	200b      	movs	r0, #11
 8011f6a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08011f6c <_execute_event_handler>:
 8011f6c:	2002      	movs	r0, #2
 8011f6e:	4770      	bx	lr

08011f70 <_cancel_goal_event_handler>:
 8011f70:	2003      	movs	r0, #3
 8011f72:	4770      	bx	lr

08011f74 <_succeed_event_handler>:
 8011f74:	2004      	movs	r0, #4
 8011f76:	4770      	bx	lr

08011f78 <_abort_event_handler>:
 8011f78:	2006      	movs	r0, #6
 8011f7a:	4770      	bx	lr

08011f7c <_canceled_event_handler>:
 8011f7c:	2005      	movs	r0, #5
 8011f7e:	4770      	bx	lr

08011f80 <rcl_action_transition_goal_state>:
 8011f80:	b2c2      	uxtb	r2, r0
 8011f82:	2a06      	cmp	r2, #6
 8011f84:	d80c      	bhi.n	8011fa0 <rcl_action_transition_goal_state+0x20>
 8011f86:	2904      	cmp	r1, #4
 8011f88:	d80a      	bhi.n	8011fa0 <rcl_action_transition_goal_state+0x20>
 8011f8a:	eb00 0280 	add.w	r2, r0, r0, lsl #2
 8011f8e:	b410      	push	{r4}
 8011f90:	1853      	adds	r3, r2, r1
 8011f92:	4c06      	ldr	r4, [pc, #24]	@ (8011fac <rcl_action_transition_goal_state+0x2c>)
 8011f94:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 8011f98:	b123      	cbz	r3, 8011fa4 <rcl_action_transition_goal_state+0x24>
 8011f9a:	f85d 4b04 	ldr.w	r4, [sp], #4
 8011f9e:	4718      	bx	r3
 8011fa0:	2000      	movs	r0, #0
 8011fa2:	4770      	bx	lr
 8011fa4:	2000      	movs	r0, #0
 8011fa6:	f85d 4b04 	ldr.w	r4, [sp], #4
 8011faa:	4770      	bx	lr
 8011fac:	08016c44 	.word	0x08016c44

08011fb0 <rcl_action_get_zero_initialized_cancel_response>:
 8011fb0:	b510      	push	{r4, lr}
 8011fb2:	4c07      	ldr	r4, [pc, #28]	@ (8011fd0 <rcl_action_get_zero_initialized_cancel_response+0x20>)
 8011fb4:	4686      	mov	lr, r0
 8011fb6:	4684      	mov	ip, r0
 8011fb8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8011fba:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8011fbe:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8011fc0:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8011fc4:	6823      	ldr	r3, [r4, #0]
 8011fc6:	f8cc 3000 	str.w	r3, [ip]
 8011fca:	4670      	mov	r0, lr
 8011fcc:	bd10      	pop	{r4, pc}
 8011fce:	bf00      	nop
 8011fd0:	08016cd0 	.word	0x08016cd0

08011fd4 <rclc_action_send_result_request>:
 8011fd4:	b1d0      	cbz	r0, 801200c <rclc_action_send_result_request+0x38>
 8011fd6:	b500      	push	{lr}
 8011fd8:	4684      	mov	ip, r0
 8011fda:	b087      	sub	sp, #28
 8011fdc:	f8d0 0009 	ldr.w	r0, [r0, #9]
 8011fe0:	f8dc 100d 	ldr.w	r1, [ip, #13]
 8011fe4:	f8dc 2011 	ldr.w	r2, [ip, #17]
 8011fe8:	f8dc 3015 	ldr.w	r3, [ip, #21]
 8011fec:	f10d 0e08 	add.w	lr, sp, #8
 8011ff0:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8011ff4:	f8dc 0004 	ldr.w	r0, [ip, #4]
 8011ff8:	f10c 0240 	add.w	r2, ip, #64	@ 0x40
 8011ffc:	a902      	add	r1, sp, #8
 8011ffe:	3010      	adds	r0, #16
 8012000:	f7ff fbda 	bl	80117b8 <rcl_action_send_result_request>
 8012004:	b920      	cbnz	r0, 8012010 <rclc_action_send_result_request+0x3c>
 8012006:	b007      	add	sp, #28
 8012008:	f85d fb04 	ldr.w	pc, [sp], #4
 801200c:	200b      	movs	r0, #11
 801200e:	4770      	bx	lr
 8012010:	9001      	str	r0, [sp, #4]
 8012012:	f7f8 f865 	bl	800a0e0 <rcutils_reset_error>
 8012016:	9801      	ldr	r0, [sp, #4]
 8012018:	b007      	add	sp, #28
 801201a:	f85d fb04 	ldr.w	pc, [sp], #4
 801201e:	bf00      	nop

08012020 <rclc_action_take_goal_handle>:
 8012020:	b160      	cbz	r0, 801203c <rclc_action_take_goal_handle+0x1c>
 8012022:	6883      	ldr	r3, [r0, #8]
 8012024:	b143      	cbz	r3, 8012038 <rclc_action_take_goal_handle+0x18>
 8012026:	6819      	ldr	r1, [r3, #0]
 8012028:	6081      	str	r1, [r0, #8]
 801202a:	2200      	movs	r2, #0
 801202c:	721a      	strb	r2, [r3, #8]
 801202e:	68c1      	ldr	r1, [r0, #12]
 8012030:	6019      	str	r1, [r3, #0]
 8012032:	621a      	str	r2, [r3, #32]
 8012034:	849a      	strh	r2, [r3, #36]	@ 0x24
 8012036:	60c3      	str	r3, [r0, #12]
 8012038:	4618      	mov	r0, r3
 801203a:	4770      	bx	lr
 801203c:	4603      	mov	r3, r0
 801203e:	e7fb      	b.n	8012038 <rclc_action_take_goal_handle+0x18>

08012040 <rclc_action_remove_used_goal_handle>:
 8012040:	b180      	cbz	r0, 8012064 <rclc_action_remove_used_goal_handle+0x24>
 8012042:	b179      	cbz	r1, 8012064 <rclc_action_remove_used_goal_handle+0x24>
 8012044:	68c3      	ldr	r3, [r0, #12]
 8012046:	4299      	cmp	r1, r3
 8012048:	d00d      	beq.n	8012066 <rclc_action_remove_used_goal_handle+0x26>
 801204a:	b12b      	cbz	r3, 8012058 <rclc_action_remove_used_goal_handle+0x18>
 801204c:	681a      	ldr	r2, [r3, #0]
 801204e:	4291      	cmp	r1, r2
 8012050:	d003      	beq.n	801205a <rclc_action_remove_used_goal_handle+0x1a>
 8012052:	4613      	mov	r3, r2
 8012054:	2b00      	cmp	r3, #0
 8012056:	d1f9      	bne.n	801204c <rclc_action_remove_used_goal_handle+0xc>
 8012058:	4770      	bx	lr
 801205a:	680a      	ldr	r2, [r1, #0]
 801205c:	601a      	str	r2, [r3, #0]
 801205e:	6883      	ldr	r3, [r0, #8]
 8012060:	600b      	str	r3, [r1, #0]
 8012062:	6081      	str	r1, [r0, #8]
 8012064:	4770      	bx	lr
 8012066:	680b      	ldr	r3, [r1, #0]
 8012068:	60c3      	str	r3, [r0, #12]
 801206a:	e7f8      	b.n	801205e <rclc_action_remove_used_goal_handle+0x1e>

0801206c <rclc_action_find_goal_handle_by_uuid>:
 801206c:	b538      	push	{r3, r4, r5, lr}
 801206e:	b180      	cbz	r0, 8012092 <rclc_action_find_goal_handle_by_uuid+0x26>
 8012070:	460d      	mov	r5, r1
 8012072:	b181      	cbz	r1, 8012096 <rclc_action_find_goal_handle_by_uuid+0x2a>
 8012074:	68c4      	ldr	r4, [r0, #12]
 8012076:	b914      	cbnz	r4, 801207e <rclc_action_find_goal_handle_by_uuid+0x12>
 8012078:	e009      	b.n	801208e <rclc_action_find_goal_handle_by_uuid+0x22>
 801207a:	6824      	ldr	r4, [r4, #0]
 801207c:	b13c      	cbz	r4, 801208e <rclc_action_find_goal_handle_by_uuid+0x22>
 801207e:	f104 0009 	add.w	r0, r4, #9
 8012082:	2210      	movs	r2, #16
 8012084:	4629      	mov	r1, r5
 8012086:	f003 fa71 	bl	801556c <memcmp>
 801208a:	2800      	cmp	r0, #0
 801208c:	d1f5      	bne.n	801207a <rclc_action_find_goal_handle_by_uuid+0xe>
 801208e:	4620      	mov	r0, r4
 8012090:	bd38      	pop	{r3, r4, r5, pc}
 8012092:	4604      	mov	r4, r0
 8012094:	e7fb      	b.n	801208e <rclc_action_find_goal_handle_by_uuid+0x22>
 8012096:	460c      	mov	r4, r1
 8012098:	e7f9      	b.n	801208e <rclc_action_find_goal_handle_by_uuid+0x22>
 801209a:	bf00      	nop

0801209c <rclc_action_find_first_handle_by_status>:
 801209c:	b140      	cbz	r0, 80120b0 <rclc_action_find_first_handle_by_status+0x14>
 801209e:	68c0      	ldr	r0, [r0, #12]
 80120a0:	b910      	cbnz	r0, 80120a8 <rclc_action_find_first_handle_by_status+0xc>
 80120a2:	e005      	b.n	80120b0 <rclc_action_find_first_handle_by_status+0x14>
 80120a4:	6800      	ldr	r0, [r0, #0]
 80120a6:	b118      	cbz	r0, 80120b0 <rclc_action_find_first_handle_by_status+0x14>
 80120a8:	f990 3008 	ldrsb.w	r3, [r0, #8]
 80120ac:	428b      	cmp	r3, r1
 80120ae:	d1f9      	bne.n	80120a4 <rclc_action_find_first_handle_by_status+0x8>
 80120b0:	4770      	bx	lr
 80120b2:	bf00      	nop

080120b4 <rclc_action_find_first_terminated_handle>:
 80120b4:	b140      	cbz	r0, 80120c8 <rclc_action_find_first_terminated_handle+0x14>
 80120b6:	68c0      	ldr	r0, [r0, #12]
 80120b8:	b910      	cbnz	r0, 80120c0 <rclc_action_find_first_terminated_handle+0xc>
 80120ba:	e005      	b.n	80120c8 <rclc_action_find_first_terminated_handle+0x14>
 80120bc:	6800      	ldr	r0, [r0, #0]
 80120be:	b118      	cbz	r0, 80120c8 <rclc_action_find_first_terminated_handle+0x14>
 80120c0:	f990 3008 	ldrsb.w	r3, [r0, #8]
 80120c4:	2b03      	cmp	r3, #3
 80120c6:	ddf9      	ble.n	80120bc <rclc_action_find_first_terminated_handle+0x8>
 80120c8:	4770      	bx	lr
 80120ca:	bf00      	nop

080120cc <rclc_action_find_handle_by_goal_request_sequence_number>:
 80120cc:	b170      	cbz	r0, 80120ec <rclc_action_find_handle_by_goal_request_sequence_number+0x20>
 80120ce:	68c0      	ldr	r0, [r0, #12]
 80120d0:	b160      	cbz	r0, 80120ec <rclc_action_find_handle_by_goal_request_sequence_number+0x20>
 80120d2:	b410      	push	{r4}
 80120d4:	e001      	b.n	80120da <rclc_action_find_handle_by_goal_request_sequence_number+0xe>
 80120d6:	6800      	ldr	r0, [r0, #0]
 80120d8:	b128      	cbz	r0, 80120e6 <rclc_action_find_handle_by_goal_request_sequence_number+0x1a>
 80120da:	e9d0 410a 	ldrd	r4, r1, [r0, #40]	@ 0x28
 80120de:	4299      	cmp	r1, r3
 80120e0:	bf08      	it	eq
 80120e2:	4294      	cmpeq	r4, r2
 80120e4:	d1f7      	bne.n	80120d6 <rclc_action_find_handle_by_goal_request_sequence_number+0xa>
 80120e6:	f85d 4b04 	ldr.w	r4, [sp], #4
 80120ea:	4770      	bx	lr
 80120ec:	4770      	bx	lr
 80120ee:	bf00      	nop

080120f0 <rclc_action_find_handle_by_result_request_sequence_number>:
 80120f0:	b170      	cbz	r0, 8012110 <rclc_action_find_handle_by_result_request_sequence_number+0x20>
 80120f2:	68c0      	ldr	r0, [r0, #12]
 80120f4:	b160      	cbz	r0, 8012110 <rclc_action_find_handle_by_result_request_sequence_number+0x20>
 80120f6:	b410      	push	{r4}
 80120f8:	e001      	b.n	80120fe <rclc_action_find_handle_by_result_request_sequence_number+0xe>
 80120fa:	6800      	ldr	r0, [r0, #0]
 80120fc:	b128      	cbz	r0, 801210a <rclc_action_find_handle_by_result_request_sequence_number+0x1a>
 80120fe:	e9d0 4110 	ldrd	r4, r1, [r0, #64]	@ 0x40
 8012102:	4299      	cmp	r1, r3
 8012104:	bf08      	it	eq
 8012106:	4294      	cmpeq	r4, r2
 8012108:	d1f7      	bne.n	80120fa <rclc_action_find_handle_by_result_request_sequence_number+0xa>
 801210a:	f85d 4b04 	ldr.w	r4, [sp], #4
 801210e:	4770      	bx	lr
 8012110:	4770      	bx	lr
 8012112:	bf00      	nop

08012114 <rclc_action_find_handle_by_cancel_request_sequence_number>:
 8012114:	b170      	cbz	r0, 8012134 <rclc_action_find_handle_by_cancel_request_sequence_number+0x20>
 8012116:	68c0      	ldr	r0, [r0, #12]
 8012118:	b160      	cbz	r0, 8012134 <rclc_action_find_handle_by_cancel_request_sequence_number+0x20>
 801211a:	b410      	push	{r4}
 801211c:	e001      	b.n	8012122 <rclc_action_find_handle_by_cancel_request_sequence_number+0xe>
 801211e:	6800      	ldr	r0, [r0, #0]
 8012120:	b128      	cbz	r0, 801212e <rclc_action_find_handle_by_cancel_request_sequence_number+0x1a>
 8012122:	e9d0 4116 	ldrd	r4, r1, [r0, #88]	@ 0x58
 8012126:	4299      	cmp	r1, r3
 8012128:	bf08      	it	eq
 801212a:	4294      	cmpeq	r4, r2
 801212c:	d1f7      	bne.n	801211e <rclc_action_find_handle_by_cancel_request_sequence_number+0xa>
 801212e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8012132:	4770      	bx	lr
 8012134:	4770      	bx	lr
 8012136:	bf00      	nop

08012138 <rclc_action_find_first_handle_with_goal_response>:
 8012138:	b140      	cbz	r0, 801214c <rclc_action_find_first_handle_with_goal_response+0x14>
 801213a:	68c0      	ldr	r0, [r0, #12]
 801213c:	b910      	cbnz	r0, 8012144 <rclc_action_find_first_handle_with_goal_response+0xc>
 801213e:	e005      	b.n	801214c <rclc_action_find_first_handle_with_goal_response+0x14>
 8012140:	6800      	ldr	r0, [r0, #0]
 8012142:	b118      	cbz	r0, 801214c <rclc_action_find_first_handle_with_goal_response+0x14>
 8012144:	f890 3020 	ldrb.w	r3, [r0, #32]
 8012148:	2b00      	cmp	r3, #0
 801214a:	d0f9      	beq.n	8012140 <rclc_action_find_first_handle_with_goal_response+0x8>
 801214c:	4770      	bx	lr
 801214e:	bf00      	nop

08012150 <rclc_action_find_first_handle_with_result_response>:
 8012150:	b140      	cbz	r0, 8012164 <rclc_action_find_first_handle_with_result_response+0x14>
 8012152:	68c0      	ldr	r0, [r0, #12]
 8012154:	b910      	cbnz	r0, 801215c <rclc_action_find_first_handle_with_result_response+0xc>
 8012156:	e005      	b.n	8012164 <rclc_action_find_first_handle_with_result_response+0x14>
 8012158:	6800      	ldr	r0, [r0, #0]
 801215a:	b118      	cbz	r0, 8012164 <rclc_action_find_first_handle_with_result_response+0x14>
 801215c:	f890 3023 	ldrb.w	r3, [r0, #35]	@ 0x23
 8012160:	2b00      	cmp	r3, #0
 8012162:	d0f9      	beq.n	8012158 <rclc_action_find_first_handle_with_result_response+0x8>
 8012164:	4770      	bx	lr
 8012166:	bf00      	nop

08012168 <rclc_action_server_response_goal_request>:
 8012168:	b198      	cbz	r0, 8012192 <rclc_action_server_response_goal_request+0x2a>
 801216a:	b510      	push	{r4, lr}
 801216c:	6844      	ldr	r4, [r0, #4]
 801216e:	b086      	sub	sp, #24
 8012170:	2200      	movs	r2, #0
 8012172:	e9cd 2203 	strd	r2, r2, [sp, #12]
 8012176:	460b      	mov	r3, r1
 8012178:	9205      	str	r2, [sp, #20]
 801217a:	f100 0128 	add.w	r1, r0, #40	@ 0x28
 801217e:	aa03      	add	r2, sp, #12
 8012180:	f104 0010 	add.w	r0, r4, #16
 8012184:	f88d 300c 	strb.w	r3, [sp, #12]
 8012188:	f7ff fd4a 	bl	8011c20 <rcl_action_send_goal_response>
 801218c:	b918      	cbnz	r0, 8012196 <rclc_action_server_response_goal_request+0x2e>
 801218e:	b006      	add	sp, #24
 8012190:	bd10      	pop	{r4, pc}
 8012192:	200b      	movs	r0, #11
 8012194:	4770      	bx	lr
 8012196:	9001      	str	r0, [sp, #4]
 8012198:	f7f7 ffa2 	bl	800a0e0 <rcutils_reset_error>
 801219c:	9801      	ldr	r0, [sp, #4]
 801219e:	b006      	add	sp, #24
 80121a0:	bd10      	pop	{r4, pc}
 80121a2:	bf00      	nop
 80121a4:	0000      	movs	r0, r0
	...

080121a8 <rclc_action_server_goal_cancel_accept>:
 80121a8:	b310      	cbz	r0, 80121f0 <rclc_action_server_goal_cancel_accept+0x48>
 80121aa:	b510      	push	{r4, lr}
 80121ac:	b090      	sub	sp, #64	@ 0x40
 80121ae:	4604      	mov	r4, r0
 80121b0:	a806      	add	r0, sp, #24
 80121b2:	f7ff fefd 	bl	8011fb0 <rcl_action_get_zero_initialized_cancel_response>
 80121b6:	2300      	movs	r3, #0
 80121b8:	f8d4 0009 	ldr.w	r0, [r4, #9]
 80121bc:	f8d4 100d 	ldr.w	r1, [r4, #13]
 80121c0:	f8d4 2011 	ldr.w	r2, [r4, #17]
 80121c4:	f88d 3018 	strb.w	r3, [sp, #24]
 80121c8:	f8d4 3015 	ldr.w	r3, [r4, #21]
 80121cc:	f8cd d01c 	str.w	sp, [sp, #28]
 80121d0:	46ec      	mov	ip, sp
 80121d2:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80121d6:	ed9f 7b08 	vldr	d7, [pc, #32]	@ 80121f8 <rclc_action_server_goal_cancel_accept+0x50>
 80121da:	6860      	ldr	r0, [r4, #4]
 80121dc:	aa06      	add	r2, sp, #24
 80121de:	f104 0158 	add.w	r1, r4, #88	@ 0x58
 80121e2:	3010      	adds	r0, #16
 80121e4:	ed8d 7b08 	vstr	d7, [sp, #32]
 80121e8:	f7ff fdd2 	bl	8011d90 <rcl_action_send_cancel_response>
 80121ec:	b010      	add	sp, #64	@ 0x40
 80121ee:	bd10      	pop	{r4, pc}
 80121f0:	200b      	movs	r0, #11
 80121f2:	4770      	bx	lr
 80121f4:	f3af 8000 	nop.w
 80121f8:	00000001 	.word	0x00000001
 80121fc:	00000001 	.word	0x00000001

08012200 <rclc_action_server_goal_cancel_reject>:
 8012200:	b082      	sub	sp, #8
 8012202:	b530      	push	{r4, r5, lr}
 8012204:	b08b      	sub	sp, #44	@ 0x2c
 8012206:	ac0e      	add	r4, sp, #56	@ 0x38
 8012208:	e884 000c 	stmia.w	r4, {r2, r3}
 801220c:	b188      	cbz	r0, 8012232 <rclc_action_server_goal_cancel_reject+0x32>
 801220e:	4604      	mov	r4, r0
 8012210:	a801      	add	r0, sp, #4
 8012212:	460d      	mov	r5, r1
 8012214:	f7ff fecc 	bl	8011fb0 <rcl_action_get_zero_initialized_cancel_response>
 8012218:	aa01      	add	r2, sp, #4
 801221a:	a90e      	add	r1, sp, #56	@ 0x38
 801221c:	f104 0010 	add.w	r0, r4, #16
 8012220:	f88d 5004 	strb.w	r5, [sp, #4]
 8012224:	f7ff fdb4 	bl	8011d90 <rcl_action_send_cancel_response>
 8012228:	b00b      	add	sp, #44	@ 0x2c
 801222a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801222e:	b002      	add	sp, #8
 8012230:	4770      	bx	lr
 8012232:	200b      	movs	r0, #11
 8012234:	b00b      	add	sp, #44	@ 0x2c
 8012236:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801223a:	b002      	add	sp, #8
 801223c:	4770      	bx	lr
 801223e:	bf00      	nop

08012240 <__atomic_load_8>:
 8012240:	ea80 4110 	eor.w	r1, r0, r0, lsr #16
 8012244:	f081 013d 	eor.w	r1, r1, #61	@ 0x3d
 8012248:	4a15      	ldr	r2, [pc, #84]	@ (80122a0 <__atomic_load_8+0x60>)
 801224a:	4b16      	ldr	r3, [pc, #88]	@ (80122a4 <__atomic_load_8+0x64>)
 801224c:	eb01 01c1 	add.w	r1, r1, r1, lsl #3
 8012250:	ea81 1111 	eor.w	r1, r1, r1, lsr #4
 8012254:	fb02 f101 	mul.w	r1, r2, r1
 8012258:	ea81 31d1 	eor.w	r1, r1, r1, lsr #15
 801225c:	fba3 2301 	umull	r2, r3, r3, r1
 8012260:	091b      	lsrs	r3, r3, #4
 8012262:	eb03 0243 	add.w	r2, r3, r3, lsl #1
 8012266:	ebc3 03c2 	rsb	r3, r3, r2, lsl #3
 801226a:	b4d0      	push	{r4, r6, r7}
 801226c:	4c0e      	ldr	r4, [pc, #56]	@ (80122a8 <__atomic_load_8+0x68>)
 801226e:	1ac9      	subs	r1, r1, r3
 8012270:	1862      	adds	r2, r4, r1
 8012272:	f04f 0c01 	mov.w	ip, #1
 8012276:	e8d2 3f4f 	ldrexb	r3, [r2]
 801227a:	e8c2 cf46 	strexb	r6, ip, [r2]
 801227e:	2e00      	cmp	r6, #0
 8012280:	d1f9      	bne.n	8012276 <__atomic_load_8+0x36>
 8012282:	f3bf 8f5b 	dmb	ish
 8012286:	b2db      	uxtb	r3, r3
 8012288:	2b00      	cmp	r3, #0
 801228a:	d1f4      	bne.n	8012276 <__atomic_load_8+0x36>
 801228c:	e9d0 6700 	ldrd	r6, r7, [r0]
 8012290:	f3bf 8f5b 	dmb	ish
 8012294:	5463      	strb	r3, [r4, r1]
 8012296:	4630      	mov	r0, r6
 8012298:	4639      	mov	r1, r7
 801229a:	bcd0      	pop	{r4, r6, r7}
 801229c:	4770      	bx	lr
 801229e:	bf00      	nop
 80122a0:	27d4eb2d 	.word	0x27d4eb2d
 80122a4:	b21642c9 	.word	0xb21642c9
 80122a8:	2000db28 	.word	0x2000db28

080122ac <__atomic_store_8>:
 80122ac:	ea80 4110 	eor.w	r1, r0, r0, lsr #16
 80122b0:	f081 013d 	eor.w	r1, r1, #61	@ 0x3d
 80122b4:	b570      	push	{r4, r5, r6, lr}
 80122b6:	eb01 01c1 	add.w	r1, r1, r1, lsl #3
 80122ba:	4c14      	ldr	r4, [pc, #80]	@ (801230c <__atomic_store_8+0x60>)
 80122bc:	4d14      	ldr	r5, [pc, #80]	@ (8012310 <__atomic_store_8+0x64>)
 80122be:	ea81 1111 	eor.w	r1, r1, r1, lsr #4
 80122c2:	fb04 f101 	mul.w	r1, r4, r1
 80122c6:	4c13      	ldr	r4, [pc, #76]	@ (8012314 <__atomic_store_8+0x68>)
 80122c8:	ea81 31d1 	eor.w	r1, r1, r1, lsr #15
 80122cc:	fba4 4e01 	umull	r4, lr, r4, r1
 80122d0:	ea4f 1e1e 	mov.w	lr, lr, lsr #4
 80122d4:	eb0e 044e 	add.w	r4, lr, lr, lsl #1
 80122d8:	ebce 0ec4 	rsb	lr, lr, r4, lsl #3
 80122dc:	eba1 0e0e 	sub.w	lr, r1, lr
 80122e0:	eb05 0c0e 	add.w	ip, r5, lr
 80122e4:	f04f 0401 	mov.w	r4, #1
 80122e8:	e8dc 1f4f 	ldrexb	r1, [ip]
 80122ec:	e8cc 4f46 	strexb	r6, r4, [ip]
 80122f0:	2e00      	cmp	r6, #0
 80122f2:	d1f9      	bne.n	80122e8 <__atomic_store_8+0x3c>
 80122f4:	f3bf 8f5b 	dmb	ish
 80122f8:	b2c9      	uxtb	r1, r1
 80122fa:	2900      	cmp	r1, #0
 80122fc:	d1f4      	bne.n	80122e8 <__atomic_store_8+0x3c>
 80122fe:	e9c0 2300 	strd	r2, r3, [r0]
 8012302:	f3bf 8f5b 	dmb	ish
 8012306:	f805 100e 	strb.w	r1, [r5, lr]
 801230a:	bd70      	pop	{r4, r5, r6, pc}
 801230c:	27d4eb2d 	.word	0x27d4eb2d
 8012310:	2000db28 	.word	0x2000db28
 8012314:	b21642c9 	.word	0xb21642c9

08012318 <__atomic_exchange_8>:
 8012318:	ea80 4c10 	eor.w	ip, r0, r0, lsr #16
 801231c:	f08c 0c3d 	eor.w	ip, ip, #61	@ 0x3d
 8012320:	4916      	ldr	r1, [pc, #88]	@ (801237c <__atomic_exchange_8+0x64>)
 8012322:	eb0c 0ccc 	add.w	ip, ip, ip, lsl #3
 8012326:	ea8c 1c1c 	eor.w	ip, ip, ip, lsr #4
 801232a:	fb01 fc0c 	mul.w	ip, r1, ip
 801232e:	4914      	ldr	r1, [pc, #80]	@ (8012380 <__atomic_exchange_8+0x68>)
 8012330:	ea8c 3cdc 	eor.w	ip, ip, ip, lsr #15
 8012334:	b570      	push	{r4, r5, r6, lr}
 8012336:	4605      	mov	r5, r0
 8012338:	fba1 010c 	umull	r0, r1, r1, ip
 801233c:	0909      	lsrs	r1, r1, #4
 801233e:	eb01 0041 	add.w	r0, r1, r1, lsl #1
 8012342:	ebc1 01c0 	rsb	r1, r1, r0, lsl #3
 8012346:	4e0f      	ldr	r6, [pc, #60]	@ (8012384 <__atomic_exchange_8+0x6c>)
 8012348:	ebac 0c01 	sub.w	ip, ip, r1
 801234c:	eb06 010c 	add.w	r1, r6, ip
 8012350:	f04f 0e01 	mov.w	lr, #1
 8012354:	e8d1 4f4f 	ldrexb	r4, [r1]
 8012358:	e8c1 ef40 	strexb	r0, lr, [r1]
 801235c:	2800      	cmp	r0, #0
 801235e:	d1f9      	bne.n	8012354 <__atomic_exchange_8+0x3c>
 8012360:	f3bf 8f5b 	dmb	ish
 8012364:	b2e4      	uxtb	r4, r4
 8012366:	2c00      	cmp	r4, #0
 8012368:	d1f4      	bne.n	8012354 <__atomic_exchange_8+0x3c>
 801236a:	e9d5 0100 	ldrd	r0, r1, [r5]
 801236e:	e9c5 2300 	strd	r2, r3, [r5]
 8012372:	f3bf 8f5b 	dmb	ish
 8012376:	f806 400c 	strb.w	r4, [r6, ip]
 801237a:	bd70      	pop	{r4, r5, r6, pc}
 801237c:	27d4eb2d 	.word	0x27d4eb2d
 8012380:	b21642c9 	.word	0xb21642c9
 8012384:	2000db28 	.word	0x2000db28

08012388 <rcutils_get_env>:
 8012388:	b168      	cbz	r0, 80123a6 <rcutils_get_env+0x1e>
 801238a:	b510      	push	{r4, lr}
 801238c:	460c      	mov	r4, r1
 801238e:	b129      	cbz	r1, 801239c <rcutils_get_env+0x14>
 8012390:	f002 fca6 	bl	8014ce0 <getenv>
 8012394:	b120      	cbz	r0, 80123a0 <rcutils_get_env+0x18>
 8012396:	6020      	str	r0, [r4, #0]
 8012398:	2000      	movs	r0, #0
 801239a:	bd10      	pop	{r4, pc}
 801239c:	4803      	ldr	r0, [pc, #12]	@ (80123ac <rcutils_get_env+0x24>)
 801239e:	bd10      	pop	{r4, pc}
 80123a0:	4b03      	ldr	r3, [pc, #12]	@ (80123b0 <rcutils_get_env+0x28>)
 80123a2:	6023      	str	r3, [r4, #0]
 80123a4:	bd10      	pop	{r4, pc}
 80123a6:	4803      	ldr	r0, [pc, #12]	@ (80123b4 <rcutils_get_env+0x2c>)
 80123a8:	4770      	bx	lr
 80123aa:	bf00      	nop
 80123ac:	08016d10 	.word	0x08016d10
 80123b0:	08016e34 	.word	0x08016e34
 80123b4:	08016cf4 	.word	0x08016cf4

080123b8 <rcutils_is_directory>:
 80123b8:	2000      	movs	r0, #0
 80123ba:	4770      	bx	lr

080123bc <rcutils_join_path>:
 80123bc:	b082      	sub	sp, #8
 80123be:	e88d 000c 	stmia.w	sp, {r2, r3}
 80123c2:	2000      	movs	r0, #0
 80123c4:	b002      	add	sp, #8
 80123c6:	4770      	bx	lr

080123c8 <rcutils_to_native_path>:
 80123c8:	b084      	sub	sp, #16
 80123ca:	a801      	add	r0, sp, #4
 80123cc:	e880 000e 	stmia.w	r0, {r1, r2, r3}
 80123d0:	b004      	add	sp, #16
 80123d2:	2000      	movs	r0, #0
 80123d4:	4770      	bx	lr
 80123d6:	bf00      	nop

080123d8 <rcutils_format_string_limit>:
 80123d8:	b40f      	push	{r0, r1, r2, r3}
 80123da:	b5f0      	push	{r4, r5, r6, r7, lr}
 80123dc:	b083      	sub	sp, #12
 80123de:	ac08      	add	r4, sp, #32
 80123e0:	9e0e      	ldr	r6, [sp, #56]	@ 0x38
 80123e2:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 80123e6:	b34e      	cbz	r6, 801243c <rcutils_format_string_limit+0x64>
 80123e8:	a808      	add	r0, sp, #32
 80123ea:	f7f7 fe53 	bl	800a094 <rcutils_allocator_is_valid>
 80123ee:	b328      	cbz	r0, 801243c <rcutils_format_string_limit+0x64>
 80123f0:	2100      	movs	r1, #0
 80123f2:	ab0f      	add	r3, sp, #60	@ 0x3c
 80123f4:	4632      	mov	r2, r6
 80123f6:	4608      	mov	r0, r1
 80123f8:	e9cd 3300 	strd	r3, r3, [sp]
 80123fc:	f000 f8f4 	bl	80125e8 <rcutils_vsnprintf>
 8012400:	1c43      	adds	r3, r0, #1
 8012402:	4605      	mov	r5, r0
 8012404:	d01a      	beq.n	801243c <rcutils_format_string_limit+0x64>
 8012406:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8012408:	990c      	ldr	r1, [sp, #48]	@ 0x30
 801240a:	1c47      	adds	r7, r0, #1
 801240c:	429f      	cmp	r7, r3
 801240e:	bf84      	itt	hi
 8012410:	461f      	movhi	r7, r3
 8012412:	f103 35ff 	addhi.w	r5, r3, #4294967295	@ 0xffffffff
 8012416:	4638      	mov	r0, r7
 8012418:	9b08      	ldr	r3, [sp, #32]
 801241a:	4798      	blx	r3
 801241c:	4604      	mov	r4, r0
 801241e:	b168      	cbz	r0, 801243c <rcutils_format_string_limit+0x64>
 8012420:	9b01      	ldr	r3, [sp, #4]
 8012422:	4632      	mov	r2, r6
 8012424:	4639      	mov	r1, r7
 8012426:	f000 f8df 	bl	80125e8 <rcutils_vsnprintf>
 801242a:	2800      	cmp	r0, #0
 801242c:	db02      	blt.n	8012434 <rcutils_format_string_limit+0x5c>
 801242e:	2300      	movs	r3, #0
 8012430:	5563      	strb	r3, [r4, r5]
 8012432:	e004      	b.n	801243e <rcutils_format_string_limit+0x66>
 8012434:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8012436:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8012438:	4620      	mov	r0, r4
 801243a:	4798      	blx	r3
 801243c:	2400      	movs	r4, #0
 801243e:	4620      	mov	r0, r4
 8012440:	b003      	add	sp, #12
 8012442:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8012446:	b004      	add	sp, #16
 8012448:	4770      	bx	lr
 801244a:	bf00      	nop

0801244c <rcutils_repl_str>:
 801244c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012450:	ed2d 8b02 	vpush	{d8}
 8012454:	b087      	sub	sp, #28
 8012456:	4680      	mov	r8, r0
 8012458:	4608      	mov	r0, r1
 801245a:	f8cd 8004 	str.w	r8, [sp, #4]
 801245e:	ee08 2a10 	vmov	s16, r2
 8012462:	468a      	mov	sl, r1
 8012464:	4699      	mov	r9, r3
 8012466:	f7ed fec5 	bl	80001f4 <strlen>
 801246a:	2600      	movs	r6, #0
 801246c:	4647      	mov	r7, r8
 801246e:	9002      	str	r0, [sp, #8]
 8012470:	46b3      	mov	fp, r6
 8012472:	2510      	movs	r5, #16
 8012474:	46b0      	mov	r8, r6
 8012476:	e01d      	b.n	80124b4 <rcutils_repl_str+0x68>
 8012478:	f10b 0b01 	add.w	fp, fp, #1
 801247c:	455e      	cmp	r6, fp
 801247e:	d211      	bcs.n	80124a4 <rcutils_repl_str+0x58>
 8012480:	442e      	add	r6, r5
 8012482:	f8d9 3008 	ldr.w	r3, [r9, #8]
 8012486:	f8d9 2010 	ldr.w	r2, [r9, #16]
 801248a:	00b1      	lsls	r1, r6, #2
 801248c:	4798      	blx	r3
 801248e:	2800      	cmp	r0, #0
 8012490:	f000 8088 	beq.w	80125a4 <rcutils_repl_str+0x158>
 8012494:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8012498:	f5b5 1f80 	cmp.w	r5, #1048576	@ 0x100000
 801249c:	4680      	mov	r8, r0
 801249e:	bf28      	it	cs
 80124a0:	f44f 1580 	movcs.w	r5, #1048576	@ 0x100000
 80124a4:	9a01      	ldr	r2, [sp, #4]
 80124a6:	eb08 038b 	add.w	r3, r8, fp, lsl #2
 80124aa:	1aa2      	subs	r2, r4, r2
 80124ac:	f843 2c04 	str.w	r2, [r3, #-4]
 80124b0:	9b02      	ldr	r3, [sp, #8]
 80124b2:	18e7      	adds	r7, r4, r3
 80124b4:	4651      	mov	r1, sl
 80124b6:	4638      	mov	r0, r7
 80124b8:	f003 f8a9 	bl	801560e <strstr>
 80124bc:	4604      	mov	r4, r0
 80124be:	4640      	mov	r0, r8
 80124c0:	2c00      	cmp	r4, #0
 80124c2:	d1d9      	bne.n	8012478 <rcutils_repl_str+0x2c>
 80124c4:	46b8      	mov	r8, r7
 80124c6:	4607      	mov	r7, r0
 80124c8:	4640      	mov	r0, r8
 80124ca:	f7ed fe93 	bl	80001f4 <strlen>
 80124ce:	9b01      	ldr	r3, [sp, #4]
 80124d0:	eba8 0303 	sub.w	r3, r8, r3
 80124d4:	181c      	adds	r4, r3, r0
 80124d6:	9404      	str	r4, [sp, #16]
 80124d8:	f1bb 0f00 	cmp.w	fp, #0
 80124dc:	d04a      	beq.n	8012574 <rcutils_repl_str+0x128>
 80124de:	ee18 0a10 	vmov	r0, s16
 80124e2:	f7ed fe87 	bl	80001f4 <strlen>
 80124e6:	9b02      	ldr	r3, [sp, #8]
 80124e8:	f8d9 1010 	ldr.w	r1, [r9, #16]
 80124ec:	1ac3      	subs	r3, r0, r3
 80124ee:	fb0b 4303 	mla	r3, fp, r3, r4
 80124f2:	461a      	mov	r2, r3
 80124f4:	9305      	str	r3, [sp, #20]
 80124f6:	4606      	mov	r6, r0
 80124f8:	f8d9 3000 	ldr.w	r3, [r9]
 80124fc:	1c50      	adds	r0, r2, #1
 80124fe:	4798      	blx	r3
 8012500:	9003      	str	r0, [sp, #12]
 8012502:	2800      	cmp	r0, #0
 8012504:	d04f      	beq.n	80125a6 <rcutils_repl_str+0x15a>
 8012506:	f8dd 8004 	ldr.w	r8, [sp, #4]
 801250a:	683a      	ldr	r2, [r7, #0]
 801250c:	4641      	mov	r1, r8
 801250e:	f003 f920 	bl	8015752 <memcpy>
 8012512:	683d      	ldr	r5, [r7, #0]
 8012514:	9b03      	ldr	r3, [sp, #12]
 8012516:	9701      	str	r7, [sp, #4]
 8012518:	46ba      	mov	sl, r7
 801251a:	441d      	add	r5, r3
 801251c:	9f02      	ldr	r7, [sp, #8]
 801251e:	f8cd 9008 	str.w	r9, [sp, #8]
 8012522:	2401      	movs	r4, #1
 8012524:	46d1      	mov	r9, sl
 8012526:	ee18 aa10 	vmov	sl, s16
 801252a:	e00a      	b.n	8012542 <rcutils_repl_str+0xf6>
 801252c:	f8d9 5000 	ldr.w	r5, [r9]
 8012530:	1aaa      	subs	r2, r5, r2
 8012532:	1885      	adds	r5, r0, r2
 8012534:	f003 f90d 	bl	8015752 <memcpy>
 8012538:	45a3      	cmp	fp, r4
 801253a:	f104 0201 	add.w	r2, r4, #1
 801253e:	d935      	bls.n	80125ac <rcutils_repl_str+0x160>
 8012540:	4614      	mov	r4, r2
 8012542:	4632      	mov	r2, r6
 8012544:	4651      	mov	r1, sl
 8012546:	4628      	mov	r0, r5
 8012548:	f003 f903 	bl	8015752 <memcpy>
 801254c:	f859 2b04 	ldr.w	r2, [r9], #4
 8012550:	45a3      	cmp	fp, r4
 8012552:	443a      	add	r2, r7
 8012554:	eb05 0006 	add.w	r0, r5, r6
 8012558:	eb08 0102 	add.w	r1, r8, r2
 801255c:	d1e6      	bne.n	801252c <rcutils_repl_str+0xe0>
 801255e:	9b04      	ldr	r3, [sp, #16]
 8012560:	1a9a      	subs	r2, r3, r2
 8012562:	e9dd 7901 	ldrd	r7, r9, [sp, #4]
 8012566:	f003 f8f4 	bl	8015752 <memcpy>
 801256a:	9a03      	ldr	r2, [sp, #12]
 801256c:	9905      	ldr	r1, [sp, #20]
 801256e:	2300      	movs	r3, #0
 8012570:	5453      	strb	r3, [r2, r1]
 8012572:	e00b      	b.n	801258c <rcutils_repl_str+0x140>
 8012574:	4620      	mov	r0, r4
 8012576:	f8d9 3000 	ldr.w	r3, [r9]
 801257a:	f8d9 1010 	ldr.w	r1, [r9, #16]
 801257e:	3001      	adds	r0, #1
 8012580:	4798      	blx	r3
 8012582:	9003      	str	r0, [sp, #12]
 8012584:	b110      	cbz	r0, 801258c <rcutils_repl_str+0x140>
 8012586:	9901      	ldr	r1, [sp, #4]
 8012588:	f003 f8db 	bl	8015742 <strcpy>
 801258c:	4638      	mov	r0, r7
 801258e:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8012592:	f8d9 1010 	ldr.w	r1, [r9, #16]
 8012596:	4798      	blx	r3
 8012598:	9803      	ldr	r0, [sp, #12]
 801259a:	b007      	add	sp, #28
 801259c:	ecbd 8b02 	vpop	{d8}
 80125a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80125a4:	4647      	mov	r7, r8
 80125a6:	2300      	movs	r3, #0
 80125a8:	9303      	str	r3, [sp, #12]
 80125aa:	e7ef      	b.n	801258c <rcutils_repl_str+0x140>
 80125ac:	e9dd 7901 	ldrd	r7, r9, [sp, #4]
 80125b0:	e7db      	b.n	801256a <rcutils_repl_str+0x11e>
 80125b2:	bf00      	nop

080125b4 <rcutils_snprintf>:
 80125b4:	b40c      	push	{r2, r3}
 80125b6:	b530      	push	{r4, r5, lr}
 80125b8:	b083      	sub	sp, #12
 80125ba:	ab06      	add	r3, sp, #24
 80125bc:	f853 2b04 	ldr.w	r2, [r3], #4
 80125c0:	9301      	str	r3, [sp, #4]
 80125c2:	b152      	cbz	r2, 80125da <rcutils_snprintf+0x26>
 80125c4:	b138      	cbz	r0, 80125d6 <rcutils_snprintf+0x22>
 80125c6:	b141      	cbz	r1, 80125da <rcutils_snprintf+0x26>
 80125c8:	f002 ffc2 	bl	8015550 <vsniprintf>
 80125cc:	b003      	add	sp, #12
 80125ce:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80125d2:	b002      	add	sp, #8
 80125d4:	4770      	bx	lr
 80125d6:	2900      	cmp	r1, #0
 80125d8:	d0f6      	beq.n	80125c8 <rcutils_snprintf+0x14>
 80125da:	f003 f885 	bl	80156e8 <__errno>
 80125de:	2316      	movs	r3, #22
 80125e0:	6003      	str	r3, [r0, #0]
 80125e2:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80125e6:	e7f1      	b.n	80125cc <rcutils_snprintf+0x18>

080125e8 <rcutils_vsnprintf>:
 80125e8:	b570      	push	{r4, r5, r6, lr}
 80125ea:	b13a      	cbz	r2, 80125fc <rcutils_vsnprintf+0x14>
 80125ec:	b120      	cbz	r0, 80125f8 <rcutils_vsnprintf+0x10>
 80125ee:	b129      	cbz	r1, 80125fc <rcutils_vsnprintf+0x14>
 80125f0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80125f4:	f002 bfac 	b.w	8015550 <vsniprintf>
 80125f8:	2900      	cmp	r1, #0
 80125fa:	d0f9      	beq.n	80125f0 <rcutils_vsnprintf+0x8>
 80125fc:	f003 f874 	bl	80156e8 <__errno>
 8012600:	2316      	movs	r3, #22
 8012602:	6003      	str	r3, [r0, #0]
 8012604:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8012608:	bd70      	pop	{r4, r5, r6, pc}
 801260a:	bf00      	nop

0801260c <rcutils_strdup>:
 801260c:	b084      	sub	sp, #16
 801260e:	b570      	push	{r4, r5, r6, lr}
 8012610:	b082      	sub	sp, #8
 8012612:	ac07      	add	r4, sp, #28
 8012614:	e884 000e 	stmia.w	r4, {r1, r2, r3}
 8012618:	4605      	mov	r5, r0
 801261a:	b1b0      	cbz	r0, 801264a <rcutils_strdup+0x3e>
 801261c:	f7ed fdea 	bl	80001f4 <strlen>
 8012620:	1c42      	adds	r2, r0, #1
 8012622:	9b07      	ldr	r3, [sp, #28]
 8012624:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8012626:	9201      	str	r2, [sp, #4]
 8012628:	4606      	mov	r6, r0
 801262a:	4610      	mov	r0, r2
 801262c:	4798      	blx	r3
 801262e:	4604      	mov	r4, r0
 8012630:	b128      	cbz	r0, 801263e <rcutils_strdup+0x32>
 8012632:	9a01      	ldr	r2, [sp, #4]
 8012634:	4629      	mov	r1, r5
 8012636:	f003 f88c 	bl	8015752 <memcpy>
 801263a:	2300      	movs	r3, #0
 801263c:	55a3      	strb	r3, [r4, r6]
 801263e:	4620      	mov	r0, r4
 8012640:	b002      	add	sp, #8
 8012642:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8012646:	b004      	add	sp, #16
 8012648:	4770      	bx	lr
 801264a:	4604      	mov	r4, r0
 801264c:	e7f7      	b.n	801263e <rcutils_strdup+0x32>
 801264e:	bf00      	nop

08012650 <rcutils_strndup>:
 8012650:	b082      	sub	sp, #8
 8012652:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012654:	ac06      	add	r4, sp, #24
 8012656:	e884 000c 	stmia.w	r4, {r2, r3}
 801265a:	4605      	mov	r5, r0
 801265c:	b188      	cbz	r0, 8012682 <rcutils_strndup+0x32>
 801265e:	1c4f      	adds	r7, r1, #1
 8012660:	460e      	mov	r6, r1
 8012662:	4638      	mov	r0, r7
 8012664:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8012666:	4790      	blx	r2
 8012668:	4604      	mov	r4, r0
 801266a:	b128      	cbz	r0, 8012678 <rcutils_strndup+0x28>
 801266c:	463a      	mov	r2, r7
 801266e:	4629      	mov	r1, r5
 8012670:	f003 f86f 	bl	8015752 <memcpy>
 8012674:	2300      	movs	r3, #0
 8012676:	55a3      	strb	r3, [r4, r6]
 8012678:	4620      	mov	r0, r4
 801267a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 801267e:	b002      	add	sp, #8
 8012680:	4770      	bx	lr
 8012682:	4604      	mov	r4, r0
 8012684:	e7f8      	b.n	8012678 <rcutils_strndup+0x28>
 8012686:	bf00      	nop

08012688 <rcutils_get_zero_initialized_string_map>:
 8012688:	4b01      	ldr	r3, [pc, #4]	@ (8012690 <rcutils_get_zero_initialized_string_map+0x8>)
 801268a:	2000      	movs	r0, #0
 801268c:	6018      	str	r0, [r3, #0]
 801268e:	4770      	bx	lr
 8012690:	2000db40 	.word	0x2000db40

08012694 <rcutils_string_map_reserve>:
 8012694:	2800      	cmp	r0, #0
 8012696:	d05f      	beq.n	8012758 <rcutils_string_map_reserve+0xc4>
 8012698:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801269c:	460c      	mov	r4, r1
 801269e:	6801      	ldr	r1, [r0, #0]
 80126a0:	b082      	sub	sp, #8
 80126a2:	4605      	mov	r5, r0
 80126a4:	b129      	cbz	r1, 80126b2 <rcutils_string_map_reserve+0x1e>
 80126a6:	68cb      	ldr	r3, [r1, #12]
 80126a8:	42a3      	cmp	r3, r4
 80126aa:	d906      	bls.n	80126ba <rcutils_string_map_reserve+0x26>
 80126ac:	461c      	mov	r4, r3
 80126ae:	2900      	cmp	r1, #0
 80126b0:	d1f9      	bne.n	80126a6 <rcutils_string_map_reserve+0x12>
 80126b2:	201f      	movs	r0, #31
 80126b4:	b002      	add	sp, #8
 80126b6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80126ba:	688b      	ldr	r3, [r1, #8]
 80126bc:	42a3      	cmp	r3, r4
 80126be:	d047      	beq.n	8012750 <rcutils_string_map_reserve+0xbc>
 80126c0:	6a0e      	ldr	r6, [r1, #32]
 80126c2:	2c00      	cmp	r4, #0
 80126c4:	d034      	beq.n	8012730 <rcutils_string_map_reserve+0x9c>
 80126c6:	f1b4 4f80 	cmp.w	r4, #1073741824	@ 0x40000000
 80126ca:	d243      	bcs.n	8012754 <rcutils_string_map_reserve+0xc0>
 80126cc:	00a7      	lsls	r7, r4, #2
 80126ce:	f8d1 8018 	ldr.w	r8, [r1, #24]
 80126d2:	6808      	ldr	r0, [r1, #0]
 80126d4:	4632      	mov	r2, r6
 80126d6:	4639      	mov	r1, r7
 80126d8:	47c0      	blx	r8
 80126da:	2800      	cmp	r0, #0
 80126dc:	d03a      	beq.n	8012754 <rcutils_string_map_reserve+0xc0>
 80126de:	682b      	ldr	r3, [r5, #0]
 80126e0:	4632      	mov	r2, r6
 80126e2:	6018      	str	r0, [r3, #0]
 80126e4:	4639      	mov	r1, r7
 80126e6:	6858      	ldr	r0, [r3, #4]
 80126e8:	47c0      	blx	r8
 80126ea:	2800      	cmp	r0, #0
 80126ec:	d032      	beq.n	8012754 <rcutils_string_map_reserve+0xc0>
 80126ee:	682d      	ldr	r5, [r5, #0]
 80126f0:	68ab      	ldr	r3, [r5, #8]
 80126f2:	6068      	str	r0, [r5, #4]
 80126f4:	42a3      	cmp	r3, r4
 80126f6:	d226      	bcs.n	8012746 <rcutils_string_map_reserve+0xb2>
 80126f8:	682a      	ldr	r2, [r5, #0]
 80126fa:	eb00 0c07 	add.w	ip, r0, r7
 80126fe:	eb02 0e83 	add.w	lr, r2, r3, lsl #2
 8012702:	45e6      	cmp	lr, ip
 8012704:	ea4f 0183 	mov.w	r1, r3, lsl #2
 8012708:	eb00 0683 	add.w	r6, r0, r3, lsl #2
 801270c:	d203      	bcs.n	8012716 <rcutils_string_map_reserve+0x82>
 801270e:	eb02 0c07 	add.w	ip, r2, r7
 8012712:	4566      	cmp	r6, ip
 8012714:	d322      	bcc.n	801275c <rcutils_string_map_reserve+0xc8>
 8012716:	1ae3      	subs	r3, r4, r3
 8012718:	009a      	lsls	r2, r3, #2
 801271a:	4670      	mov	r0, lr
 801271c:	2100      	movs	r1, #0
 801271e:	9201      	str	r2, [sp, #4]
 8012720:	f002 ff4e 	bl	80155c0 <memset>
 8012724:	9a01      	ldr	r2, [sp, #4]
 8012726:	2100      	movs	r1, #0
 8012728:	4630      	mov	r0, r6
 801272a:	f002 ff49 	bl	80155c0 <memset>
 801272e:	e00a      	b.n	8012746 <rcutils_string_map_reserve+0xb2>
 8012730:	694f      	ldr	r7, [r1, #20]
 8012732:	6808      	ldr	r0, [r1, #0]
 8012734:	4631      	mov	r1, r6
 8012736:	47b8      	blx	r7
 8012738:	682b      	ldr	r3, [r5, #0]
 801273a:	4631      	mov	r1, r6
 801273c:	6858      	ldr	r0, [r3, #4]
 801273e:	601c      	str	r4, [r3, #0]
 8012740:	47b8      	blx	r7
 8012742:	682d      	ldr	r5, [r5, #0]
 8012744:	606c      	str	r4, [r5, #4]
 8012746:	2000      	movs	r0, #0
 8012748:	60ac      	str	r4, [r5, #8]
 801274a:	b002      	add	sp, #8
 801274c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012750:	2000      	movs	r0, #0
 8012752:	e7af      	b.n	80126b4 <rcutils_string_map_reserve+0x20>
 8012754:	200a      	movs	r0, #10
 8012756:	e7ad      	b.n	80126b4 <rcutils_string_map_reserve+0x20>
 8012758:	200b      	movs	r0, #11
 801275a:	4770      	bx	lr
 801275c:	1f0b      	subs	r3, r1, #4
 801275e:	4418      	add	r0, r3
 8012760:	4413      	add	r3, r2
 8012762:	3a04      	subs	r2, #4
 8012764:	4417      	add	r7, r2
 8012766:	2200      	movs	r2, #0
 8012768:	f843 2f04 	str.w	r2, [r3, #4]!
 801276c:	42bb      	cmp	r3, r7
 801276e:	f840 2f04 	str.w	r2, [r0, #4]!
 8012772:	d1f9      	bne.n	8012768 <rcutils_string_map_reserve+0xd4>
 8012774:	e7e7      	b.n	8012746 <rcutils_string_map_reserve+0xb2>
 8012776:	bf00      	nop

08012778 <rcutils_string_map_init>:
 8012778:	b082      	sub	sp, #8
 801277a:	b570      	push	{r4, r5, r6, lr}
 801277c:	ac04      	add	r4, sp, #16
 801277e:	e884 000c 	stmia.w	r4, {r2, r3}
 8012782:	b380      	cbz	r0, 80127e6 <rcutils_string_map_init+0x6e>
 8012784:	6806      	ldr	r6, [r0, #0]
 8012786:	4604      	mov	r4, r0
 8012788:	b12e      	cbz	r6, 8012796 <rcutils_string_map_init+0x1e>
 801278a:	251e      	movs	r5, #30
 801278c:	4628      	mov	r0, r5
 801278e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8012792:	b002      	add	sp, #8
 8012794:	4770      	bx	lr
 8012796:	a804      	add	r0, sp, #16
 8012798:	460d      	mov	r5, r1
 801279a:	f7f7 fc7b 	bl	800a094 <rcutils_allocator_is_valid>
 801279e:	b310      	cbz	r0, 80127e6 <rcutils_string_map_init+0x6e>
 80127a0:	9b04      	ldr	r3, [sp, #16]
 80127a2:	9908      	ldr	r1, [sp, #32]
 80127a4:	2024      	movs	r0, #36	@ 0x24
 80127a6:	4798      	blx	r3
 80127a8:	6020      	str	r0, [r4, #0]
 80127aa:	b310      	cbz	r0, 80127f2 <rcutils_string_map_init+0x7a>
 80127ac:	f10d 0e10 	add.w	lr, sp, #16
 80127b0:	e9c0 6600 	strd	r6, r6, [r0]
 80127b4:	e9c0 6602 	strd	r6, r6, [r0, #8]
 80127b8:	f100 0c10 	add.w	ip, r0, #16
 80127bc:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 80127c0:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80127c4:	f8de 3000 	ldr.w	r3, [lr]
 80127c8:	f8cc 3000 	str.w	r3, [ip]
 80127cc:	4629      	mov	r1, r5
 80127ce:	4620      	mov	r0, r4
 80127d0:	f7ff ff60 	bl	8012694 <rcutils_string_map_reserve>
 80127d4:	4605      	mov	r5, r0
 80127d6:	2800      	cmp	r0, #0
 80127d8:	d0d8      	beq.n	801278c <rcutils_string_map_init+0x14>
 80127da:	9b05      	ldr	r3, [sp, #20]
 80127dc:	9908      	ldr	r1, [sp, #32]
 80127de:	6820      	ldr	r0, [r4, #0]
 80127e0:	4798      	blx	r3
 80127e2:	6026      	str	r6, [r4, #0]
 80127e4:	e7d2      	b.n	801278c <rcutils_string_map_init+0x14>
 80127e6:	250b      	movs	r5, #11
 80127e8:	4628      	mov	r0, r5
 80127ea:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80127ee:	b002      	add	sp, #8
 80127f0:	4770      	bx	lr
 80127f2:	250a      	movs	r5, #10
 80127f4:	e7ca      	b.n	801278c <rcutils_string_map_init+0x14>
 80127f6:	bf00      	nop

080127f8 <rcutils_string_map_fini>:
 80127f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80127fc:	b082      	sub	sp, #8
 80127fe:	2800      	cmp	r0, #0
 8012800:	d03a      	beq.n	8012878 <rcutils_string_map_fini+0x80>
 8012802:	6804      	ldr	r4, [r0, #0]
 8012804:	4606      	mov	r6, r0
 8012806:	2c00      	cmp	r4, #0
 8012808:	d032      	beq.n	8012870 <rcutils_string_map_fini+0x78>
 801280a:	68a3      	ldr	r3, [r4, #8]
 801280c:	b32b      	cbz	r3, 801285a <rcutils_string_map_fini+0x62>
 801280e:	2500      	movs	r5, #0
 8012810:	6822      	ldr	r2, [r4, #0]
 8012812:	462f      	mov	r7, r5
 8012814:	f852 0025 	ldr.w	r0, [r2, r5, lsl #2]
 8012818:	b1e0      	cbz	r0, 8012854 <rcutils_string_map_fini+0x5c>
 801281a:	6a21      	ldr	r1, [r4, #32]
 801281c:	f8d4 8014 	ldr.w	r8, [r4, #20]
 8012820:	9101      	str	r1, [sp, #4]
 8012822:	47c0      	blx	r8
 8012824:	e9d4 2300 	ldrd	r2, r3, [r4]
 8012828:	f842 7025 	str.w	r7, [r2, r5, lsl #2]
 801282c:	9901      	ldr	r1, [sp, #4]
 801282e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8012832:	47c0      	blx	r8
 8012834:	68e3      	ldr	r3, [r4, #12]
 8012836:	6862      	ldr	r2, [r4, #4]
 8012838:	3b01      	subs	r3, #1
 801283a:	f842 7025 	str.w	r7, [r2, r5, lsl #2]
 801283e:	60e3      	str	r3, [r4, #12]
 8012840:	6834      	ldr	r4, [r6, #0]
 8012842:	68a3      	ldr	r3, [r4, #8]
 8012844:	3501      	adds	r5, #1
 8012846:	429d      	cmp	r5, r3
 8012848:	d207      	bcs.n	801285a <rcutils_string_map_fini+0x62>
 801284a:	6822      	ldr	r2, [r4, #0]
 801284c:	f852 0025 	ldr.w	r0, [r2, r5, lsl #2]
 8012850:	2800      	cmp	r0, #0
 8012852:	d1e2      	bne.n	801281a <rcutils_string_map_fini+0x22>
 8012854:	3501      	adds	r5, #1
 8012856:	429d      	cmp	r5, r3
 8012858:	d3dc      	bcc.n	8012814 <rcutils_string_map_fini+0x1c>
 801285a:	2100      	movs	r1, #0
 801285c:	4630      	mov	r0, r6
 801285e:	f7ff ff19 	bl	8012694 <rcutils_string_map_reserve>
 8012862:	4604      	mov	r4, r0
 8012864:	b920      	cbnz	r0, 8012870 <rcutils_string_map_fini+0x78>
 8012866:	6830      	ldr	r0, [r6, #0]
 8012868:	6943      	ldr	r3, [r0, #20]
 801286a:	6a01      	ldr	r1, [r0, #32]
 801286c:	4798      	blx	r3
 801286e:	6034      	str	r4, [r6, #0]
 8012870:	4620      	mov	r0, r4
 8012872:	b002      	add	sp, #8
 8012874:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012878:	240b      	movs	r4, #11
 801287a:	4620      	mov	r0, r4
 801287c:	b002      	add	sp, #8
 801287e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012882:	bf00      	nop

08012884 <rcutils_string_map_getn>:
 8012884:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012888:	b300      	cbz	r0, 80128cc <rcutils_string_map_getn+0x48>
 801288a:	6807      	ldr	r7, [r0, #0]
 801288c:	b1ff      	cbz	r7, 80128ce <rcutils_string_map_getn+0x4a>
 801288e:	4688      	mov	r8, r1
 8012890:	b1e1      	cbz	r1, 80128cc <rcutils_string_map_getn+0x48>
 8012892:	f8d7 a008 	ldr.w	sl, [r7, #8]
 8012896:	683e      	ldr	r6, [r7, #0]
 8012898:	f1ba 0f00 	cmp.w	sl, #0
 801289c:	d016      	beq.n	80128cc <rcutils_string_map_getn+0x48>
 801289e:	4691      	mov	r9, r2
 80128a0:	3e04      	subs	r6, #4
 80128a2:	2400      	movs	r4, #0
 80128a4:	f856 5f04 	ldr.w	r5, [r6, #4]!
 80128a8:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 80128ac:	4628      	mov	r0, r5
 80128ae:	3401      	adds	r4, #1
 80128b0:	b155      	cbz	r5, 80128c8 <rcutils_string_map_getn+0x44>
 80128b2:	f7ed fc9f 	bl	80001f4 <strlen>
 80128b6:	4548      	cmp	r0, r9
 80128b8:	4602      	mov	r2, r0
 80128ba:	4629      	mov	r1, r5
 80128bc:	bf38      	it	cc
 80128be:	464a      	movcc	r2, r9
 80128c0:	4640      	mov	r0, r8
 80128c2:	f002 fe92 	bl	80155ea <strncmp>
 80128c6:	b128      	cbz	r0, 80128d4 <rcutils_string_map_getn+0x50>
 80128c8:	45a2      	cmp	sl, r4
 80128ca:	d1eb      	bne.n	80128a4 <rcutils_string_map_getn+0x20>
 80128cc:	2700      	movs	r7, #0
 80128ce:	4638      	mov	r0, r7
 80128d0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80128d4:	687b      	ldr	r3, [r7, #4]
 80128d6:	f853 700b 	ldr.w	r7, [r3, fp]
 80128da:	4638      	mov	r0, r7
 80128dc:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}

080128e0 <rmw_get_zero_initialized_context>:
 80128e0:	b510      	push	{r4, lr}
 80128e2:	4604      	mov	r4, r0
 80128e4:	3010      	adds	r0, #16
 80128e6:	f7f7 fc67 	bl	800a1b8 <rmw_get_zero_initialized_init_options>
 80128ea:	2300      	movs	r3, #0
 80128ec:	2000      	movs	r0, #0
 80128ee:	2100      	movs	r1, #0
 80128f0:	e9c4 0100 	strd	r0, r1, [r4]
 80128f4:	e9c4 3312 	strd	r3, r3, [r4, #72]	@ 0x48
 80128f8:	60a3      	str	r3, [r4, #8]
 80128fa:	4620      	mov	r0, r4
 80128fc:	bd10      	pop	{r4, pc}
 80128fe:	bf00      	nop

08012900 <rmw_subscription_content_filter_options_fini>:
 8012900:	b1b0      	cbz	r0, 8012930 <rmw_subscription_content_filter_options_fini+0x30>
 8012902:	b538      	push	{r3, r4, r5, lr}
 8012904:	4604      	mov	r4, r0
 8012906:	4608      	mov	r0, r1
 8012908:	460d      	mov	r5, r1
 801290a:	f7f7 fbc3 	bl	800a094 <rcutils_allocator_is_valid>
 801290e:	b168      	cbz	r0, 801292c <rmw_subscription_content_filter_options_fini+0x2c>
 8012910:	6820      	ldr	r0, [r4, #0]
 8012912:	b120      	cbz	r0, 801291e <rmw_subscription_content_filter_options_fini+0x1e>
 8012914:	686b      	ldr	r3, [r5, #4]
 8012916:	6929      	ldr	r1, [r5, #16]
 8012918:	4798      	blx	r3
 801291a:	2300      	movs	r3, #0
 801291c:	6023      	str	r3, [r4, #0]
 801291e:	1d20      	adds	r0, r4, #4
 8012920:	f002 f972 	bl	8014c08 <rcutils_string_array_fini>
 8012924:	3800      	subs	r0, #0
 8012926:	bf18      	it	ne
 8012928:	2001      	movne	r0, #1
 801292a:	bd38      	pop	{r3, r4, r5, pc}
 801292c:	200b      	movs	r0, #11
 801292e:	bd38      	pop	{r3, r4, r5, pc}
 8012930:	200b      	movs	r0, #11
 8012932:	4770      	bx	lr

08012934 <rmw_get_default_subscription_options>:
 8012934:	2200      	movs	r2, #0
 8012936:	e9c0 2200 	strd	r2, r2, [r0]
 801293a:	6082      	str	r2, [r0, #8]
 801293c:	4770      	bx	lr
 801293e:	bf00      	nop

08012940 <rmw_time_equal>:
 8012940:	b4f0      	push	{r4, r5, r6, r7}
 8012942:	b084      	sub	sp, #16
 8012944:	ac04      	add	r4, sp, #16
 8012946:	e904 000f 	stmdb	r4, {r0, r1, r2, r3}
 801294a:	4603      	mov	r3, r0
 801294c:	4924      	ldr	r1, [pc, #144]	@ (80129e0 <rmw_time_equal+0xa0>)
 801294e:	9e03      	ldr	r6, [sp, #12]
 8012950:	e9dd 5001 	ldrd	r5, r0, [sp, #4]
 8012954:	2202      	movs	r2, #2
 8012956:	4299      	cmp	r1, r3
 8012958:	41aa      	sbcs	r2, r5
 801295a:	d330      	bcc.n	80129be <rmw_time_equal+0x7e>
 801295c:	4c21      	ldr	r4, [pc, #132]	@ (80129e4 <rmw_time_equal+0xa4>)
 801295e:	fba3 3204 	umull	r3, r2, r3, r4
 8012962:	fb04 2205 	mla	r2, r4, r5, r2
 8012966:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 801296a:	43dd      	mvns	r5, r3
 801296c:	1a8c      	subs	r4, r1, r2
 801296e:	4285      	cmp	r5, r0
 8012970:	41b4      	sbcs	r4, r6
 8012972:	d332      	bcc.n	80129da <rmw_time_equal+0x9a>
 8012974:	eb10 0c03 	adds.w	ip, r0, r3
 8012978:	eb42 0106 	adc.w	r1, r2, r6
 801297c:	e9dd 3608 	ldrd	r3, r6, [sp, #32]
 8012980:	4817      	ldr	r0, [pc, #92]	@ (80129e0 <rmw_time_equal+0xa0>)
 8012982:	9d0a      	ldr	r5, [sp, #40]	@ 0x28
 8012984:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 8012986:	2202      	movs	r2, #2
 8012988:	4298      	cmp	r0, r3
 801298a:	41b2      	sbcs	r2, r6
 801298c:	d31c      	bcc.n	80129c8 <rmw_time_equal+0x88>
 801298e:	4c15      	ldr	r4, [pc, #84]	@ (80129e4 <rmw_time_equal+0xa4>)
 8012990:	fba3 3204 	umull	r3, r2, r3, r4
 8012994:	fb04 2206 	mla	r2, r4, r6, r2
 8012998:	f06f 4000 	mvn.w	r0, #2147483648	@ 0x80000000
 801299c:	43de      	mvns	r6, r3
 801299e:	1a84      	subs	r4, r0, r2
 80129a0:	42ae      	cmp	r6, r5
 80129a2:	41bc      	sbcs	r4, r7
 80129a4:	d315      	bcc.n	80129d2 <rmw_time_equal+0x92>
 80129a6:	195b      	adds	r3, r3, r5
 80129a8:	eb42 0207 	adc.w	r2, r2, r7
 80129ac:	428a      	cmp	r2, r1
 80129ae:	bf08      	it	eq
 80129b0:	4563      	cmpeq	r3, ip
 80129b2:	bf0c      	ite	eq
 80129b4:	2001      	moveq	r0, #1
 80129b6:	2000      	movne	r0, #0
 80129b8:	b004      	add	sp, #16
 80129ba:	bcf0      	pop	{r4, r5, r6, r7}
 80129bc:	4770      	bx	lr
 80129be:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
 80129c2:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 80129c6:	e7d9      	b.n	801297c <rmw_time_equal+0x3c>
 80129c8:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80129cc:	f06f 4200 	mvn.w	r2, #2147483648	@ 0x80000000
 80129d0:	e7ec      	b.n	80129ac <rmw_time_equal+0x6c>
 80129d2:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80129d6:	4602      	mov	r2, r0
 80129d8:	e7e8      	b.n	80129ac <rmw_time_equal+0x6c>
 80129da:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
 80129de:	e7cd      	b.n	801297c <rmw_time_equal+0x3c>
 80129e0:	25c17d04 	.word	0x25c17d04
 80129e4:	3b9aca00 	.word	0x3b9aca00

080129e8 <rmw_time_total_nsec>:
 80129e8:	b470      	push	{r4, r5, r6}
 80129ea:	b085      	sub	sp, #20
 80129ec:	ac04      	add	r4, sp, #16
 80129ee:	e904 000f 	stmdb	r4, {r0, r1, r2, r3}
 80129f2:	4603      	mov	r3, r0
 80129f4:	4912      	ldr	r1, [pc, #72]	@ (8012a40 <rmw_time_total_nsec+0x58>)
 80129f6:	9e03      	ldr	r6, [sp, #12]
 80129f8:	e9dd 5001 	ldrd	r5, r0, [sp, #4]
 80129fc:	2202      	movs	r2, #2
 80129fe:	4299      	cmp	r1, r3
 8012a00:	41aa      	sbcs	r2, r5
 8012a02:	d311      	bcc.n	8012a28 <rmw_time_total_nsec+0x40>
 8012a04:	4c0f      	ldr	r4, [pc, #60]	@ (8012a44 <rmw_time_total_nsec+0x5c>)
 8012a06:	fba3 3204 	umull	r3, r2, r3, r4
 8012a0a:	fb04 2205 	mla	r2, r4, r5, r2
 8012a0e:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8012a12:	43dd      	mvns	r5, r3
 8012a14:	1a8c      	subs	r4, r1, r2
 8012a16:	4285      	cmp	r5, r0
 8012a18:	41b4      	sbcs	r4, r6
 8012a1a:	d30c      	bcc.n	8012a36 <rmw_time_total_nsec+0x4e>
 8012a1c:	1818      	adds	r0, r3, r0
 8012a1e:	eb42 0106 	adc.w	r1, r2, r6
 8012a22:	b005      	add	sp, #20
 8012a24:	bc70      	pop	{r4, r5, r6}
 8012a26:	4770      	bx	lr
 8012a28:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8012a2c:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8012a30:	b005      	add	sp, #20
 8012a32:	bc70      	pop	{r4, r5, r6}
 8012a34:	4770      	bx	lr
 8012a36:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8012a3a:	b005      	add	sp, #20
 8012a3c:	bc70      	pop	{r4, r5, r6}
 8012a3e:	4770      	bx	lr
 8012a40:	25c17d04 	.word	0x25c17d04
 8012a44:	3b9aca00 	.word	0x3b9aca00

08012a48 <rmw_get_zero_initialized_message_info>:
 8012a48:	b510      	push	{r4, lr}
 8012a4a:	2240      	movs	r2, #64	@ 0x40
 8012a4c:	4604      	mov	r4, r0
 8012a4e:	2100      	movs	r1, #0
 8012a50:	f002 fdb6 	bl	80155c0 <memset>
 8012a54:	4620      	mov	r0, r4
 8012a56:	bd10      	pop	{r4, pc}

08012a58 <rmw_validate_full_topic_name>:
 8012a58:	2800      	cmp	r0, #0
 8012a5a:	d057      	beq.n	8012b0c <rmw_validate_full_topic_name+0xb4>
 8012a5c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012a60:	460d      	mov	r5, r1
 8012a62:	2900      	cmp	r1, #0
 8012a64:	d054      	beq.n	8012b10 <rmw_validate_full_topic_name+0xb8>
 8012a66:	4616      	mov	r6, r2
 8012a68:	4604      	mov	r4, r0
 8012a6a:	f7ed fbc3 	bl	80001f4 <strlen>
 8012a6e:	b148      	cbz	r0, 8012a84 <rmw_validate_full_topic_name+0x2c>
 8012a70:	7823      	ldrb	r3, [r4, #0]
 8012a72:	2b2f      	cmp	r3, #47	@ 0x2f
 8012a74:	d00d      	beq.n	8012a92 <rmw_validate_full_topic_name+0x3a>
 8012a76:	2302      	movs	r3, #2
 8012a78:	602b      	str	r3, [r5, #0]
 8012a7a:	b13e      	cbz	r6, 8012a8c <rmw_validate_full_topic_name+0x34>
 8012a7c:	2000      	movs	r0, #0
 8012a7e:	6030      	str	r0, [r6, #0]
 8012a80:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012a84:	2301      	movs	r3, #1
 8012a86:	602b      	str	r3, [r5, #0]
 8012a88:	2e00      	cmp	r6, #0
 8012a8a:	d1f7      	bne.n	8012a7c <rmw_validate_full_topic_name+0x24>
 8012a8c:	2000      	movs	r0, #0
 8012a8e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012a92:	1e43      	subs	r3, r0, #1
 8012a94:	5ce2      	ldrb	r2, [r4, r3]
 8012a96:	2a2f      	cmp	r2, #47	@ 0x2f
 8012a98:	d03c      	beq.n	8012b14 <rmw_validate_full_topic_name+0xbc>
 8012a9a:	1e63      	subs	r3, r4, #1
 8012a9c:	eb03 0800 	add.w	r8, r3, r0
 8012aa0:	f1c4 0e01 	rsb	lr, r4, #1
 8012aa4:	eb0e 0703 	add.w	r7, lr, r3
 8012aa8:	f813 1f01 	ldrb.w	r1, [r3, #1]!
 8012aac:	f021 0220 	bic.w	r2, r1, #32
 8012ab0:	3a41      	subs	r2, #65	@ 0x41
 8012ab2:	2a19      	cmp	r2, #25
 8012ab4:	f1a1 0c2f 	sub.w	ip, r1, #47	@ 0x2f
 8012ab8:	d90b      	bls.n	8012ad2 <rmw_validate_full_topic_name+0x7a>
 8012aba:	295f      	cmp	r1, #95	@ 0x5f
 8012abc:	d009      	beq.n	8012ad2 <rmw_validate_full_topic_name+0x7a>
 8012abe:	f1bc 0f0a 	cmp.w	ip, #10
 8012ac2:	d906      	bls.n	8012ad2 <rmw_validate_full_topic_name+0x7a>
 8012ac4:	2304      	movs	r3, #4
 8012ac6:	602b      	str	r3, [r5, #0]
 8012ac8:	2e00      	cmp	r6, #0
 8012aca:	d0df      	beq.n	8012a8c <rmw_validate_full_topic_name+0x34>
 8012acc:	6037      	str	r7, [r6, #0]
 8012ace:	2000      	movs	r0, #0
 8012ad0:	e7d6      	b.n	8012a80 <rmw_validate_full_topic_name+0x28>
 8012ad2:	4543      	cmp	r3, r8
 8012ad4:	d1e6      	bne.n	8012aa4 <rmw_validate_full_topic_name+0x4c>
 8012ad6:	4f1a      	ldr	r7, [pc, #104]	@ (8012b40 <rmw_validate_full_topic_name+0xe8>)
 8012ad8:	2301      	movs	r3, #1
 8012ada:	e004      	b.n	8012ae6 <rmw_validate_full_topic_name+0x8e>
 8012adc:	4298      	cmp	r0, r3
 8012ade:	f104 0401 	add.w	r4, r4, #1
 8012ae2:	d91c      	bls.n	8012b1e <rmw_validate_full_topic_name+0xc6>
 8012ae4:	4613      	mov	r3, r2
 8012ae6:	4298      	cmp	r0, r3
 8012ae8:	f103 0201 	add.w	r2, r3, #1
 8012aec:	d0f6      	beq.n	8012adc <rmw_validate_full_topic_name+0x84>
 8012aee:	7821      	ldrb	r1, [r4, #0]
 8012af0:	292f      	cmp	r1, #47	@ 0x2f
 8012af2:	d1f3      	bne.n	8012adc <rmw_validate_full_topic_name+0x84>
 8012af4:	7861      	ldrb	r1, [r4, #1]
 8012af6:	292f      	cmp	r1, #47	@ 0x2f
 8012af8:	d01c      	beq.n	8012b34 <rmw_validate_full_topic_name+0xdc>
 8012afa:	5dc9      	ldrb	r1, [r1, r7]
 8012afc:	0749      	lsls	r1, r1, #29
 8012afe:	d5ed      	bpl.n	8012adc <rmw_validate_full_topic_name+0x84>
 8012b00:	2206      	movs	r2, #6
 8012b02:	602a      	str	r2, [r5, #0]
 8012b04:	2e00      	cmp	r6, #0
 8012b06:	d0c1      	beq.n	8012a8c <rmw_validate_full_topic_name+0x34>
 8012b08:	6033      	str	r3, [r6, #0]
 8012b0a:	e7bf      	b.n	8012a8c <rmw_validate_full_topic_name+0x34>
 8012b0c:	200b      	movs	r0, #11
 8012b0e:	4770      	bx	lr
 8012b10:	200b      	movs	r0, #11
 8012b12:	e7b5      	b.n	8012a80 <rmw_validate_full_topic_name+0x28>
 8012b14:	2203      	movs	r2, #3
 8012b16:	602a      	str	r2, [r5, #0]
 8012b18:	2e00      	cmp	r6, #0
 8012b1a:	d1f5      	bne.n	8012b08 <rmw_validate_full_topic_name+0xb0>
 8012b1c:	e7b6      	b.n	8012a8c <rmw_validate_full_topic_name+0x34>
 8012b1e:	28f7      	cmp	r0, #247	@ 0xf7
 8012b20:	d802      	bhi.n	8012b28 <rmw_validate_full_topic_name+0xd0>
 8012b22:	2000      	movs	r0, #0
 8012b24:	6028      	str	r0, [r5, #0]
 8012b26:	e7ab      	b.n	8012a80 <rmw_validate_full_topic_name+0x28>
 8012b28:	2307      	movs	r3, #7
 8012b2a:	602b      	str	r3, [r5, #0]
 8012b2c:	2e00      	cmp	r6, #0
 8012b2e:	d0ad      	beq.n	8012a8c <rmw_validate_full_topic_name+0x34>
 8012b30:	23f6      	movs	r3, #246	@ 0xf6
 8012b32:	e7e9      	b.n	8012b08 <rmw_validate_full_topic_name+0xb0>
 8012b34:	2205      	movs	r2, #5
 8012b36:	602a      	str	r2, [r5, #0]
 8012b38:	2e00      	cmp	r6, #0
 8012b3a:	d1e5      	bne.n	8012b08 <rmw_validate_full_topic_name+0xb0>
 8012b3c:	e7a6      	b.n	8012a8c <rmw_validate_full_topic_name+0x34>
 8012b3e:	bf00      	nop
 8012b40:	08017124 	.word	0x08017124

08012b44 <rmw_validate_namespace_with_size>:
 8012b44:	b340      	cbz	r0, 8012b98 <rmw_validate_namespace_with_size+0x54>
 8012b46:	b570      	push	{r4, r5, r6, lr}
 8012b48:	4614      	mov	r4, r2
 8012b4a:	b0c2      	sub	sp, #264	@ 0x108
 8012b4c:	b332      	cbz	r2, 8012b9c <rmw_validate_namespace_with_size+0x58>
 8012b4e:	2901      	cmp	r1, #1
 8012b50:	460d      	mov	r5, r1
 8012b52:	461e      	mov	r6, r3
 8012b54:	d102      	bne.n	8012b5c <rmw_validate_namespace_with_size+0x18>
 8012b56:	7803      	ldrb	r3, [r0, #0]
 8012b58:	2b2f      	cmp	r3, #47	@ 0x2f
 8012b5a:	d012      	beq.n	8012b82 <rmw_validate_namespace_with_size+0x3e>
 8012b5c:	aa01      	add	r2, sp, #4
 8012b5e:	4669      	mov	r1, sp
 8012b60:	f7ff ff7a 	bl	8012a58 <rmw_validate_full_topic_name>
 8012b64:	b978      	cbnz	r0, 8012b86 <rmw_validate_namespace_with_size+0x42>
 8012b66:	9b00      	ldr	r3, [sp, #0]
 8012b68:	b14b      	cbz	r3, 8012b7e <rmw_validate_namespace_with_size+0x3a>
 8012b6a:	2b07      	cmp	r3, #7
 8012b6c:	d007      	beq.n	8012b7e <rmw_validate_namespace_with_size+0x3a>
 8012b6e:	1e5a      	subs	r2, r3, #1
 8012b70:	2a05      	cmp	r2, #5
 8012b72:	d82b      	bhi.n	8012bcc <rmw_validate_namespace_with_size+0x88>
 8012b74:	e8df f002 	tbb	[pc, r2]
 8012b78:	1e212427 	.word	0x1e212427
 8012b7c:	141b      	.short	0x141b
 8012b7e:	2df5      	cmp	r5, #245	@ 0xf5
 8012b80:	d803      	bhi.n	8012b8a <rmw_validate_namespace_with_size+0x46>
 8012b82:	2000      	movs	r0, #0
 8012b84:	6020      	str	r0, [r4, #0]
 8012b86:	b042      	add	sp, #264	@ 0x108
 8012b88:	bd70      	pop	{r4, r5, r6, pc}
 8012b8a:	2307      	movs	r3, #7
 8012b8c:	6023      	str	r3, [r4, #0]
 8012b8e:	2e00      	cmp	r6, #0
 8012b90:	d0f9      	beq.n	8012b86 <rmw_validate_namespace_with_size+0x42>
 8012b92:	23f4      	movs	r3, #244	@ 0xf4
 8012b94:	6033      	str	r3, [r6, #0]
 8012b96:	e7f6      	b.n	8012b86 <rmw_validate_namespace_with_size+0x42>
 8012b98:	200b      	movs	r0, #11
 8012b9a:	4770      	bx	lr
 8012b9c:	200b      	movs	r0, #11
 8012b9e:	e7f2      	b.n	8012b86 <rmw_validate_namespace_with_size+0x42>
 8012ba0:	2306      	movs	r3, #6
 8012ba2:	6023      	str	r3, [r4, #0]
 8012ba4:	2e00      	cmp	r6, #0
 8012ba6:	d0ee      	beq.n	8012b86 <rmw_validate_namespace_with_size+0x42>
 8012ba8:	9b01      	ldr	r3, [sp, #4]
 8012baa:	6033      	str	r3, [r6, #0]
 8012bac:	e7eb      	b.n	8012b86 <rmw_validate_namespace_with_size+0x42>
 8012bae:	2305      	movs	r3, #5
 8012bb0:	6023      	str	r3, [r4, #0]
 8012bb2:	e7f7      	b.n	8012ba4 <rmw_validate_namespace_with_size+0x60>
 8012bb4:	2304      	movs	r3, #4
 8012bb6:	6023      	str	r3, [r4, #0]
 8012bb8:	e7f4      	b.n	8012ba4 <rmw_validate_namespace_with_size+0x60>
 8012bba:	2303      	movs	r3, #3
 8012bbc:	6023      	str	r3, [r4, #0]
 8012bbe:	e7f1      	b.n	8012ba4 <rmw_validate_namespace_with_size+0x60>
 8012bc0:	2302      	movs	r3, #2
 8012bc2:	6023      	str	r3, [r4, #0]
 8012bc4:	e7ee      	b.n	8012ba4 <rmw_validate_namespace_with_size+0x60>
 8012bc6:	2301      	movs	r3, #1
 8012bc8:	6023      	str	r3, [r4, #0]
 8012bca:	e7eb      	b.n	8012ba4 <rmw_validate_namespace_with_size+0x60>
 8012bcc:	4a03      	ldr	r2, [pc, #12]	@ (8012bdc <rmw_validate_namespace_with_size+0x98>)
 8012bce:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8012bd2:	a802      	add	r0, sp, #8
 8012bd4:	f7ff fcee 	bl	80125b4 <rcutils_snprintf>
 8012bd8:	2001      	movs	r0, #1
 8012bda:	e7d4      	b.n	8012b86 <rmw_validate_namespace_with_size+0x42>
 8012bdc:	08016d2c 	.word	0x08016d2c

08012be0 <rmw_validate_namespace>:
 8012be0:	b168      	cbz	r0, 8012bfe <rmw_validate_namespace+0x1e>
 8012be2:	b570      	push	{r4, r5, r6, lr}
 8012be4:	460d      	mov	r5, r1
 8012be6:	4616      	mov	r6, r2
 8012be8:	4604      	mov	r4, r0
 8012bea:	f7ed fb03 	bl	80001f4 <strlen>
 8012bee:	4633      	mov	r3, r6
 8012bf0:	4601      	mov	r1, r0
 8012bf2:	462a      	mov	r2, r5
 8012bf4:	4620      	mov	r0, r4
 8012bf6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8012bfa:	f7ff bfa3 	b.w	8012b44 <rmw_validate_namespace_with_size>
 8012bfe:	200b      	movs	r0, #11
 8012c00:	4770      	bx	lr
 8012c02:	bf00      	nop

08012c04 <rmw_namespace_validation_result_string>:
 8012c04:	2807      	cmp	r0, #7
 8012c06:	bf9a      	itte	ls
 8012c08:	4b02      	ldrls	r3, [pc, #8]	@ (8012c14 <rmw_namespace_validation_result_string+0x10>)
 8012c0a:	f853 0020 	ldrls.w	r0, [r3, r0, lsl #2]
 8012c0e:	4802      	ldrhi	r0, [pc, #8]	@ (8012c18 <rmw_namespace_validation_result_string+0x14>)
 8012c10:	4770      	bx	lr
 8012c12:	bf00      	nop
 8012c14:	08016f24 	.word	0x08016f24
 8012c18:	08016d7c 	.word	0x08016d7c

08012c1c <rmw_validate_node_name>:
 8012c1c:	2800      	cmp	r0, #0
 8012c1e:	d03b      	beq.n	8012c98 <rmw_validate_node_name+0x7c>
 8012c20:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012c24:	460d      	mov	r5, r1
 8012c26:	2900      	cmp	r1, #0
 8012c28:	d038      	beq.n	8012c9c <rmw_validate_node_name+0x80>
 8012c2a:	4616      	mov	r6, r2
 8012c2c:	4604      	mov	r4, r0
 8012c2e:	f7ed fae1 	bl	80001f4 <strlen>
 8012c32:	b1e0      	cbz	r0, 8012c6e <rmw_validate_node_name+0x52>
 8012c34:	1e63      	subs	r3, r4, #1
 8012c36:	eb03 0800 	add.w	r8, r3, r0
 8012c3a:	f1c4 0101 	rsb	r1, r4, #1
 8012c3e:	18cf      	adds	r7, r1, r3
 8012c40:	f813 ef01 	ldrb.w	lr, [r3, #1]!
 8012c44:	f1ae 0230 	sub.w	r2, lr, #48	@ 0x30
 8012c48:	f02e 0c20 	bic.w	ip, lr, #32
 8012c4c:	2a09      	cmp	r2, #9
 8012c4e:	f1ac 0c41 	sub.w	ip, ip, #65	@ 0x41
 8012c52:	d914      	bls.n	8012c7e <rmw_validate_node_name+0x62>
 8012c54:	f1bc 0f19 	cmp.w	ip, #25
 8012c58:	d911      	bls.n	8012c7e <rmw_validate_node_name+0x62>
 8012c5a:	f1be 0f5f 	cmp.w	lr, #95	@ 0x5f
 8012c5e:	d00e      	beq.n	8012c7e <rmw_validate_node_name+0x62>
 8012c60:	2302      	movs	r3, #2
 8012c62:	602b      	str	r3, [r5, #0]
 8012c64:	b106      	cbz	r6, 8012c68 <rmw_validate_node_name+0x4c>
 8012c66:	6037      	str	r7, [r6, #0]
 8012c68:	2000      	movs	r0, #0
 8012c6a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012c6e:	2301      	movs	r3, #1
 8012c70:	602b      	str	r3, [r5, #0]
 8012c72:	2e00      	cmp	r6, #0
 8012c74:	d0f8      	beq.n	8012c68 <rmw_validate_node_name+0x4c>
 8012c76:	2000      	movs	r0, #0
 8012c78:	6030      	str	r0, [r6, #0]
 8012c7a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012c7e:	4543      	cmp	r3, r8
 8012c80:	d1dd      	bne.n	8012c3e <rmw_validate_node_name+0x22>
 8012c82:	7822      	ldrb	r2, [r4, #0]
 8012c84:	4b0d      	ldr	r3, [pc, #52]	@ (8012cbc <rmw_validate_node_name+0xa0>)
 8012c86:	5cd3      	ldrb	r3, [r2, r3]
 8012c88:	f013 0304 	ands.w	r3, r3, #4
 8012c8c:	d110      	bne.n	8012cb0 <rmw_validate_node_name+0x94>
 8012c8e:	28ff      	cmp	r0, #255	@ 0xff
 8012c90:	d806      	bhi.n	8012ca0 <rmw_validate_node_name+0x84>
 8012c92:	602b      	str	r3, [r5, #0]
 8012c94:	4618      	mov	r0, r3
 8012c96:	e7e8      	b.n	8012c6a <rmw_validate_node_name+0x4e>
 8012c98:	200b      	movs	r0, #11
 8012c9a:	4770      	bx	lr
 8012c9c:	200b      	movs	r0, #11
 8012c9e:	e7e4      	b.n	8012c6a <rmw_validate_node_name+0x4e>
 8012ca0:	2204      	movs	r2, #4
 8012ca2:	602a      	str	r2, [r5, #0]
 8012ca4:	2e00      	cmp	r6, #0
 8012ca6:	d0df      	beq.n	8012c68 <rmw_validate_node_name+0x4c>
 8012ca8:	22fe      	movs	r2, #254	@ 0xfe
 8012caa:	6032      	str	r2, [r6, #0]
 8012cac:	4618      	mov	r0, r3
 8012cae:	e7dc      	b.n	8012c6a <rmw_validate_node_name+0x4e>
 8012cb0:	2303      	movs	r3, #3
 8012cb2:	602b      	str	r3, [r5, #0]
 8012cb4:	2e00      	cmp	r6, #0
 8012cb6:	d1de      	bne.n	8012c76 <rmw_validate_node_name+0x5a>
 8012cb8:	e7d6      	b.n	8012c68 <rmw_validate_node_name+0x4c>
 8012cba:	bf00      	nop
 8012cbc:	08017124 	.word	0x08017124

08012cc0 <rmw_node_name_validation_result_string>:
 8012cc0:	2804      	cmp	r0, #4
 8012cc2:	bf9a      	itte	ls
 8012cc4:	4b02      	ldrls	r3, [pc, #8]	@ (8012cd0 <rmw_node_name_validation_result_string+0x10>)
 8012cc6:	f853 0020 	ldrls.w	r0, [r3, r0, lsl #2]
 8012cca:	4802      	ldrhi	r0, [pc, #8]	@ (8012cd4 <rmw_node_name_validation_result_string+0x14>)
 8012ccc:	4770      	bx	lr
 8012cce:	bf00      	nop
 8012cd0:	08017030 	.word	0x08017030
 8012cd4:	08016f44 	.word	0x08016f44

08012cd8 <on_status>:
 8012cd8:	b082      	sub	sp, #8
 8012cda:	b002      	add	sp, #8
 8012cdc:	4770      	bx	lr
 8012cde:	bf00      	nop

08012ce0 <on_topic>:
 8012ce0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012ce4:	4a22      	ldr	r2, [pc, #136]	@ (8012d70 <on_topic+0x90>)
 8012ce6:	b094      	sub	sp, #80	@ 0x50
 8012ce8:	6812      	ldr	r2, [r2, #0]
 8012cea:	9d1a      	ldr	r5, [sp, #104]	@ 0x68
 8012cec:	f8bd 606c 	ldrh.w	r6, [sp, #108]	@ 0x6c
 8012cf0:	e9cd 3112 	strd	r3, r1, [sp, #72]	@ 0x48
 8012cf4:	b3c2      	cbz	r2, 8012d68 <on_topic+0x88>
 8012cf6:	f8bd 104c 	ldrh.w	r1, [sp, #76]	@ 0x4c
 8012cfa:	f89d 004e 	ldrb.w	r0, [sp, #78]	@ 0x4e
 8012cfe:	e001      	b.n	8012d04 <on_topic+0x24>
 8012d00:	6852      	ldr	r2, [r2, #4]
 8012d02:	b38a      	cbz	r2, 8012d68 <on_topic+0x88>
 8012d04:	6894      	ldr	r4, [r2, #8]
 8012d06:	8aa3      	ldrh	r3, [r4, #20]
 8012d08:	428b      	cmp	r3, r1
 8012d0a:	d1f9      	bne.n	8012d00 <on_topic+0x20>
 8012d0c:	7da3      	ldrb	r3, [r4, #22]
 8012d0e:	4283      	cmp	r3, r0
 8012d10:	d1f6      	bne.n	8012d00 <on_topic+0x20>
 8012d12:	2248      	movs	r2, #72	@ 0x48
 8012d14:	f104 0130 	add.w	r1, r4, #48	@ 0x30
 8012d18:	4668      	mov	r0, sp
 8012d1a:	f002 fd1a 	bl	8015752 <memcpy>
 8012d1e:	f104 0328 	add.w	r3, r4, #40	@ 0x28
 8012d22:	cb0c      	ldmia	r3, {r2, r3}
 8012d24:	4620      	mov	r0, r4
 8012d26:	f7f8 f9c7 	bl	800b0b8 <rmw_uxrce_get_static_input_buffer_for_entity>
 8012d2a:	4607      	mov	r7, r0
 8012d2c:	b1e0      	cbz	r0, 8012d68 <on_topic+0x88>
 8012d2e:	f8d0 8008 	ldr.w	r8, [r0, #8]
 8012d32:	4632      	mov	r2, r6
 8012d34:	4628      	mov	r0, r5
 8012d36:	f108 0110 	add.w	r1, r8, #16
 8012d3a:	f000 fddb 	bl	80138f4 <ucdr_deserialize_array_uint8_t>
 8012d3e:	b930      	cbnz	r0, 8012d4e <on_topic+0x6e>
 8012d40:	480c      	ldr	r0, [pc, #48]	@ (8012d74 <on_topic+0x94>)
 8012d42:	4639      	mov	r1, r7
 8012d44:	b014      	add	sp, #80	@ 0x50
 8012d46:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8012d4a:	f000 b8bd 	b.w	8012ec8 <put_memory>
 8012d4e:	f8c8 4814 	str.w	r4, [r8, #2068]	@ 0x814
 8012d52:	f8c8 6810 	str.w	r6, [r8, #2064]	@ 0x810
 8012d56:	f000 fcc3 	bl	80136e0 <rmw_uros_epoch_nanos>
 8012d5a:	f508 6202 	add.w	r2, r8, #2080	@ 0x820
 8012d5e:	2305      	movs	r3, #5
 8012d60:	e942 0102 	strd	r0, r1, [r2, #-8]
 8012d64:	f888 3820 	strb.w	r3, [r8, #2080]	@ 0x820
 8012d68:	b014      	add	sp, #80	@ 0x50
 8012d6a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012d6e:	bf00      	nop
 8012d70:	2000da7c 	.word	0x2000da7c
 8012d74:	2000da6c 	.word	0x2000da6c

08012d78 <on_request>:
 8012d78:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012d7c:	4823      	ldr	r0, [pc, #140]	@ (8012e0c <on_request+0x94>)
 8012d7e:	b094      	sub	sp, #80	@ 0x50
 8012d80:	6800      	ldr	r0, [r0, #0]
 8012d82:	9f1a      	ldr	r7, [sp, #104]	@ 0x68
 8012d84:	f8bd 606c 	ldrh.w	r6, [sp, #108]	@ 0x6c
 8012d88:	9113      	str	r1, [sp, #76]	@ 0x4c
 8012d8a:	2800      	cmp	r0, #0
 8012d8c:	d03b      	beq.n	8012e06 <on_request+0x8e>
 8012d8e:	461d      	mov	r5, r3
 8012d90:	e001      	b.n	8012d96 <on_request+0x1e>
 8012d92:	6840      	ldr	r0, [r0, #4]
 8012d94:	b3b8      	cbz	r0, 8012e06 <on_request+0x8e>
 8012d96:	6884      	ldr	r4, [r0, #8]
 8012d98:	8b21      	ldrh	r1, [r4, #24]
 8012d9a:	4291      	cmp	r1, r2
 8012d9c:	d1f9      	bne.n	8012d92 <on_request+0x1a>
 8012d9e:	2248      	movs	r2, #72	@ 0x48
 8012da0:	f104 0128 	add.w	r1, r4, #40	@ 0x28
 8012da4:	4668      	mov	r0, sp
 8012da6:	f002 fcd4 	bl	8015752 <memcpy>
 8012daa:	f104 0320 	add.w	r3, r4, #32
 8012dae:	cb0c      	ldmia	r3, {r2, r3}
 8012db0:	4620      	mov	r0, r4
 8012db2:	f7f8 f981 	bl	800b0b8 <rmw_uxrce_get_static_input_buffer_for_entity>
 8012db6:	4680      	mov	r8, r0
 8012db8:	b328      	cbz	r0, 8012e06 <on_request+0x8e>
 8012dba:	4638      	mov	r0, r7
 8012dbc:	f8d8 7008 	ldr.w	r7, [r8, #8]
 8012dc0:	4632      	mov	r2, r6
 8012dc2:	f107 0110 	add.w	r1, r7, #16
 8012dc6:	f000 fd95 	bl	80138f4 <ucdr_deserialize_array_uint8_t>
 8012dca:	b930      	cbnz	r0, 8012dda <on_request+0x62>
 8012dcc:	4810      	ldr	r0, [pc, #64]	@ (8012e10 <on_request+0x98>)
 8012dce:	4641      	mov	r1, r8
 8012dd0:	b014      	add	sp, #80	@ 0x50
 8012dd2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8012dd6:	f000 b877 	b.w	8012ec8 <put_memory>
 8012dda:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8012ddc:	f607 0c28 	addw	ip, r7, #2088	@ 0x828
 8012de0:	f8c7 4814 	str.w	r4, [r7, #2068]	@ 0x814
 8012de4:	f8c7 6810 	str.w	r6, [r7, #2064]	@ 0x810
 8012de8:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8012dec:	e895 0003 	ldmia.w	r5, {r0, r1}
 8012df0:	e88c 0003 	stmia.w	ip, {r0, r1}
 8012df4:	f000 fc74 	bl	80136e0 <rmw_uros_epoch_nanos>
 8012df8:	f507 6202 	add.w	r2, r7, #2080	@ 0x820
 8012dfc:	2303      	movs	r3, #3
 8012dfe:	e942 0102 	strd	r0, r1, [r2, #-8]
 8012e02:	f887 3820 	strb.w	r3, [r7, #2080]	@ 0x820
 8012e06:	b014      	add	sp, #80	@ 0x50
 8012e08:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012e0c:	2000da4c 	.word	0x2000da4c
 8012e10:	2000da6c 	.word	0x2000da6c

08012e14 <on_reply>:
 8012e14:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012e18:	4821      	ldr	r0, [pc, #132]	@ (8012ea0 <on_reply+0x8c>)
 8012e1a:	b094      	sub	sp, #80	@ 0x50
 8012e1c:	6800      	ldr	r0, [r0, #0]
 8012e1e:	9f1a      	ldr	r7, [sp, #104]	@ 0x68
 8012e20:	f8bd 606c 	ldrh.w	r6, [sp, #108]	@ 0x6c
 8012e24:	9113      	str	r1, [sp, #76]	@ 0x4c
 8012e26:	b3b8      	cbz	r0, 8012e98 <on_reply+0x84>
 8012e28:	461d      	mov	r5, r3
 8012e2a:	e001      	b.n	8012e30 <on_reply+0x1c>
 8012e2c:	6840      	ldr	r0, [r0, #4]
 8012e2e:	b398      	cbz	r0, 8012e98 <on_reply+0x84>
 8012e30:	6884      	ldr	r4, [r0, #8]
 8012e32:	8b21      	ldrh	r1, [r4, #24]
 8012e34:	4291      	cmp	r1, r2
 8012e36:	d1f9      	bne.n	8012e2c <on_reply+0x18>
 8012e38:	2248      	movs	r2, #72	@ 0x48
 8012e3a:	f104 0128 	add.w	r1, r4, #40	@ 0x28
 8012e3e:	4668      	mov	r0, sp
 8012e40:	f002 fc87 	bl	8015752 <memcpy>
 8012e44:	f104 0320 	add.w	r3, r4, #32
 8012e48:	cb0c      	ldmia	r3, {r2, r3}
 8012e4a:	4620      	mov	r0, r4
 8012e4c:	f7f8 f934 	bl	800b0b8 <rmw_uxrce_get_static_input_buffer_for_entity>
 8012e50:	4680      	mov	r8, r0
 8012e52:	b308      	cbz	r0, 8012e98 <on_reply+0x84>
 8012e54:	4638      	mov	r0, r7
 8012e56:	f8d8 7008 	ldr.w	r7, [r8, #8]
 8012e5a:	4632      	mov	r2, r6
 8012e5c:	f107 0110 	add.w	r1, r7, #16
 8012e60:	f000 fd48 	bl	80138f4 <ucdr_deserialize_array_uint8_t>
 8012e64:	b930      	cbnz	r0, 8012e74 <on_reply+0x60>
 8012e66:	480f      	ldr	r0, [pc, #60]	@ (8012ea4 <on_reply+0x90>)
 8012e68:	4641      	mov	r1, r8
 8012e6a:	b014      	add	sp, #80	@ 0x50
 8012e6c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8012e70:	f000 b82a 	b.w	8012ec8 <put_memory>
 8012e74:	2200      	movs	r2, #0
 8012e76:	f8c7 282c 	str.w	r2, [r7, #2092]	@ 0x82c
 8012e7a:	f8c7 4814 	str.w	r4, [r7, #2068]	@ 0x814
 8012e7e:	f8c7 6810 	str.w	r6, [r7, #2064]	@ 0x810
 8012e82:	f8c7 5828 	str.w	r5, [r7, #2088]	@ 0x828
 8012e86:	f000 fc2b 	bl	80136e0 <rmw_uros_epoch_nanos>
 8012e8a:	f507 6202 	add.w	r2, r7, #2080	@ 0x820
 8012e8e:	2304      	movs	r3, #4
 8012e90:	e942 0102 	strd	r0, r1, [r2, #-8]
 8012e94:	f887 3820 	strb.w	r3, [r7, #2080]	@ 0x820
 8012e98:	b014      	add	sp, #80	@ 0x50
 8012e9a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012e9e:	bf00      	nop
 8012ea0:	2000915c 	.word	0x2000915c
 8012ea4:	2000da6c 	.word	0x2000da6c

08012ea8 <get_memory>:
 8012ea8:	4603      	mov	r3, r0
 8012eaa:	6840      	ldr	r0, [r0, #4]
 8012eac:	b158      	cbz	r0, 8012ec6 <get_memory+0x1e>
 8012eae:	6842      	ldr	r2, [r0, #4]
 8012eb0:	605a      	str	r2, [r3, #4]
 8012eb2:	b10a      	cbz	r2, 8012eb8 <get_memory+0x10>
 8012eb4:	2100      	movs	r1, #0
 8012eb6:	6011      	str	r1, [r2, #0]
 8012eb8:	681a      	ldr	r2, [r3, #0]
 8012eba:	6042      	str	r2, [r0, #4]
 8012ebc:	b102      	cbz	r2, 8012ec0 <get_memory+0x18>
 8012ebe:	6010      	str	r0, [r2, #0]
 8012ec0:	2200      	movs	r2, #0
 8012ec2:	6002      	str	r2, [r0, #0]
 8012ec4:	6018      	str	r0, [r3, #0]
 8012ec6:	4770      	bx	lr

08012ec8 <put_memory>:
 8012ec8:	680b      	ldr	r3, [r1, #0]
 8012eca:	b10b      	cbz	r3, 8012ed0 <put_memory+0x8>
 8012ecc:	684a      	ldr	r2, [r1, #4]
 8012ece:	605a      	str	r2, [r3, #4]
 8012ed0:	684a      	ldr	r2, [r1, #4]
 8012ed2:	b102      	cbz	r2, 8012ed6 <put_memory+0xe>
 8012ed4:	6013      	str	r3, [r2, #0]
 8012ed6:	6803      	ldr	r3, [r0, #0]
 8012ed8:	428b      	cmp	r3, r1
 8012eda:	6843      	ldr	r3, [r0, #4]
 8012edc:	bf08      	it	eq
 8012ede:	6002      	streq	r2, [r0, #0]
 8012ee0:	604b      	str	r3, [r1, #4]
 8012ee2:	b103      	cbz	r3, 8012ee6 <put_memory+0x1e>
 8012ee4:	6019      	str	r1, [r3, #0]
 8012ee6:	2300      	movs	r3, #0
 8012ee8:	600b      	str	r3, [r1, #0]
 8012eea:	6041      	str	r1, [r0, #4]
 8012eec:	4770      	bx	lr
 8012eee:	bf00      	nop

08012ef0 <rmw_destroy_client>:
 8012ef0:	b570      	push	{r4, r5, r6, lr}
 8012ef2:	b128      	cbz	r0, 8012f00 <rmw_destroy_client+0x10>
 8012ef4:	4604      	mov	r4, r0
 8012ef6:	6800      	ldr	r0, [r0, #0]
 8012ef8:	460d      	mov	r5, r1
 8012efa:	f7f8 fa53 	bl	800b3a4 <is_uxrce_rmw_identifier_valid>
 8012efe:	b910      	cbnz	r0, 8012f06 <rmw_destroy_client+0x16>
 8012f00:	2401      	movs	r4, #1
 8012f02:	4620      	mov	r0, r4
 8012f04:	bd70      	pop	{r4, r5, r6, pc}
 8012f06:	6863      	ldr	r3, [r4, #4]
 8012f08:	2b00      	cmp	r3, #0
 8012f0a:	d0f9      	beq.n	8012f00 <rmw_destroy_client+0x10>
 8012f0c:	2d00      	cmp	r5, #0
 8012f0e:	d0f7      	beq.n	8012f00 <rmw_destroy_client+0x10>
 8012f10:	6828      	ldr	r0, [r5, #0]
 8012f12:	f7f8 fa47 	bl	800b3a4 <is_uxrce_rmw_identifier_valid>
 8012f16:	2800      	cmp	r0, #0
 8012f18:	d0f2      	beq.n	8012f00 <rmw_destroy_client+0x10>
 8012f1a:	686e      	ldr	r6, [r5, #4]
 8012f1c:	2e00      	cmp	r6, #0
 8012f1e:	d0ef      	beq.n	8012f00 <rmw_destroy_client+0x10>
 8012f20:	6864      	ldr	r4, [r4, #4]
 8012f22:	6932      	ldr	r2, [r6, #16]
 8012f24:	6920      	ldr	r0, [r4, #16]
 8012f26:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 8012f2a:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8012f2e:	6819      	ldr	r1, [r3, #0]
 8012f30:	f7f9 fd7c 	bl	800ca2c <uxr_buffer_cancel_data>
 8012f34:	4602      	mov	r2, r0
 8012f36:	6920      	ldr	r0, [r4, #16]
 8012f38:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 8012f3c:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 8012f40:	f7f8 f9b0 	bl	800b2a4 <run_xrce_session>
 8012f44:	6920      	ldr	r0, [r4, #16]
 8012f46:	6932      	ldr	r2, [r6, #16]
 8012f48:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 8012f4c:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8012f50:	6819      	ldr	r1, [r3, #0]
 8012f52:	f7f9 fae3 	bl	800c51c <uxr_buffer_delete_entity>
 8012f56:	4602      	mov	r2, r0
 8012f58:	6920      	ldr	r0, [r4, #16]
 8012f5a:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 8012f5e:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 8012f62:	f7f8 f99f 	bl	800b2a4 <run_xrce_session>
 8012f66:	2800      	cmp	r0, #0
 8012f68:	4628      	mov	r0, r5
 8012f6a:	bf14      	ite	ne
 8012f6c:	2400      	movne	r4, #0
 8012f6e:	2402      	moveq	r4, #2
 8012f70:	f7f8 f880 	bl	800b074 <rmw_uxrce_fini_client_memory>
 8012f74:	e7c5      	b.n	8012f02 <rmw_destroy_client+0x12>
 8012f76:	bf00      	nop

08012f78 <rmw_get_implementation_identifier>:
 8012f78:	4b01      	ldr	r3, [pc, #4]	@ (8012f80 <rmw_get_implementation_identifier+0x8>)
 8012f7a:	6818      	ldr	r0, [r3, #0]
 8012f7c:	4770      	bx	lr
 8012f7e:	bf00      	nop
 8012f80:	0801705c 	.word	0x0801705c

08012f84 <create_topic>:
 8012f84:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012f88:	4605      	mov	r5, r0
 8012f8a:	b084      	sub	sp, #16
 8012f8c:	4822      	ldr	r0, [pc, #136]	@ (8013018 <create_topic+0x94>)
 8012f8e:	460f      	mov	r7, r1
 8012f90:	4616      	mov	r6, r2
 8012f92:	f7ff ff89 	bl	8012ea8 <get_memory>
 8012f96:	4604      	mov	r4, r0
 8012f98:	2800      	cmp	r0, #0
 8012f9a:	d039      	beq.n	8013010 <create_topic+0x8c>
 8012f9c:	692b      	ldr	r3, [r5, #16]
 8012f9e:	6884      	ldr	r4, [r0, #8]
 8012fa0:	f8df 807c 	ldr.w	r8, [pc, #124]	@ 8013020 <create_topic+0x9c>
 8012fa4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8012fa8:	e9c4 6505 	strd	r6, r5, [r4, #20]
 8012fac:	f8b3 0596 	ldrh.w	r0, [r3, #1430]	@ 0x596
 8012fb0:	1c42      	adds	r2, r0, #1
 8012fb2:	2102      	movs	r1, #2
 8012fb4:	f8a3 2596 	strh.w	r2, [r3, #1430]	@ 0x596
 8012fb8:	f7f9 fcce 	bl	800c958 <uxr_object_id>
 8012fbc:	223c      	movs	r2, #60	@ 0x3c
 8012fbe:	6120      	str	r0, [r4, #16]
 8012fc0:	4641      	mov	r1, r8
 8012fc2:	4638      	mov	r0, r7
 8012fc4:	f7f8 f9d4 	bl	800b370 <generate_topic_name>
 8012fc8:	b1f0      	cbz	r0, 8013008 <create_topic+0x84>
 8012fca:	4f14      	ldr	r7, [pc, #80]	@ (801301c <create_topic+0x98>)
 8012fcc:	4630      	mov	r0, r6
 8012fce:	2264      	movs	r2, #100	@ 0x64
 8012fd0:	4639      	mov	r1, r7
 8012fd2:	f7f8 f99d 	bl	800b310 <generate_type_name>
 8012fd6:	b1b8      	cbz	r0, 8013008 <create_topic+0x84>
 8012fd8:	6928      	ldr	r0, [r5, #16]
 8012fda:	2306      	movs	r3, #6
 8012fdc:	f8d0 2384 	ldr.w	r2, [r0, #900]	@ 0x384
 8012fe0:	f8cd 8000 	str.w	r8, [sp]
 8012fe4:	e9cd 7301 	strd	r7, r3, [sp, #4]
 8012fe8:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8012fec:	6811      	ldr	r1, [r2, #0]
 8012fee:	696b      	ldr	r3, [r5, #20]
 8012ff0:	6922      	ldr	r2, [r4, #16]
 8012ff2:	f7f9 fb11 	bl	800c618 <uxr_buffer_create_topic_bin>
 8012ff6:	4602      	mov	r2, r0
 8012ff8:	6928      	ldr	r0, [r5, #16]
 8012ffa:	f8d0 338c 	ldr.w	r3, [r0, #908]	@ 0x38c
 8012ffe:	f8d0 1384 	ldr.w	r1, [r0, #900]	@ 0x384
 8013002:	f7f8 f94f 	bl	800b2a4 <run_xrce_session>
 8013006:	b918      	cbnz	r0, 8013010 <create_topic+0x8c>
 8013008:	4620      	mov	r0, r4
 801300a:	f7f8 f849 	bl	800b0a0 <rmw_uxrce_fini_topic_memory>
 801300e:	2400      	movs	r4, #0
 8013010:	4620      	mov	r0, r4
 8013012:	b004      	add	sp, #16
 8013014:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013018:	2000da8c 	.word	0x2000da8c
 801301c:	2000db80 	.word	0x2000db80
 8013020:	2000db44 	.word	0x2000db44

08013024 <destroy_topic>:
 8013024:	b538      	push	{r3, r4, r5, lr}
 8013026:	6985      	ldr	r5, [r0, #24]
 8013028:	b1d5      	cbz	r5, 8013060 <destroy_topic+0x3c>
 801302a:	4604      	mov	r4, r0
 801302c:	6928      	ldr	r0, [r5, #16]
 801302e:	6922      	ldr	r2, [r4, #16]
 8013030:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 8013034:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8013038:	6819      	ldr	r1, [r3, #0]
 801303a:	f7f9 fa6f 	bl	800c51c <uxr_buffer_delete_entity>
 801303e:	4602      	mov	r2, r0
 8013040:	6928      	ldr	r0, [r5, #16]
 8013042:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 8013046:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 801304a:	f7f8 f92b 	bl	800b2a4 <run_xrce_session>
 801304e:	2800      	cmp	r0, #0
 8013050:	4620      	mov	r0, r4
 8013052:	bf14      	ite	ne
 8013054:	2400      	movne	r4, #0
 8013056:	2402      	moveq	r4, #2
 8013058:	f7f8 f822 	bl	800b0a0 <rmw_uxrce_fini_topic_memory>
 801305c:	4620      	mov	r0, r4
 801305e:	bd38      	pop	{r3, r4, r5, pc}
 8013060:	2401      	movs	r4, #1
 8013062:	4620      	mov	r0, r4
 8013064:	bd38      	pop	{r3, r4, r5, pc}
 8013066:	bf00      	nop

08013068 <rmw_send_request>:
 8013068:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801306c:	4604      	mov	r4, r0
 801306e:	6800      	ldr	r0, [r0, #0]
 8013070:	b08b      	sub	sp, #44	@ 0x2c
 8013072:	460e      	mov	r6, r1
 8013074:	4615      	mov	r5, r2
 8013076:	b128      	cbz	r0, 8013084 <rmw_send_request+0x1c>
 8013078:	4b21      	ldr	r3, [pc, #132]	@ (8013100 <rmw_send_request+0x98>)
 801307a:	6819      	ldr	r1, [r3, #0]
 801307c:	f7ed f8b0 	bl	80001e0 <strcmp>
 8013080:	2800      	cmp	r0, #0
 8013082:	d139      	bne.n	80130f8 <rmw_send_request+0x90>
 8013084:	6864      	ldr	r4, [r4, #4]
 8013086:	6963      	ldr	r3, [r4, #20]
 8013088:	f8d4 8078 	ldr.w	r8, [r4, #120]	@ 0x78
 801308c:	689b      	ldr	r3, [r3, #8]
 801308e:	4798      	blx	r3
 8013090:	f8d0 9004 	ldr.w	r9, [r0, #4]
 8013094:	4630      	mov	r0, r6
 8013096:	f8d9 3010 	ldr.w	r3, [r9, #16]
 801309a:	4798      	blx	r3
 801309c:	f8d8 3010 	ldr.w	r3, [r8, #16]
 80130a0:	9000      	str	r0, [sp, #0]
 80130a2:	6922      	ldr	r2, [r4, #16]
 80130a4:	6f21      	ldr	r1, [r4, #112]	@ 0x70
 80130a6:	f503 7028 	add.w	r0, r3, #672	@ 0x2a0
 80130aa:	ab02      	add	r3, sp, #8
 80130ac:	f001 fa3e 	bl	801452c <uxr_prepare_output_stream>
 80130b0:	2700      	movs	r7, #0
 80130b2:	6028      	str	r0, [r5, #0]
 80130b4:	606f      	str	r7, [r5, #4]
 80130b6:	b198      	cbz	r0, 80130e0 <rmw_send_request+0x78>
 80130b8:	f8d9 3008 	ldr.w	r3, [r9, #8]
 80130bc:	a902      	add	r1, sp, #8
 80130be:	4630      	mov	r0, r6
 80130c0:	4798      	blx	r3
 80130c2:	f894 3072 	ldrb.w	r3, [r4, #114]	@ 0x72
 80130c6:	f8d8 0010 	ldr.w	r0, [r8, #16]
 80130ca:	2b01      	cmp	r3, #1
 80130cc:	d00c      	beq.n	80130e8 <rmw_send_request+0x80>
 80130ce:	6f61      	ldr	r1, [r4, #116]	@ 0x74
 80130d0:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 80130d4:	f7fa fa80 	bl	800d5d8 <uxr_run_session_until_confirm_delivery>
 80130d8:	4638      	mov	r0, r7
 80130da:	b00b      	add	sp, #44	@ 0x2c
 80130dc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80130e0:	2001      	movs	r0, #1
 80130e2:	b00b      	add	sp, #44	@ 0x2c
 80130e4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80130e8:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 80130ec:	f7f9 feb4 	bl	800ce58 <uxr_flash_output_streams>
 80130f0:	4638      	mov	r0, r7
 80130f2:	b00b      	add	sp, #44	@ 0x2c
 80130f4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80130f8:	200c      	movs	r0, #12
 80130fa:	b00b      	add	sp, #44	@ 0x2c
 80130fc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8013100:	0801705c 	.word	0x0801705c

08013104 <rmw_take_request>:
 8013104:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8013108:	4605      	mov	r5, r0
 801310a:	6800      	ldr	r0, [r0, #0]
 801310c:	b089      	sub	sp, #36	@ 0x24
 801310e:	460c      	mov	r4, r1
 8013110:	4690      	mov	r8, r2
 8013112:	461e      	mov	r6, r3
 8013114:	b128      	cbz	r0, 8013122 <rmw_take_request+0x1e>
 8013116:	4b28      	ldr	r3, [pc, #160]	@ (80131b8 <rmw_take_request+0xb4>)
 8013118:	6819      	ldr	r1, [r3, #0]
 801311a:	f7ed f861 	bl	80001e0 <strcmp>
 801311e:	2800      	cmp	r0, #0
 8013120:	d146      	bne.n	80131b0 <rmw_take_request+0xac>
 8013122:	b10e      	cbz	r6, 8013128 <rmw_take_request+0x24>
 8013124:	2300      	movs	r3, #0
 8013126:	7033      	strb	r3, [r6, #0]
 8013128:	f8d5 9004 	ldr.w	r9, [r5, #4]
 801312c:	f7f8 f83c 	bl	800b1a8 <rmw_uxrce_clean_expired_static_input_buffer>
 8013130:	4648      	mov	r0, r9
 8013132:	f7f8 f811 	bl	800b158 <rmw_uxrce_find_static_input_buffer_by_owner>
 8013136:	4607      	mov	r7, r0
 8013138:	b3b0      	cbz	r0, 80131a8 <rmw_take_request+0xa4>
 801313a:	6885      	ldr	r5, [r0, #8]
 801313c:	f8d5 3838 	ldr.w	r3, [r5, #2104]	@ 0x838
 8013140:	f8d5 283c 	ldr.w	r2, [r5, #2108]	@ 0x83c
 8013144:	e9c4 2308 	strd	r2, r3, [r4, #32]
 8013148:	f895 3837 	ldrb.w	r3, [r5, #2103]	@ 0x837
 801314c:	7423      	strb	r3, [r4, #16]
 801314e:	f8b5 3834 	ldrh.w	r3, [r5, #2100]	@ 0x834
 8013152:	f895 2836 	ldrb.w	r2, [r5, #2102]	@ 0x836
 8013156:	74e2      	strb	r2, [r4, #19]
 8013158:	f8a4 3011 	strh.w	r3, [r4, #17]
 801315c:	f8d5 2828 	ldr.w	r2, [r5, #2088]	@ 0x828
 8013160:	f8d5 382c 	ldr.w	r3, [r5, #2092]	@ 0x82c
 8013164:	f8d5 1830 	ldr.w	r1, [r5, #2096]	@ 0x830
 8013168:	61e1      	str	r1, [r4, #28]
 801316a:	6162      	str	r2, [r4, #20]
 801316c:	61a3      	str	r3, [r4, #24]
 801316e:	f8d9 3014 	ldr.w	r3, [r9, #20]
 8013172:	689b      	ldr	r3, [r3, #8]
 8013174:	4798      	blx	r3
 8013176:	6844      	ldr	r4, [r0, #4]
 8013178:	f8d5 2810 	ldr.w	r2, [r5, #2064]	@ 0x810
 801317c:	f105 0110 	add.w	r1, r5, #16
 8013180:	4668      	mov	r0, sp
 8013182:	f7f9 f95b 	bl	800c43c <ucdr_init_buffer>
 8013186:	68e3      	ldr	r3, [r4, #12]
 8013188:	4641      	mov	r1, r8
 801318a:	4668      	mov	r0, sp
 801318c:	4798      	blx	r3
 801318e:	4639      	mov	r1, r7
 8013190:	4604      	mov	r4, r0
 8013192:	480a      	ldr	r0, [pc, #40]	@ (80131bc <rmw_take_request+0xb8>)
 8013194:	f7ff fe98 	bl	8012ec8 <put_memory>
 8013198:	b106      	cbz	r6, 801319c <rmw_take_request+0x98>
 801319a:	7034      	strb	r4, [r6, #0]
 801319c:	f084 0001 	eor.w	r0, r4, #1
 80131a0:	b2c0      	uxtb	r0, r0
 80131a2:	b009      	add	sp, #36	@ 0x24
 80131a4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80131a8:	2001      	movs	r0, #1
 80131aa:	b009      	add	sp, #36	@ 0x24
 80131ac:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80131b0:	200c      	movs	r0, #12
 80131b2:	b009      	add	sp, #36	@ 0x24
 80131b4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80131b8:	0801705c 	.word	0x0801705c
 80131bc:	2000da6c 	.word	0x2000da6c

080131c0 <rmw_send_response>:
 80131c0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80131c2:	4605      	mov	r5, r0
 80131c4:	6800      	ldr	r0, [r0, #0]
 80131c6:	b091      	sub	sp, #68	@ 0x44
 80131c8:	460c      	mov	r4, r1
 80131ca:	4616      	mov	r6, r2
 80131cc:	b128      	cbz	r0, 80131da <rmw_send_response+0x1a>
 80131ce:	4b29      	ldr	r3, [pc, #164]	@ (8013274 <rmw_send_response+0xb4>)
 80131d0:	6819      	ldr	r1, [r3, #0]
 80131d2:	f7ed f805 	bl	80001e0 <strcmp>
 80131d6:	2800      	cmp	r0, #0
 80131d8:	d141      	bne.n	801325e <rmw_send_response+0x9e>
 80131da:	e9d4 2304 	ldrd	r2, r3, [r4, #16]
 80131de:	9306      	str	r3, [sp, #24]
 80131e0:	4623      	mov	r3, r4
 80131e2:	9207      	str	r2, [sp, #28]
 80131e4:	f813 2b01 	ldrb.w	r2, [r3], #1
 80131e8:	686d      	ldr	r5, [r5, #4]
 80131ea:	789b      	ldrb	r3, [r3, #2]
 80131ec:	68a1      	ldr	r1, [r4, #8]
 80131ee:	f88d 2017 	strb.w	r2, [sp, #23]
 80131f2:	f88d 3016 	strb.w	r3, [sp, #22]
 80131f6:	68e2      	ldr	r2, [r4, #12]
 80131f8:	f8b4 3001 	ldrh.w	r3, [r4, #1]
 80131fc:	6860      	ldr	r0, [r4, #4]
 80131fe:	f8ad 3014 	strh.w	r3, [sp, #20]
 8013202:	ab02      	add	r3, sp, #8
 8013204:	c307      	stmia	r3!, {r0, r1, r2}
 8013206:	696b      	ldr	r3, [r5, #20]
 8013208:	6faf      	ldr	r7, [r5, #120]	@ 0x78
 801320a:	68db      	ldr	r3, [r3, #12]
 801320c:	4798      	blx	r3
 801320e:	6844      	ldr	r4, [r0, #4]
 8013210:	4630      	mov	r0, r6
 8013212:	6923      	ldr	r3, [r4, #16]
 8013214:	4798      	blx	r3
 8013216:	f100 0318 	add.w	r3, r0, #24
 801321a:	6938      	ldr	r0, [r7, #16]
 801321c:	9300      	str	r3, [sp, #0]
 801321e:	692a      	ldr	r2, [r5, #16]
 8013220:	6f29      	ldr	r1, [r5, #112]	@ 0x70
 8013222:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8013226:	ab08      	add	r3, sp, #32
 8013228:	f001 f980 	bl	801452c <uxr_prepare_output_stream>
 801322c:	b910      	cbnz	r0, 8013234 <rmw_send_response+0x74>
 801322e:	2001      	movs	r0, #1
 8013230:	b011      	add	sp, #68	@ 0x44
 8013232:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8013234:	a902      	add	r1, sp, #8
 8013236:	a808      	add	r0, sp, #32
 8013238:	f7fc fb24 	bl	800f884 <uxr_serialize_SampleIdentity>
 801323c:	68a3      	ldr	r3, [r4, #8]
 801323e:	a908      	add	r1, sp, #32
 8013240:	4630      	mov	r0, r6
 8013242:	4798      	blx	r3
 8013244:	f895 3072 	ldrb.w	r3, [r5, #114]	@ 0x72
 8013248:	6938      	ldr	r0, [r7, #16]
 801324a:	2b01      	cmp	r3, #1
 801324c:	d00a      	beq.n	8013264 <rmw_send_response+0xa4>
 801324e:	6f69      	ldr	r1, [r5, #116]	@ 0x74
 8013250:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8013254:	f7fa f9c0 	bl	800d5d8 <uxr_run_session_until_confirm_delivery>
 8013258:	2000      	movs	r0, #0
 801325a:	b011      	add	sp, #68	@ 0x44
 801325c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801325e:	200c      	movs	r0, #12
 8013260:	b011      	add	sp, #68	@ 0x44
 8013262:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8013264:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8013268:	f7f9 fdf6 	bl	800ce58 <uxr_flash_output_streams>
 801326c:	2000      	movs	r0, #0
 801326e:	b011      	add	sp, #68	@ 0x44
 8013270:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8013272:	bf00      	nop
 8013274:	0801705c 	.word	0x0801705c

08013278 <rmw_take_response>:
 8013278:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801327c:	4604      	mov	r4, r0
 801327e:	6800      	ldr	r0, [r0, #0]
 8013280:	b088      	sub	sp, #32
 8013282:	4688      	mov	r8, r1
 8013284:	4617      	mov	r7, r2
 8013286:	461d      	mov	r5, r3
 8013288:	b120      	cbz	r0, 8013294 <rmw_take_response+0x1c>
 801328a:	4b1e      	ldr	r3, [pc, #120]	@ (8013304 <rmw_take_response+0x8c>)
 801328c:	6819      	ldr	r1, [r3, #0]
 801328e:	f7ec ffa7 	bl	80001e0 <strcmp>
 8013292:	bb78      	cbnz	r0, 80132f4 <rmw_take_response+0x7c>
 8013294:	b10d      	cbz	r5, 801329a <rmw_take_response+0x22>
 8013296:	2300      	movs	r3, #0
 8013298:	702b      	strb	r3, [r5, #0]
 801329a:	6864      	ldr	r4, [r4, #4]
 801329c:	f7f7 ff84 	bl	800b1a8 <rmw_uxrce_clean_expired_static_input_buffer>
 80132a0:	4620      	mov	r0, r4
 80132a2:	f7f7 ff59 	bl	800b158 <rmw_uxrce_find_static_input_buffer_by_owner>
 80132a6:	4606      	mov	r6, r0
 80132a8:	b340      	cbz	r0, 80132fc <rmw_take_response+0x84>
 80132aa:	6963      	ldr	r3, [r4, #20]
 80132ac:	6884      	ldr	r4, [r0, #8]
 80132ae:	68db      	ldr	r3, [r3, #12]
 80132b0:	f504 6203 	add.w	r2, r4, #2096	@ 0x830
 80132b4:	e952 0102 	ldrd	r0, r1, [r2, #-8]
 80132b8:	e9c8 0108 	strd	r0, r1, [r8, #32]
 80132bc:	4798      	blx	r3
 80132be:	f8d0 8004 	ldr.w	r8, [r0, #4]
 80132c2:	f8d4 2810 	ldr.w	r2, [r4, #2064]	@ 0x810
 80132c6:	f104 0110 	add.w	r1, r4, #16
 80132ca:	4668      	mov	r0, sp
 80132cc:	f7f9 f8b6 	bl	800c43c <ucdr_init_buffer>
 80132d0:	4639      	mov	r1, r7
 80132d2:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80132d6:	4668      	mov	r0, sp
 80132d8:	4798      	blx	r3
 80132da:	4631      	mov	r1, r6
 80132dc:	4604      	mov	r4, r0
 80132de:	480a      	ldr	r0, [pc, #40]	@ (8013308 <rmw_take_response+0x90>)
 80132e0:	f7ff fdf2 	bl	8012ec8 <put_memory>
 80132e4:	b105      	cbz	r5, 80132e8 <rmw_take_response+0x70>
 80132e6:	702c      	strb	r4, [r5, #0]
 80132e8:	f084 0001 	eor.w	r0, r4, #1
 80132ec:	b2c0      	uxtb	r0, r0
 80132ee:	b008      	add	sp, #32
 80132f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80132f4:	200c      	movs	r0, #12
 80132f6:	b008      	add	sp, #32
 80132f8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80132fc:	2001      	movs	r0, #1
 80132fe:	b008      	add	sp, #32
 8013300:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013304:	0801705c 	.word	0x0801705c
 8013308:	2000da6c 	.word	0x2000da6c

0801330c <rmw_take_with_info>:
 801330c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801330e:	4604      	mov	r4, r0
 8013310:	6800      	ldr	r0, [r0, #0]
 8013312:	b089      	sub	sp, #36	@ 0x24
 8013314:	460f      	mov	r7, r1
 8013316:	4615      	mov	r5, r2
 8013318:	b128      	cbz	r0, 8013326 <rmw_take_with_info+0x1a>
 801331a:	4b24      	ldr	r3, [pc, #144]	@ (80133ac <rmw_take_with_info+0xa0>)
 801331c:	6819      	ldr	r1, [r3, #0]
 801331e:	f7ec ff5f 	bl	80001e0 <strcmp>
 8013322:	2800      	cmp	r0, #0
 8013324:	d13e      	bne.n	80133a4 <rmw_take_with_info+0x98>
 8013326:	b305      	cbz	r5, 801336a <rmw_take_with_info+0x5e>
 8013328:	6864      	ldr	r4, [r4, #4]
 801332a:	2300      	movs	r3, #0
 801332c:	702b      	strb	r3, [r5, #0]
 801332e:	f7f7 ff3b 	bl	800b1a8 <rmw_uxrce_clean_expired_static_input_buffer>
 8013332:	4620      	mov	r0, r4
 8013334:	f7f7 ff10 	bl	800b158 <rmw_uxrce_find_static_input_buffer_by_owner>
 8013338:	4606      	mov	r6, r0
 801333a:	b1f0      	cbz	r0, 801337a <rmw_take_with_info+0x6e>
 801333c:	6881      	ldr	r1, [r0, #8]
 801333e:	4668      	mov	r0, sp
 8013340:	f8d1 2810 	ldr.w	r2, [r1, #2064]	@ 0x810
 8013344:	3110      	adds	r1, #16
 8013346:	f7f9 f879 	bl	800c43c <ucdr_init_buffer>
 801334a:	69a3      	ldr	r3, [r4, #24]
 801334c:	4639      	mov	r1, r7
 801334e:	68db      	ldr	r3, [r3, #12]
 8013350:	4668      	mov	r0, sp
 8013352:	4798      	blx	r3
 8013354:	4631      	mov	r1, r6
 8013356:	4604      	mov	r4, r0
 8013358:	4815      	ldr	r0, [pc, #84]	@ (80133b0 <rmw_take_with_info+0xa4>)
 801335a:	f7ff fdb5 	bl	8012ec8 <put_memory>
 801335e:	702c      	strb	r4, [r5, #0]
 8013360:	f084 0001 	eor.w	r0, r4, #1
 8013364:	b2c0      	uxtb	r0, r0
 8013366:	b009      	add	sp, #36	@ 0x24
 8013368:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801336a:	6864      	ldr	r4, [r4, #4]
 801336c:	f7f7 ff1c 	bl	800b1a8 <rmw_uxrce_clean_expired_static_input_buffer>
 8013370:	4620      	mov	r0, r4
 8013372:	f7f7 fef1 	bl	800b158 <rmw_uxrce_find_static_input_buffer_by_owner>
 8013376:	4605      	mov	r5, r0
 8013378:	b910      	cbnz	r0, 8013380 <rmw_take_with_info+0x74>
 801337a:	2001      	movs	r0, #1
 801337c:	b009      	add	sp, #36	@ 0x24
 801337e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8013380:	68a9      	ldr	r1, [r5, #8]
 8013382:	4668      	mov	r0, sp
 8013384:	f8d1 2810 	ldr.w	r2, [r1, #2064]	@ 0x810
 8013388:	3110      	adds	r1, #16
 801338a:	f7f9 f857 	bl	800c43c <ucdr_init_buffer>
 801338e:	69a3      	ldr	r3, [r4, #24]
 8013390:	4639      	mov	r1, r7
 8013392:	68db      	ldr	r3, [r3, #12]
 8013394:	4668      	mov	r0, sp
 8013396:	4798      	blx	r3
 8013398:	4629      	mov	r1, r5
 801339a:	4604      	mov	r4, r0
 801339c:	4804      	ldr	r0, [pc, #16]	@ (80133b0 <rmw_take_with_info+0xa4>)
 801339e:	f7ff fd93 	bl	8012ec8 <put_memory>
 80133a2:	e7dd      	b.n	8013360 <rmw_take_with_info+0x54>
 80133a4:	200c      	movs	r0, #12
 80133a6:	b009      	add	sp, #36	@ 0x24
 80133a8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80133aa:	bf00      	nop
 80133ac:	0801705c 	.word	0x0801705c
 80133b0:	2000da6c 	.word	0x2000da6c

080133b4 <rmw_wait>:
 80133b4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80133b8:	b089      	sub	sp, #36	@ 0x24
 80133ba:	4605      	mov	r5, r0
 80133bc:	9c12      	ldr	r4, [sp, #72]	@ 0x48
 80133be:	460e      	mov	r6, r1
 80133c0:	4698      	mov	r8, r3
 80133c2:	4691      	mov	r9, r2
 80133c4:	2a00      	cmp	r2, #0
 80133c6:	f000 810a 	beq.w	80135de <rmw_wait+0x22a>
 80133ca:	b16c      	cbz	r4, 80133e8 <rmw_wait+0x34>
 80133cc:	4bae      	ldr	r3, [pc, #696]	@ (8013688 <rmw_wait+0x2d4>)
 80133ce:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80133d0:	af04      	add	r7, sp, #16
 80133d2:	e887 000f 	stmia.w	r7, {r0, r1, r2, r3}
 80133d6:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 80133da:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80133de:	f7ff faaf 	bl	8012940 <rmw_time_equal>
 80133e2:	2800      	cmp	r0, #0
 80133e4:	f000 8127 	beq.w	8013636 <rmw_wait+0x282>
 80133e8:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 80133ec:	f7f7 fedc 	bl	800b1a8 <rmw_uxrce_clean_expired_static_input_buffer>
 80133f0:	4ba6      	ldr	r3, [pc, #664]	@ (801368c <rmw_wait+0x2d8>)
 80133f2:	681c      	ldr	r4, [r3, #0]
 80133f4:	b14c      	cbz	r4, 801340a <rmw_wait+0x56>
 80133f6:	4623      	mov	r3, r4
 80133f8:	2100      	movs	r1, #0
 80133fa:	e9d3 3201 	ldrd	r3, r2, [r3, #4]
 80133fe:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8013402:	f882 15a4 	strb.w	r1, [r2, #1444]	@ 0x5a4
 8013406:	2b00      	cmp	r3, #0
 8013408:	d1f7      	bne.n	80133fa <rmw_wait+0x46>
 801340a:	f1b9 0f00 	cmp.w	r9, #0
 801340e:	d011      	beq.n	8013434 <rmw_wait+0x80>
 8013410:	f8d9 1000 	ldr.w	r1, [r9]
 8013414:	b171      	cbz	r1, 8013434 <rmw_wait+0x80>
 8013416:	f8d9 c004 	ldr.w	ip, [r9, #4]
 801341a:	2300      	movs	r3, #0
 801341c:	2001      	movs	r0, #1
 801341e:	f85c 2023 	ldr.w	r2, [ip, r3, lsl #2]
 8013422:	6f92      	ldr	r2, [r2, #120]	@ 0x78
 8013424:	6912      	ldr	r2, [r2, #16]
 8013426:	3301      	adds	r3, #1
 8013428:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 801342c:	4299      	cmp	r1, r3
 801342e:	f882 05a4 	strb.w	r0, [r2, #1444]	@ 0x5a4
 8013432:	d1f4      	bne.n	801341e <rmw_wait+0x6a>
 8013434:	f1b8 0f00 	cmp.w	r8, #0
 8013438:	d011      	beq.n	801345e <rmw_wait+0xaa>
 801343a:	f8d8 1000 	ldr.w	r1, [r8]
 801343e:	b171      	cbz	r1, 801345e <rmw_wait+0xaa>
 8013440:	f8d8 c004 	ldr.w	ip, [r8, #4]
 8013444:	2300      	movs	r3, #0
 8013446:	2001      	movs	r0, #1
 8013448:	f85c 2023 	ldr.w	r2, [ip, r3, lsl #2]
 801344c:	6f92      	ldr	r2, [r2, #120]	@ 0x78
 801344e:	6912      	ldr	r2, [r2, #16]
 8013450:	3301      	adds	r3, #1
 8013452:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8013456:	4299      	cmp	r1, r3
 8013458:	f882 05a4 	strb.w	r0, [r2, #1444]	@ 0x5a4
 801345c:	d1f4      	bne.n	8013448 <rmw_wait+0x94>
 801345e:	b185      	cbz	r5, 8013482 <rmw_wait+0xce>
 8013460:	6829      	ldr	r1, [r5, #0]
 8013462:	b171      	cbz	r1, 8013482 <rmw_wait+0xce>
 8013464:	f8d5 c004 	ldr.w	ip, [r5, #4]
 8013468:	2300      	movs	r3, #0
 801346a:	2001      	movs	r0, #1
 801346c:	f85c 2023 	ldr.w	r2, [ip, r3, lsl #2]
 8013470:	6a12      	ldr	r2, [r2, #32]
 8013472:	6912      	ldr	r2, [r2, #16]
 8013474:	3301      	adds	r3, #1
 8013476:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 801347a:	4299      	cmp	r1, r3
 801347c:	f882 05a4 	strb.w	r0, [r2, #1444]	@ 0x5a4
 8013480:	d1f4      	bne.n	801346c <rmw_wait+0xb8>
 8013482:	b34c      	cbz	r4, 80134d8 <rmw_wait+0x124>
 8013484:	4622      	mov	r2, r4
 8013486:	2300      	movs	r3, #0
 8013488:	e9d2 2101 	ldrd	r2, r1, [r2, #4]
 801348c:	f501 5180 	add.w	r1, r1, #4096	@ 0x1000
 8013490:	f891 15a4 	ldrb.w	r1, [r1, #1444]	@ 0x5a4
 8013494:	440b      	add	r3, r1
 8013496:	b2db      	uxtb	r3, r3
 8013498:	2a00      	cmp	r2, #0
 801349a:	d1f5      	bne.n	8013488 <rmw_wait+0xd4>
 801349c:	2b00      	cmp	r3, #0
 801349e:	f000 8084 	beq.w	80135aa <rmw_wait+0x1f6>
 80134a2:	1c7a      	adds	r2, r7, #1
 80134a4:	d00d      	beq.n	80134c2 <rmw_wait+0x10e>
 80134a6:	ee07 7a90 	vmov	s15, r7
 80134aa:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80134ae:	ee07 3a90 	vmov	s15, r3
 80134b2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80134b6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80134ba:	eefd 7ac7 	vcvt.s32.f32	s15, s14
 80134be:	ee17 7a90 	vmov	r7, s15
 80134c2:	68a0      	ldr	r0, [r4, #8]
 80134c4:	f500 5380 	add.w	r3, r0, #4096	@ 0x1000
 80134c8:	f893 35a4 	ldrb.w	r3, [r3, #1444]	@ 0x5a4
 80134cc:	2b00      	cmp	r3, #0
 80134ce:	f040 8090 	bne.w	80135f2 <rmw_wait+0x23e>
 80134d2:	6864      	ldr	r4, [r4, #4]
 80134d4:	2c00      	cmp	r4, #0
 80134d6:	d1f4      	bne.n	80134c2 <rmw_wait+0x10e>
 80134d8:	f1b9 0f00 	cmp.w	r9, #0
 80134dc:	f000 80bc 	beq.w	8013658 <rmw_wait+0x2a4>
 80134e0:	f8d9 7000 	ldr.w	r7, [r9]
 80134e4:	2f00      	cmp	r7, #0
 80134e6:	f000 808e 	beq.w	8013606 <rmw_wait+0x252>
 80134ea:	2400      	movs	r4, #0
 80134ec:	4627      	mov	r7, r4
 80134ee:	f8d9 3004 	ldr.w	r3, [r9, #4]
 80134f2:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 80134f6:	f7f7 fe2f 	bl	800b158 <rmw_uxrce_find_static_input_buffer_by_owner>
 80134fa:	2800      	cmp	r0, #0
 80134fc:	d05f      	beq.n	80135be <rmw_wait+0x20a>
 80134fe:	f8d9 3000 	ldr.w	r3, [r9]
 8013502:	3401      	adds	r4, #1
 8013504:	42a3      	cmp	r3, r4
 8013506:	f04f 0701 	mov.w	r7, #1
 801350a:	d8f0      	bhi.n	80134ee <rmw_wait+0x13a>
 801350c:	f1b8 0f00 	cmp.w	r8, #0
 8013510:	d012      	beq.n	8013538 <rmw_wait+0x184>
 8013512:	f8d8 3000 	ldr.w	r3, [r8]
 8013516:	b17b      	cbz	r3, 8013538 <rmw_wait+0x184>
 8013518:	2400      	movs	r4, #0
 801351a:	f8d8 3004 	ldr.w	r3, [r8, #4]
 801351e:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8013522:	f7f7 fe19 	bl	800b158 <rmw_uxrce_find_static_input_buffer_by_owner>
 8013526:	2800      	cmp	r0, #0
 8013528:	d051      	beq.n	80135ce <rmw_wait+0x21a>
 801352a:	f8d8 3000 	ldr.w	r3, [r8]
 801352e:	3401      	adds	r4, #1
 8013530:	42a3      	cmp	r3, r4
 8013532:	f04f 0701 	mov.w	r7, #1
 8013536:	d8f0      	bhi.n	801351a <rmw_wait+0x166>
 8013538:	b1dd      	cbz	r5, 8013572 <rmw_wait+0x1be>
 801353a:	682b      	ldr	r3, [r5, #0]
 801353c:	b1cb      	cbz	r3, 8013572 <rmw_wait+0x1be>
 801353e:	2400      	movs	r4, #0
 8013540:	686b      	ldr	r3, [r5, #4]
 8013542:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8013546:	f7f7 fe07 	bl	800b158 <rmw_uxrce_find_static_input_buffer_by_owner>
 801354a:	b158      	cbz	r0, 8013564 <rmw_wait+0x1b0>
 801354c:	682b      	ldr	r3, [r5, #0]
 801354e:	3401      	adds	r4, #1
 8013550:	42a3      	cmp	r3, r4
 8013552:	d969      	bls.n	8013628 <rmw_wait+0x274>
 8013554:	686b      	ldr	r3, [r5, #4]
 8013556:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 801355a:	2701      	movs	r7, #1
 801355c:	f7f7 fdfc 	bl	800b158 <rmw_uxrce_find_static_input_buffer_by_owner>
 8013560:	2800      	cmp	r0, #0
 8013562:	d1f3      	bne.n	801354c <rmw_wait+0x198>
 8013564:	e9d5 3200 	ldrd	r3, r2, [r5]
 8013568:	f842 0024 	str.w	r0, [r2, r4, lsl #2]
 801356c:	3401      	adds	r4, #1
 801356e:	42a3      	cmp	r3, r4
 8013570:	d8e6      	bhi.n	8013540 <rmw_wait+0x18c>
 8013572:	b1a6      	cbz	r6, 801359e <rmw_wait+0x1ea>
 8013574:	6834      	ldr	r4, [r6, #0]
 8013576:	b194      	cbz	r4, 801359e <rmw_wait+0x1ea>
 8013578:	2300      	movs	r3, #0
 801357a:	461d      	mov	r5, r3
 801357c:	e004      	b.n	8013588 <rmw_wait+0x1d4>
 801357e:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
 8013582:	3301      	adds	r3, #1
 8013584:	42a3      	cmp	r3, r4
 8013586:	d00a      	beq.n	801359e <rmw_wait+0x1ea>
 8013588:	6870      	ldr	r0, [r6, #4]
 801358a:	f850 1023 	ldr.w	r1, [r0, r3, lsl #2]
 801358e:	7c0a      	ldrb	r2, [r1, #16]
 8013590:	2a00      	cmp	r2, #0
 8013592:	d0f4      	beq.n	801357e <rmw_wait+0x1ca>
 8013594:	3301      	adds	r3, #1
 8013596:	42a3      	cmp	r3, r4
 8013598:	740d      	strb	r5, [r1, #16]
 801359a:	4617      	mov	r7, r2
 801359c:	d1f4      	bne.n	8013588 <rmw_wait+0x1d4>
 801359e:	2f00      	cmp	r7, #0
 80135a0:	d03e      	beq.n	8013620 <rmw_wait+0x26c>
 80135a2:	2000      	movs	r0, #0
 80135a4:	b009      	add	sp, #36	@ 0x24
 80135a6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80135aa:	68a0      	ldr	r0, [r4, #8]
 80135ac:	2100      	movs	r1, #0
 80135ae:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 80135b2:	f7f9 ffd7 	bl	800d564 <uxr_run_session_timeout>
 80135b6:	6864      	ldr	r4, [r4, #4]
 80135b8:	2c00      	cmp	r4, #0
 80135ba:	d1f6      	bne.n	80135aa <rmw_wait+0x1f6>
 80135bc:	e78c      	b.n	80134d8 <rmw_wait+0x124>
 80135be:	e9d9 3200 	ldrd	r3, r2, [r9]
 80135c2:	f842 0024 	str.w	r0, [r2, r4, lsl #2]
 80135c6:	3401      	adds	r4, #1
 80135c8:	42a3      	cmp	r3, r4
 80135ca:	d890      	bhi.n	80134ee <rmw_wait+0x13a>
 80135cc:	e79e      	b.n	801350c <rmw_wait+0x158>
 80135ce:	e9d8 3200 	ldrd	r3, r2, [r8]
 80135d2:	f842 0024 	str.w	r0, [r2, r4, lsl #2]
 80135d6:	3401      	adds	r4, #1
 80135d8:	429c      	cmp	r4, r3
 80135da:	d39e      	bcc.n	801351a <rmw_wait+0x166>
 80135dc:	e7ac      	b.n	8013538 <rmw_wait+0x184>
 80135de:	2b00      	cmp	r3, #0
 80135e0:	f47f aef3 	bne.w	80133ca <rmw_wait+0x16>
 80135e4:	2800      	cmp	r0, #0
 80135e6:	f47f aef0 	bne.w	80133ca <rmw_wait+0x16>
 80135ea:	2900      	cmp	r1, #0
 80135ec:	f47f aeed 	bne.w	80133ca <rmw_wait+0x16>
 80135f0:	e7d7      	b.n	80135a2 <rmw_wait+0x1ee>
 80135f2:	4639      	mov	r1, r7
 80135f4:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 80135f8:	f7f9 ffce 	bl	800d598 <uxr_run_session_until_data>
 80135fc:	6864      	ldr	r4, [r4, #4]
 80135fe:	2c00      	cmp	r4, #0
 8013600:	f47f af5f 	bne.w	80134c2 <rmw_wait+0x10e>
 8013604:	e768      	b.n	80134d8 <rmw_wait+0x124>
 8013606:	f1b8 0f00 	cmp.w	r8, #0
 801360a:	d032      	beq.n	8013672 <rmw_wait+0x2be>
 801360c:	f8d8 3000 	ldr.w	r3, [r8]
 8013610:	2b00      	cmp	r3, #0
 8013612:	d181      	bne.n	8013518 <rmw_wait+0x164>
 8013614:	461f      	mov	r7, r3
 8013616:	2d00      	cmp	r5, #0
 8013618:	d18f      	bne.n	801353a <rmw_wait+0x186>
 801361a:	462f      	mov	r7, r5
 801361c:	2e00      	cmp	r6, #0
 801361e:	d1a9      	bne.n	8013574 <rmw_wait+0x1c0>
 8013620:	2002      	movs	r0, #2
 8013622:	b009      	add	sp, #36	@ 0x24
 8013624:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8013628:	2e00      	cmp	r6, #0
 801362a:	d0ba      	beq.n	80135a2 <rmw_wait+0x1ee>
 801362c:	6834      	ldr	r4, [r6, #0]
 801362e:	2701      	movs	r7, #1
 8013630:	2c00      	cmp	r4, #0
 8013632:	d1a1      	bne.n	8013578 <rmw_wait+0x1c4>
 8013634:	e7b5      	b.n	80135a2 <rmw_wait+0x1ee>
 8013636:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 801363a:	f7ff f9d5 	bl	80129e8 <rmw_time_total_nsec>
 801363e:	2300      	movs	r3, #0
 8013640:	4a13      	ldr	r2, [pc, #76]	@ (8013690 <rmw_wait+0x2dc>)
 8013642:	f7ed fac3 	bl	8000bcc <__aeabi_uldivmod>
 8013646:	f1b0 4f00 	cmp.w	r0, #2147483648	@ 0x80000000
 801364a:	f171 0300 	sbcs.w	r3, r1, #0
 801364e:	4607      	mov	r7, r0
 8013650:	bfa8      	it	ge
 8013652:	f06f 4700 	mvnge.w	r7, #2147483648	@ 0x80000000
 8013656:	e6c9      	b.n	80133ec <rmw_wait+0x38>
 8013658:	f1b8 0f00 	cmp.w	r8, #0
 801365c:	d009      	beq.n	8013672 <rmw_wait+0x2be>
 801365e:	f8d8 3000 	ldr.w	r3, [r8]
 8013662:	464f      	mov	r7, r9
 8013664:	2b00      	cmp	r3, #0
 8013666:	f47f af57 	bne.w	8013518 <rmw_wait+0x164>
 801366a:	2d00      	cmp	r5, #0
 801366c:	f47f af65 	bne.w	801353a <rmw_wait+0x186>
 8013670:	e7d3      	b.n	801361a <rmw_wait+0x266>
 8013672:	b17d      	cbz	r5, 8013694 <rmw_wait+0x2e0>
 8013674:	682b      	ldr	r3, [r5, #0]
 8013676:	4647      	mov	r7, r8
 8013678:	2b00      	cmp	r3, #0
 801367a:	f47f af60 	bne.w	801353e <rmw_wait+0x18a>
 801367e:	2e00      	cmp	r6, #0
 8013680:	f47f af78 	bne.w	8013574 <rmw_wait+0x1c0>
 8013684:	e7cc      	b.n	8013620 <rmw_wait+0x26c>
 8013686:	bf00      	nop
 8013688:	080165c0 	.word	0x080165c0
 801368c:	2000da5c 	.word	0x2000da5c
 8013690:	000f4240 	.word	0x000f4240
 8013694:	2e00      	cmp	r6, #0
 8013696:	d0c3      	beq.n	8013620 <rmw_wait+0x26c>
 8013698:	6834      	ldr	r4, [r6, #0]
 801369a:	462f      	mov	r7, r5
 801369c:	2c00      	cmp	r4, #0
 801369e:	f47f af6b 	bne.w	8013578 <rmw_wait+0x1c4>
 80136a2:	e7bd      	b.n	8013620 <rmw_wait+0x26c>

080136a4 <rmw_create_wait_set>:
 80136a4:	b508      	push	{r3, lr}
 80136a6:	4803      	ldr	r0, [pc, #12]	@ (80136b4 <rmw_create_wait_set+0x10>)
 80136a8:	f7ff fbfe 	bl	8012ea8 <get_memory>
 80136ac:	b108      	cbz	r0, 80136b2 <rmw_create_wait_set+0xe>
 80136ae:	6880      	ldr	r0, [r0, #8]
 80136b0:	3010      	adds	r0, #16
 80136b2:	bd08      	pop	{r3, pc}
 80136b4:	2000da9c 	.word	0x2000da9c

080136b8 <rmw_destroy_wait_set>:
 80136b8:	b508      	push	{r3, lr}
 80136ba:	4b08      	ldr	r3, [pc, #32]	@ (80136dc <rmw_destroy_wait_set+0x24>)
 80136bc:	6819      	ldr	r1, [r3, #0]
 80136be:	b911      	cbnz	r1, 80136c6 <rmw_destroy_wait_set+0xe>
 80136c0:	e00a      	b.n	80136d8 <rmw_destroy_wait_set+0x20>
 80136c2:	6849      	ldr	r1, [r1, #4]
 80136c4:	b141      	cbz	r1, 80136d8 <rmw_destroy_wait_set+0x20>
 80136c6:	688b      	ldr	r3, [r1, #8]
 80136c8:	3310      	adds	r3, #16
 80136ca:	4298      	cmp	r0, r3
 80136cc:	d1f9      	bne.n	80136c2 <rmw_destroy_wait_set+0xa>
 80136ce:	4803      	ldr	r0, [pc, #12]	@ (80136dc <rmw_destroy_wait_set+0x24>)
 80136d0:	f7ff fbfa 	bl	8012ec8 <put_memory>
 80136d4:	2000      	movs	r0, #0
 80136d6:	bd08      	pop	{r3, pc}
 80136d8:	2001      	movs	r0, #1
 80136da:	bd08      	pop	{r3, pc}
 80136dc:	2000da9c 	.word	0x2000da9c

080136e0 <rmw_uros_epoch_nanos>:
 80136e0:	4b05      	ldr	r3, [pc, #20]	@ (80136f8 <rmw_uros_epoch_nanos+0x18>)
 80136e2:	681b      	ldr	r3, [r3, #0]
 80136e4:	b123      	cbz	r3, 80136f0 <rmw_uros_epoch_nanos+0x10>
 80136e6:	6898      	ldr	r0, [r3, #8]
 80136e8:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 80136ec:	f7f9 bbaa 	b.w	800ce44 <uxr_epoch_nanos>
 80136f0:	2000      	movs	r0, #0
 80136f2:	2100      	movs	r1, #0
 80136f4:	4770      	bx	lr
 80136f6:	bf00      	nop
 80136f8:	2000da5c 	.word	0x2000da5c

080136fc <rosidl_typesupport_c__get_message_typesupport_handle_function>:
 80136fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013700:	6805      	ldr	r5, [r0, #0]
 8013702:	4604      	mov	r4, r0
 8013704:	4628      	mov	r0, r5
 8013706:	460e      	mov	r6, r1
 8013708:	f7ec fd6a 	bl	80001e0 <strcmp>
 801370c:	b1c8      	cbz	r0, 8013742 <rosidl_typesupport_c__get_message_typesupport_handle_function+0x46>
 801370e:	4b11      	ldr	r3, [pc, #68]	@ (8013754 <rosidl_typesupport_c__get_message_typesupport_handle_function+0x58>)
 8013710:	681b      	ldr	r3, [r3, #0]
 8013712:	429d      	cmp	r5, r3
 8013714:	d112      	bne.n	801373c <rosidl_typesupport_c__get_message_typesupport_handle_function+0x40>
 8013716:	f8d4 8004 	ldr.w	r8, [r4, #4]
 801371a:	f8d8 4000 	ldr.w	r4, [r8]
 801371e:	b16c      	cbz	r4, 801373c <rosidl_typesupport_c__get_message_typesupport_handle_function+0x40>
 8013720:	f8d8 5008 	ldr.w	r5, [r8, #8]
 8013724:	2700      	movs	r7, #0
 8013726:	3d04      	subs	r5, #4
 8013728:	f855 0f04 	ldr.w	r0, [r5, #4]!
 801372c:	4631      	mov	r1, r6
 801372e:	f7ec fd57 	bl	80001e0 <strcmp>
 8013732:	00bb      	lsls	r3, r7, #2
 8013734:	b140      	cbz	r0, 8013748 <rosidl_typesupport_c__get_message_typesupport_handle_function+0x4c>
 8013736:	3701      	adds	r7, #1
 8013738:	42bc      	cmp	r4, r7
 801373a:	d1f5      	bne.n	8013728 <rosidl_typesupport_c__get_message_typesupport_handle_function+0x2c>
 801373c:	2000      	movs	r0, #0
 801373e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013742:	4620      	mov	r0, r4
 8013744:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013748:	f8d8 2010 	ldr.w	r2, [r8, #16]
 801374c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8013750:	58d3      	ldr	r3, [r2, r3]
 8013752:	4718      	bx	r3
 8013754:	200000ac 	.word	0x200000ac

08013758 <std_msgs__msg__Int32__init>:
 8013758:	3800      	subs	r0, #0
 801375a:	bf18      	it	ne
 801375c:	2001      	movne	r0, #1
 801375e:	4770      	bx	lr

08013760 <std_msgs__msg__Int32__fini>:
 8013760:	4770      	bx	lr
 8013762:	bf00      	nop

08013764 <ucdr_serialize_endian_array_char>:
 8013764:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013768:	4619      	mov	r1, r3
 801376a:	461f      	mov	r7, r3
 801376c:	4605      	mov	r5, r0
 801376e:	4690      	mov	r8, r2
 8013770:	f7f8 fe10 	bl	800c394 <ucdr_check_buffer_available_for>
 8013774:	b9e0      	cbnz	r0, 80137b0 <ucdr_serialize_endian_array_char+0x4c>
 8013776:	463e      	mov	r6, r7
 8013778:	e009      	b.n	801378e <ucdr_serialize_endian_array_char+0x2a>
 801377a:	68a8      	ldr	r0, [r5, #8]
 801377c:	f001 ffe9 	bl	8015752 <memcpy>
 8013780:	68ab      	ldr	r3, [r5, #8]
 8013782:	6928      	ldr	r0, [r5, #16]
 8013784:	4423      	add	r3, r4
 8013786:	4420      	add	r0, r4
 8013788:	1b36      	subs	r6, r6, r4
 801378a:	60ab      	str	r3, [r5, #8]
 801378c:	6128      	str	r0, [r5, #16]
 801378e:	4631      	mov	r1, r6
 8013790:	2201      	movs	r2, #1
 8013792:	4628      	mov	r0, r5
 8013794:	f7f8 fe86 	bl	800c4a4 <ucdr_check_final_buffer_behavior_array>
 8013798:	1bb9      	subs	r1, r7, r6
 801379a:	4441      	add	r1, r8
 801379c:	4604      	mov	r4, r0
 801379e:	4602      	mov	r2, r0
 80137a0:	2800      	cmp	r0, #0
 80137a2:	d1ea      	bne.n	801377a <ucdr_serialize_endian_array_char+0x16>
 80137a4:	2301      	movs	r3, #1
 80137a6:	7da8      	ldrb	r0, [r5, #22]
 80137a8:	756b      	strb	r3, [r5, #21]
 80137aa:	4058      	eors	r0, r3
 80137ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80137b0:	463a      	mov	r2, r7
 80137b2:	68a8      	ldr	r0, [r5, #8]
 80137b4:	4641      	mov	r1, r8
 80137b6:	f001 ffcc 	bl	8015752 <memcpy>
 80137ba:	68aa      	ldr	r2, [r5, #8]
 80137bc:	692b      	ldr	r3, [r5, #16]
 80137be:	443a      	add	r2, r7
 80137c0:	443b      	add	r3, r7
 80137c2:	60aa      	str	r2, [r5, #8]
 80137c4:	612b      	str	r3, [r5, #16]
 80137c6:	e7ed      	b.n	80137a4 <ucdr_serialize_endian_array_char+0x40>

080137c8 <ucdr_deserialize_endian_array_char>:
 80137c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80137cc:	4619      	mov	r1, r3
 80137ce:	461f      	mov	r7, r3
 80137d0:	4605      	mov	r5, r0
 80137d2:	4690      	mov	r8, r2
 80137d4:	f7f8 fdde 	bl	800c394 <ucdr_check_buffer_available_for>
 80137d8:	b9e0      	cbnz	r0, 8013814 <ucdr_deserialize_endian_array_char+0x4c>
 80137da:	463e      	mov	r6, r7
 80137dc:	e009      	b.n	80137f2 <ucdr_deserialize_endian_array_char+0x2a>
 80137de:	68a9      	ldr	r1, [r5, #8]
 80137e0:	f001 ffb7 	bl	8015752 <memcpy>
 80137e4:	68ab      	ldr	r3, [r5, #8]
 80137e6:	6928      	ldr	r0, [r5, #16]
 80137e8:	4423      	add	r3, r4
 80137ea:	4420      	add	r0, r4
 80137ec:	1b36      	subs	r6, r6, r4
 80137ee:	60ab      	str	r3, [r5, #8]
 80137f0:	6128      	str	r0, [r5, #16]
 80137f2:	2201      	movs	r2, #1
 80137f4:	4631      	mov	r1, r6
 80137f6:	4628      	mov	r0, r5
 80137f8:	f7f8 fe54 	bl	800c4a4 <ucdr_check_final_buffer_behavior_array>
 80137fc:	4604      	mov	r4, r0
 80137fe:	1bb8      	subs	r0, r7, r6
 8013800:	4440      	add	r0, r8
 8013802:	4622      	mov	r2, r4
 8013804:	2c00      	cmp	r4, #0
 8013806:	d1ea      	bne.n	80137de <ucdr_deserialize_endian_array_char+0x16>
 8013808:	2301      	movs	r3, #1
 801380a:	7da8      	ldrb	r0, [r5, #22]
 801380c:	756b      	strb	r3, [r5, #21]
 801380e:	4058      	eors	r0, r3
 8013810:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013814:	463a      	mov	r2, r7
 8013816:	68a9      	ldr	r1, [r5, #8]
 8013818:	4640      	mov	r0, r8
 801381a:	f001 ff9a 	bl	8015752 <memcpy>
 801381e:	68aa      	ldr	r2, [r5, #8]
 8013820:	692b      	ldr	r3, [r5, #16]
 8013822:	443a      	add	r2, r7
 8013824:	443b      	add	r3, r7
 8013826:	60aa      	str	r2, [r5, #8]
 8013828:	612b      	str	r3, [r5, #16]
 801382a:	e7ed      	b.n	8013808 <ucdr_deserialize_endian_array_char+0x40>

0801382c <ucdr_serialize_array_uint8_t>:
 801382c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013830:	4688      	mov	r8, r1
 8013832:	4611      	mov	r1, r2
 8013834:	4617      	mov	r7, r2
 8013836:	4605      	mov	r5, r0
 8013838:	f7f8 fdac 	bl	800c394 <ucdr_check_buffer_available_for>
 801383c:	b9e0      	cbnz	r0, 8013878 <ucdr_serialize_array_uint8_t+0x4c>
 801383e:	463e      	mov	r6, r7
 8013840:	e009      	b.n	8013856 <ucdr_serialize_array_uint8_t+0x2a>
 8013842:	68a8      	ldr	r0, [r5, #8]
 8013844:	f001 ff85 	bl	8015752 <memcpy>
 8013848:	68aa      	ldr	r2, [r5, #8]
 801384a:	692b      	ldr	r3, [r5, #16]
 801384c:	4422      	add	r2, r4
 801384e:	4423      	add	r3, r4
 8013850:	1b36      	subs	r6, r6, r4
 8013852:	60aa      	str	r2, [r5, #8]
 8013854:	612b      	str	r3, [r5, #16]
 8013856:	4631      	mov	r1, r6
 8013858:	2201      	movs	r2, #1
 801385a:	4628      	mov	r0, r5
 801385c:	f7f8 fe22 	bl	800c4a4 <ucdr_check_final_buffer_behavior_array>
 8013860:	1bb9      	subs	r1, r7, r6
 8013862:	4441      	add	r1, r8
 8013864:	4604      	mov	r4, r0
 8013866:	4602      	mov	r2, r0
 8013868:	2800      	cmp	r0, #0
 801386a:	d1ea      	bne.n	8013842 <ucdr_serialize_array_uint8_t+0x16>
 801386c:	2301      	movs	r3, #1
 801386e:	7da8      	ldrb	r0, [r5, #22]
 8013870:	756b      	strb	r3, [r5, #21]
 8013872:	4058      	eors	r0, r3
 8013874:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013878:	463a      	mov	r2, r7
 801387a:	68a8      	ldr	r0, [r5, #8]
 801387c:	4641      	mov	r1, r8
 801387e:	f001 ff68 	bl	8015752 <memcpy>
 8013882:	68aa      	ldr	r2, [r5, #8]
 8013884:	692b      	ldr	r3, [r5, #16]
 8013886:	443a      	add	r2, r7
 8013888:	443b      	add	r3, r7
 801388a:	60aa      	str	r2, [r5, #8]
 801388c:	612b      	str	r3, [r5, #16]
 801388e:	e7ed      	b.n	801386c <ucdr_serialize_array_uint8_t+0x40>

08013890 <ucdr_serialize_endian_array_uint8_t>:
 8013890:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013894:	4619      	mov	r1, r3
 8013896:	461f      	mov	r7, r3
 8013898:	4605      	mov	r5, r0
 801389a:	4690      	mov	r8, r2
 801389c:	f7f8 fd7a 	bl	800c394 <ucdr_check_buffer_available_for>
 80138a0:	b9e0      	cbnz	r0, 80138dc <ucdr_serialize_endian_array_uint8_t+0x4c>
 80138a2:	463e      	mov	r6, r7
 80138a4:	e009      	b.n	80138ba <ucdr_serialize_endian_array_uint8_t+0x2a>
 80138a6:	68a8      	ldr	r0, [r5, #8]
 80138a8:	f001 ff53 	bl	8015752 <memcpy>
 80138ac:	68ab      	ldr	r3, [r5, #8]
 80138ae:	6928      	ldr	r0, [r5, #16]
 80138b0:	4423      	add	r3, r4
 80138b2:	4420      	add	r0, r4
 80138b4:	1b36      	subs	r6, r6, r4
 80138b6:	60ab      	str	r3, [r5, #8]
 80138b8:	6128      	str	r0, [r5, #16]
 80138ba:	4631      	mov	r1, r6
 80138bc:	2201      	movs	r2, #1
 80138be:	4628      	mov	r0, r5
 80138c0:	f7f8 fdf0 	bl	800c4a4 <ucdr_check_final_buffer_behavior_array>
 80138c4:	1bb9      	subs	r1, r7, r6
 80138c6:	4441      	add	r1, r8
 80138c8:	4604      	mov	r4, r0
 80138ca:	4602      	mov	r2, r0
 80138cc:	2800      	cmp	r0, #0
 80138ce:	d1ea      	bne.n	80138a6 <ucdr_serialize_endian_array_uint8_t+0x16>
 80138d0:	2301      	movs	r3, #1
 80138d2:	7da8      	ldrb	r0, [r5, #22]
 80138d4:	756b      	strb	r3, [r5, #21]
 80138d6:	4058      	eors	r0, r3
 80138d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80138dc:	463a      	mov	r2, r7
 80138de:	68a8      	ldr	r0, [r5, #8]
 80138e0:	4641      	mov	r1, r8
 80138e2:	f001 ff36 	bl	8015752 <memcpy>
 80138e6:	68aa      	ldr	r2, [r5, #8]
 80138e8:	692b      	ldr	r3, [r5, #16]
 80138ea:	443a      	add	r2, r7
 80138ec:	443b      	add	r3, r7
 80138ee:	60aa      	str	r2, [r5, #8]
 80138f0:	612b      	str	r3, [r5, #16]
 80138f2:	e7ed      	b.n	80138d0 <ucdr_serialize_endian_array_uint8_t+0x40>

080138f4 <ucdr_deserialize_array_uint8_t>:
 80138f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80138f8:	4688      	mov	r8, r1
 80138fa:	4611      	mov	r1, r2
 80138fc:	4617      	mov	r7, r2
 80138fe:	4605      	mov	r5, r0
 8013900:	f7f8 fd48 	bl	800c394 <ucdr_check_buffer_available_for>
 8013904:	b9e0      	cbnz	r0, 8013940 <ucdr_deserialize_array_uint8_t+0x4c>
 8013906:	463e      	mov	r6, r7
 8013908:	e009      	b.n	801391e <ucdr_deserialize_array_uint8_t+0x2a>
 801390a:	68a9      	ldr	r1, [r5, #8]
 801390c:	f001 ff21 	bl	8015752 <memcpy>
 8013910:	68aa      	ldr	r2, [r5, #8]
 8013912:	692b      	ldr	r3, [r5, #16]
 8013914:	4422      	add	r2, r4
 8013916:	4423      	add	r3, r4
 8013918:	1b36      	subs	r6, r6, r4
 801391a:	60aa      	str	r2, [r5, #8]
 801391c:	612b      	str	r3, [r5, #16]
 801391e:	2201      	movs	r2, #1
 8013920:	4631      	mov	r1, r6
 8013922:	4628      	mov	r0, r5
 8013924:	f7f8 fdbe 	bl	800c4a4 <ucdr_check_final_buffer_behavior_array>
 8013928:	4604      	mov	r4, r0
 801392a:	1bb8      	subs	r0, r7, r6
 801392c:	4440      	add	r0, r8
 801392e:	4622      	mov	r2, r4
 8013930:	2c00      	cmp	r4, #0
 8013932:	d1ea      	bne.n	801390a <ucdr_deserialize_array_uint8_t+0x16>
 8013934:	2301      	movs	r3, #1
 8013936:	7da8      	ldrb	r0, [r5, #22]
 8013938:	756b      	strb	r3, [r5, #21]
 801393a:	4058      	eors	r0, r3
 801393c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013940:	463a      	mov	r2, r7
 8013942:	68a9      	ldr	r1, [r5, #8]
 8013944:	4640      	mov	r0, r8
 8013946:	f001 ff04 	bl	8015752 <memcpy>
 801394a:	68aa      	ldr	r2, [r5, #8]
 801394c:	692b      	ldr	r3, [r5, #16]
 801394e:	443a      	add	r2, r7
 8013950:	443b      	add	r3, r7
 8013952:	60aa      	str	r2, [r5, #8]
 8013954:	612b      	str	r3, [r5, #16]
 8013956:	e7ed      	b.n	8013934 <ucdr_deserialize_array_uint8_t+0x40>

08013958 <ucdr_deserialize_endian_array_uint8_t>:
 8013958:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801395c:	4619      	mov	r1, r3
 801395e:	461f      	mov	r7, r3
 8013960:	4605      	mov	r5, r0
 8013962:	4690      	mov	r8, r2
 8013964:	f7f8 fd16 	bl	800c394 <ucdr_check_buffer_available_for>
 8013968:	b9e0      	cbnz	r0, 80139a4 <ucdr_deserialize_endian_array_uint8_t+0x4c>
 801396a:	463e      	mov	r6, r7
 801396c:	e009      	b.n	8013982 <ucdr_deserialize_endian_array_uint8_t+0x2a>
 801396e:	68a9      	ldr	r1, [r5, #8]
 8013970:	f001 feef 	bl	8015752 <memcpy>
 8013974:	68ab      	ldr	r3, [r5, #8]
 8013976:	6928      	ldr	r0, [r5, #16]
 8013978:	4423      	add	r3, r4
 801397a:	4420      	add	r0, r4
 801397c:	1b36      	subs	r6, r6, r4
 801397e:	60ab      	str	r3, [r5, #8]
 8013980:	6128      	str	r0, [r5, #16]
 8013982:	2201      	movs	r2, #1
 8013984:	4631      	mov	r1, r6
 8013986:	4628      	mov	r0, r5
 8013988:	f7f8 fd8c 	bl	800c4a4 <ucdr_check_final_buffer_behavior_array>
 801398c:	4604      	mov	r4, r0
 801398e:	1bb8      	subs	r0, r7, r6
 8013990:	4440      	add	r0, r8
 8013992:	4622      	mov	r2, r4
 8013994:	2c00      	cmp	r4, #0
 8013996:	d1ea      	bne.n	801396e <ucdr_deserialize_endian_array_uint8_t+0x16>
 8013998:	2301      	movs	r3, #1
 801399a:	7da8      	ldrb	r0, [r5, #22]
 801399c:	756b      	strb	r3, [r5, #21]
 801399e:	4058      	eors	r0, r3
 80139a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80139a4:	463a      	mov	r2, r7
 80139a6:	68a9      	ldr	r1, [r5, #8]
 80139a8:	4640      	mov	r0, r8
 80139aa:	f001 fed2 	bl	8015752 <memcpy>
 80139ae:	68aa      	ldr	r2, [r5, #8]
 80139b0:	692b      	ldr	r3, [r5, #16]
 80139b2:	443a      	add	r2, r7
 80139b4:	443b      	add	r3, r7
 80139b6:	60aa      	str	r2, [r5, #8]
 80139b8:	612b      	str	r3, [r5, #16]
 80139ba:	e7ed      	b.n	8013998 <ucdr_deserialize_endian_array_uint8_t+0x40>

080139bc <ucdr_serialize_sequence_char>:
 80139bc:	b570      	push	{r4, r5, r6, lr}
 80139be:	4615      	mov	r5, r2
 80139c0:	460e      	mov	r6, r1
 80139c2:	7d01      	ldrb	r1, [r0, #20]
 80139c4:	4604      	mov	r4, r0
 80139c6:	f7f8 f83b 	bl	800ba40 <ucdr_serialize_endian_uint32_t>
 80139ca:	b90d      	cbnz	r5, 80139d0 <ucdr_serialize_sequence_char+0x14>
 80139cc:	2001      	movs	r0, #1
 80139ce:	bd70      	pop	{r4, r5, r6, pc}
 80139d0:	7d21      	ldrb	r1, [r4, #20]
 80139d2:	462b      	mov	r3, r5
 80139d4:	4632      	mov	r2, r6
 80139d6:	4620      	mov	r0, r4
 80139d8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80139dc:	f7ff bec2 	b.w	8013764 <ucdr_serialize_endian_array_char>

080139e0 <ucdr_deserialize_sequence_char>:
 80139e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80139e4:	461d      	mov	r5, r3
 80139e6:	4616      	mov	r6, r2
 80139e8:	460f      	mov	r7, r1
 80139ea:	461a      	mov	r2, r3
 80139ec:	7d01      	ldrb	r1, [r0, #20]
 80139ee:	4604      	mov	r4, r0
 80139f0:	f7f8 f94e 	bl	800bc90 <ucdr_deserialize_endian_uint32_t>
 80139f4:	682b      	ldr	r3, [r5, #0]
 80139f6:	429e      	cmp	r6, r3
 80139f8:	bf3c      	itt	cc
 80139fa:	2201      	movcc	r2, #1
 80139fc:	75a2      	strbcc	r2, [r4, #22]
 80139fe:	b913      	cbnz	r3, 8013a06 <ucdr_deserialize_sequence_char+0x26>
 8013a00:	2001      	movs	r0, #1
 8013a02:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013a06:	7d21      	ldrb	r1, [r4, #20]
 8013a08:	463a      	mov	r2, r7
 8013a0a:	4620      	mov	r0, r4
 8013a0c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8013a10:	f7ff beda 	b.w	80137c8 <ucdr_deserialize_endian_array_char>

08013a14 <ucdr_serialize_sequence_uint8_t>:
 8013a14:	b570      	push	{r4, r5, r6, lr}
 8013a16:	4615      	mov	r5, r2
 8013a18:	460e      	mov	r6, r1
 8013a1a:	7d01      	ldrb	r1, [r0, #20]
 8013a1c:	4604      	mov	r4, r0
 8013a1e:	f7f8 f80f 	bl	800ba40 <ucdr_serialize_endian_uint32_t>
 8013a22:	b90d      	cbnz	r5, 8013a28 <ucdr_serialize_sequence_uint8_t+0x14>
 8013a24:	2001      	movs	r0, #1
 8013a26:	bd70      	pop	{r4, r5, r6, pc}
 8013a28:	7d21      	ldrb	r1, [r4, #20]
 8013a2a:	462b      	mov	r3, r5
 8013a2c:	4632      	mov	r2, r6
 8013a2e:	4620      	mov	r0, r4
 8013a30:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8013a34:	f7ff bf2c 	b.w	8013890 <ucdr_serialize_endian_array_uint8_t>

08013a38 <ucdr_deserialize_sequence_uint8_t>:
 8013a38:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013a3c:	461d      	mov	r5, r3
 8013a3e:	4616      	mov	r6, r2
 8013a40:	460f      	mov	r7, r1
 8013a42:	461a      	mov	r2, r3
 8013a44:	7d01      	ldrb	r1, [r0, #20]
 8013a46:	4604      	mov	r4, r0
 8013a48:	f7f8 f922 	bl	800bc90 <ucdr_deserialize_endian_uint32_t>
 8013a4c:	682b      	ldr	r3, [r5, #0]
 8013a4e:	429e      	cmp	r6, r3
 8013a50:	bf3c      	itt	cc
 8013a52:	2201      	movcc	r2, #1
 8013a54:	75a2      	strbcc	r2, [r4, #22]
 8013a56:	b913      	cbnz	r3, 8013a5e <ucdr_deserialize_sequence_uint8_t+0x26>
 8013a58:	2001      	movs	r0, #1
 8013a5a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013a5e:	7d21      	ldrb	r1, [r4, #20]
 8013a60:	463a      	mov	r2, r7
 8013a62:	4620      	mov	r0, r4
 8013a64:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8013a68:	f7ff bf76 	b.w	8013958 <ucdr_deserialize_endian_array_uint8_t>

08013a6c <ucdr_serialize_string>:
 8013a6c:	b510      	push	{r4, lr}
 8013a6e:	b082      	sub	sp, #8
 8013a70:	4604      	mov	r4, r0
 8013a72:	4608      	mov	r0, r1
 8013a74:	9101      	str	r1, [sp, #4]
 8013a76:	f7ec fbbd 	bl	80001f4 <strlen>
 8013a7a:	9901      	ldr	r1, [sp, #4]
 8013a7c:	1c42      	adds	r2, r0, #1
 8013a7e:	4620      	mov	r0, r4
 8013a80:	b002      	add	sp, #8
 8013a82:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8013a86:	f7ff bf99 	b.w	80139bc <ucdr_serialize_sequence_char>
 8013a8a:	bf00      	nop

08013a8c <ucdr_deserialize_string>:
 8013a8c:	b500      	push	{lr}
 8013a8e:	b083      	sub	sp, #12
 8013a90:	ab01      	add	r3, sp, #4
 8013a92:	f7ff ffa5 	bl	80139e0 <ucdr_deserialize_sequence_char>
 8013a96:	b003      	add	sp, #12
 8013a98:	f85d fb04 	ldr.w	pc, [sp], #4

08013a9c <uxr_init_input_best_effort_stream>:
 8013a9c:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8013aa0:	8003      	strh	r3, [r0, #0]
 8013aa2:	4770      	bx	lr

08013aa4 <uxr_reset_input_best_effort_stream>:
 8013aa4:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8013aa8:	8003      	strh	r3, [r0, #0]
 8013aaa:	4770      	bx	lr

08013aac <uxr_receive_best_effort_message>:
 8013aac:	b538      	push	{r3, r4, r5, lr}
 8013aae:	4604      	mov	r4, r0
 8013ab0:	8800      	ldrh	r0, [r0, #0]
 8013ab2:	460d      	mov	r5, r1
 8013ab4:	f000 fd22 	bl	80144fc <uxr_seq_num_cmp>
 8013ab8:	4603      	mov	r3, r0
 8013aba:	2b00      	cmp	r3, #0
 8013abc:	ea4f 70d0 	mov.w	r0, r0, lsr #31
 8013ac0:	bfb8      	it	lt
 8013ac2:	8025      	strhlt	r5, [r4, #0]
 8013ac4:	bd38      	pop	{r3, r4, r5, pc}
 8013ac6:	bf00      	nop

08013ac8 <on_full_input_buffer>:
 8013ac8:	b570      	push	{r4, r5, r6, lr}
 8013aca:	4605      	mov	r5, r0
 8013acc:	460c      	mov	r4, r1
 8013ace:	682b      	ldr	r3, [r5, #0]
 8013ad0:	6809      	ldr	r1, [r1, #0]
 8013ad2:	8920      	ldrh	r0, [r4, #8]
 8013ad4:	6862      	ldr	r2, [r4, #4]
 8013ad6:	fbb2 f2f0 	udiv	r2, r2, r0
 8013ada:	eba3 0c01 	sub.w	ip, r3, r1
 8013ade:	fbbc fcf2 	udiv	ip, ip, r2
 8013ae2:	f10c 0c01 	add.w	ip, ip, #1
 8013ae6:	fa1f f38c 	uxth.w	r3, ip
 8013aea:	fbb3 f6f0 	udiv	r6, r3, r0
 8013aee:	fb00 3316 	mls	r3, r0, r6, r3
 8013af2:	b29b      	uxth	r3, r3
 8013af4:	fb02 f303 	mul.w	r3, r2, r3
 8013af8:	1d18      	adds	r0, r3, #4
 8013afa:	4408      	add	r0, r1
 8013afc:	7d26      	ldrb	r6, [r4, #20]
 8013afe:	f850 2c04 	ldr.w	r2, [r0, #-4]
 8013b02:	b116      	cbz	r6, 8013b0a <on_full_input_buffer+0x42>
 8013b04:	2600      	movs	r6, #0
 8013b06:	f840 6c04 	str.w	r6, [r0, #-4]
 8013b0a:	2a03      	cmp	r2, #3
 8013b0c:	d801      	bhi.n	8013b12 <on_full_input_buffer+0x4a>
 8013b0e:	2001      	movs	r0, #1
 8013b10:	bd70      	pop	{r4, r5, r6, pc}
 8013b12:	3308      	adds	r3, #8
 8013b14:	4419      	add	r1, r3
 8013b16:	4628      	mov	r0, r5
 8013b18:	692b      	ldr	r3, [r5, #16]
 8013b1a:	3a04      	subs	r2, #4
 8013b1c:	f7f8 fc86 	bl	800c42c <ucdr_init_buffer_origin>
 8013b20:	4628      	mov	r0, r5
 8013b22:	4903      	ldr	r1, [pc, #12]	@ (8013b30 <on_full_input_buffer+0x68>)
 8013b24:	4622      	mov	r2, r4
 8013b26:	f7f8 fc5d 	bl	800c3e4 <ucdr_set_on_full_buffer_callback>
 8013b2a:	2000      	movs	r0, #0
 8013b2c:	bd70      	pop	{r4, r5, r6, pc}
 8013b2e:	bf00      	nop
 8013b30:	08013ac9 	.word	0x08013ac9

08013b34 <uxr_init_input_reliable_stream>:
 8013b34:	b500      	push	{lr}
 8013b36:	e9c0 1200 	strd	r1, r2, [r0]
 8013b3a:	f04f 0e00 	mov.w	lr, #0
 8013b3e:	9a01      	ldr	r2, [sp, #4]
 8013b40:	8103      	strh	r3, [r0, #8]
 8013b42:	6102      	str	r2, [r0, #16]
 8013b44:	f880 e014 	strb.w	lr, [r0, #20]
 8013b48:	b1d3      	cbz	r3, 8013b80 <uxr_init_input_reliable_stream+0x4c>
 8013b4a:	f8c1 e000 	str.w	lr, [r1]
 8013b4e:	f8b0 c008 	ldrh.w	ip, [r0, #8]
 8013b52:	f1bc 0f01 	cmp.w	ip, #1
 8013b56:	d913      	bls.n	8013b80 <uxr_init_input_reliable_stream+0x4c>
 8013b58:	2301      	movs	r3, #1
 8013b5a:	fbb3 f1fc 	udiv	r1, r3, ip
 8013b5e:	fb0c 3111 	mls	r1, ip, r1, r3
 8013b62:	b289      	uxth	r1, r1
 8013b64:	6842      	ldr	r2, [r0, #4]
 8013b66:	fbb2 f2fc 	udiv	r2, r2, ip
 8013b6a:	fb01 f202 	mul.w	r2, r1, r2
 8013b6e:	6801      	ldr	r1, [r0, #0]
 8013b70:	f841 e002 	str.w	lr, [r1, r2]
 8013b74:	3301      	adds	r3, #1
 8013b76:	f8b0 c008 	ldrh.w	ip, [r0, #8]
 8013b7a:	b29b      	uxth	r3, r3
 8013b7c:	459c      	cmp	ip, r3
 8013b7e:	d8ec      	bhi.n	8013b5a <uxr_init_input_reliable_stream+0x26>
 8013b80:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8013b84:	60c3      	str	r3, [r0, #12]
 8013b86:	f85d fb04 	ldr.w	pc, [sp], #4
 8013b8a:	bf00      	nop

08013b8c <uxr_reset_input_reliable_stream>:
 8013b8c:	8901      	ldrh	r1, [r0, #8]
 8013b8e:	b1e9      	cbz	r1, 8013bcc <uxr_reset_input_reliable_stream+0x40>
 8013b90:	f04f 0c00 	mov.w	ip, #0
 8013b94:	b500      	push	{lr}
 8013b96:	4663      	mov	r3, ip
 8013b98:	46e6      	mov	lr, ip
 8013b9a:	fbb3 f2f1 	udiv	r2, r3, r1
 8013b9e:	fb01 3312 	mls	r3, r1, r2, r3
 8013ba2:	b29b      	uxth	r3, r3
 8013ba4:	6842      	ldr	r2, [r0, #4]
 8013ba6:	fbb2 f2f1 	udiv	r2, r2, r1
 8013baa:	fb02 f303 	mul.w	r3, r2, r3
 8013bae:	6802      	ldr	r2, [r0, #0]
 8013bb0:	f842 e003 	str.w	lr, [r2, r3]
 8013bb4:	f10c 0c01 	add.w	ip, ip, #1
 8013bb8:	8901      	ldrh	r1, [r0, #8]
 8013bba:	fa1f f38c 	uxth.w	r3, ip
 8013bbe:	4299      	cmp	r1, r3
 8013bc0:	d8eb      	bhi.n	8013b9a <uxr_reset_input_reliable_stream+0xe>
 8013bc2:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8013bc6:	60c3      	str	r3, [r0, #12]
 8013bc8:	f85d fb04 	ldr.w	pc, [sp], #4
 8013bcc:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8013bd0:	60c3      	str	r3, [r0, #12]
 8013bd2:	4770      	bx	lr

08013bd4 <uxr_receive_reliable_message>:
 8013bd4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8013bd8:	4604      	mov	r4, r0
 8013bda:	460d      	mov	r5, r1
 8013bdc:	8901      	ldrh	r1, [r0, #8]
 8013bde:	8980      	ldrh	r0, [r0, #12]
 8013be0:	4690      	mov	r8, r2
 8013be2:	461f      	mov	r7, r3
 8013be4:	f000 fc82 	bl	80144ec <uxr_seq_num_add>
 8013be8:	4629      	mov	r1, r5
 8013bea:	4606      	mov	r6, r0
 8013bec:	89a0      	ldrh	r0, [r4, #12]
 8013bee:	f000 fc85 	bl	80144fc <uxr_seq_num_cmp>
 8013bf2:	2800      	cmp	r0, #0
 8013bf4:	db0a      	blt.n	8013c0c <uxr_receive_reliable_message+0x38>
 8013bf6:	2600      	movs	r6, #0
 8013bf8:	89e0      	ldrh	r0, [r4, #14]
 8013bfa:	4629      	mov	r1, r5
 8013bfc:	f000 fc7e 	bl	80144fc <uxr_seq_num_cmp>
 8013c00:	2800      	cmp	r0, #0
 8013c02:	da00      	bge.n	8013c06 <uxr_receive_reliable_message+0x32>
 8013c04:	81e5      	strh	r5, [r4, #14]
 8013c06:	4630      	mov	r0, r6
 8013c08:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8013c0c:	4630      	mov	r0, r6
 8013c0e:	4629      	mov	r1, r5
 8013c10:	f000 fc74 	bl	80144fc <uxr_seq_num_cmp>
 8013c14:	2800      	cmp	r0, #0
 8013c16:	dbee      	blt.n	8013bf6 <uxr_receive_reliable_message+0x22>
 8013c18:	6923      	ldr	r3, [r4, #16]
 8013c1a:	4640      	mov	r0, r8
 8013c1c:	4798      	blx	r3
 8013c1e:	2101      	movs	r1, #1
 8013c20:	4681      	mov	r9, r0
 8013c22:	89a0      	ldrh	r0, [r4, #12]
 8013c24:	f000 fc62 	bl	80144ec <uxr_seq_num_add>
 8013c28:	f1b9 0f00 	cmp.w	r9, #0
 8013c2c:	d101      	bne.n	8013c32 <uxr_receive_reliable_message+0x5e>
 8013c2e:	4285      	cmp	r5, r0
 8013c30:	d047      	beq.n	8013cc2 <uxr_receive_reliable_message+0xee>
 8013c32:	8922      	ldrh	r2, [r4, #8]
 8013c34:	fbb5 f0f2 	udiv	r0, r5, r2
 8013c38:	fb02 5010 	mls	r0, r2, r0, r5
 8013c3c:	b280      	uxth	r0, r0
 8013c3e:	6863      	ldr	r3, [r4, #4]
 8013c40:	fbb3 f3f2 	udiv	r3, r3, r2
 8013c44:	fb00 f303 	mul.w	r3, r0, r3
 8013c48:	6820      	ldr	r0, [r4, #0]
 8013c4a:	3304      	adds	r3, #4
 8013c4c:	4418      	add	r0, r3
 8013c4e:	f850 3c04 	ldr.w	r3, [r0, #-4]
 8013c52:	2b00      	cmp	r3, #0
 8013c54:	d1cf      	bne.n	8013bf6 <uxr_receive_reliable_message+0x22>
 8013c56:	4641      	mov	r1, r8
 8013c58:	463a      	mov	r2, r7
 8013c5a:	f001 fd7a 	bl	8015752 <memcpy>
 8013c5e:	8921      	ldrh	r1, [r4, #8]
 8013c60:	fbb5 f2f1 	udiv	r2, r5, r1
 8013c64:	fb01 5212 	mls	r2, r1, r2, r5
 8013c68:	b292      	uxth	r2, r2
 8013c6a:	6863      	ldr	r3, [r4, #4]
 8013c6c:	fbb3 f3f1 	udiv	r3, r3, r1
 8013c70:	fb02 f303 	mul.w	r3, r2, r3
 8013c74:	6822      	ldr	r2, [r4, #0]
 8013c76:	50d7      	str	r7, [r2, r3]
 8013c78:	9a08      	ldr	r2, [sp, #32]
 8013c7a:	2301      	movs	r3, #1
 8013c7c:	7013      	strb	r3, [r2, #0]
 8013c7e:	f1b9 0f00 	cmp.w	r9, #0
 8013c82:	d0b8      	beq.n	8013bf6 <uxr_receive_reliable_message+0x22>
 8013c84:	89a6      	ldrh	r6, [r4, #12]
 8013c86:	4630      	mov	r0, r6
 8013c88:	2101      	movs	r1, #1
 8013c8a:	f000 fc2f 	bl	80144ec <uxr_seq_num_add>
 8013c8e:	8922      	ldrh	r2, [r4, #8]
 8013c90:	6863      	ldr	r3, [r4, #4]
 8013c92:	fbb3 f3f2 	udiv	r3, r3, r2
 8013c96:	4606      	mov	r6, r0
 8013c98:	fbb0 f0f2 	udiv	r0, r0, r2
 8013c9c:	fb02 6010 	mls	r0, r2, r0, r6
 8013ca0:	b280      	uxth	r0, r0
 8013ca2:	fb00 f303 	mul.w	r3, r0, r3
 8013ca6:	6820      	ldr	r0, [r4, #0]
 8013ca8:	3304      	adds	r3, #4
 8013caa:	4418      	add	r0, r3
 8013cac:	f850 3c04 	ldr.w	r3, [r0, #-4]
 8013cb0:	2b00      	cmp	r3, #0
 8013cb2:	d0a0      	beq.n	8013bf6 <uxr_receive_reliable_message+0x22>
 8013cb4:	6923      	ldr	r3, [r4, #16]
 8013cb6:	4798      	blx	r3
 8013cb8:	2802      	cmp	r0, #2
 8013cba:	d008      	beq.n	8013cce <uxr_receive_reliable_message+0xfa>
 8013cbc:	2801      	cmp	r0, #1
 8013cbe:	d0e2      	beq.n	8013c86 <uxr_receive_reliable_message+0xb2>
 8013cc0:	e799      	b.n	8013bf6 <uxr_receive_reliable_message+0x22>
 8013cc2:	9b08      	ldr	r3, [sp, #32]
 8013cc4:	81a5      	strh	r5, [r4, #12]
 8013cc6:	2601      	movs	r6, #1
 8013cc8:	f883 9000 	strb.w	r9, [r3]
 8013ccc:	e794      	b.n	8013bf8 <uxr_receive_reliable_message+0x24>
 8013cce:	2601      	movs	r6, #1
 8013cd0:	e792      	b.n	8013bf8 <uxr_receive_reliable_message+0x24>
 8013cd2:	bf00      	nop

08013cd4 <uxr_next_input_reliable_buffer_available>:
 8013cd4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8013cd8:	4604      	mov	r4, r0
 8013cda:	460f      	mov	r7, r1
 8013cdc:	8980      	ldrh	r0, [r0, #12]
 8013cde:	2101      	movs	r1, #1
 8013ce0:	4690      	mov	r8, r2
 8013ce2:	f000 fc03 	bl	80144ec <uxr_seq_num_add>
 8013ce6:	8922      	ldrh	r2, [r4, #8]
 8013ce8:	fbb0 f6f2 	udiv	r6, r0, r2
 8013cec:	fb02 0616 	mls	r6, r2, r6, r0
 8013cf0:	b2b6      	uxth	r6, r6
 8013cf2:	6863      	ldr	r3, [r4, #4]
 8013cf4:	fbb3 f3f2 	udiv	r3, r3, r2
 8013cf8:	fb06 f303 	mul.w	r3, r6, r3
 8013cfc:	6826      	ldr	r6, [r4, #0]
 8013cfe:	3304      	adds	r3, #4
 8013d00:	441e      	add	r6, r3
 8013d02:	f856 9c04 	ldr.w	r9, [r6, #-4]
 8013d06:	f1b9 0f00 	cmp.w	r9, #0
 8013d0a:	d023      	beq.n	8013d54 <uxr_next_input_reliable_buffer_available+0x80>
 8013d0c:	6923      	ldr	r3, [r4, #16]
 8013d0e:	4605      	mov	r5, r0
 8013d10:	4630      	mov	r0, r6
 8013d12:	4798      	blx	r3
 8013d14:	4682      	mov	sl, r0
 8013d16:	b300      	cbz	r0, 8013d5a <uxr_next_input_reliable_buffer_available+0x86>
 8013d18:	f8b4 a00c 	ldrh.w	sl, [r4, #12]
 8013d1c:	2101      	movs	r1, #1
 8013d1e:	4650      	mov	r0, sl
 8013d20:	f000 fbe4 	bl	80144ec <uxr_seq_num_add>
 8013d24:	8921      	ldrh	r1, [r4, #8]
 8013d26:	fbb0 f2f1 	udiv	r2, r0, r1
 8013d2a:	4682      	mov	sl, r0
 8013d2c:	fb01 0212 	mls	r2, r1, r2, r0
 8013d30:	e9d4 0300 	ldrd	r0, r3, [r4]
 8013d34:	b292      	uxth	r2, r2
 8013d36:	fbb3 f3f1 	udiv	r3, r3, r1
 8013d3a:	fb02 f303 	mul.w	r3, r2, r3
 8013d3e:	3304      	adds	r3, #4
 8013d40:	4418      	add	r0, r3
 8013d42:	f850 3c04 	ldr.w	r3, [r0, #-4]
 8013d46:	b12b      	cbz	r3, 8013d54 <uxr_next_input_reliable_buffer_available+0x80>
 8013d48:	6923      	ldr	r3, [r4, #16]
 8013d4a:	4798      	blx	r3
 8013d4c:	2802      	cmp	r0, #2
 8013d4e:	d01b      	beq.n	8013d88 <uxr_next_input_reliable_buffer_available+0xb4>
 8013d50:	2801      	cmp	r0, #1
 8013d52:	d0e3      	beq.n	8013d1c <uxr_next_input_reliable_buffer_available+0x48>
 8013d54:	2000      	movs	r0, #0
 8013d56:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013d5a:	464a      	mov	r2, r9
 8013d5c:	4631      	mov	r1, r6
 8013d5e:	4638      	mov	r0, r7
 8013d60:	f7f8 fb6c 	bl	800c43c <ucdr_init_buffer>
 8013d64:	8921      	ldrh	r1, [r4, #8]
 8013d66:	fbb5 f2f1 	udiv	r2, r5, r1
 8013d6a:	fb01 5212 	mls	r2, r1, r2, r5
 8013d6e:	b292      	uxth	r2, r2
 8013d70:	6863      	ldr	r3, [r4, #4]
 8013d72:	fbb3 f3f1 	udiv	r3, r3, r1
 8013d76:	fb02 f303 	mul.w	r3, r2, r3
 8013d7a:	6822      	ldr	r2, [r4, #0]
 8013d7c:	f842 a003 	str.w	sl, [r2, r3]
 8013d80:	2001      	movs	r0, #1
 8013d82:	81a5      	strh	r5, [r4, #12]
 8013d84:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013d88:	8920      	ldrh	r0, [r4, #8]
 8013d8a:	fbb5 f3f0 	udiv	r3, r5, r0
 8013d8e:	fb00 5513 	mls	r5, r0, r3, r5
 8013d92:	b2ad      	uxth	r5, r5
 8013d94:	6863      	ldr	r3, [r4, #4]
 8013d96:	fbb3 f3f0 	udiv	r3, r3, r0
 8013d9a:	fb03 f505 	mul.w	r5, r3, r5
 8013d9e:	6823      	ldr	r3, [r4, #0]
 8013da0:	2000      	movs	r0, #0
 8013da2:	5158      	str	r0, [r3, r5]
 8013da4:	eb06 0108 	add.w	r1, r6, r8
 8013da8:	eba9 0208 	sub.w	r2, r9, r8
 8013dac:	4638      	mov	r0, r7
 8013dae:	f7f8 fb45 	bl	800c43c <ucdr_init_buffer>
 8013db2:	4638      	mov	r0, r7
 8013db4:	4903      	ldr	r1, [pc, #12]	@ (8013dc4 <uxr_next_input_reliable_buffer_available+0xf0>)
 8013db6:	4622      	mov	r2, r4
 8013db8:	f7f8 fb14 	bl	800c3e4 <ucdr_set_on_full_buffer_callback>
 8013dbc:	f8a4 a00c 	strh.w	sl, [r4, #12]
 8013dc0:	2001      	movs	r0, #1
 8013dc2:	e7c8      	b.n	8013d56 <uxr_next_input_reliable_buffer_available+0x82>
 8013dc4:	08013ac9 	.word	0x08013ac9

08013dc8 <uxr_process_heartbeat>:
 8013dc8:	b538      	push	{r3, r4, r5, lr}
 8013dca:	4611      	mov	r1, r2
 8013dcc:	4604      	mov	r4, r0
 8013dce:	89c0      	ldrh	r0, [r0, #14]
 8013dd0:	4615      	mov	r5, r2
 8013dd2:	f000 fb93 	bl	80144fc <uxr_seq_num_cmp>
 8013dd6:	2800      	cmp	r0, #0
 8013dd8:	bfb8      	it	lt
 8013dda:	81e5      	strhlt	r5, [r4, #14]
 8013ddc:	bd38      	pop	{r3, r4, r5, pc}
 8013dde:	bf00      	nop

08013de0 <uxr_compute_acknack>:
 8013de0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8013de4:	8903      	ldrh	r3, [r0, #8]
 8013de6:	8985      	ldrh	r5, [r0, #12]
 8013de8:	4604      	mov	r4, r0
 8013dea:	460e      	mov	r6, r1
 8013dec:	b1d3      	cbz	r3, 8013e24 <uxr_compute_acknack+0x44>
 8013dee:	4628      	mov	r0, r5
 8013df0:	2701      	movs	r7, #1
 8013df2:	e003      	b.n	8013dfc <uxr_compute_acknack+0x1c>
 8013df4:	4567      	cmp	r7, ip
 8013df6:	d215      	bcs.n	8013e24 <uxr_compute_acknack+0x44>
 8013df8:	89a0      	ldrh	r0, [r4, #12]
 8013dfa:	3701      	adds	r7, #1
 8013dfc:	b2b9      	uxth	r1, r7
 8013dfe:	f000 fb75 	bl	80144ec <uxr_seq_num_add>
 8013e02:	f8b4 c008 	ldrh.w	ip, [r4, #8]
 8013e06:	fbb0 f3fc 	udiv	r3, r0, ip
 8013e0a:	fb0c 0313 	mls	r3, ip, r3, r0
 8013e0e:	b29a      	uxth	r2, r3
 8013e10:	e9d4 1300 	ldrd	r1, r3, [r4]
 8013e14:	fbb3 f3fc 	udiv	r3, r3, ip
 8013e18:	fb02 f303 	mul.w	r3, r2, r3
 8013e1c:	58cb      	ldr	r3, [r1, r3]
 8013e1e:	2b00      	cmp	r3, #0
 8013e20:	d1e8      	bne.n	8013df4 <uxr_compute_acknack+0x14>
 8013e22:	4605      	mov	r5, r0
 8013e24:	8035      	strh	r5, [r6, #0]
 8013e26:	2101      	movs	r1, #1
 8013e28:	4628      	mov	r0, r5
 8013e2a:	89e7      	ldrh	r7, [r4, #14]
 8013e2c:	f000 fb62 	bl	80144f4 <uxr_seq_num_sub>
 8013e30:	4601      	mov	r1, r0
 8013e32:	4638      	mov	r0, r7
 8013e34:	f000 fb5e 	bl	80144f4 <uxr_seq_num_sub>
 8013e38:	4605      	mov	r5, r0
 8013e3a:	b318      	cbz	r0, 8013e84 <uxr_compute_acknack+0xa4>
 8013e3c:	f04f 0900 	mov.w	r9, #0
 8013e40:	464f      	mov	r7, r9
 8013e42:	f04f 0801 	mov.w	r8, #1
 8013e46:	fa1f f189 	uxth.w	r1, r9
 8013e4a:	8830      	ldrh	r0, [r6, #0]
 8013e4c:	f000 fb4e 	bl	80144ec <uxr_seq_num_add>
 8013e50:	f8b4 c008 	ldrh.w	ip, [r4, #8]
 8013e54:	fbb0 f3fc 	udiv	r3, r0, ip
 8013e58:	e9d4 1200 	ldrd	r1, r2, [r4]
 8013e5c:	fb03 001c 	mls	r0, r3, ip, r0
 8013e60:	b283      	uxth	r3, r0
 8013e62:	fbb2 f2fc 	udiv	r2, r2, ip
 8013e66:	fb02 f303 	mul.w	r3, r2, r3
 8013e6a:	fa08 f209 	lsl.w	r2, r8, r9
 8013e6e:	58cb      	ldr	r3, [r1, r3]
 8013e70:	f109 0901 	add.w	r9, r9, #1
 8013e74:	b90b      	cbnz	r3, 8013e7a <uxr_compute_acknack+0x9a>
 8013e76:	4317      	orrs	r7, r2
 8013e78:	b2bf      	uxth	r7, r7
 8013e7a:	454d      	cmp	r5, r9
 8013e7c:	d1e3      	bne.n	8013e46 <uxr_compute_acknack+0x66>
 8013e7e:	4638      	mov	r0, r7
 8013e80:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8013e84:	4607      	mov	r7, r0
 8013e86:	4638      	mov	r0, r7
 8013e88:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

08013e8c <uxr_init_output_best_effort_stream>:
 8013e8c:	f64f 7cff 	movw	ip, #65535	@ 0xffff
 8013e90:	e9c0 3201 	strd	r3, r2, [r0, #4]
 8013e94:	6001      	str	r1, [r0, #0]
 8013e96:	7303      	strb	r3, [r0, #12]
 8013e98:	f8a0 c00e 	strh.w	ip, [r0, #14]
 8013e9c:	4770      	bx	lr
 8013e9e:	bf00      	nop

08013ea0 <uxr_reset_output_best_effort_stream>:
 8013ea0:	7b02      	ldrb	r2, [r0, #12]
 8013ea2:	6042      	str	r2, [r0, #4]
 8013ea4:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8013ea8:	81c3      	strh	r3, [r0, #14]
 8013eaa:	4770      	bx	lr

08013eac <uxr_prepare_best_effort_buffer_to_write>:
 8013eac:	b5f0      	push	{r4, r5, r6, r7, lr}
 8013eae:	4604      	mov	r4, r0
 8013eb0:	b083      	sub	sp, #12
 8013eb2:	6840      	ldr	r0, [r0, #4]
 8013eb4:	460d      	mov	r5, r1
 8013eb6:	4616      	mov	r6, r2
 8013eb8:	f7fa fd4c 	bl	800e954 <uxr_submessage_padding>
 8013ebc:	6863      	ldr	r3, [r4, #4]
 8013ebe:	4418      	add	r0, r3
 8013ec0:	68a3      	ldr	r3, [r4, #8]
 8013ec2:	1942      	adds	r2, r0, r5
 8013ec4:	4293      	cmp	r3, r2
 8013ec6:	bf2c      	ite	cs
 8013ec8:	2701      	movcs	r7, #1
 8013eca:	2700      	movcc	r7, #0
 8013ecc:	d202      	bcs.n	8013ed4 <uxr_prepare_best_effort_buffer_to_write+0x28>
 8013ece:	4638      	mov	r0, r7
 8013ed0:	b003      	add	sp, #12
 8013ed2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8013ed4:	9000      	str	r0, [sp, #0]
 8013ed6:	6821      	ldr	r1, [r4, #0]
 8013ed8:	4630      	mov	r0, r6
 8013eda:	2300      	movs	r3, #0
 8013edc:	f7f8 fa9c 	bl	800c418 <ucdr_init_buffer_origin_offset>
 8013ee0:	6861      	ldr	r1, [r4, #4]
 8013ee2:	4638      	mov	r0, r7
 8013ee4:	4429      	add	r1, r5
 8013ee6:	6061      	str	r1, [r4, #4]
 8013ee8:	b003      	add	sp, #12
 8013eea:	bdf0      	pop	{r4, r5, r6, r7, pc}

08013eec <uxr_prepare_best_effort_buffer_to_send>:
 8013eec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013ef0:	4604      	mov	r4, r0
 8013ef2:	461d      	mov	r5, r3
 8013ef4:	6840      	ldr	r0, [r0, #4]
 8013ef6:	7b23      	ldrb	r3, [r4, #12]
 8013ef8:	4298      	cmp	r0, r3
 8013efa:	bf8c      	ite	hi
 8013efc:	2601      	movhi	r6, #1
 8013efe:	2600      	movls	r6, #0
 8013f00:	d802      	bhi.n	8013f08 <uxr_prepare_best_effort_buffer_to_send+0x1c>
 8013f02:	4630      	mov	r0, r6
 8013f04:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013f08:	4688      	mov	r8, r1
 8013f0a:	89e0      	ldrh	r0, [r4, #14]
 8013f0c:	2101      	movs	r1, #1
 8013f0e:	4617      	mov	r7, r2
 8013f10:	f000 faec 	bl	80144ec <uxr_seq_num_add>
 8013f14:	6823      	ldr	r3, [r4, #0]
 8013f16:	81e0      	strh	r0, [r4, #14]
 8013f18:	8028      	strh	r0, [r5, #0]
 8013f1a:	f8c8 3000 	str.w	r3, [r8]
 8013f1e:	6863      	ldr	r3, [r4, #4]
 8013f20:	603b      	str	r3, [r7, #0]
 8013f22:	7b23      	ldrb	r3, [r4, #12]
 8013f24:	6063      	str	r3, [r4, #4]
 8013f26:	4630      	mov	r0, r6
 8013f28:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08013f2c <on_full_output_buffer>:
 8013f2c:	b538      	push	{r3, r4, r5, lr}
 8013f2e:	6802      	ldr	r2, [r0, #0]
 8013f30:	460c      	mov	r4, r1
 8013f32:	6809      	ldr	r1, [r1, #0]
 8013f34:	8923      	ldrh	r3, [r4, #8]
 8013f36:	eba2 0c01 	sub.w	ip, r2, r1
 8013f3a:	6862      	ldr	r2, [r4, #4]
 8013f3c:	fbb2 f2f3 	udiv	r2, r2, r3
 8013f40:	fbbc fcf2 	udiv	ip, ip, r2
 8013f44:	f10c 0c01 	add.w	ip, ip, #1
 8013f48:	fa1f fc8c 	uxth.w	ip, ip
 8013f4c:	fbbc fef3 	udiv	lr, ip, r3
 8013f50:	fb03 c31e 	mls	r3, r3, lr, ip
 8013f54:	b29b      	uxth	r3, r3
 8013f56:	fb02 f303 	mul.w	r3, r2, r3
 8013f5a:	f894 c00c 	ldrb.w	ip, [r4, #12]
 8013f5e:	58ca      	ldr	r2, [r1, r3]
 8013f60:	4463      	add	r3, ip
 8013f62:	eba2 020c 	sub.w	r2, r2, ip
 8013f66:	3308      	adds	r3, #8
 8013f68:	4605      	mov	r5, r0
 8013f6a:	4419      	add	r1, r3
 8013f6c:	3a04      	subs	r2, #4
 8013f6e:	6903      	ldr	r3, [r0, #16]
 8013f70:	f7f8 fa5c 	bl	800c42c <ucdr_init_buffer_origin>
 8013f74:	4628      	mov	r0, r5
 8013f76:	4903      	ldr	r1, [pc, #12]	@ (8013f84 <on_full_output_buffer+0x58>)
 8013f78:	4622      	mov	r2, r4
 8013f7a:	f7f8 fa33 	bl	800c3e4 <ucdr_set_on_full_buffer_callback>
 8013f7e:	2000      	movs	r0, #0
 8013f80:	bd38      	pop	{r3, r4, r5, pc}
 8013f82:	bf00      	nop
 8013f84:	08013f2d 	.word	0x08013f2d

08013f88 <uxr_init_output_reliable_stream>:
 8013f88:	b410      	push	{r4}
 8013f8a:	f89d c004 	ldrb.w	ip, [sp, #4]
 8013f8e:	8103      	strh	r3, [r0, #8]
 8013f90:	e9c0 1200 	strd	r1, r2, [r0]
 8013f94:	f880 c00c 	strb.w	ip, [r0, #12]
 8013f98:	b1d3      	cbz	r3, 8013fd0 <uxr_init_output_reliable_stream+0x48>
 8013f9a:	f8c1 c000 	str.w	ip, [r1]
 8013f9e:	f8b0 c008 	ldrh.w	ip, [r0, #8]
 8013fa2:	f1bc 0f01 	cmp.w	ip, #1
 8013fa6:	d913      	bls.n	8013fd0 <uxr_init_output_reliable_stream+0x48>
 8013fa8:	2301      	movs	r3, #1
 8013faa:	fbb3 f1fc 	udiv	r1, r3, ip
 8013fae:	fb0c 3111 	mls	r1, ip, r1, r3
 8013fb2:	b289      	uxth	r1, r1
 8013fb4:	6842      	ldr	r2, [r0, #4]
 8013fb6:	6804      	ldr	r4, [r0, #0]
 8013fb8:	fbb2 f2fc 	udiv	r2, r2, ip
 8013fbc:	fb01 f202 	mul.w	r2, r1, r2
 8013fc0:	7b01      	ldrb	r1, [r0, #12]
 8013fc2:	50a1      	str	r1, [r4, r2]
 8013fc4:	3301      	adds	r3, #1
 8013fc6:	f8b0 c008 	ldrh.w	ip, [r0, #8]
 8013fca:	b29b      	uxth	r3, r3
 8013fcc:	459c      	cmp	ip, r3
 8013fce:	d8ec      	bhi.n	8013faa <uxr_init_output_reliable_stream+0x22>
 8013fd0:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8013fd4:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 8013fd8:	e9c0 2306 	strd	r2, r3, [r0, #24]
 8013fdc:	4905      	ldr	r1, [pc, #20]	@ (8013ff4 <uxr_init_output_reliable_stream+0x6c>)
 8013fde:	f85d 4b04 	ldr.w	r4, [sp], #4
 8013fe2:	f8c0 100e 	str.w	r1, [r0, #14]
 8013fe6:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8013fea:	2300      	movs	r3, #0
 8013fec:	8242      	strh	r2, [r0, #18]
 8013fee:	8403      	strh	r3, [r0, #32]
 8013ff0:	4770      	bx	lr
 8013ff2:	bf00      	nop
 8013ff4:	ffff0000 	.word	0xffff0000

08013ff8 <uxr_reset_output_reliable_stream>:
 8013ff8:	8901      	ldrh	r1, [r0, #8]
 8013ffa:	b1b1      	cbz	r1, 801402a <uxr_reset_output_reliable_stream+0x32>
 8013ffc:	f04f 0c00 	mov.w	ip, #0
 8014000:	4663      	mov	r3, ip
 8014002:	fbb3 f2f1 	udiv	r2, r3, r1
 8014006:	fb01 3312 	mls	r3, r1, r2, r3
 801400a:	b29b      	uxth	r3, r3
 801400c:	6842      	ldr	r2, [r0, #4]
 801400e:	fbb2 f2f1 	udiv	r2, r2, r1
 8014012:	6801      	ldr	r1, [r0, #0]
 8014014:	fb02 f303 	mul.w	r3, r2, r3
 8014018:	7b02      	ldrb	r2, [r0, #12]
 801401a:	50ca      	str	r2, [r1, r3]
 801401c:	f10c 0c01 	add.w	ip, ip, #1
 8014020:	8901      	ldrh	r1, [r0, #8]
 8014022:	fa1f f38c 	uxth.w	r3, ip
 8014026:	4299      	cmp	r1, r3
 8014028:	d8eb      	bhi.n	8014002 <uxr_reset_output_reliable_stream+0xa>
 801402a:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 801402e:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 8014032:	e9c0 2306 	strd	r2, r3, [r0, #24]
 8014036:	4904      	ldr	r1, [pc, #16]	@ (8014048 <uxr_reset_output_reliable_stream+0x50>)
 8014038:	f8c0 100e 	str.w	r1, [r0, #14]
 801403c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8014040:	2300      	movs	r3, #0
 8014042:	8242      	strh	r2, [r0, #18]
 8014044:	8403      	strh	r3, [r0, #32]
 8014046:	4770      	bx	lr
 8014048:	ffff0000 	.word	0xffff0000

0801404c <uxr_prepare_reliable_buffer_to_write>:
 801404c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014050:	4604      	mov	r4, r0
 8014052:	b091      	sub	sp, #68	@ 0x44
 8014054:	8900      	ldrh	r0, [r0, #8]
 8014056:	89e6      	ldrh	r6, [r4, #14]
 8014058:	6823      	ldr	r3, [r4, #0]
 801405a:	9204      	str	r2, [sp, #16]
 801405c:	fbb6 f2f0 	udiv	r2, r6, r0
 8014060:	fb00 6212 	mls	r2, r0, r2, r6
 8014064:	b292      	uxth	r2, r2
 8014066:	6865      	ldr	r5, [r4, #4]
 8014068:	fbb5 f5f0 	udiv	r5, r5, r0
 801406c:	fb05 3202 	mla	r2, r5, r2, r3
 8014070:	3204      	adds	r2, #4
 8014072:	f852 8c04 	ldr.w	r8, [r2, #-4]
 8014076:	f894 900c 	ldrb.w	r9, [r4, #12]
 801407a:	9203      	str	r2, [sp, #12]
 801407c:	468b      	mov	fp, r1
 801407e:	1f2f      	subs	r7, r5, #4
 8014080:	2800      	cmp	r0, #0
 8014082:	f000 814c 	beq.w	801431e <uxr_prepare_reliable_buffer_to_write+0x2d2>
 8014086:	f04f 0c00 	mov.w	ip, #0
 801408a:	46e2      	mov	sl, ip
 801408c:	4661      	mov	r1, ip
 801408e:	fbb1 f2f0 	udiv	r2, r1, r0
 8014092:	fb00 1212 	mls	r2, r0, r2, r1
 8014096:	b292      	uxth	r2, r2
 8014098:	fb05 f202 	mul.w	r2, r5, r2
 801409c:	f10c 0c01 	add.w	ip, ip, #1
 80140a0:	589a      	ldr	r2, [r3, r2]
 80140a2:	454a      	cmp	r2, r9
 80140a4:	bf08      	it	eq
 80140a6:	f10a 0a01 	addeq.w	sl, sl, #1
 80140aa:	fa1f f18c 	uxth.w	r1, ip
 80140ae:	bf08      	it	eq
 80140b0:	fa1f fa8a 	uxtheq.w	sl, sl
 80140b4:	4281      	cmp	r1, r0
 80140b6:	d3ea      	bcc.n	801408e <uxr_prepare_reliable_buffer_to_write+0x42>
 80140b8:	4640      	mov	r0, r8
 80140ba:	2104      	movs	r1, #4
 80140bc:	f8cd a014 	str.w	sl, [sp, #20]
 80140c0:	f7f8 f9c0 	bl	800c444 <ucdr_alignment>
 80140c4:	4480      	add	r8, r0
 80140c6:	eb08 020b 	add.w	r2, r8, fp
 80140ca:	42ba      	cmp	r2, r7
 80140cc:	f240 80cd 	bls.w	801426a <uxr_prepare_reliable_buffer_to_write+0x21e>
 80140d0:	7b22      	ldrb	r2, [r4, #12]
 80140d2:	445a      	add	r2, fp
 80140d4:	42ba      	cmp	r2, r7
 80140d6:	f240 80b5 	bls.w	8014244 <uxr_prepare_reliable_buffer_to_write+0x1f8>
 80140da:	f5c9 437f 	rsb	r3, r9, #65280	@ 0xff00
 80140de:	33fc      	adds	r3, #252	@ 0xfc
 80140e0:	b2ba      	uxth	r2, r7
 80140e2:	4413      	add	r3, r2
 80140e4:	b29b      	uxth	r3, r3
 80140e6:	fb0a f903 	mul.w	r9, sl, r3
 80140ea:	45d9      	cmp	r9, fp
 80140ec:	9305      	str	r3, [sp, #20]
 80140ee:	9306      	str	r3, [sp, #24]
 80140f0:	f0c0 80b7 	bcc.w	8014262 <uxr_prepare_reliable_buffer_to_write+0x216>
 80140f4:	f108 0304 	add.w	r3, r8, #4
 80140f8:	42bb      	cmp	r3, r7
 80140fa:	f080 80db 	bcs.w	80142b4 <uxr_prepare_reliable_buffer_to_write+0x268>
 80140fe:	f1a2 0904 	sub.w	r9, r2, #4
 8014102:	eba9 0908 	sub.w	r9, r9, r8
 8014106:	9b05      	ldr	r3, [sp, #20]
 8014108:	fa1f f989 	uxth.w	r9, r9
 801410c:	ebab 0b09 	sub.w	fp, fp, r9
 8014110:	fbbb f2f3 	udiv	r2, fp, r3
 8014114:	fb03 b312 	mls	r3, r3, r2, fp
 8014118:	2b00      	cmp	r3, #0
 801411a:	f000 80c8 	beq.w	80142ae <uxr_prepare_reliable_buffer_to_write+0x262>
 801411e:	3201      	adds	r2, #1
 8014120:	b292      	uxth	r2, r2
 8014122:	9306      	str	r3, [sp, #24]
 8014124:	4552      	cmp	r2, sl
 8014126:	f200 809c 	bhi.w	8014262 <uxr_prepare_reliable_buffer_to_write+0x216>
 801412a:	f10d 0b20 	add.w	fp, sp, #32
 801412e:	2a00      	cmp	r2, #0
 8014130:	d042      	beq.n	80141b8 <uxr_prepare_reliable_buffer_to_write+0x16c>
 8014132:	f8cd 801c 	str.w	r8, [sp, #28]
 8014136:	f04f 0a00 	mov.w	sl, #0
 801413a:	f8dd 8014 	ldr.w	r8, [sp, #20]
 801413e:	9505      	str	r5, [sp, #20]
 8014140:	f10d 0b20 	add.w	fp, sp, #32
 8014144:	4615      	mov	r5, r2
 8014146:	e000      	b.n	801414a <uxr_prepare_reliable_buffer_to_write+0xfe>
 8014148:	46c1      	mov	r9, r8
 801414a:	8920      	ldrh	r0, [r4, #8]
 801414c:	fbb6 f2f0 	udiv	r2, r6, r0
 8014150:	fb00 6112 	mls	r1, r0, r2, r6
 8014154:	b28a      	uxth	r2, r1
 8014156:	6863      	ldr	r3, [r4, #4]
 8014158:	fbb3 f1f0 	udiv	r1, r3, r0
 801415c:	6823      	ldr	r3, [r4, #0]
 801415e:	fb02 f101 	mul.w	r1, r2, r1
 8014162:	3104      	adds	r1, #4
 8014164:	4419      	add	r1, r3
 8014166:	4658      	mov	r0, fp
 8014168:	f851 2c04 	ldr.w	r2, [r1, #-4]
 801416c:	9200      	str	r2, [sp, #0]
 801416e:	2300      	movs	r3, #0
 8014170:	463a      	mov	r2, r7
 8014172:	f7f8 f951 	bl	800c418 <ucdr_init_buffer_origin_offset>
 8014176:	464a      	mov	r2, r9
 8014178:	2300      	movs	r3, #0
 801417a:	210d      	movs	r1, #13
 801417c:	4658      	mov	r0, fp
 801417e:	f7fa fba9 	bl	800e8d4 <uxr_buffer_submessage_header>
 8014182:	8921      	ldrh	r1, [r4, #8]
 8014184:	fbb6 f2f1 	udiv	r2, r6, r1
 8014188:	fb01 6212 	mls	r2, r1, r2, r6
 801418c:	b292      	uxth	r2, r2
 801418e:	6863      	ldr	r3, [r4, #4]
 8014190:	fbb3 f3f1 	udiv	r3, r3, r1
 8014194:	fb02 f303 	mul.w	r3, r2, r3
 8014198:	6822      	ldr	r2, [r4, #0]
 801419a:	4630      	mov	r0, r6
 801419c:	50d7      	str	r7, [r2, r3]
 801419e:	2101      	movs	r1, #1
 80141a0:	f000 f9a4 	bl	80144ec <uxr_seq_num_add>
 80141a4:	f10a 0a01 	add.w	sl, sl, #1
 80141a8:	fa1f f38a 	uxth.w	r3, sl
 80141ac:	429d      	cmp	r5, r3
 80141ae:	4606      	mov	r6, r0
 80141b0:	d8ca      	bhi.n	8014148 <uxr_prepare_reliable_buffer_to_write+0xfc>
 80141b2:	f8dd 801c 	ldr.w	r8, [sp, #28]
 80141b6:	9d05      	ldr	r5, [sp, #20]
 80141b8:	8920      	ldrh	r0, [r4, #8]
 80141ba:	fbb6 f3f0 	udiv	r3, r6, r0
 80141be:	fb00 6313 	mls	r3, r0, r3, r6
 80141c2:	b299      	uxth	r1, r3
 80141c4:	6863      	ldr	r3, [r4, #4]
 80141c6:	fbb3 f3f0 	udiv	r3, r3, r0
 80141ca:	fb01 f303 	mul.w	r3, r1, r3
 80141ce:	6821      	ldr	r1, [r4, #0]
 80141d0:	3304      	adds	r3, #4
 80141d2:	4419      	add	r1, r3
 80141d4:	463a      	mov	r2, r7
 80141d6:	f851 0c04 	ldr.w	r0, [r1, #-4]
 80141da:	9000      	str	r0, [sp, #0]
 80141dc:	2300      	movs	r3, #0
 80141de:	4658      	mov	r0, fp
 80141e0:	f7f8 f91a 	bl	800c418 <ucdr_init_buffer_origin_offset>
 80141e4:	f8dd 9018 	ldr.w	r9, [sp, #24]
 80141e8:	4658      	mov	r0, fp
 80141ea:	fa1f f289 	uxth.w	r2, r9
 80141ee:	2302      	movs	r3, #2
 80141f0:	210d      	movs	r1, #13
 80141f2:	f7fa fb6f 	bl	800e8d4 <uxr_buffer_submessage_header>
 80141f6:	9b03      	ldr	r3, [sp, #12]
 80141f8:	8927      	ldrh	r7, [r4, #8]
 80141fa:	7b20      	ldrb	r0, [r4, #12]
 80141fc:	f108 0104 	add.w	r1, r8, #4
 8014200:	440b      	add	r3, r1
 8014202:	4619      	mov	r1, r3
 8014204:	fbb6 f3f7 	udiv	r3, r6, r7
 8014208:	fb07 6313 	mls	r3, r7, r3, r6
 801420c:	f1a5 0208 	sub.w	r2, r5, #8
 8014210:	b29d      	uxth	r5, r3
 8014212:	3004      	adds	r0, #4
 8014214:	6863      	ldr	r3, [r4, #4]
 8014216:	fbb3 f3f7 	udiv	r3, r3, r7
 801421a:	fb05 f303 	mul.w	r3, r5, r3
 801421e:	6825      	ldr	r5, [r4, #0]
 8014220:	4448      	add	r0, r9
 8014222:	50e8      	str	r0, [r5, r3]
 8014224:	9d04      	ldr	r5, [sp, #16]
 8014226:	eba2 0208 	sub.w	r2, r2, r8
 801422a:	4628      	mov	r0, r5
 801422c:	f7f8 f906 	bl	800c43c <ucdr_init_buffer>
 8014230:	4628      	mov	r0, r5
 8014232:	493c      	ldr	r1, [pc, #240]	@ (8014324 <uxr_prepare_reliable_buffer_to_write+0x2d8>)
 8014234:	4622      	mov	r2, r4
 8014236:	f7f8 f8d5 	bl	800c3e4 <ucdr_set_on_full_buffer_callback>
 801423a:	2001      	movs	r0, #1
 801423c:	81e6      	strh	r6, [r4, #14]
 801423e:	b011      	add	sp, #68	@ 0x44
 8014240:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014244:	2101      	movs	r1, #1
 8014246:	89e0      	ldrh	r0, [r4, #14]
 8014248:	f000 f950 	bl	80144ec <uxr_seq_num_add>
 801424c:	8921      	ldrh	r1, [r4, #8]
 801424e:	4605      	mov	r5, r0
 8014250:	8a60      	ldrh	r0, [r4, #18]
 8014252:	f000 f94b 	bl	80144ec <uxr_seq_num_add>
 8014256:	4601      	mov	r1, r0
 8014258:	4628      	mov	r0, r5
 801425a:	f000 f94f 	bl	80144fc <uxr_seq_num_cmp>
 801425e:	2800      	cmp	r0, #0
 8014260:	dd42      	ble.n	80142e8 <uxr_prepare_reliable_buffer_to_write+0x29c>
 8014262:	2000      	movs	r0, #0
 8014264:	b011      	add	sp, #68	@ 0x44
 8014266:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801426a:	8921      	ldrh	r1, [r4, #8]
 801426c:	8a60      	ldrh	r0, [r4, #18]
 801426e:	9205      	str	r2, [sp, #20]
 8014270:	f000 f93c 	bl	80144ec <uxr_seq_num_add>
 8014274:	4601      	mov	r1, r0
 8014276:	4630      	mov	r0, r6
 8014278:	f000 f940 	bl	80144fc <uxr_seq_num_cmp>
 801427c:	2800      	cmp	r0, #0
 801427e:	9a05      	ldr	r2, [sp, #20]
 8014280:	dcef      	bgt.n	8014262 <uxr_prepare_reliable_buffer_to_write+0x216>
 8014282:	8927      	ldrh	r7, [r4, #8]
 8014284:	fbb6 f3f7 	udiv	r3, r6, r7
 8014288:	fb07 6313 	mls	r3, r7, r3, r6
 801428c:	b29d      	uxth	r5, r3
 801428e:	6863      	ldr	r3, [r4, #4]
 8014290:	6824      	ldr	r4, [r4, #0]
 8014292:	fbb3 f3f7 	udiv	r3, r3, r7
 8014296:	fb05 f303 	mul.w	r3, r5, r3
 801429a:	e9dd 1003 	ldrd	r1, r0, [sp, #12]
 801429e:	50e2      	str	r2, [r4, r3]
 80142a0:	2300      	movs	r3, #0
 80142a2:	f8cd 8000 	str.w	r8, [sp]
 80142a6:	f7f8 f8b7 	bl	800c418 <ucdr_init_buffer_origin_offset>
 80142aa:	2001      	movs	r0, #1
 80142ac:	e7da      	b.n	8014264 <uxr_prepare_reliable_buffer_to_write+0x218>
 80142ae:	b293      	uxth	r3, r2
 80142b0:	461a      	mov	r2, r3
 80142b2:	e737      	b.n	8014124 <uxr_prepare_reliable_buffer_to_write+0xd8>
 80142b4:	4630      	mov	r0, r6
 80142b6:	2101      	movs	r1, #1
 80142b8:	9207      	str	r2, [sp, #28]
 80142ba:	f000 f917 	bl	80144ec <uxr_seq_num_add>
 80142be:	f8b4 c008 	ldrh.w	ip, [r4, #8]
 80142c2:	fbb0 f1fc 	udiv	r1, r0, ip
 80142c6:	fb0c 0111 	mls	r1, ip, r1, r0
 80142ca:	4606      	mov	r6, r0
 80142cc:	b288      	uxth	r0, r1
 80142ce:	6863      	ldr	r3, [r4, #4]
 80142d0:	fbb3 f1fc 	udiv	r1, r3, ip
 80142d4:	6823      	ldr	r3, [r4, #0]
 80142d6:	9a07      	ldr	r2, [sp, #28]
 80142d8:	fb00 f101 	mul.w	r1, r0, r1
 80142dc:	3104      	adds	r1, #4
 80142de:	440b      	add	r3, r1
 80142e0:	9303      	str	r3, [sp, #12]
 80142e2:	f853 8c04 	ldr.w	r8, [r3, #-4]
 80142e6:	e70a      	b.n	80140fe <uxr_prepare_reliable_buffer_to_write+0xb2>
 80142e8:	8921      	ldrh	r1, [r4, #8]
 80142ea:	fbb5 f3f1 	udiv	r3, r5, r1
 80142ee:	fb01 5313 	mls	r3, r1, r3, r5
 80142f2:	b29a      	uxth	r2, r3
 80142f4:	6863      	ldr	r3, [r4, #4]
 80142f6:	fbb3 f3f1 	udiv	r3, r3, r1
 80142fa:	6821      	ldr	r1, [r4, #0]
 80142fc:	9804      	ldr	r0, [sp, #16]
 80142fe:	fb02 f303 	mul.w	r3, r2, r3
 8014302:	3304      	adds	r3, #4
 8014304:	7b22      	ldrb	r2, [r4, #12]
 8014306:	4419      	add	r1, r3
 8014308:	445a      	add	r2, fp
 801430a:	f841 2c04 	str.w	r2, [r1, #-4]
 801430e:	7b23      	ldrb	r3, [r4, #12]
 8014310:	9300      	str	r3, [sp, #0]
 8014312:	2300      	movs	r3, #0
 8014314:	f7f8 f880 	bl	800c418 <ucdr_init_buffer_origin_offset>
 8014318:	81e5      	strh	r5, [r4, #14]
 801431a:	2001      	movs	r0, #1
 801431c:	e7a2      	b.n	8014264 <uxr_prepare_reliable_buffer_to_write+0x218>
 801431e:	4682      	mov	sl, r0
 8014320:	e6ca      	b.n	80140b8 <uxr_prepare_reliable_buffer_to_write+0x6c>
 8014322:	bf00      	nop
 8014324:	08013f2d 	.word	0x08013f2d

08014328 <uxr_prepare_next_reliable_buffer_to_send>:
 8014328:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801432a:	4604      	mov	r4, r0
 801432c:	460f      	mov	r7, r1
 801432e:	8a00      	ldrh	r0, [r0, #16]
 8014330:	2101      	movs	r1, #1
 8014332:	4616      	mov	r6, r2
 8014334:	461d      	mov	r5, r3
 8014336:	f000 f8d9 	bl	80144ec <uxr_seq_num_add>
 801433a:	8028      	strh	r0, [r5, #0]
 801433c:	8922      	ldrh	r2, [r4, #8]
 801433e:	fbb0 f3f2 	udiv	r3, r0, r2
 8014342:	fb02 0c13 	mls	ip, r2, r3, r0
 8014346:	fa1f fc8c 	uxth.w	ip, ip
 801434a:	6863      	ldr	r3, [r4, #4]
 801434c:	fbb3 f3f2 	udiv	r3, r3, r2
 8014350:	fb0c fc03 	mul.w	ip, ip, r3
 8014354:	6823      	ldr	r3, [r4, #0]
 8014356:	89e1      	ldrh	r1, [r4, #14]
 8014358:	f10c 0c04 	add.w	ip, ip, #4
 801435c:	4463      	add	r3, ip
 801435e:	603b      	str	r3, [r7, #0]
 8014360:	6823      	ldr	r3, [r4, #0]
 8014362:	449c      	add	ip, r3
 8014364:	f85c 3c04 	ldr.w	r3, [ip, #-4]
 8014368:	6033      	str	r3, [r6, #0]
 801436a:	f000 f8c7 	bl	80144fc <uxr_seq_num_cmp>
 801436e:	2800      	cmp	r0, #0
 8014370:	dd01      	ble.n	8014376 <uxr_prepare_next_reliable_buffer_to_send+0x4e>
 8014372:	2000      	movs	r0, #0
 8014374:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8014376:	7b23      	ldrb	r3, [r4, #12]
 8014378:	6832      	ldr	r2, [r6, #0]
 801437a:	429a      	cmp	r2, r3
 801437c:	d9f9      	bls.n	8014372 <uxr_prepare_next_reliable_buffer_to_send+0x4a>
 801437e:	8a61      	ldrh	r1, [r4, #18]
 8014380:	8a20      	ldrh	r0, [r4, #16]
 8014382:	f000 f8b7 	bl	80144f4 <uxr_seq_num_sub>
 8014386:	8923      	ldrh	r3, [r4, #8]
 8014388:	4283      	cmp	r3, r0
 801438a:	d0f2      	beq.n	8014372 <uxr_prepare_next_reliable_buffer_to_send+0x4a>
 801438c:	8828      	ldrh	r0, [r5, #0]
 801438e:	89e3      	ldrh	r3, [r4, #14]
 8014390:	8220      	strh	r0, [r4, #16]
 8014392:	4298      	cmp	r0, r3
 8014394:	d001      	beq.n	801439a <uxr_prepare_next_reliable_buffer_to_send+0x72>
 8014396:	2001      	movs	r0, #1
 8014398:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801439a:	2101      	movs	r1, #1
 801439c:	f000 f8a6 	bl	80144ec <uxr_seq_num_add>
 80143a0:	81e0      	strh	r0, [r4, #14]
 80143a2:	2001      	movs	r0, #1
 80143a4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80143a6:	bf00      	nop

080143a8 <uxr_update_output_stream_heartbeat_timestamp>:
 80143a8:	b570      	push	{r4, r5, r6, lr}
 80143aa:	8a01      	ldrh	r1, [r0, #16]
 80143ac:	4604      	mov	r4, r0
 80143ae:	8a40      	ldrh	r0, [r0, #18]
 80143b0:	4615      	mov	r5, r2
 80143b2:	461e      	mov	r6, r3
 80143b4:	f000 f8a2 	bl	80144fc <uxr_seq_num_cmp>
 80143b8:	2800      	cmp	r0, #0
 80143ba:	db07      	blt.n	80143cc <uxr_update_output_stream_heartbeat_timestamp+0x24>
 80143bc:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80143c0:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 80143c4:	e9c4 2306 	strd	r2, r3, [r4, #24]
 80143c8:	2000      	movs	r0, #0
 80143ca:	bd70      	pop	{r4, r5, r6, pc}
 80143cc:	f894 0020 	ldrb.w	r0, [r4, #32]
 80143d0:	b940      	cbnz	r0, 80143e4 <uxr_update_output_stream_heartbeat_timestamp+0x3c>
 80143d2:	2301      	movs	r3, #1
 80143d4:	f884 3020 	strb.w	r3, [r4, #32]
 80143d8:	3564      	adds	r5, #100	@ 0x64
 80143da:	f146 0600 	adc.w	r6, r6, #0
 80143de:	e9c4 5606 	strd	r5, r6, [r4, #24]
 80143e2:	bd70      	pop	{r4, r5, r6, pc}
 80143e4:	e9d4 2306 	ldrd	r2, r3, [r4, #24]
 80143e8:	4295      	cmp	r5, r2
 80143ea:	eb76 0303 	sbcs.w	r3, r6, r3
 80143ee:	bfa5      	ittet	ge
 80143f0:	3001      	addge	r0, #1
 80143f2:	f884 0020 	strbge.w	r0, [r4, #32]
 80143f6:	2000      	movlt	r0, #0
 80143f8:	2001      	movge	r0, #1
 80143fa:	e7ed      	b.n	80143d8 <uxr_update_output_stream_heartbeat_timestamp+0x30>

080143fc <uxr_begin_output_nack_buffer_it>:
 80143fc:	8a40      	ldrh	r0, [r0, #18]
 80143fe:	4770      	bx	lr

08014400 <uxr_next_reliable_nack_buffer_to_send>:
 8014400:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014404:	f890 8021 	ldrb.w	r8, [r0, #33]	@ 0x21
 8014408:	b082      	sub	sp, #8
 801440a:	f1b8 0f00 	cmp.w	r8, #0
 801440e:	d011      	beq.n	8014434 <uxr_next_reliable_nack_buffer_to_send+0x34>
 8014410:	4604      	mov	r4, r0
 8014412:	8818      	ldrh	r0, [r3, #0]
 8014414:	460e      	mov	r6, r1
 8014416:	4617      	mov	r7, r2
 8014418:	461d      	mov	r5, r3
 801441a:	2101      	movs	r1, #1
 801441c:	f000 f866 	bl	80144ec <uxr_seq_num_add>
 8014420:	8028      	strh	r0, [r5, #0]
 8014422:	8a21      	ldrh	r1, [r4, #16]
 8014424:	f000 f86a 	bl	80144fc <uxr_seq_num_cmp>
 8014428:	2800      	cmp	r0, #0
 801442a:	dd07      	ble.n	801443c <uxr_next_reliable_nack_buffer_to_send+0x3c>
 801442c:	f04f 0800 	mov.w	r8, #0
 8014430:	f884 8021 	strb.w	r8, [r4, #33]	@ 0x21
 8014434:	4640      	mov	r0, r8
 8014436:	b002      	add	sp, #8
 8014438:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801443c:	8921      	ldrh	r1, [r4, #8]
 801443e:	8828      	ldrh	r0, [r5, #0]
 8014440:	6823      	ldr	r3, [r4, #0]
 8014442:	fbb0 f2f1 	udiv	r2, r0, r1
 8014446:	fb01 0c12 	mls	ip, r1, r2, r0
 801444a:	fa1f f28c 	uxth.w	r2, ip
 801444e:	9301      	str	r3, [sp, #4]
 8014450:	6863      	ldr	r3, [r4, #4]
 8014452:	fbb3 fcf1 	udiv	ip, r3, r1
 8014456:	9b01      	ldr	r3, [sp, #4]
 8014458:	fb02 fc0c 	mul.w	ip, r2, ip
 801445c:	f10c 0c04 	add.w	ip, ip, #4
 8014460:	4463      	add	r3, ip
 8014462:	6033      	str	r3, [r6, #0]
 8014464:	6823      	ldr	r3, [r4, #0]
 8014466:	4463      	add	r3, ip
 8014468:	f853 3c04 	ldr.w	r3, [r3, #-4]
 801446c:	603b      	str	r3, [r7, #0]
 801446e:	7b22      	ldrb	r2, [r4, #12]
 8014470:	429a      	cmp	r2, r3
 8014472:	d0d2      	beq.n	801441a <uxr_next_reliable_nack_buffer_to_send+0x1a>
 8014474:	4640      	mov	r0, r8
 8014476:	b002      	add	sp, #8
 8014478:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0801447c <uxr_process_acknack>:
 801447c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801447e:	4604      	mov	r4, r0
 8014480:	460e      	mov	r6, r1
 8014482:	4610      	mov	r0, r2
 8014484:	2101      	movs	r1, #1
 8014486:	f000 f835 	bl	80144f4 <uxr_seq_num_sub>
 801448a:	8a61      	ldrh	r1, [r4, #18]
 801448c:	f000 f832 	bl	80144f4 <uxr_seq_num_sub>
 8014490:	b1c0      	cbz	r0, 80144c4 <uxr_process_acknack+0x48>
 8014492:	4605      	mov	r5, r0
 8014494:	2700      	movs	r7, #0
 8014496:	2101      	movs	r1, #1
 8014498:	8a60      	ldrh	r0, [r4, #18]
 801449a:	f000 f827 	bl	80144ec <uxr_seq_num_add>
 801449e:	f8b4 c008 	ldrh.w	ip, [r4, #8]
 80144a2:	fbb0 f1fc 	udiv	r1, r0, ip
 80144a6:	e9d4 2300 	ldrd	r2, r3, [r4]
 80144aa:	fb0c 0111 	mls	r1, ip, r1, r0
 80144ae:	b289      	uxth	r1, r1
 80144b0:	3701      	adds	r7, #1
 80144b2:	fbb3 f3fc 	udiv	r3, r3, ip
 80144b6:	fb01 f303 	mul.w	r3, r1, r3
 80144ba:	42bd      	cmp	r5, r7
 80144bc:	7b21      	ldrb	r1, [r4, #12]
 80144be:	8260      	strh	r0, [r4, #18]
 80144c0:	50d1      	str	r1, [r2, r3]
 80144c2:	d1e8      	bne.n	8014496 <uxr_process_acknack+0x1a>
 80144c4:	3e00      	subs	r6, #0
 80144c6:	f04f 0300 	mov.w	r3, #0
 80144ca:	bf18      	it	ne
 80144cc:	2601      	movne	r6, #1
 80144ce:	f884 3020 	strb.w	r3, [r4, #32]
 80144d2:	f884 6021 	strb.w	r6, [r4, #33]	@ 0x21
 80144d6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080144d8 <uxr_is_output_up_to_date>:
 80144d8:	8a01      	ldrh	r1, [r0, #16]
 80144da:	8a40      	ldrh	r0, [r0, #18]
 80144dc:	b508      	push	{r3, lr}
 80144de:	f000 f80d 	bl	80144fc <uxr_seq_num_cmp>
 80144e2:	fab0 f080 	clz	r0, r0
 80144e6:	0940      	lsrs	r0, r0, #5
 80144e8:	bd08      	pop	{r3, pc}
 80144ea:	bf00      	nop

080144ec <uxr_seq_num_add>:
 80144ec:	4408      	add	r0, r1
 80144ee:	b280      	uxth	r0, r0
 80144f0:	4770      	bx	lr
 80144f2:	bf00      	nop

080144f4 <uxr_seq_num_sub>:
 80144f4:	1a40      	subs	r0, r0, r1
 80144f6:	b280      	uxth	r0, r0
 80144f8:	4770      	bx	lr
 80144fa:	bf00      	nop

080144fc <uxr_seq_num_cmp>:
 80144fc:	4288      	cmp	r0, r1
 80144fe:	d011      	beq.n	8014524 <uxr_seq_num_cmp+0x28>
 8014500:	d309      	bcc.n	8014516 <uxr_seq_num_cmp+0x1a>
 8014502:	4288      	cmp	r0, r1
 8014504:	d910      	bls.n	8014528 <uxr_seq_num_cmp+0x2c>
 8014506:	1a40      	subs	r0, r0, r1
 8014508:	f5b0 4f00 	cmp.w	r0, #32768	@ 0x8000
 801450c:	bfd4      	ite	le
 801450e:	2001      	movle	r0, #1
 8014510:	f04f 30ff 	movgt.w	r0, #4294967295	@ 0xffffffff
 8014514:	4770      	bx	lr
 8014516:	1a0b      	subs	r3, r1, r0
 8014518:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 801451c:	daf1      	bge.n	8014502 <uxr_seq_num_cmp+0x6>
 801451e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8014522:	4770      	bx	lr
 8014524:	2000      	movs	r0, #0
 8014526:	4770      	bx	lr
 8014528:	2001      	movs	r0, #1
 801452a:	4770      	bx	lr

0801452c <uxr_prepare_output_stream>:
 801452c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801452e:	b087      	sub	sp, #28
 8014530:	2707      	movs	r7, #7
 8014532:	9202      	str	r2, [sp, #8]
 8014534:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8014536:	9103      	str	r1, [sp, #12]
 8014538:	2500      	movs	r5, #0
 801453a:	3204      	adds	r2, #4
 801453c:	e9cd 7500 	strd	r7, r5, [sp]
 8014540:	461c      	mov	r4, r3
 8014542:	4606      	mov	r6, r0
 8014544:	f7f9 fa96 	bl	800da74 <uxr_prepare_stream_to_write_submessage>
 8014548:	f080 0201 	eor.w	r2, r0, #1
 801454c:	b2d2      	uxtb	r2, r2
 801454e:	75a2      	strb	r2, [r4, #22]
 8014550:	b112      	cbz	r2, 8014558 <uxr_prepare_output_stream+0x2c>
 8014552:	4628      	mov	r0, r5
 8014554:	b007      	add	sp, #28
 8014556:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8014558:	aa05      	add	r2, sp, #20
 801455a:	9902      	ldr	r1, [sp, #8]
 801455c:	4630      	mov	r0, r6
 801455e:	f7f9 fbbf 	bl	800dce0 <uxr_init_base_object_request>
 8014562:	a905      	add	r1, sp, #20
 8014564:	4605      	mov	r5, r0
 8014566:	4620      	mov	r0, r4
 8014568:	f7fb f900 	bl	800f76c <uxr_serialize_WRITE_DATA_Payload_Data>
 801456c:	e9d4 2101 	ldrd	r2, r1, [r4, #4]
 8014570:	69a6      	ldr	r6, [r4, #24]
 8014572:	69e7      	ldr	r7, [r4, #28]
 8014574:	1a52      	subs	r2, r2, r1
 8014576:	4620      	mov	r0, r4
 8014578:	f7f7 ff60 	bl	800c43c <ucdr_init_buffer>
 801457c:	4620      	mov	r0, r4
 801457e:	463a      	mov	r2, r7
 8014580:	4631      	mov	r1, r6
 8014582:	f7f7 ff2f 	bl	800c3e4 <ucdr_set_on_full_buffer_callback>
 8014586:	4628      	mov	r0, r5
 8014588:	b007      	add	sp, #28
 801458a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0801458c <rcl_get_default_domain_id>:
 801458c:	b530      	push	{r4, r5, lr}
 801458e:	b083      	sub	sp, #12
 8014590:	2300      	movs	r3, #0
 8014592:	9300      	str	r3, [sp, #0]
 8014594:	b1d0      	cbz	r0, 80145cc <rcl_get_default_domain_id+0x40>
 8014596:	4604      	mov	r4, r0
 8014598:	4669      	mov	r1, sp
 801459a:	4815      	ldr	r0, [pc, #84]	@ (80145f0 <rcl_get_default_domain_id+0x64>)
 801459c:	f7fd fef4 	bl	8012388 <rcutils_get_env>
 80145a0:	4602      	mov	r2, r0
 80145a2:	b110      	cbz	r0, 80145aa <rcl_get_default_domain_id+0x1e>
 80145a4:	2001      	movs	r0, #1
 80145a6:	b003      	add	sp, #12
 80145a8:	bd30      	pop	{r4, r5, pc}
 80145aa:	9b00      	ldr	r3, [sp, #0]
 80145ac:	b18b      	cbz	r3, 80145d2 <rcl_get_default_domain_id+0x46>
 80145ae:	7818      	ldrb	r0, [r3, #0]
 80145b0:	2800      	cmp	r0, #0
 80145b2:	d0f8      	beq.n	80145a6 <rcl_get_default_domain_id+0x1a>
 80145b4:	a901      	add	r1, sp, #4
 80145b6:	4618      	mov	r0, r3
 80145b8:	9201      	str	r2, [sp, #4]
 80145ba:	f000 fda7 	bl	801510c <strtoul>
 80145be:	4605      	mov	r5, r0
 80145c0:	b150      	cbz	r0, 80145d8 <rcl_get_default_domain_id+0x4c>
 80145c2:	1c43      	adds	r3, r0, #1
 80145c4:	d00d      	beq.n	80145e2 <rcl_get_default_domain_id+0x56>
 80145c6:	6025      	str	r5, [r4, #0]
 80145c8:	2000      	movs	r0, #0
 80145ca:	e7ec      	b.n	80145a6 <rcl_get_default_domain_id+0x1a>
 80145cc:	200b      	movs	r0, #11
 80145ce:	b003      	add	sp, #12
 80145d0:	bd30      	pop	{r4, r5, pc}
 80145d2:	4618      	mov	r0, r3
 80145d4:	b003      	add	sp, #12
 80145d6:	bd30      	pop	{r4, r5, pc}
 80145d8:	9b01      	ldr	r3, [sp, #4]
 80145da:	781b      	ldrb	r3, [r3, #0]
 80145dc:	2b00      	cmp	r3, #0
 80145de:	d0f2      	beq.n	80145c6 <rcl_get_default_domain_id+0x3a>
 80145e0:	e7e0      	b.n	80145a4 <rcl_get_default_domain_id+0x18>
 80145e2:	f001 f881 	bl	80156e8 <__errno>
 80145e6:	6803      	ldr	r3, [r0, #0]
 80145e8:	2b22      	cmp	r3, #34	@ 0x22
 80145ea:	d1ec      	bne.n	80145c6 <rcl_get_default_domain_id+0x3a>
 80145ec:	e7da      	b.n	80145a4 <rcl_get_default_domain_id+0x18>
 80145ee:	bf00      	nop
 80145f0:	08017078 	.word	0x08017078

080145f4 <rcl_expand_topic_name>:
 80145f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80145f8:	b08b      	sub	sp, #44	@ 0x2c
 80145fa:	9306      	str	r3, [sp, #24]
 80145fc:	2800      	cmp	r0, #0
 80145fe:	f000 80ad 	beq.w	801475c <rcl_expand_topic_name+0x168>
 8014602:	460e      	mov	r6, r1
 8014604:	2900      	cmp	r1, #0
 8014606:	f000 80a9 	beq.w	801475c <rcl_expand_topic_name+0x168>
 801460a:	4617      	mov	r7, r2
 801460c:	2a00      	cmp	r2, #0
 801460e:	f000 80a5 	beq.w	801475c <rcl_expand_topic_name+0x168>
 8014612:	2b00      	cmp	r3, #0
 8014614:	f000 80a2 	beq.w	801475c <rcl_expand_topic_name+0x168>
 8014618:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 801461a:	2b00      	cmp	r3, #0
 801461c:	f000 809e 	beq.w	801475c <rcl_expand_topic_name+0x168>
 8014620:	2200      	movs	r2, #0
 8014622:	a909      	add	r1, sp, #36	@ 0x24
 8014624:	4680      	mov	r8, r0
 8014626:	f000 fa1d 	bl	8014a64 <rcl_validate_topic_name>
 801462a:	4604      	mov	r4, r0
 801462c:	2800      	cmp	r0, #0
 801462e:	f040 8096 	bne.w	801475e <rcl_expand_topic_name+0x16a>
 8014632:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8014634:	2b00      	cmp	r3, #0
 8014636:	f040 809a 	bne.w	801476e <rcl_expand_topic_name+0x17a>
 801463a:	4602      	mov	r2, r0
 801463c:	a909      	add	r1, sp, #36	@ 0x24
 801463e:	4630      	mov	r0, r6
 8014640:	f7fe faec 	bl	8012c1c <rmw_validate_node_name>
 8014644:	2800      	cmp	r0, #0
 8014646:	f040 808e 	bne.w	8014766 <rcl_expand_topic_name+0x172>
 801464a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801464c:	2a00      	cmp	r2, #0
 801464e:	f040 8093 	bne.w	8014778 <rcl_expand_topic_name+0x184>
 8014652:	a909      	add	r1, sp, #36	@ 0x24
 8014654:	4638      	mov	r0, r7
 8014656:	f7fe fac3 	bl	8012be0 <rmw_validate_namespace>
 801465a:	2800      	cmp	r0, #0
 801465c:	f040 8083 	bne.w	8014766 <rcl_expand_topic_name+0x172>
 8014660:	9c09      	ldr	r4, [sp, #36]	@ 0x24
 8014662:	2c00      	cmp	r4, #0
 8014664:	f040 80ed 	bne.w	8014842 <rcl_expand_topic_name+0x24e>
 8014668:	217b      	movs	r1, #123	@ 0x7b
 801466a:	4640      	mov	r0, r8
 801466c:	f000 ffb0 	bl	80155d0 <strchr>
 8014670:	f898 3000 	ldrb.w	r3, [r8]
 8014674:	2b2f      	cmp	r3, #47	@ 0x2f
 8014676:	4605      	mov	r5, r0
 8014678:	f000 809e 	beq.w	80147b8 <rcl_expand_topic_name+0x1c4>
 801467c:	2b7e      	cmp	r3, #126	@ 0x7e
 801467e:	f040 80a2 	bne.w	80147c6 <rcl_expand_topic_name+0x1d2>
 8014682:	4638      	mov	r0, r7
 8014684:	f7eb fdb6 	bl	80001f4 <strlen>
 8014688:	4a82      	ldr	r2, [pc, #520]	@ (8014894 <rcl_expand_topic_name+0x2a0>)
 801468a:	4b83      	ldr	r3, [pc, #524]	@ (8014898 <rcl_expand_topic_name+0x2a4>)
 801468c:	2801      	cmp	r0, #1
 801468e:	bf18      	it	ne
 8014690:	4613      	movne	r3, r2
 8014692:	9302      	str	r3, [sp, #8]
 8014694:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 8014696:	9300      	str	r3, [sp, #0]
 8014698:	e9cd 7603 	strd	r7, r6, [sp, #12]
 801469c:	f108 0301 	add.w	r3, r8, #1
 80146a0:	9305      	str	r3, [sp, #20]
 80146a2:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80146a6:	9301      	str	r3, [sp, #4]
 80146a8:	ab14      	add	r3, sp, #80	@ 0x50
 80146aa:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80146ac:	f7fd fe94 	bl	80123d8 <rcutils_format_string_limit>
 80146b0:	4682      	mov	sl, r0
 80146b2:	2800      	cmp	r0, #0
 80146b4:	f000 80c7 	beq.w	8014846 <rcl_expand_topic_name+0x252>
 80146b8:	2d00      	cmp	r5, #0
 80146ba:	f000 80a2 	beq.w	8014802 <rcl_expand_topic_name+0x20e>
 80146be:	217b      	movs	r1, #123	@ 0x7b
 80146c0:	f000 ff86 	bl	80155d0 <strchr>
 80146c4:	46d1      	mov	r9, sl
 80146c6:	4605      	mov	r5, r0
 80146c8:	9407      	str	r4, [sp, #28]
 80146ca:	46d3      	mov	fp, sl
 80146cc:	464c      	mov	r4, r9
 80146ce:	2d00      	cmp	r5, #0
 80146d0:	f000 80be 	beq.w	8014850 <rcl_expand_topic_name+0x25c>
 80146d4:	217d      	movs	r1, #125	@ 0x7d
 80146d6:	4620      	mov	r0, r4
 80146d8:	f000 ff7a 	bl	80155d0 <strchr>
 80146dc:	eba0 0905 	sub.w	r9, r0, r5
 80146e0:	f109 0a01 	add.w	sl, r9, #1
 80146e4:	486d      	ldr	r0, [pc, #436]	@ (801489c <rcl_expand_topic_name+0x2a8>)
 80146e6:	4652      	mov	r2, sl
 80146e8:	4629      	mov	r1, r5
 80146ea:	f000 ff7e 	bl	80155ea <strncmp>
 80146ee:	2800      	cmp	r0, #0
 80146f0:	d067      	beq.n	80147c2 <rcl_expand_topic_name+0x1ce>
 80146f2:	486b      	ldr	r0, [pc, #428]	@ (80148a0 <rcl_expand_topic_name+0x2ac>)
 80146f4:	4652      	mov	r2, sl
 80146f6:	4629      	mov	r1, r5
 80146f8:	f000 ff77 	bl	80155ea <strncmp>
 80146fc:	b130      	cbz	r0, 801470c <rcl_expand_topic_name+0x118>
 80146fe:	4869      	ldr	r0, [pc, #420]	@ (80148a4 <rcl_expand_topic_name+0x2b0>)
 8014700:	4652      	mov	r2, sl
 8014702:	4629      	mov	r1, r5
 8014704:	f000 ff71 	bl	80155ea <strncmp>
 8014708:	2800      	cmp	r0, #0
 801470a:	d137      	bne.n	801477c <rcl_expand_topic_name+0x188>
 801470c:	46b9      	mov	r9, r7
 801470e:	ab16      	add	r3, sp, #88	@ 0x58
 8014710:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8014714:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 8014718:	ab14      	add	r3, sp, #80	@ 0x50
 801471a:	4628      	mov	r0, r5
 801471c:	cb0c      	ldmia	r3, {r2, r3}
 801471e:	4651      	mov	r1, sl
 8014720:	f7fd ff96 	bl	8012650 <rcutils_strndup>
 8014724:	4605      	mov	r5, r0
 8014726:	2800      	cmp	r0, #0
 8014728:	f000 809c 	beq.w	8014864 <rcl_expand_topic_name+0x270>
 801472c:	464a      	mov	r2, r9
 801472e:	4620      	mov	r0, r4
 8014730:	ab14      	add	r3, sp, #80	@ 0x50
 8014732:	4629      	mov	r1, r5
 8014734:	f7fd fe8a 	bl	801244c <rcutils_repl_str>
 8014738:	9918      	ldr	r1, [sp, #96]	@ 0x60
 801473a:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 801473c:	4604      	mov	r4, r0
 801473e:	4628      	mov	r0, r5
 8014740:	4798      	blx	r3
 8014742:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8014744:	9918      	ldr	r1, [sp, #96]	@ 0x60
 8014746:	4658      	mov	r0, fp
 8014748:	4798      	blx	r3
 801474a:	2c00      	cmp	r4, #0
 801474c:	d07b      	beq.n	8014846 <rcl_expand_topic_name+0x252>
 801474e:	217b      	movs	r1, #123	@ 0x7b
 8014750:	4620      	mov	r0, r4
 8014752:	f000 ff3d 	bl	80155d0 <strchr>
 8014756:	46a3      	mov	fp, r4
 8014758:	4605      	mov	r5, r0
 801475a:	e7b8      	b.n	80146ce <rcl_expand_topic_name+0xda>
 801475c:	240b      	movs	r4, #11
 801475e:	4620      	mov	r0, r4
 8014760:	b00b      	add	sp, #44	@ 0x2c
 8014762:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014766:	f7fb f96d 	bl	800fa44 <rcl_convert_rmw_ret_to_rcl_ret>
 801476a:	4604      	mov	r4, r0
 801476c:	e7f7      	b.n	801475e <rcl_expand_topic_name+0x16a>
 801476e:	2467      	movs	r4, #103	@ 0x67
 8014770:	4620      	mov	r0, r4
 8014772:	b00b      	add	sp, #44	@ 0x2c
 8014774:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014778:	24c9      	movs	r4, #201	@ 0xc9
 801477a:	e7f0      	b.n	801475e <rcl_expand_topic_name+0x16a>
 801477c:	f109 32ff 	add.w	r2, r9, #4294967295	@ 0xffffffff
 8014780:	9806      	ldr	r0, [sp, #24]
 8014782:	1c69      	adds	r1, r5, #1
 8014784:	f7fe f87e 	bl	8012884 <rcutils_string_map_getn>
 8014788:	4681      	mov	r9, r0
 801478a:	2800      	cmp	r0, #0
 801478c:	d1bf      	bne.n	801470e <rcl_expand_topic_name+0x11a>
 801478e:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8014790:	aa16      	add	r2, sp, #88	@ 0x58
 8014792:	6018      	str	r0, [r3, #0]
 8014794:	ca07      	ldmia	r2, {r0, r1, r2}
 8014796:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 801479a:	ab14      	add	r3, sp, #80	@ 0x50
 801479c:	cb0c      	ldmia	r3, {r2, r3}
 801479e:	4651      	mov	r1, sl
 80147a0:	4628      	mov	r0, r5
 80147a2:	f7fd ff55 	bl	8012650 <rcutils_strndup>
 80147a6:	9918      	ldr	r1, [sp, #96]	@ 0x60
 80147a8:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 80147aa:	4798      	blx	r3
 80147ac:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 80147ae:	9918      	ldr	r1, [sp, #96]	@ 0x60
 80147b0:	4658      	mov	r0, fp
 80147b2:	2469      	movs	r4, #105	@ 0x69
 80147b4:	4798      	blx	r3
 80147b6:	e7d2      	b.n	801475e <rcl_expand_topic_name+0x16a>
 80147b8:	2800      	cmp	r0, #0
 80147ba:	d05b      	beq.n	8014874 <rcl_expand_topic_name+0x280>
 80147bc:	46c1      	mov	r9, r8
 80147be:	46a2      	mov	sl, r4
 80147c0:	e782      	b.n	80146c8 <rcl_expand_topic_name+0xd4>
 80147c2:	46b1      	mov	r9, r6
 80147c4:	e7a3      	b.n	801470e <rcl_expand_topic_name+0x11a>
 80147c6:	2800      	cmp	r0, #0
 80147c8:	d1f8      	bne.n	80147bc <rcl_expand_topic_name+0x1c8>
 80147ca:	4638      	mov	r0, r7
 80147cc:	f7eb fd12 	bl	80001f4 <strlen>
 80147d0:	4a35      	ldr	r2, [pc, #212]	@ (80148a8 <rcl_expand_topic_name+0x2b4>)
 80147d2:	4b36      	ldr	r3, [pc, #216]	@ (80148ac <rcl_expand_topic_name+0x2b8>)
 80147d4:	f8cd 8010 	str.w	r8, [sp, #16]
 80147d8:	2801      	cmp	r0, #1
 80147da:	bf18      	it	ne
 80147dc:	4613      	movne	r3, r2
 80147de:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80147e2:	e9cd 1301 	strd	r1, r3, [sp, #4]
 80147e6:	9a18      	ldr	r2, [sp, #96]	@ 0x60
 80147e8:	9703      	str	r7, [sp, #12]
 80147ea:	9200      	str	r2, [sp, #0]
 80147ec:	ab14      	add	r3, sp, #80	@ 0x50
 80147ee:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80147f0:	f7fd fdf2 	bl	80123d8 <rcutils_format_string_limit>
 80147f4:	4682      	mov	sl, r0
 80147f6:	4653      	mov	r3, sl
 80147f8:	b32b      	cbz	r3, 8014846 <rcl_expand_topic_name+0x252>
 80147fa:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80147fc:	f8c3 a000 	str.w	sl, [r3]
 8014800:	e7ad      	b.n	801475e <rcl_expand_topic_name+0x16a>
 8014802:	f89a 3000 	ldrb.w	r3, [sl]
 8014806:	2b2f      	cmp	r3, #47	@ 0x2f
 8014808:	d0f7      	beq.n	80147fa <rcl_expand_topic_name+0x206>
 801480a:	4638      	mov	r0, r7
 801480c:	f7eb fcf2 	bl	80001f4 <strlen>
 8014810:	4a25      	ldr	r2, [pc, #148]	@ (80148a8 <rcl_expand_topic_name+0x2b4>)
 8014812:	4b26      	ldr	r3, [pc, #152]	@ (80148ac <rcl_expand_topic_name+0x2b8>)
 8014814:	f8cd a010 	str.w	sl, [sp, #16]
 8014818:	2801      	cmp	r0, #1
 801481a:	bf18      	it	ne
 801481c:	4613      	movne	r3, r2
 801481e:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8014822:	e9cd 1301 	strd	r1, r3, [sp, #4]
 8014826:	9a18      	ldr	r2, [sp, #96]	@ 0x60
 8014828:	9703      	str	r7, [sp, #12]
 801482a:	9200      	str	r2, [sp, #0]
 801482c:	ab14      	add	r3, sp, #80	@ 0x50
 801482e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8014830:	f7fd fdd2 	bl	80123d8 <rcutils_format_string_limit>
 8014834:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8014836:	9918      	ldr	r1, [sp, #96]	@ 0x60
 8014838:	4605      	mov	r5, r0
 801483a:	4650      	mov	r0, sl
 801483c:	4798      	blx	r3
 801483e:	46aa      	mov	sl, r5
 8014840:	e7d9      	b.n	80147f6 <rcl_expand_topic_name+0x202>
 8014842:	24ca      	movs	r4, #202	@ 0xca
 8014844:	e78b      	b.n	801475e <rcl_expand_topic_name+0x16a>
 8014846:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8014848:	2300      	movs	r3, #0
 801484a:	6013      	str	r3, [r2, #0]
 801484c:	240a      	movs	r4, #10
 801484e:	e786      	b.n	801475e <rcl_expand_topic_name+0x16a>
 8014850:	465b      	mov	r3, fp
 8014852:	9c07      	ldr	r4, [sp, #28]
 8014854:	46da      	mov	sl, fp
 8014856:	2b00      	cmp	r3, #0
 8014858:	d1d3      	bne.n	8014802 <rcl_expand_topic_name+0x20e>
 801485a:	f898 3000 	ldrb.w	r3, [r8]
 801485e:	2b2f      	cmp	r3, #47	@ 0x2f
 8014860:	d0cb      	beq.n	80147fa <rcl_expand_topic_name+0x206>
 8014862:	e7b2      	b.n	80147ca <rcl_expand_topic_name+0x1d6>
 8014864:	e9dd 1218 	ldrd	r1, r2, [sp, #96]	@ 0x60
 8014868:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 801486a:	6015      	str	r5, [r2, #0]
 801486c:	4658      	mov	r0, fp
 801486e:	4798      	blx	r3
 8014870:	240a      	movs	r4, #10
 8014872:	e774      	b.n	801475e <rcl_expand_topic_name+0x16a>
 8014874:	ab17      	add	r3, sp, #92	@ 0x5c
 8014876:	e893 0003 	ldmia.w	r3, {r0, r1}
 801487a:	e88d 0003 	stmia.w	sp, {r0, r1}
 801487e:	ab14      	add	r3, sp, #80	@ 0x50
 8014880:	cb0e      	ldmia	r3, {r1, r2, r3}
 8014882:	4640      	mov	r0, r8
 8014884:	f7fd fec2 	bl	801260c <rcutils_strdup>
 8014888:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 801488a:	2800      	cmp	r0, #0
 801488c:	6018      	str	r0, [r3, #0]
 801488e:	bf08      	it	eq
 8014890:	240a      	moveq	r4, #10
 8014892:	e764      	b.n	801475e <rcl_expand_topic_name+0x16a>
 8014894:	08017088 	.word	0x08017088
 8014898:	08016744 	.word	0x08016744
 801489c:	08017090 	.word	0x08017090
 80148a0:	08017098 	.word	0x08017098
 80148a4:	080170a0 	.word	0x080170a0
 80148a8:	0801670c 	.word	0x0801670c
 80148ac:	08016754 	.word	0x08016754

080148b0 <rcl_get_default_topic_name_substitutions>:
 80148b0:	2800      	cmp	r0, #0
 80148b2:	bf0c      	ite	eq
 80148b4:	200b      	moveq	r0, #11
 80148b6:	2000      	movne	r0, #0
 80148b8:	4770      	bx	lr
 80148ba:	bf00      	nop

080148bc <rcl_get_zero_initialized_guard_condition>:
 80148bc:	4a03      	ldr	r2, [pc, #12]	@ (80148cc <rcl_get_zero_initialized_guard_condition+0x10>)
 80148be:	4603      	mov	r3, r0
 80148c0:	e892 0003 	ldmia.w	r2, {r0, r1}
 80148c4:	e883 0003 	stmia.w	r3, {r0, r1}
 80148c8:	4618      	mov	r0, r3
 80148ca:	4770      	bx	lr
 80148cc:	080170ac 	.word	0x080170ac

080148d0 <rcl_guard_condition_init_from_rmw>:
 80148d0:	b082      	sub	sp, #8
 80148d2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80148d6:	b086      	sub	sp, #24
 80148d8:	f10d 0c30 	add.w	ip, sp, #48	@ 0x30
 80148dc:	4604      	mov	r4, r0
 80148de:	f84c 3f04 	str.w	r3, [ip, #4]!
 80148e2:	460e      	mov	r6, r1
 80148e4:	4617      	mov	r7, r2
 80148e6:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 80148ea:	f10d 0e04 	add.w	lr, sp, #4
 80148ee:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 80148f2:	f8dc 3000 	ldr.w	r3, [ip]
 80148f6:	f8ce 3000 	str.w	r3, [lr]
 80148fa:	a801      	add	r0, sp, #4
 80148fc:	f7f5 fbca 	bl	800a094 <rcutils_allocator_is_valid>
 8014900:	b350      	cbz	r0, 8014958 <rcl_guard_condition_init_from_rmw+0x88>
 8014902:	b34c      	cbz	r4, 8014958 <rcl_guard_condition_init_from_rmw+0x88>
 8014904:	f8d4 8004 	ldr.w	r8, [r4, #4]
 8014908:	f1b8 0f00 	cmp.w	r8, #0
 801490c:	d11e      	bne.n	801494c <rcl_guard_condition_init_from_rmw+0x7c>
 801490e:	b31f      	cbz	r7, 8014958 <rcl_guard_condition_init_from_rmw+0x88>
 8014910:	4638      	mov	r0, r7
 8014912:	f7fb f8b5 	bl	800fa80 <rcl_context_is_valid>
 8014916:	b328      	cbz	r0, 8014964 <rcl_guard_condition_init_from_rmw+0x94>
 8014918:	9b01      	ldr	r3, [sp, #4]
 801491a:	9905      	ldr	r1, [sp, #20]
 801491c:	201c      	movs	r0, #28
 801491e:	4798      	blx	r3
 8014920:	4605      	mov	r5, r0
 8014922:	6060      	str	r0, [r4, #4]
 8014924:	b358      	cbz	r0, 801497e <rcl_guard_condition_init_from_rmw+0xae>
 8014926:	b1fe      	cbz	r6, 8014968 <rcl_guard_condition_init_from_rmw+0x98>
 8014928:	6006      	str	r6, [r0, #0]
 801492a:	f880 8004 	strb.w	r8, [r0, #4]
 801492e:	ac01      	add	r4, sp, #4
 8014930:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8014932:	f105 0c08 	add.w	ip, r5, #8
 8014936:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801493a:	6823      	ldr	r3, [r4, #0]
 801493c:	f8cc 3000 	str.w	r3, [ip]
 8014940:	2000      	movs	r0, #0
 8014942:	b006      	add	sp, #24
 8014944:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8014948:	b002      	add	sp, #8
 801494a:	4770      	bx	lr
 801494c:	2064      	movs	r0, #100	@ 0x64
 801494e:	b006      	add	sp, #24
 8014950:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8014954:	b002      	add	sp, #8
 8014956:	4770      	bx	lr
 8014958:	200b      	movs	r0, #11
 801495a:	b006      	add	sp, #24
 801495c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8014960:	b002      	add	sp, #8
 8014962:	4770      	bx	lr
 8014964:	2065      	movs	r0, #101	@ 0x65
 8014966:	e7f2      	b.n	801494e <rcl_guard_condition_init_from_rmw+0x7e>
 8014968:	6838      	ldr	r0, [r7, #0]
 801496a:	3028      	adds	r0, #40	@ 0x28
 801496c:	f000 f974 	bl	8014c58 <rmw_create_guard_condition>
 8014970:	6028      	str	r0, [r5, #0]
 8014972:	6865      	ldr	r5, [r4, #4]
 8014974:	682e      	ldr	r6, [r5, #0]
 8014976:	b126      	cbz	r6, 8014982 <rcl_guard_condition_init_from_rmw+0xb2>
 8014978:	2301      	movs	r3, #1
 801497a:	712b      	strb	r3, [r5, #4]
 801497c:	e7d7      	b.n	801492e <rcl_guard_condition_init_from_rmw+0x5e>
 801497e:	200a      	movs	r0, #10
 8014980:	e7e5      	b.n	801494e <rcl_guard_condition_init_from_rmw+0x7e>
 8014982:	4628      	mov	r0, r5
 8014984:	9b02      	ldr	r3, [sp, #8]
 8014986:	9905      	ldr	r1, [sp, #20]
 8014988:	4798      	blx	r3
 801498a:	6066      	str	r6, [r4, #4]
 801498c:	2001      	movs	r0, #1
 801498e:	e7de      	b.n	801494e <rcl_guard_condition_init_from_rmw+0x7e>

08014990 <rcl_guard_condition_fini>:
 8014990:	b570      	push	{r4, r5, r6, lr}
 8014992:	b082      	sub	sp, #8
 8014994:	b1f0      	cbz	r0, 80149d4 <rcl_guard_condition_fini+0x44>
 8014996:	6843      	ldr	r3, [r0, #4]
 8014998:	4604      	mov	r4, r0
 801499a:	b163      	cbz	r3, 80149b6 <rcl_guard_condition_fini+0x26>
 801499c:	6818      	ldr	r0, [r3, #0]
 801499e:	68de      	ldr	r6, [r3, #12]
 80149a0:	6999      	ldr	r1, [r3, #24]
 80149a2:	b160      	cbz	r0, 80149be <rcl_guard_condition_fini+0x2e>
 80149a4:	791d      	ldrb	r5, [r3, #4]
 80149a6:	b965      	cbnz	r5, 80149c2 <rcl_guard_condition_fini+0x32>
 80149a8:	4618      	mov	r0, r3
 80149aa:	47b0      	blx	r6
 80149ac:	2300      	movs	r3, #0
 80149ae:	4628      	mov	r0, r5
 80149b0:	6063      	str	r3, [r4, #4]
 80149b2:	b002      	add	sp, #8
 80149b4:	bd70      	pop	{r4, r5, r6, pc}
 80149b6:	461d      	mov	r5, r3
 80149b8:	4628      	mov	r0, r5
 80149ba:	b002      	add	sp, #8
 80149bc:	bd70      	pop	{r4, r5, r6, pc}
 80149be:	4605      	mov	r5, r0
 80149c0:	e7f2      	b.n	80149a8 <rcl_guard_condition_fini+0x18>
 80149c2:	9101      	str	r1, [sp, #4]
 80149c4:	f000 f95c 	bl	8014c80 <rmw_destroy_guard_condition>
 80149c8:	1e05      	subs	r5, r0, #0
 80149ca:	6863      	ldr	r3, [r4, #4]
 80149cc:	9901      	ldr	r1, [sp, #4]
 80149ce:	bf18      	it	ne
 80149d0:	2501      	movne	r5, #1
 80149d2:	e7e9      	b.n	80149a8 <rcl_guard_condition_fini+0x18>
 80149d4:	250b      	movs	r5, #11
 80149d6:	4628      	mov	r0, r5
 80149d8:	b002      	add	sp, #8
 80149da:	bd70      	pop	{r4, r5, r6, pc}

080149dc <rcl_guard_condition_get_default_options>:
 80149dc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80149de:	b087      	sub	sp, #28
 80149e0:	4606      	mov	r6, r0
 80149e2:	4668      	mov	r0, sp
 80149e4:	f7f5 fb48 	bl	800a078 <rcutils_get_default_allocator>
 80149e8:	4b09      	ldr	r3, [pc, #36]	@ (8014a10 <rcl_guard_condition_get_default_options+0x34>)
 80149ea:	46ee      	mov	lr, sp
 80149ec:	469c      	mov	ip, r3
 80149ee:	461d      	mov	r5, r3
 80149f0:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 80149f4:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80149f8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80149fa:	4634      	mov	r4, r6
 80149fc:	f8de 7000 	ldr.w	r7, [lr]
 8014a00:	f8cc 7000 	str.w	r7, [ip]
 8014a04:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8014a06:	4630      	mov	r0, r6
 8014a08:	6027      	str	r7, [r4, #0]
 8014a0a:	b007      	add	sp, #28
 8014a0c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8014a0e:	bf00      	nop
 8014a10:	2000dbe4 	.word	0x2000dbe4

08014a14 <rcl_guard_condition_get_rmw_handle>:
 8014a14:	b110      	cbz	r0, 8014a1c <rcl_guard_condition_get_rmw_handle+0x8>
 8014a16:	6840      	ldr	r0, [r0, #4]
 8014a18:	b100      	cbz	r0, 8014a1c <rcl_guard_condition_get_rmw_handle+0x8>
 8014a1a:	6800      	ldr	r0, [r0, #0]
 8014a1c:	4770      	bx	lr
 8014a1e:	bf00      	nop

08014a20 <rcl_publisher_is_valid>:
 8014a20:	b1a0      	cbz	r0, 8014a4c <rcl_publisher_is_valid+0x2c>
 8014a22:	6803      	ldr	r3, [r0, #0]
 8014a24:	b510      	push	{r4, lr}
 8014a26:	4604      	mov	r4, r0
 8014a28:	b173      	cbz	r3, 8014a48 <rcl_publisher_is_valid+0x28>
 8014a2a:	f8d3 20c4 	ldr.w	r2, [r3, #196]	@ 0xc4
 8014a2e:	b15a      	cbz	r2, 8014a48 <rcl_publisher_is_valid+0x28>
 8014a30:	f8d3 00c0 	ldr.w	r0, [r3, #192]	@ 0xc0
 8014a34:	f7fb f824 	bl	800fa80 <rcl_context_is_valid>
 8014a38:	b130      	cbz	r0, 8014a48 <rcl_publisher_is_valid+0x28>
 8014a3a:	6823      	ldr	r3, [r4, #0]
 8014a3c:	f8d3 00c4 	ldr.w	r0, [r3, #196]	@ 0xc4
 8014a40:	3800      	subs	r0, #0
 8014a42:	bf18      	it	ne
 8014a44:	2001      	movne	r0, #1
 8014a46:	bd10      	pop	{r4, pc}
 8014a48:	2000      	movs	r0, #0
 8014a4a:	bd10      	pop	{r4, pc}
 8014a4c:	2000      	movs	r0, #0
 8014a4e:	4770      	bx	lr

08014a50 <rcl_publisher_is_valid_except_context>:
 8014a50:	b130      	cbz	r0, 8014a60 <rcl_publisher_is_valid_except_context+0x10>
 8014a52:	6800      	ldr	r0, [r0, #0]
 8014a54:	b120      	cbz	r0, 8014a60 <rcl_publisher_is_valid_except_context+0x10>
 8014a56:	f8d0 00c4 	ldr.w	r0, [r0, #196]	@ 0xc4
 8014a5a:	3800      	subs	r0, #0
 8014a5c:	bf18      	it	ne
 8014a5e:	2001      	movne	r0, #1
 8014a60:	4770      	bx	lr
 8014a62:	bf00      	nop

08014a64 <rcl_validate_topic_name>:
 8014a64:	2800      	cmp	r0, #0
 8014a66:	d07a      	beq.n	8014b5e <rcl_validate_topic_name+0xfa>
 8014a68:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8014a6c:	460e      	mov	r6, r1
 8014a6e:	2900      	cmp	r1, #0
 8014a70:	d07c      	beq.n	8014b6c <rcl_validate_topic_name+0x108>
 8014a72:	4617      	mov	r7, r2
 8014a74:	4605      	mov	r5, r0
 8014a76:	f7eb fbbd 	bl	80001f4 <strlen>
 8014a7a:	b1b0      	cbz	r0, 8014aaa <rcl_validate_topic_name+0x46>
 8014a7c:	f895 9000 	ldrb.w	r9, [r5]
 8014a80:	f8df c180 	ldr.w	ip, [pc, #384]	@ 8014c04 <rcl_validate_topic_name+0x1a0>
 8014a84:	f81c 3009 	ldrb.w	r3, [ip, r9]
 8014a88:	f013 0304 	ands.w	r3, r3, #4
 8014a8c:	d169      	bne.n	8014b62 <rcl_validate_topic_name+0xfe>
 8014a8e:	f100 38ff 	add.w	r8, r0, #4294967295	@ 0xffffffff
 8014a92:	f815 2008 	ldrb.w	r2, [r5, r8]
 8014a96:	2a2f      	cmp	r2, #47	@ 0x2f
 8014a98:	d10e      	bne.n	8014ab8 <rcl_validate_topic_name+0x54>
 8014a9a:	2202      	movs	r2, #2
 8014a9c:	6032      	str	r2, [r6, #0]
 8014a9e:	b36f      	cbz	r7, 8014afc <rcl_validate_topic_name+0x98>
 8014aa0:	f8c7 8000 	str.w	r8, [r7]
 8014aa4:	4618      	mov	r0, r3
 8014aa6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8014aaa:	2301      	movs	r3, #1
 8014aac:	6033      	str	r3, [r6, #0]
 8014aae:	b32f      	cbz	r7, 8014afc <rcl_validate_topic_name+0x98>
 8014ab0:	2000      	movs	r0, #0
 8014ab2:	6038      	str	r0, [r7, #0]
 8014ab4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8014ab8:	f105 3aff 	add.w	sl, r5, #4294967295	@ 0xffffffff
 8014abc:	461c      	mov	r4, r3
 8014abe:	4619      	mov	r1, r3
 8014ac0:	f81a 2f01 	ldrb.w	r2, [sl, #1]!
 8014ac4:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 8014ac8:	f1be 0f09 	cmp.w	lr, #9
 8014acc:	d919      	bls.n	8014b02 <rcl_validate_topic_name+0x9e>
 8014ace:	f022 0e20 	bic.w	lr, r2, #32
 8014ad2:	f1ae 0e41 	sub.w	lr, lr, #65	@ 0x41
 8014ad6:	f1be 0f19 	cmp.w	lr, #25
 8014ada:	d912      	bls.n	8014b02 <rcl_validate_topic_name+0x9e>
 8014adc:	2a5f      	cmp	r2, #95	@ 0x5f
 8014ade:	d019      	beq.n	8014b14 <rcl_validate_topic_name+0xb0>
 8014ae0:	2a2f      	cmp	r2, #47	@ 0x2f
 8014ae2:	d051      	beq.n	8014b88 <rcl_validate_topic_name+0x124>
 8014ae4:	2a7e      	cmp	r2, #126	@ 0x7e
 8014ae6:	d048      	beq.n	8014b7a <rcl_validate_topic_name+0x116>
 8014ae8:	2a7b      	cmp	r2, #123	@ 0x7b
 8014aea:	d054      	beq.n	8014b96 <rcl_validate_topic_name+0x132>
 8014aec:	2a7d      	cmp	r2, #125	@ 0x7d
 8014aee:	d161      	bne.n	8014bb4 <rcl_validate_topic_name+0x150>
 8014af0:	2c00      	cmp	r4, #0
 8014af2:	d155      	bne.n	8014ba0 <rcl_validate_topic_name+0x13c>
 8014af4:	2305      	movs	r3, #5
 8014af6:	6033      	str	r3, [r6, #0]
 8014af8:	b107      	cbz	r7, 8014afc <rcl_validate_topic_name+0x98>
 8014afa:	6039      	str	r1, [r7, #0]
 8014afc:	2000      	movs	r0, #0
 8014afe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8014b02:	f81c 2002 	ldrb.w	r2, [ip, r2]
 8014b06:	0752      	lsls	r2, r2, #29
 8014b08:	d504      	bpl.n	8014b14 <rcl_validate_topic_name+0xb0>
 8014b0a:	b11c      	cbz	r4, 8014b14 <rcl_validate_topic_name+0xb0>
 8014b0c:	b111      	cbz	r1, 8014b14 <rcl_validate_topic_name+0xb0>
 8014b0e:	1e4a      	subs	r2, r1, #1
 8014b10:	429a      	cmp	r2, r3
 8014b12:	d02d      	beq.n	8014b70 <rcl_validate_topic_name+0x10c>
 8014b14:	3101      	adds	r1, #1
 8014b16:	4288      	cmp	r0, r1
 8014b18:	d1d2      	bne.n	8014ac0 <rcl_validate_topic_name+0x5c>
 8014b1a:	2c00      	cmp	r4, #0
 8014b1c:	d145      	bne.n	8014baa <rcl_validate_topic_name+0x146>
 8014b1e:	f1b9 0f7e 	cmp.w	r9, #126	@ 0x7e
 8014b22:	d04f      	beq.n	8014bc4 <rcl_validate_topic_name+0x160>
 8014b24:	4620      	mov	r0, r4
 8014b26:	2301      	movs	r3, #1
 8014b28:	e006      	b.n	8014b38 <rcl_validate_topic_name+0xd4>
 8014b2a:	428b      	cmp	r3, r1
 8014b2c:	f105 0501 	add.w	r5, r5, #1
 8014b30:	f103 0201 	add.w	r2, r3, #1
 8014b34:	d236      	bcs.n	8014ba4 <rcl_validate_topic_name+0x140>
 8014b36:	4613      	mov	r3, r2
 8014b38:	4580      	cmp	r8, r0
 8014b3a:	f100 0001 	add.w	r0, r0, #1
 8014b3e:	d0f4      	beq.n	8014b2a <rcl_validate_topic_name+0xc6>
 8014b40:	782a      	ldrb	r2, [r5, #0]
 8014b42:	2a2f      	cmp	r2, #47	@ 0x2f
 8014b44:	d1f1      	bne.n	8014b2a <rcl_validate_topic_name+0xc6>
 8014b46:	786a      	ldrb	r2, [r5, #1]
 8014b48:	f81c 2002 	ldrb.w	r2, [ip, r2]
 8014b4c:	0754      	lsls	r4, r2, #29
 8014b4e:	d5ec      	bpl.n	8014b2a <rcl_validate_topic_name+0xc6>
 8014b50:	2204      	movs	r2, #4
 8014b52:	6032      	str	r2, [r6, #0]
 8014b54:	2f00      	cmp	r7, #0
 8014b56:	d0d1      	beq.n	8014afc <rcl_validate_topic_name+0x98>
 8014b58:	603b      	str	r3, [r7, #0]
 8014b5a:	2000      	movs	r0, #0
 8014b5c:	e7aa      	b.n	8014ab4 <rcl_validate_topic_name+0x50>
 8014b5e:	200b      	movs	r0, #11
 8014b60:	4770      	bx	lr
 8014b62:	2304      	movs	r3, #4
 8014b64:	6033      	str	r3, [r6, #0]
 8014b66:	2f00      	cmp	r7, #0
 8014b68:	d1a2      	bne.n	8014ab0 <rcl_validate_topic_name+0x4c>
 8014b6a:	e7c7      	b.n	8014afc <rcl_validate_topic_name+0x98>
 8014b6c:	200b      	movs	r0, #11
 8014b6e:	e7a1      	b.n	8014ab4 <rcl_validate_topic_name+0x50>
 8014b70:	2309      	movs	r3, #9
 8014b72:	6033      	str	r3, [r6, #0]
 8014b74:	2f00      	cmp	r7, #0
 8014b76:	d1c0      	bne.n	8014afa <rcl_validate_topic_name+0x96>
 8014b78:	e7c0      	b.n	8014afc <rcl_validate_topic_name+0x98>
 8014b7a:	2900      	cmp	r1, #0
 8014b7c:	d0ca      	beq.n	8014b14 <rcl_validate_topic_name+0xb0>
 8014b7e:	2306      	movs	r3, #6
 8014b80:	6033      	str	r3, [r6, #0]
 8014b82:	2f00      	cmp	r7, #0
 8014b84:	d1b9      	bne.n	8014afa <rcl_validate_topic_name+0x96>
 8014b86:	e7b9      	b.n	8014afc <rcl_validate_topic_name+0x98>
 8014b88:	2c00      	cmp	r4, #0
 8014b8a:	d0c3      	beq.n	8014b14 <rcl_validate_topic_name+0xb0>
 8014b8c:	2308      	movs	r3, #8
 8014b8e:	6033      	str	r3, [r6, #0]
 8014b90:	2f00      	cmp	r7, #0
 8014b92:	d1b2      	bne.n	8014afa <rcl_validate_topic_name+0x96>
 8014b94:	e7b2      	b.n	8014afc <rcl_validate_topic_name+0x98>
 8014b96:	2c00      	cmp	r4, #0
 8014b98:	d1f8      	bne.n	8014b8c <rcl_validate_topic_name+0x128>
 8014b9a:	460b      	mov	r3, r1
 8014b9c:	2401      	movs	r4, #1
 8014b9e:	e7b9      	b.n	8014b14 <rcl_validate_topic_name+0xb0>
 8014ba0:	2400      	movs	r4, #0
 8014ba2:	e7b7      	b.n	8014b14 <rcl_validate_topic_name+0xb0>
 8014ba4:	2000      	movs	r0, #0
 8014ba6:	6030      	str	r0, [r6, #0]
 8014ba8:	e784      	b.n	8014ab4 <rcl_validate_topic_name+0x50>
 8014baa:	2205      	movs	r2, #5
 8014bac:	6032      	str	r2, [r6, #0]
 8014bae:	2f00      	cmp	r7, #0
 8014bb0:	d1d2      	bne.n	8014b58 <rcl_validate_topic_name+0xf4>
 8014bb2:	e7a3      	b.n	8014afc <rcl_validate_topic_name+0x98>
 8014bb4:	2c00      	cmp	r4, #0
 8014bb6:	bf14      	ite	ne
 8014bb8:	2308      	movne	r3, #8
 8014bba:	2303      	moveq	r3, #3
 8014bbc:	6033      	str	r3, [r6, #0]
 8014bbe:	2f00      	cmp	r7, #0
 8014bc0:	d19b      	bne.n	8014afa <rcl_validate_topic_name+0x96>
 8014bc2:	e79b      	b.n	8014afc <rcl_validate_topic_name+0x98>
 8014bc4:	2301      	movs	r3, #1
 8014bc6:	e00a      	b.n	8014bde <rcl_validate_topic_name+0x17a>
 8014bc8:	2c01      	cmp	r4, #1
 8014bca:	d013      	beq.n	8014bf4 <rcl_validate_topic_name+0x190>
 8014bcc:	4299      	cmp	r1, r3
 8014bce:	f104 0401 	add.w	r4, r4, #1
 8014bd2:	f105 0501 	add.w	r5, r5, #1
 8014bd6:	f103 0201 	add.w	r2, r3, #1
 8014bda:	d9e3      	bls.n	8014ba4 <rcl_validate_topic_name+0x140>
 8014bdc:	4613      	mov	r3, r2
 8014bde:	45a0      	cmp	r8, r4
 8014be0:	d0f4      	beq.n	8014bcc <rcl_validate_topic_name+0x168>
 8014be2:	782a      	ldrb	r2, [r5, #0]
 8014be4:	2a2f      	cmp	r2, #47	@ 0x2f
 8014be6:	d1ef      	bne.n	8014bc8 <rcl_validate_topic_name+0x164>
 8014be8:	786a      	ldrb	r2, [r5, #1]
 8014bea:	f81c 2002 	ldrb.w	r2, [ip, r2]
 8014bee:	0752      	lsls	r2, r2, #29
 8014bf0:	d5ec      	bpl.n	8014bcc <rcl_validate_topic_name+0x168>
 8014bf2:	e7ad      	b.n	8014b50 <rcl_validate_topic_name+0xec>
 8014bf4:	2307      	movs	r3, #7
 8014bf6:	6033      	str	r3, [r6, #0]
 8014bf8:	2f00      	cmp	r7, #0
 8014bfa:	f43f af7f 	beq.w	8014afc <rcl_validate_topic_name+0x98>
 8014bfe:	603c      	str	r4, [r7, #0]
 8014c00:	2000      	movs	r0, #0
 8014c02:	e757      	b.n	8014ab4 <rcl_validate_topic_name+0x50>
 8014c04:	08017124 	.word	0x08017124

08014c08 <rcutils_string_array_fini>:
 8014c08:	b320      	cbz	r0, 8014c54 <rcutils_string_array_fini+0x4c>
 8014c0a:	b570      	push	{r4, r5, r6, lr}
 8014c0c:	4604      	mov	r4, r0
 8014c0e:	6840      	ldr	r0, [r0, #4]
 8014c10:	b1d8      	cbz	r0, 8014c4a <rcutils_string_array_fini+0x42>
 8014c12:	f104 0008 	add.w	r0, r4, #8
 8014c16:	f7f5 fa3d 	bl	800a094 <rcutils_allocator_is_valid>
 8014c1a:	b1b8      	cbz	r0, 8014c4c <rcutils_string_array_fini+0x44>
 8014c1c:	6823      	ldr	r3, [r4, #0]
 8014c1e:	b1bb      	cbz	r3, 8014c50 <rcutils_string_array_fini+0x48>
 8014c20:	2500      	movs	r5, #0
 8014c22:	6860      	ldr	r0, [r4, #4]
 8014c24:	462e      	mov	r6, r5
 8014c26:	f850 0025 	ldr.w	r0, [r0, r5, lsl #2]
 8014c2a:	68e3      	ldr	r3, [r4, #12]
 8014c2c:	69a1      	ldr	r1, [r4, #24]
 8014c2e:	4798      	blx	r3
 8014c30:	e9d4 3000 	ldrd	r3, r0, [r4]
 8014c34:	f840 6025 	str.w	r6, [r0, r5, lsl #2]
 8014c38:	3501      	adds	r5, #1
 8014c3a:	429d      	cmp	r5, r3
 8014c3c:	d3f3      	bcc.n	8014c26 <rcutils_string_array_fini+0x1e>
 8014c3e:	68e3      	ldr	r3, [r4, #12]
 8014c40:	69a1      	ldr	r1, [r4, #24]
 8014c42:	4798      	blx	r3
 8014c44:	2000      	movs	r0, #0
 8014c46:	e9c4 0000 	strd	r0, r0, [r4]
 8014c4a:	bd70      	pop	{r4, r5, r6, pc}
 8014c4c:	200b      	movs	r0, #11
 8014c4e:	bd70      	pop	{r4, r5, r6, pc}
 8014c50:	6860      	ldr	r0, [r4, #4]
 8014c52:	e7f4      	b.n	8014c3e <rcutils_string_array_fini+0x36>
 8014c54:	200b      	movs	r0, #11
 8014c56:	4770      	bx	lr

08014c58 <rmw_create_guard_condition>:
 8014c58:	b538      	push	{r3, r4, r5, lr}
 8014c5a:	4605      	mov	r5, r0
 8014c5c:	4807      	ldr	r0, [pc, #28]	@ (8014c7c <rmw_create_guard_condition+0x24>)
 8014c5e:	f7fe f923 	bl	8012ea8 <get_memory>
 8014c62:	b148      	cbz	r0, 8014c78 <rmw_create_guard_condition+0x20>
 8014c64:	6884      	ldr	r4, [r0, #8]
 8014c66:	2300      	movs	r3, #0
 8014c68:	7423      	strb	r3, [r4, #16]
 8014c6a:	61e5      	str	r5, [r4, #28]
 8014c6c:	f7fe f984 	bl	8012f78 <rmw_get_implementation_identifier>
 8014c70:	e9c4 0405 	strd	r0, r4, [r4, #20]
 8014c74:	f104 0014 	add.w	r0, r4, #20
 8014c78:	bd38      	pop	{r3, r4, r5, pc}
 8014c7a:	bf00      	nop
 8014c7c:	2000da0c 	.word	0x2000da0c

08014c80 <rmw_destroy_guard_condition>:
 8014c80:	b508      	push	{r3, lr}
 8014c82:	4b08      	ldr	r3, [pc, #32]	@ (8014ca4 <rmw_destroy_guard_condition+0x24>)
 8014c84:	6819      	ldr	r1, [r3, #0]
 8014c86:	b911      	cbnz	r1, 8014c8e <rmw_destroy_guard_condition+0xe>
 8014c88:	e00a      	b.n	8014ca0 <rmw_destroy_guard_condition+0x20>
 8014c8a:	6849      	ldr	r1, [r1, #4]
 8014c8c:	b141      	cbz	r1, 8014ca0 <rmw_destroy_guard_condition+0x20>
 8014c8e:	688b      	ldr	r3, [r1, #8]
 8014c90:	3314      	adds	r3, #20
 8014c92:	4298      	cmp	r0, r3
 8014c94:	d1f9      	bne.n	8014c8a <rmw_destroy_guard_condition+0xa>
 8014c96:	4803      	ldr	r0, [pc, #12]	@ (8014ca4 <rmw_destroy_guard_condition+0x24>)
 8014c98:	f7fe f916 	bl	8012ec8 <put_memory>
 8014c9c:	2000      	movs	r0, #0
 8014c9e:	bd08      	pop	{r3, pc}
 8014ca0:	2001      	movs	r0, #1
 8014ca2:	bd08      	pop	{r3, pc}
 8014ca4:	2000da0c 	.word	0x2000da0c

08014ca8 <calloc>:
 8014ca8:	4b02      	ldr	r3, [pc, #8]	@ (8014cb4 <calloc+0xc>)
 8014caa:	460a      	mov	r2, r1
 8014cac:	4601      	mov	r1, r0
 8014cae:	6818      	ldr	r0, [r3, #0]
 8014cb0:	f000 b802 	b.w	8014cb8 <_calloc_r>
 8014cb4:	200000c0 	.word	0x200000c0

08014cb8 <_calloc_r>:
 8014cb8:	b570      	push	{r4, r5, r6, lr}
 8014cba:	fba1 5402 	umull	r5, r4, r1, r2
 8014cbe:	b93c      	cbnz	r4, 8014cd0 <_calloc_r+0x18>
 8014cc0:	4629      	mov	r1, r5
 8014cc2:	f000 f887 	bl	8014dd4 <_malloc_r>
 8014cc6:	4606      	mov	r6, r0
 8014cc8:	b928      	cbnz	r0, 8014cd6 <_calloc_r+0x1e>
 8014cca:	2600      	movs	r6, #0
 8014ccc:	4630      	mov	r0, r6
 8014cce:	bd70      	pop	{r4, r5, r6, pc}
 8014cd0:	220c      	movs	r2, #12
 8014cd2:	6002      	str	r2, [r0, #0]
 8014cd4:	e7f9      	b.n	8014cca <_calloc_r+0x12>
 8014cd6:	462a      	mov	r2, r5
 8014cd8:	4621      	mov	r1, r4
 8014cda:	f000 fc71 	bl	80155c0 <memset>
 8014cde:	e7f5      	b.n	8014ccc <_calloc_r+0x14>

08014ce0 <getenv>:
 8014ce0:	b507      	push	{r0, r1, r2, lr}
 8014ce2:	4b04      	ldr	r3, [pc, #16]	@ (8014cf4 <getenv+0x14>)
 8014ce4:	4601      	mov	r1, r0
 8014ce6:	aa01      	add	r2, sp, #4
 8014ce8:	6818      	ldr	r0, [r3, #0]
 8014cea:	f000 f805 	bl	8014cf8 <_findenv_r>
 8014cee:	b003      	add	sp, #12
 8014cf0:	f85d fb04 	ldr.w	pc, [sp], #4
 8014cf4:	200000c0 	.word	0x200000c0

08014cf8 <_findenv_r>:
 8014cf8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014cfc:	f8df a06c 	ldr.w	sl, [pc, #108]	@ 8014d6c <_findenv_r+0x74>
 8014d00:	4606      	mov	r6, r0
 8014d02:	4689      	mov	r9, r1
 8014d04:	4617      	mov	r7, r2
 8014d06:	f000 fd51 	bl	80157ac <__env_lock>
 8014d0a:	f8da 4000 	ldr.w	r4, [sl]
 8014d0e:	b134      	cbz	r4, 8014d1e <_findenv_r+0x26>
 8014d10:	464b      	mov	r3, r9
 8014d12:	4698      	mov	r8, r3
 8014d14:	f813 2b01 	ldrb.w	r2, [r3], #1
 8014d18:	b13a      	cbz	r2, 8014d2a <_findenv_r+0x32>
 8014d1a:	2a3d      	cmp	r2, #61	@ 0x3d
 8014d1c:	d1f9      	bne.n	8014d12 <_findenv_r+0x1a>
 8014d1e:	4630      	mov	r0, r6
 8014d20:	f000 fd4a 	bl	80157b8 <__env_unlock>
 8014d24:	2000      	movs	r0, #0
 8014d26:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014d2a:	eba8 0809 	sub.w	r8, r8, r9
 8014d2e:	46a3      	mov	fp, r4
 8014d30:	f854 0b04 	ldr.w	r0, [r4], #4
 8014d34:	2800      	cmp	r0, #0
 8014d36:	d0f2      	beq.n	8014d1e <_findenv_r+0x26>
 8014d38:	4642      	mov	r2, r8
 8014d3a:	4649      	mov	r1, r9
 8014d3c:	f000 fc55 	bl	80155ea <strncmp>
 8014d40:	2800      	cmp	r0, #0
 8014d42:	d1f4      	bne.n	8014d2e <_findenv_r+0x36>
 8014d44:	f854 3c04 	ldr.w	r3, [r4, #-4]
 8014d48:	eb03 0508 	add.w	r5, r3, r8
 8014d4c:	f813 3008 	ldrb.w	r3, [r3, r8]
 8014d50:	2b3d      	cmp	r3, #61	@ 0x3d
 8014d52:	d1ec      	bne.n	8014d2e <_findenv_r+0x36>
 8014d54:	f8da 3000 	ldr.w	r3, [sl]
 8014d58:	ebab 0303 	sub.w	r3, fp, r3
 8014d5c:	109b      	asrs	r3, r3, #2
 8014d5e:	4630      	mov	r0, r6
 8014d60:	603b      	str	r3, [r7, #0]
 8014d62:	f000 fd29 	bl	80157b8 <__env_unlock>
 8014d66:	1c68      	adds	r0, r5, #1
 8014d68:	e7dd      	b.n	8014d26 <_findenv_r+0x2e>
 8014d6a:	bf00      	nop
 8014d6c:	20000000 	.word	0x20000000

08014d70 <malloc>:
 8014d70:	4b02      	ldr	r3, [pc, #8]	@ (8014d7c <malloc+0xc>)
 8014d72:	4601      	mov	r1, r0
 8014d74:	6818      	ldr	r0, [r3, #0]
 8014d76:	f000 b82d 	b.w	8014dd4 <_malloc_r>
 8014d7a:	bf00      	nop
 8014d7c:	200000c0 	.word	0x200000c0

08014d80 <free>:
 8014d80:	4b02      	ldr	r3, [pc, #8]	@ (8014d8c <free+0xc>)
 8014d82:	4601      	mov	r1, r0
 8014d84:	6818      	ldr	r0, [r3, #0]
 8014d86:	f000 bd1d 	b.w	80157c4 <_free_r>
 8014d8a:	bf00      	nop
 8014d8c:	200000c0 	.word	0x200000c0

08014d90 <sbrk_aligned>:
 8014d90:	b570      	push	{r4, r5, r6, lr}
 8014d92:	4e0f      	ldr	r6, [pc, #60]	@ (8014dd0 <sbrk_aligned+0x40>)
 8014d94:	460c      	mov	r4, r1
 8014d96:	6831      	ldr	r1, [r6, #0]
 8014d98:	4605      	mov	r5, r0
 8014d9a:	b911      	cbnz	r1, 8014da2 <sbrk_aligned+0x12>
 8014d9c:	f000 fc82 	bl	80156a4 <_sbrk_r>
 8014da0:	6030      	str	r0, [r6, #0]
 8014da2:	4621      	mov	r1, r4
 8014da4:	4628      	mov	r0, r5
 8014da6:	f000 fc7d 	bl	80156a4 <_sbrk_r>
 8014daa:	1c43      	adds	r3, r0, #1
 8014dac:	d103      	bne.n	8014db6 <sbrk_aligned+0x26>
 8014dae:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 8014db2:	4620      	mov	r0, r4
 8014db4:	bd70      	pop	{r4, r5, r6, pc}
 8014db6:	1cc4      	adds	r4, r0, #3
 8014db8:	f024 0403 	bic.w	r4, r4, #3
 8014dbc:	42a0      	cmp	r0, r4
 8014dbe:	d0f8      	beq.n	8014db2 <sbrk_aligned+0x22>
 8014dc0:	1a21      	subs	r1, r4, r0
 8014dc2:	4628      	mov	r0, r5
 8014dc4:	f000 fc6e 	bl	80156a4 <_sbrk_r>
 8014dc8:	3001      	adds	r0, #1
 8014dca:	d1f2      	bne.n	8014db2 <sbrk_aligned+0x22>
 8014dcc:	e7ef      	b.n	8014dae <sbrk_aligned+0x1e>
 8014dce:	bf00      	nop
 8014dd0:	2000dbf8 	.word	0x2000dbf8

08014dd4 <_malloc_r>:
 8014dd4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8014dd8:	1ccd      	adds	r5, r1, #3
 8014dda:	f025 0503 	bic.w	r5, r5, #3
 8014dde:	3508      	adds	r5, #8
 8014de0:	2d0c      	cmp	r5, #12
 8014de2:	bf38      	it	cc
 8014de4:	250c      	movcc	r5, #12
 8014de6:	2d00      	cmp	r5, #0
 8014de8:	4606      	mov	r6, r0
 8014dea:	db01      	blt.n	8014df0 <_malloc_r+0x1c>
 8014dec:	42a9      	cmp	r1, r5
 8014dee:	d904      	bls.n	8014dfa <_malloc_r+0x26>
 8014df0:	230c      	movs	r3, #12
 8014df2:	6033      	str	r3, [r6, #0]
 8014df4:	2000      	movs	r0, #0
 8014df6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8014dfa:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8014ed0 <_malloc_r+0xfc>
 8014dfe:	f000 f869 	bl	8014ed4 <__malloc_lock>
 8014e02:	f8d8 3000 	ldr.w	r3, [r8]
 8014e06:	461c      	mov	r4, r3
 8014e08:	bb44      	cbnz	r4, 8014e5c <_malloc_r+0x88>
 8014e0a:	4629      	mov	r1, r5
 8014e0c:	4630      	mov	r0, r6
 8014e0e:	f7ff ffbf 	bl	8014d90 <sbrk_aligned>
 8014e12:	1c43      	adds	r3, r0, #1
 8014e14:	4604      	mov	r4, r0
 8014e16:	d158      	bne.n	8014eca <_malloc_r+0xf6>
 8014e18:	f8d8 4000 	ldr.w	r4, [r8]
 8014e1c:	4627      	mov	r7, r4
 8014e1e:	2f00      	cmp	r7, #0
 8014e20:	d143      	bne.n	8014eaa <_malloc_r+0xd6>
 8014e22:	2c00      	cmp	r4, #0
 8014e24:	d04b      	beq.n	8014ebe <_malloc_r+0xea>
 8014e26:	6823      	ldr	r3, [r4, #0]
 8014e28:	4639      	mov	r1, r7
 8014e2a:	4630      	mov	r0, r6
 8014e2c:	eb04 0903 	add.w	r9, r4, r3
 8014e30:	f000 fc38 	bl	80156a4 <_sbrk_r>
 8014e34:	4581      	cmp	r9, r0
 8014e36:	d142      	bne.n	8014ebe <_malloc_r+0xea>
 8014e38:	6821      	ldr	r1, [r4, #0]
 8014e3a:	1a6d      	subs	r5, r5, r1
 8014e3c:	4629      	mov	r1, r5
 8014e3e:	4630      	mov	r0, r6
 8014e40:	f7ff ffa6 	bl	8014d90 <sbrk_aligned>
 8014e44:	3001      	adds	r0, #1
 8014e46:	d03a      	beq.n	8014ebe <_malloc_r+0xea>
 8014e48:	6823      	ldr	r3, [r4, #0]
 8014e4a:	442b      	add	r3, r5
 8014e4c:	6023      	str	r3, [r4, #0]
 8014e4e:	f8d8 3000 	ldr.w	r3, [r8]
 8014e52:	685a      	ldr	r2, [r3, #4]
 8014e54:	bb62      	cbnz	r2, 8014eb0 <_malloc_r+0xdc>
 8014e56:	f8c8 7000 	str.w	r7, [r8]
 8014e5a:	e00f      	b.n	8014e7c <_malloc_r+0xa8>
 8014e5c:	6822      	ldr	r2, [r4, #0]
 8014e5e:	1b52      	subs	r2, r2, r5
 8014e60:	d420      	bmi.n	8014ea4 <_malloc_r+0xd0>
 8014e62:	2a0b      	cmp	r2, #11
 8014e64:	d917      	bls.n	8014e96 <_malloc_r+0xc2>
 8014e66:	1961      	adds	r1, r4, r5
 8014e68:	42a3      	cmp	r3, r4
 8014e6a:	6025      	str	r5, [r4, #0]
 8014e6c:	bf18      	it	ne
 8014e6e:	6059      	strne	r1, [r3, #4]
 8014e70:	6863      	ldr	r3, [r4, #4]
 8014e72:	bf08      	it	eq
 8014e74:	f8c8 1000 	streq.w	r1, [r8]
 8014e78:	5162      	str	r2, [r4, r5]
 8014e7a:	604b      	str	r3, [r1, #4]
 8014e7c:	4630      	mov	r0, r6
 8014e7e:	f000 f82f 	bl	8014ee0 <__malloc_unlock>
 8014e82:	f104 000b 	add.w	r0, r4, #11
 8014e86:	1d23      	adds	r3, r4, #4
 8014e88:	f020 0007 	bic.w	r0, r0, #7
 8014e8c:	1ac2      	subs	r2, r0, r3
 8014e8e:	bf1c      	itt	ne
 8014e90:	1a1b      	subne	r3, r3, r0
 8014e92:	50a3      	strne	r3, [r4, r2]
 8014e94:	e7af      	b.n	8014df6 <_malloc_r+0x22>
 8014e96:	6862      	ldr	r2, [r4, #4]
 8014e98:	42a3      	cmp	r3, r4
 8014e9a:	bf0c      	ite	eq
 8014e9c:	f8c8 2000 	streq.w	r2, [r8]
 8014ea0:	605a      	strne	r2, [r3, #4]
 8014ea2:	e7eb      	b.n	8014e7c <_malloc_r+0xa8>
 8014ea4:	4623      	mov	r3, r4
 8014ea6:	6864      	ldr	r4, [r4, #4]
 8014ea8:	e7ae      	b.n	8014e08 <_malloc_r+0x34>
 8014eaa:	463c      	mov	r4, r7
 8014eac:	687f      	ldr	r7, [r7, #4]
 8014eae:	e7b6      	b.n	8014e1e <_malloc_r+0x4a>
 8014eb0:	461a      	mov	r2, r3
 8014eb2:	685b      	ldr	r3, [r3, #4]
 8014eb4:	42a3      	cmp	r3, r4
 8014eb6:	d1fb      	bne.n	8014eb0 <_malloc_r+0xdc>
 8014eb8:	2300      	movs	r3, #0
 8014eba:	6053      	str	r3, [r2, #4]
 8014ebc:	e7de      	b.n	8014e7c <_malloc_r+0xa8>
 8014ebe:	230c      	movs	r3, #12
 8014ec0:	6033      	str	r3, [r6, #0]
 8014ec2:	4630      	mov	r0, r6
 8014ec4:	f000 f80c 	bl	8014ee0 <__malloc_unlock>
 8014ec8:	e794      	b.n	8014df4 <_malloc_r+0x20>
 8014eca:	6005      	str	r5, [r0, #0]
 8014ecc:	e7d6      	b.n	8014e7c <_malloc_r+0xa8>
 8014ece:	bf00      	nop
 8014ed0:	2000dbfc 	.word	0x2000dbfc

08014ed4 <__malloc_lock>:
 8014ed4:	4801      	ldr	r0, [pc, #4]	@ (8014edc <__malloc_lock+0x8>)
 8014ed6:	f000 bc32 	b.w	801573e <__retarget_lock_acquire_recursive>
 8014eda:	bf00      	nop
 8014edc:	2000dd45 	.word	0x2000dd45

08014ee0 <__malloc_unlock>:
 8014ee0:	4801      	ldr	r0, [pc, #4]	@ (8014ee8 <__malloc_unlock+0x8>)
 8014ee2:	f000 bc2d 	b.w	8015740 <__retarget_lock_release_recursive>
 8014ee6:	bf00      	nop
 8014ee8:	2000dd45 	.word	0x2000dd45

08014eec <srand>:
 8014eec:	b538      	push	{r3, r4, r5, lr}
 8014eee:	4b10      	ldr	r3, [pc, #64]	@ (8014f30 <srand+0x44>)
 8014ef0:	681d      	ldr	r5, [r3, #0]
 8014ef2:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 8014ef4:	4604      	mov	r4, r0
 8014ef6:	b9b3      	cbnz	r3, 8014f26 <srand+0x3a>
 8014ef8:	2018      	movs	r0, #24
 8014efa:	f7ff ff39 	bl	8014d70 <malloc>
 8014efe:	4602      	mov	r2, r0
 8014f00:	6328      	str	r0, [r5, #48]	@ 0x30
 8014f02:	b920      	cbnz	r0, 8014f0e <srand+0x22>
 8014f04:	4b0b      	ldr	r3, [pc, #44]	@ (8014f34 <srand+0x48>)
 8014f06:	480c      	ldr	r0, [pc, #48]	@ (8014f38 <srand+0x4c>)
 8014f08:	2146      	movs	r1, #70	@ 0x46
 8014f0a:	f000 fc31 	bl	8015770 <__assert_func>
 8014f0e:	490b      	ldr	r1, [pc, #44]	@ (8014f3c <srand+0x50>)
 8014f10:	4b0b      	ldr	r3, [pc, #44]	@ (8014f40 <srand+0x54>)
 8014f12:	e9c0 1300 	strd	r1, r3, [r0]
 8014f16:	4b0b      	ldr	r3, [pc, #44]	@ (8014f44 <srand+0x58>)
 8014f18:	6083      	str	r3, [r0, #8]
 8014f1a:	230b      	movs	r3, #11
 8014f1c:	8183      	strh	r3, [r0, #12]
 8014f1e:	2100      	movs	r1, #0
 8014f20:	2001      	movs	r0, #1
 8014f22:	e9c2 0104 	strd	r0, r1, [r2, #16]
 8014f26:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 8014f28:	2200      	movs	r2, #0
 8014f2a:	611c      	str	r4, [r3, #16]
 8014f2c:	615a      	str	r2, [r3, #20]
 8014f2e:	bd38      	pop	{r3, r4, r5, pc}
 8014f30:	200000c0 	.word	0x200000c0
 8014f34:	080170b4 	.word	0x080170b4
 8014f38:	080170cb 	.word	0x080170cb
 8014f3c:	abcd330e 	.word	0xabcd330e
 8014f40:	e66d1234 	.word	0xe66d1234
 8014f44:	0005deec 	.word	0x0005deec

08014f48 <rand>:
 8014f48:	4b16      	ldr	r3, [pc, #88]	@ (8014fa4 <rand+0x5c>)
 8014f4a:	b510      	push	{r4, lr}
 8014f4c:	681c      	ldr	r4, [r3, #0]
 8014f4e:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8014f50:	b9b3      	cbnz	r3, 8014f80 <rand+0x38>
 8014f52:	2018      	movs	r0, #24
 8014f54:	f7ff ff0c 	bl	8014d70 <malloc>
 8014f58:	4602      	mov	r2, r0
 8014f5a:	6320      	str	r0, [r4, #48]	@ 0x30
 8014f5c:	b920      	cbnz	r0, 8014f68 <rand+0x20>
 8014f5e:	4b12      	ldr	r3, [pc, #72]	@ (8014fa8 <rand+0x60>)
 8014f60:	4812      	ldr	r0, [pc, #72]	@ (8014fac <rand+0x64>)
 8014f62:	2152      	movs	r1, #82	@ 0x52
 8014f64:	f000 fc04 	bl	8015770 <__assert_func>
 8014f68:	4911      	ldr	r1, [pc, #68]	@ (8014fb0 <rand+0x68>)
 8014f6a:	4b12      	ldr	r3, [pc, #72]	@ (8014fb4 <rand+0x6c>)
 8014f6c:	e9c0 1300 	strd	r1, r3, [r0]
 8014f70:	4b11      	ldr	r3, [pc, #68]	@ (8014fb8 <rand+0x70>)
 8014f72:	6083      	str	r3, [r0, #8]
 8014f74:	230b      	movs	r3, #11
 8014f76:	8183      	strh	r3, [r0, #12]
 8014f78:	2100      	movs	r1, #0
 8014f7a:	2001      	movs	r0, #1
 8014f7c:	e9c2 0104 	strd	r0, r1, [r2, #16]
 8014f80:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8014f82:	480e      	ldr	r0, [pc, #56]	@ (8014fbc <rand+0x74>)
 8014f84:	690b      	ldr	r3, [r1, #16]
 8014f86:	694c      	ldr	r4, [r1, #20]
 8014f88:	4a0d      	ldr	r2, [pc, #52]	@ (8014fc0 <rand+0x78>)
 8014f8a:	4358      	muls	r0, r3
 8014f8c:	fb02 0004 	mla	r0, r2, r4, r0
 8014f90:	fba3 3202 	umull	r3, r2, r3, r2
 8014f94:	3301      	adds	r3, #1
 8014f96:	eb40 0002 	adc.w	r0, r0, r2
 8014f9a:	e9c1 3004 	strd	r3, r0, [r1, #16]
 8014f9e:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 8014fa2:	bd10      	pop	{r4, pc}
 8014fa4:	200000c0 	.word	0x200000c0
 8014fa8:	080170b4 	.word	0x080170b4
 8014fac:	080170cb 	.word	0x080170cb
 8014fb0:	abcd330e 	.word	0xabcd330e
 8014fb4:	e66d1234 	.word	0xe66d1234
 8014fb8:	0005deec 	.word	0x0005deec
 8014fbc:	5851f42d 	.word	0x5851f42d
 8014fc0:	4c957f2d 	.word	0x4c957f2d

08014fc4 <realloc>:
 8014fc4:	4b02      	ldr	r3, [pc, #8]	@ (8014fd0 <realloc+0xc>)
 8014fc6:	460a      	mov	r2, r1
 8014fc8:	4601      	mov	r1, r0
 8014fca:	6818      	ldr	r0, [r3, #0]
 8014fcc:	f000 b802 	b.w	8014fd4 <_realloc_r>
 8014fd0:	200000c0 	.word	0x200000c0

08014fd4 <_realloc_r>:
 8014fd4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014fd8:	4680      	mov	r8, r0
 8014fda:	4615      	mov	r5, r2
 8014fdc:	460c      	mov	r4, r1
 8014fde:	b921      	cbnz	r1, 8014fea <_realloc_r+0x16>
 8014fe0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8014fe4:	4611      	mov	r1, r2
 8014fe6:	f7ff bef5 	b.w	8014dd4 <_malloc_r>
 8014fea:	b92a      	cbnz	r2, 8014ff8 <_realloc_r+0x24>
 8014fec:	f000 fbea 	bl	80157c4 <_free_r>
 8014ff0:	2400      	movs	r4, #0
 8014ff2:	4620      	mov	r0, r4
 8014ff4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014ff8:	f000 fc2e 	bl	8015858 <_malloc_usable_size_r>
 8014ffc:	4285      	cmp	r5, r0
 8014ffe:	4606      	mov	r6, r0
 8015000:	d802      	bhi.n	8015008 <_realloc_r+0x34>
 8015002:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8015006:	d8f4      	bhi.n	8014ff2 <_realloc_r+0x1e>
 8015008:	4629      	mov	r1, r5
 801500a:	4640      	mov	r0, r8
 801500c:	f7ff fee2 	bl	8014dd4 <_malloc_r>
 8015010:	4607      	mov	r7, r0
 8015012:	2800      	cmp	r0, #0
 8015014:	d0ec      	beq.n	8014ff0 <_realloc_r+0x1c>
 8015016:	42b5      	cmp	r5, r6
 8015018:	462a      	mov	r2, r5
 801501a:	4621      	mov	r1, r4
 801501c:	bf28      	it	cs
 801501e:	4632      	movcs	r2, r6
 8015020:	f000 fb97 	bl	8015752 <memcpy>
 8015024:	4621      	mov	r1, r4
 8015026:	4640      	mov	r0, r8
 8015028:	f000 fbcc 	bl	80157c4 <_free_r>
 801502c:	463c      	mov	r4, r7
 801502e:	e7e0      	b.n	8014ff2 <_realloc_r+0x1e>

08015030 <_strtoul_l.constprop.0>:
 8015030:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8015034:	4e34      	ldr	r6, [pc, #208]	@ (8015108 <_strtoul_l.constprop.0+0xd8>)
 8015036:	4686      	mov	lr, r0
 8015038:	460d      	mov	r5, r1
 801503a:	4628      	mov	r0, r5
 801503c:	f815 4b01 	ldrb.w	r4, [r5], #1
 8015040:	5d37      	ldrb	r7, [r6, r4]
 8015042:	f017 0708 	ands.w	r7, r7, #8
 8015046:	d1f8      	bne.n	801503a <_strtoul_l.constprop.0+0xa>
 8015048:	2c2d      	cmp	r4, #45	@ 0x2d
 801504a:	d12f      	bne.n	80150ac <_strtoul_l.constprop.0+0x7c>
 801504c:	782c      	ldrb	r4, [r5, #0]
 801504e:	2701      	movs	r7, #1
 8015050:	1c85      	adds	r5, r0, #2
 8015052:	f033 0010 	bics.w	r0, r3, #16
 8015056:	d109      	bne.n	801506c <_strtoul_l.constprop.0+0x3c>
 8015058:	2c30      	cmp	r4, #48	@ 0x30
 801505a:	d12c      	bne.n	80150b6 <_strtoul_l.constprop.0+0x86>
 801505c:	7828      	ldrb	r0, [r5, #0]
 801505e:	f000 00df 	and.w	r0, r0, #223	@ 0xdf
 8015062:	2858      	cmp	r0, #88	@ 0x58
 8015064:	d127      	bne.n	80150b6 <_strtoul_l.constprop.0+0x86>
 8015066:	786c      	ldrb	r4, [r5, #1]
 8015068:	2310      	movs	r3, #16
 801506a:	3502      	adds	r5, #2
 801506c:	f04f 38ff 	mov.w	r8, #4294967295	@ 0xffffffff
 8015070:	2600      	movs	r6, #0
 8015072:	fbb8 f8f3 	udiv	r8, r8, r3
 8015076:	fb03 f908 	mul.w	r9, r3, r8
 801507a:	ea6f 0909 	mvn.w	r9, r9
 801507e:	4630      	mov	r0, r6
 8015080:	f1a4 0c30 	sub.w	ip, r4, #48	@ 0x30
 8015084:	f1bc 0f09 	cmp.w	ip, #9
 8015088:	d81c      	bhi.n	80150c4 <_strtoul_l.constprop.0+0x94>
 801508a:	4664      	mov	r4, ip
 801508c:	42a3      	cmp	r3, r4
 801508e:	dd2a      	ble.n	80150e6 <_strtoul_l.constprop.0+0xb6>
 8015090:	f1b6 3fff 	cmp.w	r6, #4294967295	@ 0xffffffff
 8015094:	d007      	beq.n	80150a6 <_strtoul_l.constprop.0+0x76>
 8015096:	4580      	cmp	r8, r0
 8015098:	d322      	bcc.n	80150e0 <_strtoul_l.constprop.0+0xb0>
 801509a:	d101      	bne.n	80150a0 <_strtoul_l.constprop.0+0x70>
 801509c:	45a1      	cmp	r9, r4
 801509e:	db1f      	blt.n	80150e0 <_strtoul_l.constprop.0+0xb0>
 80150a0:	fb00 4003 	mla	r0, r0, r3, r4
 80150a4:	2601      	movs	r6, #1
 80150a6:	f815 4b01 	ldrb.w	r4, [r5], #1
 80150aa:	e7e9      	b.n	8015080 <_strtoul_l.constprop.0+0x50>
 80150ac:	2c2b      	cmp	r4, #43	@ 0x2b
 80150ae:	bf04      	itt	eq
 80150b0:	782c      	ldrbeq	r4, [r5, #0]
 80150b2:	1c85      	addeq	r5, r0, #2
 80150b4:	e7cd      	b.n	8015052 <_strtoul_l.constprop.0+0x22>
 80150b6:	2b00      	cmp	r3, #0
 80150b8:	d1d8      	bne.n	801506c <_strtoul_l.constprop.0+0x3c>
 80150ba:	2c30      	cmp	r4, #48	@ 0x30
 80150bc:	bf0c      	ite	eq
 80150be:	2308      	moveq	r3, #8
 80150c0:	230a      	movne	r3, #10
 80150c2:	e7d3      	b.n	801506c <_strtoul_l.constprop.0+0x3c>
 80150c4:	f1a4 0c41 	sub.w	ip, r4, #65	@ 0x41
 80150c8:	f1bc 0f19 	cmp.w	ip, #25
 80150cc:	d801      	bhi.n	80150d2 <_strtoul_l.constprop.0+0xa2>
 80150ce:	3c37      	subs	r4, #55	@ 0x37
 80150d0:	e7dc      	b.n	801508c <_strtoul_l.constprop.0+0x5c>
 80150d2:	f1a4 0c61 	sub.w	ip, r4, #97	@ 0x61
 80150d6:	f1bc 0f19 	cmp.w	ip, #25
 80150da:	d804      	bhi.n	80150e6 <_strtoul_l.constprop.0+0xb6>
 80150dc:	3c57      	subs	r4, #87	@ 0x57
 80150de:	e7d5      	b.n	801508c <_strtoul_l.constprop.0+0x5c>
 80150e0:	f04f 36ff 	mov.w	r6, #4294967295	@ 0xffffffff
 80150e4:	e7df      	b.n	80150a6 <_strtoul_l.constprop.0+0x76>
 80150e6:	1c73      	adds	r3, r6, #1
 80150e8:	d106      	bne.n	80150f8 <_strtoul_l.constprop.0+0xc8>
 80150ea:	2322      	movs	r3, #34	@ 0x22
 80150ec:	f8ce 3000 	str.w	r3, [lr]
 80150f0:	4630      	mov	r0, r6
 80150f2:	b932      	cbnz	r2, 8015102 <_strtoul_l.constprop.0+0xd2>
 80150f4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80150f8:	b107      	cbz	r7, 80150fc <_strtoul_l.constprop.0+0xcc>
 80150fa:	4240      	negs	r0, r0
 80150fc:	2a00      	cmp	r2, #0
 80150fe:	d0f9      	beq.n	80150f4 <_strtoul_l.constprop.0+0xc4>
 8015100:	b106      	cbz	r6, 8015104 <_strtoul_l.constprop.0+0xd4>
 8015102:	1e69      	subs	r1, r5, #1
 8015104:	6011      	str	r1, [r2, #0]
 8015106:	e7f5      	b.n	80150f4 <_strtoul_l.constprop.0+0xc4>
 8015108:	08017124 	.word	0x08017124

0801510c <strtoul>:
 801510c:	4613      	mov	r3, r2
 801510e:	460a      	mov	r2, r1
 8015110:	4601      	mov	r1, r0
 8015112:	4802      	ldr	r0, [pc, #8]	@ (801511c <strtoul+0x10>)
 8015114:	6800      	ldr	r0, [r0, #0]
 8015116:	f7ff bf8b 	b.w	8015030 <_strtoul_l.constprop.0>
 801511a:	bf00      	nop
 801511c:	200000c0 	.word	0x200000c0

08015120 <setenv>:
 8015120:	4613      	mov	r3, r2
 8015122:	460a      	mov	r2, r1
 8015124:	4601      	mov	r1, r0
 8015126:	4802      	ldr	r0, [pc, #8]	@ (8015130 <setenv+0x10>)
 8015128:	6800      	ldr	r0, [r0, #0]
 801512a:	f000 b803 	b.w	8015134 <_setenv_r>
 801512e:	bf00      	nop
 8015130:	200000c0 	.word	0x200000c0

08015134 <_setenv_r>:
 8015134:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015138:	460e      	mov	r6, r1
 801513a:	4605      	mov	r5, r0
 801513c:	213d      	movs	r1, #61	@ 0x3d
 801513e:	4630      	mov	r0, r6
 8015140:	4617      	mov	r7, r2
 8015142:	4698      	mov	r8, r3
 8015144:	f000 fa44 	bl	80155d0 <strchr>
 8015148:	b130      	cbz	r0, 8015158 <_setenv_r+0x24>
 801514a:	f000 facd 	bl	80156e8 <__errno>
 801514e:	2316      	movs	r3, #22
 8015150:	6003      	str	r3, [r0, #0]
 8015152:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8015156:	e014      	b.n	8015182 <_setenv_r+0x4e>
 8015158:	4628      	mov	r0, r5
 801515a:	f000 fb27 	bl	80157ac <__env_lock>
 801515e:	4638      	mov	r0, r7
 8015160:	f7eb f848 	bl	80001f4 <strlen>
 8015164:	aa01      	add	r2, sp, #4
 8015166:	4681      	mov	r9, r0
 8015168:	4631      	mov	r1, r6
 801516a:	4628      	mov	r0, r5
 801516c:	f7ff fdc4 	bl	8014cf8 <_findenv_r>
 8015170:	4604      	mov	r4, r0
 8015172:	b1a8      	cbz	r0, 80151a0 <_setenv_r+0x6c>
 8015174:	f1b8 0f00 	cmp.w	r8, #0
 8015178:	d106      	bne.n	8015188 <_setenv_r+0x54>
 801517a:	4628      	mov	r0, r5
 801517c:	f000 fb1c 	bl	80157b8 <__env_unlock>
 8015180:	2000      	movs	r0, #0
 8015182:	b003      	add	sp, #12
 8015184:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015188:	f7eb f834 	bl	80001f4 <strlen>
 801518c:	4581      	cmp	r9, r0
 801518e:	d83a      	bhi.n	8015206 <_setenv_r+0xd2>
 8015190:	3c01      	subs	r4, #1
 8015192:	f817 3b01 	ldrb.w	r3, [r7], #1
 8015196:	f804 3f01 	strb.w	r3, [r4, #1]!
 801519a:	2b00      	cmp	r3, #0
 801519c:	d1f9      	bne.n	8015192 <_setenv_r+0x5e>
 801519e:	e7ec      	b.n	801517a <_setenv_r+0x46>
 80151a0:	f8df a0bc 	ldr.w	sl, [pc, #188]	@ 8015260 <_setenv_r+0x12c>
 80151a4:	f8da 1000 	ldr.w	r1, [sl]
 80151a8:	f851 3024 	ldr.w	r3, [r1, r4, lsl #2]
 80151ac:	b98b      	cbnz	r3, 80151d2 <_setenv_r+0x9e>
 80151ae:	4b2b      	ldr	r3, [pc, #172]	@ (801525c <_setenv_r+0x128>)
 80151b0:	681a      	ldr	r2, [r3, #0]
 80151b2:	f104 0802 	add.w	r8, r4, #2
 80151b6:	ea4f 0888 	mov.w	r8, r8, lsl #2
 80151ba:	b162      	cbz	r2, 80151d6 <_setenv_r+0xa2>
 80151bc:	4642      	mov	r2, r8
 80151be:	4628      	mov	r0, r5
 80151c0:	f7ff ff08 	bl	8014fd4 <_realloc_r>
 80151c4:	f8ca 0000 	str.w	r0, [sl]
 80151c8:	b9b0      	cbnz	r0, 80151f8 <_setenv_r+0xc4>
 80151ca:	4628      	mov	r0, r5
 80151cc:	f000 faf4 	bl	80157b8 <__env_unlock>
 80151d0:	e7bf      	b.n	8015152 <_setenv_r+0x1e>
 80151d2:	3401      	adds	r4, #1
 80151d4:	e7e8      	b.n	80151a8 <_setenv_r+0x74>
 80151d6:	2201      	movs	r2, #1
 80151d8:	4641      	mov	r1, r8
 80151da:	4628      	mov	r0, r5
 80151dc:	601a      	str	r2, [r3, #0]
 80151de:	f7ff fdf9 	bl	8014dd4 <_malloc_r>
 80151e2:	4683      	mov	fp, r0
 80151e4:	2800      	cmp	r0, #0
 80151e6:	d0f0      	beq.n	80151ca <_setenv_r+0x96>
 80151e8:	f8da 1000 	ldr.w	r1, [sl]
 80151ec:	f1a8 0208 	sub.w	r2, r8, #8
 80151f0:	f000 faaf 	bl	8015752 <memcpy>
 80151f4:	f8ca b000 	str.w	fp, [sl]
 80151f8:	f8da 3000 	ldr.w	r3, [sl]
 80151fc:	4443      	add	r3, r8
 80151fe:	2200      	movs	r2, #0
 8015200:	f843 2c04 	str.w	r2, [r3, #-4]
 8015204:	9401      	str	r4, [sp, #4]
 8015206:	4633      	mov	r3, r6
 8015208:	4619      	mov	r1, r3
 801520a:	f813 2b01 	ldrb.w	r2, [r3], #1
 801520e:	b10a      	cbz	r2, 8015214 <_setenv_r+0xe0>
 8015210:	2a3d      	cmp	r2, #61	@ 0x3d
 8015212:	d1f9      	bne.n	8015208 <_setenv_r+0xd4>
 8015214:	1b89      	subs	r1, r1, r6
 8015216:	4c12      	ldr	r4, [pc, #72]	@ (8015260 <_setenv_r+0x12c>)
 8015218:	f8dd a004 	ldr.w	sl, [sp, #4]
 801521c:	f8d4 8000 	ldr.w	r8, [r4]
 8015220:	4449      	add	r1, r9
 8015222:	3102      	adds	r1, #2
 8015224:	4628      	mov	r0, r5
 8015226:	f7ff fdd5 	bl	8014dd4 <_malloc_r>
 801522a:	f848 002a 	str.w	r0, [r8, sl, lsl #2]
 801522e:	2800      	cmp	r0, #0
 8015230:	d0cb      	beq.n	80151ca <_setenv_r+0x96>
 8015232:	6823      	ldr	r3, [r4, #0]
 8015234:	9a01      	ldr	r2, [sp, #4]
 8015236:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 801523a:	f816 1b01 	ldrb.w	r1, [r6], #1
 801523e:	7011      	strb	r1, [r2, #0]
 8015240:	4613      	mov	r3, r2
 8015242:	3201      	adds	r2, #1
 8015244:	b109      	cbz	r1, 801524a <_setenv_r+0x116>
 8015246:	293d      	cmp	r1, #61	@ 0x3d
 8015248:	d1f7      	bne.n	801523a <_setenv_r+0x106>
 801524a:	223d      	movs	r2, #61	@ 0x3d
 801524c:	701a      	strb	r2, [r3, #0]
 801524e:	f817 2b01 	ldrb.w	r2, [r7], #1
 8015252:	f803 2f01 	strb.w	r2, [r3, #1]!
 8015256:	2a00      	cmp	r2, #0
 8015258:	d1f9      	bne.n	801524e <_setenv_r+0x11a>
 801525a:	e78e      	b.n	801517a <_setenv_r+0x46>
 801525c:	2000dc00 	.word	0x2000dc00
 8015260:	20000000 	.word	0x20000000

08015264 <std>:
 8015264:	2300      	movs	r3, #0
 8015266:	b510      	push	{r4, lr}
 8015268:	4604      	mov	r4, r0
 801526a:	e9c0 3300 	strd	r3, r3, [r0]
 801526e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8015272:	6083      	str	r3, [r0, #8]
 8015274:	8181      	strh	r1, [r0, #12]
 8015276:	6643      	str	r3, [r0, #100]	@ 0x64
 8015278:	81c2      	strh	r2, [r0, #14]
 801527a:	6183      	str	r3, [r0, #24]
 801527c:	4619      	mov	r1, r3
 801527e:	2208      	movs	r2, #8
 8015280:	305c      	adds	r0, #92	@ 0x5c
 8015282:	f000 f99d 	bl	80155c0 <memset>
 8015286:	4b0d      	ldr	r3, [pc, #52]	@ (80152bc <std+0x58>)
 8015288:	6263      	str	r3, [r4, #36]	@ 0x24
 801528a:	4b0d      	ldr	r3, [pc, #52]	@ (80152c0 <std+0x5c>)
 801528c:	62a3      	str	r3, [r4, #40]	@ 0x28
 801528e:	4b0d      	ldr	r3, [pc, #52]	@ (80152c4 <std+0x60>)
 8015290:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8015292:	4b0d      	ldr	r3, [pc, #52]	@ (80152c8 <std+0x64>)
 8015294:	6323      	str	r3, [r4, #48]	@ 0x30
 8015296:	4b0d      	ldr	r3, [pc, #52]	@ (80152cc <std+0x68>)
 8015298:	6224      	str	r4, [r4, #32]
 801529a:	429c      	cmp	r4, r3
 801529c:	d006      	beq.n	80152ac <std+0x48>
 801529e:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80152a2:	4294      	cmp	r4, r2
 80152a4:	d002      	beq.n	80152ac <std+0x48>
 80152a6:	33d0      	adds	r3, #208	@ 0xd0
 80152a8:	429c      	cmp	r4, r3
 80152aa:	d105      	bne.n	80152b8 <std+0x54>
 80152ac:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80152b0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80152b4:	f000 ba42 	b.w	801573c <__retarget_lock_init_recursive>
 80152b8:	bd10      	pop	{r4, pc}
 80152ba:	bf00      	nop
 80152bc:	08015475 	.word	0x08015475
 80152c0:	08015497 	.word	0x08015497
 80152c4:	080154cf 	.word	0x080154cf
 80152c8:	080154f3 	.word	0x080154f3
 80152cc:	2000dc04 	.word	0x2000dc04

080152d0 <stdio_exit_handler>:
 80152d0:	4a02      	ldr	r2, [pc, #8]	@ (80152dc <stdio_exit_handler+0xc>)
 80152d2:	4903      	ldr	r1, [pc, #12]	@ (80152e0 <stdio_exit_handler+0x10>)
 80152d4:	4803      	ldr	r0, [pc, #12]	@ (80152e4 <stdio_exit_handler+0x14>)
 80152d6:	f000 b869 	b.w	80153ac <_fwalk_sglue>
 80152da:	bf00      	nop
 80152dc:	200000b4 	.word	0x200000b4
 80152e0:	080161c1 	.word	0x080161c1
 80152e4:	200000c4 	.word	0x200000c4

080152e8 <cleanup_stdio>:
 80152e8:	6841      	ldr	r1, [r0, #4]
 80152ea:	4b0c      	ldr	r3, [pc, #48]	@ (801531c <cleanup_stdio+0x34>)
 80152ec:	4299      	cmp	r1, r3
 80152ee:	b510      	push	{r4, lr}
 80152f0:	4604      	mov	r4, r0
 80152f2:	d001      	beq.n	80152f8 <cleanup_stdio+0x10>
 80152f4:	f000 ff64 	bl	80161c0 <_fflush_r>
 80152f8:	68a1      	ldr	r1, [r4, #8]
 80152fa:	4b09      	ldr	r3, [pc, #36]	@ (8015320 <cleanup_stdio+0x38>)
 80152fc:	4299      	cmp	r1, r3
 80152fe:	d002      	beq.n	8015306 <cleanup_stdio+0x1e>
 8015300:	4620      	mov	r0, r4
 8015302:	f000 ff5d 	bl	80161c0 <_fflush_r>
 8015306:	68e1      	ldr	r1, [r4, #12]
 8015308:	4b06      	ldr	r3, [pc, #24]	@ (8015324 <cleanup_stdio+0x3c>)
 801530a:	4299      	cmp	r1, r3
 801530c:	d004      	beq.n	8015318 <cleanup_stdio+0x30>
 801530e:	4620      	mov	r0, r4
 8015310:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8015314:	f000 bf54 	b.w	80161c0 <_fflush_r>
 8015318:	bd10      	pop	{r4, pc}
 801531a:	bf00      	nop
 801531c:	2000dc04 	.word	0x2000dc04
 8015320:	2000dc6c 	.word	0x2000dc6c
 8015324:	2000dcd4 	.word	0x2000dcd4

08015328 <global_stdio_init.part.0>:
 8015328:	b510      	push	{r4, lr}
 801532a:	4b0b      	ldr	r3, [pc, #44]	@ (8015358 <global_stdio_init.part.0+0x30>)
 801532c:	4c0b      	ldr	r4, [pc, #44]	@ (801535c <global_stdio_init.part.0+0x34>)
 801532e:	4a0c      	ldr	r2, [pc, #48]	@ (8015360 <global_stdio_init.part.0+0x38>)
 8015330:	601a      	str	r2, [r3, #0]
 8015332:	4620      	mov	r0, r4
 8015334:	2200      	movs	r2, #0
 8015336:	2104      	movs	r1, #4
 8015338:	f7ff ff94 	bl	8015264 <std>
 801533c:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8015340:	2201      	movs	r2, #1
 8015342:	2109      	movs	r1, #9
 8015344:	f7ff ff8e 	bl	8015264 <std>
 8015348:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 801534c:	2202      	movs	r2, #2
 801534e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8015352:	2112      	movs	r1, #18
 8015354:	f7ff bf86 	b.w	8015264 <std>
 8015358:	2000dd3c 	.word	0x2000dd3c
 801535c:	2000dc04 	.word	0x2000dc04
 8015360:	080152d1 	.word	0x080152d1

08015364 <__sfp_lock_acquire>:
 8015364:	4801      	ldr	r0, [pc, #4]	@ (801536c <__sfp_lock_acquire+0x8>)
 8015366:	f000 b9ea 	b.w	801573e <__retarget_lock_acquire_recursive>
 801536a:	bf00      	nop
 801536c:	2000dd46 	.word	0x2000dd46

08015370 <__sfp_lock_release>:
 8015370:	4801      	ldr	r0, [pc, #4]	@ (8015378 <__sfp_lock_release+0x8>)
 8015372:	f000 b9e5 	b.w	8015740 <__retarget_lock_release_recursive>
 8015376:	bf00      	nop
 8015378:	2000dd46 	.word	0x2000dd46

0801537c <__sinit>:
 801537c:	b510      	push	{r4, lr}
 801537e:	4604      	mov	r4, r0
 8015380:	f7ff fff0 	bl	8015364 <__sfp_lock_acquire>
 8015384:	6a23      	ldr	r3, [r4, #32]
 8015386:	b11b      	cbz	r3, 8015390 <__sinit+0x14>
 8015388:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801538c:	f7ff bff0 	b.w	8015370 <__sfp_lock_release>
 8015390:	4b04      	ldr	r3, [pc, #16]	@ (80153a4 <__sinit+0x28>)
 8015392:	6223      	str	r3, [r4, #32]
 8015394:	4b04      	ldr	r3, [pc, #16]	@ (80153a8 <__sinit+0x2c>)
 8015396:	681b      	ldr	r3, [r3, #0]
 8015398:	2b00      	cmp	r3, #0
 801539a:	d1f5      	bne.n	8015388 <__sinit+0xc>
 801539c:	f7ff ffc4 	bl	8015328 <global_stdio_init.part.0>
 80153a0:	e7f2      	b.n	8015388 <__sinit+0xc>
 80153a2:	bf00      	nop
 80153a4:	080152e9 	.word	0x080152e9
 80153a8:	2000dd3c 	.word	0x2000dd3c

080153ac <_fwalk_sglue>:
 80153ac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80153b0:	4607      	mov	r7, r0
 80153b2:	4688      	mov	r8, r1
 80153b4:	4614      	mov	r4, r2
 80153b6:	2600      	movs	r6, #0
 80153b8:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80153bc:	f1b9 0901 	subs.w	r9, r9, #1
 80153c0:	d505      	bpl.n	80153ce <_fwalk_sglue+0x22>
 80153c2:	6824      	ldr	r4, [r4, #0]
 80153c4:	2c00      	cmp	r4, #0
 80153c6:	d1f7      	bne.n	80153b8 <_fwalk_sglue+0xc>
 80153c8:	4630      	mov	r0, r6
 80153ca:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80153ce:	89ab      	ldrh	r3, [r5, #12]
 80153d0:	2b01      	cmp	r3, #1
 80153d2:	d907      	bls.n	80153e4 <_fwalk_sglue+0x38>
 80153d4:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80153d8:	3301      	adds	r3, #1
 80153da:	d003      	beq.n	80153e4 <_fwalk_sglue+0x38>
 80153dc:	4629      	mov	r1, r5
 80153de:	4638      	mov	r0, r7
 80153e0:	47c0      	blx	r8
 80153e2:	4306      	orrs	r6, r0
 80153e4:	3568      	adds	r5, #104	@ 0x68
 80153e6:	e7e9      	b.n	80153bc <_fwalk_sglue+0x10>

080153e8 <iprintf>:
 80153e8:	b40f      	push	{r0, r1, r2, r3}
 80153ea:	b507      	push	{r0, r1, r2, lr}
 80153ec:	4906      	ldr	r1, [pc, #24]	@ (8015408 <iprintf+0x20>)
 80153ee:	ab04      	add	r3, sp, #16
 80153f0:	6808      	ldr	r0, [r1, #0]
 80153f2:	f853 2b04 	ldr.w	r2, [r3], #4
 80153f6:	6881      	ldr	r1, [r0, #8]
 80153f8:	9301      	str	r3, [sp, #4]
 80153fa:	f000 fbb7 	bl	8015b6c <_vfiprintf_r>
 80153fe:	b003      	add	sp, #12
 8015400:	f85d eb04 	ldr.w	lr, [sp], #4
 8015404:	b004      	add	sp, #16
 8015406:	4770      	bx	lr
 8015408:	200000c0 	.word	0x200000c0

0801540c <sniprintf>:
 801540c:	b40c      	push	{r2, r3}
 801540e:	b530      	push	{r4, r5, lr}
 8015410:	4b17      	ldr	r3, [pc, #92]	@ (8015470 <sniprintf+0x64>)
 8015412:	1e0c      	subs	r4, r1, #0
 8015414:	681d      	ldr	r5, [r3, #0]
 8015416:	b09d      	sub	sp, #116	@ 0x74
 8015418:	da08      	bge.n	801542c <sniprintf+0x20>
 801541a:	238b      	movs	r3, #139	@ 0x8b
 801541c:	602b      	str	r3, [r5, #0]
 801541e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8015422:	b01d      	add	sp, #116	@ 0x74
 8015424:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8015428:	b002      	add	sp, #8
 801542a:	4770      	bx	lr
 801542c:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8015430:	f8ad 3014 	strh.w	r3, [sp, #20]
 8015434:	bf14      	ite	ne
 8015436:	f104 33ff 	addne.w	r3, r4, #4294967295	@ 0xffffffff
 801543a:	4623      	moveq	r3, r4
 801543c:	9304      	str	r3, [sp, #16]
 801543e:	9307      	str	r3, [sp, #28]
 8015440:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8015444:	9002      	str	r0, [sp, #8]
 8015446:	9006      	str	r0, [sp, #24]
 8015448:	f8ad 3016 	strh.w	r3, [sp, #22]
 801544c:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 801544e:	ab21      	add	r3, sp, #132	@ 0x84
 8015450:	a902      	add	r1, sp, #8
 8015452:	4628      	mov	r0, r5
 8015454:	9301      	str	r3, [sp, #4]
 8015456:	f000 fa63 	bl	8015920 <_svfiprintf_r>
 801545a:	1c43      	adds	r3, r0, #1
 801545c:	bfbc      	itt	lt
 801545e:	238b      	movlt	r3, #139	@ 0x8b
 8015460:	602b      	strlt	r3, [r5, #0]
 8015462:	2c00      	cmp	r4, #0
 8015464:	d0dd      	beq.n	8015422 <sniprintf+0x16>
 8015466:	9b02      	ldr	r3, [sp, #8]
 8015468:	2200      	movs	r2, #0
 801546a:	701a      	strb	r2, [r3, #0]
 801546c:	e7d9      	b.n	8015422 <sniprintf+0x16>
 801546e:	bf00      	nop
 8015470:	200000c0 	.word	0x200000c0

08015474 <__sread>:
 8015474:	b510      	push	{r4, lr}
 8015476:	460c      	mov	r4, r1
 8015478:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801547c:	f000 f900 	bl	8015680 <_read_r>
 8015480:	2800      	cmp	r0, #0
 8015482:	bfab      	itete	ge
 8015484:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8015486:	89a3      	ldrhlt	r3, [r4, #12]
 8015488:	181b      	addge	r3, r3, r0
 801548a:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 801548e:	bfac      	ite	ge
 8015490:	6563      	strge	r3, [r4, #84]	@ 0x54
 8015492:	81a3      	strhlt	r3, [r4, #12]
 8015494:	bd10      	pop	{r4, pc}

08015496 <__swrite>:
 8015496:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801549a:	461f      	mov	r7, r3
 801549c:	898b      	ldrh	r3, [r1, #12]
 801549e:	05db      	lsls	r3, r3, #23
 80154a0:	4605      	mov	r5, r0
 80154a2:	460c      	mov	r4, r1
 80154a4:	4616      	mov	r6, r2
 80154a6:	d505      	bpl.n	80154b4 <__swrite+0x1e>
 80154a8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80154ac:	2302      	movs	r3, #2
 80154ae:	2200      	movs	r2, #0
 80154b0:	f000 f8d4 	bl	801565c <_lseek_r>
 80154b4:	89a3      	ldrh	r3, [r4, #12]
 80154b6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80154ba:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80154be:	81a3      	strh	r3, [r4, #12]
 80154c0:	4632      	mov	r2, r6
 80154c2:	463b      	mov	r3, r7
 80154c4:	4628      	mov	r0, r5
 80154c6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80154ca:	f000 b8fb 	b.w	80156c4 <_write_r>

080154ce <__sseek>:
 80154ce:	b510      	push	{r4, lr}
 80154d0:	460c      	mov	r4, r1
 80154d2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80154d6:	f000 f8c1 	bl	801565c <_lseek_r>
 80154da:	1c43      	adds	r3, r0, #1
 80154dc:	89a3      	ldrh	r3, [r4, #12]
 80154de:	bf15      	itete	ne
 80154e0:	6560      	strne	r0, [r4, #84]	@ 0x54
 80154e2:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80154e6:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80154ea:	81a3      	strheq	r3, [r4, #12]
 80154ec:	bf18      	it	ne
 80154ee:	81a3      	strhne	r3, [r4, #12]
 80154f0:	bd10      	pop	{r4, pc}

080154f2 <__sclose>:
 80154f2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80154f6:	f000 b8a1 	b.w	801563c <_close_r>

080154fa <_vsniprintf_r>:
 80154fa:	b530      	push	{r4, r5, lr}
 80154fc:	4614      	mov	r4, r2
 80154fe:	2c00      	cmp	r4, #0
 8015500:	b09b      	sub	sp, #108	@ 0x6c
 8015502:	4605      	mov	r5, r0
 8015504:	461a      	mov	r2, r3
 8015506:	da05      	bge.n	8015514 <_vsniprintf_r+0x1a>
 8015508:	238b      	movs	r3, #139	@ 0x8b
 801550a:	6003      	str	r3, [r0, #0]
 801550c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8015510:	b01b      	add	sp, #108	@ 0x6c
 8015512:	bd30      	pop	{r4, r5, pc}
 8015514:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8015518:	f8ad 300c 	strh.w	r3, [sp, #12]
 801551c:	bf14      	ite	ne
 801551e:	f104 33ff 	addne.w	r3, r4, #4294967295	@ 0xffffffff
 8015522:	4623      	moveq	r3, r4
 8015524:	9302      	str	r3, [sp, #8]
 8015526:	9305      	str	r3, [sp, #20]
 8015528:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 801552c:	9100      	str	r1, [sp, #0]
 801552e:	9104      	str	r1, [sp, #16]
 8015530:	f8ad 300e 	strh.w	r3, [sp, #14]
 8015534:	4669      	mov	r1, sp
 8015536:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 8015538:	f000 f9f2 	bl	8015920 <_svfiprintf_r>
 801553c:	1c43      	adds	r3, r0, #1
 801553e:	bfbc      	itt	lt
 8015540:	238b      	movlt	r3, #139	@ 0x8b
 8015542:	602b      	strlt	r3, [r5, #0]
 8015544:	2c00      	cmp	r4, #0
 8015546:	d0e3      	beq.n	8015510 <_vsniprintf_r+0x16>
 8015548:	9b00      	ldr	r3, [sp, #0]
 801554a:	2200      	movs	r2, #0
 801554c:	701a      	strb	r2, [r3, #0]
 801554e:	e7df      	b.n	8015510 <_vsniprintf_r+0x16>

08015550 <vsniprintf>:
 8015550:	b507      	push	{r0, r1, r2, lr}
 8015552:	9300      	str	r3, [sp, #0]
 8015554:	4613      	mov	r3, r2
 8015556:	460a      	mov	r2, r1
 8015558:	4601      	mov	r1, r0
 801555a:	4803      	ldr	r0, [pc, #12]	@ (8015568 <vsniprintf+0x18>)
 801555c:	6800      	ldr	r0, [r0, #0]
 801555e:	f7ff ffcc 	bl	80154fa <_vsniprintf_r>
 8015562:	b003      	add	sp, #12
 8015564:	f85d fb04 	ldr.w	pc, [sp], #4
 8015568:	200000c0 	.word	0x200000c0

0801556c <memcmp>:
 801556c:	b510      	push	{r4, lr}
 801556e:	3901      	subs	r1, #1
 8015570:	4402      	add	r2, r0
 8015572:	4290      	cmp	r0, r2
 8015574:	d101      	bne.n	801557a <memcmp+0xe>
 8015576:	2000      	movs	r0, #0
 8015578:	e005      	b.n	8015586 <memcmp+0x1a>
 801557a:	7803      	ldrb	r3, [r0, #0]
 801557c:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8015580:	42a3      	cmp	r3, r4
 8015582:	d001      	beq.n	8015588 <memcmp+0x1c>
 8015584:	1b18      	subs	r0, r3, r4
 8015586:	bd10      	pop	{r4, pc}
 8015588:	3001      	adds	r0, #1
 801558a:	e7f2      	b.n	8015572 <memcmp+0x6>

0801558c <memmove>:
 801558c:	4288      	cmp	r0, r1
 801558e:	b510      	push	{r4, lr}
 8015590:	eb01 0402 	add.w	r4, r1, r2
 8015594:	d902      	bls.n	801559c <memmove+0x10>
 8015596:	4284      	cmp	r4, r0
 8015598:	4623      	mov	r3, r4
 801559a:	d807      	bhi.n	80155ac <memmove+0x20>
 801559c:	1e43      	subs	r3, r0, #1
 801559e:	42a1      	cmp	r1, r4
 80155a0:	d008      	beq.n	80155b4 <memmove+0x28>
 80155a2:	f811 2b01 	ldrb.w	r2, [r1], #1
 80155a6:	f803 2f01 	strb.w	r2, [r3, #1]!
 80155aa:	e7f8      	b.n	801559e <memmove+0x12>
 80155ac:	4402      	add	r2, r0
 80155ae:	4601      	mov	r1, r0
 80155b0:	428a      	cmp	r2, r1
 80155b2:	d100      	bne.n	80155b6 <memmove+0x2a>
 80155b4:	bd10      	pop	{r4, pc}
 80155b6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80155ba:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80155be:	e7f7      	b.n	80155b0 <memmove+0x24>

080155c0 <memset>:
 80155c0:	4402      	add	r2, r0
 80155c2:	4603      	mov	r3, r0
 80155c4:	4293      	cmp	r3, r2
 80155c6:	d100      	bne.n	80155ca <memset+0xa>
 80155c8:	4770      	bx	lr
 80155ca:	f803 1b01 	strb.w	r1, [r3], #1
 80155ce:	e7f9      	b.n	80155c4 <memset+0x4>

080155d0 <strchr>:
 80155d0:	b2c9      	uxtb	r1, r1
 80155d2:	4603      	mov	r3, r0
 80155d4:	4618      	mov	r0, r3
 80155d6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80155da:	b112      	cbz	r2, 80155e2 <strchr+0x12>
 80155dc:	428a      	cmp	r2, r1
 80155de:	d1f9      	bne.n	80155d4 <strchr+0x4>
 80155e0:	4770      	bx	lr
 80155e2:	2900      	cmp	r1, #0
 80155e4:	bf18      	it	ne
 80155e6:	2000      	movne	r0, #0
 80155e8:	4770      	bx	lr

080155ea <strncmp>:
 80155ea:	b510      	push	{r4, lr}
 80155ec:	b16a      	cbz	r2, 801560a <strncmp+0x20>
 80155ee:	3901      	subs	r1, #1
 80155f0:	1884      	adds	r4, r0, r2
 80155f2:	f810 2b01 	ldrb.w	r2, [r0], #1
 80155f6:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 80155fa:	429a      	cmp	r2, r3
 80155fc:	d103      	bne.n	8015606 <strncmp+0x1c>
 80155fe:	42a0      	cmp	r0, r4
 8015600:	d001      	beq.n	8015606 <strncmp+0x1c>
 8015602:	2a00      	cmp	r2, #0
 8015604:	d1f5      	bne.n	80155f2 <strncmp+0x8>
 8015606:	1ad0      	subs	r0, r2, r3
 8015608:	bd10      	pop	{r4, pc}
 801560a:	4610      	mov	r0, r2
 801560c:	e7fc      	b.n	8015608 <strncmp+0x1e>

0801560e <strstr>:
 801560e:	780a      	ldrb	r2, [r1, #0]
 8015610:	b570      	push	{r4, r5, r6, lr}
 8015612:	b96a      	cbnz	r2, 8015630 <strstr+0x22>
 8015614:	bd70      	pop	{r4, r5, r6, pc}
 8015616:	429a      	cmp	r2, r3
 8015618:	d109      	bne.n	801562e <strstr+0x20>
 801561a:	460c      	mov	r4, r1
 801561c:	4605      	mov	r5, r0
 801561e:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 8015622:	2b00      	cmp	r3, #0
 8015624:	d0f6      	beq.n	8015614 <strstr+0x6>
 8015626:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 801562a:	429e      	cmp	r6, r3
 801562c:	d0f7      	beq.n	801561e <strstr+0x10>
 801562e:	3001      	adds	r0, #1
 8015630:	7803      	ldrb	r3, [r0, #0]
 8015632:	2b00      	cmp	r3, #0
 8015634:	d1ef      	bne.n	8015616 <strstr+0x8>
 8015636:	4618      	mov	r0, r3
 8015638:	e7ec      	b.n	8015614 <strstr+0x6>
	...

0801563c <_close_r>:
 801563c:	b538      	push	{r3, r4, r5, lr}
 801563e:	4d06      	ldr	r5, [pc, #24]	@ (8015658 <_close_r+0x1c>)
 8015640:	2300      	movs	r3, #0
 8015642:	4604      	mov	r4, r0
 8015644:	4608      	mov	r0, r1
 8015646:	602b      	str	r3, [r5, #0]
 8015648:	f7ec ffe4 	bl	8002614 <_close>
 801564c:	1c43      	adds	r3, r0, #1
 801564e:	d102      	bne.n	8015656 <_close_r+0x1a>
 8015650:	682b      	ldr	r3, [r5, #0]
 8015652:	b103      	cbz	r3, 8015656 <_close_r+0x1a>
 8015654:	6023      	str	r3, [r4, #0]
 8015656:	bd38      	pop	{r3, r4, r5, pc}
 8015658:	2000dd40 	.word	0x2000dd40

0801565c <_lseek_r>:
 801565c:	b538      	push	{r3, r4, r5, lr}
 801565e:	4d07      	ldr	r5, [pc, #28]	@ (801567c <_lseek_r+0x20>)
 8015660:	4604      	mov	r4, r0
 8015662:	4608      	mov	r0, r1
 8015664:	4611      	mov	r1, r2
 8015666:	2200      	movs	r2, #0
 8015668:	602a      	str	r2, [r5, #0]
 801566a:	461a      	mov	r2, r3
 801566c:	f7ec fff9 	bl	8002662 <_lseek>
 8015670:	1c43      	adds	r3, r0, #1
 8015672:	d102      	bne.n	801567a <_lseek_r+0x1e>
 8015674:	682b      	ldr	r3, [r5, #0]
 8015676:	b103      	cbz	r3, 801567a <_lseek_r+0x1e>
 8015678:	6023      	str	r3, [r4, #0]
 801567a:	bd38      	pop	{r3, r4, r5, pc}
 801567c:	2000dd40 	.word	0x2000dd40

08015680 <_read_r>:
 8015680:	b538      	push	{r3, r4, r5, lr}
 8015682:	4d07      	ldr	r5, [pc, #28]	@ (80156a0 <_read_r+0x20>)
 8015684:	4604      	mov	r4, r0
 8015686:	4608      	mov	r0, r1
 8015688:	4611      	mov	r1, r2
 801568a:	2200      	movs	r2, #0
 801568c:	602a      	str	r2, [r5, #0]
 801568e:	461a      	mov	r2, r3
 8015690:	f7ec ff87 	bl	80025a2 <_read>
 8015694:	1c43      	adds	r3, r0, #1
 8015696:	d102      	bne.n	801569e <_read_r+0x1e>
 8015698:	682b      	ldr	r3, [r5, #0]
 801569a:	b103      	cbz	r3, 801569e <_read_r+0x1e>
 801569c:	6023      	str	r3, [r4, #0]
 801569e:	bd38      	pop	{r3, r4, r5, pc}
 80156a0:	2000dd40 	.word	0x2000dd40

080156a4 <_sbrk_r>:
 80156a4:	b538      	push	{r3, r4, r5, lr}
 80156a6:	4d06      	ldr	r5, [pc, #24]	@ (80156c0 <_sbrk_r+0x1c>)
 80156a8:	2300      	movs	r3, #0
 80156aa:	4604      	mov	r4, r0
 80156ac:	4608      	mov	r0, r1
 80156ae:	602b      	str	r3, [r5, #0]
 80156b0:	f7ec ffe4 	bl	800267c <_sbrk>
 80156b4:	1c43      	adds	r3, r0, #1
 80156b6:	d102      	bne.n	80156be <_sbrk_r+0x1a>
 80156b8:	682b      	ldr	r3, [r5, #0]
 80156ba:	b103      	cbz	r3, 80156be <_sbrk_r+0x1a>
 80156bc:	6023      	str	r3, [r4, #0]
 80156be:	bd38      	pop	{r3, r4, r5, pc}
 80156c0:	2000dd40 	.word	0x2000dd40

080156c4 <_write_r>:
 80156c4:	b538      	push	{r3, r4, r5, lr}
 80156c6:	4d07      	ldr	r5, [pc, #28]	@ (80156e4 <_write_r+0x20>)
 80156c8:	4604      	mov	r4, r0
 80156ca:	4608      	mov	r0, r1
 80156cc:	4611      	mov	r1, r2
 80156ce:	2200      	movs	r2, #0
 80156d0:	602a      	str	r2, [r5, #0]
 80156d2:	461a      	mov	r2, r3
 80156d4:	f7ec ff82 	bl	80025dc <_write>
 80156d8:	1c43      	adds	r3, r0, #1
 80156da:	d102      	bne.n	80156e2 <_write_r+0x1e>
 80156dc:	682b      	ldr	r3, [r5, #0]
 80156de:	b103      	cbz	r3, 80156e2 <_write_r+0x1e>
 80156e0:	6023      	str	r3, [r4, #0]
 80156e2:	bd38      	pop	{r3, r4, r5, pc}
 80156e4:	2000dd40 	.word	0x2000dd40

080156e8 <__errno>:
 80156e8:	4b01      	ldr	r3, [pc, #4]	@ (80156f0 <__errno+0x8>)
 80156ea:	6818      	ldr	r0, [r3, #0]
 80156ec:	4770      	bx	lr
 80156ee:	bf00      	nop
 80156f0:	200000c0 	.word	0x200000c0

080156f4 <__libc_init_array>:
 80156f4:	b570      	push	{r4, r5, r6, lr}
 80156f6:	4d0d      	ldr	r5, [pc, #52]	@ (801572c <__libc_init_array+0x38>)
 80156f8:	4c0d      	ldr	r4, [pc, #52]	@ (8015730 <__libc_init_array+0x3c>)
 80156fa:	1b64      	subs	r4, r4, r5
 80156fc:	10a4      	asrs	r4, r4, #2
 80156fe:	2600      	movs	r6, #0
 8015700:	42a6      	cmp	r6, r4
 8015702:	d109      	bne.n	8015718 <__libc_init_array+0x24>
 8015704:	4d0b      	ldr	r5, [pc, #44]	@ (8015734 <__libc_init_array+0x40>)
 8015706:	4c0c      	ldr	r4, [pc, #48]	@ (8015738 <__libc_init_array+0x44>)
 8015708:	f000 fef8 	bl	80164fc <_init>
 801570c:	1b64      	subs	r4, r4, r5
 801570e:	10a4      	asrs	r4, r4, #2
 8015710:	2600      	movs	r6, #0
 8015712:	42a6      	cmp	r6, r4
 8015714:	d105      	bne.n	8015722 <__libc_init_array+0x2e>
 8015716:	bd70      	pop	{r4, r5, r6, pc}
 8015718:	f855 3b04 	ldr.w	r3, [r5], #4
 801571c:	4798      	blx	r3
 801571e:	3601      	adds	r6, #1
 8015720:	e7ee      	b.n	8015700 <__libc_init_array+0xc>
 8015722:	f855 3b04 	ldr.w	r3, [r5], #4
 8015726:	4798      	blx	r3
 8015728:	3601      	adds	r6, #1
 801572a:	e7f2      	b.n	8015712 <__libc_init_array+0x1e>
 801572c:	0801729c 	.word	0x0801729c
 8015730:	0801729c 	.word	0x0801729c
 8015734:	0801729c 	.word	0x0801729c
 8015738:	080172a4 	.word	0x080172a4

0801573c <__retarget_lock_init_recursive>:
 801573c:	4770      	bx	lr

0801573e <__retarget_lock_acquire_recursive>:
 801573e:	4770      	bx	lr

08015740 <__retarget_lock_release_recursive>:
 8015740:	4770      	bx	lr

08015742 <strcpy>:
 8015742:	4603      	mov	r3, r0
 8015744:	f811 2b01 	ldrb.w	r2, [r1], #1
 8015748:	f803 2b01 	strb.w	r2, [r3], #1
 801574c:	2a00      	cmp	r2, #0
 801574e:	d1f9      	bne.n	8015744 <strcpy+0x2>
 8015750:	4770      	bx	lr

08015752 <memcpy>:
 8015752:	440a      	add	r2, r1
 8015754:	4291      	cmp	r1, r2
 8015756:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 801575a:	d100      	bne.n	801575e <memcpy+0xc>
 801575c:	4770      	bx	lr
 801575e:	b510      	push	{r4, lr}
 8015760:	f811 4b01 	ldrb.w	r4, [r1], #1
 8015764:	f803 4f01 	strb.w	r4, [r3, #1]!
 8015768:	4291      	cmp	r1, r2
 801576a:	d1f9      	bne.n	8015760 <memcpy+0xe>
 801576c:	bd10      	pop	{r4, pc}
	...

08015770 <__assert_func>:
 8015770:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8015772:	4614      	mov	r4, r2
 8015774:	461a      	mov	r2, r3
 8015776:	4b09      	ldr	r3, [pc, #36]	@ (801579c <__assert_func+0x2c>)
 8015778:	681b      	ldr	r3, [r3, #0]
 801577a:	4605      	mov	r5, r0
 801577c:	68d8      	ldr	r0, [r3, #12]
 801577e:	b954      	cbnz	r4, 8015796 <__assert_func+0x26>
 8015780:	4b07      	ldr	r3, [pc, #28]	@ (80157a0 <__assert_func+0x30>)
 8015782:	461c      	mov	r4, r3
 8015784:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8015788:	9100      	str	r1, [sp, #0]
 801578a:	462b      	mov	r3, r5
 801578c:	4905      	ldr	r1, [pc, #20]	@ (80157a4 <__assert_func+0x34>)
 801578e:	f000 fd3f 	bl	8016210 <fiprintf>
 8015792:	f000 fde3 	bl	801635c <abort>
 8015796:	4b04      	ldr	r3, [pc, #16]	@ (80157a8 <__assert_func+0x38>)
 8015798:	e7f4      	b.n	8015784 <__assert_func+0x14>
 801579a:	bf00      	nop
 801579c:	200000c0 	.word	0x200000c0
 80157a0:	0801725f 	.word	0x0801725f
 80157a4:	08017231 	.word	0x08017231
 80157a8:	08017224 	.word	0x08017224

080157ac <__env_lock>:
 80157ac:	4801      	ldr	r0, [pc, #4]	@ (80157b4 <__env_lock+0x8>)
 80157ae:	f7ff bfc6 	b.w	801573e <__retarget_lock_acquire_recursive>
 80157b2:	bf00      	nop
 80157b4:	2000dd44 	.word	0x2000dd44

080157b8 <__env_unlock>:
 80157b8:	4801      	ldr	r0, [pc, #4]	@ (80157c0 <__env_unlock+0x8>)
 80157ba:	f7ff bfc1 	b.w	8015740 <__retarget_lock_release_recursive>
 80157be:	bf00      	nop
 80157c0:	2000dd44 	.word	0x2000dd44

080157c4 <_free_r>:
 80157c4:	b538      	push	{r3, r4, r5, lr}
 80157c6:	4605      	mov	r5, r0
 80157c8:	2900      	cmp	r1, #0
 80157ca:	d041      	beq.n	8015850 <_free_r+0x8c>
 80157cc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80157d0:	1f0c      	subs	r4, r1, #4
 80157d2:	2b00      	cmp	r3, #0
 80157d4:	bfb8      	it	lt
 80157d6:	18e4      	addlt	r4, r4, r3
 80157d8:	f7ff fb7c 	bl	8014ed4 <__malloc_lock>
 80157dc:	4a1d      	ldr	r2, [pc, #116]	@ (8015854 <_free_r+0x90>)
 80157de:	6813      	ldr	r3, [r2, #0]
 80157e0:	b933      	cbnz	r3, 80157f0 <_free_r+0x2c>
 80157e2:	6063      	str	r3, [r4, #4]
 80157e4:	6014      	str	r4, [r2, #0]
 80157e6:	4628      	mov	r0, r5
 80157e8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80157ec:	f7ff bb78 	b.w	8014ee0 <__malloc_unlock>
 80157f0:	42a3      	cmp	r3, r4
 80157f2:	d908      	bls.n	8015806 <_free_r+0x42>
 80157f4:	6820      	ldr	r0, [r4, #0]
 80157f6:	1821      	adds	r1, r4, r0
 80157f8:	428b      	cmp	r3, r1
 80157fa:	bf01      	itttt	eq
 80157fc:	6819      	ldreq	r1, [r3, #0]
 80157fe:	685b      	ldreq	r3, [r3, #4]
 8015800:	1809      	addeq	r1, r1, r0
 8015802:	6021      	streq	r1, [r4, #0]
 8015804:	e7ed      	b.n	80157e2 <_free_r+0x1e>
 8015806:	461a      	mov	r2, r3
 8015808:	685b      	ldr	r3, [r3, #4]
 801580a:	b10b      	cbz	r3, 8015810 <_free_r+0x4c>
 801580c:	42a3      	cmp	r3, r4
 801580e:	d9fa      	bls.n	8015806 <_free_r+0x42>
 8015810:	6811      	ldr	r1, [r2, #0]
 8015812:	1850      	adds	r0, r2, r1
 8015814:	42a0      	cmp	r0, r4
 8015816:	d10b      	bne.n	8015830 <_free_r+0x6c>
 8015818:	6820      	ldr	r0, [r4, #0]
 801581a:	4401      	add	r1, r0
 801581c:	1850      	adds	r0, r2, r1
 801581e:	4283      	cmp	r3, r0
 8015820:	6011      	str	r1, [r2, #0]
 8015822:	d1e0      	bne.n	80157e6 <_free_r+0x22>
 8015824:	6818      	ldr	r0, [r3, #0]
 8015826:	685b      	ldr	r3, [r3, #4]
 8015828:	6053      	str	r3, [r2, #4]
 801582a:	4408      	add	r0, r1
 801582c:	6010      	str	r0, [r2, #0]
 801582e:	e7da      	b.n	80157e6 <_free_r+0x22>
 8015830:	d902      	bls.n	8015838 <_free_r+0x74>
 8015832:	230c      	movs	r3, #12
 8015834:	602b      	str	r3, [r5, #0]
 8015836:	e7d6      	b.n	80157e6 <_free_r+0x22>
 8015838:	6820      	ldr	r0, [r4, #0]
 801583a:	1821      	adds	r1, r4, r0
 801583c:	428b      	cmp	r3, r1
 801583e:	bf04      	itt	eq
 8015840:	6819      	ldreq	r1, [r3, #0]
 8015842:	685b      	ldreq	r3, [r3, #4]
 8015844:	6063      	str	r3, [r4, #4]
 8015846:	bf04      	itt	eq
 8015848:	1809      	addeq	r1, r1, r0
 801584a:	6021      	streq	r1, [r4, #0]
 801584c:	6054      	str	r4, [r2, #4]
 801584e:	e7ca      	b.n	80157e6 <_free_r+0x22>
 8015850:	bd38      	pop	{r3, r4, r5, pc}
 8015852:	bf00      	nop
 8015854:	2000dbfc 	.word	0x2000dbfc

08015858 <_malloc_usable_size_r>:
 8015858:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801585c:	1f18      	subs	r0, r3, #4
 801585e:	2b00      	cmp	r3, #0
 8015860:	bfbc      	itt	lt
 8015862:	580b      	ldrlt	r3, [r1, r0]
 8015864:	18c0      	addlt	r0, r0, r3
 8015866:	4770      	bx	lr

08015868 <__ssputs_r>:
 8015868:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801586c:	688e      	ldr	r6, [r1, #8]
 801586e:	461f      	mov	r7, r3
 8015870:	42be      	cmp	r6, r7
 8015872:	680b      	ldr	r3, [r1, #0]
 8015874:	4682      	mov	sl, r0
 8015876:	460c      	mov	r4, r1
 8015878:	4690      	mov	r8, r2
 801587a:	d82d      	bhi.n	80158d8 <__ssputs_r+0x70>
 801587c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8015880:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8015884:	d026      	beq.n	80158d4 <__ssputs_r+0x6c>
 8015886:	6965      	ldr	r5, [r4, #20]
 8015888:	6909      	ldr	r1, [r1, #16]
 801588a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801588e:	eba3 0901 	sub.w	r9, r3, r1
 8015892:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8015896:	1c7b      	adds	r3, r7, #1
 8015898:	444b      	add	r3, r9
 801589a:	106d      	asrs	r5, r5, #1
 801589c:	429d      	cmp	r5, r3
 801589e:	bf38      	it	cc
 80158a0:	461d      	movcc	r5, r3
 80158a2:	0553      	lsls	r3, r2, #21
 80158a4:	d527      	bpl.n	80158f6 <__ssputs_r+0x8e>
 80158a6:	4629      	mov	r1, r5
 80158a8:	f7ff fa94 	bl	8014dd4 <_malloc_r>
 80158ac:	4606      	mov	r6, r0
 80158ae:	b360      	cbz	r0, 801590a <__ssputs_r+0xa2>
 80158b0:	6921      	ldr	r1, [r4, #16]
 80158b2:	464a      	mov	r2, r9
 80158b4:	f7ff ff4d 	bl	8015752 <memcpy>
 80158b8:	89a3      	ldrh	r3, [r4, #12]
 80158ba:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 80158be:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80158c2:	81a3      	strh	r3, [r4, #12]
 80158c4:	6126      	str	r6, [r4, #16]
 80158c6:	6165      	str	r5, [r4, #20]
 80158c8:	444e      	add	r6, r9
 80158ca:	eba5 0509 	sub.w	r5, r5, r9
 80158ce:	6026      	str	r6, [r4, #0]
 80158d0:	60a5      	str	r5, [r4, #8]
 80158d2:	463e      	mov	r6, r7
 80158d4:	42be      	cmp	r6, r7
 80158d6:	d900      	bls.n	80158da <__ssputs_r+0x72>
 80158d8:	463e      	mov	r6, r7
 80158da:	6820      	ldr	r0, [r4, #0]
 80158dc:	4632      	mov	r2, r6
 80158de:	4641      	mov	r1, r8
 80158e0:	f7ff fe54 	bl	801558c <memmove>
 80158e4:	68a3      	ldr	r3, [r4, #8]
 80158e6:	1b9b      	subs	r3, r3, r6
 80158e8:	60a3      	str	r3, [r4, #8]
 80158ea:	6823      	ldr	r3, [r4, #0]
 80158ec:	4433      	add	r3, r6
 80158ee:	6023      	str	r3, [r4, #0]
 80158f0:	2000      	movs	r0, #0
 80158f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80158f6:	462a      	mov	r2, r5
 80158f8:	f7ff fb6c 	bl	8014fd4 <_realloc_r>
 80158fc:	4606      	mov	r6, r0
 80158fe:	2800      	cmp	r0, #0
 8015900:	d1e0      	bne.n	80158c4 <__ssputs_r+0x5c>
 8015902:	6921      	ldr	r1, [r4, #16]
 8015904:	4650      	mov	r0, sl
 8015906:	f7ff ff5d 	bl	80157c4 <_free_r>
 801590a:	230c      	movs	r3, #12
 801590c:	f8ca 3000 	str.w	r3, [sl]
 8015910:	89a3      	ldrh	r3, [r4, #12]
 8015912:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8015916:	81a3      	strh	r3, [r4, #12]
 8015918:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801591c:	e7e9      	b.n	80158f2 <__ssputs_r+0x8a>
	...

08015920 <_svfiprintf_r>:
 8015920:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015924:	4698      	mov	r8, r3
 8015926:	898b      	ldrh	r3, [r1, #12]
 8015928:	061b      	lsls	r3, r3, #24
 801592a:	b09d      	sub	sp, #116	@ 0x74
 801592c:	4607      	mov	r7, r0
 801592e:	460d      	mov	r5, r1
 8015930:	4614      	mov	r4, r2
 8015932:	d510      	bpl.n	8015956 <_svfiprintf_r+0x36>
 8015934:	690b      	ldr	r3, [r1, #16]
 8015936:	b973      	cbnz	r3, 8015956 <_svfiprintf_r+0x36>
 8015938:	2140      	movs	r1, #64	@ 0x40
 801593a:	f7ff fa4b 	bl	8014dd4 <_malloc_r>
 801593e:	6028      	str	r0, [r5, #0]
 8015940:	6128      	str	r0, [r5, #16]
 8015942:	b930      	cbnz	r0, 8015952 <_svfiprintf_r+0x32>
 8015944:	230c      	movs	r3, #12
 8015946:	603b      	str	r3, [r7, #0]
 8015948:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801594c:	b01d      	add	sp, #116	@ 0x74
 801594e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015952:	2340      	movs	r3, #64	@ 0x40
 8015954:	616b      	str	r3, [r5, #20]
 8015956:	2300      	movs	r3, #0
 8015958:	9309      	str	r3, [sp, #36]	@ 0x24
 801595a:	2320      	movs	r3, #32
 801595c:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8015960:	f8cd 800c 	str.w	r8, [sp, #12]
 8015964:	2330      	movs	r3, #48	@ 0x30
 8015966:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8015b04 <_svfiprintf_r+0x1e4>
 801596a:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 801596e:	f04f 0901 	mov.w	r9, #1
 8015972:	4623      	mov	r3, r4
 8015974:	469a      	mov	sl, r3
 8015976:	f813 2b01 	ldrb.w	r2, [r3], #1
 801597a:	b10a      	cbz	r2, 8015980 <_svfiprintf_r+0x60>
 801597c:	2a25      	cmp	r2, #37	@ 0x25
 801597e:	d1f9      	bne.n	8015974 <_svfiprintf_r+0x54>
 8015980:	ebba 0b04 	subs.w	fp, sl, r4
 8015984:	d00b      	beq.n	801599e <_svfiprintf_r+0x7e>
 8015986:	465b      	mov	r3, fp
 8015988:	4622      	mov	r2, r4
 801598a:	4629      	mov	r1, r5
 801598c:	4638      	mov	r0, r7
 801598e:	f7ff ff6b 	bl	8015868 <__ssputs_r>
 8015992:	3001      	adds	r0, #1
 8015994:	f000 80a7 	beq.w	8015ae6 <_svfiprintf_r+0x1c6>
 8015998:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801599a:	445a      	add	r2, fp
 801599c:	9209      	str	r2, [sp, #36]	@ 0x24
 801599e:	f89a 3000 	ldrb.w	r3, [sl]
 80159a2:	2b00      	cmp	r3, #0
 80159a4:	f000 809f 	beq.w	8015ae6 <_svfiprintf_r+0x1c6>
 80159a8:	2300      	movs	r3, #0
 80159aa:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80159ae:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80159b2:	f10a 0a01 	add.w	sl, sl, #1
 80159b6:	9304      	str	r3, [sp, #16]
 80159b8:	9307      	str	r3, [sp, #28]
 80159ba:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80159be:	931a      	str	r3, [sp, #104]	@ 0x68
 80159c0:	4654      	mov	r4, sl
 80159c2:	2205      	movs	r2, #5
 80159c4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80159c8:	484e      	ldr	r0, [pc, #312]	@ (8015b04 <_svfiprintf_r+0x1e4>)
 80159ca:	f7ea fc21 	bl	8000210 <memchr>
 80159ce:	9a04      	ldr	r2, [sp, #16]
 80159d0:	b9d8      	cbnz	r0, 8015a0a <_svfiprintf_r+0xea>
 80159d2:	06d0      	lsls	r0, r2, #27
 80159d4:	bf44      	itt	mi
 80159d6:	2320      	movmi	r3, #32
 80159d8:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80159dc:	0711      	lsls	r1, r2, #28
 80159de:	bf44      	itt	mi
 80159e0:	232b      	movmi	r3, #43	@ 0x2b
 80159e2:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80159e6:	f89a 3000 	ldrb.w	r3, [sl]
 80159ea:	2b2a      	cmp	r3, #42	@ 0x2a
 80159ec:	d015      	beq.n	8015a1a <_svfiprintf_r+0xfa>
 80159ee:	9a07      	ldr	r2, [sp, #28]
 80159f0:	4654      	mov	r4, sl
 80159f2:	2000      	movs	r0, #0
 80159f4:	f04f 0c0a 	mov.w	ip, #10
 80159f8:	4621      	mov	r1, r4
 80159fa:	f811 3b01 	ldrb.w	r3, [r1], #1
 80159fe:	3b30      	subs	r3, #48	@ 0x30
 8015a00:	2b09      	cmp	r3, #9
 8015a02:	d94b      	bls.n	8015a9c <_svfiprintf_r+0x17c>
 8015a04:	b1b0      	cbz	r0, 8015a34 <_svfiprintf_r+0x114>
 8015a06:	9207      	str	r2, [sp, #28]
 8015a08:	e014      	b.n	8015a34 <_svfiprintf_r+0x114>
 8015a0a:	eba0 0308 	sub.w	r3, r0, r8
 8015a0e:	fa09 f303 	lsl.w	r3, r9, r3
 8015a12:	4313      	orrs	r3, r2
 8015a14:	9304      	str	r3, [sp, #16]
 8015a16:	46a2      	mov	sl, r4
 8015a18:	e7d2      	b.n	80159c0 <_svfiprintf_r+0xa0>
 8015a1a:	9b03      	ldr	r3, [sp, #12]
 8015a1c:	1d19      	adds	r1, r3, #4
 8015a1e:	681b      	ldr	r3, [r3, #0]
 8015a20:	9103      	str	r1, [sp, #12]
 8015a22:	2b00      	cmp	r3, #0
 8015a24:	bfbb      	ittet	lt
 8015a26:	425b      	neglt	r3, r3
 8015a28:	f042 0202 	orrlt.w	r2, r2, #2
 8015a2c:	9307      	strge	r3, [sp, #28]
 8015a2e:	9307      	strlt	r3, [sp, #28]
 8015a30:	bfb8      	it	lt
 8015a32:	9204      	strlt	r2, [sp, #16]
 8015a34:	7823      	ldrb	r3, [r4, #0]
 8015a36:	2b2e      	cmp	r3, #46	@ 0x2e
 8015a38:	d10a      	bne.n	8015a50 <_svfiprintf_r+0x130>
 8015a3a:	7863      	ldrb	r3, [r4, #1]
 8015a3c:	2b2a      	cmp	r3, #42	@ 0x2a
 8015a3e:	d132      	bne.n	8015aa6 <_svfiprintf_r+0x186>
 8015a40:	9b03      	ldr	r3, [sp, #12]
 8015a42:	1d1a      	adds	r2, r3, #4
 8015a44:	681b      	ldr	r3, [r3, #0]
 8015a46:	9203      	str	r2, [sp, #12]
 8015a48:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8015a4c:	3402      	adds	r4, #2
 8015a4e:	9305      	str	r3, [sp, #20]
 8015a50:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8015b14 <_svfiprintf_r+0x1f4>
 8015a54:	7821      	ldrb	r1, [r4, #0]
 8015a56:	2203      	movs	r2, #3
 8015a58:	4650      	mov	r0, sl
 8015a5a:	f7ea fbd9 	bl	8000210 <memchr>
 8015a5e:	b138      	cbz	r0, 8015a70 <_svfiprintf_r+0x150>
 8015a60:	9b04      	ldr	r3, [sp, #16]
 8015a62:	eba0 000a 	sub.w	r0, r0, sl
 8015a66:	2240      	movs	r2, #64	@ 0x40
 8015a68:	4082      	lsls	r2, r0
 8015a6a:	4313      	orrs	r3, r2
 8015a6c:	3401      	adds	r4, #1
 8015a6e:	9304      	str	r3, [sp, #16]
 8015a70:	f814 1b01 	ldrb.w	r1, [r4], #1
 8015a74:	4824      	ldr	r0, [pc, #144]	@ (8015b08 <_svfiprintf_r+0x1e8>)
 8015a76:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8015a7a:	2206      	movs	r2, #6
 8015a7c:	f7ea fbc8 	bl	8000210 <memchr>
 8015a80:	2800      	cmp	r0, #0
 8015a82:	d036      	beq.n	8015af2 <_svfiprintf_r+0x1d2>
 8015a84:	4b21      	ldr	r3, [pc, #132]	@ (8015b0c <_svfiprintf_r+0x1ec>)
 8015a86:	bb1b      	cbnz	r3, 8015ad0 <_svfiprintf_r+0x1b0>
 8015a88:	9b03      	ldr	r3, [sp, #12]
 8015a8a:	3307      	adds	r3, #7
 8015a8c:	f023 0307 	bic.w	r3, r3, #7
 8015a90:	3308      	adds	r3, #8
 8015a92:	9303      	str	r3, [sp, #12]
 8015a94:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8015a96:	4433      	add	r3, r6
 8015a98:	9309      	str	r3, [sp, #36]	@ 0x24
 8015a9a:	e76a      	b.n	8015972 <_svfiprintf_r+0x52>
 8015a9c:	fb0c 3202 	mla	r2, ip, r2, r3
 8015aa0:	460c      	mov	r4, r1
 8015aa2:	2001      	movs	r0, #1
 8015aa4:	e7a8      	b.n	80159f8 <_svfiprintf_r+0xd8>
 8015aa6:	2300      	movs	r3, #0
 8015aa8:	3401      	adds	r4, #1
 8015aaa:	9305      	str	r3, [sp, #20]
 8015aac:	4619      	mov	r1, r3
 8015aae:	f04f 0c0a 	mov.w	ip, #10
 8015ab2:	4620      	mov	r0, r4
 8015ab4:	f810 2b01 	ldrb.w	r2, [r0], #1
 8015ab8:	3a30      	subs	r2, #48	@ 0x30
 8015aba:	2a09      	cmp	r2, #9
 8015abc:	d903      	bls.n	8015ac6 <_svfiprintf_r+0x1a6>
 8015abe:	2b00      	cmp	r3, #0
 8015ac0:	d0c6      	beq.n	8015a50 <_svfiprintf_r+0x130>
 8015ac2:	9105      	str	r1, [sp, #20]
 8015ac4:	e7c4      	b.n	8015a50 <_svfiprintf_r+0x130>
 8015ac6:	fb0c 2101 	mla	r1, ip, r1, r2
 8015aca:	4604      	mov	r4, r0
 8015acc:	2301      	movs	r3, #1
 8015ace:	e7f0      	b.n	8015ab2 <_svfiprintf_r+0x192>
 8015ad0:	ab03      	add	r3, sp, #12
 8015ad2:	9300      	str	r3, [sp, #0]
 8015ad4:	462a      	mov	r2, r5
 8015ad6:	4b0e      	ldr	r3, [pc, #56]	@ (8015b10 <_svfiprintf_r+0x1f0>)
 8015ad8:	a904      	add	r1, sp, #16
 8015ada:	4638      	mov	r0, r7
 8015adc:	f3af 8000 	nop.w
 8015ae0:	1c42      	adds	r2, r0, #1
 8015ae2:	4606      	mov	r6, r0
 8015ae4:	d1d6      	bne.n	8015a94 <_svfiprintf_r+0x174>
 8015ae6:	89ab      	ldrh	r3, [r5, #12]
 8015ae8:	065b      	lsls	r3, r3, #25
 8015aea:	f53f af2d 	bmi.w	8015948 <_svfiprintf_r+0x28>
 8015aee:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8015af0:	e72c      	b.n	801594c <_svfiprintf_r+0x2c>
 8015af2:	ab03      	add	r3, sp, #12
 8015af4:	9300      	str	r3, [sp, #0]
 8015af6:	462a      	mov	r2, r5
 8015af8:	4b05      	ldr	r3, [pc, #20]	@ (8015b10 <_svfiprintf_r+0x1f0>)
 8015afa:	a904      	add	r1, sp, #16
 8015afc:	4638      	mov	r0, r7
 8015afe:	f000 f9bb 	bl	8015e78 <_printf_i>
 8015b02:	e7ed      	b.n	8015ae0 <_svfiprintf_r+0x1c0>
 8015b04:	08017260 	.word	0x08017260
 8015b08:	0801726a 	.word	0x0801726a
 8015b0c:	00000000 	.word	0x00000000
 8015b10:	08015869 	.word	0x08015869
 8015b14:	08017266 	.word	0x08017266

08015b18 <__sfputc_r>:
 8015b18:	6893      	ldr	r3, [r2, #8]
 8015b1a:	3b01      	subs	r3, #1
 8015b1c:	2b00      	cmp	r3, #0
 8015b1e:	b410      	push	{r4}
 8015b20:	6093      	str	r3, [r2, #8]
 8015b22:	da08      	bge.n	8015b36 <__sfputc_r+0x1e>
 8015b24:	6994      	ldr	r4, [r2, #24]
 8015b26:	42a3      	cmp	r3, r4
 8015b28:	db01      	blt.n	8015b2e <__sfputc_r+0x16>
 8015b2a:	290a      	cmp	r1, #10
 8015b2c:	d103      	bne.n	8015b36 <__sfputc_r+0x1e>
 8015b2e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8015b32:	f000 bb7f 	b.w	8016234 <__swbuf_r>
 8015b36:	6813      	ldr	r3, [r2, #0]
 8015b38:	1c58      	adds	r0, r3, #1
 8015b3a:	6010      	str	r0, [r2, #0]
 8015b3c:	7019      	strb	r1, [r3, #0]
 8015b3e:	4608      	mov	r0, r1
 8015b40:	f85d 4b04 	ldr.w	r4, [sp], #4
 8015b44:	4770      	bx	lr

08015b46 <__sfputs_r>:
 8015b46:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015b48:	4606      	mov	r6, r0
 8015b4a:	460f      	mov	r7, r1
 8015b4c:	4614      	mov	r4, r2
 8015b4e:	18d5      	adds	r5, r2, r3
 8015b50:	42ac      	cmp	r4, r5
 8015b52:	d101      	bne.n	8015b58 <__sfputs_r+0x12>
 8015b54:	2000      	movs	r0, #0
 8015b56:	e007      	b.n	8015b68 <__sfputs_r+0x22>
 8015b58:	f814 1b01 	ldrb.w	r1, [r4], #1
 8015b5c:	463a      	mov	r2, r7
 8015b5e:	4630      	mov	r0, r6
 8015b60:	f7ff ffda 	bl	8015b18 <__sfputc_r>
 8015b64:	1c43      	adds	r3, r0, #1
 8015b66:	d1f3      	bne.n	8015b50 <__sfputs_r+0xa>
 8015b68:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08015b6c <_vfiprintf_r>:
 8015b6c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015b70:	460d      	mov	r5, r1
 8015b72:	b09d      	sub	sp, #116	@ 0x74
 8015b74:	4614      	mov	r4, r2
 8015b76:	4698      	mov	r8, r3
 8015b78:	4606      	mov	r6, r0
 8015b7a:	b118      	cbz	r0, 8015b84 <_vfiprintf_r+0x18>
 8015b7c:	6a03      	ldr	r3, [r0, #32]
 8015b7e:	b90b      	cbnz	r3, 8015b84 <_vfiprintf_r+0x18>
 8015b80:	f7ff fbfc 	bl	801537c <__sinit>
 8015b84:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8015b86:	07d9      	lsls	r1, r3, #31
 8015b88:	d405      	bmi.n	8015b96 <_vfiprintf_r+0x2a>
 8015b8a:	89ab      	ldrh	r3, [r5, #12]
 8015b8c:	059a      	lsls	r2, r3, #22
 8015b8e:	d402      	bmi.n	8015b96 <_vfiprintf_r+0x2a>
 8015b90:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8015b92:	f7ff fdd4 	bl	801573e <__retarget_lock_acquire_recursive>
 8015b96:	89ab      	ldrh	r3, [r5, #12]
 8015b98:	071b      	lsls	r3, r3, #28
 8015b9a:	d501      	bpl.n	8015ba0 <_vfiprintf_r+0x34>
 8015b9c:	692b      	ldr	r3, [r5, #16]
 8015b9e:	b99b      	cbnz	r3, 8015bc8 <_vfiprintf_r+0x5c>
 8015ba0:	4629      	mov	r1, r5
 8015ba2:	4630      	mov	r0, r6
 8015ba4:	f000 fb84 	bl	80162b0 <__swsetup_r>
 8015ba8:	b170      	cbz	r0, 8015bc8 <_vfiprintf_r+0x5c>
 8015baa:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8015bac:	07dc      	lsls	r4, r3, #31
 8015bae:	d504      	bpl.n	8015bba <_vfiprintf_r+0x4e>
 8015bb0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8015bb4:	b01d      	add	sp, #116	@ 0x74
 8015bb6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015bba:	89ab      	ldrh	r3, [r5, #12]
 8015bbc:	0598      	lsls	r0, r3, #22
 8015bbe:	d4f7      	bmi.n	8015bb0 <_vfiprintf_r+0x44>
 8015bc0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8015bc2:	f7ff fdbd 	bl	8015740 <__retarget_lock_release_recursive>
 8015bc6:	e7f3      	b.n	8015bb0 <_vfiprintf_r+0x44>
 8015bc8:	2300      	movs	r3, #0
 8015bca:	9309      	str	r3, [sp, #36]	@ 0x24
 8015bcc:	2320      	movs	r3, #32
 8015bce:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8015bd2:	f8cd 800c 	str.w	r8, [sp, #12]
 8015bd6:	2330      	movs	r3, #48	@ 0x30
 8015bd8:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8015d88 <_vfiprintf_r+0x21c>
 8015bdc:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8015be0:	f04f 0901 	mov.w	r9, #1
 8015be4:	4623      	mov	r3, r4
 8015be6:	469a      	mov	sl, r3
 8015be8:	f813 2b01 	ldrb.w	r2, [r3], #1
 8015bec:	b10a      	cbz	r2, 8015bf2 <_vfiprintf_r+0x86>
 8015bee:	2a25      	cmp	r2, #37	@ 0x25
 8015bf0:	d1f9      	bne.n	8015be6 <_vfiprintf_r+0x7a>
 8015bf2:	ebba 0b04 	subs.w	fp, sl, r4
 8015bf6:	d00b      	beq.n	8015c10 <_vfiprintf_r+0xa4>
 8015bf8:	465b      	mov	r3, fp
 8015bfa:	4622      	mov	r2, r4
 8015bfc:	4629      	mov	r1, r5
 8015bfe:	4630      	mov	r0, r6
 8015c00:	f7ff ffa1 	bl	8015b46 <__sfputs_r>
 8015c04:	3001      	adds	r0, #1
 8015c06:	f000 80a7 	beq.w	8015d58 <_vfiprintf_r+0x1ec>
 8015c0a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8015c0c:	445a      	add	r2, fp
 8015c0e:	9209      	str	r2, [sp, #36]	@ 0x24
 8015c10:	f89a 3000 	ldrb.w	r3, [sl]
 8015c14:	2b00      	cmp	r3, #0
 8015c16:	f000 809f 	beq.w	8015d58 <_vfiprintf_r+0x1ec>
 8015c1a:	2300      	movs	r3, #0
 8015c1c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8015c20:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8015c24:	f10a 0a01 	add.w	sl, sl, #1
 8015c28:	9304      	str	r3, [sp, #16]
 8015c2a:	9307      	str	r3, [sp, #28]
 8015c2c:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8015c30:	931a      	str	r3, [sp, #104]	@ 0x68
 8015c32:	4654      	mov	r4, sl
 8015c34:	2205      	movs	r2, #5
 8015c36:	f814 1b01 	ldrb.w	r1, [r4], #1
 8015c3a:	4853      	ldr	r0, [pc, #332]	@ (8015d88 <_vfiprintf_r+0x21c>)
 8015c3c:	f7ea fae8 	bl	8000210 <memchr>
 8015c40:	9a04      	ldr	r2, [sp, #16]
 8015c42:	b9d8      	cbnz	r0, 8015c7c <_vfiprintf_r+0x110>
 8015c44:	06d1      	lsls	r1, r2, #27
 8015c46:	bf44      	itt	mi
 8015c48:	2320      	movmi	r3, #32
 8015c4a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8015c4e:	0713      	lsls	r3, r2, #28
 8015c50:	bf44      	itt	mi
 8015c52:	232b      	movmi	r3, #43	@ 0x2b
 8015c54:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8015c58:	f89a 3000 	ldrb.w	r3, [sl]
 8015c5c:	2b2a      	cmp	r3, #42	@ 0x2a
 8015c5e:	d015      	beq.n	8015c8c <_vfiprintf_r+0x120>
 8015c60:	9a07      	ldr	r2, [sp, #28]
 8015c62:	4654      	mov	r4, sl
 8015c64:	2000      	movs	r0, #0
 8015c66:	f04f 0c0a 	mov.w	ip, #10
 8015c6a:	4621      	mov	r1, r4
 8015c6c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8015c70:	3b30      	subs	r3, #48	@ 0x30
 8015c72:	2b09      	cmp	r3, #9
 8015c74:	d94b      	bls.n	8015d0e <_vfiprintf_r+0x1a2>
 8015c76:	b1b0      	cbz	r0, 8015ca6 <_vfiprintf_r+0x13a>
 8015c78:	9207      	str	r2, [sp, #28]
 8015c7a:	e014      	b.n	8015ca6 <_vfiprintf_r+0x13a>
 8015c7c:	eba0 0308 	sub.w	r3, r0, r8
 8015c80:	fa09 f303 	lsl.w	r3, r9, r3
 8015c84:	4313      	orrs	r3, r2
 8015c86:	9304      	str	r3, [sp, #16]
 8015c88:	46a2      	mov	sl, r4
 8015c8a:	e7d2      	b.n	8015c32 <_vfiprintf_r+0xc6>
 8015c8c:	9b03      	ldr	r3, [sp, #12]
 8015c8e:	1d19      	adds	r1, r3, #4
 8015c90:	681b      	ldr	r3, [r3, #0]
 8015c92:	9103      	str	r1, [sp, #12]
 8015c94:	2b00      	cmp	r3, #0
 8015c96:	bfbb      	ittet	lt
 8015c98:	425b      	neglt	r3, r3
 8015c9a:	f042 0202 	orrlt.w	r2, r2, #2
 8015c9e:	9307      	strge	r3, [sp, #28]
 8015ca0:	9307      	strlt	r3, [sp, #28]
 8015ca2:	bfb8      	it	lt
 8015ca4:	9204      	strlt	r2, [sp, #16]
 8015ca6:	7823      	ldrb	r3, [r4, #0]
 8015ca8:	2b2e      	cmp	r3, #46	@ 0x2e
 8015caa:	d10a      	bne.n	8015cc2 <_vfiprintf_r+0x156>
 8015cac:	7863      	ldrb	r3, [r4, #1]
 8015cae:	2b2a      	cmp	r3, #42	@ 0x2a
 8015cb0:	d132      	bne.n	8015d18 <_vfiprintf_r+0x1ac>
 8015cb2:	9b03      	ldr	r3, [sp, #12]
 8015cb4:	1d1a      	adds	r2, r3, #4
 8015cb6:	681b      	ldr	r3, [r3, #0]
 8015cb8:	9203      	str	r2, [sp, #12]
 8015cba:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8015cbe:	3402      	adds	r4, #2
 8015cc0:	9305      	str	r3, [sp, #20]
 8015cc2:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8015d98 <_vfiprintf_r+0x22c>
 8015cc6:	7821      	ldrb	r1, [r4, #0]
 8015cc8:	2203      	movs	r2, #3
 8015cca:	4650      	mov	r0, sl
 8015ccc:	f7ea faa0 	bl	8000210 <memchr>
 8015cd0:	b138      	cbz	r0, 8015ce2 <_vfiprintf_r+0x176>
 8015cd2:	9b04      	ldr	r3, [sp, #16]
 8015cd4:	eba0 000a 	sub.w	r0, r0, sl
 8015cd8:	2240      	movs	r2, #64	@ 0x40
 8015cda:	4082      	lsls	r2, r0
 8015cdc:	4313      	orrs	r3, r2
 8015cde:	3401      	adds	r4, #1
 8015ce0:	9304      	str	r3, [sp, #16]
 8015ce2:	f814 1b01 	ldrb.w	r1, [r4], #1
 8015ce6:	4829      	ldr	r0, [pc, #164]	@ (8015d8c <_vfiprintf_r+0x220>)
 8015ce8:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8015cec:	2206      	movs	r2, #6
 8015cee:	f7ea fa8f 	bl	8000210 <memchr>
 8015cf2:	2800      	cmp	r0, #0
 8015cf4:	d03f      	beq.n	8015d76 <_vfiprintf_r+0x20a>
 8015cf6:	4b26      	ldr	r3, [pc, #152]	@ (8015d90 <_vfiprintf_r+0x224>)
 8015cf8:	bb1b      	cbnz	r3, 8015d42 <_vfiprintf_r+0x1d6>
 8015cfa:	9b03      	ldr	r3, [sp, #12]
 8015cfc:	3307      	adds	r3, #7
 8015cfe:	f023 0307 	bic.w	r3, r3, #7
 8015d02:	3308      	adds	r3, #8
 8015d04:	9303      	str	r3, [sp, #12]
 8015d06:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8015d08:	443b      	add	r3, r7
 8015d0a:	9309      	str	r3, [sp, #36]	@ 0x24
 8015d0c:	e76a      	b.n	8015be4 <_vfiprintf_r+0x78>
 8015d0e:	fb0c 3202 	mla	r2, ip, r2, r3
 8015d12:	460c      	mov	r4, r1
 8015d14:	2001      	movs	r0, #1
 8015d16:	e7a8      	b.n	8015c6a <_vfiprintf_r+0xfe>
 8015d18:	2300      	movs	r3, #0
 8015d1a:	3401      	adds	r4, #1
 8015d1c:	9305      	str	r3, [sp, #20]
 8015d1e:	4619      	mov	r1, r3
 8015d20:	f04f 0c0a 	mov.w	ip, #10
 8015d24:	4620      	mov	r0, r4
 8015d26:	f810 2b01 	ldrb.w	r2, [r0], #1
 8015d2a:	3a30      	subs	r2, #48	@ 0x30
 8015d2c:	2a09      	cmp	r2, #9
 8015d2e:	d903      	bls.n	8015d38 <_vfiprintf_r+0x1cc>
 8015d30:	2b00      	cmp	r3, #0
 8015d32:	d0c6      	beq.n	8015cc2 <_vfiprintf_r+0x156>
 8015d34:	9105      	str	r1, [sp, #20]
 8015d36:	e7c4      	b.n	8015cc2 <_vfiprintf_r+0x156>
 8015d38:	fb0c 2101 	mla	r1, ip, r1, r2
 8015d3c:	4604      	mov	r4, r0
 8015d3e:	2301      	movs	r3, #1
 8015d40:	e7f0      	b.n	8015d24 <_vfiprintf_r+0x1b8>
 8015d42:	ab03      	add	r3, sp, #12
 8015d44:	9300      	str	r3, [sp, #0]
 8015d46:	462a      	mov	r2, r5
 8015d48:	4b12      	ldr	r3, [pc, #72]	@ (8015d94 <_vfiprintf_r+0x228>)
 8015d4a:	a904      	add	r1, sp, #16
 8015d4c:	4630      	mov	r0, r6
 8015d4e:	f3af 8000 	nop.w
 8015d52:	4607      	mov	r7, r0
 8015d54:	1c78      	adds	r0, r7, #1
 8015d56:	d1d6      	bne.n	8015d06 <_vfiprintf_r+0x19a>
 8015d58:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8015d5a:	07d9      	lsls	r1, r3, #31
 8015d5c:	d405      	bmi.n	8015d6a <_vfiprintf_r+0x1fe>
 8015d5e:	89ab      	ldrh	r3, [r5, #12]
 8015d60:	059a      	lsls	r2, r3, #22
 8015d62:	d402      	bmi.n	8015d6a <_vfiprintf_r+0x1fe>
 8015d64:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8015d66:	f7ff fceb 	bl	8015740 <__retarget_lock_release_recursive>
 8015d6a:	89ab      	ldrh	r3, [r5, #12]
 8015d6c:	065b      	lsls	r3, r3, #25
 8015d6e:	f53f af1f 	bmi.w	8015bb0 <_vfiprintf_r+0x44>
 8015d72:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8015d74:	e71e      	b.n	8015bb4 <_vfiprintf_r+0x48>
 8015d76:	ab03      	add	r3, sp, #12
 8015d78:	9300      	str	r3, [sp, #0]
 8015d7a:	462a      	mov	r2, r5
 8015d7c:	4b05      	ldr	r3, [pc, #20]	@ (8015d94 <_vfiprintf_r+0x228>)
 8015d7e:	a904      	add	r1, sp, #16
 8015d80:	4630      	mov	r0, r6
 8015d82:	f000 f879 	bl	8015e78 <_printf_i>
 8015d86:	e7e4      	b.n	8015d52 <_vfiprintf_r+0x1e6>
 8015d88:	08017260 	.word	0x08017260
 8015d8c:	0801726a 	.word	0x0801726a
 8015d90:	00000000 	.word	0x00000000
 8015d94:	08015b47 	.word	0x08015b47
 8015d98:	08017266 	.word	0x08017266

08015d9c <_printf_common>:
 8015d9c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8015da0:	4616      	mov	r6, r2
 8015da2:	4698      	mov	r8, r3
 8015da4:	688a      	ldr	r2, [r1, #8]
 8015da6:	690b      	ldr	r3, [r1, #16]
 8015da8:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8015dac:	4293      	cmp	r3, r2
 8015dae:	bfb8      	it	lt
 8015db0:	4613      	movlt	r3, r2
 8015db2:	6033      	str	r3, [r6, #0]
 8015db4:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8015db8:	4607      	mov	r7, r0
 8015dba:	460c      	mov	r4, r1
 8015dbc:	b10a      	cbz	r2, 8015dc2 <_printf_common+0x26>
 8015dbe:	3301      	adds	r3, #1
 8015dc0:	6033      	str	r3, [r6, #0]
 8015dc2:	6823      	ldr	r3, [r4, #0]
 8015dc4:	0699      	lsls	r1, r3, #26
 8015dc6:	bf42      	ittt	mi
 8015dc8:	6833      	ldrmi	r3, [r6, #0]
 8015dca:	3302      	addmi	r3, #2
 8015dcc:	6033      	strmi	r3, [r6, #0]
 8015dce:	6825      	ldr	r5, [r4, #0]
 8015dd0:	f015 0506 	ands.w	r5, r5, #6
 8015dd4:	d106      	bne.n	8015de4 <_printf_common+0x48>
 8015dd6:	f104 0a19 	add.w	sl, r4, #25
 8015dda:	68e3      	ldr	r3, [r4, #12]
 8015ddc:	6832      	ldr	r2, [r6, #0]
 8015dde:	1a9b      	subs	r3, r3, r2
 8015de0:	42ab      	cmp	r3, r5
 8015de2:	dc26      	bgt.n	8015e32 <_printf_common+0x96>
 8015de4:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8015de8:	6822      	ldr	r2, [r4, #0]
 8015dea:	3b00      	subs	r3, #0
 8015dec:	bf18      	it	ne
 8015dee:	2301      	movne	r3, #1
 8015df0:	0692      	lsls	r2, r2, #26
 8015df2:	d42b      	bmi.n	8015e4c <_printf_common+0xb0>
 8015df4:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8015df8:	4641      	mov	r1, r8
 8015dfa:	4638      	mov	r0, r7
 8015dfc:	47c8      	blx	r9
 8015dfe:	3001      	adds	r0, #1
 8015e00:	d01e      	beq.n	8015e40 <_printf_common+0xa4>
 8015e02:	6823      	ldr	r3, [r4, #0]
 8015e04:	6922      	ldr	r2, [r4, #16]
 8015e06:	f003 0306 	and.w	r3, r3, #6
 8015e0a:	2b04      	cmp	r3, #4
 8015e0c:	bf02      	ittt	eq
 8015e0e:	68e5      	ldreq	r5, [r4, #12]
 8015e10:	6833      	ldreq	r3, [r6, #0]
 8015e12:	1aed      	subeq	r5, r5, r3
 8015e14:	68a3      	ldr	r3, [r4, #8]
 8015e16:	bf0c      	ite	eq
 8015e18:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8015e1c:	2500      	movne	r5, #0
 8015e1e:	4293      	cmp	r3, r2
 8015e20:	bfc4      	itt	gt
 8015e22:	1a9b      	subgt	r3, r3, r2
 8015e24:	18ed      	addgt	r5, r5, r3
 8015e26:	2600      	movs	r6, #0
 8015e28:	341a      	adds	r4, #26
 8015e2a:	42b5      	cmp	r5, r6
 8015e2c:	d11a      	bne.n	8015e64 <_printf_common+0xc8>
 8015e2e:	2000      	movs	r0, #0
 8015e30:	e008      	b.n	8015e44 <_printf_common+0xa8>
 8015e32:	2301      	movs	r3, #1
 8015e34:	4652      	mov	r2, sl
 8015e36:	4641      	mov	r1, r8
 8015e38:	4638      	mov	r0, r7
 8015e3a:	47c8      	blx	r9
 8015e3c:	3001      	adds	r0, #1
 8015e3e:	d103      	bne.n	8015e48 <_printf_common+0xac>
 8015e40:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8015e44:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8015e48:	3501      	adds	r5, #1
 8015e4a:	e7c6      	b.n	8015dda <_printf_common+0x3e>
 8015e4c:	18e1      	adds	r1, r4, r3
 8015e4e:	1c5a      	adds	r2, r3, #1
 8015e50:	2030      	movs	r0, #48	@ 0x30
 8015e52:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8015e56:	4422      	add	r2, r4
 8015e58:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8015e5c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8015e60:	3302      	adds	r3, #2
 8015e62:	e7c7      	b.n	8015df4 <_printf_common+0x58>
 8015e64:	2301      	movs	r3, #1
 8015e66:	4622      	mov	r2, r4
 8015e68:	4641      	mov	r1, r8
 8015e6a:	4638      	mov	r0, r7
 8015e6c:	47c8      	blx	r9
 8015e6e:	3001      	adds	r0, #1
 8015e70:	d0e6      	beq.n	8015e40 <_printf_common+0xa4>
 8015e72:	3601      	adds	r6, #1
 8015e74:	e7d9      	b.n	8015e2a <_printf_common+0x8e>
	...

08015e78 <_printf_i>:
 8015e78:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8015e7c:	7e0f      	ldrb	r7, [r1, #24]
 8015e7e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8015e80:	2f78      	cmp	r7, #120	@ 0x78
 8015e82:	4691      	mov	r9, r2
 8015e84:	4680      	mov	r8, r0
 8015e86:	460c      	mov	r4, r1
 8015e88:	469a      	mov	sl, r3
 8015e8a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8015e8e:	d807      	bhi.n	8015ea0 <_printf_i+0x28>
 8015e90:	2f62      	cmp	r7, #98	@ 0x62
 8015e92:	d80a      	bhi.n	8015eaa <_printf_i+0x32>
 8015e94:	2f00      	cmp	r7, #0
 8015e96:	f000 80d2 	beq.w	801603e <_printf_i+0x1c6>
 8015e9a:	2f58      	cmp	r7, #88	@ 0x58
 8015e9c:	f000 80b9 	beq.w	8016012 <_printf_i+0x19a>
 8015ea0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8015ea4:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8015ea8:	e03a      	b.n	8015f20 <_printf_i+0xa8>
 8015eaa:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8015eae:	2b15      	cmp	r3, #21
 8015eb0:	d8f6      	bhi.n	8015ea0 <_printf_i+0x28>
 8015eb2:	a101      	add	r1, pc, #4	@ (adr r1, 8015eb8 <_printf_i+0x40>)
 8015eb4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8015eb8:	08015f11 	.word	0x08015f11
 8015ebc:	08015f25 	.word	0x08015f25
 8015ec0:	08015ea1 	.word	0x08015ea1
 8015ec4:	08015ea1 	.word	0x08015ea1
 8015ec8:	08015ea1 	.word	0x08015ea1
 8015ecc:	08015ea1 	.word	0x08015ea1
 8015ed0:	08015f25 	.word	0x08015f25
 8015ed4:	08015ea1 	.word	0x08015ea1
 8015ed8:	08015ea1 	.word	0x08015ea1
 8015edc:	08015ea1 	.word	0x08015ea1
 8015ee0:	08015ea1 	.word	0x08015ea1
 8015ee4:	08016025 	.word	0x08016025
 8015ee8:	08015f4f 	.word	0x08015f4f
 8015eec:	08015fdf 	.word	0x08015fdf
 8015ef0:	08015ea1 	.word	0x08015ea1
 8015ef4:	08015ea1 	.word	0x08015ea1
 8015ef8:	08016047 	.word	0x08016047
 8015efc:	08015ea1 	.word	0x08015ea1
 8015f00:	08015f4f 	.word	0x08015f4f
 8015f04:	08015ea1 	.word	0x08015ea1
 8015f08:	08015ea1 	.word	0x08015ea1
 8015f0c:	08015fe7 	.word	0x08015fe7
 8015f10:	6833      	ldr	r3, [r6, #0]
 8015f12:	1d1a      	adds	r2, r3, #4
 8015f14:	681b      	ldr	r3, [r3, #0]
 8015f16:	6032      	str	r2, [r6, #0]
 8015f18:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8015f1c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8015f20:	2301      	movs	r3, #1
 8015f22:	e09d      	b.n	8016060 <_printf_i+0x1e8>
 8015f24:	6833      	ldr	r3, [r6, #0]
 8015f26:	6820      	ldr	r0, [r4, #0]
 8015f28:	1d19      	adds	r1, r3, #4
 8015f2a:	6031      	str	r1, [r6, #0]
 8015f2c:	0606      	lsls	r6, r0, #24
 8015f2e:	d501      	bpl.n	8015f34 <_printf_i+0xbc>
 8015f30:	681d      	ldr	r5, [r3, #0]
 8015f32:	e003      	b.n	8015f3c <_printf_i+0xc4>
 8015f34:	0645      	lsls	r5, r0, #25
 8015f36:	d5fb      	bpl.n	8015f30 <_printf_i+0xb8>
 8015f38:	f9b3 5000 	ldrsh.w	r5, [r3]
 8015f3c:	2d00      	cmp	r5, #0
 8015f3e:	da03      	bge.n	8015f48 <_printf_i+0xd0>
 8015f40:	232d      	movs	r3, #45	@ 0x2d
 8015f42:	426d      	negs	r5, r5
 8015f44:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8015f48:	4859      	ldr	r0, [pc, #356]	@ (80160b0 <_printf_i+0x238>)
 8015f4a:	230a      	movs	r3, #10
 8015f4c:	e011      	b.n	8015f72 <_printf_i+0xfa>
 8015f4e:	6821      	ldr	r1, [r4, #0]
 8015f50:	6833      	ldr	r3, [r6, #0]
 8015f52:	0608      	lsls	r0, r1, #24
 8015f54:	f853 5b04 	ldr.w	r5, [r3], #4
 8015f58:	d402      	bmi.n	8015f60 <_printf_i+0xe8>
 8015f5a:	0649      	lsls	r1, r1, #25
 8015f5c:	bf48      	it	mi
 8015f5e:	b2ad      	uxthmi	r5, r5
 8015f60:	2f6f      	cmp	r7, #111	@ 0x6f
 8015f62:	4853      	ldr	r0, [pc, #332]	@ (80160b0 <_printf_i+0x238>)
 8015f64:	6033      	str	r3, [r6, #0]
 8015f66:	bf14      	ite	ne
 8015f68:	230a      	movne	r3, #10
 8015f6a:	2308      	moveq	r3, #8
 8015f6c:	2100      	movs	r1, #0
 8015f6e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8015f72:	6866      	ldr	r6, [r4, #4]
 8015f74:	60a6      	str	r6, [r4, #8]
 8015f76:	2e00      	cmp	r6, #0
 8015f78:	bfa2      	ittt	ge
 8015f7a:	6821      	ldrge	r1, [r4, #0]
 8015f7c:	f021 0104 	bicge.w	r1, r1, #4
 8015f80:	6021      	strge	r1, [r4, #0]
 8015f82:	b90d      	cbnz	r5, 8015f88 <_printf_i+0x110>
 8015f84:	2e00      	cmp	r6, #0
 8015f86:	d04b      	beq.n	8016020 <_printf_i+0x1a8>
 8015f88:	4616      	mov	r6, r2
 8015f8a:	fbb5 f1f3 	udiv	r1, r5, r3
 8015f8e:	fb03 5711 	mls	r7, r3, r1, r5
 8015f92:	5dc7      	ldrb	r7, [r0, r7]
 8015f94:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8015f98:	462f      	mov	r7, r5
 8015f9a:	42bb      	cmp	r3, r7
 8015f9c:	460d      	mov	r5, r1
 8015f9e:	d9f4      	bls.n	8015f8a <_printf_i+0x112>
 8015fa0:	2b08      	cmp	r3, #8
 8015fa2:	d10b      	bne.n	8015fbc <_printf_i+0x144>
 8015fa4:	6823      	ldr	r3, [r4, #0]
 8015fa6:	07df      	lsls	r7, r3, #31
 8015fa8:	d508      	bpl.n	8015fbc <_printf_i+0x144>
 8015faa:	6923      	ldr	r3, [r4, #16]
 8015fac:	6861      	ldr	r1, [r4, #4]
 8015fae:	4299      	cmp	r1, r3
 8015fb0:	bfde      	ittt	le
 8015fb2:	2330      	movle	r3, #48	@ 0x30
 8015fb4:	f806 3c01 	strble.w	r3, [r6, #-1]
 8015fb8:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 8015fbc:	1b92      	subs	r2, r2, r6
 8015fbe:	6122      	str	r2, [r4, #16]
 8015fc0:	f8cd a000 	str.w	sl, [sp]
 8015fc4:	464b      	mov	r3, r9
 8015fc6:	aa03      	add	r2, sp, #12
 8015fc8:	4621      	mov	r1, r4
 8015fca:	4640      	mov	r0, r8
 8015fcc:	f7ff fee6 	bl	8015d9c <_printf_common>
 8015fd0:	3001      	adds	r0, #1
 8015fd2:	d14a      	bne.n	801606a <_printf_i+0x1f2>
 8015fd4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8015fd8:	b004      	add	sp, #16
 8015fda:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8015fde:	6823      	ldr	r3, [r4, #0]
 8015fe0:	f043 0320 	orr.w	r3, r3, #32
 8015fe4:	6023      	str	r3, [r4, #0]
 8015fe6:	4833      	ldr	r0, [pc, #204]	@ (80160b4 <_printf_i+0x23c>)
 8015fe8:	2778      	movs	r7, #120	@ 0x78
 8015fea:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8015fee:	6823      	ldr	r3, [r4, #0]
 8015ff0:	6831      	ldr	r1, [r6, #0]
 8015ff2:	061f      	lsls	r7, r3, #24
 8015ff4:	f851 5b04 	ldr.w	r5, [r1], #4
 8015ff8:	d402      	bmi.n	8016000 <_printf_i+0x188>
 8015ffa:	065f      	lsls	r7, r3, #25
 8015ffc:	bf48      	it	mi
 8015ffe:	b2ad      	uxthmi	r5, r5
 8016000:	6031      	str	r1, [r6, #0]
 8016002:	07d9      	lsls	r1, r3, #31
 8016004:	bf44      	itt	mi
 8016006:	f043 0320 	orrmi.w	r3, r3, #32
 801600a:	6023      	strmi	r3, [r4, #0]
 801600c:	b11d      	cbz	r5, 8016016 <_printf_i+0x19e>
 801600e:	2310      	movs	r3, #16
 8016010:	e7ac      	b.n	8015f6c <_printf_i+0xf4>
 8016012:	4827      	ldr	r0, [pc, #156]	@ (80160b0 <_printf_i+0x238>)
 8016014:	e7e9      	b.n	8015fea <_printf_i+0x172>
 8016016:	6823      	ldr	r3, [r4, #0]
 8016018:	f023 0320 	bic.w	r3, r3, #32
 801601c:	6023      	str	r3, [r4, #0]
 801601e:	e7f6      	b.n	801600e <_printf_i+0x196>
 8016020:	4616      	mov	r6, r2
 8016022:	e7bd      	b.n	8015fa0 <_printf_i+0x128>
 8016024:	6833      	ldr	r3, [r6, #0]
 8016026:	6825      	ldr	r5, [r4, #0]
 8016028:	6961      	ldr	r1, [r4, #20]
 801602a:	1d18      	adds	r0, r3, #4
 801602c:	6030      	str	r0, [r6, #0]
 801602e:	062e      	lsls	r6, r5, #24
 8016030:	681b      	ldr	r3, [r3, #0]
 8016032:	d501      	bpl.n	8016038 <_printf_i+0x1c0>
 8016034:	6019      	str	r1, [r3, #0]
 8016036:	e002      	b.n	801603e <_printf_i+0x1c6>
 8016038:	0668      	lsls	r0, r5, #25
 801603a:	d5fb      	bpl.n	8016034 <_printf_i+0x1bc>
 801603c:	8019      	strh	r1, [r3, #0]
 801603e:	2300      	movs	r3, #0
 8016040:	6123      	str	r3, [r4, #16]
 8016042:	4616      	mov	r6, r2
 8016044:	e7bc      	b.n	8015fc0 <_printf_i+0x148>
 8016046:	6833      	ldr	r3, [r6, #0]
 8016048:	1d1a      	adds	r2, r3, #4
 801604a:	6032      	str	r2, [r6, #0]
 801604c:	681e      	ldr	r6, [r3, #0]
 801604e:	6862      	ldr	r2, [r4, #4]
 8016050:	2100      	movs	r1, #0
 8016052:	4630      	mov	r0, r6
 8016054:	f7ea f8dc 	bl	8000210 <memchr>
 8016058:	b108      	cbz	r0, 801605e <_printf_i+0x1e6>
 801605a:	1b80      	subs	r0, r0, r6
 801605c:	6060      	str	r0, [r4, #4]
 801605e:	6863      	ldr	r3, [r4, #4]
 8016060:	6123      	str	r3, [r4, #16]
 8016062:	2300      	movs	r3, #0
 8016064:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8016068:	e7aa      	b.n	8015fc0 <_printf_i+0x148>
 801606a:	6923      	ldr	r3, [r4, #16]
 801606c:	4632      	mov	r2, r6
 801606e:	4649      	mov	r1, r9
 8016070:	4640      	mov	r0, r8
 8016072:	47d0      	blx	sl
 8016074:	3001      	adds	r0, #1
 8016076:	d0ad      	beq.n	8015fd4 <_printf_i+0x15c>
 8016078:	6823      	ldr	r3, [r4, #0]
 801607a:	079b      	lsls	r3, r3, #30
 801607c:	d413      	bmi.n	80160a6 <_printf_i+0x22e>
 801607e:	68e0      	ldr	r0, [r4, #12]
 8016080:	9b03      	ldr	r3, [sp, #12]
 8016082:	4298      	cmp	r0, r3
 8016084:	bfb8      	it	lt
 8016086:	4618      	movlt	r0, r3
 8016088:	e7a6      	b.n	8015fd8 <_printf_i+0x160>
 801608a:	2301      	movs	r3, #1
 801608c:	4632      	mov	r2, r6
 801608e:	4649      	mov	r1, r9
 8016090:	4640      	mov	r0, r8
 8016092:	47d0      	blx	sl
 8016094:	3001      	adds	r0, #1
 8016096:	d09d      	beq.n	8015fd4 <_printf_i+0x15c>
 8016098:	3501      	adds	r5, #1
 801609a:	68e3      	ldr	r3, [r4, #12]
 801609c:	9903      	ldr	r1, [sp, #12]
 801609e:	1a5b      	subs	r3, r3, r1
 80160a0:	42ab      	cmp	r3, r5
 80160a2:	dcf2      	bgt.n	801608a <_printf_i+0x212>
 80160a4:	e7eb      	b.n	801607e <_printf_i+0x206>
 80160a6:	2500      	movs	r5, #0
 80160a8:	f104 0619 	add.w	r6, r4, #25
 80160ac:	e7f5      	b.n	801609a <_printf_i+0x222>
 80160ae:	bf00      	nop
 80160b0:	08017271 	.word	0x08017271
 80160b4:	08017282 	.word	0x08017282

080160b8 <__sflush_r>:
 80160b8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80160bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80160c0:	0716      	lsls	r6, r2, #28
 80160c2:	4605      	mov	r5, r0
 80160c4:	460c      	mov	r4, r1
 80160c6:	d454      	bmi.n	8016172 <__sflush_r+0xba>
 80160c8:	684b      	ldr	r3, [r1, #4]
 80160ca:	2b00      	cmp	r3, #0
 80160cc:	dc02      	bgt.n	80160d4 <__sflush_r+0x1c>
 80160ce:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 80160d0:	2b00      	cmp	r3, #0
 80160d2:	dd48      	ble.n	8016166 <__sflush_r+0xae>
 80160d4:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80160d6:	2e00      	cmp	r6, #0
 80160d8:	d045      	beq.n	8016166 <__sflush_r+0xae>
 80160da:	2300      	movs	r3, #0
 80160dc:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 80160e0:	682f      	ldr	r7, [r5, #0]
 80160e2:	6a21      	ldr	r1, [r4, #32]
 80160e4:	602b      	str	r3, [r5, #0]
 80160e6:	d030      	beq.n	801614a <__sflush_r+0x92>
 80160e8:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80160ea:	89a3      	ldrh	r3, [r4, #12]
 80160ec:	0759      	lsls	r1, r3, #29
 80160ee:	d505      	bpl.n	80160fc <__sflush_r+0x44>
 80160f0:	6863      	ldr	r3, [r4, #4]
 80160f2:	1ad2      	subs	r2, r2, r3
 80160f4:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80160f6:	b10b      	cbz	r3, 80160fc <__sflush_r+0x44>
 80160f8:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80160fa:	1ad2      	subs	r2, r2, r3
 80160fc:	2300      	movs	r3, #0
 80160fe:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8016100:	6a21      	ldr	r1, [r4, #32]
 8016102:	4628      	mov	r0, r5
 8016104:	47b0      	blx	r6
 8016106:	1c43      	adds	r3, r0, #1
 8016108:	89a3      	ldrh	r3, [r4, #12]
 801610a:	d106      	bne.n	801611a <__sflush_r+0x62>
 801610c:	6829      	ldr	r1, [r5, #0]
 801610e:	291d      	cmp	r1, #29
 8016110:	d82b      	bhi.n	801616a <__sflush_r+0xb2>
 8016112:	4a2a      	ldr	r2, [pc, #168]	@ (80161bc <__sflush_r+0x104>)
 8016114:	410a      	asrs	r2, r1
 8016116:	07d6      	lsls	r6, r2, #31
 8016118:	d427      	bmi.n	801616a <__sflush_r+0xb2>
 801611a:	2200      	movs	r2, #0
 801611c:	6062      	str	r2, [r4, #4]
 801611e:	04d9      	lsls	r1, r3, #19
 8016120:	6922      	ldr	r2, [r4, #16]
 8016122:	6022      	str	r2, [r4, #0]
 8016124:	d504      	bpl.n	8016130 <__sflush_r+0x78>
 8016126:	1c42      	adds	r2, r0, #1
 8016128:	d101      	bne.n	801612e <__sflush_r+0x76>
 801612a:	682b      	ldr	r3, [r5, #0]
 801612c:	b903      	cbnz	r3, 8016130 <__sflush_r+0x78>
 801612e:	6560      	str	r0, [r4, #84]	@ 0x54
 8016130:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8016132:	602f      	str	r7, [r5, #0]
 8016134:	b1b9      	cbz	r1, 8016166 <__sflush_r+0xae>
 8016136:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 801613a:	4299      	cmp	r1, r3
 801613c:	d002      	beq.n	8016144 <__sflush_r+0x8c>
 801613e:	4628      	mov	r0, r5
 8016140:	f7ff fb40 	bl	80157c4 <_free_r>
 8016144:	2300      	movs	r3, #0
 8016146:	6363      	str	r3, [r4, #52]	@ 0x34
 8016148:	e00d      	b.n	8016166 <__sflush_r+0xae>
 801614a:	2301      	movs	r3, #1
 801614c:	4628      	mov	r0, r5
 801614e:	47b0      	blx	r6
 8016150:	4602      	mov	r2, r0
 8016152:	1c50      	adds	r0, r2, #1
 8016154:	d1c9      	bne.n	80160ea <__sflush_r+0x32>
 8016156:	682b      	ldr	r3, [r5, #0]
 8016158:	2b00      	cmp	r3, #0
 801615a:	d0c6      	beq.n	80160ea <__sflush_r+0x32>
 801615c:	2b1d      	cmp	r3, #29
 801615e:	d001      	beq.n	8016164 <__sflush_r+0xac>
 8016160:	2b16      	cmp	r3, #22
 8016162:	d11e      	bne.n	80161a2 <__sflush_r+0xea>
 8016164:	602f      	str	r7, [r5, #0]
 8016166:	2000      	movs	r0, #0
 8016168:	e022      	b.n	80161b0 <__sflush_r+0xf8>
 801616a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801616e:	b21b      	sxth	r3, r3
 8016170:	e01b      	b.n	80161aa <__sflush_r+0xf2>
 8016172:	690f      	ldr	r7, [r1, #16]
 8016174:	2f00      	cmp	r7, #0
 8016176:	d0f6      	beq.n	8016166 <__sflush_r+0xae>
 8016178:	0793      	lsls	r3, r2, #30
 801617a:	680e      	ldr	r6, [r1, #0]
 801617c:	bf08      	it	eq
 801617e:	694b      	ldreq	r3, [r1, #20]
 8016180:	600f      	str	r7, [r1, #0]
 8016182:	bf18      	it	ne
 8016184:	2300      	movne	r3, #0
 8016186:	eba6 0807 	sub.w	r8, r6, r7
 801618a:	608b      	str	r3, [r1, #8]
 801618c:	f1b8 0f00 	cmp.w	r8, #0
 8016190:	dde9      	ble.n	8016166 <__sflush_r+0xae>
 8016192:	6a21      	ldr	r1, [r4, #32]
 8016194:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8016196:	4643      	mov	r3, r8
 8016198:	463a      	mov	r2, r7
 801619a:	4628      	mov	r0, r5
 801619c:	47b0      	blx	r6
 801619e:	2800      	cmp	r0, #0
 80161a0:	dc08      	bgt.n	80161b4 <__sflush_r+0xfc>
 80161a2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80161a6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80161aa:	81a3      	strh	r3, [r4, #12]
 80161ac:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80161b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80161b4:	4407      	add	r7, r0
 80161b6:	eba8 0800 	sub.w	r8, r8, r0
 80161ba:	e7e7      	b.n	801618c <__sflush_r+0xd4>
 80161bc:	dfbffffe 	.word	0xdfbffffe

080161c0 <_fflush_r>:
 80161c0:	b538      	push	{r3, r4, r5, lr}
 80161c2:	690b      	ldr	r3, [r1, #16]
 80161c4:	4605      	mov	r5, r0
 80161c6:	460c      	mov	r4, r1
 80161c8:	b913      	cbnz	r3, 80161d0 <_fflush_r+0x10>
 80161ca:	2500      	movs	r5, #0
 80161cc:	4628      	mov	r0, r5
 80161ce:	bd38      	pop	{r3, r4, r5, pc}
 80161d0:	b118      	cbz	r0, 80161da <_fflush_r+0x1a>
 80161d2:	6a03      	ldr	r3, [r0, #32]
 80161d4:	b90b      	cbnz	r3, 80161da <_fflush_r+0x1a>
 80161d6:	f7ff f8d1 	bl	801537c <__sinit>
 80161da:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80161de:	2b00      	cmp	r3, #0
 80161e0:	d0f3      	beq.n	80161ca <_fflush_r+0xa>
 80161e2:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80161e4:	07d0      	lsls	r0, r2, #31
 80161e6:	d404      	bmi.n	80161f2 <_fflush_r+0x32>
 80161e8:	0599      	lsls	r1, r3, #22
 80161ea:	d402      	bmi.n	80161f2 <_fflush_r+0x32>
 80161ec:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80161ee:	f7ff faa6 	bl	801573e <__retarget_lock_acquire_recursive>
 80161f2:	4628      	mov	r0, r5
 80161f4:	4621      	mov	r1, r4
 80161f6:	f7ff ff5f 	bl	80160b8 <__sflush_r>
 80161fa:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80161fc:	07da      	lsls	r2, r3, #31
 80161fe:	4605      	mov	r5, r0
 8016200:	d4e4      	bmi.n	80161cc <_fflush_r+0xc>
 8016202:	89a3      	ldrh	r3, [r4, #12]
 8016204:	059b      	lsls	r3, r3, #22
 8016206:	d4e1      	bmi.n	80161cc <_fflush_r+0xc>
 8016208:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801620a:	f7ff fa99 	bl	8015740 <__retarget_lock_release_recursive>
 801620e:	e7dd      	b.n	80161cc <_fflush_r+0xc>

08016210 <fiprintf>:
 8016210:	b40e      	push	{r1, r2, r3}
 8016212:	b503      	push	{r0, r1, lr}
 8016214:	4601      	mov	r1, r0
 8016216:	ab03      	add	r3, sp, #12
 8016218:	4805      	ldr	r0, [pc, #20]	@ (8016230 <fiprintf+0x20>)
 801621a:	f853 2b04 	ldr.w	r2, [r3], #4
 801621e:	6800      	ldr	r0, [r0, #0]
 8016220:	9301      	str	r3, [sp, #4]
 8016222:	f7ff fca3 	bl	8015b6c <_vfiprintf_r>
 8016226:	b002      	add	sp, #8
 8016228:	f85d eb04 	ldr.w	lr, [sp], #4
 801622c:	b003      	add	sp, #12
 801622e:	4770      	bx	lr
 8016230:	200000c0 	.word	0x200000c0

08016234 <__swbuf_r>:
 8016234:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8016236:	460e      	mov	r6, r1
 8016238:	4614      	mov	r4, r2
 801623a:	4605      	mov	r5, r0
 801623c:	b118      	cbz	r0, 8016246 <__swbuf_r+0x12>
 801623e:	6a03      	ldr	r3, [r0, #32]
 8016240:	b90b      	cbnz	r3, 8016246 <__swbuf_r+0x12>
 8016242:	f7ff f89b 	bl	801537c <__sinit>
 8016246:	69a3      	ldr	r3, [r4, #24]
 8016248:	60a3      	str	r3, [r4, #8]
 801624a:	89a3      	ldrh	r3, [r4, #12]
 801624c:	071a      	lsls	r2, r3, #28
 801624e:	d501      	bpl.n	8016254 <__swbuf_r+0x20>
 8016250:	6923      	ldr	r3, [r4, #16]
 8016252:	b943      	cbnz	r3, 8016266 <__swbuf_r+0x32>
 8016254:	4621      	mov	r1, r4
 8016256:	4628      	mov	r0, r5
 8016258:	f000 f82a 	bl	80162b0 <__swsetup_r>
 801625c:	b118      	cbz	r0, 8016266 <__swbuf_r+0x32>
 801625e:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 8016262:	4638      	mov	r0, r7
 8016264:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8016266:	6823      	ldr	r3, [r4, #0]
 8016268:	6922      	ldr	r2, [r4, #16]
 801626a:	1a98      	subs	r0, r3, r2
 801626c:	6963      	ldr	r3, [r4, #20]
 801626e:	b2f6      	uxtb	r6, r6
 8016270:	4283      	cmp	r3, r0
 8016272:	4637      	mov	r7, r6
 8016274:	dc05      	bgt.n	8016282 <__swbuf_r+0x4e>
 8016276:	4621      	mov	r1, r4
 8016278:	4628      	mov	r0, r5
 801627a:	f7ff ffa1 	bl	80161c0 <_fflush_r>
 801627e:	2800      	cmp	r0, #0
 8016280:	d1ed      	bne.n	801625e <__swbuf_r+0x2a>
 8016282:	68a3      	ldr	r3, [r4, #8]
 8016284:	3b01      	subs	r3, #1
 8016286:	60a3      	str	r3, [r4, #8]
 8016288:	6823      	ldr	r3, [r4, #0]
 801628a:	1c5a      	adds	r2, r3, #1
 801628c:	6022      	str	r2, [r4, #0]
 801628e:	701e      	strb	r6, [r3, #0]
 8016290:	6962      	ldr	r2, [r4, #20]
 8016292:	1c43      	adds	r3, r0, #1
 8016294:	429a      	cmp	r2, r3
 8016296:	d004      	beq.n	80162a2 <__swbuf_r+0x6e>
 8016298:	89a3      	ldrh	r3, [r4, #12]
 801629a:	07db      	lsls	r3, r3, #31
 801629c:	d5e1      	bpl.n	8016262 <__swbuf_r+0x2e>
 801629e:	2e0a      	cmp	r6, #10
 80162a0:	d1df      	bne.n	8016262 <__swbuf_r+0x2e>
 80162a2:	4621      	mov	r1, r4
 80162a4:	4628      	mov	r0, r5
 80162a6:	f7ff ff8b 	bl	80161c0 <_fflush_r>
 80162aa:	2800      	cmp	r0, #0
 80162ac:	d0d9      	beq.n	8016262 <__swbuf_r+0x2e>
 80162ae:	e7d6      	b.n	801625e <__swbuf_r+0x2a>

080162b0 <__swsetup_r>:
 80162b0:	b538      	push	{r3, r4, r5, lr}
 80162b2:	4b29      	ldr	r3, [pc, #164]	@ (8016358 <__swsetup_r+0xa8>)
 80162b4:	4605      	mov	r5, r0
 80162b6:	6818      	ldr	r0, [r3, #0]
 80162b8:	460c      	mov	r4, r1
 80162ba:	b118      	cbz	r0, 80162c4 <__swsetup_r+0x14>
 80162bc:	6a03      	ldr	r3, [r0, #32]
 80162be:	b90b      	cbnz	r3, 80162c4 <__swsetup_r+0x14>
 80162c0:	f7ff f85c 	bl	801537c <__sinit>
 80162c4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80162c8:	0719      	lsls	r1, r3, #28
 80162ca:	d422      	bmi.n	8016312 <__swsetup_r+0x62>
 80162cc:	06da      	lsls	r2, r3, #27
 80162ce:	d407      	bmi.n	80162e0 <__swsetup_r+0x30>
 80162d0:	2209      	movs	r2, #9
 80162d2:	602a      	str	r2, [r5, #0]
 80162d4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80162d8:	81a3      	strh	r3, [r4, #12]
 80162da:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80162de:	e033      	b.n	8016348 <__swsetup_r+0x98>
 80162e0:	0758      	lsls	r0, r3, #29
 80162e2:	d512      	bpl.n	801630a <__swsetup_r+0x5a>
 80162e4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80162e6:	b141      	cbz	r1, 80162fa <__swsetup_r+0x4a>
 80162e8:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80162ec:	4299      	cmp	r1, r3
 80162ee:	d002      	beq.n	80162f6 <__swsetup_r+0x46>
 80162f0:	4628      	mov	r0, r5
 80162f2:	f7ff fa67 	bl	80157c4 <_free_r>
 80162f6:	2300      	movs	r3, #0
 80162f8:	6363      	str	r3, [r4, #52]	@ 0x34
 80162fa:	89a3      	ldrh	r3, [r4, #12]
 80162fc:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8016300:	81a3      	strh	r3, [r4, #12]
 8016302:	2300      	movs	r3, #0
 8016304:	6063      	str	r3, [r4, #4]
 8016306:	6923      	ldr	r3, [r4, #16]
 8016308:	6023      	str	r3, [r4, #0]
 801630a:	89a3      	ldrh	r3, [r4, #12]
 801630c:	f043 0308 	orr.w	r3, r3, #8
 8016310:	81a3      	strh	r3, [r4, #12]
 8016312:	6923      	ldr	r3, [r4, #16]
 8016314:	b94b      	cbnz	r3, 801632a <__swsetup_r+0x7a>
 8016316:	89a3      	ldrh	r3, [r4, #12]
 8016318:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 801631c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8016320:	d003      	beq.n	801632a <__swsetup_r+0x7a>
 8016322:	4621      	mov	r1, r4
 8016324:	4628      	mov	r0, r5
 8016326:	f000 f846 	bl	80163b6 <__smakebuf_r>
 801632a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801632e:	f013 0201 	ands.w	r2, r3, #1
 8016332:	d00a      	beq.n	801634a <__swsetup_r+0x9a>
 8016334:	2200      	movs	r2, #0
 8016336:	60a2      	str	r2, [r4, #8]
 8016338:	6962      	ldr	r2, [r4, #20]
 801633a:	4252      	negs	r2, r2
 801633c:	61a2      	str	r2, [r4, #24]
 801633e:	6922      	ldr	r2, [r4, #16]
 8016340:	b942      	cbnz	r2, 8016354 <__swsetup_r+0xa4>
 8016342:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8016346:	d1c5      	bne.n	80162d4 <__swsetup_r+0x24>
 8016348:	bd38      	pop	{r3, r4, r5, pc}
 801634a:	0799      	lsls	r1, r3, #30
 801634c:	bf58      	it	pl
 801634e:	6962      	ldrpl	r2, [r4, #20]
 8016350:	60a2      	str	r2, [r4, #8]
 8016352:	e7f4      	b.n	801633e <__swsetup_r+0x8e>
 8016354:	2000      	movs	r0, #0
 8016356:	e7f7      	b.n	8016348 <__swsetup_r+0x98>
 8016358:	200000c0 	.word	0x200000c0

0801635c <abort>:
 801635c:	b508      	push	{r3, lr}
 801635e:	2006      	movs	r0, #6
 8016360:	f000 f88e 	bl	8016480 <raise>
 8016364:	2001      	movs	r0, #1
 8016366:	f7ec f911 	bl	800258c <_exit>

0801636a <__swhatbuf_r>:
 801636a:	b570      	push	{r4, r5, r6, lr}
 801636c:	460c      	mov	r4, r1
 801636e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8016372:	2900      	cmp	r1, #0
 8016374:	b096      	sub	sp, #88	@ 0x58
 8016376:	4615      	mov	r5, r2
 8016378:	461e      	mov	r6, r3
 801637a:	da0d      	bge.n	8016398 <__swhatbuf_r+0x2e>
 801637c:	89a3      	ldrh	r3, [r4, #12]
 801637e:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8016382:	f04f 0100 	mov.w	r1, #0
 8016386:	bf14      	ite	ne
 8016388:	2340      	movne	r3, #64	@ 0x40
 801638a:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 801638e:	2000      	movs	r0, #0
 8016390:	6031      	str	r1, [r6, #0]
 8016392:	602b      	str	r3, [r5, #0]
 8016394:	b016      	add	sp, #88	@ 0x58
 8016396:	bd70      	pop	{r4, r5, r6, pc}
 8016398:	466a      	mov	r2, sp
 801639a:	f000 f879 	bl	8016490 <_fstat_r>
 801639e:	2800      	cmp	r0, #0
 80163a0:	dbec      	blt.n	801637c <__swhatbuf_r+0x12>
 80163a2:	9901      	ldr	r1, [sp, #4]
 80163a4:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 80163a8:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 80163ac:	4259      	negs	r1, r3
 80163ae:	4159      	adcs	r1, r3
 80163b0:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80163b4:	e7eb      	b.n	801638e <__swhatbuf_r+0x24>

080163b6 <__smakebuf_r>:
 80163b6:	898b      	ldrh	r3, [r1, #12]
 80163b8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80163ba:	079d      	lsls	r5, r3, #30
 80163bc:	4606      	mov	r6, r0
 80163be:	460c      	mov	r4, r1
 80163c0:	d507      	bpl.n	80163d2 <__smakebuf_r+0x1c>
 80163c2:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 80163c6:	6023      	str	r3, [r4, #0]
 80163c8:	6123      	str	r3, [r4, #16]
 80163ca:	2301      	movs	r3, #1
 80163cc:	6163      	str	r3, [r4, #20]
 80163ce:	b003      	add	sp, #12
 80163d0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80163d2:	ab01      	add	r3, sp, #4
 80163d4:	466a      	mov	r2, sp
 80163d6:	f7ff ffc8 	bl	801636a <__swhatbuf_r>
 80163da:	9f00      	ldr	r7, [sp, #0]
 80163dc:	4605      	mov	r5, r0
 80163de:	4639      	mov	r1, r7
 80163e0:	4630      	mov	r0, r6
 80163e2:	f7fe fcf7 	bl	8014dd4 <_malloc_r>
 80163e6:	b948      	cbnz	r0, 80163fc <__smakebuf_r+0x46>
 80163e8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80163ec:	059a      	lsls	r2, r3, #22
 80163ee:	d4ee      	bmi.n	80163ce <__smakebuf_r+0x18>
 80163f0:	f023 0303 	bic.w	r3, r3, #3
 80163f4:	f043 0302 	orr.w	r3, r3, #2
 80163f8:	81a3      	strh	r3, [r4, #12]
 80163fa:	e7e2      	b.n	80163c2 <__smakebuf_r+0xc>
 80163fc:	89a3      	ldrh	r3, [r4, #12]
 80163fe:	6020      	str	r0, [r4, #0]
 8016400:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8016404:	81a3      	strh	r3, [r4, #12]
 8016406:	9b01      	ldr	r3, [sp, #4]
 8016408:	e9c4 0704 	strd	r0, r7, [r4, #16]
 801640c:	b15b      	cbz	r3, 8016426 <__smakebuf_r+0x70>
 801640e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8016412:	4630      	mov	r0, r6
 8016414:	f000 f84e 	bl	80164b4 <_isatty_r>
 8016418:	b128      	cbz	r0, 8016426 <__smakebuf_r+0x70>
 801641a:	89a3      	ldrh	r3, [r4, #12]
 801641c:	f023 0303 	bic.w	r3, r3, #3
 8016420:	f043 0301 	orr.w	r3, r3, #1
 8016424:	81a3      	strh	r3, [r4, #12]
 8016426:	89a3      	ldrh	r3, [r4, #12]
 8016428:	431d      	orrs	r5, r3
 801642a:	81a5      	strh	r5, [r4, #12]
 801642c:	e7cf      	b.n	80163ce <__smakebuf_r+0x18>

0801642e <_raise_r>:
 801642e:	291f      	cmp	r1, #31
 8016430:	b538      	push	{r3, r4, r5, lr}
 8016432:	4605      	mov	r5, r0
 8016434:	460c      	mov	r4, r1
 8016436:	d904      	bls.n	8016442 <_raise_r+0x14>
 8016438:	2316      	movs	r3, #22
 801643a:	6003      	str	r3, [r0, #0]
 801643c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8016440:	bd38      	pop	{r3, r4, r5, pc}
 8016442:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8016444:	b112      	cbz	r2, 801644c <_raise_r+0x1e>
 8016446:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 801644a:	b94b      	cbnz	r3, 8016460 <_raise_r+0x32>
 801644c:	4628      	mov	r0, r5
 801644e:	f000 f853 	bl	80164f8 <_getpid_r>
 8016452:	4622      	mov	r2, r4
 8016454:	4601      	mov	r1, r0
 8016456:	4628      	mov	r0, r5
 8016458:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801645c:	f000 b83a 	b.w	80164d4 <_kill_r>
 8016460:	2b01      	cmp	r3, #1
 8016462:	d00a      	beq.n	801647a <_raise_r+0x4c>
 8016464:	1c59      	adds	r1, r3, #1
 8016466:	d103      	bne.n	8016470 <_raise_r+0x42>
 8016468:	2316      	movs	r3, #22
 801646a:	6003      	str	r3, [r0, #0]
 801646c:	2001      	movs	r0, #1
 801646e:	e7e7      	b.n	8016440 <_raise_r+0x12>
 8016470:	2100      	movs	r1, #0
 8016472:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8016476:	4620      	mov	r0, r4
 8016478:	4798      	blx	r3
 801647a:	2000      	movs	r0, #0
 801647c:	e7e0      	b.n	8016440 <_raise_r+0x12>
	...

08016480 <raise>:
 8016480:	4b02      	ldr	r3, [pc, #8]	@ (801648c <raise+0xc>)
 8016482:	4601      	mov	r1, r0
 8016484:	6818      	ldr	r0, [r3, #0]
 8016486:	f7ff bfd2 	b.w	801642e <_raise_r>
 801648a:	bf00      	nop
 801648c:	200000c0 	.word	0x200000c0

08016490 <_fstat_r>:
 8016490:	b538      	push	{r3, r4, r5, lr}
 8016492:	4d07      	ldr	r5, [pc, #28]	@ (80164b0 <_fstat_r+0x20>)
 8016494:	2300      	movs	r3, #0
 8016496:	4604      	mov	r4, r0
 8016498:	4608      	mov	r0, r1
 801649a:	4611      	mov	r1, r2
 801649c:	602b      	str	r3, [r5, #0]
 801649e:	f7ec f8c5 	bl	800262c <_fstat>
 80164a2:	1c43      	adds	r3, r0, #1
 80164a4:	d102      	bne.n	80164ac <_fstat_r+0x1c>
 80164a6:	682b      	ldr	r3, [r5, #0]
 80164a8:	b103      	cbz	r3, 80164ac <_fstat_r+0x1c>
 80164aa:	6023      	str	r3, [r4, #0]
 80164ac:	bd38      	pop	{r3, r4, r5, pc}
 80164ae:	bf00      	nop
 80164b0:	2000dd40 	.word	0x2000dd40

080164b4 <_isatty_r>:
 80164b4:	b538      	push	{r3, r4, r5, lr}
 80164b6:	4d06      	ldr	r5, [pc, #24]	@ (80164d0 <_isatty_r+0x1c>)
 80164b8:	2300      	movs	r3, #0
 80164ba:	4604      	mov	r4, r0
 80164bc:	4608      	mov	r0, r1
 80164be:	602b      	str	r3, [r5, #0]
 80164c0:	f7ec f8c4 	bl	800264c <_isatty>
 80164c4:	1c43      	adds	r3, r0, #1
 80164c6:	d102      	bne.n	80164ce <_isatty_r+0x1a>
 80164c8:	682b      	ldr	r3, [r5, #0]
 80164ca:	b103      	cbz	r3, 80164ce <_isatty_r+0x1a>
 80164cc:	6023      	str	r3, [r4, #0]
 80164ce:	bd38      	pop	{r3, r4, r5, pc}
 80164d0:	2000dd40 	.word	0x2000dd40

080164d4 <_kill_r>:
 80164d4:	b538      	push	{r3, r4, r5, lr}
 80164d6:	4d07      	ldr	r5, [pc, #28]	@ (80164f4 <_kill_r+0x20>)
 80164d8:	2300      	movs	r3, #0
 80164da:	4604      	mov	r4, r0
 80164dc:	4608      	mov	r0, r1
 80164de:	4611      	mov	r1, r2
 80164e0:	602b      	str	r3, [r5, #0]
 80164e2:	f7ec f843 	bl	800256c <_kill>
 80164e6:	1c43      	adds	r3, r0, #1
 80164e8:	d102      	bne.n	80164f0 <_kill_r+0x1c>
 80164ea:	682b      	ldr	r3, [r5, #0]
 80164ec:	b103      	cbz	r3, 80164f0 <_kill_r+0x1c>
 80164ee:	6023      	str	r3, [r4, #0]
 80164f0:	bd38      	pop	{r3, r4, r5, pc}
 80164f2:	bf00      	nop
 80164f4:	2000dd40 	.word	0x2000dd40

080164f8 <_getpid_r>:
 80164f8:	f7ec b830 	b.w	800255c <_getpid>

080164fc <_init>:
 80164fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80164fe:	bf00      	nop
 8016500:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8016502:	bc08      	pop	{r3}
 8016504:	469e      	mov	lr, r3
 8016506:	4770      	bx	lr

08016508 <_fini>:
 8016508:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801650a:	bf00      	nop
 801650c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801650e:	bc08      	pop	{r3}
 8016510:	469e      	mov	lr, r3
 8016512:	4770      	bx	lr
