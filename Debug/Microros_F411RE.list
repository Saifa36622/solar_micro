
Microros_F411RE.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000165d4  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000dac  08016778  08016778  00017778  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08017524  08017524  00019110  2**0
                  CONTENTS
  4 .ARM          00000008  08017524  08017524  00018524  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801752c  0801752c  00019110  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  0801752c  0801752c  0001852c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08017534  08017534  00018534  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000110  20000000  08017538  00019000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000dc80  20000110  08017648  00019110  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  2000dd90  08017648  00019d90  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00019110  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001b8eb  00000000  00000000  00019140  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004013  00000000  00000000  00034a2b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000016b0  00000000  00000000  00038a40  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001187  00000000  00000000  0003a0f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001c081  00000000  00000000  0003b277  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001aaab  00000000  00000000  000572f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a4b8f  00000000  00000000  00071da3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000076  00000000  00000000  00116932  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006e64  00000000  00000000  001169a8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000079  00000000  00000000  0011d80c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000110 	.word	0x20000110
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0801675c 	.word	0x0801675c

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000114 	.word	0x20000114
 80001dc:	0801675c 	.word	0x0801675c

080001e0 <strcmp>:
 80001e0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001e4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001e8:	2a01      	cmp	r2, #1
 80001ea:	bf28      	it	cs
 80001ec:	429a      	cmpcs	r2, r3
 80001ee:	d0f7      	beq.n	80001e0 <strcmp>
 80001f0:	1ad0      	subs	r0, r2, r3
 80001f2:	4770      	bx	lr

080001f4 <strlen>:
 80001f4:	4603      	mov	r3, r0
 80001f6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001fa:	2a00      	cmp	r2, #0
 80001fc:	d1fb      	bne.n	80001f6 <strlen+0x2>
 80001fe:	1a18      	subs	r0, r3, r0
 8000200:	3801      	subs	r0, #1
 8000202:	4770      	bx	lr
	...

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_drsub>:
 80002b0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002b4:	e002      	b.n	80002bc <__adddf3>
 80002b6:	bf00      	nop

080002b8 <__aeabi_dsub>:
 80002b8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002bc <__adddf3>:
 80002bc:	b530      	push	{r4, r5, lr}
 80002be:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002c2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002c6:	ea94 0f05 	teq	r4, r5
 80002ca:	bf08      	it	eq
 80002cc:	ea90 0f02 	teqeq	r0, r2
 80002d0:	bf1f      	itttt	ne
 80002d2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002d6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002da:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002de:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002e2:	f000 80e2 	beq.w	80004aa <__adddf3+0x1ee>
 80002e6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ea:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ee:	bfb8      	it	lt
 80002f0:	426d      	neglt	r5, r5
 80002f2:	dd0c      	ble.n	800030e <__adddf3+0x52>
 80002f4:	442c      	add	r4, r5
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	ea82 0000 	eor.w	r0, r2, r0
 8000302:	ea83 0101 	eor.w	r1, r3, r1
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	2d36      	cmp	r5, #54	@ 0x36
 8000310:	bf88      	it	hi
 8000312:	bd30      	pophi	{r4, r5, pc}
 8000314:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000318:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800031c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000320:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000324:	d002      	beq.n	800032c <__adddf3+0x70>
 8000326:	4240      	negs	r0, r0
 8000328:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800032c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000330:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000334:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000338:	d002      	beq.n	8000340 <__adddf3+0x84>
 800033a:	4252      	negs	r2, r2
 800033c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000340:	ea94 0f05 	teq	r4, r5
 8000344:	f000 80a7 	beq.w	8000496 <__adddf3+0x1da>
 8000348:	f1a4 0401 	sub.w	r4, r4, #1
 800034c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000350:	db0d      	blt.n	800036e <__adddf3+0xb2>
 8000352:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000356:	fa22 f205 	lsr.w	r2, r2, r5
 800035a:	1880      	adds	r0, r0, r2
 800035c:	f141 0100 	adc.w	r1, r1, #0
 8000360:	fa03 f20e 	lsl.w	r2, r3, lr
 8000364:	1880      	adds	r0, r0, r2
 8000366:	fa43 f305 	asr.w	r3, r3, r5
 800036a:	4159      	adcs	r1, r3
 800036c:	e00e      	b.n	800038c <__adddf3+0xd0>
 800036e:	f1a5 0520 	sub.w	r5, r5, #32
 8000372:	f10e 0e20 	add.w	lr, lr, #32
 8000376:	2a01      	cmp	r2, #1
 8000378:	fa03 fc0e 	lsl.w	ip, r3, lr
 800037c:	bf28      	it	cs
 800037e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000382:	fa43 f305 	asr.w	r3, r3, r5
 8000386:	18c0      	adds	r0, r0, r3
 8000388:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800038c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000390:	d507      	bpl.n	80003a2 <__adddf3+0xe6>
 8000392:	f04f 0e00 	mov.w	lr, #0
 8000396:	f1dc 0c00 	rsbs	ip, ip, #0
 800039a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800039e:	eb6e 0101 	sbc.w	r1, lr, r1
 80003a2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003a6:	d31b      	bcc.n	80003e0 <__adddf3+0x124>
 80003a8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003ac:	d30c      	bcc.n	80003c8 <__adddf3+0x10c>
 80003ae:	0849      	lsrs	r1, r1, #1
 80003b0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003b4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003b8:	f104 0401 	add.w	r4, r4, #1
 80003bc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003c0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003c4:	f080 809a 	bcs.w	80004fc <__adddf3+0x240>
 80003c8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003cc:	bf08      	it	eq
 80003ce:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003d2:	f150 0000 	adcs.w	r0, r0, #0
 80003d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003da:	ea41 0105 	orr.w	r1, r1, r5
 80003de:	bd30      	pop	{r4, r5, pc}
 80003e0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003e4:	4140      	adcs	r0, r0
 80003e6:	eb41 0101 	adc.w	r1, r1, r1
 80003ea:	3c01      	subs	r4, #1
 80003ec:	bf28      	it	cs
 80003ee:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003f2:	d2e9      	bcs.n	80003c8 <__adddf3+0x10c>
 80003f4:	f091 0f00 	teq	r1, #0
 80003f8:	bf04      	itt	eq
 80003fa:	4601      	moveq	r1, r0
 80003fc:	2000      	moveq	r0, #0
 80003fe:	fab1 f381 	clz	r3, r1
 8000402:	bf08      	it	eq
 8000404:	3320      	addeq	r3, #32
 8000406:	f1a3 030b 	sub.w	r3, r3, #11
 800040a:	f1b3 0220 	subs.w	r2, r3, #32
 800040e:	da0c      	bge.n	800042a <__adddf3+0x16e>
 8000410:	320c      	adds	r2, #12
 8000412:	dd08      	ble.n	8000426 <__adddf3+0x16a>
 8000414:	f102 0c14 	add.w	ip, r2, #20
 8000418:	f1c2 020c 	rsb	r2, r2, #12
 800041c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000420:	fa21 f102 	lsr.w	r1, r1, r2
 8000424:	e00c      	b.n	8000440 <__adddf3+0x184>
 8000426:	f102 0214 	add.w	r2, r2, #20
 800042a:	bfd8      	it	le
 800042c:	f1c2 0c20 	rsble	ip, r2, #32
 8000430:	fa01 f102 	lsl.w	r1, r1, r2
 8000434:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000438:	bfdc      	itt	le
 800043a:	ea41 010c 	orrle.w	r1, r1, ip
 800043e:	4090      	lslle	r0, r2
 8000440:	1ae4      	subs	r4, r4, r3
 8000442:	bfa2      	ittt	ge
 8000444:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000448:	4329      	orrge	r1, r5
 800044a:	bd30      	popge	{r4, r5, pc}
 800044c:	ea6f 0404 	mvn.w	r4, r4
 8000450:	3c1f      	subs	r4, #31
 8000452:	da1c      	bge.n	800048e <__adddf3+0x1d2>
 8000454:	340c      	adds	r4, #12
 8000456:	dc0e      	bgt.n	8000476 <__adddf3+0x1ba>
 8000458:	f104 0414 	add.w	r4, r4, #20
 800045c:	f1c4 0220 	rsb	r2, r4, #32
 8000460:	fa20 f004 	lsr.w	r0, r0, r4
 8000464:	fa01 f302 	lsl.w	r3, r1, r2
 8000468:	ea40 0003 	orr.w	r0, r0, r3
 800046c:	fa21 f304 	lsr.w	r3, r1, r4
 8000470:	ea45 0103 	orr.w	r1, r5, r3
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f1c4 040c 	rsb	r4, r4, #12
 800047a:	f1c4 0220 	rsb	r2, r4, #32
 800047e:	fa20 f002 	lsr.w	r0, r0, r2
 8000482:	fa01 f304 	lsl.w	r3, r1, r4
 8000486:	ea40 0003 	orr.w	r0, r0, r3
 800048a:	4629      	mov	r1, r5
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	fa21 f004 	lsr.w	r0, r1, r4
 8000492:	4629      	mov	r1, r5
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f094 0f00 	teq	r4, #0
 800049a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800049e:	bf06      	itte	eq
 80004a0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004a4:	3401      	addeq	r4, #1
 80004a6:	3d01      	subne	r5, #1
 80004a8:	e74e      	b.n	8000348 <__adddf3+0x8c>
 80004aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ae:	bf18      	it	ne
 80004b0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004b4:	d029      	beq.n	800050a <__adddf3+0x24e>
 80004b6:	ea94 0f05 	teq	r4, r5
 80004ba:	bf08      	it	eq
 80004bc:	ea90 0f02 	teqeq	r0, r2
 80004c0:	d005      	beq.n	80004ce <__adddf3+0x212>
 80004c2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004c6:	bf04      	itt	eq
 80004c8:	4619      	moveq	r1, r3
 80004ca:	4610      	moveq	r0, r2
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	ea91 0f03 	teq	r1, r3
 80004d2:	bf1e      	ittt	ne
 80004d4:	2100      	movne	r1, #0
 80004d6:	2000      	movne	r0, #0
 80004d8:	bd30      	popne	{r4, r5, pc}
 80004da:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004de:	d105      	bne.n	80004ec <__adddf3+0x230>
 80004e0:	0040      	lsls	r0, r0, #1
 80004e2:	4149      	adcs	r1, r1
 80004e4:	bf28      	it	cs
 80004e6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ea:	bd30      	pop	{r4, r5, pc}
 80004ec:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004f0:	bf3c      	itt	cc
 80004f2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004f6:	bd30      	popcc	{r4, r5, pc}
 80004f8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004fc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000500:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000504:	f04f 0000 	mov.w	r0, #0
 8000508:	bd30      	pop	{r4, r5, pc}
 800050a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800050e:	bf1a      	itte	ne
 8000510:	4619      	movne	r1, r3
 8000512:	4610      	movne	r0, r2
 8000514:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000518:	bf1c      	itt	ne
 800051a:	460b      	movne	r3, r1
 800051c:	4602      	movne	r2, r0
 800051e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000522:	bf06      	itte	eq
 8000524:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000528:	ea91 0f03 	teqeq	r1, r3
 800052c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000530:	bd30      	pop	{r4, r5, pc}
 8000532:	bf00      	nop

08000534 <__aeabi_ui2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000548:	f04f 0500 	mov.w	r5, #0
 800054c:	f04f 0100 	mov.w	r1, #0
 8000550:	e750      	b.n	80003f4 <__adddf3+0x138>
 8000552:	bf00      	nop

08000554 <__aeabi_i2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000568:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800056c:	bf48      	it	mi
 800056e:	4240      	negmi	r0, r0
 8000570:	f04f 0100 	mov.w	r1, #0
 8000574:	e73e      	b.n	80003f4 <__adddf3+0x138>
 8000576:	bf00      	nop

08000578 <__aeabi_f2d>:
 8000578:	0042      	lsls	r2, r0, #1
 800057a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800057e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000582:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000586:	bf1f      	itttt	ne
 8000588:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800058c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000590:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000594:	4770      	bxne	lr
 8000596:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800059a:	bf08      	it	eq
 800059c:	4770      	bxeq	lr
 800059e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005a2:	bf04      	itt	eq
 80005a4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005a8:	4770      	bxeq	lr
 80005aa:	b530      	push	{r4, r5, lr}
 80005ac:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005b0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005b4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005b8:	e71c      	b.n	80003f4 <__adddf3+0x138>
 80005ba:	bf00      	nop

080005bc <__aeabi_ul2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f04f 0500 	mov.w	r5, #0
 80005ca:	e00a      	b.n	80005e2 <__aeabi_l2d+0x16>

080005cc <__aeabi_l2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005da:	d502      	bpl.n	80005e2 <__aeabi_l2d+0x16>
 80005dc:	4240      	negs	r0, r0
 80005de:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005e2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005e6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ea:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ee:	f43f aed8 	beq.w	80003a2 <__adddf3+0xe6>
 80005f2:	f04f 0203 	mov.w	r2, #3
 80005f6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005fa:	bf18      	it	ne
 80005fc:	3203      	addne	r2, #3
 80005fe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000602:	bf18      	it	ne
 8000604:	3203      	addne	r2, #3
 8000606:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800060a:	f1c2 0320 	rsb	r3, r2, #32
 800060e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000612:	fa20 f002 	lsr.w	r0, r0, r2
 8000616:	fa01 fe03 	lsl.w	lr, r1, r3
 800061a:	ea40 000e 	orr.w	r0, r0, lr
 800061e:	fa21 f102 	lsr.w	r1, r1, r2
 8000622:	4414      	add	r4, r2
 8000624:	e6bd      	b.n	80003a2 <__adddf3+0xe6>
 8000626:	bf00      	nop

08000628 <__aeabi_dmul>:
 8000628:	b570      	push	{r4, r5, r6, lr}
 800062a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800062e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000632:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000636:	bf1d      	ittte	ne
 8000638:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800063c:	ea94 0f0c 	teqne	r4, ip
 8000640:	ea95 0f0c 	teqne	r5, ip
 8000644:	f000 f8de 	bleq	8000804 <__aeabi_dmul+0x1dc>
 8000648:	442c      	add	r4, r5
 800064a:	ea81 0603 	eor.w	r6, r1, r3
 800064e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000652:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000656:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800065a:	bf18      	it	ne
 800065c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000660:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000664:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000668:	d038      	beq.n	80006dc <__aeabi_dmul+0xb4>
 800066a:	fba0 ce02 	umull	ip, lr, r0, r2
 800066e:	f04f 0500 	mov.w	r5, #0
 8000672:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000676:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800067a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800067e:	f04f 0600 	mov.w	r6, #0
 8000682:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000686:	f09c 0f00 	teq	ip, #0
 800068a:	bf18      	it	ne
 800068c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000690:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000694:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000698:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800069c:	d204      	bcs.n	80006a8 <__aeabi_dmul+0x80>
 800069e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006a2:	416d      	adcs	r5, r5
 80006a4:	eb46 0606 	adc.w	r6, r6, r6
 80006a8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006ac:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006b0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006b4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006b8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006bc:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006c0:	bf88      	it	hi
 80006c2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006c6:	d81e      	bhi.n	8000706 <__aeabi_dmul+0xde>
 80006c8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006cc:	bf08      	it	eq
 80006ce:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006d2:	f150 0000 	adcs.w	r0, r0, #0
 80006d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006e0:	ea46 0101 	orr.w	r1, r6, r1
 80006e4:	ea40 0002 	orr.w	r0, r0, r2
 80006e8:	ea81 0103 	eor.w	r1, r1, r3
 80006ec:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006f0:	bfc2      	ittt	gt
 80006f2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006f6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	popgt	{r4, r5, r6, pc}
 80006fc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000700:	f04f 0e00 	mov.w	lr, #0
 8000704:	3c01      	subs	r4, #1
 8000706:	f300 80ab 	bgt.w	8000860 <__aeabi_dmul+0x238>
 800070a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800070e:	bfde      	ittt	le
 8000710:	2000      	movle	r0, #0
 8000712:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000716:	bd70      	pople	{r4, r5, r6, pc}
 8000718:	f1c4 0400 	rsb	r4, r4, #0
 800071c:	3c20      	subs	r4, #32
 800071e:	da35      	bge.n	800078c <__aeabi_dmul+0x164>
 8000720:	340c      	adds	r4, #12
 8000722:	dc1b      	bgt.n	800075c <__aeabi_dmul+0x134>
 8000724:	f104 0414 	add.w	r4, r4, #20
 8000728:	f1c4 0520 	rsb	r5, r4, #32
 800072c:	fa00 f305 	lsl.w	r3, r0, r5
 8000730:	fa20 f004 	lsr.w	r0, r0, r4
 8000734:	fa01 f205 	lsl.w	r2, r1, r5
 8000738:	ea40 0002 	orr.w	r0, r0, r2
 800073c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000740:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000744:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000748:	fa21 f604 	lsr.w	r6, r1, r4
 800074c:	eb42 0106 	adc.w	r1, r2, r6
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 040c 	rsb	r4, r4, #12
 8000760:	f1c4 0520 	rsb	r5, r4, #32
 8000764:	fa00 f304 	lsl.w	r3, r0, r4
 8000768:	fa20 f005 	lsr.w	r0, r0, r5
 800076c:	fa01 f204 	lsl.w	r2, r1, r4
 8000770:	ea40 0002 	orr.w	r0, r0, r2
 8000774:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000778:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800077c:	f141 0100 	adc.w	r1, r1, #0
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f1c4 0520 	rsb	r5, r4, #32
 8000790:	fa00 f205 	lsl.w	r2, r0, r5
 8000794:	ea4e 0e02 	orr.w	lr, lr, r2
 8000798:	fa20 f304 	lsr.w	r3, r0, r4
 800079c:	fa01 f205 	lsl.w	r2, r1, r5
 80007a0:	ea43 0302 	orr.w	r3, r3, r2
 80007a4:	fa21 f004 	lsr.w	r0, r1, r4
 80007a8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007ac:	fa21 f204 	lsr.w	r2, r1, r4
 80007b0:	ea20 0002 	bic.w	r0, r0, r2
 80007b4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007bc:	bf08      	it	eq
 80007be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007c2:	bd70      	pop	{r4, r5, r6, pc}
 80007c4:	f094 0f00 	teq	r4, #0
 80007c8:	d10f      	bne.n	80007ea <__aeabi_dmul+0x1c2>
 80007ca:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007ce:	0040      	lsls	r0, r0, #1
 80007d0:	eb41 0101 	adc.w	r1, r1, r1
 80007d4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3c01      	subeq	r4, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1a6>
 80007de:	ea41 0106 	orr.w	r1, r1, r6
 80007e2:	f095 0f00 	teq	r5, #0
 80007e6:	bf18      	it	ne
 80007e8:	4770      	bxne	lr
 80007ea:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007ee:	0052      	lsls	r2, r2, #1
 80007f0:	eb43 0303 	adc.w	r3, r3, r3
 80007f4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3d01      	subeq	r5, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1c6>
 80007fe:	ea43 0306 	orr.w	r3, r3, r6
 8000802:	4770      	bx	lr
 8000804:	ea94 0f0c 	teq	r4, ip
 8000808:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800080c:	bf18      	it	ne
 800080e:	ea95 0f0c 	teqne	r5, ip
 8000812:	d00c      	beq.n	800082e <__aeabi_dmul+0x206>
 8000814:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000818:	bf18      	it	ne
 800081a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081e:	d1d1      	bne.n	80007c4 <__aeabi_dmul+0x19c>
 8000820:	ea81 0103 	eor.w	r1, r1, r3
 8000824:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000828:	f04f 0000 	mov.w	r0, #0
 800082c:	bd70      	pop	{r4, r5, r6, pc}
 800082e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000832:	bf06      	itte	eq
 8000834:	4610      	moveq	r0, r2
 8000836:	4619      	moveq	r1, r3
 8000838:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083c:	d019      	beq.n	8000872 <__aeabi_dmul+0x24a>
 800083e:	ea94 0f0c 	teq	r4, ip
 8000842:	d102      	bne.n	800084a <__aeabi_dmul+0x222>
 8000844:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000848:	d113      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800084a:	ea95 0f0c 	teq	r5, ip
 800084e:	d105      	bne.n	800085c <__aeabi_dmul+0x234>
 8000850:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000854:	bf1c      	itt	ne
 8000856:	4610      	movne	r0, r2
 8000858:	4619      	movne	r1, r3
 800085a:	d10a      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800085c:	ea81 0103 	eor.w	r1, r1, r3
 8000860:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000864:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000868:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800086c:	f04f 0000 	mov.w	r0, #0
 8000870:	bd70      	pop	{r4, r5, r6, pc}
 8000872:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000876:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800087a:	bd70      	pop	{r4, r5, r6, pc}

0800087c <__aeabi_ddiv>:
 800087c:	b570      	push	{r4, r5, r6, lr}
 800087e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000882:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000886:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800088a:	bf1d      	ittte	ne
 800088c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000890:	ea94 0f0c 	teqne	r4, ip
 8000894:	ea95 0f0c 	teqne	r5, ip
 8000898:	f000 f8a7 	bleq	80009ea <__aeabi_ddiv+0x16e>
 800089c:	eba4 0405 	sub.w	r4, r4, r5
 80008a0:	ea81 0e03 	eor.w	lr, r1, r3
 80008a4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008a8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008ac:	f000 8088 	beq.w	80009c0 <__aeabi_ddiv+0x144>
 80008b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008b4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008b8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008bc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008c0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008c4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008c8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008cc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008d0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008d4:	429d      	cmp	r5, r3
 80008d6:	bf08      	it	eq
 80008d8:	4296      	cmpeq	r6, r2
 80008da:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008de:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008e2:	d202      	bcs.n	80008ea <__aeabi_ddiv+0x6e>
 80008e4:	085b      	lsrs	r3, r3, #1
 80008e6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ea:	1ab6      	subs	r6, r6, r2
 80008ec:	eb65 0503 	sbc.w	r5, r5, r3
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008fa:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000928:	085b      	lsrs	r3, r3, #1
 800092a:	ea4f 0232 	mov.w	r2, r2, rrx
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000958:	ea55 0e06 	orrs.w	lr, r5, r6
 800095c:	d018      	beq.n	8000990 <__aeabi_ddiv+0x114>
 800095e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000962:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000966:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800096a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800096e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000972:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000976:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800097a:	d1c0      	bne.n	80008fe <__aeabi_ddiv+0x82>
 800097c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000980:	d10b      	bne.n	800099a <__aeabi_ddiv+0x11e>
 8000982:	ea41 0100 	orr.w	r1, r1, r0
 8000986:	f04f 0000 	mov.w	r0, #0
 800098a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800098e:	e7b6      	b.n	80008fe <__aeabi_ddiv+0x82>
 8000990:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000994:	bf04      	itt	eq
 8000996:	4301      	orreq	r1, r0
 8000998:	2000      	moveq	r0, #0
 800099a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800099e:	bf88      	it	hi
 80009a0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009a4:	f63f aeaf 	bhi.w	8000706 <__aeabi_dmul+0xde>
 80009a8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009ac:	bf04      	itt	eq
 80009ae:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009b2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009b6:	f150 0000 	adcs.w	r0, r0, #0
 80009ba:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009be:	bd70      	pop	{r4, r5, r6, pc}
 80009c0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009c4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009c8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009cc:	bfc2      	ittt	gt
 80009ce:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009d2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009d6:	bd70      	popgt	{r4, r5, r6, pc}
 80009d8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009dc:	f04f 0e00 	mov.w	lr, #0
 80009e0:	3c01      	subs	r4, #1
 80009e2:	e690      	b.n	8000706 <__aeabi_dmul+0xde>
 80009e4:	ea45 0e06 	orr.w	lr, r5, r6
 80009e8:	e68d      	b.n	8000706 <__aeabi_dmul+0xde>
 80009ea:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ee:	ea94 0f0c 	teq	r4, ip
 80009f2:	bf08      	it	eq
 80009f4:	ea95 0f0c 	teqeq	r5, ip
 80009f8:	f43f af3b 	beq.w	8000872 <__aeabi_dmul+0x24a>
 80009fc:	ea94 0f0c 	teq	r4, ip
 8000a00:	d10a      	bne.n	8000a18 <__aeabi_ddiv+0x19c>
 8000a02:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a06:	f47f af34 	bne.w	8000872 <__aeabi_dmul+0x24a>
 8000a0a:	ea95 0f0c 	teq	r5, ip
 8000a0e:	f47f af25 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a12:	4610      	mov	r0, r2
 8000a14:	4619      	mov	r1, r3
 8000a16:	e72c      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a18:	ea95 0f0c 	teq	r5, ip
 8000a1c:	d106      	bne.n	8000a2c <__aeabi_ddiv+0x1b0>
 8000a1e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a22:	f43f aefd 	beq.w	8000820 <__aeabi_dmul+0x1f8>
 8000a26:	4610      	mov	r0, r2
 8000a28:	4619      	mov	r1, r3
 8000a2a:	e722      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a2c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a30:	bf18      	it	ne
 8000a32:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a36:	f47f aec5 	bne.w	80007c4 <__aeabi_dmul+0x19c>
 8000a3a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a3e:	f47f af0d 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a42:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a46:	f47f aeeb 	bne.w	8000820 <__aeabi_dmul+0x1f8>
 8000a4a:	e712      	b.n	8000872 <__aeabi_dmul+0x24a>

08000a4c <__aeabi_d2uiz>:
 8000a4c:	004a      	lsls	r2, r1, #1
 8000a4e:	d211      	bcs.n	8000a74 <__aeabi_d2uiz+0x28>
 8000a50:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000a54:	d211      	bcs.n	8000a7a <__aeabi_d2uiz+0x2e>
 8000a56:	d50d      	bpl.n	8000a74 <__aeabi_d2uiz+0x28>
 8000a58:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000a5c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a60:	d40e      	bmi.n	8000a80 <__aeabi_d2uiz+0x34>
 8000a62:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a66:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000a6a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a6e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a72:	4770      	bx	lr
 8000a74:	f04f 0000 	mov.w	r0, #0
 8000a78:	4770      	bx	lr
 8000a7a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a7e:	d102      	bne.n	8000a86 <__aeabi_d2uiz+0x3a>
 8000a80:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000a84:	4770      	bx	lr
 8000a86:	f04f 0000 	mov.w	r0, #0
 8000a8a:	4770      	bx	lr

08000a8c <__aeabi_d2f>:
 8000a8c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a90:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000a94:	bf24      	itt	cs
 8000a96:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000a9a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000a9e:	d90d      	bls.n	8000abc <__aeabi_d2f+0x30>
 8000aa0:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000aa4:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000aa8:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000aac:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000ab0:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000ab4:	bf08      	it	eq
 8000ab6:	f020 0001 	biceq.w	r0, r0, #1
 8000aba:	4770      	bx	lr
 8000abc:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000ac0:	d121      	bne.n	8000b06 <__aeabi_d2f+0x7a>
 8000ac2:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000ac6:	bfbc      	itt	lt
 8000ac8:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000acc:	4770      	bxlt	lr
 8000ace:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000ad2:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000ad6:	f1c2 0218 	rsb	r2, r2, #24
 8000ada:	f1c2 0c20 	rsb	ip, r2, #32
 8000ade:	fa10 f30c 	lsls.w	r3, r0, ip
 8000ae2:	fa20 f002 	lsr.w	r0, r0, r2
 8000ae6:	bf18      	it	ne
 8000ae8:	f040 0001 	orrne.w	r0, r0, #1
 8000aec:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000af0:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000af4:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000af8:	ea40 000c 	orr.w	r0, r0, ip
 8000afc:	fa23 f302 	lsr.w	r3, r3, r2
 8000b00:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b04:	e7cc      	b.n	8000aa0 <__aeabi_d2f+0x14>
 8000b06:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b0a:	d107      	bne.n	8000b1c <__aeabi_d2f+0x90>
 8000b0c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b10:	bf1e      	ittt	ne
 8000b12:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000b16:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000b1a:	4770      	bxne	lr
 8000b1c:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000b20:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000b24:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000b28:	4770      	bx	lr
 8000b2a:	bf00      	nop

08000b2c <__aeabi_ldivmod>:
 8000b2c:	b97b      	cbnz	r3, 8000b4e <__aeabi_ldivmod+0x22>
 8000b2e:	b972      	cbnz	r2, 8000b4e <__aeabi_ldivmod+0x22>
 8000b30:	2900      	cmp	r1, #0
 8000b32:	bfbe      	ittt	lt
 8000b34:	2000      	movlt	r0, #0
 8000b36:	f04f 4100 	movlt.w	r1, #2147483648	@ 0x80000000
 8000b3a:	e006      	blt.n	8000b4a <__aeabi_ldivmod+0x1e>
 8000b3c:	bf08      	it	eq
 8000b3e:	2800      	cmpeq	r0, #0
 8000b40:	bf1c      	itt	ne
 8000b42:	f06f 4100 	mvnne.w	r1, #2147483648	@ 0x80000000
 8000b46:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000b4a:	f000 b9b5 	b.w	8000eb8 <__aeabi_idiv0>
 8000b4e:	f1ad 0c08 	sub.w	ip, sp, #8
 8000b52:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000b56:	2900      	cmp	r1, #0
 8000b58:	db09      	blt.n	8000b6e <__aeabi_ldivmod+0x42>
 8000b5a:	2b00      	cmp	r3, #0
 8000b5c:	db1a      	blt.n	8000b94 <__aeabi_ldivmod+0x68>
 8000b5e:	f000 f84d 	bl	8000bfc <__udivmoddi4>
 8000b62:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b66:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b6a:	b004      	add	sp, #16
 8000b6c:	4770      	bx	lr
 8000b6e:	4240      	negs	r0, r0
 8000b70:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000b74:	2b00      	cmp	r3, #0
 8000b76:	db1b      	blt.n	8000bb0 <__aeabi_ldivmod+0x84>
 8000b78:	f000 f840 	bl	8000bfc <__udivmoddi4>
 8000b7c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b80:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b84:	b004      	add	sp, #16
 8000b86:	4240      	negs	r0, r0
 8000b88:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000b8c:	4252      	negs	r2, r2
 8000b8e:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000b92:	4770      	bx	lr
 8000b94:	4252      	negs	r2, r2
 8000b96:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000b9a:	f000 f82f 	bl	8000bfc <__udivmoddi4>
 8000b9e:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000ba2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ba6:	b004      	add	sp, #16
 8000ba8:	4240      	negs	r0, r0
 8000baa:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000bae:	4770      	bx	lr
 8000bb0:	4252      	negs	r2, r2
 8000bb2:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000bb6:	f000 f821 	bl	8000bfc <__udivmoddi4>
 8000bba:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bbe:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bc2:	b004      	add	sp, #16
 8000bc4:	4252      	negs	r2, r2
 8000bc6:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000bca:	4770      	bx	lr

08000bcc <__aeabi_uldivmod>:
 8000bcc:	b953      	cbnz	r3, 8000be4 <__aeabi_uldivmod+0x18>
 8000bce:	b94a      	cbnz	r2, 8000be4 <__aeabi_uldivmod+0x18>
 8000bd0:	2900      	cmp	r1, #0
 8000bd2:	bf08      	it	eq
 8000bd4:	2800      	cmpeq	r0, #0
 8000bd6:	bf1c      	itt	ne
 8000bd8:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000bdc:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000be0:	f000 b96a 	b.w	8000eb8 <__aeabi_idiv0>
 8000be4:	f1ad 0c08 	sub.w	ip, sp, #8
 8000be8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bec:	f000 f806 	bl	8000bfc <__udivmoddi4>
 8000bf0:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bf4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bf8:	b004      	add	sp, #16
 8000bfa:	4770      	bx	lr

08000bfc <__udivmoddi4>:
 8000bfc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c00:	9d08      	ldr	r5, [sp, #32]
 8000c02:	460c      	mov	r4, r1
 8000c04:	2b00      	cmp	r3, #0
 8000c06:	d14e      	bne.n	8000ca6 <__udivmoddi4+0xaa>
 8000c08:	4694      	mov	ip, r2
 8000c0a:	458c      	cmp	ip, r1
 8000c0c:	4686      	mov	lr, r0
 8000c0e:	fab2 f282 	clz	r2, r2
 8000c12:	d962      	bls.n	8000cda <__udivmoddi4+0xde>
 8000c14:	b14a      	cbz	r2, 8000c2a <__udivmoddi4+0x2e>
 8000c16:	f1c2 0320 	rsb	r3, r2, #32
 8000c1a:	4091      	lsls	r1, r2
 8000c1c:	fa20 f303 	lsr.w	r3, r0, r3
 8000c20:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c24:	4319      	orrs	r1, r3
 8000c26:	fa00 fe02 	lsl.w	lr, r0, r2
 8000c2a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000c2e:	fa1f f68c 	uxth.w	r6, ip
 8000c32:	fbb1 f4f7 	udiv	r4, r1, r7
 8000c36:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000c3a:	fb07 1114 	mls	r1, r7, r4, r1
 8000c3e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c42:	fb04 f106 	mul.w	r1, r4, r6
 8000c46:	4299      	cmp	r1, r3
 8000c48:	d90a      	bls.n	8000c60 <__udivmoddi4+0x64>
 8000c4a:	eb1c 0303 	adds.w	r3, ip, r3
 8000c4e:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 8000c52:	f080 8112 	bcs.w	8000e7a <__udivmoddi4+0x27e>
 8000c56:	4299      	cmp	r1, r3
 8000c58:	f240 810f 	bls.w	8000e7a <__udivmoddi4+0x27e>
 8000c5c:	3c02      	subs	r4, #2
 8000c5e:	4463      	add	r3, ip
 8000c60:	1a59      	subs	r1, r3, r1
 8000c62:	fa1f f38e 	uxth.w	r3, lr
 8000c66:	fbb1 f0f7 	udiv	r0, r1, r7
 8000c6a:	fb07 1110 	mls	r1, r7, r0, r1
 8000c6e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c72:	fb00 f606 	mul.w	r6, r0, r6
 8000c76:	429e      	cmp	r6, r3
 8000c78:	d90a      	bls.n	8000c90 <__udivmoddi4+0x94>
 8000c7a:	eb1c 0303 	adds.w	r3, ip, r3
 8000c7e:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 8000c82:	f080 80fc 	bcs.w	8000e7e <__udivmoddi4+0x282>
 8000c86:	429e      	cmp	r6, r3
 8000c88:	f240 80f9 	bls.w	8000e7e <__udivmoddi4+0x282>
 8000c8c:	4463      	add	r3, ip
 8000c8e:	3802      	subs	r0, #2
 8000c90:	1b9b      	subs	r3, r3, r6
 8000c92:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000c96:	2100      	movs	r1, #0
 8000c98:	b11d      	cbz	r5, 8000ca2 <__udivmoddi4+0xa6>
 8000c9a:	40d3      	lsrs	r3, r2
 8000c9c:	2200      	movs	r2, #0
 8000c9e:	e9c5 3200 	strd	r3, r2, [r5]
 8000ca2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ca6:	428b      	cmp	r3, r1
 8000ca8:	d905      	bls.n	8000cb6 <__udivmoddi4+0xba>
 8000caa:	b10d      	cbz	r5, 8000cb0 <__udivmoddi4+0xb4>
 8000cac:	e9c5 0100 	strd	r0, r1, [r5]
 8000cb0:	2100      	movs	r1, #0
 8000cb2:	4608      	mov	r0, r1
 8000cb4:	e7f5      	b.n	8000ca2 <__udivmoddi4+0xa6>
 8000cb6:	fab3 f183 	clz	r1, r3
 8000cba:	2900      	cmp	r1, #0
 8000cbc:	d146      	bne.n	8000d4c <__udivmoddi4+0x150>
 8000cbe:	42a3      	cmp	r3, r4
 8000cc0:	d302      	bcc.n	8000cc8 <__udivmoddi4+0xcc>
 8000cc2:	4290      	cmp	r0, r2
 8000cc4:	f0c0 80f0 	bcc.w	8000ea8 <__udivmoddi4+0x2ac>
 8000cc8:	1a86      	subs	r6, r0, r2
 8000cca:	eb64 0303 	sbc.w	r3, r4, r3
 8000cce:	2001      	movs	r0, #1
 8000cd0:	2d00      	cmp	r5, #0
 8000cd2:	d0e6      	beq.n	8000ca2 <__udivmoddi4+0xa6>
 8000cd4:	e9c5 6300 	strd	r6, r3, [r5]
 8000cd8:	e7e3      	b.n	8000ca2 <__udivmoddi4+0xa6>
 8000cda:	2a00      	cmp	r2, #0
 8000cdc:	f040 8090 	bne.w	8000e00 <__udivmoddi4+0x204>
 8000ce0:	eba1 040c 	sub.w	r4, r1, ip
 8000ce4:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000ce8:	fa1f f78c 	uxth.w	r7, ip
 8000cec:	2101      	movs	r1, #1
 8000cee:	fbb4 f6f8 	udiv	r6, r4, r8
 8000cf2:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000cf6:	fb08 4416 	mls	r4, r8, r6, r4
 8000cfa:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000cfe:	fb07 f006 	mul.w	r0, r7, r6
 8000d02:	4298      	cmp	r0, r3
 8000d04:	d908      	bls.n	8000d18 <__udivmoddi4+0x11c>
 8000d06:	eb1c 0303 	adds.w	r3, ip, r3
 8000d0a:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 8000d0e:	d202      	bcs.n	8000d16 <__udivmoddi4+0x11a>
 8000d10:	4298      	cmp	r0, r3
 8000d12:	f200 80cd 	bhi.w	8000eb0 <__udivmoddi4+0x2b4>
 8000d16:	4626      	mov	r6, r4
 8000d18:	1a1c      	subs	r4, r3, r0
 8000d1a:	fa1f f38e 	uxth.w	r3, lr
 8000d1e:	fbb4 f0f8 	udiv	r0, r4, r8
 8000d22:	fb08 4410 	mls	r4, r8, r0, r4
 8000d26:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000d2a:	fb00 f707 	mul.w	r7, r0, r7
 8000d2e:	429f      	cmp	r7, r3
 8000d30:	d908      	bls.n	8000d44 <__udivmoddi4+0x148>
 8000d32:	eb1c 0303 	adds.w	r3, ip, r3
 8000d36:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 8000d3a:	d202      	bcs.n	8000d42 <__udivmoddi4+0x146>
 8000d3c:	429f      	cmp	r7, r3
 8000d3e:	f200 80b0 	bhi.w	8000ea2 <__udivmoddi4+0x2a6>
 8000d42:	4620      	mov	r0, r4
 8000d44:	1bdb      	subs	r3, r3, r7
 8000d46:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d4a:	e7a5      	b.n	8000c98 <__udivmoddi4+0x9c>
 8000d4c:	f1c1 0620 	rsb	r6, r1, #32
 8000d50:	408b      	lsls	r3, r1
 8000d52:	fa22 f706 	lsr.w	r7, r2, r6
 8000d56:	431f      	orrs	r7, r3
 8000d58:	fa20 fc06 	lsr.w	ip, r0, r6
 8000d5c:	fa04 f301 	lsl.w	r3, r4, r1
 8000d60:	ea43 030c 	orr.w	r3, r3, ip
 8000d64:	40f4      	lsrs	r4, r6
 8000d66:	fa00 f801 	lsl.w	r8, r0, r1
 8000d6a:	0c38      	lsrs	r0, r7, #16
 8000d6c:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000d70:	fbb4 fef0 	udiv	lr, r4, r0
 8000d74:	fa1f fc87 	uxth.w	ip, r7
 8000d78:	fb00 441e 	mls	r4, r0, lr, r4
 8000d7c:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000d80:	fb0e f90c 	mul.w	r9, lr, ip
 8000d84:	45a1      	cmp	r9, r4
 8000d86:	fa02 f201 	lsl.w	r2, r2, r1
 8000d8a:	d90a      	bls.n	8000da2 <__udivmoddi4+0x1a6>
 8000d8c:	193c      	adds	r4, r7, r4
 8000d8e:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 8000d92:	f080 8084 	bcs.w	8000e9e <__udivmoddi4+0x2a2>
 8000d96:	45a1      	cmp	r9, r4
 8000d98:	f240 8081 	bls.w	8000e9e <__udivmoddi4+0x2a2>
 8000d9c:	f1ae 0e02 	sub.w	lr, lr, #2
 8000da0:	443c      	add	r4, r7
 8000da2:	eba4 0409 	sub.w	r4, r4, r9
 8000da6:	fa1f f983 	uxth.w	r9, r3
 8000daa:	fbb4 f3f0 	udiv	r3, r4, r0
 8000dae:	fb00 4413 	mls	r4, r0, r3, r4
 8000db2:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000db6:	fb03 fc0c 	mul.w	ip, r3, ip
 8000dba:	45a4      	cmp	ip, r4
 8000dbc:	d907      	bls.n	8000dce <__udivmoddi4+0x1d2>
 8000dbe:	193c      	adds	r4, r7, r4
 8000dc0:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 8000dc4:	d267      	bcs.n	8000e96 <__udivmoddi4+0x29a>
 8000dc6:	45a4      	cmp	ip, r4
 8000dc8:	d965      	bls.n	8000e96 <__udivmoddi4+0x29a>
 8000dca:	3b02      	subs	r3, #2
 8000dcc:	443c      	add	r4, r7
 8000dce:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000dd2:	fba0 9302 	umull	r9, r3, r0, r2
 8000dd6:	eba4 040c 	sub.w	r4, r4, ip
 8000dda:	429c      	cmp	r4, r3
 8000ddc:	46ce      	mov	lr, r9
 8000dde:	469c      	mov	ip, r3
 8000de0:	d351      	bcc.n	8000e86 <__udivmoddi4+0x28a>
 8000de2:	d04e      	beq.n	8000e82 <__udivmoddi4+0x286>
 8000de4:	b155      	cbz	r5, 8000dfc <__udivmoddi4+0x200>
 8000de6:	ebb8 030e 	subs.w	r3, r8, lr
 8000dea:	eb64 040c 	sbc.w	r4, r4, ip
 8000dee:	fa04 f606 	lsl.w	r6, r4, r6
 8000df2:	40cb      	lsrs	r3, r1
 8000df4:	431e      	orrs	r6, r3
 8000df6:	40cc      	lsrs	r4, r1
 8000df8:	e9c5 6400 	strd	r6, r4, [r5]
 8000dfc:	2100      	movs	r1, #0
 8000dfe:	e750      	b.n	8000ca2 <__udivmoddi4+0xa6>
 8000e00:	f1c2 0320 	rsb	r3, r2, #32
 8000e04:	fa20 f103 	lsr.w	r1, r0, r3
 8000e08:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e0c:	fa24 f303 	lsr.w	r3, r4, r3
 8000e10:	4094      	lsls	r4, r2
 8000e12:	430c      	orrs	r4, r1
 8000e14:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000e18:	fa00 fe02 	lsl.w	lr, r0, r2
 8000e1c:	fa1f f78c 	uxth.w	r7, ip
 8000e20:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e24:	fb08 3110 	mls	r1, r8, r0, r3
 8000e28:	0c23      	lsrs	r3, r4, #16
 8000e2a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000e2e:	fb00 f107 	mul.w	r1, r0, r7
 8000e32:	4299      	cmp	r1, r3
 8000e34:	d908      	bls.n	8000e48 <__udivmoddi4+0x24c>
 8000e36:	eb1c 0303 	adds.w	r3, ip, r3
 8000e3a:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 8000e3e:	d22c      	bcs.n	8000e9a <__udivmoddi4+0x29e>
 8000e40:	4299      	cmp	r1, r3
 8000e42:	d92a      	bls.n	8000e9a <__udivmoddi4+0x29e>
 8000e44:	3802      	subs	r0, #2
 8000e46:	4463      	add	r3, ip
 8000e48:	1a5b      	subs	r3, r3, r1
 8000e4a:	b2a4      	uxth	r4, r4
 8000e4c:	fbb3 f1f8 	udiv	r1, r3, r8
 8000e50:	fb08 3311 	mls	r3, r8, r1, r3
 8000e54:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000e58:	fb01 f307 	mul.w	r3, r1, r7
 8000e5c:	42a3      	cmp	r3, r4
 8000e5e:	d908      	bls.n	8000e72 <__udivmoddi4+0x276>
 8000e60:	eb1c 0404 	adds.w	r4, ip, r4
 8000e64:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 8000e68:	d213      	bcs.n	8000e92 <__udivmoddi4+0x296>
 8000e6a:	42a3      	cmp	r3, r4
 8000e6c:	d911      	bls.n	8000e92 <__udivmoddi4+0x296>
 8000e6e:	3902      	subs	r1, #2
 8000e70:	4464      	add	r4, ip
 8000e72:	1ae4      	subs	r4, r4, r3
 8000e74:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000e78:	e739      	b.n	8000cee <__udivmoddi4+0xf2>
 8000e7a:	4604      	mov	r4, r0
 8000e7c:	e6f0      	b.n	8000c60 <__udivmoddi4+0x64>
 8000e7e:	4608      	mov	r0, r1
 8000e80:	e706      	b.n	8000c90 <__udivmoddi4+0x94>
 8000e82:	45c8      	cmp	r8, r9
 8000e84:	d2ae      	bcs.n	8000de4 <__udivmoddi4+0x1e8>
 8000e86:	ebb9 0e02 	subs.w	lr, r9, r2
 8000e8a:	eb63 0c07 	sbc.w	ip, r3, r7
 8000e8e:	3801      	subs	r0, #1
 8000e90:	e7a8      	b.n	8000de4 <__udivmoddi4+0x1e8>
 8000e92:	4631      	mov	r1, r6
 8000e94:	e7ed      	b.n	8000e72 <__udivmoddi4+0x276>
 8000e96:	4603      	mov	r3, r0
 8000e98:	e799      	b.n	8000dce <__udivmoddi4+0x1d2>
 8000e9a:	4630      	mov	r0, r6
 8000e9c:	e7d4      	b.n	8000e48 <__udivmoddi4+0x24c>
 8000e9e:	46d6      	mov	lr, sl
 8000ea0:	e77f      	b.n	8000da2 <__udivmoddi4+0x1a6>
 8000ea2:	4463      	add	r3, ip
 8000ea4:	3802      	subs	r0, #2
 8000ea6:	e74d      	b.n	8000d44 <__udivmoddi4+0x148>
 8000ea8:	4606      	mov	r6, r0
 8000eaa:	4623      	mov	r3, r4
 8000eac:	4608      	mov	r0, r1
 8000eae:	e70f      	b.n	8000cd0 <__udivmoddi4+0xd4>
 8000eb0:	3e02      	subs	r6, #2
 8000eb2:	4463      	add	r3, ip
 8000eb4:	e730      	b.n	8000d18 <__udivmoddi4+0x11c>
 8000eb6:	bf00      	nop

08000eb8 <__aeabi_idiv0>:
 8000eb8:	4770      	bx	lr
 8000eba:	bf00      	nop

08000ebc <PWM_init>:
 *      Author: beamk
 */

#include "PWM.h"

void PWM_init(PWM* pwm, TIM_HandleTypeDef* htimx, uint16_t tim_chx){
 8000ebc:	b580      	push	{r7, lr}
 8000ebe:	b084      	sub	sp, #16
 8000ec0:	af00      	add	r7, sp, #0
 8000ec2:	60f8      	str	r0, [r7, #12]
 8000ec4:	60b9      	str	r1, [r7, #8]
 8000ec6:	4613      	mov	r3, r2
 8000ec8:	80fb      	strh	r3, [r7, #6]
	pwm->CPU_FREQ = 170e6;
 8000eca:	68fb      	ldr	r3, [r7, #12]
 8000ecc:	4a0b      	ldr	r2, [pc, #44]	@ (8000efc <PWM_init+0x40>)
 8000ece:	611a      	str	r2, [r3, #16]
	pwm->htimx = htimx;
 8000ed0:	68fb      	ldr	r3, [r7, #12]
 8000ed2:	68ba      	ldr	r2, [r7, #8]
 8000ed4:	601a      	str	r2, [r3, #0]
	pwm->tim_chx = tim_chx;
 8000ed6:	68fb      	ldr	r3, [r7, #12]
 8000ed8:	88fa      	ldrh	r2, [r7, #6]
 8000eda:	809a      	strh	r2, [r3, #4]
	pwm->OC = 0;
 8000edc:	68fb      	ldr	r3, [r7, #12]
 8000ede:	2200      	movs	r2, #0
 8000ee0:	615a      	str	r2, [r3, #20]
	HAL_TIM_Base_Start(htimx);
 8000ee2:	68b8      	ldr	r0, [r7, #8]
 8000ee4:	f003 f9fa 	bl	80042dc <HAL_TIM_Base_Start>
	HAL_TIM_PWM_Start(htimx, tim_chx);
 8000ee8:	88fb      	ldrh	r3, [r7, #6]
 8000eea:	4619      	mov	r1, r3
 8000eec:	68b8      	ldr	r0, [r7, #8]
 8000eee:	f003 fb0b 	bl	8004508 <HAL_TIM_PWM_Start>
}
 8000ef2:	bf00      	nop
 8000ef4:	3710      	adds	r7, #16
 8000ef6:	46bd      	mov	sp, r7
 8000ef8:	bd80      	pop	{r7, pc}
 8000efa:	bf00      	nop
 8000efc:	0a21fe80 	.word	0x0a21fe80

08000f00 <PWM_write_duty>:

void PWM_write_duty(PWM* pwm, float freq, float percent_duty){
 8000f00:	b5b0      	push	{r4, r5, r7, lr}
 8000f02:	b084      	sub	sp, #16
 8000f04:	af00      	add	r7, sp, #0
 8000f06:	60f8      	str	r0, [r7, #12]
 8000f08:	ed87 0a02 	vstr	s0, [r7, #8]
 8000f0c:	edc7 0a01 	vstr	s1, [r7, #4]
    if (freq == 0) {
 8000f10:	edd7 7a02 	vldr	s15, [r7, #8]
 8000f14:	eef5 7a40 	vcmp.f32	s15, #0.0
 8000f18:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000f1c:	d123      	bne.n	8000f66 <PWM_write_duty+0x66>
        __HAL_TIM_SET_COMPARE(pwm->htimx, pwm->tim_chx, 0);
 8000f1e:	68fb      	ldr	r3, [r7, #12]
 8000f20:	889b      	ldrh	r3, [r3, #4]
 8000f22:	2b00      	cmp	r3, #0
 8000f24:	d105      	bne.n	8000f32 <PWM_write_duty+0x32>
 8000f26:	68fb      	ldr	r3, [r7, #12]
 8000f28:	681b      	ldr	r3, [r3, #0]
 8000f2a:	681b      	ldr	r3, [r3, #0]
 8000f2c:	2200      	movs	r2, #0
 8000f2e:	635a      	str	r2, [r3, #52]	@ 0x34
    	pwm->OC = (uint16_t) (pwm->overflow * fabs(percent_duty) / 100.0);
        __HAL_TIM_SET_PRESCALER(pwm->htimx, pwm->prescaler);
        __HAL_TIM_SET_AUTORELOAD(pwm->htimx, pwm->overflow);
        __HAL_TIM_SET_COMPARE(pwm->htimx, pwm->tim_chx, pwm->OC);
    }
}
 8000f30:	e0b7      	b.n	80010a2 <PWM_write_duty+0x1a2>
        __HAL_TIM_SET_COMPARE(pwm->htimx, pwm->tim_chx, 0);
 8000f32:	68fb      	ldr	r3, [r7, #12]
 8000f34:	889b      	ldrh	r3, [r3, #4]
 8000f36:	2b04      	cmp	r3, #4
 8000f38:	d105      	bne.n	8000f46 <PWM_write_duty+0x46>
 8000f3a:	68fb      	ldr	r3, [r7, #12]
 8000f3c:	681b      	ldr	r3, [r3, #0]
 8000f3e:	681a      	ldr	r2, [r3, #0]
 8000f40:	2300      	movs	r3, #0
 8000f42:	6393      	str	r3, [r2, #56]	@ 0x38
 8000f44:	e0ad      	b.n	80010a2 <PWM_write_duty+0x1a2>
 8000f46:	68fb      	ldr	r3, [r7, #12]
 8000f48:	889b      	ldrh	r3, [r3, #4]
 8000f4a:	2b08      	cmp	r3, #8
 8000f4c:	d105      	bne.n	8000f5a <PWM_write_duty+0x5a>
 8000f4e:	68fb      	ldr	r3, [r7, #12]
 8000f50:	681b      	ldr	r3, [r3, #0]
 8000f52:	681a      	ldr	r2, [r3, #0]
 8000f54:	2300      	movs	r3, #0
 8000f56:	63d3      	str	r3, [r2, #60]	@ 0x3c
 8000f58:	e0a3      	b.n	80010a2 <PWM_write_duty+0x1a2>
 8000f5a:	68fb      	ldr	r3, [r7, #12]
 8000f5c:	681b      	ldr	r3, [r3, #0]
 8000f5e:	681a      	ldr	r2, [r3, #0]
 8000f60:	2300      	movs	r3, #0
 8000f62:	6413      	str	r3, [r2, #64]	@ 0x40
}
 8000f64:	e09d      	b.n	80010a2 <PWM_write_duty+0x1a2>
    	pwm->period_cyc = (uint32_t) (pwm->CPU_FREQ / freq);
 8000f66:	68fb      	ldr	r3, [r7, #12]
 8000f68:	691b      	ldr	r3, [r3, #16]
 8000f6a:	ee07 3a90 	vmov	s15, r3
 8000f6e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8000f72:	ed97 7a02 	vldr	s14, [r7, #8]
 8000f76:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000f7a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000f7e:	ee17 2a90 	vmov	r2, s15
 8000f82:	68fb      	ldr	r3, [r7, #12]
 8000f84:	609a      	str	r2, [r3, #8]
    	pwm->prescaler = (uint16_t) ((pwm->period_cyc + 65535 - 1) / 65535) - 1; // Subtracting 1 since prescaler is zero-based
 8000f86:	68fb      	ldr	r3, [r7, #12]
 8000f88:	689b      	ldr	r3, [r3, #8]
 8000f8a:	f503 437f 	add.w	r3, r3, #65280	@ 0xff00
 8000f8e:	33fe      	adds	r3, #254	@ 0xfe
 8000f90:	4a46      	ldr	r2, [pc, #280]	@ (80010ac <PWM_write_duty+0x1ac>)
 8000f92:	fba2 2303 	umull	r2, r3, r2, r3
 8000f96:	0bdb      	lsrs	r3, r3, #15
 8000f98:	b29b      	uxth	r3, r3
 8000f9a:	3b01      	subs	r3, #1
 8000f9c:	b29a      	uxth	r2, r3
 8000f9e:	68fb      	ldr	r3, [r7, #12]
 8000fa0:	819a      	strh	r2, [r3, #12]
    	pwm->overflow = (uint16_t) ((pwm->CPU_FREQ / (float)(pwm->prescaler + 1) / freq) - 1);
 8000fa2:	68fb      	ldr	r3, [r7, #12]
 8000fa4:	691b      	ldr	r3, [r3, #16]
 8000fa6:	ee07 3a90 	vmov	s15, r3
 8000faa:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8000fae:	68fb      	ldr	r3, [r7, #12]
 8000fb0:	899b      	ldrh	r3, [r3, #12]
 8000fb2:	3301      	adds	r3, #1
 8000fb4:	ee07 3a90 	vmov	s15, r3
 8000fb8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000fbc:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8000fc0:	ed97 7a02 	vldr	s14, [r7, #8]
 8000fc4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000fc8:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8000fcc:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8000fd0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000fd4:	ee17 3a90 	vmov	r3, s15
 8000fd8:	b29a      	uxth	r2, r3
 8000fda:	68fb      	ldr	r3, [r7, #12]
 8000fdc:	81da      	strh	r2, [r3, #14]
    	pwm->OC = (uint16_t) (pwm->overflow * fabs(percent_duty) / 100.0);
 8000fde:	68fb      	ldr	r3, [r7, #12]
 8000fe0:	89db      	ldrh	r3, [r3, #14]
 8000fe2:	4618      	mov	r0, r3
 8000fe4:	f7ff fab6 	bl	8000554 <__aeabi_i2d>
 8000fe8:	4604      	mov	r4, r0
 8000fea:	460d      	mov	r5, r1
 8000fec:	edd7 7a01 	vldr	s15, [r7, #4]
 8000ff0:	eef0 7ae7 	vabs.f32	s15, s15
 8000ff4:	ee17 0a90 	vmov	r0, s15
 8000ff8:	f7ff fabe 	bl	8000578 <__aeabi_f2d>
 8000ffc:	4602      	mov	r2, r0
 8000ffe:	460b      	mov	r3, r1
 8001000:	4620      	mov	r0, r4
 8001002:	4629      	mov	r1, r5
 8001004:	f7ff fb10 	bl	8000628 <__aeabi_dmul>
 8001008:	4602      	mov	r2, r0
 800100a:	460b      	mov	r3, r1
 800100c:	4610      	mov	r0, r2
 800100e:	4619      	mov	r1, r3
 8001010:	f04f 0200 	mov.w	r2, #0
 8001014:	4b26      	ldr	r3, [pc, #152]	@ (80010b0 <PWM_write_duty+0x1b0>)
 8001016:	f7ff fc31 	bl	800087c <__aeabi_ddiv>
 800101a:	4602      	mov	r2, r0
 800101c:	460b      	mov	r3, r1
 800101e:	4610      	mov	r0, r2
 8001020:	4619      	mov	r1, r3
 8001022:	f7ff fd13 	bl	8000a4c <__aeabi_d2uiz>
 8001026:	4603      	mov	r3, r0
 8001028:	b29b      	uxth	r3, r3
 800102a:	461a      	mov	r2, r3
 800102c:	68fb      	ldr	r3, [r7, #12]
 800102e:	615a      	str	r2, [r3, #20]
        __HAL_TIM_SET_PRESCALER(pwm->htimx, pwm->prescaler);
 8001030:	68fb      	ldr	r3, [r7, #12]
 8001032:	899a      	ldrh	r2, [r3, #12]
 8001034:	68fb      	ldr	r3, [r7, #12]
 8001036:	681b      	ldr	r3, [r3, #0]
 8001038:	681b      	ldr	r3, [r3, #0]
 800103a:	629a      	str	r2, [r3, #40]	@ 0x28
        __HAL_TIM_SET_AUTORELOAD(pwm->htimx, pwm->overflow);
 800103c:	68fb      	ldr	r3, [r7, #12]
 800103e:	89da      	ldrh	r2, [r3, #14]
 8001040:	68fb      	ldr	r3, [r7, #12]
 8001042:	681b      	ldr	r3, [r3, #0]
 8001044:	681b      	ldr	r3, [r3, #0]
 8001046:	62da      	str	r2, [r3, #44]	@ 0x2c
 8001048:	68fb      	ldr	r3, [r7, #12]
 800104a:	89da      	ldrh	r2, [r3, #14]
 800104c:	68fb      	ldr	r3, [r7, #12]
 800104e:	681b      	ldr	r3, [r3, #0]
 8001050:	60da      	str	r2, [r3, #12]
        __HAL_TIM_SET_COMPARE(pwm->htimx, pwm->tim_chx, pwm->OC);
 8001052:	68fb      	ldr	r3, [r7, #12]
 8001054:	889b      	ldrh	r3, [r3, #4]
 8001056:	2b00      	cmp	r3, #0
 8001058:	d106      	bne.n	8001068 <PWM_write_duty+0x168>
 800105a:	68fb      	ldr	r3, [r7, #12]
 800105c:	681b      	ldr	r3, [r3, #0]
 800105e:	681b      	ldr	r3, [r3, #0]
 8001060:	68fa      	ldr	r2, [r7, #12]
 8001062:	6952      	ldr	r2, [r2, #20]
 8001064:	635a      	str	r2, [r3, #52]	@ 0x34
}
 8001066:	e01c      	b.n	80010a2 <PWM_write_duty+0x1a2>
        __HAL_TIM_SET_COMPARE(pwm->htimx, pwm->tim_chx, pwm->OC);
 8001068:	68fb      	ldr	r3, [r7, #12]
 800106a:	889b      	ldrh	r3, [r3, #4]
 800106c:	2b04      	cmp	r3, #4
 800106e:	d106      	bne.n	800107e <PWM_write_duty+0x17e>
 8001070:	68fb      	ldr	r3, [r7, #12]
 8001072:	681b      	ldr	r3, [r3, #0]
 8001074:	681a      	ldr	r2, [r3, #0]
 8001076:	68fb      	ldr	r3, [r7, #12]
 8001078:	695b      	ldr	r3, [r3, #20]
 800107a:	6393      	str	r3, [r2, #56]	@ 0x38
}
 800107c:	e011      	b.n	80010a2 <PWM_write_duty+0x1a2>
        __HAL_TIM_SET_COMPARE(pwm->htimx, pwm->tim_chx, pwm->OC);
 800107e:	68fb      	ldr	r3, [r7, #12]
 8001080:	889b      	ldrh	r3, [r3, #4]
 8001082:	2b08      	cmp	r3, #8
 8001084:	d106      	bne.n	8001094 <PWM_write_duty+0x194>
 8001086:	68fb      	ldr	r3, [r7, #12]
 8001088:	681b      	ldr	r3, [r3, #0]
 800108a:	681a      	ldr	r2, [r3, #0]
 800108c:	68fb      	ldr	r3, [r7, #12]
 800108e:	695b      	ldr	r3, [r3, #20]
 8001090:	63d3      	str	r3, [r2, #60]	@ 0x3c
}
 8001092:	e006      	b.n	80010a2 <PWM_write_duty+0x1a2>
        __HAL_TIM_SET_COMPARE(pwm->htimx, pwm->tim_chx, pwm->OC);
 8001094:	68fb      	ldr	r3, [r7, #12]
 8001096:	681b      	ldr	r3, [r3, #0]
 8001098:	681a      	ldr	r2, [r3, #0]
 800109a:	68fb      	ldr	r3, [r7, #12]
 800109c:	695b      	ldr	r3, [r3, #20]
 800109e:	6413      	str	r3, [r2, #64]	@ 0x40
}
 80010a0:	e7ff      	b.n	80010a2 <PWM_write_duty+0x1a2>
 80010a2:	bf00      	nop
 80010a4:	3710      	adds	r7, #16
 80010a6:	46bd      	mov	sp, r7
 80010a8:	bdb0      	pop	{r4, r5, r7, pc}
 80010aa:	bf00      	nop
 80010ac:	80008001 	.word	0x80008001
 80010b0:	40590000 	.word	0x40590000

080010b4 <pvPortMallocMicroROS>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMallocMicroROS( size_t xWantedSize )
{
 80010b4:	b580      	push	{r7, lr}
 80010b6:	b08a      	sub	sp, #40	@ 0x28
 80010b8:	af00      	add	r7, sp, #0
 80010ba:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80010bc:	2300      	movs	r3, #0
 80010be:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80010c0:	f006 fc92 	bl	80079e8 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80010c4:	4b5a      	ldr	r3, [pc, #360]	@ (8001230 <pvPortMallocMicroROS+0x17c>)
 80010c6:	681b      	ldr	r3, [r3, #0]
 80010c8:	2b00      	cmp	r3, #0
 80010ca:	d101      	bne.n	80010d0 <pvPortMallocMicroROS+0x1c>
		{
			prvHeapInit();
 80010cc:	f000 f986 	bl	80013dc <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80010d0:	4b58      	ldr	r3, [pc, #352]	@ (8001234 <pvPortMallocMicroROS+0x180>)
 80010d2:	681a      	ldr	r2, [r3, #0]
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	4013      	ands	r3, r2
 80010d8:	2b00      	cmp	r3, #0
 80010da:	f040 8090 	bne.w	80011fe <pvPortMallocMicroROS+0x14a>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	2b00      	cmp	r3, #0
 80010e2:	d01e      	beq.n	8001122 <pvPortMallocMicroROS+0x6e>
			{
				xWantedSize += xHeapStructSize;
 80010e4:	2208      	movs	r2, #8
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	4413      	add	r3, r2
 80010ea:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	f003 0307 	and.w	r3, r3, #7
 80010f2:	2b00      	cmp	r3, #0
 80010f4:	d015      	beq.n	8001122 <pvPortMallocMicroROS+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	f023 0307 	bic.w	r3, r3, #7
 80010fc:	3308      	adds	r3, #8
 80010fe:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	f003 0307 	and.w	r3, r3, #7
 8001106:	2b00      	cmp	r3, #0
 8001108:	d00b      	beq.n	8001122 <pvPortMallocMicroROS+0x6e>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800110a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800110e:	f383 8811 	msr	BASEPRI, r3
 8001112:	f3bf 8f6f 	isb	sy
 8001116:	f3bf 8f4f 	dsb	sy
 800111a:	617b      	str	r3, [r7, #20]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800111c:	bf00      	nop
 800111e:	bf00      	nop
 8001120:	e7fd      	b.n	800111e <pvPortMallocMicroROS+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	2b00      	cmp	r3, #0
 8001126:	d06a      	beq.n	80011fe <pvPortMallocMicroROS+0x14a>
 8001128:	4b43      	ldr	r3, [pc, #268]	@ (8001238 <pvPortMallocMicroROS+0x184>)
 800112a:	681b      	ldr	r3, [r3, #0]
 800112c:	687a      	ldr	r2, [r7, #4]
 800112e:	429a      	cmp	r2, r3
 8001130:	d865      	bhi.n	80011fe <pvPortMallocMicroROS+0x14a>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8001132:	4b42      	ldr	r3, [pc, #264]	@ (800123c <pvPortMallocMicroROS+0x188>)
 8001134:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8001136:	4b41      	ldr	r3, [pc, #260]	@ (800123c <pvPortMallocMicroROS+0x188>)
 8001138:	681b      	ldr	r3, [r3, #0]
 800113a:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800113c:	e004      	b.n	8001148 <pvPortMallocMicroROS+0x94>
				{
					pxPreviousBlock = pxBlock;
 800113e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001140:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8001142:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001144:	681b      	ldr	r3, [r3, #0]
 8001146:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8001148:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800114a:	685b      	ldr	r3, [r3, #4]
 800114c:	687a      	ldr	r2, [r7, #4]
 800114e:	429a      	cmp	r2, r3
 8001150:	d903      	bls.n	800115a <pvPortMallocMicroROS+0xa6>
 8001152:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001154:	681b      	ldr	r3, [r3, #0]
 8001156:	2b00      	cmp	r3, #0
 8001158:	d1f1      	bne.n	800113e <pvPortMallocMicroROS+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800115a:	4b35      	ldr	r3, [pc, #212]	@ (8001230 <pvPortMallocMicroROS+0x17c>)
 800115c:	681b      	ldr	r3, [r3, #0]
 800115e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001160:	429a      	cmp	r2, r3
 8001162:	d04c      	beq.n	80011fe <pvPortMallocMicroROS+0x14a>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8001164:	6a3b      	ldr	r3, [r7, #32]
 8001166:	681b      	ldr	r3, [r3, #0]
 8001168:	2208      	movs	r2, #8
 800116a:	4413      	add	r3, r2
 800116c:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800116e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001170:	681a      	ldr	r2, [r3, #0]
 8001172:	6a3b      	ldr	r3, [r7, #32]
 8001174:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8001176:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001178:	685a      	ldr	r2, [r3, #4]
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	1ad2      	subs	r2, r2, r3
 800117e:	2308      	movs	r3, #8
 8001180:	005b      	lsls	r3, r3, #1
 8001182:	429a      	cmp	r2, r3
 8001184:	d920      	bls.n	80011c8 <pvPortMallocMicroROS+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8001186:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	4413      	add	r3, r2
 800118c:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800118e:	69bb      	ldr	r3, [r7, #24]
 8001190:	f003 0307 	and.w	r3, r3, #7
 8001194:	2b00      	cmp	r3, #0
 8001196:	d00b      	beq.n	80011b0 <pvPortMallocMicroROS+0xfc>
	__asm volatile
 8001198:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800119c:	f383 8811 	msr	BASEPRI, r3
 80011a0:	f3bf 8f6f 	isb	sy
 80011a4:	f3bf 8f4f 	dsb	sy
 80011a8:	613b      	str	r3, [r7, #16]
}
 80011aa:	bf00      	nop
 80011ac:	bf00      	nop
 80011ae:	e7fd      	b.n	80011ac <pvPortMallocMicroROS+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80011b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80011b2:	685a      	ldr	r2, [r3, #4]
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	1ad2      	subs	r2, r2, r3
 80011b8:	69bb      	ldr	r3, [r7, #24]
 80011ba:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80011bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80011be:	687a      	ldr	r2, [r7, #4]
 80011c0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80011c2:	69b8      	ldr	r0, [r7, #24]
 80011c4:	f000 f96c 	bl	80014a0 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80011c8:	4b1b      	ldr	r3, [pc, #108]	@ (8001238 <pvPortMallocMicroROS+0x184>)
 80011ca:	681a      	ldr	r2, [r3, #0]
 80011cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80011ce:	685b      	ldr	r3, [r3, #4]
 80011d0:	1ad3      	subs	r3, r2, r3
 80011d2:	4a19      	ldr	r2, [pc, #100]	@ (8001238 <pvPortMallocMicroROS+0x184>)
 80011d4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80011d6:	4b18      	ldr	r3, [pc, #96]	@ (8001238 <pvPortMallocMicroROS+0x184>)
 80011d8:	681a      	ldr	r2, [r3, #0]
 80011da:	4b19      	ldr	r3, [pc, #100]	@ (8001240 <pvPortMallocMicroROS+0x18c>)
 80011dc:	681b      	ldr	r3, [r3, #0]
 80011de:	429a      	cmp	r2, r3
 80011e0:	d203      	bcs.n	80011ea <pvPortMallocMicroROS+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80011e2:	4b15      	ldr	r3, [pc, #84]	@ (8001238 <pvPortMallocMicroROS+0x184>)
 80011e4:	681b      	ldr	r3, [r3, #0]
 80011e6:	4a16      	ldr	r2, [pc, #88]	@ (8001240 <pvPortMallocMicroROS+0x18c>)
 80011e8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80011ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80011ec:	685a      	ldr	r2, [r3, #4]
 80011ee:	4b11      	ldr	r3, [pc, #68]	@ (8001234 <pvPortMallocMicroROS+0x180>)
 80011f0:	681b      	ldr	r3, [r3, #0]
 80011f2:	431a      	orrs	r2, r3
 80011f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80011f6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80011f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80011fa:	2200      	movs	r2, #0
 80011fc:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80011fe:	f006 fc01 	bl	8007a04 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8001202:	69fb      	ldr	r3, [r7, #28]
 8001204:	f003 0307 	and.w	r3, r3, #7
 8001208:	2b00      	cmp	r3, #0
 800120a:	d00b      	beq.n	8001224 <pvPortMallocMicroROS+0x170>
	__asm volatile
 800120c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001210:	f383 8811 	msr	BASEPRI, r3
 8001214:	f3bf 8f6f 	isb	sy
 8001218:	f3bf 8f4f 	dsb	sy
 800121c:	60fb      	str	r3, [r7, #12]
}
 800121e:	bf00      	nop
 8001220:	bf00      	nop
 8001222:	e7fd      	b.n	8001220 <pvPortMallocMicroROS+0x16c>
	return pvReturn;
 8001224:	69fb      	ldr	r3, [r7, #28]
}
 8001226:	4618      	mov	r0, r3
 8001228:	3728      	adds	r7, #40	@ 0x28
 800122a:	46bd      	mov	sp, r7
 800122c:	bd80      	pop	{r7, pc}
 800122e:	bf00      	nop
 8001230:	20003d34 	.word	0x20003d34
 8001234:	20003d40 	.word	0x20003d40
 8001238:	20003d38 	.word	0x20003d38
 800123c:	20003d2c 	.word	0x20003d2c
 8001240:	20003d3c 	.word	0x20003d3c

08001244 <vPortFreeMicroROS>:
/*-----------------------------------------------------------*/

void vPortFreeMicroROS( void *pv )
{
 8001244:	b580      	push	{r7, lr}
 8001246:	b086      	sub	sp, #24
 8001248:	af00      	add	r7, sp, #0
 800124a:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	2b00      	cmp	r3, #0
 8001254:	d04a      	beq.n	80012ec <vPortFreeMicroROS+0xa8>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8001256:	2308      	movs	r3, #8
 8001258:	425b      	negs	r3, r3
 800125a:	697a      	ldr	r2, [r7, #20]
 800125c:	4413      	add	r3, r2
 800125e:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8001260:	697b      	ldr	r3, [r7, #20]
 8001262:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8001264:	693b      	ldr	r3, [r7, #16]
 8001266:	685a      	ldr	r2, [r3, #4]
 8001268:	4b22      	ldr	r3, [pc, #136]	@ (80012f4 <vPortFreeMicroROS+0xb0>)
 800126a:	681b      	ldr	r3, [r3, #0]
 800126c:	4013      	ands	r3, r2
 800126e:	2b00      	cmp	r3, #0
 8001270:	d10b      	bne.n	800128a <vPortFreeMicroROS+0x46>
	__asm volatile
 8001272:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001276:	f383 8811 	msr	BASEPRI, r3
 800127a:	f3bf 8f6f 	isb	sy
 800127e:	f3bf 8f4f 	dsb	sy
 8001282:	60fb      	str	r3, [r7, #12]
}
 8001284:	bf00      	nop
 8001286:	bf00      	nop
 8001288:	e7fd      	b.n	8001286 <vPortFreeMicroROS+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800128a:	693b      	ldr	r3, [r7, #16]
 800128c:	681b      	ldr	r3, [r3, #0]
 800128e:	2b00      	cmp	r3, #0
 8001290:	d00b      	beq.n	80012aa <vPortFreeMicroROS+0x66>
	__asm volatile
 8001292:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001296:	f383 8811 	msr	BASEPRI, r3
 800129a:	f3bf 8f6f 	isb	sy
 800129e:	f3bf 8f4f 	dsb	sy
 80012a2:	60bb      	str	r3, [r7, #8]
}
 80012a4:	bf00      	nop
 80012a6:	bf00      	nop
 80012a8:	e7fd      	b.n	80012a6 <vPortFreeMicroROS+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80012aa:	693b      	ldr	r3, [r7, #16]
 80012ac:	685a      	ldr	r2, [r3, #4]
 80012ae:	4b11      	ldr	r3, [pc, #68]	@ (80012f4 <vPortFreeMicroROS+0xb0>)
 80012b0:	681b      	ldr	r3, [r3, #0]
 80012b2:	4013      	ands	r3, r2
 80012b4:	2b00      	cmp	r3, #0
 80012b6:	d019      	beq.n	80012ec <vPortFreeMicroROS+0xa8>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80012b8:	693b      	ldr	r3, [r7, #16]
 80012ba:	681b      	ldr	r3, [r3, #0]
 80012bc:	2b00      	cmp	r3, #0
 80012be:	d115      	bne.n	80012ec <vPortFreeMicroROS+0xa8>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80012c0:	693b      	ldr	r3, [r7, #16]
 80012c2:	685a      	ldr	r2, [r3, #4]
 80012c4:	4b0b      	ldr	r3, [pc, #44]	@ (80012f4 <vPortFreeMicroROS+0xb0>)
 80012c6:	681b      	ldr	r3, [r3, #0]
 80012c8:	43db      	mvns	r3, r3
 80012ca:	401a      	ands	r2, r3
 80012cc:	693b      	ldr	r3, [r7, #16]
 80012ce:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80012d0:	f006 fb8a 	bl	80079e8 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80012d4:	693b      	ldr	r3, [r7, #16]
 80012d6:	685a      	ldr	r2, [r3, #4]
 80012d8:	4b07      	ldr	r3, [pc, #28]	@ (80012f8 <vPortFreeMicroROS+0xb4>)
 80012da:	681b      	ldr	r3, [r3, #0]
 80012dc:	4413      	add	r3, r2
 80012de:	4a06      	ldr	r2, [pc, #24]	@ (80012f8 <vPortFreeMicroROS+0xb4>)
 80012e0:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80012e2:	6938      	ldr	r0, [r7, #16]
 80012e4:	f000 f8dc 	bl	80014a0 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 80012e8:	f006 fb8c 	bl	8007a04 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80012ec:	bf00      	nop
 80012ee:	3718      	adds	r7, #24
 80012f0:	46bd      	mov	sp, r7
 80012f2:	bd80      	pop	{r7, pc}
 80012f4:	20003d40 	.word	0x20003d40
 80012f8:	20003d38 	.word	0x20003d38

080012fc <getBlockSize>:
/*-----------------------------------------------------------*/

/*-----------------------------------------------------------*/
size_t getBlockSize( void *pv )
{
 80012fc:	b480      	push	{r7}
 80012fe:	b087      	sub	sp, #28
 8001300:	af00      	add	r7, sp, #0
 8001302:	6078      	str	r0, [r7, #4]

	uint8_t *puc = ( uint8_t * ) pv;
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	617b      	str	r3, [r7, #20]
	BlockLink_t *pxLink;

	puc -= xHeapStructSize;
 8001308:	2308      	movs	r3, #8
 800130a:	425b      	negs	r3, r3
 800130c:	697a      	ldr	r2, [r7, #20]
 800130e:	4413      	add	r3, r2
 8001310:	617b      	str	r3, [r7, #20]
	pxLink = ( void * ) puc;
 8001312:	697b      	ldr	r3, [r7, #20]
 8001314:	613b      	str	r3, [r7, #16]

	size_t count = pxLink->xBlockSize & ~xBlockAllocatedBit;
 8001316:	693b      	ldr	r3, [r7, #16]
 8001318:	685a      	ldr	r2, [r3, #4]
 800131a:	4b06      	ldr	r3, [pc, #24]	@ (8001334 <getBlockSize+0x38>)
 800131c:	681b      	ldr	r3, [r3, #0]
 800131e:	43db      	mvns	r3, r3
 8001320:	4013      	ands	r3, r2
 8001322:	60fb      	str	r3, [r7, #12]

	return count;
 8001324:	68fb      	ldr	r3, [r7, #12]
}
 8001326:	4618      	mov	r0, r3
 8001328:	371c      	adds	r7, #28
 800132a:	46bd      	mov	sp, r7
 800132c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001330:	4770      	bx	lr
 8001332:	bf00      	nop
 8001334:	20003d40 	.word	0x20003d40

08001338 <pvPortReallocMicroROS>:
/*-----------------------------------------------------------*/

void *pvPortReallocMicroROS( void *pv, size_t xWantedSize )
{
 8001338:	b580      	push	{r7, lr}
 800133a:	b084      	sub	sp, #16
 800133c:	af00      	add	r7, sp, #0
 800133e:	6078      	str	r0, [r7, #4]
 8001340:	6039      	str	r1, [r7, #0]
	vTaskSuspendAll();
 8001342:	f006 fb51 	bl	80079e8 <vTaskSuspendAll>

	void * newmem = pvPortMallocMicroROS(xWantedSize);
 8001346:	6838      	ldr	r0, [r7, #0]
 8001348:	f7ff feb4 	bl	80010b4 <pvPortMallocMicroROS>
 800134c:	60b8      	str	r0, [r7, #8]
	if (newmem != NULL && pv != NULL)
 800134e:	68bb      	ldr	r3, [r7, #8]
 8001350:	2b00      	cmp	r3, #0
 8001352:	d017      	beq.n	8001384 <pvPortReallocMicroROS+0x4c>
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	2b00      	cmp	r3, #0
 8001358:	d014      	beq.n	8001384 <pvPortReallocMicroROS+0x4c>
	{
		size_t count = getBlockSize(pv) - xHeapStructSize;
 800135a:	6878      	ldr	r0, [r7, #4]
 800135c:	f7ff ffce 	bl	80012fc <getBlockSize>
 8001360:	4603      	mov	r3, r0
 8001362:	2208      	movs	r2, #8
 8001364:	1a9b      	subs	r3, r3, r2
 8001366:	60fb      	str	r3, [r7, #12]
		if (xWantedSize < count)
 8001368:	683a      	ldr	r2, [r7, #0]
 800136a:	68fb      	ldr	r3, [r7, #12]
 800136c:	429a      	cmp	r2, r3
 800136e:	d201      	bcs.n	8001374 <pvPortReallocMicroROS+0x3c>
		{
			count = xWantedSize;
 8001370:	683b      	ldr	r3, [r7, #0]
 8001372:	60fb      	str	r3, [r7, #12]
		}
		memcpy(newmem, pv, count);
 8001374:	68fa      	ldr	r2, [r7, #12]
 8001376:	6879      	ldr	r1, [r7, #4]
 8001378:	68b8      	ldr	r0, [r7, #8]
 800137a:	f014 fb1a 	bl	80159b2 <memcpy>

		vPortFreeMicroROS(pv);
 800137e:	6878      	ldr	r0, [r7, #4]
 8001380:	f7ff ff60 	bl	8001244 <vPortFreeMicroROS>
	}

	( void ) xTaskResumeAll();
 8001384:	f006 fb3e 	bl	8007a04 <xTaskResumeAll>

	return newmem;
 8001388:	68bb      	ldr	r3, [r7, #8]
}
 800138a:	4618      	mov	r0, r3
 800138c:	3710      	adds	r7, #16
 800138e:	46bd      	mov	sp, r7
 8001390:	bd80      	pop	{r7, pc}

08001392 <pvPortCallocMicroROS>:
/*-----------------------------------------------------------*/

void *pvPortCallocMicroROS( size_t num, size_t xWantedSize )
{
 8001392:	b580      	push	{r7, lr}
 8001394:	b086      	sub	sp, #24
 8001396:	af00      	add	r7, sp, #0
 8001398:	6078      	str	r0, [r7, #4]
 800139a:	6039      	str	r1, [r7, #0]
	vTaskSuspendAll();
 800139c:	f006 fb24 	bl	80079e8 <vTaskSuspendAll>
	size_t count = xWantedSize*num;
 80013a0:	683b      	ldr	r3, [r7, #0]
 80013a2:	687a      	ldr	r2, [r7, #4]
 80013a4:	fb02 f303 	mul.w	r3, r2, r3
 80013a8:	617b      	str	r3, [r7, #20]

	void * mem = pvPortMallocMicroROS(count);
 80013aa:	6978      	ldr	r0, [r7, #20]
 80013ac:	f7ff fe82 	bl	80010b4 <pvPortMallocMicroROS>
 80013b0:	60f8      	str	r0, [r7, #12]
  	char *in_dest = (char*)mem;
 80013b2:	68fb      	ldr	r3, [r7, #12]
 80013b4:	613b      	str	r3, [r7, #16]

  	while(count--)
 80013b6:	e004      	b.n	80013c2 <pvPortCallocMicroROS+0x30>
    	*in_dest++ = 0;
 80013b8:	693b      	ldr	r3, [r7, #16]
 80013ba:	1c5a      	adds	r2, r3, #1
 80013bc:	613a      	str	r2, [r7, #16]
 80013be:	2200      	movs	r2, #0
 80013c0:	701a      	strb	r2, [r3, #0]
  	while(count--)
 80013c2:	697b      	ldr	r3, [r7, #20]
 80013c4:	1e5a      	subs	r2, r3, #1
 80013c6:	617a      	str	r2, [r7, #20]
 80013c8:	2b00      	cmp	r3, #0
 80013ca:	d1f5      	bne.n	80013b8 <pvPortCallocMicroROS+0x26>

	( void ) xTaskResumeAll();
 80013cc:	f006 fb1a 	bl	8007a04 <xTaskResumeAll>
  	return mem;
 80013d0:	68fb      	ldr	r3, [r7, #12]
}
 80013d2:	4618      	mov	r0, r3
 80013d4:	3718      	adds	r7, #24
 80013d6:	46bd      	mov	sp, r7
 80013d8:	bd80      	pop	{r7, pc}
	...

080013dc <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80013dc:	b480      	push	{r7}
 80013de:	b085      	sub	sp, #20
 80013e0:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80013e2:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 80013e6:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80013e8:	4b27      	ldr	r3, [pc, #156]	@ (8001488 <prvHeapInit+0xac>)
 80013ea:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80013ec:	68fb      	ldr	r3, [r7, #12]
 80013ee:	f003 0307 	and.w	r3, r3, #7
 80013f2:	2b00      	cmp	r3, #0
 80013f4:	d00c      	beq.n	8001410 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80013f6:	68fb      	ldr	r3, [r7, #12]
 80013f8:	3307      	adds	r3, #7
 80013fa:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80013fc:	68fb      	ldr	r3, [r7, #12]
 80013fe:	f023 0307 	bic.w	r3, r3, #7
 8001402:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8001404:	68ba      	ldr	r2, [r7, #8]
 8001406:	68fb      	ldr	r3, [r7, #12]
 8001408:	1ad3      	subs	r3, r2, r3
 800140a:	4a1f      	ldr	r2, [pc, #124]	@ (8001488 <prvHeapInit+0xac>)
 800140c:	4413      	add	r3, r2
 800140e:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8001410:	68fb      	ldr	r3, [r7, #12]
 8001412:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8001414:	4a1d      	ldr	r2, [pc, #116]	@ (800148c <prvHeapInit+0xb0>)
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800141a:	4b1c      	ldr	r3, [pc, #112]	@ (800148c <prvHeapInit+0xb0>)
 800141c:	2200      	movs	r2, #0
 800141e:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	68ba      	ldr	r2, [r7, #8]
 8001424:	4413      	add	r3, r2
 8001426:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8001428:	2208      	movs	r2, #8
 800142a:	68fb      	ldr	r3, [r7, #12]
 800142c:	1a9b      	subs	r3, r3, r2
 800142e:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8001430:	68fb      	ldr	r3, [r7, #12]
 8001432:	f023 0307 	bic.w	r3, r3, #7
 8001436:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8001438:	68fb      	ldr	r3, [r7, #12]
 800143a:	4a15      	ldr	r2, [pc, #84]	@ (8001490 <prvHeapInit+0xb4>)
 800143c:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800143e:	4b14      	ldr	r3, [pc, #80]	@ (8001490 <prvHeapInit+0xb4>)
 8001440:	681b      	ldr	r3, [r3, #0]
 8001442:	2200      	movs	r2, #0
 8001444:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8001446:	4b12      	ldr	r3, [pc, #72]	@ (8001490 <prvHeapInit+0xb4>)
 8001448:	681b      	ldr	r3, [r3, #0]
 800144a:	2200      	movs	r2, #0
 800144c:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8001452:	683b      	ldr	r3, [r7, #0]
 8001454:	68fa      	ldr	r2, [r7, #12]
 8001456:	1ad2      	subs	r2, r2, r3
 8001458:	683b      	ldr	r3, [r7, #0]
 800145a:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800145c:	4b0c      	ldr	r3, [pc, #48]	@ (8001490 <prvHeapInit+0xb4>)
 800145e:	681a      	ldr	r2, [r3, #0]
 8001460:	683b      	ldr	r3, [r7, #0]
 8001462:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8001464:	683b      	ldr	r3, [r7, #0]
 8001466:	685b      	ldr	r3, [r3, #4]
 8001468:	4a0a      	ldr	r2, [pc, #40]	@ (8001494 <prvHeapInit+0xb8>)
 800146a:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800146c:	683b      	ldr	r3, [r7, #0]
 800146e:	685b      	ldr	r3, [r3, #4]
 8001470:	4a09      	ldr	r2, [pc, #36]	@ (8001498 <prvHeapInit+0xbc>)
 8001472:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8001474:	4b09      	ldr	r3, [pc, #36]	@ (800149c <prvHeapInit+0xc0>)
 8001476:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800147a:	601a      	str	r2, [r3, #0]
}
 800147c:	bf00      	nop
 800147e:	3714      	adds	r7, #20
 8001480:	46bd      	mov	sp, r7
 8001482:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001486:	4770      	bx	lr
 8001488:	2000012c 	.word	0x2000012c
 800148c:	20003d2c 	.word	0x20003d2c
 8001490:	20003d34 	.word	0x20003d34
 8001494:	20003d3c 	.word	0x20003d3c
 8001498:	20003d38 	.word	0x20003d38
 800149c:	20003d40 	.word	0x20003d40

080014a0 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80014a0:	b480      	push	{r7}
 80014a2:	b085      	sub	sp, #20
 80014a4:	af00      	add	r7, sp, #0
 80014a6:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80014a8:	4b28      	ldr	r3, [pc, #160]	@ (800154c <prvInsertBlockIntoFreeList+0xac>)
 80014aa:	60fb      	str	r3, [r7, #12]
 80014ac:	e002      	b.n	80014b4 <prvInsertBlockIntoFreeList+0x14>
 80014ae:	68fb      	ldr	r3, [r7, #12]
 80014b0:	681b      	ldr	r3, [r3, #0]
 80014b2:	60fb      	str	r3, [r7, #12]
 80014b4:	68fb      	ldr	r3, [r7, #12]
 80014b6:	681b      	ldr	r3, [r3, #0]
 80014b8:	687a      	ldr	r2, [r7, #4]
 80014ba:	429a      	cmp	r2, r3
 80014bc:	d8f7      	bhi.n	80014ae <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80014be:	68fb      	ldr	r3, [r7, #12]
 80014c0:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80014c2:	68fb      	ldr	r3, [r7, #12]
 80014c4:	685b      	ldr	r3, [r3, #4]
 80014c6:	68ba      	ldr	r2, [r7, #8]
 80014c8:	4413      	add	r3, r2
 80014ca:	687a      	ldr	r2, [r7, #4]
 80014cc:	429a      	cmp	r2, r3
 80014ce:	d108      	bne.n	80014e2 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80014d0:	68fb      	ldr	r3, [r7, #12]
 80014d2:	685a      	ldr	r2, [r3, #4]
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	685b      	ldr	r3, [r3, #4]
 80014d8:	441a      	add	r2, r3
 80014da:	68fb      	ldr	r3, [r7, #12]
 80014dc:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80014de:	68fb      	ldr	r3, [r7, #12]
 80014e0:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	685b      	ldr	r3, [r3, #4]
 80014ea:	68ba      	ldr	r2, [r7, #8]
 80014ec:	441a      	add	r2, r3
 80014ee:	68fb      	ldr	r3, [r7, #12]
 80014f0:	681b      	ldr	r3, [r3, #0]
 80014f2:	429a      	cmp	r2, r3
 80014f4:	d118      	bne.n	8001528 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80014f6:	68fb      	ldr	r3, [r7, #12]
 80014f8:	681a      	ldr	r2, [r3, #0]
 80014fa:	4b15      	ldr	r3, [pc, #84]	@ (8001550 <prvInsertBlockIntoFreeList+0xb0>)
 80014fc:	681b      	ldr	r3, [r3, #0]
 80014fe:	429a      	cmp	r2, r3
 8001500:	d00d      	beq.n	800151e <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	685a      	ldr	r2, [r3, #4]
 8001506:	68fb      	ldr	r3, [r7, #12]
 8001508:	681b      	ldr	r3, [r3, #0]
 800150a:	685b      	ldr	r3, [r3, #4]
 800150c:	441a      	add	r2, r3
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8001512:	68fb      	ldr	r3, [r7, #12]
 8001514:	681b      	ldr	r3, [r3, #0]
 8001516:	681a      	ldr	r2, [r3, #0]
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	601a      	str	r2, [r3, #0]
 800151c:	e008      	b.n	8001530 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800151e:	4b0c      	ldr	r3, [pc, #48]	@ (8001550 <prvInsertBlockIntoFreeList+0xb0>)
 8001520:	681a      	ldr	r2, [r3, #0]
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	601a      	str	r2, [r3, #0]
 8001526:	e003      	b.n	8001530 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8001528:	68fb      	ldr	r3, [r7, #12]
 800152a:	681a      	ldr	r2, [r3, #0]
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8001530:	68fa      	ldr	r2, [r7, #12]
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	429a      	cmp	r2, r3
 8001536:	d002      	beq.n	800153e <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8001538:	68fb      	ldr	r3, [r7, #12]
 800153a:	687a      	ldr	r2, [r7, #4]
 800153c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800153e:	bf00      	nop
 8001540:	3714      	adds	r7, #20
 8001542:	46bd      	mov	sp, r7
 8001544:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001548:	4770      	bx	lr
 800154a:	bf00      	nop
 800154c:	20003d2c 	.word	0x20003d2c
 8001550:	20003d34 	.word	0x20003d34

08001554 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001554:	b580      	push	{r7, lr}
 8001556:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001558:	f001 fae2 	bl	8002b20 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800155c:	f000 f84e 	bl	80015fc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001560:	f000 fa74 	bl	8001a4c <MX_GPIO_Init>
  MX_DMA_Init();
 8001564:	f000 fa4a 	bl	80019fc <MX_DMA_Init>
  MX_USART2_UART_Init();
 8001568:	f000 fa1e 	bl	80019a8 <MX_USART2_UART_Init>
  MX_TIM2_Init();
 800156c:	f000 f8b0 	bl	80016d0 <MX_TIM2_Init>
  MX_TIM3_Init();
 8001570:	f000 f92e 	bl	80017d0 <MX_TIM3_Init>
  MX_TIM4_Init();
 8001574:	f000 f9a2 	bl	80018bc <MX_TIM4_Init>
  /* USER CODE BEGIN 2 */
  PWM_init(&StepperL, &htim2, TIM_CHANNEL_1);
 8001578:	2200      	movs	r2, #0
 800157a:	4917      	ldr	r1, [pc, #92]	@ (80015d8 <main+0x84>)
 800157c:	4817      	ldr	r0, [pc, #92]	@ (80015dc <main+0x88>)
 800157e:	f7ff fc9d 	bl	8000ebc <PWM_init>
  PWM_init(&StepperR, &htim2, TIM_CHANNEL_2);
 8001582:	2204      	movs	r2, #4
 8001584:	4914      	ldr	r1, [pc, #80]	@ (80015d8 <main+0x84>)
 8001586:	4816      	ldr	r0, [pc, #88]	@ (80015e0 <main+0x8c>)
 8001588:	f7ff fc98 	bl	8000ebc <PWM_init>
  PWM_init(&BrushMTR, &htim3, TIM_CHANNEL_1);
 800158c:	2200      	movs	r2, #0
 800158e:	4915      	ldr	r1, [pc, #84]	@ (80015e4 <main+0x90>)
 8001590:	4815      	ldr	r0, [pc, #84]	@ (80015e8 <main+0x94>)
 8001592:	f7ff fc93 	bl	8000ebc <PWM_init>

  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 8001596:	2100      	movs	r1, #0
 8001598:	480f      	ldr	r0, [pc, #60]	@ (80015d8 <main+0x84>)
 800159a:	f002 ffb5 	bl	8004508 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2);
 800159e:	2104      	movs	r1, #4
 80015a0:	480d      	ldr	r0, [pc, #52]	@ (80015d8 <main+0x84>)
 80015a2:	f002 ffb1 	bl	8004508 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 80015a6:	2100      	movs	r1, #0
 80015a8:	480e      	ldr	r0, [pc, #56]	@ (80015e4 <main+0x90>)
 80015aa:	f002 ffad 	bl	8004508 <HAL_TIM_PWM_Start>
  HAL_TIM_Base_Start(&htim4);
 80015ae:	480f      	ldr	r0, [pc, #60]	@ (80015ec <main+0x98>)
 80015b0:	f002 fe94 	bl	80042dc <HAL_TIM_Base_Start>
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_1);
 80015b4:	2100      	movs	r1, #0
 80015b6:	480d      	ldr	r0, [pc, #52]	@ (80015ec <main+0x98>)
 80015b8:	f002 ffa6 	bl	8004508 <HAL_TIM_PWM_Start>
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 80015bc:	f005 f8f6 	bl	80067ac <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 80015c0:	4a0b      	ldr	r2, [pc, #44]	@ (80015f0 <main+0x9c>)
 80015c2:	2100      	movs	r1, #0
 80015c4:	480b      	ldr	r0, [pc, #44]	@ (80015f4 <main+0xa0>)
 80015c6:	f005 f93b 	bl	8006840 <osThreadNew>
 80015ca:	4603      	mov	r3, r0
 80015cc:	4a0a      	ldr	r2, [pc, #40]	@ (80015f8 <main+0xa4>)
 80015ce:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 80015d0:	f005 f910 	bl	80067f4 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80015d4:	bf00      	nop
 80015d6:	e7fd      	b.n	80015d4 <main+0x80>
 80015d8:	20003d44 	.word	0x20003d44
 80015dc:	20003f38 	.word	0x20003f38
 80015e0:	20003f50 	.word	0x20003f50
 80015e4:	20003d8c 	.word	0x20003d8c
 80015e8:	20003f68 	.word	0x20003f68
 80015ec:	20003dd4 	.word	0x20003dd4
 80015f0:	08016860 	.word	0x08016860
 80015f4:	08001dc1 	.word	0x08001dc1
 80015f8:	20003f24 	.word	0x20003f24

080015fc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80015fc:	b580      	push	{r7, lr}
 80015fe:	b094      	sub	sp, #80	@ 0x50
 8001600:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001602:	f107 0320 	add.w	r3, r7, #32
 8001606:	2230      	movs	r2, #48	@ 0x30
 8001608:	2100      	movs	r1, #0
 800160a:	4618      	mov	r0, r3
 800160c:	f014 f908 	bl	8015820 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001610:	f107 030c 	add.w	r3, r7, #12
 8001614:	2200      	movs	r2, #0
 8001616:	601a      	str	r2, [r3, #0]
 8001618:	605a      	str	r2, [r3, #4]
 800161a:	609a      	str	r2, [r3, #8]
 800161c:	60da      	str	r2, [r3, #12]
 800161e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001620:	2300      	movs	r3, #0
 8001622:	60bb      	str	r3, [r7, #8]
 8001624:	4b28      	ldr	r3, [pc, #160]	@ (80016c8 <SystemClock_Config+0xcc>)
 8001626:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001628:	4a27      	ldr	r2, [pc, #156]	@ (80016c8 <SystemClock_Config+0xcc>)
 800162a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800162e:	6413      	str	r3, [r2, #64]	@ 0x40
 8001630:	4b25      	ldr	r3, [pc, #148]	@ (80016c8 <SystemClock_Config+0xcc>)
 8001632:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001634:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001638:	60bb      	str	r3, [r7, #8]
 800163a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800163c:	2300      	movs	r3, #0
 800163e:	607b      	str	r3, [r7, #4]
 8001640:	4b22      	ldr	r3, [pc, #136]	@ (80016cc <SystemClock_Config+0xd0>)
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	4a21      	ldr	r2, [pc, #132]	@ (80016cc <SystemClock_Config+0xd0>)
 8001646:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800164a:	6013      	str	r3, [r2, #0]
 800164c:	4b1f      	ldr	r3, [pc, #124]	@ (80016cc <SystemClock_Config+0xd0>)
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8001654:	607b      	str	r3, [r7, #4]
 8001656:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001658:	2302      	movs	r3, #2
 800165a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800165c:	2301      	movs	r3, #1
 800165e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001660:	2310      	movs	r3, #16
 8001662:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001664:	2302      	movs	r3, #2
 8001666:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001668:	2300      	movs	r3, #0
 800166a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 800166c:	2310      	movs	r3, #16
 800166e:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8001670:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 8001674:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8001676:	2304      	movs	r3, #4
 8001678:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800167a:	2304      	movs	r3, #4
 800167c:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800167e:	f107 0320 	add.w	r3, r7, #32
 8001682:	4618      	mov	r0, r3
 8001684:	f002 f910 	bl	80038a8 <HAL_RCC_OscConfig>
 8001688:	4603      	mov	r3, r0
 800168a:	2b00      	cmp	r3, #0
 800168c:	d001      	beq.n	8001692 <SystemClock_Config+0x96>
  {
    Error_Handler();
 800168e:	f000 fcc1 	bl	8002014 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001692:	230f      	movs	r3, #15
 8001694:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001696:	2302      	movs	r3, #2
 8001698:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800169a:	2300      	movs	r3, #0
 800169c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800169e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80016a2:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80016a4:	2300      	movs	r3, #0
 80016a6:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80016a8:	f107 030c 	add.w	r3, r7, #12
 80016ac:	2102      	movs	r1, #2
 80016ae:	4618      	mov	r0, r3
 80016b0:	f002 fb72 	bl	8003d98 <HAL_RCC_ClockConfig>
 80016b4:	4603      	mov	r3, r0
 80016b6:	2b00      	cmp	r3, #0
 80016b8:	d001      	beq.n	80016be <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80016ba:	f000 fcab 	bl	8002014 <Error_Handler>
  }
}
 80016be:	bf00      	nop
 80016c0:	3750      	adds	r7, #80	@ 0x50
 80016c2:	46bd      	mov	sp, r7
 80016c4:	bd80      	pop	{r7, pc}
 80016c6:	bf00      	nop
 80016c8:	40023800 	.word	0x40023800
 80016cc:	40007000 	.word	0x40007000

080016d0 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80016d0:	b580      	push	{r7, lr}
 80016d2:	b08e      	sub	sp, #56	@ 0x38
 80016d4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80016d6:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80016da:	2200      	movs	r2, #0
 80016dc:	601a      	str	r2, [r3, #0]
 80016de:	605a      	str	r2, [r3, #4]
 80016e0:	609a      	str	r2, [r3, #8]
 80016e2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80016e4:	f107 0320 	add.w	r3, r7, #32
 80016e8:	2200      	movs	r2, #0
 80016ea:	601a      	str	r2, [r3, #0]
 80016ec:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80016ee:	1d3b      	adds	r3, r7, #4
 80016f0:	2200      	movs	r2, #0
 80016f2:	601a      	str	r2, [r3, #0]
 80016f4:	605a      	str	r2, [r3, #4]
 80016f6:	609a      	str	r2, [r3, #8]
 80016f8:	60da      	str	r2, [r3, #12]
 80016fa:	611a      	str	r2, [r3, #16]
 80016fc:	615a      	str	r2, [r3, #20]
 80016fe:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001700:	4b32      	ldr	r3, [pc, #200]	@ (80017cc <MX_TIM2_Init+0xfc>)
 8001702:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001706:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 169;
 8001708:	4b30      	ldr	r3, [pc, #192]	@ (80017cc <MX_TIM2_Init+0xfc>)
 800170a:	22a9      	movs	r2, #169	@ 0xa9
 800170c:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800170e:	4b2f      	ldr	r3, [pc, #188]	@ (80017cc <MX_TIM2_Init+0xfc>)
 8001710:	2200      	movs	r2, #0
 8001712:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 999;
 8001714:	4b2d      	ldr	r3, [pc, #180]	@ (80017cc <MX_TIM2_Init+0xfc>)
 8001716:	f240 32e7 	movw	r2, #999	@ 0x3e7
 800171a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800171c:	4b2b      	ldr	r3, [pc, #172]	@ (80017cc <MX_TIM2_Init+0xfc>)
 800171e:	2200      	movs	r2, #0
 8001720:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001722:	4b2a      	ldr	r3, [pc, #168]	@ (80017cc <MX_TIM2_Init+0xfc>)
 8001724:	2200      	movs	r2, #0
 8001726:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001728:	4828      	ldr	r0, [pc, #160]	@ (80017cc <MX_TIM2_Init+0xfc>)
 800172a:	f002 fd87 	bl	800423c <HAL_TIM_Base_Init>
 800172e:	4603      	mov	r3, r0
 8001730:	2b00      	cmp	r3, #0
 8001732:	d001      	beq.n	8001738 <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 8001734:	f000 fc6e 	bl	8002014 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001738:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800173c:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800173e:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001742:	4619      	mov	r1, r3
 8001744:	4821      	ldr	r0, [pc, #132]	@ (80017cc <MX_TIM2_Init+0xfc>)
 8001746:	f003 f941 	bl	80049cc <HAL_TIM_ConfigClockSource>
 800174a:	4603      	mov	r3, r0
 800174c:	2b00      	cmp	r3, #0
 800174e:	d001      	beq.n	8001754 <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 8001750:	f000 fc60 	bl	8002014 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8001754:	481d      	ldr	r0, [pc, #116]	@ (80017cc <MX_TIM2_Init+0xfc>)
 8001756:	f002 fe7d 	bl	8004454 <HAL_TIM_PWM_Init>
 800175a:	4603      	mov	r3, r0
 800175c:	2b00      	cmp	r3, #0
 800175e:	d001      	beq.n	8001764 <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 8001760:	f000 fc58 	bl	8002014 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001764:	2300      	movs	r3, #0
 8001766:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001768:	2300      	movs	r3, #0
 800176a:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800176c:	f107 0320 	add.w	r3, r7, #32
 8001770:	4619      	mov	r1, r3
 8001772:	4816      	ldr	r0, [pc, #88]	@ (80017cc <MX_TIM2_Init+0xfc>)
 8001774:	f003 fcf2 	bl	800515c <HAL_TIMEx_MasterConfigSynchronization>
 8001778:	4603      	mov	r3, r0
 800177a:	2b00      	cmp	r3, #0
 800177c:	d001      	beq.n	8001782 <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 800177e:	f000 fc49 	bl	8002014 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001782:	2360      	movs	r3, #96	@ 0x60
 8001784:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001786:	2300      	movs	r3, #0
 8001788:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800178a:	2300      	movs	r3, #0
 800178c:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800178e:	2300      	movs	r3, #0
 8001790:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001792:	1d3b      	adds	r3, r7, #4
 8001794:	2200      	movs	r2, #0
 8001796:	4619      	mov	r1, r3
 8001798:	480c      	ldr	r0, [pc, #48]	@ (80017cc <MX_TIM2_Init+0xfc>)
 800179a:	f003 f855 	bl	8004848 <HAL_TIM_PWM_ConfigChannel>
 800179e:	4603      	mov	r3, r0
 80017a0:	2b00      	cmp	r3, #0
 80017a2:	d001      	beq.n	80017a8 <MX_TIM2_Init+0xd8>
  {
    Error_Handler();
 80017a4:	f000 fc36 	bl	8002014 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80017a8:	1d3b      	adds	r3, r7, #4
 80017aa:	2204      	movs	r2, #4
 80017ac:	4619      	mov	r1, r3
 80017ae:	4807      	ldr	r0, [pc, #28]	@ (80017cc <MX_TIM2_Init+0xfc>)
 80017b0:	f003 f84a 	bl	8004848 <HAL_TIM_PWM_ConfigChannel>
 80017b4:	4603      	mov	r3, r0
 80017b6:	2b00      	cmp	r3, #0
 80017b8:	d001      	beq.n	80017be <MX_TIM2_Init+0xee>
  {
    Error_Handler();
 80017ba:	f000 fc2b 	bl	8002014 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 80017be:	4803      	ldr	r0, [pc, #12]	@ (80017cc <MX_TIM2_Init+0xfc>)
 80017c0:	f000 fe0a 	bl	80023d8 <HAL_TIM_MspPostInit>

}
 80017c4:	bf00      	nop
 80017c6:	3738      	adds	r7, #56	@ 0x38
 80017c8:	46bd      	mov	sp, r7
 80017ca:	bd80      	pop	{r7, pc}
 80017cc:	20003d44 	.word	0x20003d44

080017d0 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80017d0:	b580      	push	{r7, lr}
 80017d2:	b08e      	sub	sp, #56	@ 0x38
 80017d4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80017d6:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80017da:	2200      	movs	r2, #0
 80017dc:	601a      	str	r2, [r3, #0]
 80017de:	605a      	str	r2, [r3, #4]
 80017e0:	609a      	str	r2, [r3, #8]
 80017e2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80017e4:	f107 0320 	add.w	r3, r7, #32
 80017e8:	2200      	movs	r2, #0
 80017ea:	601a      	str	r2, [r3, #0]
 80017ec:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80017ee:	1d3b      	adds	r3, r7, #4
 80017f0:	2200      	movs	r2, #0
 80017f2:	601a      	str	r2, [r3, #0]
 80017f4:	605a      	str	r2, [r3, #4]
 80017f6:	609a      	str	r2, [r3, #8]
 80017f8:	60da      	str	r2, [r3, #12]
 80017fa:	611a      	str	r2, [r3, #16]
 80017fc:	615a      	str	r2, [r3, #20]
 80017fe:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001800:	4b2c      	ldr	r3, [pc, #176]	@ (80018b4 <MX_TIM3_Init+0xe4>)
 8001802:	4a2d      	ldr	r2, [pc, #180]	@ (80018b8 <MX_TIM3_Init+0xe8>)
 8001804:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 169;
 8001806:	4b2b      	ldr	r3, [pc, #172]	@ (80018b4 <MX_TIM3_Init+0xe4>)
 8001808:	22a9      	movs	r2, #169	@ 0xa9
 800180a:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800180c:	4b29      	ldr	r3, [pc, #164]	@ (80018b4 <MX_TIM3_Init+0xe4>)
 800180e:	2200      	movs	r2, #0
 8001810:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 999;
 8001812:	4b28      	ldr	r3, [pc, #160]	@ (80018b4 <MX_TIM3_Init+0xe4>)
 8001814:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8001818:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800181a:	4b26      	ldr	r3, [pc, #152]	@ (80018b4 <MX_TIM3_Init+0xe4>)
 800181c:	2200      	movs	r2, #0
 800181e:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001820:	4b24      	ldr	r3, [pc, #144]	@ (80018b4 <MX_TIM3_Init+0xe4>)
 8001822:	2200      	movs	r2, #0
 8001824:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001826:	4823      	ldr	r0, [pc, #140]	@ (80018b4 <MX_TIM3_Init+0xe4>)
 8001828:	f002 fd08 	bl	800423c <HAL_TIM_Base_Init>
 800182c:	4603      	mov	r3, r0
 800182e:	2b00      	cmp	r3, #0
 8001830:	d001      	beq.n	8001836 <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 8001832:	f000 fbef 	bl	8002014 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001836:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800183a:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800183c:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001840:	4619      	mov	r1, r3
 8001842:	481c      	ldr	r0, [pc, #112]	@ (80018b4 <MX_TIM3_Init+0xe4>)
 8001844:	f003 f8c2 	bl	80049cc <HAL_TIM_ConfigClockSource>
 8001848:	4603      	mov	r3, r0
 800184a:	2b00      	cmp	r3, #0
 800184c:	d001      	beq.n	8001852 <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 800184e:	f000 fbe1 	bl	8002014 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8001852:	4818      	ldr	r0, [pc, #96]	@ (80018b4 <MX_TIM3_Init+0xe4>)
 8001854:	f002 fdfe 	bl	8004454 <HAL_TIM_PWM_Init>
 8001858:	4603      	mov	r3, r0
 800185a:	2b00      	cmp	r3, #0
 800185c:	d001      	beq.n	8001862 <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 800185e:	f000 fbd9 	bl	8002014 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001862:	2300      	movs	r3, #0
 8001864:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001866:	2300      	movs	r3, #0
 8001868:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800186a:	f107 0320 	add.w	r3, r7, #32
 800186e:	4619      	mov	r1, r3
 8001870:	4810      	ldr	r0, [pc, #64]	@ (80018b4 <MX_TIM3_Init+0xe4>)
 8001872:	f003 fc73 	bl	800515c <HAL_TIMEx_MasterConfigSynchronization>
 8001876:	4603      	mov	r3, r0
 8001878:	2b00      	cmp	r3, #0
 800187a:	d001      	beq.n	8001880 <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 800187c:	f000 fbca 	bl	8002014 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001880:	2360      	movs	r3, #96	@ 0x60
 8001882:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001884:	2300      	movs	r3, #0
 8001886:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001888:	2300      	movs	r3, #0
 800188a:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800188c:	2300      	movs	r3, #0
 800188e:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001890:	1d3b      	adds	r3, r7, #4
 8001892:	2200      	movs	r2, #0
 8001894:	4619      	mov	r1, r3
 8001896:	4807      	ldr	r0, [pc, #28]	@ (80018b4 <MX_TIM3_Init+0xe4>)
 8001898:	f002 ffd6 	bl	8004848 <HAL_TIM_PWM_ConfigChannel>
 800189c:	4603      	mov	r3, r0
 800189e:	2b00      	cmp	r3, #0
 80018a0:	d001      	beq.n	80018a6 <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 80018a2:	f000 fbb7 	bl	8002014 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 80018a6:	4803      	ldr	r0, [pc, #12]	@ (80018b4 <MX_TIM3_Init+0xe4>)
 80018a8:	f000 fd96 	bl	80023d8 <HAL_TIM_MspPostInit>

}
 80018ac:	bf00      	nop
 80018ae:	3738      	adds	r7, #56	@ 0x38
 80018b0:	46bd      	mov	sp, r7
 80018b2:	bd80      	pop	{r7, pc}
 80018b4:	20003d8c 	.word	0x20003d8c
 80018b8:	40000400 	.word	0x40000400

080018bc <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 80018bc:	b580      	push	{r7, lr}
 80018be:	b08e      	sub	sp, #56	@ 0x38
 80018c0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80018c2:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80018c6:	2200      	movs	r2, #0
 80018c8:	601a      	str	r2, [r3, #0]
 80018ca:	605a      	str	r2, [r3, #4]
 80018cc:	609a      	str	r2, [r3, #8]
 80018ce:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80018d0:	f107 0320 	add.w	r3, r7, #32
 80018d4:	2200      	movs	r2, #0
 80018d6:	601a      	str	r2, [r3, #0]
 80018d8:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80018da:	1d3b      	adds	r3, r7, #4
 80018dc:	2200      	movs	r2, #0
 80018de:	601a      	str	r2, [r3, #0]
 80018e0:	605a      	str	r2, [r3, #4]
 80018e2:	609a      	str	r2, [r3, #8]
 80018e4:	60da      	str	r2, [r3, #12]
 80018e6:	611a      	str	r2, [r3, #16]
 80018e8:	615a      	str	r2, [r3, #20]
 80018ea:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80018ec:	4b2c      	ldr	r3, [pc, #176]	@ (80019a0 <MX_TIM4_Init+0xe4>)
 80018ee:	4a2d      	ldr	r2, [pc, #180]	@ (80019a4 <MX_TIM4_Init+0xe8>)
 80018f0:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 169;
 80018f2:	4b2b      	ldr	r3, [pc, #172]	@ (80019a0 <MX_TIM4_Init+0xe4>)
 80018f4:	22a9      	movs	r2, #169	@ 0xa9
 80018f6:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80018f8:	4b29      	ldr	r3, [pc, #164]	@ (80019a0 <MX_TIM4_Init+0xe4>)
 80018fa:	2200      	movs	r2, #0
 80018fc:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 19999;
 80018fe:	4b28      	ldr	r3, [pc, #160]	@ (80019a0 <MX_TIM4_Init+0xe4>)
 8001900:	f644 621f 	movw	r2, #19999	@ 0x4e1f
 8001904:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001906:	4b26      	ldr	r3, [pc, #152]	@ (80019a0 <MX_TIM4_Init+0xe4>)
 8001908:	2200      	movs	r2, #0
 800190a:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800190c:	4b24      	ldr	r3, [pc, #144]	@ (80019a0 <MX_TIM4_Init+0xe4>)
 800190e:	2200      	movs	r2, #0
 8001910:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8001912:	4823      	ldr	r0, [pc, #140]	@ (80019a0 <MX_TIM4_Init+0xe4>)
 8001914:	f002 fc92 	bl	800423c <HAL_TIM_Base_Init>
 8001918:	4603      	mov	r3, r0
 800191a:	2b00      	cmp	r3, #0
 800191c:	d001      	beq.n	8001922 <MX_TIM4_Init+0x66>
  {
    Error_Handler();
 800191e:	f000 fb79 	bl	8002014 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001922:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001926:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8001928:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800192c:	4619      	mov	r1, r3
 800192e:	481c      	ldr	r0, [pc, #112]	@ (80019a0 <MX_TIM4_Init+0xe4>)
 8001930:	f003 f84c 	bl	80049cc <HAL_TIM_ConfigClockSource>
 8001934:	4603      	mov	r3, r0
 8001936:	2b00      	cmp	r3, #0
 8001938:	d001      	beq.n	800193e <MX_TIM4_Init+0x82>
  {
    Error_Handler();
 800193a:	f000 fb6b 	bl	8002014 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 800193e:	4818      	ldr	r0, [pc, #96]	@ (80019a0 <MX_TIM4_Init+0xe4>)
 8001940:	f002 fd88 	bl	8004454 <HAL_TIM_PWM_Init>
 8001944:	4603      	mov	r3, r0
 8001946:	2b00      	cmp	r3, #0
 8001948:	d001      	beq.n	800194e <MX_TIM4_Init+0x92>
  {
    Error_Handler();
 800194a:	f000 fb63 	bl	8002014 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800194e:	2300      	movs	r3, #0
 8001950:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001952:	2300      	movs	r3, #0
 8001954:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001956:	f107 0320 	add.w	r3, r7, #32
 800195a:	4619      	mov	r1, r3
 800195c:	4810      	ldr	r0, [pc, #64]	@ (80019a0 <MX_TIM4_Init+0xe4>)
 800195e:	f003 fbfd 	bl	800515c <HAL_TIMEx_MasterConfigSynchronization>
 8001962:	4603      	mov	r3, r0
 8001964:	2b00      	cmp	r3, #0
 8001966:	d001      	beq.n	800196c <MX_TIM4_Init+0xb0>
  {
    Error_Handler();
 8001968:	f000 fb54 	bl	8002014 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800196c:	2360      	movs	r3, #96	@ 0x60
 800196e:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001970:	2300      	movs	r3, #0
 8001972:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001974:	2300      	movs	r3, #0
 8001976:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001978:	2300      	movs	r3, #0
 800197a:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800197c:	1d3b      	adds	r3, r7, #4
 800197e:	2200      	movs	r2, #0
 8001980:	4619      	mov	r1, r3
 8001982:	4807      	ldr	r0, [pc, #28]	@ (80019a0 <MX_TIM4_Init+0xe4>)
 8001984:	f002 ff60 	bl	8004848 <HAL_TIM_PWM_ConfigChannel>
 8001988:	4603      	mov	r3, r0
 800198a:	2b00      	cmp	r3, #0
 800198c:	d001      	beq.n	8001992 <MX_TIM4_Init+0xd6>
  {
    Error_Handler();
 800198e:	f000 fb41 	bl	8002014 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8001992:	4803      	ldr	r0, [pc, #12]	@ (80019a0 <MX_TIM4_Init+0xe4>)
 8001994:	f000 fd20 	bl	80023d8 <HAL_TIM_MspPostInit>

}
 8001998:	bf00      	nop
 800199a:	3738      	adds	r7, #56	@ 0x38
 800199c:	46bd      	mov	sp, r7
 800199e:	bd80      	pop	{r7, pc}
 80019a0:	20003dd4 	.word	0x20003dd4
 80019a4:	40000800 	.word	0x40000800

080019a8 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80019a8:	b580      	push	{r7, lr}
 80019aa:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80019ac:	4b11      	ldr	r3, [pc, #68]	@ (80019f4 <MX_USART2_UART_Init+0x4c>)
 80019ae:	4a12      	ldr	r2, [pc, #72]	@ (80019f8 <MX_USART2_UART_Init+0x50>)
 80019b0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80019b2:	4b10      	ldr	r3, [pc, #64]	@ (80019f4 <MX_USART2_UART_Init+0x4c>)
 80019b4:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80019b8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80019ba:	4b0e      	ldr	r3, [pc, #56]	@ (80019f4 <MX_USART2_UART_Init+0x4c>)
 80019bc:	2200      	movs	r2, #0
 80019be:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80019c0:	4b0c      	ldr	r3, [pc, #48]	@ (80019f4 <MX_USART2_UART_Init+0x4c>)
 80019c2:	2200      	movs	r2, #0
 80019c4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80019c6:	4b0b      	ldr	r3, [pc, #44]	@ (80019f4 <MX_USART2_UART_Init+0x4c>)
 80019c8:	2200      	movs	r2, #0
 80019ca:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80019cc:	4b09      	ldr	r3, [pc, #36]	@ (80019f4 <MX_USART2_UART_Init+0x4c>)
 80019ce:	220c      	movs	r2, #12
 80019d0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80019d2:	4b08      	ldr	r3, [pc, #32]	@ (80019f4 <MX_USART2_UART_Init+0x4c>)
 80019d4:	2200      	movs	r2, #0
 80019d6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80019d8:	4b06      	ldr	r3, [pc, #24]	@ (80019f4 <MX_USART2_UART_Init+0x4c>)
 80019da:	2200      	movs	r2, #0
 80019dc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80019de:	4805      	ldr	r0, [pc, #20]	@ (80019f4 <MX_USART2_UART_Init+0x4c>)
 80019e0:	f003 fc3e 	bl	8005260 <HAL_UART_Init>
 80019e4:	4603      	mov	r3, r0
 80019e6:	2b00      	cmp	r3, #0
 80019e8:	d001      	beq.n	80019ee <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80019ea:	f000 fb13 	bl	8002014 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80019ee:	bf00      	nop
 80019f0:	bd80      	pop	{r7, pc}
 80019f2:	bf00      	nop
 80019f4:	20003e1c 	.word	0x20003e1c
 80019f8:	40004400 	.word	0x40004400

080019fc <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80019fc:	b580      	push	{r7, lr}
 80019fe:	b082      	sub	sp, #8
 8001a00:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001a02:	2300      	movs	r3, #0
 8001a04:	607b      	str	r3, [r7, #4]
 8001a06:	4b10      	ldr	r3, [pc, #64]	@ (8001a48 <MX_DMA_Init+0x4c>)
 8001a08:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a0a:	4a0f      	ldr	r2, [pc, #60]	@ (8001a48 <MX_DMA_Init+0x4c>)
 8001a0c:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001a10:	6313      	str	r3, [r2, #48]	@ 0x30
 8001a12:	4b0d      	ldr	r3, [pc, #52]	@ (8001a48 <MX_DMA_Init+0x4c>)
 8001a14:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a16:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001a1a:	607b      	str	r3, [r7, #4]
 8001a1c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 5, 0);
 8001a1e:	2200      	movs	r2, #0
 8001a20:	2105      	movs	r1, #5
 8001a22:	2010      	movs	r0, #16
 8001a24:	f001 f976 	bl	8002d14 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8001a28:	2010      	movs	r0, #16
 8001a2a:	f001 f98f 	bl	8002d4c <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 5, 0);
 8001a2e:	2200      	movs	r2, #0
 8001a30:	2105      	movs	r1, #5
 8001a32:	2011      	movs	r0, #17
 8001a34:	f001 f96e 	bl	8002d14 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 8001a38:	2011      	movs	r0, #17
 8001a3a:	f001 f987 	bl	8002d4c <HAL_NVIC_EnableIRQ>

}
 8001a3e:	bf00      	nop
 8001a40:	3708      	adds	r7, #8
 8001a42:	46bd      	mov	sp, r7
 8001a44:	bd80      	pop	{r7, pc}
 8001a46:	bf00      	nop
 8001a48:	40023800 	.word	0x40023800

08001a4c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001a4c:	b580      	push	{r7, lr}
 8001a4e:	b08a      	sub	sp, #40	@ 0x28
 8001a50:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a52:	f107 0314 	add.w	r3, r7, #20
 8001a56:	2200      	movs	r2, #0
 8001a58:	601a      	str	r2, [r3, #0]
 8001a5a:	605a      	str	r2, [r3, #4]
 8001a5c:	609a      	str	r2, [r3, #8]
 8001a5e:	60da      	str	r2, [r3, #12]
 8001a60:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001a62:	2300      	movs	r3, #0
 8001a64:	613b      	str	r3, [r7, #16]
 8001a66:	4b39      	ldr	r3, [pc, #228]	@ (8001b4c <MX_GPIO_Init+0x100>)
 8001a68:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a6a:	4a38      	ldr	r2, [pc, #224]	@ (8001b4c <MX_GPIO_Init+0x100>)
 8001a6c:	f043 0304 	orr.w	r3, r3, #4
 8001a70:	6313      	str	r3, [r2, #48]	@ 0x30
 8001a72:	4b36      	ldr	r3, [pc, #216]	@ (8001b4c <MX_GPIO_Init+0x100>)
 8001a74:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a76:	f003 0304 	and.w	r3, r3, #4
 8001a7a:	613b      	str	r3, [r7, #16]
 8001a7c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001a7e:	2300      	movs	r3, #0
 8001a80:	60fb      	str	r3, [r7, #12]
 8001a82:	4b32      	ldr	r3, [pc, #200]	@ (8001b4c <MX_GPIO_Init+0x100>)
 8001a84:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a86:	4a31      	ldr	r2, [pc, #196]	@ (8001b4c <MX_GPIO_Init+0x100>)
 8001a88:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001a8c:	6313      	str	r3, [r2, #48]	@ 0x30
 8001a8e:	4b2f      	ldr	r3, [pc, #188]	@ (8001b4c <MX_GPIO_Init+0x100>)
 8001a90:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a92:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001a96:	60fb      	str	r3, [r7, #12]
 8001a98:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a9a:	2300      	movs	r3, #0
 8001a9c:	60bb      	str	r3, [r7, #8]
 8001a9e:	4b2b      	ldr	r3, [pc, #172]	@ (8001b4c <MX_GPIO_Init+0x100>)
 8001aa0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001aa2:	4a2a      	ldr	r2, [pc, #168]	@ (8001b4c <MX_GPIO_Init+0x100>)
 8001aa4:	f043 0301 	orr.w	r3, r3, #1
 8001aa8:	6313      	str	r3, [r2, #48]	@ 0x30
 8001aaa:	4b28      	ldr	r3, [pc, #160]	@ (8001b4c <MX_GPIO_Init+0x100>)
 8001aac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001aae:	f003 0301 	and.w	r3, r3, #1
 8001ab2:	60bb      	str	r3, [r7, #8]
 8001ab4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001ab6:	2300      	movs	r3, #0
 8001ab8:	607b      	str	r3, [r7, #4]
 8001aba:	4b24      	ldr	r3, [pc, #144]	@ (8001b4c <MX_GPIO_Init+0x100>)
 8001abc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001abe:	4a23      	ldr	r2, [pc, #140]	@ (8001b4c <MX_GPIO_Init+0x100>)
 8001ac0:	f043 0302 	orr.w	r3, r3, #2
 8001ac4:	6313      	str	r3, [r2, #48]	@ 0x30
 8001ac6:	4b21      	ldr	r3, [pc, #132]	@ (8001b4c <MX_GPIO_Init+0x100>)
 8001ac8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001aca:	f003 0302 	and.w	r3, r3, #2
 8001ace:	607b      	str	r3, [r7, #4]
 8001ad0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7|GPIO_PIN_9, GPIO_PIN_RESET);
 8001ad2:	2200      	movs	r2, #0
 8001ad4:	f44f 7120 	mov.w	r1, #640	@ 0x280
 8001ad8:	481d      	ldr	r0, [pc, #116]	@ (8001b50 <MX_GPIO_Init+0x104>)
 8001ada:	f001 fecb 	bl	8003874 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8, GPIO_PIN_RESET);
 8001ade:	2200      	movs	r2, #0
 8001ae0:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001ae4:	481b      	ldr	r0, [pc, #108]	@ (8001b54 <MX_GPIO_Init+0x108>)
 8001ae6:	f001 fec5 	bl	8003874 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001aea:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001aee:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001af0:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8001af4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001af6:	2300      	movs	r3, #0
 8001af8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001afa:	f107 0314 	add.w	r3, r7, #20
 8001afe:	4619      	mov	r1, r3
 8001b00:	4815      	ldr	r0, [pc, #84]	@ (8001b58 <MX_GPIO_Init+0x10c>)
 8001b02:	f001 fd33 	bl	800356c <HAL_GPIO_Init>

  /*Configure GPIO pins : PA7 PA9 */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_9;
 8001b06:	f44f 7320 	mov.w	r3, #640	@ 0x280
 8001b0a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001b0c:	2301      	movs	r3, #1
 8001b0e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b10:	2300      	movs	r3, #0
 8001b12:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b14:	2300      	movs	r3, #0
 8001b16:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b18:	f107 0314 	add.w	r3, r7, #20
 8001b1c:	4619      	mov	r1, r3
 8001b1e:	480c      	ldr	r0, [pc, #48]	@ (8001b50 <MX_GPIO_Init+0x104>)
 8001b20:	f001 fd24 	bl	800356c <HAL_GPIO_Init>

  /*Configure GPIO pin : PB8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001b24:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001b28:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001b2a:	2301      	movs	r3, #1
 8001b2c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b2e:	2300      	movs	r3, #0
 8001b30:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b32:	2300      	movs	r3, #0
 8001b34:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001b36:	f107 0314 	add.w	r3, r7, #20
 8001b3a:	4619      	mov	r1, r3
 8001b3c:	4805      	ldr	r0, [pc, #20]	@ (8001b54 <MX_GPIO_Init+0x108>)
 8001b3e:	f001 fd15 	bl	800356c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001b42:	bf00      	nop
 8001b44:	3728      	adds	r7, #40	@ 0x28
 8001b46:	46bd      	mov	sp, r7
 8001b48:	bd80      	pop	{r7, pc}
 8001b4a:	bf00      	nop
 8001b4c:	40023800 	.word	0x40023800
 8001b50:	40020000 	.word	0x40020000
 8001b54:	40020400 	.word	0x40020400
 8001b58:	40020800 	.word	0x40020800

08001b5c <StpperMotorControlled>:
    // Map from 1000-2010 to Min-Max
    return (int16_t)(((int32_t)(inputValue - 1000) * (Max - Min)) / 1010 + Min);
}

void StpperMotorControlled()
{
 8001b5c:	b580      	push	{r7, lr}
 8001b5e:	af00      	add	r7, sp, #0
	if (Speed_L < -170){
 8001b60:	4b49      	ldr	r3, [pc, #292]	@ (8001c88 <StpperMotorControlled+0x12c>)
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	f113 0faa 	cmn.w	r3, #170	@ 0xaa
 8001b68:	da1b      	bge.n	8001ba2 <StpperMotorControlled+0x46>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, SET);
 8001b6a:	2201      	movs	r2, #1
 8001b6c:	2180      	movs	r1, #128	@ 0x80
 8001b6e:	4847      	ldr	r0, [pc, #284]	@ (8001c8c <StpperMotorControlled+0x130>)
 8001b70:	f001 fe80 	bl	8003874 <HAL_GPIO_WritePin>
		PWM_write_duty(&StepperL, fabs(Speed_L), 50);
 8001b74:	4b44      	ldr	r3, [pc, #272]	@ (8001c88 <StpperMotorControlled+0x12c>)
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	4618      	mov	r0, r3
 8001b7a:	f7fe fceb 	bl	8000554 <__aeabi_i2d>
 8001b7e:	4602      	mov	r2, r0
 8001b80:	460b      	mov	r3, r1
 8001b82:	4610      	mov	r0, r2
 8001b84:	4619      	mov	r1, r3
 8001b86:	f7fe ff81 	bl	8000a8c <__aeabi_d2f>
 8001b8a:	ee07 0a90 	vmov	s15, r0
 8001b8e:	eef0 7ae7 	vabs.f32	s15, s15
 8001b92:	eddf 0a3f 	vldr	s1, [pc, #252]	@ 8001c90 <StpperMotorControlled+0x134>
 8001b96:	eeb0 0a67 	vmov.f32	s0, s15
 8001b9a:	483e      	ldr	r0, [pc, #248]	@ (8001c94 <StpperMotorControlled+0x138>)
 8001b9c:	f7ff f9b0 	bl	8000f00 <PWM_write_duty>
 8001ba0:	e026      	b.n	8001bf0 <StpperMotorControlled+0x94>
	}
	else if (Speed_L > 170){
 8001ba2:	4b39      	ldr	r3, [pc, #228]	@ (8001c88 <StpperMotorControlled+0x12c>)
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	2baa      	cmp	r3, #170	@ 0xaa
 8001ba8:	dd1b      	ble.n	8001be2 <StpperMotorControlled+0x86>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, RESET);
 8001baa:	2200      	movs	r2, #0
 8001bac:	2180      	movs	r1, #128	@ 0x80
 8001bae:	4837      	ldr	r0, [pc, #220]	@ (8001c8c <StpperMotorControlled+0x130>)
 8001bb0:	f001 fe60 	bl	8003874 <HAL_GPIO_WritePin>
		PWM_write_duty(&StepperL, fabs(Speed_L), 50);
 8001bb4:	4b34      	ldr	r3, [pc, #208]	@ (8001c88 <StpperMotorControlled+0x12c>)
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	4618      	mov	r0, r3
 8001bba:	f7fe fccb 	bl	8000554 <__aeabi_i2d>
 8001bbe:	4602      	mov	r2, r0
 8001bc0:	460b      	mov	r3, r1
 8001bc2:	4610      	mov	r0, r2
 8001bc4:	4619      	mov	r1, r3
 8001bc6:	f7fe ff61 	bl	8000a8c <__aeabi_d2f>
 8001bca:	ee07 0a90 	vmov	s15, r0
 8001bce:	eef0 7ae7 	vabs.f32	s15, s15
 8001bd2:	eddf 0a2f 	vldr	s1, [pc, #188]	@ 8001c90 <StpperMotorControlled+0x134>
 8001bd6:	eeb0 0a67 	vmov.f32	s0, s15
 8001bda:	482e      	ldr	r0, [pc, #184]	@ (8001c94 <StpperMotorControlled+0x138>)
 8001bdc:	f7ff f990 	bl	8000f00 <PWM_write_duty>
 8001be0:	e006      	b.n	8001bf0 <StpperMotorControlled+0x94>
	}
	else{
		PWM_write_duty(&StepperL, 0, 50);
 8001be2:	eddf 0a2b 	vldr	s1, [pc, #172]	@ 8001c90 <StpperMotorControlled+0x134>
 8001be6:	ed9f 0a2c 	vldr	s0, [pc, #176]	@ 8001c98 <StpperMotorControlled+0x13c>
 8001bea:	482a      	ldr	r0, [pc, #168]	@ (8001c94 <StpperMotorControlled+0x138>)
 8001bec:	f7ff f988 	bl	8000f00 <PWM_write_duty>
	}

	if (Speed_R < -170){
 8001bf0:	4b2a      	ldr	r3, [pc, #168]	@ (8001c9c <StpperMotorControlled+0x140>)
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	f113 0faa 	cmn.w	r3, #170	@ 0xaa
 8001bf8:	da1c      	bge.n	8001c34 <StpperMotorControlled+0xd8>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, RESET);
 8001bfa:	2200      	movs	r2, #0
 8001bfc:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001c00:	4822      	ldr	r0, [pc, #136]	@ (8001c8c <StpperMotorControlled+0x130>)
 8001c02:	f001 fe37 	bl	8003874 <HAL_GPIO_WritePin>
		PWM_write_duty(&StepperR, fabs(Speed_R), 50);
 8001c06:	4b25      	ldr	r3, [pc, #148]	@ (8001c9c <StpperMotorControlled+0x140>)
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	4618      	mov	r0, r3
 8001c0c:	f7fe fca2 	bl	8000554 <__aeabi_i2d>
 8001c10:	4602      	mov	r2, r0
 8001c12:	460b      	mov	r3, r1
 8001c14:	4610      	mov	r0, r2
 8001c16:	4619      	mov	r1, r3
 8001c18:	f7fe ff38 	bl	8000a8c <__aeabi_d2f>
 8001c1c:	ee07 0a90 	vmov	s15, r0
 8001c20:	eef0 7ae7 	vabs.f32	s15, s15
 8001c24:	eddf 0a1a 	vldr	s1, [pc, #104]	@ 8001c90 <StpperMotorControlled+0x134>
 8001c28:	eeb0 0a67 	vmov.f32	s0, s15
 8001c2c:	481c      	ldr	r0, [pc, #112]	@ (8001ca0 <StpperMotorControlled+0x144>)
 8001c2e:	f7ff f967 	bl	8000f00 <PWM_write_duty>
//				PWM_write_duty(&StepperL, 0, 50);
//				PWM_write_duty(&StepperR, 0, 50);
//			}
//		}
//	}
}
 8001c32:	e027      	b.n	8001c84 <StpperMotorControlled+0x128>
	else if (Speed_R > 170){
 8001c34:	4b19      	ldr	r3, [pc, #100]	@ (8001c9c <StpperMotorControlled+0x140>)
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	2baa      	cmp	r3, #170	@ 0xaa
 8001c3a:	dd1c      	ble.n	8001c76 <StpperMotorControlled+0x11a>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, SET);
 8001c3c:	2201      	movs	r2, #1
 8001c3e:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001c42:	4812      	ldr	r0, [pc, #72]	@ (8001c8c <StpperMotorControlled+0x130>)
 8001c44:	f001 fe16 	bl	8003874 <HAL_GPIO_WritePin>
		PWM_write_duty(&StepperR, fabs(Speed_R), 50);
 8001c48:	4b14      	ldr	r3, [pc, #80]	@ (8001c9c <StpperMotorControlled+0x140>)
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	4618      	mov	r0, r3
 8001c4e:	f7fe fc81 	bl	8000554 <__aeabi_i2d>
 8001c52:	4602      	mov	r2, r0
 8001c54:	460b      	mov	r3, r1
 8001c56:	4610      	mov	r0, r2
 8001c58:	4619      	mov	r1, r3
 8001c5a:	f7fe ff17 	bl	8000a8c <__aeabi_d2f>
 8001c5e:	ee07 0a90 	vmov	s15, r0
 8001c62:	eef0 7ae7 	vabs.f32	s15, s15
 8001c66:	eddf 0a0a 	vldr	s1, [pc, #40]	@ 8001c90 <StpperMotorControlled+0x134>
 8001c6a:	eeb0 0a67 	vmov.f32	s0, s15
 8001c6e:	480c      	ldr	r0, [pc, #48]	@ (8001ca0 <StpperMotorControlled+0x144>)
 8001c70:	f7ff f946 	bl	8000f00 <PWM_write_duty>
}
 8001c74:	e006      	b.n	8001c84 <StpperMotorControlled+0x128>
		PWM_write_duty(&StepperR, 0, 50);
 8001c76:	eddf 0a06 	vldr	s1, [pc, #24]	@ 8001c90 <StpperMotorControlled+0x134>
 8001c7a:	ed9f 0a07 	vldr	s0, [pc, #28]	@ 8001c98 <StpperMotorControlled+0x13c>
 8001c7e:	4808      	ldr	r0, [pc, #32]	@ (8001ca0 <StpperMotorControlled+0x144>)
 8001c80:	f7ff f93e 	bl	8000f00 <PWM_write_duty>
}
 8001c84:	bf00      	nop
 8001c86:	bd80      	pop	{r7, pc}
 8001c88:	20003f28 	.word	0x20003f28
 8001c8c:	40020000 	.word	0x40020000
 8001c90:	42480000 	.word	0x42480000
 8001c94:	20003f38 	.word	0x20003f38
 8001c98:	00000000 	.word	0x00000000
 8001c9c:	20003f2c 	.word	0x20003f2c
 8001ca0:	20003f50 	.word	0x20003f50

08001ca4 <BrusheMotorControlled>:
void BrusheMotorControlled()
{
 8001ca4:	b580      	push	{r7, lr}
 8001ca6:	af00      	add	r7, sp, #0
	if (Brush)
 8001ca8:	4b0d      	ldr	r3, [pc, #52]	@ (8001ce0 <BrusheMotorControlled+0x3c>)
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	2b00      	cmp	r3, #0
 8001cae:	d00d      	beq.n	8001ccc <BrusheMotorControlled+0x28>
	{
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8, RESET);
 8001cb0:	2200      	movs	r2, #0
 8001cb2:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001cb6:	480b      	ldr	r0, [pc, #44]	@ (8001ce4 <BrusheMotorControlled+0x40>)
 8001cb8:	f001 fddc 	bl	8003874 <HAL_GPIO_WritePin>
		PWM_write_duty(&BrushMTR, 2000, 100);
 8001cbc:	eddf 0a0a 	vldr	s1, [pc, #40]	@ 8001ce8 <BrusheMotorControlled+0x44>
 8001cc0:	ed9f 0a0a 	vldr	s0, [pc, #40]	@ 8001cec <BrusheMotorControlled+0x48>
 8001cc4:	480a      	ldr	r0, [pc, #40]	@ (8001cf0 <BrusheMotorControlled+0x4c>)
 8001cc6:	f7ff f91b 	bl	8000f00 <PWM_write_duty>
	}
	else
	{
		PWM_write_duty(&BrushMTR, 2000, 0);
	}
}
 8001cca:	e006      	b.n	8001cda <BrusheMotorControlled+0x36>
		PWM_write_duty(&BrushMTR, 2000, 0);
 8001ccc:	eddf 0a09 	vldr	s1, [pc, #36]	@ 8001cf4 <BrusheMotorControlled+0x50>
 8001cd0:	ed9f 0a06 	vldr	s0, [pc, #24]	@ 8001cec <BrusheMotorControlled+0x48>
 8001cd4:	4806      	ldr	r0, [pc, #24]	@ (8001cf0 <BrusheMotorControlled+0x4c>)
 8001cd6:	f7ff f913 	bl	8000f00 <PWM_write_duty>
}
 8001cda:	bf00      	nop
 8001cdc:	bd80      	pop	{r7, pc}
 8001cde:	bf00      	nop
 8001ce0:	20003f30 	.word	0x20003f30
 8001ce4:	40020400 	.word	0x40020400
 8001ce8:	42c80000 	.word	0x42c80000
 8001cec:	44fa0000 	.word	0x44fa0000
 8001cf0:	20003f68 	.word	0x20003f68
 8001cf4:	00000000 	.word	0x00000000

08001cf8 <ServoControlled>:
void ServoControlled()
{
 8001cf8:	b480      	push	{r7}
 8001cfa:	af00      	add	r7, sp, #0
	if (Servo_switch)
 8001cfc:	4b09      	ldr	r3, [pc, #36]	@ (8001d24 <ServoControlled+0x2c>)
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	2b00      	cmp	r3, #0
 8001d02:	d005      	beq.n	8001d10 <ServoControlled+0x18>
//		for(int i = 0;i <= 2500;i++)
//		{
//			__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_1, i);
//		}

		__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_1, 5250);
 8001d04:	4b08      	ldr	r3, [pc, #32]	@ (8001d28 <ServoControlled+0x30>)
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	f241 4282 	movw	r2, #5250	@ 0x1482
 8001d0c:	635a      	str	r2, [r3, #52]	@ 0x34
	}
	else
	{
		__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_1, 600);
	}
}
 8001d0e:	e004      	b.n	8001d1a <ServoControlled+0x22>
		__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_1, 600);
 8001d10:	4b05      	ldr	r3, [pc, #20]	@ (8001d28 <ServoControlled+0x30>)
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	f44f 7216 	mov.w	r2, #600	@ 0x258
 8001d18:	635a      	str	r2, [r3, #52]	@ 0x34
}
 8001d1a:	bf00      	nop
 8001d1c:	46bd      	mov	sp, r7
 8001d1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d22:	4770      	bx	lr
 8001d24:	20003f34 	.word	0x20003f34
 8001d28:	20003dd4 	.word	0x20003dd4

08001d2c <subscription_callback>:
void subscription_callback(const void * msgin)
{
 8001d2c:	b480      	push	{r7}
 8001d2e:	b085      	sub	sp, #20
 8001d30:	af00      	add	r7, sp, #0
 8001d32:	6078      	str	r0, [r7, #4]
    const std_msgs__msg__Int32 * msg = (const std_msgs__msg__Int32 *)msgin;
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	60fb      	str	r3, [r7, #12]

//    Speed = msg->data;
    Speed_L = msg->data;
 8001d38:	68fb      	ldr	r3, [r7, #12]
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	4a03      	ldr	r2, [pc, #12]	@ (8001d4c <subscription_callback+0x20>)
 8001d3e:	6013      	str	r3, [r2, #0]
}
 8001d40:	bf00      	nop
 8001d42:	3714      	adds	r7, #20
 8001d44:	46bd      	mov	sp, r7
 8001d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d4a:	4770      	bx	lr
 8001d4c:	20003f28 	.word	0x20003f28

08001d50 <subscription_callback_R>:

void subscription_callback_R(const void * msgin)
{
 8001d50:	b480      	push	{r7}
 8001d52:	b085      	sub	sp, #20
 8001d54:	af00      	add	r7, sp, #0
 8001d56:	6078      	str	r0, [r7, #4]
    const std_msgs__msg__Int32 * msg = (const std_msgs__msg__Int32 *)msgin;
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	60fb      	str	r3, [r7, #12]
    Speed_R = msg->data;  // Update Turn (or handle the message however you need)
 8001d5c:	68fb      	ldr	r3, [r7, #12]
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	4a03      	ldr	r2, [pc, #12]	@ (8001d70 <subscription_callback_R+0x20>)
 8001d62:	6013      	str	r3, [r2, #0]
}
 8001d64:	bf00      	nop
 8001d66:	3714      	adds	r7, #20
 8001d68:	46bd      	mov	sp, r7
 8001d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d6e:	4770      	bx	lr
 8001d70:	20003f2c 	.word	0x20003f2c

08001d74 <subscription_callback_servo>:

void subscription_callback_servo(const void * msgin)
{
 8001d74:	b480      	push	{r7}
 8001d76:	b085      	sub	sp, #20
 8001d78:	af00      	add	r7, sp, #0
 8001d7a:	6078      	str	r0, [r7, #4]
	const std_msgs__msg__Int32 * msg = (const std_msgs__msg__Int32 *)msgin;
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	60fb      	str	r3, [r7, #12]
	Servo_switch = msg->data;
 8001d80:	68fb      	ldr	r3, [r7, #12]
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	4a03      	ldr	r2, [pc, #12]	@ (8001d94 <subscription_callback_servo+0x20>)
 8001d86:	6013      	str	r3, [r2, #0]

}
 8001d88:	bf00      	nop
 8001d8a:	3714      	adds	r7, #20
 8001d8c:	46bd      	mov	sp, r7
 8001d8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d92:	4770      	bx	lr
 8001d94:	20003f34 	.word	0x20003f34

08001d98 <subscription_callback_Brush>:

void subscription_callback_Brush(const void * msgin)
{
 8001d98:	b480      	push	{r7}
 8001d9a:	b085      	sub	sp, #20
 8001d9c:	af00      	add	r7, sp, #0
 8001d9e:	6078      	str	r0, [r7, #4]
	const std_msgs__msg__Int32 * msg = (const std_msgs__msg__Int32 *)msgin;
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	60fb      	str	r3, [r7, #12]
	Brush = msg->data;
 8001da4:	68fb      	ldr	r3, [r7, #12]
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	4a03      	ldr	r2, [pc, #12]	@ (8001db8 <subscription_callback_Brush+0x20>)
 8001daa:	6013      	str	r3, [r2, #0]

}
 8001dac:	bf00      	nop
 8001dae:	3714      	adds	r7, #20
 8001db0:	46bd      	mov	sp, r7
 8001db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001db6:	4770      	bx	lr
 8001db8:	20003f30 	.word	0x20003f30
 8001dbc:	00000000 	.word	0x00000000

08001dc0 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8001dc0:	b5b0      	push	{r4, r5, r7, lr}
 8001dc2:	b0d0      	sub	sp, #320	@ 0x140
 8001dc4:	af02      	add	r7, sp, #8
 8001dc6:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8001dca:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8001dce:	6018      	str	r0, [r3, #0]
//    msg.data++;
//    osDelay(10);
//    rclc_executor_spin_some(&executor, RCL_MS_TO_NS(100));
//  }
//
	 setenv("ROS_DOMAIN_ID", "1", 1);
 8001dd0:	2201      	movs	r2, #1
 8001dd2:	4971      	ldr	r1, [pc, #452]	@ (8001f98 <StartDefaultTask+0x1d8>)
 8001dd4:	4871      	ldr	r0, [pc, #452]	@ (8001f9c <StartDefaultTask+0x1dc>)
 8001dd6:	f013 fad3 	bl	8015380 <setenv>


	 rmw_uros_set_custom_transport(
 8001dda:	4b71      	ldr	r3, [pc, #452]	@ (8001fa0 <StartDefaultTask+0x1e0>)
 8001ddc:	9301      	str	r3, [sp, #4]
 8001dde:	4b71      	ldr	r3, [pc, #452]	@ (8001fa4 <StartDefaultTask+0x1e4>)
 8001de0:	9300      	str	r3, [sp, #0]
 8001de2:	4b71      	ldr	r3, [pc, #452]	@ (8001fa8 <StartDefaultTask+0x1e8>)
 8001de4:	4a71      	ldr	r2, [pc, #452]	@ (8001fac <StartDefaultTask+0x1ec>)
 8001de6:	4972      	ldr	r1, [pc, #456]	@ (8001fb0 <StartDefaultTask+0x1f0>)
 8001de8:	2001      	movs	r0, #1
 8001dea:	f008 fb29 	bl	800a440 <rmw_uros_set_custom_transport>
	    cubemx_transport_open,
	    cubemx_transport_close,
	    cubemx_transport_write,
	    cubemx_transport_read);

	  rcl_allocator_t freeRTOS_allocator = rcutils_get_zero_initialized_allocator();
 8001dee:	f507 7392 	add.w	r3, r7, #292	@ 0x124
 8001df2:	4618      	mov	r0, r3
 8001df4:	f008 fa44 	bl	800a280 <rcutils_get_zero_initialized_allocator>
	  freeRTOS_allocator.allocate = microros_allocate;
 8001df8:	4b6e      	ldr	r3, [pc, #440]	@ (8001fb4 <StartDefaultTask+0x1f4>)
 8001dfa:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
	  freeRTOS_allocator.deallocate = microros_deallocate;
 8001dfe:	4b6e      	ldr	r3, [pc, #440]	@ (8001fb8 <StartDefaultTask+0x1f8>)
 8001e00:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
	  freeRTOS_allocator.reallocate = microros_reallocate;
 8001e04:	4b6d      	ldr	r3, [pc, #436]	@ (8001fbc <StartDefaultTask+0x1fc>)
 8001e06:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
	  freeRTOS_allocator.zero_allocate = microros_zero_allocate;
 8001e0a:	4b6d      	ldr	r3, [pc, #436]	@ (8001fc0 <StartDefaultTask+0x200>)
 8001e0c:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130

	  if (!rcutils_set_default_allocator(&freeRTOS_allocator)) {
 8001e10:	f507 7392 	add.w	r3, r7, #292	@ 0x124
 8001e14:	4618      	mov	r0, r3
 8001e16:	f008 fa41 	bl	800a29c <rcutils_set_default_allocator>
 8001e1a:	4603      	mov	r3, r0
 8001e1c:	f083 0301 	eor.w	r3, r3, #1
 8001e20:	b2db      	uxtb	r3, r3
 8001e22:	2b00      	cmp	r3, #0
 8001e24:	d004      	beq.n	8001e30 <StartDefaultTask+0x70>
	      printf("Error on default allocators (line %d)\n", __LINE__);
 8001e26:	f240 3111 	movw	r1, #785	@ 0x311
 8001e2a:	4866      	ldr	r0, [pc, #408]	@ (8001fc4 <StartDefaultTask+0x204>)
 8001e2c:	f013 fc0c 	bl	8015648 <iprintf>
	  rclc_support_t support;
	  rcl_allocator_t allocator;
	  rcl_node_t node;
	  rclc_executor_t executor;

	  allocator = rcl_get_default_allocator();
 8001e30:	463b      	mov	r3, r7
 8001e32:	4618      	mov	r0, r3
 8001e34:	f008 fa50 	bl	800a2d8 <rcutils_get_default_allocator>
 8001e38:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8001e3c:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 8001e40:	f107 04bc 	add.w	r4, r7, #188	@ 0xbc
 8001e44:	461d      	mov	r5, r3
 8001e46:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001e48:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001e4a:	682b      	ldr	r3, [r5, #0]
 8001e4c:	6023      	str	r3, [r4, #0]

	  rcl_init_options_t init_options = rcl_get_zero_initialized_init_options();
 8001e4e:	f007 fa53 	bl	80092f8 <rcl_get_zero_initialized_init_options>
 8001e52:	4602      	mov	r2, r0
 8001e54:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8001e58:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8001e5c:	601a      	str	r2, [r3, #0]
	  rcl_init_options_init(&init_options, allocator);
 8001e5e:	f107 0424 	add.w	r4, r7, #36	@ 0x24
 8001e62:	466a      	mov	r2, sp
 8001e64:	f107 03c8 	add.w	r3, r7, #200	@ 0xc8
 8001e68:	e893 0003 	ldmia.w	r3, {r0, r1}
 8001e6c:	e882 0003 	stmia.w	r2, {r0, r1}
 8001e70:	f107 03bc 	add.w	r3, r7, #188	@ 0xbc
 8001e74:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001e76:	4620      	mov	r0, r4
 8001e78:	f007 fa40 	bl	80092fc <rcl_init_options_init>
	  rcl_init_options_set_domain_id(&init_options, 1);
 8001e7c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001e80:	2101      	movs	r1, #1
 8001e82:	4618      	mov	r0, r3
 8001e84:	f007 fb36 	bl	80094f4 <rcl_init_options_set_domain_id>

	  // Initialize rclc support object with custom options
//	  rclc_support_t support;
	  rclc_support_init_with_options(&support, 0, NULL, &init_options, &allocator);
 8001e88:	f107 0224 	add.w	r2, r7, #36	@ 0x24
 8001e8c:	f107 00d0 	add.w	r0, r7, #208	@ 0xd0
 8001e90:	f107 03bc 	add.w	r3, r7, #188	@ 0xbc
 8001e94:	9300      	str	r3, [sp, #0]
 8001e96:	4613      	mov	r3, r2
 8001e98:	2200      	movs	r2, #0
 8001e9a:	2100      	movs	r1, #0
 8001e9c:	f008 f944 	bl	800a128 <rclc_support_init_with_options>
	  // Create init_options
//	  rclc_support_init(&support, 0, NULL, &allocator);
//	  rclc_support_init_with_options(&support, 0, NULL, &init_options, &allocator);

	  // Create node
	  rclc_node_init_default(&node, "cubemx_node", "", &support);
 8001ea0:	f107 03d0 	add.w	r3, r7, #208	@ 0xd0
 8001ea4:	f107 00b4 	add.w	r0, r7, #180	@ 0xb4
 8001ea8:	4a47      	ldr	r2, [pc, #284]	@ (8001fc8 <StartDefaultTask+0x208>)
 8001eaa:	4948      	ldr	r1, [pc, #288]	@ (8001fcc <StartDefaultTask+0x20c>)
 8001eac:	f008 f970 	bl	800a190 <rclc_node_init_default>

	  // Create subscriber
	  rclc_subscription_init_default(
 8001eb0:	f009 fbc2 	bl	800b638 <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Int32>
 8001eb4:	4602      	mov	r2, r0
 8001eb6:	f107 01b4 	add.w	r1, r7, #180	@ 0xb4
 8001eba:	f507 7090 	add.w	r0, r7, #288	@ 0x120
 8001ebe:	4b44      	ldr	r3, [pc, #272]	@ (8001fd0 <StartDefaultTask+0x210>)
 8001ec0:	f008 f9a2 	bl	800a208 <rclc_subscription_init_default>
	    &subscriber,
	    &node,
	    ROSIDL_GET_MSG_TYPE_SUPPORT(std_msgs, msg, Int32),
	    "cubemx_publisher");

	    rclc_subscription_init_default(
 8001ec4:	f009 fbb8 	bl	800b638 <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Int32>
 8001ec8:	4602      	mov	r2, r0
 8001eca:	f107 01b4 	add.w	r1, r7, #180	@ 0xb4
 8001ece:	f507 708c 	add.w	r0, r7, #280	@ 0x118
 8001ed2:	4b40      	ldr	r3, [pc, #256]	@ (8001fd4 <StartDefaultTask+0x214>)
 8001ed4:	f008 f998 	bl	800a208 <rclc_subscription_init_default>
	        &subscriber_R,
	        &node,
	        ROSIDL_GET_MSG_TYPE_SUPPORT(std_msgs, msg, Int32),
	        "cubemx_publisher_R");

	    rclc_subscription_init_default(
 8001ed8:	f009 fbae 	bl	800b638 <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Int32>
 8001edc:	4602      	mov	r2, r0
 8001ede:	f107 01b4 	add.w	r1, r7, #180	@ 0xb4
 8001ee2:	f507 7088 	add.w	r0, r7, #272	@ 0x110
 8001ee6:	4b3c      	ldr	r3, [pc, #240]	@ (8001fd8 <StartDefaultTask+0x218>)
 8001ee8:	f008 f98e 	bl	800a208 <rclc_subscription_init_default>
	    	        &subscriber_servo,
	    	        &node,
	    	        ROSIDL_GET_MSG_TYPE_SUPPORT(std_msgs, msg, Int32),
	    	        "cubemx_publisher_servo");

	    rclc_subscription_init_default(
 8001eec:	f009 fba4 	bl	800b638 <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Int32>
 8001ef0:	4602      	mov	r2, r0
 8001ef2:	f107 01b4 	add.w	r1, r7, #180	@ 0xb4
 8001ef6:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8001efa:	4b38      	ldr	r3, [pc, #224]	@ (8001fdc <StartDefaultTask+0x21c>)
 8001efc:	f008 f984 	bl	800a208 <rclc_subscription_init_default>
	    	    	        &node,
	    	    	        ROSIDL_GET_MSG_TYPE_SUPPORT(std_msgs, msg, Int32),
	    	    	        "cubemx_publisher_Brush");

	  // Initialize the executor
	  rclc_executor_init(&executor, &support.context, 4, &allocator);
 8001f00:	f107 03bc 	add.w	r3, r7, #188	@ 0xbc
 8001f04:	f107 01d0 	add.w	r1, r7, #208	@ 0xd0
 8001f08:	f107 0028 	add.w	r0, r7, #40	@ 0x28
 8001f0c:	2204      	movs	r2, #4
 8001f0e:	f007 fe43 	bl	8009b98 <rclc_executor_init>

	  // Add the subscriber callback to the executor
	  rclc_executor_add_subscription(&executor, &subscriber, &msg, subscription_callback, ON_NEW_DATA);
 8001f12:	f507 728e 	add.w	r2, r7, #284	@ 0x11c
 8001f16:	f507 7190 	add.w	r1, r7, #288	@ 0x120
 8001f1a:	f107 0028 	add.w	r0, r7, #40	@ 0x28
 8001f1e:	2300      	movs	r3, #0
 8001f20:	9300      	str	r3, [sp, #0]
 8001f22:	4b2f      	ldr	r3, [pc, #188]	@ (8001fe0 <StartDefaultTask+0x220>)
 8001f24:	f007 fea8 	bl	8009c78 <rclc_executor_add_subscription>

	  rclc_executor_add_subscription(&executor, &subscriber_R, &msg_R, subscription_callback_R, ON_NEW_DATA);
 8001f28:	f507 728a 	add.w	r2, r7, #276	@ 0x114
 8001f2c:	f507 718c 	add.w	r1, r7, #280	@ 0x118
 8001f30:	f107 0028 	add.w	r0, r7, #40	@ 0x28
 8001f34:	2300      	movs	r3, #0
 8001f36:	9300      	str	r3, [sp, #0]
 8001f38:	4b2a      	ldr	r3, [pc, #168]	@ (8001fe4 <StartDefaultTask+0x224>)
 8001f3a:	f007 fe9d 	bl	8009c78 <rclc_executor_add_subscription>

	  rclc_executor_add_subscription(&executor, &subscriber_servo, &msg_servo, subscription_callback_servo, ON_NEW_DATA);
 8001f3e:	f507 7286 	add.w	r2, r7, #268	@ 0x10c
 8001f42:	f507 7188 	add.w	r1, r7, #272	@ 0x110
 8001f46:	f107 0028 	add.w	r0, r7, #40	@ 0x28
 8001f4a:	2300      	movs	r3, #0
 8001f4c:	9300      	str	r3, [sp, #0]
 8001f4e:	4b26      	ldr	r3, [pc, #152]	@ (8001fe8 <StartDefaultTask+0x228>)
 8001f50:	f007 fe92 	bl	8009c78 <rclc_executor_add_subscription>

	  rclc_executor_add_subscription(&executor, &subscriber_Brush, &msg_Brush, subscription_callback_Brush, ON_NEW_DATA);
 8001f54:	f507 7282 	add.w	r2, r7, #260	@ 0x104
 8001f58:	f507 7184 	add.w	r1, r7, #264	@ 0x108
 8001f5c:	f107 0028 	add.w	r0, r7, #40	@ 0x28
 8001f60:	2300      	movs	r3, #0
 8001f62:	9300      	str	r3, [sp, #0]
 8001f64:	4b21      	ldr	r3, [pc, #132]	@ (8001fec <StartDefaultTask+0x22c>)
 8001f66:	f007 fe87 	bl	8009c78 <rclc_executor_add_subscription>


	  for(;;)
	  {
	    // Spin the executor to handle incoming messages
		StpperMotorControlled();
 8001f6a:	f7ff fdf7 	bl	8001b5c <StpperMotorControlled>
		BrusheMotorControlled();
 8001f6e:	f7ff fe99 	bl	8001ca4 <BrusheMotorControlled>
		ServoControlled();
 8001f72:	f7ff fec1 	bl	8001cf8 <ServoControlled>
	    rclc_executor_spin_some(&executor, RCL_MS_TO_NS(100));
 8001f76:	f107 0128 	add.w	r1, r7, #40	@ 0x28
 8001f7a:	a305      	add	r3, pc, #20	@ (adr r3, 8001f90 <StartDefaultTask+0x1d0>)
 8001f7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f80:	4608      	mov	r0, r1
 8001f82:	f008 f899 	bl	800a0b8 <rclc_executor_spin_some>
	    osDelay(10);
 8001f86:	200a      	movs	r0, #10
 8001f88:	f004 fcec 	bl	8006964 <osDelay>
		StpperMotorControlled();
 8001f8c:	bf00      	nop
 8001f8e:	e7ec      	b.n	8001f6a <StartDefaultTask+0x1aa>
 8001f90:	05f5e100 	.word	0x05f5e100
 8001f94:	00000000 	.word	0x00000000
 8001f98:	08016784 	.word	0x08016784
 8001f9c:	08016788 	.word	0x08016788
 8001fa0:	08002a25 	.word	0x08002a25
 8001fa4:	080029bd 	.word	0x080029bd
 8001fa8:	0800299d 	.word	0x0800299d
 8001fac:	08002971 	.word	0x08002971
 8001fb0:	20003e1c 	.word	0x20003e1c
 8001fb4:	08002021 	.word	0x08002021
 8001fb8:	08002065 	.word	0x08002065
 8001fbc:	0800209d 	.word	0x0800209d
 8001fc0:	08002109 	.word	0x08002109
 8001fc4:	08016798 	.word	0x08016798
 8001fc8:	080167c0 	.word	0x080167c0
 8001fcc:	080167c4 	.word	0x080167c4
 8001fd0:	080167d0 	.word	0x080167d0
 8001fd4:	080167e4 	.word	0x080167e4
 8001fd8:	080167f8 	.word	0x080167f8
 8001fdc:	08016810 	.word	0x08016810
 8001fe0:	08001d2d 	.word	0x08001d2d
 8001fe4:	08001d51 	.word	0x08001d51
 8001fe8:	08001d75 	.word	0x08001d75
 8001fec:	08001d99 	.word	0x08001d99

08001ff0 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001ff0:	b580      	push	{r7, lr}
 8001ff2:	b082      	sub	sp, #8
 8001ff4:	af00      	add	r7, sp, #0
 8001ff6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	4a04      	ldr	r2, [pc, #16]	@ (8002010 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001ffe:	4293      	cmp	r3, r2
 8002000:	d101      	bne.n	8002006 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8002002:	f000 fdaf 	bl	8002b64 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8002006:	bf00      	nop
 8002008:	3708      	adds	r7, #8
 800200a:	46bd      	mov	sp, r7
 800200c:	bd80      	pop	{r7, pc}
 800200e:	bf00      	nop
 8002010:	40010000 	.word	0x40010000

08002014 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002014:	b480      	push	{r7}
 8002016:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002018:	b672      	cpsid	i
}
 800201a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800201c:	bf00      	nop
 800201e:	e7fd      	b.n	800201c <Error_Handler+0x8>

08002020 <microros_allocate>:
void vPortFreeMicroROS( void *pv );
void *pvPortReallocMicroROS( void *pv, size_t xWantedSize );
size_t getBlockSize( void *pv );
void *pvPortCallocMicroROS( size_t num, size_t xWantedSize );

void * microros_allocate(size_t size, void * state){
 8002020:	b580      	push	{r7, lr}
 8002022:	b082      	sub	sp, #8
 8002024:	af00      	add	r7, sp, #0
 8002026:	6078      	str	r0, [r7, #4]
 8002028:	6039      	str	r1, [r7, #0]
  (void) state;
  // printf("-- Alloc %d (prev: %d B)\n",size, xPortGetFreeHeapSize());
  absoluteUsedMemory += size;
 800202a:	4b0c      	ldr	r3, [pc, #48]	@ (800205c <microros_allocate+0x3c>)
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	461a      	mov	r2, r3
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	4413      	add	r3, r2
 8002034:	461a      	mov	r2, r3
 8002036:	4b09      	ldr	r3, [pc, #36]	@ (800205c <microros_allocate+0x3c>)
 8002038:	601a      	str	r2, [r3, #0]
  usedMemory += size;
 800203a:	4b09      	ldr	r3, [pc, #36]	@ (8002060 <microros_allocate+0x40>)
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	461a      	mov	r2, r3
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	4413      	add	r3, r2
 8002044:	461a      	mov	r2, r3
 8002046:	4b06      	ldr	r3, [pc, #24]	@ (8002060 <microros_allocate+0x40>)
 8002048:	601a      	str	r2, [r3, #0]
  return pvPortMallocMicroROS(size);
 800204a:	6878      	ldr	r0, [r7, #4]
 800204c:	f7ff f832 	bl	80010b4 <pvPortMallocMicroROS>
 8002050:	4603      	mov	r3, r0
}
 8002052:	4618      	mov	r0, r3
 8002054:	3708      	adds	r7, #8
 8002056:	46bd      	mov	sp, r7
 8002058:	bd80      	pop	{r7, pc}
 800205a:	bf00      	nop
 800205c:	20003f80 	.word	0x20003f80
 8002060:	20003f84 	.word	0x20003f84

08002064 <microros_deallocate>:

void microros_deallocate(void * pointer, void * state){
 8002064:	b580      	push	{r7, lr}
 8002066:	b082      	sub	sp, #8
 8002068:	af00      	add	r7, sp, #0
 800206a:	6078      	str	r0, [r7, #4]
 800206c:	6039      	str	r1, [r7, #0]
  (void) state;
  // printf("-- Free %d (prev: %d B)\n",getBlockSize(pointer), xPortGetFreeHeapSize());
  if (NULL != pointer){
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	2b00      	cmp	r3, #0
 8002072:	d00c      	beq.n	800208e <microros_deallocate+0x2a>
    usedMemory -= getBlockSize(pointer);
 8002074:	6878      	ldr	r0, [r7, #4]
 8002076:	f7ff f941 	bl	80012fc <getBlockSize>
 800207a:	4603      	mov	r3, r0
 800207c:	4a06      	ldr	r2, [pc, #24]	@ (8002098 <microros_deallocate+0x34>)
 800207e:	6812      	ldr	r2, [r2, #0]
 8002080:	1ad3      	subs	r3, r2, r3
 8002082:	461a      	mov	r2, r3
 8002084:	4b04      	ldr	r3, [pc, #16]	@ (8002098 <microros_deallocate+0x34>)
 8002086:	601a      	str	r2, [r3, #0]
    vPortFreeMicroROS(pointer);
 8002088:	6878      	ldr	r0, [r7, #4]
 800208a:	f7ff f8db 	bl	8001244 <vPortFreeMicroROS>
  }
}
 800208e:	bf00      	nop
 8002090:	3708      	adds	r7, #8
 8002092:	46bd      	mov	sp, r7
 8002094:	bd80      	pop	{r7, pc}
 8002096:	bf00      	nop
 8002098:	20003f84 	.word	0x20003f84

0800209c <microros_reallocate>:

void * microros_reallocate(void * pointer, size_t size, void * state){
 800209c:	b580      	push	{r7, lr}
 800209e:	b084      	sub	sp, #16
 80020a0:	af00      	add	r7, sp, #0
 80020a2:	60f8      	str	r0, [r7, #12]
 80020a4:	60b9      	str	r1, [r7, #8]
 80020a6:	607a      	str	r2, [r7, #4]
  (void) state;
  // printf("-- Realloc %d -> %d (prev: %d B)\n",getBlockSize(pointer),size, xPortGetFreeHeapSize());
  absoluteUsedMemory += size;
 80020a8:	4b15      	ldr	r3, [pc, #84]	@ (8002100 <microros_reallocate+0x64>)
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	461a      	mov	r2, r3
 80020ae:	68bb      	ldr	r3, [r7, #8]
 80020b0:	4413      	add	r3, r2
 80020b2:	461a      	mov	r2, r3
 80020b4:	4b12      	ldr	r3, [pc, #72]	@ (8002100 <microros_reallocate+0x64>)
 80020b6:	601a      	str	r2, [r3, #0]
  usedMemory += size;
 80020b8:	4b12      	ldr	r3, [pc, #72]	@ (8002104 <microros_reallocate+0x68>)
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	461a      	mov	r2, r3
 80020be:	68bb      	ldr	r3, [r7, #8]
 80020c0:	4413      	add	r3, r2
 80020c2:	461a      	mov	r2, r3
 80020c4:	4b0f      	ldr	r3, [pc, #60]	@ (8002104 <microros_reallocate+0x68>)
 80020c6:	601a      	str	r2, [r3, #0]
  if (NULL == pointer){
 80020c8:	68fb      	ldr	r3, [r7, #12]
 80020ca:	2b00      	cmp	r3, #0
 80020cc:	d104      	bne.n	80020d8 <microros_reallocate+0x3c>
    return pvPortMallocMicroROS(size);
 80020ce:	68b8      	ldr	r0, [r7, #8]
 80020d0:	f7fe fff0 	bl	80010b4 <pvPortMallocMicroROS>
 80020d4:	4603      	mov	r3, r0
 80020d6:	e00e      	b.n	80020f6 <microros_reallocate+0x5a>
  } else {
    usedMemory -= getBlockSize(pointer);
 80020d8:	68f8      	ldr	r0, [r7, #12]
 80020da:	f7ff f90f 	bl	80012fc <getBlockSize>
 80020de:	4603      	mov	r3, r0
 80020e0:	4a08      	ldr	r2, [pc, #32]	@ (8002104 <microros_reallocate+0x68>)
 80020e2:	6812      	ldr	r2, [r2, #0]
 80020e4:	1ad3      	subs	r3, r2, r3
 80020e6:	461a      	mov	r2, r3
 80020e8:	4b06      	ldr	r3, [pc, #24]	@ (8002104 <microros_reallocate+0x68>)
 80020ea:	601a      	str	r2, [r3, #0]
    return pvPortReallocMicroROS(pointer,size);
 80020ec:	68b9      	ldr	r1, [r7, #8]
 80020ee:	68f8      	ldr	r0, [r7, #12]
 80020f0:	f7ff f922 	bl	8001338 <pvPortReallocMicroROS>
 80020f4:	4603      	mov	r3, r0
  }
}
 80020f6:	4618      	mov	r0, r3
 80020f8:	3710      	adds	r7, #16
 80020fa:	46bd      	mov	sp, r7
 80020fc:	bd80      	pop	{r7, pc}
 80020fe:	bf00      	nop
 8002100:	20003f80 	.word	0x20003f80
 8002104:	20003f84 	.word	0x20003f84

08002108 <microros_zero_allocate>:

void * microros_zero_allocate(size_t number_of_elements, size_t size_of_element, void * state){
 8002108:	b580      	push	{r7, lr}
 800210a:	b084      	sub	sp, #16
 800210c:	af00      	add	r7, sp, #0
 800210e:	60f8      	str	r0, [r7, #12]
 8002110:	60b9      	str	r1, [r7, #8]
 8002112:	607a      	str	r2, [r7, #4]
  (void) state;
  // printf("-- Calloc %d x %d = %d -> (prev: %d B)\n",number_of_elements,size_of_element, number_of_elements*size_of_element, xPortGetFreeHeapSize());
  absoluteUsedMemory += number_of_elements*size_of_element;
 8002114:	68fb      	ldr	r3, [r7, #12]
 8002116:	68ba      	ldr	r2, [r7, #8]
 8002118:	fb02 f303 	mul.w	r3, r2, r3
 800211c:	4a0c      	ldr	r2, [pc, #48]	@ (8002150 <microros_zero_allocate+0x48>)
 800211e:	6812      	ldr	r2, [r2, #0]
 8002120:	4413      	add	r3, r2
 8002122:	461a      	mov	r2, r3
 8002124:	4b0a      	ldr	r3, [pc, #40]	@ (8002150 <microros_zero_allocate+0x48>)
 8002126:	601a      	str	r2, [r3, #0]
  usedMemory += number_of_elements*size_of_element;
 8002128:	68fb      	ldr	r3, [r7, #12]
 800212a:	68ba      	ldr	r2, [r7, #8]
 800212c:	fb02 f303 	mul.w	r3, r2, r3
 8002130:	4a08      	ldr	r2, [pc, #32]	@ (8002154 <microros_zero_allocate+0x4c>)
 8002132:	6812      	ldr	r2, [r2, #0]
 8002134:	4413      	add	r3, r2
 8002136:	461a      	mov	r2, r3
 8002138:	4b06      	ldr	r3, [pc, #24]	@ (8002154 <microros_zero_allocate+0x4c>)
 800213a:	601a      	str	r2, [r3, #0]
  return pvPortCallocMicroROS(number_of_elements,size_of_element);
 800213c:	68b9      	ldr	r1, [r7, #8]
 800213e:	68f8      	ldr	r0, [r7, #12]
 8002140:	f7ff f927 	bl	8001392 <pvPortCallocMicroROS>
 8002144:	4603      	mov	r3, r0
 8002146:	4618      	mov	r0, r3
 8002148:	3710      	adds	r7, #16
 800214a:	46bd      	mov	sp, r7
 800214c:	bd80      	pop	{r7, pc}
 800214e:	bf00      	nop
 8002150:	20003f80 	.word	0x20003f80
 8002154:	20003f84 	.word	0x20003f84

08002158 <UTILS_NanosecondsToTimespec>:
#define NANOSECONDS_PER_SECOND     ( 1000000000LL )                                /**< Nanoseconds per second. */
#define NANOSECONDS_PER_TICK       ( NANOSECONDS_PER_SECOND / configTICK_RATE_HZ ) /**< Nanoseconds per FreeRTOS tick. */

void UTILS_NanosecondsToTimespec( int64_t llSource,
                                  struct timespec * const pxDestination )
{
 8002158:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800215c:	b086      	sub	sp, #24
 800215e:	af00      	add	r7, sp, #0
 8002160:	e9c7 0102 	strd	r0, r1, [r7, #8]
 8002164:	607a      	str	r2, [r7, #4]
    long lCarrySec = 0;
 8002166:	2300      	movs	r3, #0
 8002168:	617b      	str	r3, [r7, #20]

    /* Convert to timespec. */
    pxDestination->tv_sec = ( time_t ) ( llSource / NANOSECONDS_PER_SECOND );
 800216a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800216e:	a320      	add	r3, pc, #128	@ (adr r3, 80021f0 <UTILS_NanosecondsToTimespec+0x98>)
 8002170:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002174:	f7fe fcda 	bl	8000b2c <__aeabi_ldivmod>
 8002178:	4602      	mov	r2, r0
 800217a:	460b      	mov	r3, r1
 800217c:	6879      	ldr	r1, [r7, #4]
 800217e:	e9c1 2300 	strd	r2, r3, [r1]
    pxDestination->tv_nsec = ( long ) ( llSource % NANOSECONDS_PER_SECOND );
 8002182:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8002186:	a31a      	add	r3, pc, #104	@ (adr r3, 80021f0 <UTILS_NanosecondsToTimespec+0x98>)
 8002188:	e9d3 2300 	ldrd	r2, r3, [r3]
 800218c:	f7fe fcce 	bl	8000b2c <__aeabi_ldivmod>
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	609a      	str	r2, [r3, #8]

    /* Subtract from tv_sec if tv_nsec < 0. */
    if( pxDestination->tv_nsec < 0L )
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	689b      	ldr	r3, [r3, #8]
 8002198:	2b00      	cmp	r3, #0
 800219a:	da20      	bge.n	80021de <UTILS_NanosecondsToTimespec+0x86>
    {
        /* Compute the number of seconds to carry. */
        lCarrySec = ( pxDestination->tv_nsec / ( long ) NANOSECONDS_PER_SECOND ) + 1L;
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	689b      	ldr	r3, [r3, #8]
 80021a0:	4a11      	ldr	r2, [pc, #68]	@ (80021e8 <UTILS_NanosecondsToTimespec+0x90>)
 80021a2:	fb82 1203 	smull	r1, r2, r2, r3
 80021a6:	1712      	asrs	r2, r2, #28
 80021a8:	17db      	asrs	r3, r3, #31
 80021aa:	1ad3      	subs	r3, r2, r3
 80021ac:	3301      	adds	r3, #1
 80021ae:	617b      	str	r3, [r7, #20]

        pxDestination->tv_sec -= ( time_t ) ( lCarrySec );
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80021b6:	6979      	ldr	r1, [r7, #20]
 80021b8:	17c8      	asrs	r0, r1, #31
 80021ba:	460c      	mov	r4, r1
 80021bc:	4605      	mov	r5, r0
 80021be:	ebb2 0804 	subs.w	r8, r2, r4
 80021c2:	eb63 0905 	sbc.w	r9, r3, r5
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	e9c3 8900 	strd	r8, r9, [r3]
        pxDestination->tv_nsec += lCarrySec * ( long ) NANOSECONDS_PER_SECOND;
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	689a      	ldr	r2, [r3, #8]
 80021d0:	697b      	ldr	r3, [r7, #20]
 80021d2:	4906      	ldr	r1, [pc, #24]	@ (80021ec <UTILS_NanosecondsToTimespec+0x94>)
 80021d4:	fb01 f303 	mul.w	r3, r1, r3
 80021d8:	441a      	add	r2, r3
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	609a      	str	r2, [r3, #8]
    }
}
 80021de:	bf00      	nop
 80021e0:	3718      	adds	r7, #24
 80021e2:	46bd      	mov	sp, r7
 80021e4:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80021e8:	44b82fa1 	.word	0x44b82fa1
 80021ec:	3b9aca00 	.word	0x3b9aca00
 80021f0:	3b9aca00 	.word	0x3b9aca00
 80021f4:	00000000 	.word	0x00000000

080021f8 <clock_gettime>:

int clock_gettime( int clock_id,
                   struct timespec * tp )
{
 80021f8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80021fc:	b08e      	sub	sp, #56	@ 0x38
 80021fe:	af00      	add	r7, sp, #0
 8002200:	6278      	str	r0, [r7, #36]	@ 0x24
 8002202:	6239      	str	r1, [r7, #32]
    TimeOut_t xCurrentTime = { 0 };
 8002204:	f107 0228 	add.w	r2, r7, #40	@ 0x28
 8002208:	2300      	movs	r3, #0
 800220a:	6013      	str	r3, [r2, #0]
 800220c:	6053      	str	r3, [r2, #4]

    /* Intermediate variable used to convert TimeOut_t to struct timespec.
     * Also used to detect overflow issues. It must be unsigned because the
     * behavior of signed integer overflow is undefined. */
    uint64_t ullTickCount = 0ULL;
 800220e:	f04f 0200 	mov.w	r2, #0
 8002212:	f04f 0300 	mov.w	r3, #0
 8002216:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30
    /* Silence warnings about unused parameters. */
    ( void ) clock_id;

    /* Get the current tick count and overflow count. vTaskSetTimeOutState()
     * is used to get these values because they are both static in tasks.c. */
    vTaskSetTimeOutState( &xCurrentTime );
 800221a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800221e:	4618      	mov	r0, r3
 8002220:	f005 fe6c 	bl	8007efc <vTaskSetTimeOutState>

    /* Adjust the tick count for the number of times a TickType_t has overflowed.
     * portMAX_DELAY should be the maximum value of a TickType_t. */
    ullTickCount = ( uint64_t ) ( xCurrentTime.xOverflowCount ) << ( sizeof( TickType_t ) * 8 );
 8002224:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002226:	17da      	asrs	r2, r3, #31
 8002228:	61bb      	str	r3, [r7, #24]
 800222a:	61fa      	str	r2, [r7, #28]
 800222c:	f04f 0200 	mov.w	r2, #0
 8002230:	f04f 0300 	mov.w	r3, #0
 8002234:	69b9      	ldr	r1, [r7, #24]
 8002236:	000b      	movs	r3, r1
 8002238:	2200      	movs	r2, #0
 800223a:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30

    /* Add the current tick count. */
    ullTickCount += xCurrentTime.xTimeOnEntering;
 800223e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002240:	2200      	movs	r2, #0
 8002242:	461c      	mov	r4, r3
 8002244:	4615      	mov	r5, r2
 8002246:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 800224a:	1911      	adds	r1, r2, r4
 800224c:	60b9      	str	r1, [r7, #8]
 800224e:	416b      	adcs	r3, r5
 8002250:	60fb      	str	r3, [r7, #12]
 8002252:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 8002256:	e9c7 340c 	strd	r3, r4, [r7, #48]	@ 0x30

    /* Convert ullTickCount to timespec. */
    UTILS_NanosecondsToTimespec( ( int64_t ) ullTickCount * NANOSECONDS_PER_TICK, tp );
 800225a:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	@ 0x30
 800225e:	4602      	mov	r2, r0
 8002260:	460b      	mov	r3, r1
 8002262:	f04f 0400 	mov.w	r4, #0
 8002266:	f04f 0500 	mov.w	r5, #0
 800226a:	015d      	lsls	r5, r3, #5
 800226c:	ea45 65d2 	orr.w	r5, r5, r2, lsr #27
 8002270:	0154      	lsls	r4, r2, #5
 8002272:	4622      	mov	r2, r4
 8002274:	462b      	mov	r3, r5
 8002276:	ebb2 0800 	subs.w	r8, r2, r0
 800227a:	eb63 0901 	sbc.w	r9, r3, r1
 800227e:	f04f 0200 	mov.w	r2, #0
 8002282:	f04f 0300 	mov.w	r3, #0
 8002286:	ea4f 2349 	mov.w	r3, r9, lsl #9
 800228a:	ea43 53d8 	orr.w	r3, r3, r8, lsr #23
 800228e:	ea4f 2248 	mov.w	r2, r8, lsl #9
 8002292:	4690      	mov	r8, r2
 8002294:	4699      	mov	r9, r3
 8002296:	eb18 0a00 	adds.w	sl, r8, r0
 800229a:	eb49 0b01 	adc.w	fp, r9, r1
 800229e:	f04f 0200 	mov.w	r2, #0
 80022a2:	f04f 0300 	mov.w	r3, #0
 80022a6:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80022aa:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80022ae:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80022b2:	ebb2 040a 	subs.w	r4, r2, sl
 80022b6:	603c      	str	r4, [r7, #0]
 80022b8:	eb63 030b 	sbc.w	r3, r3, fp
 80022bc:	607b      	str	r3, [r7, #4]
 80022be:	e9d7 4500 	ldrd	r4, r5, [r7]
 80022c2:	4623      	mov	r3, r4
 80022c4:	181b      	adds	r3, r3, r0
 80022c6:	613b      	str	r3, [r7, #16]
 80022c8:	462b      	mov	r3, r5
 80022ca:	eb41 0303 	adc.w	r3, r1, r3
 80022ce:	617b      	str	r3, [r7, #20]
 80022d0:	6a3a      	ldr	r2, [r7, #32]
 80022d2:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80022d6:	f7ff ff3f 	bl	8002158 <UTILS_NanosecondsToTimespec>

    return 0;
 80022da:	2300      	movs	r3, #0
 80022dc:	4618      	mov	r0, r3
 80022de:	3738      	adds	r7, #56	@ 0x38
 80022e0:	46bd      	mov	sp, r7
 80022e2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
	...

080022e8 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                            /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80022e8:	b580      	push	{r7, lr}
 80022ea:	b082      	sub	sp, #8
 80022ec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80022ee:	2300      	movs	r3, #0
 80022f0:	607b      	str	r3, [r7, #4]
 80022f2:	4b12      	ldr	r3, [pc, #72]	@ (800233c <HAL_MspInit+0x54>)
 80022f4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80022f6:	4a11      	ldr	r2, [pc, #68]	@ (800233c <HAL_MspInit+0x54>)
 80022f8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80022fc:	6453      	str	r3, [r2, #68]	@ 0x44
 80022fe:	4b0f      	ldr	r3, [pc, #60]	@ (800233c <HAL_MspInit+0x54>)
 8002300:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002302:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002306:	607b      	str	r3, [r7, #4]
 8002308:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800230a:	2300      	movs	r3, #0
 800230c:	603b      	str	r3, [r7, #0]
 800230e:	4b0b      	ldr	r3, [pc, #44]	@ (800233c <HAL_MspInit+0x54>)
 8002310:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002312:	4a0a      	ldr	r2, [pc, #40]	@ (800233c <HAL_MspInit+0x54>)
 8002314:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002318:	6413      	str	r3, [r2, #64]	@ 0x40
 800231a:	4b08      	ldr	r3, [pc, #32]	@ (800233c <HAL_MspInit+0x54>)
 800231c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800231e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002322:	603b      	str	r3, [r7, #0]
 8002324:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8002326:	2200      	movs	r2, #0
 8002328:	210f      	movs	r1, #15
 800232a:	f06f 0001 	mvn.w	r0, #1
 800232e:	f000 fcf1 	bl	8002d14 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002332:	bf00      	nop
 8002334:	3708      	adds	r7, #8
 8002336:	46bd      	mov	sp, r7
 8002338:	bd80      	pop	{r7, pc}
 800233a:	bf00      	nop
 800233c:	40023800 	.word	0x40023800

08002340 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002340:	b480      	push	{r7}
 8002342:	b087      	sub	sp, #28
 8002344:	af00      	add	r7, sp, #0
 8002346:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002350:	d10e      	bne.n	8002370 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002352:	2300      	movs	r3, #0
 8002354:	617b      	str	r3, [r7, #20]
 8002356:	4b1d      	ldr	r3, [pc, #116]	@ (80023cc <HAL_TIM_Base_MspInit+0x8c>)
 8002358:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800235a:	4a1c      	ldr	r2, [pc, #112]	@ (80023cc <HAL_TIM_Base_MspInit+0x8c>)
 800235c:	f043 0301 	orr.w	r3, r3, #1
 8002360:	6413      	str	r3, [r2, #64]	@ 0x40
 8002362:	4b1a      	ldr	r3, [pc, #104]	@ (80023cc <HAL_TIM_Base_MspInit+0x8c>)
 8002364:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002366:	f003 0301 	and.w	r3, r3, #1
 800236a:	617b      	str	r3, [r7, #20]
 800236c:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 800236e:	e026      	b.n	80023be <HAL_TIM_Base_MspInit+0x7e>
  else if(htim_base->Instance==TIM3)
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	4a16      	ldr	r2, [pc, #88]	@ (80023d0 <HAL_TIM_Base_MspInit+0x90>)
 8002376:	4293      	cmp	r3, r2
 8002378:	d10e      	bne.n	8002398 <HAL_TIM_Base_MspInit+0x58>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800237a:	2300      	movs	r3, #0
 800237c:	613b      	str	r3, [r7, #16]
 800237e:	4b13      	ldr	r3, [pc, #76]	@ (80023cc <HAL_TIM_Base_MspInit+0x8c>)
 8002380:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002382:	4a12      	ldr	r2, [pc, #72]	@ (80023cc <HAL_TIM_Base_MspInit+0x8c>)
 8002384:	f043 0302 	orr.w	r3, r3, #2
 8002388:	6413      	str	r3, [r2, #64]	@ 0x40
 800238a:	4b10      	ldr	r3, [pc, #64]	@ (80023cc <HAL_TIM_Base_MspInit+0x8c>)
 800238c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800238e:	f003 0302 	and.w	r3, r3, #2
 8002392:	613b      	str	r3, [r7, #16]
 8002394:	693b      	ldr	r3, [r7, #16]
}
 8002396:	e012      	b.n	80023be <HAL_TIM_Base_MspInit+0x7e>
  else if(htim_base->Instance==TIM4)
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	4a0d      	ldr	r2, [pc, #52]	@ (80023d4 <HAL_TIM_Base_MspInit+0x94>)
 800239e:	4293      	cmp	r3, r2
 80023a0:	d10d      	bne.n	80023be <HAL_TIM_Base_MspInit+0x7e>
    __HAL_RCC_TIM4_CLK_ENABLE();
 80023a2:	2300      	movs	r3, #0
 80023a4:	60fb      	str	r3, [r7, #12]
 80023a6:	4b09      	ldr	r3, [pc, #36]	@ (80023cc <HAL_TIM_Base_MspInit+0x8c>)
 80023a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80023aa:	4a08      	ldr	r2, [pc, #32]	@ (80023cc <HAL_TIM_Base_MspInit+0x8c>)
 80023ac:	f043 0304 	orr.w	r3, r3, #4
 80023b0:	6413      	str	r3, [r2, #64]	@ 0x40
 80023b2:	4b06      	ldr	r3, [pc, #24]	@ (80023cc <HAL_TIM_Base_MspInit+0x8c>)
 80023b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80023b6:	f003 0304 	and.w	r3, r3, #4
 80023ba:	60fb      	str	r3, [r7, #12]
 80023bc:	68fb      	ldr	r3, [r7, #12]
}
 80023be:	bf00      	nop
 80023c0:	371c      	adds	r7, #28
 80023c2:	46bd      	mov	sp, r7
 80023c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023c8:	4770      	bx	lr
 80023ca:	bf00      	nop
 80023cc:	40023800 	.word	0x40023800
 80023d0:	40000400 	.word	0x40000400
 80023d4:	40000800 	.word	0x40000800

080023d8 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80023d8:	b580      	push	{r7, lr}
 80023da:	b08a      	sub	sp, #40	@ 0x28
 80023dc:	af00      	add	r7, sp, #0
 80023de:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80023e0:	f107 0314 	add.w	r3, r7, #20
 80023e4:	2200      	movs	r2, #0
 80023e6:	601a      	str	r2, [r3, #0]
 80023e8:	605a      	str	r2, [r3, #4]
 80023ea:	609a      	str	r2, [r3, #8]
 80023ec:	60da      	str	r2, [r3, #12]
 80023ee:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80023f8:	d11e      	bne.n	8002438 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80023fa:	2300      	movs	r3, #0
 80023fc:	613b      	str	r3, [r7, #16]
 80023fe:	4b34      	ldr	r3, [pc, #208]	@ (80024d0 <HAL_TIM_MspPostInit+0xf8>)
 8002400:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002402:	4a33      	ldr	r2, [pc, #204]	@ (80024d0 <HAL_TIM_MspPostInit+0xf8>)
 8002404:	f043 0301 	orr.w	r3, r3, #1
 8002408:	6313      	str	r3, [r2, #48]	@ 0x30
 800240a:	4b31      	ldr	r3, [pc, #196]	@ (80024d0 <HAL_TIM_MspPostInit+0xf8>)
 800240c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800240e:	f003 0301 	and.w	r3, r3, #1
 8002412:	613b      	str	r3, [r7, #16]
 8002414:	693b      	ldr	r3, [r7, #16]
    /**TIM2 GPIO Configuration
    PA1     ------> TIM2_CH2
    PA5     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_5;
 8002416:	2322      	movs	r3, #34	@ 0x22
 8002418:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800241a:	2302      	movs	r3, #2
 800241c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800241e:	2300      	movs	r3, #0
 8002420:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002422:	2300      	movs	r3, #0
 8002424:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8002426:	2301      	movs	r3, #1
 8002428:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800242a:	f107 0314 	add.w	r3, r7, #20
 800242e:	4619      	mov	r1, r3
 8002430:	4828      	ldr	r0, [pc, #160]	@ (80024d4 <HAL_TIM_MspPostInit+0xfc>)
 8002432:	f001 f89b 	bl	800356c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 8002436:	e046      	b.n	80024c6 <HAL_TIM_MspPostInit+0xee>
  else if(htim->Instance==TIM3)
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	4a26      	ldr	r2, [pc, #152]	@ (80024d8 <HAL_TIM_MspPostInit+0x100>)
 800243e:	4293      	cmp	r3, r2
 8002440:	d11e      	bne.n	8002480 <HAL_TIM_MspPostInit+0xa8>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002442:	2300      	movs	r3, #0
 8002444:	60fb      	str	r3, [r7, #12]
 8002446:	4b22      	ldr	r3, [pc, #136]	@ (80024d0 <HAL_TIM_MspPostInit+0xf8>)
 8002448:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800244a:	4a21      	ldr	r2, [pc, #132]	@ (80024d0 <HAL_TIM_MspPostInit+0xf8>)
 800244c:	f043 0301 	orr.w	r3, r3, #1
 8002450:	6313      	str	r3, [r2, #48]	@ 0x30
 8002452:	4b1f      	ldr	r3, [pc, #124]	@ (80024d0 <HAL_TIM_MspPostInit+0xf8>)
 8002454:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002456:	f003 0301 	and.w	r3, r3, #1
 800245a:	60fb      	str	r3, [r7, #12]
 800245c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 800245e:	2340      	movs	r3, #64	@ 0x40
 8002460:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002462:	2302      	movs	r3, #2
 8002464:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002466:	2300      	movs	r3, #0
 8002468:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800246a:	2300      	movs	r3, #0
 800246c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800246e:	2302      	movs	r3, #2
 8002470:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002472:	f107 0314 	add.w	r3, r7, #20
 8002476:	4619      	mov	r1, r3
 8002478:	4816      	ldr	r0, [pc, #88]	@ (80024d4 <HAL_TIM_MspPostInit+0xfc>)
 800247a:	f001 f877 	bl	800356c <HAL_GPIO_Init>
}
 800247e:	e022      	b.n	80024c6 <HAL_TIM_MspPostInit+0xee>
  else if(htim->Instance==TIM4)
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	4a15      	ldr	r2, [pc, #84]	@ (80024dc <HAL_TIM_MspPostInit+0x104>)
 8002486:	4293      	cmp	r3, r2
 8002488:	d11d      	bne.n	80024c6 <HAL_TIM_MspPostInit+0xee>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800248a:	2300      	movs	r3, #0
 800248c:	60bb      	str	r3, [r7, #8]
 800248e:	4b10      	ldr	r3, [pc, #64]	@ (80024d0 <HAL_TIM_MspPostInit+0xf8>)
 8002490:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002492:	4a0f      	ldr	r2, [pc, #60]	@ (80024d0 <HAL_TIM_MspPostInit+0xf8>)
 8002494:	f043 0302 	orr.w	r3, r3, #2
 8002498:	6313      	str	r3, [r2, #48]	@ 0x30
 800249a:	4b0d      	ldr	r3, [pc, #52]	@ (80024d0 <HAL_TIM_MspPostInit+0xf8>)
 800249c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800249e:	f003 0302 	and.w	r3, r3, #2
 80024a2:	60bb      	str	r3, [r7, #8]
 80024a4:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80024a6:	2340      	movs	r3, #64	@ 0x40
 80024a8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80024aa:	2302      	movs	r3, #2
 80024ac:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024ae:	2300      	movs	r3, #0
 80024b0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80024b2:	2300      	movs	r3, #0
 80024b4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 80024b6:	2302      	movs	r3, #2
 80024b8:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80024ba:	f107 0314 	add.w	r3, r7, #20
 80024be:	4619      	mov	r1, r3
 80024c0:	4807      	ldr	r0, [pc, #28]	@ (80024e0 <HAL_TIM_MspPostInit+0x108>)
 80024c2:	f001 f853 	bl	800356c <HAL_GPIO_Init>
}
 80024c6:	bf00      	nop
 80024c8:	3728      	adds	r7, #40	@ 0x28
 80024ca:	46bd      	mov	sp, r7
 80024cc:	bd80      	pop	{r7, pc}
 80024ce:	bf00      	nop
 80024d0:	40023800 	.word	0x40023800
 80024d4:	40020000 	.word	0x40020000
 80024d8:	40000400 	.word	0x40000400
 80024dc:	40000800 	.word	0x40000800
 80024e0:	40020400 	.word	0x40020400

080024e4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80024e4:	b580      	push	{r7, lr}
 80024e6:	b08a      	sub	sp, #40	@ 0x28
 80024e8:	af00      	add	r7, sp, #0
 80024ea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80024ec:	f107 0314 	add.w	r3, r7, #20
 80024f0:	2200      	movs	r2, #0
 80024f2:	601a      	str	r2, [r3, #0]
 80024f4:	605a      	str	r2, [r3, #4]
 80024f6:	609a      	str	r2, [r3, #8]
 80024f8:	60da      	str	r2, [r3, #12]
 80024fa:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	4a4d      	ldr	r2, [pc, #308]	@ (8002638 <HAL_UART_MspInit+0x154>)
 8002502:	4293      	cmp	r3, r2
 8002504:	f040 8093 	bne.w	800262e <HAL_UART_MspInit+0x14a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8002508:	2300      	movs	r3, #0
 800250a:	613b      	str	r3, [r7, #16]
 800250c:	4b4b      	ldr	r3, [pc, #300]	@ (800263c <HAL_UART_MspInit+0x158>)
 800250e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002510:	4a4a      	ldr	r2, [pc, #296]	@ (800263c <HAL_UART_MspInit+0x158>)
 8002512:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002516:	6413      	str	r3, [r2, #64]	@ 0x40
 8002518:	4b48      	ldr	r3, [pc, #288]	@ (800263c <HAL_UART_MspInit+0x158>)
 800251a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800251c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002520:	613b      	str	r3, [r7, #16]
 8002522:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002524:	2300      	movs	r3, #0
 8002526:	60fb      	str	r3, [r7, #12]
 8002528:	4b44      	ldr	r3, [pc, #272]	@ (800263c <HAL_UART_MspInit+0x158>)
 800252a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800252c:	4a43      	ldr	r2, [pc, #268]	@ (800263c <HAL_UART_MspInit+0x158>)
 800252e:	f043 0301 	orr.w	r3, r3, #1
 8002532:	6313      	str	r3, [r2, #48]	@ 0x30
 8002534:	4b41      	ldr	r3, [pc, #260]	@ (800263c <HAL_UART_MspInit+0x158>)
 8002536:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002538:	f003 0301 	and.w	r3, r3, #1
 800253c:	60fb      	str	r3, [r7, #12]
 800253e:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8002540:	230c      	movs	r3, #12
 8002542:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002544:	2302      	movs	r3, #2
 8002546:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002548:	2300      	movs	r3, #0
 800254a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800254c:	2303      	movs	r3, #3
 800254e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002550:	2307      	movs	r3, #7
 8002552:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002554:	f107 0314 	add.w	r3, r7, #20
 8002558:	4619      	mov	r1, r3
 800255a:	4839      	ldr	r0, [pc, #228]	@ (8002640 <HAL_UART_MspInit+0x15c>)
 800255c:	f001 f806 	bl	800356c <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Stream5;
 8002560:	4b38      	ldr	r3, [pc, #224]	@ (8002644 <HAL_UART_MspInit+0x160>)
 8002562:	4a39      	ldr	r2, [pc, #228]	@ (8002648 <HAL_UART_MspInit+0x164>)
 8002564:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Channel = DMA_CHANNEL_4;
 8002566:	4b37      	ldr	r3, [pc, #220]	@ (8002644 <HAL_UART_MspInit+0x160>)
 8002568:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 800256c:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800256e:	4b35      	ldr	r3, [pc, #212]	@ (8002644 <HAL_UART_MspInit+0x160>)
 8002570:	2200      	movs	r2, #0
 8002572:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002574:	4b33      	ldr	r3, [pc, #204]	@ (8002644 <HAL_UART_MspInit+0x160>)
 8002576:	2200      	movs	r2, #0
 8002578:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 800257a:	4b32      	ldr	r3, [pc, #200]	@ (8002644 <HAL_UART_MspInit+0x160>)
 800257c:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002580:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002582:	4b30      	ldr	r3, [pc, #192]	@ (8002644 <HAL_UART_MspInit+0x160>)
 8002584:	2200      	movs	r2, #0
 8002586:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002588:	4b2e      	ldr	r3, [pc, #184]	@ (8002644 <HAL_UART_MspInit+0x160>)
 800258a:	2200      	movs	r2, #0
 800258c:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_CIRCULAR;
 800258e:	4b2d      	ldr	r3, [pc, #180]	@ (8002644 <HAL_UART_MspInit+0x160>)
 8002590:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002594:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8002596:	4b2b      	ldr	r3, [pc, #172]	@ (8002644 <HAL_UART_MspInit+0x160>)
 8002598:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 800259c:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800259e:	4b29      	ldr	r3, [pc, #164]	@ (8002644 <HAL_UART_MspInit+0x160>)
 80025a0:	2200      	movs	r2, #0
 80025a2:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 80025a4:	4827      	ldr	r0, [pc, #156]	@ (8002644 <HAL_UART_MspInit+0x160>)
 80025a6:	f000 fbdf 	bl	8002d68 <HAL_DMA_Init>
 80025aa:	4603      	mov	r3, r0
 80025ac:	2b00      	cmp	r3, #0
 80025ae:	d001      	beq.n	80025b4 <HAL_UART_MspInit+0xd0>
    {
      Error_Handler();
 80025b0:	f7ff fd30 	bl	8002014 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	4a23      	ldr	r2, [pc, #140]	@ (8002644 <HAL_UART_MspInit+0x160>)
 80025b8:	63da      	str	r2, [r3, #60]	@ 0x3c
 80025ba:	4a22      	ldr	r2, [pc, #136]	@ (8002644 <HAL_UART_MspInit+0x160>)
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	6393      	str	r3, [r2, #56]	@ 0x38

    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA1_Stream6;
 80025c0:	4b22      	ldr	r3, [pc, #136]	@ (800264c <HAL_UART_MspInit+0x168>)
 80025c2:	4a23      	ldr	r2, [pc, #140]	@ (8002650 <HAL_UART_MspInit+0x16c>)
 80025c4:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Channel = DMA_CHANNEL_4;
 80025c6:	4b21      	ldr	r3, [pc, #132]	@ (800264c <HAL_UART_MspInit+0x168>)
 80025c8:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 80025cc:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80025ce:	4b1f      	ldr	r3, [pc, #124]	@ (800264c <HAL_UART_MspInit+0x168>)
 80025d0:	2240      	movs	r2, #64	@ 0x40
 80025d2:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80025d4:	4b1d      	ldr	r3, [pc, #116]	@ (800264c <HAL_UART_MspInit+0x168>)
 80025d6:	2200      	movs	r2, #0
 80025d8:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 80025da:	4b1c      	ldr	r3, [pc, #112]	@ (800264c <HAL_UART_MspInit+0x168>)
 80025dc:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80025e0:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80025e2:	4b1a      	ldr	r3, [pc, #104]	@ (800264c <HAL_UART_MspInit+0x168>)
 80025e4:	2200      	movs	r2, #0
 80025e6:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80025e8:	4b18      	ldr	r3, [pc, #96]	@ (800264c <HAL_UART_MspInit+0x168>)
 80025ea:	2200      	movs	r2, #0
 80025ec:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 80025ee:	4b17      	ldr	r3, [pc, #92]	@ (800264c <HAL_UART_MspInit+0x168>)
 80025f0:	2200      	movs	r2, #0
 80025f2:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 80025f4:	4b15      	ldr	r3, [pc, #84]	@ (800264c <HAL_UART_MspInit+0x168>)
 80025f6:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 80025fa:	621a      	str	r2, [r3, #32]
    hdma_usart2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80025fc:	4b13      	ldr	r3, [pc, #76]	@ (800264c <HAL_UART_MspInit+0x168>)
 80025fe:	2200      	movs	r2, #0
 8002600:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8002602:	4812      	ldr	r0, [pc, #72]	@ (800264c <HAL_UART_MspInit+0x168>)
 8002604:	f000 fbb0 	bl	8002d68 <HAL_DMA_Init>
 8002608:	4603      	mov	r3, r0
 800260a:	2b00      	cmp	r3, #0
 800260c:	d001      	beq.n	8002612 <HAL_UART_MspInit+0x12e>
    {
      Error_Handler();
 800260e:	f7ff fd01 	bl	8002014 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	4a0d      	ldr	r2, [pc, #52]	@ (800264c <HAL_UART_MspInit+0x168>)
 8002616:	639a      	str	r2, [r3, #56]	@ 0x38
 8002618:	4a0c      	ldr	r2, [pc, #48]	@ (800264c <HAL_UART_MspInit+0x168>)
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	6393      	str	r3, [r2, #56]	@ 0x38

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 800261e:	2200      	movs	r2, #0
 8002620:	2105      	movs	r1, #5
 8002622:	2026      	movs	r0, #38	@ 0x26
 8002624:	f000 fb76 	bl	8002d14 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8002628:	2026      	movs	r0, #38	@ 0x26
 800262a:	f000 fb8f 	bl	8002d4c <HAL_NVIC_EnableIRQ>

  /* USER CODE END USART2_MspInit 1 */

  }

}
 800262e:	bf00      	nop
 8002630:	3728      	adds	r7, #40	@ 0x28
 8002632:	46bd      	mov	sp, r7
 8002634:	bd80      	pop	{r7, pc}
 8002636:	bf00      	nop
 8002638:	40004400 	.word	0x40004400
 800263c:	40023800 	.word	0x40023800
 8002640:	40020000 	.word	0x40020000
 8002644:	20003e64 	.word	0x20003e64
 8002648:	40026088 	.word	0x40026088
 800264c:	20003ec4 	.word	0x20003ec4
 8002650:	400260a0 	.word	0x400260a0

08002654 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002654:	b580      	push	{r7, lr}
 8002656:	b08c      	sub	sp, #48	@ 0x30
 8002658:	af00      	add	r7, sp, #0
 800265a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 800265c:	2300      	movs	r3, #0
 800265e:	62bb      	str	r3, [r7, #40]	@ 0x28

  uint32_t              uwPrescalerValue = 0U;
 8002660:	2300      	movs	r3, #0
 8002662:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8002664:	2300      	movs	r3, #0
 8002666:	60bb      	str	r3, [r7, #8]
 8002668:	4b2e      	ldr	r3, [pc, #184]	@ (8002724 <HAL_InitTick+0xd0>)
 800266a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800266c:	4a2d      	ldr	r2, [pc, #180]	@ (8002724 <HAL_InitTick+0xd0>)
 800266e:	f043 0301 	orr.w	r3, r3, #1
 8002672:	6453      	str	r3, [r2, #68]	@ 0x44
 8002674:	4b2b      	ldr	r3, [pc, #172]	@ (8002724 <HAL_InitTick+0xd0>)
 8002676:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002678:	f003 0301 	and.w	r3, r3, #1
 800267c:	60bb      	str	r3, [r7, #8]
 800267e:	68bb      	ldr	r3, [r7, #8]
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8002680:	f107 020c 	add.w	r2, r7, #12
 8002684:	f107 0310 	add.w	r3, r7, #16
 8002688:	4611      	mov	r1, r2
 800268a:	4618      	mov	r0, r3
 800268c:	f001 fda4 	bl	80041d8 <HAL_RCC_GetClockConfig>
  /* Compute TIM1 clock */
      uwTimclock = HAL_RCC_GetPCLK2Freq();
 8002690:	f001 fd8e 	bl	80041b0 <HAL_RCC_GetPCLK2Freq>
 8002694:	62b8      	str	r0, [r7, #40]	@ 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8002696:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002698:	4a23      	ldr	r2, [pc, #140]	@ (8002728 <HAL_InitTick+0xd4>)
 800269a:	fba2 2303 	umull	r2, r3, r2, r3
 800269e:	0c9b      	lsrs	r3, r3, #18
 80026a0:	3b01      	subs	r3, #1
 80026a2:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 80026a4:	4b21      	ldr	r3, [pc, #132]	@ (800272c <HAL_InitTick+0xd8>)
 80026a6:	4a22      	ldr	r2, [pc, #136]	@ (8002730 <HAL_InitTick+0xdc>)
 80026a8:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 80026aa:	4b20      	ldr	r3, [pc, #128]	@ (800272c <HAL_InitTick+0xd8>)
 80026ac:	f240 32e7 	movw	r2, #999	@ 0x3e7
 80026b0:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 80026b2:	4a1e      	ldr	r2, [pc, #120]	@ (800272c <HAL_InitTick+0xd8>)
 80026b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80026b6:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 80026b8:	4b1c      	ldr	r3, [pc, #112]	@ (800272c <HAL_InitTick+0xd8>)
 80026ba:	2200      	movs	r2, #0
 80026bc:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80026be:	4b1b      	ldr	r3, [pc, #108]	@ (800272c <HAL_InitTick+0xd8>)
 80026c0:	2200      	movs	r2, #0
 80026c2:	609a      	str	r2, [r3, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80026c4:	4b19      	ldr	r3, [pc, #100]	@ (800272c <HAL_InitTick+0xd8>)
 80026c6:	2200      	movs	r2, #0
 80026c8:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim1);
 80026ca:	4818      	ldr	r0, [pc, #96]	@ (800272c <HAL_InitTick+0xd8>)
 80026cc:	f001 fdb6 	bl	800423c <HAL_TIM_Base_Init>
 80026d0:	4603      	mov	r3, r0
 80026d2:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  if (status == HAL_OK)
 80026d6:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80026da:	2b00      	cmp	r3, #0
 80026dc:	d11b      	bne.n	8002716 <HAL_InitTick+0xc2>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 80026de:	4813      	ldr	r0, [pc, #76]	@ (800272c <HAL_InitTick+0xd8>)
 80026e0:	f001 fe56 	bl	8004390 <HAL_TIM_Base_Start_IT>
 80026e4:	4603      	mov	r3, r0
 80026e6:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    if (status == HAL_OK)
 80026ea:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80026ee:	2b00      	cmp	r3, #0
 80026f0:	d111      	bne.n	8002716 <HAL_InitTick+0xc2>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 80026f2:	2019      	movs	r0, #25
 80026f4:	f000 fb2a 	bl	8002d4c <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	2b0f      	cmp	r3, #15
 80026fc:	d808      	bhi.n	8002710 <HAL_InitTick+0xbc>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority, 0U);
 80026fe:	2200      	movs	r2, #0
 8002700:	6879      	ldr	r1, [r7, #4]
 8002702:	2019      	movs	r0, #25
 8002704:	f000 fb06 	bl	8002d14 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002708:	4a0a      	ldr	r2, [pc, #40]	@ (8002734 <HAL_InitTick+0xe0>)
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	6013      	str	r3, [r2, #0]
 800270e:	e002      	b.n	8002716 <HAL_InitTick+0xc2>
      }
      else
      {
        status = HAL_ERROR;
 8002710:	2301      	movs	r3, #1
 8002712:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8002716:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 800271a:	4618      	mov	r0, r3
 800271c:	3730      	adds	r7, #48	@ 0x30
 800271e:	46bd      	mov	sp, r7
 8002720:	bd80      	pop	{r7, pc}
 8002722:	bf00      	nop
 8002724:	40023800 	.word	0x40023800
 8002728:	431bde83 	.word	0x431bde83
 800272c:	20003f88 	.word	0x20003f88
 8002730:	40010000 	.word	0x40010000
 8002734:	20000008 	.word	0x20000008

08002738 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002738:	b480      	push	{r7}
 800273a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800273c:	bf00      	nop
 800273e:	e7fd      	b.n	800273c <NMI_Handler+0x4>

08002740 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002740:	b480      	push	{r7}
 8002742:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002744:	bf00      	nop
 8002746:	e7fd      	b.n	8002744 <HardFault_Handler+0x4>

08002748 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002748:	b480      	push	{r7}
 800274a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800274c:	bf00      	nop
 800274e:	e7fd      	b.n	800274c <MemManage_Handler+0x4>

08002750 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002750:	b480      	push	{r7}
 8002752:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002754:	bf00      	nop
 8002756:	e7fd      	b.n	8002754 <BusFault_Handler+0x4>

08002758 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002758:	b480      	push	{r7}
 800275a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800275c:	bf00      	nop
 800275e:	e7fd      	b.n	800275c <UsageFault_Handler+0x4>

08002760 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002760:	b480      	push	{r7}
 8002762:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002764:	bf00      	nop
 8002766:	46bd      	mov	sp, r7
 8002768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800276c:	4770      	bx	lr
	...

08002770 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8002770:	b580      	push	{r7, lr}
 8002772:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8002774:	4802      	ldr	r0, [pc, #8]	@ (8002780 <DMA1_Stream5_IRQHandler+0x10>)
 8002776:	f000 fc8f 	bl	8003098 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 800277a:	bf00      	nop
 800277c:	bd80      	pop	{r7, pc}
 800277e:	bf00      	nop
 8002780:	20003e64 	.word	0x20003e64

08002784 <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 8002784:	b580      	push	{r7, lr}
 8002786:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8002788:	4802      	ldr	r0, [pc, #8]	@ (8002794 <DMA1_Stream6_IRQHandler+0x10>)
 800278a:	f000 fc85 	bl	8003098 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 800278e:	bf00      	nop
 8002790:	bd80      	pop	{r7, pc}
 8002792:	bf00      	nop
 8002794:	20003ec4 	.word	0x20003ec4

08002798 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8002798:	b580      	push	{r7, lr}
 800279a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 800279c:	4802      	ldr	r0, [pc, #8]	@ (80027a8 <TIM1_UP_TIM10_IRQHandler+0x10>)
 800279e:	f001 ff63 	bl	8004668 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 80027a2:	bf00      	nop
 80027a4:	bd80      	pop	{r7, pc}
 80027a6:	bf00      	nop
 80027a8:	20003f88 	.word	0x20003f88

080027ac <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80027ac:	b580      	push	{r7, lr}
 80027ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80027b0:	4802      	ldr	r0, [pc, #8]	@ (80027bc <USART2_IRQHandler+0x10>)
 80027b2:	f002 feb9 	bl	8005528 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80027b6:	bf00      	nop
 80027b8:	bd80      	pop	{r7, pc}
 80027ba:	bf00      	nop
 80027bc:	20003e1c 	.word	0x20003e1c

080027c0 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80027c0:	b480      	push	{r7}
 80027c2:	af00      	add	r7, sp, #0
  return 1;
 80027c4:	2301      	movs	r3, #1
}
 80027c6:	4618      	mov	r0, r3
 80027c8:	46bd      	mov	sp, r7
 80027ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027ce:	4770      	bx	lr

080027d0 <_kill>:

int _kill(int pid, int sig)
{
 80027d0:	b580      	push	{r7, lr}
 80027d2:	b082      	sub	sp, #8
 80027d4:	af00      	add	r7, sp, #0
 80027d6:	6078      	str	r0, [r7, #4]
 80027d8:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80027da:	f013 f8b5 	bl	8015948 <__errno>
 80027de:	4603      	mov	r3, r0
 80027e0:	2216      	movs	r2, #22
 80027e2:	601a      	str	r2, [r3, #0]
  return -1;
 80027e4:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 80027e8:	4618      	mov	r0, r3
 80027ea:	3708      	adds	r7, #8
 80027ec:	46bd      	mov	sp, r7
 80027ee:	bd80      	pop	{r7, pc}

080027f0 <_exit>:

void _exit (int status)
{
 80027f0:	b580      	push	{r7, lr}
 80027f2:	b082      	sub	sp, #8
 80027f4:	af00      	add	r7, sp, #0
 80027f6:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80027f8:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 80027fc:	6878      	ldr	r0, [r7, #4]
 80027fe:	f7ff ffe7 	bl	80027d0 <_kill>
  while (1) {}    /* Make sure we hang here */
 8002802:	bf00      	nop
 8002804:	e7fd      	b.n	8002802 <_exit+0x12>

08002806 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002806:	b580      	push	{r7, lr}
 8002808:	b086      	sub	sp, #24
 800280a:	af00      	add	r7, sp, #0
 800280c:	60f8      	str	r0, [r7, #12]
 800280e:	60b9      	str	r1, [r7, #8]
 8002810:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002812:	2300      	movs	r3, #0
 8002814:	617b      	str	r3, [r7, #20]
 8002816:	e00a      	b.n	800282e <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002818:	f3af 8000 	nop.w
 800281c:	4601      	mov	r1, r0
 800281e:	68bb      	ldr	r3, [r7, #8]
 8002820:	1c5a      	adds	r2, r3, #1
 8002822:	60ba      	str	r2, [r7, #8]
 8002824:	b2ca      	uxtb	r2, r1
 8002826:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002828:	697b      	ldr	r3, [r7, #20]
 800282a:	3301      	adds	r3, #1
 800282c:	617b      	str	r3, [r7, #20]
 800282e:	697a      	ldr	r2, [r7, #20]
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	429a      	cmp	r2, r3
 8002834:	dbf0      	blt.n	8002818 <_read+0x12>
  }

  return len;
 8002836:	687b      	ldr	r3, [r7, #4]
}
 8002838:	4618      	mov	r0, r3
 800283a:	3718      	adds	r7, #24
 800283c:	46bd      	mov	sp, r7
 800283e:	bd80      	pop	{r7, pc}

08002840 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002840:	b580      	push	{r7, lr}
 8002842:	b086      	sub	sp, #24
 8002844:	af00      	add	r7, sp, #0
 8002846:	60f8      	str	r0, [r7, #12]
 8002848:	60b9      	str	r1, [r7, #8]
 800284a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800284c:	2300      	movs	r3, #0
 800284e:	617b      	str	r3, [r7, #20]
 8002850:	e009      	b.n	8002866 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8002852:	68bb      	ldr	r3, [r7, #8]
 8002854:	1c5a      	adds	r2, r3, #1
 8002856:	60ba      	str	r2, [r7, #8]
 8002858:	781b      	ldrb	r3, [r3, #0]
 800285a:	4618      	mov	r0, r3
 800285c:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002860:	697b      	ldr	r3, [r7, #20]
 8002862:	3301      	adds	r3, #1
 8002864:	617b      	str	r3, [r7, #20]
 8002866:	697a      	ldr	r2, [r7, #20]
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	429a      	cmp	r2, r3
 800286c:	dbf1      	blt.n	8002852 <_write+0x12>
  }
  return len;
 800286e:	687b      	ldr	r3, [r7, #4]
}
 8002870:	4618      	mov	r0, r3
 8002872:	3718      	adds	r7, #24
 8002874:	46bd      	mov	sp, r7
 8002876:	bd80      	pop	{r7, pc}

08002878 <_close>:

int _close(int file)
{
 8002878:	b480      	push	{r7}
 800287a:	b083      	sub	sp, #12
 800287c:	af00      	add	r7, sp, #0
 800287e:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002880:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8002884:	4618      	mov	r0, r3
 8002886:	370c      	adds	r7, #12
 8002888:	46bd      	mov	sp, r7
 800288a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800288e:	4770      	bx	lr

08002890 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002890:	b480      	push	{r7}
 8002892:	b083      	sub	sp, #12
 8002894:	af00      	add	r7, sp, #0
 8002896:	6078      	str	r0, [r7, #4]
 8002898:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800289a:	683b      	ldr	r3, [r7, #0]
 800289c:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80028a0:	605a      	str	r2, [r3, #4]
  return 0;
 80028a2:	2300      	movs	r3, #0
}
 80028a4:	4618      	mov	r0, r3
 80028a6:	370c      	adds	r7, #12
 80028a8:	46bd      	mov	sp, r7
 80028aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028ae:	4770      	bx	lr

080028b0 <_isatty>:

int _isatty(int file)
{
 80028b0:	b480      	push	{r7}
 80028b2:	b083      	sub	sp, #12
 80028b4:	af00      	add	r7, sp, #0
 80028b6:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80028b8:	2301      	movs	r3, #1
}
 80028ba:	4618      	mov	r0, r3
 80028bc:	370c      	adds	r7, #12
 80028be:	46bd      	mov	sp, r7
 80028c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028c4:	4770      	bx	lr

080028c6 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80028c6:	b480      	push	{r7}
 80028c8:	b085      	sub	sp, #20
 80028ca:	af00      	add	r7, sp, #0
 80028cc:	60f8      	str	r0, [r7, #12]
 80028ce:	60b9      	str	r1, [r7, #8]
 80028d0:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80028d2:	2300      	movs	r3, #0
}
 80028d4:	4618      	mov	r0, r3
 80028d6:	3714      	adds	r7, #20
 80028d8:	46bd      	mov	sp, r7
 80028da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028de:	4770      	bx	lr

080028e0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80028e0:	b580      	push	{r7, lr}
 80028e2:	b086      	sub	sp, #24
 80028e4:	af00      	add	r7, sp, #0
 80028e6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80028e8:	4a14      	ldr	r2, [pc, #80]	@ (800293c <_sbrk+0x5c>)
 80028ea:	4b15      	ldr	r3, [pc, #84]	@ (8002940 <_sbrk+0x60>)
 80028ec:	1ad3      	subs	r3, r2, r3
 80028ee:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80028f0:	697b      	ldr	r3, [r7, #20]
 80028f2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80028f4:	4b13      	ldr	r3, [pc, #76]	@ (8002944 <_sbrk+0x64>)
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	2b00      	cmp	r3, #0
 80028fa:	d102      	bne.n	8002902 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80028fc:	4b11      	ldr	r3, [pc, #68]	@ (8002944 <_sbrk+0x64>)
 80028fe:	4a12      	ldr	r2, [pc, #72]	@ (8002948 <_sbrk+0x68>)
 8002900:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002902:	4b10      	ldr	r3, [pc, #64]	@ (8002944 <_sbrk+0x64>)
 8002904:	681a      	ldr	r2, [r3, #0]
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	4413      	add	r3, r2
 800290a:	693a      	ldr	r2, [r7, #16]
 800290c:	429a      	cmp	r2, r3
 800290e:	d207      	bcs.n	8002920 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002910:	f013 f81a 	bl	8015948 <__errno>
 8002914:	4603      	mov	r3, r0
 8002916:	220c      	movs	r2, #12
 8002918:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800291a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800291e:	e009      	b.n	8002934 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002920:	4b08      	ldr	r3, [pc, #32]	@ (8002944 <_sbrk+0x64>)
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002926:	4b07      	ldr	r3, [pc, #28]	@ (8002944 <_sbrk+0x64>)
 8002928:	681a      	ldr	r2, [r3, #0]
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	4413      	add	r3, r2
 800292e:	4a05      	ldr	r2, [pc, #20]	@ (8002944 <_sbrk+0x64>)
 8002930:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002932:	68fb      	ldr	r3, [r7, #12]
}
 8002934:	4618      	mov	r0, r3
 8002936:	3718      	adds	r7, #24
 8002938:	46bd      	mov	sp, r7
 800293a:	bd80      	pop	{r7, pc}
 800293c:	20020000 	.word	0x20020000
 8002940:	00000400 	.word	0x00000400
 8002944:	20003fd4 	.word	0x20003fd4
 8002948:	2000dd90 	.word	0x2000dd90

0800294c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800294c:	b480      	push	{r7}
 800294e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002950:	4b06      	ldr	r3, [pc, #24]	@ (800296c <SystemInit+0x20>)
 8002952:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002956:	4a05      	ldr	r2, [pc, #20]	@ (800296c <SystemInit+0x20>)
 8002958:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800295c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002960:	bf00      	nop
 8002962:	46bd      	mov	sp, r7
 8002964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002968:	4770      	bx	lr
 800296a:	bf00      	nop
 800296c:	e000ed00 	.word	0xe000ed00

08002970 <cubemx_transport_open>:
#define UART_DMA_BUFFER_SIZE 2048

static uint8_t dma_buffer[UART_DMA_BUFFER_SIZE];
static size_t dma_head = 0, dma_tail = 0;

bool cubemx_transport_open(struct uxrCustomTransport * transport){
 8002970:	b580      	push	{r7, lr}
 8002972:	b084      	sub	sp, #16
 8002974:	af00      	add	r7, sp, #0
 8002976:	6078      	str	r0, [r7, #4]
    UART_HandleTypeDef * uart = (UART_HandleTypeDef*) transport->args;
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	f8d3 328c 	ldr.w	r3, [r3, #652]	@ 0x28c
 800297e:	60fb      	str	r3, [r7, #12]
    HAL_UART_Receive_DMA(uart, dma_buffer, UART_DMA_BUFFER_SIZE);
 8002980:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8002984:	4904      	ldr	r1, [pc, #16]	@ (8002998 <cubemx_transport_open+0x28>)
 8002986:	68f8      	ldr	r0, [r7, #12]
 8002988:	f002 fd2a 	bl	80053e0 <HAL_UART_Receive_DMA>
    return true;
 800298c:	2301      	movs	r3, #1
}
 800298e:	4618      	mov	r0, r3
 8002990:	3710      	adds	r7, #16
 8002992:	46bd      	mov	sp, r7
 8002994:	bd80      	pop	{r7, pc}
 8002996:	bf00      	nop
 8002998:	20003fd8 	.word	0x20003fd8

0800299c <cubemx_transport_close>:

bool cubemx_transport_close(struct uxrCustomTransport * transport){
 800299c:	b580      	push	{r7, lr}
 800299e:	b084      	sub	sp, #16
 80029a0:	af00      	add	r7, sp, #0
 80029a2:	6078      	str	r0, [r7, #4]
    UART_HandleTypeDef * uart = (UART_HandleTypeDef*) transport->args;
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	f8d3 328c 	ldr.w	r3, [r3, #652]	@ 0x28c
 80029aa:	60fb      	str	r3, [r7, #12]
    HAL_UART_DMAStop(uart);
 80029ac:	68f8      	ldr	r0, [r7, #12]
 80029ae:	f002 fd3c 	bl	800542a <HAL_UART_DMAStop>
    return true;
 80029b2:	2301      	movs	r3, #1
}
 80029b4:	4618      	mov	r0, r3
 80029b6:	3710      	adds	r7, #16
 80029b8:	46bd      	mov	sp, r7
 80029ba:	bd80      	pop	{r7, pc}

080029bc <cubemx_transport_write>:

size_t cubemx_transport_write(struct uxrCustomTransport* transport, uint8_t * buf, size_t len, uint8_t * err){
 80029bc:	b580      	push	{r7, lr}
 80029be:	b086      	sub	sp, #24
 80029c0:	af00      	add	r7, sp, #0
 80029c2:	60f8      	str	r0, [r7, #12]
 80029c4:	60b9      	str	r1, [r7, #8]
 80029c6:	607a      	str	r2, [r7, #4]
 80029c8:	603b      	str	r3, [r7, #0]
    UART_HandleTypeDef * uart = (UART_HandleTypeDef*) transport->args;
 80029ca:	68fb      	ldr	r3, [r7, #12]
 80029cc:	f8d3 328c 	ldr.w	r3, [r3, #652]	@ 0x28c
 80029d0:	617b      	str	r3, [r7, #20]

    HAL_StatusTypeDef ret;
    if (uart->gState == HAL_UART_STATE_READY){
 80029d2:	697b      	ldr	r3, [r7, #20]
 80029d4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80029d8:	b2db      	uxtb	r3, r3
 80029da:	2b20      	cmp	r3, #32
 80029dc:	d11c      	bne.n	8002a18 <cubemx_transport_write+0x5c>
        ret = HAL_UART_Transmit_DMA(uart, buf, len);
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	b29b      	uxth	r3, r3
 80029e2:	461a      	mov	r2, r3
 80029e4:	68b9      	ldr	r1, [r7, #8]
 80029e6:	6978      	ldr	r0, [r7, #20]
 80029e8:	f002 fc8a 	bl	8005300 <HAL_UART_Transmit_DMA>
 80029ec:	4603      	mov	r3, r0
 80029ee:	74fb      	strb	r3, [r7, #19]
        while (ret == HAL_OK && uart->gState != HAL_UART_STATE_READY){
 80029f0:	e002      	b.n	80029f8 <cubemx_transport_write+0x3c>
            osDelay(1);
 80029f2:	2001      	movs	r0, #1
 80029f4:	f003 ffb6 	bl	8006964 <osDelay>
        while (ret == HAL_OK && uart->gState != HAL_UART_STATE_READY){
 80029f8:	7cfb      	ldrb	r3, [r7, #19]
 80029fa:	2b00      	cmp	r3, #0
 80029fc:	d105      	bne.n	8002a0a <cubemx_transport_write+0x4e>
 80029fe:	697b      	ldr	r3, [r7, #20]
 8002a00:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002a04:	b2db      	uxtb	r3, r3
 8002a06:	2b20      	cmp	r3, #32
 8002a08:	d1f3      	bne.n	80029f2 <cubemx_transport_write+0x36>
        }

        return (ret == HAL_OK) ? len : 0;
 8002a0a:	7cfb      	ldrb	r3, [r7, #19]
 8002a0c:	2b00      	cmp	r3, #0
 8002a0e:	d101      	bne.n	8002a14 <cubemx_transport_write+0x58>
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	e002      	b.n	8002a1a <cubemx_transport_write+0x5e>
 8002a14:	2300      	movs	r3, #0
 8002a16:	e000      	b.n	8002a1a <cubemx_transport_write+0x5e>
    }else{
        return 0;
 8002a18:	2300      	movs	r3, #0
    }
}
 8002a1a:	4618      	mov	r0, r3
 8002a1c:	3718      	adds	r7, #24
 8002a1e:	46bd      	mov	sp, r7
 8002a20:	bd80      	pop	{r7, pc}
	...

08002a24 <cubemx_transport_read>:

size_t cubemx_transport_read(struct uxrCustomTransport* transport, uint8_t* buf, size_t len, int timeout, uint8_t* err){
 8002a24:	b580      	push	{r7, lr}
 8002a26:	b088      	sub	sp, #32
 8002a28:	af00      	add	r7, sp, #0
 8002a2a:	60f8      	str	r0, [r7, #12]
 8002a2c:	60b9      	str	r1, [r7, #8]
 8002a2e:	607a      	str	r2, [r7, #4]
 8002a30:	603b      	str	r3, [r7, #0]
    UART_HandleTypeDef * uart = (UART_HandleTypeDef*) transport->args;
 8002a32:	68fb      	ldr	r3, [r7, #12]
 8002a34:	f8d3 328c 	ldr.w	r3, [r3, #652]	@ 0x28c
 8002a38:	617b      	str	r3, [r7, #20]

    int ms_used = 0;
 8002a3a:	2300      	movs	r3, #0
 8002a3c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
 8002a3e:	b672      	cpsid	i
}
 8002a40:	bf00      	nop
    do
    {
        __disable_irq();
        dma_tail = UART_DMA_BUFFER_SIZE - __HAL_DMA_GET_COUNTER(uart->hdmarx);
 8002a42:	697b      	ldr	r3, [r7, #20]
 8002a44:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	685b      	ldr	r3, [r3, #4]
 8002a4a:	f5c3 6300 	rsb	r3, r3, #2048	@ 0x800
 8002a4e:	4a1c      	ldr	r2, [pc, #112]	@ (8002ac0 <cubemx_transport_read+0x9c>)
 8002a50:	6013      	str	r3, [r2, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8002a52:	b662      	cpsie	i
}
 8002a54:	bf00      	nop
        __enable_irq();
        ms_used++;
 8002a56:	69fb      	ldr	r3, [r7, #28]
 8002a58:	3301      	adds	r3, #1
 8002a5a:	61fb      	str	r3, [r7, #28]
        osDelay(portTICK_RATE_MS);
 8002a5c:	2001      	movs	r0, #1
 8002a5e:	f003 ff81 	bl	8006964 <osDelay>
    } while (dma_head == dma_tail && ms_used < timeout);
 8002a62:	4b18      	ldr	r3, [pc, #96]	@ (8002ac4 <cubemx_transport_read+0xa0>)
 8002a64:	681a      	ldr	r2, [r3, #0]
 8002a66:	4b16      	ldr	r3, [pc, #88]	@ (8002ac0 <cubemx_transport_read+0x9c>)
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	429a      	cmp	r2, r3
 8002a6c:	d103      	bne.n	8002a76 <cubemx_transport_read+0x52>
 8002a6e:	69fa      	ldr	r2, [r7, #28]
 8002a70:	683b      	ldr	r3, [r7, #0]
 8002a72:	429a      	cmp	r2, r3
 8002a74:	dbe3      	blt.n	8002a3e <cubemx_transport_read+0x1a>
    
    size_t wrote = 0;
 8002a76:	2300      	movs	r3, #0
 8002a78:	61bb      	str	r3, [r7, #24]
    while ((dma_head != dma_tail) && (wrote < len)){
 8002a7a:	e011      	b.n	8002aa0 <cubemx_transport_read+0x7c>
        buf[wrote] = dma_buffer[dma_head];
 8002a7c:	4b11      	ldr	r3, [pc, #68]	@ (8002ac4 <cubemx_transport_read+0xa0>)
 8002a7e:	681a      	ldr	r2, [r3, #0]
 8002a80:	68b9      	ldr	r1, [r7, #8]
 8002a82:	69bb      	ldr	r3, [r7, #24]
 8002a84:	440b      	add	r3, r1
 8002a86:	4910      	ldr	r1, [pc, #64]	@ (8002ac8 <cubemx_transport_read+0xa4>)
 8002a88:	5c8a      	ldrb	r2, [r1, r2]
 8002a8a:	701a      	strb	r2, [r3, #0]
        dma_head = (dma_head + 1) % UART_DMA_BUFFER_SIZE;
 8002a8c:	4b0d      	ldr	r3, [pc, #52]	@ (8002ac4 <cubemx_transport_read+0xa0>)
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	3301      	adds	r3, #1
 8002a92:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002a96:	4a0b      	ldr	r2, [pc, #44]	@ (8002ac4 <cubemx_transport_read+0xa0>)
 8002a98:	6013      	str	r3, [r2, #0]
        wrote++;
 8002a9a:	69bb      	ldr	r3, [r7, #24]
 8002a9c:	3301      	adds	r3, #1
 8002a9e:	61bb      	str	r3, [r7, #24]
    while ((dma_head != dma_tail) && (wrote < len)){
 8002aa0:	4b08      	ldr	r3, [pc, #32]	@ (8002ac4 <cubemx_transport_read+0xa0>)
 8002aa2:	681a      	ldr	r2, [r3, #0]
 8002aa4:	4b06      	ldr	r3, [pc, #24]	@ (8002ac0 <cubemx_transport_read+0x9c>)
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	429a      	cmp	r2, r3
 8002aaa:	d003      	beq.n	8002ab4 <cubemx_transport_read+0x90>
 8002aac:	69ba      	ldr	r2, [r7, #24]
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	429a      	cmp	r2, r3
 8002ab2:	d3e3      	bcc.n	8002a7c <cubemx_transport_read+0x58>
    }
    
    return wrote;
 8002ab4:	69bb      	ldr	r3, [r7, #24]
}
 8002ab6:	4618      	mov	r0, r3
 8002ab8:	3720      	adds	r7, #32
 8002aba:	46bd      	mov	sp, r7
 8002abc:	bd80      	pop	{r7, pc}
 8002abe:	bf00      	nop
 8002ac0:	200047dc 	.word	0x200047dc
 8002ac4:	200047d8 	.word	0x200047d8
 8002ac8:	20003fd8 	.word	0x20003fd8

08002acc <Reset_Handler>:
 8002acc:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8002b04 <LoopFillZerobss+0xe>
 8002ad0:	f7ff ff3c 	bl	800294c <SystemInit>
 8002ad4:	480c      	ldr	r0, [pc, #48]	@ (8002b08 <LoopFillZerobss+0x12>)
 8002ad6:	490d      	ldr	r1, [pc, #52]	@ (8002b0c <LoopFillZerobss+0x16>)
 8002ad8:	4a0d      	ldr	r2, [pc, #52]	@ (8002b10 <LoopFillZerobss+0x1a>)
 8002ada:	2300      	movs	r3, #0
 8002adc:	e002      	b.n	8002ae4 <LoopCopyDataInit>

08002ade <CopyDataInit>:
 8002ade:	58d4      	ldr	r4, [r2, r3]
 8002ae0:	50c4      	str	r4, [r0, r3]
 8002ae2:	3304      	adds	r3, #4

08002ae4 <LoopCopyDataInit>:
 8002ae4:	18c4      	adds	r4, r0, r3
 8002ae6:	428c      	cmp	r4, r1
 8002ae8:	d3f9      	bcc.n	8002ade <CopyDataInit>
 8002aea:	4a0a      	ldr	r2, [pc, #40]	@ (8002b14 <LoopFillZerobss+0x1e>)
 8002aec:	4c0a      	ldr	r4, [pc, #40]	@ (8002b18 <LoopFillZerobss+0x22>)
 8002aee:	2300      	movs	r3, #0
 8002af0:	e001      	b.n	8002af6 <LoopFillZerobss>

08002af2 <FillZerobss>:
 8002af2:	6013      	str	r3, [r2, #0]
 8002af4:	3204      	adds	r2, #4

08002af6 <LoopFillZerobss>:
 8002af6:	42a2      	cmp	r2, r4
 8002af8:	d3fb      	bcc.n	8002af2 <FillZerobss>
 8002afa:	f012 ff2b 	bl	8015954 <__libc_init_array>
 8002afe:	f7fe fd29 	bl	8001554 <main>
 8002b02:	4770      	bx	lr
 8002b04:	20020000 	.word	0x20020000
 8002b08:	20000000 	.word	0x20000000
 8002b0c:	20000110 	.word	0x20000110
 8002b10:	08017538 	.word	0x08017538
 8002b14:	20000110 	.word	0x20000110
 8002b18:	2000dd90 	.word	0x2000dd90

08002b1c <ADC_IRQHandler>:
 8002b1c:	e7fe      	b.n	8002b1c <ADC_IRQHandler>
	...

08002b20 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002b20:	b580      	push	{r7, lr}
 8002b22:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002b24:	4b0e      	ldr	r3, [pc, #56]	@ (8002b60 <HAL_Init+0x40>)
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	4a0d      	ldr	r2, [pc, #52]	@ (8002b60 <HAL_Init+0x40>)
 8002b2a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002b2e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002b30:	4b0b      	ldr	r3, [pc, #44]	@ (8002b60 <HAL_Init+0x40>)
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	4a0a      	ldr	r2, [pc, #40]	@ (8002b60 <HAL_Init+0x40>)
 8002b36:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002b3a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002b3c:	4b08      	ldr	r3, [pc, #32]	@ (8002b60 <HAL_Init+0x40>)
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	4a07      	ldr	r2, [pc, #28]	@ (8002b60 <HAL_Init+0x40>)
 8002b42:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002b46:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002b48:	2003      	movs	r0, #3
 8002b4a:	f000 f8d8 	bl	8002cfe <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002b4e:	2000      	movs	r0, #0
 8002b50:	f7ff fd80 	bl	8002654 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002b54:	f7ff fbc8 	bl	80022e8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002b58:	2300      	movs	r3, #0
}
 8002b5a:	4618      	mov	r0, r3
 8002b5c:	bd80      	pop	{r7, pc}
 8002b5e:	bf00      	nop
 8002b60:	40023c00 	.word	0x40023c00

08002b64 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002b64:	b480      	push	{r7}
 8002b66:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002b68:	4b06      	ldr	r3, [pc, #24]	@ (8002b84 <HAL_IncTick+0x20>)
 8002b6a:	781b      	ldrb	r3, [r3, #0]
 8002b6c:	461a      	mov	r2, r3
 8002b6e:	4b06      	ldr	r3, [pc, #24]	@ (8002b88 <HAL_IncTick+0x24>)
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	4413      	add	r3, r2
 8002b74:	4a04      	ldr	r2, [pc, #16]	@ (8002b88 <HAL_IncTick+0x24>)
 8002b76:	6013      	str	r3, [r2, #0]
}
 8002b78:	bf00      	nop
 8002b7a:	46bd      	mov	sp, r7
 8002b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b80:	4770      	bx	lr
 8002b82:	bf00      	nop
 8002b84:	2000000c 	.word	0x2000000c
 8002b88:	200047e0 	.word	0x200047e0

08002b8c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002b8c:	b480      	push	{r7}
 8002b8e:	af00      	add	r7, sp, #0
  return uwTick;
 8002b90:	4b03      	ldr	r3, [pc, #12]	@ (8002ba0 <HAL_GetTick+0x14>)
 8002b92:	681b      	ldr	r3, [r3, #0]
}
 8002b94:	4618      	mov	r0, r3
 8002b96:	46bd      	mov	sp, r7
 8002b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b9c:	4770      	bx	lr
 8002b9e:	bf00      	nop
 8002ba0:	200047e0 	.word	0x200047e0

08002ba4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002ba4:	b480      	push	{r7}
 8002ba6:	b085      	sub	sp, #20
 8002ba8:	af00      	add	r7, sp, #0
 8002baa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	f003 0307 	and.w	r3, r3, #7
 8002bb2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002bb4:	4b0c      	ldr	r3, [pc, #48]	@ (8002be8 <__NVIC_SetPriorityGrouping+0x44>)
 8002bb6:	68db      	ldr	r3, [r3, #12]
 8002bb8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002bba:	68ba      	ldr	r2, [r7, #8]
 8002bbc:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002bc0:	4013      	ands	r3, r2
 8002bc2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002bc4:	68fb      	ldr	r3, [r7, #12]
 8002bc6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002bc8:	68bb      	ldr	r3, [r7, #8]
 8002bca:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002bcc:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002bd0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002bd4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002bd6:	4a04      	ldr	r2, [pc, #16]	@ (8002be8 <__NVIC_SetPriorityGrouping+0x44>)
 8002bd8:	68bb      	ldr	r3, [r7, #8]
 8002bda:	60d3      	str	r3, [r2, #12]
}
 8002bdc:	bf00      	nop
 8002bde:	3714      	adds	r7, #20
 8002be0:	46bd      	mov	sp, r7
 8002be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002be6:	4770      	bx	lr
 8002be8:	e000ed00 	.word	0xe000ed00

08002bec <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002bec:	b480      	push	{r7}
 8002bee:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002bf0:	4b04      	ldr	r3, [pc, #16]	@ (8002c04 <__NVIC_GetPriorityGrouping+0x18>)
 8002bf2:	68db      	ldr	r3, [r3, #12]
 8002bf4:	0a1b      	lsrs	r3, r3, #8
 8002bf6:	f003 0307 	and.w	r3, r3, #7
}
 8002bfa:	4618      	mov	r0, r3
 8002bfc:	46bd      	mov	sp, r7
 8002bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c02:	4770      	bx	lr
 8002c04:	e000ed00 	.word	0xe000ed00

08002c08 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002c08:	b480      	push	{r7}
 8002c0a:	b083      	sub	sp, #12
 8002c0c:	af00      	add	r7, sp, #0
 8002c0e:	4603      	mov	r3, r0
 8002c10:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002c12:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c16:	2b00      	cmp	r3, #0
 8002c18:	db0b      	blt.n	8002c32 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002c1a:	79fb      	ldrb	r3, [r7, #7]
 8002c1c:	f003 021f 	and.w	r2, r3, #31
 8002c20:	4907      	ldr	r1, [pc, #28]	@ (8002c40 <__NVIC_EnableIRQ+0x38>)
 8002c22:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c26:	095b      	lsrs	r3, r3, #5
 8002c28:	2001      	movs	r0, #1
 8002c2a:	fa00 f202 	lsl.w	r2, r0, r2
 8002c2e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002c32:	bf00      	nop
 8002c34:	370c      	adds	r7, #12
 8002c36:	46bd      	mov	sp, r7
 8002c38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c3c:	4770      	bx	lr
 8002c3e:	bf00      	nop
 8002c40:	e000e100 	.word	0xe000e100

08002c44 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002c44:	b480      	push	{r7}
 8002c46:	b083      	sub	sp, #12
 8002c48:	af00      	add	r7, sp, #0
 8002c4a:	4603      	mov	r3, r0
 8002c4c:	6039      	str	r1, [r7, #0]
 8002c4e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002c50:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c54:	2b00      	cmp	r3, #0
 8002c56:	db0a      	blt.n	8002c6e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002c58:	683b      	ldr	r3, [r7, #0]
 8002c5a:	b2da      	uxtb	r2, r3
 8002c5c:	490c      	ldr	r1, [pc, #48]	@ (8002c90 <__NVIC_SetPriority+0x4c>)
 8002c5e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c62:	0112      	lsls	r2, r2, #4
 8002c64:	b2d2      	uxtb	r2, r2
 8002c66:	440b      	add	r3, r1
 8002c68:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002c6c:	e00a      	b.n	8002c84 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002c6e:	683b      	ldr	r3, [r7, #0]
 8002c70:	b2da      	uxtb	r2, r3
 8002c72:	4908      	ldr	r1, [pc, #32]	@ (8002c94 <__NVIC_SetPriority+0x50>)
 8002c74:	79fb      	ldrb	r3, [r7, #7]
 8002c76:	f003 030f 	and.w	r3, r3, #15
 8002c7a:	3b04      	subs	r3, #4
 8002c7c:	0112      	lsls	r2, r2, #4
 8002c7e:	b2d2      	uxtb	r2, r2
 8002c80:	440b      	add	r3, r1
 8002c82:	761a      	strb	r2, [r3, #24]
}
 8002c84:	bf00      	nop
 8002c86:	370c      	adds	r7, #12
 8002c88:	46bd      	mov	sp, r7
 8002c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c8e:	4770      	bx	lr
 8002c90:	e000e100 	.word	0xe000e100
 8002c94:	e000ed00 	.word	0xe000ed00

08002c98 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002c98:	b480      	push	{r7}
 8002c9a:	b089      	sub	sp, #36	@ 0x24
 8002c9c:	af00      	add	r7, sp, #0
 8002c9e:	60f8      	str	r0, [r7, #12]
 8002ca0:	60b9      	str	r1, [r7, #8]
 8002ca2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002ca4:	68fb      	ldr	r3, [r7, #12]
 8002ca6:	f003 0307 	and.w	r3, r3, #7
 8002caa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002cac:	69fb      	ldr	r3, [r7, #28]
 8002cae:	f1c3 0307 	rsb	r3, r3, #7
 8002cb2:	2b04      	cmp	r3, #4
 8002cb4:	bf28      	it	cs
 8002cb6:	2304      	movcs	r3, #4
 8002cb8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002cba:	69fb      	ldr	r3, [r7, #28]
 8002cbc:	3304      	adds	r3, #4
 8002cbe:	2b06      	cmp	r3, #6
 8002cc0:	d902      	bls.n	8002cc8 <NVIC_EncodePriority+0x30>
 8002cc2:	69fb      	ldr	r3, [r7, #28]
 8002cc4:	3b03      	subs	r3, #3
 8002cc6:	e000      	b.n	8002cca <NVIC_EncodePriority+0x32>
 8002cc8:	2300      	movs	r3, #0
 8002cca:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002ccc:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8002cd0:	69bb      	ldr	r3, [r7, #24]
 8002cd2:	fa02 f303 	lsl.w	r3, r2, r3
 8002cd6:	43da      	mvns	r2, r3
 8002cd8:	68bb      	ldr	r3, [r7, #8]
 8002cda:	401a      	ands	r2, r3
 8002cdc:	697b      	ldr	r3, [r7, #20]
 8002cde:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002ce0:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8002ce4:	697b      	ldr	r3, [r7, #20]
 8002ce6:	fa01 f303 	lsl.w	r3, r1, r3
 8002cea:	43d9      	mvns	r1, r3
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002cf0:	4313      	orrs	r3, r2
         );
}
 8002cf2:	4618      	mov	r0, r3
 8002cf4:	3724      	adds	r7, #36	@ 0x24
 8002cf6:	46bd      	mov	sp, r7
 8002cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cfc:	4770      	bx	lr

08002cfe <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002cfe:	b580      	push	{r7, lr}
 8002d00:	b082      	sub	sp, #8
 8002d02:	af00      	add	r7, sp, #0
 8002d04:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002d06:	6878      	ldr	r0, [r7, #4]
 8002d08:	f7ff ff4c 	bl	8002ba4 <__NVIC_SetPriorityGrouping>
}
 8002d0c:	bf00      	nop
 8002d0e:	3708      	adds	r7, #8
 8002d10:	46bd      	mov	sp, r7
 8002d12:	bd80      	pop	{r7, pc}

08002d14 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002d14:	b580      	push	{r7, lr}
 8002d16:	b086      	sub	sp, #24
 8002d18:	af00      	add	r7, sp, #0
 8002d1a:	4603      	mov	r3, r0
 8002d1c:	60b9      	str	r1, [r7, #8]
 8002d1e:	607a      	str	r2, [r7, #4]
 8002d20:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002d22:	2300      	movs	r3, #0
 8002d24:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002d26:	f7ff ff61 	bl	8002bec <__NVIC_GetPriorityGrouping>
 8002d2a:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002d2c:	687a      	ldr	r2, [r7, #4]
 8002d2e:	68b9      	ldr	r1, [r7, #8]
 8002d30:	6978      	ldr	r0, [r7, #20]
 8002d32:	f7ff ffb1 	bl	8002c98 <NVIC_EncodePriority>
 8002d36:	4602      	mov	r2, r0
 8002d38:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002d3c:	4611      	mov	r1, r2
 8002d3e:	4618      	mov	r0, r3
 8002d40:	f7ff ff80 	bl	8002c44 <__NVIC_SetPriority>
}
 8002d44:	bf00      	nop
 8002d46:	3718      	adds	r7, #24
 8002d48:	46bd      	mov	sp, r7
 8002d4a:	bd80      	pop	{r7, pc}

08002d4c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002d4c:	b580      	push	{r7, lr}
 8002d4e:	b082      	sub	sp, #8
 8002d50:	af00      	add	r7, sp, #0
 8002d52:	4603      	mov	r3, r0
 8002d54:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002d56:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d5a:	4618      	mov	r0, r3
 8002d5c:	f7ff ff54 	bl	8002c08 <__NVIC_EnableIRQ>
}
 8002d60:	bf00      	nop
 8002d62:	3708      	adds	r7, #8
 8002d64:	46bd      	mov	sp, r7
 8002d66:	bd80      	pop	{r7, pc}

08002d68 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002d68:	b580      	push	{r7, lr}
 8002d6a:	b086      	sub	sp, #24
 8002d6c:	af00      	add	r7, sp, #0
 8002d6e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002d70:	2300      	movs	r3, #0
 8002d72:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002d74:	f7ff ff0a 	bl	8002b8c <HAL_GetTick>
 8002d78:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	2b00      	cmp	r3, #0
 8002d7e:	d101      	bne.n	8002d84 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002d80:	2301      	movs	r3, #1
 8002d82:	e099      	b.n	8002eb8 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	2202      	movs	r2, #2
 8002d88:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	2200      	movs	r2, #0
 8002d90:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	681a      	ldr	r2, [r3, #0]
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	f022 0201 	bic.w	r2, r2, #1
 8002da2:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002da4:	e00f      	b.n	8002dc6 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002da6:	f7ff fef1 	bl	8002b8c <HAL_GetTick>
 8002daa:	4602      	mov	r2, r0
 8002dac:	693b      	ldr	r3, [r7, #16]
 8002dae:	1ad3      	subs	r3, r2, r3
 8002db0:	2b05      	cmp	r3, #5
 8002db2:	d908      	bls.n	8002dc6 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	2220      	movs	r2, #32
 8002db8:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	2203      	movs	r2, #3
 8002dbe:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 8002dc2:	2303      	movs	r3, #3
 8002dc4:	e078      	b.n	8002eb8 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	f003 0301 	and.w	r3, r3, #1
 8002dd0:	2b00      	cmp	r3, #0
 8002dd2:	d1e8      	bne.n	8002da6 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002ddc:	697a      	ldr	r2, [r7, #20]
 8002dde:	4b38      	ldr	r3, [pc, #224]	@ (8002ec0 <HAL_DMA_Init+0x158>)
 8002de0:	4013      	ands	r3, r2
 8002de2:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	685a      	ldr	r2, [r3, #4]
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	689b      	ldr	r3, [r3, #8]
 8002dec:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002df2:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	691b      	ldr	r3, [r3, #16]
 8002df8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002dfe:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	699b      	ldr	r3, [r3, #24]
 8002e04:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002e0a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	6a1b      	ldr	r3, [r3, #32]
 8002e10:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002e12:	697a      	ldr	r2, [r7, #20]
 8002e14:	4313      	orrs	r3, r2
 8002e16:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e1c:	2b04      	cmp	r3, #4
 8002e1e:	d107      	bne.n	8002e30 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e28:	4313      	orrs	r3, r2
 8002e2a:	697a      	ldr	r2, [r7, #20]
 8002e2c:	4313      	orrs	r3, r2
 8002e2e:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	697a      	ldr	r2, [r7, #20]
 8002e36:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	695b      	ldr	r3, [r3, #20]
 8002e3e:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002e40:	697b      	ldr	r3, [r7, #20]
 8002e42:	f023 0307 	bic.w	r3, r3, #7
 8002e46:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e4c:	697a      	ldr	r2, [r7, #20]
 8002e4e:	4313      	orrs	r3, r2
 8002e50:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e56:	2b04      	cmp	r3, #4
 8002e58:	d117      	bne.n	8002e8a <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002e5e:	697a      	ldr	r2, [r7, #20]
 8002e60:	4313      	orrs	r3, r2
 8002e62:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002e68:	2b00      	cmp	r3, #0
 8002e6a:	d00e      	beq.n	8002e8a <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002e6c:	6878      	ldr	r0, [r7, #4]
 8002e6e:	f000 fb01 	bl	8003474 <DMA_CheckFifoParam>
 8002e72:	4603      	mov	r3, r0
 8002e74:	2b00      	cmp	r3, #0
 8002e76:	d008      	beq.n	8002e8a <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	2240      	movs	r2, #64	@ 0x40
 8002e7c:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	2201      	movs	r2, #1
 8002e82:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 8002e86:	2301      	movs	r3, #1
 8002e88:	e016      	b.n	8002eb8 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	697a      	ldr	r2, [r7, #20]
 8002e90:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002e92:	6878      	ldr	r0, [r7, #4]
 8002e94:	f000 fab8 	bl	8003408 <DMA_CalcBaseAndBitshift>
 8002e98:	4603      	mov	r3, r0
 8002e9a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002ea0:	223f      	movs	r2, #63	@ 0x3f
 8002ea2:	409a      	lsls	r2, r3
 8002ea4:	68fb      	ldr	r3, [r7, #12]
 8002ea6:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	2200      	movs	r2, #0
 8002eac:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	2201      	movs	r2, #1
 8002eb2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8002eb6:	2300      	movs	r3, #0
}
 8002eb8:	4618      	mov	r0, r3
 8002eba:	3718      	adds	r7, #24
 8002ebc:	46bd      	mov	sp, r7
 8002ebe:	bd80      	pop	{r7, pc}
 8002ec0:	f010803f 	.word	0xf010803f

08002ec4 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002ec4:	b580      	push	{r7, lr}
 8002ec6:	b086      	sub	sp, #24
 8002ec8:	af00      	add	r7, sp, #0
 8002eca:	60f8      	str	r0, [r7, #12]
 8002ecc:	60b9      	str	r1, [r7, #8]
 8002ece:	607a      	str	r2, [r7, #4]
 8002ed0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002ed2:	2300      	movs	r3, #0
 8002ed4:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002ed6:	68fb      	ldr	r3, [r7, #12]
 8002ed8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002eda:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8002edc:	68fb      	ldr	r3, [r7, #12]
 8002ede:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8002ee2:	2b01      	cmp	r3, #1
 8002ee4:	d101      	bne.n	8002eea <HAL_DMA_Start_IT+0x26>
 8002ee6:	2302      	movs	r3, #2
 8002ee8:	e040      	b.n	8002f6c <HAL_DMA_Start_IT+0xa8>
 8002eea:	68fb      	ldr	r3, [r7, #12]
 8002eec:	2201      	movs	r2, #1
 8002eee:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002ef2:	68fb      	ldr	r3, [r7, #12]
 8002ef4:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002ef8:	b2db      	uxtb	r3, r3
 8002efa:	2b01      	cmp	r3, #1
 8002efc:	d12f      	bne.n	8002f5e <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002efe:	68fb      	ldr	r3, [r7, #12]
 8002f00:	2202      	movs	r2, #2
 8002f02:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002f06:	68fb      	ldr	r3, [r7, #12]
 8002f08:	2200      	movs	r2, #0
 8002f0a:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002f0c:	683b      	ldr	r3, [r7, #0]
 8002f0e:	687a      	ldr	r2, [r7, #4]
 8002f10:	68b9      	ldr	r1, [r7, #8]
 8002f12:	68f8      	ldr	r0, [r7, #12]
 8002f14:	f000 fa4a 	bl	80033ac <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002f18:	68fb      	ldr	r3, [r7, #12]
 8002f1a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002f1c:	223f      	movs	r2, #63	@ 0x3f
 8002f1e:	409a      	lsls	r2, r3
 8002f20:	693b      	ldr	r3, [r7, #16]
 8002f22:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8002f24:	68fb      	ldr	r3, [r7, #12]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	681a      	ldr	r2, [r3, #0]
 8002f2a:	68fb      	ldr	r3, [r7, #12]
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	f042 0216 	orr.w	r2, r2, #22
 8002f32:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8002f34:	68fb      	ldr	r3, [r7, #12]
 8002f36:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f38:	2b00      	cmp	r3, #0
 8002f3a:	d007      	beq.n	8002f4c <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8002f3c:	68fb      	ldr	r3, [r7, #12]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	681a      	ldr	r2, [r3, #0]
 8002f42:	68fb      	ldr	r3, [r7, #12]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	f042 0208 	orr.w	r2, r2, #8
 8002f4a:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002f4c:	68fb      	ldr	r3, [r7, #12]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	681a      	ldr	r2, [r3, #0]
 8002f52:	68fb      	ldr	r3, [r7, #12]
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	f042 0201 	orr.w	r2, r2, #1
 8002f5a:	601a      	str	r2, [r3, #0]
 8002f5c:	e005      	b.n	8002f6a <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8002f5e:	68fb      	ldr	r3, [r7, #12]
 8002f60:	2200      	movs	r2, #0
 8002f62:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8002f66:	2302      	movs	r3, #2
 8002f68:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8002f6a:	7dfb      	ldrb	r3, [r7, #23]
}
 8002f6c:	4618      	mov	r0, r3
 8002f6e:	3718      	adds	r7, #24
 8002f70:	46bd      	mov	sp, r7
 8002f72:	bd80      	pop	{r7, pc}

08002f74 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002f74:	b580      	push	{r7, lr}
 8002f76:	b084      	sub	sp, #16
 8002f78:	af00      	add	r7, sp, #0
 8002f7a:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002f80:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8002f82:	f7ff fe03 	bl	8002b8c <HAL_GetTick>
 8002f86:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002f8e:	b2db      	uxtb	r3, r3
 8002f90:	2b02      	cmp	r3, #2
 8002f92:	d008      	beq.n	8002fa6 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	2280      	movs	r2, #128	@ 0x80
 8002f98:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	2200      	movs	r2, #0
 8002f9e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8002fa2:	2301      	movs	r3, #1
 8002fa4:	e052      	b.n	800304c <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	681a      	ldr	r2, [r3, #0]
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	f022 0216 	bic.w	r2, r2, #22
 8002fb4:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	695a      	ldr	r2, [r3, #20]
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002fc4:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002fca:	2b00      	cmp	r3, #0
 8002fcc:	d103      	bne.n	8002fd6 <HAL_DMA_Abort+0x62>
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002fd2:	2b00      	cmp	r3, #0
 8002fd4:	d007      	beq.n	8002fe6 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	681a      	ldr	r2, [r3, #0]
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	f022 0208 	bic.w	r2, r2, #8
 8002fe4:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	681a      	ldr	r2, [r3, #0]
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	f022 0201 	bic.w	r2, r2, #1
 8002ff4:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002ff6:	e013      	b.n	8003020 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002ff8:	f7ff fdc8 	bl	8002b8c <HAL_GetTick>
 8002ffc:	4602      	mov	r2, r0
 8002ffe:	68bb      	ldr	r3, [r7, #8]
 8003000:	1ad3      	subs	r3, r2, r3
 8003002:	2b05      	cmp	r3, #5
 8003004:	d90c      	bls.n	8003020 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	2220      	movs	r2, #32
 800300a:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	2203      	movs	r2, #3
 8003010:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	2200      	movs	r2, #0
 8003018:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 800301c:	2303      	movs	r3, #3
 800301e:	e015      	b.n	800304c <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	f003 0301 	and.w	r3, r3, #1
 800302a:	2b00      	cmp	r3, #0
 800302c:	d1e4      	bne.n	8002ff8 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003032:	223f      	movs	r2, #63	@ 0x3f
 8003034:	409a      	lsls	r2, r3
 8003036:	68fb      	ldr	r3, [r7, #12]
 8003038:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	2201      	movs	r2, #1
 800303e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	2200      	movs	r2, #0
 8003046:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 800304a:	2300      	movs	r3, #0
}
 800304c:	4618      	mov	r0, r3
 800304e:	3710      	adds	r7, #16
 8003050:	46bd      	mov	sp, r7
 8003052:	bd80      	pop	{r7, pc}

08003054 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003054:	b480      	push	{r7}
 8003056:	b083      	sub	sp, #12
 8003058:	af00      	add	r7, sp, #0
 800305a:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003062:	b2db      	uxtb	r3, r3
 8003064:	2b02      	cmp	r3, #2
 8003066:	d004      	beq.n	8003072 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	2280      	movs	r2, #128	@ 0x80
 800306c:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 800306e:	2301      	movs	r3, #1
 8003070:	e00c      	b.n	800308c <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	2205      	movs	r2, #5
 8003076:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	681a      	ldr	r2, [r3, #0]
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	f022 0201 	bic.w	r2, r2, #1
 8003088:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800308a:	2300      	movs	r3, #0
}
 800308c:	4618      	mov	r0, r3
 800308e:	370c      	adds	r7, #12
 8003090:	46bd      	mov	sp, r7
 8003092:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003096:	4770      	bx	lr

08003098 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003098:	b580      	push	{r7, lr}
 800309a:	b086      	sub	sp, #24
 800309c:	af00      	add	r7, sp, #0
 800309e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80030a0:	2300      	movs	r3, #0
 80030a2:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80030a4:	4b8e      	ldr	r3, [pc, #568]	@ (80032e0 <HAL_DMA_IRQHandler+0x248>)
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	4a8e      	ldr	r2, [pc, #568]	@ (80032e4 <HAL_DMA_IRQHandler+0x24c>)
 80030aa:	fba2 2303 	umull	r2, r3, r2, r3
 80030ae:	0a9b      	lsrs	r3, r3, #10
 80030b0:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80030b6:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80030b8:	693b      	ldr	r3, [r7, #16]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80030c2:	2208      	movs	r2, #8
 80030c4:	409a      	lsls	r2, r3
 80030c6:	68fb      	ldr	r3, [r7, #12]
 80030c8:	4013      	ands	r3, r2
 80030ca:	2b00      	cmp	r3, #0
 80030cc:	d01a      	beq.n	8003104 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	f003 0304 	and.w	r3, r3, #4
 80030d8:	2b00      	cmp	r3, #0
 80030da:	d013      	beq.n	8003104 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	681a      	ldr	r2, [r3, #0]
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	f022 0204 	bic.w	r2, r2, #4
 80030ea:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80030f0:	2208      	movs	r2, #8
 80030f2:	409a      	lsls	r2, r3
 80030f4:	693b      	ldr	r3, [r7, #16]
 80030f6:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80030fc:	f043 0201 	orr.w	r2, r3, #1
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003108:	2201      	movs	r2, #1
 800310a:	409a      	lsls	r2, r3
 800310c:	68fb      	ldr	r3, [r7, #12]
 800310e:	4013      	ands	r3, r2
 8003110:	2b00      	cmp	r3, #0
 8003112:	d012      	beq.n	800313a <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	695b      	ldr	r3, [r3, #20]
 800311a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800311e:	2b00      	cmp	r3, #0
 8003120:	d00b      	beq.n	800313a <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003126:	2201      	movs	r2, #1
 8003128:	409a      	lsls	r2, r3
 800312a:	693b      	ldr	r3, [r7, #16]
 800312c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003132:	f043 0202 	orr.w	r2, r3, #2
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800313e:	2204      	movs	r2, #4
 8003140:	409a      	lsls	r2, r3
 8003142:	68fb      	ldr	r3, [r7, #12]
 8003144:	4013      	ands	r3, r2
 8003146:	2b00      	cmp	r3, #0
 8003148:	d012      	beq.n	8003170 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	f003 0302 	and.w	r3, r3, #2
 8003154:	2b00      	cmp	r3, #0
 8003156:	d00b      	beq.n	8003170 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800315c:	2204      	movs	r2, #4
 800315e:	409a      	lsls	r2, r3
 8003160:	693b      	ldr	r3, [r7, #16]
 8003162:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003168:	f043 0204 	orr.w	r2, r3, #4
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003174:	2210      	movs	r2, #16
 8003176:	409a      	lsls	r2, r3
 8003178:	68fb      	ldr	r3, [r7, #12]
 800317a:	4013      	ands	r3, r2
 800317c:	2b00      	cmp	r3, #0
 800317e:	d043      	beq.n	8003208 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	f003 0308 	and.w	r3, r3, #8
 800318a:	2b00      	cmp	r3, #0
 800318c:	d03c      	beq.n	8003208 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003192:	2210      	movs	r2, #16
 8003194:	409a      	lsls	r2, r3
 8003196:	693b      	ldr	r3, [r7, #16]
 8003198:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80031a4:	2b00      	cmp	r3, #0
 80031a6:	d018      	beq.n	80031da <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80031b2:	2b00      	cmp	r3, #0
 80031b4:	d108      	bne.n	80031c8 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80031ba:	2b00      	cmp	r3, #0
 80031bc:	d024      	beq.n	8003208 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80031c2:	6878      	ldr	r0, [r7, #4]
 80031c4:	4798      	blx	r3
 80031c6:	e01f      	b.n	8003208 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80031cc:	2b00      	cmp	r3, #0
 80031ce:	d01b      	beq.n	8003208 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80031d4:	6878      	ldr	r0, [r7, #4]
 80031d6:	4798      	blx	r3
 80031d8:	e016      	b.n	8003208 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80031e4:	2b00      	cmp	r3, #0
 80031e6:	d107      	bne.n	80031f8 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	681a      	ldr	r2, [r3, #0]
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	f022 0208 	bic.w	r2, r2, #8
 80031f6:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80031fc:	2b00      	cmp	r3, #0
 80031fe:	d003      	beq.n	8003208 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003204:	6878      	ldr	r0, [r7, #4]
 8003206:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800320c:	2220      	movs	r2, #32
 800320e:	409a      	lsls	r2, r3
 8003210:	68fb      	ldr	r3, [r7, #12]
 8003212:	4013      	ands	r3, r2
 8003214:	2b00      	cmp	r3, #0
 8003216:	f000 808f 	beq.w	8003338 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	f003 0310 	and.w	r3, r3, #16
 8003224:	2b00      	cmp	r3, #0
 8003226:	f000 8087 	beq.w	8003338 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800322e:	2220      	movs	r2, #32
 8003230:	409a      	lsls	r2, r3
 8003232:	693b      	ldr	r3, [r7, #16]
 8003234:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800323c:	b2db      	uxtb	r3, r3
 800323e:	2b05      	cmp	r3, #5
 8003240:	d136      	bne.n	80032b0 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	681a      	ldr	r2, [r3, #0]
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	f022 0216 	bic.w	r2, r2, #22
 8003250:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	695a      	ldr	r2, [r3, #20]
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8003260:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003266:	2b00      	cmp	r3, #0
 8003268:	d103      	bne.n	8003272 <HAL_DMA_IRQHandler+0x1da>
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800326e:	2b00      	cmp	r3, #0
 8003270:	d007      	beq.n	8003282 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	681a      	ldr	r2, [r3, #0]
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	f022 0208 	bic.w	r2, r2, #8
 8003280:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003286:	223f      	movs	r2, #63	@ 0x3f
 8003288:	409a      	lsls	r2, r3
 800328a:	693b      	ldr	r3, [r7, #16]
 800328c:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	2201      	movs	r2, #1
 8003292:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	2200      	movs	r2, #0
 800329a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80032a2:	2b00      	cmp	r3, #0
 80032a4:	d07e      	beq.n	80033a4 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80032aa:	6878      	ldr	r0, [r7, #4]
 80032ac:	4798      	blx	r3
        }
        return;
 80032ae:	e079      	b.n	80033a4 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80032ba:	2b00      	cmp	r3, #0
 80032bc:	d01d      	beq.n	80032fa <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80032c8:	2b00      	cmp	r3, #0
 80032ca:	d10d      	bne.n	80032e8 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80032d0:	2b00      	cmp	r3, #0
 80032d2:	d031      	beq.n	8003338 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80032d8:	6878      	ldr	r0, [r7, #4]
 80032da:	4798      	blx	r3
 80032dc:	e02c      	b.n	8003338 <HAL_DMA_IRQHandler+0x2a0>
 80032de:	bf00      	nop
 80032e0:	20000004 	.word	0x20000004
 80032e4:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80032ec:	2b00      	cmp	r3, #0
 80032ee:	d023      	beq.n	8003338 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80032f4:	6878      	ldr	r0, [r7, #4]
 80032f6:	4798      	blx	r3
 80032f8:	e01e      	b.n	8003338 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003304:	2b00      	cmp	r3, #0
 8003306:	d10f      	bne.n	8003328 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	681a      	ldr	r2, [r3, #0]
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	f022 0210 	bic.w	r2, r2, #16
 8003316:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	2201      	movs	r2, #1
 800331c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	2200      	movs	r2, #0
 8003324:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800332c:	2b00      	cmp	r3, #0
 800332e:	d003      	beq.n	8003338 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003334:	6878      	ldr	r0, [r7, #4]
 8003336:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800333c:	2b00      	cmp	r3, #0
 800333e:	d032      	beq.n	80033a6 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003344:	f003 0301 	and.w	r3, r3, #1
 8003348:	2b00      	cmp	r3, #0
 800334a:	d022      	beq.n	8003392 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	2205      	movs	r2, #5
 8003350:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	681a      	ldr	r2, [r3, #0]
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	f022 0201 	bic.w	r2, r2, #1
 8003362:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8003364:	68bb      	ldr	r3, [r7, #8]
 8003366:	3301      	adds	r3, #1
 8003368:	60bb      	str	r3, [r7, #8]
 800336a:	697a      	ldr	r2, [r7, #20]
 800336c:	429a      	cmp	r2, r3
 800336e:	d307      	bcc.n	8003380 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	f003 0301 	and.w	r3, r3, #1
 800337a:	2b00      	cmp	r3, #0
 800337c:	d1f2      	bne.n	8003364 <HAL_DMA_IRQHandler+0x2cc>
 800337e:	e000      	b.n	8003382 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8003380:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	2201      	movs	r2, #1
 8003386:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	2200      	movs	r2, #0
 800338e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003396:	2b00      	cmp	r3, #0
 8003398:	d005      	beq.n	80033a6 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800339e:	6878      	ldr	r0, [r7, #4]
 80033a0:	4798      	blx	r3
 80033a2:	e000      	b.n	80033a6 <HAL_DMA_IRQHandler+0x30e>
        return;
 80033a4:	bf00      	nop
    }
  }
}
 80033a6:	3718      	adds	r7, #24
 80033a8:	46bd      	mov	sp, r7
 80033aa:	bd80      	pop	{r7, pc}

080033ac <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80033ac:	b480      	push	{r7}
 80033ae:	b085      	sub	sp, #20
 80033b0:	af00      	add	r7, sp, #0
 80033b2:	60f8      	str	r0, [r7, #12]
 80033b4:	60b9      	str	r1, [r7, #8]
 80033b6:	607a      	str	r2, [r7, #4]
 80033b8:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80033ba:	68fb      	ldr	r3, [r7, #12]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	681a      	ldr	r2, [r3, #0]
 80033c0:	68fb      	ldr	r3, [r7, #12]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 80033c8:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80033ca:	68fb      	ldr	r3, [r7, #12]
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	683a      	ldr	r2, [r7, #0]
 80033d0:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80033d2:	68fb      	ldr	r3, [r7, #12]
 80033d4:	689b      	ldr	r3, [r3, #8]
 80033d6:	2b40      	cmp	r3, #64	@ 0x40
 80033d8:	d108      	bne.n	80033ec <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80033da:	68fb      	ldr	r3, [r7, #12]
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	687a      	ldr	r2, [r7, #4]
 80033e0:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80033e2:	68fb      	ldr	r3, [r7, #12]
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	68ba      	ldr	r2, [r7, #8]
 80033e8:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80033ea:	e007      	b.n	80033fc <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80033ec:	68fb      	ldr	r3, [r7, #12]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	68ba      	ldr	r2, [r7, #8]
 80033f2:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80033f4:	68fb      	ldr	r3, [r7, #12]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	687a      	ldr	r2, [r7, #4]
 80033fa:	60da      	str	r2, [r3, #12]
}
 80033fc:	bf00      	nop
 80033fe:	3714      	adds	r7, #20
 8003400:	46bd      	mov	sp, r7
 8003402:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003406:	4770      	bx	lr

08003408 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003408:	b480      	push	{r7}
 800340a:	b085      	sub	sp, #20
 800340c:	af00      	add	r7, sp, #0
 800340e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	b2db      	uxtb	r3, r3
 8003416:	3b10      	subs	r3, #16
 8003418:	4a14      	ldr	r2, [pc, #80]	@ (800346c <DMA_CalcBaseAndBitshift+0x64>)
 800341a:	fba2 2303 	umull	r2, r3, r2, r3
 800341e:	091b      	lsrs	r3, r3, #4
 8003420:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8003422:	4a13      	ldr	r2, [pc, #76]	@ (8003470 <DMA_CalcBaseAndBitshift+0x68>)
 8003424:	68fb      	ldr	r3, [r7, #12]
 8003426:	4413      	add	r3, r2
 8003428:	781b      	ldrb	r3, [r3, #0]
 800342a:	461a      	mov	r2, r3
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8003430:	68fb      	ldr	r3, [r7, #12]
 8003432:	2b03      	cmp	r3, #3
 8003434:	d909      	bls.n	800344a <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 800343e:	f023 0303 	bic.w	r3, r3, #3
 8003442:	1d1a      	adds	r2, r3, #4
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	659a      	str	r2, [r3, #88]	@ 0x58
 8003448:	e007      	b.n	800345a <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8003452:	f023 0303 	bic.w	r3, r3, #3
 8003456:	687a      	ldr	r2, [r7, #4]
 8003458:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 800345e:	4618      	mov	r0, r3
 8003460:	3714      	adds	r7, #20
 8003462:	46bd      	mov	sp, r7
 8003464:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003468:	4770      	bx	lr
 800346a:	bf00      	nop
 800346c:	aaaaaaab 	.word	0xaaaaaaab
 8003470:	0801689c 	.word	0x0801689c

08003474 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8003474:	b480      	push	{r7}
 8003476:	b085      	sub	sp, #20
 8003478:	af00      	add	r7, sp, #0
 800347a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800347c:	2300      	movs	r3, #0
 800347e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003484:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	699b      	ldr	r3, [r3, #24]
 800348a:	2b00      	cmp	r3, #0
 800348c:	d11f      	bne.n	80034ce <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800348e:	68bb      	ldr	r3, [r7, #8]
 8003490:	2b03      	cmp	r3, #3
 8003492:	d856      	bhi.n	8003542 <DMA_CheckFifoParam+0xce>
 8003494:	a201      	add	r2, pc, #4	@ (adr r2, 800349c <DMA_CheckFifoParam+0x28>)
 8003496:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800349a:	bf00      	nop
 800349c:	080034ad 	.word	0x080034ad
 80034a0:	080034bf 	.word	0x080034bf
 80034a4:	080034ad 	.word	0x080034ad
 80034a8:	08003543 	.word	0x08003543
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80034b0:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80034b4:	2b00      	cmp	r3, #0
 80034b6:	d046      	beq.n	8003546 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80034b8:	2301      	movs	r3, #1
 80034ba:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80034bc:	e043      	b.n	8003546 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80034c2:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80034c6:	d140      	bne.n	800354a <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80034c8:	2301      	movs	r3, #1
 80034ca:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80034cc:	e03d      	b.n	800354a <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	699b      	ldr	r3, [r3, #24]
 80034d2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80034d6:	d121      	bne.n	800351c <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80034d8:	68bb      	ldr	r3, [r7, #8]
 80034da:	2b03      	cmp	r3, #3
 80034dc:	d837      	bhi.n	800354e <DMA_CheckFifoParam+0xda>
 80034de:	a201      	add	r2, pc, #4	@ (adr r2, 80034e4 <DMA_CheckFifoParam+0x70>)
 80034e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80034e4:	080034f5 	.word	0x080034f5
 80034e8:	080034fb 	.word	0x080034fb
 80034ec:	080034f5 	.word	0x080034f5
 80034f0:	0800350d 	.word	0x0800350d
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80034f4:	2301      	movs	r3, #1
 80034f6:	73fb      	strb	r3, [r7, #15]
      break;
 80034f8:	e030      	b.n	800355c <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80034fe:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003502:	2b00      	cmp	r3, #0
 8003504:	d025      	beq.n	8003552 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8003506:	2301      	movs	r3, #1
 8003508:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800350a:	e022      	b.n	8003552 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003510:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8003514:	d11f      	bne.n	8003556 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8003516:	2301      	movs	r3, #1
 8003518:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800351a:	e01c      	b.n	8003556 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 800351c:	68bb      	ldr	r3, [r7, #8]
 800351e:	2b02      	cmp	r3, #2
 8003520:	d903      	bls.n	800352a <DMA_CheckFifoParam+0xb6>
 8003522:	68bb      	ldr	r3, [r7, #8]
 8003524:	2b03      	cmp	r3, #3
 8003526:	d003      	beq.n	8003530 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8003528:	e018      	b.n	800355c <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800352a:	2301      	movs	r3, #1
 800352c:	73fb      	strb	r3, [r7, #15]
      break;
 800352e:	e015      	b.n	800355c <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003534:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003538:	2b00      	cmp	r3, #0
 800353a:	d00e      	beq.n	800355a <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 800353c:	2301      	movs	r3, #1
 800353e:	73fb      	strb	r3, [r7, #15]
      break;
 8003540:	e00b      	b.n	800355a <DMA_CheckFifoParam+0xe6>
      break;
 8003542:	bf00      	nop
 8003544:	e00a      	b.n	800355c <DMA_CheckFifoParam+0xe8>
      break;
 8003546:	bf00      	nop
 8003548:	e008      	b.n	800355c <DMA_CheckFifoParam+0xe8>
      break;
 800354a:	bf00      	nop
 800354c:	e006      	b.n	800355c <DMA_CheckFifoParam+0xe8>
      break;
 800354e:	bf00      	nop
 8003550:	e004      	b.n	800355c <DMA_CheckFifoParam+0xe8>
      break;
 8003552:	bf00      	nop
 8003554:	e002      	b.n	800355c <DMA_CheckFifoParam+0xe8>
      break;   
 8003556:	bf00      	nop
 8003558:	e000      	b.n	800355c <DMA_CheckFifoParam+0xe8>
      break;
 800355a:	bf00      	nop
    }
  } 
  
  return status; 
 800355c:	7bfb      	ldrb	r3, [r7, #15]
}
 800355e:	4618      	mov	r0, r3
 8003560:	3714      	adds	r7, #20
 8003562:	46bd      	mov	sp, r7
 8003564:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003568:	4770      	bx	lr
 800356a:	bf00      	nop

0800356c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800356c:	b480      	push	{r7}
 800356e:	b089      	sub	sp, #36	@ 0x24
 8003570:	af00      	add	r7, sp, #0
 8003572:	6078      	str	r0, [r7, #4]
 8003574:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003576:	2300      	movs	r3, #0
 8003578:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800357a:	2300      	movs	r3, #0
 800357c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800357e:	2300      	movs	r3, #0
 8003580:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003582:	2300      	movs	r3, #0
 8003584:	61fb      	str	r3, [r7, #28]
 8003586:	e159      	b.n	800383c <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003588:	2201      	movs	r2, #1
 800358a:	69fb      	ldr	r3, [r7, #28]
 800358c:	fa02 f303 	lsl.w	r3, r2, r3
 8003590:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003592:	683b      	ldr	r3, [r7, #0]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	697a      	ldr	r2, [r7, #20]
 8003598:	4013      	ands	r3, r2
 800359a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800359c:	693a      	ldr	r2, [r7, #16]
 800359e:	697b      	ldr	r3, [r7, #20]
 80035a0:	429a      	cmp	r2, r3
 80035a2:	f040 8148 	bne.w	8003836 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80035a6:	683b      	ldr	r3, [r7, #0]
 80035a8:	685b      	ldr	r3, [r3, #4]
 80035aa:	f003 0303 	and.w	r3, r3, #3
 80035ae:	2b01      	cmp	r3, #1
 80035b0:	d005      	beq.n	80035be <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80035b2:	683b      	ldr	r3, [r7, #0]
 80035b4:	685b      	ldr	r3, [r3, #4]
 80035b6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80035ba:	2b02      	cmp	r3, #2
 80035bc:	d130      	bne.n	8003620 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	689b      	ldr	r3, [r3, #8]
 80035c2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80035c4:	69fb      	ldr	r3, [r7, #28]
 80035c6:	005b      	lsls	r3, r3, #1
 80035c8:	2203      	movs	r2, #3
 80035ca:	fa02 f303 	lsl.w	r3, r2, r3
 80035ce:	43db      	mvns	r3, r3
 80035d0:	69ba      	ldr	r2, [r7, #24]
 80035d2:	4013      	ands	r3, r2
 80035d4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80035d6:	683b      	ldr	r3, [r7, #0]
 80035d8:	68da      	ldr	r2, [r3, #12]
 80035da:	69fb      	ldr	r3, [r7, #28]
 80035dc:	005b      	lsls	r3, r3, #1
 80035de:	fa02 f303 	lsl.w	r3, r2, r3
 80035e2:	69ba      	ldr	r2, [r7, #24]
 80035e4:	4313      	orrs	r3, r2
 80035e6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	69ba      	ldr	r2, [r7, #24]
 80035ec:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	685b      	ldr	r3, [r3, #4]
 80035f2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80035f4:	2201      	movs	r2, #1
 80035f6:	69fb      	ldr	r3, [r7, #28]
 80035f8:	fa02 f303 	lsl.w	r3, r2, r3
 80035fc:	43db      	mvns	r3, r3
 80035fe:	69ba      	ldr	r2, [r7, #24]
 8003600:	4013      	ands	r3, r2
 8003602:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003604:	683b      	ldr	r3, [r7, #0]
 8003606:	685b      	ldr	r3, [r3, #4]
 8003608:	091b      	lsrs	r3, r3, #4
 800360a:	f003 0201 	and.w	r2, r3, #1
 800360e:	69fb      	ldr	r3, [r7, #28]
 8003610:	fa02 f303 	lsl.w	r3, r2, r3
 8003614:	69ba      	ldr	r2, [r7, #24]
 8003616:	4313      	orrs	r3, r2
 8003618:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	69ba      	ldr	r2, [r7, #24]
 800361e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003620:	683b      	ldr	r3, [r7, #0]
 8003622:	685b      	ldr	r3, [r3, #4]
 8003624:	f003 0303 	and.w	r3, r3, #3
 8003628:	2b03      	cmp	r3, #3
 800362a:	d017      	beq.n	800365c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	68db      	ldr	r3, [r3, #12]
 8003630:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003632:	69fb      	ldr	r3, [r7, #28]
 8003634:	005b      	lsls	r3, r3, #1
 8003636:	2203      	movs	r2, #3
 8003638:	fa02 f303 	lsl.w	r3, r2, r3
 800363c:	43db      	mvns	r3, r3
 800363e:	69ba      	ldr	r2, [r7, #24]
 8003640:	4013      	ands	r3, r2
 8003642:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003644:	683b      	ldr	r3, [r7, #0]
 8003646:	689a      	ldr	r2, [r3, #8]
 8003648:	69fb      	ldr	r3, [r7, #28]
 800364a:	005b      	lsls	r3, r3, #1
 800364c:	fa02 f303 	lsl.w	r3, r2, r3
 8003650:	69ba      	ldr	r2, [r7, #24]
 8003652:	4313      	orrs	r3, r2
 8003654:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	69ba      	ldr	r2, [r7, #24]
 800365a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800365c:	683b      	ldr	r3, [r7, #0]
 800365e:	685b      	ldr	r3, [r3, #4]
 8003660:	f003 0303 	and.w	r3, r3, #3
 8003664:	2b02      	cmp	r3, #2
 8003666:	d123      	bne.n	80036b0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003668:	69fb      	ldr	r3, [r7, #28]
 800366a:	08da      	lsrs	r2, r3, #3
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	3208      	adds	r2, #8
 8003670:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003674:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003676:	69fb      	ldr	r3, [r7, #28]
 8003678:	f003 0307 	and.w	r3, r3, #7
 800367c:	009b      	lsls	r3, r3, #2
 800367e:	220f      	movs	r2, #15
 8003680:	fa02 f303 	lsl.w	r3, r2, r3
 8003684:	43db      	mvns	r3, r3
 8003686:	69ba      	ldr	r2, [r7, #24]
 8003688:	4013      	ands	r3, r2
 800368a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800368c:	683b      	ldr	r3, [r7, #0]
 800368e:	691a      	ldr	r2, [r3, #16]
 8003690:	69fb      	ldr	r3, [r7, #28]
 8003692:	f003 0307 	and.w	r3, r3, #7
 8003696:	009b      	lsls	r3, r3, #2
 8003698:	fa02 f303 	lsl.w	r3, r2, r3
 800369c:	69ba      	ldr	r2, [r7, #24]
 800369e:	4313      	orrs	r3, r2
 80036a0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80036a2:	69fb      	ldr	r3, [r7, #28]
 80036a4:	08da      	lsrs	r2, r3, #3
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	3208      	adds	r2, #8
 80036aa:	69b9      	ldr	r1, [r7, #24]
 80036ac:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80036b6:	69fb      	ldr	r3, [r7, #28]
 80036b8:	005b      	lsls	r3, r3, #1
 80036ba:	2203      	movs	r2, #3
 80036bc:	fa02 f303 	lsl.w	r3, r2, r3
 80036c0:	43db      	mvns	r3, r3
 80036c2:	69ba      	ldr	r2, [r7, #24]
 80036c4:	4013      	ands	r3, r2
 80036c6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80036c8:	683b      	ldr	r3, [r7, #0]
 80036ca:	685b      	ldr	r3, [r3, #4]
 80036cc:	f003 0203 	and.w	r2, r3, #3
 80036d0:	69fb      	ldr	r3, [r7, #28]
 80036d2:	005b      	lsls	r3, r3, #1
 80036d4:	fa02 f303 	lsl.w	r3, r2, r3
 80036d8:	69ba      	ldr	r2, [r7, #24]
 80036da:	4313      	orrs	r3, r2
 80036dc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	69ba      	ldr	r2, [r7, #24]
 80036e2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80036e4:	683b      	ldr	r3, [r7, #0]
 80036e6:	685b      	ldr	r3, [r3, #4]
 80036e8:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80036ec:	2b00      	cmp	r3, #0
 80036ee:	f000 80a2 	beq.w	8003836 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80036f2:	2300      	movs	r3, #0
 80036f4:	60fb      	str	r3, [r7, #12]
 80036f6:	4b57      	ldr	r3, [pc, #348]	@ (8003854 <HAL_GPIO_Init+0x2e8>)
 80036f8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80036fa:	4a56      	ldr	r2, [pc, #344]	@ (8003854 <HAL_GPIO_Init+0x2e8>)
 80036fc:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003700:	6453      	str	r3, [r2, #68]	@ 0x44
 8003702:	4b54      	ldr	r3, [pc, #336]	@ (8003854 <HAL_GPIO_Init+0x2e8>)
 8003704:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003706:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800370a:	60fb      	str	r3, [r7, #12]
 800370c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800370e:	4a52      	ldr	r2, [pc, #328]	@ (8003858 <HAL_GPIO_Init+0x2ec>)
 8003710:	69fb      	ldr	r3, [r7, #28]
 8003712:	089b      	lsrs	r3, r3, #2
 8003714:	3302      	adds	r3, #2
 8003716:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800371a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800371c:	69fb      	ldr	r3, [r7, #28]
 800371e:	f003 0303 	and.w	r3, r3, #3
 8003722:	009b      	lsls	r3, r3, #2
 8003724:	220f      	movs	r2, #15
 8003726:	fa02 f303 	lsl.w	r3, r2, r3
 800372a:	43db      	mvns	r3, r3
 800372c:	69ba      	ldr	r2, [r7, #24]
 800372e:	4013      	ands	r3, r2
 8003730:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	4a49      	ldr	r2, [pc, #292]	@ (800385c <HAL_GPIO_Init+0x2f0>)
 8003736:	4293      	cmp	r3, r2
 8003738:	d019      	beq.n	800376e <HAL_GPIO_Init+0x202>
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	4a48      	ldr	r2, [pc, #288]	@ (8003860 <HAL_GPIO_Init+0x2f4>)
 800373e:	4293      	cmp	r3, r2
 8003740:	d013      	beq.n	800376a <HAL_GPIO_Init+0x1fe>
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	4a47      	ldr	r2, [pc, #284]	@ (8003864 <HAL_GPIO_Init+0x2f8>)
 8003746:	4293      	cmp	r3, r2
 8003748:	d00d      	beq.n	8003766 <HAL_GPIO_Init+0x1fa>
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	4a46      	ldr	r2, [pc, #280]	@ (8003868 <HAL_GPIO_Init+0x2fc>)
 800374e:	4293      	cmp	r3, r2
 8003750:	d007      	beq.n	8003762 <HAL_GPIO_Init+0x1f6>
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	4a45      	ldr	r2, [pc, #276]	@ (800386c <HAL_GPIO_Init+0x300>)
 8003756:	4293      	cmp	r3, r2
 8003758:	d101      	bne.n	800375e <HAL_GPIO_Init+0x1f2>
 800375a:	2304      	movs	r3, #4
 800375c:	e008      	b.n	8003770 <HAL_GPIO_Init+0x204>
 800375e:	2307      	movs	r3, #7
 8003760:	e006      	b.n	8003770 <HAL_GPIO_Init+0x204>
 8003762:	2303      	movs	r3, #3
 8003764:	e004      	b.n	8003770 <HAL_GPIO_Init+0x204>
 8003766:	2302      	movs	r3, #2
 8003768:	e002      	b.n	8003770 <HAL_GPIO_Init+0x204>
 800376a:	2301      	movs	r3, #1
 800376c:	e000      	b.n	8003770 <HAL_GPIO_Init+0x204>
 800376e:	2300      	movs	r3, #0
 8003770:	69fa      	ldr	r2, [r7, #28]
 8003772:	f002 0203 	and.w	r2, r2, #3
 8003776:	0092      	lsls	r2, r2, #2
 8003778:	4093      	lsls	r3, r2
 800377a:	69ba      	ldr	r2, [r7, #24]
 800377c:	4313      	orrs	r3, r2
 800377e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003780:	4935      	ldr	r1, [pc, #212]	@ (8003858 <HAL_GPIO_Init+0x2ec>)
 8003782:	69fb      	ldr	r3, [r7, #28]
 8003784:	089b      	lsrs	r3, r3, #2
 8003786:	3302      	adds	r3, #2
 8003788:	69ba      	ldr	r2, [r7, #24]
 800378a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800378e:	4b38      	ldr	r3, [pc, #224]	@ (8003870 <HAL_GPIO_Init+0x304>)
 8003790:	689b      	ldr	r3, [r3, #8]
 8003792:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003794:	693b      	ldr	r3, [r7, #16]
 8003796:	43db      	mvns	r3, r3
 8003798:	69ba      	ldr	r2, [r7, #24]
 800379a:	4013      	ands	r3, r2
 800379c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800379e:	683b      	ldr	r3, [r7, #0]
 80037a0:	685b      	ldr	r3, [r3, #4]
 80037a2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80037a6:	2b00      	cmp	r3, #0
 80037a8:	d003      	beq.n	80037b2 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80037aa:	69ba      	ldr	r2, [r7, #24]
 80037ac:	693b      	ldr	r3, [r7, #16]
 80037ae:	4313      	orrs	r3, r2
 80037b0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80037b2:	4a2f      	ldr	r2, [pc, #188]	@ (8003870 <HAL_GPIO_Init+0x304>)
 80037b4:	69bb      	ldr	r3, [r7, #24]
 80037b6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80037b8:	4b2d      	ldr	r3, [pc, #180]	@ (8003870 <HAL_GPIO_Init+0x304>)
 80037ba:	68db      	ldr	r3, [r3, #12]
 80037bc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80037be:	693b      	ldr	r3, [r7, #16]
 80037c0:	43db      	mvns	r3, r3
 80037c2:	69ba      	ldr	r2, [r7, #24]
 80037c4:	4013      	ands	r3, r2
 80037c6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80037c8:	683b      	ldr	r3, [r7, #0]
 80037ca:	685b      	ldr	r3, [r3, #4]
 80037cc:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80037d0:	2b00      	cmp	r3, #0
 80037d2:	d003      	beq.n	80037dc <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80037d4:	69ba      	ldr	r2, [r7, #24]
 80037d6:	693b      	ldr	r3, [r7, #16]
 80037d8:	4313      	orrs	r3, r2
 80037da:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80037dc:	4a24      	ldr	r2, [pc, #144]	@ (8003870 <HAL_GPIO_Init+0x304>)
 80037de:	69bb      	ldr	r3, [r7, #24]
 80037e0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80037e2:	4b23      	ldr	r3, [pc, #140]	@ (8003870 <HAL_GPIO_Init+0x304>)
 80037e4:	685b      	ldr	r3, [r3, #4]
 80037e6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80037e8:	693b      	ldr	r3, [r7, #16]
 80037ea:	43db      	mvns	r3, r3
 80037ec:	69ba      	ldr	r2, [r7, #24]
 80037ee:	4013      	ands	r3, r2
 80037f0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80037f2:	683b      	ldr	r3, [r7, #0]
 80037f4:	685b      	ldr	r3, [r3, #4]
 80037f6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80037fa:	2b00      	cmp	r3, #0
 80037fc:	d003      	beq.n	8003806 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80037fe:	69ba      	ldr	r2, [r7, #24]
 8003800:	693b      	ldr	r3, [r7, #16]
 8003802:	4313      	orrs	r3, r2
 8003804:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003806:	4a1a      	ldr	r2, [pc, #104]	@ (8003870 <HAL_GPIO_Init+0x304>)
 8003808:	69bb      	ldr	r3, [r7, #24]
 800380a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800380c:	4b18      	ldr	r3, [pc, #96]	@ (8003870 <HAL_GPIO_Init+0x304>)
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003812:	693b      	ldr	r3, [r7, #16]
 8003814:	43db      	mvns	r3, r3
 8003816:	69ba      	ldr	r2, [r7, #24]
 8003818:	4013      	ands	r3, r2
 800381a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800381c:	683b      	ldr	r3, [r7, #0]
 800381e:	685b      	ldr	r3, [r3, #4]
 8003820:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003824:	2b00      	cmp	r3, #0
 8003826:	d003      	beq.n	8003830 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8003828:	69ba      	ldr	r2, [r7, #24]
 800382a:	693b      	ldr	r3, [r7, #16]
 800382c:	4313      	orrs	r3, r2
 800382e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003830:	4a0f      	ldr	r2, [pc, #60]	@ (8003870 <HAL_GPIO_Init+0x304>)
 8003832:	69bb      	ldr	r3, [r7, #24]
 8003834:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003836:	69fb      	ldr	r3, [r7, #28]
 8003838:	3301      	adds	r3, #1
 800383a:	61fb      	str	r3, [r7, #28]
 800383c:	69fb      	ldr	r3, [r7, #28]
 800383e:	2b0f      	cmp	r3, #15
 8003840:	f67f aea2 	bls.w	8003588 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003844:	bf00      	nop
 8003846:	bf00      	nop
 8003848:	3724      	adds	r7, #36	@ 0x24
 800384a:	46bd      	mov	sp, r7
 800384c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003850:	4770      	bx	lr
 8003852:	bf00      	nop
 8003854:	40023800 	.word	0x40023800
 8003858:	40013800 	.word	0x40013800
 800385c:	40020000 	.word	0x40020000
 8003860:	40020400 	.word	0x40020400
 8003864:	40020800 	.word	0x40020800
 8003868:	40020c00 	.word	0x40020c00
 800386c:	40021000 	.word	0x40021000
 8003870:	40013c00 	.word	0x40013c00

08003874 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003874:	b480      	push	{r7}
 8003876:	b083      	sub	sp, #12
 8003878:	af00      	add	r7, sp, #0
 800387a:	6078      	str	r0, [r7, #4]
 800387c:	460b      	mov	r3, r1
 800387e:	807b      	strh	r3, [r7, #2]
 8003880:	4613      	mov	r3, r2
 8003882:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003884:	787b      	ldrb	r3, [r7, #1]
 8003886:	2b00      	cmp	r3, #0
 8003888:	d003      	beq.n	8003892 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800388a:	887a      	ldrh	r2, [r7, #2]
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003890:	e003      	b.n	800389a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003892:	887b      	ldrh	r3, [r7, #2]
 8003894:	041a      	lsls	r2, r3, #16
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	619a      	str	r2, [r3, #24]
}
 800389a:	bf00      	nop
 800389c:	370c      	adds	r7, #12
 800389e:	46bd      	mov	sp, r7
 80038a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038a4:	4770      	bx	lr
	...

080038a8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80038a8:	b580      	push	{r7, lr}
 80038aa:	b086      	sub	sp, #24
 80038ac:	af00      	add	r7, sp, #0
 80038ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	2b00      	cmp	r3, #0
 80038b4:	d101      	bne.n	80038ba <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80038b6:	2301      	movs	r3, #1
 80038b8:	e267      	b.n	8003d8a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	f003 0301 	and.w	r3, r3, #1
 80038c2:	2b00      	cmp	r3, #0
 80038c4:	d075      	beq.n	80039b2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80038c6:	4b88      	ldr	r3, [pc, #544]	@ (8003ae8 <HAL_RCC_OscConfig+0x240>)
 80038c8:	689b      	ldr	r3, [r3, #8]
 80038ca:	f003 030c 	and.w	r3, r3, #12
 80038ce:	2b04      	cmp	r3, #4
 80038d0:	d00c      	beq.n	80038ec <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80038d2:	4b85      	ldr	r3, [pc, #532]	@ (8003ae8 <HAL_RCC_OscConfig+0x240>)
 80038d4:	689b      	ldr	r3, [r3, #8]
 80038d6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80038da:	2b08      	cmp	r3, #8
 80038dc:	d112      	bne.n	8003904 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80038de:	4b82      	ldr	r3, [pc, #520]	@ (8003ae8 <HAL_RCC_OscConfig+0x240>)
 80038e0:	685b      	ldr	r3, [r3, #4]
 80038e2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80038e6:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80038ea:	d10b      	bne.n	8003904 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80038ec:	4b7e      	ldr	r3, [pc, #504]	@ (8003ae8 <HAL_RCC_OscConfig+0x240>)
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80038f4:	2b00      	cmp	r3, #0
 80038f6:	d05b      	beq.n	80039b0 <HAL_RCC_OscConfig+0x108>
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	685b      	ldr	r3, [r3, #4]
 80038fc:	2b00      	cmp	r3, #0
 80038fe:	d157      	bne.n	80039b0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003900:	2301      	movs	r3, #1
 8003902:	e242      	b.n	8003d8a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	685b      	ldr	r3, [r3, #4]
 8003908:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800390c:	d106      	bne.n	800391c <HAL_RCC_OscConfig+0x74>
 800390e:	4b76      	ldr	r3, [pc, #472]	@ (8003ae8 <HAL_RCC_OscConfig+0x240>)
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	4a75      	ldr	r2, [pc, #468]	@ (8003ae8 <HAL_RCC_OscConfig+0x240>)
 8003914:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003918:	6013      	str	r3, [r2, #0]
 800391a:	e01d      	b.n	8003958 <HAL_RCC_OscConfig+0xb0>
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	685b      	ldr	r3, [r3, #4]
 8003920:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003924:	d10c      	bne.n	8003940 <HAL_RCC_OscConfig+0x98>
 8003926:	4b70      	ldr	r3, [pc, #448]	@ (8003ae8 <HAL_RCC_OscConfig+0x240>)
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	4a6f      	ldr	r2, [pc, #444]	@ (8003ae8 <HAL_RCC_OscConfig+0x240>)
 800392c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003930:	6013      	str	r3, [r2, #0]
 8003932:	4b6d      	ldr	r3, [pc, #436]	@ (8003ae8 <HAL_RCC_OscConfig+0x240>)
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	4a6c      	ldr	r2, [pc, #432]	@ (8003ae8 <HAL_RCC_OscConfig+0x240>)
 8003938:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800393c:	6013      	str	r3, [r2, #0]
 800393e:	e00b      	b.n	8003958 <HAL_RCC_OscConfig+0xb0>
 8003940:	4b69      	ldr	r3, [pc, #420]	@ (8003ae8 <HAL_RCC_OscConfig+0x240>)
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	4a68      	ldr	r2, [pc, #416]	@ (8003ae8 <HAL_RCC_OscConfig+0x240>)
 8003946:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800394a:	6013      	str	r3, [r2, #0]
 800394c:	4b66      	ldr	r3, [pc, #408]	@ (8003ae8 <HAL_RCC_OscConfig+0x240>)
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	4a65      	ldr	r2, [pc, #404]	@ (8003ae8 <HAL_RCC_OscConfig+0x240>)
 8003952:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003956:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	685b      	ldr	r3, [r3, #4]
 800395c:	2b00      	cmp	r3, #0
 800395e:	d013      	beq.n	8003988 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003960:	f7ff f914 	bl	8002b8c <HAL_GetTick>
 8003964:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003966:	e008      	b.n	800397a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003968:	f7ff f910 	bl	8002b8c <HAL_GetTick>
 800396c:	4602      	mov	r2, r0
 800396e:	693b      	ldr	r3, [r7, #16]
 8003970:	1ad3      	subs	r3, r2, r3
 8003972:	2b64      	cmp	r3, #100	@ 0x64
 8003974:	d901      	bls.n	800397a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003976:	2303      	movs	r3, #3
 8003978:	e207      	b.n	8003d8a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800397a:	4b5b      	ldr	r3, [pc, #364]	@ (8003ae8 <HAL_RCC_OscConfig+0x240>)
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003982:	2b00      	cmp	r3, #0
 8003984:	d0f0      	beq.n	8003968 <HAL_RCC_OscConfig+0xc0>
 8003986:	e014      	b.n	80039b2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003988:	f7ff f900 	bl	8002b8c <HAL_GetTick>
 800398c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800398e:	e008      	b.n	80039a2 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003990:	f7ff f8fc 	bl	8002b8c <HAL_GetTick>
 8003994:	4602      	mov	r2, r0
 8003996:	693b      	ldr	r3, [r7, #16]
 8003998:	1ad3      	subs	r3, r2, r3
 800399a:	2b64      	cmp	r3, #100	@ 0x64
 800399c:	d901      	bls.n	80039a2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800399e:	2303      	movs	r3, #3
 80039a0:	e1f3      	b.n	8003d8a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80039a2:	4b51      	ldr	r3, [pc, #324]	@ (8003ae8 <HAL_RCC_OscConfig+0x240>)
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80039aa:	2b00      	cmp	r3, #0
 80039ac:	d1f0      	bne.n	8003990 <HAL_RCC_OscConfig+0xe8>
 80039ae:	e000      	b.n	80039b2 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80039b0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	f003 0302 	and.w	r3, r3, #2
 80039ba:	2b00      	cmp	r3, #0
 80039bc:	d063      	beq.n	8003a86 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80039be:	4b4a      	ldr	r3, [pc, #296]	@ (8003ae8 <HAL_RCC_OscConfig+0x240>)
 80039c0:	689b      	ldr	r3, [r3, #8]
 80039c2:	f003 030c 	and.w	r3, r3, #12
 80039c6:	2b00      	cmp	r3, #0
 80039c8:	d00b      	beq.n	80039e2 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80039ca:	4b47      	ldr	r3, [pc, #284]	@ (8003ae8 <HAL_RCC_OscConfig+0x240>)
 80039cc:	689b      	ldr	r3, [r3, #8]
 80039ce:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80039d2:	2b08      	cmp	r3, #8
 80039d4:	d11c      	bne.n	8003a10 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80039d6:	4b44      	ldr	r3, [pc, #272]	@ (8003ae8 <HAL_RCC_OscConfig+0x240>)
 80039d8:	685b      	ldr	r3, [r3, #4]
 80039da:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80039de:	2b00      	cmp	r3, #0
 80039e0:	d116      	bne.n	8003a10 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80039e2:	4b41      	ldr	r3, [pc, #260]	@ (8003ae8 <HAL_RCC_OscConfig+0x240>)
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	f003 0302 	and.w	r3, r3, #2
 80039ea:	2b00      	cmp	r3, #0
 80039ec:	d005      	beq.n	80039fa <HAL_RCC_OscConfig+0x152>
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	68db      	ldr	r3, [r3, #12]
 80039f2:	2b01      	cmp	r3, #1
 80039f4:	d001      	beq.n	80039fa <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80039f6:	2301      	movs	r3, #1
 80039f8:	e1c7      	b.n	8003d8a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80039fa:	4b3b      	ldr	r3, [pc, #236]	@ (8003ae8 <HAL_RCC_OscConfig+0x240>)
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	691b      	ldr	r3, [r3, #16]
 8003a06:	00db      	lsls	r3, r3, #3
 8003a08:	4937      	ldr	r1, [pc, #220]	@ (8003ae8 <HAL_RCC_OscConfig+0x240>)
 8003a0a:	4313      	orrs	r3, r2
 8003a0c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003a0e:	e03a      	b.n	8003a86 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	68db      	ldr	r3, [r3, #12]
 8003a14:	2b00      	cmp	r3, #0
 8003a16:	d020      	beq.n	8003a5a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003a18:	4b34      	ldr	r3, [pc, #208]	@ (8003aec <HAL_RCC_OscConfig+0x244>)
 8003a1a:	2201      	movs	r2, #1
 8003a1c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a1e:	f7ff f8b5 	bl	8002b8c <HAL_GetTick>
 8003a22:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003a24:	e008      	b.n	8003a38 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003a26:	f7ff f8b1 	bl	8002b8c <HAL_GetTick>
 8003a2a:	4602      	mov	r2, r0
 8003a2c:	693b      	ldr	r3, [r7, #16]
 8003a2e:	1ad3      	subs	r3, r2, r3
 8003a30:	2b02      	cmp	r3, #2
 8003a32:	d901      	bls.n	8003a38 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003a34:	2303      	movs	r3, #3
 8003a36:	e1a8      	b.n	8003d8a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003a38:	4b2b      	ldr	r3, [pc, #172]	@ (8003ae8 <HAL_RCC_OscConfig+0x240>)
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	f003 0302 	and.w	r3, r3, #2
 8003a40:	2b00      	cmp	r3, #0
 8003a42:	d0f0      	beq.n	8003a26 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003a44:	4b28      	ldr	r3, [pc, #160]	@ (8003ae8 <HAL_RCC_OscConfig+0x240>)
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	691b      	ldr	r3, [r3, #16]
 8003a50:	00db      	lsls	r3, r3, #3
 8003a52:	4925      	ldr	r1, [pc, #148]	@ (8003ae8 <HAL_RCC_OscConfig+0x240>)
 8003a54:	4313      	orrs	r3, r2
 8003a56:	600b      	str	r3, [r1, #0]
 8003a58:	e015      	b.n	8003a86 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003a5a:	4b24      	ldr	r3, [pc, #144]	@ (8003aec <HAL_RCC_OscConfig+0x244>)
 8003a5c:	2200      	movs	r2, #0
 8003a5e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a60:	f7ff f894 	bl	8002b8c <HAL_GetTick>
 8003a64:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003a66:	e008      	b.n	8003a7a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003a68:	f7ff f890 	bl	8002b8c <HAL_GetTick>
 8003a6c:	4602      	mov	r2, r0
 8003a6e:	693b      	ldr	r3, [r7, #16]
 8003a70:	1ad3      	subs	r3, r2, r3
 8003a72:	2b02      	cmp	r3, #2
 8003a74:	d901      	bls.n	8003a7a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003a76:	2303      	movs	r3, #3
 8003a78:	e187      	b.n	8003d8a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003a7a:	4b1b      	ldr	r3, [pc, #108]	@ (8003ae8 <HAL_RCC_OscConfig+0x240>)
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	f003 0302 	and.w	r3, r3, #2
 8003a82:	2b00      	cmp	r3, #0
 8003a84:	d1f0      	bne.n	8003a68 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	f003 0308 	and.w	r3, r3, #8
 8003a8e:	2b00      	cmp	r3, #0
 8003a90:	d036      	beq.n	8003b00 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	695b      	ldr	r3, [r3, #20]
 8003a96:	2b00      	cmp	r3, #0
 8003a98:	d016      	beq.n	8003ac8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003a9a:	4b15      	ldr	r3, [pc, #84]	@ (8003af0 <HAL_RCC_OscConfig+0x248>)
 8003a9c:	2201      	movs	r2, #1
 8003a9e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003aa0:	f7ff f874 	bl	8002b8c <HAL_GetTick>
 8003aa4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003aa6:	e008      	b.n	8003aba <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003aa8:	f7ff f870 	bl	8002b8c <HAL_GetTick>
 8003aac:	4602      	mov	r2, r0
 8003aae:	693b      	ldr	r3, [r7, #16]
 8003ab0:	1ad3      	subs	r3, r2, r3
 8003ab2:	2b02      	cmp	r3, #2
 8003ab4:	d901      	bls.n	8003aba <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003ab6:	2303      	movs	r3, #3
 8003ab8:	e167      	b.n	8003d8a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003aba:	4b0b      	ldr	r3, [pc, #44]	@ (8003ae8 <HAL_RCC_OscConfig+0x240>)
 8003abc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003abe:	f003 0302 	and.w	r3, r3, #2
 8003ac2:	2b00      	cmp	r3, #0
 8003ac4:	d0f0      	beq.n	8003aa8 <HAL_RCC_OscConfig+0x200>
 8003ac6:	e01b      	b.n	8003b00 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003ac8:	4b09      	ldr	r3, [pc, #36]	@ (8003af0 <HAL_RCC_OscConfig+0x248>)
 8003aca:	2200      	movs	r2, #0
 8003acc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003ace:	f7ff f85d 	bl	8002b8c <HAL_GetTick>
 8003ad2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003ad4:	e00e      	b.n	8003af4 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003ad6:	f7ff f859 	bl	8002b8c <HAL_GetTick>
 8003ada:	4602      	mov	r2, r0
 8003adc:	693b      	ldr	r3, [r7, #16]
 8003ade:	1ad3      	subs	r3, r2, r3
 8003ae0:	2b02      	cmp	r3, #2
 8003ae2:	d907      	bls.n	8003af4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003ae4:	2303      	movs	r3, #3
 8003ae6:	e150      	b.n	8003d8a <HAL_RCC_OscConfig+0x4e2>
 8003ae8:	40023800 	.word	0x40023800
 8003aec:	42470000 	.word	0x42470000
 8003af0:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003af4:	4b88      	ldr	r3, [pc, #544]	@ (8003d18 <HAL_RCC_OscConfig+0x470>)
 8003af6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003af8:	f003 0302 	and.w	r3, r3, #2
 8003afc:	2b00      	cmp	r3, #0
 8003afe:	d1ea      	bne.n	8003ad6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	f003 0304 	and.w	r3, r3, #4
 8003b08:	2b00      	cmp	r3, #0
 8003b0a:	f000 8097 	beq.w	8003c3c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003b0e:	2300      	movs	r3, #0
 8003b10:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003b12:	4b81      	ldr	r3, [pc, #516]	@ (8003d18 <HAL_RCC_OscConfig+0x470>)
 8003b14:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b16:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003b1a:	2b00      	cmp	r3, #0
 8003b1c:	d10f      	bne.n	8003b3e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003b1e:	2300      	movs	r3, #0
 8003b20:	60bb      	str	r3, [r7, #8]
 8003b22:	4b7d      	ldr	r3, [pc, #500]	@ (8003d18 <HAL_RCC_OscConfig+0x470>)
 8003b24:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b26:	4a7c      	ldr	r2, [pc, #496]	@ (8003d18 <HAL_RCC_OscConfig+0x470>)
 8003b28:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003b2c:	6413      	str	r3, [r2, #64]	@ 0x40
 8003b2e:	4b7a      	ldr	r3, [pc, #488]	@ (8003d18 <HAL_RCC_OscConfig+0x470>)
 8003b30:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b32:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003b36:	60bb      	str	r3, [r7, #8]
 8003b38:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003b3a:	2301      	movs	r3, #1
 8003b3c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003b3e:	4b77      	ldr	r3, [pc, #476]	@ (8003d1c <HAL_RCC_OscConfig+0x474>)
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003b46:	2b00      	cmp	r3, #0
 8003b48:	d118      	bne.n	8003b7c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003b4a:	4b74      	ldr	r3, [pc, #464]	@ (8003d1c <HAL_RCC_OscConfig+0x474>)
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	4a73      	ldr	r2, [pc, #460]	@ (8003d1c <HAL_RCC_OscConfig+0x474>)
 8003b50:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003b54:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003b56:	f7ff f819 	bl	8002b8c <HAL_GetTick>
 8003b5a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003b5c:	e008      	b.n	8003b70 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003b5e:	f7ff f815 	bl	8002b8c <HAL_GetTick>
 8003b62:	4602      	mov	r2, r0
 8003b64:	693b      	ldr	r3, [r7, #16]
 8003b66:	1ad3      	subs	r3, r2, r3
 8003b68:	2b02      	cmp	r3, #2
 8003b6a:	d901      	bls.n	8003b70 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003b6c:	2303      	movs	r3, #3
 8003b6e:	e10c      	b.n	8003d8a <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003b70:	4b6a      	ldr	r3, [pc, #424]	@ (8003d1c <HAL_RCC_OscConfig+0x474>)
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003b78:	2b00      	cmp	r3, #0
 8003b7a:	d0f0      	beq.n	8003b5e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	689b      	ldr	r3, [r3, #8]
 8003b80:	2b01      	cmp	r3, #1
 8003b82:	d106      	bne.n	8003b92 <HAL_RCC_OscConfig+0x2ea>
 8003b84:	4b64      	ldr	r3, [pc, #400]	@ (8003d18 <HAL_RCC_OscConfig+0x470>)
 8003b86:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003b88:	4a63      	ldr	r2, [pc, #396]	@ (8003d18 <HAL_RCC_OscConfig+0x470>)
 8003b8a:	f043 0301 	orr.w	r3, r3, #1
 8003b8e:	6713      	str	r3, [r2, #112]	@ 0x70
 8003b90:	e01c      	b.n	8003bcc <HAL_RCC_OscConfig+0x324>
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	689b      	ldr	r3, [r3, #8]
 8003b96:	2b05      	cmp	r3, #5
 8003b98:	d10c      	bne.n	8003bb4 <HAL_RCC_OscConfig+0x30c>
 8003b9a:	4b5f      	ldr	r3, [pc, #380]	@ (8003d18 <HAL_RCC_OscConfig+0x470>)
 8003b9c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003b9e:	4a5e      	ldr	r2, [pc, #376]	@ (8003d18 <HAL_RCC_OscConfig+0x470>)
 8003ba0:	f043 0304 	orr.w	r3, r3, #4
 8003ba4:	6713      	str	r3, [r2, #112]	@ 0x70
 8003ba6:	4b5c      	ldr	r3, [pc, #368]	@ (8003d18 <HAL_RCC_OscConfig+0x470>)
 8003ba8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003baa:	4a5b      	ldr	r2, [pc, #364]	@ (8003d18 <HAL_RCC_OscConfig+0x470>)
 8003bac:	f043 0301 	orr.w	r3, r3, #1
 8003bb0:	6713      	str	r3, [r2, #112]	@ 0x70
 8003bb2:	e00b      	b.n	8003bcc <HAL_RCC_OscConfig+0x324>
 8003bb4:	4b58      	ldr	r3, [pc, #352]	@ (8003d18 <HAL_RCC_OscConfig+0x470>)
 8003bb6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003bb8:	4a57      	ldr	r2, [pc, #348]	@ (8003d18 <HAL_RCC_OscConfig+0x470>)
 8003bba:	f023 0301 	bic.w	r3, r3, #1
 8003bbe:	6713      	str	r3, [r2, #112]	@ 0x70
 8003bc0:	4b55      	ldr	r3, [pc, #340]	@ (8003d18 <HAL_RCC_OscConfig+0x470>)
 8003bc2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003bc4:	4a54      	ldr	r2, [pc, #336]	@ (8003d18 <HAL_RCC_OscConfig+0x470>)
 8003bc6:	f023 0304 	bic.w	r3, r3, #4
 8003bca:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	689b      	ldr	r3, [r3, #8]
 8003bd0:	2b00      	cmp	r3, #0
 8003bd2:	d015      	beq.n	8003c00 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003bd4:	f7fe ffda 	bl	8002b8c <HAL_GetTick>
 8003bd8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003bda:	e00a      	b.n	8003bf2 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003bdc:	f7fe ffd6 	bl	8002b8c <HAL_GetTick>
 8003be0:	4602      	mov	r2, r0
 8003be2:	693b      	ldr	r3, [r7, #16]
 8003be4:	1ad3      	subs	r3, r2, r3
 8003be6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003bea:	4293      	cmp	r3, r2
 8003bec:	d901      	bls.n	8003bf2 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8003bee:	2303      	movs	r3, #3
 8003bf0:	e0cb      	b.n	8003d8a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003bf2:	4b49      	ldr	r3, [pc, #292]	@ (8003d18 <HAL_RCC_OscConfig+0x470>)
 8003bf4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003bf6:	f003 0302 	and.w	r3, r3, #2
 8003bfa:	2b00      	cmp	r3, #0
 8003bfc:	d0ee      	beq.n	8003bdc <HAL_RCC_OscConfig+0x334>
 8003bfe:	e014      	b.n	8003c2a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003c00:	f7fe ffc4 	bl	8002b8c <HAL_GetTick>
 8003c04:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003c06:	e00a      	b.n	8003c1e <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003c08:	f7fe ffc0 	bl	8002b8c <HAL_GetTick>
 8003c0c:	4602      	mov	r2, r0
 8003c0e:	693b      	ldr	r3, [r7, #16]
 8003c10:	1ad3      	subs	r3, r2, r3
 8003c12:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003c16:	4293      	cmp	r3, r2
 8003c18:	d901      	bls.n	8003c1e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8003c1a:	2303      	movs	r3, #3
 8003c1c:	e0b5      	b.n	8003d8a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003c1e:	4b3e      	ldr	r3, [pc, #248]	@ (8003d18 <HAL_RCC_OscConfig+0x470>)
 8003c20:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003c22:	f003 0302 	and.w	r3, r3, #2
 8003c26:	2b00      	cmp	r3, #0
 8003c28:	d1ee      	bne.n	8003c08 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003c2a:	7dfb      	ldrb	r3, [r7, #23]
 8003c2c:	2b01      	cmp	r3, #1
 8003c2e:	d105      	bne.n	8003c3c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003c30:	4b39      	ldr	r3, [pc, #228]	@ (8003d18 <HAL_RCC_OscConfig+0x470>)
 8003c32:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c34:	4a38      	ldr	r2, [pc, #224]	@ (8003d18 <HAL_RCC_OscConfig+0x470>)
 8003c36:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003c3a:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	699b      	ldr	r3, [r3, #24]
 8003c40:	2b00      	cmp	r3, #0
 8003c42:	f000 80a1 	beq.w	8003d88 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003c46:	4b34      	ldr	r3, [pc, #208]	@ (8003d18 <HAL_RCC_OscConfig+0x470>)
 8003c48:	689b      	ldr	r3, [r3, #8]
 8003c4a:	f003 030c 	and.w	r3, r3, #12
 8003c4e:	2b08      	cmp	r3, #8
 8003c50:	d05c      	beq.n	8003d0c <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	699b      	ldr	r3, [r3, #24]
 8003c56:	2b02      	cmp	r3, #2
 8003c58:	d141      	bne.n	8003cde <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003c5a:	4b31      	ldr	r3, [pc, #196]	@ (8003d20 <HAL_RCC_OscConfig+0x478>)
 8003c5c:	2200      	movs	r2, #0
 8003c5e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003c60:	f7fe ff94 	bl	8002b8c <HAL_GetTick>
 8003c64:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003c66:	e008      	b.n	8003c7a <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003c68:	f7fe ff90 	bl	8002b8c <HAL_GetTick>
 8003c6c:	4602      	mov	r2, r0
 8003c6e:	693b      	ldr	r3, [r7, #16]
 8003c70:	1ad3      	subs	r3, r2, r3
 8003c72:	2b02      	cmp	r3, #2
 8003c74:	d901      	bls.n	8003c7a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8003c76:	2303      	movs	r3, #3
 8003c78:	e087      	b.n	8003d8a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003c7a:	4b27      	ldr	r3, [pc, #156]	@ (8003d18 <HAL_RCC_OscConfig+0x470>)
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003c82:	2b00      	cmp	r3, #0
 8003c84:	d1f0      	bne.n	8003c68 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	69da      	ldr	r2, [r3, #28]
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	6a1b      	ldr	r3, [r3, #32]
 8003c8e:	431a      	orrs	r2, r3
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c94:	019b      	lsls	r3, r3, #6
 8003c96:	431a      	orrs	r2, r3
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003c9c:	085b      	lsrs	r3, r3, #1
 8003c9e:	3b01      	subs	r3, #1
 8003ca0:	041b      	lsls	r3, r3, #16
 8003ca2:	431a      	orrs	r2, r3
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003ca8:	061b      	lsls	r3, r3, #24
 8003caa:	491b      	ldr	r1, [pc, #108]	@ (8003d18 <HAL_RCC_OscConfig+0x470>)
 8003cac:	4313      	orrs	r3, r2
 8003cae:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003cb0:	4b1b      	ldr	r3, [pc, #108]	@ (8003d20 <HAL_RCC_OscConfig+0x478>)
 8003cb2:	2201      	movs	r2, #1
 8003cb4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003cb6:	f7fe ff69 	bl	8002b8c <HAL_GetTick>
 8003cba:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003cbc:	e008      	b.n	8003cd0 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003cbe:	f7fe ff65 	bl	8002b8c <HAL_GetTick>
 8003cc2:	4602      	mov	r2, r0
 8003cc4:	693b      	ldr	r3, [r7, #16]
 8003cc6:	1ad3      	subs	r3, r2, r3
 8003cc8:	2b02      	cmp	r3, #2
 8003cca:	d901      	bls.n	8003cd0 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003ccc:	2303      	movs	r3, #3
 8003cce:	e05c      	b.n	8003d8a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003cd0:	4b11      	ldr	r3, [pc, #68]	@ (8003d18 <HAL_RCC_OscConfig+0x470>)
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003cd8:	2b00      	cmp	r3, #0
 8003cda:	d0f0      	beq.n	8003cbe <HAL_RCC_OscConfig+0x416>
 8003cdc:	e054      	b.n	8003d88 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003cde:	4b10      	ldr	r3, [pc, #64]	@ (8003d20 <HAL_RCC_OscConfig+0x478>)
 8003ce0:	2200      	movs	r2, #0
 8003ce2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003ce4:	f7fe ff52 	bl	8002b8c <HAL_GetTick>
 8003ce8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003cea:	e008      	b.n	8003cfe <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003cec:	f7fe ff4e 	bl	8002b8c <HAL_GetTick>
 8003cf0:	4602      	mov	r2, r0
 8003cf2:	693b      	ldr	r3, [r7, #16]
 8003cf4:	1ad3      	subs	r3, r2, r3
 8003cf6:	2b02      	cmp	r3, #2
 8003cf8:	d901      	bls.n	8003cfe <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8003cfa:	2303      	movs	r3, #3
 8003cfc:	e045      	b.n	8003d8a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003cfe:	4b06      	ldr	r3, [pc, #24]	@ (8003d18 <HAL_RCC_OscConfig+0x470>)
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003d06:	2b00      	cmp	r3, #0
 8003d08:	d1f0      	bne.n	8003cec <HAL_RCC_OscConfig+0x444>
 8003d0a:	e03d      	b.n	8003d88 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	699b      	ldr	r3, [r3, #24]
 8003d10:	2b01      	cmp	r3, #1
 8003d12:	d107      	bne.n	8003d24 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003d14:	2301      	movs	r3, #1
 8003d16:	e038      	b.n	8003d8a <HAL_RCC_OscConfig+0x4e2>
 8003d18:	40023800 	.word	0x40023800
 8003d1c:	40007000 	.word	0x40007000
 8003d20:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003d24:	4b1b      	ldr	r3, [pc, #108]	@ (8003d94 <HAL_RCC_OscConfig+0x4ec>)
 8003d26:	685b      	ldr	r3, [r3, #4]
 8003d28:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	699b      	ldr	r3, [r3, #24]
 8003d2e:	2b01      	cmp	r3, #1
 8003d30:	d028      	beq.n	8003d84 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003d32:	68fb      	ldr	r3, [r7, #12]
 8003d34:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003d3c:	429a      	cmp	r2, r3
 8003d3e:	d121      	bne.n	8003d84 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003d40:	68fb      	ldr	r3, [r7, #12]
 8003d42:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003d4a:	429a      	cmp	r2, r3
 8003d4c:	d11a      	bne.n	8003d84 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003d4e:	68fa      	ldr	r2, [r7, #12]
 8003d50:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8003d54:	4013      	ands	r3, r2
 8003d56:	687a      	ldr	r2, [r7, #4]
 8003d58:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8003d5a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003d5c:	4293      	cmp	r3, r2
 8003d5e:	d111      	bne.n	8003d84 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003d60:	68fb      	ldr	r3, [r7, #12]
 8003d62:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003d6a:	085b      	lsrs	r3, r3, #1
 8003d6c:	3b01      	subs	r3, #1
 8003d6e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003d70:	429a      	cmp	r2, r3
 8003d72:	d107      	bne.n	8003d84 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003d74:	68fb      	ldr	r3, [r7, #12]
 8003d76:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003d7e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003d80:	429a      	cmp	r2, r3
 8003d82:	d001      	beq.n	8003d88 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8003d84:	2301      	movs	r3, #1
 8003d86:	e000      	b.n	8003d8a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003d88:	2300      	movs	r3, #0
}
 8003d8a:	4618      	mov	r0, r3
 8003d8c:	3718      	adds	r7, #24
 8003d8e:	46bd      	mov	sp, r7
 8003d90:	bd80      	pop	{r7, pc}
 8003d92:	bf00      	nop
 8003d94:	40023800 	.word	0x40023800

08003d98 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003d98:	b580      	push	{r7, lr}
 8003d9a:	b084      	sub	sp, #16
 8003d9c:	af00      	add	r7, sp, #0
 8003d9e:	6078      	str	r0, [r7, #4]
 8003da0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	2b00      	cmp	r3, #0
 8003da6:	d101      	bne.n	8003dac <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003da8:	2301      	movs	r3, #1
 8003daa:	e0cc      	b.n	8003f46 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003dac:	4b68      	ldr	r3, [pc, #416]	@ (8003f50 <HAL_RCC_ClockConfig+0x1b8>)
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	f003 0307 	and.w	r3, r3, #7
 8003db4:	683a      	ldr	r2, [r7, #0]
 8003db6:	429a      	cmp	r2, r3
 8003db8:	d90c      	bls.n	8003dd4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003dba:	4b65      	ldr	r3, [pc, #404]	@ (8003f50 <HAL_RCC_ClockConfig+0x1b8>)
 8003dbc:	683a      	ldr	r2, [r7, #0]
 8003dbe:	b2d2      	uxtb	r2, r2
 8003dc0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003dc2:	4b63      	ldr	r3, [pc, #396]	@ (8003f50 <HAL_RCC_ClockConfig+0x1b8>)
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	f003 0307 	and.w	r3, r3, #7
 8003dca:	683a      	ldr	r2, [r7, #0]
 8003dcc:	429a      	cmp	r2, r3
 8003dce:	d001      	beq.n	8003dd4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003dd0:	2301      	movs	r3, #1
 8003dd2:	e0b8      	b.n	8003f46 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	f003 0302 	and.w	r3, r3, #2
 8003ddc:	2b00      	cmp	r3, #0
 8003dde:	d020      	beq.n	8003e22 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	f003 0304 	and.w	r3, r3, #4
 8003de8:	2b00      	cmp	r3, #0
 8003dea:	d005      	beq.n	8003df8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003dec:	4b59      	ldr	r3, [pc, #356]	@ (8003f54 <HAL_RCC_ClockConfig+0x1bc>)
 8003dee:	689b      	ldr	r3, [r3, #8]
 8003df0:	4a58      	ldr	r2, [pc, #352]	@ (8003f54 <HAL_RCC_ClockConfig+0x1bc>)
 8003df2:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8003df6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	f003 0308 	and.w	r3, r3, #8
 8003e00:	2b00      	cmp	r3, #0
 8003e02:	d005      	beq.n	8003e10 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003e04:	4b53      	ldr	r3, [pc, #332]	@ (8003f54 <HAL_RCC_ClockConfig+0x1bc>)
 8003e06:	689b      	ldr	r3, [r3, #8]
 8003e08:	4a52      	ldr	r2, [pc, #328]	@ (8003f54 <HAL_RCC_ClockConfig+0x1bc>)
 8003e0a:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8003e0e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003e10:	4b50      	ldr	r3, [pc, #320]	@ (8003f54 <HAL_RCC_ClockConfig+0x1bc>)
 8003e12:	689b      	ldr	r3, [r3, #8]
 8003e14:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	689b      	ldr	r3, [r3, #8]
 8003e1c:	494d      	ldr	r1, [pc, #308]	@ (8003f54 <HAL_RCC_ClockConfig+0x1bc>)
 8003e1e:	4313      	orrs	r3, r2
 8003e20:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	f003 0301 	and.w	r3, r3, #1
 8003e2a:	2b00      	cmp	r3, #0
 8003e2c:	d044      	beq.n	8003eb8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	685b      	ldr	r3, [r3, #4]
 8003e32:	2b01      	cmp	r3, #1
 8003e34:	d107      	bne.n	8003e46 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003e36:	4b47      	ldr	r3, [pc, #284]	@ (8003f54 <HAL_RCC_ClockConfig+0x1bc>)
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003e3e:	2b00      	cmp	r3, #0
 8003e40:	d119      	bne.n	8003e76 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003e42:	2301      	movs	r3, #1
 8003e44:	e07f      	b.n	8003f46 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	685b      	ldr	r3, [r3, #4]
 8003e4a:	2b02      	cmp	r3, #2
 8003e4c:	d003      	beq.n	8003e56 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003e52:	2b03      	cmp	r3, #3
 8003e54:	d107      	bne.n	8003e66 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003e56:	4b3f      	ldr	r3, [pc, #252]	@ (8003f54 <HAL_RCC_ClockConfig+0x1bc>)
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003e5e:	2b00      	cmp	r3, #0
 8003e60:	d109      	bne.n	8003e76 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003e62:	2301      	movs	r3, #1
 8003e64:	e06f      	b.n	8003f46 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003e66:	4b3b      	ldr	r3, [pc, #236]	@ (8003f54 <HAL_RCC_ClockConfig+0x1bc>)
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	f003 0302 	and.w	r3, r3, #2
 8003e6e:	2b00      	cmp	r3, #0
 8003e70:	d101      	bne.n	8003e76 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003e72:	2301      	movs	r3, #1
 8003e74:	e067      	b.n	8003f46 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003e76:	4b37      	ldr	r3, [pc, #220]	@ (8003f54 <HAL_RCC_ClockConfig+0x1bc>)
 8003e78:	689b      	ldr	r3, [r3, #8]
 8003e7a:	f023 0203 	bic.w	r2, r3, #3
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	685b      	ldr	r3, [r3, #4]
 8003e82:	4934      	ldr	r1, [pc, #208]	@ (8003f54 <HAL_RCC_ClockConfig+0x1bc>)
 8003e84:	4313      	orrs	r3, r2
 8003e86:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003e88:	f7fe fe80 	bl	8002b8c <HAL_GetTick>
 8003e8c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003e8e:	e00a      	b.n	8003ea6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003e90:	f7fe fe7c 	bl	8002b8c <HAL_GetTick>
 8003e94:	4602      	mov	r2, r0
 8003e96:	68fb      	ldr	r3, [r7, #12]
 8003e98:	1ad3      	subs	r3, r2, r3
 8003e9a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003e9e:	4293      	cmp	r3, r2
 8003ea0:	d901      	bls.n	8003ea6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003ea2:	2303      	movs	r3, #3
 8003ea4:	e04f      	b.n	8003f46 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003ea6:	4b2b      	ldr	r3, [pc, #172]	@ (8003f54 <HAL_RCC_ClockConfig+0x1bc>)
 8003ea8:	689b      	ldr	r3, [r3, #8]
 8003eaa:	f003 020c 	and.w	r2, r3, #12
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	685b      	ldr	r3, [r3, #4]
 8003eb2:	009b      	lsls	r3, r3, #2
 8003eb4:	429a      	cmp	r2, r3
 8003eb6:	d1eb      	bne.n	8003e90 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003eb8:	4b25      	ldr	r3, [pc, #148]	@ (8003f50 <HAL_RCC_ClockConfig+0x1b8>)
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	f003 0307 	and.w	r3, r3, #7
 8003ec0:	683a      	ldr	r2, [r7, #0]
 8003ec2:	429a      	cmp	r2, r3
 8003ec4:	d20c      	bcs.n	8003ee0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003ec6:	4b22      	ldr	r3, [pc, #136]	@ (8003f50 <HAL_RCC_ClockConfig+0x1b8>)
 8003ec8:	683a      	ldr	r2, [r7, #0]
 8003eca:	b2d2      	uxtb	r2, r2
 8003ecc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003ece:	4b20      	ldr	r3, [pc, #128]	@ (8003f50 <HAL_RCC_ClockConfig+0x1b8>)
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	f003 0307 	and.w	r3, r3, #7
 8003ed6:	683a      	ldr	r2, [r7, #0]
 8003ed8:	429a      	cmp	r2, r3
 8003eda:	d001      	beq.n	8003ee0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003edc:	2301      	movs	r3, #1
 8003ede:	e032      	b.n	8003f46 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	f003 0304 	and.w	r3, r3, #4
 8003ee8:	2b00      	cmp	r3, #0
 8003eea:	d008      	beq.n	8003efe <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003eec:	4b19      	ldr	r3, [pc, #100]	@ (8003f54 <HAL_RCC_ClockConfig+0x1bc>)
 8003eee:	689b      	ldr	r3, [r3, #8]
 8003ef0:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	68db      	ldr	r3, [r3, #12]
 8003ef8:	4916      	ldr	r1, [pc, #88]	@ (8003f54 <HAL_RCC_ClockConfig+0x1bc>)
 8003efa:	4313      	orrs	r3, r2
 8003efc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	f003 0308 	and.w	r3, r3, #8
 8003f06:	2b00      	cmp	r3, #0
 8003f08:	d009      	beq.n	8003f1e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003f0a:	4b12      	ldr	r3, [pc, #72]	@ (8003f54 <HAL_RCC_ClockConfig+0x1bc>)
 8003f0c:	689b      	ldr	r3, [r3, #8]
 8003f0e:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	691b      	ldr	r3, [r3, #16]
 8003f16:	00db      	lsls	r3, r3, #3
 8003f18:	490e      	ldr	r1, [pc, #56]	@ (8003f54 <HAL_RCC_ClockConfig+0x1bc>)
 8003f1a:	4313      	orrs	r3, r2
 8003f1c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003f1e:	f000 f821 	bl	8003f64 <HAL_RCC_GetSysClockFreq>
 8003f22:	4602      	mov	r2, r0
 8003f24:	4b0b      	ldr	r3, [pc, #44]	@ (8003f54 <HAL_RCC_ClockConfig+0x1bc>)
 8003f26:	689b      	ldr	r3, [r3, #8]
 8003f28:	091b      	lsrs	r3, r3, #4
 8003f2a:	f003 030f 	and.w	r3, r3, #15
 8003f2e:	490a      	ldr	r1, [pc, #40]	@ (8003f58 <HAL_RCC_ClockConfig+0x1c0>)
 8003f30:	5ccb      	ldrb	r3, [r1, r3]
 8003f32:	fa22 f303 	lsr.w	r3, r2, r3
 8003f36:	4a09      	ldr	r2, [pc, #36]	@ (8003f5c <HAL_RCC_ClockConfig+0x1c4>)
 8003f38:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003f3a:	4b09      	ldr	r3, [pc, #36]	@ (8003f60 <HAL_RCC_ClockConfig+0x1c8>)
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	4618      	mov	r0, r3
 8003f40:	f7fe fb88 	bl	8002654 <HAL_InitTick>

  return HAL_OK;
 8003f44:	2300      	movs	r3, #0
}
 8003f46:	4618      	mov	r0, r3
 8003f48:	3710      	adds	r7, #16
 8003f4a:	46bd      	mov	sp, r7
 8003f4c:	bd80      	pop	{r7, pc}
 8003f4e:	bf00      	nop
 8003f50:	40023c00 	.word	0x40023c00
 8003f54:	40023800 	.word	0x40023800
 8003f58:	08016884 	.word	0x08016884
 8003f5c:	20000004 	.word	0x20000004
 8003f60:	20000008 	.word	0x20000008

08003f64 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003f64:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003f68:	b094      	sub	sp, #80	@ 0x50
 8003f6a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003f6c:	2300      	movs	r3, #0
 8003f6e:	647b      	str	r3, [r7, #68]	@ 0x44
 8003f70:	2300      	movs	r3, #0
 8003f72:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003f74:	2300      	movs	r3, #0
 8003f76:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8003f78:	2300      	movs	r3, #0
 8003f7a:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003f7c:	4b79      	ldr	r3, [pc, #484]	@ (8004164 <HAL_RCC_GetSysClockFreq+0x200>)
 8003f7e:	689b      	ldr	r3, [r3, #8]
 8003f80:	f003 030c 	and.w	r3, r3, #12
 8003f84:	2b08      	cmp	r3, #8
 8003f86:	d00d      	beq.n	8003fa4 <HAL_RCC_GetSysClockFreq+0x40>
 8003f88:	2b08      	cmp	r3, #8
 8003f8a:	f200 80e1 	bhi.w	8004150 <HAL_RCC_GetSysClockFreq+0x1ec>
 8003f8e:	2b00      	cmp	r3, #0
 8003f90:	d002      	beq.n	8003f98 <HAL_RCC_GetSysClockFreq+0x34>
 8003f92:	2b04      	cmp	r3, #4
 8003f94:	d003      	beq.n	8003f9e <HAL_RCC_GetSysClockFreq+0x3a>
 8003f96:	e0db      	b.n	8004150 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003f98:	4b73      	ldr	r3, [pc, #460]	@ (8004168 <HAL_RCC_GetSysClockFreq+0x204>)
 8003f9a:	64bb      	str	r3, [r7, #72]	@ 0x48
       break;
 8003f9c:	e0db      	b.n	8004156 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003f9e:	4b73      	ldr	r3, [pc, #460]	@ (800416c <HAL_RCC_GetSysClockFreq+0x208>)
 8003fa0:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003fa2:	e0d8      	b.n	8004156 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003fa4:	4b6f      	ldr	r3, [pc, #444]	@ (8004164 <HAL_RCC_GetSysClockFreq+0x200>)
 8003fa6:	685b      	ldr	r3, [r3, #4]
 8003fa8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003fac:	647b      	str	r3, [r7, #68]	@ 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003fae:	4b6d      	ldr	r3, [pc, #436]	@ (8004164 <HAL_RCC_GetSysClockFreq+0x200>)
 8003fb0:	685b      	ldr	r3, [r3, #4]
 8003fb2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003fb6:	2b00      	cmp	r3, #0
 8003fb8:	d063      	beq.n	8004082 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003fba:	4b6a      	ldr	r3, [pc, #424]	@ (8004164 <HAL_RCC_GetSysClockFreq+0x200>)
 8003fbc:	685b      	ldr	r3, [r3, #4]
 8003fbe:	099b      	lsrs	r3, r3, #6
 8003fc0:	2200      	movs	r2, #0
 8003fc2:	63bb      	str	r3, [r7, #56]	@ 0x38
 8003fc4:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8003fc6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003fc8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003fcc:	633b      	str	r3, [r7, #48]	@ 0x30
 8003fce:	2300      	movs	r3, #0
 8003fd0:	637b      	str	r3, [r7, #52]	@ 0x34
 8003fd2:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8003fd6:	4622      	mov	r2, r4
 8003fd8:	462b      	mov	r3, r5
 8003fda:	f04f 0000 	mov.w	r0, #0
 8003fde:	f04f 0100 	mov.w	r1, #0
 8003fe2:	0159      	lsls	r1, r3, #5
 8003fe4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003fe8:	0150      	lsls	r0, r2, #5
 8003fea:	4602      	mov	r2, r0
 8003fec:	460b      	mov	r3, r1
 8003fee:	4621      	mov	r1, r4
 8003ff0:	1a51      	subs	r1, r2, r1
 8003ff2:	6139      	str	r1, [r7, #16]
 8003ff4:	4629      	mov	r1, r5
 8003ff6:	eb63 0301 	sbc.w	r3, r3, r1
 8003ffa:	617b      	str	r3, [r7, #20]
 8003ffc:	f04f 0200 	mov.w	r2, #0
 8004000:	f04f 0300 	mov.w	r3, #0
 8004004:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004008:	4659      	mov	r1, fp
 800400a:	018b      	lsls	r3, r1, #6
 800400c:	4651      	mov	r1, sl
 800400e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004012:	4651      	mov	r1, sl
 8004014:	018a      	lsls	r2, r1, #6
 8004016:	4651      	mov	r1, sl
 8004018:	ebb2 0801 	subs.w	r8, r2, r1
 800401c:	4659      	mov	r1, fp
 800401e:	eb63 0901 	sbc.w	r9, r3, r1
 8004022:	f04f 0200 	mov.w	r2, #0
 8004026:	f04f 0300 	mov.w	r3, #0
 800402a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800402e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004032:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004036:	4690      	mov	r8, r2
 8004038:	4699      	mov	r9, r3
 800403a:	4623      	mov	r3, r4
 800403c:	eb18 0303 	adds.w	r3, r8, r3
 8004040:	60bb      	str	r3, [r7, #8]
 8004042:	462b      	mov	r3, r5
 8004044:	eb49 0303 	adc.w	r3, r9, r3
 8004048:	60fb      	str	r3, [r7, #12]
 800404a:	f04f 0200 	mov.w	r2, #0
 800404e:	f04f 0300 	mov.w	r3, #0
 8004052:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8004056:	4629      	mov	r1, r5
 8004058:	024b      	lsls	r3, r1, #9
 800405a:	4621      	mov	r1, r4
 800405c:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8004060:	4621      	mov	r1, r4
 8004062:	024a      	lsls	r2, r1, #9
 8004064:	4610      	mov	r0, r2
 8004066:	4619      	mov	r1, r3
 8004068:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800406a:	2200      	movs	r2, #0
 800406c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800406e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004070:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8004074:	f7fc fdaa 	bl	8000bcc <__aeabi_uldivmod>
 8004078:	4602      	mov	r2, r0
 800407a:	460b      	mov	r3, r1
 800407c:	4613      	mov	r3, r2
 800407e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004080:	e058      	b.n	8004134 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004082:	4b38      	ldr	r3, [pc, #224]	@ (8004164 <HAL_RCC_GetSysClockFreq+0x200>)
 8004084:	685b      	ldr	r3, [r3, #4]
 8004086:	099b      	lsrs	r3, r3, #6
 8004088:	2200      	movs	r2, #0
 800408a:	4618      	mov	r0, r3
 800408c:	4611      	mov	r1, r2
 800408e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8004092:	623b      	str	r3, [r7, #32]
 8004094:	2300      	movs	r3, #0
 8004096:	627b      	str	r3, [r7, #36]	@ 0x24
 8004098:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 800409c:	4642      	mov	r2, r8
 800409e:	464b      	mov	r3, r9
 80040a0:	f04f 0000 	mov.w	r0, #0
 80040a4:	f04f 0100 	mov.w	r1, #0
 80040a8:	0159      	lsls	r1, r3, #5
 80040aa:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80040ae:	0150      	lsls	r0, r2, #5
 80040b0:	4602      	mov	r2, r0
 80040b2:	460b      	mov	r3, r1
 80040b4:	4641      	mov	r1, r8
 80040b6:	ebb2 0a01 	subs.w	sl, r2, r1
 80040ba:	4649      	mov	r1, r9
 80040bc:	eb63 0b01 	sbc.w	fp, r3, r1
 80040c0:	f04f 0200 	mov.w	r2, #0
 80040c4:	f04f 0300 	mov.w	r3, #0
 80040c8:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80040cc:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80040d0:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80040d4:	ebb2 040a 	subs.w	r4, r2, sl
 80040d8:	eb63 050b 	sbc.w	r5, r3, fp
 80040dc:	f04f 0200 	mov.w	r2, #0
 80040e0:	f04f 0300 	mov.w	r3, #0
 80040e4:	00eb      	lsls	r3, r5, #3
 80040e6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80040ea:	00e2      	lsls	r2, r4, #3
 80040ec:	4614      	mov	r4, r2
 80040ee:	461d      	mov	r5, r3
 80040f0:	4643      	mov	r3, r8
 80040f2:	18e3      	adds	r3, r4, r3
 80040f4:	603b      	str	r3, [r7, #0]
 80040f6:	464b      	mov	r3, r9
 80040f8:	eb45 0303 	adc.w	r3, r5, r3
 80040fc:	607b      	str	r3, [r7, #4]
 80040fe:	f04f 0200 	mov.w	r2, #0
 8004102:	f04f 0300 	mov.w	r3, #0
 8004106:	e9d7 4500 	ldrd	r4, r5, [r7]
 800410a:	4629      	mov	r1, r5
 800410c:	028b      	lsls	r3, r1, #10
 800410e:	4621      	mov	r1, r4
 8004110:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004114:	4621      	mov	r1, r4
 8004116:	028a      	lsls	r2, r1, #10
 8004118:	4610      	mov	r0, r2
 800411a:	4619      	mov	r1, r3
 800411c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800411e:	2200      	movs	r2, #0
 8004120:	61bb      	str	r3, [r7, #24]
 8004122:	61fa      	str	r2, [r7, #28]
 8004124:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004128:	f7fc fd50 	bl	8000bcc <__aeabi_uldivmod>
 800412c:	4602      	mov	r2, r0
 800412e:	460b      	mov	r3, r1
 8004130:	4613      	mov	r3, r2
 8004132:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004134:	4b0b      	ldr	r3, [pc, #44]	@ (8004164 <HAL_RCC_GetSysClockFreq+0x200>)
 8004136:	685b      	ldr	r3, [r3, #4]
 8004138:	0c1b      	lsrs	r3, r3, #16
 800413a:	f003 0303 	and.w	r3, r3, #3
 800413e:	3301      	adds	r3, #1
 8004140:	005b      	lsls	r3, r3, #1
 8004142:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco/pllp;
 8004144:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8004146:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004148:	fbb2 f3f3 	udiv	r3, r2, r3
 800414c:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800414e:	e002      	b.n	8004156 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004150:	4b05      	ldr	r3, [pc, #20]	@ (8004168 <HAL_RCC_GetSysClockFreq+0x204>)
 8004152:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004154:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004156:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8004158:	4618      	mov	r0, r3
 800415a:	3750      	adds	r7, #80	@ 0x50
 800415c:	46bd      	mov	sp, r7
 800415e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004162:	bf00      	nop
 8004164:	40023800 	.word	0x40023800
 8004168:	00f42400 	.word	0x00f42400
 800416c:	007a1200 	.word	0x007a1200

08004170 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004170:	b480      	push	{r7}
 8004172:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004174:	4b03      	ldr	r3, [pc, #12]	@ (8004184 <HAL_RCC_GetHCLKFreq+0x14>)
 8004176:	681b      	ldr	r3, [r3, #0]
}
 8004178:	4618      	mov	r0, r3
 800417a:	46bd      	mov	sp, r7
 800417c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004180:	4770      	bx	lr
 8004182:	bf00      	nop
 8004184:	20000004 	.word	0x20000004

08004188 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004188:	b580      	push	{r7, lr}
 800418a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800418c:	f7ff fff0 	bl	8004170 <HAL_RCC_GetHCLKFreq>
 8004190:	4602      	mov	r2, r0
 8004192:	4b05      	ldr	r3, [pc, #20]	@ (80041a8 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004194:	689b      	ldr	r3, [r3, #8]
 8004196:	0a9b      	lsrs	r3, r3, #10
 8004198:	f003 0307 	and.w	r3, r3, #7
 800419c:	4903      	ldr	r1, [pc, #12]	@ (80041ac <HAL_RCC_GetPCLK1Freq+0x24>)
 800419e:	5ccb      	ldrb	r3, [r1, r3]
 80041a0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80041a4:	4618      	mov	r0, r3
 80041a6:	bd80      	pop	{r7, pc}
 80041a8:	40023800 	.word	0x40023800
 80041ac:	08016894 	.word	0x08016894

080041b0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80041b0:	b580      	push	{r7, lr}
 80041b2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80041b4:	f7ff ffdc 	bl	8004170 <HAL_RCC_GetHCLKFreq>
 80041b8:	4602      	mov	r2, r0
 80041ba:	4b05      	ldr	r3, [pc, #20]	@ (80041d0 <HAL_RCC_GetPCLK2Freq+0x20>)
 80041bc:	689b      	ldr	r3, [r3, #8]
 80041be:	0b5b      	lsrs	r3, r3, #13
 80041c0:	f003 0307 	and.w	r3, r3, #7
 80041c4:	4903      	ldr	r1, [pc, #12]	@ (80041d4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80041c6:	5ccb      	ldrb	r3, [r1, r3]
 80041c8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80041cc:	4618      	mov	r0, r3
 80041ce:	bd80      	pop	{r7, pc}
 80041d0:	40023800 	.word	0x40023800
 80041d4:	08016894 	.word	0x08016894

080041d8 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80041d8:	b480      	push	{r7}
 80041da:	b083      	sub	sp, #12
 80041dc:	af00      	add	r7, sp, #0
 80041de:	6078      	str	r0, [r7, #4]
 80041e0:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	220f      	movs	r2, #15
 80041e6:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80041e8:	4b12      	ldr	r3, [pc, #72]	@ (8004234 <HAL_RCC_GetClockConfig+0x5c>)
 80041ea:	689b      	ldr	r3, [r3, #8]
 80041ec:	f003 0203 	and.w	r2, r3, #3
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80041f4:	4b0f      	ldr	r3, [pc, #60]	@ (8004234 <HAL_RCC_GetClockConfig+0x5c>)
 80041f6:	689b      	ldr	r3, [r3, #8]
 80041f8:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8004200:	4b0c      	ldr	r3, [pc, #48]	@ (8004234 <HAL_RCC_GetClockConfig+0x5c>)
 8004202:	689b      	ldr	r3, [r3, #8]
 8004204:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 800420c:	4b09      	ldr	r3, [pc, #36]	@ (8004234 <HAL_RCC_GetClockConfig+0x5c>)
 800420e:	689b      	ldr	r3, [r3, #8]
 8004210:	08db      	lsrs	r3, r3, #3
 8004212:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800421a:	4b07      	ldr	r3, [pc, #28]	@ (8004238 <HAL_RCC_GetClockConfig+0x60>)
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	f003 0207 	and.w	r2, r3, #7
 8004222:	683b      	ldr	r3, [r7, #0]
 8004224:	601a      	str	r2, [r3, #0]
}
 8004226:	bf00      	nop
 8004228:	370c      	adds	r7, #12
 800422a:	46bd      	mov	sp, r7
 800422c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004230:	4770      	bx	lr
 8004232:	bf00      	nop
 8004234:	40023800 	.word	0x40023800
 8004238:	40023c00 	.word	0x40023c00

0800423c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800423c:	b580      	push	{r7, lr}
 800423e:	b082      	sub	sp, #8
 8004240:	af00      	add	r7, sp, #0
 8004242:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	2b00      	cmp	r3, #0
 8004248:	d101      	bne.n	800424e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800424a:	2301      	movs	r3, #1
 800424c:	e041      	b.n	80042d2 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004254:	b2db      	uxtb	r3, r3
 8004256:	2b00      	cmp	r3, #0
 8004258:	d106      	bne.n	8004268 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	2200      	movs	r2, #0
 800425e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004262:	6878      	ldr	r0, [r7, #4]
 8004264:	f7fe f86c 	bl	8002340 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	2202      	movs	r2, #2
 800426c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	681a      	ldr	r2, [r3, #0]
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	3304      	adds	r3, #4
 8004278:	4619      	mov	r1, r3
 800427a:	4610      	mov	r0, r2
 800427c:	f000 fc96 	bl	8004bac <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	2201      	movs	r2, #1
 8004284:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	2201      	movs	r2, #1
 800428c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	2201      	movs	r2, #1
 8004294:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	2201      	movs	r2, #1
 800429c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	2201      	movs	r2, #1
 80042a4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	2201      	movs	r2, #1
 80042ac:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	2201      	movs	r2, #1
 80042b4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	2201      	movs	r2, #1
 80042bc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	2201      	movs	r2, #1
 80042c4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	2201      	movs	r2, #1
 80042cc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80042d0:	2300      	movs	r3, #0
}
 80042d2:	4618      	mov	r0, r3
 80042d4:	3708      	adds	r7, #8
 80042d6:	46bd      	mov	sp, r7
 80042d8:	bd80      	pop	{r7, pc}
	...

080042dc <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80042dc:	b480      	push	{r7}
 80042de:	b085      	sub	sp, #20
 80042e0:	af00      	add	r7, sp, #0
 80042e2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80042ea:	b2db      	uxtb	r3, r3
 80042ec:	2b01      	cmp	r3, #1
 80042ee:	d001      	beq.n	80042f4 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 80042f0:	2301      	movs	r3, #1
 80042f2:	e03c      	b.n	800436e <HAL_TIM_Base_Start+0x92>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	2202      	movs	r2, #2
 80042f8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	4a1e      	ldr	r2, [pc, #120]	@ (800437c <HAL_TIM_Base_Start+0xa0>)
 8004302:	4293      	cmp	r3, r2
 8004304:	d018      	beq.n	8004338 <HAL_TIM_Base_Start+0x5c>
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800430e:	d013      	beq.n	8004338 <HAL_TIM_Base_Start+0x5c>
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	4a1a      	ldr	r2, [pc, #104]	@ (8004380 <HAL_TIM_Base_Start+0xa4>)
 8004316:	4293      	cmp	r3, r2
 8004318:	d00e      	beq.n	8004338 <HAL_TIM_Base_Start+0x5c>
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	4a19      	ldr	r2, [pc, #100]	@ (8004384 <HAL_TIM_Base_Start+0xa8>)
 8004320:	4293      	cmp	r3, r2
 8004322:	d009      	beq.n	8004338 <HAL_TIM_Base_Start+0x5c>
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	4a17      	ldr	r2, [pc, #92]	@ (8004388 <HAL_TIM_Base_Start+0xac>)
 800432a:	4293      	cmp	r3, r2
 800432c:	d004      	beq.n	8004338 <HAL_TIM_Base_Start+0x5c>
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	4a16      	ldr	r2, [pc, #88]	@ (800438c <HAL_TIM_Base_Start+0xb0>)
 8004334:	4293      	cmp	r3, r2
 8004336:	d111      	bne.n	800435c <HAL_TIM_Base_Start+0x80>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	689b      	ldr	r3, [r3, #8]
 800433e:	f003 0307 	and.w	r3, r3, #7
 8004342:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004344:	68fb      	ldr	r3, [r7, #12]
 8004346:	2b06      	cmp	r3, #6
 8004348:	d010      	beq.n	800436c <HAL_TIM_Base_Start+0x90>
    {
      __HAL_TIM_ENABLE(htim);
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	681a      	ldr	r2, [r3, #0]
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	f042 0201 	orr.w	r2, r2, #1
 8004358:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800435a:	e007      	b.n	800436c <HAL_TIM_Base_Start+0x90>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	681a      	ldr	r2, [r3, #0]
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	f042 0201 	orr.w	r2, r2, #1
 800436a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800436c:	2300      	movs	r3, #0
}
 800436e:	4618      	mov	r0, r3
 8004370:	3714      	adds	r7, #20
 8004372:	46bd      	mov	sp, r7
 8004374:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004378:	4770      	bx	lr
 800437a:	bf00      	nop
 800437c:	40010000 	.word	0x40010000
 8004380:	40000400 	.word	0x40000400
 8004384:	40000800 	.word	0x40000800
 8004388:	40000c00 	.word	0x40000c00
 800438c:	40014000 	.word	0x40014000

08004390 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004390:	b480      	push	{r7}
 8004392:	b085      	sub	sp, #20
 8004394:	af00      	add	r7, sp, #0
 8004396:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800439e:	b2db      	uxtb	r3, r3
 80043a0:	2b01      	cmp	r3, #1
 80043a2:	d001      	beq.n	80043a8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80043a4:	2301      	movs	r3, #1
 80043a6:	e044      	b.n	8004432 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	2202      	movs	r2, #2
 80043ac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	68da      	ldr	r2, [r3, #12]
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	f042 0201 	orr.w	r2, r2, #1
 80043be:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	4a1e      	ldr	r2, [pc, #120]	@ (8004440 <HAL_TIM_Base_Start_IT+0xb0>)
 80043c6:	4293      	cmp	r3, r2
 80043c8:	d018      	beq.n	80043fc <HAL_TIM_Base_Start_IT+0x6c>
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80043d2:	d013      	beq.n	80043fc <HAL_TIM_Base_Start_IT+0x6c>
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	4a1a      	ldr	r2, [pc, #104]	@ (8004444 <HAL_TIM_Base_Start_IT+0xb4>)
 80043da:	4293      	cmp	r3, r2
 80043dc:	d00e      	beq.n	80043fc <HAL_TIM_Base_Start_IT+0x6c>
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	4a19      	ldr	r2, [pc, #100]	@ (8004448 <HAL_TIM_Base_Start_IT+0xb8>)
 80043e4:	4293      	cmp	r3, r2
 80043e6:	d009      	beq.n	80043fc <HAL_TIM_Base_Start_IT+0x6c>
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	4a17      	ldr	r2, [pc, #92]	@ (800444c <HAL_TIM_Base_Start_IT+0xbc>)
 80043ee:	4293      	cmp	r3, r2
 80043f0:	d004      	beq.n	80043fc <HAL_TIM_Base_Start_IT+0x6c>
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	4a16      	ldr	r2, [pc, #88]	@ (8004450 <HAL_TIM_Base_Start_IT+0xc0>)
 80043f8:	4293      	cmp	r3, r2
 80043fa:	d111      	bne.n	8004420 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	689b      	ldr	r3, [r3, #8]
 8004402:	f003 0307 	and.w	r3, r3, #7
 8004406:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004408:	68fb      	ldr	r3, [r7, #12]
 800440a:	2b06      	cmp	r3, #6
 800440c:	d010      	beq.n	8004430 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	681a      	ldr	r2, [r3, #0]
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	f042 0201 	orr.w	r2, r2, #1
 800441c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800441e:	e007      	b.n	8004430 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	681a      	ldr	r2, [r3, #0]
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	f042 0201 	orr.w	r2, r2, #1
 800442e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004430:	2300      	movs	r3, #0
}
 8004432:	4618      	mov	r0, r3
 8004434:	3714      	adds	r7, #20
 8004436:	46bd      	mov	sp, r7
 8004438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800443c:	4770      	bx	lr
 800443e:	bf00      	nop
 8004440:	40010000 	.word	0x40010000
 8004444:	40000400 	.word	0x40000400
 8004448:	40000800 	.word	0x40000800
 800444c:	40000c00 	.word	0x40000c00
 8004450:	40014000 	.word	0x40014000

08004454 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004454:	b580      	push	{r7, lr}
 8004456:	b082      	sub	sp, #8
 8004458:	af00      	add	r7, sp, #0
 800445a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	2b00      	cmp	r3, #0
 8004460:	d101      	bne.n	8004466 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004462:	2301      	movs	r3, #1
 8004464:	e041      	b.n	80044ea <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800446c:	b2db      	uxtb	r3, r3
 800446e:	2b00      	cmp	r3, #0
 8004470:	d106      	bne.n	8004480 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	2200      	movs	r2, #0
 8004476:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800447a:	6878      	ldr	r0, [r7, #4]
 800447c:	f000 f839 	bl	80044f2 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	2202      	movs	r2, #2
 8004484:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	681a      	ldr	r2, [r3, #0]
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	3304      	adds	r3, #4
 8004490:	4619      	mov	r1, r3
 8004492:	4610      	mov	r0, r2
 8004494:	f000 fb8a 	bl	8004bac <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	2201      	movs	r2, #1
 800449c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	2201      	movs	r2, #1
 80044a4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	2201      	movs	r2, #1
 80044ac:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	2201      	movs	r2, #1
 80044b4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	2201      	movs	r2, #1
 80044bc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	2201      	movs	r2, #1
 80044c4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	2201      	movs	r2, #1
 80044cc:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	2201      	movs	r2, #1
 80044d4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	2201      	movs	r2, #1
 80044dc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	2201      	movs	r2, #1
 80044e4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80044e8:	2300      	movs	r3, #0
}
 80044ea:	4618      	mov	r0, r3
 80044ec:	3708      	adds	r7, #8
 80044ee:	46bd      	mov	sp, r7
 80044f0:	bd80      	pop	{r7, pc}

080044f2 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80044f2:	b480      	push	{r7}
 80044f4:	b083      	sub	sp, #12
 80044f6:	af00      	add	r7, sp, #0
 80044f8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80044fa:	bf00      	nop
 80044fc:	370c      	adds	r7, #12
 80044fe:	46bd      	mov	sp, r7
 8004500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004504:	4770      	bx	lr
	...

08004508 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004508:	b580      	push	{r7, lr}
 800450a:	b084      	sub	sp, #16
 800450c:	af00      	add	r7, sp, #0
 800450e:	6078      	str	r0, [r7, #4]
 8004510:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8004512:	683b      	ldr	r3, [r7, #0]
 8004514:	2b00      	cmp	r3, #0
 8004516:	d109      	bne.n	800452c <HAL_TIM_PWM_Start+0x24>
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800451e:	b2db      	uxtb	r3, r3
 8004520:	2b01      	cmp	r3, #1
 8004522:	bf14      	ite	ne
 8004524:	2301      	movne	r3, #1
 8004526:	2300      	moveq	r3, #0
 8004528:	b2db      	uxtb	r3, r3
 800452a:	e022      	b.n	8004572 <HAL_TIM_PWM_Start+0x6a>
 800452c:	683b      	ldr	r3, [r7, #0]
 800452e:	2b04      	cmp	r3, #4
 8004530:	d109      	bne.n	8004546 <HAL_TIM_PWM_Start+0x3e>
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8004538:	b2db      	uxtb	r3, r3
 800453a:	2b01      	cmp	r3, #1
 800453c:	bf14      	ite	ne
 800453e:	2301      	movne	r3, #1
 8004540:	2300      	moveq	r3, #0
 8004542:	b2db      	uxtb	r3, r3
 8004544:	e015      	b.n	8004572 <HAL_TIM_PWM_Start+0x6a>
 8004546:	683b      	ldr	r3, [r7, #0]
 8004548:	2b08      	cmp	r3, #8
 800454a:	d109      	bne.n	8004560 <HAL_TIM_PWM_Start+0x58>
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004552:	b2db      	uxtb	r3, r3
 8004554:	2b01      	cmp	r3, #1
 8004556:	bf14      	ite	ne
 8004558:	2301      	movne	r3, #1
 800455a:	2300      	moveq	r3, #0
 800455c:	b2db      	uxtb	r3, r3
 800455e:	e008      	b.n	8004572 <HAL_TIM_PWM_Start+0x6a>
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004566:	b2db      	uxtb	r3, r3
 8004568:	2b01      	cmp	r3, #1
 800456a:	bf14      	ite	ne
 800456c:	2301      	movne	r3, #1
 800456e:	2300      	moveq	r3, #0
 8004570:	b2db      	uxtb	r3, r3
 8004572:	2b00      	cmp	r3, #0
 8004574:	d001      	beq.n	800457a <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8004576:	2301      	movs	r3, #1
 8004578:	e068      	b.n	800464c <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800457a:	683b      	ldr	r3, [r7, #0]
 800457c:	2b00      	cmp	r3, #0
 800457e:	d104      	bne.n	800458a <HAL_TIM_PWM_Start+0x82>
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	2202      	movs	r2, #2
 8004584:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004588:	e013      	b.n	80045b2 <HAL_TIM_PWM_Start+0xaa>
 800458a:	683b      	ldr	r3, [r7, #0]
 800458c:	2b04      	cmp	r3, #4
 800458e:	d104      	bne.n	800459a <HAL_TIM_PWM_Start+0x92>
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	2202      	movs	r2, #2
 8004594:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004598:	e00b      	b.n	80045b2 <HAL_TIM_PWM_Start+0xaa>
 800459a:	683b      	ldr	r3, [r7, #0]
 800459c:	2b08      	cmp	r3, #8
 800459e:	d104      	bne.n	80045aa <HAL_TIM_PWM_Start+0xa2>
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	2202      	movs	r2, #2
 80045a4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80045a8:	e003      	b.n	80045b2 <HAL_TIM_PWM_Start+0xaa>
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	2202      	movs	r2, #2
 80045ae:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	2201      	movs	r2, #1
 80045b8:	6839      	ldr	r1, [r7, #0]
 80045ba:	4618      	mov	r0, r3
 80045bc:	f000 fda8 	bl	8005110 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	4a23      	ldr	r2, [pc, #140]	@ (8004654 <HAL_TIM_PWM_Start+0x14c>)
 80045c6:	4293      	cmp	r3, r2
 80045c8:	d107      	bne.n	80045da <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80045d8:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	4a1d      	ldr	r2, [pc, #116]	@ (8004654 <HAL_TIM_PWM_Start+0x14c>)
 80045e0:	4293      	cmp	r3, r2
 80045e2:	d018      	beq.n	8004616 <HAL_TIM_PWM_Start+0x10e>
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80045ec:	d013      	beq.n	8004616 <HAL_TIM_PWM_Start+0x10e>
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	4a19      	ldr	r2, [pc, #100]	@ (8004658 <HAL_TIM_PWM_Start+0x150>)
 80045f4:	4293      	cmp	r3, r2
 80045f6:	d00e      	beq.n	8004616 <HAL_TIM_PWM_Start+0x10e>
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	4a17      	ldr	r2, [pc, #92]	@ (800465c <HAL_TIM_PWM_Start+0x154>)
 80045fe:	4293      	cmp	r3, r2
 8004600:	d009      	beq.n	8004616 <HAL_TIM_PWM_Start+0x10e>
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	4a16      	ldr	r2, [pc, #88]	@ (8004660 <HAL_TIM_PWM_Start+0x158>)
 8004608:	4293      	cmp	r3, r2
 800460a:	d004      	beq.n	8004616 <HAL_TIM_PWM_Start+0x10e>
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	4a14      	ldr	r2, [pc, #80]	@ (8004664 <HAL_TIM_PWM_Start+0x15c>)
 8004612:	4293      	cmp	r3, r2
 8004614:	d111      	bne.n	800463a <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	689b      	ldr	r3, [r3, #8]
 800461c:	f003 0307 	and.w	r3, r3, #7
 8004620:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004622:	68fb      	ldr	r3, [r7, #12]
 8004624:	2b06      	cmp	r3, #6
 8004626:	d010      	beq.n	800464a <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	681a      	ldr	r2, [r3, #0]
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	f042 0201 	orr.w	r2, r2, #1
 8004636:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004638:	e007      	b.n	800464a <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	681a      	ldr	r2, [r3, #0]
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	f042 0201 	orr.w	r2, r2, #1
 8004648:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800464a:	2300      	movs	r3, #0
}
 800464c:	4618      	mov	r0, r3
 800464e:	3710      	adds	r7, #16
 8004650:	46bd      	mov	sp, r7
 8004652:	bd80      	pop	{r7, pc}
 8004654:	40010000 	.word	0x40010000
 8004658:	40000400 	.word	0x40000400
 800465c:	40000800 	.word	0x40000800
 8004660:	40000c00 	.word	0x40000c00
 8004664:	40014000 	.word	0x40014000

08004668 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004668:	b580      	push	{r7, lr}
 800466a:	b084      	sub	sp, #16
 800466c:	af00      	add	r7, sp, #0
 800466e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	68db      	ldr	r3, [r3, #12]
 8004676:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	691b      	ldr	r3, [r3, #16]
 800467e:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8004680:	68bb      	ldr	r3, [r7, #8]
 8004682:	f003 0302 	and.w	r3, r3, #2
 8004686:	2b00      	cmp	r3, #0
 8004688:	d020      	beq.n	80046cc <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800468a:	68fb      	ldr	r3, [r7, #12]
 800468c:	f003 0302 	and.w	r3, r3, #2
 8004690:	2b00      	cmp	r3, #0
 8004692:	d01b      	beq.n	80046cc <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	f06f 0202 	mvn.w	r2, #2
 800469c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	2201      	movs	r2, #1
 80046a2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	699b      	ldr	r3, [r3, #24]
 80046aa:	f003 0303 	and.w	r3, r3, #3
 80046ae:	2b00      	cmp	r3, #0
 80046b0:	d003      	beq.n	80046ba <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80046b2:	6878      	ldr	r0, [r7, #4]
 80046b4:	f000 fa5b 	bl	8004b6e <HAL_TIM_IC_CaptureCallback>
 80046b8:	e005      	b.n	80046c6 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80046ba:	6878      	ldr	r0, [r7, #4]
 80046bc:	f000 fa4d 	bl	8004b5a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80046c0:	6878      	ldr	r0, [r7, #4]
 80046c2:	f000 fa5e 	bl	8004b82 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	2200      	movs	r2, #0
 80046ca:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80046cc:	68bb      	ldr	r3, [r7, #8]
 80046ce:	f003 0304 	and.w	r3, r3, #4
 80046d2:	2b00      	cmp	r3, #0
 80046d4:	d020      	beq.n	8004718 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80046d6:	68fb      	ldr	r3, [r7, #12]
 80046d8:	f003 0304 	and.w	r3, r3, #4
 80046dc:	2b00      	cmp	r3, #0
 80046de:	d01b      	beq.n	8004718 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	f06f 0204 	mvn.w	r2, #4
 80046e8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	2202      	movs	r2, #2
 80046ee:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	699b      	ldr	r3, [r3, #24]
 80046f6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80046fa:	2b00      	cmp	r3, #0
 80046fc:	d003      	beq.n	8004706 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80046fe:	6878      	ldr	r0, [r7, #4]
 8004700:	f000 fa35 	bl	8004b6e <HAL_TIM_IC_CaptureCallback>
 8004704:	e005      	b.n	8004712 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004706:	6878      	ldr	r0, [r7, #4]
 8004708:	f000 fa27 	bl	8004b5a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800470c:	6878      	ldr	r0, [r7, #4]
 800470e:	f000 fa38 	bl	8004b82 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	2200      	movs	r2, #0
 8004716:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8004718:	68bb      	ldr	r3, [r7, #8]
 800471a:	f003 0308 	and.w	r3, r3, #8
 800471e:	2b00      	cmp	r3, #0
 8004720:	d020      	beq.n	8004764 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8004722:	68fb      	ldr	r3, [r7, #12]
 8004724:	f003 0308 	and.w	r3, r3, #8
 8004728:	2b00      	cmp	r3, #0
 800472a:	d01b      	beq.n	8004764 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	f06f 0208 	mvn.w	r2, #8
 8004734:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	2204      	movs	r2, #4
 800473a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	69db      	ldr	r3, [r3, #28]
 8004742:	f003 0303 	and.w	r3, r3, #3
 8004746:	2b00      	cmp	r3, #0
 8004748:	d003      	beq.n	8004752 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800474a:	6878      	ldr	r0, [r7, #4]
 800474c:	f000 fa0f 	bl	8004b6e <HAL_TIM_IC_CaptureCallback>
 8004750:	e005      	b.n	800475e <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004752:	6878      	ldr	r0, [r7, #4]
 8004754:	f000 fa01 	bl	8004b5a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004758:	6878      	ldr	r0, [r7, #4]
 800475a:	f000 fa12 	bl	8004b82 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	2200      	movs	r2, #0
 8004762:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8004764:	68bb      	ldr	r3, [r7, #8]
 8004766:	f003 0310 	and.w	r3, r3, #16
 800476a:	2b00      	cmp	r3, #0
 800476c:	d020      	beq.n	80047b0 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800476e:	68fb      	ldr	r3, [r7, #12]
 8004770:	f003 0310 	and.w	r3, r3, #16
 8004774:	2b00      	cmp	r3, #0
 8004776:	d01b      	beq.n	80047b0 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	f06f 0210 	mvn.w	r2, #16
 8004780:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	2208      	movs	r2, #8
 8004786:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	69db      	ldr	r3, [r3, #28]
 800478e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004792:	2b00      	cmp	r3, #0
 8004794:	d003      	beq.n	800479e <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004796:	6878      	ldr	r0, [r7, #4]
 8004798:	f000 f9e9 	bl	8004b6e <HAL_TIM_IC_CaptureCallback>
 800479c:	e005      	b.n	80047aa <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800479e:	6878      	ldr	r0, [r7, #4]
 80047a0:	f000 f9db 	bl	8004b5a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80047a4:	6878      	ldr	r0, [r7, #4]
 80047a6:	f000 f9ec 	bl	8004b82 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	2200      	movs	r2, #0
 80047ae:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80047b0:	68bb      	ldr	r3, [r7, #8]
 80047b2:	f003 0301 	and.w	r3, r3, #1
 80047b6:	2b00      	cmp	r3, #0
 80047b8:	d00c      	beq.n	80047d4 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80047ba:	68fb      	ldr	r3, [r7, #12]
 80047bc:	f003 0301 	and.w	r3, r3, #1
 80047c0:	2b00      	cmp	r3, #0
 80047c2:	d007      	beq.n	80047d4 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	f06f 0201 	mvn.w	r2, #1
 80047cc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80047ce:	6878      	ldr	r0, [r7, #4]
 80047d0:	f7fd fc0e 	bl	8001ff0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 80047d4:	68bb      	ldr	r3, [r7, #8]
 80047d6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80047da:	2b00      	cmp	r3, #0
 80047dc:	d00c      	beq.n	80047f8 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80047de:	68fb      	ldr	r3, [r7, #12]
 80047e0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80047e4:	2b00      	cmp	r3, #0
 80047e6:	d007      	beq.n	80047f8 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 80047f0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80047f2:	6878      	ldr	r0, [r7, #4]
 80047f4:	f000 fd2a 	bl	800524c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80047f8:	68bb      	ldr	r3, [r7, #8]
 80047fa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80047fe:	2b00      	cmp	r3, #0
 8004800:	d00c      	beq.n	800481c <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8004802:	68fb      	ldr	r3, [r7, #12]
 8004804:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004808:	2b00      	cmp	r3, #0
 800480a:	d007      	beq.n	800481c <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8004814:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004816:	6878      	ldr	r0, [r7, #4]
 8004818:	f000 f9bd 	bl	8004b96 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800481c:	68bb      	ldr	r3, [r7, #8]
 800481e:	f003 0320 	and.w	r3, r3, #32
 8004822:	2b00      	cmp	r3, #0
 8004824:	d00c      	beq.n	8004840 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8004826:	68fb      	ldr	r3, [r7, #12]
 8004828:	f003 0320 	and.w	r3, r3, #32
 800482c:	2b00      	cmp	r3, #0
 800482e:	d007      	beq.n	8004840 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	f06f 0220 	mvn.w	r2, #32
 8004838:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800483a:	6878      	ldr	r0, [r7, #4]
 800483c:	f000 fcfc 	bl	8005238 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004840:	bf00      	nop
 8004842:	3710      	adds	r7, #16
 8004844:	46bd      	mov	sp, r7
 8004846:	bd80      	pop	{r7, pc}

08004848 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004848:	b580      	push	{r7, lr}
 800484a:	b086      	sub	sp, #24
 800484c:	af00      	add	r7, sp, #0
 800484e:	60f8      	str	r0, [r7, #12]
 8004850:	60b9      	str	r1, [r7, #8]
 8004852:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004854:	2300      	movs	r3, #0
 8004856:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004858:	68fb      	ldr	r3, [r7, #12]
 800485a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800485e:	2b01      	cmp	r3, #1
 8004860:	d101      	bne.n	8004866 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8004862:	2302      	movs	r3, #2
 8004864:	e0ae      	b.n	80049c4 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8004866:	68fb      	ldr	r3, [r7, #12]
 8004868:	2201      	movs	r2, #1
 800486a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	2b0c      	cmp	r3, #12
 8004872:	f200 809f 	bhi.w	80049b4 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8004876:	a201      	add	r2, pc, #4	@ (adr r2, 800487c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8004878:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800487c:	080048b1 	.word	0x080048b1
 8004880:	080049b5 	.word	0x080049b5
 8004884:	080049b5 	.word	0x080049b5
 8004888:	080049b5 	.word	0x080049b5
 800488c:	080048f1 	.word	0x080048f1
 8004890:	080049b5 	.word	0x080049b5
 8004894:	080049b5 	.word	0x080049b5
 8004898:	080049b5 	.word	0x080049b5
 800489c:	08004933 	.word	0x08004933
 80048a0:	080049b5 	.word	0x080049b5
 80048a4:	080049b5 	.word	0x080049b5
 80048a8:	080049b5 	.word	0x080049b5
 80048ac:	08004973 	.word	0x08004973
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80048b0:	68fb      	ldr	r3, [r7, #12]
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	68b9      	ldr	r1, [r7, #8]
 80048b6:	4618      	mov	r0, r3
 80048b8:	f000 fa04 	bl	8004cc4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80048bc:	68fb      	ldr	r3, [r7, #12]
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	699a      	ldr	r2, [r3, #24]
 80048c2:	68fb      	ldr	r3, [r7, #12]
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	f042 0208 	orr.w	r2, r2, #8
 80048ca:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80048cc:	68fb      	ldr	r3, [r7, #12]
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	699a      	ldr	r2, [r3, #24]
 80048d2:	68fb      	ldr	r3, [r7, #12]
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	f022 0204 	bic.w	r2, r2, #4
 80048da:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80048dc:	68fb      	ldr	r3, [r7, #12]
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	6999      	ldr	r1, [r3, #24]
 80048e2:	68bb      	ldr	r3, [r7, #8]
 80048e4:	691a      	ldr	r2, [r3, #16]
 80048e6:	68fb      	ldr	r3, [r7, #12]
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	430a      	orrs	r2, r1
 80048ec:	619a      	str	r2, [r3, #24]
      break;
 80048ee:	e064      	b.n	80049ba <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80048f0:	68fb      	ldr	r3, [r7, #12]
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	68b9      	ldr	r1, [r7, #8]
 80048f6:	4618      	mov	r0, r3
 80048f8:	f000 fa4a 	bl	8004d90 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80048fc:	68fb      	ldr	r3, [r7, #12]
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	699a      	ldr	r2, [r3, #24]
 8004902:	68fb      	ldr	r3, [r7, #12]
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800490a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800490c:	68fb      	ldr	r3, [r7, #12]
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	699a      	ldr	r2, [r3, #24]
 8004912:	68fb      	ldr	r3, [r7, #12]
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800491a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800491c:	68fb      	ldr	r3, [r7, #12]
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	6999      	ldr	r1, [r3, #24]
 8004922:	68bb      	ldr	r3, [r7, #8]
 8004924:	691b      	ldr	r3, [r3, #16]
 8004926:	021a      	lsls	r2, r3, #8
 8004928:	68fb      	ldr	r3, [r7, #12]
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	430a      	orrs	r2, r1
 800492e:	619a      	str	r2, [r3, #24]
      break;
 8004930:	e043      	b.n	80049ba <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004932:	68fb      	ldr	r3, [r7, #12]
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	68b9      	ldr	r1, [r7, #8]
 8004938:	4618      	mov	r0, r3
 800493a:	f000 fa95 	bl	8004e68 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800493e:	68fb      	ldr	r3, [r7, #12]
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	69da      	ldr	r2, [r3, #28]
 8004944:	68fb      	ldr	r3, [r7, #12]
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	f042 0208 	orr.w	r2, r2, #8
 800494c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800494e:	68fb      	ldr	r3, [r7, #12]
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	69da      	ldr	r2, [r3, #28]
 8004954:	68fb      	ldr	r3, [r7, #12]
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	f022 0204 	bic.w	r2, r2, #4
 800495c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800495e:	68fb      	ldr	r3, [r7, #12]
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	69d9      	ldr	r1, [r3, #28]
 8004964:	68bb      	ldr	r3, [r7, #8]
 8004966:	691a      	ldr	r2, [r3, #16]
 8004968:	68fb      	ldr	r3, [r7, #12]
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	430a      	orrs	r2, r1
 800496e:	61da      	str	r2, [r3, #28]
      break;
 8004970:	e023      	b.n	80049ba <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004972:	68fb      	ldr	r3, [r7, #12]
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	68b9      	ldr	r1, [r7, #8]
 8004978:	4618      	mov	r0, r3
 800497a:	f000 fadf 	bl	8004f3c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800497e:	68fb      	ldr	r3, [r7, #12]
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	69da      	ldr	r2, [r3, #28]
 8004984:	68fb      	ldr	r3, [r7, #12]
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800498c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800498e:	68fb      	ldr	r3, [r7, #12]
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	69da      	ldr	r2, [r3, #28]
 8004994:	68fb      	ldr	r3, [r7, #12]
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800499c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800499e:	68fb      	ldr	r3, [r7, #12]
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	69d9      	ldr	r1, [r3, #28]
 80049a4:	68bb      	ldr	r3, [r7, #8]
 80049a6:	691b      	ldr	r3, [r3, #16]
 80049a8:	021a      	lsls	r2, r3, #8
 80049aa:	68fb      	ldr	r3, [r7, #12]
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	430a      	orrs	r2, r1
 80049b0:	61da      	str	r2, [r3, #28]
      break;
 80049b2:	e002      	b.n	80049ba <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 80049b4:	2301      	movs	r3, #1
 80049b6:	75fb      	strb	r3, [r7, #23]
      break;
 80049b8:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80049ba:	68fb      	ldr	r3, [r7, #12]
 80049bc:	2200      	movs	r2, #0
 80049be:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80049c2:	7dfb      	ldrb	r3, [r7, #23]
}
 80049c4:	4618      	mov	r0, r3
 80049c6:	3718      	adds	r7, #24
 80049c8:	46bd      	mov	sp, r7
 80049ca:	bd80      	pop	{r7, pc}

080049cc <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80049cc:	b580      	push	{r7, lr}
 80049ce:	b084      	sub	sp, #16
 80049d0:	af00      	add	r7, sp, #0
 80049d2:	6078      	str	r0, [r7, #4]
 80049d4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80049d6:	2300      	movs	r3, #0
 80049d8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80049e0:	2b01      	cmp	r3, #1
 80049e2:	d101      	bne.n	80049e8 <HAL_TIM_ConfigClockSource+0x1c>
 80049e4:	2302      	movs	r3, #2
 80049e6:	e0b4      	b.n	8004b52 <HAL_TIM_ConfigClockSource+0x186>
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	2201      	movs	r2, #1
 80049ec:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	2202      	movs	r2, #2
 80049f4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	689b      	ldr	r3, [r3, #8]
 80049fe:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004a00:	68bb      	ldr	r3, [r7, #8]
 8004a02:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8004a06:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004a08:	68bb      	ldr	r3, [r7, #8]
 8004a0a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8004a0e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	68ba      	ldr	r2, [r7, #8]
 8004a16:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004a18:	683b      	ldr	r3, [r7, #0]
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004a20:	d03e      	beq.n	8004aa0 <HAL_TIM_ConfigClockSource+0xd4>
 8004a22:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004a26:	f200 8087 	bhi.w	8004b38 <HAL_TIM_ConfigClockSource+0x16c>
 8004a2a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004a2e:	f000 8086 	beq.w	8004b3e <HAL_TIM_ConfigClockSource+0x172>
 8004a32:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004a36:	d87f      	bhi.n	8004b38 <HAL_TIM_ConfigClockSource+0x16c>
 8004a38:	2b70      	cmp	r3, #112	@ 0x70
 8004a3a:	d01a      	beq.n	8004a72 <HAL_TIM_ConfigClockSource+0xa6>
 8004a3c:	2b70      	cmp	r3, #112	@ 0x70
 8004a3e:	d87b      	bhi.n	8004b38 <HAL_TIM_ConfigClockSource+0x16c>
 8004a40:	2b60      	cmp	r3, #96	@ 0x60
 8004a42:	d050      	beq.n	8004ae6 <HAL_TIM_ConfigClockSource+0x11a>
 8004a44:	2b60      	cmp	r3, #96	@ 0x60
 8004a46:	d877      	bhi.n	8004b38 <HAL_TIM_ConfigClockSource+0x16c>
 8004a48:	2b50      	cmp	r3, #80	@ 0x50
 8004a4a:	d03c      	beq.n	8004ac6 <HAL_TIM_ConfigClockSource+0xfa>
 8004a4c:	2b50      	cmp	r3, #80	@ 0x50
 8004a4e:	d873      	bhi.n	8004b38 <HAL_TIM_ConfigClockSource+0x16c>
 8004a50:	2b40      	cmp	r3, #64	@ 0x40
 8004a52:	d058      	beq.n	8004b06 <HAL_TIM_ConfigClockSource+0x13a>
 8004a54:	2b40      	cmp	r3, #64	@ 0x40
 8004a56:	d86f      	bhi.n	8004b38 <HAL_TIM_ConfigClockSource+0x16c>
 8004a58:	2b30      	cmp	r3, #48	@ 0x30
 8004a5a:	d064      	beq.n	8004b26 <HAL_TIM_ConfigClockSource+0x15a>
 8004a5c:	2b30      	cmp	r3, #48	@ 0x30
 8004a5e:	d86b      	bhi.n	8004b38 <HAL_TIM_ConfigClockSource+0x16c>
 8004a60:	2b20      	cmp	r3, #32
 8004a62:	d060      	beq.n	8004b26 <HAL_TIM_ConfigClockSource+0x15a>
 8004a64:	2b20      	cmp	r3, #32
 8004a66:	d867      	bhi.n	8004b38 <HAL_TIM_ConfigClockSource+0x16c>
 8004a68:	2b00      	cmp	r3, #0
 8004a6a:	d05c      	beq.n	8004b26 <HAL_TIM_ConfigClockSource+0x15a>
 8004a6c:	2b10      	cmp	r3, #16
 8004a6e:	d05a      	beq.n	8004b26 <HAL_TIM_ConfigClockSource+0x15a>
 8004a70:	e062      	b.n	8004b38 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004a76:	683b      	ldr	r3, [r7, #0]
 8004a78:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004a7a:	683b      	ldr	r3, [r7, #0]
 8004a7c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004a7e:	683b      	ldr	r3, [r7, #0]
 8004a80:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004a82:	f000 fb25 	bl	80050d0 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	689b      	ldr	r3, [r3, #8]
 8004a8c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004a8e:	68bb      	ldr	r3, [r7, #8]
 8004a90:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8004a94:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	68ba      	ldr	r2, [r7, #8]
 8004a9c:	609a      	str	r2, [r3, #8]
      break;
 8004a9e:	e04f      	b.n	8004b40 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004aa4:	683b      	ldr	r3, [r7, #0]
 8004aa6:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004aa8:	683b      	ldr	r3, [r7, #0]
 8004aaa:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004aac:	683b      	ldr	r3, [r7, #0]
 8004aae:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004ab0:	f000 fb0e 	bl	80050d0 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	689a      	ldr	r2, [r3, #8]
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	681b      	ldr	r3, [r3, #0]
 8004abe:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8004ac2:	609a      	str	r2, [r3, #8]
      break;
 8004ac4:	e03c      	b.n	8004b40 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004aca:	683b      	ldr	r3, [r7, #0]
 8004acc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004ace:	683b      	ldr	r3, [r7, #0]
 8004ad0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004ad2:	461a      	mov	r2, r3
 8004ad4:	f000 fa82 	bl	8004fdc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	2150      	movs	r1, #80	@ 0x50
 8004ade:	4618      	mov	r0, r3
 8004ae0:	f000 fadb 	bl	800509a <TIM_ITRx_SetConfig>
      break;
 8004ae4:	e02c      	b.n	8004b40 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004aea:	683b      	ldr	r3, [r7, #0]
 8004aec:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004aee:	683b      	ldr	r3, [r7, #0]
 8004af0:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004af2:	461a      	mov	r2, r3
 8004af4:	f000 faa1 	bl	800503a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	2160      	movs	r1, #96	@ 0x60
 8004afe:	4618      	mov	r0, r3
 8004b00:	f000 facb 	bl	800509a <TIM_ITRx_SetConfig>
      break;
 8004b04:	e01c      	b.n	8004b40 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004b0a:	683b      	ldr	r3, [r7, #0]
 8004b0c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004b0e:	683b      	ldr	r3, [r7, #0]
 8004b10:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004b12:	461a      	mov	r2, r3
 8004b14:	f000 fa62 	bl	8004fdc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	2140      	movs	r1, #64	@ 0x40
 8004b1e:	4618      	mov	r0, r3
 8004b20:	f000 fabb 	bl	800509a <TIM_ITRx_SetConfig>
      break;
 8004b24:	e00c      	b.n	8004b40 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	681a      	ldr	r2, [r3, #0]
 8004b2a:	683b      	ldr	r3, [r7, #0]
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	4619      	mov	r1, r3
 8004b30:	4610      	mov	r0, r2
 8004b32:	f000 fab2 	bl	800509a <TIM_ITRx_SetConfig>
      break;
 8004b36:	e003      	b.n	8004b40 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8004b38:	2301      	movs	r3, #1
 8004b3a:	73fb      	strb	r3, [r7, #15]
      break;
 8004b3c:	e000      	b.n	8004b40 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8004b3e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	2201      	movs	r2, #1
 8004b44:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	2200      	movs	r2, #0
 8004b4c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8004b50:	7bfb      	ldrb	r3, [r7, #15]
}
 8004b52:	4618      	mov	r0, r3
 8004b54:	3710      	adds	r7, #16
 8004b56:	46bd      	mov	sp, r7
 8004b58:	bd80      	pop	{r7, pc}

08004b5a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004b5a:	b480      	push	{r7}
 8004b5c:	b083      	sub	sp, #12
 8004b5e:	af00      	add	r7, sp, #0
 8004b60:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004b62:	bf00      	nop
 8004b64:	370c      	adds	r7, #12
 8004b66:	46bd      	mov	sp, r7
 8004b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b6c:	4770      	bx	lr

08004b6e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004b6e:	b480      	push	{r7}
 8004b70:	b083      	sub	sp, #12
 8004b72:	af00      	add	r7, sp, #0
 8004b74:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004b76:	bf00      	nop
 8004b78:	370c      	adds	r7, #12
 8004b7a:	46bd      	mov	sp, r7
 8004b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b80:	4770      	bx	lr

08004b82 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004b82:	b480      	push	{r7}
 8004b84:	b083      	sub	sp, #12
 8004b86:	af00      	add	r7, sp, #0
 8004b88:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004b8a:	bf00      	nop
 8004b8c:	370c      	adds	r7, #12
 8004b8e:	46bd      	mov	sp, r7
 8004b90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b94:	4770      	bx	lr

08004b96 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004b96:	b480      	push	{r7}
 8004b98:	b083      	sub	sp, #12
 8004b9a:	af00      	add	r7, sp, #0
 8004b9c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004b9e:	bf00      	nop
 8004ba0:	370c      	adds	r7, #12
 8004ba2:	46bd      	mov	sp, r7
 8004ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ba8:	4770      	bx	lr
	...

08004bac <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004bac:	b480      	push	{r7}
 8004bae:	b085      	sub	sp, #20
 8004bb0:	af00      	add	r7, sp, #0
 8004bb2:	6078      	str	r0, [r7, #4]
 8004bb4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	4a3a      	ldr	r2, [pc, #232]	@ (8004ca8 <TIM_Base_SetConfig+0xfc>)
 8004bc0:	4293      	cmp	r3, r2
 8004bc2:	d00f      	beq.n	8004be4 <TIM_Base_SetConfig+0x38>
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004bca:	d00b      	beq.n	8004be4 <TIM_Base_SetConfig+0x38>
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	4a37      	ldr	r2, [pc, #220]	@ (8004cac <TIM_Base_SetConfig+0x100>)
 8004bd0:	4293      	cmp	r3, r2
 8004bd2:	d007      	beq.n	8004be4 <TIM_Base_SetConfig+0x38>
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	4a36      	ldr	r2, [pc, #216]	@ (8004cb0 <TIM_Base_SetConfig+0x104>)
 8004bd8:	4293      	cmp	r3, r2
 8004bda:	d003      	beq.n	8004be4 <TIM_Base_SetConfig+0x38>
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	4a35      	ldr	r2, [pc, #212]	@ (8004cb4 <TIM_Base_SetConfig+0x108>)
 8004be0:	4293      	cmp	r3, r2
 8004be2:	d108      	bne.n	8004bf6 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004be4:	68fb      	ldr	r3, [r7, #12]
 8004be6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004bea:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004bec:	683b      	ldr	r3, [r7, #0]
 8004bee:	685b      	ldr	r3, [r3, #4]
 8004bf0:	68fa      	ldr	r2, [r7, #12]
 8004bf2:	4313      	orrs	r3, r2
 8004bf4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	4a2b      	ldr	r2, [pc, #172]	@ (8004ca8 <TIM_Base_SetConfig+0xfc>)
 8004bfa:	4293      	cmp	r3, r2
 8004bfc:	d01b      	beq.n	8004c36 <TIM_Base_SetConfig+0x8a>
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004c04:	d017      	beq.n	8004c36 <TIM_Base_SetConfig+0x8a>
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	4a28      	ldr	r2, [pc, #160]	@ (8004cac <TIM_Base_SetConfig+0x100>)
 8004c0a:	4293      	cmp	r3, r2
 8004c0c:	d013      	beq.n	8004c36 <TIM_Base_SetConfig+0x8a>
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	4a27      	ldr	r2, [pc, #156]	@ (8004cb0 <TIM_Base_SetConfig+0x104>)
 8004c12:	4293      	cmp	r3, r2
 8004c14:	d00f      	beq.n	8004c36 <TIM_Base_SetConfig+0x8a>
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	4a26      	ldr	r2, [pc, #152]	@ (8004cb4 <TIM_Base_SetConfig+0x108>)
 8004c1a:	4293      	cmp	r3, r2
 8004c1c:	d00b      	beq.n	8004c36 <TIM_Base_SetConfig+0x8a>
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	4a25      	ldr	r2, [pc, #148]	@ (8004cb8 <TIM_Base_SetConfig+0x10c>)
 8004c22:	4293      	cmp	r3, r2
 8004c24:	d007      	beq.n	8004c36 <TIM_Base_SetConfig+0x8a>
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	4a24      	ldr	r2, [pc, #144]	@ (8004cbc <TIM_Base_SetConfig+0x110>)
 8004c2a:	4293      	cmp	r3, r2
 8004c2c:	d003      	beq.n	8004c36 <TIM_Base_SetConfig+0x8a>
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	4a23      	ldr	r2, [pc, #140]	@ (8004cc0 <TIM_Base_SetConfig+0x114>)
 8004c32:	4293      	cmp	r3, r2
 8004c34:	d108      	bne.n	8004c48 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004c36:	68fb      	ldr	r3, [r7, #12]
 8004c38:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004c3c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004c3e:	683b      	ldr	r3, [r7, #0]
 8004c40:	68db      	ldr	r3, [r3, #12]
 8004c42:	68fa      	ldr	r2, [r7, #12]
 8004c44:	4313      	orrs	r3, r2
 8004c46:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004c48:	68fb      	ldr	r3, [r7, #12]
 8004c4a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8004c4e:	683b      	ldr	r3, [r7, #0]
 8004c50:	695b      	ldr	r3, [r3, #20]
 8004c52:	4313      	orrs	r3, r2
 8004c54:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	68fa      	ldr	r2, [r7, #12]
 8004c5a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004c5c:	683b      	ldr	r3, [r7, #0]
 8004c5e:	689a      	ldr	r2, [r3, #8]
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004c64:	683b      	ldr	r3, [r7, #0]
 8004c66:	681a      	ldr	r2, [r3, #0]
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	4a0e      	ldr	r2, [pc, #56]	@ (8004ca8 <TIM_Base_SetConfig+0xfc>)
 8004c70:	4293      	cmp	r3, r2
 8004c72:	d103      	bne.n	8004c7c <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004c74:	683b      	ldr	r3, [r7, #0]
 8004c76:	691a      	ldr	r2, [r3, #16]
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	2201      	movs	r2, #1
 8004c80:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	691b      	ldr	r3, [r3, #16]
 8004c86:	f003 0301 	and.w	r3, r3, #1
 8004c8a:	2b01      	cmp	r3, #1
 8004c8c:	d105      	bne.n	8004c9a <TIM_Base_SetConfig+0xee>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	691b      	ldr	r3, [r3, #16]
 8004c92:	f023 0201 	bic.w	r2, r3, #1
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	611a      	str	r2, [r3, #16]
  }
}
 8004c9a:	bf00      	nop
 8004c9c:	3714      	adds	r7, #20
 8004c9e:	46bd      	mov	sp, r7
 8004ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ca4:	4770      	bx	lr
 8004ca6:	bf00      	nop
 8004ca8:	40010000 	.word	0x40010000
 8004cac:	40000400 	.word	0x40000400
 8004cb0:	40000800 	.word	0x40000800
 8004cb4:	40000c00 	.word	0x40000c00
 8004cb8:	40014000 	.word	0x40014000
 8004cbc:	40014400 	.word	0x40014400
 8004cc0:	40014800 	.word	0x40014800

08004cc4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004cc4:	b480      	push	{r7}
 8004cc6:	b087      	sub	sp, #28
 8004cc8:	af00      	add	r7, sp, #0
 8004cca:	6078      	str	r0, [r7, #4]
 8004ccc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	6a1b      	ldr	r3, [r3, #32]
 8004cd2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	6a1b      	ldr	r3, [r3, #32]
 8004cd8:	f023 0201 	bic.w	r2, r3, #1
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	685b      	ldr	r3, [r3, #4]
 8004ce4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	699b      	ldr	r3, [r3, #24]
 8004cea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004cec:	68fb      	ldr	r3, [r7, #12]
 8004cee:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004cf2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004cf4:	68fb      	ldr	r3, [r7, #12]
 8004cf6:	f023 0303 	bic.w	r3, r3, #3
 8004cfa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004cfc:	683b      	ldr	r3, [r7, #0]
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	68fa      	ldr	r2, [r7, #12]
 8004d02:	4313      	orrs	r3, r2
 8004d04:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004d06:	697b      	ldr	r3, [r7, #20]
 8004d08:	f023 0302 	bic.w	r3, r3, #2
 8004d0c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004d0e:	683b      	ldr	r3, [r7, #0]
 8004d10:	689b      	ldr	r3, [r3, #8]
 8004d12:	697a      	ldr	r2, [r7, #20]
 8004d14:	4313      	orrs	r3, r2
 8004d16:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	4a1c      	ldr	r2, [pc, #112]	@ (8004d8c <TIM_OC1_SetConfig+0xc8>)
 8004d1c:	4293      	cmp	r3, r2
 8004d1e:	d10c      	bne.n	8004d3a <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004d20:	697b      	ldr	r3, [r7, #20]
 8004d22:	f023 0308 	bic.w	r3, r3, #8
 8004d26:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004d28:	683b      	ldr	r3, [r7, #0]
 8004d2a:	68db      	ldr	r3, [r3, #12]
 8004d2c:	697a      	ldr	r2, [r7, #20]
 8004d2e:	4313      	orrs	r3, r2
 8004d30:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004d32:	697b      	ldr	r3, [r7, #20]
 8004d34:	f023 0304 	bic.w	r3, r3, #4
 8004d38:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	4a13      	ldr	r2, [pc, #76]	@ (8004d8c <TIM_OC1_SetConfig+0xc8>)
 8004d3e:	4293      	cmp	r3, r2
 8004d40:	d111      	bne.n	8004d66 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004d42:	693b      	ldr	r3, [r7, #16]
 8004d44:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004d48:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004d4a:	693b      	ldr	r3, [r7, #16]
 8004d4c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8004d50:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004d52:	683b      	ldr	r3, [r7, #0]
 8004d54:	695b      	ldr	r3, [r3, #20]
 8004d56:	693a      	ldr	r2, [r7, #16]
 8004d58:	4313      	orrs	r3, r2
 8004d5a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004d5c:	683b      	ldr	r3, [r7, #0]
 8004d5e:	699b      	ldr	r3, [r3, #24]
 8004d60:	693a      	ldr	r2, [r7, #16]
 8004d62:	4313      	orrs	r3, r2
 8004d64:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	693a      	ldr	r2, [r7, #16]
 8004d6a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	68fa      	ldr	r2, [r7, #12]
 8004d70:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004d72:	683b      	ldr	r3, [r7, #0]
 8004d74:	685a      	ldr	r2, [r3, #4]
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	697a      	ldr	r2, [r7, #20]
 8004d7e:	621a      	str	r2, [r3, #32]
}
 8004d80:	bf00      	nop
 8004d82:	371c      	adds	r7, #28
 8004d84:	46bd      	mov	sp, r7
 8004d86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d8a:	4770      	bx	lr
 8004d8c:	40010000 	.word	0x40010000

08004d90 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004d90:	b480      	push	{r7}
 8004d92:	b087      	sub	sp, #28
 8004d94:	af00      	add	r7, sp, #0
 8004d96:	6078      	str	r0, [r7, #4]
 8004d98:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	6a1b      	ldr	r3, [r3, #32]
 8004d9e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	6a1b      	ldr	r3, [r3, #32]
 8004da4:	f023 0210 	bic.w	r2, r3, #16
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	685b      	ldr	r3, [r3, #4]
 8004db0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	699b      	ldr	r3, [r3, #24]
 8004db6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004db8:	68fb      	ldr	r3, [r7, #12]
 8004dba:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004dbe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004dc0:	68fb      	ldr	r3, [r7, #12]
 8004dc2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004dc6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004dc8:	683b      	ldr	r3, [r7, #0]
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	021b      	lsls	r3, r3, #8
 8004dce:	68fa      	ldr	r2, [r7, #12]
 8004dd0:	4313      	orrs	r3, r2
 8004dd2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004dd4:	697b      	ldr	r3, [r7, #20]
 8004dd6:	f023 0320 	bic.w	r3, r3, #32
 8004dda:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004ddc:	683b      	ldr	r3, [r7, #0]
 8004dde:	689b      	ldr	r3, [r3, #8]
 8004de0:	011b      	lsls	r3, r3, #4
 8004de2:	697a      	ldr	r2, [r7, #20]
 8004de4:	4313      	orrs	r3, r2
 8004de6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	4a1e      	ldr	r2, [pc, #120]	@ (8004e64 <TIM_OC2_SetConfig+0xd4>)
 8004dec:	4293      	cmp	r3, r2
 8004dee:	d10d      	bne.n	8004e0c <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004df0:	697b      	ldr	r3, [r7, #20]
 8004df2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004df6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004df8:	683b      	ldr	r3, [r7, #0]
 8004dfa:	68db      	ldr	r3, [r3, #12]
 8004dfc:	011b      	lsls	r3, r3, #4
 8004dfe:	697a      	ldr	r2, [r7, #20]
 8004e00:	4313      	orrs	r3, r2
 8004e02:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004e04:	697b      	ldr	r3, [r7, #20]
 8004e06:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004e0a:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	4a15      	ldr	r2, [pc, #84]	@ (8004e64 <TIM_OC2_SetConfig+0xd4>)
 8004e10:	4293      	cmp	r3, r2
 8004e12:	d113      	bne.n	8004e3c <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004e14:	693b      	ldr	r3, [r7, #16]
 8004e16:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8004e1a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004e1c:	693b      	ldr	r3, [r7, #16]
 8004e1e:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8004e22:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004e24:	683b      	ldr	r3, [r7, #0]
 8004e26:	695b      	ldr	r3, [r3, #20]
 8004e28:	009b      	lsls	r3, r3, #2
 8004e2a:	693a      	ldr	r2, [r7, #16]
 8004e2c:	4313      	orrs	r3, r2
 8004e2e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004e30:	683b      	ldr	r3, [r7, #0]
 8004e32:	699b      	ldr	r3, [r3, #24]
 8004e34:	009b      	lsls	r3, r3, #2
 8004e36:	693a      	ldr	r2, [r7, #16]
 8004e38:	4313      	orrs	r3, r2
 8004e3a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	693a      	ldr	r2, [r7, #16]
 8004e40:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	68fa      	ldr	r2, [r7, #12]
 8004e46:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004e48:	683b      	ldr	r3, [r7, #0]
 8004e4a:	685a      	ldr	r2, [r3, #4]
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	697a      	ldr	r2, [r7, #20]
 8004e54:	621a      	str	r2, [r3, #32]
}
 8004e56:	bf00      	nop
 8004e58:	371c      	adds	r7, #28
 8004e5a:	46bd      	mov	sp, r7
 8004e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e60:	4770      	bx	lr
 8004e62:	bf00      	nop
 8004e64:	40010000 	.word	0x40010000

08004e68 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004e68:	b480      	push	{r7}
 8004e6a:	b087      	sub	sp, #28
 8004e6c:	af00      	add	r7, sp, #0
 8004e6e:	6078      	str	r0, [r7, #4]
 8004e70:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	6a1b      	ldr	r3, [r3, #32]
 8004e76:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	6a1b      	ldr	r3, [r3, #32]
 8004e7c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	685b      	ldr	r3, [r3, #4]
 8004e88:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	69db      	ldr	r3, [r3, #28]
 8004e8e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004e90:	68fb      	ldr	r3, [r7, #12]
 8004e92:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004e96:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004e98:	68fb      	ldr	r3, [r7, #12]
 8004e9a:	f023 0303 	bic.w	r3, r3, #3
 8004e9e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004ea0:	683b      	ldr	r3, [r7, #0]
 8004ea2:	681b      	ldr	r3, [r3, #0]
 8004ea4:	68fa      	ldr	r2, [r7, #12]
 8004ea6:	4313      	orrs	r3, r2
 8004ea8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004eaa:	697b      	ldr	r3, [r7, #20]
 8004eac:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8004eb0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004eb2:	683b      	ldr	r3, [r7, #0]
 8004eb4:	689b      	ldr	r3, [r3, #8]
 8004eb6:	021b      	lsls	r3, r3, #8
 8004eb8:	697a      	ldr	r2, [r7, #20]
 8004eba:	4313      	orrs	r3, r2
 8004ebc:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	4a1d      	ldr	r2, [pc, #116]	@ (8004f38 <TIM_OC3_SetConfig+0xd0>)
 8004ec2:	4293      	cmp	r3, r2
 8004ec4:	d10d      	bne.n	8004ee2 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004ec6:	697b      	ldr	r3, [r7, #20]
 8004ec8:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8004ecc:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004ece:	683b      	ldr	r3, [r7, #0]
 8004ed0:	68db      	ldr	r3, [r3, #12]
 8004ed2:	021b      	lsls	r3, r3, #8
 8004ed4:	697a      	ldr	r2, [r7, #20]
 8004ed6:	4313      	orrs	r3, r2
 8004ed8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004eda:	697b      	ldr	r3, [r7, #20]
 8004edc:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8004ee0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	4a14      	ldr	r2, [pc, #80]	@ (8004f38 <TIM_OC3_SetConfig+0xd0>)
 8004ee6:	4293      	cmp	r3, r2
 8004ee8:	d113      	bne.n	8004f12 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004eea:	693b      	ldr	r3, [r7, #16]
 8004eec:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8004ef0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004ef2:	693b      	ldr	r3, [r7, #16]
 8004ef4:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8004ef8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004efa:	683b      	ldr	r3, [r7, #0]
 8004efc:	695b      	ldr	r3, [r3, #20]
 8004efe:	011b      	lsls	r3, r3, #4
 8004f00:	693a      	ldr	r2, [r7, #16]
 8004f02:	4313      	orrs	r3, r2
 8004f04:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004f06:	683b      	ldr	r3, [r7, #0]
 8004f08:	699b      	ldr	r3, [r3, #24]
 8004f0a:	011b      	lsls	r3, r3, #4
 8004f0c:	693a      	ldr	r2, [r7, #16]
 8004f0e:	4313      	orrs	r3, r2
 8004f10:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	693a      	ldr	r2, [r7, #16]
 8004f16:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	68fa      	ldr	r2, [r7, #12]
 8004f1c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004f1e:	683b      	ldr	r3, [r7, #0]
 8004f20:	685a      	ldr	r2, [r3, #4]
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	697a      	ldr	r2, [r7, #20]
 8004f2a:	621a      	str	r2, [r3, #32]
}
 8004f2c:	bf00      	nop
 8004f2e:	371c      	adds	r7, #28
 8004f30:	46bd      	mov	sp, r7
 8004f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f36:	4770      	bx	lr
 8004f38:	40010000 	.word	0x40010000

08004f3c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004f3c:	b480      	push	{r7}
 8004f3e:	b087      	sub	sp, #28
 8004f40:	af00      	add	r7, sp, #0
 8004f42:	6078      	str	r0, [r7, #4]
 8004f44:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	6a1b      	ldr	r3, [r3, #32]
 8004f4a:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	6a1b      	ldr	r3, [r3, #32]
 8004f50:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	685b      	ldr	r3, [r3, #4]
 8004f5c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	69db      	ldr	r3, [r3, #28]
 8004f62:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004f64:	68fb      	ldr	r3, [r7, #12]
 8004f66:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004f6a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004f6c:	68fb      	ldr	r3, [r7, #12]
 8004f6e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004f72:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004f74:	683b      	ldr	r3, [r7, #0]
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	021b      	lsls	r3, r3, #8
 8004f7a:	68fa      	ldr	r2, [r7, #12]
 8004f7c:	4313      	orrs	r3, r2
 8004f7e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004f80:	693b      	ldr	r3, [r7, #16]
 8004f82:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8004f86:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004f88:	683b      	ldr	r3, [r7, #0]
 8004f8a:	689b      	ldr	r3, [r3, #8]
 8004f8c:	031b      	lsls	r3, r3, #12
 8004f8e:	693a      	ldr	r2, [r7, #16]
 8004f90:	4313      	orrs	r3, r2
 8004f92:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	4a10      	ldr	r2, [pc, #64]	@ (8004fd8 <TIM_OC4_SetConfig+0x9c>)
 8004f98:	4293      	cmp	r3, r2
 8004f9a:	d109      	bne.n	8004fb0 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004f9c:	697b      	ldr	r3, [r7, #20]
 8004f9e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8004fa2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004fa4:	683b      	ldr	r3, [r7, #0]
 8004fa6:	695b      	ldr	r3, [r3, #20]
 8004fa8:	019b      	lsls	r3, r3, #6
 8004faa:	697a      	ldr	r2, [r7, #20]
 8004fac:	4313      	orrs	r3, r2
 8004fae:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	697a      	ldr	r2, [r7, #20]
 8004fb4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	68fa      	ldr	r2, [r7, #12]
 8004fba:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004fbc:	683b      	ldr	r3, [r7, #0]
 8004fbe:	685a      	ldr	r2, [r3, #4]
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	693a      	ldr	r2, [r7, #16]
 8004fc8:	621a      	str	r2, [r3, #32]
}
 8004fca:	bf00      	nop
 8004fcc:	371c      	adds	r7, #28
 8004fce:	46bd      	mov	sp, r7
 8004fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fd4:	4770      	bx	lr
 8004fd6:	bf00      	nop
 8004fd8:	40010000 	.word	0x40010000

08004fdc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004fdc:	b480      	push	{r7}
 8004fde:	b087      	sub	sp, #28
 8004fe0:	af00      	add	r7, sp, #0
 8004fe2:	60f8      	str	r0, [r7, #12]
 8004fe4:	60b9      	str	r1, [r7, #8]
 8004fe6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004fe8:	68fb      	ldr	r3, [r7, #12]
 8004fea:	6a1b      	ldr	r3, [r3, #32]
 8004fec:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004fee:	68fb      	ldr	r3, [r7, #12]
 8004ff0:	6a1b      	ldr	r3, [r3, #32]
 8004ff2:	f023 0201 	bic.w	r2, r3, #1
 8004ff6:	68fb      	ldr	r3, [r7, #12]
 8004ff8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004ffa:	68fb      	ldr	r3, [r7, #12]
 8004ffc:	699b      	ldr	r3, [r3, #24]
 8004ffe:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005000:	693b      	ldr	r3, [r7, #16]
 8005002:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005006:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	011b      	lsls	r3, r3, #4
 800500c:	693a      	ldr	r2, [r7, #16]
 800500e:	4313      	orrs	r3, r2
 8005010:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005012:	697b      	ldr	r3, [r7, #20]
 8005014:	f023 030a 	bic.w	r3, r3, #10
 8005018:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800501a:	697a      	ldr	r2, [r7, #20]
 800501c:	68bb      	ldr	r3, [r7, #8]
 800501e:	4313      	orrs	r3, r2
 8005020:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005022:	68fb      	ldr	r3, [r7, #12]
 8005024:	693a      	ldr	r2, [r7, #16]
 8005026:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005028:	68fb      	ldr	r3, [r7, #12]
 800502a:	697a      	ldr	r2, [r7, #20]
 800502c:	621a      	str	r2, [r3, #32]
}
 800502e:	bf00      	nop
 8005030:	371c      	adds	r7, #28
 8005032:	46bd      	mov	sp, r7
 8005034:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005038:	4770      	bx	lr

0800503a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800503a:	b480      	push	{r7}
 800503c:	b087      	sub	sp, #28
 800503e:	af00      	add	r7, sp, #0
 8005040:	60f8      	str	r0, [r7, #12]
 8005042:	60b9      	str	r1, [r7, #8]
 8005044:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8005046:	68fb      	ldr	r3, [r7, #12]
 8005048:	6a1b      	ldr	r3, [r3, #32]
 800504a:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800504c:	68fb      	ldr	r3, [r7, #12]
 800504e:	6a1b      	ldr	r3, [r3, #32]
 8005050:	f023 0210 	bic.w	r2, r3, #16
 8005054:	68fb      	ldr	r3, [r7, #12]
 8005056:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005058:	68fb      	ldr	r3, [r7, #12]
 800505a:	699b      	ldr	r3, [r3, #24]
 800505c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800505e:	693b      	ldr	r3, [r7, #16]
 8005060:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8005064:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	031b      	lsls	r3, r3, #12
 800506a:	693a      	ldr	r2, [r7, #16]
 800506c:	4313      	orrs	r3, r2
 800506e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005070:	697b      	ldr	r3, [r7, #20]
 8005072:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8005076:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005078:	68bb      	ldr	r3, [r7, #8]
 800507a:	011b      	lsls	r3, r3, #4
 800507c:	697a      	ldr	r2, [r7, #20]
 800507e:	4313      	orrs	r3, r2
 8005080:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005082:	68fb      	ldr	r3, [r7, #12]
 8005084:	693a      	ldr	r2, [r7, #16]
 8005086:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005088:	68fb      	ldr	r3, [r7, #12]
 800508a:	697a      	ldr	r2, [r7, #20]
 800508c:	621a      	str	r2, [r3, #32]
}
 800508e:	bf00      	nop
 8005090:	371c      	adds	r7, #28
 8005092:	46bd      	mov	sp, r7
 8005094:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005098:	4770      	bx	lr

0800509a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800509a:	b480      	push	{r7}
 800509c:	b085      	sub	sp, #20
 800509e:	af00      	add	r7, sp, #0
 80050a0:	6078      	str	r0, [r7, #4]
 80050a2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	689b      	ldr	r3, [r3, #8]
 80050a8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80050aa:	68fb      	ldr	r3, [r7, #12]
 80050ac:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80050b0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80050b2:	683a      	ldr	r2, [r7, #0]
 80050b4:	68fb      	ldr	r3, [r7, #12]
 80050b6:	4313      	orrs	r3, r2
 80050b8:	f043 0307 	orr.w	r3, r3, #7
 80050bc:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	68fa      	ldr	r2, [r7, #12]
 80050c2:	609a      	str	r2, [r3, #8]
}
 80050c4:	bf00      	nop
 80050c6:	3714      	adds	r7, #20
 80050c8:	46bd      	mov	sp, r7
 80050ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050ce:	4770      	bx	lr

080050d0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80050d0:	b480      	push	{r7}
 80050d2:	b087      	sub	sp, #28
 80050d4:	af00      	add	r7, sp, #0
 80050d6:	60f8      	str	r0, [r7, #12]
 80050d8:	60b9      	str	r1, [r7, #8]
 80050da:	607a      	str	r2, [r7, #4]
 80050dc:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80050de:	68fb      	ldr	r3, [r7, #12]
 80050e0:	689b      	ldr	r3, [r3, #8]
 80050e2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80050e4:	697b      	ldr	r3, [r7, #20]
 80050e6:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80050ea:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80050ec:	683b      	ldr	r3, [r7, #0]
 80050ee:	021a      	lsls	r2, r3, #8
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	431a      	orrs	r2, r3
 80050f4:	68bb      	ldr	r3, [r7, #8]
 80050f6:	4313      	orrs	r3, r2
 80050f8:	697a      	ldr	r2, [r7, #20]
 80050fa:	4313      	orrs	r3, r2
 80050fc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80050fe:	68fb      	ldr	r3, [r7, #12]
 8005100:	697a      	ldr	r2, [r7, #20]
 8005102:	609a      	str	r2, [r3, #8]
}
 8005104:	bf00      	nop
 8005106:	371c      	adds	r7, #28
 8005108:	46bd      	mov	sp, r7
 800510a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800510e:	4770      	bx	lr

08005110 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005110:	b480      	push	{r7}
 8005112:	b087      	sub	sp, #28
 8005114:	af00      	add	r7, sp, #0
 8005116:	60f8      	str	r0, [r7, #12]
 8005118:	60b9      	str	r1, [r7, #8]
 800511a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800511c:	68bb      	ldr	r3, [r7, #8]
 800511e:	f003 031f 	and.w	r3, r3, #31
 8005122:	2201      	movs	r2, #1
 8005124:	fa02 f303 	lsl.w	r3, r2, r3
 8005128:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800512a:	68fb      	ldr	r3, [r7, #12]
 800512c:	6a1a      	ldr	r2, [r3, #32]
 800512e:	697b      	ldr	r3, [r7, #20]
 8005130:	43db      	mvns	r3, r3
 8005132:	401a      	ands	r2, r3
 8005134:	68fb      	ldr	r3, [r7, #12]
 8005136:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005138:	68fb      	ldr	r3, [r7, #12]
 800513a:	6a1a      	ldr	r2, [r3, #32]
 800513c:	68bb      	ldr	r3, [r7, #8]
 800513e:	f003 031f 	and.w	r3, r3, #31
 8005142:	6879      	ldr	r1, [r7, #4]
 8005144:	fa01 f303 	lsl.w	r3, r1, r3
 8005148:	431a      	orrs	r2, r3
 800514a:	68fb      	ldr	r3, [r7, #12]
 800514c:	621a      	str	r2, [r3, #32]
}
 800514e:	bf00      	nop
 8005150:	371c      	adds	r7, #28
 8005152:	46bd      	mov	sp, r7
 8005154:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005158:	4770      	bx	lr
	...

0800515c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800515c:	b480      	push	{r7}
 800515e:	b085      	sub	sp, #20
 8005160:	af00      	add	r7, sp, #0
 8005162:	6078      	str	r0, [r7, #4]
 8005164:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800516c:	2b01      	cmp	r3, #1
 800516e:	d101      	bne.n	8005174 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005170:	2302      	movs	r3, #2
 8005172:	e050      	b.n	8005216 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	2201      	movs	r2, #1
 8005178:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	2202      	movs	r2, #2
 8005180:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	685b      	ldr	r3, [r3, #4]
 800518a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	689b      	ldr	r3, [r3, #8]
 8005192:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005194:	68fb      	ldr	r3, [r7, #12]
 8005196:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800519a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800519c:	683b      	ldr	r3, [r7, #0]
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	68fa      	ldr	r2, [r7, #12]
 80051a2:	4313      	orrs	r3, r2
 80051a4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	681b      	ldr	r3, [r3, #0]
 80051aa:	68fa      	ldr	r2, [r7, #12]
 80051ac:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	681b      	ldr	r3, [r3, #0]
 80051b2:	4a1c      	ldr	r2, [pc, #112]	@ (8005224 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 80051b4:	4293      	cmp	r3, r2
 80051b6:	d018      	beq.n	80051ea <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80051c0:	d013      	beq.n	80051ea <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	681b      	ldr	r3, [r3, #0]
 80051c6:	4a18      	ldr	r2, [pc, #96]	@ (8005228 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 80051c8:	4293      	cmp	r3, r2
 80051ca:	d00e      	beq.n	80051ea <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	4a16      	ldr	r2, [pc, #88]	@ (800522c <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 80051d2:	4293      	cmp	r3, r2
 80051d4:	d009      	beq.n	80051ea <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	681b      	ldr	r3, [r3, #0]
 80051da:	4a15      	ldr	r2, [pc, #84]	@ (8005230 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 80051dc:	4293      	cmp	r3, r2
 80051de:	d004      	beq.n	80051ea <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	681b      	ldr	r3, [r3, #0]
 80051e4:	4a13      	ldr	r2, [pc, #76]	@ (8005234 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 80051e6:	4293      	cmp	r3, r2
 80051e8:	d10c      	bne.n	8005204 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80051ea:	68bb      	ldr	r3, [r7, #8]
 80051ec:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80051f0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80051f2:	683b      	ldr	r3, [r7, #0]
 80051f4:	685b      	ldr	r3, [r3, #4]
 80051f6:	68ba      	ldr	r2, [r7, #8]
 80051f8:	4313      	orrs	r3, r2
 80051fa:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	68ba      	ldr	r2, [r7, #8]
 8005202:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	2201      	movs	r2, #1
 8005208:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	2200      	movs	r2, #0
 8005210:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8005214:	2300      	movs	r3, #0
}
 8005216:	4618      	mov	r0, r3
 8005218:	3714      	adds	r7, #20
 800521a:	46bd      	mov	sp, r7
 800521c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005220:	4770      	bx	lr
 8005222:	bf00      	nop
 8005224:	40010000 	.word	0x40010000
 8005228:	40000400 	.word	0x40000400
 800522c:	40000800 	.word	0x40000800
 8005230:	40000c00 	.word	0x40000c00
 8005234:	40014000 	.word	0x40014000

08005238 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005238:	b480      	push	{r7}
 800523a:	b083      	sub	sp, #12
 800523c:	af00      	add	r7, sp, #0
 800523e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005240:	bf00      	nop
 8005242:	370c      	adds	r7, #12
 8005244:	46bd      	mov	sp, r7
 8005246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800524a:	4770      	bx	lr

0800524c <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800524c:	b480      	push	{r7}
 800524e:	b083      	sub	sp, #12
 8005250:	af00      	add	r7, sp, #0
 8005252:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005254:	bf00      	nop
 8005256:	370c      	adds	r7, #12
 8005258:	46bd      	mov	sp, r7
 800525a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800525e:	4770      	bx	lr

08005260 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005260:	b580      	push	{r7, lr}
 8005262:	b082      	sub	sp, #8
 8005264:	af00      	add	r7, sp, #0
 8005266:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	2b00      	cmp	r3, #0
 800526c:	d101      	bne.n	8005272 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800526e:	2301      	movs	r3, #1
 8005270:	e042      	b.n	80052f8 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005278:	b2db      	uxtb	r3, r3
 800527a:	2b00      	cmp	r3, #0
 800527c:	d106      	bne.n	800528c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	2200      	movs	r2, #0
 8005282:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005286:	6878      	ldr	r0, [r7, #4]
 8005288:	f7fd f92c 	bl	80024e4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	2224      	movs	r2, #36	@ 0x24
 8005290:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	68da      	ldr	r2, [r3, #12]
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	681b      	ldr	r3, [r3, #0]
 800529e:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80052a2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80052a4:	6878      	ldr	r0, [r7, #4]
 80052a6:	f000 ffc9 	bl	800623c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	681b      	ldr	r3, [r3, #0]
 80052ae:	691a      	ldr	r2, [r3, #16]
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	681b      	ldr	r3, [r3, #0]
 80052b4:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80052b8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	681b      	ldr	r3, [r3, #0]
 80052be:	695a      	ldr	r2, [r3, #20]
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	681b      	ldr	r3, [r3, #0]
 80052c4:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80052c8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	681b      	ldr	r3, [r3, #0]
 80052ce:	68da      	ldr	r2, [r3, #12]
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80052d8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	2200      	movs	r2, #0
 80052de:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	2220      	movs	r2, #32
 80052e4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	2220      	movs	r2, #32
 80052ec:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	2200      	movs	r2, #0
 80052f4:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 80052f6:	2300      	movs	r3, #0
}
 80052f8:	4618      	mov	r0, r3
 80052fa:	3708      	adds	r7, #8
 80052fc:	46bd      	mov	sp, r7
 80052fe:	bd80      	pop	{r7, pc}

08005300 <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8005300:	b580      	push	{r7, lr}
 8005302:	b08c      	sub	sp, #48	@ 0x30
 8005304:	af00      	add	r7, sp, #0
 8005306:	60f8      	str	r0, [r7, #12]
 8005308:	60b9      	str	r1, [r7, #8]
 800530a:	4613      	mov	r3, r2
 800530c:	80fb      	strh	r3, [r7, #6]
  const uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800530e:	68fb      	ldr	r3, [r7, #12]
 8005310:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005314:	b2db      	uxtb	r3, r3
 8005316:	2b20      	cmp	r3, #32
 8005318:	d156      	bne.n	80053c8 <HAL_UART_Transmit_DMA+0xc8>
  {
    if ((pData == NULL) || (Size == 0U))
 800531a:	68bb      	ldr	r3, [r7, #8]
 800531c:	2b00      	cmp	r3, #0
 800531e:	d002      	beq.n	8005326 <HAL_UART_Transmit_DMA+0x26>
 8005320:	88fb      	ldrh	r3, [r7, #6]
 8005322:	2b00      	cmp	r3, #0
 8005324:	d101      	bne.n	800532a <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 8005326:	2301      	movs	r3, #1
 8005328:	e04f      	b.n	80053ca <HAL_UART_Transmit_DMA+0xca>
    }

    huart->pTxBuffPtr = pData;
 800532a:	68ba      	ldr	r2, [r7, #8]
 800532c:	68fb      	ldr	r3, [r7, #12]
 800532e:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8005330:	68fb      	ldr	r3, [r7, #12]
 8005332:	88fa      	ldrh	r2, [r7, #6]
 8005334:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8005336:	68fb      	ldr	r3, [r7, #12]
 8005338:	88fa      	ldrh	r2, [r7, #6]
 800533a:	84da      	strh	r2, [r3, #38]	@ 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800533c:	68fb      	ldr	r3, [r7, #12]
 800533e:	2200      	movs	r2, #0
 8005340:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005342:	68fb      	ldr	r3, [r7, #12]
 8005344:	2221      	movs	r2, #33	@ 0x21
 8005346:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 800534a:	68fb      	ldr	r3, [r7, #12]
 800534c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800534e:	4a21      	ldr	r2, [pc, #132]	@ (80053d4 <HAL_UART_Transmit_DMA+0xd4>)
 8005350:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8005352:	68fb      	ldr	r3, [r7, #12]
 8005354:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005356:	4a20      	ldr	r2, [pc, #128]	@ (80053d8 <HAL_UART_Transmit_DMA+0xd8>)
 8005358:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 800535a:	68fb      	ldr	r3, [r7, #12]
 800535c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800535e:	4a1f      	ldr	r2, [pc, #124]	@ (80053dc <HAL_UART_Transmit_DMA+0xdc>)
 8005360:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 8005362:	68fb      	ldr	r3, [r7, #12]
 8005364:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005366:	2200      	movs	r2, #0
 8005368:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Enable the UART transmit DMA stream */
    tmp = (const uint32_t *)&pData;
 800536a:	f107 0308 	add.w	r3, r7, #8
 800536e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_DMA_Start_IT(huart->hdmatx, *(const uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 8005370:	68fb      	ldr	r3, [r7, #12]
 8005372:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 8005374:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005376:	6819      	ldr	r1, [r3, #0]
 8005378:	68fb      	ldr	r3, [r7, #12]
 800537a:	681b      	ldr	r3, [r3, #0]
 800537c:	3304      	adds	r3, #4
 800537e:	461a      	mov	r2, r3
 8005380:	88fb      	ldrh	r3, [r7, #6]
 8005382:	f7fd fd9f 	bl	8002ec4 <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 8005386:	68fb      	ldr	r3, [r7, #12]
 8005388:	681b      	ldr	r3, [r3, #0]
 800538a:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800538e:	601a      	str	r2, [r3, #0]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8005390:	68fb      	ldr	r3, [r7, #12]
 8005392:	681b      	ldr	r3, [r3, #0]
 8005394:	3314      	adds	r3, #20
 8005396:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005398:	69bb      	ldr	r3, [r7, #24]
 800539a:	e853 3f00 	ldrex	r3, [r3]
 800539e:	617b      	str	r3, [r7, #20]
   return(result);
 80053a0:	697b      	ldr	r3, [r7, #20]
 80053a2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80053a6:	62bb      	str	r3, [r7, #40]	@ 0x28
 80053a8:	68fb      	ldr	r3, [r7, #12]
 80053aa:	681b      	ldr	r3, [r3, #0]
 80053ac:	3314      	adds	r3, #20
 80053ae:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80053b0:	627a      	str	r2, [r7, #36]	@ 0x24
 80053b2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80053b4:	6a39      	ldr	r1, [r7, #32]
 80053b6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80053b8:	e841 2300 	strex	r3, r2, [r1]
 80053bc:	61fb      	str	r3, [r7, #28]
   return(result);
 80053be:	69fb      	ldr	r3, [r7, #28]
 80053c0:	2b00      	cmp	r3, #0
 80053c2:	d1e5      	bne.n	8005390 <HAL_UART_Transmit_DMA+0x90>

    return HAL_OK;
 80053c4:	2300      	movs	r3, #0
 80053c6:	e000      	b.n	80053ca <HAL_UART_Transmit_DMA+0xca>
  }
  else
  {
    return HAL_BUSY;
 80053c8:	2302      	movs	r3, #2
  }
}
 80053ca:	4618      	mov	r0, r3
 80053cc:	3730      	adds	r7, #48	@ 0x30
 80053ce:	46bd      	mov	sp, r7
 80053d0:	bd80      	pop	{r7, pc}
 80053d2:	bf00      	nop
 80053d4:	08005ac9 	.word	0x08005ac9
 80053d8:	08005b63 	.word	0x08005b63
 80053dc:	08005ce7 	.word	0x08005ce7

080053e0 <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80053e0:	b580      	push	{r7, lr}
 80053e2:	b084      	sub	sp, #16
 80053e4:	af00      	add	r7, sp, #0
 80053e6:	60f8      	str	r0, [r7, #12]
 80053e8:	60b9      	str	r1, [r7, #8]
 80053ea:	4613      	mov	r3, r2
 80053ec:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80053ee:	68fb      	ldr	r3, [r7, #12]
 80053f0:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80053f4:	b2db      	uxtb	r3, r3
 80053f6:	2b20      	cmp	r3, #32
 80053f8:	d112      	bne.n	8005420 <HAL_UART_Receive_DMA+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 80053fa:	68bb      	ldr	r3, [r7, #8]
 80053fc:	2b00      	cmp	r3, #0
 80053fe:	d002      	beq.n	8005406 <HAL_UART_Receive_DMA+0x26>
 8005400:	88fb      	ldrh	r3, [r7, #6]
 8005402:	2b00      	cmp	r3, #0
 8005404:	d101      	bne.n	800540a <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 8005406:	2301      	movs	r3, #1
 8005408:	e00b      	b.n	8005422 <HAL_UART_Receive_DMA+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800540a:	68fb      	ldr	r3, [r7, #12]
 800540c:	2200      	movs	r2, #0
 800540e:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8005410:	88fb      	ldrh	r3, [r7, #6]
 8005412:	461a      	mov	r2, r3
 8005414:	68b9      	ldr	r1, [r7, #8]
 8005416:	68f8      	ldr	r0, [r7, #12]
 8005418:	f000 fcb0 	bl	8005d7c <UART_Start_Receive_DMA>
 800541c:	4603      	mov	r3, r0
 800541e:	e000      	b.n	8005422 <HAL_UART_Receive_DMA+0x42>
  }
  else
  {
    return HAL_BUSY;
 8005420:	2302      	movs	r3, #2
  }
}
 8005422:	4618      	mov	r0, r3
 8005424:	3710      	adds	r7, #16
 8005426:	46bd      	mov	sp, r7
 8005428:	bd80      	pop	{r7, pc}

0800542a <HAL_UART_DMAStop>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DMAStop(UART_HandleTypeDef *huart)
{
 800542a:	b580      	push	{r7, lr}
 800542c:	b090      	sub	sp, #64	@ 0x40
 800542e:	af00      	add	r7, sp, #0
 8005430:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8005432:	2300      	movs	r3, #0
 8005434:	63fb      	str	r3, [r7, #60]	@ 0x3c
     when calling HAL_DMA_Abort() API the DMA TX/RX Transfer complete interrupt is generated
     and the correspond call back is executed HAL_UART_TxCpltCallback() / HAL_UART_RxCpltCallback()
     */

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	681b      	ldr	r3, [r3, #0]
 800543a:	695b      	ldr	r3, [r3, #20]
 800543c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005440:	2b80      	cmp	r3, #128	@ 0x80
 8005442:	bf0c      	ite	eq
 8005444:	2301      	moveq	r3, #1
 8005446:	2300      	movne	r3, #0
 8005448:	b2db      	uxtb	r3, r3
 800544a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005452:	b2db      	uxtb	r3, r3
 8005454:	2b21      	cmp	r3, #33	@ 0x21
 8005456:	d128      	bne.n	80054aa <HAL_UART_DMAStop+0x80>
 8005458:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800545a:	2b00      	cmp	r3, #0
 800545c:	d025      	beq.n	80054aa <HAL_UART_DMAStop+0x80>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	681b      	ldr	r3, [r3, #0]
 8005462:	3314      	adds	r3, #20
 8005464:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005466:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005468:	e853 3f00 	ldrex	r3, [r3]
 800546c:	623b      	str	r3, [r7, #32]
   return(result);
 800546e:	6a3b      	ldr	r3, [r7, #32]
 8005470:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005474:	63bb      	str	r3, [r7, #56]	@ 0x38
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	681b      	ldr	r3, [r3, #0]
 800547a:	3314      	adds	r3, #20
 800547c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800547e:	633a      	str	r2, [r7, #48]	@ 0x30
 8005480:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005482:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005484:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005486:	e841 2300 	strex	r3, r2, [r1]
 800548a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800548c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800548e:	2b00      	cmp	r3, #0
 8005490:	d1e5      	bne.n	800545e <HAL_UART_DMAStop+0x34>

    /* Abort the UART DMA Tx stream */
    if (huart->hdmatx != NULL)
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005496:	2b00      	cmp	r3, #0
 8005498:	d004      	beq.n	80054a4 <HAL_UART_DMAStop+0x7a>
    {
      HAL_DMA_Abort(huart->hdmatx);
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800549e:	4618      	mov	r0, r3
 80054a0:	f7fd fd68 	bl	8002f74 <HAL_DMA_Abort>
    }
    UART_EndTxTransfer(huart);
 80054a4:	6878      	ldr	r0, [r7, #4]
 80054a6:	f000 fd03 	bl	8005eb0 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	681b      	ldr	r3, [r3, #0]
 80054ae:	695b      	ldr	r3, [r3, #20]
 80054b0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80054b4:	2b40      	cmp	r3, #64	@ 0x40
 80054b6:	bf0c      	ite	eq
 80054b8:	2301      	moveq	r3, #1
 80054ba:	2300      	movne	r3, #0
 80054bc:	b2db      	uxtb	r3, r3
 80054be:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80054c6:	b2db      	uxtb	r3, r3
 80054c8:	2b22      	cmp	r3, #34	@ 0x22
 80054ca:	d128      	bne.n	800551e <HAL_UART_DMAStop+0xf4>
 80054cc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80054ce:	2b00      	cmp	r3, #0
 80054d0:	d025      	beq.n	800551e <HAL_UART_DMAStop+0xf4>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	681b      	ldr	r3, [r3, #0]
 80054d6:	3314      	adds	r3, #20
 80054d8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80054da:	693b      	ldr	r3, [r7, #16]
 80054dc:	e853 3f00 	ldrex	r3, [r3]
 80054e0:	60fb      	str	r3, [r7, #12]
   return(result);
 80054e2:	68fb      	ldr	r3, [r7, #12]
 80054e4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80054e8:	637b      	str	r3, [r7, #52]	@ 0x34
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	681b      	ldr	r3, [r3, #0]
 80054ee:	3314      	adds	r3, #20
 80054f0:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80054f2:	61fa      	str	r2, [r7, #28]
 80054f4:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80054f6:	69b9      	ldr	r1, [r7, #24]
 80054f8:	69fa      	ldr	r2, [r7, #28]
 80054fa:	e841 2300 	strex	r3, r2, [r1]
 80054fe:	617b      	str	r3, [r7, #20]
   return(result);
 8005500:	697b      	ldr	r3, [r7, #20]
 8005502:	2b00      	cmp	r3, #0
 8005504:	d1e5      	bne.n	80054d2 <HAL_UART_DMAStop+0xa8>

    /* Abort the UART DMA Rx stream */
    if (huart->hdmarx != NULL)
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800550a:	2b00      	cmp	r3, #0
 800550c:	d004      	beq.n	8005518 <HAL_UART_DMAStop+0xee>
    {
      HAL_DMA_Abort(huart->hdmarx);
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005512:	4618      	mov	r0, r3
 8005514:	f7fd fd2e 	bl	8002f74 <HAL_DMA_Abort>
    }
    UART_EndRxTransfer(huart);
 8005518:	6878      	ldr	r0, [r7, #4]
 800551a:	f000 fcf1 	bl	8005f00 <UART_EndRxTransfer>
  }

  return HAL_OK;
 800551e:	2300      	movs	r3, #0
}
 8005520:	4618      	mov	r0, r3
 8005522:	3740      	adds	r7, #64	@ 0x40
 8005524:	46bd      	mov	sp, r7
 8005526:	bd80      	pop	{r7, pc}

08005528 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005528:	b580      	push	{r7, lr}
 800552a:	b0ba      	sub	sp, #232	@ 0xe8
 800552c:	af00      	add	r7, sp, #0
 800552e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	681b      	ldr	r3, [r3, #0]
 8005534:	681b      	ldr	r3, [r3, #0]
 8005536:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	681b      	ldr	r3, [r3, #0]
 800553e:	68db      	ldr	r3, [r3, #12]
 8005540:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	681b      	ldr	r3, [r3, #0]
 8005548:	695b      	ldr	r3, [r3, #20]
 800554a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 800554e:	2300      	movs	r3, #0
 8005550:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8005554:	2300      	movs	r3, #0
 8005556:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800555a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800555e:	f003 030f 	and.w	r3, r3, #15
 8005562:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8005566:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800556a:	2b00      	cmp	r3, #0
 800556c:	d10f      	bne.n	800558e <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800556e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005572:	f003 0320 	and.w	r3, r3, #32
 8005576:	2b00      	cmp	r3, #0
 8005578:	d009      	beq.n	800558e <HAL_UART_IRQHandler+0x66>
 800557a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800557e:	f003 0320 	and.w	r3, r3, #32
 8005582:	2b00      	cmp	r3, #0
 8005584:	d003      	beq.n	800558e <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8005586:	6878      	ldr	r0, [r7, #4]
 8005588:	f000 fd99 	bl	80060be <UART_Receive_IT>
      return;
 800558c:	e25b      	b.n	8005a46 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800558e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8005592:	2b00      	cmp	r3, #0
 8005594:	f000 80de 	beq.w	8005754 <HAL_UART_IRQHandler+0x22c>
 8005598:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800559c:	f003 0301 	and.w	r3, r3, #1
 80055a0:	2b00      	cmp	r3, #0
 80055a2:	d106      	bne.n	80055b2 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80055a4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80055a8:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 80055ac:	2b00      	cmp	r3, #0
 80055ae:	f000 80d1 	beq.w	8005754 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80055b2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80055b6:	f003 0301 	and.w	r3, r3, #1
 80055ba:	2b00      	cmp	r3, #0
 80055bc:	d00b      	beq.n	80055d6 <HAL_UART_IRQHandler+0xae>
 80055be:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80055c2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80055c6:	2b00      	cmp	r3, #0
 80055c8:	d005      	beq.n	80055d6 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80055ce:	f043 0201 	orr.w	r2, r3, #1
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80055d6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80055da:	f003 0304 	and.w	r3, r3, #4
 80055de:	2b00      	cmp	r3, #0
 80055e0:	d00b      	beq.n	80055fa <HAL_UART_IRQHandler+0xd2>
 80055e2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80055e6:	f003 0301 	and.w	r3, r3, #1
 80055ea:	2b00      	cmp	r3, #0
 80055ec:	d005      	beq.n	80055fa <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80055f2:	f043 0202 	orr.w	r2, r3, #2
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80055fa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80055fe:	f003 0302 	and.w	r3, r3, #2
 8005602:	2b00      	cmp	r3, #0
 8005604:	d00b      	beq.n	800561e <HAL_UART_IRQHandler+0xf6>
 8005606:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800560a:	f003 0301 	and.w	r3, r3, #1
 800560e:	2b00      	cmp	r3, #0
 8005610:	d005      	beq.n	800561e <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005616:	f043 0204 	orr.w	r2, r3, #4
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800561e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005622:	f003 0308 	and.w	r3, r3, #8
 8005626:	2b00      	cmp	r3, #0
 8005628:	d011      	beq.n	800564e <HAL_UART_IRQHandler+0x126>
 800562a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800562e:	f003 0320 	and.w	r3, r3, #32
 8005632:	2b00      	cmp	r3, #0
 8005634:	d105      	bne.n	8005642 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8005636:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800563a:	f003 0301 	and.w	r3, r3, #1
 800563e:	2b00      	cmp	r3, #0
 8005640:	d005      	beq.n	800564e <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005646:	f043 0208 	orr.w	r2, r3, #8
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005652:	2b00      	cmp	r3, #0
 8005654:	f000 81f2 	beq.w	8005a3c <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005658:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800565c:	f003 0320 	and.w	r3, r3, #32
 8005660:	2b00      	cmp	r3, #0
 8005662:	d008      	beq.n	8005676 <HAL_UART_IRQHandler+0x14e>
 8005664:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005668:	f003 0320 	and.w	r3, r3, #32
 800566c:	2b00      	cmp	r3, #0
 800566e:	d002      	beq.n	8005676 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8005670:	6878      	ldr	r0, [r7, #4]
 8005672:	f000 fd24 	bl	80060be <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	681b      	ldr	r3, [r3, #0]
 800567a:	695b      	ldr	r3, [r3, #20]
 800567c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005680:	2b40      	cmp	r3, #64	@ 0x40
 8005682:	bf0c      	ite	eq
 8005684:	2301      	moveq	r3, #1
 8005686:	2300      	movne	r3, #0
 8005688:	b2db      	uxtb	r3, r3
 800568a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005692:	f003 0308 	and.w	r3, r3, #8
 8005696:	2b00      	cmp	r3, #0
 8005698:	d103      	bne.n	80056a2 <HAL_UART_IRQHandler+0x17a>
 800569a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800569e:	2b00      	cmp	r3, #0
 80056a0:	d04f      	beq.n	8005742 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80056a2:	6878      	ldr	r0, [r7, #4]
 80056a4:	f000 fc2c 	bl	8005f00 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	681b      	ldr	r3, [r3, #0]
 80056ac:	695b      	ldr	r3, [r3, #20]
 80056ae:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80056b2:	2b40      	cmp	r3, #64	@ 0x40
 80056b4:	d141      	bne.n	800573a <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	681b      	ldr	r3, [r3, #0]
 80056ba:	3314      	adds	r3, #20
 80056bc:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80056c0:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80056c4:	e853 3f00 	ldrex	r3, [r3]
 80056c8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 80056cc:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80056d0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80056d4:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	681b      	ldr	r3, [r3, #0]
 80056dc:	3314      	adds	r3, #20
 80056de:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 80056e2:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 80056e6:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80056ea:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 80056ee:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 80056f2:	e841 2300 	strex	r3, r2, [r1]
 80056f6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 80056fa:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80056fe:	2b00      	cmp	r3, #0
 8005700:	d1d9      	bne.n	80056b6 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005706:	2b00      	cmp	r3, #0
 8005708:	d013      	beq.n	8005732 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800570e:	4a7e      	ldr	r2, [pc, #504]	@ (8005908 <HAL_UART_IRQHandler+0x3e0>)
 8005710:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005716:	4618      	mov	r0, r3
 8005718:	f7fd fc9c 	bl	8003054 <HAL_DMA_Abort_IT>
 800571c:	4603      	mov	r3, r0
 800571e:	2b00      	cmp	r3, #0
 8005720:	d016      	beq.n	8005750 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005726:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005728:	687a      	ldr	r2, [r7, #4]
 800572a:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 800572c:	4610      	mov	r0, r2
 800572e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005730:	e00e      	b.n	8005750 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8005732:	6878      	ldr	r0, [r7, #4]
 8005734:	f000 f9b2 	bl	8005a9c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005738:	e00a      	b.n	8005750 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800573a:	6878      	ldr	r0, [r7, #4]
 800573c:	f000 f9ae 	bl	8005a9c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005740:	e006      	b.n	8005750 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005742:	6878      	ldr	r0, [r7, #4]
 8005744:	f000 f9aa 	bl	8005a9c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	2200      	movs	r2, #0
 800574c:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 800574e:	e175      	b.n	8005a3c <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005750:	bf00      	nop
    return;
 8005752:	e173      	b.n	8005a3c <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005758:	2b01      	cmp	r3, #1
 800575a:	f040 814f 	bne.w	80059fc <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800575e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005762:	f003 0310 	and.w	r3, r3, #16
 8005766:	2b00      	cmp	r3, #0
 8005768:	f000 8148 	beq.w	80059fc <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 800576c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005770:	f003 0310 	and.w	r3, r3, #16
 8005774:	2b00      	cmp	r3, #0
 8005776:	f000 8141 	beq.w	80059fc <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800577a:	2300      	movs	r3, #0
 800577c:	60bb      	str	r3, [r7, #8]
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	681b      	ldr	r3, [r3, #0]
 8005782:	681b      	ldr	r3, [r3, #0]
 8005784:	60bb      	str	r3, [r7, #8]
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	681b      	ldr	r3, [r3, #0]
 800578a:	685b      	ldr	r3, [r3, #4]
 800578c:	60bb      	str	r3, [r7, #8]
 800578e:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	681b      	ldr	r3, [r3, #0]
 8005794:	695b      	ldr	r3, [r3, #20]
 8005796:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800579a:	2b40      	cmp	r3, #64	@ 0x40
 800579c:	f040 80b6 	bne.w	800590c <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80057a4:	681b      	ldr	r3, [r3, #0]
 80057a6:	685b      	ldr	r3, [r3, #4]
 80057a8:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 80057ac:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 80057b0:	2b00      	cmp	r3, #0
 80057b2:	f000 8145 	beq.w	8005a40 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80057ba:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80057be:	429a      	cmp	r2, r3
 80057c0:	f080 813e 	bcs.w	8005a40 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80057ca:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80057d0:	69db      	ldr	r3, [r3, #28]
 80057d2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80057d6:	f000 8088 	beq.w	80058ea <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	681b      	ldr	r3, [r3, #0]
 80057de:	330c      	adds	r3, #12
 80057e0:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80057e4:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80057e8:	e853 3f00 	ldrex	r3, [r3]
 80057ec:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 80057f0:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80057f4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80057f8:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	681b      	ldr	r3, [r3, #0]
 8005800:	330c      	adds	r3, #12
 8005802:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8005806:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800580a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800580e:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8005812:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8005816:	e841 2300 	strex	r3, r2, [r1]
 800581a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800581e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005822:	2b00      	cmp	r3, #0
 8005824:	d1d9      	bne.n	80057da <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	681b      	ldr	r3, [r3, #0]
 800582a:	3314      	adds	r3, #20
 800582c:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800582e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8005830:	e853 3f00 	ldrex	r3, [r3]
 8005834:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8005836:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8005838:	f023 0301 	bic.w	r3, r3, #1
 800583c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	681b      	ldr	r3, [r3, #0]
 8005844:	3314      	adds	r3, #20
 8005846:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800584a:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800584e:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005850:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8005852:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8005856:	e841 2300 	strex	r3, r2, [r1]
 800585a:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800585c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800585e:	2b00      	cmp	r3, #0
 8005860:	d1e1      	bne.n	8005826 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	681b      	ldr	r3, [r3, #0]
 8005866:	3314      	adds	r3, #20
 8005868:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800586a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800586c:	e853 3f00 	ldrex	r3, [r3]
 8005870:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8005872:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005874:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005878:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	681b      	ldr	r3, [r3, #0]
 8005880:	3314      	adds	r3, #20
 8005882:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8005886:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8005888:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800588a:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800588c:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800588e:	e841 2300 	strex	r3, r2, [r1]
 8005892:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8005894:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005896:	2b00      	cmp	r3, #0
 8005898:	d1e3      	bne.n	8005862 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	2220      	movs	r2, #32
 800589e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	2200      	movs	r2, #0
 80058a6:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	681b      	ldr	r3, [r3, #0]
 80058ac:	330c      	adds	r3, #12
 80058ae:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80058b0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80058b2:	e853 3f00 	ldrex	r3, [r3]
 80058b6:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80058b8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80058ba:	f023 0310 	bic.w	r3, r3, #16
 80058be:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	681b      	ldr	r3, [r3, #0]
 80058c6:	330c      	adds	r3, #12
 80058c8:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 80058cc:	65ba      	str	r2, [r7, #88]	@ 0x58
 80058ce:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80058d0:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80058d2:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80058d4:	e841 2300 	strex	r3, r2, [r1]
 80058d8:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80058da:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80058dc:	2b00      	cmp	r3, #0
 80058de:	d1e3      	bne.n	80058a8 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80058e4:	4618      	mov	r0, r3
 80058e6:	f7fd fb45 	bl	8002f74 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	2202      	movs	r2, #2
 80058ee:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80058f8:	b29b      	uxth	r3, r3
 80058fa:	1ad3      	subs	r3, r2, r3
 80058fc:	b29b      	uxth	r3, r3
 80058fe:	4619      	mov	r1, r3
 8005900:	6878      	ldr	r0, [r7, #4]
 8005902:	f000 f8d5 	bl	8005ab0 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8005906:	e09b      	b.n	8005a40 <HAL_UART_IRQHandler+0x518>
 8005908:	08005fc7 	.word	0x08005fc7
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8005914:	b29b      	uxth	r3, r3
 8005916:	1ad3      	subs	r3, r2, r3
 8005918:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8005920:	b29b      	uxth	r3, r3
 8005922:	2b00      	cmp	r3, #0
 8005924:	f000 808e 	beq.w	8005a44 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8005928:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800592c:	2b00      	cmp	r3, #0
 800592e:	f000 8089 	beq.w	8005a44 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	681b      	ldr	r3, [r3, #0]
 8005936:	330c      	adds	r3, #12
 8005938:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800593a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800593c:	e853 3f00 	ldrex	r3, [r3]
 8005940:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8005942:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005944:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005948:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	681b      	ldr	r3, [r3, #0]
 8005950:	330c      	adds	r3, #12
 8005952:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8005956:	647a      	str	r2, [r7, #68]	@ 0x44
 8005958:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800595a:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800595c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800595e:	e841 2300 	strex	r3, r2, [r1]
 8005962:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8005964:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005966:	2b00      	cmp	r3, #0
 8005968:	d1e3      	bne.n	8005932 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	681b      	ldr	r3, [r3, #0]
 800596e:	3314      	adds	r3, #20
 8005970:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005972:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005974:	e853 3f00 	ldrex	r3, [r3]
 8005978:	623b      	str	r3, [r7, #32]
   return(result);
 800597a:	6a3b      	ldr	r3, [r7, #32]
 800597c:	f023 0301 	bic.w	r3, r3, #1
 8005980:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	681b      	ldr	r3, [r3, #0]
 8005988:	3314      	adds	r3, #20
 800598a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800598e:	633a      	str	r2, [r7, #48]	@ 0x30
 8005990:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005992:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005994:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005996:	e841 2300 	strex	r3, r2, [r1]
 800599a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800599c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800599e:	2b00      	cmp	r3, #0
 80059a0:	d1e3      	bne.n	800596a <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	2220      	movs	r2, #32
 80059a6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	2200      	movs	r2, #0
 80059ae:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	681b      	ldr	r3, [r3, #0]
 80059b4:	330c      	adds	r3, #12
 80059b6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80059b8:	693b      	ldr	r3, [r7, #16]
 80059ba:	e853 3f00 	ldrex	r3, [r3]
 80059be:	60fb      	str	r3, [r7, #12]
   return(result);
 80059c0:	68fb      	ldr	r3, [r7, #12]
 80059c2:	f023 0310 	bic.w	r3, r3, #16
 80059c6:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	681b      	ldr	r3, [r3, #0]
 80059ce:	330c      	adds	r3, #12
 80059d0:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 80059d4:	61fa      	str	r2, [r7, #28]
 80059d6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80059d8:	69b9      	ldr	r1, [r7, #24]
 80059da:	69fa      	ldr	r2, [r7, #28]
 80059dc:	e841 2300 	strex	r3, r2, [r1]
 80059e0:	617b      	str	r3, [r7, #20]
   return(result);
 80059e2:	697b      	ldr	r3, [r7, #20]
 80059e4:	2b00      	cmp	r3, #0
 80059e6:	d1e3      	bne.n	80059b0 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	2202      	movs	r2, #2
 80059ec:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80059ee:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80059f2:	4619      	mov	r1, r3
 80059f4:	6878      	ldr	r0, [r7, #4]
 80059f6:	f000 f85b 	bl	8005ab0 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80059fa:	e023      	b.n	8005a44 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80059fc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005a00:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005a04:	2b00      	cmp	r3, #0
 8005a06:	d009      	beq.n	8005a1c <HAL_UART_IRQHandler+0x4f4>
 8005a08:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005a0c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005a10:	2b00      	cmp	r3, #0
 8005a12:	d003      	beq.n	8005a1c <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8005a14:	6878      	ldr	r0, [r7, #4]
 8005a16:	f000 faea 	bl	8005fee <UART_Transmit_IT>
    return;
 8005a1a:	e014      	b.n	8005a46 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8005a1c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005a20:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005a24:	2b00      	cmp	r3, #0
 8005a26:	d00e      	beq.n	8005a46 <HAL_UART_IRQHandler+0x51e>
 8005a28:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005a2c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005a30:	2b00      	cmp	r3, #0
 8005a32:	d008      	beq.n	8005a46 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8005a34:	6878      	ldr	r0, [r7, #4]
 8005a36:	f000 fb2a 	bl	800608e <UART_EndTransmit_IT>
    return;
 8005a3a:	e004      	b.n	8005a46 <HAL_UART_IRQHandler+0x51e>
    return;
 8005a3c:	bf00      	nop
 8005a3e:	e002      	b.n	8005a46 <HAL_UART_IRQHandler+0x51e>
      return;
 8005a40:	bf00      	nop
 8005a42:	e000      	b.n	8005a46 <HAL_UART_IRQHandler+0x51e>
      return;
 8005a44:	bf00      	nop
  }
}
 8005a46:	37e8      	adds	r7, #232	@ 0xe8
 8005a48:	46bd      	mov	sp, r7
 8005a4a:	bd80      	pop	{r7, pc}

08005a4c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005a4c:	b480      	push	{r7}
 8005a4e:	b083      	sub	sp, #12
 8005a50:	af00      	add	r7, sp, #0
 8005a52:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8005a54:	bf00      	nop
 8005a56:	370c      	adds	r7, #12
 8005a58:	46bd      	mov	sp, r7
 8005a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a5e:	4770      	bx	lr

08005a60 <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8005a60:	b480      	push	{r7}
 8005a62:	b083      	sub	sp, #12
 8005a64:	af00      	add	r7, sp, #0
 8005a66:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 8005a68:	bf00      	nop
 8005a6a:	370c      	adds	r7, #12
 8005a6c:	46bd      	mov	sp, r7
 8005a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a72:	4770      	bx	lr

08005a74 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8005a74:	b480      	push	{r7}
 8005a76:	b083      	sub	sp, #12
 8005a78:	af00      	add	r7, sp, #0
 8005a7a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8005a7c:	bf00      	nop
 8005a7e:	370c      	adds	r7, #12
 8005a80:	46bd      	mov	sp, r7
 8005a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a86:	4770      	bx	lr

08005a88 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8005a88:	b480      	push	{r7}
 8005a8a:	b083      	sub	sp, #12
 8005a8c:	af00      	add	r7, sp, #0
 8005a8e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8005a90:	bf00      	nop
 8005a92:	370c      	adds	r7, #12
 8005a94:	46bd      	mov	sp, r7
 8005a96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a9a:	4770      	bx	lr

08005a9c <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005a9c:	b480      	push	{r7}
 8005a9e:	b083      	sub	sp, #12
 8005aa0:	af00      	add	r7, sp, #0
 8005aa2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8005aa4:	bf00      	nop
 8005aa6:	370c      	adds	r7, #12
 8005aa8:	46bd      	mov	sp, r7
 8005aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aae:	4770      	bx	lr

08005ab0 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005ab0:	b480      	push	{r7}
 8005ab2:	b083      	sub	sp, #12
 8005ab4:	af00      	add	r7, sp, #0
 8005ab6:	6078      	str	r0, [r7, #4]
 8005ab8:	460b      	mov	r3, r1
 8005aba:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8005abc:	bf00      	nop
 8005abe:	370c      	adds	r7, #12
 8005ac0:	46bd      	mov	sp, r7
 8005ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ac6:	4770      	bx	lr

08005ac8 <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8005ac8:	b580      	push	{r7, lr}
 8005aca:	b090      	sub	sp, #64	@ 0x40
 8005acc:	af00      	add	r7, sp, #0
 8005ace:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005ad4:	63fb      	str	r3, [r7, #60]	@ 0x3c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	681b      	ldr	r3, [r3, #0]
 8005ada:	681b      	ldr	r3, [r3, #0]
 8005adc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005ae0:	2b00      	cmp	r3, #0
 8005ae2:	d137      	bne.n	8005b54 <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0x00U;
 8005ae4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005ae6:	2200      	movs	r2, #0
 8005ae8:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8005aea:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005aec:	681b      	ldr	r3, [r3, #0]
 8005aee:	3314      	adds	r3, #20
 8005af0:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005af2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005af4:	e853 3f00 	ldrex	r3, [r3]
 8005af8:	623b      	str	r3, [r7, #32]
   return(result);
 8005afa:	6a3b      	ldr	r3, [r7, #32]
 8005afc:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005b00:	63bb      	str	r3, [r7, #56]	@ 0x38
 8005b02:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005b04:	681b      	ldr	r3, [r3, #0]
 8005b06:	3314      	adds	r3, #20
 8005b08:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8005b0a:	633a      	str	r2, [r7, #48]	@ 0x30
 8005b0c:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b0e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005b10:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005b12:	e841 2300 	strex	r3, r2, [r1]
 8005b16:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8005b18:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005b1a:	2b00      	cmp	r3, #0
 8005b1c:	d1e5      	bne.n	8005aea <UART_DMATransmitCplt+0x22>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8005b1e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005b20:	681b      	ldr	r3, [r3, #0]
 8005b22:	330c      	adds	r3, #12
 8005b24:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b26:	693b      	ldr	r3, [r7, #16]
 8005b28:	e853 3f00 	ldrex	r3, [r3]
 8005b2c:	60fb      	str	r3, [r7, #12]
   return(result);
 8005b2e:	68fb      	ldr	r3, [r7, #12]
 8005b30:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005b34:	637b      	str	r3, [r7, #52]	@ 0x34
 8005b36:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005b38:	681b      	ldr	r3, [r3, #0]
 8005b3a:	330c      	adds	r3, #12
 8005b3c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8005b3e:	61fa      	str	r2, [r7, #28]
 8005b40:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b42:	69b9      	ldr	r1, [r7, #24]
 8005b44:	69fa      	ldr	r2, [r7, #28]
 8005b46:	e841 2300 	strex	r3, r2, [r1]
 8005b4a:	617b      	str	r3, [r7, #20]
   return(result);
 8005b4c:	697b      	ldr	r3, [r7, #20]
 8005b4e:	2b00      	cmp	r3, #0
 8005b50:	d1e5      	bne.n	8005b1e <UART_DMATransmitCplt+0x56>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8005b52:	e002      	b.n	8005b5a <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 8005b54:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 8005b56:	f7ff ff79 	bl	8005a4c <HAL_UART_TxCpltCallback>
}
 8005b5a:	bf00      	nop
 8005b5c:	3740      	adds	r7, #64	@ 0x40
 8005b5e:	46bd      	mov	sp, r7
 8005b60:	bd80      	pop	{r7, pc}

08005b62 <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8005b62:	b580      	push	{r7, lr}
 8005b64:	b084      	sub	sp, #16
 8005b66:	af00      	add	r7, sp, #0
 8005b68:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005b6e:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8005b70:	68f8      	ldr	r0, [r7, #12]
 8005b72:	f7ff ff75 	bl	8005a60 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005b76:	bf00      	nop
 8005b78:	3710      	adds	r7, #16
 8005b7a:	46bd      	mov	sp, r7
 8005b7c:	bd80      	pop	{r7, pc}

08005b7e <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8005b7e:	b580      	push	{r7, lr}
 8005b80:	b09c      	sub	sp, #112	@ 0x70
 8005b82:	af00      	add	r7, sp, #0
 8005b84:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005b8a:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	681b      	ldr	r3, [r3, #0]
 8005b90:	681b      	ldr	r3, [r3, #0]
 8005b92:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005b96:	2b00      	cmp	r3, #0
 8005b98:	d172      	bne.n	8005c80 <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 8005b9a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005b9c:	2200      	movs	r2, #0
 8005b9e:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005ba0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005ba2:	681b      	ldr	r3, [r3, #0]
 8005ba4:	330c      	adds	r3, #12
 8005ba6:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ba8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005baa:	e853 3f00 	ldrex	r3, [r3]
 8005bae:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8005bb0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005bb2:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005bb6:	66bb      	str	r3, [r7, #104]	@ 0x68
 8005bb8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005bba:	681b      	ldr	r3, [r3, #0]
 8005bbc:	330c      	adds	r3, #12
 8005bbe:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8005bc0:	65ba      	str	r2, [r7, #88]	@ 0x58
 8005bc2:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005bc4:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8005bc6:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8005bc8:	e841 2300 	strex	r3, r2, [r1]
 8005bcc:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8005bce:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005bd0:	2b00      	cmp	r3, #0
 8005bd2:	d1e5      	bne.n	8005ba0 <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005bd4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005bd6:	681b      	ldr	r3, [r3, #0]
 8005bd8:	3314      	adds	r3, #20
 8005bda:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005bdc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005bde:	e853 3f00 	ldrex	r3, [r3]
 8005be2:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8005be4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005be6:	f023 0301 	bic.w	r3, r3, #1
 8005bea:	667b      	str	r3, [r7, #100]	@ 0x64
 8005bec:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005bee:	681b      	ldr	r3, [r3, #0]
 8005bf0:	3314      	adds	r3, #20
 8005bf2:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8005bf4:	647a      	str	r2, [r7, #68]	@ 0x44
 8005bf6:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005bf8:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8005bfa:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005bfc:	e841 2300 	strex	r3, r2, [r1]
 8005c00:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8005c02:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005c04:	2b00      	cmp	r3, #0
 8005c06:	d1e5      	bne.n	8005bd4 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005c08:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005c0a:	681b      	ldr	r3, [r3, #0]
 8005c0c:	3314      	adds	r3, #20
 8005c0e:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c10:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005c12:	e853 3f00 	ldrex	r3, [r3]
 8005c16:	623b      	str	r3, [r7, #32]
   return(result);
 8005c18:	6a3b      	ldr	r3, [r7, #32]
 8005c1a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005c1e:	663b      	str	r3, [r7, #96]	@ 0x60
 8005c20:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005c22:	681b      	ldr	r3, [r3, #0]
 8005c24:	3314      	adds	r3, #20
 8005c26:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8005c28:	633a      	str	r2, [r7, #48]	@ 0x30
 8005c2a:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c2c:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005c2e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005c30:	e841 2300 	strex	r3, r2, [r1]
 8005c34:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8005c36:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005c38:	2b00      	cmp	r3, #0
 8005c3a:	d1e5      	bne.n	8005c08 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8005c3c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005c3e:	2220      	movs	r2, #32
 8005c40:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005c44:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005c46:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005c48:	2b01      	cmp	r3, #1
 8005c4a:	d119      	bne.n	8005c80 <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005c4c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005c4e:	681b      	ldr	r3, [r3, #0]
 8005c50:	330c      	adds	r3, #12
 8005c52:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c54:	693b      	ldr	r3, [r7, #16]
 8005c56:	e853 3f00 	ldrex	r3, [r3]
 8005c5a:	60fb      	str	r3, [r7, #12]
   return(result);
 8005c5c:	68fb      	ldr	r3, [r7, #12]
 8005c5e:	f023 0310 	bic.w	r3, r3, #16
 8005c62:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8005c64:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005c66:	681b      	ldr	r3, [r3, #0]
 8005c68:	330c      	adds	r3, #12
 8005c6a:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8005c6c:	61fa      	str	r2, [r7, #28]
 8005c6e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c70:	69b9      	ldr	r1, [r7, #24]
 8005c72:	69fa      	ldr	r2, [r7, #28]
 8005c74:	e841 2300 	strex	r3, r2, [r1]
 8005c78:	617b      	str	r3, [r7, #20]
   return(result);
 8005c7a:	697b      	ldr	r3, [r7, #20]
 8005c7c:	2b00      	cmp	r3, #0
 8005c7e:	d1e5      	bne.n	8005c4c <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
   In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005c80:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005c82:	2200      	movs	r2, #0
 8005c84:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005c86:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005c88:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005c8a:	2b01      	cmp	r3, #1
 8005c8c:	d106      	bne.n	8005c9c <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005c8e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005c90:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8005c92:	4619      	mov	r1, r3
 8005c94:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8005c96:	f7ff ff0b 	bl	8005ab0 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8005c9a:	e002      	b.n	8005ca2 <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 8005c9c:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8005c9e:	f7ff fee9 	bl	8005a74 <HAL_UART_RxCpltCallback>
}
 8005ca2:	bf00      	nop
 8005ca4:	3770      	adds	r7, #112	@ 0x70
 8005ca6:	46bd      	mov	sp, r7
 8005ca8:	bd80      	pop	{r7, pc}

08005caa <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8005caa:	b580      	push	{r7, lr}
 8005cac:	b084      	sub	sp, #16
 8005cae:	af00      	add	r7, sp, #0
 8005cb0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005cb6:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 8005cb8:	68fb      	ldr	r3, [r7, #12]
 8005cba:	2201      	movs	r2, #1
 8005cbc:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005cbe:	68fb      	ldr	r3, [r7, #12]
 8005cc0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005cc2:	2b01      	cmp	r3, #1
 8005cc4:	d108      	bne.n	8005cd8 <UART_DMARxHalfCplt+0x2e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8005cc6:	68fb      	ldr	r3, [r7, #12]
 8005cc8:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8005cca:	085b      	lsrs	r3, r3, #1
 8005ccc:	b29b      	uxth	r3, r3
 8005cce:	4619      	mov	r1, r3
 8005cd0:	68f8      	ldr	r0, [r7, #12]
 8005cd2:	f7ff feed 	bl	8005ab0 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8005cd6:	e002      	b.n	8005cde <UART_DMARxHalfCplt+0x34>
    HAL_UART_RxHalfCpltCallback(huart);
 8005cd8:	68f8      	ldr	r0, [r7, #12]
 8005cda:	f7ff fed5 	bl	8005a88 <HAL_UART_RxHalfCpltCallback>
}
 8005cde:	bf00      	nop
 8005ce0:	3710      	adds	r7, #16
 8005ce2:	46bd      	mov	sp, r7
 8005ce4:	bd80      	pop	{r7, pc}

08005ce6 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8005ce6:	b580      	push	{r7, lr}
 8005ce8:	b084      	sub	sp, #16
 8005cea:	af00      	add	r7, sp, #0
 8005cec:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8005cee:	2300      	movs	r3, #0
 8005cf0:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005cf6:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8005cf8:	68bb      	ldr	r3, [r7, #8]
 8005cfa:	681b      	ldr	r3, [r3, #0]
 8005cfc:	695b      	ldr	r3, [r3, #20]
 8005cfe:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005d02:	2b80      	cmp	r3, #128	@ 0x80
 8005d04:	bf0c      	ite	eq
 8005d06:	2301      	moveq	r3, #1
 8005d08:	2300      	movne	r3, #0
 8005d0a:	b2db      	uxtb	r3, r3
 8005d0c:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8005d0e:	68bb      	ldr	r3, [r7, #8]
 8005d10:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005d14:	b2db      	uxtb	r3, r3
 8005d16:	2b21      	cmp	r3, #33	@ 0x21
 8005d18:	d108      	bne.n	8005d2c <UART_DMAError+0x46>
 8005d1a:	68fb      	ldr	r3, [r7, #12]
 8005d1c:	2b00      	cmp	r3, #0
 8005d1e:	d005      	beq.n	8005d2c <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8005d20:	68bb      	ldr	r3, [r7, #8]
 8005d22:	2200      	movs	r2, #0
 8005d24:	84da      	strh	r2, [r3, #38]	@ 0x26
    UART_EndTxTransfer(huart);
 8005d26:	68b8      	ldr	r0, [r7, #8]
 8005d28:	f000 f8c2 	bl	8005eb0 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8005d2c:	68bb      	ldr	r3, [r7, #8]
 8005d2e:	681b      	ldr	r3, [r3, #0]
 8005d30:	695b      	ldr	r3, [r3, #20]
 8005d32:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005d36:	2b40      	cmp	r3, #64	@ 0x40
 8005d38:	bf0c      	ite	eq
 8005d3a:	2301      	moveq	r3, #1
 8005d3c:	2300      	movne	r3, #0
 8005d3e:	b2db      	uxtb	r3, r3
 8005d40:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8005d42:	68bb      	ldr	r3, [r7, #8]
 8005d44:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8005d48:	b2db      	uxtb	r3, r3
 8005d4a:	2b22      	cmp	r3, #34	@ 0x22
 8005d4c:	d108      	bne.n	8005d60 <UART_DMAError+0x7a>
 8005d4e:	68fb      	ldr	r3, [r7, #12]
 8005d50:	2b00      	cmp	r3, #0
 8005d52:	d005      	beq.n	8005d60 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8005d54:	68bb      	ldr	r3, [r7, #8]
 8005d56:	2200      	movs	r2, #0
 8005d58:	85da      	strh	r2, [r3, #46]	@ 0x2e
    UART_EndRxTransfer(huart);
 8005d5a:	68b8      	ldr	r0, [r7, #8]
 8005d5c:	f000 f8d0 	bl	8005f00 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8005d60:	68bb      	ldr	r3, [r7, #8]
 8005d62:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005d64:	f043 0210 	orr.w	r2, r3, #16
 8005d68:	68bb      	ldr	r3, [r7, #8]
 8005d6a:	645a      	str	r2, [r3, #68]	@ 0x44
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005d6c:	68b8      	ldr	r0, [r7, #8]
 8005d6e:	f7ff fe95 	bl	8005a9c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005d72:	bf00      	nop
 8005d74:	3710      	adds	r7, #16
 8005d76:	46bd      	mov	sp, r7
 8005d78:	bd80      	pop	{r7, pc}
	...

08005d7c <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005d7c:	b580      	push	{r7, lr}
 8005d7e:	b098      	sub	sp, #96	@ 0x60
 8005d80:	af00      	add	r7, sp, #0
 8005d82:	60f8      	str	r0, [r7, #12]
 8005d84:	60b9      	str	r1, [r7, #8]
 8005d86:	4613      	mov	r3, r2
 8005d88:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 8005d8a:	68ba      	ldr	r2, [r7, #8]
 8005d8c:	68fb      	ldr	r3, [r7, #12]
 8005d8e:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 8005d90:	68fb      	ldr	r3, [r7, #12]
 8005d92:	88fa      	ldrh	r2, [r7, #6]
 8005d94:	859a      	strh	r2, [r3, #44]	@ 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005d96:	68fb      	ldr	r3, [r7, #12]
 8005d98:	2200      	movs	r2, #0
 8005d9a:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005d9c:	68fb      	ldr	r3, [r7, #12]
 8005d9e:	2222      	movs	r2, #34	@ 0x22
 8005da0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8005da4:	68fb      	ldr	r3, [r7, #12]
 8005da6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005da8:	4a3e      	ldr	r2, [pc, #248]	@ (8005ea4 <UART_Start_Receive_DMA+0x128>)
 8005daa:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8005dac:	68fb      	ldr	r3, [r7, #12]
 8005dae:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005db0:	4a3d      	ldr	r2, [pc, #244]	@ (8005ea8 <UART_Start_Receive_DMA+0x12c>)
 8005db2:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 8005db4:	68fb      	ldr	r3, [r7, #12]
 8005db6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005db8:	4a3c      	ldr	r2, [pc, #240]	@ (8005eac <UART_Start_Receive_DMA+0x130>)
 8005dba:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 8005dbc:	68fb      	ldr	r3, [r7, #12]
 8005dbe:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005dc0:	2200      	movs	r2, #0
 8005dc2:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 8005dc4:	f107 0308 	add.w	r3, r7, #8
 8005dc8:	65fb      	str	r3, [r7, #92]	@ 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8005dca:	68fb      	ldr	r3, [r7, #12]
 8005dcc:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 8005dce:	68fb      	ldr	r3, [r7, #12]
 8005dd0:	681b      	ldr	r3, [r3, #0]
 8005dd2:	3304      	adds	r3, #4
 8005dd4:	4619      	mov	r1, r3
 8005dd6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005dd8:	681a      	ldr	r2, [r3, #0]
 8005dda:	88fb      	ldrh	r3, [r7, #6]
 8005ddc:	f7fd f872 	bl	8002ec4 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 8005de0:	2300      	movs	r3, #0
 8005de2:	613b      	str	r3, [r7, #16]
 8005de4:	68fb      	ldr	r3, [r7, #12]
 8005de6:	681b      	ldr	r3, [r3, #0]
 8005de8:	681b      	ldr	r3, [r3, #0]
 8005dea:	613b      	str	r3, [r7, #16]
 8005dec:	68fb      	ldr	r3, [r7, #12]
 8005dee:	681b      	ldr	r3, [r3, #0]
 8005df0:	685b      	ldr	r3, [r3, #4]
 8005df2:	613b      	str	r3, [r7, #16]
 8005df4:	693b      	ldr	r3, [r7, #16]

  if (huart->Init.Parity != UART_PARITY_NONE)
 8005df6:	68fb      	ldr	r3, [r7, #12]
 8005df8:	691b      	ldr	r3, [r3, #16]
 8005dfa:	2b00      	cmp	r3, #0
 8005dfc:	d019      	beq.n	8005e32 <UART_Start_Receive_DMA+0xb6>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005dfe:	68fb      	ldr	r3, [r7, #12]
 8005e00:	681b      	ldr	r3, [r3, #0]
 8005e02:	330c      	adds	r3, #12
 8005e04:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e06:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005e08:	e853 3f00 	ldrex	r3, [r3]
 8005e0c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8005e0e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005e10:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005e14:	65bb      	str	r3, [r7, #88]	@ 0x58
 8005e16:	68fb      	ldr	r3, [r7, #12]
 8005e18:	681b      	ldr	r3, [r3, #0]
 8005e1a:	330c      	adds	r3, #12
 8005e1c:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8005e1e:	64fa      	str	r2, [r7, #76]	@ 0x4c
 8005e20:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e22:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 8005e24:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8005e26:	e841 2300 	strex	r3, r2, [r1]
 8005e2a:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 8005e2c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005e2e:	2b00      	cmp	r3, #0
 8005e30:	d1e5      	bne.n	8005dfe <UART_Start_Receive_DMA+0x82>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005e32:	68fb      	ldr	r3, [r7, #12]
 8005e34:	681b      	ldr	r3, [r3, #0]
 8005e36:	3314      	adds	r3, #20
 8005e38:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e3a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005e3c:	e853 3f00 	ldrex	r3, [r3]
 8005e40:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8005e42:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005e44:	f043 0301 	orr.w	r3, r3, #1
 8005e48:	657b      	str	r3, [r7, #84]	@ 0x54
 8005e4a:	68fb      	ldr	r3, [r7, #12]
 8005e4c:	681b      	ldr	r3, [r3, #0]
 8005e4e:	3314      	adds	r3, #20
 8005e50:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8005e52:	63ba      	str	r2, [r7, #56]	@ 0x38
 8005e54:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e56:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8005e58:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8005e5a:	e841 2300 	strex	r3, r2, [r1]
 8005e5e:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8005e60:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005e62:	2b00      	cmp	r3, #0
 8005e64:	d1e5      	bne.n	8005e32 <UART_Start_Receive_DMA+0xb6>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005e66:	68fb      	ldr	r3, [r7, #12]
 8005e68:	681b      	ldr	r3, [r3, #0]
 8005e6a:	3314      	adds	r3, #20
 8005e6c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e6e:	69bb      	ldr	r3, [r7, #24]
 8005e70:	e853 3f00 	ldrex	r3, [r3]
 8005e74:	617b      	str	r3, [r7, #20]
   return(result);
 8005e76:	697b      	ldr	r3, [r7, #20]
 8005e78:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005e7c:	653b      	str	r3, [r7, #80]	@ 0x50
 8005e7e:	68fb      	ldr	r3, [r7, #12]
 8005e80:	681b      	ldr	r3, [r3, #0]
 8005e82:	3314      	adds	r3, #20
 8005e84:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8005e86:	627a      	str	r2, [r7, #36]	@ 0x24
 8005e88:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e8a:	6a39      	ldr	r1, [r7, #32]
 8005e8c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005e8e:	e841 2300 	strex	r3, r2, [r1]
 8005e92:	61fb      	str	r3, [r7, #28]
   return(result);
 8005e94:	69fb      	ldr	r3, [r7, #28]
 8005e96:	2b00      	cmp	r3, #0
 8005e98:	d1e5      	bne.n	8005e66 <UART_Start_Receive_DMA+0xea>

  return HAL_OK;
 8005e9a:	2300      	movs	r3, #0
}
 8005e9c:	4618      	mov	r0, r3
 8005e9e:	3760      	adds	r7, #96	@ 0x60
 8005ea0:	46bd      	mov	sp, r7
 8005ea2:	bd80      	pop	{r7, pc}
 8005ea4:	08005b7f 	.word	0x08005b7f
 8005ea8:	08005cab 	.word	0x08005cab
 8005eac:	08005ce7 	.word	0x08005ce7

08005eb0 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8005eb0:	b480      	push	{r7}
 8005eb2:	b089      	sub	sp, #36	@ 0x24
 8005eb4:	af00      	add	r7, sp, #0
 8005eb6:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	681b      	ldr	r3, [r3, #0]
 8005ebc:	330c      	adds	r3, #12
 8005ebe:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ec0:	68fb      	ldr	r3, [r7, #12]
 8005ec2:	e853 3f00 	ldrex	r3, [r3]
 8005ec6:	60bb      	str	r3, [r7, #8]
   return(result);
 8005ec8:	68bb      	ldr	r3, [r7, #8]
 8005eca:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8005ece:	61fb      	str	r3, [r7, #28]
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	681b      	ldr	r3, [r3, #0]
 8005ed4:	330c      	adds	r3, #12
 8005ed6:	69fa      	ldr	r2, [r7, #28]
 8005ed8:	61ba      	str	r2, [r7, #24]
 8005eda:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005edc:	6979      	ldr	r1, [r7, #20]
 8005ede:	69ba      	ldr	r2, [r7, #24]
 8005ee0:	e841 2300 	strex	r3, r2, [r1]
 8005ee4:	613b      	str	r3, [r7, #16]
   return(result);
 8005ee6:	693b      	ldr	r3, [r7, #16]
 8005ee8:	2b00      	cmp	r3, #0
 8005eea:	d1e5      	bne.n	8005eb8 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	2220      	movs	r2, #32
 8005ef0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
}
 8005ef4:	bf00      	nop
 8005ef6:	3724      	adds	r7, #36	@ 0x24
 8005ef8:	46bd      	mov	sp, r7
 8005efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005efe:	4770      	bx	lr

08005f00 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005f00:	b480      	push	{r7}
 8005f02:	b095      	sub	sp, #84	@ 0x54
 8005f04:	af00      	add	r7, sp, #0
 8005f06:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	681b      	ldr	r3, [r3, #0]
 8005f0c:	330c      	adds	r3, #12
 8005f0e:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f10:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005f12:	e853 3f00 	ldrex	r3, [r3]
 8005f16:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8005f18:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005f1a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005f1e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	681b      	ldr	r3, [r3, #0]
 8005f24:	330c      	adds	r3, #12
 8005f26:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8005f28:	643a      	str	r2, [r7, #64]	@ 0x40
 8005f2a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f2c:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8005f2e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8005f30:	e841 2300 	strex	r3, r2, [r1]
 8005f34:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8005f36:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005f38:	2b00      	cmp	r3, #0
 8005f3a:	d1e5      	bne.n	8005f08 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	681b      	ldr	r3, [r3, #0]
 8005f40:	3314      	adds	r3, #20
 8005f42:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f44:	6a3b      	ldr	r3, [r7, #32]
 8005f46:	e853 3f00 	ldrex	r3, [r3]
 8005f4a:	61fb      	str	r3, [r7, #28]
   return(result);
 8005f4c:	69fb      	ldr	r3, [r7, #28]
 8005f4e:	f023 0301 	bic.w	r3, r3, #1
 8005f52:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	681b      	ldr	r3, [r3, #0]
 8005f58:	3314      	adds	r3, #20
 8005f5a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005f5c:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005f5e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f60:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005f62:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005f64:	e841 2300 	strex	r3, r2, [r1]
 8005f68:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8005f6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005f6c:	2b00      	cmp	r3, #0
 8005f6e:	d1e5      	bne.n	8005f3c <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005f74:	2b01      	cmp	r3, #1
 8005f76:	d119      	bne.n	8005fac <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	681b      	ldr	r3, [r3, #0]
 8005f7c:	330c      	adds	r3, #12
 8005f7e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f80:	68fb      	ldr	r3, [r7, #12]
 8005f82:	e853 3f00 	ldrex	r3, [r3]
 8005f86:	60bb      	str	r3, [r7, #8]
   return(result);
 8005f88:	68bb      	ldr	r3, [r7, #8]
 8005f8a:	f023 0310 	bic.w	r3, r3, #16
 8005f8e:	647b      	str	r3, [r7, #68]	@ 0x44
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	681b      	ldr	r3, [r3, #0]
 8005f94:	330c      	adds	r3, #12
 8005f96:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005f98:	61ba      	str	r2, [r7, #24]
 8005f9a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f9c:	6979      	ldr	r1, [r7, #20]
 8005f9e:	69ba      	ldr	r2, [r7, #24]
 8005fa0:	e841 2300 	strex	r3, r2, [r1]
 8005fa4:	613b      	str	r3, [r7, #16]
   return(result);
 8005fa6:	693b      	ldr	r3, [r7, #16]
 8005fa8:	2b00      	cmp	r3, #0
 8005faa:	d1e5      	bne.n	8005f78 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	2220      	movs	r2, #32
 8005fb0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	2200      	movs	r2, #0
 8005fb8:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8005fba:	bf00      	nop
 8005fbc:	3754      	adds	r7, #84	@ 0x54
 8005fbe:	46bd      	mov	sp, r7
 8005fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fc4:	4770      	bx	lr

08005fc6 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005fc6:	b580      	push	{r7, lr}
 8005fc8:	b084      	sub	sp, #16
 8005fca:	af00      	add	r7, sp, #0
 8005fcc:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005fd2:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8005fd4:	68fb      	ldr	r3, [r7, #12]
 8005fd6:	2200      	movs	r2, #0
 8005fd8:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 8005fda:	68fb      	ldr	r3, [r7, #12]
 8005fdc:	2200      	movs	r2, #0
 8005fde:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005fe0:	68f8      	ldr	r0, [r7, #12]
 8005fe2:	f7ff fd5b 	bl	8005a9c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005fe6:	bf00      	nop
 8005fe8:	3710      	adds	r7, #16
 8005fea:	46bd      	mov	sp, r7
 8005fec:	bd80      	pop	{r7, pc}

08005fee <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8005fee:	b480      	push	{r7}
 8005ff0:	b085      	sub	sp, #20
 8005ff2:	af00      	add	r7, sp, #0
 8005ff4:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005ffc:	b2db      	uxtb	r3, r3
 8005ffe:	2b21      	cmp	r3, #33	@ 0x21
 8006000:	d13e      	bne.n	8006080 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	689b      	ldr	r3, [r3, #8]
 8006006:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800600a:	d114      	bne.n	8006036 <UART_Transmit_IT+0x48>
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	691b      	ldr	r3, [r3, #16]
 8006010:	2b00      	cmp	r3, #0
 8006012:	d110      	bne.n	8006036 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	6a1b      	ldr	r3, [r3, #32]
 8006018:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800601a:	68fb      	ldr	r3, [r7, #12]
 800601c:	881b      	ldrh	r3, [r3, #0]
 800601e:	461a      	mov	r2, r3
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	681b      	ldr	r3, [r3, #0]
 8006024:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006028:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	6a1b      	ldr	r3, [r3, #32]
 800602e:	1c9a      	adds	r2, r3, #2
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	621a      	str	r2, [r3, #32]
 8006034:	e008      	b.n	8006048 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	6a1b      	ldr	r3, [r3, #32]
 800603a:	1c59      	adds	r1, r3, #1
 800603c:	687a      	ldr	r2, [r7, #4]
 800603e:	6211      	str	r1, [r2, #32]
 8006040:	781a      	ldrb	r2, [r3, #0]
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	681b      	ldr	r3, [r3, #0]
 8006046:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800604c:	b29b      	uxth	r3, r3
 800604e:	3b01      	subs	r3, #1
 8006050:	b29b      	uxth	r3, r3
 8006052:	687a      	ldr	r2, [r7, #4]
 8006054:	4619      	mov	r1, r3
 8006056:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8006058:	2b00      	cmp	r3, #0
 800605a:	d10f      	bne.n	800607c <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	681b      	ldr	r3, [r3, #0]
 8006060:	68da      	ldr	r2, [r3, #12]
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	681b      	ldr	r3, [r3, #0]
 8006066:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800606a:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	681b      	ldr	r3, [r3, #0]
 8006070:	68da      	ldr	r2, [r3, #12]
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	681b      	ldr	r3, [r3, #0]
 8006076:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800607a:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800607c:	2300      	movs	r3, #0
 800607e:	e000      	b.n	8006082 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8006080:	2302      	movs	r3, #2
  }
}
 8006082:	4618      	mov	r0, r3
 8006084:	3714      	adds	r7, #20
 8006086:	46bd      	mov	sp, r7
 8006088:	f85d 7b04 	ldr.w	r7, [sp], #4
 800608c:	4770      	bx	lr

0800608e <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800608e:	b580      	push	{r7, lr}
 8006090:	b082      	sub	sp, #8
 8006092:	af00      	add	r7, sp, #0
 8006094:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	681b      	ldr	r3, [r3, #0]
 800609a:	68da      	ldr	r2, [r3, #12]
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	681b      	ldr	r3, [r3, #0]
 80060a0:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80060a4:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	2220      	movs	r2, #32
 80060aa:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80060ae:	6878      	ldr	r0, [r7, #4]
 80060b0:	f7ff fccc 	bl	8005a4c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80060b4:	2300      	movs	r3, #0
}
 80060b6:	4618      	mov	r0, r3
 80060b8:	3708      	adds	r7, #8
 80060ba:	46bd      	mov	sp, r7
 80060bc:	bd80      	pop	{r7, pc}

080060be <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80060be:	b580      	push	{r7, lr}
 80060c0:	b08c      	sub	sp, #48	@ 0x30
 80060c2:	af00      	add	r7, sp, #0
 80060c4:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80060cc:	b2db      	uxtb	r3, r3
 80060ce:	2b22      	cmp	r3, #34	@ 0x22
 80060d0:	f040 80ae 	bne.w	8006230 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	689b      	ldr	r3, [r3, #8]
 80060d8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80060dc:	d117      	bne.n	800610e <UART_Receive_IT+0x50>
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	691b      	ldr	r3, [r3, #16]
 80060e2:	2b00      	cmp	r3, #0
 80060e4:	d113      	bne.n	800610e <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80060e6:	2300      	movs	r3, #0
 80060e8:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80060ee:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	681b      	ldr	r3, [r3, #0]
 80060f4:	685b      	ldr	r3, [r3, #4]
 80060f6:	b29b      	uxth	r3, r3
 80060f8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80060fc:	b29a      	uxth	r2, r3
 80060fe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006100:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006106:	1c9a      	adds	r2, r3, #2
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	629a      	str	r2, [r3, #40]	@ 0x28
 800610c:	e026      	b.n	800615c <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006112:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 8006114:	2300      	movs	r3, #0
 8006116:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	689b      	ldr	r3, [r3, #8]
 800611c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006120:	d007      	beq.n	8006132 <UART_Receive_IT+0x74>
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	689b      	ldr	r3, [r3, #8]
 8006126:	2b00      	cmp	r3, #0
 8006128:	d10a      	bne.n	8006140 <UART_Receive_IT+0x82>
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	691b      	ldr	r3, [r3, #16]
 800612e:	2b00      	cmp	r3, #0
 8006130:	d106      	bne.n	8006140 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	681b      	ldr	r3, [r3, #0]
 8006136:	685b      	ldr	r3, [r3, #4]
 8006138:	b2da      	uxtb	r2, r3
 800613a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800613c:	701a      	strb	r2, [r3, #0]
 800613e:	e008      	b.n	8006152 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	681b      	ldr	r3, [r3, #0]
 8006144:	685b      	ldr	r3, [r3, #4]
 8006146:	b2db      	uxtb	r3, r3
 8006148:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800614c:	b2da      	uxtb	r2, r3
 800614e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006150:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006156:	1c5a      	adds	r2, r3, #1
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8006160:	b29b      	uxth	r3, r3
 8006162:	3b01      	subs	r3, #1
 8006164:	b29b      	uxth	r3, r3
 8006166:	687a      	ldr	r2, [r7, #4]
 8006168:	4619      	mov	r1, r3
 800616a:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 800616c:	2b00      	cmp	r3, #0
 800616e:	d15d      	bne.n	800622c <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	681b      	ldr	r3, [r3, #0]
 8006174:	68da      	ldr	r2, [r3, #12]
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	681b      	ldr	r3, [r3, #0]
 800617a:	f022 0220 	bic.w	r2, r2, #32
 800617e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	681b      	ldr	r3, [r3, #0]
 8006184:	68da      	ldr	r2, [r3, #12]
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	681b      	ldr	r3, [r3, #0]
 800618a:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800618e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	681b      	ldr	r3, [r3, #0]
 8006194:	695a      	ldr	r2, [r3, #20]
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	681b      	ldr	r3, [r3, #0]
 800619a:	f022 0201 	bic.w	r2, r2, #1
 800619e:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	2220      	movs	r2, #32
 80061a4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	2200      	movs	r2, #0
 80061ac:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80061b2:	2b01      	cmp	r3, #1
 80061b4:	d135      	bne.n	8006222 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	2200      	movs	r2, #0
 80061ba:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	681b      	ldr	r3, [r3, #0]
 80061c0:	330c      	adds	r3, #12
 80061c2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80061c4:	697b      	ldr	r3, [r7, #20]
 80061c6:	e853 3f00 	ldrex	r3, [r3]
 80061ca:	613b      	str	r3, [r7, #16]
   return(result);
 80061cc:	693b      	ldr	r3, [r7, #16]
 80061ce:	f023 0310 	bic.w	r3, r3, #16
 80061d2:	627b      	str	r3, [r7, #36]	@ 0x24
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	681b      	ldr	r3, [r3, #0]
 80061d8:	330c      	adds	r3, #12
 80061da:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80061dc:	623a      	str	r2, [r7, #32]
 80061de:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80061e0:	69f9      	ldr	r1, [r7, #28]
 80061e2:	6a3a      	ldr	r2, [r7, #32]
 80061e4:	e841 2300 	strex	r3, r2, [r1]
 80061e8:	61bb      	str	r3, [r7, #24]
   return(result);
 80061ea:	69bb      	ldr	r3, [r7, #24]
 80061ec:	2b00      	cmp	r3, #0
 80061ee:	d1e5      	bne.n	80061bc <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	681b      	ldr	r3, [r3, #0]
 80061f4:	681b      	ldr	r3, [r3, #0]
 80061f6:	f003 0310 	and.w	r3, r3, #16
 80061fa:	2b10      	cmp	r3, #16
 80061fc:	d10a      	bne.n	8006214 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80061fe:	2300      	movs	r3, #0
 8006200:	60fb      	str	r3, [r7, #12]
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	681b      	ldr	r3, [r3, #0]
 8006206:	681b      	ldr	r3, [r3, #0]
 8006208:	60fb      	str	r3, [r7, #12]
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	681b      	ldr	r3, [r3, #0]
 800620e:	685b      	ldr	r3, [r3, #4]
 8006210:	60fb      	str	r3, [r7, #12]
 8006212:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8006218:	4619      	mov	r1, r3
 800621a:	6878      	ldr	r0, [r7, #4]
 800621c:	f7ff fc48 	bl	8005ab0 <HAL_UARTEx_RxEventCallback>
 8006220:	e002      	b.n	8006228 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8006222:	6878      	ldr	r0, [r7, #4]
 8006224:	f7ff fc26 	bl	8005a74 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8006228:	2300      	movs	r3, #0
 800622a:	e002      	b.n	8006232 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 800622c:	2300      	movs	r3, #0
 800622e:	e000      	b.n	8006232 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8006230:	2302      	movs	r3, #2
  }
}
 8006232:	4618      	mov	r0, r3
 8006234:	3730      	adds	r7, #48	@ 0x30
 8006236:	46bd      	mov	sp, r7
 8006238:	bd80      	pop	{r7, pc}
	...

0800623c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800623c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006240:	b0c0      	sub	sp, #256	@ 0x100
 8006242:	af00      	add	r7, sp, #0
 8006244:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006248:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800624c:	681b      	ldr	r3, [r3, #0]
 800624e:	691b      	ldr	r3, [r3, #16]
 8006250:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8006254:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006258:	68d9      	ldr	r1, [r3, #12]
 800625a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800625e:	681a      	ldr	r2, [r3, #0]
 8006260:	ea40 0301 	orr.w	r3, r0, r1
 8006264:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8006266:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800626a:	689a      	ldr	r2, [r3, #8]
 800626c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006270:	691b      	ldr	r3, [r3, #16]
 8006272:	431a      	orrs	r2, r3
 8006274:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006278:	695b      	ldr	r3, [r3, #20]
 800627a:	431a      	orrs	r2, r3
 800627c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006280:	69db      	ldr	r3, [r3, #28]
 8006282:	4313      	orrs	r3, r2
 8006284:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8006288:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800628c:	681b      	ldr	r3, [r3, #0]
 800628e:	68db      	ldr	r3, [r3, #12]
 8006290:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8006294:	f021 010c 	bic.w	r1, r1, #12
 8006298:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800629c:	681a      	ldr	r2, [r3, #0]
 800629e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80062a2:	430b      	orrs	r3, r1
 80062a4:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80062a6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80062aa:	681b      	ldr	r3, [r3, #0]
 80062ac:	695b      	ldr	r3, [r3, #20]
 80062ae:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 80062b2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80062b6:	6999      	ldr	r1, [r3, #24]
 80062b8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80062bc:	681a      	ldr	r2, [r3, #0]
 80062be:	ea40 0301 	orr.w	r3, r0, r1
 80062c2:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80062c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80062c8:	681a      	ldr	r2, [r3, #0]
 80062ca:	4b8f      	ldr	r3, [pc, #572]	@ (8006508 <UART_SetConfig+0x2cc>)
 80062cc:	429a      	cmp	r2, r3
 80062ce:	d005      	beq.n	80062dc <UART_SetConfig+0xa0>
 80062d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80062d4:	681a      	ldr	r2, [r3, #0]
 80062d6:	4b8d      	ldr	r3, [pc, #564]	@ (800650c <UART_SetConfig+0x2d0>)
 80062d8:	429a      	cmp	r2, r3
 80062da:	d104      	bne.n	80062e6 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80062dc:	f7fd ff68 	bl	80041b0 <HAL_RCC_GetPCLK2Freq>
 80062e0:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 80062e4:	e003      	b.n	80062ee <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80062e6:	f7fd ff4f 	bl	8004188 <HAL_RCC_GetPCLK1Freq>
 80062ea:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80062ee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80062f2:	69db      	ldr	r3, [r3, #28]
 80062f4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80062f8:	f040 810c 	bne.w	8006514 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80062fc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006300:	2200      	movs	r2, #0
 8006302:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8006306:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 800630a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 800630e:	4622      	mov	r2, r4
 8006310:	462b      	mov	r3, r5
 8006312:	1891      	adds	r1, r2, r2
 8006314:	65b9      	str	r1, [r7, #88]	@ 0x58
 8006316:	415b      	adcs	r3, r3
 8006318:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800631a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 800631e:	4621      	mov	r1, r4
 8006320:	eb12 0801 	adds.w	r8, r2, r1
 8006324:	4629      	mov	r1, r5
 8006326:	eb43 0901 	adc.w	r9, r3, r1
 800632a:	f04f 0200 	mov.w	r2, #0
 800632e:	f04f 0300 	mov.w	r3, #0
 8006332:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8006336:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800633a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800633e:	4690      	mov	r8, r2
 8006340:	4699      	mov	r9, r3
 8006342:	4623      	mov	r3, r4
 8006344:	eb18 0303 	adds.w	r3, r8, r3
 8006348:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800634c:	462b      	mov	r3, r5
 800634e:	eb49 0303 	adc.w	r3, r9, r3
 8006352:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8006356:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800635a:	685b      	ldr	r3, [r3, #4]
 800635c:	2200      	movs	r2, #0
 800635e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8006362:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8006366:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800636a:	460b      	mov	r3, r1
 800636c:	18db      	adds	r3, r3, r3
 800636e:	653b      	str	r3, [r7, #80]	@ 0x50
 8006370:	4613      	mov	r3, r2
 8006372:	eb42 0303 	adc.w	r3, r2, r3
 8006376:	657b      	str	r3, [r7, #84]	@ 0x54
 8006378:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 800637c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8006380:	f7fa fc24 	bl	8000bcc <__aeabi_uldivmod>
 8006384:	4602      	mov	r2, r0
 8006386:	460b      	mov	r3, r1
 8006388:	4b61      	ldr	r3, [pc, #388]	@ (8006510 <UART_SetConfig+0x2d4>)
 800638a:	fba3 2302 	umull	r2, r3, r3, r2
 800638e:	095b      	lsrs	r3, r3, #5
 8006390:	011c      	lsls	r4, r3, #4
 8006392:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006396:	2200      	movs	r2, #0
 8006398:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800639c:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 80063a0:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 80063a4:	4642      	mov	r2, r8
 80063a6:	464b      	mov	r3, r9
 80063a8:	1891      	adds	r1, r2, r2
 80063aa:	64b9      	str	r1, [r7, #72]	@ 0x48
 80063ac:	415b      	adcs	r3, r3
 80063ae:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80063b0:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 80063b4:	4641      	mov	r1, r8
 80063b6:	eb12 0a01 	adds.w	sl, r2, r1
 80063ba:	4649      	mov	r1, r9
 80063bc:	eb43 0b01 	adc.w	fp, r3, r1
 80063c0:	f04f 0200 	mov.w	r2, #0
 80063c4:	f04f 0300 	mov.w	r3, #0
 80063c8:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80063cc:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80063d0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80063d4:	4692      	mov	sl, r2
 80063d6:	469b      	mov	fp, r3
 80063d8:	4643      	mov	r3, r8
 80063da:	eb1a 0303 	adds.w	r3, sl, r3
 80063de:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80063e2:	464b      	mov	r3, r9
 80063e4:	eb4b 0303 	adc.w	r3, fp, r3
 80063e8:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80063ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80063f0:	685b      	ldr	r3, [r3, #4]
 80063f2:	2200      	movs	r2, #0
 80063f4:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80063f8:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 80063fc:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8006400:	460b      	mov	r3, r1
 8006402:	18db      	adds	r3, r3, r3
 8006404:	643b      	str	r3, [r7, #64]	@ 0x40
 8006406:	4613      	mov	r3, r2
 8006408:	eb42 0303 	adc.w	r3, r2, r3
 800640c:	647b      	str	r3, [r7, #68]	@ 0x44
 800640e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8006412:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8006416:	f7fa fbd9 	bl	8000bcc <__aeabi_uldivmod>
 800641a:	4602      	mov	r2, r0
 800641c:	460b      	mov	r3, r1
 800641e:	4611      	mov	r1, r2
 8006420:	4b3b      	ldr	r3, [pc, #236]	@ (8006510 <UART_SetConfig+0x2d4>)
 8006422:	fba3 2301 	umull	r2, r3, r3, r1
 8006426:	095b      	lsrs	r3, r3, #5
 8006428:	2264      	movs	r2, #100	@ 0x64
 800642a:	fb02 f303 	mul.w	r3, r2, r3
 800642e:	1acb      	subs	r3, r1, r3
 8006430:	00db      	lsls	r3, r3, #3
 8006432:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8006436:	4b36      	ldr	r3, [pc, #216]	@ (8006510 <UART_SetConfig+0x2d4>)
 8006438:	fba3 2302 	umull	r2, r3, r3, r2
 800643c:	095b      	lsrs	r3, r3, #5
 800643e:	005b      	lsls	r3, r3, #1
 8006440:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8006444:	441c      	add	r4, r3
 8006446:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800644a:	2200      	movs	r2, #0
 800644c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8006450:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8006454:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8006458:	4642      	mov	r2, r8
 800645a:	464b      	mov	r3, r9
 800645c:	1891      	adds	r1, r2, r2
 800645e:	63b9      	str	r1, [r7, #56]	@ 0x38
 8006460:	415b      	adcs	r3, r3
 8006462:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006464:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8006468:	4641      	mov	r1, r8
 800646a:	1851      	adds	r1, r2, r1
 800646c:	6339      	str	r1, [r7, #48]	@ 0x30
 800646e:	4649      	mov	r1, r9
 8006470:	414b      	adcs	r3, r1
 8006472:	637b      	str	r3, [r7, #52]	@ 0x34
 8006474:	f04f 0200 	mov.w	r2, #0
 8006478:	f04f 0300 	mov.w	r3, #0
 800647c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8006480:	4659      	mov	r1, fp
 8006482:	00cb      	lsls	r3, r1, #3
 8006484:	4651      	mov	r1, sl
 8006486:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800648a:	4651      	mov	r1, sl
 800648c:	00ca      	lsls	r2, r1, #3
 800648e:	4610      	mov	r0, r2
 8006490:	4619      	mov	r1, r3
 8006492:	4603      	mov	r3, r0
 8006494:	4642      	mov	r2, r8
 8006496:	189b      	adds	r3, r3, r2
 8006498:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800649c:	464b      	mov	r3, r9
 800649e:	460a      	mov	r2, r1
 80064a0:	eb42 0303 	adc.w	r3, r2, r3
 80064a4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80064a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80064ac:	685b      	ldr	r3, [r3, #4]
 80064ae:	2200      	movs	r2, #0
 80064b0:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80064b4:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 80064b8:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 80064bc:	460b      	mov	r3, r1
 80064be:	18db      	adds	r3, r3, r3
 80064c0:	62bb      	str	r3, [r7, #40]	@ 0x28
 80064c2:	4613      	mov	r3, r2
 80064c4:	eb42 0303 	adc.w	r3, r2, r3
 80064c8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80064ca:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80064ce:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 80064d2:	f7fa fb7b 	bl	8000bcc <__aeabi_uldivmod>
 80064d6:	4602      	mov	r2, r0
 80064d8:	460b      	mov	r3, r1
 80064da:	4b0d      	ldr	r3, [pc, #52]	@ (8006510 <UART_SetConfig+0x2d4>)
 80064dc:	fba3 1302 	umull	r1, r3, r3, r2
 80064e0:	095b      	lsrs	r3, r3, #5
 80064e2:	2164      	movs	r1, #100	@ 0x64
 80064e4:	fb01 f303 	mul.w	r3, r1, r3
 80064e8:	1ad3      	subs	r3, r2, r3
 80064ea:	00db      	lsls	r3, r3, #3
 80064ec:	3332      	adds	r3, #50	@ 0x32
 80064ee:	4a08      	ldr	r2, [pc, #32]	@ (8006510 <UART_SetConfig+0x2d4>)
 80064f0:	fba2 2303 	umull	r2, r3, r2, r3
 80064f4:	095b      	lsrs	r3, r3, #5
 80064f6:	f003 0207 	and.w	r2, r3, #7
 80064fa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80064fe:	681b      	ldr	r3, [r3, #0]
 8006500:	4422      	add	r2, r4
 8006502:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8006504:	e106      	b.n	8006714 <UART_SetConfig+0x4d8>
 8006506:	bf00      	nop
 8006508:	40011000 	.word	0x40011000
 800650c:	40011400 	.word	0x40011400
 8006510:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006514:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006518:	2200      	movs	r2, #0
 800651a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800651e:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8006522:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8006526:	4642      	mov	r2, r8
 8006528:	464b      	mov	r3, r9
 800652a:	1891      	adds	r1, r2, r2
 800652c:	6239      	str	r1, [r7, #32]
 800652e:	415b      	adcs	r3, r3
 8006530:	627b      	str	r3, [r7, #36]	@ 0x24
 8006532:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8006536:	4641      	mov	r1, r8
 8006538:	1854      	adds	r4, r2, r1
 800653a:	4649      	mov	r1, r9
 800653c:	eb43 0501 	adc.w	r5, r3, r1
 8006540:	f04f 0200 	mov.w	r2, #0
 8006544:	f04f 0300 	mov.w	r3, #0
 8006548:	00eb      	lsls	r3, r5, #3
 800654a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800654e:	00e2      	lsls	r2, r4, #3
 8006550:	4614      	mov	r4, r2
 8006552:	461d      	mov	r5, r3
 8006554:	4643      	mov	r3, r8
 8006556:	18e3      	adds	r3, r4, r3
 8006558:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800655c:	464b      	mov	r3, r9
 800655e:	eb45 0303 	adc.w	r3, r5, r3
 8006562:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8006566:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800656a:	685b      	ldr	r3, [r3, #4]
 800656c:	2200      	movs	r2, #0
 800656e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8006572:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8006576:	f04f 0200 	mov.w	r2, #0
 800657a:	f04f 0300 	mov.w	r3, #0
 800657e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8006582:	4629      	mov	r1, r5
 8006584:	008b      	lsls	r3, r1, #2
 8006586:	4621      	mov	r1, r4
 8006588:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800658c:	4621      	mov	r1, r4
 800658e:	008a      	lsls	r2, r1, #2
 8006590:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8006594:	f7fa fb1a 	bl	8000bcc <__aeabi_uldivmod>
 8006598:	4602      	mov	r2, r0
 800659a:	460b      	mov	r3, r1
 800659c:	4b60      	ldr	r3, [pc, #384]	@ (8006720 <UART_SetConfig+0x4e4>)
 800659e:	fba3 2302 	umull	r2, r3, r3, r2
 80065a2:	095b      	lsrs	r3, r3, #5
 80065a4:	011c      	lsls	r4, r3, #4
 80065a6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80065aa:	2200      	movs	r2, #0
 80065ac:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80065b0:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 80065b4:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 80065b8:	4642      	mov	r2, r8
 80065ba:	464b      	mov	r3, r9
 80065bc:	1891      	adds	r1, r2, r2
 80065be:	61b9      	str	r1, [r7, #24]
 80065c0:	415b      	adcs	r3, r3
 80065c2:	61fb      	str	r3, [r7, #28]
 80065c4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80065c8:	4641      	mov	r1, r8
 80065ca:	1851      	adds	r1, r2, r1
 80065cc:	6139      	str	r1, [r7, #16]
 80065ce:	4649      	mov	r1, r9
 80065d0:	414b      	adcs	r3, r1
 80065d2:	617b      	str	r3, [r7, #20]
 80065d4:	f04f 0200 	mov.w	r2, #0
 80065d8:	f04f 0300 	mov.w	r3, #0
 80065dc:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80065e0:	4659      	mov	r1, fp
 80065e2:	00cb      	lsls	r3, r1, #3
 80065e4:	4651      	mov	r1, sl
 80065e6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80065ea:	4651      	mov	r1, sl
 80065ec:	00ca      	lsls	r2, r1, #3
 80065ee:	4610      	mov	r0, r2
 80065f0:	4619      	mov	r1, r3
 80065f2:	4603      	mov	r3, r0
 80065f4:	4642      	mov	r2, r8
 80065f6:	189b      	adds	r3, r3, r2
 80065f8:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80065fc:	464b      	mov	r3, r9
 80065fe:	460a      	mov	r2, r1
 8006600:	eb42 0303 	adc.w	r3, r2, r3
 8006604:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8006608:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800660c:	685b      	ldr	r3, [r3, #4]
 800660e:	2200      	movs	r2, #0
 8006610:	67bb      	str	r3, [r7, #120]	@ 0x78
 8006612:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8006614:	f04f 0200 	mov.w	r2, #0
 8006618:	f04f 0300 	mov.w	r3, #0
 800661c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8006620:	4649      	mov	r1, r9
 8006622:	008b      	lsls	r3, r1, #2
 8006624:	4641      	mov	r1, r8
 8006626:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800662a:	4641      	mov	r1, r8
 800662c:	008a      	lsls	r2, r1, #2
 800662e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8006632:	f7fa facb 	bl	8000bcc <__aeabi_uldivmod>
 8006636:	4602      	mov	r2, r0
 8006638:	460b      	mov	r3, r1
 800663a:	4611      	mov	r1, r2
 800663c:	4b38      	ldr	r3, [pc, #224]	@ (8006720 <UART_SetConfig+0x4e4>)
 800663e:	fba3 2301 	umull	r2, r3, r3, r1
 8006642:	095b      	lsrs	r3, r3, #5
 8006644:	2264      	movs	r2, #100	@ 0x64
 8006646:	fb02 f303 	mul.w	r3, r2, r3
 800664a:	1acb      	subs	r3, r1, r3
 800664c:	011b      	lsls	r3, r3, #4
 800664e:	3332      	adds	r3, #50	@ 0x32
 8006650:	4a33      	ldr	r2, [pc, #204]	@ (8006720 <UART_SetConfig+0x4e4>)
 8006652:	fba2 2303 	umull	r2, r3, r2, r3
 8006656:	095b      	lsrs	r3, r3, #5
 8006658:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800665c:	441c      	add	r4, r3
 800665e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006662:	2200      	movs	r2, #0
 8006664:	673b      	str	r3, [r7, #112]	@ 0x70
 8006666:	677a      	str	r2, [r7, #116]	@ 0x74
 8006668:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 800666c:	4642      	mov	r2, r8
 800666e:	464b      	mov	r3, r9
 8006670:	1891      	adds	r1, r2, r2
 8006672:	60b9      	str	r1, [r7, #8]
 8006674:	415b      	adcs	r3, r3
 8006676:	60fb      	str	r3, [r7, #12]
 8006678:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800667c:	4641      	mov	r1, r8
 800667e:	1851      	adds	r1, r2, r1
 8006680:	6039      	str	r1, [r7, #0]
 8006682:	4649      	mov	r1, r9
 8006684:	414b      	adcs	r3, r1
 8006686:	607b      	str	r3, [r7, #4]
 8006688:	f04f 0200 	mov.w	r2, #0
 800668c:	f04f 0300 	mov.w	r3, #0
 8006690:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8006694:	4659      	mov	r1, fp
 8006696:	00cb      	lsls	r3, r1, #3
 8006698:	4651      	mov	r1, sl
 800669a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800669e:	4651      	mov	r1, sl
 80066a0:	00ca      	lsls	r2, r1, #3
 80066a2:	4610      	mov	r0, r2
 80066a4:	4619      	mov	r1, r3
 80066a6:	4603      	mov	r3, r0
 80066a8:	4642      	mov	r2, r8
 80066aa:	189b      	adds	r3, r3, r2
 80066ac:	66bb      	str	r3, [r7, #104]	@ 0x68
 80066ae:	464b      	mov	r3, r9
 80066b0:	460a      	mov	r2, r1
 80066b2:	eb42 0303 	adc.w	r3, r2, r3
 80066b6:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80066b8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80066bc:	685b      	ldr	r3, [r3, #4]
 80066be:	2200      	movs	r2, #0
 80066c0:	663b      	str	r3, [r7, #96]	@ 0x60
 80066c2:	667a      	str	r2, [r7, #100]	@ 0x64
 80066c4:	f04f 0200 	mov.w	r2, #0
 80066c8:	f04f 0300 	mov.w	r3, #0
 80066cc:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 80066d0:	4649      	mov	r1, r9
 80066d2:	008b      	lsls	r3, r1, #2
 80066d4:	4641      	mov	r1, r8
 80066d6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80066da:	4641      	mov	r1, r8
 80066dc:	008a      	lsls	r2, r1, #2
 80066de:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 80066e2:	f7fa fa73 	bl	8000bcc <__aeabi_uldivmod>
 80066e6:	4602      	mov	r2, r0
 80066e8:	460b      	mov	r3, r1
 80066ea:	4b0d      	ldr	r3, [pc, #52]	@ (8006720 <UART_SetConfig+0x4e4>)
 80066ec:	fba3 1302 	umull	r1, r3, r3, r2
 80066f0:	095b      	lsrs	r3, r3, #5
 80066f2:	2164      	movs	r1, #100	@ 0x64
 80066f4:	fb01 f303 	mul.w	r3, r1, r3
 80066f8:	1ad3      	subs	r3, r2, r3
 80066fa:	011b      	lsls	r3, r3, #4
 80066fc:	3332      	adds	r3, #50	@ 0x32
 80066fe:	4a08      	ldr	r2, [pc, #32]	@ (8006720 <UART_SetConfig+0x4e4>)
 8006700:	fba2 2303 	umull	r2, r3, r2, r3
 8006704:	095b      	lsrs	r3, r3, #5
 8006706:	f003 020f 	and.w	r2, r3, #15
 800670a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800670e:	681b      	ldr	r3, [r3, #0]
 8006710:	4422      	add	r2, r4
 8006712:	609a      	str	r2, [r3, #8]
}
 8006714:	bf00      	nop
 8006716:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 800671a:	46bd      	mov	sp, r7
 800671c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006720:	51eb851f 	.word	0x51eb851f

08006724 <__NVIC_SetPriority>:
{
 8006724:	b480      	push	{r7}
 8006726:	b083      	sub	sp, #12
 8006728:	af00      	add	r7, sp, #0
 800672a:	4603      	mov	r3, r0
 800672c:	6039      	str	r1, [r7, #0]
 800672e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006730:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006734:	2b00      	cmp	r3, #0
 8006736:	db0a      	blt.n	800674e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006738:	683b      	ldr	r3, [r7, #0]
 800673a:	b2da      	uxtb	r2, r3
 800673c:	490c      	ldr	r1, [pc, #48]	@ (8006770 <__NVIC_SetPriority+0x4c>)
 800673e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006742:	0112      	lsls	r2, r2, #4
 8006744:	b2d2      	uxtb	r2, r2
 8006746:	440b      	add	r3, r1
 8006748:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 800674c:	e00a      	b.n	8006764 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800674e:	683b      	ldr	r3, [r7, #0]
 8006750:	b2da      	uxtb	r2, r3
 8006752:	4908      	ldr	r1, [pc, #32]	@ (8006774 <__NVIC_SetPriority+0x50>)
 8006754:	79fb      	ldrb	r3, [r7, #7]
 8006756:	f003 030f 	and.w	r3, r3, #15
 800675a:	3b04      	subs	r3, #4
 800675c:	0112      	lsls	r2, r2, #4
 800675e:	b2d2      	uxtb	r2, r2
 8006760:	440b      	add	r3, r1
 8006762:	761a      	strb	r2, [r3, #24]
}
 8006764:	bf00      	nop
 8006766:	370c      	adds	r7, #12
 8006768:	46bd      	mov	sp, r7
 800676a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800676e:	4770      	bx	lr
 8006770:	e000e100 	.word	0xe000e100
 8006774:	e000ed00 	.word	0xe000ed00

08006778 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8006778:	b580      	push	{r7, lr}
 800677a:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 800677c:	4b05      	ldr	r3, [pc, #20]	@ (8006794 <SysTick_Handler+0x1c>)
 800677e:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8006780:	f001 fd40 	bl	8008204 <xTaskGetSchedulerState>
 8006784:	4603      	mov	r3, r0
 8006786:	2b01      	cmp	r3, #1
 8006788:	d001      	beq.n	800678e <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 800678a:	f002 fb35 	bl	8008df8 <xPortSysTickHandler>
  }
}
 800678e:	bf00      	nop
 8006790:	bd80      	pop	{r7, pc}
 8006792:	bf00      	nop
 8006794:	e000e010 	.word	0xe000e010

08006798 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8006798:	b580      	push	{r7, lr}
 800679a:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 800679c:	2100      	movs	r1, #0
 800679e:	f06f 0004 	mvn.w	r0, #4
 80067a2:	f7ff ffbf 	bl	8006724 <__NVIC_SetPriority>
#endif
}
 80067a6:	bf00      	nop
 80067a8:	bd80      	pop	{r7, pc}
	...

080067ac <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 80067ac:	b480      	push	{r7}
 80067ae:	b083      	sub	sp, #12
 80067b0:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80067b2:	f3ef 8305 	mrs	r3, IPSR
 80067b6:	603b      	str	r3, [r7, #0]
  return(result);
 80067b8:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80067ba:	2b00      	cmp	r3, #0
 80067bc:	d003      	beq.n	80067c6 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 80067be:	f06f 0305 	mvn.w	r3, #5
 80067c2:	607b      	str	r3, [r7, #4]
 80067c4:	e00c      	b.n	80067e0 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 80067c6:	4b0a      	ldr	r3, [pc, #40]	@ (80067f0 <osKernelInitialize+0x44>)
 80067c8:	681b      	ldr	r3, [r3, #0]
 80067ca:	2b00      	cmp	r3, #0
 80067cc:	d105      	bne.n	80067da <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 80067ce:	4b08      	ldr	r3, [pc, #32]	@ (80067f0 <osKernelInitialize+0x44>)
 80067d0:	2201      	movs	r2, #1
 80067d2:	601a      	str	r2, [r3, #0]
      stat = osOK;
 80067d4:	2300      	movs	r3, #0
 80067d6:	607b      	str	r3, [r7, #4]
 80067d8:	e002      	b.n	80067e0 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 80067da:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80067de:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80067e0:	687b      	ldr	r3, [r7, #4]
}
 80067e2:	4618      	mov	r0, r3
 80067e4:	370c      	adds	r7, #12
 80067e6:	46bd      	mov	sp, r7
 80067e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067ec:	4770      	bx	lr
 80067ee:	bf00      	nop
 80067f0:	200047e4 	.word	0x200047e4

080067f4 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 80067f4:	b580      	push	{r7, lr}
 80067f6:	b082      	sub	sp, #8
 80067f8:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80067fa:	f3ef 8305 	mrs	r3, IPSR
 80067fe:	603b      	str	r3, [r7, #0]
  return(result);
 8006800:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8006802:	2b00      	cmp	r3, #0
 8006804:	d003      	beq.n	800680e <osKernelStart+0x1a>
    stat = osErrorISR;
 8006806:	f06f 0305 	mvn.w	r3, #5
 800680a:	607b      	str	r3, [r7, #4]
 800680c:	e010      	b.n	8006830 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800680e:	4b0b      	ldr	r3, [pc, #44]	@ (800683c <osKernelStart+0x48>)
 8006810:	681b      	ldr	r3, [r3, #0]
 8006812:	2b01      	cmp	r3, #1
 8006814:	d109      	bne.n	800682a <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8006816:	f7ff ffbf 	bl	8006798 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800681a:	4b08      	ldr	r3, [pc, #32]	@ (800683c <osKernelStart+0x48>)
 800681c:	2202      	movs	r2, #2
 800681e:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8006820:	f001 f87a 	bl	8007918 <vTaskStartScheduler>
      stat = osOK;
 8006824:	2300      	movs	r3, #0
 8006826:	607b      	str	r3, [r7, #4]
 8006828:	e002      	b.n	8006830 <osKernelStart+0x3c>
    } else {
      stat = osError;
 800682a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800682e:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8006830:	687b      	ldr	r3, [r7, #4]
}
 8006832:	4618      	mov	r0, r3
 8006834:	3708      	adds	r7, #8
 8006836:	46bd      	mov	sp, r7
 8006838:	bd80      	pop	{r7, pc}
 800683a:	bf00      	nop
 800683c:	200047e4 	.word	0x200047e4

08006840 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8006840:	b580      	push	{r7, lr}
 8006842:	b08e      	sub	sp, #56	@ 0x38
 8006844:	af04      	add	r7, sp, #16
 8006846:	60f8      	str	r0, [r7, #12]
 8006848:	60b9      	str	r1, [r7, #8]
 800684a:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800684c:	2300      	movs	r3, #0
 800684e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006850:	f3ef 8305 	mrs	r3, IPSR
 8006854:	617b      	str	r3, [r7, #20]
  return(result);
 8006856:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8006858:	2b00      	cmp	r3, #0
 800685a:	d17e      	bne.n	800695a <osThreadNew+0x11a>
 800685c:	68fb      	ldr	r3, [r7, #12]
 800685e:	2b00      	cmp	r3, #0
 8006860:	d07b      	beq.n	800695a <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8006862:	2380      	movs	r3, #128	@ 0x80
 8006864:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8006866:	2318      	movs	r3, #24
 8006868:	61fb      	str	r3, [r7, #28]

    name = NULL;
 800686a:	2300      	movs	r3, #0
 800686c:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 800686e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8006872:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	2b00      	cmp	r3, #0
 8006878:	d045      	beq.n	8006906 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	681b      	ldr	r3, [r3, #0]
 800687e:	2b00      	cmp	r3, #0
 8006880:	d002      	beq.n	8006888 <osThreadNew+0x48>
        name = attr->name;
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	681b      	ldr	r3, [r3, #0]
 8006886:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	699b      	ldr	r3, [r3, #24]
 800688c:	2b00      	cmp	r3, #0
 800688e:	d002      	beq.n	8006896 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	699b      	ldr	r3, [r3, #24]
 8006894:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8006896:	69fb      	ldr	r3, [r7, #28]
 8006898:	2b00      	cmp	r3, #0
 800689a:	d008      	beq.n	80068ae <osThreadNew+0x6e>
 800689c:	69fb      	ldr	r3, [r7, #28]
 800689e:	2b38      	cmp	r3, #56	@ 0x38
 80068a0:	d805      	bhi.n	80068ae <osThreadNew+0x6e>
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	685b      	ldr	r3, [r3, #4]
 80068a6:	f003 0301 	and.w	r3, r3, #1
 80068aa:	2b00      	cmp	r3, #0
 80068ac:	d001      	beq.n	80068b2 <osThreadNew+0x72>
        return (NULL);
 80068ae:	2300      	movs	r3, #0
 80068b0:	e054      	b.n	800695c <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	695b      	ldr	r3, [r3, #20]
 80068b6:	2b00      	cmp	r3, #0
 80068b8:	d003      	beq.n	80068c2 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	695b      	ldr	r3, [r3, #20]
 80068be:	089b      	lsrs	r3, r3, #2
 80068c0:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	689b      	ldr	r3, [r3, #8]
 80068c6:	2b00      	cmp	r3, #0
 80068c8:	d00e      	beq.n	80068e8 <osThreadNew+0xa8>
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	68db      	ldr	r3, [r3, #12]
 80068ce:	2b5b      	cmp	r3, #91	@ 0x5b
 80068d0:	d90a      	bls.n	80068e8 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80068d6:	2b00      	cmp	r3, #0
 80068d8:	d006      	beq.n	80068e8 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	695b      	ldr	r3, [r3, #20]
 80068de:	2b00      	cmp	r3, #0
 80068e0:	d002      	beq.n	80068e8 <osThreadNew+0xa8>
        mem = 1;
 80068e2:	2301      	movs	r3, #1
 80068e4:	61bb      	str	r3, [r7, #24]
 80068e6:	e010      	b.n	800690a <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	689b      	ldr	r3, [r3, #8]
 80068ec:	2b00      	cmp	r3, #0
 80068ee:	d10c      	bne.n	800690a <osThreadNew+0xca>
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	68db      	ldr	r3, [r3, #12]
 80068f4:	2b00      	cmp	r3, #0
 80068f6:	d108      	bne.n	800690a <osThreadNew+0xca>
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	691b      	ldr	r3, [r3, #16]
 80068fc:	2b00      	cmp	r3, #0
 80068fe:	d104      	bne.n	800690a <osThreadNew+0xca>
          mem = 0;
 8006900:	2300      	movs	r3, #0
 8006902:	61bb      	str	r3, [r7, #24]
 8006904:	e001      	b.n	800690a <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8006906:	2300      	movs	r3, #0
 8006908:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800690a:	69bb      	ldr	r3, [r7, #24]
 800690c:	2b01      	cmp	r3, #1
 800690e:	d110      	bne.n	8006932 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8006914:	687a      	ldr	r2, [r7, #4]
 8006916:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8006918:	9202      	str	r2, [sp, #8]
 800691a:	9301      	str	r3, [sp, #4]
 800691c:	69fb      	ldr	r3, [r7, #28]
 800691e:	9300      	str	r3, [sp, #0]
 8006920:	68bb      	ldr	r3, [r7, #8]
 8006922:	6a3a      	ldr	r2, [r7, #32]
 8006924:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8006926:	68f8      	ldr	r0, [r7, #12]
 8006928:	f000 fe1a 	bl	8007560 <xTaskCreateStatic>
 800692c:	4603      	mov	r3, r0
 800692e:	613b      	str	r3, [r7, #16]
 8006930:	e013      	b.n	800695a <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8006932:	69bb      	ldr	r3, [r7, #24]
 8006934:	2b00      	cmp	r3, #0
 8006936:	d110      	bne.n	800695a <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8006938:	6a3b      	ldr	r3, [r7, #32]
 800693a:	b29a      	uxth	r2, r3
 800693c:	f107 0310 	add.w	r3, r7, #16
 8006940:	9301      	str	r3, [sp, #4]
 8006942:	69fb      	ldr	r3, [r7, #28]
 8006944:	9300      	str	r3, [sp, #0]
 8006946:	68bb      	ldr	r3, [r7, #8]
 8006948:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800694a:	68f8      	ldr	r0, [r7, #12]
 800694c:	f000 fe68 	bl	8007620 <xTaskCreate>
 8006950:	4603      	mov	r3, r0
 8006952:	2b01      	cmp	r3, #1
 8006954:	d001      	beq.n	800695a <osThreadNew+0x11a>
            hTask = NULL;
 8006956:	2300      	movs	r3, #0
 8006958:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800695a:	693b      	ldr	r3, [r7, #16]
}
 800695c:	4618      	mov	r0, r3
 800695e:	3728      	adds	r7, #40	@ 0x28
 8006960:	46bd      	mov	sp, r7
 8006962:	bd80      	pop	{r7, pc}

08006964 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8006964:	b580      	push	{r7, lr}
 8006966:	b084      	sub	sp, #16
 8006968:	af00      	add	r7, sp, #0
 800696a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800696c:	f3ef 8305 	mrs	r3, IPSR
 8006970:	60bb      	str	r3, [r7, #8]
  return(result);
 8006972:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8006974:	2b00      	cmp	r3, #0
 8006976:	d003      	beq.n	8006980 <osDelay+0x1c>
    stat = osErrorISR;
 8006978:	f06f 0305 	mvn.w	r3, #5
 800697c:	60fb      	str	r3, [r7, #12]
 800697e:	e007      	b.n	8006990 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8006980:	2300      	movs	r3, #0
 8006982:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	2b00      	cmp	r3, #0
 8006988:	d002      	beq.n	8006990 <osDelay+0x2c>
      vTaskDelay(ticks);
 800698a:	6878      	ldr	r0, [r7, #4]
 800698c:	f000 ff8e 	bl	80078ac <vTaskDelay>
    }
  }

  return (stat);
 8006990:	68fb      	ldr	r3, [r7, #12]
}
 8006992:	4618      	mov	r0, r3
 8006994:	3710      	adds	r7, #16
 8006996:	46bd      	mov	sp, r7
 8006998:	bd80      	pop	{r7, pc}
	...

0800699c <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800699c:	b480      	push	{r7}
 800699e:	b085      	sub	sp, #20
 80069a0:	af00      	add	r7, sp, #0
 80069a2:	60f8      	str	r0, [r7, #12]
 80069a4:	60b9      	str	r1, [r7, #8]
 80069a6:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 80069a8:	68fb      	ldr	r3, [r7, #12]
 80069aa:	4a07      	ldr	r2, [pc, #28]	@ (80069c8 <vApplicationGetIdleTaskMemory+0x2c>)
 80069ac:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 80069ae:	68bb      	ldr	r3, [r7, #8]
 80069b0:	4a06      	ldr	r2, [pc, #24]	@ (80069cc <vApplicationGetIdleTaskMemory+0x30>)
 80069b2:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	2280      	movs	r2, #128	@ 0x80
 80069b8:	601a      	str	r2, [r3, #0]
}
 80069ba:	bf00      	nop
 80069bc:	3714      	adds	r7, #20
 80069be:	46bd      	mov	sp, r7
 80069c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069c4:	4770      	bx	lr
 80069c6:	bf00      	nop
 80069c8:	200047e8 	.word	0x200047e8
 80069cc:	20004844 	.word	0x20004844

080069d0 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 80069d0:	b480      	push	{r7}
 80069d2:	b085      	sub	sp, #20
 80069d4:	af00      	add	r7, sp, #0
 80069d6:	60f8      	str	r0, [r7, #12]
 80069d8:	60b9      	str	r1, [r7, #8]
 80069da:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 80069dc:	68fb      	ldr	r3, [r7, #12]
 80069de:	4a07      	ldr	r2, [pc, #28]	@ (80069fc <vApplicationGetTimerTaskMemory+0x2c>)
 80069e0:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 80069e2:	68bb      	ldr	r3, [r7, #8]
 80069e4:	4a06      	ldr	r2, [pc, #24]	@ (8006a00 <vApplicationGetTimerTaskMemory+0x30>)
 80069e6:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80069ee:	601a      	str	r2, [r3, #0]
}
 80069f0:	bf00      	nop
 80069f2:	3714      	adds	r7, #20
 80069f4:	46bd      	mov	sp, r7
 80069f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069fa:	4770      	bx	lr
 80069fc:	20004a44 	.word	0x20004a44
 8006a00:	20004aa0 	.word	0x20004aa0

08006a04 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8006a04:	b480      	push	{r7}
 8006a06:	b083      	sub	sp, #12
 8006a08:	af00      	add	r7, sp, #0
 8006a0a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	f103 0208 	add.w	r2, r3, #8
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8006a1c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	f103 0208 	add.w	r2, r3, #8
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	f103 0208 	add.w	r2, r3, #8
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	2200      	movs	r2, #0
 8006a36:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8006a38:	bf00      	nop
 8006a3a:	370c      	adds	r7, #12
 8006a3c:	46bd      	mov	sp, r7
 8006a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a42:	4770      	bx	lr

08006a44 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8006a44:	b480      	push	{r7}
 8006a46:	b083      	sub	sp, #12
 8006a48:	af00      	add	r7, sp, #0
 8006a4a:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	2200      	movs	r2, #0
 8006a50:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8006a52:	bf00      	nop
 8006a54:	370c      	adds	r7, #12
 8006a56:	46bd      	mov	sp, r7
 8006a58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a5c:	4770      	bx	lr

08006a5e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8006a5e:	b480      	push	{r7}
 8006a60:	b085      	sub	sp, #20
 8006a62:	af00      	add	r7, sp, #0
 8006a64:	6078      	str	r0, [r7, #4]
 8006a66:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	685b      	ldr	r3, [r3, #4]
 8006a6c:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8006a6e:	683b      	ldr	r3, [r7, #0]
 8006a70:	68fa      	ldr	r2, [r7, #12]
 8006a72:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8006a74:	68fb      	ldr	r3, [r7, #12]
 8006a76:	689a      	ldr	r2, [r3, #8]
 8006a78:	683b      	ldr	r3, [r7, #0]
 8006a7a:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8006a7c:	68fb      	ldr	r3, [r7, #12]
 8006a7e:	689b      	ldr	r3, [r3, #8]
 8006a80:	683a      	ldr	r2, [r7, #0]
 8006a82:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8006a84:	68fb      	ldr	r3, [r7, #12]
 8006a86:	683a      	ldr	r2, [r7, #0]
 8006a88:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8006a8a:	683b      	ldr	r3, [r7, #0]
 8006a8c:	687a      	ldr	r2, [r7, #4]
 8006a8e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	681b      	ldr	r3, [r3, #0]
 8006a94:	1c5a      	adds	r2, r3, #1
 8006a96:	687b      	ldr	r3, [r7, #4]
 8006a98:	601a      	str	r2, [r3, #0]
}
 8006a9a:	bf00      	nop
 8006a9c:	3714      	adds	r7, #20
 8006a9e:	46bd      	mov	sp, r7
 8006aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006aa4:	4770      	bx	lr

08006aa6 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8006aa6:	b480      	push	{r7}
 8006aa8:	b085      	sub	sp, #20
 8006aaa:	af00      	add	r7, sp, #0
 8006aac:	6078      	str	r0, [r7, #4]
 8006aae:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8006ab0:	683b      	ldr	r3, [r7, #0]
 8006ab2:	681b      	ldr	r3, [r3, #0]
 8006ab4:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8006ab6:	68bb      	ldr	r3, [r7, #8]
 8006ab8:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8006abc:	d103      	bne.n	8006ac6 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	691b      	ldr	r3, [r3, #16]
 8006ac2:	60fb      	str	r3, [r7, #12]
 8006ac4:	e00c      	b.n	8006ae0 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	3308      	adds	r3, #8
 8006aca:	60fb      	str	r3, [r7, #12]
 8006acc:	e002      	b.n	8006ad4 <vListInsert+0x2e>
 8006ace:	68fb      	ldr	r3, [r7, #12]
 8006ad0:	685b      	ldr	r3, [r3, #4]
 8006ad2:	60fb      	str	r3, [r7, #12]
 8006ad4:	68fb      	ldr	r3, [r7, #12]
 8006ad6:	685b      	ldr	r3, [r3, #4]
 8006ad8:	681b      	ldr	r3, [r3, #0]
 8006ada:	68ba      	ldr	r2, [r7, #8]
 8006adc:	429a      	cmp	r2, r3
 8006ade:	d2f6      	bcs.n	8006ace <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8006ae0:	68fb      	ldr	r3, [r7, #12]
 8006ae2:	685a      	ldr	r2, [r3, #4]
 8006ae4:	683b      	ldr	r3, [r7, #0]
 8006ae6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8006ae8:	683b      	ldr	r3, [r7, #0]
 8006aea:	685b      	ldr	r3, [r3, #4]
 8006aec:	683a      	ldr	r2, [r7, #0]
 8006aee:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8006af0:	683b      	ldr	r3, [r7, #0]
 8006af2:	68fa      	ldr	r2, [r7, #12]
 8006af4:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8006af6:	68fb      	ldr	r3, [r7, #12]
 8006af8:	683a      	ldr	r2, [r7, #0]
 8006afa:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8006afc:	683b      	ldr	r3, [r7, #0]
 8006afe:	687a      	ldr	r2, [r7, #4]
 8006b00:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	681b      	ldr	r3, [r3, #0]
 8006b06:	1c5a      	adds	r2, r3, #1
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	601a      	str	r2, [r3, #0]
}
 8006b0c:	bf00      	nop
 8006b0e:	3714      	adds	r7, #20
 8006b10:	46bd      	mov	sp, r7
 8006b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b16:	4770      	bx	lr

08006b18 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8006b18:	b480      	push	{r7}
 8006b1a:	b085      	sub	sp, #20
 8006b1c:	af00      	add	r7, sp, #0
 8006b1e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	691b      	ldr	r3, [r3, #16]
 8006b24:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	685b      	ldr	r3, [r3, #4]
 8006b2a:	687a      	ldr	r2, [r7, #4]
 8006b2c:	6892      	ldr	r2, [r2, #8]
 8006b2e:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	689b      	ldr	r3, [r3, #8]
 8006b34:	687a      	ldr	r2, [r7, #4]
 8006b36:	6852      	ldr	r2, [r2, #4]
 8006b38:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8006b3a:	68fb      	ldr	r3, [r7, #12]
 8006b3c:	685b      	ldr	r3, [r3, #4]
 8006b3e:	687a      	ldr	r2, [r7, #4]
 8006b40:	429a      	cmp	r2, r3
 8006b42:	d103      	bne.n	8006b4c <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	689a      	ldr	r2, [r3, #8]
 8006b48:	68fb      	ldr	r3, [r7, #12]
 8006b4a:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	2200      	movs	r2, #0
 8006b50:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8006b52:	68fb      	ldr	r3, [r7, #12]
 8006b54:	681b      	ldr	r3, [r3, #0]
 8006b56:	1e5a      	subs	r2, r3, #1
 8006b58:	68fb      	ldr	r3, [r7, #12]
 8006b5a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8006b5c:	68fb      	ldr	r3, [r7, #12]
 8006b5e:	681b      	ldr	r3, [r3, #0]
}
 8006b60:	4618      	mov	r0, r3
 8006b62:	3714      	adds	r7, #20
 8006b64:	46bd      	mov	sp, r7
 8006b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b6a:	4770      	bx	lr

08006b6c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8006b6c:	b580      	push	{r7, lr}
 8006b6e:	b084      	sub	sp, #16
 8006b70:	af00      	add	r7, sp, #0
 8006b72:	6078      	str	r0, [r7, #4]
 8006b74:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8006b7a:	68fb      	ldr	r3, [r7, #12]
 8006b7c:	2b00      	cmp	r3, #0
 8006b7e:	d10b      	bne.n	8006b98 <xQueueGenericReset+0x2c>
	__asm volatile
 8006b80:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006b84:	f383 8811 	msr	BASEPRI, r3
 8006b88:	f3bf 8f6f 	isb	sy
 8006b8c:	f3bf 8f4f 	dsb	sy
 8006b90:	60bb      	str	r3, [r7, #8]
}
 8006b92:	bf00      	nop
 8006b94:	bf00      	nop
 8006b96:	e7fd      	b.n	8006b94 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8006b98:	f002 f89e 	bl	8008cd8 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8006b9c:	68fb      	ldr	r3, [r7, #12]
 8006b9e:	681a      	ldr	r2, [r3, #0]
 8006ba0:	68fb      	ldr	r3, [r7, #12]
 8006ba2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006ba4:	68f9      	ldr	r1, [r7, #12]
 8006ba6:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8006ba8:	fb01 f303 	mul.w	r3, r1, r3
 8006bac:	441a      	add	r2, r3
 8006bae:	68fb      	ldr	r3, [r7, #12]
 8006bb0:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8006bb2:	68fb      	ldr	r3, [r7, #12]
 8006bb4:	2200      	movs	r2, #0
 8006bb6:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8006bb8:	68fb      	ldr	r3, [r7, #12]
 8006bba:	681a      	ldr	r2, [r3, #0]
 8006bbc:	68fb      	ldr	r3, [r7, #12]
 8006bbe:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8006bc0:	68fb      	ldr	r3, [r7, #12]
 8006bc2:	681a      	ldr	r2, [r3, #0]
 8006bc4:	68fb      	ldr	r3, [r7, #12]
 8006bc6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006bc8:	3b01      	subs	r3, #1
 8006bca:	68f9      	ldr	r1, [r7, #12]
 8006bcc:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8006bce:	fb01 f303 	mul.w	r3, r1, r3
 8006bd2:	441a      	add	r2, r3
 8006bd4:	68fb      	ldr	r3, [r7, #12]
 8006bd6:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8006bd8:	68fb      	ldr	r3, [r7, #12]
 8006bda:	22ff      	movs	r2, #255	@ 0xff
 8006bdc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8006be0:	68fb      	ldr	r3, [r7, #12]
 8006be2:	22ff      	movs	r2, #255	@ 0xff
 8006be4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8006be8:	683b      	ldr	r3, [r7, #0]
 8006bea:	2b00      	cmp	r3, #0
 8006bec:	d114      	bne.n	8006c18 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006bee:	68fb      	ldr	r3, [r7, #12]
 8006bf0:	691b      	ldr	r3, [r3, #16]
 8006bf2:	2b00      	cmp	r3, #0
 8006bf4:	d01a      	beq.n	8006c2c <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006bf6:	68fb      	ldr	r3, [r7, #12]
 8006bf8:	3310      	adds	r3, #16
 8006bfa:	4618      	mov	r0, r3
 8006bfc:	f001 f91a 	bl	8007e34 <xTaskRemoveFromEventList>
 8006c00:	4603      	mov	r3, r0
 8006c02:	2b00      	cmp	r3, #0
 8006c04:	d012      	beq.n	8006c2c <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8006c06:	4b0d      	ldr	r3, [pc, #52]	@ (8006c3c <xQueueGenericReset+0xd0>)
 8006c08:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006c0c:	601a      	str	r2, [r3, #0]
 8006c0e:	f3bf 8f4f 	dsb	sy
 8006c12:	f3bf 8f6f 	isb	sy
 8006c16:	e009      	b.n	8006c2c <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8006c18:	68fb      	ldr	r3, [r7, #12]
 8006c1a:	3310      	adds	r3, #16
 8006c1c:	4618      	mov	r0, r3
 8006c1e:	f7ff fef1 	bl	8006a04 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8006c22:	68fb      	ldr	r3, [r7, #12]
 8006c24:	3324      	adds	r3, #36	@ 0x24
 8006c26:	4618      	mov	r0, r3
 8006c28:	f7ff feec 	bl	8006a04 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8006c2c:	f002 f886 	bl	8008d3c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8006c30:	2301      	movs	r3, #1
}
 8006c32:	4618      	mov	r0, r3
 8006c34:	3710      	adds	r7, #16
 8006c36:	46bd      	mov	sp, r7
 8006c38:	bd80      	pop	{r7, pc}
 8006c3a:	bf00      	nop
 8006c3c:	e000ed04 	.word	0xe000ed04

08006c40 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8006c40:	b580      	push	{r7, lr}
 8006c42:	b08e      	sub	sp, #56	@ 0x38
 8006c44:	af02      	add	r7, sp, #8
 8006c46:	60f8      	str	r0, [r7, #12]
 8006c48:	60b9      	str	r1, [r7, #8]
 8006c4a:	607a      	str	r2, [r7, #4]
 8006c4c:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8006c4e:	68fb      	ldr	r3, [r7, #12]
 8006c50:	2b00      	cmp	r3, #0
 8006c52:	d10b      	bne.n	8006c6c <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 8006c54:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006c58:	f383 8811 	msr	BASEPRI, r3
 8006c5c:	f3bf 8f6f 	isb	sy
 8006c60:	f3bf 8f4f 	dsb	sy
 8006c64:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8006c66:	bf00      	nop
 8006c68:	bf00      	nop
 8006c6a:	e7fd      	b.n	8006c68 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8006c6c:	683b      	ldr	r3, [r7, #0]
 8006c6e:	2b00      	cmp	r3, #0
 8006c70:	d10b      	bne.n	8006c8a <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 8006c72:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006c76:	f383 8811 	msr	BASEPRI, r3
 8006c7a:	f3bf 8f6f 	isb	sy
 8006c7e:	f3bf 8f4f 	dsb	sy
 8006c82:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8006c84:	bf00      	nop
 8006c86:	bf00      	nop
 8006c88:	e7fd      	b.n	8006c86 <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	2b00      	cmp	r3, #0
 8006c8e:	d002      	beq.n	8006c96 <xQueueGenericCreateStatic+0x56>
 8006c90:	68bb      	ldr	r3, [r7, #8]
 8006c92:	2b00      	cmp	r3, #0
 8006c94:	d001      	beq.n	8006c9a <xQueueGenericCreateStatic+0x5a>
 8006c96:	2301      	movs	r3, #1
 8006c98:	e000      	b.n	8006c9c <xQueueGenericCreateStatic+0x5c>
 8006c9a:	2300      	movs	r3, #0
 8006c9c:	2b00      	cmp	r3, #0
 8006c9e:	d10b      	bne.n	8006cb8 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 8006ca0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006ca4:	f383 8811 	msr	BASEPRI, r3
 8006ca8:	f3bf 8f6f 	isb	sy
 8006cac:	f3bf 8f4f 	dsb	sy
 8006cb0:	623b      	str	r3, [r7, #32]
}
 8006cb2:	bf00      	nop
 8006cb4:	bf00      	nop
 8006cb6:	e7fd      	b.n	8006cb4 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	2b00      	cmp	r3, #0
 8006cbc:	d102      	bne.n	8006cc4 <xQueueGenericCreateStatic+0x84>
 8006cbe:	68bb      	ldr	r3, [r7, #8]
 8006cc0:	2b00      	cmp	r3, #0
 8006cc2:	d101      	bne.n	8006cc8 <xQueueGenericCreateStatic+0x88>
 8006cc4:	2301      	movs	r3, #1
 8006cc6:	e000      	b.n	8006cca <xQueueGenericCreateStatic+0x8a>
 8006cc8:	2300      	movs	r3, #0
 8006cca:	2b00      	cmp	r3, #0
 8006ccc:	d10b      	bne.n	8006ce6 <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 8006cce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006cd2:	f383 8811 	msr	BASEPRI, r3
 8006cd6:	f3bf 8f6f 	isb	sy
 8006cda:	f3bf 8f4f 	dsb	sy
 8006cde:	61fb      	str	r3, [r7, #28]
}
 8006ce0:	bf00      	nop
 8006ce2:	bf00      	nop
 8006ce4:	e7fd      	b.n	8006ce2 <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8006ce6:	2350      	movs	r3, #80	@ 0x50
 8006ce8:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8006cea:	697b      	ldr	r3, [r7, #20]
 8006cec:	2b50      	cmp	r3, #80	@ 0x50
 8006cee:	d00b      	beq.n	8006d08 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 8006cf0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006cf4:	f383 8811 	msr	BASEPRI, r3
 8006cf8:	f3bf 8f6f 	isb	sy
 8006cfc:	f3bf 8f4f 	dsb	sy
 8006d00:	61bb      	str	r3, [r7, #24]
}
 8006d02:	bf00      	nop
 8006d04:	bf00      	nop
 8006d06:	e7fd      	b.n	8006d04 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8006d08:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8006d0a:	683b      	ldr	r3, [r7, #0]
 8006d0c:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 8006d0e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006d10:	2b00      	cmp	r3, #0
 8006d12:	d00d      	beq.n	8006d30 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8006d14:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006d16:	2201      	movs	r2, #1
 8006d18:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8006d1c:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 8006d20:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006d22:	9300      	str	r3, [sp, #0]
 8006d24:	4613      	mov	r3, r2
 8006d26:	687a      	ldr	r2, [r7, #4]
 8006d28:	68b9      	ldr	r1, [r7, #8]
 8006d2a:	68f8      	ldr	r0, [r7, #12]
 8006d2c:	f000 f805 	bl	8006d3a <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8006d30:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 8006d32:	4618      	mov	r0, r3
 8006d34:	3730      	adds	r7, #48	@ 0x30
 8006d36:	46bd      	mov	sp, r7
 8006d38:	bd80      	pop	{r7, pc}

08006d3a <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8006d3a:	b580      	push	{r7, lr}
 8006d3c:	b084      	sub	sp, #16
 8006d3e:	af00      	add	r7, sp, #0
 8006d40:	60f8      	str	r0, [r7, #12]
 8006d42:	60b9      	str	r1, [r7, #8]
 8006d44:	607a      	str	r2, [r7, #4]
 8006d46:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8006d48:	68bb      	ldr	r3, [r7, #8]
 8006d4a:	2b00      	cmp	r3, #0
 8006d4c:	d103      	bne.n	8006d56 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8006d4e:	69bb      	ldr	r3, [r7, #24]
 8006d50:	69ba      	ldr	r2, [r7, #24]
 8006d52:	601a      	str	r2, [r3, #0]
 8006d54:	e002      	b.n	8006d5c <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8006d56:	69bb      	ldr	r3, [r7, #24]
 8006d58:	687a      	ldr	r2, [r7, #4]
 8006d5a:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8006d5c:	69bb      	ldr	r3, [r7, #24]
 8006d5e:	68fa      	ldr	r2, [r7, #12]
 8006d60:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8006d62:	69bb      	ldr	r3, [r7, #24]
 8006d64:	68ba      	ldr	r2, [r7, #8]
 8006d66:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8006d68:	2101      	movs	r1, #1
 8006d6a:	69b8      	ldr	r0, [r7, #24]
 8006d6c:	f7ff fefe 	bl	8006b6c <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8006d70:	69bb      	ldr	r3, [r7, #24]
 8006d72:	78fa      	ldrb	r2, [r7, #3]
 8006d74:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8006d78:	bf00      	nop
 8006d7a:	3710      	adds	r7, #16
 8006d7c:	46bd      	mov	sp, r7
 8006d7e:	bd80      	pop	{r7, pc}

08006d80 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8006d80:	b580      	push	{r7, lr}
 8006d82:	b08e      	sub	sp, #56	@ 0x38
 8006d84:	af00      	add	r7, sp, #0
 8006d86:	60f8      	str	r0, [r7, #12]
 8006d88:	60b9      	str	r1, [r7, #8]
 8006d8a:	607a      	str	r2, [r7, #4]
 8006d8c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8006d8e:	2300      	movs	r3, #0
 8006d90:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8006d92:	68fb      	ldr	r3, [r7, #12]
 8006d94:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8006d96:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006d98:	2b00      	cmp	r3, #0
 8006d9a:	d10b      	bne.n	8006db4 <xQueueGenericSend+0x34>
	__asm volatile
 8006d9c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006da0:	f383 8811 	msr	BASEPRI, r3
 8006da4:	f3bf 8f6f 	isb	sy
 8006da8:	f3bf 8f4f 	dsb	sy
 8006dac:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8006dae:	bf00      	nop
 8006db0:	bf00      	nop
 8006db2:	e7fd      	b.n	8006db0 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006db4:	68bb      	ldr	r3, [r7, #8]
 8006db6:	2b00      	cmp	r3, #0
 8006db8:	d103      	bne.n	8006dc2 <xQueueGenericSend+0x42>
 8006dba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006dbc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006dbe:	2b00      	cmp	r3, #0
 8006dc0:	d101      	bne.n	8006dc6 <xQueueGenericSend+0x46>
 8006dc2:	2301      	movs	r3, #1
 8006dc4:	e000      	b.n	8006dc8 <xQueueGenericSend+0x48>
 8006dc6:	2300      	movs	r3, #0
 8006dc8:	2b00      	cmp	r3, #0
 8006dca:	d10b      	bne.n	8006de4 <xQueueGenericSend+0x64>
	__asm volatile
 8006dcc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006dd0:	f383 8811 	msr	BASEPRI, r3
 8006dd4:	f3bf 8f6f 	isb	sy
 8006dd8:	f3bf 8f4f 	dsb	sy
 8006ddc:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8006dde:	bf00      	nop
 8006de0:	bf00      	nop
 8006de2:	e7fd      	b.n	8006de0 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8006de4:	683b      	ldr	r3, [r7, #0]
 8006de6:	2b02      	cmp	r3, #2
 8006de8:	d103      	bne.n	8006df2 <xQueueGenericSend+0x72>
 8006dea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006dec:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006dee:	2b01      	cmp	r3, #1
 8006df0:	d101      	bne.n	8006df6 <xQueueGenericSend+0x76>
 8006df2:	2301      	movs	r3, #1
 8006df4:	e000      	b.n	8006df8 <xQueueGenericSend+0x78>
 8006df6:	2300      	movs	r3, #0
 8006df8:	2b00      	cmp	r3, #0
 8006dfa:	d10b      	bne.n	8006e14 <xQueueGenericSend+0x94>
	__asm volatile
 8006dfc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006e00:	f383 8811 	msr	BASEPRI, r3
 8006e04:	f3bf 8f6f 	isb	sy
 8006e08:	f3bf 8f4f 	dsb	sy
 8006e0c:	623b      	str	r3, [r7, #32]
}
 8006e0e:	bf00      	nop
 8006e10:	bf00      	nop
 8006e12:	e7fd      	b.n	8006e10 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8006e14:	f001 f9f6 	bl	8008204 <xTaskGetSchedulerState>
 8006e18:	4603      	mov	r3, r0
 8006e1a:	2b00      	cmp	r3, #0
 8006e1c:	d102      	bne.n	8006e24 <xQueueGenericSend+0xa4>
 8006e1e:	687b      	ldr	r3, [r7, #4]
 8006e20:	2b00      	cmp	r3, #0
 8006e22:	d101      	bne.n	8006e28 <xQueueGenericSend+0xa8>
 8006e24:	2301      	movs	r3, #1
 8006e26:	e000      	b.n	8006e2a <xQueueGenericSend+0xaa>
 8006e28:	2300      	movs	r3, #0
 8006e2a:	2b00      	cmp	r3, #0
 8006e2c:	d10b      	bne.n	8006e46 <xQueueGenericSend+0xc6>
	__asm volatile
 8006e2e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006e32:	f383 8811 	msr	BASEPRI, r3
 8006e36:	f3bf 8f6f 	isb	sy
 8006e3a:	f3bf 8f4f 	dsb	sy
 8006e3e:	61fb      	str	r3, [r7, #28]
}
 8006e40:	bf00      	nop
 8006e42:	bf00      	nop
 8006e44:	e7fd      	b.n	8006e42 <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8006e46:	f001 ff47 	bl	8008cd8 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8006e4a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006e4c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006e4e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006e50:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006e52:	429a      	cmp	r2, r3
 8006e54:	d302      	bcc.n	8006e5c <xQueueGenericSend+0xdc>
 8006e56:	683b      	ldr	r3, [r7, #0]
 8006e58:	2b02      	cmp	r3, #2
 8006e5a:	d129      	bne.n	8006eb0 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8006e5c:	683a      	ldr	r2, [r7, #0]
 8006e5e:	68b9      	ldr	r1, [r7, #8]
 8006e60:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8006e62:	f000 fa0f 	bl	8007284 <prvCopyDataToQueue>
 8006e66:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006e68:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006e6a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006e6c:	2b00      	cmp	r3, #0
 8006e6e:	d010      	beq.n	8006e92 <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006e70:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006e72:	3324      	adds	r3, #36	@ 0x24
 8006e74:	4618      	mov	r0, r3
 8006e76:	f000 ffdd 	bl	8007e34 <xTaskRemoveFromEventList>
 8006e7a:	4603      	mov	r3, r0
 8006e7c:	2b00      	cmp	r3, #0
 8006e7e:	d013      	beq.n	8006ea8 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8006e80:	4b3f      	ldr	r3, [pc, #252]	@ (8006f80 <xQueueGenericSend+0x200>)
 8006e82:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006e86:	601a      	str	r2, [r3, #0]
 8006e88:	f3bf 8f4f 	dsb	sy
 8006e8c:	f3bf 8f6f 	isb	sy
 8006e90:	e00a      	b.n	8006ea8 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8006e92:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006e94:	2b00      	cmp	r3, #0
 8006e96:	d007      	beq.n	8006ea8 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8006e98:	4b39      	ldr	r3, [pc, #228]	@ (8006f80 <xQueueGenericSend+0x200>)
 8006e9a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006e9e:	601a      	str	r2, [r3, #0]
 8006ea0:	f3bf 8f4f 	dsb	sy
 8006ea4:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8006ea8:	f001 ff48 	bl	8008d3c <vPortExitCritical>
				return pdPASS;
 8006eac:	2301      	movs	r3, #1
 8006eae:	e063      	b.n	8006f78 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	2b00      	cmp	r3, #0
 8006eb4:	d103      	bne.n	8006ebe <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8006eb6:	f001 ff41 	bl	8008d3c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8006eba:	2300      	movs	r3, #0
 8006ebc:	e05c      	b.n	8006f78 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8006ebe:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006ec0:	2b00      	cmp	r3, #0
 8006ec2:	d106      	bne.n	8006ed2 <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8006ec4:	f107 0314 	add.w	r3, r7, #20
 8006ec8:	4618      	mov	r0, r3
 8006eca:	f001 f83f 	bl	8007f4c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8006ece:	2301      	movs	r3, #1
 8006ed0:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8006ed2:	f001 ff33 	bl	8008d3c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8006ed6:	f000 fd87 	bl	80079e8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8006eda:	f001 fefd 	bl	8008cd8 <vPortEnterCritical>
 8006ede:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006ee0:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8006ee4:	b25b      	sxtb	r3, r3
 8006ee6:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8006eea:	d103      	bne.n	8006ef4 <xQueueGenericSend+0x174>
 8006eec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006eee:	2200      	movs	r2, #0
 8006ef0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006ef4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006ef6:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8006efa:	b25b      	sxtb	r3, r3
 8006efc:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8006f00:	d103      	bne.n	8006f0a <xQueueGenericSend+0x18a>
 8006f02:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006f04:	2200      	movs	r2, #0
 8006f06:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8006f0a:	f001 ff17 	bl	8008d3c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8006f0e:	1d3a      	adds	r2, r7, #4
 8006f10:	f107 0314 	add.w	r3, r7, #20
 8006f14:	4611      	mov	r1, r2
 8006f16:	4618      	mov	r0, r3
 8006f18:	f001 f82e 	bl	8007f78 <xTaskCheckForTimeOut>
 8006f1c:	4603      	mov	r3, r0
 8006f1e:	2b00      	cmp	r3, #0
 8006f20:	d124      	bne.n	8006f6c <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8006f22:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8006f24:	f000 faa6 	bl	8007474 <prvIsQueueFull>
 8006f28:	4603      	mov	r3, r0
 8006f2a:	2b00      	cmp	r3, #0
 8006f2c:	d018      	beq.n	8006f60 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8006f2e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006f30:	3310      	adds	r3, #16
 8006f32:	687a      	ldr	r2, [r7, #4]
 8006f34:	4611      	mov	r1, r2
 8006f36:	4618      	mov	r0, r3
 8006f38:	f000 ff2a 	bl	8007d90 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8006f3c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8006f3e:	f000 fa31 	bl	80073a4 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8006f42:	f000 fd5f 	bl	8007a04 <xTaskResumeAll>
 8006f46:	4603      	mov	r3, r0
 8006f48:	2b00      	cmp	r3, #0
 8006f4a:	f47f af7c 	bne.w	8006e46 <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 8006f4e:	4b0c      	ldr	r3, [pc, #48]	@ (8006f80 <xQueueGenericSend+0x200>)
 8006f50:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006f54:	601a      	str	r2, [r3, #0]
 8006f56:	f3bf 8f4f 	dsb	sy
 8006f5a:	f3bf 8f6f 	isb	sy
 8006f5e:	e772      	b.n	8006e46 <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8006f60:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8006f62:	f000 fa1f 	bl	80073a4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8006f66:	f000 fd4d 	bl	8007a04 <xTaskResumeAll>
 8006f6a:	e76c      	b.n	8006e46 <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8006f6c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8006f6e:	f000 fa19 	bl	80073a4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8006f72:	f000 fd47 	bl	8007a04 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8006f76:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8006f78:	4618      	mov	r0, r3
 8006f7a:	3738      	adds	r7, #56	@ 0x38
 8006f7c:	46bd      	mov	sp, r7
 8006f7e:	bd80      	pop	{r7, pc}
 8006f80:	e000ed04 	.word	0xe000ed04

08006f84 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8006f84:	b580      	push	{r7, lr}
 8006f86:	b090      	sub	sp, #64	@ 0x40
 8006f88:	af00      	add	r7, sp, #0
 8006f8a:	60f8      	str	r0, [r7, #12]
 8006f8c:	60b9      	str	r1, [r7, #8]
 8006f8e:	607a      	str	r2, [r7, #4]
 8006f90:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8006f92:	68fb      	ldr	r3, [r7, #12]
 8006f94:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 8006f96:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006f98:	2b00      	cmp	r3, #0
 8006f9a:	d10b      	bne.n	8006fb4 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 8006f9c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006fa0:	f383 8811 	msr	BASEPRI, r3
 8006fa4:	f3bf 8f6f 	isb	sy
 8006fa8:	f3bf 8f4f 	dsb	sy
 8006fac:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8006fae:	bf00      	nop
 8006fb0:	bf00      	nop
 8006fb2:	e7fd      	b.n	8006fb0 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006fb4:	68bb      	ldr	r3, [r7, #8]
 8006fb6:	2b00      	cmp	r3, #0
 8006fb8:	d103      	bne.n	8006fc2 <xQueueGenericSendFromISR+0x3e>
 8006fba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006fbc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006fbe:	2b00      	cmp	r3, #0
 8006fc0:	d101      	bne.n	8006fc6 <xQueueGenericSendFromISR+0x42>
 8006fc2:	2301      	movs	r3, #1
 8006fc4:	e000      	b.n	8006fc8 <xQueueGenericSendFromISR+0x44>
 8006fc6:	2300      	movs	r3, #0
 8006fc8:	2b00      	cmp	r3, #0
 8006fca:	d10b      	bne.n	8006fe4 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 8006fcc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006fd0:	f383 8811 	msr	BASEPRI, r3
 8006fd4:	f3bf 8f6f 	isb	sy
 8006fd8:	f3bf 8f4f 	dsb	sy
 8006fdc:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8006fde:	bf00      	nop
 8006fe0:	bf00      	nop
 8006fe2:	e7fd      	b.n	8006fe0 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8006fe4:	683b      	ldr	r3, [r7, #0]
 8006fe6:	2b02      	cmp	r3, #2
 8006fe8:	d103      	bne.n	8006ff2 <xQueueGenericSendFromISR+0x6e>
 8006fea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006fec:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006fee:	2b01      	cmp	r3, #1
 8006ff0:	d101      	bne.n	8006ff6 <xQueueGenericSendFromISR+0x72>
 8006ff2:	2301      	movs	r3, #1
 8006ff4:	e000      	b.n	8006ff8 <xQueueGenericSendFromISR+0x74>
 8006ff6:	2300      	movs	r3, #0
 8006ff8:	2b00      	cmp	r3, #0
 8006ffa:	d10b      	bne.n	8007014 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 8006ffc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007000:	f383 8811 	msr	BASEPRI, r3
 8007004:	f3bf 8f6f 	isb	sy
 8007008:	f3bf 8f4f 	dsb	sy
 800700c:	623b      	str	r3, [r7, #32]
}
 800700e:	bf00      	nop
 8007010:	bf00      	nop
 8007012:	e7fd      	b.n	8007010 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8007014:	f001 ff40 	bl	8008e98 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8007018:	f3ef 8211 	mrs	r2, BASEPRI
 800701c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007020:	f383 8811 	msr	BASEPRI, r3
 8007024:	f3bf 8f6f 	isb	sy
 8007028:	f3bf 8f4f 	dsb	sy
 800702c:	61fa      	str	r2, [r7, #28]
 800702e:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8007030:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8007032:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8007034:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007036:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007038:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800703a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800703c:	429a      	cmp	r2, r3
 800703e:	d302      	bcc.n	8007046 <xQueueGenericSendFromISR+0xc2>
 8007040:	683b      	ldr	r3, [r7, #0]
 8007042:	2b02      	cmp	r3, #2
 8007044:	d12f      	bne.n	80070a6 <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8007046:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007048:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800704c:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007050:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007052:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007054:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8007056:	683a      	ldr	r2, [r7, #0]
 8007058:	68b9      	ldr	r1, [r7, #8]
 800705a:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800705c:	f000 f912 	bl	8007284 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8007060:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 8007064:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8007068:	d112      	bne.n	8007090 <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800706a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800706c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800706e:	2b00      	cmp	r3, #0
 8007070:	d016      	beq.n	80070a0 <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007072:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007074:	3324      	adds	r3, #36	@ 0x24
 8007076:	4618      	mov	r0, r3
 8007078:	f000 fedc 	bl	8007e34 <xTaskRemoveFromEventList>
 800707c:	4603      	mov	r3, r0
 800707e:	2b00      	cmp	r3, #0
 8007080:	d00e      	beq.n	80070a0 <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	2b00      	cmp	r3, #0
 8007086:	d00b      	beq.n	80070a0 <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8007088:	687b      	ldr	r3, [r7, #4]
 800708a:	2201      	movs	r2, #1
 800708c:	601a      	str	r2, [r3, #0]
 800708e:	e007      	b.n	80070a0 <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8007090:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8007094:	3301      	adds	r3, #1
 8007096:	b2db      	uxtb	r3, r3
 8007098:	b25a      	sxtb	r2, r3
 800709a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800709c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 80070a0:	2301      	movs	r3, #1
 80070a2:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 80070a4:	e001      	b.n	80070aa <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80070a6:	2300      	movs	r3, #0
 80070a8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80070aa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80070ac:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80070ae:	697b      	ldr	r3, [r7, #20]
 80070b0:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80070b4:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80070b6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 80070b8:	4618      	mov	r0, r3
 80070ba:	3740      	adds	r7, #64	@ 0x40
 80070bc:	46bd      	mov	sp, r7
 80070be:	bd80      	pop	{r7, pc}

080070c0 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80070c0:	b580      	push	{r7, lr}
 80070c2:	b08c      	sub	sp, #48	@ 0x30
 80070c4:	af00      	add	r7, sp, #0
 80070c6:	60f8      	str	r0, [r7, #12]
 80070c8:	60b9      	str	r1, [r7, #8]
 80070ca:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80070cc:	2300      	movs	r3, #0
 80070ce:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80070d0:	68fb      	ldr	r3, [r7, #12]
 80070d2:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80070d4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80070d6:	2b00      	cmp	r3, #0
 80070d8:	d10b      	bne.n	80070f2 <xQueueReceive+0x32>
	__asm volatile
 80070da:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80070de:	f383 8811 	msr	BASEPRI, r3
 80070e2:	f3bf 8f6f 	isb	sy
 80070e6:	f3bf 8f4f 	dsb	sy
 80070ea:	623b      	str	r3, [r7, #32]
}
 80070ec:	bf00      	nop
 80070ee:	bf00      	nop
 80070f0:	e7fd      	b.n	80070ee <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80070f2:	68bb      	ldr	r3, [r7, #8]
 80070f4:	2b00      	cmp	r3, #0
 80070f6:	d103      	bne.n	8007100 <xQueueReceive+0x40>
 80070f8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80070fa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80070fc:	2b00      	cmp	r3, #0
 80070fe:	d101      	bne.n	8007104 <xQueueReceive+0x44>
 8007100:	2301      	movs	r3, #1
 8007102:	e000      	b.n	8007106 <xQueueReceive+0x46>
 8007104:	2300      	movs	r3, #0
 8007106:	2b00      	cmp	r3, #0
 8007108:	d10b      	bne.n	8007122 <xQueueReceive+0x62>
	__asm volatile
 800710a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800710e:	f383 8811 	msr	BASEPRI, r3
 8007112:	f3bf 8f6f 	isb	sy
 8007116:	f3bf 8f4f 	dsb	sy
 800711a:	61fb      	str	r3, [r7, #28]
}
 800711c:	bf00      	nop
 800711e:	bf00      	nop
 8007120:	e7fd      	b.n	800711e <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8007122:	f001 f86f 	bl	8008204 <xTaskGetSchedulerState>
 8007126:	4603      	mov	r3, r0
 8007128:	2b00      	cmp	r3, #0
 800712a:	d102      	bne.n	8007132 <xQueueReceive+0x72>
 800712c:	687b      	ldr	r3, [r7, #4]
 800712e:	2b00      	cmp	r3, #0
 8007130:	d101      	bne.n	8007136 <xQueueReceive+0x76>
 8007132:	2301      	movs	r3, #1
 8007134:	e000      	b.n	8007138 <xQueueReceive+0x78>
 8007136:	2300      	movs	r3, #0
 8007138:	2b00      	cmp	r3, #0
 800713a:	d10b      	bne.n	8007154 <xQueueReceive+0x94>
	__asm volatile
 800713c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007140:	f383 8811 	msr	BASEPRI, r3
 8007144:	f3bf 8f6f 	isb	sy
 8007148:	f3bf 8f4f 	dsb	sy
 800714c:	61bb      	str	r3, [r7, #24]
}
 800714e:	bf00      	nop
 8007150:	bf00      	nop
 8007152:	e7fd      	b.n	8007150 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8007154:	f001 fdc0 	bl	8008cd8 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007158:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800715a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800715c:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800715e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007160:	2b00      	cmp	r3, #0
 8007162:	d01f      	beq.n	80071a4 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8007164:	68b9      	ldr	r1, [r7, #8]
 8007166:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007168:	f000 f8f6 	bl	8007358 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800716c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800716e:	1e5a      	subs	r2, r3, #1
 8007170:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007172:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007174:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007176:	691b      	ldr	r3, [r3, #16]
 8007178:	2b00      	cmp	r3, #0
 800717a:	d00f      	beq.n	800719c <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800717c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800717e:	3310      	adds	r3, #16
 8007180:	4618      	mov	r0, r3
 8007182:	f000 fe57 	bl	8007e34 <xTaskRemoveFromEventList>
 8007186:	4603      	mov	r3, r0
 8007188:	2b00      	cmp	r3, #0
 800718a:	d007      	beq.n	800719c <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800718c:	4b3c      	ldr	r3, [pc, #240]	@ (8007280 <xQueueReceive+0x1c0>)
 800718e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007192:	601a      	str	r2, [r3, #0]
 8007194:	f3bf 8f4f 	dsb	sy
 8007198:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800719c:	f001 fdce 	bl	8008d3c <vPortExitCritical>
				return pdPASS;
 80071a0:	2301      	movs	r3, #1
 80071a2:	e069      	b.n	8007278 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	2b00      	cmp	r3, #0
 80071a8:	d103      	bne.n	80071b2 <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80071aa:	f001 fdc7 	bl	8008d3c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80071ae:	2300      	movs	r3, #0
 80071b0:	e062      	b.n	8007278 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 80071b2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80071b4:	2b00      	cmp	r3, #0
 80071b6:	d106      	bne.n	80071c6 <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80071b8:	f107 0310 	add.w	r3, r7, #16
 80071bc:	4618      	mov	r0, r3
 80071be:	f000 fec5 	bl	8007f4c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80071c2:	2301      	movs	r3, #1
 80071c4:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80071c6:	f001 fdb9 	bl	8008d3c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80071ca:	f000 fc0d 	bl	80079e8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80071ce:	f001 fd83 	bl	8008cd8 <vPortEnterCritical>
 80071d2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80071d4:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80071d8:	b25b      	sxtb	r3, r3
 80071da:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80071de:	d103      	bne.n	80071e8 <xQueueReceive+0x128>
 80071e0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80071e2:	2200      	movs	r2, #0
 80071e4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80071e8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80071ea:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80071ee:	b25b      	sxtb	r3, r3
 80071f0:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80071f4:	d103      	bne.n	80071fe <xQueueReceive+0x13e>
 80071f6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80071f8:	2200      	movs	r2, #0
 80071fa:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80071fe:	f001 fd9d 	bl	8008d3c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8007202:	1d3a      	adds	r2, r7, #4
 8007204:	f107 0310 	add.w	r3, r7, #16
 8007208:	4611      	mov	r1, r2
 800720a:	4618      	mov	r0, r3
 800720c:	f000 feb4 	bl	8007f78 <xTaskCheckForTimeOut>
 8007210:	4603      	mov	r3, r0
 8007212:	2b00      	cmp	r3, #0
 8007214:	d123      	bne.n	800725e <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8007216:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007218:	f000 f916 	bl	8007448 <prvIsQueueEmpty>
 800721c:	4603      	mov	r3, r0
 800721e:	2b00      	cmp	r3, #0
 8007220:	d017      	beq.n	8007252 <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8007222:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007224:	3324      	adds	r3, #36	@ 0x24
 8007226:	687a      	ldr	r2, [r7, #4]
 8007228:	4611      	mov	r1, r2
 800722a:	4618      	mov	r0, r3
 800722c:	f000 fdb0 	bl	8007d90 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8007230:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007232:	f000 f8b7 	bl	80073a4 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8007236:	f000 fbe5 	bl	8007a04 <xTaskResumeAll>
 800723a:	4603      	mov	r3, r0
 800723c:	2b00      	cmp	r3, #0
 800723e:	d189      	bne.n	8007154 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 8007240:	4b0f      	ldr	r3, [pc, #60]	@ (8007280 <xQueueReceive+0x1c0>)
 8007242:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007246:	601a      	str	r2, [r3, #0]
 8007248:	f3bf 8f4f 	dsb	sy
 800724c:	f3bf 8f6f 	isb	sy
 8007250:	e780      	b.n	8007154 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8007252:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007254:	f000 f8a6 	bl	80073a4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8007258:	f000 fbd4 	bl	8007a04 <xTaskResumeAll>
 800725c:	e77a      	b.n	8007154 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800725e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007260:	f000 f8a0 	bl	80073a4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8007264:	f000 fbce 	bl	8007a04 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8007268:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800726a:	f000 f8ed 	bl	8007448 <prvIsQueueEmpty>
 800726e:	4603      	mov	r3, r0
 8007270:	2b00      	cmp	r3, #0
 8007272:	f43f af6f 	beq.w	8007154 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8007276:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8007278:	4618      	mov	r0, r3
 800727a:	3730      	adds	r7, #48	@ 0x30
 800727c:	46bd      	mov	sp, r7
 800727e:	bd80      	pop	{r7, pc}
 8007280:	e000ed04 	.word	0xe000ed04

08007284 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8007284:	b580      	push	{r7, lr}
 8007286:	b086      	sub	sp, #24
 8007288:	af00      	add	r7, sp, #0
 800728a:	60f8      	str	r0, [r7, #12]
 800728c:	60b9      	str	r1, [r7, #8]
 800728e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8007290:	2300      	movs	r3, #0
 8007292:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007294:	68fb      	ldr	r3, [r7, #12]
 8007296:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007298:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800729a:	68fb      	ldr	r3, [r7, #12]
 800729c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800729e:	2b00      	cmp	r3, #0
 80072a0:	d10d      	bne.n	80072be <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80072a2:	68fb      	ldr	r3, [r7, #12]
 80072a4:	681b      	ldr	r3, [r3, #0]
 80072a6:	2b00      	cmp	r3, #0
 80072a8:	d14d      	bne.n	8007346 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80072aa:	68fb      	ldr	r3, [r7, #12]
 80072ac:	689b      	ldr	r3, [r3, #8]
 80072ae:	4618      	mov	r0, r3
 80072b0:	f000 ffc6 	bl	8008240 <xTaskPriorityDisinherit>
 80072b4:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80072b6:	68fb      	ldr	r3, [r7, #12]
 80072b8:	2200      	movs	r2, #0
 80072ba:	609a      	str	r2, [r3, #8]
 80072bc:	e043      	b.n	8007346 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80072be:	687b      	ldr	r3, [r7, #4]
 80072c0:	2b00      	cmp	r3, #0
 80072c2:	d119      	bne.n	80072f8 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80072c4:	68fb      	ldr	r3, [r7, #12]
 80072c6:	6858      	ldr	r0, [r3, #4]
 80072c8:	68fb      	ldr	r3, [r7, #12]
 80072ca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80072cc:	461a      	mov	r2, r3
 80072ce:	68b9      	ldr	r1, [r7, #8]
 80072d0:	f00e fb6f 	bl	80159b2 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80072d4:	68fb      	ldr	r3, [r7, #12]
 80072d6:	685a      	ldr	r2, [r3, #4]
 80072d8:	68fb      	ldr	r3, [r7, #12]
 80072da:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80072dc:	441a      	add	r2, r3
 80072de:	68fb      	ldr	r3, [r7, #12]
 80072e0:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80072e2:	68fb      	ldr	r3, [r7, #12]
 80072e4:	685a      	ldr	r2, [r3, #4]
 80072e6:	68fb      	ldr	r3, [r7, #12]
 80072e8:	689b      	ldr	r3, [r3, #8]
 80072ea:	429a      	cmp	r2, r3
 80072ec:	d32b      	bcc.n	8007346 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80072ee:	68fb      	ldr	r3, [r7, #12]
 80072f0:	681a      	ldr	r2, [r3, #0]
 80072f2:	68fb      	ldr	r3, [r7, #12]
 80072f4:	605a      	str	r2, [r3, #4]
 80072f6:	e026      	b.n	8007346 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80072f8:	68fb      	ldr	r3, [r7, #12]
 80072fa:	68d8      	ldr	r0, [r3, #12]
 80072fc:	68fb      	ldr	r3, [r7, #12]
 80072fe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007300:	461a      	mov	r2, r3
 8007302:	68b9      	ldr	r1, [r7, #8]
 8007304:	f00e fb55 	bl	80159b2 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8007308:	68fb      	ldr	r3, [r7, #12]
 800730a:	68da      	ldr	r2, [r3, #12]
 800730c:	68fb      	ldr	r3, [r7, #12]
 800730e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007310:	425b      	negs	r3, r3
 8007312:	441a      	add	r2, r3
 8007314:	68fb      	ldr	r3, [r7, #12]
 8007316:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8007318:	68fb      	ldr	r3, [r7, #12]
 800731a:	68da      	ldr	r2, [r3, #12]
 800731c:	68fb      	ldr	r3, [r7, #12]
 800731e:	681b      	ldr	r3, [r3, #0]
 8007320:	429a      	cmp	r2, r3
 8007322:	d207      	bcs.n	8007334 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8007324:	68fb      	ldr	r3, [r7, #12]
 8007326:	689a      	ldr	r2, [r3, #8]
 8007328:	68fb      	ldr	r3, [r7, #12]
 800732a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800732c:	425b      	negs	r3, r3
 800732e:	441a      	add	r2, r3
 8007330:	68fb      	ldr	r3, [r7, #12]
 8007332:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8007334:	687b      	ldr	r3, [r7, #4]
 8007336:	2b02      	cmp	r3, #2
 8007338:	d105      	bne.n	8007346 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800733a:	693b      	ldr	r3, [r7, #16]
 800733c:	2b00      	cmp	r3, #0
 800733e:	d002      	beq.n	8007346 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8007340:	693b      	ldr	r3, [r7, #16]
 8007342:	3b01      	subs	r3, #1
 8007344:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8007346:	693b      	ldr	r3, [r7, #16]
 8007348:	1c5a      	adds	r2, r3, #1
 800734a:	68fb      	ldr	r3, [r7, #12]
 800734c:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 800734e:	697b      	ldr	r3, [r7, #20]
}
 8007350:	4618      	mov	r0, r3
 8007352:	3718      	adds	r7, #24
 8007354:	46bd      	mov	sp, r7
 8007356:	bd80      	pop	{r7, pc}

08007358 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8007358:	b580      	push	{r7, lr}
 800735a:	b082      	sub	sp, #8
 800735c:	af00      	add	r7, sp, #0
 800735e:	6078      	str	r0, [r7, #4]
 8007360:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8007362:	687b      	ldr	r3, [r7, #4]
 8007364:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007366:	2b00      	cmp	r3, #0
 8007368:	d018      	beq.n	800739c <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800736a:	687b      	ldr	r3, [r7, #4]
 800736c:	68da      	ldr	r2, [r3, #12]
 800736e:	687b      	ldr	r3, [r7, #4]
 8007370:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007372:	441a      	add	r2, r3
 8007374:	687b      	ldr	r3, [r7, #4]
 8007376:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8007378:	687b      	ldr	r3, [r7, #4]
 800737a:	68da      	ldr	r2, [r3, #12]
 800737c:	687b      	ldr	r3, [r7, #4]
 800737e:	689b      	ldr	r3, [r3, #8]
 8007380:	429a      	cmp	r2, r3
 8007382:	d303      	bcc.n	800738c <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8007384:	687b      	ldr	r3, [r7, #4]
 8007386:	681a      	ldr	r2, [r3, #0]
 8007388:	687b      	ldr	r3, [r7, #4]
 800738a:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	68d9      	ldr	r1, [r3, #12]
 8007390:	687b      	ldr	r3, [r7, #4]
 8007392:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007394:	461a      	mov	r2, r3
 8007396:	6838      	ldr	r0, [r7, #0]
 8007398:	f00e fb0b 	bl	80159b2 <memcpy>
	}
}
 800739c:	bf00      	nop
 800739e:	3708      	adds	r7, #8
 80073a0:	46bd      	mov	sp, r7
 80073a2:	bd80      	pop	{r7, pc}

080073a4 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80073a4:	b580      	push	{r7, lr}
 80073a6:	b084      	sub	sp, #16
 80073a8:	af00      	add	r7, sp, #0
 80073aa:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80073ac:	f001 fc94 	bl	8008cd8 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80073b0:	687b      	ldr	r3, [r7, #4]
 80073b2:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80073b6:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80073b8:	e011      	b.n	80073de <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80073ba:	687b      	ldr	r3, [r7, #4]
 80073bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80073be:	2b00      	cmp	r3, #0
 80073c0:	d012      	beq.n	80073e8 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80073c2:	687b      	ldr	r3, [r7, #4]
 80073c4:	3324      	adds	r3, #36	@ 0x24
 80073c6:	4618      	mov	r0, r3
 80073c8:	f000 fd34 	bl	8007e34 <xTaskRemoveFromEventList>
 80073cc:	4603      	mov	r3, r0
 80073ce:	2b00      	cmp	r3, #0
 80073d0:	d001      	beq.n	80073d6 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80073d2:	f000 fe35 	bl	8008040 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80073d6:	7bfb      	ldrb	r3, [r7, #15]
 80073d8:	3b01      	subs	r3, #1
 80073da:	b2db      	uxtb	r3, r3
 80073dc:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80073de:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80073e2:	2b00      	cmp	r3, #0
 80073e4:	dce9      	bgt.n	80073ba <prvUnlockQueue+0x16>
 80073e6:	e000      	b.n	80073ea <prvUnlockQueue+0x46>
					break;
 80073e8:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80073ea:	687b      	ldr	r3, [r7, #4]
 80073ec:	22ff      	movs	r2, #255	@ 0xff
 80073ee:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 80073f2:	f001 fca3 	bl	8008d3c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80073f6:	f001 fc6f 	bl	8008cd8 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80073fa:	687b      	ldr	r3, [r7, #4]
 80073fc:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8007400:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8007402:	e011      	b.n	8007428 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007404:	687b      	ldr	r3, [r7, #4]
 8007406:	691b      	ldr	r3, [r3, #16]
 8007408:	2b00      	cmp	r3, #0
 800740a:	d012      	beq.n	8007432 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800740c:	687b      	ldr	r3, [r7, #4]
 800740e:	3310      	adds	r3, #16
 8007410:	4618      	mov	r0, r3
 8007412:	f000 fd0f 	bl	8007e34 <xTaskRemoveFromEventList>
 8007416:	4603      	mov	r3, r0
 8007418:	2b00      	cmp	r3, #0
 800741a:	d001      	beq.n	8007420 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800741c:	f000 fe10 	bl	8008040 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8007420:	7bbb      	ldrb	r3, [r7, #14]
 8007422:	3b01      	subs	r3, #1
 8007424:	b2db      	uxtb	r3, r3
 8007426:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8007428:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800742c:	2b00      	cmp	r3, #0
 800742e:	dce9      	bgt.n	8007404 <prvUnlockQueue+0x60>
 8007430:	e000      	b.n	8007434 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8007432:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8007434:	687b      	ldr	r3, [r7, #4]
 8007436:	22ff      	movs	r2, #255	@ 0xff
 8007438:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 800743c:	f001 fc7e 	bl	8008d3c <vPortExitCritical>
}
 8007440:	bf00      	nop
 8007442:	3710      	adds	r7, #16
 8007444:	46bd      	mov	sp, r7
 8007446:	bd80      	pop	{r7, pc}

08007448 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8007448:	b580      	push	{r7, lr}
 800744a:	b084      	sub	sp, #16
 800744c:	af00      	add	r7, sp, #0
 800744e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8007450:	f001 fc42 	bl	8008cd8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8007454:	687b      	ldr	r3, [r7, #4]
 8007456:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007458:	2b00      	cmp	r3, #0
 800745a:	d102      	bne.n	8007462 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800745c:	2301      	movs	r3, #1
 800745e:	60fb      	str	r3, [r7, #12]
 8007460:	e001      	b.n	8007466 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8007462:	2300      	movs	r3, #0
 8007464:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8007466:	f001 fc69 	bl	8008d3c <vPortExitCritical>

	return xReturn;
 800746a:	68fb      	ldr	r3, [r7, #12]
}
 800746c:	4618      	mov	r0, r3
 800746e:	3710      	adds	r7, #16
 8007470:	46bd      	mov	sp, r7
 8007472:	bd80      	pop	{r7, pc}

08007474 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8007474:	b580      	push	{r7, lr}
 8007476:	b084      	sub	sp, #16
 8007478:	af00      	add	r7, sp, #0
 800747a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800747c:	f001 fc2c 	bl	8008cd8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8007480:	687b      	ldr	r3, [r7, #4]
 8007482:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007484:	687b      	ldr	r3, [r7, #4]
 8007486:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007488:	429a      	cmp	r2, r3
 800748a:	d102      	bne.n	8007492 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800748c:	2301      	movs	r3, #1
 800748e:	60fb      	str	r3, [r7, #12]
 8007490:	e001      	b.n	8007496 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8007492:	2300      	movs	r3, #0
 8007494:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8007496:	f001 fc51 	bl	8008d3c <vPortExitCritical>

	return xReturn;
 800749a:	68fb      	ldr	r3, [r7, #12]
}
 800749c:	4618      	mov	r0, r3
 800749e:	3710      	adds	r7, #16
 80074a0:	46bd      	mov	sp, r7
 80074a2:	bd80      	pop	{r7, pc}

080074a4 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 80074a4:	b480      	push	{r7}
 80074a6:	b085      	sub	sp, #20
 80074a8:	af00      	add	r7, sp, #0
 80074aa:	6078      	str	r0, [r7, #4]
 80074ac:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80074ae:	2300      	movs	r3, #0
 80074b0:	60fb      	str	r3, [r7, #12]
 80074b2:	e014      	b.n	80074de <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80074b4:	4a0f      	ldr	r2, [pc, #60]	@ (80074f4 <vQueueAddToRegistry+0x50>)
 80074b6:	68fb      	ldr	r3, [r7, #12]
 80074b8:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80074bc:	2b00      	cmp	r3, #0
 80074be:	d10b      	bne.n	80074d8 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80074c0:	490c      	ldr	r1, [pc, #48]	@ (80074f4 <vQueueAddToRegistry+0x50>)
 80074c2:	68fb      	ldr	r3, [r7, #12]
 80074c4:	683a      	ldr	r2, [r7, #0]
 80074c6:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 80074ca:	4a0a      	ldr	r2, [pc, #40]	@ (80074f4 <vQueueAddToRegistry+0x50>)
 80074cc:	68fb      	ldr	r3, [r7, #12]
 80074ce:	00db      	lsls	r3, r3, #3
 80074d0:	4413      	add	r3, r2
 80074d2:	687a      	ldr	r2, [r7, #4]
 80074d4:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 80074d6:	e006      	b.n	80074e6 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80074d8:	68fb      	ldr	r3, [r7, #12]
 80074da:	3301      	adds	r3, #1
 80074dc:	60fb      	str	r3, [r7, #12]
 80074de:	68fb      	ldr	r3, [r7, #12]
 80074e0:	2b07      	cmp	r3, #7
 80074e2:	d9e7      	bls.n	80074b4 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80074e4:	bf00      	nop
 80074e6:	bf00      	nop
 80074e8:	3714      	adds	r7, #20
 80074ea:	46bd      	mov	sp, r7
 80074ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074f0:	4770      	bx	lr
 80074f2:	bf00      	nop
 80074f4:	20004ea0 	.word	0x20004ea0

080074f8 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80074f8:	b580      	push	{r7, lr}
 80074fa:	b086      	sub	sp, #24
 80074fc:	af00      	add	r7, sp, #0
 80074fe:	60f8      	str	r0, [r7, #12]
 8007500:	60b9      	str	r1, [r7, #8]
 8007502:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8007504:	68fb      	ldr	r3, [r7, #12]
 8007506:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8007508:	f001 fbe6 	bl	8008cd8 <vPortEnterCritical>
 800750c:	697b      	ldr	r3, [r7, #20]
 800750e:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8007512:	b25b      	sxtb	r3, r3
 8007514:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8007518:	d103      	bne.n	8007522 <vQueueWaitForMessageRestricted+0x2a>
 800751a:	697b      	ldr	r3, [r7, #20]
 800751c:	2200      	movs	r2, #0
 800751e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8007522:	697b      	ldr	r3, [r7, #20]
 8007524:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8007528:	b25b      	sxtb	r3, r3
 800752a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800752e:	d103      	bne.n	8007538 <vQueueWaitForMessageRestricted+0x40>
 8007530:	697b      	ldr	r3, [r7, #20]
 8007532:	2200      	movs	r2, #0
 8007534:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8007538:	f001 fc00 	bl	8008d3c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800753c:	697b      	ldr	r3, [r7, #20]
 800753e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007540:	2b00      	cmp	r3, #0
 8007542:	d106      	bne.n	8007552 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8007544:	697b      	ldr	r3, [r7, #20]
 8007546:	3324      	adds	r3, #36	@ 0x24
 8007548:	687a      	ldr	r2, [r7, #4]
 800754a:	68b9      	ldr	r1, [r7, #8]
 800754c:	4618      	mov	r0, r3
 800754e:	f000 fc45 	bl	8007ddc <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8007552:	6978      	ldr	r0, [r7, #20]
 8007554:	f7ff ff26 	bl	80073a4 <prvUnlockQueue>
	}
 8007558:	bf00      	nop
 800755a:	3718      	adds	r7, #24
 800755c:	46bd      	mov	sp, r7
 800755e:	bd80      	pop	{r7, pc}

08007560 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8007560:	b580      	push	{r7, lr}
 8007562:	b08e      	sub	sp, #56	@ 0x38
 8007564:	af04      	add	r7, sp, #16
 8007566:	60f8      	str	r0, [r7, #12]
 8007568:	60b9      	str	r1, [r7, #8]
 800756a:	607a      	str	r2, [r7, #4]
 800756c:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800756e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007570:	2b00      	cmp	r3, #0
 8007572:	d10b      	bne.n	800758c <xTaskCreateStatic+0x2c>
	__asm volatile
 8007574:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007578:	f383 8811 	msr	BASEPRI, r3
 800757c:	f3bf 8f6f 	isb	sy
 8007580:	f3bf 8f4f 	dsb	sy
 8007584:	623b      	str	r3, [r7, #32]
}
 8007586:	bf00      	nop
 8007588:	bf00      	nop
 800758a:	e7fd      	b.n	8007588 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800758c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800758e:	2b00      	cmp	r3, #0
 8007590:	d10b      	bne.n	80075aa <xTaskCreateStatic+0x4a>
	__asm volatile
 8007592:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007596:	f383 8811 	msr	BASEPRI, r3
 800759a:	f3bf 8f6f 	isb	sy
 800759e:	f3bf 8f4f 	dsb	sy
 80075a2:	61fb      	str	r3, [r7, #28]
}
 80075a4:	bf00      	nop
 80075a6:	bf00      	nop
 80075a8:	e7fd      	b.n	80075a6 <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80075aa:	235c      	movs	r3, #92	@ 0x5c
 80075ac:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80075ae:	693b      	ldr	r3, [r7, #16]
 80075b0:	2b5c      	cmp	r3, #92	@ 0x5c
 80075b2:	d00b      	beq.n	80075cc <xTaskCreateStatic+0x6c>
	__asm volatile
 80075b4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80075b8:	f383 8811 	msr	BASEPRI, r3
 80075bc:	f3bf 8f6f 	isb	sy
 80075c0:	f3bf 8f4f 	dsb	sy
 80075c4:	61bb      	str	r3, [r7, #24]
}
 80075c6:	bf00      	nop
 80075c8:	bf00      	nop
 80075ca:	e7fd      	b.n	80075c8 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80075cc:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80075ce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80075d0:	2b00      	cmp	r3, #0
 80075d2:	d01e      	beq.n	8007612 <xTaskCreateStatic+0xb2>
 80075d4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80075d6:	2b00      	cmp	r3, #0
 80075d8:	d01b      	beq.n	8007612 <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80075da:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80075dc:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80075de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80075e0:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80075e2:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80075e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80075e6:	2202      	movs	r2, #2
 80075e8:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80075ec:	2300      	movs	r3, #0
 80075ee:	9303      	str	r3, [sp, #12]
 80075f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80075f2:	9302      	str	r3, [sp, #8]
 80075f4:	f107 0314 	add.w	r3, r7, #20
 80075f8:	9301      	str	r3, [sp, #4]
 80075fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80075fc:	9300      	str	r3, [sp, #0]
 80075fe:	683b      	ldr	r3, [r7, #0]
 8007600:	687a      	ldr	r2, [r7, #4]
 8007602:	68b9      	ldr	r1, [r7, #8]
 8007604:	68f8      	ldr	r0, [r7, #12]
 8007606:	f000 f850 	bl	80076aa <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800760a:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800760c:	f000 f8de 	bl	80077cc <prvAddNewTaskToReadyList>
 8007610:	e001      	b.n	8007616 <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 8007612:	2300      	movs	r3, #0
 8007614:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8007616:	697b      	ldr	r3, [r7, #20]
	}
 8007618:	4618      	mov	r0, r3
 800761a:	3728      	adds	r7, #40	@ 0x28
 800761c:	46bd      	mov	sp, r7
 800761e:	bd80      	pop	{r7, pc}

08007620 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8007620:	b580      	push	{r7, lr}
 8007622:	b08c      	sub	sp, #48	@ 0x30
 8007624:	af04      	add	r7, sp, #16
 8007626:	60f8      	str	r0, [r7, #12]
 8007628:	60b9      	str	r1, [r7, #8]
 800762a:	603b      	str	r3, [r7, #0]
 800762c:	4613      	mov	r3, r2
 800762e:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8007630:	88fb      	ldrh	r3, [r7, #6]
 8007632:	009b      	lsls	r3, r3, #2
 8007634:	4618      	mov	r0, r3
 8007636:	f001 fc71 	bl	8008f1c <pvPortMalloc>
 800763a:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800763c:	697b      	ldr	r3, [r7, #20]
 800763e:	2b00      	cmp	r3, #0
 8007640:	d00e      	beq.n	8007660 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8007642:	205c      	movs	r0, #92	@ 0x5c
 8007644:	f001 fc6a 	bl	8008f1c <pvPortMalloc>
 8007648:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800764a:	69fb      	ldr	r3, [r7, #28]
 800764c:	2b00      	cmp	r3, #0
 800764e:	d003      	beq.n	8007658 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8007650:	69fb      	ldr	r3, [r7, #28]
 8007652:	697a      	ldr	r2, [r7, #20]
 8007654:	631a      	str	r2, [r3, #48]	@ 0x30
 8007656:	e005      	b.n	8007664 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8007658:	6978      	ldr	r0, [r7, #20]
 800765a:	f001 fd2d 	bl	80090b8 <vPortFree>
 800765e:	e001      	b.n	8007664 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8007660:	2300      	movs	r3, #0
 8007662:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8007664:	69fb      	ldr	r3, [r7, #28]
 8007666:	2b00      	cmp	r3, #0
 8007668:	d017      	beq.n	800769a <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800766a:	69fb      	ldr	r3, [r7, #28]
 800766c:	2200      	movs	r2, #0
 800766e:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8007672:	88fa      	ldrh	r2, [r7, #6]
 8007674:	2300      	movs	r3, #0
 8007676:	9303      	str	r3, [sp, #12]
 8007678:	69fb      	ldr	r3, [r7, #28]
 800767a:	9302      	str	r3, [sp, #8]
 800767c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800767e:	9301      	str	r3, [sp, #4]
 8007680:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007682:	9300      	str	r3, [sp, #0]
 8007684:	683b      	ldr	r3, [r7, #0]
 8007686:	68b9      	ldr	r1, [r7, #8]
 8007688:	68f8      	ldr	r0, [r7, #12]
 800768a:	f000 f80e 	bl	80076aa <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800768e:	69f8      	ldr	r0, [r7, #28]
 8007690:	f000 f89c 	bl	80077cc <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8007694:	2301      	movs	r3, #1
 8007696:	61bb      	str	r3, [r7, #24]
 8007698:	e002      	b.n	80076a0 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800769a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800769e:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80076a0:	69bb      	ldr	r3, [r7, #24]
	}
 80076a2:	4618      	mov	r0, r3
 80076a4:	3720      	adds	r7, #32
 80076a6:	46bd      	mov	sp, r7
 80076a8:	bd80      	pop	{r7, pc}

080076aa <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80076aa:	b580      	push	{r7, lr}
 80076ac:	b088      	sub	sp, #32
 80076ae:	af00      	add	r7, sp, #0
 80076b0:	60f8      	str	r0, [r7, #12]
 80076b2:	60b9      	str	r1, [r7, #8]
 80076b4:	607a      	str	r2, [r7, #4]
 80076b6:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80076b8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80076ba:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 80076bc:	687b      	ldr	r3, [r7, #4]
 80076be:	009b      	lsls	r3, r3, #2
 80076c0:	461a      	mov	r2, r3
 80076c2:	21a5      	movs	r1, #165	@ 0xa5
 80076c4:	f00e f8ac 	bl	8015820 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80076c8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80076ca:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80076cc:	687b      	ldr	r3, [r7, #4]
 80076ce:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80076d2:	3b01      	subs	r3, #1
 80076d4:	009b      	lsls	r3, r3, #2
 80076d6:	4413      	add	r3, r2
 80076d8:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80076da:	69bb      	ldr	r3, [r7, #24]
 80076dc:	f023 0307 	bic.w	r3, r3, #7
 80076e0:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80076e2:	69bb      	ldr	r3, [r7, #24]
 80076e4:	f003 0307 	and.w	r3, r3, #7
 80076e8:	2b00      	cmp	r3, #0
 80076ea:	d00b      	beq.n	8007704 <prvInitialiseNewTask+0x5a>
	__asm volatile
 80076ec:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80076f0:	f383 8811 	msr	BASEPRI, r3
 80076f4:	f3bf 8f6f 	isb	sy
 80076f8:	f3bf 8f4f 	dsb	sy
 80076fc:	617b      	str	r3, [r7, #20]
}
 80076fe:	bf00      	nop
 8007700:	bf00      	nop
 8007702:	e7fd      	b.n	8007700 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8007704:	68bb      	ldr	r3, [r7, #8]
 8007706:	2b00      	cmp	r3, #0
 8007708:	d01f      	beq.n	800774a <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800770a:	2300      	movs	r3, #0
 800770c:	61fb      	str	r3, [r7, #28]
 800770e:	e012      	b.n	8007736 <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8007710:	68ba      	ldr	r2, [r7, #8]
 8007712:	69fb      	ldr	r3, [r7, #28]
 8007714:	4413      	add	r3, r2
 8007716:	7819      	ldrb	r1, [r3, #0]
 8007718:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800771a:	69fb      	ldr	r3, [r7, #28]
 800771c:	4413      	add	r3, r2
 800771e:	3334      	adds	r3, #52	@ 0x34
 8007720:	460a      	mov	r2, r1
 8007722:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8007724:	68ba      	ldr	r2, [r7, #8]
 8007726:	69fb      	ldr	r3, [r7, #28]
 8007728:	4413      	add	r3, r2
 800772a:	781b      	ldrb	r3, [r3, #0]
 800772c:	2b00      	cmp	r3, #0
 800772e:	d006      	beq.n	800773e <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8007730:	69fb      	ldr	r3, [r7, #28]
 8007732:	3301      	adds	r3, #1
 8007734:	61fb      	str	r3, [r7, #28]
 8007736:	69fb      	ldr	r3, [r7, #28]
 8007738:	2b0f      	cmp	r3, #15
 800773a:	d9e9      	bls.n	8007710 <prvInitialiseNewTask+0x66>
 800773c:	e000      	b.n	8007740 <prvInitialiseNewTask+0x96>
			{
				break;
 800773e:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8007740:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007742:	2200      	movs	r2, #0
 8007744:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8007748:	e003      	b.n	8007752 <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800774a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800774c:	2200      	movs	r2, #0
 800774e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8007752:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007754:	2b37      	cmp	r3, #55	@ 0x37
 8007756:	d901      	bls.n	800775c <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8007758:	2337      	movs	r3, #55	@ 0x37
 800775a:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800775c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800775e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8007760:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8007762:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007764:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8007766:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8007768:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800776a:	2200      	movs	r2, #0
 800776c:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800776e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007770:	3304      	adds	r3, #4
 8007772:	4618      	mov	r0, r3
 8007774:	f7ff f966 	bl	8006a44 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8007778:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800777a:	3318      	adds	r3, #24
 800777c:	4618      	mov	r0, r3
 800777e:	f7ff f961 	bl	8006a44 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8007782:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007784:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007786:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007788:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800778a:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800778e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007790:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8007792:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007794:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007796:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8007798:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800779a:	2200      	movs	r2, #0
 800779c:	655a      	str	r2, [r3, #84]	@ 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800779e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80077a0:	2200      	movs	r2, #0
 80077a2:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80077a6:	683a      	ldr	r2, [r7, #0]
 80077a8:	68f9      	ldr	r1, [r7, #12]
 80077aa:	69b8      	ldr	r0, [r7, #24]
 80077ac:	f001 f966 	bl	8008a7c <pxPortInitialiseStack>
 80077b0:	4602      	mov	r2, r0
 80077b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80077b4:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80077b6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80077b8:	2b00      	cmp	r3, #0
 80077ba:	d002      	beq.n	80077c2 <prvInitialiseNewTask+0x118>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80077bc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80077be:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80077c0:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80077c2:	bf00      	nop
 80077c4:	3720      	adds	r7, #32
 80077c6:	46bd      	mov	sp, r7
 80077c8:	bd80      	pop	{r7, pc}
	...

080077cc <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80077cc:	b580      	push	{r7, lr}
 80077ce:	b082      	sub	sp, #8
 80077d0:	af00      	add	r7, sp, #0
 80077d2:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80077d4:	f001 fa80 	bl	8008cd8 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80077d8:	4b2d      	ldr	r3, [pc, #180]	@ (8007890 <prvAddNewTaskToReadyList+0xc4>)
 80077da:	681b      	ldr	r3, [r3, #0]
 80077dc:	3301      	adds	r3, #1
 80077de:	4a2c      	ldr	r2, [pc, #176]	@ (8007890 <prvAddNewTaskToReadyList+0xc4>)
 80077e0:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80077e2:	4b2c      	ldr	r3, [pc, #176]	@ (8007894 <prvAddNewTaskToReadyList+0xc8>)
 80077e4:	681b      	ldr	r3, [r3, #0]
 80077e6:	2b00      	cmp	r3, #0
 80077e8:	d109      	bne.n	80077fe <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80077ea:	4a2a      	ldr	r2, [pc, #168]	@ (8007894 <prvAddNewTaskToReadyList+0xc8>)
 80077ec:	687b      	ldr	r3, [r7, #4]
 80077ee:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80077f0:	4b27      	ldr	r3, [pc, #156]	@ (8007890 <prvAddNewTaskToReadyList+0xc4>)
 80077f2:	681b      	ldr	r3, [r3, #0]
 80077f4:	2b01      	cmp	r3, #1
 80077f6:	d110      	bne.n	800781a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80077f8:	f000 fc46 	bl	8008088 <prvInitialiseTaskLists>
 80077fc:	e00d      	b.n	800781a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80077fe:	4b26      	ldr	r3, [pc, #152]	@ (8007898 <prvAddNewTaskToReadyList+0xcc>)
 8007800:	681b      	ldr	r3, [r3, #0]
 8007802:	2b00      	cmp	r3, #0
 8007804:	d109      	bne.n	800781a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8007806:	4b23      	ldr	r3, [pc, #140]	@ (8007894 <prvAddNewTaskToReadyList+0xc8>)
 8007808:	681b      	ldr	r3, [r3, #0]
 800780a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800780c:	687b      	ldr	r3, [r7, #4]
 800780e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007810:	429a      	cmp	r2, r3
 8007812:	d802      	bhi.n	800781a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8007814:	4a1f      	ldr	r2, [pc, #124]	@ (8007894 <prvAddNewTaskToReadyList+0xc8>)
 8007816:	687b      	ldr	r3, [r7, #4]
 8007818:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800781a:	4b20      	ldr	r3, [pc, #128]	@ (800789c <prvAddNewTaskToReadyList+0xd0>)
 800781c:	681b      	ldr	r3, [r3, #0]
 800781e:	3301      	adds	r3, #1
 8007820:	4a1e      	ldr	r2, [pc, #120]	@ (800789c <prvAddNewTaskToReadyList+0xd0>)
 8007822:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8007824:	4b1d      	ldr	r3, [pc, #116]	@ (800789c <prvAddNewTaskToReadyList+0xd0>)
 8007826:	681a      	ldr	r2, [r3, #0]
 8007828:	687b      	ldr	r3, [r7, #4]
 800782a:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800782c:	687b      	ldr	r3, [r7, #4]
 800782e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007830:	4b1b      	ldr	r3, [pc, #108]	@ (80078a0 <prvAddNewTaskToReadyList+0xd4>)
 8007832:	681b      	ldr	r3, [r3, #0]
 8007834:	429a      	cmp	r2, r3
 8007836:	d903      	bls.n	8007840 <prvAddNewTaskToReadyList+0x74>
 8007838:	687b      	ldr	r3, [r7, #4]
 800783a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800783c:	4a18      	ldr	r2, [pc, #96]	@ (80078a0 <prvAddNewTaskToReadyList+0xd4>)
 800783e:	6013      	str	r3, [r2, #0]
 8007840:	687b      	ldr	r3, [r7, #4]
 8007842:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007844:	4613      	mov	r3, r2
 8007846:	009b      	lsls	r3, r3, #2
 8007848:	4413      	add	r3, r2
 800784a:	009b      	lsls	r3, r3, #2
 800784c:	4a15      	ldr	r2, [pc, #84]	@ (80078a4 <prvAddNewTaskToReadyList+0xd8>)
 800784e:	441a      	add	r2, r3
 8007850:	687b      	ldr	r3, [r7, #4]
 8007852:	3304      	adds	r3, #4
 8007854:	4619      	mov	r1, r3
 8007856:	4610      	mov	r0, r2
 8007858:	f7ff f901 	bl	8006a5e <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800785c:	f001 fa6e 	bl	8008d3c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8007860:	4b0d      	ldr	r3, [pc, #52]	@ (8007898 <prvAddNewTaskToReadyList+0xcc>)
 8007862:	681b      	ldr	r3, [r3, #0]
 8007864:	2b00      	cmp	r3, #0
 8007866:	d00e      	beq.n	8007886 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8007868:	4b0a      	ldr	r3, [pc, #40]	@ (8007894 <prvAddNewTaskToReadyList+0xc8>)
 800786a:	681b      	ldr	r3, [r3, #0]
 800786c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800786e:	687b      	ldr	r3, [r7, #4]
 8007870:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007872:	429a      	cmp	r2, r3
 8007874:	d207      	bcs.n	8007886 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8007876:	4b0c      	ldr	r3, [pc, #48]	@ (80078a8 <prvAddNewTaskToReadyList+0xdc>)
 8007878:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800787c:	601a      	str	r2, [r3, #0]
 800787e:	f3bf 8f4f 	dsb	sy
 8007882:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007886:	bf00      	nop
 8007888:	3708      	adds	r7, #8
 800788a:	46bd      	mov	sp, r7
 800788c:	bd80      	pop	{r7, pc}
 800788e:	bf00      	nop
 8007890:	200053b4 	.word	0x200053b4
 8007894:	20004ee0 	.word	0x20004ee0
 8007898:	200053c0 	.word	0x200053c0
 800789c:	200053d0 	.word	0x200053d0
 80078a0:	200053bc 	.word	0x200053bc
 80078a4:	20004ee4 	.word	0x20004ee4
 80078a8:	e000ed04 	.word	0xe000ed04

080078ac <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80078ac:	b580      	push	{r7, lr}
 80078ae:	b084      	sub	sp, #16
 80078b0:	af00      	add	r7, sp, #0
 80078b2:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80078b4:	2300      	movs	r3, #0
 80078b6:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80078b8:	687b      	ldr	r3, [r7, #4]
 80078ba:	2b00      	cmp	r3, #0
 80078bc:	d018      	beq.n	80078f0 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80078be:	4b14      	ldr	r3, [pc, #80]	@ (8007910 <vTaskDelay+0x64>)
 80078c0:	681b      	ldr	r3, [r3, #0]
 80078c2:	2b00      	cmp	r3, #0
 80078c4:	d00b      	beq.n	80078de <vTaskDelay+0x32>
	__asm volatile
 80078c6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80078ca:	f383 8811 	msr	BASEPRI, r3
 80078ce:	f3bf 8f6f 	isb	sy
 80078d2:	f3bf 8f4f 	dsb	sy
 80078d6:	60bb      	str	r3, [r7, #8]
}
 80078d8:	bf00      	nop
 80078da:	bf00      	nop
 80078dc:	e7fd      	b.n	80078da <vTaskDelay+0x2e>
			vTaskSuspendAll();
 80078de:	f000 f883 	bl	80079e8 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80078e2:	2100      	movs	r1, #0
 80078e4:	6878      	ldr	r0, [r7, #4]
 80078e6:	f000 fd1b 	bl	8008320 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80078ea:	f000 f88b 	bl	8007a04 <xTaskResumeAll>
 80078ee:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80078f0:	68fb      	ldr	r3, [r7, #12]
 80078f2:	2b00      	cmp	r3, #0
 80078f4:	d107      	bne.n	8007906 <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 80078f6:	4b07      	ldr	r3, [pc, #28]	@ (8007914 <vTaskDelay+0x68>)
 80078f8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80078fc:	601a      	str	r2, [r3, #0]
 80078fe:	f3bf 8f4f 	dsb	sy
 8007902:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8007906:	bf00      	nop
 8007908:	3710      	adds	r7, #16
 800790a:	46bd      	mov	sp, r7
 800790c:	bd80      	pop	{r7, pc}
 800790e:	bf00      	nop
 8007910:	200053dc 	.word	0x200053dc
 8007914:	e000ed04 	.word	0xe000ed04

08007918 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8007918:	b580      	push	{r7, lr}
 800791a:	b08a      	sub	sp, #40	@ 0x28
 800791c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800791e:	2300      	movs	r3, #0
 8007920:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8007922:	2300      	movs	r3, #0
 8007924:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8007926:	463a      	mov	r2, r7
 8007928:	1d39      	adds	r1, r7, #4
 800792a:	f107 0308 	add.w	r3, r7, #8
 800792e:	4618      	mov	r0, r3
 8007930:	f7ff f834 	bl	800699c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8007934:	6839      	ldr	r1, [r7, #0]
 8007936:	687b      	ldr	r3, [r7, #4]
 8007938:	68ba      	ldr	r2, [r7, #8]
 800793a:	9202      	str	r2, [sp, #8]
 800793c:	9301      	str	r3, [sp, #4]
 800793e:	2300      	movs	r3, #0
 8007940:	9300      	str	r3, [sp, #0]
 8007942:	2300      	movs	r3, #0
 8007944:	460a      	mov	r2, r1
 8007946:	4922      	ldr	r1, [pc, #136]	@ (80079d0 <vTaskStartScheduler+0xb8>)
 8007948:	4822      	ldr	r0, [pc, #136]	@ (80079d4 <vTaskStartScheduler+0xbc>)
 800794a:	f7ff fe09 	bl	8007560 <xTaskCreateStatic>
 800794e:	4603      	mov	r3, r0
 8007950:	4a21      	ldr	r2, [pc, #132]	@ (80079d8 <vTaskStartScheduler+0xc0>)
 8007952:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8007954:	4b20      	ldr	r3, [pc, #128]	@ (80079d8 <vTaskStartScheduler+0xc0>)
 8007956:	681b      	ldr	r3, [r3, #0]
 8007958:	2b00      	cmp	r3, #0
 800795a:	d002      	beq.n	8007962 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800795c:	2301      	movs	r3, #1
 800795e:	617b      	str	r3, [r7, #20]
 8007960:	e001      	b.n	8007966 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8007962:	2300      	movs	r3, #0
 8007964:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8007966:	697b      	ldr	r3, [r7, #20]
 8007968:	2b01      	cmp	r3, #1
 800796a:	d102      	bne.n	8007972 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800796c:	f000 fd2c 	bl	80083c8 <xTimerCreateTimerTask>
 8007970:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8007972:	697b      	ldr	r3, [r7, #20]
 8007974:	2b01      	cmp	r3, #1
 8007976:	d116      	bne.n	80079a6 <vTaskStartScheduler+0x8e>
	__asm volatile
 8007978:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800797c:	f383 8811 	msr	BASEPRI, r3
 8007980:	f3bf 8f6f 	isb	sy
 8007984:	f3bf 8f4f 	dsb	sy
 8007988:	613b      	str	r3, [r7, #16]
}
 800798a:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800798c:	4b13      	ldr	r3, [pc, #76]	@ (80079dc <vTaskStartScheduler+0xc4>)
 800798e:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8007992:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8007994:	4b12      	ldr	r3, [pc, #72]	@ (80079e0 <vTaskStartScheduler+0xc8>)
 8007996:	2201      	movs	r2, #1
 8007998:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800799a:	4b12      	ldr	r3, [pc, #72]	@ (80079e4 <vTaskStartScheduler+0xcc>)
 800799c:	2200      	movs	r2, #0
 800799e:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80079a0:	f001 f8f6 	bl	8008b90 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80079a4:	e00f      	b.n	80079c6 <vTaskStartScheduler+0xae>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80079a6:	697b      	ldr	r3, [r7, #20]
 80079a8:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80079ac:	d10b      	bne.n	80079c6 <vTaskStartScheduler+0xae>
	__asm volatile
 80079ae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80079b2:	f383 8811 	msr	BASEPRI, r3
 80079b6:	f3bf 8f6f 	isb	sy
 80079ba:	f3bf 8f4f 	dsb	sy
 80079be:	60fb      	str	r3, [r7, #12]
}
 80079c0:	bf00      	nop
 80079c2:	bf00      	nop
 80079c4:	e7fd      	b.n	80079c2 <vTaskStartScheduler+0xaa>
}
 80079c6:	bf00      	nop
 80079c8:	3718      	adds	r7, #24
 80079ca:	46bd      	mov	sp, r7
 80079cc:	bd80      	pop	{r7, pc}
 80079ce:	bf00      	nop
 80079d0:	08016828 	.word	0x08016828
 80079d4:	08008059 	.word	0x08008059
 80079d8:	200053d8 	.word	0x200053d8
 80079dc:	200053d4 	.word	0x200053d4
 80079e0:	200053c0 	.word	0x200053c0
 80079e4:	200053b8 	.word	0x200053b8

080079e8 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80079e8:	b480      	push	{r7}
 80079ea:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 80079ec:	4b04      	ldr	r3, [pc, #16]	@ (8007a00 <vTaskSuspendAll+0x18>)
 80079ee:	681b      	ldr	r3, [r3, #0]
 80079f0:	3301      	adds	r3, #1
 80079f2:	4a03      	ldr	r2, [pc, #12]	@ (8007a00 <vTaskSuspendAll+0x18>)
 80079f4:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 80079f6:	bf00      	nop
 80079f8:	46bd      	mov	sp, r7
 80079fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079fe:	4770      	bx	lr
 8007a00:	200053dc 	.word	0x200053dc

08007a04 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8007a04:	b580      	push	{r7, lr}
 8007a06:	b084      	sub	sp, #16
 8007a08:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8007a0a:	2300      	movs	r3, #0
 8007a0c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8007a0e:	2300      	movs	r3, #0
 8007a10:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8007a12:	4b42      	ldr	r3, [pc, #264]	@ (8007b1c <xTaskResumeAll+0x118>)
 8007a14:	681b      	ldr	r3, [r3, #0]
 8007a16:	2b00      	cmp	r3, #0
 8007a18:	d10b      	bne.n	8007a32 <xTaskResumeAll+0x2e>
	__asm volatile
 8007a1a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007a1e:	f383 8811 	msr	BASEPRI, r3
 8007a22:	f3bf 8f6f 	isb	sy
 8007a26:	f3bf 8f4f 	dsb	sy
 8007a2a:	603b      	str	r3, [r7, #0]
}
 8007a2c:	bf00      	nop
 8007a2e:	bf00      	nop
 8007a30:	e7fd      	b.n	8007a2e <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8007a32:	f001 f951 	bl	8008cd8 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8007a36:	4b39      	ldr	r3, [pc, #228]	@ (8007b1c <xTaskResumeAll+0x118>)
 8007a38:	681b      	ldr	r3, [r3, #0]
 8007a3a:	3b01      	subs	r3, #1
 8007a3c:	4a37      	ldr	r2, [pc, #220]	@ (8007b1c <xTaskResumeAll+0x118>)
 8007a3e:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007a40:	4b36      	ldr	r3, [pc, #216]	@ (8007b1c <xTaskResumeAll+0x118>)
 8007a42:	681b      	ldr	r3, [r3, #0]
 8007a44:	2b00      	cmp	r3, #0
 8007a46:	d162      	bne.n	8007b0e <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8007a48:	4b35      	ldr	r3, [pc, #212]	@ (8007b20 <xTaskResumeAll+0x11c>)
 8007a4a:	681b      	ldr	r3, [r3, #0]
 8007a4c:	2b00      	cmp	r3, #0
 8007a4e:	d05e      	beq.n	8007b0e <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8007a50:	e02f      	b.n	8007ab2 <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007a52:	4b34      	ldr	r3, [pc, #208]	@ (8007b24 <xTaskResumeAll+0x120>)
 8007a54:	68db      	ldr	r3, [r3, #12]
 8007a56:	68db      	ldr	r3, [r3, #12]
 8007a58:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8007a5a:	68fb      	ldr	r3, [r7, #12]
 8007a5c:	3318      	adds	r3, #24
 8007a5e:	4618      	mov	r0, r3
 8007a60:	f7ff f85a 	bl	8006b18 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007a64:	68fb      	ldr	r3, [r7, #12]
 8007a66:	3304      	adds	r3, #4
 8007a68:	4618      	mov	r0, r3
 8007a6a:	f7ff f855 	bl	8006b18 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8007a6e:	68fb      	ldr	r3, [r7, #12]
 8007a70:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007a72:	4b2d      	ldr	r3, [pc, #180]	@ (8007b28 <xTaskResumeAll+0x124>)
 8007a74:	681b      	ldr	r3, [r3, #0]
 8007a76:	429a      	cmp	r2, r3
 8007a78:	d903      	bls.n	8007a82 <xTaskResumeAll+0x7e>
 8007a7a:	68fb      	ldr	r3, [r7, #12]
 8007a7c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007a7e:	4a2a      	ldr	r2, [pc, #168]	@ (8007b28 <xTaskResumeAll+0x124>)
 8007a80:	6013      	str	r3, [r2, #0]
 8007a82:	68fb      	ldr	r3, [r7, #12]
 8007a84:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007a86:	4613      	mov	r3, r2
 8007a88:	009b      	lsls	r3, r3, #2
 8007a8a:	4413      	add	r3, r2
 8007a8c:	009b      	lsls	r3, r3, #2
 8007a8e:	4a27      	ldr	r2, [pc, #156]	@ (8007b2c <xTaskResumeAll+0x128>)
 8007a90:	441a      	add	r2, r3
 8007a92:	68fb      	ldr	r3, [r7, #12]
 8007a94:	3304      	adds	r3, #4
 8007a96:	4619      	mov	r1, r3
 8007a98:	4610      	mov	r0, r2
 8007a9a:	f7fe ffe0 	bl	8006a5e <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8007a9e:	68fb      	ldr	r3, [r7, #12]
 8007aa0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007aa2:	4b23      	ldr	r3, [pc, #140]	@ (8007b30 <xTaskResumeAll+0x12c>)
 8007aa4:	681b      	ldr	r3, [r3, #0]
 8007aa6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007aa8:	429a      	cmp	r2, r3
 8007aaa:	d302      	bcc.n	8007ab2 <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 8007aac:	4b21      	ldr	r3, [pc, #132]	@ (8007b34 <xTaskResumeAll+0x130>)
 8007aae:	2201      	movs	r2, #1
 8007ab0:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8007ab2:	4b1c      	ldr	r3, [pc, #112]	@ (8007b24 <xTaskResumeAll+0x120>)
 8007ab4:	681b      	ldr	r3, [r3, #0]
 8007ab6:	2b00      	cmp	r3, #0
 8007ab8:	d1cb      	bne.n	8007a52 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8007aba:	68fb      	ldr	r3, [r7, #12]
 8007abc:	2b00      	cmp	r3, #0
 8007abe:	d001      	beq.n	8007ac4 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8007ac0:	f000 fb80 	bl	80081c4 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8007ac4:	4b1c      	ldr	r3, [pc, #112]	@ (8007b38 <xTaskResumeAll+0x134>)
 8007ac6:	681b      	ldr	r3, [r3, #0]
 8007ac8:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8007aca:	687b      	ldr	r3, [r7, #4]
 8007acc:	2b00      	cmp	r3, #0
 8007ace:	d010      	beq.n	8007af2 <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8007ad0:	f000 f846 	bl	8007b60 <xTaskIncrementTick>
 8007ad4:	4603      	mov	r3, r0
 8007ad6:	2b00      	cmp	r3, #0
 8007ad8:	d002      	beq.n	8007ae0 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 8007ada:	4b16      	ldr	r3, [pc, #88]	@ (8007b34 <xTaskResumeAll+0x130>)
 8007adc:	2201      	movs	r2, #1
 8007ade:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8007ae0:	687b      	ldr	r3, [r7, #4]
 8007ae2:	3b01      	subs	r3, #1
 8007ae4:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8007ae6:	687b      	ldr	r3, [r7, #4]
 8007ae8:	2b00      	cmp	r3, #0
 8007aea:	d1f1      	bne.n	8007ad0 <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 8007aec:	4b12      	ldr	r3, [pc, #72]	@ (8007b38 <xTaskResumeAll+0x134>)
 8007aee:	2200      	movs	r2, #0
 8007af0:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8007af2:	4b10      	ldr	r3, [pc, #64]	@ (8007b34 <xTaskResumeAll+0x130>)
 8007af4:	681b      	ldr	r3, [r3, #0]
 8007af6:	2b00      	cmp	r3, #0
 8007af8:	d009      	beq.n	8007b0e <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8007afa:	2301      	movs	r3, #1
 8007afc:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8007afe:	4b0f      	ldr	r3, [pc, #60]	@ (8007b3c <xTaskResumeAll+0x138>)
 8007b00:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007b04:	601a      	str	r2, [r3, #0]
 8007b06:	f3bf 8f4f 	dsb	sy
 8007b0a:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8007b0e:	f001 f915 	bl	8008d3c <vPortExitCritical>

	return xAlreadyYielded;
 8007b12:	68bb      	ldr	r3, [r7, #8]
}
 8007b14:	4618      	mov	r0, r3
 8007b16:	3710      	adds	r7, #16
 8007b18:	46bd      	mov	sp, r7
 8007b1a:	bd80      	pop	{r7, pc}
 8007b1c:	200053dc 	.word	0x200053dc
 8007b20:	200053b4 	.word	0x200053b4
 8007b24:	20005374 	.word	0x20005374
 8007b28:	200053bc 	.word	0x200053bc
 8007b2c:	20004ee4 	.word	0x20004ee4
 8007b30:	20004ee0 	.word	0x20004ee0
 8007b34:	200053c8 	.word	0x200053c8
 8007b38:	200053c4 	.word	0x200053c4
 8007b3c:	e000ed04 	.word	0xe000ed04

08007b40 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8007b40:	b480      	push	{r7}
 8007b42:	b083      	sub	sp, #12
 8007b44:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8007b46:	4b05      	ldr	r3, [pc, #20]	@ (8007b5c <xTaskGetTickCount+0x1c>)
 8007b48:	681b      	ldr	r3, [r3, #0]
 8007b4a:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8007b4c:	687b      	ldr	r3, [r7, #4]
}
 8007b4e:	4618      	mov	r0, r3
 8007b50:	370c      	adds	r7, #12
 8007b52:	46bd      	mov	sp, r7
 8007b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b58:	4770      	bx	lr
 8007b5a:	bf00      	nop
 8007b5c:	200053b8 	.word	0x200053b8

08007b60 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8007b60:	b580      	push	{r7, lr}
 8007b62:	b086      	sub	sp, #24
 8007b64:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8007b66:	2300      	movs	r3, #0
 8007b68:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007b6a:	4b4f      	ldr	r3, [pc, #316]	@ (8007ca8 <xTaskIncrementTick+0x148>)
 8007b6c:	681b      	ldr	r3, [r3, #0]
 8007b6e:	2b00      	cmp	r3, #0
 8007b70:	f040 8090 	bne.w	8007c94 <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8007b74:	4b4d      	ldr	r3, [pc, #308]	@ (8007cac <xTaskIncrementTick+0x14c>)
 8007b76:	681b      	ldr	r3, [r3, #0]
 8007b78:	3301      	adds	r3, #1
 8007b7a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8007b7c:	4a4b      	ldr	r2, [pc, #300]	@ (8007cac <xTaskIncrementTick+0x14c>)
 8007b7e:	693b      	ldr	r3, [r7, #16]
 8007b80:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8007b82:	693b      	ldr	r3, [r7, #16]
 8007b84:	2b00      	cmp	r3, #0
 8007b86:	d121      	bne.n	8007bcc <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8007b88:	4b49      	ldr	r3, [pc, #292]	@ (8007cb0 <xTaskIncrementTick+0x150>)
 8007b8a:	681b      	ldr	r3, [r3, #0]
 8007b8c:	681b      	ldr	r3, [r3, #0]
 8007b8e:	2b00      	cmp	r3, #0
 8007b90:	d00b      	beq.n	8007baa <xTaskIncrementTick+0x4a>
	__asm volatile
 8007b92:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007b96:	f383 8811 	msr	BASEPRI, r3
 8007b9a:	f3bf 8f6f 	isb	sy
 8007b9e:	f3bf 8f4f 	dsb	sy
 8007ba2:	603b      	str	r3, [r7, #0]
}
 8007ba4:	bf00      	nop
 8007ba6:	bf00      	nop
 8007ba8:	e7fd      	b.n	8007ba6 <xTaskIncrementTick+0x46>
 8007baa:	4b41      	ldr	r3, [pc, #260]	@ (8007cb0 <xTaskIncrementTick+0x150>)
 8007bac:	681b      	ldr	r3, [r3, #0]
 8007bae:	60fb      	str	r3, [r7, #12]
 8007bb0:	4b40      	ldr	r3, [pc, #256]	@ (8007cb4 <xTaskIncrementTick+0x154>)
 8007bb2:	681b      	ldr	r3, [r3, #0]
 8007bb4:	4a3e      	ldr	r2, [pc, #248]	@ (8007cb0 <xTaskIncrementTick+0x150>)
 8007bb6:	6013      	str	r3, [r2, #0]
 8007bb8:	4a3e      	ldr	r2, [pc, #248]	@ (8007cb4 <xTaskIncrementTick+0x154>)
 8007bba:	68fb      	ldr	r3, [r7, #12]
 8007bbc:	6013      	str	r3, [r2, #0]
 8007bbe:	4b3e      	ldr	r3, [pc, #248]	@ (8007cb8 <xTaskIncrementTick+0x158>)
 8007bc0:	681b      	ldr	r3, [r3, #0]
 8007bc2:	3301      	adds	r3, #1
 8007bc4:	4a3c      	ldr	r2, [pc, #240]	@ (8007cb8 <xTaskIncrementTick+0x158>)
 8007bc6:	6013      	str	r3, [r2, #0]
 8007bc8:	f000 fafc 	bl	80081c4 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8007bcc:	4b3b      	ldr	r3, [pc, #236]	@ (8007cbc <xTaskIncrementTick+0x15c>)
 8007bce:	681b      	ldr	r3, [r3, #0]
 8007bd0:	693a      	ldr	r2, [r7, #16]
 8007bd2:	429a      	cmp	r2, r3
 8007bd4:	d349      	bcc.n	8007c6a <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007bd6:	4b36      	ldr	r3, [pc, #216]	@ (8007cb0 <xTaskIncrementTick+0x150>)
 8007bd8:	681b      	ldr	r3, [r3, #0]
 8007bda:	681b      	ldr	r3, [r3, #0]
 8007bdc:	2b00      	cmp	r3, #0
 8007bde:	d104      	bne.n	8007bea <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007be0:	4b36      	ldr	r3, [pc, #216]	@ (8007cbc <xTaskIncrementTick+0x15c>)
 8007be2:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8007be6:	601a      	str	r2, [r3, #0]
					break;
 8007be8:	e03f      	b.n	8007c6a <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007bea:	4b31      	ldr	r3, [pc, #196]	@ (8007cb0 <xTaskIncrementTick+0x150>)
 8007bec:	681b      	ldr	r3, [r3, #0]
 8007bee:	68db      	ldr	r3, [r3, #12]
 8007bf0:	68db      	ldr	r3, [r3, #12]
 8007bf2:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8007bf4:	68bb      	ldr	r3, [r7, #8]
 8007bf6:	685b      	ldr	r3, [r3, #4]
 8007bf8:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8007bfa:	693a      	ldr	r2, [r7, #16]
 8007bfc:	687b      	ldr	r3, [r7, #4]
 8007bfe:	429a      	cmp	r2, r3
 8007c00:	d203      	bcs.n	8007c0a <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8007c02:	4a2e      	ldr	r2, [pc, #184]	@ (8007cbc <xTaskIncrementTick+0x15c>)
 8007c04:	687b      	ldr	r3, [r7, #4]
 8007c06:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8007c08:	e02f      	b.n	8007c6a <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007c0a:	68bb      	ldr	r3, [r7, #8]
 8007c0c:	3304      	adds	r3, #4
 8007c0e:	4618      	mov	r0, r3
 8007c10:	f7fe ff82 	bl	8006b18 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8007c14:	68bb      	ldr	r3, [r7, #8]
 8007c16:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007c18:	2b00      	cmp	r3, #0
 8007c1a:	d004      	beq.n	8007c26 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8007c1c:	68bb      	ldr	r3, [r7, #8]
 8007c1e:	3318      	adds	r3, #24
 8007c20:	4618      	mov	r0, r3
 8007c22:	f7fe ff79 	bl	8006b18 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8007c26:	68bb      	ldr	r3, [r7, #8]
 8007c28:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007c2a:	4b25      	ldr	r3, [pc, #148]	@ (8007cc0 <xTaskIncrementTick+0x160>)
 8007c2c:	681b      	ldr	r3, [r3, #0]
 8007c2e:	429a      	cmp	r2, r3
 8007c30:	d903      	bls.n	8007c3a <xTaskIncrementTick+0xda>
 8007c32:	68bb      	ldr	r3, [r7, #8]
 8007c34:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007c36:	4a22      	ldr	r2, [pc, #136]	@ (8007cc0 <xTaskIncrementTick+0x160>)
 8007c38:	6013      	str	r3, [r2, #0]
 8007c3a:	68bb      	ldr	r3, [r7, #8]
 8007c3c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007c3e:	4613      	mov	r3, r2
 8007c40:	009b      	lsls	r3, r3, #2
 8007c42:	4413      	add	r3, r2
 8007c44:	009b      	lsls	r3, r3, #2
 8007c46:	4a1f      	ldr	r2, [pc, #124]	@ (8007cc4 <xTaskIncrementTick+0x164>)
 8007c48:	441a      	add	r2, r3
 8007c4a:	68bb      	ldr	r3, [r7, #8]
 8007c4c:	3304      	adds	r3, #4
 8007c4e:	4619      	mov	r1, r3
 8007c50:	4610      	mov	r0, r2
 8007c52:	f7fe ff04 	bl	8006a5e <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8007c56:	68bb      	ldr	r3, [r7, #8]
 8007c58:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007c5a:	4b1b      	ldr	r3, [pc, #108]	@ (8007cc8 <xTaskIncrementTick+0x168>)
 8007c5c:	681b      	ldr	r3, [r3, #0]
 8007c5e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007c60:	429a      	cmp	r2, r3
 8007c62:	d3b8      	bcc.n	8007bd6 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8007c64:	2301      	movs	r3, #1
 8007c66:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007c68:	e7b5      	b.n	8007bd6 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8007c6a:	4b17      	ldr	r3, [pc, #92]	@ (8007cc8 <xTaskIncrementTick+0x168>)
 8007c6c:	681b      	ldr	r3, [r3, #0]
 8007c6e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007c70:	4914      	ldr	r1, [pc, #80]	@ (8007cc4 <xTaskIncrementTick+0x164>)
 8007c72:	4613      	mov	r3, r2
 8007c74:	009b      	lsls	r3, r3, #2
 8007c76:	4413      	add	r3, r2
 8007c78:	009b      	lsls	r3, r3, #2
 8007c7a:	440b      	add	r3, r1
 8007c7c:	681b      	ldr	r3, [r3, #0]
 8007c7e:	2b01      	cmp	r3, #1
 8007c80:	d901      	bls.n	8007c86 <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 8007c82:	2301      	movs	r3, #1
 8007c84:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8007c86:	4b11      	ldr	r3, [pc, #68]	@ (8007ccc <xTaskIncrementTick+0x16c>)
 8007c88:	681b      	ldr	r3, [r3, #0]
 8007c8a:	2b00      	cmp	r3, #0
 8007c8c:	d007      	beq.n	8007c9e <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 8007c8e:	2301      	movs	r3, #1
 8007c90:	617b      	str	r3, [r7, #20]
 8007c92:	e004      	b.n	8007c9e <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8007c94:	4b0e      	ldr	r3, [pc, #56]	@ (8007cd0 <xTaskIncrementTick+0x170>)
 8007c96:	681b      	ldr	r3, [r3, #0]
 8007c98:	3301      	adds	r3, #1
 8007c9a:	4a0d      	ldr	r2, [pc, #52]	@ (8007cd0 <xTaskIncrementTick+0x170>)
 8007c9c:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8007c9e:	697b      	ldr	r3, [r7, #20]
}
 8007ca0:	4618      	mov	r0, r3
 8007ca2:	3718      	adds	r7, #24
 8007ca4:	46bd      	mov	sp, r7
 8007ca6:	bd80      	pop	{r7, pc}
 8007ca8:	200053dc 	.word	0x200053dc
 8007cac:	200053b8 	.word	0x200053b8
 8007cb0:	2000536c 	.word	0x2000536c
 8007cb4:	20005370 	.word	0x20005370
 8007cb8:	200053cc 	.word	0x200053cc
 8007cbc:	200053d4 	.word	0x200053d4
 8007cc0:	200053bc 	.word	0x200053bc
 8007cc4:	20004ee4 	.word	0x20004ee4
 8007cc8:	20004ee0 	.word	0x20004ee0
 8007ccc:	200053c8 	.word	0x200053c8
 8007cd0:	200053c4 	.word	0x200053c4

08007cd4 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8007cd4:	b480      	push	{r7}
 8007cd6:	b085      	sub	sp, #20
 8007cd8:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8007cda:	4b28      	ldr	r3, [pc, #160]	@ (8007d7c <vTaskSwitchContext+0xa8>)
 8007cdc:	681b      	ldr	r3, [r3, #0]
 8007cde:	2b00      	cmp	r3, #0
 8007ce0:	d003      	beq.n	8007cea <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8007ce2:	4b27      	ldr	r3, [pc, #156]	@ (8007d80 <vTaskSwitchContext+0xac>)
 8007ce4:	2201      	movs	r2, #1
 8007ce6:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8007ce8:	e042      	b.n	8007d70 <vTaskSwitchContext+0x9c>
		xYieldPending = pdFALSE;
 8007cea:	4b25      	ldr	r3, [pc, #148]	@ (8007d80 <vTaskSwitchContext+0xac>)
 8007cec:	2200      	movs	r2, #0
 8007cee:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007cf0:	4b24      	ldr	r3, [pc, #144]	@ (8007d84 <vTaskSwitchContext+0xb0>)
 8007cf2:	681b      	ldr	r3, [r3, #0]
 8007cf4:	60fb      	str	r3, [r7, #12]
 8007cf6:	e011      	b.n	8007d1c <vTaskSwitchContext+0x48>
 8007cf8:	68fb      	ldr	r3, [r7, #12]
 8007cfa:	2b00      	cmp	r3, #0
 8007cfc:	d10b      	bne.n	8007d16 <vTaskSwitchContext+0x42>
	__asm volatile
 8007cfe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007d02:	f383 8811 	msr	BASEPRI, r3
 8007d06:	f3bf 8f6f 	isb	sy
 8007d0a:	f3bf 8f4f 	dsb	sy
 8007d0e:	607b      	str	r3, [r7, #4]
}
 8007d10:	bf00      	nop
 8007d12:	bf00      	nop
 8007d14:	e7fd      	b.n	8007d12 <vTaskSwitchContext+0x3e>
 8007d16:	68fb      	ldr	r3, [r7, #12]
 8007d18:	3b01      	subs	r3, #1
 8007d1a:	60fb      	str	r3, [r7, #12]
 8007d1c:	491a      	ldr	r1, [pc, #104]	@ (8007d88 <vTaskSwitchContext+0xb4>)
 8007d1e:	68fa      	ldr	r2, [r7, #12]
 8007d20:	4613      	mov	r3, r2
 8007d22:	009b      	lsls	r3, r3, #2
 8007d24:	4413      	add	r3, r2
 8007d26:	009b      	lsls	r3, r3, #2
 8007d28:	440b      	add	r3, r1
 8007d2a:	681b      	ldr	r3, [r3, #0]
 8007d2c:	2b00      	cmp	r3, #0
 8007d2e:	d0e3      	beq.n	8007cf8 <vTaskSwitchContext+0x24>
 8007d30:	68fa      	ldr	r2, [r7, #12]
 8007d32:	4613      	mov	r3, r2
 8007d34:	009b      	lsls	r3, r3, #2
 8007d36:	4413      	add	r3, r2
 8007d38:	009b      	lsls	r3, r3, #2
 8007d3a:	4a13      	ldr	r2, [pc, #76]	@ (8007d88 <vTaskSwitchContext+0xb4>)
 8007d3c:	4413      	add	r3, r2
 8007d3e:	60bb      	str	r3, [r7, #8]
 8007d40:	68bb      	ldr	r3, [r7, #8]
 8007d42:	685b      	ldr	r3, [r3, #4]
 8007d44:	685a      	ldr	r2, [r3, #4]
 8007d46:	68bb      	ldr	r3, [r7, #8]
 8007d48:	605a      	str	r2, [r3, #4]
 8007d4a:	68bb      	ldr	r3, [r7, #8]
 8007d4c:	685a      	ldr	r2, [r3, #4]
 8007d4e:	68bb      	ldr	r3, [r7, #8]
 8007d50:	3308      	adds	r3, #8
 8007d52:	429a      	cmp	r2, r3
 8007d54:	d104      	bne.n	8007d60 <vTaskSwitchContext+0x8c>
 8007d56:	68bb      	ldr	r3, [r7, #8]
 8007d58:	685b      	ldr	r3, [r3, #4]
 8007d5a:	685a      	ldr	r2, [r3, #4]
 8007d5c:	68bb      	ldr	r3, [r7, #8]
 8007d5e:	605a      	str	r2, [r3, #4]
 8007d60:	68bb      	ldr	r3, [r7, #8]
 8007d62:	685b      	ldr	r3, [r3, #4]
 8007d64:	68db      	ldr	r3, [r3, #12]
 8007d66:	4a09      	ldr	r2, [pc, #36]	@ (8007d8c <vTaskSwitchContext+0xb8>)
 8007d68:	6013      	str	r3, [r2, #0]
 8007d6a:	4a06      	ldr	r2, [pc, #24]	@ (8007d84 <vTaskSwitchContext+0xb0>)
 8007d6c:	68fb      	ldr	r3, [r7, #12]
 8007d6e:	6013      	str	r3, [r2, #0]
}
 8007d70:	bf00      	nop
 8007d72:	3714      	adds	r7, #20
 8007d74:	46bd      	mov	sp, r7
 8007d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d7a:	4770      	bx	lr
 8007d7c:	200053dc 	.word	0x200053dc
 8007d80:	200053c8 	.word	0x200053c8
 8007d84:	200053bc 	.word	0x200053bc
 8007d88:	20004ee4 	.word	0x20004ee4
 8007d8c:	20004ee0 	.word	0x20004ee0

08007d90 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8007d90:	b580      	push	{r7, lr}
 8007d92:	b084      	sub	sp, #16
 8007d94:	af00      	add	r7, sp, #0
 8007d96:	6078      	str	r0, [r7, #4]
 8007d98:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8007d9a:	687b      	ldr	r3, [r7, #4]
 8007d9c:	2b00      	cmp	r3, #0
 8007d9e:	d10b      	bne.n	8007db8 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 8007da0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007da4:	f383 8811 	msr	BASEPRI, r3
 8007da8:	f3bf 8f6f 	isb	sy
 8007dac:	f3bf 8f4f 	dsb	sy
 8007db0:	60fb      	str	r3, [r7, #12]
}
 8007db2:	bf00      	nop
 8007db4:	bf00      	nop
 8007db6:	e7fd      	b.n	8007db4 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8007db8:	4b07      	ldr	r3, [pc, #28]	@ (8007dd8 <vTaskPlaceOnEventList+0x48>)
 8007dba:	681b      	ldr	r3, [r3, #0]
 8007dbc:	3318      	adds	r3, #24
 8007dbe:	4619      	mov	r1, r3
 8007dc0:	6878      	ldr	r0, [r7, #4]
 8007dc2:	f7fe fe70 	bl	8006aa6 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8007dc6:	2101      	movs	r1, #1
 8007dc8:	6838      	ldr	r0, [r7, #0]
 8007dca:	f000 faa9 	bl	8008320 <prvAddCurrentTaskToDelayedList>
}
 8007dce:	bf00      	nop
 8007dd0:	3710      	adds	r7, #16
 8007dd2:	46bd      	mov	sp, r7
 8007dd4:	bd80      	pop	{r7, pc}
 8007dd6:	bf00      	nop
 8007dd8:	20004ee0 	.word	0x20004ee0

08007ddc <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8007ddc:	b580      	push	{r7, lr}
 8007dde:	b086      	sub	sp, #24
 8007de0:	af00      	add	r7, sp, #0
 8007de2:	60f8      	str	r0, [r7, #12]
 8007de4:	60b9      	str	r1, [r7, #8]
 8007de6:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8007de8:	68fb      	ldr	r3, [r7, #12]
 8007dea:	2b00      	cmp	r3, #0
 8007dec:	d10b      	bne.n	8007e06 <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 8007dee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007df2:	f383 8811 	msr	BASEPRI, r3
 8007df6:	f3bf 8f6f 	isb	sy
 8007dfa:	f3bf 8f4f 	dsb	sy
 8007dfe:	617b      	str	r3, [r7, #20]
}
 8007e00:	bf00      	nop
 8007e02:	bf00      	nop
 8007e04:	e7fd      	b.n	8007e02 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8007e06:	4b0a      	ldr	r3, [pc, #40]	@ (8007e30 <vTaskPlaceOnEventListRestricted+0x54>)
 8007e08:	681b      	ldr	r3, [r3, #0]
 8007e0a:	3318      	adds	r3, #24
 8007e0c:	4619      	mov	r1, r3
 8007e0e:	68f8      	ldr	r0, [r7, #12]
 8007e10:	f7fe fe25 	bl	8006a5e <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8007e14:	687b      	ldr	r3, [r7, #4]
 8007e16:	2b00      	cmp	r3, #0
 8007e18:	d002      	beq.n	8007e20 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 8007e1a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8007e1e:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8007e20:	6879      	ldr	r1, [r7, #4]
 8007e22:	68b8      	ldr	r0, [r7, #8]
 8007e24:	f000 fa7c 	bl	8008320 <prvAddCurrentTaskToDelayedList>
	}
 8007e28:	bf00      	nop
 8007e2a:	3718      	adds	r7, #24
 8007e2c:	46bd      	mov	sp, r7
 8007e2e:	bd80      	pop	{r7, pc}
 8007e30:	20004ee0 	.word	0x20004ee0

08007e34 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8007e34:	b580      	push	{r7, lr}
 8007e36:	b086      	sub	sp, #24
 8007e38:	af00      	add	r7, sp, #0
 8007e3a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007e3c:	687b      	ldr	r3, [r7, #4]
 8007e3e:	68db      	ldr	r3, [r3, #12]
 8007e40:	68db      	ldr	r3, [r3, #12]
 8007e42:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8007e44:	693b      	ldr	r3, [r7, #16]
 8007e46:	2b00      	cmp	r3, #0
 8007e48:	d10b      	bne.n	8007e62 <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 8007e4a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007e4e:	f383 8811 	msr	BASEPRI, r3
 8007e52:	f3bf 8f6f 	isb	sy
 8007e56:	f3bf 8f4f 	dsb	sy
 8007e5a:	60fb      	str	r3, [r7, #12]
}
 8007e5c:	bf00      	nop
 8007e5e:	bf00      	nop
 8007e60:	e7fd      	b.n	8007e5e <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8007e62:	693b      	ldr	r3, [r7, #16]
 8007e64:	3318      	adds	r3, #24
 8007e66:	4618      	mov	r0, r3
 8007e68:	f7fe fe56 	bl	8006b18 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007e6c:	4b1d      	ldr	r3, [pc, #116]	@ (8007ee4 <xTaskRemoveFromEventList+0xb0>)
 8007e6e:	681b      	ldr	r3, [r3, #0]
 8007e70:	2b00      	cmp	r3, #0
 8007e72:	d11d      	bne.n	8007eb0 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8007e74:	693b      	ldr	r3, [r7, #16]
 8007e76:	3304      	adds	r3, #4
 8007e78:	4618      	mov	r0, r3
 8007e7a:	f7fe fe4d 	bl	8006b18 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8007e7e:	693b      	ldr	r3, [r7, #16]
 8007e80:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007e82:	4b19      	ldr	r3, [pc, #100]	@ (8007ee8 <xTaskRemoveFromEventList+0xb4>)
 8007e84:	681b      	ldr	r3, [r3, #0]
 8007e86:	429a      	cmp	r2, r3
 8007e88:	d903      	bls.n	8007e92 <xTaskRemoveFromEventList+0x5e>
 8007e8a:	693b      	ldr	r3, [r7, #16]
 8007e8c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007e8e:	4a16      	ldr	r2, [pc, #88]	@ (8007ee8 <xTaskRemoveFromEventList+0xb4>)
 8007e90:	6013      	str	r3, [r2, #0]
 8007e92:	693b      	ldr	r3, [r7, #16]
 8007e94:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007e96:	4613      	mov	r3, r2
 8007e98:	009b      	lsls	r3, r3, #2
 8007e9a:	4413      	add	r3, r2
 8007e9c:	009b      	lsls	r3, r3, #2
 8007e9e:	4a13      	ldr	r2, [pc, #76]	@ (8007eec <xTaskRemoveFromEventList+0xb8>)
 8007ea0:	441a      	add	r2, r3
 8007ea2:	693b      	ldr	r3, [r7, #16]
 8007ea4:	3304      	adds	r3, #4
 8007ea6:	4619      	mov	r1, r3
 8007ea8:	4610      	mov	r0, r2
 8007eaa:	f7fe fdd8 	bl	8006a5e <vListInsertEnd>
 8007eae:	e005      	b.n	8007ebc <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8007eb0:	693b      	ldr	r3, [r7, #16]
 8007eb2:	3318      	adds	r3, #24
 8007eb4:	4619      	mov	r1, r3
 8007eb6:	480e      	ldr	r0, [pc, #56]	@ (8007ef0 <xTaskRemoveFromEventList+0xbc>)
 8007eb8:	f7fe fdd1 	bl	8006a5e <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8007ebc:	693b      	ldr	r3, [r7, #16]
 8007ebe:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007ec0:	4b0c      	ldr	r3, [pc, #48]	@ (8007ef4 <xTaskRemoveFromEventList+0xc0>)
 8007ec2:	681b      	ldr	r3, [r3, #0]
 8007ec4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007ec6:	429a      	cmp	r2, r3
 8007ec8:	d905      	bls.n	8007ed6 <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8007eca:	2301      	movs	r3, #1
 8007ecc:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8007ece:	4b0a      	ldr	r3, [pc, #40]	@ (8007ef8 <xTaskRemoveFromEventList+0xc4>)
 8007ed0:	2201      	movs	r2, #1
 8007ed2:	601a      	str	r2, [r3, #0]
 8007ed4:	e001      	b.n	8007eda <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 8007ed6:	2300      	movs	r3, #0
 8007ed8:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8007eda:	697b      	ldr	r3, [r7, #20]
}
 8007edc:	4618      	mov	r0, r3
 8007ede:	3718      	adds	r7, #24
 8007ee0:	46bd      	mov	sp, r7
 8007ee2:	bd80      	pop	{r7, pc}
 8007ee4:	200053dc 	.word	0x200053dc
 8007ee8:	200053bc 	.word	0x200053bc
 8007eec:	20004ee4 	.word	0x20004ee4
 8007ef0:	20005374 	.word	0x20005374
 8007ef4:	20004ee0 	.word	0x20004ee0
 8007ef8:	200053c8 	.word	0x200053c8

08007efc <vTaskSetTimeOutState>:
	}
}
/*-----------------------------------------------------------*/

void vTaskSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8007efc:	b580      	push	{r7, lr}
 8007efe:	b084      	sub	sp, #16
 8007f00:	af00      	add	r7, sp, #0
 8007f02:	6078      	str	r0, [r7, #4]
	configASSERT( pxTimeOut );
 8007f04:	687b      	ldr	r3, [r7, #4]
 8007f06:	2b00      	cmp	r3, #0
 8007f08:	d10b      	bne.n	8007f22 <vTaskSetTimeOutState+0x26>
	__asm volatile
 8007f0a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007f0e:	f383 8811 	msr	BASEPRI, r3
 8007f12:	f3bf 8f6f 	isb	sy
 8007f16:	f3bf 8f4f 	dsb	sy
 8007f1a:	60fb      	str	r3, [r7, #12]
}
 8007f1c:	bf00      	nop
 8007f1e:	bf00      	nop
 8007f20:	e7fd      	b.n	8007f1e <vTaskSetTimeOutState+0x22>
	taskENTER_CRITICAL();
 8007f22:	f000 fed9 	bl	8008cd8 <vPortEnterCritical>
	{
		pxTimeOut->xOverflowCount = xNumOfOverflows;
 8007f26:	4b07      	ldr	r3, [pc, #28]	@ (8007f44 <vTaskSetTimeOutState+0x48>)
 8007f28:	681a      	ldr	r2, [r3, #0]
 8007f2a:	687b      	ldr	r3, [r7, #4]
 8007f2c:	601a      	str	r2, [r3, #0]
		pxTimeOut->xTimeOnEntering = xTickCount;
 8007f2e:	4b06      	ldr	r3, [pc, #24]	@ (8007f48 <vTaskSetTimeOutState+0x4c>)
 8007f30:	681a      	ldr	r2, [r3, #0]
 8007f32:	687b      	ldr	r3, [r7, #4]
 8007f34:	605a      	str	r2, [r3, #4]
	}
	taskEXIT_CRITICAL();
 8007f36:	f000 ff01 	bl	8008d3c <vPortExitCritical>
}
 8007f3a:	bf00      	nop
 8007f3c:	3710      	adds	r7, #16
 8007f3e:	46bd      	mov	sp, r7
 8007f40:	bd80      	pop	{r7, pc}
 8007f42:	bf00      	nop
 8007f44:	200053cc 	.word	0x200053cc
 8007f48:	200053b8 	.word	0x200053b8

08007f4c <vTaskInternalSetTimeOutState>:
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8007f4c:	b480      	push	{r7}
 8007f4e:	b083      	sub	sp, #12
 8007f50:	af00      	add	r7, sp, #0
 8007f52:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8007f54:	4b06      	ldr	r3, [pc, #24]	@ (8007f70 <vTaskInternalSetTimeOutState+0x24>)
 8007f56:	681a      	ldr	r2, [r3, #0]
 8007f58:	687b      	ldr	r3, [r7, #4]
 8007f5a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8007f5c:	4b05      	ldr	r3, [pc, #20]	@ (8007f74 <vTaskInternalSetTimeOutState+0x28>)
 8007f5e:	681a      	ldr	r2, [r3, #0]
 8007f60:	687b      	ldr	r3, [r7, #4]
 8007f62:	605a      	str	r2, [r3, #4]
}
 8007f64:	bf00      	nop
 8007f66:	370c      	adds	r7, #12
 8007f68:	46bd      	mov	sp, r7
 8007f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f6e:	4770      	bx	lr
 8007f70:	200053cc 	.word	0x200053cc
 8007f74:	200053b8 	.word	0x200053b8

08007f78 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8007f78:	b580      	push	{r7, lr}
 8007f7a:	b088      	sub	sp, #32
 8007f7c:	af00      	add	r7, sp, #0
 8007f7e:	6078      	str	r0, [r7, #4]
 8007f80:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8007f82:	687b      	ldr	r3, [r7, #4]
 8007f84:	2b00      	cmp	r3, #0
 8007f86:	d10b      	bne.n	8007fa0 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 8007f88:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007f8c:	f383 8811 	msr	BASEPRI, r3
 8007f90:	f3bf 8f6f 	isb	sy
 8007f94:	f3bf 8f4f 	dsb	sy
 8007f98:	613b      	str	r3, [r7, #16]
}
 8007f9a:	bf00      	nop
 8007f9c:	bf00      	nop
 8007f9e:	e7fd      	b.n	8007f9c <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8007fa0:	683b      	ldr	r3, [r7, #0]
 8007fa2:	2b00      	cmp	r3, #0
 8007fa4:	d10b      	bne.n	8007fbe <xTaskCheckForTimeOut+0x46>
	__asm volatile
 8007fa6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007faa:	f383 8811 	msr	BASEPRI, r3
 8007fae:	f3bf 8f6f 	isb	sy
 8007fb2:	f3bf 8f4f 	dsb	sy
 8007fb6:	60fb      	str	r3, [r7, #12]
}
 8007fb8:	bf00      	nop
 8007fba:	bf00      	nop
 8007fbc:	e7fd      	b.n	8007fba <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 8007fbe:	f000 fe8b 	bl	8008cd8 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8007fc2:	4b1d      	ldr	r3, [pc, #116]	@ (8008038 <xTaskCheckForTimeOut+0xc0>)
 8007fc4:	681b      	ldr	r3, [r3, #0]
 8007fc6:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8007fc8:	687b      	ldr	r3, [r7, #4]
 8007fca:	685b      	ldr	r3, [r3, #4]
 8007fcc:	69ba      	ldr	r2, [r7, #24]
 8007fce:	1ad3      	subs	r3, r2, r3
 8007fd0:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8007fd2:	683b      	ldr	r3, [r7, #0]
 8007fd4:	681b      	ldr	r3, [r3, #0]
 8007fd6:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8007fda:	d102      	bne.n	8007fe2 <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8007fdc:	2300      	movs	r3, #0
 8007fde:	61fb      	str	r3, [r7, #28]
 8007fe0:	e023      	b.n	800802a <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8007fe2:	687b      	ldr	r3, [r7, #4]
 8007fe4:	681a      	ldr	r2, [r3, #0]
 8007fe6:	4b15      	ldr	r3, [pc, #84]	@ (800803c <xTaskCheckForTimeOut+0xc4>)
 8007fe8:	681b      	ldr	r3, [r3, #0]
 8007fea:	429a      	cmp	r2, r3
 8007fec:	d007      	beq.n	8007ffe <xTaskCheckForTimeOut+0x86>
 8007fee:	687b      	ldr	r3, [r7, #4]
 8007ff0:	685b      	ldr	r3, [r3, #4]
 8007ff2:	69ba      	ldr	r2, [r7, #24]
 8007ff4:	429a      	cmp	r2, r3
 8007ff6:	d302      	bcc.n	8007ffe <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8007ff8:	2301      	movs	r3, #1
 8007ffa:	61fb      	str	r3, [r7, #28]
 8007ffc:	e015      	b.n	800802a <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8007ffe:	683b      	ldr	r3, [r7, #0]
 8008000:	681b      	ldr	r3, [r3, #0]
 8008002:	697a      	ldr	r2, [r7, #20]
 8008004:	429a      	cmp	r2, r3
 8008006:	d20b      	bcs.n	8008020 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8008008:	683b      	ldr	r3, [r7, #0]
 800800a:	681a      	ldr	r2, [r3, #0]
 800800c:	697b      	ldr	r3, [r7, #20]
 800800e:	1ad2      	subs	r2, r2, r3
 8008010:	683b      	ldr	r3, [r7, #0]
 8008012:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8008014:	6878      	ldr	r0, [r7, #4]
 8008016:	f7ff ff99 	bl	8007f4c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800801a:	2300      	movs	r3, #0
 800801c:	61fb      	str	r3, [r7, #28]
 800801e:	e004      	b.n	800802a <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 8008020:	683b      	ldr	r3, [r7, #0]
 8008022:	2200      	movs	r2, #0
 8008024:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8008026:	2301      	movs	r3, #1
 8008028:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800802a:	f000 fe87 	bl	8008d3c <vPortExitCritical>

	return xReturn;
 800802e:	69fb      	ldr	r3, [r7, #28]
}
 8008030:	4618      	mov	r0, r3
 8008032:	3720      	adds	r7, #32
 8008034:	46bd      	mov	sp, r7
 8008036:	bd80      	pop	{r7, pc}
 8008038:	200053b8 	.word	0x200053b8
 800803c:	200053cc 	.word	0x200053cc

08008040 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8008040:	b480      	push	{r7}
 8008042:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8008044:	4b03      	ldr	r3, [pc, #12]	@ (8008054 <vTaskMissedYield+0x14>)
 8008046:	2201      	movs	r2, #1
 8008048:	601a      	str	r2, [r3, #0]
}
 800804a:	bf00      	nop
 800804c:	46bd      	mov	sp, r7
 800804e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008052:	4770      	bx	lr
 8008054:	200053c8 	.word	0x200053c8

08008058 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8008058:	b580      	push	{r7, lr}
 800805a:	b082      	sub	sp, #8
 800805c:	af00      	add	r7, sp, #0
 800805e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8008060:	f000 f852 	bl	8008108 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8008064:	4b06      	ldr	r3, [pc, #24]	@ (8008080 <prvIdleTask+0x28>)
 8008066:	681b      	ldr	r3, [r3, #0]
 8008068:	2b01      	cmp	r3, #1
 800806a:	d9f9      	bls.n	8008060 <prvIdleTask+0x8>
			{
				taskYIELD();
 800806c:	4b05      	ldr	r3, [pc, #20]	@ (8008084 <prvIdleTask+0x2c>)
 800806e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008072:	601a      	str	r2, [r3, #0]
 8008074:	f3bf 8f4f 	dsb	sy
 8008078:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800807c:	e7f0      	b.n	8008060 <prvIdleTask+0x8>
 800807e:	bf00      	nop
 8008080:	20004ee4 	.word	0x20004ee4
 8008084:	e000ed04 	.word	0xe000ed04

08008088 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8008088:	b580      	push	{r7, lr}
 800808a:	b082      	sub	sp, #8
 800808c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800808e:	2300      	movs	r3, #0
 8008090:	607b      	str	r3, [r7, #4]
 8008092:	e00c      	b.n	80080ae <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8008094:	687a      	ldr	r2, [r7, #4]
 8008096:	4613      	mov	r3, r2
 8008098:	009b      	lsls	r3, r3, #2
 800809a:	4413      	add	r3, r2
 800809c:	009b      	lsls	r3, r3, #2
 800809e:	4a12      	ldr	r2, [pc, #72]	@ (80080e8 <prvInitialiseTaskLists+0x60>)
 80080a0:	4413      	add	r3, r2
 80080a2:	4618      	mov	r0, r3
 80080a4:	f7fe fcae 	bl	8006a04 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80080a8:	687b      	ldr	r3, [r7, #4]
 80080aa:	3301      	adds	r3, #1
 80080ac:	607b      	str	r3, [r7, #4]
 80080ae:	687b      	ldr	r3, [r7, #4]
 80080b0:	2b37      	cmp	r3, #55	@ 0x37
 80080b2:	d9ef      	bls.n	8008094 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80080b4:	480d      	ldr	r0, [pc, #52]	@ (80080ec <prvInitialiseTaskLists+0x64>)
 80080b6:	f7fe fca5 	bl	8006a04 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80080ba:	480d      	ldr	r0, [pc, #52]	@ (80080f0 <prvInitialiseTaskLists+0x68>)
 80080bc:	f7fe fca2 	bl	8006a04 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80080c0:	480c      	ldr	r0, [pc, #48]	@ (80080f4 <prvInitialiseTaskLists+0x6c>)
 80080c2:	f7fe fc9f 	bl	8006a04 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80080c6:	480c      	ldr	r0, [pc, #48]	@ (80080f8 <prvInitialiseTaskLists+0x70>)
 80080c8:	f7fe fc9c 	bl	8006a04 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80080cc:	480b      	ldr	r0, [pc, #44]	@ (80080fc <prvInitialiseTaskLists+0x74>)
 80080ce:	f7fe fc99 	bl	8006a04 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80080d2:	4b0b      	ldr	r3, [pc, #44]	@ (8008100 <prvInitialiseTaskLists+0x78>)
 80080d4:	4a05      	ldr	r2, [pc, #20]	@ (80080ec <prvInitialiseTaskLists+0x64>)
 80080d6:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80080d8:	4b0a      	ldr	r3, [pc, #40]	@ (8008104 <prvInitialiseTaskLists+0x7c>)
 80080da:	4a05      	ldr	r2, [pc, #20]	@ (80080f0 <prvInitialiseTaskLists+0x68>)
 80080dc:	601a      	str	r2, [r3, #0]
}
 80080de:	bf00      	nop
 80080e0:	3708      	adds	r7, #8
 80080e2:	46bd      	mov	sp, r7
 80080e4:	bd80      	pop	{r7, pc}
 80080e6:	bf00      	nop
 80080e8:	20004ee4 	.word	0x20004ee4
 80080ec:	20005344 	.word	0x20005344
 80080f0:	20005358 	.word	0x20005358
 80080f4:	20005374 	.word	0x20005374
 80080f8:	20005388 	.word	0x20005388
 80080fc:	200053a0 	.word	0x200053a0
 8008100:	2000536c 	.word	0x2000536c
 8008104:	20005370 	.word	0x20005370

08008108 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8008108:	b580      	push	{r7, lr}
 800810a:	b082      	sub	sp, #8
 800810c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800810e:	e019      	b.n	8008144 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8008110:	f000 fde2 	bl	8008cd8 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008114:	4b10      	ldr	r3, [pc, #64]	@ (8008158 <prvCheckTasksWaitingTermination+0x50>)
 8008116:	68db      	ldr	r3, [r3, #12]
 8008118:	68db      	ldr	r3, [r3, #12]
 800811a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800811c:	687b      	ldr	r3, [r7, #4]
 800811e:	3304      	adds	r3, #4
 8008120:	4618      	mov	r0, r3
 8008122:	f7fe fcf9 	bl	8006b18 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8008126:	4b0d      	ldr	r3, [pc, #52]	@ (800815c <prvCheckTasksWaitingTermination+0x54>)
 8008128:	681b      	ldr	r3, [r3, #0]
 800812a:	3b01      	subs	r3, #1
 800812c:	4a0b      	ldr	r2, [pc, #44]	@ (800815c <prvCheckTasksWaitingTermination+0x54>)
 800812e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8008130:	4b0b      	ldr	r3, [pc, #44]	@ (8008160 <prvCheckTasksWaitingTermination+0x58>)
 8008132:	681b      	ldr	r3, [r3, #0]
 8008134:	3b01      	subs	r3, #1
 8008136:	4a0a      	ldr	r2, [pc, #40]	@ (8008160 <prvCheckTasksWaitingTermination+0x58>)
 8008138:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800813a:	f000 fdff 	bl	8008d3c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800813e:	6878      	ldr	r0, [r7, #4]
 8008140:	f000 f810 	bl	8008164 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8008144:	4b06      	ldr	r3, [pc, #24]	@ (8008160 <prvCheckTasksWaitingTermination+0x58>)
 8008146:	681b      	ldr	r3, [r3, #0]
 8008148:	2b00      	cmp	r3, #0
 800814a:	d1e1      	bne.n	8008110 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800814c:	bf00      	nop
 800814e:	bf00      	nop
 8008150:	3708      	adds	r7, #8
 8008152:	46bd      	mov	sp, r7
 8008154:	bd80      	pop	{r7, pc}
 8008156:	bf00      	nop
 8008158:	20005388 	.word	0x20005388
 800815c:	200053b4 	.word	0x200053b4
 8008160:	2000539c 	.word	0x2000539c

08008164 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8008164:	b580      	push	{r7, lr}
 8008166:	b084      	sub	sp, #16
 8008168:	af00      	add	r7, sp, #0
 800816a:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800816c:	687b      	ldr	r3, [r7, #4]
 800816e:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 8008172:	2b00      	cmp	r3, #0
 8008174:	d108      	bne.n	8008188 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8008176:	687b      	ldr	r3, [r7, #4]
 8008178:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800817a:	4618      	mov	r0, r3
 800817c:	f000 ff9c 	bl	80090b8 <vPortFree>
				vPortFree( pxTCB );
 8008180:	6878      	ldr	r0, [r7, #4]
 8008182:	f000 ff99 	bl	80090b8 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8008186:	e019      	b.n	80081bc <prvDeleteTCB+0x58>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8008188:	687b      	ldr	r3, [r7, #4]
 800818a:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 800818e:	2b01      	cmp	r3, #1
 8008190:	d103      	bne.n	800819a <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8008192:	6878      	ldr	r0, [r7, #4]
 8008194:	f000 ff90 	bl	80090b8 <vPortFree>
	}
 8008198:	e010      	b.n	80081bc <prvDeleteTCB+0x58>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800819a:	687b      	ldr	r3, [r7, #4]
 800819c:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 80081a0:	2b02      	cmp	r3, #2
 80081a2:	d00b      	beq.n	80081bc <prvDeleteTCB+0x58>
	__asm volatile
 80081a4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80081a8:	f383 8811 	msr	BASEPRI, r3
 80081ac:	f3bf 8f6f 	isb	sy
 80081b0:	f3bf 8f4f 	dsb	sy
 80081b4:	60fb      	str	r3, [r7, #12]
}
 80081b6:	bf00      	nop
 80081b8:	bf00      	nop
 80081ba:	e7fd      	b.n	80081b8 <prvDeleteTCB+0x54>
	}
 80081bc:	bf00      	nop
 80081be:	3710      	adds	r7, #16
 80081c0:	46bd      	mov	sp, r7
 80081c2:	bd80      	pop	{r7, pc}

080081c4 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80081c4:	b480      	push	{r7}
 80081c6:	b083      	sub	sp, #12
 80081c8:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80081ca:	4b0c      	ldr	r3, [pc, #48]	@ (80081fc <prvResetNextTaskUnblockTime+0x38>)
 80081cc:	681b      	ldr	r3, [r3, #0]
 80081ce:	681b      	ldr	r3, [r3, #0]
 80081d0:	2b00      	cmp	r3, #0
 80081d2:	d104      	bne.n	80081de <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80081d4:	4b0a      	ldr	r3, [pc, #40]	@ (8008200 <prvResetNextTaskUnblockTime+0x3c>)
 80081d6:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80081da:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80081dc:	e008      	b.n	80081f0 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80081de:	4b07      	ldr	r3, [pc, #28]	@ (80081fc <prvResetNextTaskUnblockTime+0x38>)
 80081e0:	681b      	ldr	r3, [r3, #0]
 80081e2:	68db      	ldr	r3, [r3, #12]
 80081e4:	68db      	ldr	r3, [r3, #12]
 80081e6:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80081e8:	687b      	ldr	r3, [r7, #4]
 80081ea:	685b      	ldr	r3, [r3, #4]
 80081ec:	4a04      	ldr	r2, [pc, #16]	@ (8008200 <prvResetNextTaskUnblockTime+0x3c>)
 80081ee:	6013      	str	r3, [r2, #0]
}
 80081f0:	bf00      	nop
 80081f2:	370c      	adds	r7, #12
 80081f4:	46bd      	mov	sp, r7
 80081f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081fa:	4770      	bx	lr
 80081fc:	2000536c 	.word	0x2000536c
 8008200:	200053d4 	.word	0x200053d4

08008204 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8008204:	b480      	push	{r7}
 8008206:	b083      	sub	sp, #12
 8008208:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800820a:	4b0b      	ldr	r3, [pc, #44]	@ (8008238 <xTaskGetSchedulerState+0x34>)
 800820c:	681b      	ldr	r3, [r3, #0]
 800820e:	2b00      	cmp	r3, #0
 8008210:	d102      	bne.n	8008218 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8008212:	2301      	movs	r3, #1
 8008214:	607b      	str	r3, [r7, #4]
 8008216:	e008      	b.n	800822a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008218:	4b08      	ldr	r3, [pc, #32]	@ (800823c <xTaskGetSchedulerState+0x38>)
 800821a:	681b      	ldr	r3, [r3, #0]
 800821c:	2b00      	cmp	r3, #0
 800821e:	d102      	bne.n	8008226 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8008220:	2302      	movs	r3, #2
 8008222:	607b      	str	r3, [r7, #4]
 8008224:	e001      	b.n	800822a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8008226:	2300      	movs	r3, #0
 8008228:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800822a:	687b      	ldr	r3, [r7, #4]
	}
 800822c:	4618      	mov	r0, r3
 800822e:	370c      	adds	r7, #12
 8008230:	46bd      	mov	sp, r7
 8008232:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008236:	4770      	bx	lr
 8008238:	200053c0 	.word	0x200053c0
 800823c:	200053dc 	.word	0x200053dc

08008240 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8008240:	b580      	push	{r7, lr}
 8008242:	b086      	sub	sp, #24
 8008244:	af00      	add	r7, sp, #0
 8008246:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8008248:	687b      	ldr	r3, [r7, #4]
 800824a:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800824c:	2300      	movs	r3, #0
 800824e:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8008250:	687b      	ldr	r3, [r7, #4]
 8008252:	2b00      	cmp	r3, #0
 8008254:	d058      	beq.n	8008308 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8008256:	4b2f      	ldr	r3, [pc, #188]	@ (8008314 <xTaskPriorityDisinherit+0xd4>)
 8008258:	681b      	ldr	r3, [r3, #0]
 800825a:	693a      	ldr	r2, [r7, #16]
 800825c:	429a      	cmp	r2, r3
 800825e:	d00b      	beq.n	8008278 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 8008260:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008264:	f383 8811 	msr	BASEPRI, r3
 8008268:	f3bf 8f6f 	isb	sy
 800826c:	f3bf 8f4f 	dsb	sy
 8008270:	60fb      	str	r3, [r7, #12]
}
 8008272:	bf00      	nop
 8008274:	bf00      	nop
 8008276:	e7fd      	b.n	8008274 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8008278:	693b      	ldr	r3, [r7, #16]
 800827a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800827c:	2b00      	cmp	r3, #0
 800827e:	d10b      	bne.n	8008298 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 8008280:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008284:	f383 8811 	msr	BASEPRI, r3
 8008288:	f3bf 8f6f 	isb	sy
 800828c:	f3bf 8f4f 	dsb	sy
 8008290:	60bb      	str	r3, [r7, #8]
}
 8008292:	bf00      	nop
 8008294:	bf00      	nop
 8008296:	e7fd      	b.n	8008294 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 8008298:	693b      	ldr	r3, [r7, #16]
 800829a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800829c:	1e5a      	subs	r2, r3, #1
 800829e:	693b      	ldr	r3, [r7, #16]
 80082a0:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80082a2:	693b      	ldr	r3, [r7, #16]
 80082a4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80082a6:	693b      	ldr	r3, [r7, #16]
 80082a8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80082aa:	429a      	cmp	r2, r3
 80082ac:	d02c      	beq.n	8008308 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80082ae:	693b      	ldr	r3, [r7, #16]
 80082b0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80082b2:	2b00      	cmp	r3, #0
 80082b4:	d128      	bne.n	8008308 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80082b6:	693b      	ldr	r3, [r7, #16]
 80082b8:	3304      	adds	r3, #4
 80082ba:	4618      	mov	r0, r3
 80082bc:	f7fe fc2c 	bl	8006b18 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80082c0:	693b      	ldr	r3, [r7, #16]
 80082c2:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80082c4:	693b      	ldr	r3, [r7, #16]
 80082c6:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80082c8:	693b      	ldr	r3, [r7, #16]
 80082ca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80082cc:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 80082d0:	693b      	ldr	r3, [r7, #16]
 80082d2:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80082d4:	693b      	ldr	r3, [r7, #16]
 80082d6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80082d8:	4b0f      	ldr	r3, [pc, #60]	@ (8008318 <xTaskPriorityDisinherit+0xd8>)
 80082da:	681b      	ldr	r3, [r3, #0]
 80082dc:	429a      	cmp	r2, r3
 80082de:	d903      	bls.n	80082e8 <xTaskPriorityDisinherit+0xa8>
 80082e0:	693b      	ldr	r3, [r7, #16]
 80082e2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80082e4:	4a0c      	ldr	r2, [pc, #48]	@ (8008318 <xTaskPriorityDisinherit+0xd8>)
 80082e6:	6013      	str	r3, [r2, #0]
 80082e8:	693b      	ldr	r3, [r7, #16]
 80082ea:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80082ec:	4613      	mov	r3, r2
 80082ee:	009b      	lsls	r3, r3, #2
 80082f0:	4413      	add	r3, r2
 80082f2:	009b      	lsls	r3, r3, #2
 80082f4:	4a09      	ldr	r2, [pc, #36]	@ (800831c <xTaskPriorityDisinherit+0xdc>)
 80082f6:	441a      	add	r2, r3
 80082f8:	693b      	ldr	r3, [r7, #16]
 80082fa:	3304      	adds	r3, #4
 80082fc:	4619      	mov	r1, r3
 80082fe:	4610      	mov	r0, r2
 8008300:	f7fe fbad 	bl	8006a5e <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8008304:	2301      	movs	r3, #1
 8008306:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8008308:	697b      	ldr	r3, [r7, #20]
	}
 800830a:	4618      	mov	r0, r3
 800830c:	3718      	adds	r7, #24
 800830e:	46bd      	mov	sp, r7
 8008310:	bd80      	pop	{r7, pc}
 8008312:	bf00      	nop
 8008314:	20004ee0 	.word	0x20004ee0
 8008318:	200053bc 	.word	0x200053bc
 800831c:	20004ee4 	.word	0x20004ee4

08008320 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8008320:	b580      	push	{r7, lr}
 8008322:	b084      	sub	sp, #16
 8008324:	af00      	add	r7, sp, #0
 8008326:	6078      	str	r0, [r7, #4]
 8008328:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800832a:	4b21      	ldr	r3, [pc, #132]	@ (80083b0 <prvAddCurrentTaskToDelayedList+0x90>)
 800832c:	681b      	ldr	r3, [r3, #0]
 800832e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008330:	4b20      	ldr	r3, [pc, #128]	@ (80083b4 <prvAddCurrentTaskToDelayedList+0x94>)
 8008332:	681b      	ldr	r3, [r3, #0]
 8008334:	3304      	adds	r3, #4
 8008336:	4618      	mov	r0, r3
 8008338:	f7fe fbee 	bl	8006b18 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800833c:	687b      	ldr	r3, [r7, #4]
 800833e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8008342:	d10a      	bne.n	800835a <prvAddCurrentTaskToDelayedList+0x3a>
 8008344:	683b      	ldr	r3, [r7, #0]
 8008346:	2b00      	cmp	r3, #0
 8008348:	d007      	beq.n	800835a <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800834a:	4b1a      	ldr	r3, [pc, #104]	@ (80083b4 <prvAddCurrentTaskToDelayedList+0x94>)
 800834c:	681b      	ldr	r3, [r3, #0]
 800834e:	3304      	adds	r3, #4
 8008350:	4619      	mov	r1, r3
 8008352:	4819      	ldr	r0, [pc, #100]	@ (80083b8 <prvAddCurrentTaskToDelayedList+0x98>)
 8008354:	f7fe fb83 	bl	8006a5e <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8008358:	e026      	b.n	80083a8 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800835a:	68fa      	ldr	r2, [r7, #12]
 800835c:	687b      	ldr	r3, [r7, #4]
 800835e:	4413      	add	r3, r2
 8008360:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8008362:	4b14      	ldr	r3, [pc, #80]	@ (80083b4 <prvAddCurrentTaskToDelayedList+0x94>)
 8008364:	681b      	ldr	r3, [r3, #0]
 8008366:	68ba      	ldr	r2, [r7, #8]
 8008368:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800836a:	68ba      	ldr	r2, [r7, #8]
 800836c:	68fb      	ldr	r3, [r7, #12]
 800836e:	429a      	cmp	r2, r3
 8008370:	d209      	bcs.n	8008386 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008372:	4b12      	ldr	r3, [pc, #72]	@ (80083bc <prvAddCurrentTaskToDelayedList+0x9c>)
 8008374:	681a      	ldr	r2, [r3, #0]
 8008376:	4b0f      	ldr	r3, [pc, #60]	@ (80083b4 <prvAddCurrentTaskToDelayedList+0x94>)
 8008378:	681b      	ldr	r3, [r3, #0]
 800837a:	3304      	adds	r3, #4
 800837c:	4619      	mov	r1, r3
 800837e:	4610      	mov	r0, r2
 8008380:	f7fe fb91 	bl	8006aa6 <vListInsert>
}
 8008384:	e010      	b.n	80083a8 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008386:	4b0e      	ldr	r3, [pc, #56]	@ (80083c0 <prvAddCurrentTaskToDelayedList+0xa0>)
 8008388:	681a      	ldr	r2, [r3, #0]
 800838a:	4b0a      	ldr	r3, [pc, #40]	@ (80083b4 <prvAddCurrentTaskToDelayedList+0x94>)
 800838c:	681b      	ldr	r3, [r3, #0]
 800838e:	3304      	adds	r3, #4
 8008390:	4619      	mov	r1, r3
 8008392:	4610      	mov	r0, r2
 8008394:	f7fe fb87 	bl	8006aa6 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8008398:	4b0a      	ldr	r3, [pc, #40]	@ (80083c4 <prvAddCurrentTaskToDelayedList+0xa4>)
 800839a:	681b      	ldr	r3, [r3, #0]
 800839c:	68ba      	ldr	r2, [r7, #8]
 800839e:	429a      	cmp	r2, r3
 80083a0:	d202      	bcs.n	80083a8 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 80083a2:	4a08      	ldr	r2, [pc, #32]	@ (80083c4 <prvAddCurrentTaskToDelayedList+0xa4>)
 80083a4:	68bb      	ldr	r3, [r7, #8]
 80083a6:	6013      	str	r3, [r2, #0]
}
 80083a8:	bf00      	nop
 80083aa:	3710      	adds	r7, #16
 80083ac:	46bd      	mov	sp, r7
 80083ae:	bd80      	pop	{r7, pc}
 80083b0:	200053b8 	.word	0x200053b8
 80083b4:	20004ee0 	.word	0x20004ee0
 80083b8:	200053a0 	.word	0x200053a0
 80083bc:	20005370 	.word	0x20005370
 80083c0:	2000536c 	.word	0x2000536c
 80083c4:	200053d4 	.word	0x200053d4

080083c8 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 80083c8:	b580      	push	{r7, lr}
 80083ca:	b08a      	sub	sp, #40	@ 0x28
 80083cc:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 80083ce:	2300      	movs	r3, #0
 80083d0:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 80083d2:	f000 fb13 	bl	80089fc <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 80083d6:	4b1d      	ldr	r3, [pc, #116]	@ (800844c <xTimerCreateTimerTask+0x84>)
 80083d8:	681b      	ldr	r3, [r3, #0]
 80083da:	2b00      	cmp	r3, #0
 80083dc:	d021      	beq.n	8008422 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 80083de:	2300      	movs	r3, #0
 80083e0:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 80083e2:	2300      	movs	r3, #0
 80083e4:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 80083e6:	1d3a      	adds	r2, r7, #4
 80083e8:	f107 0108 	add.w	r1, r7, #8
 80083ec:	f107 030c 	add.w	r3, r7, #12
 80083f0:	4618      	mov	r0, r3
 80083f2:	f7fe faed 	bl	80069d0 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 80083f6:	6879      	ldr	r1, [r7, #4]
 80083f8:	68bb      	ldr	r3, [r7, #8]
 80083fa:	68fa      	ldr	r2, [r7, #12]
 80083fc:	9202      	str	r2, [sp, #8]
 80083fe:	9301      	str	r3, [sp, #4]
 8008400:	2302      	movs	r3, #2
 8008402:	9300      	str	r3, [sp, #0]
 8008404:	2300      	movs	r3, #0
 8008406:	460a      	mov	r2, r1
 8008408:	4911      	ldr	r1, [pc, #68]	@ (8008450 <xTimerCreateTimerTask+0x88>)
 800840a:	4812      	ldr	r0, [pc, #72]	@ (8008454 <xTimerCreateTimerTask+0x8c>)
 800840c:	f7ff f8a8 	bl	8007560 <xTaskCreateStatic>
 8008410:	4603      	mov	r3, r0
 8008412:	4a11      	ldr	r2, [pc, #68]	@ (8008458 <xTimerCreateTimerTask+0x90>)
 8008414:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8008416:	4b10      	ldr	r3, [pc, #64]	@ (8008458 <xTimerCreateTimerTask+0x90>)
 8008418:	681b      	ldr	r3, [r3, #0]
 800841a:	2b00      	cmp	r3, #0
 800841c:	d001      	beq.n	8008422 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800841e:	2301      	movs	r3, #1
 8008420:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8008422:	697b      	ldr	r3, [r7, #20]
 8008424:	2b00      	cmp	r3, #0
 8008426:	d10b      	bne.n	8008440 <xTimerCreateTimerTask+0x78>
	__asm volatile
 8008428:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800842c:	f383 8811 	msr	BASEPRI, r3
 8008430:	f3bf 8f6f 	isb	sy
 8008434:	f3bf 8f4f 	dsb	sy
 8008438:	613b      	str	r3, [r7, #16]
}
 800843a:	bf00      	nop
 800843c:	bf00      	nop
 800843e:	e7fd      	b.n	800843c <xTimerCreateTimerTask+0x74>
	return xReturn;
 8008440:	697b      	ldr	r3, [r7, #20]
}
 8008442:	4618      	mov	r0, r3
 8008444:	3718      	adds	r7, #24
 8008446:	46bd      	mov	sp, r7
 8008448:	bd80      	pop	{r7, pc}
 800844a:	bf00      	nop
 800844c:	20005410 	.word	0x20005410
 8008450:	08016830 	.word	0x08016830
 8008454:	08008595 	.word	0x08008595
 8008458:	20005414 	.word	0x20005414

0800845c <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800845c:	b580      	push	{r7, lr}
 800845e:	b08a      	sub	sp, #40	@ 0x28
 8008460:	af00      	add	r7, sp, #0
 8008462:	60f8      	str	r0, [r7, #12]
 8008464:	60b9      	str	r1, [r7, #8]
 8008466:	607a      	str	r2, [r7, #4]
 8008468:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800846a:	2300      	movs	r3, #0
 800846c:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800846e:	68fb      	ldr	r3, [r7, #12]
 8008470:	2b00      	cmp	r3, #0
 8008472:	d10b      	bne.n	800848c <xTimerGenericCommand+0x30>
	__asm volatile
 8008474:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008478:	f383 8811 	msr	BASEPRI, r3
 800847c:	f3bf 8f6f 	isb	sy
 8008480:	f3bf 8f4f 	dsb	sy
 8008484:	623b      	str	r3, [r7, #32]
}
 8008486:	bf00      	nop
 8008488:	bf00      	nop
 800848a:	e7fd      	b.n	8008488 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800848c:	4b19      	ldr	r3, [pc, #100]	@ (80084f4 <xTimerGenericCommand+0x98>)
 800848e:	681b      	ldr	r3, [r3, #0]
 8008490:	2b00      	cmp	r3, #0
 8008492:	d02a      	beq.n	80084ea <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8008494:	68bb      	ldr	r3, [r7, #8]
 8008496:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8008498:	687b      	ldr	r3, [r7, #4]
 800849a:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800849c:	68fb      	ldr	r3, [r7, #12]
 800849e:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 80084a0:	68bb      	ldr	r3, [r7, #8]
 80084a2:	2b05      	cmp	r3, #5
 80084a4:	dc18      	bgt.n	80084d8 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 80084a6:	f7ff fead 	bl	8008204 <xTaskGetSchedulerState>
 80084aa:	4603      	mov	r3, r0
 80084ac:	2b02      	cmp	r3, #2
 80084ae:	d109      	bne.n	80084c4 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80084b0:	4b10      	ldr	r3, [pc, #64]	@ (80084f4 <xTimerGenericCommand+0x98>)
 80084b2:	6818      	ldr	r0, [r3, #0]
 80084b4:	f107 0110 	add.w	r1, r7, #16
 80084b8:	2300      	movs	r3, #0
 80084ba:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80084bc:	f7fe fc60 	bl	8006d80 <xQueueGenericSend>
 80084c0:	6278      	str	r0, [r7, #36]	@ 0x24
 80084c2:	e012      	b.n	80084ea <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 80084c4:	4b0b      	ldr	r3, [pc, #44]	@ (80084f4 <xTimerGenericCommand+0x98>)
 80084c6:	6818      	ldr	r0, [r3, #0]
 80084c8:	f107 0110 	add.w	r1, r7, #16
 80084cc:	2300      	movs	r3, #0
 80084ce:	2200      	movs	r2, #0
 80084d0:	f7fe fc56 	bl	8006d80 <xQueueGenericSend>
 80084d4:	6278      	str	r0, [r7, #36]	@ 0x24
 80084d6:	e008      	b.n	80084ea <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80084d8:	4b06      	ldr	r3, [pc, #24]	@ (80084f4 <xTimerGenericCommand+0x98>)
 80084da:	6818      	ldr	r0, [r3, #0]
 80084dc:	f107 0110 	add.w	r1, r7, #16
 80084e0:	2300      	movs	r3, #0
 80084e2:	683a      	ldr	r2, [r7, #0]
 80084e4:	f7fe fd4e 	bl	8006f84 <xQueueGenericSendFromISR>
 80084e8:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 80084ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 80084ec:	4618      	mov	r0, r3
 80084ee:	3728      	adds	r7, #40	@ 0x28
 80084f0:	46bd      	mov	sp, r7
 80084f2:	bd80      	pop	{r7, pc}
 80084f4:	20005410 	.word	0x20005410

080084f8 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 80084f8:	b580      	push	{r7, lr}
 80084fa:	b088      	sub	sp, #32
 80084fc:	af02      	add	r7, sp, #8
 80084fe:	6078      	str	r0, [r7, #4]
 8008500:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008502:	4b23      	ldr	r3, [pc, #140]	@ (8008590 <prvProcessExpiredTimer+0x98>)
 8008504:	681b      	ldr	r3, [r3, #0]
 8008506:	68db      	ldr	r3, [r3, #12]
 8008508:	68db      	ldr	r3, [r3, #12]
 800850a:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800850c:	697b      	ldr	r3, [r7, #20]
 800850e:	3304      	adds	r3, #4
 8008510:	4618      	mov	r0, r3
 8008512:	f7fe fb01 	bl	8006b18 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8008516:	697b      	ldr	r3, [r7, #20]
 8008518:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800851c:	f003 0304 	and.w	r3, r3, #4
 8008520:	2b00      	cmp	r3, #0
 8008522:	d023      	beq.n	800856c <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8008524:	697b      	ldr	r3, [r7, #20]
 8008526:	699a      	ldr	r2, [r3, #24]
 8008528:	687b      	ldr	r3, [r7, #4]
 800852a:	18d1      	adds	r1, r2, r3
 800852c:	687b      	ldr	r3, [r7, #4]
 800852e:	683a      	ldr	r2, [r7, #0]
 8008530:	6978      	ldr	r0, [r7, #20]
 8008532:	f000 f8d5 	bl	80086e0 <prvInsertTimerInActiveList>
 8008536:	4603      	mov	r3, r0
 8008538:	2b00      	cmp	r3, #0
 800853a:	d020      	beq.n	800857e <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800853c:	2300      	movs	r3, #0
 800853e:	9300      	str	r3, [sp, #0]
 8008540:	2300      	movs	r3, #0
 8008542:	687a      	ldr	r2, [r7, #4]
 8008544:	2100      	movs	r1, #0
 8008546:	6978      	ldr	r0, [r7, #20]
 8008548:	f7ff ff88 	bl	800845c <xTimerGenericCommand>
 800854c:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800854e:	693b      	ldr	r3, [r7, #16]
 8008550:	2b00      	cmp	r3, #0
 8008552:	d114      	bne.n	800857e <prvProcessExpiredTimer+0x86>
	__asm volatile
 8008554:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008558:	f383 8811 	msr	BASEPRI, r3
 800855c:	f3bf 8f6f 	isb	sy
 8008560:	f3bf 8f4f 	dsb	sy
 8008564:	60fb      	str	r3, [r7, #12]
}
 8008566:	bf00      	nop
 8008568:	bf00      	nop
 800856a:	e7fd      	b.n	8008568 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800856c:	697b      	ldr	r3, [r7, #20]
 800856e:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8008572:	f023 0301 	bic.w	r3, r3, #1
 8008576:	b2da      	uxtb	r2, r3
 8008578:	697b      	ldr	r3, [r7, #20]
 800857a:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800857e:	697b      	ldr	r3, [r7, #20]
 8008580:	6a1b      	ldr	r3, [r3, #32]
 8008582:	6978      	ldr	r0, [r7, #20]
 8008584:	4798      	blx	r3
}
 8008586:	bf00      	nop
 8008588:	3718      	adds	r7, #24
 800858a:	46bd      	mov	sp, r7
 800858c:	bd80      	pop	{r7, pc}
 800858e:	bf00      	nop
 8008590:	20005408 	.word	0x20005408

08008594 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8008594:	b580      	push	{r7, lr}
 8008596:	b084      	sub	sp, #16
 8008598:	af00      	add	r7, sp, #0
 800859a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800859c:	f107 0308 	add.w	r3, r7, #8
 80085a0:	4618      	mov	r0, r3
 80085a2:	f000 f859 	bl	8008658 <prvGetNextExpireTime>
 80085a6:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 80085a8:	68bb      	ldr	r3, [r7, #8]
 80085aa:	4619      	mov	r1, r3
 80085ac:	68f8      	ldr	r0, [r7, #12]
 80085ae:	f000 f805 	bl	80085bc <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 80085b2:	f000 f8d7 	bl	8008764 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80085b6:	bf00      	nop
 80085b8:	e7f0      	b.n	800859c <prvTimerTask+0x8>
	...

080085bc <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 80085bc:	b580      	push	{r7, lr}
 80085be:	b084      	sub	sp, #16
 80085c0:	af00      	add	r7, sp, #0
 80085c2:	6078      	str	r0, [r7, #4]
 80085c4:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 80085c6:	f7ff fa0f 	bl	80079e8 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80085ca:	f107 0308 	add.w	r3, r7, #8
 80085ce:	4618      	mov	r0, r3
 80085d0:	f000 f866 	bl	80086a0 <prvSampleTimeNow>
 80085d4:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 80085d6:	68bb      	ldr	r3, [r7, #8]
 80085d8:	2b00      	cmp	r3, #0
 80085da:	d130      	bne.n	800863e <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80085dc:	683b      	ldr	r3, [r7, #0]
 80085de:	2b00      	cmp	r3, #0
 80085e0:	d10a      	bne.n	80085f8 <prvProcessTimerOrBlockTask+0x3c>
 80085e2:	687a      	ldr	r2, [r7, #4]
 80085e4:	68fb      	ldr	r3, [r7, #12]
 80085e6:	429a      	cmp	r2, r3
 80085e8:	d806      	bhi.n	80085f8 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 80085ea:	f7ff fa0b 	bl	8007a04 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 80085ee:	68f9      	ldr	r1, [r7, #12]
 80085f0:	6878      	ldr	r0, [r7, #4]
 80085f2:	f7ff ff81 	bl	80084f8 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 80085f6:	e024      	b.n	8008642 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 80085f8:	683b      	ldr	r3, [r7, #0]
 80085fa:	2b00      	cmp	r3, #0
 80085fc:	d008      	beq.n	8008610 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80085fe:	4b13      	ldr	r3, [pc, #76]	@ (800864c <prvProcessTimerOrBlockTask+0x90>)
 8008600:	681b      	ldr	r3, [r3, #0]
 8008602:	681b      	ldr	r3, [r3, #0]
 8008604:	2b00      	cmp	r3, #0
 8008606:	d101      	bne.n	800860c <prvProcessTimerOrBlockTask+0x50>
 8008608:	2301      	movs	r3, #1
 800860a:	e000      	b.n	800860e <prvProcessTimerOrBlockTask+0x52>
 800860c:	2300      	movs	r3, #0
 800860e:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8008610:	4b0f      	ldr	r3, [pc, #60]	@ (8008650 <prvProcessTimerOrBlockTask+0x94>)
 8008612:	6818      	ldr	r0, [r3, #0]
 8008614:	687a      	ldr	r2, [r7, #4]
 8008616:	68fb      	ldr	r3, [r7, #12]
 8008618:	1ad3      	subs	r3, r2, r3
 800861a:	683a      	ldr	r2, [r7, #0]
 800861c:	4619      	mov	r1, r3
 800861e:	f7fe ff6b 	bl	80074f8 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8008622:	f7ff f9ef 	bl	8007a04 <xTaskResumeAll>
 8008626:	4603      	mov	r3, r0
 8008628:	2b00      	cmp	r3, #0
 800862a:	d10a      	bne.n	8008642 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800862c:	4b09      	ldr	r3, [pc, #36]	@ (8008654 <prvProcessTimerOrBlockTask+0x98>)
 800862e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008632:	601a      	str	r2, [r3, #0]
 8008634:	f3bf 8f4f 	dsb	sy
 8008638:	f3bf 8f6f 	isb	sy
}
 800863c:	e001      	b.n	8008642 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800863e:	f7ff f9e1 	bl	8007a04 <xTaskResumeAll>
}
 8008642:	bf00      	nop
 8008644:	3710      	adds	r7, #16
 8008646:	46bd      	mov	sp, r7
 8008648:	bd80      	pop	{r7, pc}
 800864a:	bf00      	nop
 800864c:	2000540c 	.word	0x2000540c
 8008650:	20005410 	.word	0x20005410
 8008654:	e000ed04 	.word	0xe000ed04

08008658 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8008658:	b480      	push	{r7}
 800865a:	b085      	sub	sp, #20
 800865c:	af00      	add	r7, sp, #0
 800865e:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8008660:	4b0e      	ldr	r3, [pc, #56]	@ (800869c <prvGetNextExpireTime+0x44>)
 8008662:	681b      	ldr	r3, [r3, #0]
 8008664:	681b      	ldr	r3, [r3, #0]
 8008666:	2b00      	cmp	r3, #0
 8008668:	d101      	bne.n	800866e <prvGetNextExpireTime+0x16>
 800866a:	2201      	movs	r2, #1
 800866c:	e000      	b.n	8008670 <prvGetNextExpireTime+0x18>
 800866e:	2200      	movs	r2, #0
 8008670:	687b      	ldr	r3, [r7, #4]
 8008672:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8008674:	687b      	ldr	r3, [r7, #4]
 8008676:	681b      	ldr	r3, [r3, #0]
 8008678:	2b00      	cmp	r3, #0
 800867a:	d105      	bne.n	8008688 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800867c:	4b07      	ldr	r3, [pc, #28]	@ (800869c <prvGetNextExpireTime+0x44>)
 800867e:	681b      	ldr	r3, [r3, #0]
 8008680:	68db      	ldr	r3, [r3, #12]
 8008682:	681b      	ldr	r3, [r3, #0]
 8008684:	60fb      	str	r3, [r7, #12]
 8008686:	e001      	b.n	800868c <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8008688:	2300      	movs	r3, #0
 800868a:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800868c:	68fb      	ldr	r3, [r7, #12]
}
 800868e:	4618      	mov	r0, r3
 8008690:	3714      	adds	r7, #20
 8008692:	46bd      	mov	sp, r7
 8008694:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008698:	4770      	bx	lr
 800869a:	bf00      	nop
 800869c:	20005408 	.word	0x20005408

080086a0 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 80086a0:	b580      	push	{r7, lr}
 80086a2:	b084      	sub	sp, #16
 80086a4:	af00      	add	r7, sp, #0
 80086a6:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 80086a8:	f7ff fa4a 	bl	8007b40 <xTaskGetTickCount>
 80086ac:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 80086ae:	4b0b      	ldr	r3, [pc, #44]	@ (80086dc <prvSampleTimeNow+0x3c>)
 80086b0:	681b      	ldr	r3, [r3, #0]
 80086b2:	68fa      	ldr	r2, [r7, #12]
 80086b4:	429a      	cmp	r2, r3
 80086b6:	d205      	bcs.n	80086c4 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 80086b8:	f000 f93a 	bl	8008930 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 80086bc:	687b      	ldr	r3, [r7, #4]
 80086be:	2201      	movs	r2, #1
 80086c0:	601a      	str	r2, [r3, #0]
 80086c2:	e002      	b.n	80086ca <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 80086c4:	687b      	ldr	r3, [r7, #4]
 80086c6:	2200      	movs	r2, #0
 80086c8:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 80086ca:	4a04      	ldr	r2, [pc, #16]	@ (80086dc <prvSampleTimeNow+0x3c>)
 80086cc:	68fb      	ldr	r3, [r7, #12]
 80086ce:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 80086d0:	68fb      	ldr	r3, [r7, #12]
}
 80086d2:	4618      	mov	r0, r3
 80086d4:	3710      	adds	r7, #16
 80086d6:	46bd      	mov	sp, r7
 80086d8:	bd80      	pop	{r7, pc}
 80086da:	bf00      	nop
 80086dc:	20005418 	.word	0x20005418

080086e0 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 80086e0:	b580      	push	{r7, lr}
 80086e2:	b086      	sub	sp, #24
 80086e4:	af00      	add	r7, sp, #0
 80086e6:	60f8      	str	r0, [r7, #12]
 80086e8:	60b9      	str	r1, [r7, #8]
 80086ea:	607a      	str	r2, [r7, #4]
 80086ec:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 80086ee:	2300      	movs	r3, #0
 80086f0:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80086f2:	68fb      	ldr	r3, [r7, #12]
 80086f4:	68ba      	ldr	r2, [r7, #8]
 80086f6:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80086f8:	68fb      	ldr	r3, [r7, #12]
 80086fa:	68fa      	ldr	r2, [r7, #12]
 80086fc:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 80086fe:	68ba      	ldr	r2, [r7, #8]
 8008700:	687b      	ldr	r3, [r7, #4]
 8008702:	429a      	cmp	r2, r3
 8008704:	d812      	bhi.n	800872c <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008706:	687a      	ldr	r2, [r7, #4]
 8008708:	683b      	ldr	r3, [r7, #0]
 800870a:	1ad2      	subs	r2, r2, r3
 800870c:	68fb      	ldr	r3, [r7, #12]
 800870e:	699b      	ldr	r3, [r3, #24]
 8008710:	429a      	cmp	r2, r3
 8008712:	d302      	bcc.n	800871a <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8008714:	2301      	movs	r3, #1
 8008716:	617b      	str	r3, [r7, #20]
 8008718:	e01b      	b.n	8008752 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800871a:	4b10      	ldr	r3, [pc, #64]	@ (800875c <prvInsertTimerInActiveList+0x7c>)
 800871c:	681a      	ldr	r2, [r3, #0]
 800871e:	68fb      	ldr	r3, [r7, #12]
 8008720:	3304      	adds	r3, #4
 8008722:	4619      	mov	r1, r3
 8008724:	4610      	mov	r0, r2
 8008726:	f7fe f9be 	bl	8006aa6 <vListInsert>
 800872a:	e012      	b.n	8008752 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800872c:	687a      	ldr	r2, [r7, #4]
 800872e:	683b      	ldr	r3, [r7, #0]
 8008730:	429a      	cmp	r2, r3
 8008732:	d206      	bcs.n	8008742 <prvInsertTimerInActiveList+0x62>
 8008734:	68ba      	ldr	r2, [r7, #8]
 8008736:	683b      	ldr	r3, [r7, #0]
 8008738:	429a      	cmp	r2, r3
 800873a:	d302      	bcc.n	8008742 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800873c:	2301      	movs	r3, #1
 800873e:	617b      	str	r3, [r7, #20]
 8008740:	e007      	b.n	8008752 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8008742:	4b07      	ldr	r3, [pc, #28]	@ (8008760 <prvInsertTimerInActiveList+0x80>)
 8008744:	681a      	ldr	r2, [r3, #0]
 8008746:	68fb      	ldr	r3, [r7, #12]
 8008748:	3304      	adds	r3, #4
 800874a:	4619      	mov	r1, r3
 800874c:	4610      	mov	r0, r2
 800874e:	f7fe f9aa 	bl	8006aa6 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8008752:	697b      	ldr	r3, [r7, #20]
}
 8008754:	4618      	mov	r0, r3
 8008756:	3718      	adds	r7, #24
 8008758:	46bd      	mov	sp, r7
 800875a:	bd80      	pop	{r7, pc}
 800875c:	2000540c 	.word	0x2000540c
 8008760:	20005408 	.word	0x20005408

08008764 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8008764:	b580      	push	{r7, lr}
 8008766:	b08e      	sub	sp, #56	@ 0x38
 8008768:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800876a:	e0ce      	b.n	800890a <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800876c:	687b      	ldr	r3, [r7, #4]
 800876e:	2b00      	cmp	r3, #0
 8008770:	da19      	bge.n	80087a6 <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8008772:	1d3b      	adds	r3, r7, #4
 8008774:	3304      	adds	r3, #4
 8008776:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8008778:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800877a:	2b00      	cmp	r3, #0
 800877c:	d10b      	bne.n	8008796 <prvProcessReceivedCommands+0x32>
	__asm volatile
 800877e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008782:	f383 8811 	msr	BASEPRI, r3
 8008786:	f3bf 8f6f 	isb	sy
 800878a:	f3bf 8f4f 	dsb	sy
 800878e:	61fb      	str	r3, [r7, #28]
}
 8008790:	bf00      	nop
 8008792:	bf00      	nop
 8008794:	e7fd      	b.n	8008792 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8008796:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008798:	681b      	ldr	r3, [r3, #0]
 800879a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800879c:	6850      	ldr	r0, [r2, #4]
 800879e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80087a0:	6892      	ldr	r2, [r2, #8]
 80087a2:	4611      	mov	r1, r2
 80087a4:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 80087a6:	687b      	ldr	r3, [r7, #4]
 80087a8:	2b00      	cmp	r3, #0
 80087aa:	f2c0 80ae 	blt.w	800890a <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 80087ae:	68fb      	ldr	r3, [r7, #12]
 80087b0:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 80087b2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80087b4:	695b      	ldr	r3, [r3, #20]
 80087b6:	2b00      	cmp	r3, #0
 80087b8:	d004      	beq.n	80087c4 <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80087ba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80087bc:	3304      	adds	r3, #4
 80087be:	4618      	mov	r0, r3
 80087c0:	f7fe f9aa 	bl	8006b18 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80087c4:	463b      	mov	r3, r7
 80087c6:	4618      	mov	r0, r3
 80087c8:	f7ff ff6a 	bl	80086a0 <prvSampleTimeNow>
 80087cc:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 80087ce:	687b      	ldr	r3, [r7, #4]
 80087d0:	2b09      	cmp	r3, #9
 80087d2:	f200 8097 	bhi.w	8008904 <prvProcessReceivedCommands+0x1a0>
 80087d6:	a201      	add	r2, pc, #4	@ (adr r2, 80087dc <prvProcessReceivedCommands+0x78>)
 80087d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80087dc:	08008805 	.word	0x08008805
 80087e0:	08008805 	.word	0x08008805
 80087e4:	08008805 	.word	0x08008805
 80087e8:	0800887b 	.word	0x0800887b
 80087ec:	0800888f 	.word	0x0800888f
 80087f0:	080088db 	.word	0x080088db
 80087f4:	08008805 	.word	0x08008805
 80087f8:	08008805 	.word	0x08008805
 80087fc:	0800887b 	.word	0x0800887b
 8008800:	0800888f 	.word	0x0800888f
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8008804:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008806:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800880a:	f043 0301 	orr.w	r3, r3, #1
 800880e:	b2da      	uxtb	r2, r3
 8008810:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008812:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8008816:	68ba      	ldr	r2, [r7, #8]
 8008818:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800881a:	699b      	ldr	r3, [r3, #24]
 800881c:	18d1      	adds	r1, r2, r3
 800881e:	68bb      	ldr	r3, [r7, #8]
 8008820:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008822:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008824:	f7ff ff5c 	bl	80086e0 <prvInsertTimerInActiveList>
 8008828:	4603      	mov	r3, r0
 800882a:	2b00      	cmp	r3, #0
 800882c:	d06c      	beq.n	8008908 <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800882e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008830:	6a1b      	ldr	r3, [r3, #32]
 8008832:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008834:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8008836:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008838:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800883c:	f003 0304 	and.w	r3, r3, #4
 8008840:	2b00      	cmp	r3, #0
 8008842:	d061      	beq.n	8008908 <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8008844:	68ba      	ldr	r2, [r7, #8]
 8008846:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008848:	699b      	ldr	r3, [r3, #24]
 800884a:	441a      	add	r2, r3
 800884c:	2300      	movs	r3, #0
 800884e:	9300      	str	r3, [sp, #0]
 8008850:	2300      	movs	r3, #0
 8008852:	2100      	movs	r1, #0
 8008854:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008856:	f7ff fe01 	bl	800845c <xTimerGenericCommand>
 800885a:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800885c:	6a3b      	ldr	r3, [r7, #32]
 800885e:	2b00      	cmp	r3, #0
 8008860:	d152      	bne.n	8008908 <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 8008862:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008866:	f383 8811 	msr	BASEPRI, r3
 800886a:	f3bf 8f6f 	isb	sy
 800886e:	f3bf 8f4f 	dsb	sy
 8008872:	61bb      	str	r3, [r7, #24]
}
 8008874:	bf00      	nop
 8008876:	bf00      	nop
 8008878:	e7fd      	b.n	8008876 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800887a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800887c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8008880:	f023 0301 	bic.w	r3, r3, #1
 8008884:	b2da      	uxtb	r2, r3
 8008886:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008888:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800888c:	e03d      	b.n	800890a <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800888e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008890:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8008894:	f043 0301 	orr.w	r3, r3, #1
 8008898:	b2da      	uxtb	r2, r3
 800889a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800889c:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80088a0:	68ba      	ldr	r2, [r7, #8]
 80088a2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80088a4:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80088a6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80088a8:	699b      	ldr	r3, [r3, #24]
 80088aa:	2b00      	cmp	r3, #0
 80088ac:	d10b      	bne.n	80088c6 <prvProcessReceivedCommands+0x162>
	__asm volatile
 80088ae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80088b2:	f383 8811 	msr	BASEPRI, r3
 80088b6:	f3bf 8f6f 	isb	sy
 80088ba:	f3bf 8f4f 	dsb	sy
 80088be:	617b      	str	r3, [r7, #20]
}
 80088c0:	bf00      	nop
 80088c2:	bf00      	nop
 80088c4:	e7fd      	b.n	80088c2 <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80088c6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80088c8:	699a      	ldr	r2, [r3, #24]
 80088ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80088cc:	18d1      	adds	r1, r2, r3
 80088ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80088d0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80088d2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80088d4:	f7ff ff04 	bl	80086e0 <prvInsertTimerInActiveList>
					break;
 80088d8:	e017      	b.n	800890a <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 80088da:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80088dc:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80088e0:	f003 0302 	and.w	r3, r3, #2
 80088e4:	2b00      	cmp	r3, #0
 80088e6:	d103      	bne.n	80088f0 <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 80088e8:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80088ea:	f000 fbe5 	bl	80090b8 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 80088ee:	e00c      	b.n	800890a <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80088f0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80088f2:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80088f6:	f023 0301 	bic.w	r3, r3, #1
 80088fa:	b2da      	uxtb	r2, r3
 80088fc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80088fe:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8008902:	e002      	b.n	800890a <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 8008904:	bf00      	nop
 8008906:	e000      	b.n	800890a <prvProcessReceivedCommands+0x1a6>
					break;
 8008908:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800890a:	4b08      	ldr	r3, [pc, #32]	@ (800892c <prvProcessReceivedCommands+0x1c8>)
 800890c:	681b      	ldr	r3, [r3, #0]
 800890e:	1d39      	adds	r1, r7, #4
 8008910:	2200      	movs	r2, #0
 8008912:	4618      	mov	r0, r3
 8008914:	f7fe fbd4 	bl	80070c0 <xQueueReceive>
 8008918:	4603      	mov	r3, r0
 800891a:	2b00      	cmp	r3, #0
 800891c:	f47f af26 	bne.w	800876c <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8008920:	bf00      	nop
 8008922:	bf00      	nop
 8008924:	3730      	adds	r7, #48	@ 0x30
 8008926:	46bd      	mov	sp, r7
 8008928:	bd80      	pop	{r7, pc}
 800892a:	bf00      	nop
 800892c:	20005410 	.word	0x20005410

08008930 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8008930:	b580      	push	{r7, lr}
 8008932:	b088      	sub	sp, #32
 8008934:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8008936:	e049      	b.n	80089cc <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8008938:	4b2e      	ldr	r3, [pc, #184]	@ (80089f4 <prvSwitchTimerLists+0xc4>)
 800893a:	681b      	ldr	r3, [r3, #0]
 800893c:	68db      	ldr	r3, [r3, #12]
 800893e:	681b      	ldr	r3, [r3, #0]
 8008940:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008942:	4b2c      	ldr	r3, [pc, #176]	@ (80089f4 <prvSwitchTimerLists+0xc4>)
 8008944:	681b      	ldr	r3, [r3, #0]
 8008946:	68db      	ldr	r3, [r3, #12]
 8008948:	68db      	ldr	r3, [r3, #12]
 800894a:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800894c:	68fb      	ldr	r3, [r7, #12]
 800894e:	3304      	adds	r3, #4
 8008950:	4618      	mov	r0, r3
 8008952:	f7fe f8e1 	bl	8006b18 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8008956:	68fb      	ldr	r3, [r7, #12]
 8008958:	6a1b      	ldr	r3, [r3, #32]
 800895a:	68f8      	ldr	r0, [r7, #12]
 800895c:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800895e:	68fb      	ldr	r3, [r7, #12]
 8008960:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8008964:	f003 0304 	and.w	r3, r3, #4
 8008968:	2b00      	cmp	r3, #0
 800896a:	d02f      	beq.n	80089cc <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800896c:	68fb      	ldr	r3, [r7, #12]
 800896e:	699b      	ldr	r3, [r3, #24]
 8008970:	693a      	ldr	r2, [r7, #16]
 8008972:	4413      	add	r3, r2
 8008974:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8008976:	68ba      	ldr	r2, [r7, #8]
 8008978:	693b      	ldr	r3, [r7, #16]
 800897a:	429a      	cmp	r2, r3
 800897c:	d90e      	bls.n	800899c <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800897e:	68fb      	ldr	r3, [r7, #12]
 8008980:	68ba      	ldr	r2, [r7, #8]
 8008982:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8008984:	68fb      	ldr	r3, [r7, #12]
 8008986:	68fa      	ldr	r2, [r7, #12]
 8008988:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800898a:	4b1a      	ldr	r3, [pc, #104]	@ (80089f4 <prvSwitchTimerLists+0xc4>)
 800898c:	681a      	ldr	r2, [r3, #0]
 800898e:	68fb      	ldr	r3, [r7, #12]
 8008990:	3304      	adds	r3, #4
 8008992:	4619      	mov	r1, r3
 8008994:	4610      	mov	r0, r2
 8008996:	f7fe f886 	bl	8006aa6 <vListInsert>
 800899a:	e017      	b.n	80089cc <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800899c:	2300      	movs	r3, #0
 800899e:	9300      	str	r3, [sp, #0]
 80089a0:	2300      	movs	r3, #0
 80089a2:	693a      	ldr	r2, [r7, #16]
 80089a4:	2100      	movs	r1, #0
 80089a6:	68f8      	ldr	r0, [r7, #12]
 80089a8:	f7ff fd58 	bl	800845c <xTimerGenericCommand>
 80089ac:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 80089ae:	687b      	ldr	r3, [r7, #4]
 80089b0:	2b00      	cmp	r3, #0
 80089b2:	d10b      	bne.n	80089cc <prvSwitchTimerLists+0x9c>
	__asm volatile
 80089b4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80089b8:	f383 8811 	msr	BASEPRI, r3
 80089bc:	f3bf 8f6f 	isb	sy
 80089c0:	f3bf 8f4f 	dsb	sy
 80089c4:	603b      	str	r3, [r7, #0]
}
 80089c6:	bf00      	nop
 80089c8:	bf00      	nop
 80089ca:	e7fd      	b.n	80089c8 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80089cc:	4b09      	ldr	r3, [pc, #36]	@ (80089f4 <prvSwitchTimerLists+0xc4>)
 80089ce:	681b      	ldr	r3, [r3, #0]
 80089d0:	681b      	ldr	r3, [r3, #0]
 80089d2:	2b00      	cmp	r3, #0
 80089d4:	d1b0      	bne.n	8008938 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 80089d6:	4b07      	ldr	r3, [pc, #28]	@ (80089f4 <prvSwitchTimerLists+0xc4>)
 80089d8:	681b      	ldr	r3, [r3, #0]
 80089da:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 80089dc:	4b06      	ldr	r3, [pc, #24]	@ (80089f8 <prvSwitchTimerLists+0xc8>)
 80089de:	681b      	ldr	r3, [r3, #0]
 80089e0:	4a04      	ldr	r2, [pc, #16]	@ (80089f4 <prvSwitchTimerLists+0xc4>)
 80089e2:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 80089e4:	4a04      	ldr	r2, [pc, #16]	@ (80089f8 <prvSwitchTimerLists+0xc8>)
 80089e6:	697b      	ldr	r3, [r7, #20]
 80089e8:	6013      	str	r3, [r2, #0]
}
 80089ea:	bf00      	nop
 80089ec:	3718      	adds	r7, #24
 80089ee:	46bd      	mov	sp, r7
 80089f0:	bd80      	pop	{r7, pc}
 80089f2:	bf00      	nop
 80089f4:	20005408 	.word	0x20005408
 80089f8:	2000540c 	.word	0x2000540c

080089fc <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 80089fc:	b580      	push	{r7, lr}
 80089fe:	b082      	sub	sp, #8
 8008a00:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8008a02:	f000 f969 	bl	8008cd8 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8008a06:	4b15      	ldr	r3, [pc, #84]	@ (8008a5c <prvCheckForValidListAndQueue+0x60>)
 8008a08:	681b      	ldr	r3, [r3, #0]
 8008a0a:	2b00      	cmp	r3, #0
 8008a0c:	d120      	bne.n	8008a50 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8008a0e:	4814      	ldr	r0, [pc, #80]	@ (8008a60 <prvCheckForValidListAndQueue+0x64>)
 8008a10:	f7fd fff8 	bl	8006a04 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8008a14:	4813      	ldr	r0, [pc, #76]	@ (8008a64 <prvCheckForValidListAndQueue+0x68>)
 8008a16:	f7fd fff5 	bl	8006a04 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8008a1a:	4b13      	ldr	r3, [pc, #76]	@ (8008a68 <prvCheckForValidListAndQueue+0x6c>)
 8008a1c:	4a10      	ldr	r2, [pc, #64]	@ (8008a60 <prvCheckForValidListAndQueue+0x64>)
 8008a1e:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8008a20:	4b12      	ldr	r3, [pc, #72]	@ (8008a6c <prvCheckForValidListAndQueue+0x70>)
 8008a22:	4a10      	ldr	r2, [pc, #64]	@ (8008a64 <prvCheckForValidListAndQueue+0x68>)
 8008a24:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8008a26:	2300      	movs	r3, #0
 8008a28:	9300      	str	r3, [sp, #0]
 8008a2a:	4b11      	ldr	r3, [pc, #68]	@ (8008a70 <prvCheckForValidListAndQueue+0x74>)
 8008a2c:	4a11      	ldr	r2, [pc, #68]	@ (8008a74 <prvCheckForValidListAndQueue+0x78>)
 8008a2e:	2110      	movs	r1, #16
 8008a30:	200a      	movs	r0, #10
 8008a32:	f7fe f905 	bl	8006c40 <xQueueGenericCreateStatic>
 8008a36:	4603      	mov	r3, r0
 8008a38:	4a08      	ldr	r2, [pc, #32]	@ (8008a5c <prvCheckForValidListAndQueue+0x60>)
 8008a3a:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8008a3c:	4b07      	ldr	r3, [pc, #28]	@ (8008a5c <prvCheckForValidListAndQueue+0x60>)
 8008a3e:	681b      	ldr	r3, [r3, #0]
 8008a40:	2b00      	cmp	r3, #0
 8008a42:	d005      	beq.n	8008a50 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8008a44:	4b05      	ldr	r3, [pc, #20]	@ (8008a5c <prvCheckForValidListAndQueue+0x60>)
 8008a46:	681b      	ldr	r3, [r3, #0]
 8008a48:	490b      	ldr	r1, [pc, #44]	@ (8008a78 <prvCheckForValidListAndQueue+0x7c>)
 8008a4a:	4618      	mov	r0, r3
 8008a4c:	f7fe fd2a 	bl	80074a4 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8008a50:	f000 f974 	bl	8008d3c <vPortExitCritical>
}
 8008a54:	bf00      	nop
 8008a56:	46bd      	mov	sp, r7
 8008a58:	bd80      	pop	{r7, pc}
 8008a5a:	bf00      	nop
 8008a5c:	20005410 	.word	0x20005410
 8008a60:	200053e0 	.word	0x200053e0
 8008a64:	200053f4 	.word	0x200053f4
 8008a68:	20005408 	.word	0x20005408
 8008a6c:	2000540c 	.word	0x2000540c
 8008a70:	200054bc 	.word	0x200054bc
 8008a74:	2000541c 	.word	0x2000541c
 8008a78:	08016838 	.word	0x08016838

08008a7c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8008a7c:	b480      	push	{r7}
 8008a7e:	b085      	sub	sp, #20
 8008a80:	af00      	add	r7, sp, #0
 8008a82:	60f8      	str	r0, [r7, #12]
 8008a84:	60b9      	str	r1, [r7, #8]
 8008a86:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8008a88:	68fb      	ldr	r3, [r7, #12]
 8008a8a:	3b04      	subs	r3, #4
 8008a8c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8008a8e:	68fb      	ldr	r3, [r7, #12]
 8008a90:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8008a94:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8008a96:	68fb      	ldr	r3, [r7, #12]
 8008a98:	3b04      	subs	r3, #4
 8008a9a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8008a9c:	68bb      	ldr	r3, [r7, #8]
 8008a9e:	f023 0201 	bic.w	r2, r3, #1
 8008aa2:	68fb      	ldr	r3, [r7, #12]
 8008aa4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8008aa6:	68fb      	ldr	r3, [r7, #12]
 8008aa8:	3b04      	subs	r3, #4
 8008aaa:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8008aac:	4a0c      	ldr	r2, [pc, #48]	@ (8008ae0 <pxPortInitialiseStack+0x64>)
 8008aae:	68fb      	ldr	r3, [r7, #12]
 8008ab0:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8008ab2:	68fb      	ldr	r3, [r7, #12]
 8008ab4:	3b14      	subs	r3, #20
 8008ab6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8008ab8:	687a      	ldr	r2, [r7, #4]
 8008aba:	68fb      	ldr	r3, [r7, #12]
 8008abc:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8008abe:	68fb      	ldr	r3, [r7, #12]
 8008ac0:	3b04      	subs	r3, #4
 8008ac2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8008ac4:	68fb      	ldr	r3, [r7, #12]
 8008ac6:	f06f 0202 	mvn.w	r2, #2
 8008aca:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8008acc:	68fb      	ldr	r3, [r7, #12]
 8008ace:	3b20      	subs	r3, #32
 8008ad0:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8008ad2:	68fb      	ldr	r3, [r7, #12]
}
 8008ad4:	4618      	mov	r0, r3
 8008ad6:	3714      	adds	r7, #20
 8008ad8:	46bd      	mov	sp, r7
 8008ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ade:	4770      	bx	lr
 8008ae0:	08008ae5 	.word	0x08008ae5

08008ae4 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8008ae4:	b480      	push	{r7}
 8008ae6:	b085      	sub	sp, #20
 8008ae8:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8008aea:	2300      	movs	r3, #0
 8008aec:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8008aee:	4b13      	ldr	r3, [pc, #76]	@ (8008b3c <prvTaskExitError+0x58>)
 8008af0:	681b      	ldr	r3, [r3, #0]
 8008af2:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8008af6:	d00b      	beq.n	8008b10 <prvTaskExitError+0x2c>
	__asm volatile
 8008af8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008afc:	f383 8811 	msr	BASEPRI, r3
 8008b00:	f3bf 8f6f 	isb	sy
 8008b04:	f3bf 8f4f 	dsb	sy
 8008b08:	60fb      	str	r3, [r7, #12]
}
 8008b0a:	bf00      	nop
 8008b0c:	bf00      	nop
 8008b0e:	e7fd      	b.n	8008b0c <prvTaskExitError+0x28>
	__asm volatile
 8008b10:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008b14:	f383 8811 	msr	BASEPRI, r3
 8008b18:	f3bf 8f6f 	isb	sy
 8008b1c:	f3bf 8f4f 	dsb	sy
 8008b20:	60bb      	str	r3, [r7, #8]
}
 8008b22:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8008b24:	bf00      	nop
 8008b26:	687b      	ldr	r3, [r7, #4]
 8008b28:	2b00      	cmp	r3, #0
 8008b2a:	d0fc      	beq.n	8008b26 <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8008b2c:	bf00      	nop
 8008b2e:	bf00      	nop
 8008b30:	3714      	adds	r7, #20
 8008b32:	46bd      	mov	sp, r7
 8008b34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b38:	4770      	bx	lr
 8008b3a:	bf00      	nop
 8008b3c:	20000010 	.word	0x20000010

08008b40 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8008b40:	4b07      	ldr	r3, [pc, #28]	@ (8008b60 <pxCurrentTCBConst2>)
 8008b42:	6819      	ldr	r1, [r3, #0]
 8008b44:	6808      	ldr	r0, [r1, #0]
 8008b46:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008b4a:	f380 8809 	msr	PSP, r0
 8008b4e:	f3bf 8f6f 	isb	sy
 8008b52:	f04f 0000 	mov.w	r0, #0
 8008b56:	f380 8811 	msr	BASEPRI, r0
 8008b5a:	4770      	bx	lr
 8008b5c:	f3af 8000 	nop.w

08008b60 <pxCurrentTCBConst2>:
 8008b60:	20004ee0 	.word	0x20004ee0
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8008b64:	bf00      	nop
 8008b66:	bf00      	nop

08008b68 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8008b68:	4808      	ldr	r0, [pc, #32]	@ (8008b8c <prvPortStartFirstTask+0x24>)
 8008b6a:	6800      	ldr	r0, [r0, #0]
 8008b6c:	6800      	ldr	r0, [r0, #0]
 8008b6e:	f380 8808 	msr	MSP, r0
 8008b72:	f04f 0000 	mov.w	r0, #0
 8008b76:	f380 8814 	msr	CONTROL, r0
 8008b7a:	b662      	cpsie	i
 8008b7c:	b661      	cpsie	f
 8008b7e:	f3bf 8f4f 	dsb	sy
 8008b82:	f3bf 8f6f 	isb	sy
 8008b86:	df00      	svc	0
 8008b88:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8008b8a:	bf00      	nop
 8008b8c:	e000ed08 	.word	0xe000ed08

08008b90 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8008b90:	b580      	push	{r7, lr}
 8008b92:	b086      	sub	sp, #24
 8008b94:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8008b96:	4b47      	ldr	r3, [pc, #284]	@ (8008cb4 <xPortStartScheduler+0x124>)
 8008b98:	681b      	ldr	r3, [r3, #0]
 8008b9a:	4a47      	ldr	r2, [pc, #284]	@ (8008cb8 <xPortStartScheduler+0x128>)
 8008b9c:	4293      	cmp	r3, r2
 8008b9e:	d10b      	bne.n	8008bb8 <xPortStartScheduler+0x28>
	__asm volatile
 8008ba0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008ba4:	f383 8811 	msr	BASEPRI, r3
 8008ba8:	f3bf 8f6f 	isb	sy
 8008bac:	f3bf 8f4f 	dsb	sy
 8008bb0:	613b      	str	r3, [r7, #16]
}
 8008bb2:	bf00      	nop
 8008bb4:	bf00      	nop
 8008bb6:	e7fd      	b.n	8008bb4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8008bb8:	4b3e      	ldr	r3, [pc, #248]	@ (8008cb4 <xPortStartScheduler+0x124>)
 8008bba:	681b      	ldr	r3, [r3, #0]
 8008bbc:	4a3f      	ldr	r2, [pc, #252]	@ (8008cbc <xPortStartScheduler+0x12c>)
 8008bbe:	4293      	cmp	r3, r2
 8008bc0:	d10b      	bne.n	8008bda <xPortStartScheduler+0x4a>
	__asm volatile
 8008bc2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008bc6:	f383 8811 	msr	BASEPRI, r3
 8008bca:	f3bf 8f6f 	isb	sy
 8008bce:	f3bf 8f4f 	dsb	sy
 8008bd2:	60fb      	str	r3, [r7, #12]
}
 8008bd4:	bf00      	nop
 8008bd6:	bf00      	nop
 8008bd8:	e7fd      	b.n	8008bd6 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8008bda:	4b39      	ldr	r3, [pc, #228]	@ (8008cc0 <xPortStartScheduler+0x130>)
 8008bdc:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8008bde:	697b      	ldr	r3, [r7, #20]
 8008be0:	781b      	ldrb	r3, [r3, #0]
 8008be2:	b2db      	uxtb	r3, r3
 8008be4:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8008be6:	697b      	ldr	r3, [r7, #20]
 8008be8:	22ff      	movs	r2, #255	@ 0xff
 8008bea:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8008bec:	697b      	ldr	r3, [r7, #20]
 8008bee:	781b      	ldrb	r3, [r3, #0]
 8008bf0:	b2db      	uxtb	r3, r3
 8008bf2:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8008bf4:	78fb      	ldrb	r3, [r7, #3]
 8008bf6:	b2db      	uxtb	r3, r3
 8008bf8:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8008bfc:	b2da      	uxtb	r2, r3
 8008bfe:	4b31      	ldr	r3, [pc, #196]	@ (8008cc4 <xPortStartScheduler+0x134>)
 8008c00:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8008c02:	4b31      	ldr	r3, [pc, #196]	@ (8008cc8 <xPortStartScheduler+0x138>)
 8008c04:	2207      	movs	r2, #7
 8008c06:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8008c08:	e009      	b.n	8008c1e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 8008c0a:	4b2f      	ldr	r3, [pc, #188]	@ (8008cc8 <xPortStartScheduler+0x138>)
 8008c0c:	681b      	ldr	r3, [r3, #0]
 8008c0e:	3b01      	subs	r3, #1
 8008c10:	4a2d      	ldr	r2, [pc, #180]	@ (8008cc8 <xPortStartScheduler+0x138>)
 8008c12:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8008c14:	78fb      	ldrb	r3, [r7, #3]
 8008c16:	b2db      	uxtb	r3, r3
 8008c18:	005b      	lsls	r3, r3, #1
 8008c1a:	b2db      	uxtb	r3, r3
 8008c1c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8008c1e:	78fb      	ldrb	r3, [r7, #3]
 8008c20:	b2db      	uxtb	r3, r3
 8008c22:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008c26:	2b80      	cmp	r3, #128	@ 0x80
 8008c28:	d0ef      	beq.n	8008c0a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8008c2a:	4b27      	ldr	r3, [pc, #156]	@ (8008cc8 <xPortStartScheduler+0x138>)
 8008c2c:	681b      	ldr	r3, [r3, #0]
 8008c2e:	f1c3 0307 	rsb	r3, r3, #7
 8008c32:	2b04      	cmp	r3, #4
 8008c34:	d00b      	beq.n	8008c4e <xPortStartScheduler+0xbe>
	__asm volatile
 8008c36:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008c3a:	f383 8811 	msr	BASEPRI, r3
 8008c3e:	f3bf 8f6f 	isb	sy
 8008c42:	f3bf 8f4f 	dsb	sy
 8008c46:	60bb      	str	r3, [r7, #8]
}
 8008c48:	bf00      	nop
 8008c4a:	bf00      	nop
 8008c4c:	e7fd      	b.n	8008c4a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8008c4e:	4b1e      	ldr	r3, [pc, #120]	@ (8008cc8 <xPortStartScheduler+0x138>)
 8008c50:	681b      	ldr	r3, [r3, #0]
 8008c52:	021b      	lsls	r3, r3, #8
 8008c54:	4a1c      	ldr	r2, [pc, #112]	@ (8008cc8 <xPortStartScheduler+0x138>)
 8008c56:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8008c58:	4b1b      	ldr	r3, [pc, #108]	@ (8008cc8 <xPortStartScheduler+0x138>)
 8008c5a:	681b      	ldr	r3, [r3, #0]
 8008c5c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8008c60:	4a19      	ldr	r2, [pc, #100]	@ (8008cc8 <xPortStartScheduler+0x138>)
 8008c62:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8008c64:	687b      	ldr	r3, [r7, #4]
 8008c66:	b2da      	uxtb	r2, r3
 8008c68:	697b      	ldr	r3, [r7, #20]
 8008c6a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8008c6c:	4b17      	ldr	r3, [pc, #92]	@ (8008ccc <xPortStartScheduler+0x13c>)
 8008c6e:	681b      	ldr	r3, [r3, #0]
 8008c70:	4a16      	ldr	r2, [pc, #88]	@ (8008ccc <xPortStartScheduler+0x13c>)
 8008c72:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8008c76:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8008c78:	4b14      	ldr	r3, [pc, #80]	@ (8008ccc <xPortStartScheduler+0x13c>)
 8008c7a:	681b      	ldr	r3, [r3, #0]
 8008c7c:	4a13      	ldr	r2, [pc, #76]	@ (8008ccc <xPortStartScheduler+0x13c>)
 8008c7e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8008c82:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8008c84:	f000 f8da 	bl	8008e3c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8008c88:	4b11      	ldr	r3, [pc, #68]	@ (8008cd0 <xPortStartScheduler+0x140>)
 8008c8a:	2200      	movs	r2, #0
 8008c8c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8008c8e:	f000 f8f9 	bl	8008e84 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8008c92:	4b10      	ldr	r3, [pc, #64]	@ (8008cd4 <xPortStartScheduler+0x144>)
 8008c94:	681b      	ldr	r3, [r3, #0]
 8008c96:	4a0f      	ldr	r2, [pc, #60]	@ (8008cd4 <xPortStartScheduler+0x144>)
 8008c98:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 8008c9c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8008c9e:	f7ff ff63 	bl	8008b68 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8008ca2:	f7ff f817 	bl	8007cd4 <vTaskSwitchContext>
	prvTaskExitError();
 8008ca6:	f7ff ff1d 	bl	8008ae4 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8008caa:	2300      	movs	r3, #0
}
 8008cac:	4618      	mov	r0, r3
 8008cae:	3718      	adds	r7, #24
 8008cb0:	46bd      	mov	sp, r7
 8008cb2:	bd80      	pop	{r7, pc}
 8008cb4:	e000ed00 	.word	0xe000ed00
 8008cb8:	410fc271 	.word	0x410fc271
 8008cbc:	410fc270 	.word	0x410fc270
 8008cc0:	e000e400 	.word	0xe000e400
 8008cc4:	2000550c 	.word	0x2000550c
 8008cc8:	20005510 	.word	0x20005510
 8008ccc:	e000ed20 	.word	0xe000ed20
 8008cd0:	20000010 	.word	0x20000010
 8008cd4:	e000ef34 	.word	0xe000ef34

08008cd8 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8008cd8:	b480      	push	{r7}
 8008cda:	b083      	sub	sp, #12
 8008cdc:	af00      	add	r7, sp, #0
	__asm volatile
 8008cde:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008ce2:	f383 8811 	msr	BASEPRI, r3
 8008ce6:	f3bf 8f6f 	isb	sy
 8008cea:	f3bf 8f4f 	dsb	sy
 8008cee:	607b      	str	r3, [r7, #4]
}
 8008cf0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8008cf2:	4b10      	ldr	r3, [pc, #64]	@ (8008d34 <vPortEnterCritical+0x5c>)
 8008cf4:	681b      	ldr	r3, [r3, #0]
 8008cf6:	3301      	adds	r3, #1
 8008cf8:	4a0e      	ldr	r2, [pc, #56]	@ (8008d34 <vPortEnterCritical+0x5c>)
 8008cfa:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8008cfc:	4b0d      	ldr	r3, [pc, #52]	@ (8008d34 <vPortEnterCritical+0x5c>)
 8008cfe:	681b      	ldr	r3, [r3, #0]
 8008d00:	2b01      	cmp	r3, #1
 8008d02:	d110      	bne.n	8008d26 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8008d04:	4b0c      	ldr	r3, [pc, #48]	@ (8008d38 <vPortEnterCritical+0x60>)
 8008d06:	681b      	ldr	r3, [r3, #0]
 8008d08:	b2db      	uxtb	r3, r3
 8008d0a:	2b00      	cmp	r3, #0
 8008d0c:	d00b      	beq.n	8008d26 <vPortEnterCritical+0x4e>
	__asm volatile
 8008d0e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008d12:	f383 8811 	msr	BASEPRI, r3
 8008d16:	f3bf 8f6f 	isb	sy
 8008d1a:	f3bf 8f4f 	dsb	sy
 8008d1e:	603b      	str	r3, [r7, #0]
}
 8008d20:	bf00      	nop
 8008d22:	bf00      	nop
 8008d24:	e7fd      	b.n	8008d22 <vPortEnterCritical+0x4a>
	}
}
 8008d26:	bf00      	nop
 8008d28:	370c      	adds	r7, #12
 8008d2a:	46bd      	mov	sp, r7
 8008d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d30:	4770      	bx	lr
 8008d32:	bf00      	nop
 8008d34:	20000010 	.word	0x20000010
 8008d38:	e000ed04 	.word	0xe000ed04

08008d3c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8008d3c:	b480      	push	{r7}
 8008d3e:	b083      	sub	sp, #12
 8008d40:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8008d42:	4b12      	ldr	r3, [pc, #72]	@ (8008d8c <vPortExitCritical+0x50>)
 8008d44:	681b      	ldr	r3, [r3, #0]
 8008d46:	2b00      	cmp	r3, #0
 8008d48:	d10b      	bne.n	8008d62 <vPortExitCritical+0x26>
	__asm volatile
 8008d4a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008d4e:	f383 8811 	msr	BASEPRI, r3
 8008d52:	f3bf 8f6f 	isb	sy
 8008d56:	f3bf 8f4f 	dsb	sy
 8008d5a:	607b      	str	r3, [r7, #4]
}
 8008d5c:	bf00      	nop
 8008d5e:	bf00      	nop
 8008d60:	e7fd      	b.n	8008d5e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8008d62:	4b0a      	ldr	r3, [pc, #40]	@ (8008d8c <vPortExitCritical+0x50>)
 8008d64:	681b      	ldr	r3, [r3, #0]
 8008d66:	3b01      	subs	r3, #1
 8008d68:	4a08      	ldr	r2, [pc, #32]	@ (8008d8c <vPortExitCritical+0x50>)
 8008d6a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8008d6c:	4b07      	ldr	r3, [pc, #28]	@ (8008d8c <vPortExitCritical+0x50>)
 8008d6e:	681b      	ldr	r3, [r3, #0]
 8008d70:	2b00      	cmp	r3, #0
 8008d72:	d105      	bne.n	8008d80 <vPortExitCritical+0x44>
 8008d74:	2300      	movs	r3, #0
 8008d76:	603b      	str	r3, [r7, #0]
	__asm volatile
 8008d78:	683b      	ldr	r3, [r7, #0]
 8008d7a:	f383 8811 	msr	BASEPRI, r3
}
 8008d7e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8008d80:	bf00      	nop
 8008d82:	370c      	adds	r7, #12
 8008d84:	46bd      	mov	sp, r7
 8008d86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d8a:	4770      	bx	lr
 8008d8c:	20000010 	.word	0x20000010

08008d90 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8008d90:	f3ef 8009 	mrs	r0, PSP
 8008d94:	f3bf 8f6f 	isb	sy
 8008d98:	4b15      	ldr	r3, [pc, #84]	@ (8008df0 <pxCurrentTCBConst>)
 8008d9a:	681a      	ldr	r2, [r3, #0]
 8008d9c:	f01e 0f10 	tst.w	lr, #16
 8008da0:	bf08      	it	eq
 8008da2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8008da6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008daa:	6010      	str	r0, [r2, #0]
 8008dac:	e92d 0009 	stmdb	sp!, {r0, r3}
 8008db0:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8008db4:	f380 8811 	msr	BASEPRI, r0
 8008db8:	f3bf 8f4f 	dsb	sy
 8008dbc:	f3bf 8f6f 	isb	sy
 8008dc0:	f7fe ff88 	bl	8007cd4 <vTaskSwitchContext>
 8008dc4:	f04f 0000 	mov.w	r0, #0
 8008dc8:	f380 8811 	msr	BASEPRI, r0
 8008dcc:	bc09      	pop	{r0, r3}
 8008dce:	6819      	ldr	r1, [r3, #0]
 8008dd0:	6808      	ldr	r0, [r1, #0]
 8008dd2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008dd6:	f01e 0f10 	tst.w	lr, #16
 8008dda:	bf08      	it	eq
 8008ddc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8008de0:	f380 8809 	msr	PSP, r0
 8008de4:	f3bf 8f6f 	isb	sy
 8008de8:	4770      	bx	lr
 8008dea:	bf00      	nop
 8008dec:	f3af 8000 	nop.w

08008df0 <pxCurrentTCBConst>:
 8008df0:	20004ee0 	.word	0x20004ee0
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8008df4:	bf00      	nop
 8008df6:	bf00      	nop

08008df8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8008df8:	b580      	push	{r7, lr}
 8008dfa:	b082      	sub	sp, #8
 8008dfc:	af00      	add	r7, sp, #0
	__asm volatile
 8008dfe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008e02:	f383 8811 	msr	BASEPRI, r3
 8008e06:	f3bf 8f6f 	isb	sy
 8008e0a:	f3bf 8f4f 	dsb	sy
 8008e0e:	607b      	str	r3, [r7, #4]
}
 8008e10:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8008e12:	f7fe fea5 	bl	8007b60 <xTaskIncrementTick>
 8008e16:	4603      	mov	r3, r0
 8008e18:	2b00      	cmp	r3, #0
 8008e1a:	d003      	beq.n	8008e24 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8008e1c:	4b06      	ldr	r3, [pc, #24]	@ (8008e38 <xPortSysTickHandler+0x40>)
 8008e1e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008e22:	601a      	str	r2, [r3, #0]
 8008e24:	2300      	movs	r3, #0
 8008e26:	603b      	str	r3, [r7, #0]
	__asm volatile
 8008e28:	683b      	ldr	r3, [r7, #0]
 8008e2a:	f383 8811 	msr	BASEPRI, r3
}
 8008e2e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8008e30:	bf00      	nop
 8008e32:	3708      	adds	r7, #8
 8008e34:	46bd      	mov	sp, r7
 8008e36:	bd80      	pop	{r7, pc}
 8008e38:	e000ed04 	.word	0xe000ed04

08008e3c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8008e3c:	b480      	push	{r7}
 8008e3e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8008e40:	4b0b      	ldr	r3, [pc, #44]	@ (8008e70 <vPortSetupTimerInterrupt+0x34>)
 8008e42:	2200      	movs	r2, #0
 8008e44:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8008e46:	4b0b      	ldr	r3, [pc, #44]	@ (8008e74 <vPortSetupTimerInterrupt+0x38>)
 8008e48:	2200      	movs	r2, #0
 8008e4a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8008e4c:	4b0a      	ldr	r3, [pc, #40]	@ (8008e78 <vPortSetupTimerInterrupt+0x3c>)
 8008e4e:	681b      	ldr	r3, [r3, #0]
 8008e50:	4a0a      	ldr	r2, [pc, #40]	@ (8008e7c <vPortSetupTimerInterrupt+0x40>)
 8008e52:	fba2 2303 	umull	r2, r3, r2, r3
 8008e56:	099b      	lsrs	r3, r3, #6
 8008e58:	4a09      	ldr	r2, [pc, #36]	@ (8008e80 <vPortSetupTimerInterrupt+0x44>)
 8008e5a:	3b01      	subs	r3, #1
 8008e5c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8008e5e:	4b04      	ldr	r3, [pc, #16]	@ (8008e70 <vPortSetupTimerInterrupt+0x34>)
 8008e60:	2207      	movs	r2, #7
 8008e62:	601a      	str	r2, [r3, #0]
}
 8008e64:	bf00      	nop
 8008e66:	46bd      	mov	sp, r7
 8008e68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e6c:	4770      	bx	lr
 8008e6e:	bf00      	nop
 8008e70:	e000e010 	.word	0xe000e010
 8008e74:	e000e018 	.word	0xe000e018
 8008e78:	20000004 	.word	0x20000004
 8008e7c:	10624dd3 	.word	0x10624dd3
 8008e80:	e000e014 	.word	0xe000e014

08008e84 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8008e84:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8008e94 <vPortEnableVFP+0x10>
 8008e88:	6801      	ldr	r1, [r0, #0]
 8008e8a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8008e8e:	6001      	str	r1, [r0, #0]
 8008e90:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8008e92:	bf00      	nop
 8008e94:	e000ed88 	.word	0xe000ed88

08008e98 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8008e98:	b480      	push	{r7}
 8008e9a:	b085      	sub	sp, #20
 8008e9c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8008e9e:	f3ef 8305 	mrs	r3, IPSR
 8008ea2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8008ea4:	68fb      	ldr	r3, [r7, #12]
 8008ea6:	2b0f      	cmp	r3, #15
 8008ea8:	d915      	bls.n	8008ed6 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8008eaa:	4a18      	ldr	r2, [pc, #96]	@ (8008f0c <vPortValidateInterruptPriority+0x74>)
 8008eac:	68fb      	ldr	r3, [r7, #12]
 8008eae:	4413      	add	r3, r2
 8008eb0:	781b      	ldrb	r3, [r3, #0]
 8008eb2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8008eb4:	4b16      	ldr	r3, [pc, #88]	@ (8008f10 <vPortValidateInterruptPriority+0x78>)
 8008eb6:	781b      	ldrb	r3, [r3, #0]
 8008eb8:	7afa      	ldrb	r2, [r7, #11]
 8008eba:	429a      	cmp	r2, r3
 8008ebc:	d20b      	bcs.n	8008ed6 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 8008ebe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008ec2:	f383 8811 	msr	BASEPRI, r3
 8008ec6:	f3bf 8f6f 	isb	sy
 8008eca:	f3bf 8f4f 	dsb	sy
 8008ece:	607b      	str	r3, [r7, #4]
}
 8008ed0:	bf00      	nop
 8008ed2:	bf00      	nop
 8008ed4:	e7fd      	b.n	8008ed2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8008ed6:	4b0f      	ldr	r3, [pc, #60]	@ (8008f14 <vPortValidateInterruptPriority+0x7c>)
 8008ed8:	681b      	ldr	r3, [r3, #0]
 8008eda:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8008ede:	4b0e      	ldr	r3, [pc, #56]	@ (8008f18 <vPortValidateInterruptPriority+0x80>)
 8008ee0:	681b      	ldr	r3, [r3, #0]
 8008ee2:	429a      	cmp	r2, r3
 8008ee4:	d90b      	bls.n	8008efe <vPortValidateInterruptPriority+0x66>
	__asm volatile
 8008ee6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008eea:	f383 8811 	msr	BASEPRI, r3
 8008eee:	f3bf 8f6f 	isb	sy
 8008ef2:	f3bf 8f4f 	dsb	sy
 8008ef6:	603b      	str	r3, [r7, #0]
}
 8008ef8:	bf00      	nop
 8008efa:	bf00      	nop
 8008efc:	e7fd      	b.n	8008efa <vPortValidateInterruptPriority+0x62>
	}
 8008efe:	bf00      	nop
 8008f00:	3714      	adds	r7, #20
 8008f02:	46bd      	mov	sp, r7
 8008f04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f08:	4770      	bx	lr
 8008f0a:	bf00      	nop
 8008f0c:	e000e3f0 	.word	0xe000e3f0
 8008f10:	2000550c 	.word	0x2000550c
 8008f14:	e000ed0c 	.word	0xe000ed0c
 8008f18:	20005510 	.word	0x20005510

08008f1c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8008f1c:	b580      	push	{r7, lr}
 8008f1e:	b08a      	sub	sp, #40	@ 0x28
 8008f20:	af00      	add	r7, sp, #0
 8008f22:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8008f24:	2300      	movs	r3, #0
 8008f26:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8008f28:	f7fe fd5e 	bl	80079e8 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8008f2c:	4b5c      	ldr	r3, [pc, #368]	@ (80090a0 <pvPortMalloc+0x184>)
 8008f2e:	681b      	ldr	r3, [r3, #0]
 8008f30:	2b00      	cmp	r3, #0
 8008f32:	d101      	bne.n	8008f38 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8008f34:	f000 f924 	bl	8009180 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8008f38:	4b5a      	ldr	r3, [pc, #360]	@ (80090a4 <pvPortMalloc+0x188>)
 8008f3a:	681a      	ldr	r2, [r3, #0]
 8008f3c:	687b      	ldr	r3, [r7, #4]
 8008f3e:	4013      	ands	r3, r2
 8008f40:	2b00      	cmp	r3, #0
 8008f42:	f040 8095 	bne.w	8009070 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8008f46:	687b      	ldr	r3, [r7, #4]
 8008f48:	2b00      	cmp	r3, #0
 8008f4a:	d01e      	beq.n	8008f8a <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 8008f4c:	2208      	movs	r2, #8
 8008f4e:	687b      	ldr	r3, [r7, #4]
 8008f50:	4413      	add	r3, r2
 8008f52:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8008f54:	687b      	ldr	r3, [r7, #4]
 8008f56:	f003 0307 	and.w	r3, r3, #7
 8008f5a:	2b00      	cmp	r3, #0
 8008f5c:	d015      	beq.n	8008f8a <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8008f5e:	687b      	ldr	r3, [r7, #4]
 8008f60:	f023 0307 	bic.w	r3, r3, #7
 8008f64:	3308      	adds	r3, #8
 8008f66:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8008f68:	687b      	ldr	r3, [r7, #4]
 8008f6a:	f003 0307 	and.w	r3, r3, #7
 8008f6e:	2b00      	cmp	r3, #0
 8008f70:	d00b      	beq.n	8008f8a <pvPortMalloc+0x6e>
	__asm volatile
 8008f72:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008f76:	f383 8811 	msr	BASEPRI, r3
 8008f7a:	f3bf 8f6f 	isb	sy
 8008f7e:	f3bf 8f4f 	dsb	sy
 8008f82:	617b      	str	r3, [r7, #20]
}
 8008f84:	bf00      	nop
 8008f86:	bf00      	nop
 8008f88:	e7fd      	b.n	8008f86 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8008f8a:	687b      	ldr	r3, [r7, #4]
 8008f8c:	2b00      	cmp	r3, #0
 8008f8e:	d06f      	beq.n	8009070 <pvPortMalloc+0x154>
 8008f90:	4b45      	ldr	r3, [pc, #276]	@ (80090a8 <pvPortMalloc+0x18c>)
 8008f92:	681b      	ldr	r3, [r3, #0]
 8008f94:	687a      	ldr	r2, [r7, #4]
 8008f96:	429a      	cmp	r2, r3
 8008f98:	d86a      	bhi.n	8009070 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8008f9a:	4b44      	ldr	r3, [pc, #272]	@ (80090ac <pvPortMalloc+0x190>)
 8008f9c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8008f9e:	4b43      	ldr	r3, [pc, #268]	@ (80090ac <pvPortMalloc+0x190>)
 8008fa0:	681b      	ldr	r3, [r3, #0]
 8008fa2:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8008fa4:	e004      	b.n	8008fb0 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8008fa6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008fa8:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8008faa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008fac:	681b      	ldr	r3, [r3, #0]
 8008fae:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8008fb0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008fb2:	685b      	ldr	r3, [r3, #4]
 8008fb4:	687a      	ldr	r2, [r7, #4]
 8008fb6:	429a      	cmp	r2, r3
 8008fb8:	d903      	bls.n	8008fc2 <pvPortMalloc+0xa6>
 8008fba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008fbc:	681b      	ldr	r3, [r3, #0]
 8008fbe:	2b00      	cmp	r3, #0
 8008fc0:	d1f1      	bne.n	8008fa6 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8008fc2:	4b37      	ldr	r3, [pc, #220]	@ (80090a0 <pvPortMalloc+0x184>)
 8008fc4:	681b      	ldr	r3, [r3, #0]
 8008fc6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008fc8:	429a      	cmp	r2, r3
 8008fca:	d051      	beq.n	8009070 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8008fcc:	6a3b      	ldr	r3, [r7, #32]
 8008fce:	681b      	ldr	r3, [r3, #0]
 8008fd0:	2208      	movs	r2, #8
 8008fd2:	4413      	add	r3, r2
 8008fd4:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8008fd6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008fd8:	681a      	ldr	r2, [r3, #0]
 8008fda:	6a3b      	ldr	r3, [r7, #32]
 8008fdc:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8008fde:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008fe0:	685a      	ldr	r2, [r3, #4]
 8008fe2:	687b      	ldr	r3, [r7, #4]
 8008fe4:	1ad2      	subs	r2, r2, r3
 8008fe6:	2308      	movs	r3, #8
 8008fe8:	005b      	lsls	r3, r3, #1
 8008fea:	429a      	cmp	r2, r3
 8008fec:	d920      	bls.n	8009030 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8008fee:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008ff0:	687b      	ldr	r3, [r7, #4]
 8008ff2:	4413      	add	r3, r2
 8008ff4:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8008ff6:	69bb      	ldr	r3, [r7, #24]
 8008ff8:	f003 0307 	and.w	r3, r3, #7
 8008ffc:	2b00      	cmp	r3, #0
 8008ffe:	d00b      	beq.n	8009018 <pvPortMalloc+0xfc>
	__asm volatile
 8009000:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009004:	f383 8811 	msr	BASEPRI, r3
 8009008:	f3bf 8f6f 	isb	sy
 800900c:	f3bf 8f4f 	dsb	sy
 8009010:	613b      	str	r3, [r7, #16]
}
 8009012:	bf00      	nop
 8009014:	bf00      	nop
 8009016:	e7fd      	b.n	8009014 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8009018:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800901a:	685a      	ldr	r2, [r3, #4]
 800901c:	687b      	ldr	r3, [r7, #4]
 800901e:	1ad2      	subs	r2, r2, r3
 8009020:	69bb      	ldr	r3, [r7, #24]
 8009022:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8009024:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009026:	687a      	ldr	r2, [r7, #4]
 8009028:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800902a:	69b8      	ldr	r0, [r7, #24]
 800902c:	f000 f90a 	bl	8009244 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8009030:	4b1d      	ldr	r3, [pc, #116]	@ (80090a8 <pvPortMalloc+0x18c>)
 8009032:	681a      	ldr	r2, [r3, #0]
 8009034:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009036:	685b      	ldr	r3, [r3, #4]
 8009038:	1ad3      	subs	r3, r2, r3
 800903a:	4a1b      	ldr	r2, [pc, #108]	@ (80090a8 <pvPortMalloc+0x18c>)
 800903c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800903e:	4b1a      	ldr	r3, [pc, #104]	@ (80090a8 <pvPortMalloc+0x18c>)
 8009040:	681a      	ldr	r2, [r3, #0]
 8009042:	4b1b      	ldr	r3, [pc, #108]	@ (80090b0 <pvPortMalloc+0x194>)
 8009044:	681b      	ldr	r3, [r3, #0]
 8009046:	429a      	cmp	r2, r3
 8009048:	d203      	bcs.n	8009052 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800904a:	4b17      	ldr	r3, [pc, #92]	@ (80090a8 <pvPortMalloc+0x18c>)
 800904c:	681b      	ldr	r3, [r3, #0]
 800904e:	4a18      	ldr	r2, [pc, #96]	@ (80090b0 <pvPortMalloc+0x194>)
 8009050:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8009052:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009054:	685a      	ldr	r2, [r3, #4]
 8009056:	4b13      	ldr	r3, [pc, #76]	@ (80090a4 <pvPortMalloc+0x188>)
 8009058:	681b      	ldr	r3, [r3, #0]
 800905a:	431a      	orrs	r2, r3
 800905c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800905e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8009060:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009062:	2200      	movs	r2, #0
 8009064:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8009066:	4b13      	ldr	r3, [pc, #76]	@ (80090b4 <pvPortMalloc+0x198>)
 8009068:	681b      	ldr	r3, [r3, #0]
 800906a:	3301      	adds	r3, #1
 800906c:	4a11      	ldr	r2, [pc, #68]	@ (80090b4 <pvPortMalloc+0x198>)
 800906e:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8009070:	f7fe fcc8 	bl	8007a04 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8009074:	69fb      	ldr	r3, [r7, #28]
 8009076:	f003 0307 	and.w	r3, r3, #7
 800907a:	2b00      	cmp	r3, #0
 800907c:	d00b      	beq.n	8009096 <pvPortMalloc+0x17a>
	__asm volatile
 800907e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009082:	f383 8811 	msr	BASEPRI, r3
 8009086:	f3bf 8f6f 	isb	sy
 800908a:	f3bf 8f4f 	dsb	sy
 800908e:	60fb      	str	r3, [r7, #12]
}
 8009090:	bf00      	nop
 8009092:	bf00      	nop
 8009094:	e7fd      	b.n	8009092 <pvPortMalloc+0x176>
	return pvReturn;
 8009096:	69fb      	ldr	r3, [r7, #28]
}
 8009098:	4618      	mov	r0, r3
 800909a:	3728      	adds	r7, #40	@ 0x28
 800909c:	46bd      	mov	sp, r7
 800909e:	bd80      	pop	{r7, pc}
 80090a0:	2000911c 	.word	0x2000911c
 80090a4:	20009130 	.word	0x20009130
 80090a8:	20009120 	.word	0x20009120
 80090ac:	20009114 	.word	0x20009114
 80090b0:	20009124 	.word	0x20009124
 80090b4:	20009128 	.word	0x20009128

080090b8 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80090b8:	b580      	push	{r7, lr}
 80090ba:	b086      	sub	sp, #24
 80090bc:	af00      	add	r7, sp, #0
 80090be:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80090c0:	687b      	ldr	r3, [r7, #4]
 80090c2:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80090c4:	687b      	ldr	r3, [r7, #4]
 80090c6:	2b00      	cmp	r3, #0
 80090c8:	d04f      	beq.n	800916a <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80090ca:	2308      	movs	r3, #8
 80090cc:	425b      	negs	r3, r3
 80090ce:	697a      	ldr	r2, [r7, #20]
 80090d0:	4413      	add	r3, r2
 80090d2:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80090d4:	697b      	ldr	r3, [r7, #20]
 80090d6:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80090d8:	693b      	ldr	r3, [r7, #16]
 80090da:	685a      	ldr	r2, [r3, #4]
 80090dc:	4b25      	ldr	r3, [pc, #148]	@ (8009174 <vPortFree+0xbc>)
 80090de:	681b      	ldr	r3, [r3, #0]
 80090e0:	4013      	ands	r3, r2
 80090e2:	2b00      	cmp	r3, #0
 80090e4:	d10b      	bne.n	80090fe <vPortFree+0x46>
	__asm volatile
 80090e6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80090ea:	f383 8811 	msr	BASEPRI, r3
 80090ee:	f3bf 8f6f 	isb	sy
 80090f2:	f3bf 8f4f 	dsb	sy
 80090f6:	60fb      	str	r3, [r7, #12]
}
 80090f8:	bf00      	nop
 80090fa:	bf00      	nop
 80090fc:	e7fd      	b.n	80090fa <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80090fe:	693b      	ldr	r3, [r7, #16]
 8009100:	681b      	ldr	r3, [r3, #0]
 8009102:	2b00      	cmp	r3, #0
 8009104:	d00b      	beq.n	800911e <vPortFree+0x66>
	__asm volatile
 8009106:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800910a:	f383 8811 	msr	BASEPRI, r3
 800910e:	f3bf 8f6f 	isb	sy
 8009112:	f3bf 8f4f 	dsb	sy
 8009116:	60bb      	str	r3, [r7, #8]
}
 8009118:	bf00      	nop
 800911a:	bf00      	nop
 800911c:	e7fd      	b.n	800911a <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800911e:	693b      	ldr	r3, [r7, #16]
 8009120:	685a      	ldr	r2, [r3, #4]
 8009122:	4b14      	ldr	r3, [pc, #80]	@ (8009174 <vPortFree+0xbc>)
 8009124:	681b      	ldr	r3, [r3, #0]
 8009126:	4013      	ands	r3, r2
 8009128:	2b00      	cmp	r3, #0
 800912a:	d01e      	beq.n	800916a <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800912c:	693b      	ldr	r3, [r7, #16]
 800912e:	681b      	ldr	r3, [r3, #0]
 8009130:	2b00      	cmp	r3, #0
 8009132:	d11a      	bne.n	800916a <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8009134:	693b      	ldr	r3, [r7, #16]
 8009136:	685a      	ldr	r2, [r3, #4]
 8009138:	4b0e      	ldr	r3, [pc, #56]	@ (8009174 <vPortFree+0xbc>)
 800913a:	681b      	ldr	r3, [r3, #0]
 800913c:	43db      	mvns	r3, r3
 800913e:	401a      	ands	r2, r3
 8009140:	693b      	ldr	r3, [r7, #16]
 8009142:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8009144:	f7fe fc50 	bl	80079e8 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8009148:	693b      	ldr	r3, [r7, #16]
 800914a:	685a      	ldr	r2, [r3, #4]
 800914c:	4b0a      	ldr	r3, [pc, #40]	@ (8009178 <vPortFree+0xc0>)
 800914e:	681b      	ldr	r3, [r3, #0]
 8009150:	4413      	add	r3, r2
 8009152:	4a09      	ldr	r2, [pc, #36]	@ (8009178 <vPortFree+0xc0>)
 8009154:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8009156:	6938      	ldr	r0, [r7, #16]
 8009158:	f000 f874 	bl	8009244 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800915c:	4b07      	ldr	r3, [pc, #28]	@ (800917c <vPortFree+0xc4>)
 800915e:	681b      	ldr	r3, [r3, #0]
 8009160:	3301      	adds	r3, #1
 8009162:	4a06      	ldr	r2, [pc, #24]	@ (800917c <vPortFree+0xc4>)
 8009164:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8009166:	f7fe fc4d 	bl	8007a04 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800916a:	bf00      	nop
 800916c:	3718      	adds	r7, #24
 800916e:	46bd      	mov	sp, r7
 8009170:	bd80      	pop	{r7, pc}
 8009172:	bf00      	nop
 8009174:	20009130 	.word	0x20009130
 8009178:	20009120 	.word	0x20009120
 800917c:	2000912c 	.word	0x2000912c

08009180 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8009180:	b480      	push	{r7}
 8009182:	b085      	sub	sp, #20
 8009184:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8009186:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 800918a:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800918c:	4b27      	ldr	r3, [pc, #156]	@ (800922c <prvHeapInit+0xac>)
 800918e:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8009190:	68fb      	ldr	r3, [r7, #12]
 8009192:	f003 0307 	and.w	r3, r3, #7
 8009196:	2b00      	cmp	r3, #0
 8009198:	d00c      	beq.n	80091b4 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800919a:	68fb      	ldr	r3, [r7, #12]
 800919c:	3307      	adds	r3, #7
 800919e:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80091a0:	68fb      	ldr	r3, [r7, #12]
 80091a2:	f023 0307 	bic.w	r3, r3, #7
 80091a6:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80091a8:	68ba      	ldr	r2, [r7, #8]
 80091aa:	68fb      	ldr	r3, [r7, #12]
 80091ac:	1ad3      	subs	r3, r2, r3
 80091ae:	4a1f      	ldr	r2, [pc, #124]	@ (800922c <prvHeapInit+0xac>)
 80091b0:	4413      	add	r3, r2
 80091b2:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80091b4:	68fb      	ldr	r3, [r7, #12]
 80091b6:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80091b8:	4a1d      	ldr	r2, [pc, #116]	@ (8009230 <prvHeapInit+0xb0>)
 80091ba:	687b      	ldr	r3, [r7, #4]
 80091bc:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80091be:	4b1c      	ldr	r3, [pc, #112]	@ (8009230 <prvHeapInit+0xb0>)
 80091c0:	2200      	movs	r2, #0
 80091c2:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80091c4:	687b      	ldr	r3, [r7, #4]
 80091c6:	68ba      	ldr	r2, [r7, #8]
 80091c8:	4413      	add	r3, r2
 80091ca:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80091cc:	2208      	movs	r2, #8
 80091ce:	68fb      	ldr	r3, [r7, #12]
 80091d0:	1a9b      	subs	r3, r3, r2
 80091d2:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80091d4:	68fb      	ldr	r3, [r7, #12]
 80091d6:	f023 0307 	bic.w	r3, r3, #7
 80091da:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80091dc:	68fb      	ldr	r3, [r7, #12]
 80091de:	4a15      	ldr	r2, [pc, #84]	@ (8009234 <prvHeapInit+0xb4>)
 80091e0:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80091e2:	4b14      	ldr	r3, [pc, #80]	@ (8009234 <prvHeapInit+0xb4>)
 80091e4:	681b      	ldr	r3, [r3, #0]
 80091e6:	2200      	movs	r2, #0
 80091e8:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80091ea:	4b12      	ldr	r3, [pc, #72]	@ (8009234 <prvHeapInit+0xb4>)
 80091ec:	681b      	ldr	r3, [r3, #0]
 80091ee:	2200      	movs	r2, #0
 80091f0:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80091f2:	687b      	ldr	r3, [r7, #4]
 80091f4:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80091f6:	683b      	ldr	r3, [r7, #0]
 80091f8:	68fa      	ldr	r2, [r7, #12]
 80091fa:	1ad2      	subs	r2, r2, r3
 80091fc:	683b      	ldr	r3, [r7, #0]
 80091fe:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8009200:	4b0c      	ldr	r3, [pc, #48]	@ (8009234 <prvHeapInit+0xb4>)
 8009202:	681a      	ldr	r2, [r3, #0]
 8009204:	683b      	ldr	r3, [r7, #0]
 8009206:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8009208:	683b      	ldr	r3, [r7, #0]
 800920a:	685b      	ldr	r3, [r3, #4]
 800920c:	4a0a      	ldr	r2, [pc, #40]	@ (8009238 <prvHeapInit+0xb8>)
 800920e:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8009210:	683b      	ldr	r3, [r7, #0]
 8009212:	685b      	ldr	r3, [r3, #4]
 8009214:	4a09      	ldr	r2, [pc, #36]	@ (800923c <prvHeapInit+0xbc>)
 8009216:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8009218:	4b09      	ldr	r3, [pc, #36]	@ (8009240 <prvHeapInit+0xc0>)
 800921a:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800921e:	601a      	str	r2, [r3, #0]
}
 8009220:	bf00      	nop
 8009222:	3714      	adds	r7, #20
 8009224:	46bd      	mov	sp, r7
 8009226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800922a:	4770      	bx	lr
 800922c:	20005514 	.word	0x20005514
 8009230:	20009114 	.word	0x20009114
 8009234:	2000911c 	.word	0x2000911c
 8009238:	20009124 	.word	0x20009124
 800923c:	20009120 	.word	0x20009120
 8009240:	20009130 	.word	0x20009130

08009244 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8009244:	b480      	push	{r7}
 8009246:	b085      	sub	sp, #20
 8009248:	af00      	add	r7, sp, #0
 800924a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800924c:	4b28      	ldr	r3, [pc, #160]	@ (80092f0 <prvInsertBlockIntoFreeList+0xac>)
 800924e:	60fb      	str	r3, [r7, #12]
 8009250:	e002      	b.n	8009258 <prvInsertBlockIntoFreeList+0x14>
 8009252:	68fb      	ldr	r3, [r7, #12]
 8009254:	681b      	ldr	r3, [r3, #0]
 8009256:	60fb      	str	r3, [r7, #12]
 8009258:	68fb      	ldr	r3, [r7, #12]
 800925a:	681b      	ldr	r3, [r3, #0]
 800925c:	687a      	ldr	r2, [r7, #4]
 800925e:	429a      	cmp	r2, r3
 8009260:	d8f7      	bhi.n	8009252 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8009262:	68fb      	ldr	r3, [r7, #12]
 8009264:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8009266:	68fb      	ldr	r3, [r7, #12]
 8009268:	685b      	ldr	r3, [r3, #4]
 800926a:	68ba      	ldr	r2, [r7, #8]
 800926c:	4413      	add	r3, r2
 800926e:	687a      	ldr	r2, [r7, #4]
 8009270:	429a      	cmp	r2, r3
 8009272:	d108      	bne.n	8009286 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8009274:	68fb      	ldr	r3, [r7, #12]
 8009276:	685a      	ldr	r2, [r3, #4]
 8009278:	687b      	ldr	r3, [r7, #4]
 800927a:	685b      	ldr	r3, [r3, #4]
 800927c:	441a      	add	r2, r3
 800927e:	68fb      	ldr	r3, [r7, #12]
 8009280:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8009282:	68fb      	ldr	r3, [r7, #12]
 8009284:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8009286:	687b      	ldr	r3, [r7, #4]
 8009288:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800928a:	687b      	ldr	r3, [r7, #4]
 800928c:	685b      	ldr	r3, [r3, #4]
 800928e:	68ba      	ldr	r2, [r7, #8]
 8009290:	441a      	add	r2, r3
 8009292:	68fb      	ldr	r3, [r7, #12]
 8009294:	681b      	ldr	r3, [r3, #0]
 8009296:	429a      	cmp	r2, r3
 8009298:	d118      	bne.n	80092cc <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800929a:	68fb      	ldr	r3, [r7, #12]
 800929c:	681a      	ldr	r2, [r3, #0]
 800929e:	4b15      	ldr	r3, [pc, #84]	@ (80092f4 <prvInsertBlockIntoFreeList+0xb0>)
 80092a0:	681b      	ldr	r3, [r3, #0]
 80092a2:	429a      	cmp	r2, r3
 80092a4:	d00d      	beq.n	80092c2 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80092a6:	687b      	ldr	r3, [r7, #4]
 80092a8:	685a      	ldr	r2, [r3, #4]
 80092aa:	68fb      	ldr	r3, [r7, #12]
 80092ac:	681b      	ldr	r3, [r3, #0]
 80092ae:	685b      	ldr	r3, [r3, #4]
 80092b0:	441a      	add	r2, r3
 80092b2:	687b      	ldr	r3, [r7, #4]
 80092b4:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80092b6:	68fb      	ldr	r3, [r7, #12]
 80092b8:	681b      	ldr	r3, [r3, #0]
 80092ba:	681a      	ldr	r2, [r3, #0]
 80092bc:	687b      	ldr	r3, [r7, #4]
 80092be:	601a      	str	r2, [r3, #0]
 80092c0:	e008      	b.n	80092d4 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80092c2:	4b0c      	ldr	r3, [pc, #48]	@ (80092f4 <prvInsertBlockIntoFreeList+0xb0>)
 80092c4:	681a      	ldr	r2, [r3, #0]
 80092c6:	687b      	ldr	r3, [r7, #4]
 80092c8:	601a      	str	r2, [r3, #0]
 80092ca:	e003      	b.n	80092d4 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80092cc:	68fb      	ldr	r3, [r7, #12]
 80092ce:	681a      	ldr	r2, [r3, #0]
 80092d0:	687b      	ldr	r3, [r7, #4]
 80092d2:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80092d4:	68fa      	ldr	r2, [r7, #12]
 80092d6:	687b      	ldr	r3, [r7, #4]
 80092d8:	429a      	cmp	r2, r3
 80092da:	d002      	beq.n	80092e2 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80092dc:	68fb      	ldr	r3, [r7, #12]
 80092de:	687a      	ldr	r2, [r7, #4]
 80092e0:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80092e2:	bf00      	nop
 80092e4:	3714      	adds	r7, #20
 80092e6:	46bd      	mov	sp, r7
 80092e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092ec:	4770      	bx	lr
 80092ee:	bf00      	nop
 80092f0:	20009114 	.word	0x20009114
 80092f4:	2000911c 	.word	0x2000911c

080092f8 <rcl_get_zero_initialized_init_options>:
 80092f8:	2000      	movs	r0, #0
 80092fa:	4770      	bx	lr

080092fc <rcl_init_options_init>:
 80092fc:	b084      	sub	sp, #16
 80092fe:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009300:	b097      	sub	sp, #92	@ 0x5c
 8009302:	ae1d      	add	r6, sp, #116	@ 0x74
 8009304:	e886 000e 	stmia.w	r6, {r1, r2, r3}
 8009308:	2800      	cmp	r0, #0
 800930a:	d058      	beq.n	80093be <rcl_init_options_init+0xc2>
 800930c:	6803      	ldr	r3, [r0, #0]
 800930e:	4605      	mov	r5, r0
 8009310:	b133      	cbz	r3, 8009320 <rcl_init_options_init+0x24>
 8009312:	2464      	movs	r4, #100	@ 0x64
 8009314:	4620      	mov	r0, r4
 8009316:	b017      	add	sp, #92	@ 0x5c
 8009318:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 800931c:	b004      	add	sp, #16
 800931e:	4770      	bx	lr
 8009320:	4630      	mov	r0, r6
 8009322:	f000 ffe7 	bl	800a2f4 <rcutils_allocator_is_valid>
 8009326:	2800      	cmp	r0, #0
 8009328:	d049      	beq.n	80093be <rcl_init_options_init+0xc2>
 800932a:	46b4      	mov	ip, r6
 800932c:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8009330:	ac11      	add	r4, sp, #68	@ 0x44
 8009332:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8009334:	f8dc 3000 	ldr.w	r3, [ip]
 8009338:	6023      	str	r3, [r4, #0]
 800933a:	9921      	ldr	r1, [sp, #132]	@ 0x84
 800933c:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800933e:	2050      	movs	r0, #80	@ 0x50
 8009340:	4798      	blx	r3
 8009342:	4604      	mov	r4, r0
 8009344:	6028      	str	r0, [r5, #0]
 8009346:	2800      	cmp	r0, #0
 8009348:	d03b      	beq.n	80093c2 <rcl_init_options_init+0xc6>
 800934a:	f10d 0c44 	add.w	ip, sp, #68	@ 0x44
 800934e:	4686      	mov	lr, r0
 8009350:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8009354:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8009358:	f8dc 3000 	ldr.w	r3, [ip]
 800935c:	f8ce 3000 	str.w	r3, [lr]
 8009360:	a802      	add	r0, sp, #8
 8009362:	f001 f859 	bl	800a418 <rmw_get_zero_initialized_init_options>
 8009366:	f10d 0e08 	add.w	lr, sp, #8
 800936a:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800936e:	f104 0c18 	add.w	ip, r4, #24
 8009372:	682f      	ldr	r7, [r5, #0]
 8009374:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8009378:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800937c:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8009380:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8009384:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8009388:	e89e 0003 	ldmia.w	lr, {r0, r1}
 800938c:	ac20      	add	r4, sp, #128	@ 0x80
 800938e:	e88c 0003 	stmia.w	ip, {r0, r1}
 8009392:	e894 0003 	ldmia.w	r4, {r0, r1}
 8009396:	e88d 0003 	stmia.w	sp, {r0, r1}
 800939a:	e896 000e 	ldmia.w	r6, {r1, r2, r3}
 800939e:	f107 0018 	add.w	r0, r7, #24
 80093a2:	f001 f863 	bl	800a46c <rmw_init_options_init>
 80093a6:	4604      	mov	r4, r0
 80093a8:	2800      	cmp	r0, #0
 80093aa:	d0b3      	beq.n	8009314 <rcl_init_options_init+0x18>
 80093ac:	9921      	ldr	r1, [sp, #132]	@ 0x84
 80093ae:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 80093b0:	6828      	ldr	r0, [r5, #0]
 80093b2:	4798      	blx	r3
 80093b4:	4620      	mov	r0, r4
 80093b6:	f006 fc75 	bl	800fca4 <rcl_convert_rmw_ret_to_rcl_ret>
 80093ba:	4604      	mov	r4, r0
 80093bc:	e7aa      	b.n	8009314 <rcl_init_options_init+0x18>
 80093be:	240b      	movs	r4, #11
 80093c0:	e7a8      	b.n	8009314 <rcl_init_options_init+0x18>
 80093c2:	240a      	movs	r4, #10
 80093c4:	e7a6      	b.n	8009314 <rcl_init_options_init+0x18>
 80093c6:	bf00      	nop

080093c8 <rcl_init_options_fini>:
 80093c8:	b530      	push	{r4, r5, lr}
 80093ca:	b087      	sub	sp, #28
 80093cc:	b1f0      	cbz	r0, 800940c <rcl_init_options_fini+0x44>
 80093ce:	6803      	ldr	r3, [r0, #0]
 80093d0:	4604      	mov	r4, r0
 80093d2:	b1db      	cbz	r3, 800940c <rcl_init_options_fini+0x44>
 80093d4:	469c      	mov	ip, r3
 80093d6:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 80093da:	f10d 0e04 	add.w	lr, sp, #4
 80093de:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 80093e2:	f8dc 3000 	ldr.w	r3, [ip]
 80093e6:	f8ce 3000 	str.w	r3, [lr]
 80093ea:	a801      	add	r0, sp, #4
 80093ec:	f000 ff82 	bl	800a2f4 <rcutils_allocator_is_valid>
 80093f0:	b160      	cbz	r0, 800940c <rcl_init_options_fini+0x44>
 80093f2:	6820      	ldr	r0, [r4, #0]
 80093f4:	3018      	adds	r0, #24
 80093f6:	f001 f8e9 	bl	800a5cc <rmw_init_options_fini>
 80093fa:	4605      	mov	r5, r0
 80093fc:	b950      	cbnz	r0, 8009414 <rcl_init_options_fini+0x4c>
 80093fe:	6820      	ldr	r0, [r4, #0]
 8009400:	9b02      	ldr	r3, [sp, #8]
 8009402:	9905      	ldr	r1, [sp, #20]
 8009404:	4798      	blx	r3
 8009406:	4628      	mov	r0, r5
 8009408:	b007      	add	sp, #28
 800940a:	bd30      	pop	{r4, r5, pc}
 800940c:	250b      	movs	r5, #11
 800940e:	4628      	mov	r0, r5
 8009410:	b007      	add	sp, #28
 8009412:	bd30      	pop	{r4, r5, pc}
 8009414:	f006 fc46 	bl	800fca4 <rcl_convert_rmw_ret_to_rcl_ret>
 8009418:	4605      	mov	r5, r0
 800941a:	e7f8      	b.n	800940e <rcl_init_options_fini+0x46>

0800941c <rcl_init_options_copy>:
 800941c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009420:	b094      	sub	sp, #80	@ 0x50
 8009422:	2800      	cmp	r0, #0
 8009424:	d058      	beq.n	80094d8 <rcl_init_options_copy+0xbc>
 8009426:	4604      	mov	r4, r0
 8009428:	6800      	ldr	r0, [r0, #0]
 800942a:	2800      	cmp	r0, #0
 800942c:	d054      	beq.n	80094d8 <rcl_init_options_copy+0xbc>
 800942e:	460e      	mov	r6, r1
 8009430:	f000 ff60 	bl	800a2f4 <rcutils_allocator_is_valid>
 8009434:	2800      	cmp	r0, #0
 8009436:	d04f      	beq.n	80094d8 <rcl_init_options_copy+0xbc>
 8009438:	2e00      	cmp	r6, #0
 800943a:	d04d      	beq.n	80094d8 <rcl_init_options_copy+0xbc>
 800943c:	6833      	ldr	r3, [r6, #0]
 800943e:	b123      	cbz	r3, 800944a <rcl_init_options_copy+0x2e>
 8009440:	2464      	movs	r4, #100	@ 0x64
 8009442:	4620      	mov	r0, r4
 8009444:	b014      	add	sp, #80	@ 0x50
 8009446:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800944a:	6827      	ldr	r7, [r4, #0]
 800944c:	46bc      	mov	ip, r7
 800944e:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8009452:	ad0f      	add	r5, sp, #60	@ 0x3c
 8009454:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8009456:	f8dc 3000 	ldr.w	r3, [ip]
 800945a:	f8d7 8000 	ldr.w	r8, [r7]
 800945e:	602b      	str	r3, [r5, #0]
 8009460:	4619      	mov	r1, r3
 8009462:	2050      	movs	r0, #80	@ 0x50
 8009464:	47c0      	blx	r8
 8009466:	4605      	mov	r5, r0
 8009468:	6030      	str	r0, [r6, #0]
 800946a:	b3d0      	cbz	r0, 80094e2 <rcl_init_options_copy+0xc6>
 800946c:	f10d 0c3c 	add.w	ip, sp, #60	@ 0x3c
 8009470:	4686      	mov	lr, r0
 8009472:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8009476:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800947a:	f8dc 3000 	ldr.w	r3, [ip]
 800947e:	f8ce 3000 	str.w	r3, [lr]
 8009482:	4668      	mov	r0, sp
 8009484:	f000 ffc8 	bl	800a418 <rmw_get_zero_initialized_init_options>
 8009488:	46ee      	mov	lr, sp
 800948a:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800948e:	f105 0c18 	add.w	ip, r5, #24
 8009492:	6824      	ldr	r4, [r4, #0]
 8009494:	6835      	ldr	r5, [r6, #0]
 8009496:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800949a:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800949e:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80094a2:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 80094a6:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80094aa:	e89e 0003 	ldmia.w	lr, {r0, r1}
 80094ae:	e88c 0003 	stmia.w	ip, {r0, r1}
 80094b2:	f104 0018 	add.w	r0, r4, #24
 80094b6:	f105 0118 	add.w	r1, r5, #24
 80094ba:	f001 f83f 	bl	800a53c <rmw_init_options_copy>
 80094be:	4604      	mov	r4, r0
 80094c0:	2800      	cmp	r0, #0
 80094c2:	d0be      	beq.n	8009442 <rcl_init_options_copy+0x26>
 80094c4:	f000 ff24 	bl	800a310 <rcutils_get_error_string>
 80094c8:	f000 ff3a 	bl	800a340 <rcutils_reset_error>
 80094cc:	4630      	mov	r0, r6
 80094ce:	f7ff ff7b 	bl	80093c8 <rcl_init_options_fini>
 80094d2:	b140      	cbz	r0, 80094e6 <rcl_init_options_copy+0xca>
 80094d4:	4604      	mov	r4, r0
 80094d6:	e7b4      	b.n	8009442 <rcl_init_options_copy+0x26>
 80094d8:	240b      	movs	r4, #11
 80094da:	4620      	mov	r0, r4
 80094dc:	b014      	add	sp, #80	@ 0x50
 80094de:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80094e2:	240a      	movs	r4, #10
 80094e4:	e7ad      	b.n	8009442 <rcl_init_options_copy+0x26>
 80094e6:	4620      	mov	r0, r4
 80094e8:	b014      	add	sp, #80	@ 0x50
 80094ea:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80094ee:	f006 bbd9 	b.w	800fca4 <rcl_convert_rmw_ret_to_rcl_ret>
 80094f2:	bf00      	nop

080094f4 <rcl_init_options_set_domain_id>:
 80094f4:	b120      	cbz	r0, 8009500 <rcl_init_options_set_domain_id+0xc>
 80094f6:	6803      	ldr	r3, [r0, #0]
 80094f8:	b113      	cbz	r3, 8009500 <rcl_init_options_set_domain_id+0xc>
 80094fa:	6259      	str	r1, [r3, #36]	@ 0x24
 80094fc:	2000      	movs	r0, #0
 80094fe:	4770      	bx	lr
 8009500:	200b      	movs	r0, #11
 8009502:	4770      	bx	lr

08009504 <_rclc_check_for_new_data>:
 8009504:	2800      	cmp	r0, #0
 8009506:	d046      	beq.n	8009596 <_rclc_check_for_new_data+0x92>
 8009508:	b510      	push	{r4, lr}
 800950a:	7802      	ldrb	r2, [r0, #0]
 800950c:	b084      	sub	sp, #16
 800950e:	4603      	mov	r3, r0
 8009510:	2a0a      	cmp	r2, #10
 8009512:	d842      	bhi.n	800959a <_rclc_check_for_new_data+0x96>
 8009514:	e8df f002 	tbb	[pc, r2]
 8009518:	14181212 	.word	0x14181212
 800951c:	06060614 	.word	0x06060614
 8009520:	2e1a      	.short	0x2e1a
 8009522:	16          	.byte	0x16
 8009523:	00          	.byte	0x00
 8009524:	6a0a      	ldr	r2, [r1, #32]
 8009526:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8009528:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 800952c:	2000      	movs	r0, #0
 800952e:	1a12      	subs	r2, r2, r0
 8009530:	bf18      	it	ne
 8009532:	2201      	movne	r2, #1
 8009534:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39
 8009538:	b004      	add	sp, #16
 800953a:	bd10      	pop	{r4, pc}
 800953c:	680a      	ldr	r2, [r1, #0]
 800953e:	e7f2      	b.n	8009526 <_rclc_check_for_new_data+0x22>
 8009540:	698a      	ldr	r2, [r1, #24]
 8009542:	e7f0      	b.n	8009526 <_rclc_check_for_new_data+0x22>
 8009544:	688a      	ldr	r2, [r1, #8]
 8009546:	e7ee      	b.n	8009526 <_rclc_check_for_new_data+0x22>
 8009548:	690a      	ldr	r2, [r1, #16]
 800954a:	e7ec      	b.n	8009526 <_rclc_check_for_new_data+0x22>
 800954c:	685c      	ldr	r4, [r3, #4]
 800954e:	4608      	mov	r0, r1
 8009550:	f104 0244 	add.w	r2, r4, #68	@ 0x44
 8009554:	f104 0143 	add.w	r1, r4, #67	@ 0x43
 8009558:	f104 0342 	add.w	r3, r4, #66	@ 0x42
 800955c:	e9cd 2101 	strd	r2, r1, [sp, #4]
 8009560:	9300      	str	r3, [sp, #0]
 8009562:	f104 0240 	add.w	r2, r4, #64	@ 0x40
 8009566:	f104 0341 	add.w	r3, r4, #65	@ 0x41
 800956a:	f104 0110 	add.w	r1, r4, #16
 800956e:	f008 fbb3 	bl	8011cd8 <rcl_action_client_wait_set_get_entities_ready>
 8009572:	e7e1      	b.n	8009538 <_rclc_check_for_new_data+0x34>
 8009574:	685c      	ldr	r4, [r3, #4]
 8009576:	f104 0223 	add.w	r2, r4, #35	@ 0x23
 800957a:	f104 0322 	add.w	r3, r4, #34	@ 0x22
 800957e:	e9cd 3200 	strd	r3, r2, [sp]
 8009582:	4608      	mov	r0, r1
 8009584:	f104 0321 	add.w	r3, r4, #33	@ 0x21
 8009588:	f104 0220 	add.w	r2, r4, #32
 800958c:	f104 0110 	add.w	r1, r4, #16
 8009590:	f008 fdba 	bl	8012108 <rcl_action_server_wait_set_get_entities_ready>
 8009594:	e7d0      	b.n	8009538 <_rclc_check_for_new_data+0x34>
 8009596:	200b      	movs	r0, #11
 8009598:	4770      	bx	lr
 800959a:	2001      	movs	r0, #1
 800959c:	e7cc      	b.n	8009538 <_rclc_check_for_new_data+0x34>
 800959e:	bf00      	nop

080095a0 <_rclc_take_new_data>:
 80095a0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80095a2:	b09b      	sub	sp, #108	@ 0x6c
 80095a4:	2800      	cmp	r0, #0
 80095a6:	f000 8088 	beq.w	80096ba <_rclc_take_new_data+0x11a>
 80095aa:	7803      	ldrb	r3, [r0, #0]
 80095ac:	4604      	mov	r4, r0
 80095ae:	2b0a      	cmp	r3, #10
 80095b0:	f200 8167 	bhi.w	8009882 <_rclc_take_new_data+0x2e2>
 80095b4:	e8df f003 	tbb	[pc, r3]
 80095b8:	44152d2d 	.word	0x44152d2d
 80095bc:	19191944 	.word	0x19191944
 80095c0:	065a      	.short	0x065a
 80095c2:	15          	.byte	0x15
 80095c3:	00          	.byte	0x00
 80095c4:	6840      	ldr	r0, [r0, #4]
 80095c6:	f890 3020 	ldrb.w	r3, [r0, #32]
 80095ca:	2b00      	cmp	r3, #0
 80095cc:	f040 80b2 	bne.w	8009734 <_rclc_take_new_data+0x194>
 80095d0:	f890 3022 	ldrb.w	r3, [r0, #34]	@ 0x22
 80095d4:	2b00      	cmp	r3, #0
 80095d6:	f040 80e4 	bne.w	80097a2 <_rclc_take_new_data+0x202>
 80095da:	f890 3021 	ldrb.w	r3, [r0, #33]	@ 0x21
 80095de:	2b00      	cmp	r3, #0
 80095e0:	d16f      	bne.n	80096c2 <_rclc_take_new_data+0x122>
 80095e2:	2500      	movs	r5, #0
 80095e4:	4628      	mov	r0, r5
 80095e6:	b01b      	add	sp, #108	@ 0x6c
 80095e8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80095ea:	6b42      	ldr	r2, [r0, #52]	@ 0x34
 80095ec:	6a0b      	ldr	r3, [r1, #32]
 80095ee:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80095f2:	2b00      	cmp	r3, #0
 80095f4:	d0f5      	beq.n	80095e2 <_rclc_take_new_data+0x42>
 80095f6:	e9d0 0201 	ldrd	r0, r2, [r0, #4]
 80095fa:	f104 0110 	add.w	r1, r4, #16
 80095fe:	f007 f849 	bl	8010694 <rcl_take_request>
 8009602:	4605      	mov	r5, r0
 8009604:	2800      	cmp	r0, #0
 8009606:	d0ec      	beq.n	80095e2 <_rclc_take_new_data+0x42>
 8009608:	f240 2359 	movw	r3, #601	@ 0x259
 800960c:	4298      	cmp	r0, r3
 800960e:	d013      	beq.n	8009638 <_rclc_take_new_data+0x98>
 8009610:	e029      	b.n	8009666 <_rclc_take_new_data+0xc6>
 8009612:	6b42      	ldr	r2, [r0, #52]	@ 0x34
 8009614:	680b      	ldr	r3, [r1, #0]
 8009616:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800961a:	2b00      	cmp	r3, #0
 800961c:	d0e1      	beq.n	80095e2 <_rclc_take_new_data+0x42>
 800961e:	e9d0 0101 	ldrd	r0, r1, [r0, #4]
 8009622:	2300      	movs	r3, #0
 8009624:	aa0a      	add	r2, sp, #40	@ 0x28
 8009626:	f007 f973 	bl	8010910 <rcl_take>
 800962a:	4605      	mov	r5, r0
 800962c:	2800      	cmp	r0, #0
 800962e:	d0d9      	beq.n	80095e4 <_rclc_take_new_data+0x44>
 8009630:	f240 1391 	movw	r3, #401	@ 0x191
 8009634:	4298      	cmp	r0, r3
 8009636:	d116      	bne.n	8009666 <_rclc_take_new_data+0xc6>
 8009638:	2300      	movs	r3, #0
 800963a:	f884 3039 	strb.w	r3, [r4, #57]	@ 0x39
 800963e:	e7d1      	b.n	80095e4 <_rclc_take_new_data+0x44>
 8009640:	6b42      	ldr	r2, [r0, #52]	@ 0x34
 8009642:	698b      	ldr	r3, [r1, #24]
 8009644:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009648:	2b00      	cmp	r3, #0
 800964a:	d0ca      	beq.n	80095e2 <_rclc_take_new_data+0x42>
 800964c:	e9d0 0201 	ldrd	r0, r2, [r0, #4]
 8009650:	f104 0110 	add.w	r1, r4, #16
 8009654:	f006 fad4 	bl	800fc00 <rcl_take_response>
 8009658:	4605      	mov	r5, r0
 800965a:	2800      	cmp	r0, #0
 800965c:	d0c1      	beq.n	80095e2 <_rclc_take_new_data+0x42>
 800965e:	f240 13f5 	movw	r3, #501	@ 0x1f5
 8009662:	4298      	cmp	r0, r3
 8009664:	d0be      	beq.n	80095e4 <_rclc_take_new_data+0x44>
 8009666:	f000 fe6b 	bl	800a340 <rcutils_reset_error>
 800966a:	e7bb      	b.n	80095e4 <_rclc_take_new_data+0x44>
 800966c:	6840      	ldr	r0, [r0, #4]
 800966e:	f890 3042 	ldrb.w	r3, [r0, #66]	@ 0x42
 8009672:	2b00      	cmp	r3, #0
 8009674:	d17d      	bne.n	8009772 <_rclc_take_new_data+0x1d2>
 8009676:	69c3      	ldr	r3, [r0, #28]
 8009678:	b11b      	cbz	r3, 8009682 <_rclc_take_new_data+0xe2>
 800967a:	f890 3040 	ldrb.w	r3, [r0, #64]	@ 0x40
 800967e:	2b00      	cmp	r3, #0
 8009680:	d144      	bne.n	800970c <_rclc_take_new_data+0x16c>
 8009682:	f890 3044 	ldrb.w	r3, [r0, #68]	@ 0x44
 8009686:	2b00      	cmp	r3, #0
 8009688:	f040 80ac 	bne.w	80097e4 <_rclc_take_new_data+0x244>
 800968c:	f890 3043 	ldrb.w	r3, [r0, #67]	@ 0x43
 8009690:	2b00      	cmp	r3, #0
 8009692:	d0a6      	beq.n	80095e2 <_rclc_take_new_data+0x42>
 8009694:	6ac2      	ldr	r2, [r0, #44]	@ 0x2c
 8009696:	a90a      	add	r1, sp, #40	@ 0x28
 8009698:	3010      	adds	r0, #16
 800969a:	f008 f9f5 	bl	8011a88 <rcl_action_take_result_response>
 800969e:	4605      	mov	r5, r0
 80096a0:	2800      	cmp	r0, #0
 80096a2:	d1e0      	bne.n	8009666 <_rclc_take_new_data+0xc6>
 80096a4:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 80096a8:	6860      	ldr	r0, [r4, #4]
 80096aa:	f008 fe51 	bl	8012350 <rclc_action_find_handle_by_result_request_sequence_number>
 80096ae:	2800      	cmp	r0, #0
 80096b0:	d098      	beq.n	80095e4 <_rclc_take_new_data+0x44>
 80096b2:	2301      	movs	r3, #1
 80096b4:	f880 3023 	strb.w	r3, [r0, #35]	@ 0x23
 80096b8:	e794      	b.n	80095e4 <_rclc_take_new_data+0x44>
 80096ba:	250b      	movs	r5, #11
 80096bc:	4628      	mov	r0, r5
 80096be:	b01b      	add	sp, #108	@ 0x6c
 80096c0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80096c2:	ae04      	add	r6, sp, #16
 80096c4:	aa0a      	add	r2, sp, #40	@ 0x28
 80096c6:	3010      	adds	r0, #16
 80096c8:	4631      	mov	r1, r6
 80096ca:	f008 fc51 	bl	8011f70 <rcl_action_take_cancel_request>
 80096ce:	4605      	mov	r5, r0
 80096d0:	2800      	cmp	r0, #0
 80096d2:	d1c8      	bne.n	8009666 <_rclc_take_new_data+0xc6>
 80096d4:	6860      	ldr	r0, [r4, #4]
 80096d6:	a90a      	add	r1, sp, #40	@ 0x28
 80096d8:	f008 fdf8 	bl	80122cc <rclc_action_find_goal_handle_by_uuid>
 80096dc:	4607      	mov	r7, r0
 80096de:	2800      	cmp	r0, #0
 80096e0:	f000 80bb 	beq.w	800985a <_rclc_take_new_data+0x2ba>
 80096e4:	f990 0008 	ldrsb.w	r0, [r0, #8]
 80096e8:	2101      	movs	r1, #1
 80096ea:	f008 fd79 	bl	80121e0 <rcl_action_transition_goal_state>
 80096ee:	2803      	cmp	r0, #3
 80096f0:	4684      	mov	ip, r0
 80096f2:	f040 80a7 	bne.w	8009844 <_rclc_take_new_data+0x2a4>
 80096f6:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 80096f8:	f107 0458 	add.w	r4, r7, #88	@ 0x58
 80096fc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80096fe:	e896 0003 	ldmia.w	r6, {r0, r1}
 8009702:	e884 0003 	stmia.w	r4, {r0, r1}
 8009706:	f887 c008 	strb.w	ip, [r7, #8]
 800970a:	e76b      	b.n	80095e4 <_rclc_take_new_data+0x44>
 800970c:	6a81      	ldr	r1, [r0, #40]	@ 0x28
 800970e:	3010      	adds	r0, #16
 8009710:	f008 fa3a 	bl	8011b88 <rcl_action_take_feedback>
 8009714:	4605      	mov	r5, r0
 8009716:	2800      	cmp	r0, #0
 8009718:	d1a5      	bne.n	8009666 <_rclc_take_new_data+0xc6>
 800971a:	6860      	ldr	r0, [r4, #4]
 800971c:	6a81      	ldr	r1, [r0, #40]	@ 0x28
 800971e:	f008 fdd5 	bl	80122cc <rclc_action_find_goal_handle_by_uuid>
 8009722:	4603      	mov	r3, r0
 8009724:	2800      	cmp	r0, #0
 8009726:	f000 80a3 	beq.w	8009870 <_rclc_take_new_data+0x2d0>
 800972a:	2201      	movs	r2, #1
 800972c:	6860      	ldr	r0, [r4, #4]
 800972e:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22
 8009732:	e7a6      	b.n	8009682 <_rclc_take_new_data+0xe2>
 8009734:	f008 fda4 	bl	8012280 <rclc_action_take_goal_handle>
 8009738:	4606      	mov	r6, r0
 800973a:	6860      	ldr	r0, [r4, #4]
 800973c:	2e00      	cmp	r6, #0
 800973e:	f43f af47 	beq.w	80095d0 <_rclc_take_new_data+0x30>
 8009742:	6070      	str	r0, [r6, #4]
 8009744:	69f2      	ldr	r2, [r6, #28]
 8009746:	f106 0128 	add.w	r1, r6, #40	@ 0x28
 800974a:	3010      	adds	r0, #16
 800974c:	f008 fb58 	bl	8011e00 <rcl_action_take_goal_request>
 8009750:	4605      	mov	r5, r0
 8009752:	2800      	cmp	r0, #0
 8009754:	f040 808e 	bne.w	8009874 <_rclc_take_new_data+0x2d4>
 8009758:	69f7      	ldr	r7, [r6, #28]
 800975a:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 800975c:	7235      	strb	r5, [r6, #8]
 800975e:	f8c6 0009 	str.w	r0, [r6, #9]
 8009762:	f8c6 100d 	str.w	r1, [r6, #13]
 8009766:	6860      	ldr	r0, [r4, #4]
 8009768:	f8c6 2011 	str.w	r2, [r6, #17]
 800976c:	f8c6 3015 	str.w	r3, [r6, #21]
 8009770:	e72e      	b.n	80095d0 <_rclc_take_new_data+0x30>
 8009772:	aa04      	add	r2, sp, #16
 8009774:	a90a      	add	r1, sp, #40	@ 0x28
 8009776:	3010      	adds	r0, #16
 8009778:	f008 f90e 	bl	8011998 <rcl_action_take_goal_response>
 800977c:	4605      	mov	r5, r0
 800977e:	2800      	cmp	r0, #0
 8009780:	f47f af71 	bne.w	8009666 <_rclc_take_new_data+0xc6>
 8009784:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8009788:	6860      	ldr	r0, [r4, #4]
 800978a:	f008 fdcf 	bl	801232c <rclc_action_find_handle_by_goal_request_sequence_number>
 800978e:	b130      	cbz	r0, 800979e <_rclc_take_new_data+0x1fe>
 8009790:	f89d 3010 	ldrb.w	r3, [sp, #16]
 8009794:	f880 3021 	strb.w	r3, [r0, #33]	@ 0x21
 8009798:	2201      	movs	r2, #1
 800979a:	f880 2020 	strb.w	r2, [r0, #32]
 800979e:	6860      	ldr	r0, [r4, #4]
 80097a0:	e769      	b.n	8009676 <_rclc_take_new_data+0xd6>
 80097a2:	aa04      	add	r2, sp, #16
 80097a4:	3010      	adds	r0, #16
 80097a6:	a90a      	add	r1, sp, #40	@ 0x28
 80097a8:	f008 fba2 	bl	8011ef0 <rcl_action_take_result_request>
 80097ac:	4605      	mov	r5, r0
 80097ae:	2800      	cmp	r0, #0
 80097b0:	f47f af59 	bne.w	8009666 <_rclc_take_new_data+0xc6>
 80097b4:	6860      	ldr	r0, [r4, #4]
 80097b6:	a904      	add	r1, sp, #16
 80097b8:	f008 fd88 	bl	80122cc <rclc_action_find_goal_handle_by_uuid>
 80097bc:	4607      	mov	r7, r0
 80097be:	b160      	cbz	r0, 80097da <_rclc_take_new_data+0x23a>
 80097c0:	ad0a      	add	r5, sp, #40	@ 0x28
 80097c2:	f100 0640 	add.w	r6, r0, #64	@ 0x40
 80097c6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80097c8:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 80097ca:	e895 0003 	ldmia.w	r5, {r0, r1}
 80097ce:	f04f 0c02 	mov.w	ip, #2
 80097d2:	e886 0003 	stmia.w	r6, {r0, r1}
 80097d6:	f887 c008 	strb.w	ip, [r7, #8]
 80097da:	6860      	ldr	r0, [r4, #4]
 80097dc:	2300      	movs	r3, #0
 80097de:	f880 3022 	strb.w	r3, [r0, #34]	@ 0x22
 80097e2:	e6fa      	b.n	80095da <_rclc_take_new_data+0x3a>
 80097e4:	f100 0230 	add.w	r2, r0, #48	@ 0x30
 80097e8:	a90a      	add	r1, sp, #40	@ 0x28
 80097ea:	3010      	adds	r0, #16
 80097ec:	f008 f98c 	bl	8011b08 <rcl_action_take_cancel_response>
 80097f0:	4605      	mov	r5, r0
 80097f2:	2800      	cmp	r0, #0
 80097f4:	f47f af37 	bne.w	8009666 <_rclc_take_new_data+0xc6>
 80097f8:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 80097fc:	6860      	ldr	r0, [r4, #4]
 80097fe:	f008 fdb9 	bl	8012374 <rclc_action_find_handle_by_cancel_request_sequence_number>
 8009802:	4606      	mov	r6, r0
 8009804:	6860      	ldr	r0, [r4, #4]
 8009806:	2e00      	cmp	r6, #0
 8009808:	f43f af40 	beq.w	800968c <_rclc_take_new_data+0xec>
 800980c:	6b83      	ldr	r3, [r0, #56]	@ 0x38
 800980e:	2701      	movs	r7, #1
 8009810:	84b7      	strh	r7, [r6, #36]	@ 0x24
 8009812:	2b00      	cmp	r3, #0
 8009814:	f43f af3a 	beq.w	800968c <_rclc_take_new_data+0xec>
 8009818:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 800981a:	eb05 0145 	add.w	r1, r5, r5, lsl #1
 800981e:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
 8009822:	f008 fd53 	bl	80122cc <rclc_action_find_goal_handle_by_uuid>
 8009826:	b138      	cbz	r0, 8009838 <_rclc_take_new_data+0x298>
 8009828:	6860      	ldr	r0, [r4, #4]
 800982a:	6b83      	ldr	r3, [r0, #56]	@ 0x38
 800982c:	f886 7025 	strb.w	r7, [r6, #37]	@ 0x25
 8009830:	3501      	adds	r5, #1
 8009832:	42ab      	cmp	r3, r5
 8009834:	d8f0      	bhi.n	8009818 <_rclc_take_new_data+0x278>
 8009836:	e729      	b.n	800968c <_rclc_take_new_data+0xec>
 8009838:	6860      	ldr	r0, [r4, #4]
 800983a:	6b83      	ldr	r3, [r0, #56]	@ 0x38
 800983c:	3501      	adds	r5, #1
 800983e:	42ab      	cmp	r3, r5
 8009840:	d8ea      	bhi.n	8009818 <_rclc_take_new_data+0x278>
 8009842:	e723      	b.n	800968c <_rclc_take_new_data+0xec>
 8009844:	ab06      	add	r3, sp, #24
 8009846:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8009848:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 800984c:	2103      	movs	r1, #3
 800984e:	e896 000c 	ldmia.w	r6, {r2, r3}
 8009852:	6860      	ldr	r0, [r4, #4]
 8009854:	f008 fe04 	bl	8012460 <rclc_action_server_goal_cancel_reject>
 8009858:	e6c4      	b.n	80095e4 <_rclc_take_new_data+0x44>
 800985a:	ab06      	add	r3, sp, #24
 800985c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800985e:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 8009862:	2102      	movs	r1, #2
 8009864:	e896 000c 	ldmia.w	r6, {r2, r3}
 8009868:	6860      	ldr	r0, [r4, #4]
 800986a:	f008 fdf9 	bl	8012460 <rclc_action_server_goal_cancel_reject>
 800986e:	e6b9      	b.n	80095e4 <_rclc_take_new_data+0x44>
 8009870:	6860      	ldr	r0, [r4, #4]
 8009872:	e706      	b.n	8009682 <_rclc_take_new_data+0xe2>
 8009874:	6860      	ldr	r0, [r4, #4]
 8009876:	4631      	mov	r1, r6
 8009878:	f008 fd12 	bl	80122a0 <rclc_action_remove_used_goal_handle>
 800987c:	f000 fd60 	bl	800a340 <rcutils_reset_error>
 8009880:	e6b0      	b.n	80095e4 <_rclc_take_new_data+0x44>
 8009882:	2501      	movs	r5, #1
 8009884:	e6ae      	b.n	80095e4 <_rclc_take_new_data+0x44>
 8009886:	bf00      	nop

08009888 <_rclc_execute.part.0>:
 8009888:	b5f0      	push	{r4, r5, r6, r7, lr}
 800988a:	7803      	ldrb	r3, [r0, #0]
 800988c:	b087      	sub	sp, #28
 800988e:	4604      	mov	r4, r0
 8009890:	2b0a      	cmp	r3, #10
 8009892:	f200 8136 	bhi.w	8009b02 <_rclc_execute.part.0+0x27a>
 8009896:	e8df f003 	tbb	[pc, r3]
 800989a:	435e      	.short	0x435e
 800989c:	06a1664f 	.word	0x06a1664f
 80098a0:	6c1e0606 	.word	0x6c1e0606
 80098a4:	59          	.byte	0x59
 80098a5:	00          	.byte	0x00
 80098a6:	2b06      	cmp	r3, #6
 80098a8:	f000 8122 	beq.w	8009af0 <_rclc_execute.part.0+0x268>
 80098ac:	2b07      	cmp	r3, #7
 80098ae:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 80098b0:	f040 8118 	bne.w	8009ae4 <_rclc_execute.part.0+0x25c>
 80098b4:	e9d0 120a 	ldrd	r1, r2, [r0, #40]	@ 0x28
 80098b8:	6880      	ldr	r0, [r0, #8]
 80098ba:	4798      	blx	r3
 80098bc:	f104 0110 	add.w	r1, r4, #16
 80098c0:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
 80098c2:	6860      	ldr	r0, [r4, #4]
 80098c4:	f006 ff26 	bl	8010714 <rcl_send_response>
 80098c8:	2800      	cmp	r0, #0
 80098ca:	d033      	beq.n	8009934 <_rclc_execute.part.0+0xac>
 80098cc:	9005      	str	r0, [sp, #20]
 80098ce:	f000 fd37 	bl	800a340 <rcutils_reset_error>
 80098d2:	9805      	ldr	r0, [sp, #20]
 80098d4:	e02e      	b.n	8009934 <_rclc_execute.part.0+0xac>
 80098d6:	6840      	ldr	r0, [r0, #4]
 80098d8:	f890 3042 	ldrb.w	r3, [r0, #66]	@ 0x42
 80098dc:	2b00      	cmp	r3, #0
 80098de:	f000 8086 	beq.w	80099ee <_rclc_execute.part.0+0x166>
 80098e2:	2600      	movs	r6, #0
 80098e4:	2701      	movs	r7, #1
 80098e6:	e004      	b.n	80098f2 <_rclc_execute.part.0+0x6a>
 80098e8:	f008 fca4 	bl	8012234 <rclc_action_send_result_request>
 80098ec:	b998      	cbnz	r0, 8009916 <_rclc_execute.part.0+0x8e>
 80098ee:	722f      	strb	r7, [r5, #8]
 80098f0:	6860      	ldr	r0, [r4, #4]
 80098f2:	f008 fd51 	bl	8012398 <rclc_action_find_first_handle_with_goal_response>
 80098f6:	4605      	mov	r5, r0
 80098f8:	2800      	cmp	r0, #0
 80098fa:	d077      	beq.n	80099ec <_rclc_execute.part.0+0x164>
 80098fc:	6863      	ldr	r3, [r4, #4]
 80098fe:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 8009900:	699b      	ldr	r3, [r3, #24]
 8009902:	f895 1021 	ldrb.w	r1, [r5, #33]	@ 0x21
 8009906:	f885 6020 	strb.w	r6, [r5, #32]
 800990a:	4798      	blx	r3
 800990c:	f895 3021 	ldrb.w	r3, [r5, #33]	@ 0x21
 8009910:	4628      	mov	r0, r5
 8009912:	2b00      	cmp	r3, #0
 8009914:	d1e8      	bne.n	80098e8 <_rclc_execute.part.0+0x60>
 8009916:	6860      	ldr	r0, [r4, #4]
 8009918:	4629      	mov	r1, r5
 800991a:	f008 fcc1 	bl	80122a0 <rclc_action_remove_used_goal_handle>
 800991e:	e7e7      	b.n	80098f0 <_rclc_execute.part.0+0x68>
 8009920:	f890 5039 	ldrb.w	r5, [r0, #57]	@ 0x39
 8009924:	e9d0 130b 	ldrd	r1, r3, [r0, #44]	@ 0x2c
 8009928:	2d00      	cmp	r5, #0
 800992a:	f000 80c9 	beq.w	8009ac0 <_rclc_execute.part.0+0x238>
 800992e:	6880      	ldr	r0, [r0, #8]
 8009930:	4798      	blx	r3
 8009932:	2000      	movs	r0, #0
 8009934:	b007      	add	sp, #28
 8009936:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009938:	6840      	ldr	r0, [r0, #4]
 800993a:	f007 f8ed 	bl	8010b18 <rcl_timer_call>
 800993e:	f240 3321 	movw	r3, #801	@ 0x321
 8009942:	4298      	cmp	r0, r3
 8009944:	d004      	beq.n	8009950 <_rclc_execute.part.0+0xc8>
 8009946:	2800      	cmp	r0, #0
 8009948:	d0f4      	beq.n	8009934 <_rclc_execute.part.0+0xac>
 800994a:	e7bf      	b.n	80098cc <_rclc_execute.part.0+0x44>
 800994c:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 800994e:	4798      	blx	r3
 8009950:	2000      	movs	r0, #0
 8009952:	b007      	add	sp, #28
 8009954:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009956:	f890 5039 	ldrb.w	r5, [r0, #57]	@ 0x39
 800995a:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 800995c:	b925      	cbnz	r5, 8009968 <_rclc_execute.part.0+0xe0>
 800995e:	4628      	mov	r0, r5
 8009960:	4798      	blx	r3
 8009962:	4628      	mov	r0, r5
 8009964:	e7e6      	b.n	8009934 <_rclc_execute.part.0+0xac>
 8009966:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 8009968:	68a0      	ldr	r0, [r4, #8]
 800996a:	4798      	blx	r3
 800996c:	2000      	movs	r0, #0
 800996e:	b007      	add	sp, #28
 8009970:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009972:	6840      	ldr	r0, [r0, #4]
 8009974:	f890 3024 	ldrb.w	r3, [r0, #36]	@ 0x24
 8009978:	bb3b      	cbnz	r3, 80099ca <_rclc_execute.part.0+0x142>
 800997a:	f890 3020 	ldrb.w	r3, [r0, #32]
 800997e:	2b00      	cmp	r3, #0
 8009980:	d07b      	beq.n	8009a7a <_rclc_execute.part.0+0x1f2>
 8009982:	f640 0634 	movw	r6, #2100	@ 0x834
 8009986:	2701      	movs	r7, #1
 8009988:	e007      	b.n	800999a <_rclc_execute.part.0+0x112>
 800998a:	4628      	mov	r0, r5
 800998c:	f008 fd1c 	bl	80123c8 <rclc_action_server_response_goal_request>
 8009990:	6860      	ldr	r0, [r4, #4]
 8009992:	4629      	mov	r1, r5
 8009994:	f008 fc84 	bl	80122a0 <rclc_action_remove_used_goal_handle>
 8009998:	6860      	ldr	r0, [r4, #4]
 800999a:	2100      	movs	r1, #0
 800999c:	f008 fcae 	bl	80122fc <rclc_action_find_first_handle_by_status>
 80099a0:	4605      	mov	r5, r0
 80099a2:	2800      	cmp	r0, #0
 80099a4:	d066      	beq.n	8009a74 <_rclc_execute.part.0+0x1ec>
 80099a6:	6863      	ldr	r3, [r4, #4]
 80099a8:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 80099aa:	699b      	ldr	r3, [r3, #24]
 80099ac:	4798      	blx	r3
 80099ae:	42b0      	cmp	r0, r6
 80099b0:	f04f 0100 	mov.w	r1, #0
 80099b4:	d1e9      	bne.n	800998a <_rclc_execute.part.0+0x102>
 80099b6:	2101      	movs	r1, #1
 80099b8:	4628      	mov	r0, r5
 80099ba:	f008 fd05 	bl	80123c8 <rclc_action_server_response_goal_request>
 80099be:	722f      	strb	r7, [r5, #8]
 80099c0:	e7ea      	b.n	8009998 <_rclc_execute.part.0+0x110>
 80099c2:	6848      	ldr	r0, [r1, #4]
 80099c4:	f008 fc6c 	bl	80122a0 <rclc_action_remove_used_goal_handle>
 80099c8:	6860      	ldr	r0, [r4, #4]
 80099ca:	f008 fca3 	bl	8012314 <rclc_action_find_first_terminated_handle>
 80099ce:	4601      	mov	r1, r0
 80099d0:	2800      	cmp	r0, #0
 80099d2:	d1f6      	bne.n	80099c2 <_rclc_execute.part.0+0x13a>
 80099d4:	6860      	ldr	r0, [r4, #4]
 80099d6:	f880 1024 	strb.w	r1, [r0, #36]	@ 0x24
 80099da:	e7ce      	b.n	800997a <_rclc_execute.part.0+0xf2>
 80099dc:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 80099de:	6880      	ldr	r0, [r0, #8]
 80099e0:	f104 0110 	add.w	r1, r4, #16
 80099e4:	4798      	blx	r3
 80099e6:	2000      	movs	r0, #0
 80099e8:	b007      	add	sp, #28
 80099ea:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80099ec:	6860      	ldr	r0, [r4, #4]
 80099ee:	f890 3040 	ldrb.w	r3, [r0, #64]	@ 0x40
 80099f2:	b18b      	cbz	r3, 8009a18 <_rclc_execute.part.0+0x190>
 80099f4:	68c5      	ldr	r5, [r0, #12]
 80099f6:	b32d      	cbz	r5, 8009a44 <_rclc_execute.part.0+0x1bc>
 80099f8:	2600      	movs	r6, #0
 80099fa:	f895 3022 	ldrb.w	r3, [r5, #34]	@ 0x22
 80099fe:	b143      	cbz	r3, 8009a12 <_rclc_execute.part.0+0x18a>
 8009a00:	69c3      	ldr	r3, [r0, #28]
 8009a02:	f885 6022 	strb.w	r6, [r5, #34]	@ 0x22
 8009a06:	b123      	cbz	r3, 8009a12 <_rclc_execute.part.0+0x18a>
 8009a08:	6a81      	ldr	r1, [r0, #40]	@ 0x28
 8009a0a:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 8009a0c:	4628      	mov	r0, r5
 8009a0e:	4798      	blx	r3
 8009a10:	6860      	ldr	r0, [r4, #4]
 8009a12:	682d      	ldr	r5, [r5, #0]
 8009a14:	2d00      	cmp	r5, #0
 8009a16:	d1f0      	bne.n	80099fa <_rclc_execute.part.0+0x172>
 8009a18:	f890 3044 	ldrb.w	r3, [r0, #68]	@ 0x44
 8009a1c:	b193      	cbz	r3, 8009a44 <_rclc_execute.part.0+0x1bc>
 8009a1e:	68c5      	ldr	r5, [r0, #12]
 8009a20:	b185      	cbz	r5, 8009a44 <_rclc_execute.part.0+0x1bc>
 8009a22:	2600      	movs	r6, #0
 8009a24:	f895 3024 	ldrb.w	r3, [r5, #36]	@ 0x24
 8009a28:	b14b      	cbz	r3, 8009a3e <_rclc_execute.part.0+0x1b6>
 8009a2a:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 8009a2c:	f885 6024 	strb.w	r6, [r5, #36]	@ 0x24
 8009a30:	b12b      	cbz	r3, 8009a3e <_rclc_execute.part.0+0x1b6>
 8009a32:	4628      	mov	r0, r5
 8009a34:	f895 1025 	ldrb.w	r1, [r5, #37]	@ 0x25
 8009a38:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 8009a3a:	4798      	blx	r3
 8009a3c:	6860      	ldr	r0, [r4, #4]
 8009a3e:	682d      	ldr	r5, [r5, #0]
 8009a40:	2d00      	cmp	r5, #0
 8009a42:	d1ef      	bne.n	8009a24 <_rclc_execute.part.0+0x19c>
 8009a44:	f890 3043 	ldrb.w	r3, [r0, #67]	@ 0x43
 8009a48:	2b00      	cmp	r3, #0
 8009a4a:	d081      	beq.n	8009950 <_rclc_execute.part.0+0xc8>
 8009a4c:	2700      	movs	r7, #0
 8009a4e:	e00b      	b.n	8009a68 <_rclc_execute.part.0+0x1e0>
 8009a50:	6863      	ldr	r3, [r4, #4]
 8009a52:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 8009a54:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8009a56:	6a1e      	ldr	r6, [r3, #32]
 8009a58:	f885 7023 	strb.w	r7, [r5, #35]	@ 0x23
 8009a5c:	47b0      	blx	r6
 8009a5e:	6860      	ldr	r0, [r4, #4]
 8009a60:	4629      	mov	r1, r5
 8009a62:	f008 fc1d 	bl	80122a0 <rclc_action_remove_used_goal_handle>
 8009a66:	6860      	ldr	r0, [r4, #4]
 8009a68:	f008 fca2 	bl	80123b0 <rclc_action_find_first_handle_with_result_response>
 8009a6c:	4605      	mov	r5, r0
 8009a6e:	2800      	cmp	r0, #0
 8009a70:	d1ee      	bne.n	8009a50 <_rclc_execute.part.0+0x1c8>
 8009a72:	e76d      	b.n	8009950 <_rclc_execute.part.0+0xc8>
 8009a74:	6860      	ldr	r0, [r4, #4]
 8009a76:	f880 5020 	strb.w	r5, [r0, #32]
 8009a7a:	f890 3021 	ldrb.w	r3, [r0, #33]	@ 0x21
 8009a7e:	2b00      	cmp	r3, #0
 8009a80:	f43f af66 	beq.w	8009950 <_rclc_execute.part.0+0xc8>
 8009a84:	68c5      	ldr	r5, [r0, #12]
 8009a86:	b1b5      	cbz	r5, 8009ab6 <_rclc_execute.part.0+0x22e>
 8009a88:	2602      	movs	r6, #2
 8009a8a:	e001      	b.n	8009a90 <_rclc_execute.part.0+0x208>
 8009a8c:	682d      	ldr	r5, [r5, #0]
 8009a8e:	b195      	cbz	r5, 8009ab6 <_rclc_execute.part.0+0x22e>
 8009a90:	f995 3008 	ldrsb.w	r3, [r5, #8]
 8009a94:	2b03      	cmp	r3, #3
 8009a96:	d1f9      	bne.n	8009a8c <_rclc_execute.part.0+0x204>
 8009a98:	69c3      	ldr	r3, [r0, #28]
 8009a9a:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 8009a9c:	4628      	mov	r0, r5
 8009a9e:	4798      	blx	r3
 8009aa0:	4603      	mov	r3, r0
 8009aa2:	f105 0260 	add.w	r2, r5, #96	@ 0x60
 8009aa6:	4628      	mov	r0, r5
 8009aa8:	f885 3025 	strb.w	r3, [r5, #37]	@ 0x25
 8009aac:	b163      	cbz	r3, 8009ac8 <_rclc_execute.part.0+0x240>
 8009aae:	f008 fcab 	bl	8012408 <rclc_action_server_goal_cancel_accept>
 8009ab2:	6860      	ldr	r0, [r4, #4]
 8009ab4:	e7ea      	b.n	8009a8c <_rclc_execute.part.0+0x204>
 8009ab6:	2300      	movs	r3, #0
 8009ab8:	f880 3021 	strb.w	r3, [r0, #33]	@ 0x21
 8009abc:	4618      	mov	r0, r3
 8009abe:	e739      	b.n	8009934 <_rclc_execute.part.0+0xac>
 8009ac0:	4628      	mov	r0, r5
 8009ac2:	4798      	blx	r3
 8009ac4:	4628      	mov	r0, r5
 8009ac6:	e735      	b.n	8009934 <_rclc_execute.part.0+0xac>
 8009ac8:	ca0f      	ldmia	r2, {r0, r1, r2, r3}
 8009aca:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 8009ace:	f105 0758 	add.w	r7, r5, #88	@ 0x58
 8009ad2:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009ad6:	6860      	ldr	r0, [r4, #4]
 8009ad8:	2101      	movs	r1, #1
 8009ada:	f008 fcc1 	bl	8012460 <rclc_action_server_goal_cancel_reject>
 8009ade:	722e      	strb	r6, [r5, #8]
 8009ae0:	6860      	ldr	r0, [r4, #4]
 8009ae2:	e7d3      	b.n	8009a8c <_rclc_execute.part.0+0x204>
 8009ae4:	6a81      	ldr	r1, [r0, #40]	@ 0x28
 8009ae6:	6880      	ldr	r0, [r0, #8]
 8009ae8:	4798      	blx	r3
 8009aea:	f104 0110 	add.w	r1, r4, #16
 8009aee:	e6e7      	b.n	80098c0 <_rclc_execute.part.0+0x38>
 8009af0:	f100 0110 	add.w	r1, r0, #16
 8009af4:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 8009af6:	6a82      	ldr	r2, [r0, #40]	@ 0x28
 8009af8:	6880      	ldr	r0, [r0, #8]
 8009afa:	9105      	str	r1, [sp, #20]
 8009afc:	4798      	blx	r3
 8009afe:	9905      	ldr	r1, [sp, #20]
 8009b00:	e6de      	b.n	80098c0 <_rclc_execute.part.0+0x38>
 8009b02:	2001      	movs	r0, #1
 8009b04:	e716      	b.n	8009934 <_rclc_execute.part.0+0xac>
 8009b06:	bf00      	nop

08009b08 <rclc_executor_trigger_any>:
 8009b08:	2800      	cmp	r0, #0
 8009b0a:	d03f      	beq.n	8009b8c <rclc_executor_trigger_any+0x84>
 8009b0c:	2900      	cmp	r1, #0
 8009b0e:	d03e      	beq.n	8009b8e <rclc_executor_trigger_any+0x86>
 8009b10:	4603      	mov	r3, r0
 8009b12:	f890 0038 	ldrb.w	r0, [r0, #56]	@ 0x38
 8009b16:	2200      	movs	r2, #0
 8009b18:	2800      	cmp	r0, #0
 8009b1a:	d037      	beq.n	8009b8c <rclc_executor_trigger_any+0x84>
 8009b1c:	b430      	push	{r4, r5}
 8009b1e:	f893 c000 	ldrb.w	ip, [r3]
 8009b22:	f1bc 0f08 	cmp.w	ip, #8
 8009b26:	d11e      	bne.n	8009b66 <rclc_executor_trigger_any+0x5e>
 8009b28:	685c      	ldr	r4, [r3, #4]
 8009b2a:	6c25      	ldr	r5, [r4, #64]	@ 0x40
 8009b2c:	f035 457f 	bics.w	r5, r5, #4278190080	@ 0xff000000
 8009b30:	d105      	bne.n	8009b3e <rclc_executor_trigger_any+0x36>
 8009b32:	f894 0044 	ldrb.w	r0, [r4, #68]	@ 0x44
 8009b36:	b910      	cbnz	r0, 8009b3e <rclc_executor_trigger_any+0x36>
 8009b38:	f894 0043 	ldrb.w	r0, [r4, #67]	@ 0x43
 8009b3c:	b128      	cbz	r0, 8009b4a <rclc_executor_trigger_any+0x42>
 8009b3e:	bc30      	pop	{r4, r5}
 8009b40:	4770      	bx	lr
 8009b42:	f893 0039 	ldrb.w	r0, [r3, #57]	@ 0x39
 8009b46:	2800      	cmp	r0, #0
 8009b48:	d1f9      	bne.n	8009b3e <rclc_executor_trigger_any+0x36>
 8009b4a:	3201      	adds	r2, #1
 8009b4c:	4291      	cmp	r1, r2
 8009b4e:	f103 0340 	add.w	r3, r3, #64	@ 0x40
 8009b52:	d018      	beq.n	8009b86 <rclc_executor_trigger_any+0x7e>
 8009b54:	f893 0038 	ldrb.w	r0, [r3, #56]	@ 0x38
 8009b58:	2800      	cmp	r0, #0
 8009b5a:	d0f0      	beq.n	8009b3e <rclc_executor_trigger_any+0x36>
 8009b5c:	f893 c000 	ldrb.w	ip, [r3]
 8009b60:	f1bc 0f08 	cmp.w	ip, #8
 8009b64:	d0e0      	beq.n	8009b28 <rclc_executor_trigger_any+0x20>
 8009b66:	f1bc 0f09 	cmp.w	ip, #9
 8009b6a:	d1ea      	bne.n	8009b42 <rclc_executor_trigger_any+0x3a>
 8009b6c:	685c      	ldr	r4, [r3, #4]
 8009b6e:	6a25      	ldr	r5, [r4, #32]
 8009b70:	2d00      	cmp	r5, #0
 8009b72:	d1e4      	bne.n	8009b3e <rclc_executor_trigger_any+0x36>
 8009b74:	f894 0024 	ldrb.w	r0, [r4, #36]	@ 0x24
 8009b78:	2800      	cmp	r0, #0
 8009b7a:	d1e0      	bne.n	8009b3e <rclc_executor_trigger_any+0x36>
 8009b7c:	3201      	adds	r2, #1
 8009b7e:	4291      	cmp	r1, r2
 8009b80:	f103 0340 	add.w	r3, r3, #64	@ 0x40
 8009b84:	d1e6      	bne.n	8009b54 <rclc_executor_trigger_any+0x4c>
 8009b86:	2000      	movs	r0, #0
 8009b88:	bc30      	pop	{r4, r5}
 8009b8a:	4770      	bx	lr
 8009b8c:	4770      	bx	lr
 8009b8e:	4608      	mov	r0, r1
 8009b90:	4770      	bx	lr
 8009b92:	bf00      	nop
 8009b94:	0000      	movs	r0, r0
	...

08009b98 <rclc_executor_init>:
 8009b98:	2800      	cmp	r0, #0
 8009b9a:	d05f      	beq.n	8009c5c <rclc_executor_init+0xc4>
 8009b9c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009ba0:	460c      	mov	r4, r1
 8009ba2:	b0b0      	sub	sp, #192	@ 0xc0
 8009ba4:	2900      	cmp	r1, #0
 8009ba6:	d051      	beq.n	8009c4c <rclc_executor_init+0xb4>
 8009ba8:	4605      	mov	r5, r0
 8009baa:	4618      	mov	r0, r3
 8009bac:	4616      	mov	r6, r2
 8009bae:	461f      	mov	r7, r3
 8009bb0:	f000 fba0 	bl	800a2f4 <rcutils_allocator_is_valid>
 8009bb4:	2800      	cmp	r0, #0
 8009bb6:	d049      	beq.n	8009c4c <rclc_executor_init+0xb4>
 8009bb8:	2e00      	cmp	r6, #0
 8009bba:	d047      	beq.n	8009c4c <rclc_executor_init+0xb4>
 8009bbc:	492c      	ldr	r1, [pc, #176]	@ (8009c70 <rclc_executor_init+0xd8>)
 8009bbe:	2288      	movs	r2, #136	@ 0x88
 8009bc0:	a80e      	add	r0, sp, #56	@ 0x38
 8009bc2:	f00b fef6 	bl	80159b2 <memcpy>
 8009bc6:	a90e      	add	r1, sp, #56	@ 0x38
 8009bc8:	2288      	movs	r2, #136	@ 0x88
 8009bca:	4628      	mov	r0, r5
 8009bcc:	f00b fef1 	bl	80159b2 <memcpy>
 8009bd0:	602c      	str	r4, [r5, #0]
 8009bd2:	4668      	mov	r0, sp
 8009bd4:	60ae      	str	r6, [r5, #8]
 8009bd6:	466c      	mov	r4, sp
 8009bd8:	f007 f910 	bl	8010dfc <rcl_get_zero_initialized_wait_set>
 8009bdc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8009bde:	f105 0c14 	add.w	ip, r5, #20
 8009be2:	f8d7 8000 	ldr.w	r8, [r7]
 8009be6:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8009bea:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8009bec:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8009bf0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8009bf2:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8009bf6:	ed9f 7b1c 	vldr	d7, [pc, #112]	@ 8009c68 <rclc_executor_init+0xd0>
 8009bfa:	6823      	ldr	r3, [r4, #0]
 8009bfc:	f8cc 3000 	str.w	r3, [ip]
 8009c00:	6939      	ldr	r1, [r7, #16]
 8009c02:	612f      	str	r7, [r5, #16]
 8009c04:	ed85 7b1a 	vstr	d7, [r5, #104]	@ 0x68
 8009c08:	01b0      	lsls	r0, r6, #6
 8009c0a:	47c0      	blx	r8
 8009c0c:	6068      	str	r0, [r5, #4]
 8009c0e:	b338      	cbz	r0, 8009c60 <rclc_executor_init+0xc8>
 8009c10:	2400      	movs	r4, #0
 8009c12:	e000      	b.n	8009c16 <rclc_executor_init+0x7e>
 8009c14:	6868      	ldr	r0, [r5, #4]
 8009c16:	eb00 1084 	add.w	r0, r0, r4, lsl #6
 8009c1a:	4631      	mov	r1, r6
 8009c1c:	3401      	adds	r4, #1
 8009c1e:	f000 fa6b 	bl	800a0f8 <rclc_executor_handle_init>
 8009c22:	42a6      	cmp	r6, r4
 8009c24:	d1f6      	bne.n	8009c14 <rclc_executor_init+0x7c>
 8009c26:	f105 0048 	add.w	r0, r5, #72	@ 0x48
 8009c2a:	f000 fa5b 	bl	800a0e4 <rclc_executor_handle_counters_zero_init>
 8009c2e:	4a11      	ldr	r2, [pc, #68]	@ (8009c74 <rclc_executor_init+0xdc>)
 8009c30:	686b      	ldr	r3, [r5, #4]
 8009c32:	2000      	movs	r0, #0
 8009c34:	e9c5 201e 	strd	r2, r0, [r5, #120]	@ 0x78
 8009c38:	b163      	cbz	r3, 8009c54 <rclc_executor_init+0xbc>
 8009c3a:	692b      	ldr	r3, [r5, #16]
 8009c3c:	b153      	cbz	r3, 8009c54 <rclc_executor_init+0xbc>
 8009c3e:	68ab      	ldr	r3, [r5, #8]
 8009c40:	b143      	cbz	r3, 8009c54 <rclc_executor_init+0xbc>
 8009c42:	f885 0080 	strb.w	r0, [r5, #128]	@ 0x80
 8009c46:	b030      	add	sp, #192	@ 0xc0
 8009c48:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009c4c:	200b      	movs	r0, #11
 8009c4e:	b030      	add	sp, #192	@ 0xc0
 8009c50:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009c54:	4618      	mov	r0, r3
 8009c56:	b030      	add	sp, #192	@ 0xc0
 8009c58:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009c5c:	200b      	movs	r0, #11
 8009c5e:	4770      	bx	lr
 8009c60:	200a      	movs	r0, #10
 8009c62:	e7f4      	b.n	8009c4e <rclc_executor_init+0xb6>
 8009c64:	f3af 8000 	nop.w
 8009c68:	3b9aca00 	.word	0x3b9aca00
 8009c6c:	00000000 	.word	0x00000000
 8009c70:	080168a8 	.word	0x080168a8
 8009c74:	08009b09 	.word	0x08009b09

08009c78 <rclc_executor_add_subscription>:
 8009c78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009c7a:	f89d e018 	ldrb.w	lr, [sp, #24]
 8009c7e:	b338      	cbz	r0, 8009cd0 <rclc_executor_add_subscription+0x58>
 8009c80:	b331      	cbz	r1, 8009cd0 <rclc_executor_add_subscription+0x58>
 8009c82:	b32a      	cbz	r2, 8009cd0 <rclc_executor_add_subscription+0x58>
 8009c84:	b323      	cbz	r3, 8009cd0 <rclc_executor_add_subscription+0x58>
 8009c86:	4604      	mov	r4, r0
 8009c88:	e9d0 5002 	ldrd	r5, r0, [r0, #8]
 8009c8c:	42a8      	cmp	r0, r5
 8009c8e:	d301      	bcc.n	8009c94 <rclc_executor_add_subscription+0x1c>
 8009c90:	2001      	movs	r0, #1
 8009c92:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009c94:	6866      	ldr	r6, [r4, #4]
 8009c96:	0187      	lsls	r7, r0, #6
 8009c98:	eb06 1c80 	add.w	ip, r6, r0, lsl #6
 8009c9c:	2500      	movs	r5, #0
 8009c9e:	55f5      	strb	r5, [r6, r7]
 8009ca0:	3001      	adds	r0, #1
 8009ca2:	f8cc 3030 	str.w	r3, [ip, #48]	@ 0x30
 8009ca6:	f8cc 502c 	str.w	r5, [ip, #44]	@ 0x2c
 8009caa:	2301      	movs	r3, #1
 8009cac:	f104 0514 	add.w	r5, r4, #20
 8009cb0:	e9cc 1201 	strd	r1, r2, [ip, #4]
 8009cb4:	f88c e001 	strb.w	lr, [ip, #1]
 8009cb8:	f8ac 3038 	strh.w	r3, [ip, #56]	@ 0x38
 8009cbc:	60e0      	str	r0, [r4, #12]
 8009cbe:	4628      	mov	r0, r5
 8009cc0:	f007 f8b0 	bl	8010e24 <rcl_wait_set_is_valid>
 8009cc4:	b930      	cbnz	r0, 8009cd4 <rclc_executor_add_subscription+0x5c>
 8009cc6:	6ca3      	ldr	r3, [r4, #72]	@ 0x48
 8009cc8:	3301      	adds	r3, #1
 8009cca:	2000      	movs	r0, #0
 8009ccc:	64a3      	str	r3, [r4, #72]	@ 0x48
 8009cce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009cd0:	200b      	movs	r0, #11
 8009cd2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009cd4:	4628      	mov	r0, r5
 8009cd6:	f007 f8ab 	bl	8010e30 <rcl_wait_set_fini>
 8009cda:	2800      	cmp	r0, #0
 8009cdc:	d0f3      	beq.n	8009cc6 <rclc_executor_add_subscription+0x4e>
 8009cde:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08009ce0 <rclc_executor_prepare>:
 8009ce0:	2800      	cmp	r0, #0
 8009ce2:	d044      	beq.n	8009d6e <rclc_executor_prepare+0x8e>
 8009ce4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009ce6:	f100 0514 	add.w	r5, r0, #20
 8009cea:	b09b      	sub	sp, #108	@ 0x6c
 8009cec:	4604      	mov	r4, r0
 8009cee:	4628      	mov	r0, r5
 8009cf0:	f007 f898 	bl	8010e24 <rcl_wait_set_is_valid>
 8009cf4:	b110      	cbz	r0, 8009cfc <rclc_executor_prepare+0x1c>
 8009cf6:	2000      	movs	r0, #0
 8009cf8:	b01b      	add	sp, #108	@ 0x6c
 8009cfa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009cfc:	4628      	mov	r0, r5
 8009cfe:	f007 f897 	bl	8010e30 <rcl_wait_set_fini>
 8009d02:	2800      	cmp	r0, #0
 8009d04:	d130      	bne.n	8009d68 <rclc_executor_prepare+0x88>
 8009d06:	a80c      	add	r0, sp, #48	@ 0x30
 8009d08:	f007 f878 	bl	8010dfc <rcl_get_zero_initialized_wait_set>
 8009d0c:	f10d 0c30 	add.w	ip, sp, #48	@ 0x30
 8009d10:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8009d14:	46ae      	mov	lr, r5
 8009d16:	6927      	ldr	r7, [r4, #16]
 8009d18:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8009d1c:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8009d20:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8009d24:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8009d28:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8009d2c:	f8dc 3000 	ldr.w	r3, [ip]
 8009d30:	f8ce 3000 	str.w	r3, [lr]
 8009d34:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 8009d36:	ae04      	add	r6, sp, #16
 8009d38:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8009d3a:	683b      	ldr	r3, [r7, #0]
 8009d3c:	6822      	ldr	r2, [r4, #0]
 8009d3e:	6033      	str	r3, [r6, #0]
 8009d40:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8009d42:	6d61      	ldr	r1, [r4, #84]	@ 0x54
 8009d44:	e9cd 3202 	strd	r3, r2, [sp, #8]
 8009d48:	e9d4 3213 	ldrd	r3, r2, [r4, #76]	@ 0x4c
 8009d4c:	e9cd 2100 	strd	r2, r1, [sp]
 8009d50:	4628      	mov	r0, r5
 8009d52:	6e22      	ldr	r2, [r4, #96]	@ 0x60
 8009d54:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 8009d56:	f007 fb69 	bl	801142c <rcl_wait_set_init>
 8009d5a:	2800      	cmp	r0, #0
 8009d5c:	d0cc      	beq.n	8009cf8 <rclc_executor_prepare+0x18>
 8009d5e:	900b      	str	r0, [sp, #44]	@ 0x2c
 8009d60:	f000 faee 	bl	800a340 <rcutils_reset_error>
 8009d64:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 8009d66:	e7c7      	b.n	8009cf8 <rclc_executor_prepare+0x18>
 8009d68:	f000 faea 	bl	800a340 <rcutils_reset_error>
 8009d6c:	e7cb      	b.n	8009d06 <rclc_executor_prepare+0x26>
 8009d6e:	200b      	movs	r0, #11
 8009d70:	4770      	bx	lr
 8009d72:	bf00      	nop

08009d74 <rclc_executor_spin_some.part.0>:
 8009d74:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009d78:	f100 0614 	add.w	r6, r0, #20
 8009d7c:	b083      	sub	sp, #12
 8009d7e:	4691      	mov	r9, r2
 8009d80:	4698      	mov	r8, r3
 8009d82:	4605      	mov	r5, r0
 8009d84:	f7ff ffac 	bl	8009ce0 <rclc_executor_prepare>
 8009d88:	4630      	mov	r0, r6
 8009d8a:	f007 f91d 	bl	8010fc8 <rcl_wait_set_clear>
 8009d8e:	4607      	mov	r7, r0
 8009d90:	2800      	cmp	r0, #0
 8009d92:	f040 80ed 	bne.w	8009f70 <rclc_executor_spin_some.part.0+0x1fc>
 8009d96:	68ab      	ldr	r3, [r5, #8]
 8009d98:	4604      	mov	r4, r0
 8009d9a:	b303      	cbz	r3, 8009dde <rclc_executor_spin_some.part.0+0x6a>
 8009d9c:	6869      	ldr	r1, [r5, #4]
 8009d9e:	eb01 1c84 	add.w	ip, r1, r4, lsl #6
 8009da2:	01a2      	lsls	r2, r4, #6
 8009da4:	f89c 3038 	ldrb.w	r3, [ip, #56]	@ 0x38
 8009da8:	b1cb      	cbz	r3, 8009dde <rclc_executor_spin_some.part.0+0x6a>
 8009daa:	5c8b      	ldrb	r3, [r1, r2]
 8009dac:	2b0a      	cmp	r3, #10
 8009dae:	f200 80d8 	bhi.w	8009f62 <rclc_executor_spin_some.part.0+0x1ee>
 8009db2:	e8df f003 	tbb	[pc, r3]
 8009db6:	9c9c      	.short	0x9c9c
 8009db8:	068c8ca7 	.word	0x068c8ca7
 8009dbc:	bdc90606 	.word	0xbdc90606
 8009dc0:	b2          	.byte	0xb2
 8009dc1:	00          	.byte	0x00
 8009dc2:	f8dc 1004 	ldr.w	r1, [ip, #4]
 8009dc6:	f10c 0234 	add.w	r2, ip, #52	@ 0x34
 8009dca:	4630      	mov	r0, r6
 8009dcc:	f007 fc44 	bl	8011658 <rcl_wait_set_add_service>
 8009dd0:	2800      	cmp	r0, #0
 8009dd2:	f040 8086 	bne.w	8009ee2 <rclc_executor_spin_some.part.0+0x16e>
 8009dd6:	68ab      	ldr	r3, [r5, #8]
 8009dd8:	3401      	adds	r4, #1
 8009dda:	429c      	cmp	r4, r3
 8009ddc:	d3de      	bcc.n	8009d9c <rclc_executor_spin_some.part.0+0x28>
 8009dde:	4643      	mov	r3, r8
 8009de0:	464a      	mov	r2, r9
 8009de2:	4630      	mov	r0, r6
 8009de4:	f007 fc64 	bl	80116b0 <rcl_wait>
 8009de8:	f895 3080 	ldrb.w	r3, [r5, #128]	@ 0x80
 8009dec:	2b00      	cmp	r3, #0
 8009dee:	f000 80c7 	beq.w	8009f80 <rclc_executor_spin_some.part.0+0x20c>
 8009df2:	2b01      	cmp	r3, #1
 8009df4:	f040 80b5 	bne.w	8009f62 <rclc_executor_spin_some.part.0+0x1ee>
 8009df8:	68ab      	ldr	r3, [r5, #8]
 8009dfa:	2b00      	cmp	r3, #0
 8009dfc:	f000 8159 	beq.w	800a0b2 <rclc_executor_spin_some.part.0+0x33e>
 8009e00:	2400      	movs	r4, #0
 8009e02:	46a0      	mov	r8, r4
 8009e04:	f240 1991 	movw	r9, #401	@ 0x191
 8009e08:	e00a      	b.n	8009e20 <rclc_executor_spin_some.part.0+0xac>
 8009e0a:	f7ff fb7b 	bl	8009504 <_rclc_check_for_new_data>
 8009e0e:	4604      	mov	r4, r0
 8009e10:	b110      	cbz	r0, 8009e18 <rclc_executor_spin_some.part.0+0xa4>
 8009e12:	4548      	cmp	r0, r9
 8009e14:	f040 80b2 	bne.w	8009f7c <rclc_executor_spin_some.part.0+0x208>
 8009e18:	68ab      	ldr	r3, [r5, #8]
 8009e1a:	4598      	cmp	r8, r3
 8009e1c:	f080 8126 	bcs.w	800a06c <rclc_executor_spin_some.part.0+0x2f8>
 8009e20:	686a      	ldr	r2, [r5, #4]
 8009e22:	eb02 1088 	add.w	r0, r2, r8, lsl #6
 8009e26:	4631      	mov	r1, r6
 8009e28:	f890 c038 	ldrb.w	ip, [r0, #56]	@ 0x38
 8009e2c:	f108 0801 	add.w	r8, r8, #1
 8009e30:	f1bc 0f00 	cmp.w	ip, #0
 8009e34:	d1e9      	bne.n	8009e0a <rclc_executor_spin_some.part.0+0x96>
 8009e36:	4619      	mov	r1, r3
 8009e38:	4610      	mov	r0, r2
 8009e3a:	e9d5 321e 	ldrd	r3, r2, [r5, #120]	@ 0x78
 8009e3e:	4798      	blx	r3
 8009e40:	2800      	cmp	r0, #0
 8009e42:	f000 809b 	beq.w	8009f7c <rclc_executor_spin_some.part.0+0x208>
 8009e46:	68ab      	ldr	r3, [r5, #8]
 8009e48:	2b00      	cmp	r3, #0
 8009e4a:	f000 8097 	beq.w	8009f7c <rclc_executor_spin_some.part.0+0x208>
 8009e4e:	f04f 0800 	mov.w	r8, #0
 8009e52:	f240 1991 	movw	r9, #401	@ 0x191
 8009e56:	e009      	b.n	8009e6c <rclc_executor_spin_some.part.0+0xf8>
 8009e58:	f7ff fba2 	bl	80095a0 <_rclc_take_new_data>
 8009e5c:	4604      	mov	r4, r0
 8009e5e:	b110      	cbz	r0, 8009e66 <rclc_executor_spin_some.part.0+0xf2>
 8009e60:	4548      	cmp	r0, r9
 8009e62:	f040 808b 	bne.w	8009f7c <rclc_executor_spin_some.part.0+0x208>
 8009e66:	68ab      	ldr	r3, [r5, #8]
 8009e68:	4598      	cmp	r8, r3
 8009e6a:	d209      	bcs.n	8009e80 <rclc_executor_spin_some.part.0+0x10c>
 8009e6c:	6868      	ldr	r0, [r5, #4]
 8009e6e:	eb00 1088 	add.w	r0, r0, r8, lsl #6
 8009e72:	4631      	mov	r1, r6
 8009e74:	f890 2038 	ldrb.w	r2, [r0, #56]	@ 0x38
 8009e78:	f108 0801 	add.w	r8, r8, #1
 8009e7c:	2a00      	cmp	r2, #0
 8009e7e:	d1eb      	bne.n	8009e58 <rclc_executor_spin_some.part.0+0xe4>
 8009e80:	2600      	movs	r6, #0
 8009e82:	b97b      	cbnz	r3, 8009ea4 <rclc_executor_spin_some.part.0+0x130>
 8009e84:	e07a      	b.n	8009f7c <rclc_executor_spin_some.part.0+0x208>
 8009e86:	f812 200c 	ldrb.w	r2, [r2, ip]
 8009e8a:	2a08      	cmp	r2, #8
 8009e8c:	f000 80fd 	beq.w	800a08a <rclc_executor_spin_some.part.0+0x316>
 8009e90:	2a09      	cmp	r2, #9
 8009e92:	f000 80ef 	beq.w	800a074 <rclc_executor_spin_some.part.0+0x300>
 8009e96:	f890 2039 	ldrb.w	r2, [r0, #57]	@ 0x39
 8009e9a:	b98a      	cbnz	r2, 8009ec0 <rclc_executor_spin_some.part.0+0x14c>
 8009e9c:	3601      	adds	r6, #1
 8009e9e:	429e      	cmp	r6, r3
 8009ea0:	d262      	bcs.n	8009f68 <rclc_executor_spin_some.part.0+0x1f4>
 8009ea2:	2400      	movs	r4, #0
 8009ea4:	686a      	ldr	r2, [r5, #4]
 8009ea6:	eb02 1086 	add.w	r0, r2, r6, lsl #6
 8009eaa:	ea4f 1c86 	mov.w	ip, r6, lsl #6
 8009eae:	f890 1038 	ldrb.w	r1, [r0, #56]	@ 0x38
 8009eb2:	2900      	cmp	r1, #0
 8009eb4:	d062      	beq.n	8009f7c <rclc_executor_spin_some.part.0+0x208>
 8009eb6:	7841      	ldrb	r1, [r0, #1]
 8009eb8:	2900      	cmp	r1, #0
 8009eba:	d0e4      	beq.n	8009e86 <rclc_executor_spin_some.part.0+0x112>
 8009ebc:	2901      	cmp	r1, #1
 8009ebe:	d1ed      	bne.n	8009e9c <rclc_executor_spin_some.part.0+0x128>
 8009ec0:	f7ff fce2 	bl	8009888 <_rclc_execute.part.0>
 8009ec4:	2800      	cmp	r0, #0
 8009ec6:	f040 80b6 	bne.w	800a036 <rclc_executor_spin_some.part.0+0x2c2>
 8009eca:	68ab      	ldr	r3, [r5, #8]
 8009ecc:	e7e6      	b.n	8009e9c <rclc_executor_spin_some.part.0+0x128>
 8009ece:	f8dc 1004 	ldr.w	r1, [ip, #4]
 8009ed2:	f10c 0234 	add.w	r2, ip, #52	@ 0x34
 8009ed6:	4630      	mov	r0, r6
 8009ed8:	f007 fb92 	bl	8011600 <rcl_wait_set_add_client>
 8009edc:	2800      	cmp	r0, #0
 8009ede:	f43f af7a 	beq.w	8009dd6 <rclc_executor_spin_some.part.0+0x62>
 8009ee2:	9001      	str	r0, [sp, #4]
 8009ee4:	f000 fa2c 	bl	800a340 <rcutils_reset_error>
 8009ee8:	9801      	ldr	r0, [sp, #4]
 8009eea:	4607      	mov	r7, r0
 8009eec:	e03c      	b.n	8009f68 <rclc_executor_spin_some.part.0+0x1f4>
 8009eee:	f8dc 1004 	ldr.w	r1, [ip, #4]
 8009ef2:	f10c 0234 	add.w	r2, ip, #52	@ 0x34
 8009ef6:	4630      	mov	r0, r6
 8009ef8:	f007 f83a 	bl	8010f70 <rcl_wait_set_add_subscription>
 8009efc:	2800      	cmp	r0, #0
 8009efe:	f43f af6a 	beq.w	8009dd6 <rclc_executor_spin_some.part.0+0x62>
 8009f02:	e7ee      	b.n	8009ee2 <rclc_executor_spin_some.part.0+0x16e>
 8009f04:	f8dc 1004 	ldr.w	r1, [ip, #4]
 8009f08:	f10c 0234 	add.w	r2, ip, #52	@ 0x34
 8009f0c:	4630      	mov	r0, r6
 8009f0e:	f007 fb47 	bl	80115a0 <rcl_wait_set_add_timer>
 8009f12:	2800      	cmp	r0, #0
 8009f14:	f43f af5f 	beq.w	8009dd6 <rclc_executor_spin_some.part.0+0x62>
 8009f18:	e7e3      	b.n	8009ee2 <rclc_executor_spin_some.part.0+0x16e>
 8009f1a:	f8dc 1004 	ldr.w	r1, [ip, #4]
 8009f1e:	f10c 0234 	add.w	r2, ip, #52	@ 0x34
 8009f22:	4630      	mov	r0, r6
 8009f24:	f007 fb10 	bl	8011548 <rcl_wait_set_add_guard_condition>
 8009f28:	2800      	cmp	r0, #0
 8009f2a:	f43f af54 	beq.w	8009dd6 <rclc_executor_spin_some.part.0+0x62>
 8009f2e:	e7d8      	b.n	8009ee2 <rclc_executor_spin_some.part.0+0x16e>
 8009f30:	f8dc 1004 	ldr.w	r1, [ip, #4]
 8009f34:	f10c 0234 	add.w	r2, ip, #52	@ 0x34
 8009f38:	3110      	adds	r1, #16
 8009f3a:	4630      	mov	r0, r6
 8009f3c:	f008 f890 	bl	8012060 <rcl_action_wait_set_add_action_server>
 8009f40:	2800      	cmp	r0, #0
 8009f42:	f43f af48 	beq.w	8009dd6 <rclc_executor_spin_some.part.0+0x62>
 8009f46:	e7cc      	b.n	8009ee2 <rclc_executor_spin_some.part.0+0x16e>
 8009f48:	f8dc 1004 	ldr.w	r1, [ip, #4]
 8009f4c:	f10c 0234 	add.w	r2, ip, #52	@ 0x34
 8009f50:	3110      	adds	r1, #16
 8009f52:	2300      	movs	r3, #0
 8009f54:	4630      	mov	r0, r6
 8009f56:	f007 fe5b 	bl	8011c10 <rcl_action_wait_set_add_action_client>
 8009f5a:	2800      	cmp	r0, #0
 8009f5c:	f43f af3b 	beq.w	8009dd6 <rclc_executor_spin_some.part.0+0x62>
 8009f60:	e7bf      	b.n	8009ee2 <rclc_executor_spin_some.part.0+0x16e>
 8009f62:	f000 f9ed 	bl	800a340 <rcutils_reset_error>
 8009f66:	2701      	movs	r7, #1
 8009f68:	4638      	mov	r0, r7
 8009f6a:	b003      	add	sp, #12
 8009f6c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009f70:	f000 f9e6 	bl	800a340 <rcutils_reset_error>
 8009f74:	4638      	mov	r0, r7
 8009f76:	b003      	add	sp, #12
 8009f78:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009f7c:	4627      	mov	r7, r4
 8009f7e:	e7f3      	b.n	8009f68 <rclc_executor_spin_some.part.0+0x1f4>
 8009f80:	68ab      	ldr	r3, [r5, #8]
 8009f82:	2b00      	cmp	r3, #0
 8009f84:	f000 8092 	beq.w	800a0ac <rclc_executor_spin_some.part.0+0x338>
 8009f88:	2400      	movs	r4, #0
 8009f8a:	46a0      	mov	r8, r4
 8009f8c:	f240 1991 	movw	r9, #401	@ 0x191
 8009f90:	e008      	b.n	8009fa4 <rclc_executor_spin_some.part.0+0x230>
 8009f92:	f7ff fab7 	bl	8009504 <_rclc_check_for_new_data>
 8009f96:	4604      	mov	r4, r0
 8009f98:	b108      	cbz	r0, 8009f9e <rclc_executor_spin_some.part.0+0x22a>
 8009f9a:	4548      	cmp	r0, r9
 8009f9c:	d1ee      	bne.n	8009f7c <rclc_executor_spin_some.part.0+0x208>
 8009f9e:	68ab      	ldr	r3, [r5, #8]
 8009fa0:	4598      	cmp	r8, r3
 8009fa2:	d265      	bcs.n	800a070 <rclc_executor_spin_some.part.0+0x2fc>
 8009fa4:	686a      	ldr	r2, [r5, #4]
 8009fa6:	eb02 1088 	add.w	r0, r2, r8, lsl #6
 8009faa:	4631      	mov	r1, r6
 8009fac:	f890 c038 	ldrb.w	ip, [r0, #56]	@ 0x38
 8009fb0:	f108 0801 	add.w	r8, r8, #1
 8009fb4:	f1bc 0f00 	cmp.w	ip, #0
 8009fb8:	d1eb      	bne.n	8009f92 <rclc_executor_spin_some.part.0+0x21e>
 8009fba:	4619      	mov	r1, r3
 8009fbc:	4610      	mov	r0, r2
 8009fbe:	e9d5 321e 	ldrd	r3, r2, [r5, #120]	@ 0x78
 8009fc2:	4798      	blx	r3
 8009fc4:	2800      	cmp	r0, #0
 8009fc6:	d0d9      	beq.n	8009f7c <rclc_executor_spin_some.part.0+0x208>
 8009fc8:	68ab      	ldr	r3, [r5, #8]
 8009fca:	2b00      	cmp	r3, #0
 8009fcc:	d0d6      	beq.n	8009f7c <rclc_executor_spin_some.part.0+0x208>
 8009fce:	f04f 0800 	mov.w	r8, #0
 8009fd2:	f240 1991 	movw	r9, #401	@ 0x191
 8009fd6:	f240 2a59 	movw	sl, #601	@ 0x259
 8009fda:	e00e      	b.n	8009ffa <rclc_executor_spin_some.part.0+0x286>
 8009fdc:	f813 300b 	ldrb.w	r3, [r3, fp]
 8009fe0:	2b08      	cmp	r3, #8
 8009fe2:	d033      	beq.n	800a04c <rclc_executor_spin_some.part.0+0x2d8>
 8009fe4:	2b09      	cmp	r3, #9
 8009fe6:	d028      	beq.n	800a03a <rclc_executor_spin_some.part.0+0x2c6>
 8009fe8:	f890 3039 	ldrb.w	r3, [r0, #57]	@ 0x39
 8009fec:	b9fb      	cbnz	r3, 800a02e <rclc_executor_spin_some.part.0+0x2ba>
 8009fee:	68ab      	ldr	r3, [r5, #8]
 8009ff0:	f108 0801 	add.w	r8, r8, #1
 8009ff4:	4598      	cmp	r8, r3
 8009ff6:	d2b7      	bcs.n	8009f68 <rclc_executor_spin_some.part.0+0x1f4>
 8009ff8:	2400      	movs	r4, #0
 8009ffa:	6868      	ldr	r0, [r5, #4]
 8009ffc:	eb00 1088 	add.w	r0, r0, r8, lsl #6
 800a000:	ea4f 1b88 	mov.w	fp, r8, lsl #6
 800a004:	f890 3038 	ldrb.w	r3, [r0, #56]	@ 0x38
 800a008:	2b00      	cmp	r3, #0
 800a00a:	d0b7      	beq.n	8009f7c <rclc_executor_spin_some.part.0+0x208>
 800a00c:	4631      	mov	r1, r6
 800a00e:	f7ff fac7 	bl	80095a0 <_rclc_take_new_data>
 800a012:	b118      	cbz	r0, 800a01c <rclc_executor_spin_some.part.0+0x2a8>
 800a014:	4548      	cmp	r0, r9
 800a016:	d001      	beq.n	800a01c <rclc_executor_spin_some.part.0+0x2a8>
 800a018:	4550      	cmp	r0, sl
 800a01a:	d10c      	bne.n	800a036 <rclc_executor_spin_some.part.0+0x2c2>
 800a01c:	686b      	ldr	r3, [r5, #4]
 800a01e:	eb13 000b 	adds.w	r0, r3, fp
 800a022:	d021      	beq.n	800a068 <rclc_executor_spin_some.part.0+0x2f4>
 800a024:	7842      	ldrb	r2, [r0, #1]
 800a026:	2a00      	cmp	r2, #0
 800a028:	d0d8      	beq.n	8009fdc <rclc_executor_spin_some.part.0+0x268>
 800a02a:	2a01      	cmp	r2, #1
 800a02c:	d1df      	bne.n	8009fee <rclc_executor_spin_some.part.0+0x27a>
 800a02e:	f7ff fc2b 	bl	8009888 <_rclc_execute.part.0>
 800a032:	2800      	cmp	r0, #0
 800a034:	d0db      	beq.n	8009fee <rclc_executor_spin_some.part.0+0x27a>
 800a036:	4607      	mov	r7, r0
 800a038:	e796      	b.n	8009f68 <rclc_executor_spin_some.part.0+0x1f4>
 800a03a:	6843      	ldr	r3, [r0, #4]
 800a03c:	6a1a      	ldr	r2, [r3, #32]
 800a03e:	2a00      	cmp	r2, #0
 800a040:	d1f5      	bne.n	800a02e <rclc_executor_spin_some.part.0+0x2ba>
 800a042:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800a046:	2b00      	cmp	r3, #0
 800a048:	d0d1      	beq.n	8009fee <rclc_executor_spin_some.part.0+0x27a>
 800a04a:	e7f0      	b.n	800a02e <rclc_executor_spin_some.part.0+0x2ba>
 800a04c:	6843      	ldr	r3, [r0, #4]
 800a04e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800a050:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800a054:	d1eb      	bne.n	800a02e <rclc_executor_spin_some.part.0+0x2ba>
 800a056:	f893 2044 	ldrb.w	r2, [r3, #68]	@ 0x44
 800a05a:	2a00      	cmp	r2, #0
 800a05c:	d1e7      	bne.n	800a02e <rclc_executor_spin_some.part.0+0x2ba>
 800a05e:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 800a062:	2b00      	cmp	r3, #0
 800a064:	d0c3      	beq.n	8009fee <rclc_executor_spin_some.part.0+0x27a>
 800a066:	e7e2      	b.n	800a02e <rclc_executor_spin_some.part.0+0x2ba>
 800a068:	270b      	movs	r7, #11
 800a06a:	e77d      	b.n	8009f68 <rclc_executor_spin_some.part.0+0x1f4>
 800a06c:	686a      	ldr	r2, [r5, #4]
 800a06e:	e6e2      	b.n	8009e36 <rclc_executor_spin_some.part.0+0xc2>
 800a070:	686a      	ldr	r2, [r5, #4]
 800a072:	e7a2      	b.n	8009fba <rclc_executor_spin_some.part.0+0x246>
 800a074:	6842      	ldr	r2, [r0, #4]
 800a076:	6a11      	ldr	r1, [r2, #32]
 800a078:	2900      	cmp	r1, #0
 800a07a:	f47f af21 	bne.w	8009ec0 <rclc_executor_spin_some.part.0+0x14c>
 800a07e:	f892 2024 	ldrb.w	r2, [r2, #36]	@ 0x24
 800a082:	2a00      	cmp	r2, #0
 800a084:	f43f af0a 	beq.w	8009e9c <rclc_executor_spin_some.part.0+0x128>
 800a088:	e71a      	b.n	8009ec0 <rclc_executor_spin_some.part.0+0x14c>
 800a08a:	6842      	ldr	r2, [r0, #4]
 800a08c:	6c11      	ldr	r1, [r2, #64]	@ 0x40
 800a08e:	f031 417f 	bics.w	r1, r1, #4278190080	@ 0xff000000
 800a092:	f47f af15 	bne.w	8009ec0 <rclc_executor_spin_some.part.0+0x14c>
 800a096:	f892 1044 	ldrb.w	r1, [r2, #68]	@ 0x44
 800a09a:	2900      	cmp	r1, #0
 800a09c:	f47f af10 	bne.w	8009ec0 <rclc_executor_spin_some.part.0+0x14c>
 800a0a0:	f892 2043 	ldrb.w	r2, [r2, #67]	@ 0x43
 800a0a4:	2a00      	cmp	r2, #0
 800a0a6:	f43f aef9 	beq.w	8009e9c <rclc_executor_spin_some.part.0+0x128>
 800a0aa:	e709      	b.n	8009ec0 <rclc_executor_spin_some.part.0+0x14c>
 800a0ac:	686a      	ldr	r2, [r5, #4]
 800a0ae:	461c      	mov	r4, r3
 800a0b0:	e783      	b.n	8009fba <rclc_executor_spin_some.part.0+0x246>
 800a0b2:	686a      	ldr	r2, [r5, #4]
 800a0b4:	461c      	mov	r4, r3
 800a0b6:	e6be      	b.n	8009e36 <rclc_executor_spin_some.part.0+0xc2>

0800a0b8 <rclc_executor_spin_some>:
 800a0b8:	b190      	cbz	r0, 800a0e0 <rclc_executor_spin_some+0x28>
 800a0ba:	b570      	push	{r4, r5, r6, lr}
 800a0bc:	4604      	mov	r4, r0
 800a0be:	6800      	ldr	r0, [r0, #0]
 800a0c0:	4616      	mov	r6, r2
 800a0c2:	461d      	mov	r5, r3
 800a0c4:	f005 fe0c 	bl	800fce0 <rcl_context_is_valid>
 800a0c8:	b130      	cbz	r0, 800a0d8 <rclc_executor_spin_some+0x20>
 800a0ca:	4632      	mov	r2, r6
 800a0cc:	462b      	mov	r3, r5
 800a0ce:	4620      	mov	r0, r4
 800a0d0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800a0d4:	f7ff be4e 	b.w	8009d74 <rclc_executor_spin_some.part.0>
 800a0d8:	f000 f932 	bl	800a340 <rcutils_reset_error>
 800a0dc:	2001      	movs	r0, #1
 800a0de:	bd70      	pop	{r4, r5, r6, pc}
 800a0e0:	200b      	movs	r0, #11
 800a0e2:	4770      	bx	lr

0800a0e4 <rclc_executor_handle_counters_zero_init>:
 800a0e4:	b130      	cbz	r0, 800a0f4 <rclc_executor_handle_counters_zero_init+0x10>
 800a0e6:	b508      	push	{r3, lr}
 800a0e8:	2220      	movs	r2, #32
 800a0ea:	2100      	movs	r1, #0
 800a0ec:	f00b fb98 	bl	8015820 <memset>
 800a0f0:	2000      	movs	r0, #0
 800a0f2:	bd08      	pop	{r3, pc}
 800a0f4:	200b      	movs	r0, #11
 800a0f6:	4770      	bx	lr

0800a0f8 <rclc_executor_handle_init>:
 800a0f8:	b168      	cbz	r0, 800a116 <rclc_executor_handle_init+0x1e>
 800a0fa:	ed9f 7b09 	vldr	d7, [pc, #36]	@ 800a120 <rclc_executor_handle_init+0x28>
 800a0fe:	2300      	movs	r3, #0
 800a100:	220b      	movs	r2, #11
 800a102:	ed80 7b0a 	vstr	d7, [r0, #40]	@ 0x28
 800a106:	e9c0 3301 	strd	r3, r3, [r0, #4]
 800a10a:	e9c0 310c 	strd	r3, r1, [r0, #48]	@ 0x30
 800a10e:	8002      	strh	r2, [r0, #0]
 800a110:	8703      	strh	r3, [r0, #56]	@ 0x38
 800a112:	4618      	mov	r0, r3
 800a114:	4770      	bx	lr
 800a116:	200b      	movs	r0, #11
 800a118:	4770      	bx	lr
 800a11a:	bf00      	nop
 800a11c:	f3af 8000 	nop.w
	...

0800a128 <rclc_support_init_with_options>:
 800a128:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800a12c:	b083      	sub	sp, #12
 800a12e:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 800a130:	b340      	cbz	r0, 800a184 <rclc_support_init_with_options+0x5c>
 800a132:	461d      	mov	r5, r3
 800a134:	b333      	cbz	r3, 800a184 <rclc_support_init_with_options+0x5c>
 800a136:	b32e      	cbz	r6, 800a184 <rclc_support_init_with_options+0x5c>
 800a138:	46e9      	mov	r9, sp
 800a13a:	4604      	mov	r4, r0
 800a13c:	4648      	mov	r0, r9
 800a13e:	460f      	mov	r7, r1
 800a140:	4690      	mov	r8, r2
 800a142:	f005 fdc3 	bl	800fccc <rcl_get_zero_initialized_context>
 800a146:	e899 0003 	ldmia.w	r9, {r0, r1}
 800a14a:	462a      	mov	r2, r5
 800a14c:	e884 0003 	stmia.w	r4, {r0, r1}
 800a150:	4623      	mov	r3, r4
 800a152:	4641      	mov	r1, r8
 800a154:	4638      	mov	r0, r7
 800a156:	f005 fe29 	bl	800fdac <rcl_init>
 800a15a:	4605      	mov	r5, r0
 800a15c:	b960      	cbnz	r0, 800a178 <rclc_support_init_with_options+0x50>
 800a15e:	60a6      	str	r6, [r4, #8]
 800a160:	4632      	mov	r2, r6
 800a162:	f104 010c 	add.w	r1, r4, #12
 800a166:	2003      	movs	r0, #3
 800a168:	f006 fc52 	bl	8010a10 <rcl_clock_init>
 800a16c:	4605      	mov	r5, r0
 800a16e:	b918      	cbnz	r0, 800a178 <rclc_support_init_with_options+0x50>
 800a170:	4628      	mov	r0, r5
 800a172:	b003      	add	sp, #12
 800a174:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a178:	f000 f8e2 	bl	800a340 <rcutils_reset_error>
 800a17c:	4628      	mov	r0, r5
 800a17e:	b003      	add	sp, #12
 800a180:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a184:	250b      	movs	r5, #11
 800a186:	4628      	mov	r0, r5
 800a188:	b003      	add	sp, #12
 800a18a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a18e:	bf00      	nop

0800a190 <rclc_node_init_default>:
 800a190:	b3b8      	cbz	r0, 800a202 <rclc_node_init_default+0x72>
 800a192:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800a196:	460d      	mov	r5, r1
 800a198:	b0a1      	sub	sp, #132	@ 0x84
 800a19a:	b329      	cbz	r1, 800a1e8 <rclc_node_init_default+0x58>
 800a19c:	4616      	mov	r6, r2
 800a19e:	b31a      	cbz	r2, 800a1e8 <rclc_node_init_default+0x58>
 800a1a0:	461f      	mov	r7, r3
 800a1a2:	b30b      	cbz	r3, 800a1e8 <rclc_node_init_default+0x58>
 800a1a4:	f10d 0810 	add.w	r8, sp, #16
 800a1a8:	4604      	mov	r4, r0
 800a1aa:	4640      	mov	r0, r8
 800a1ac:	f005 ff24 	bl	800fff8 <rcl_get_zero_initialized_node>
 800a1b0:	e898 0003 	ldmia.w	r8, {r0, r1}
 800a1b4:	f10d 0918 	add.w	r9, sp, #24
 800a1b8:	e884 0003 	stmia.w	r4, {r0, r1}
 800a1bc:	4648      	mov	r0, r9
 800a1be:	f006 f893 	bl	80102e8 <rcl_node_get_default_options>
 800a1c2:	4640      	mov	r0, r8
 800a1c4:	f005 ff18 	bl	800fff8 <rcl_get_zero_initialized_node>
 800a1c8:	f8cd 9000 	str.w	r9, [sp]
 800a1cc:	e898 0003 	ldmia.w	r8, {r0, r1}
 800a1d0:	463b      	mov	r3, r7
 800a1d2:	e884 0003 	stmia.w	r4, {r0, r1}
 800a1d6:	4632      	mov	r2, r6
 800a1d8:	4629      	mov	r1, r5
 800a1da:	4620      	mov	r0, r4
 800a1dc:	f005 ff16 	bl	801000c <rcl_node_init>
 800a1e0:	b930      	cbnz	r0, 800a1f0 <rclc_node_init_default+0x60>
 800a1e2:	b021      	add	sp, #132	@ 0x84
 800a1e4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a1e8:	200b      	movs	r0, #11
 800a1ea:	b021      	add	sp, #132	@ 0x84
 800a1ec:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a1f0:	9003      	str	r0, [sp, #12]
 800a1f2:	f000 f8a5 	bl	800a340 <rcutils_reset_error>
 800a1f6:	f000 f8a3 	bl	800a340 <rcutils_reset_error>
 800a1fa:	9803      	ldr	r0, [sp, #12]
 800a1fc:	b021      	add	sp, #132	@ 0x84
 800a1fe:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a202:	200b      	movs	r0, #11
 800a204:	4770      	bx	lr
 800a206:	bf00      	nop

0800a208 <rclc_subscription_init_default>:
 800a208:	b368      	cbz	r0, 800a266 <rclc_subscription_init_default+0x5e>
 800a20a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a20e:	460d      	mov	r5, r1
 800a210:	b0a0      	sub	sp, #128	@ 0x80
 800a212:	b321      	cbz	r1, 800a25e <rclc_subscription_init_default+0x56>
 800a214:	4616      	mov	r6, r2
 800a216:	b312      	cbz	r2, 800a25e <rclc_subscription_init_default+0x56>
 800a218:	461f      	mov	r7, r3
 800a21a:	b303      	cbz	r3, 800a25e <rclc_subscription_init_default+0x56>
 800a21c:	4604      	mov	r4, r0
 800a21e:	f006 fa9b 	bl	8010758 <rcl_get_zero_initialized_subscription>
 800a222:	f10d 0810 	add.w	r8, sp, #16
 800a226:	6020      	str	r0, [r4, #0]
 800a228:	4640      	mov	r0, r8
 800a22a:	f006 fb43 	bl	80108b4 <rcl_subscription_get_default_options>
 800a22e:	490f      	ldr	r1, [pc, #60]	@ (800a26c <rclc_subscription_init_default+0x64>)
 800a230:	2250      	movs	r2, #80	@ 0x50
 800a232:	4640      	mov	r0, r8
 800a234:	f00b fbbd 	bl	80159b2 <memcpy>
 800a238:	f8cd 8000 	str.w	r8, [sp]
 800a23c:	463b      	mov	r3, r7
 800a23e:	4632      	mov	r2, r6
 800a240:	4629      	mov	r1, r5
 800a242:	4620      	mov	r0, r4
 800a244:	f006 fa8e 	bl	8010764 <rcl_subscription_init>
 800a248:	b910      	cbnz	r0, 800a250 <rclc_subscription_init_default+0x48>
 800a24a:	b020      	add	sp, #128	@ 0x80
 800a24c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a250:	9003      	str	r0, [sp, #12]
 800a252:	f000 f875 	bl	800a340 <rcutils_reset_error>
 800a256:	9803      	ldr	r0, [sp, #12]
 800a258:	b020      	add	sp, #128	@ 0x80
 800a25a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a25e:	200b      	movs	r0, #11
 800a260:	b020      	add	sp, #128	@ 0x80
 800a262:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a266:	200b      	movs	r0, #11
 800a268:	4770      	bx	lr
 800a26a:	bf00      	nop
 800a26c:	08016930 	.word	0x08016930

0800a270 <__default_zero_allocate>:
 800a270:	f00a be4a 	b.w	8014f08 <calloc>

0800a274 <__default_reallocate>:
 800a274:	f00a bfd6 	b.w	8015224 <realloc>

0800a278 <__default_deallocate>:
 800a278:	f00a beb2 	b.w	8014fe0 <free>

0800a27c <__default_allocate>:
 800a27c:	f00a bea8 	b.w	8014fd0 <malloc>

0800a280 <rcutils_get_zero_initialized_allocator>:
 800a280:	b510      	push	{r4, lr}
 800a282:	4c05      	ldr	r4, [pc, #20]	@ (800a298 <rcutils_get_zero_initialized_allocator+0x18>)
 800a284:	4686      	mov	lr, r0
 800a286:	4684      	mov	ip, r0
 800a288:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800a28a:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800a28e:	6823      	ldr	r3, [r4, #0]
 800a290:	f8cc 3000 	str.w	r3, [ip]
 800a294:	4670      	mov	r0, lr
 800a296:	bd10      	pop	{r4, pc}
 800a298:	08016980 	.word	0x08016980

0800a29c <rcutils_set_default_allocator>:
 800a29c:	b1a8      	cbz	r0, 800a2ca <rcutils_set_default_allocator+0x2e>
 800a29e:	6802      	ldr	r2, [r0, #0]
 800a2a0:	b1a2      	cbz	r2, 800a2cc <rcutils_set_default_allocator+0x30>
 800a2a2:	6841      	ldr	r1, [r0, #4]
 800a2a4:	b1a1      	cbz	r1, 800a2d0 <rcutils_set_default_allocator+0x34>
 800a2a6:	b410      	push	{r4}
 800a2a8:	68c4      	ldr	r4, [r0, #12]
 800a2aa:	b164      	cbz	r4, 800a2c6 <rcutils_set_default_allocator+0x2a>
 800a2ac:	6880      	ldr	r0, [r0, #8]
 800a2ae:	b138      	cbz	r0, 800a2c0 <rcutils_set_default_allocator+0x24>
 800a2b0:	4b08      	ldr	r3, [pc, #32]	@ (800a2d4 <rcutils_set_default_allocator+0x38>)
 800a2b2:	601a      	str	r2, [r3, #0]
 800a2b4:	2200      	movs	r2, #0
 800a2b6:	e9c3 4203 	strd	r4, r2, [r3, #12]
 800a2ba:	e9c3 1001 	strd	r1, r0, [r3, #4]
 800a2be:	2001      	movs	r0, #1
 800a2c0:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a2c4:	4770      	bx	lr
 800a2c6:	4620      	mov	r0, r4
 800a2c8:	e7fa      	b.n	800a2c0 <rcutils_set_default_allocator+0x24>
 800a2ca:	4770      	bx	lr
 800a2cc:	4610      	mov	r0, r2
 800a2ce:	4770      	bx	lr
 800a2d0:	4608      	mov	r0, r1
 800a2d2:	4770      	bx	lr
 800a2d4:	20000014 	.word	0x20000014

0800a2d8 <rcutils_get_default_allocator>:
 800a2d8:	b510      	push	{r4, lr}
 800a2da:	4c05      	ldr	r4, [pc, #20]	@ (800a2f0 <rcutils_get_default_allocator+0x18>)
 800a2dc:	4686      	mov	lr, r0
 800a2de:	4684      	mov	ip, r0
 800a2e0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800a2e2:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800a2e6:	6823      	ldr	r3, [r4, #0]
 800a2e8:	f8cc 3000 	str.w	r3, [ip]
 800a2ec:	4670      	mov	r0, lr
 800a2ee:	bd10      	pop	{r4, pc}
 800a2f0:	20000014 	.word	0x20000014

0800a2f4 <rcutils_allocator_is_valid>:
 800a2f4:	b158      	cbz	r0, 800a30e <rcutils_allocator_is_valid+0x1a>
 800a2f6:	6803      	ldr	r3, [r0, #0]
 800a2f8:	b143      	cbz	r3, 800a30c <rcutils_allocator_is_valid+0x18>
 800a2fa:	6843      	ldr	r3, [r0, #4]
 800a2fc:	b133      	cbz	r3, 800a30c <rcutils_allocator_is_valid+0x18>
 800a2fe:	68c3      	ldr	r3, [r0, #12]
 800a300:	b123      	cbz	r3, 800a30c <rcutils_allocator_is_valid+0x18>
 800a302:	6880      	ldr	r0, [r0, #8]
 800a304:	3800      	subs	r0, #0
 800a306:	bf18      	it	ne
 800a308:	2001      	movne	r0, #1
 800a30a:	4770      	bx	lr
 800a30c:	4618      	mov	r0, r3
 800a30e:	4770      	bx	lr

0800a310 <rcutils_get_error_string>:
 800a310:	4b06      	ldr	r3, [pc, #24]	@ (800a32c <rcutils_get_error_string+0x1c>)
 800a312:	781b      	ldrb	r3, [r3, #0]
 800a314:	b13b      	cbz	r3, 800a326 <rcutils_get_error_string+0x16>
 800a316:	4b06      	ldr	r3, [pc, #24]	@ (800a330 <rcutils_get_error_string+0x20>)
 800a318:	781a      	ldrb	r2, [r3, #0]
 800a31a:	b90a      	cbnz	r2, 800a320 <rcutils_get_error_string+0x10>
 800a31c:	2201      	movs	r2, #1
 800a31e:	701a      	strb	r2, [r3, #0]
 800a320:	4b04      	ldr	r3, [pc, #16]	@ (800a334 <rcutils_get_error_string+0x24>)
 800a322:	7818      	ldrb	r0, [r3, #0]
 800a324:	4770      	bx	lr
 800a326:	4b04      	ldr	r3, [pc, #16]	@ (800a338 <rcutils_get_error_string+0x28>)
 800a328:	7818      	ldrb	r0, [r3, #0]
 800a32a:	4770      	bx	lr
 800a32c:	20009134 	.word	0x20009134
 800a330:	20009149 	.word	0x20009149
 800a334:	20009148 	.word	0x20009148
 800a338:	08016994 	.word	0x08016994
 800a33c:	00000000 	.word	0x00000000

0800a340 <rcutils_reset_error>:
 800a340:	ed9f 7b07 	vldr	d7, [pc, #28]	@ 800a360 <rcutils_reset_error+0x20>
 800a344:	4a08      	ldr	r2, [pc, #32]	@ (800a368 <rcutils_reset_error+0x28>)
 800a346:	4809      	ldr	r0, [pc, #36]	@ (800a36c <rcutils_reset_error+0x2c>)
 800a348:	4909      	ldr	r1, [pc, #36]	@ (800a370 <rcutils_reset_error+0x30>)
 800a34a:	2300      	movs	r3, #0
 800a34c:	8013      	strh	r3, [r2, #0]
 800a34e:	ed82 7b02 	vstr	d7, [r2, #8]
 800a352:	4a08      	ldr	r2, [pc, #32]	@ (800a374 <rcutils_reset_error+0x34>)
 800a354:	7003      	strb	r3, [r0, #0]
 800a356:	700b      	strb	r3, [r1, #0]
 800a358:	7013      	strb	r3, [r2, #0]
 800a35a:	4770      	bx	lr
 800a35c:	f3af 8000 	nop.w
	...
 800a368:	20009138 	.word	0x20009138
 800a36c:	20009149 	.word	0x20009149
 800a370:	20009148 	.word	0x20009148
 800a374:	20009134 	.word	0x20009134

0800a378 <rcutils_system_time_now>:
 800a378:	b308      	cbz	r0, 800a3be <rcutils_system_time_now+0x46>
 800a37a:	b570      	push	{r4, r5, r6, lr}
 800a37c:	b084      	sub	sp, #16
 800a37e:	4604      	mov	r4, r0
 800a380:	4669      	mov	r1, sp
 800a382:	2001      	movs	r0, #1
 800a384:	f7f7 ff38 	bl	80021f8 <clock_gettime>
 800a388:	e9dd 3500 	ldrd	r3, r5, [sp]
 800a38c:	2d00      	cmp	r5, #0
 800a38e:	db13      	blt.n	800a3b8 <rcutils_system_time_now+0x40>
 800a390:	9902      	ldr	r1, [sp, #8]
 800a392:	2900      	cmp	r1, #0
 800a394:	db0d      	blt.n	800a3b2 <rcutils_system_time_now+0x3a>
 800a396:	4e0b      	ldr	r6, [pc, #44]	@ (800a3c4 <rcutils_system_time_now+0x4c>)
 800a398:	fba3 3206 	umull	r3, r2, r3, r6
 800a39c:	185b      	adds	r3, r3, r1
 800a39e:	fb06 2205 	mla	r2, r6, r5, r2
 800a3a2:	f04f 0000 	mov.w	r0, #0
 800a3a6:	eb42 72e1 	adc.w	r2, r2, r1, asr #31
 800a3aa:	e9c4 3200 	strd	r3, r2, [r4]
 800a3ae:	b004      	add	sp, #16
 800a3b0:	bd70      	pop	{r4, r5, r6, pc}
 800a3b2:	ea53 0205 	orrs.w	r2, r3, r5
 800a3b6:	d1ee      	bne.n	800a396 <rcutils_system_time_now+0x1e>
 800a3b8:	2002      	movs	r0, #2
 800a3ba:	b004      	add	sp, #16
 800a3bc:	bd70      	pop	{r4, r5, r6, pc}
 800a3be:	200b      	movs	r0, #11
 800a3c0:	4770      	bx	lr
 800a3c2:	bf00      	nop
 800a3c4:	3b9aca00 	.word	0x3b9aca00

0800a3c8 <rcutils_steady_time_now>:
 800a3c8:	b308      	cbz	r0, 800a40e <rcutils_steady_time_now+0x46>
 800a3ca:	b570      	push	{r4, r5, r6, lr}
 800a3cc:	b084      	sub	sp, #16
 800a3ce:	4604      	mov	r4, r0
 800a3d0:	4669      	mov	r1, sp
 800a3d2:	2000      	movs	r0, #0
 800a3d4:	f7f7 ff10 	bl	80021f8 <clock_gettime>
 800a3d8:	e9dd 3500 	ldrd	r3, r5, [sp]
 800a3dc:	2d00      	cmp	r5, #0
 800a3de:	db13      	blt.n	800a408 <rcutils_steady_time_now+0x40>
 800a3e0:	9902      	ldr	r1, [sp, #8]
 800a3e2:	2900      	cmp	r1, #0
 800a3e4:	db0d      	blt.n	800a402 <rcutils_steady_time_now+0x3a>
 800a3e6:	4e0b      	ldr	r6, [pc, #44]	@ (800a414 <rcutils_steady_time_now+0x4c>)
 800a3e8:	fba3 3206 	umull	r3, r2, r3, r6
 800a3ec:	185b      	adds	r3, r3, r1
 800a3ee:	fb06 2205 	mla	r2, r6, r5, r2
 800a3f2:	f04f 0000 	mov.w	r0, #0
 800a3f6:	eb42 72e1 	adc.w	r2, r2, r1, asr #31
 800a3fa:	e9c4 3200 	strd	r3, r2, [r4]
 800a3fe:	b004      	add	sp, #16
 800a400:	bd70      	pop	{r4, r5, r6, pc}
 800a402:	ea53 0205 	orrs.w	r2, r3, r5
 800a406:	d1ee      	bne.n	800a3e6 <rcutils_steady_time_now+0x1e>
 800a408:	2002      	movs	r0, #2
 800a40a:	b004      	add	sp, #16
 800a40c:	bd70      	pop	{r4, r5, r6, pc}
 800a40e:	200b      	movs	r0, #11
 800a410:	4770      	bx	lr
 800a412:	bf00      	nop
 800a414:	3b9aca00 	.word	0x3b9aca00

0800a418 <rmw_get_zero_initialized_init_options>:
 800a418:	b510      	push	{r4, lr}
 800a41a:	2238      	movs	r2, #56	@ 0x38
 800a41c:	4604      	mov	r4, r0
 800a41e:	2100      	movs	r1, #0
 800a420:	f00b f9fe 	bl	8015820 <memset>
 800a424:	f104 0010 	add.w	r0, r4, #16
 800a428:	f000 f806 	bl	800a438 <rmw_get_default_security_options>
 800a42c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800a430:	60e3      	str	r3, [r4, #12]
 800a432:	4620      	mov	r0, r4
 800a434:	bd10      	pop	{r4, pc}
 800a436:	bf00      	nop

0800a438 <rmw_get_default_security_options>:
 800a438:	2200      	movs	r2, #0
 800a43a:	7002      	strb	r2, [r0, #0]
 800a43c:	6042      	str	r2, [r0, #4]
 800a43e:	4770      	bx	lr

0800a440 <rmw_uros_set_custom_transport>:
 800a440:	b470      	push	{r4, r5, r6}
 800a442:	e9dd 5603 	ldrd	r5, r6, [sp, #12]
 800a446:	b162      	cbz	r2, 800a462 <rmw_uros_set_custom_transport+0x22>
 800a448:	b15b      	cbz	r3, 800a462 <rmw_uros_set_custom_transport+0x22>
 800a44a:	b155      	cbz	r5, 800a462 <rmw_uros_set_custom_transport+0x22>
 800a44c:	b14e      	cbz	r6, 800a462 <rmw_uros_set_custom_transport+0x22>
 800a44e:	4c06      	ldr	r4, [pc, #24]	@ (800a468 <rmw_uros_set_custom_transport+0x28>)
 800a450:	7020      	strb	r0, [r4, #0]
 800a452:	e9c4 1201 	strd	r1, r2, [r4, #4]
 800a456:	e9c4 3503 	strd	r3, r5, [r4, #12]
 800a45a:	6166      	str	r6, [r4, #20]
 800a45c:	2000      	movs	r0, #0
 800a45e:	bc70      	pop	{r4, r5, r6}
 800a460:	4770      	bx	lr
 800a462:	200b      	movs	r0, #11
 800a464:	bc70      	pop	{r4, r5, r6}
 800a466:	4770      	bx	lr
 800a468:	2000914c 	.word	0x2000914c

0800a46c <rmw_init_options_init>:
 800a46c:	b084      	sub	sp, #16
 800a46e:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a470:	b083      	sub	sp, #12
 800a472:	ad09      	add	r5, sp, #36	@ 0x24
 800a474:	e885 000e 	stmia.w	r5, {r1, r2, r3}
 800a478:	b130      	cbz	r0, 800a488 <rmw_init_options_init+0x1c>
 800a47a:	4604      	mov	r4, r0
 800a47c:	4628      	mov	r0, r5
 800a47e:	f7ff ff39 	bl	800a2f4 <rcutils_allocator_is_valid>
 800a482:	b108      	cbz	r0, 800a488 <rmw_init_options_init+0x1c>
 800a484:	68a6      	ldr	r6, [r4, #8]
 800a486:	b12e      	cbz	r6, 800a494 <rmw_init_options_init+0x28>
 800a488:	200b      	movs	r0, #11
 800a48a:	b003      	add	sp, #12
 800a48c:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 800a490:	b004      	add	sp, #16
 800a492:	4770      	bx	lr
 800a494:	2200      	movs	r2, #0
 800a496:	2300      	movs	r3, #0
 800a498:	e9c4 2300 	strd	r2, r3, [r4]
 800a49c:	4b22      	ldr	r3, [pc, #136]	@ (800a528 <rmw_init_options_init+0xbc>)
 800a49e:	f8df e098 	ldr.w	lr, [pc, #152]	@ 800a538 <rmw_init_options_init+0xcc>
 800a4a2:	681b      	ldr	r3, [r3, #0]
 800a4a4:	60a3      	str	r3, [r4, #8]
 800a4a6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800a4a8:	f104 0c20 	add.w	ip, r4, #32
 800a4ac:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800a4b0:	466f      	mov	r7, sp
 800a4b2:	682b      	ldr	r3, [r5, #0]
 800a4b4:	f8cc 3000 	str.w	r3, [ip]
 800a4b8:	4638      	mov	r0, r7
 800a4ba:	f8c4 e01c 	str.w	lr, [r4, #28]
 800a4be:	60e6      	str	r6, [r4, #12]
 800a4c0:	f7ff ffba 	bl	800a438 <rmw_get_default_security_options>
 800a4c4:	e897 0003 	ldmia.w	r7, {r0, r1}
 800a4c8:	f104 0310 	add.w	r3, r4, #16
 800a4cc:	e883 0003 	stmia.w	r3, {r0, r1}
 800a4d0:	2203      	movs	r2, #3
 800a4d2:	4816      	ldr	r0, [pc, #88]	@ (800a52c <rmw_init_options_init+0xc0>)
 800a4d4:	4916      	ldr	r1, [pc, #88]	@ (800a530 <rmw_init_options_init+0xc4>)
 800a4d6:	7626      	strb	r6, [r4, #24]
 800a4d8:	f000 fe3c 	bl	800b154 <rmw_uxrce_init_init_options_impl_memory>
 800a4dc:	4813      	ldr	r0, [pc, #76]	@ (800a52c <rmw_init_options_init+0xc0>)
 800a4de:	f008 fe13 	bl	8013108 <get_memory>
 800a4e2:	b1f0      	cbz	r0, 800a522 <rmw_init_options_init+0xb6>
 800a4e4:	4a13      	ldr	r2, [pc, #76]	@ (800a534 <rmw_init_options_init+0xc8>)
 800a4e6:	6883      	ldr	r3, [r0, #8]
 800a4e8:	6851      	ldr	r1, [r2, #4]
 800a4ea:	7810      	ldrb	r0, [r2, #0]
 800a4ec:	6363      	str	r3, [r4, #52]	@ 0x34
 800a4ee:	7418      	strb	r0, [r3, #16]
 800a4f0:	6159      	str	r1, [r3, #20]
 800a4f2:	68d1      	ldr	r1, [r2, #12]
 800a4f4:	61d9      	str	r1, [r3, #28]
 800a4f6:	6911      	ldr	r1, [r2, #16]
 800a4f8:	6219      	str	r1, [r3, #32]
 800a4fa:	6951      	ldr	r1, [r2, #20]
 800a4fc:	6892      	ldr	r2, [r2, #8]
 800a4fe:	619a      	str	r2, [r3, #24]
 800a500:	6259      	str	r1, [r3, #36]	@ 0x24
 800a502:	f004 fb77 	bl	800ebf4 <uxr_nanos>
 800a506:	f00a fe21 	bl	801514c <srand>
 800a50a:	f00a fe4d 	bl	80151a8 <rand>
 800a50e:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800a510:	6298      	str	r0, [r3, #40]	@ 0x28
 800a512:	2800      	cmp	r0, #0
 800a514:	d0f9      	beq.n	800a50a <rmw_init_options_init+0x9e>
 800a516:	2000      	movs	r0, #0
 800a518:	b003      	add	sp, #12
 800a51a:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 800a51e:	b004      	add	sp, #16
 800a520:	4770      	bx	lr
 800a522:	2001      	movs	r0, #1
 800a524:	e7b1      	b.n	800a48a <rmw_init_options_init+0x1e>
 800a526:	bf00      	nop
 800a528:	080172ec 	.word	0x080172ec
 800a52c:	2000da64 	.word	0x2000da64
 800a530:	20009300 	.word	0x20009300
 800a534:	2000914c 	.word	0x2000914c
 800a538:	08016998 	.word	0x08016998

0800a53c <rmw_init_options_copy>:
 800a53c:	b570      	push	{r4, r5, r6, lr}
 800a53e:	b158      	cbz	r0, 800a558 <rmw_init_options_copy+0x1c>
 800a540:	460d      	mov	r5, r1
 800a542:	b149      	cbz	r1, 800a558 <rmw_init_options_copy+0x1c>
 800a544:	4604      	mov	r4, r0
 800a546:	6880      	ldr	r0, [r0, #8]
 800a548:	b120      	cbz	r0, 800a554 <rmw_init_options_copy+0x18>
 800a54a:	4b1e      	ldr	r3, [pc, #120]	@ (800a5c4 <rmw_init_options_copy+0x88>)
 800a54c:	6819      	ldr	r1, [r3, #0]
 800a54e:	f7f5 fe47 	bl	80001e0 <strcmp>
 800a552:	bb90      	cbnz	r0, 800a5ba <rmw_init_options_copy+0x7e>
 800a554:	68ab      	ldr	r3, [r5, #8]
 800a556:	b113      	cbz	r3, 800a55e <rmw_init_options_copy+0x22>
 800a558:	250b      	movs	r5, #11
 800a55a:	4628      	mov	r0, r5
 800a55c:	bd70      	pop	{r4, r5, r6, pc}
 800a55e:	4623      	mov	r3, r4
 800a560:	462a      	mov	r2, r5
 800a562:	f104 0630 	add.w	r6, r4, #48	@ 0x30
 800a566:	f8d3 c000 	ldr.w	ip, [r3]
 800a56a:	6858      	ldr	r0, [r3, #4]
 800a56c:	6899      	ldr	r1, [r3, #8]
 800a56e:	f8d3 e00c 	ldr.w	lr, [r3, #12]
 800a572:	f8c2 e00c 	str.w	lr, [r2, #12]
 800a576:	3310      	adds	r3, #16
 800a578:	42b3      	cmp	r3, r6
 800a57a:	f8c2 c000 	str.w	ip, [r2]
 800a57e:	6050      	str	r0, [r2, #4]
 800a580:	6091      	str	r1, [r2, #8]
 800a582:	f102 0210 	add.w	r2, r2, #16
 800a586:	d1ee      	bne.n	800a566 <rmw_init_options_copy+0x2a>
 800a588:	6819      	ldr	r1, [r3, #0]
 800a58a:	685b      	ldr	r3, [r3, #4]
 800a58c:	480e      	ldr	r0, [pc, #56]	@ (800a5c8 <rmw_init_options_copy+0x8c>)
 800a58e:	6053      	str	r3, [r2, #4]
 800a590:	6011      	str	r1, [r2, #0]
 800a592:	f008 fdb9 	bl	8013108 <get_memory>
 800a596:	b198      	cbz	r0, 800a5c0 <rmw_init_options_copy+0x84>
 800a598:	6883      	ldr	r3, [r0, #8]
 800a59a:	636b      	str	r3, [r5, #52]	@ 0x34
 800a59c:	6b62      	ldr	r2, [r4, #52]	@ 0x34
 800a59e:	f102 0c10 	add.w	ip, r2, #16
 800a5a2:	f103 0410 	add.w	r4, r3, #16
 800a5a6:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800a5aa:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800a5ac:	e89c 0007 	ldmia.w	ip, {r0, r1, r2}
 800a5b0:	2500      	movs	r5, #0
 800a5b2:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800a5b6:	4628      	mov	r0, r5
 800a5b8:	bd70      	pop	{r4, r5, r6, pc}
 800a5ba:	250c      	movs	r5, #12
 800a5bc:	4628      	mov	r0, r5
 800a5be:	bd70      	pop	{r4, r5, r6, pc}
 800a5c0:	2501      	movs	r5, #1
 800a5c2:	e7ca      	b.n	800a55a <rmw_init_options_copy+0x1e>
 800a5c4:	080172ec 	.word	0x080172ec
 800a5c8:	2000da64 	.word	0x2000da64

0800a5cc <rmw_init_options_fini>:
 800a5cc:	2800      	cmp	r0, #0
 800a5ce:	d03d      	beq.n	800a64c <rmw_init_options_fini+0x80>
 800a5d0:	b510      	push	{r4, lr}
 800a5d2:	4604      	mov	r4, r0
 800a5d4:	b08e      	sub	sp, #56	@ 0x38
 800a5d6:	3020      	adds	r0, #32
 800a5d8:	f7ff fe8c 	bl	800a2f4 <rcutils_allocator_is_valid>
 800a5dc:	b360      	cbz	r0, 800a638 <rmw_init_options_fini+0x6c>
 800a5de:	68a0      	ldr	r0, [r4, #8]
 800a5e0:	b120      	cbz	r0, 800a5ec <rmw_init_options_fini+0x20>
 800a5e2:	4b1c      	ldr	r3, [pc, #112]	@ (800a654 <rmw_init_options_fini+0x88>)
 800a5e4:	6819      	ldr	r1, [r3, #0]
 800a5e6:	f7f5 fdfb 	bl	80001e0 <strcmp>
 800a5ea:	bb68      	cbnz	r0, 800a648 <rmw_init_options_fini+0x7c>
 800a5ec:	4b1a      	ldr	r3, [pc, #104]	@ (800a658 <rmw_init_options_fini+0x8c>)
 800a5ee:	6819      	ldr	r1, [r3, #0]
 800a5f0:	b331      	cbz	r1, 800a640 <rmw_init_options_fini+0x74>
 800a5f2:	6b62      	ldr	r2, [r4, #52]	@ 0x34
 800a5f4:	e001      	b.n	800a5fa <rmw_init_options_fini+0x2e>
 800a5f6:	6849      	ldr	r1, [r1, #4]
 800a5f8:	b311      	cbz	r1, 800a640 <rmw_init_options_fini+0x74>
 800a5fa:	688b      	ldr	r3, [r1, #8]
 800a5fc:	429a      	cmp	r2, r3
 800a5fe:	d1fa      	bne.n	800a5f6 <rmw_init_options_fini+0x2a>
 800a600:	4815      	ldr	r0, [pc, #84]	@ (800a658 <rmw_init_options_fini+0x8c>)
 800a602:	f008 fd91 	bl	8013128 <put_memory>
 800a606:	4668      	mov	r0, sp
 800a608:	f7ff ff06 	bl	800a418 <rmw_get_zero_initialized_init_options>
 800a60c:	46ee      	mov	lr, sp
 800a60e:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800a612:	46a4      	mov	ip, r4
 800a614:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800a618:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800a61c:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800a620:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800a624:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800a628:	e89e 0003 	ldmia.w	lr, {r0, r1}
 800a62c:	e88c 0003 	stmia.w	ip, {r0, r1}
 800a630:	2300      	movs	r3, #0
 800a632:	4618      	mov	r0, r3
 800a634:	b00e      	add	sp, #56	@ 0x38
 800a636:	bd10      	pop	{r4, pc}
 800a638:	230b      	movs	r3, #11
 800a63a:	4618      	mov	r0, r3
 800a63c:	b00e      	add	sp, #56	@ 0x38
 800a63e:	bd10      	pop	{r4, pc}
 800a640:	2301      	movs	r3, #1
 800a642:	4618      	mov	r0, r3
 800a644:	b00e      	add	sp, #56	@ 0x38
 800a646:	bd10      	pop	{r4, pc}
 800a648:	230c      	movs	r3, #12
 800a64a:	e7f2      	b.n	800a632 <rmw_init_options_fini+0x66>
 800a64c:	230b      	movs	r3, #11
 800a64e:	4618      	mov	r0, r3
 800a650:	4770      	bx	lr
 800a652:	bf00      	nop
 800a654:	080172ec 	.word	0x080172ec
 800a658:	2000da64 	.word	0x2000da64

0800a65c <rmw_init>:
 800a65c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800a660:	b083      	sub	sp, #12
 800a662:	2800      	cmp	r0, #0
 800a664:	f000 80d3 	beq.w	800a80e <rmw_init+0x1b2>
 800a668:	460e      	mov	r6, r1
 800a66a:	2900      	cmp	r1, #0
 800a66c:	f000 80cf 	beq.w	800a80e <rmw_init+0x1b2>
 800a670:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 800a672:	4605      	mov	r5, r0
 800a674:	2b00      	cmp	r3, #0
 800a676:	f000 80ca 	beq.w	800a80e <rmw_init+0x1b2>
 800a67a:	4b78      	ldr	r3, [pc, #480]	@ (800a85c <rmw_init+0x200>)
 800a67c:	6880      	ldr	r0, [r0, #8]
 800a67e:	681f      	ldr	r7, [r3, #0]
 800a680:	b128      	cbz	r0, 800a68e <rmw_init+0x32>
 800a682:	4639      	mov	r1, r7
 800a684:	f7f5 fdac 	bl	80001e0 <strcmp>
 800a688:	2800      	cmp	r0, #0
 800a68a:	f040 80ca 	bne.w	800a822 <rmw_init+0x1c6>
 800a68e:	e9d5 2300 	ldrd	r2, r3, [r5]
 800a692:	4c73      	ldr	r4, [pc, #460]	@ (800a860 <rmw_init+0x204>)
 800a694:	4973      	ldr	r1, [pc, #460]	@ (800a864 <rmw_init+0x208>)
 800a696:	4874      	ldr	r0, [pc, #464]	@ (800a868 <rmw_init+0x20c>)
 800a698:	60b7      	str	r7, [r6, #8]
 800a69a:	e9c6 2300 	strd	r2, r3, [r6]
 800a69e:	68eb      	ldr	r3, [r5, #12]
 800a6a0:	64b3      	str	r3, [r6, #72]	@ 0x48
 800a6a2:	2201      	movs	r2, #1
 800a6a4:	f000 fcf6 	bl	800b094 <rmw_uxrce_init_session_memory>
 800a6a8:	4620      	mov	r0, r4
 800a6aa:	4970      	ldr	r1, [pc, #448]	@ (800a86c <rmw_init+0x210>)
 800a6ac:	2204      	movs	r2, #4
 800a6ae:	f000 fd31 	bl	800b114 <rmw_uxrce_init_static_input_buffer_memory>
 800a6b2:	f04f 0800 	mov.w	r8, #0
 800a6b6:	486c      	ldr	r0, [pc, #432]	@ (800a868 <rmw_init+0x20c>)
 800a6b8:	f884 800d 	strb.w	r8, [r4, #13]
 800a6bc:	f008 fd24 	bl	8013108 <get_memory>
 800a6c0:	2800      	cmp	r0, #0
 800a6c2:	f000 80a9 	beq.w	800a818 <rmw_init+0x1bc>
 800a6c6:	6884      	ldr	r4, [r0, #8]
 800a6c8:	6b68      	ldr	r0, [r5, #52]	@ 0x34
 800a6ca:	6a41      	ldr	r1, [r0, #36]	@ 0x24
 800a6cc:	f890 c010 	ldrb.w	ip, [r0, #16]
 800a6d0:	e9d0 2306 	ldrd	r2, r3, [r0, #24]
 800a6d4:	9101      	str	r1, [sp, #4]
 800a6d6:	6a00      	ldr	r0, [r0, #32]
 800a6d8:	9000      	str	r0, [sp, #0]
 800a6da:	f104 0910 	add.w	r9, r4, #16
 800a6de:	4661      	mov	r1, ip
 800a6e0:	4648      	mov	r0, r9
 800a6e2:	f002 fa23 	bl	800cb2c <uxr_set_custom_transport_callbacks>
 800a6e6:	f504 5380 	add.w	r3, r4, #4096	@ 0x1000
 800a6ea:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800a6ee:	e9c4 22e3 	strd	r2, r2, [r4, #908]	@ 0x38c
 800a6f2:	f504 725e 	add.w	r2, r4, #888	@ 0x378
 800a6f6:	e9c4 22e1 	strd	r2, r2, [r4, #900]	@ 0x384
 800a6fa:	495d      	ldr	r1, [pc, #372]	@ (800a870 <rmw_init+0x214>)
 800a6fc:	f8c3 8594 	str.w	r8, [r3, #1428]	@ 0x594
 800a700:	f8c3 8598 	str.w	r8, [r3, #1432]	@ 0x598
 800a704:	f8c3 859c 	str.w	r8, [r3, #1436]	@ 0x59c
 800a708:	f8c3 85a0 	str.w	r8, [r3, #1440]	@ 0x5a0
 800a70c:	4859      	ldr	r0, [pc, #356]	@ (800a874 <rmw_init+0x218>)
 800a70e:	e9c4 78da 	strd	r7, r8, [r4, #872]	@ 0x368
 800a712:	2201      	movs	r2, #1
 800a714:	64f4      	str	r4, [r6, #76]	@ 0x4c
 800a716:	f000 fc9d 	bl	800b054 <rmw_uxrce_init_node_memory>
 800a71a:	4957      	ldr	r1, [pc, #348]	@ (800a878 <rmw_init+0x21c>)
 800a71c:	4857      	ldr	r0, [pc, #348]	@ (800a87c <rmw_init+0x220>)
 800a71e:	2205      	movs	r2, #5
 800a720:	f000 fc78 	bl	800b014 <rmw_uxrce_init_subscription_memory>
 800a724:	4956      	ldr	r1, [pc, #344]	@ (800a880 <rmw_init+0x224>)
 800a726:	4857      	ldr	r0, [pc, #348]	@ (800a884 <rmw_init+0x228>)
 800a728:	220a      	movs	r2, #10
 800a72a:	f000 fc53 	bl	800afd4 <rmw_uxrce_init_publisher_memory>
 800a72e:	4956      	ldr	r1, [pc, #344]	@ (800a888 <rmw_init+0x22c>)
 800a730:	4856      	ldr	r0, [pc, #344]	@ (800a88c <rmw_init+0x230>)
 800a732:	2201      	movs	r2, #1
 800a734:	f000 fc0e 	bl	800af54 <rmw_uxrce_init_service_memory>
 800a738:	4955      	ldr	r1, [pc, #340]	@ (800a890 <rmw_init+0x234>)
 800a73a:	4856      	ldr	r0, [pc, #344]	@ (800a894 <rmw_init+0x238>)
 800a73c:	2201      	movs	r2, #1
 800a73e:	f000 fc29 	bl	800af94 <rmw_uxrce_init_client_memory>
 800a742:	4955      	ldr	r1, [pc, #340]	@ (800a898 <rmw_init+0x23c>)
 800a744:	4855      	ldr	r0, [pc, #340]	@ (800a89c <rmw_init+0x240>)
 800a746:	220f      	movs	r2, #15
 800a748:	f000 fcc4 	bl	800b0d4 <rmw_uxrce_init_topic_memory>
 800a74c:	4954      	ldr	r1, [pc, #336]	@ (800a8a0 <rmw_init+0x244>)
 800a74e:	4855      	ldr	r0, [pc, #340]	@ (800a8a4 <rmw_init+0x248>)
 800a750:	2203      	movs	r2, #3
 800a752:	f000 fcff 	bl	800b154 <rmw_uxrce_init_init_options_impl_memory>
 800a756:	4954      	ldr	r1, [pc, #336]	@ (800a8a8 <rmw_init+0x24c>)
 800a758:	4854      	ldr	r0, [pc, #336]	@ (800a8ac <rmw_init+0x250>)
 800a75a:	2204      	movs	r2, #4
 800a75c:	f000 fd1a 	bl	800b194 <rmw_uxrce_init_wait_set_memory>
 800a760:	4953      	ldr	r1, [pc, #332]	@ (800a8b0 <rmw_init+0x254>)
 800a762:	4854      	ldr	r0, [pc, #336]	@ (800a8b4 <rmw_init+0x258>)
 800a764:	2204      	movs	r2, #4
 800a766:	f000 fd35 	bl	800b1d4 <rmw_uxrce_init_guard_condition_memory>
 800a76a:	6b69      	ldr	r1, [r5, #52]	@ 0x34
 800a76c:	6cf0      	ldr	r0, [r6, #76]	@ 0x4c
 800a76e:	4642      	mov	r2, r8
 800a770:	f000 fbd8 	bl	800af24 <rmw_uxrce_transport_init>
 800a774:	4607      	mov	r7, r0
 800a776:	2800      	cmp	r0, #0
 800a778:	d158      	bne.n	800a82c <rmw_init+0x1d0>
 800a77a:	6b6b      	ldr	r3, [r5, #52]	@ 0x34
 800a77c:	f504 7528 	add.w	r5, r4, #672	@ 0x2a0
 800a780:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800a782:	f504 7122 	add.w	r1, r4, #648	@ 0x288
 800a786:	4628      	mov	r0, r5
 800a788:	f002 fc06 	bl	800cf98 <uxr_init_session>
 800a78c:	494a      	ldr	r1, [pc, #296]	@ (800a8b8 <rmw_init+0x25c>)
 800a78e:	4622      	mov	r2, r4
 800a790:	4628      	mov	r0, r5
 800a792:	f002 fc25 	bl	800cfe0 <uxr_set_topic_callback>
 800a796:	4949      	ldr	r1, [pc, #292]	@ (800a8bc <rmw_init+0x260>)
 800a798:	463a      	mov	r2, r7
 800a79a:	4628      	mov	r0, r5
 800a79c:	f002 fc1c 	bl	800cfd8 <uxr_set_status_callback>
 800a7a0:	4947      	ldr	r1, [pc, #284]	@ (800a8c0 <rmw_init+0x264>)
 800a7a2:	463a      	mov	r2, r7
 800a7a4:	4628      	mov	r0, r5
 800a7a6:	f002 fc1f 	bl	800cfe8 <uxr_set_request_callback>
 800a7aa:	4946      	ldr	r1, [pc, #280]	@ (800a8c4 <rmw_init+0x268>)
 800a7ac:	463a      	mov	r2, r7
 800a7ae:	4628      	mov	r0, r5
 800a7b0:	f002 fc1e 	bl	800cff0 <uxr_set_reply_callback>
 800a7b4:	f8b4 2298 	ldrh.w	r2, [r4, #664]	@ 0x298
 800a7b8:	2304      	movs	r3, #4
 800a7ba:	0092      	lsls	r2, r2, #2
 800a7bc:	f504 7165 	add.w	r1, r4, #916	@ 0x394
 800a7c0:	4628      	mov	r0, r5
 800a7c2:	f002 fc53 	bl	800d06c <uxr_create_input_reliable_stream>
 800a7c6:	f8b4 2298 	ldrh.w	r2, [r4, #664]	@ 0x298
 800a7ca:	f8c4 0374 	str.w	r0, [r4, #884]	@ 0x374
 800a7ce:	0092      	lsls	r2, r2, #2
 800a7d0:	2304      	movs	r3, #4
 800a7d2:	f604 3194 	addw	r1, r4, #2964	@ 0xb94
 800a7d6:	4628      	mov	r0, r5
 800a7d8:	f002 fc20 	bl	800d01c <uxr_create_output_reliable_stream>
 800a7dc:	f8c4 0378 	str.w	r0, [r4, #888]	@ 0x378
 800a7e0:	4628      	mov	r0, r5
 800a7e2:	f002 fc3d 	bl	800d060 <uxr_create_input_best_effort_stream>
 800a7e6:	f504 519c 	add.w	r1, r4, #4992	@ 0x1380
 800a7ea:	f8c4 0380 	str.w	r0, [r4, #896]	@ 0x380
 800a7ee:	f8b4 2298 	ldrh.w	r2, [r4, #664]	@ 0x298
 800a7f2:	3114      	adds	r1, #20
 800a7f4:	4628      	mov	r0, r5
 800a7f6:	f002 fbff 	bl	800cff8 <uxr_create_output_best_effort_stream>
 800a7fa:	f8c4 037c 	str.w	r0, [r4, #892]	@ 0x37c
 800a7fe:	4628      	mov	r0, r5
 800a800:	f003 f98a 	bl	800db18 <uxr_create_session>
 800a804:	b1f8      	cbz	r0, 800a846 <rmw_init+0x1ea>
 800a806:	4638      	mov	r0, r7
 800a808:	b003      	add	sp, #12
 800a80a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a80e:	270b      	movs	r7, #11
 800a810:	4638      	mov	r0, r7
 800a812:	b003      	add	sp, #12
 800a814:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a818:	2701      	movs	r7, #1
 800a81a:	4638      	mov	r0, r7
 800a81c:	b003      	add	sp, #12
 800a81e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a822:	270c      	movs	r7, #12
 800a824:	4638      	mov	r0, r7
 800a826:	b003      	add	sp, #12
 800a828:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a82c:	4648      	mov	r0, r9
 800a82e:	f002 f9bf 	bl	800cbb0 <uxr_close_custom_transport>
 800a832:	480d      	ldr	r0, [pc, #52]	@ (800a868 <rmw_init+0x20c>)
 800a834:	4621      	mov	r1, r4
 800a836:	f008 fc77 	bl	8013128 <put_memory>
 800a83a:	4638      	mov	r0, r7
 800a83c:	f8c6 804c 	str.w	r8, [r6, #76]	@ 0x4c
 800a840:	b003      	add	sp, #12
 800a842:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a846:	4648      	mov	r0, r9
 800a848:	f002 f9b2 	bl	800cbb0 <uxr_close_custom_transport>
 800a84c:	4806      	ldr	r0, [pc, #24]	@ (800a868 <rmw_init+0x20c>)
 800a84e:	4621      	mov	r1, r4
 800a850:	f008 fc6a 	bl	8013128 <put_memory>
 800a854:	64f7      	str	r7, [r6, #76]	@ 0x4c
 800a856:	2701      	movs	r7, #1
 800a858:	e7d5      	b.n	800a806 <rmw_init+0x1aa>
 800a85a:	bf00      	nop
 800a85c:	080172ec 	.word	0x080172ec
 800a860:	2000dab4 	.word	0x2000dab4
 800a864:	20009d60 	.word	0x20009d60
 800a868:	2000daa4 	.word	0x2000daa4
 800a86c:	2000b308 	.word	0x2000b308
 800a870:	20009384 	.word	0x20009384
 800a874:	2000da74 	.word	0x2000da74
 800a878:	2000d408 	.word	0x2000d408
 800a87c:	2000dac4 	.word	0x2000dac4
 800a880:	20009428 	.word	0x20009428
 800a884:	2000da84 	.word	0x2000da84
 800a888:	20009c98 	.word	0x20009c98
 800a88c:	2000da94 	.word	0x2000da94
 800a890:	200091b8 	.word	0x200091b8
 800a894:	200091a4 	.word	0x200091a4
 800a898:	2000d840 	.word	0x2000d840
 800a89c:	2000dad4 	.word	0x2000dad4
 800a8a0:	20009300 	.word	0x20009300
 800a8a4:	2000da64 	.word	0x2000da64
 800a8a8:	2000d9e4 	.word	0x2000d9e4
 800a8ac:	2000dae4 	.word	0x2000dae4
 800a8b0:	20009280 	.word	0x20009280
 800a8b4:	2000da54 	.word	0x2000da54
 800a8b8:	08012f41 	.word	0x08012f41
 800a8bc:	08012f39 	.word	0x08012f39
 800a8c0:	08012fd9 	.word	0x08012fd9
 800a8c4:	08013075 	.word	0x08013075

0800a8c8 <rmw_context_fini>:
 800a8c8:	4b17      	ldr	r3, [pc, #92]	@ (800a928 <rmw_context_fini+0x60>)
 800a8ca:	6cc1      	ldr	r1, [r0, #76]	@ 0x4c
 800a8cc:	b570      	push	{r4, r5, r6, lr}
 800a8ce:	681c      	ldr	r4, [r3, #0]
 800a8d0:	4605      	mov	r5, r0
 800a8d2:	b334      	cbz	r4, 800a922 <rmw_context_fini+0x5a>
 800a8d4:	2600      	movs	r6, #0
 800a8d6:	e9d4 4001 	ldrd	r4, r0, [r4, #4]
 800a8da:	6902      	ldr	r2, [r0, #16]
 800a8dc:	428a      	cmp	r2, r1
 800a8de:	d018      	beq.n	800a912 <rmw_context_fini+0x4a>
 800a8e0:	2c00      	cmp	r4, #0
 800a8e2:	d1f8      	bne.n	800a8d6 <rmw_context_fini+0xe>
 800a8e4:	b189      	cbz	r1, 800a90a <rmw_context_fini+0x42>
 800a8e6:	f8d1 3388 	ldr.w	r3, [r1, #904]	@ 0x388
 800a8ea:	789b      	ldrb	r3, [r3, #2]
 800a8ec:	2b01      	cmp	r3, #1
 800a8ee:	f501 7028 	add.w	r0, r1, #672	@ 0x2a0
 800a8f2:	bf14      	ite	ne
 800a8f4:	210a      	movne	r1, #10
 800a8f6:	2100      	moveq	r1, #0
 800a8f8:	f003 f8e6 	bl	800dac8 <uxr_delete_session_retries>
 800a8fc:	6ce8      	ldr	r0, [r5, #76]	@ 0x4c
 800a8fe:	f000 fc89 	bl	800b214 <rmw_uxrce_fini_session_memory>
 800a902:	6ce8      	ldr	r0, [r5, #76]	@ 0x4c
 800a904:	3010      	adds	r0, #16
 800a906:	f002 f953 	bl	800cbb0 <uxr_close_custom_transport>
 800a90a:	2300      	movs	r3, #0
 800a90c:	64eb      	str	r3, [r5, #76]	@ 0x4c
 800a90e:	4630      	mov	r0, r6
 800a910:	bd70      	pop	{r4, r5, r6, pc}
 800a912:	3018      	adds	r0, #24
 800a914:	f000 f89c 	bl	800aa50 <rmw_destroy_node>
 800a918:	6ce9      	ldr	r1, [r5, #76]	@ 0x4c
 800a91a:	4606      	mov	r6, r0
 800a91c:	2c00      	cmp	r4, #0
 800a91e:	d1da      	bne.n	800a8d6 <rmw_context_fini+0xe>
 800a920:	e7e0      	b.n	800a8e4 <rmw_context_fini+0x1c>
 800a922:	4626      	mov	r6, r4
 800a924:	e7de      	b.n	800a8e4 <rmw_context_fini+0x1c>
 800a926:	bf00      	nop
 800a928:	2000da74 	.word	0x2000da74

0800a92c <create_node>:
 800a92c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800a930:	b083      	sub	sp, #12
 800a932:	2b00      	cmp	r3, #0
 800a934:	d05f      	beq.n	800a9f6 <create_node+0xca>
 800a936:	4606      	mov	r6, r0
 800a938:	4835      	ldr	r0, [pc, #212]	@ (800aa10 <create_node+0xe4>)
 800a93a:	460f      	mov	r7, r1
 800a93c:	4690      	mov	r8, r2
 800a93e:	461d      	mov	r5, r3
 800a940:	f008 fbe2 	bl	8013108 <get_memory>
 800a944:	2800      	cmp	r0, #0
 800a946:	d056      	beq.n	800a9f6 <create_node+0xca>
 800a948:	6884      	ldr	r4, [r0, #8]
 800a94a:	6ceb      	ldr	r3, [r5, #76]	@ 0x4c
 800a94c:	6123      	str	r3, [r4, #16]
 800a94e:	f008 fc43 	bl	80131d8 <rmw_get_implementation_identifier>
 800a952:	f104 092c 	add.w	r9, r4, #44	@ 0x2c
 800a956:	e9c4 0406 	strd	r0, r4, [r4, #24]
 800a95a:	f8c4 9020 	str.w	r9, [r4, #32]
 800a95e:	4630      	mov	r0, r6
 800a960:	f7f5 fc48 	bl	80001f4 <strlen>
 800a964:	1c42      	adds	r2, r0, #1
 800a966:	2a3c      	cmp	r2, #60	@ 0x3c
 800a968:	f104 0518 	add.w	r5, r4, #24
 800a96c:	d840      	bhi.n	800a9f0 <create_node+0xc4>
 800a96e:	4648      	mov	r0, r9
 800a970:	4631      	mov	r1, r6
 800a972:	f104 0968 	add.w	r9, r4, #104	@ 0x68
 800a976:	f00b f81c 	bl	80159b2 <memcpy>
 800a97a:	f8c4 9024 	str.w	r9, [r4, #36]	@ 0x24
 800a97e:	4638      	mov	r0, r7
 800a980:	f7f5 fc38 	bl	80001f4 <strlen>
 800a984:	1c42      	adds	r2, r0, #1
 800a986:	2a3c      	cmp	r2, #60	@ 0x3c
 800a988:	d832      	bhi.n	800a9f0 <create_node+0xc4>
 800a98a:	4639      	mov	r1, r7
 800a98c:	4648      	mov	r0, r9
 800a98e:	f00b f810 	bl	80159b2 <memcpy>
 800a992:	6923      	ldr	r3, [r4, #16]
 800a994:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800a998:	2101      	movs	r1, #1
 800a99a:	f8b3 0594 	ldrh.w	r0, [r3, #1428]	@ 0x594
 800a99e:	1842      	adds	r2, r0, r1
 800a9a0:	f8a3 2594 	strh.w	r2, [r3, #1428]	@ 0x594
 800a9a4:	f002 f908 	bl	800cbb8 <uxr_object_id>
 800a9a8:	6160      	str	r0, [r4, #20]
 800a9aa:	783b      	ldrb	r3, [r7, #0]
 800a9ac:	2b2f      	cmp	r3, #47	@ 0x2f
 800a9ae:	d127      	bne.n	800aa00 <create_node+0xd4>
 800a9b0:	787b      	ldrb	r3, [r7, #1]
 800a9b2:	bb2b      	cbnz	r3, 800aa00 <create_node+0xd4>
 800a9b4:	4a17      	ldr	r2, [pc, #92]	@ (800aa14 <create_node+0xe8>)
 800a9b6:	4818      	ldr	r0, [pc, #96]	@ (800aa18 <create_node+0xec>)
 800a9b8:	4633      	mov	r3, r6
 800a9ba:	213c      	movs	r1, #60	@ 0x3c
 800a9bc:	f00a fe56 	bl	801566c <sniprintf>
 800a9c0:	6920      	ldr	r0, [r4, #16]
 800a9c2:	4915      	ldr	r1, [pc, #84]	@ (800aa18 <create_node+0xec>)
 800a9c4:	f8d0 2384 	ldr.w	r2, [r0, #900]	@ 0x384
 800a9c8:	9100      	str	r1, [sp, #0]
 800a9ca:	2106      	movs	r1, #6
 800a9cc:	9101      	str	r1, [sp, #4]
 800a9ce:	6811      	ldr	r1, [r2, #0]
 800a9d0:	6962      	ldr	r2, [r4, #20]
 800a9d2:	fa1f f388 	uxth.w	r3, r8
 800a9d6:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800a9da:	f001 ff1b 	bl	800c814 <uxr_buffer_create_participant_bin>
 800a9de:	4602      	mov	r2, r0
 800a9e0:	6920      	ldr	r0, [r4, #16]
 800a9e2:	f8d0 338c 	ldr.w	r3, [r0, #908]	@ 0x38c
 800a9e6:	f8d0 1384 	ldr.w	r1, [r0, #900]	@ 0x384
 800a9ea:	f000 fd8b 	bl	800b504 <run_xrce_session>
 800a9ee:	b918      	cbnz	r0, 800a9f8 <create_node+0xcc>
 800a9f0:	4628      	mov	r0, r5
 800a9f2:	f000 fc15 	bl	800b220 <rmw_uxrce_fini_node_memory>
 800a9f6:	2500      	movs	r5, #0
 800a9f8:	4628      	mov	r0, r5
 800a9fa:	b003      	add	sp, #12
 800a9fc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800aa00:	4a06      	ldr	r2, [pc, #24]	@ (800aa1c <create_node+0xf0>)
 800aa02:	9600      	str	r6, [sp, #0]
 800aa04:	463b      	mov	r3, r7
 800aa06:	213c      	movs	r1, #60	@ 0x3c
 800aa08:	4803      	ldr	r0, [pc, #12]	@ (800aa18 <create_node+0xec>)
 800aa0a:	f00a fe2f 	bl	801566c <sniprintf>
 800aa0e:	e7d7      	b.n	800a9c0 <create_node+0x94>
 800aa10:	2000da74 	.word	0x2000da74
 800aa14:	080169d8 	.word	0x080169d8
 800aa18:	20009168 	.word	0x20009168
 800aa1c:	0801699c 	.word	0x0801699c

0800aa20 <rmw_create_node>:
 800aa20:	b199      	cbz	r1, 800aa4a <rmw_create_node+0x2a>
 800aa22:	780b      	ldrb	r3, [r1, #0]
 800aa24:	468c      	mov	ip, r1
 800aa26:	b183      	cbz	r3, 800aa4a <rmw_create_node+0x2a>
 800aa28:	b410      	push	{r4}
 800aa2a:	4614      	mov	r4, r2
 800aa2c:	b14a      	cbz	r2, 800aa42 <rmw_create_node+0x22>
 800aa2e:	7813      	ldrb	r3, [r2, #0]
 800aa30:	b13b      	cbz	r3, 800aa42 <rmw_create_node+0x22>
 800aa32:	6c82      	ldr	r2, [r0, #72]	@ 0x48
 800aa34:	4603      	mov	r3, r0
 800aa36:	4621      	mov	r1, r4
 800aa38:	4660      	mov	r0, ip
 800aa3a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800aa3e:	f7ff bf75 	b.w	800a92c <create_node>
 800aa42:	2000      	movs	r0, #0
 800aa44:	f85d 4b04 	ldr.w	r4, [sp], #4
 800aa48:	4770      	bx	lr
 800aa4a:	2000      	movs	r0, #0
 800aa4c:	4770      	bx	lr
 800aa4e:	bf00      	nop

0800aa50 <rmw_destroy_node>:
 800aa50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800aa52:	b328      	cbz	r0, 800aaa0 <rmw_destroy_node+0x50>
 800aa54:	4607      	mov	r7, r0
 800aa56:	6800      	ldr	r0, [r0, #0]
 800aa58:	b120      	cbz	r0, 800aa64 <rmw_destroy_node+0x14>
 800aa5a:	4b36      	ldr	r3, [pc, #216]	@ (800ab34 <rmw_destroy_node+0xe4>)
 800aa5c:	6819      	ldr	r1, [r3, #0]
 800aa5e:	f7f5 fbbf 	bl	80001e0 <strcmp>
 800aa62:	b9e8      	cbnz	r0, 800aaa0 <rmw_destroy_node+0x50>
 800aa64:	687d      	ldr	r5, [r7, #4]
 800aa66:	b1dd      	cbz	r5, 800aaa0 <rmw_destroy_node+0x50>
 800aa68:	4b33      	ldr	r3, [pc, #204]	@ (800ab38 <rmw_destroy_node+0xe8>)
 800aa6a:	681c      	ldr	r4, [r3, #0]
 800aa6c:	2c00      	cmp	r4, #0
 800aa6e:	d05f      	beq.n	800ab30 <rmw_destroy_node+0xe0>
 800aa70:	2600      	movs	r6, #0
 800aa72:	e9d4 4101 	ldrd	r4, r1, [r4, #4]
 800aa76:	f8d1 3080 	ldr.w	r3, [r1, #128]	@ 0x80
 800aa7a:	429d      	cmp	r5, r3
 800aa7c:	d013      	beq.n	800aaa6 <rmw_destroy_node+0x56>
 800aa7e:	2c00      	cmp	r4, #0
 800aa80:	d1f7      	bne.n	800aa72 <rmw_destroy_node+0x22>
 800aa82:	4b2e      	ldr	r3, [pc, #184]	@ (800ab3c <rmw_destroy_node+0xec>)
 800aa84:	681c      	ldr	r4, [r3, #0]
 800aa86:	b1c4      	cbz	r4, 800aaba <rmw_destroy_node+0x6a>
 800aa88:	e9d4 4101 	ldrd	r4, r1, [r4, #4]
 800aa8c:	6a0b      	ldr	r3, [r1, #32]
 800aa8e:	429d      	cmp	r5, r3
 800aa90:	d1f9      	bne.n	800aa86 <rmw_destroy_node+0x36>
 800aa92:	317c      	adds	r1, #124	@ 0x7c
 800aa94:	4638      	mov	r0, r7
 800aa96:	f000 f9e5 	bl	800ae64 <rmw_destroy_subscription>
 800aa9a:	2801      	cmp	r0, #1
 800aa9c:	4606      	mov	r6, r0
 800aa9e:	d1f2      	bne.n	800aa86 <rmw_destroy_node+0x36>
 800aaa0:	2601      	movs	r6, #1
 800aaa2:	4630      	mov	r0, r6
 800aaa4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800aaa6:	3184      	adds	r1, #132	@ 0x84
 800aaa8:	4638      	mov	r0, r7
 800aaaa:	f000 f853 	bl	800ab54 <rmw_destroy_publisher>
 800aaae:	2801      	cmp	r0, #1
 800aab0:	4606      	mov	r6, r0
 800aab2:	d0f5      	beq.n	800aaa0 <rmw_destroy_node+0x50>
 800aab4:	2c00      	cmp	r4, #0
 800aab6:	d1dc      	bne.n	800aa72 <rmw_destroy_node+0x22>
 800aab8:	e7e3      	b.n	800aa82 <rmw_destroy_node+0x32>
 800aaba:	4b21      	ldr	r3, [pc, #132]	@ (800ab40 <rmw_destroy_node+0xf0>)
 800aabc:	681c      	ldr	r4, [r3, #0]
 800aabe:	b16c      	cbz	r4, 800aadc <rmw_destroy_node+0x8c>
 800aac0:	e9d4 4101 	ldrd	r4, r1, [r4, #4]
 800aac4:	6f8b      	ldr	r3, [r1, #120]	@ 0x78
 800aac6:	429d      	cmp	r5, r3
 800aac8:	d1f9      	bne.n	800aabe <rmw_destroy_node+0x6e>
 800aaca:	317c      	adds	r1, #124	@ 0x7c
 800aacc:	4638      	mov	r0, r7
 800aace:	f000 f893 	bl	800abf8 <rmw_destroy_service>
 800aad2:	2801      	cmp	r0, #1
 800aad4:	4606      	mov	r6, r0
 800aad6:	d0e3      	beq.n	800aaa0 <rmw_destroy_node+0x50>
 800aad8:	2c00      	cmp	r4, #0
 800aada:	d1f1      	bne.n	800aac0 <rmw_destroy_node+0x70>
 800aadc:	4b19      	ldr	r3, [pc, #100]	@ (800ab44 <rmw_destroy_node+0xf4>)
 800aade:	681c      	ldr	r4, [r3, #0]
 800aae0:	b16c      	cbz	r4, 800aafe <rmw_destroy_node+0xae>
 800aae2:	e9d4 4101 	ldrd	r4, r1, [r4, #4]
 800aae6:	6f8b      	ldr	r3, [r1, #120]	@ 0x78
 800aae8:	429d      	cmp	r5, r3
 800aaea:	d1f9      	bne.n	800aae0 <rmw_destroy_node+0x90>
 800aaec:	317c      	adds	r1, #124	@ 0x7c
 800aaee:	4638      	mov	r0, r7
 800aaf0:	f008 fb2e 	bl	8013150 <rmw_destroy_client>
 800aaf4:	2801      	cmp	r0, #1
 800aaf6:	4606      	mov	r6, r0
 800aaf8:	d0d2      	beq.n	800aaa0 <rmw_destroy_node+0x50>
 800aafa:	2c00      	cmp	r4, #0
 800aafc:	d1f1      	bne.n	800aae2 <rmw_destroy_node+0x92>
 800aafe:	6928      	ldr	r0, [r5, #16]
 800ab00:	696a      	ldr	r2, [r5, #20]
 800ab02:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 800ab06:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800ab0a:	6819      	ldr	r1, [r3, #0]
 800ab0c:	f001 fe36 	bl	800c77c <uxr_buffer_delete_entity>
 800ab10:	4602      	mov	r2, r0
 800ab12:	6928      	ldr	r0, [r5, #16]
 800ab14:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 800ab18:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 800ab1c:	f000 fcf2 	bl	800b504 <run_xrce_session>
 800ab20:	2800      	cmp	r0, #0
 800ab22:	bf08      	it	eq
 800ab24:	2602      	moveq	r6, #2
 800ab26:	4638      	mov	r0, r7
 800ab28:	f000 fb7a 	bl	800b220 <rmw_uxrce_fini_node_memory>
 800ab2c:	4630      	mov	r0, r6
 800ab2e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ab30:	4626      	mov	r6, r4
 800ab32:	e7a6      	b.n	800aa82 <rmw_destroy_node+0x32>
 800ab34:	080172ec 	.word	0x080172ec
 800ab38:	2000da84 	.word	0x2000da84
 800ab3c:	2000dac4 	.word	0x2000dac4
 800ab40:	2000da94 	.word	0x2000da94
 800ab44:	200091a4 	.word	0x200091a4

0800ab48 <rmw_node_get_graph_guard_condition>:
 800ab48:	6843      	ldr	r3, [r0, #4]
 800ab4a:	6918      	ldr	r0, [r3, #16]
 800ab4c:	f500 705a 	add.w	r0, r0, #872	@ 0x368
 800ab50:	4770      	bx	lr
 800ab52:	bf00      	nop

0800ab54 <rmw_destroy_publisher>:
 800ab54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ab56:	b128      	cbz	r0, 800ab64 <rmw_destroy_publisher+0x10>
 800ab58:	4604      	mov	r4, r0
 800ab5a:	6800      	ldr	r0, [r0, #0]
 800ab5c:	460d      	mov	r5, r1
 800ab5e:	f000 fd51 	bl	800b604 <is_uxrce_rmw_identifier_valid>
 800ab62:	b910      	cbnz	r0, 800ab6a <rmw_destroy_publisher+0x16>
 800ab64:	2401      	movs	r4, #1
 800ab66:	4620      	mov	r0, r4
 800ab68:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ab6a:	6863      	ldr	r3, [r4, #4]
 800ab6c:	2b00      	cmp	r3, #0
 800ab6e:	d0f9      	beq.n	800ab64 <rmw_destroy_publisher+0x10>
 800ab70:	2d00      	cmp	r5, #0
 800ab72:	d0f7      	beq.n	800ab64 <rmw_destroy_publisher+0x10>
 800ab74:	6828      	ldr	r0, [r5, #0]
 800ab76:	f000 fd45 	bl	800b604 <is_uxrce_rmw_identifier_valid>
 800ab7a:	2800      	cmp	r0, #0
 800ab7c:	d0f2      	beq.n	800ab64 <rmw_destroy_publisher+0x10>
 800ab7e:	686c      	ldr	r4, [r5, #4]
 800ab80:	2c00      	cmp	r4, #0
 800ab82:	d0ef      	beq.n	800ab64 <rmw_destroy_publisher+0x10>
 800ab84:	6a60      	ldr	r0, [r4, #36]	@ 0x24
 800ab86:	f8d4 7080 	ldr.w	r7, [r4, #128]	@ 0x80
 800ab8a:	f008 fb7b 	bl	8013284 <destroy_topic>
 800ab8e:	f8d4 3080 	ldr.w	r3, [r4, #128]	@ 0x80
 800ab92:	6962      	ldr	r2, [r4, #20]
 800ab94:	6918      	ldr	r0, [r3, #16]
 800ab96:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 800ab9a:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800ab9e:	6819      	ldr	r1, [r3, #0]
 800aba0:	f001 fdec 	bl	800c77c <uxr_buffer_delete_entity>
 800aba4:	f8d4 3080 	ldr.w	r3, [r4, #128]	@ 0x80
 800aba8:	6922      	ldr	r2, [r4, #16]
 800abaa:	691b      	ldr	r3, [r3, #16]
 800abac:	f8d3 1388 	ldr.w	r1, [r3, #904]	@ 0x388
 800abb0:	4604      	mov	r4, r0
 800abb2:	6809      	ldr	r1, [r1, #0]
 800abb4:	f503 7028 	add.w	r0, r3, #672	@ 0x2a0
 800abb8:	f001 fde0 	bl	800c77c <uxr_buffer_delete_entity>
 800abbc:	693e      	ldr	r6, [r7, #16]
 800abbe:	4622      	mov	r2, r4
 800abc0:	f8d6 3390 	ldr.w	r3, [r6, #912]	@ 0x390
 800abc4:	f8d6 1388 	ldr.w	r1, [r6, #904]	@ 0x388
 800abc8:	4604      	mov	r4, r0
 800abca:	4630      	mov	r0, r6
 800abcc:	f000 fc9a 	bl	800b504 <run_xrce_session>
 800abd0:	693e      	ldr	r6, [r7, #16]
 800abd2:	4622      	mov	r2, r4
 800abd4:	f8d6 3390 	ldr.w	r3, [r6, #912]	@ 0x390
 800abd8:	f8d6 1388 	ldr.w	r1, [r6, #904]	@ 0x388
 800abdc:	4604      	mov	r4, r0
 800abde:	4630      	mov	r0, r6
 800abe0:	f000 fc90 	bl	800b504 <run_xrce_session>
 800abe4:	b12c      	cbz	r4, 800abf2 <rmw_destroy_publisher+0x9e>
 800abe6:	b120      	cbz	r0, 800abf2 <rmw_destroy_publisher+0x9e>
 800abe8:	2400      	movs	r4, #0
 800abea:	4628      	mov	r0, r5
 800abec:	f000 fb30 	bl	800b250 <rmw_uxrce_fini_publisher_memory>
 800abf0:	e7b9      	b.n	800ab66 <rmw_destroy_publisher+0x12>
 800abf2:	2402      	movs	r4, #2
 800abf4:	e7f9      	b.n	800abea <rmw_destroy_publisher+0x96>
 800abf6:	bf00      	nop

0800abf8 <rmw_destroy_service>:
 800abf8:	b570      	push	{r4, r5, r6, lr}
 800abfa:	b128      	cbz	r0, 800ac08 <rmw_destroy_service+0x10>
 800abfc:	4604      	mov	r4, r0
 800abfe:	6800      	ldr	r0, [r0, #0]
 800ac00:	460d      	mov	r5, r1
 800ac02:	f000 fcff 	bl	800b604 <is_uxrce_rmw_identifier_valid>
 800ac06:	b910      	cbnz	r0, 800ac0e <rmw_destroy_service+0x16>
 800ac08:	2401      	movs	r4, #1
 800ac0a:	4620      	mov	r0, r4
 800ac0c:	bd70      	pop	{r4, r5, r6, pc}
 800ac0e:	6863      	ldr	r3, [r4, #4]
 800ac10:	2b00      	cmp	r3, #0
 800ac12:	d0f9      	beq.n	800ac08 <rmw_destroy_service+0x10>
 800ac14:	2d00      	cmp	r5, #0
 800ac16:	d0f7      	beq.n	800ac08 <rmw_destroy_service+0x10>
 800ac18:	6828      	ldr	r0, [r5, #0]
 800ac1a:	f000 fcf3 	bl	800b604 <is_uxrce_rmw_identifier_valid>
 800ac1e:	2800      	cmp	r0, #0
 800ac20:	d0f2      	beq.n	800ac08 <rmw_destroy_service+0x10>
 800ac22:	686e      	ldr	r6, [r5, #4]
 800ac24:	2e00      	cmp	r6, #0
 800ac26:	d0ef      	beq.n	800ac08 <rmw_destroy_service+0x10>
 800ac28:	6864      	ldr	r4, [r4, #4]
 800ac2a:	6932      	ldr	r2, [r6, #16]
 800ac2c:	6920      	ldr	r0, [r4, #16]
 800ac2e:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 800ac32:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800ac36:	6819      	ldr	r1, [r3, #0]
 800ac38:	f002 f828 	bl	800cc8c <uxr_buffer_cancel_data>
 800ac3c:	4602      	mov	r2, r0
 800ac3e:	6920      	ldr	r0, [r4, #16]
 800ac40:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 800ac44:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 800ac48:	f000 fc5c 	bl	800b504 <run_xrce_session>
 800ac4c:	6920      	ldr	r0, [r4, #16]
 800ac4e:	6932      	ldr	r2, [r6, #16]
 800ac50:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 800ac54:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800ac58:	6819      	ldr	r1, [r3, #0]
 800ac5a:	f001 fd8f 	bl	800c77c <uxr_buffer_delete_entity>
 800ac5e:	4602      	mov	r2, r0
 800ac60:	6920      	ldr	r0, [r4, #16]
 800ac62:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 800ac66:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 800ac6a:	f000 fc4b 	bl	800b504 <run_xrce_session>
 800ac6e:	2800      	cmp	r0, #0
 800ac70:	4628      	mov	r0, r5
 800ac72:	bf14      	ite	ne
 800ac74:	2400      	movne	r4, #0
 800ac76:	2402      	moveq	r4, #2
 800ac78:	f000 fb16 	bl	800b2a8 <rmw_uxrce_fini_service_memory>
 800ac7c:	e7c5      	b.n	800ac0a <rmw_destroy_service+0x12>
 800ac7e:	bf00      	nop

0800ac80 <rmw_create_subscription>:
 800ac80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ac84:	b08d      	sub	sp, #52	@ 0x34
 800ac86:	2800      	cmp	r0, #0
 800ac88:	f000 80d1 	beq.w	800ae2e <rmw_create_subscription+0x1ae>
 800ac8c:	460e      	mov	r6, r1
 800ac8e:	2900      	cmp	r1, #0
 800ac90:	f000 80cd 	beq.w	800ae2e <rmw_create_subscription+0x1ae>
 800ac94:	4604      	mov	r4, r0
 800ac96:	6800      	ldr	r0, [r0, #0]
 800ac98:	4615      	mov	r5, r2
 800ac9a:	4698      	mov	r8, r3
 800ac9c:	f000 fcb2 	bl	800b604 <is_uxrce_rmw_identifier_valid>
 800aca0:	2800      	cmp	r0, #0
 800aca2:	f000 80c4 	beq.w	800ae2e <rmw_create_subscription+0x1ae>
 800aca6:	2d00      	cmp	r5, #0
 800aca8:	f000 80c1 	beq.w	800ae2e <rmw_create_subscription+0x1ae>
 800acac:	782b      	ldrb	r3, [r5, #0]
 800acae:	2b00      	cmp	r3, #0
 800acb0:	f000 80bd 	beq.w	800ae2e <rmw_create_subscription+0x1ae>
 800acb4:	f1b8 0f00 	cmp.w	r8, #0
 800acb8:	f000 80b9 	beq.w	800ae2e <rmw_create_subscription+0x1ae>
 800acbc:	485e      	ldr	r0, [pc, #376]	@ (800ae38 <rmw_create_subscription+0x1b8>)
 800acbe:	f8d4 9004 	ldr.w	r9, [r4, #4]
 800acc2:	f008 fa21 	bl	8013108 <get_memory>
 800acc6:	4604      	mov	r4, r0
 800acc8:	2800      	cmp	r0, #0
 800acca:	f000 80b1 	beq.w	800ae30 <rmw_create_subscription+0x1b0>
 800acce:	6887      	ldr	r7, [r0, #8]
 800acd0:	f8c7 7080 	str.w	r7, [r7, #128]	@ 0x80
 800acd4:	f008 fa80 	bl	80131d8 <rmw_get_implementation_identifier>
 800acd8:	f107 0a98 	add.w	sl, r7, #152	@ 0x98
 800acdc:	67f8      	str	r0, [r7, #124]	@ 0x7c
 800acde:	f8c7 a084 	str.w	sl, [r7, #132]	@ 0x84
 800ace2:	4628      	mov	r0, r5
 800ace4:	f7f5 fa86 	bl	80001f4 <strlen>
 800ace8:	3001      	adds	r0, #1
 800acea:	283c      	cmp	r0, #60	@ 0x3c
 800acec:	f107 047c 	add.w	r4, r7, #124	@ 0x7c
 800acf0:	f200 8096 	bhi.w	800ae20 <rmw_create_subscription+0x1a0>
 800acf4:	4a51      	ldr	r2, [pc, #324]	@ (800ae3c <rmw_create_subscription+0x1bc>)
 800acf6:	462b      	mov	r3, r5
 800acf8:	213c      	movs	r1, #60	@ 0x3c
 800acfa:	4650      	mov	r0, sl
 800acfc:	f00a fcb6 	bl	801566c <sniprintf>
 800ad00:	4641      	mov	r1, r8
 800ad02:	f8c7 9020 	str.w	r9, [r7, #32]
 800ad06:	2250      	movs	r2, #80	@ 0x50
 800ad08:	f107 0028 	add.w	r0, r7, #40	@ 0x28
 800ad0c:	f00a fe51 	bl	80159b2 <memcpy>
 800ad10:	494b      	ldr	r1, [pc, #300]	@ (800ae40 <rmw_create_subscription+0x1c0>)
 800ad12:	4630      	mov	r0, r6
 800ad14:	f000 fc84 	bl	800b620 <get_message_typesupport_handle>
 800ad18:	2800      	cmp	r0, #0
 800ad1a:	f000 8081 	beq.w	800ae20 <rmw_create_subscription+0x1a0>
 800ad1e:	6842      	ldr	r2, [r0, #4]
 800ad20:	61ba      	str	r2, [r7, #24]
 800ad22:	2a00      	cmp	r2, #0
 800ad24:	d07c      	beq.n	800ae20 <rmw_create_subscription+0x1a0>
 800ad26:	4629      	mov	r1, r5
 800ad28:	4643      	mov	r3, r8
 800ad2a:	4648      	mov	r0, r9
 800ad2c:	f008 fa5a 	bl	80131e4 <create_topic>
 800ad30:	61f8      	str	r0, [r7, #28]
 800ad32:	2800      	cmp	r0, #0
 800ad34:	d078      	beq.n	800ae28 <rmw_create_subscription+0x1a8>
 800ad36:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800ad3a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800ad3e:	2104      	movs	r1, #4
 800ad40:	f8b3 059c 	ldrh.w	r0, [r3, #1436]	@ 0x59c
 800ad44:	1c42      	adds	r2, r0, #1
 800ad46:	f8a3 259c 	strh.w	r2, [r3, #1436]	@ 0x59c
 800ad4a:	f001 ff35 	bl	800cbb8 <uxr_object_id>
 800ad4e:	6138      	str	r0, [r7, #16]
 800ad50:	f8d9 0010 	ldr.w	r0, [r9, #16]
 800ad54:	2506      	movs	r5, #6
 800ad56:	f8d0 3384 	ldr.w	r3, [r0, #900]	@ 0x384
 800ad5a:	9500      	str	r5, [sp, #0]
 800ad5c:	6819      	ldr	r1, [r3, #0]
 800ad5e:	693a      	ldr	r2, [r7, #16]
 800ad60:	f8d9 3014 	ldr.w	r3, [r9, #20]
 800ad64:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800ad68:	f001 fdbc 	bl	800c8e4 <uxr_buffer_create_subscriber_bin>
 800ad6c:	4602      	mov	r2, r0
 800ad6e:	f8d9 0010 	ldr.w	r0, [r9, #16]
 800ad72:	f8d0 338c 	ldr.w	r3, [r0, #908]	@ 0x38c
 800ad76:	f8d0 1384 	ldr.w	r1, [r0, #900]	@ 0x384
 800ad7a:	f000 fbc3 	bl	800b504 <run_xrce_session>
 800ad7e:	2800      	cmp	r0, #0
 800ad80:	d04e      	beq.n	800ae20 <rmw_create_subscription+0x1a0>
 800ad82:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800ad86:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800ad8a:	4629      	mov	r1, r5
 800ad8c:	f8b3 059e 	ldrh.w	r0, [r3, #1438]	@ 0x59e
 800ad90:	1c42      	adds	r2, r0, #1
 800ad92:	f8a3 259e 	strh.w	r2, [r3, #1438]	@ 0x59e
 800ad96:	f001 ff0f 	bl	800cbb8 <uxr_object_id>
 800ad9a:	ae08      	add	r6, sp, #32
 800ad9c:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800ada0:	69fb      	ldr	r3, [r7, #28]
 800ada2:	6178      	str	r0, [r7, #20]
 800ada4:	4641      	mov	r1, r8
 800ada6:	4630      	mov	r0, r6
 800ada8:	f8da b384 	ldr.w	fp, [sl, #900]	@ 0x384
 800adac:	9305      	str	r3, [sp, #20]
 800adae:	f000 fbc5 	bl	800b53c <convert_qos_profile>
 800adb2:	9503      	str	r5, [sp, #12]
 800adb4:	e896 0003 	ldmia.w	r6, {r0, r1}
 800adb8:	9b05      	ldr	r3, [sp, #20]
 800adba:	9001      	str	r0, [sp, #4]
 800adbc:	f8ad 1008 	strh.w	r1, [sp, #8]
 800adc0:	691b      	ldr	r3, [r3, #16]
 800adc2:	9300      	str	r3, [sp, #0]
 800adc4:	e9d7 3204 	ldrd	r3, r2, [r7, #16]
 800adc8:	f8db 1000 	ldr.w	r1, [fp]
 800adcc:	f50a 7028 	add.w	r0, sl, #672	@ 0x2a0
 800add0:	f001 fdb8 	bl	800c944 <uxr_buffer_create_datareader_bin>
 800add4:	4602      	mov	r2, r0
 800add6:	f8d9 0010 	ldr.w	r0, [r9, #16]
 800adda:	f8d0 338c 	ldr.w	r3, [r0, #908]	@ 0x38c
 800adde:	f8d0 1384 	ldr.w	r1, [r0, #900]	@ 0x384
 800ade2:	f000 fb8f 	bl	800b504 <run_xrce_session>
 800ade6:	b1d8      	cbz	r0, 800ae20 <rmw_create_subscription+0x1a0>
 800ade8:	f898 3008 	ldrb.w	r3, [r8, #8]
 800adec:	f8d9 0010 	ldr.w	r0, [r9, #16]
 800adf0:	2b02      	cmp	r3, #2
 800adf2:	bf0c      	ite	eq
 800adf4:	f8d0 3380 	ldreq.w	r3, [r0, #896]	@ 0x380
 800adf8:	f8d0 3374 	ldrne.w	r3, [r0, #884]	@ 0x374
 800adfc:	9307      	str	r3, [sp, #28]
 800adfe:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 800ae02:	2200      	movs	r2, #0
 800ae04:	e9cd 120a 	strd	r1, r2, [sp, #40]	@ 0x28
 800ae08:	ab0a      	add	r3, sp, #40	@ 0x28
 800ae0a:	f8d0 1384 	ldr.w	r1, [r0, #900]	@ 0x384
 800ae0e:	9300      	str	r3, [sp, #0]
 800ae10:	697a      	ldr	r2, [r7, #20]
 800ae12:	9b07      	ldr	r3, [sp, #28]
 800ae14:	6809      	ldr	r1, [r1, #0]
 800ae16:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800ae1a:	f001 fefd 	bl	800cc18 <uxr_buffer_request_data>
 800ae1e:	e007      	b.n	800ae30 <rmw_create_subscription+0x1b0>
 800ae20:	69f8      	ldr	r0, [r7, #28]
 800ae22:	b108      	cbz	r0, 800ae28 <rmw_create_subscription+0x1a8>
 800ae24:	f000 fa6c 	bl	800b300 <rmw_uxrce_fini_topic_memory>
 800ae28:	4620      	mov	r0, r4
 800ae2a:	f000 fa27 	bl	800b27c <rmw_uxrce_fini_subscription_memory>
 800ae2e:	2400      	movs	r4, #0
 800ae30:	4620      	mov	r0, r4
 800ae32:	b00d      	add	sp, #52	@ 0x34
 800ae34:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ae38:	2000dac4 	.word	0x2000dac4
 800ae3c:	080169d8 	.word	0x080169d8
 800ae40:	080169a4 	.word	0x080169a4

0800ae44 <rmw_subscription_get_actual_qos>:
 800ae44:	b150      	cbz	r0, 800ae5c <rmw_subscription_get_actual_qos+0x18>
 800ae46:	b508      	push	{r3, lr}
 800ae48:	460b      	mov	r3, r1
 800ae4a:	b149      	cbz	r1, 800ae60 <rmw_subscription_get_actual_qos+0x1c>
 800ae4c:	6841      	ldr	r1, [r0, #4]
 800ae4e:	2250      	movs	r2, #80	@ 0x50
 800ae50:	3128      	adds	r1, #40	@ 0x28
 800ae52:	4618      	mov	r0, r3
 800ae54:	f00a fdad 	bl	80159b2 <memcpy>
 800ae58:	2000      	movs	r0, #0
 800ae5a:	bd08      	pop	{r3, pc}
 800ae5c:	200b      	movs	r0, #11
 800ae5e:	4770      	bx	lr
 800ae60:	200b      	movs	r0, #11
 800ae62:	bd08      	pop	{r3, pc}

0800ae64 <rmw_destroy_subscription>:
 800ae64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ae66:	b128      	cbz	r0, 800ae74 <rmw_destroy_subscription+0x10>
 800ae68:	4604      	mov	r4, r0
 800ae6a:	6800      	ldr	r0, [r0, #0]
 800ae6c:	460d      	mov	r5, r1
 800ae6e:	f000 fbc9 	bl	800b604 <is_uxrce_rmw_identifier_valid>
 800ae72:	b910      	cbnz	r0, 800ae7a <rmw_destroy_subscription+0x16>
 800ae74:	2401      	movs	r4, #1
 800ae76:	4620      	mov	r0, r4
 800ae78:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ae7a:	6863      	ldr	r3, [r4, #4]
 800ae7c:	2b00      	cmp	r3, #0
 800ae7e:	d0f9      	beq.n	800ae74 <rmw_destroy_subscription+0x10>
 800ae80:	2d00      	cmp	r5, #0
 800ae82:	d0f7      	beq.n	800ae74 <rmw_destroy_subscription+0x10>
 800ae84:	6828      	ldr	r0, [r5, #0]
 800ae86:	f000 fbbd 	bl	800b604 <is_uxrce_rmw_identifier_valid>
 800ae8a:	2800      	cmp	r0, #0
 800ae8c:	d0f2      	beq.n	800ae74 <rmw_destroy_subscription+0x10>
 800ae8e:	686c      	ldr	r4, [r5, #4]
 800ae90:	2c00      	cmp	r4, #0
 800ae92:	d0ef      	beq.n	800ae74 <rmw_destroy_subscription+0x10>
 800ae94:	6a26      	ldr	r6, [r4, #32]
 800ae96:	6962      	ldr	r2, [r4, #20]
 800ae98:	6930      	ldr	r0, [r6, #16]
 800ae9a:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 800ae9e:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800aea2:	6819      	ldr	r1, [r3, #0]
 800aea4:	f001 fef2 	bl	800cc8c <uxr_buffer_cancel_data>
 800aea8:	4602      	mov	r2, r0
 800aeaa:	6930      	ldr	r0, [r6, #16]
 800aeac:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 800aeb0:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 800aeb4:	f000 fb26 	bl	800b504 <run_xrce_session>
 800aeb8:	69e0      	ldr	r0, [r4, #28]
 800aeba:	f008 f9e3 	bl	8013284 <destroy_topic>
 800aebe:	6a23      	ldr	r3, [r4, #32]
 800aec0:	6962      	ldr	r2, [r4, #20]
 800aec2:	6918      	ldr	r0, [r3, #16]
 800aec4:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 800aec8:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800aecc:	6819      	ldr	r1, [r3, #0]
 800aece:	f001 fc55 	bl	800c77c <uxr_buffer_delete_entity>
 800aed2:	6a23      	ldr	r3, [r4, #32]
 800aed4:	6922      	ldr	r2, [r4, #16]
 800aed6:	691b      	ldr	r3, [r3, #16]
 800aed8:	f8d3 1388 	ldr.w	r1, [r3, #904]	@ 0x388
 800aedc:	4604      	mov	r4, r0
 800aede:	6809      	ldr	r1, [r1, #0]
 800aee0:	f503 7028 	add.w	r0, r3, #672	@ 0x2a0
 800aee4:	f001 fc4a 	bl	800c77c <uxr_buffer_delete_entity>
 800aee8:	6937      	ldr	r7, [r6, #16]
 800aeea:	4622      	mov	r2, r4
 800aeec:	f8d7 3390 	ldr.w	r3, [r7, #912]	@ 0x390
 800aef0:	f8d7 1388 	ldr.w	r1, [r7, #904]	@ 0x388
 800aef4:	4604      	mov	r4, r0
 800aef6:	4638      	mov	r0, r7
 800aef8:	f000 fb04 	bl	800b504 <run_xrce_session>
 800aefc:	6936      	ldr	r6, [r6, #16]
 800aefe:	4622      	mov	r2, r4
 800af00:	f8d6 3390 	ldr.w	r3, [r6, #912]	@ 0x390
 800af04:	f8d6 1388 	ldr.w	r1, [r6, #904]	@ 0x388
 800af08:	4604      	mov	r4, r0
 800af0a:	4630      	mov	r0, r6
 800af0c:	f000 fafa 	bl	800b504 <run_xrce_session>
 800af10:	b12c      	cbz	r4, 800af1e <rmw_destroy_subscription+0xba>
 800af12:	b120      	cbz	r0, 800af1e <rmw_destroy_subscription+0xba>
 800af14:	2400      	movs	r4, #0
 800af16:	4628      	mov	r0, r5
 800af18:	f000 f9b0 	bl	800b27c <rmw_uxrce_fini_subscription_memory>
 800af1c:	e7ab      	b.n	800ae76 <rmw_destroy_subscription+0x12>
 800af1e:	2402      	movs	r4, #2
 800af20:	e7f9      	b.n	800af16 <rmw_destroy_subscription+0xb2>
 800af22:	bf00      	nop

0800af24 <rmw_uxrce_transport_init>:
 800af24:	b508      	push	{r3, lr}
 800af26:	b108      	cbz	r0, 800af2c <rmw_uxrce_transport_init+0x8>
 800af28:	f100 0210 	add.w	r2, r0, #16
 800af2c:	b139      	cbz	r1, 800af3e <rmw_uxrce_transport_init+0x1a>
 800af2e:	6949      	ldr	r1, [r1, #20]
 800af30:	4610      	mov	r0, r2
 800af32:	f001 fe09 	bl	800cb48 <uxr_init_custom_transport>
 800af36:	f080 0001 	eor.w	r0, r0, #1
 800af3a:	b2c0      	uxtb	r0, r0
 800af3c:	bd08      	pop	{r3, pc}
 800af3e:	4b04      	ldr	r3, [pc, #16]	@ (800af50 <rmw_uxrce_transport_init+0x2c>)
 800af40:	4610      	mov	r0, r2
 800af42:	6859      	ldr	r1, [r3, #4]
 800af44:	f001 fe00 	bl	800cb48 <uxr_init_custom_transport>
 800af48:	f080 0001 	eor.w	r0, r0, #1
 800af4c:	b2c0      	uxtb	r0, r0
 800af4e:	bd08      	pop	{r3, pc}
 800af50:	2000914c 	.word	0x2000914c

0800af54 <rmw_uxrce_init_service_memory>:
 800af54:	b1e2      	cbz	r2, 800af90 <rmw_uxrce_init_service_memory+0x3c>
 800af56:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800af5a:	7b05      	ldrb	r5, [r0, #12]
 800af5c:	4606      	mov	r6, r0
 800af5e:	b9ad      	cbnz	r5, 800af8c <rmw_uxrce_init_service_memory+0x38>
 800af60:	23c8      	movs	r3, #200	@ 0xc8
 800af62:	e9c0 5500 	strd	r5, r5, [r0]
 800af66:	6083      	str	r3, [r0, #8]
 800af68:	f240 1301 	movw	r3, #257	@ 0x101
 800af6c:	4617      	mov	r7, r2
 800af6e:	8183      	strh	r3, [r0, #12]
 800af70:	460c      	mov	r4, r1
 800af72:	46a8      	mov	r8, r5
 800af74:	4621      	mov	r1, r4
 800af76:	4630      	mov	r0, r6
 800af78:	3501      	adds	r5, #1
 800af7a:	f008 f8d5 	bl	8013128 <put_memory>
 800af7e:	42af      	cmp	r7, r5
 800af80:	60a4      	str	r4, [r4, #8]
 800af82:	f884 800c 	strb.w	r8, [r4, #12]
 800af86:	f104 04c8 	add.w	r4, r4, #200	@ 0xc8
 800af8a:	d1f3      	bne.n	800af74 <rmw_uxrce_init_service_memory+0x20>
 800af8c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800af90:	4770      	bx	lr
 800af92:	bf00      	nop

0800af94 <rmw_uxrce_init_client_memory>:
 800af94:	b1e2      	cbz	r2, 800afd0 <rmw_uxrce_init_client_memory+0x3c>
 800af96:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800af9a:	7b05      	ldrb	r5, [r0, #12]
 800af9c:	4606      	mov	r6, r0
 800af9e:	b9ad      	cbnz	r5, 800afcc <rmw_uxrce_init_client_memory+0x38>
 800afa0:	23c8      	movs	r3, #200	@ 0xc8
 800afa2:	e9c0 5500 	strd	r5, r5, [r0]
 800afa6:	6083      	str	r3, [r0, #8]
 800afa8:	f240 1301 	movw	r3, #257	@ 0x101
 800afac:	4617      	mov	r7, r2
 800afae:	8183      	strh	r3, [r0, #12]
 800afb0:	460c      	mov	r4, r1
 800afb2:	46a8      	mov	r8, r5
 800afb4:	4621      	mov	r1, r4
 800afb6:	4630      	mov	r0, r6
 800afb8:	3501      	adds	r5, #1
 800afba:	f008 f8b5 	bl	8013128 <put_memory>
 800afbe:	42af      	cmp	r7, r5
 800afc0:	60a4      	str	r4, [r4, #8]
 800afc2:	f884 800c 	strb.w	r8, [r4, #12]
 800afc6:	f104 04c8 	add.w	r4, r4, #200	@ 0xc8
 800afca:	d1f3      	bne.n	800afb4 <rmw_uxrce_init_client_memory+0x20>
 800afcc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800afd0:	4770      	bx	lr
 800afd2:	bf00      	nop

0800afd4 <rmw_uxrce_init_publisher_memory>:
 800afd4:	b1e2      	cbz	r2, 800b010 <rmw_uxrce_init_publisher_memory+0x3c>
 800afd6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800afda:	7b05      	ldrb	r5, [r0, #12]
 800afdc:	4606      	mov	r6, r0
 800afde:	b9ad      	cbnz	r5, 800b00c <rmw_uxrce_init_publisher_memory+0x38>
 800afe0:	23d8      	movs	r3, #216	@ 0xd8
 800afe2:	e9c0 5500 	strd	r5, r5, [r0]
 800afe6:	6083      	str	r3, [r0, #8]
 800afe8:	f240 1301 	movw	r3, #257	@ 0x101
 800afec:	4617      	mov	r7, r2
 800afee:	8183      	strh	r3, [r0, #12]
 800aff0:	460c      	mov	r4, r1
 800aff2:	46a8      	mov	r8, r5
 800aff4:	4621      	mov	r1, r4
 800aff6:	4630      	mov	r0, r6
 800aff8:	3501      	adds	r5, #1
 800affa:	f008 f895 	bl	8013128 <put_memory>
 800affe:	42af      	cmp	r7, r5
 800b000:	60a4      	str	r4, [r4, #8]
 800b002:	f884 800c 	strb.w	r8, [r4, #12]
 800b006:	f104 04d8 	add.w	r4, r4, #216	@ 0xd8
 800b00a:	d1f3      	bne.n	800aff4 <rmw_uxrce_init_publisher_memory+0x20>
 800b00c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b010:	4770      	bx	lr
 800b012:	bf00      	nop

0800b014 <rmw_uxrce_init_subscription_memory>:
 800b014:	b1e2      	cbz	r2, 800b050 <rmw_uxrce_init_subscription_memory+0x3c>
 800b016:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b01a:	7b05      	ldrb	r5, [r0, #12]
 800b01c:	4606      	mov	r6, r0
 800b01e:	b9ad      	cbnz	r5, 800b04c <rmw_uxrce_init_subscription_memory+0x38>
 800b020:	23d8      	movs	r3, #216	@ 0xd8
 800b022:	e9c0 5500 	strd	r5, r5, [r0]
 800b026:	6083      	str	r3, [r0, #8]
 800b028:	f240 1301 	movw	r3, #257	@ 0x101
 800b02c:	4617      	mov	r7, r2
 800b02e:	8183      	strh	r3, [r0, #12]
 800b030:	460c      	mov	r4, r1
 800b032:	46a8      	mov	r8, r5
 800b034:	4621      	mov	r1, r4
 800b036:	4630      	mov	r0, r6
 800b038:	3501      	adds	r5, #1
 800b03a:	f008 f875 	bl	8013128 <put_memory>
 800b03e:	42af      	cmp	r7, r5
 800b040:	60a4      	str	r4, [r4, #8]
 800b042:	f884 800c 	strb.w	r8, [r4, #12]
 800b046:	f104 04d8 	add.w	r4, r4, #216	@ 0xd8
 800b04a:	d1f3      	bne.n	800b034 <rmw_uxrce_init_subscription_memory+0x20>
 800b04c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b050:	4770      	bx	lr
 800b052:	bf00      	nop

0800b054 <rmw_uxrce_init_node_memory>:
 800b054:	b1e2      	cbz	r2, 800b090 <rmw_uxrce_init_node_memory+0x3c>
 800b056:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b05a:	7b05      	ldrb	r5, [r0, #12]
 800b05c:	4606      	mov	r6, r0
 800b05e:	b9ad      	cbnz	r5, 800b08c <rmw_uxrce_init_node_memory+0x38>
 800b060:	23a4      	movs	r3, #164	@ 0xa4
 800b062:	e9c0 5500 	strd	r5, r5, [r0]
 800b066:	6083      	str	r3, [r0, #8]
 800b068:	f240 1301 	movw	r3, #257	@ 0x101
 800b06c:	4617      	mov	r7, r2
 800b06e:	8183      	strh	r3, [r0, #12]
 800b070:	460c      	mov	r4, r1
 800b072:	46a8      	mov	r8, r5
 800b074:	4621      	mov	r1, r4
 800b076:	4630      	mov	r0, r6
 800b078:	3501      	adds	r5, #1
 800b07a:	f008 f855 	bl	8013128 <put_memory>
 800b07e:	42af      	cmp	r7, r5
 800b080:	60a4      	str	r4, [r4, #8]
 800b082:	f884 800c 	strb.w	r8, [r4, #12]
 800b086:	f104 04a4 	add.w	r4, r4, #164	@ 0xa4
 800b08a:	d1f3      	bne.n	800b074 <rmw_uxrce_init_node_memory+0x20>
 800b08c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b090:	4770      	bx	lr
 800b092:	bf00      	nop

0800b094 <rmw_uxrce_init_session_memory>:
 800b094:	b1ea      	cbz	r2, 800b0d2 <rmw_uxrce_init_session_memory+0x3e>
 800b096:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b09a:	7b05      	ldrb	r5, [r0, #12]
 800b09c:	4606      	mov	r6, r0
 800b09e:	b9b5      	cbnz	r5, 800b0ce <rmw_uxrce_init_session_memory+0x3a>
 800b0a0:	e9c0 5500 	strd	r5, r5, [r0]
 800b0a4:	f241 58a8 	movw	r8, #5544	@ 0x15a8
 800b0a8:	f240 1301 	movw	r3, #257	@ 0x101
 800b0ac:	4617      	mov	r7, r2
 800b0ae:	f8c0 8008 	str.w	r8, [r0, #8]
 800b0b2:	460c      	mov	r4, r1
 800b0b4:	8183      	strh	r3, [r0, #12]
 800b0b6:	46a9      	mov	r9, r5
 800b0b8:	4621      	mov	r1, r4
 800b0ba:	4630      	mov	r0, r6
 800b0bc:	3501      	adds	r5, #1
 800b0be:	f008 f833 	bl	8013128 <put_memory>
 800b0c2:	42af      	cmp	r7, r5
 800b0c4:	60a4      	str	r4, [r4, #8]
 800b0c6:	f884 900c 	strb.w	r9, [r4, #12]
 800b0ca:	4444      	add	r4, r8
 800b0cc:	d1f4      	bne.n	800b0b8 <rmw_uxrce_init_session_memory+0x24>
 800b0ce:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b0d2:	4770      	bx	lr

0800b0d4 <rmw_uxrce_init_topic_memory>:
 800b0d4:	b1e2      	cbz	r2, 800b110 <rmw_uxrce_init_topic_memory+0x3c>
 800b0d6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b0da:	7b05      	ldrb	r5, [r0, #12]
 800b0dc:	4606      	mov	r6, r0
 800b0de:	b9ad      	cbnz	r5, 800b10c <rmw_uxrce_init_topic_memory+0x38>
 800b0e0:	231c      	movs	r3, #28
 800b0e2:	e9c0 5500 	strd	r5, r5, [r0]
 800b0e6:	6083      	str	r3, [r0, #8]
 800b0e8:	f240 1301 	movw	r3, #257	@ 0x101
 800b0ec:	4617      	mov	r7, r2
 800b0ee:	8183      	strh	r3, [r0, #12]
 800b0f0:	460c      	mov	r4, r1
 800b0f2:	46a8      	mov	r8, r5
 800b0f4:	4621      	mov	r1, r4
 800b0f6:	4630      	mov	r0, r6
 800b0f8:	3501      	adds	r5, #1
 800b0fa:	f008 f815 	bl	8013128 <put_memory>
 800b0fe:	42af      	cmp	r7, r5
 800b100:	60a4      	str	r4, [r4, #8]
 800b102:	f884 800c 	strb.w	r8, [r4, #12]
 800b106:	f104 041c 	add.w	r4, r4, #28
 800b10a:	d1f3      	bne.n	800b0f4 <rmw_uxrce_init_topic_memory+0x20>
 800b10c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b110:	4770      	bx	lr
 800b112:	bf00      	nop

0800b114 <rmw_uxrce_init_static_input_buffer_memory>:
 800b114:	b1ea      	cbz	r2, 800b152 <rmw_uxrce_init_static_input_buffer_memory+0x3e>
 800b116:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b11a:	7b05      	ldrb	r5, [r0, #12]
 800b11c:	4606      	mov	r6, r0
 800b11e:	b9b5      	cbnz	r5, 800b14e <rmw_uxrce_init_static_input_buffer_memory+0x3a>
 800b120:	f44f 6304 	mov.w	r3, #2112	@ 0x840
 800b124:	e9c0 5500 	strd	r5, r5, [r0]
 800b128:	6083      	str	r3, [r0, #8]
 800b12a:	f240 1301 	movw	r3, #257	@ 0x101
 800b12e:	4617      	mov	r7, r2
 800b130:	8183      	strh	r3, [r0, #12]
 800b132:	460c      	mov	r4, r1
 800b134:	46a8      	mov	r8, r5
 800b136:	4621      	mov	r1, r4
 800b138:	4630      	mov	r0, r6
 800b13a:	3501      	adds	r5, #1
 800b13c:	f007 fff4 	bl	8013128 <put_memory>
 800b140:	42af      	cmp	r7, r5
 800b142:	60a4      	str	r4, [r4, #8]
 800b144:	f884 800c 	strb.w	r8, [r4, #12]
 800b148:	f504 6404 	add.w	r4, r4, #2112	@ 0x840
 800b14c:	d1f3      	bne.n	800b136 <rmw_uxrce_init_static_input_buffer_memory+0x22>
 800b14e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b152:	4770      	bx	lr

0800b154 <rmw_uxrce_init_init_options_impl_memory>:
 800b154:	b1e2      	cbz	r2, 800b190 <rmw_uxrce_init_init_options_impl_memory+0x3c>
 800b156:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b15a:	7b05      	ldrb	r5, [r0, #12]
 800b15c:	4606      	mov	r6, r0
 800b15e:	b9ad      	cbnz	r5, 800b18c <rmw_uxrce_init_init_options_impl_memory+0x38>
 800b160:	232c      	movs	r3, #44	@ 0x2c
 800b162:	e9c0 5500 	strd	r5, r5, [r0]
 800b166:	6083      	str	r3, [r0, #8]
 800b168:	f240 1301 	movw	r3, #257	@ 0x101
 800b16c:	4617      	mov	r7, r2
 800b16e:	8183      	strh	r3, [r0, #12]
 800b170:	460c      	mov	r4, r1
 800b172:	46a8      	mov	r8, r5
 800b174:	4621      	mov	r1, r4
 800b176:	4630      	mov	r0, r6
 800b178:	3501      	adds	r5, #1
 800b17a:	f007 ffd5 	bl	8013128 <put_memory>
 800b17e:	42af      	cmp	r7, r5
 800b180:	60a4      	str	r4, [r4, #8]
 800b182:	f884 800c 	strb.w	r8, [r4, #12]
 800b186:	f104 042c 	add.w	r4, r4, #44	@ 0x2c
 800b18a:	d1f3      	bne.n	800b174 <rmw_uxrce_init_init_options_impl_memory+0x20>
 800b18c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b190:	4770      	bx	lr
 800b192:	bf00      	nop

0800b194 <rmw_uxrce_init_wait_set_memory>:
 800b194:	b1e2      	cbz	r2, 800b1d0 <rmw_uxrce_init_wait_set_memory+0x3c>
 800b196:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b19a:	7b05      	ldrb	r5, [r0, #12]
 800b19c:	4606      	mov	r6, r0
 800b19e:	b9ad      	cbnz	r5, 800b1cc <rmw_uxrce_init_wait_set_memory+0x38>
 800b1a0:	231c      	movs	r3, #28
 800b1a2:	e9c0 5500 	strd	r5, r5, [r0]
 800b1a6:	6083      	str	r3, [r0, #8]
 800b1a8:	f240 1301 	movw	r3, #257	@ 0x101
 800b1ac:	4617      	mov	r7, r2
 800b1ae:	8183      	strh	r3, [r0, #12]
 800b1b0:	460c      	mov	r4, r1
 800b1b2:	46a8      	mov	r8, r5
 800b1b4:	4621      	mov	r1, r4
 800b1b6:	4630      	mov	r0, r6
 800b1b8:	3501      	adds	r5, #1
 800b1ba:	f007 ffb5 	bl	8013128 <put_memory>
 800b1be:	42af      	cmp	r7, r5
 800b1c0:	60a4      	str	r4, [r4, #8]
 800b1c2:	f884 800c 	strb.w	r8, [r4, #12]
 800b1c6:	f104 041c 	add.w	r4, r4, #28
 800b1ca:	d1f3      	bne.n	800b1b4 <rmw_uxrce_init_wait_set_memory+0x20>
 800b1cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b1d0:	4770      	bx	lr
 800b1d2:	bf00      	nop

0800b1d4 <rmw_uxrce_init_guard_condition_memory>:
 800b1d4:	b1e2      	cbz	r2, 800b210 <rmw_uxrce_init_guard_condition_memory+0x3c>
 800b1d6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b1da:	7b05      	ldrb	r5, [r0, #12]
 800b1dc:	4606      	mov	r6, r0
 800b1de:	b9ad      	cbnz	r5, 800b20c <rmw_uxrce_init_guard_condition_memory+0x38>
 800b1e0:	2320      	movs	r3, #32
 800b1e2:	e9c0 5500 	strd	r5, r5, [r0]
 800b1e6:	6083      	str	r3, [r0, #8]
 800b1e8:	f240 1301 	movw	r3, #257	@ 0x101
 800b1ec:	4617      	mov	r7, r2
 800b1ee:	8183      	strh	r3, [r0, #12]
 800b1f0:	460c      	mov	r4, r1
 800b1f2:	46a8      	mov	r8, r5
 800b1f4:	4621      	mov	r1, r4
 800b1f6:	4630      	mov	r0, r6
 800b1f8:	3501      	adds	r5, #1
 800b1fa:	f007 ff95 	bl	8013128 <put_memory>
 800b1fe:	42af      	cmp	r7, r5
 800b200:	60a4      	str	r4, [r4, #8]
 800b202:	f884 800c 	strb.w	r8, [r4, #12]
 800b206:	f104 0420 	add.w	r4, r4, #32
 800b20a:	d1f3      	bne.n	800b1f4 <rmw_uxrce_init_guard_condition_memory+0x20>
 800b20c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b210:	4770      	bx	lr
 800b212:	bf00      	nop

0800b214 <rmw_uxrce_fini_session_memory>:
 800b214:	4601      	mov	r1, r0
 800b216:	4801      	ldr	r0, [pc, #4]	@ (800b21c <rmw_uxrce_fini_session_memory+0x8>)
 800b218:	f007 bf86 	b.w	8013128 <put_memory>
 800b21c:	2000daa4 	.word	0x2000daa4

0800b220 <rmw_uxrce_fini_node_memory>:
 800b220:	b538      	push	{r3, r4, r5, lr}
 800b222:	4604      	mov	r4, r0
 800b224:	6800      	ldr	r0, [r0, #0]
 800b226:	b128      	cbz	r0, 800b234 <rmw_uxrce_fini_node_memory+0x14>
 800b228:	4b07      	ldr	r3, [pc, #28]	@ (800b248 <rmw_uxrce_fini_node_memory+0x28>)
 800b22a:	6819      	ldr	r1, [r3, #0]
 800b22c:	f7f4 ffd8 	bl	80001e0 <strcmp>
 800b230:	b940      	cbnz	r0, 800b244 <rmw_uxrce_fini_node_memory+0x24>
 800b232:	6020      	str	r0, [r4, #0]
 800b234:	6861      	ldr	r1, [r4, #4]
 800b236:	b129      	cbz	r1, 800b244 <rmw_uxrce_fini_node_memory+0x24>
 800b238:	2500      	movs	r5, #0
 800b23a:	4804      	ldr	r0, [pc, #16]	@ (800b24c <rmw_uxrce_fini_node_memory+0x2c>)
 800b23c:	610d      	str	r5, [r1, #16]
 800b23e:	f007 ff73 	bl	8013128 <put_memory>
 800b242:	6065      	str	r5, [r4, #4]
 800b244:	bd38      	pop	{r3, r4, r5, pc}
 800b246:	bf00      	nop
 800b248:	080172ec 	.word	0x080172ec
 800b24c:	2000da74 	.word	0x2000da74

0800b250 <rmw_uxrce_fini_publisher_memory>:
 800b250:	b510      	push	{r4, lr}
 800b252:	4604      	mov	r4, r0
 800b254:	6800      	ldr	r0, [r0, #0]
 800b256:	b128      	cbz	r0, 800b264 <rmw_uxrce_fini_publisher_memory+0x14>
 800b258:	4b06      	ldr	r3, [pc, #24]	@ (800b274 <rmw_uxrce_fini_publisher_memory+0x24>)
 800b25a:	6819      	ldr	r1, [r3, #0]
 800b25c:	f7f4 ffc0 	bl	80001e0 <strcmp>
 800b260:	b938      	cbnz	r0, 800b272 <rmw_uxrce_fini_publisher_memory+0x22>
 800b262:	6020      	str	r0, [r4, #0]
 800b264:	6861      	ldr	r1, [r4, #4]
 800b266:	b121      	cbz	r1, 800b272 <rmw_uxrce_fini_publisher_memory+0x22>
 800b268:	4803      	ldr	r0, [pc, #12]	@ (800b278 <rmw_uxrce_fini_publisher_memory+0x28>)
 800b26a:	f007 ff5d 	bl	8013128 <put_memory>
 800b26e:	2300      	movs	r3, #0
 800b270:	6063      	str	r3, [r4, #4]
 800b272:	bd10      	pop	{r4, pc}
 800b274:	080172ec 	.word	0x080172ec
 800b278:	2000da84 	.word	0x2000da84

0800b27c <rmw_uxrce_fini_subscription_memory>:
 800b27c:	b510      	push	{r4, lr}
 800b27e:	4604      	mov	r4, r0
 800b280:	6800      	ldr	r0, [r0, #0]
 800b282:	b128      	cbz	r0, 800b290 <rmw_uxrce_fini_subscription_memory+0x14>
 800b284:	4b06      	ldr	r3, [pc, #24]	@ (800b2a0 <rmw_uxrce_fini_subscription_memory+0x24>)
 800b286:	6819      	ldr	r1, [r3, #0]
 800b288:	f7f4 ffaa 	bl	80001e0 <strcmp>
 800b28c:	b938      	cbnz	r0, 800b29e <rmw_uxrce_fini_subscription_memory+0x22>
 800b28e:	6020      	str	r0, [r4, #0]
 800b290:	6861      	ldr	r1, [r4, #4]
 800b292:	b121      	cbz	r1, 800b29e <rmw_uxrce_fini_subscription_memory+0x22>
 800b294:	4803      	ldr	r0, [pc, #12]	@ (800b2a4 <rmw_uxrce_fini_subscription_memory+0x28>)
 800b296:	f007 ff47 	bl	8013128 <put_memory>
 800b29a:	2300      	movs	r3, #0
 800b29c:	6063      	str	r3, [r4, #4]
 800b29e:	bd10      	pop	{r4, pc}
 800b2a0:	080172ec 	.word	0x080172ec
 800b2a4:	2000dac4 	.word	0x2000dac4

0800b2a8 <rmw_uxrce_fini_service_memory>:
 800b2a8:	b510      	push	{r4, lr}
 800b2aa:	4604      	mov	r4, r0
 800b2ac:	6800      	ldr	r0, [r0, #0]
 800b2ae:	b128      	cbz	r0, 800b2bc <rmw_uxrce_fini_service_memory+0x14>
 800b2b0:	4b06      	ldr	r3, [pc, #24]	@ (800b2cc <rmw_uxrce_fini_service_memory+0x24>)
 800b2b2:	6819      	ldr	r1, [r3, #0]
 800b2b4:	f7f4 ff94 	bl	80001e0 <strcmp>
 800b2b8:	b938      	cbnz	r0, 800b2ca <rmw_uxrce_fini_service_memory+0x22>
 800b2ba:	6020      	str	r0, [r4, #0]
 800b2bc:	6861      	ldr	r1, [r4, #4]
 800b2be:	b121      	cbz	r1, 800b2ca <rmw_uxrce_fini_service_memory+0x22>
 800b2c0:	4803      	ldr	r0, [pc, #12]	@ (800b2d0 <rmw_uxrce_fini_service_memory+0x28>)
 800b2c2:	f007 ff31 	bl	8013128 <put_memory>
 800b2c6:	2300      	movs	r3, #0
 800b2c8:	6063      	str	r3, [r4, #4]
 800b2ca:	bd10      	pop	{r4, pc}
 800b2cc:	080172ec 	.word	0x080172ec
 800b2d0:	2000da94 	.word	0x2000da94

0800b2d4 <rmw_uxrce_fini_client_memory>:
 800b2d4:	b510      	push	{r4, lr}
 800b2d6:	4604      	mov	r4, r0
 800b2d8:	6800      	ldr	r0, [r0, #0]
 800b2da:	b128      	cbz	r0, 800b2e8 <rmw_uxrce_fini_client_memory+0x14>
 800b2dc:	4b06      	ldr	r3, [pc, #24]	@ (800b2f8 <rmw_uxrce_fini_client_memory+0x24>)
 800b2de:	6819      	ldr	r1, [r3, #0]
 800b2e0:	f7f4 ff7e 	bl	80001e0 <strcmp>
 800b2e4:	b938      	cbnz	r0, 800b2f6 <rmw_uxrce_fini_client_memory+0x22>
 800b2e6:	6020      	str	r0, [r4, #0]
 800b2e8:	6861      	ldr	r1, [r4, #4]
 800b2ea:	b121      	cbz	r1, 800b2f6 <rmw_uxrce_fini_client_memory+0x22>
 800b2ec:	4803      	ldr	r0, [pc, #12]	@ (800b2fc <rmw_uxrce_fini_client_memory+0x28>)
 800b2ee:	f007 ff1b 	bl	8013128 <put_memory>
 800b2f2:	2300      	movs	r3, #0
 800b2f4:	6063      	str	r3, [r4, #4]
 800b2f6:	bd10      	pop	{r4, pc}
 800b2f8:	080172ec 	.word	0x080172ec
 800b2fc:	200091a4 	.word	0x200091a4

0800b300 <rmw_uxrce_fini_topic_memory>:
 800b300:	b510      	push	{r4, lr}
 800b302:	4604      	mov	r4, r0
 800b304:	4621      	mov	r1, r4
 800b306:	4803      	ldr	r0, [pc, #12]	@ (800b314 <rmw_uxrce_fini_topic_memory+0x14>)
 800b308:	f007 ff0e 	bl	8013128 <put_memory>
 800b30c:	2300      	movs	r3, #0
 800b30e:	61a3      	str	r3, [r4, #24]
 800b310:	bd10      	pop	{r4, pc}
 800b312:	bf00      	nop
 800b314:	2000dad4 	.word	0x2000dad4

0800b318 <rmw_uxrce_get_static_input_buffer_for_entity>:
 800b318:	b082      	sub	sp, #8
 800b31a:	b530      	push	{r4, r5, lr}
 800b31c:	4925      	ldr	r1, [pc, #148]	@ (800b3b4 <rmw_uxrce_get_static_input_buffer_for_entity+0x9c>)
 800b31e:	680d      	ldr	r5, [r1, #0]
 800b320:	ac03      	add	r4, sp, #12
 800b322:	e884 000c 	stmia.w	r4, {r2, r3}
 800b326:	461c      	mov	r4, r3
 800b328:	2d00      	cmp	r5, #0
 800b32a:	d041      	beq.n	800b3b0 <rmw_uxrce_get_static_input_buffer_for_entity+0x98>
 800b32c:	462b      	mov	r3, r5
 800b32e:	2100      	movs	r1, #0
 800b330:	689a      	ldr	r2, [r3, #8]
 800b332:	685b      	ldr	r3, [r3, #4]
 800b334:	f8d2 2814 	ldr.w	r2, [r2, #2068]	@ 0x814
 800b338:	4290      	cmp	r0, r2
 800b33a:	bf08      	it	eq
 800b33c:	3101      	addeq	r1, #1
 800b33e:	2b00      	cmp	r3, #0
 800b340:	d1f6      	bne.n	800b330 <rmw_uxrce_get_static_input_buffer_for_entity+0x18>
 800b342:	f89d 300c 	ldrb.w	r3, [sp, #12]
 800b346:	2b02      	cmp	r3, #2
 800b348:	d029      	beq.n	800b39e <rmw_uxrce_get_static_input_buffer_for_entity+0x86>
 800b34a:	d907      	bls.n	800b35c <rmw_uxrce_get_static_input_buffer_for_entity+0x44>
 800b34c:	2b03      	cmp	r3, #3
 800b34e:	d005      	beq.n	800b35c <rmw_uxrce_get_static_input_buffer_for_entity+0x44>
 800b350:	2100      	movs	r1, #0
 800b352:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800b356:	4608      	mov	r0, r1
 800b358:	b002      	add	sp, #8
 800b35a:	4770      	bx	lr
 800b35c:	b314      	cbz	r4, 800b3a4 <rmw_uxrce_get_static_input_buffer_for_entity+0x8c>
 800b35e:	428c      	cmp	r4, r1
 800b360:	d820      	bhi.n	800b3a4 <rmw_uxrce_get_static_input_buffer_for_entity+0x8c>
 800b362:	2d00      	cmp	r5, #0
 800b364:	d0f4      	beq.n	800b350 <rmw_uxrce_get_static_input_buffer_for_entity+0x38>
 800b366:	2100      	movs	r1, #0
 800b368:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
 800b36c:	f06f 4400 	mvn.w	r4, #2147483648	@ 0x80000000
 800b370:	e002      	b.n	800b378 <rmw_uxrce_get_static_input_buffer_for_entity+0x60>
 800b372:	686d      	ldr	r5, [r5, #4]
 800b374:	2d00      	cmp	r5, #0
 800b376:	d0ec      	beq.n	800b352 <rmw_uxrce_get_static_input_buffer_for_entity+0x3a>
 800b378:	68ab      	ldr	r3, [r5, #8]
 800b37a:	f8d3 2814 	ldr.w	r2, [r3, #2068]	@ 0x814
 800b37e:	4290      	cmp	r0, r2
 800b380:	d1f7      	bne.n	800b372 <rmw_uxrce_get_static_input_buffer_for_entity+0x5a>
 800b382:	f8d3 2818 	ldr.w	r2, [r3, #2072]	@ 0x818
 800b386:	f503 6302 	add.w	r3, r3, #2080	@ 0x820
 800b38a:	4562      	cmp	r2, ip
 800b38c:	f853 3c04 	ldr.w	r3, [r3, #-4]
 800b390:	eb73 0e04 	sbcs.w	lr, r3, r4
 800b394:	daed      	bge.n	800b372 <rmw_uxrce_get_static_input_buffer_for_entity+0x5a>
 800b396:	4694      	mov	ip, r2
 800b398:	461c      	mov	r4, r3
 800b39a:	4629      	mov	r1, r5
 800b39c:	e7e9      	b.n	800b372 <rmw_uxrce_get_static_input_buffer_for_entity+0x5a>
 800b39e:	b10c      	cbz	r4, 800b3a4 <rmw_uxrce_get_static_input_buffer_for_entity+0x8c>
 800b3a0:	428c      	cmp	r4, r1
 800b3a2:	d9d5      	bls.n	800b350 <rmw_uxrce_get_static_input_buffer_for_entity+0x38>
 800b3a4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800b3a8:	4802      	ldr	r0, [pc, #8]	@ (800b3b4 <rmw_uxrce_get_static_input_buffer_for_entity+0x9c>)
 800b3aa:	b002      	add	sp, #8
 800b3ac:	f007 beac 	b.w	8013108 <get_memory>
 800b3b0:	4629      	mov	r1, r5
 800b3b2:	e7c6      	b.n	800b342 <rmw_uxrce_get_static_input_buffer_for_entity+0x2a>
 800b3b4:	2000dab4 	.word	0x2000dab4

0800b3b8 <rmw_uxrce_find_static_input_buffer_by_owner>:
 800b3b8:	4b11      	ldr	r3, [pc, #68]	@ (800b400 <rmw_uxrce_find_static_input_buffer_by_owner+0x48>)
 800b3ba:	681b      	ldr	r3, [r3, #0]
 800b3bc:	b530      	push	{r4, r5, lr}
 800b3be:	b1e3      	cbz	r3, 800b3fa <rmw_uxrce_find_static_input_buffer_by_owner+0x42>
 800b3c0:	f04f 3eff 	mov.w	lr, #4294967295	@ 0xffffffff
 800b3c4:	f06f 4c00 	mvn.w	ip, #2147483648	@ 0x80000000
 800b3c8:	2400      	movs	r4, #0
 800b3ca:	e001      	b.n	800b3d0 <rmw_uxrce_find_static_input_buffer_by_owner+0x18>
 800b3cc:	685b      	ldr	r3, [r3, #4]
 800b3ce:	b193      	cbz	r3, 800b3f6 <rmw_uxrce_find_static_input_buffer_by_owner+0x3e>
 800b3d0:	689a      	ldr	r2, [r3, #8]
 800b3d2:	f8d2 1814 	ldr.w	r1, [r2, #2068]	@ 0x814
 800b3d6:	4288      	cmp	r0, r1
 800b3d8:	d1f8      	bne.n	800b3cc <rmw_uxrce_find_static_input_buffer_by_owner+0x14>
 800b3da:	f8d2 1818 	ldr.w	r1, [r2, #2072]	@ 0x818
 800b3de:	f8d2 281c 	ldr.w	r2, [r2, #2076]	@ 0x81c
 800b3e2:	4571      	cmp	r1, lr
 800b3e4:	eb72 050c 	sbcs.w	r5, r2, ip
 800b3e8:	daf0      	bge.n	800b3cc <rmw_uxrce_find_static_input_buffer_by_owner+0x14>
 800b3ea:	461c      	mov	r4, r3
 800b3ec:	685b      	ldr	r3, [r3, #4]
 800b3ee:	468e      	mov	lr, r1
 800b3f0:	4694      	mov	ip, r2
 800b3f2:	2b00      	cmp	r3, #0
 800b3f4:	d1ec      	bne.n	800b3d0 <rmw_uxrce_find_static_input_buffer_by_owner+0x18>
 800b3f6:	4620      	mov	r0, r4
 800b3f8:	bd30      	pop	{r4, r5, pc}
 800b3fa:	461c      	mov	r4, r3
 800b3fc:	4620      	mov	r0, r4
 800b3fe:	bd30      	pop	{r4, r5, pc}
 800b400:	2000dab4 	.word	0x2000dab4
 800b404:	00000000 	.word	0x00000000

0800b408 <rmw_uxrce_clean_expired_static_input_buffer>:
 800b408:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b40c:	4b3c      	ldr	r3, [pc, #240]	@ (800b500 <rmw_uxrce_clean_expired_static_input_buffer+0xf8>)
 800b40e:	ed2d 8b06 	vpush	{d8-d10}
 800b412:	681f      	ldr	r7, [r3, #0]
 800b414:	b08d      	sub	sp, #52	@ 0x34
 800b416:	f008 fa93 	bl	8013940 <rmw_uros_epoch_nanos>
 800b41a:	2f00      	cmp	r7, #0
 800b41c:	d05d      	beq.n	800b4da <rmw_uxrce_clean_expired_static_input_buffer+0xd2>
 800b41e:	46b8      	mov	r8, r7
 800b420:	ed9f 8b31 	vldr	d8, [pc, #196]	@ 800b4e8 <rmw_uxrce_clean_expired_static_input_buffer+0xe0>
 800b424:	f8d8 5008 	ldr.w	r5, [r8, #8]
 800b428:	f895 3820 	ldrb.w	r3, [r5, #2080]	@ 0x820
 800b42c:	2b04      	cmp	r3, #4
 800b42e:	ed9f ab30 	vldr	d10, [pc, #192]	@ 800b4f0 <rmw_uxrce_clean_expired_static_input_buffer+0xe8>
 800b432:	ed9f 9b31 	vldr	d9, [pc, #196]	@ 800b4f8 <rmw_uxrce_clean_expired_static_input_buffer+0xf0>
 800b436:	4681      	mov	r9, r0
 800b438:	468a      	mov	sl, r1
 800b43a:	ac04      	add	r4, sp, #16
 800b43c:	d03f      	beq.n	800b4be <rmw_uxrce_clean_expired_static_input_buffer+0xb6>
 800b43e:	2b05      	cmp	r3, #5
 800b440:	d044      	beq.n	800b4cc <rmw_uxrce_clean_expired_static_input_buffer+0xc4>
 800b442:	2b03      	cmp	r3, #3
 800b444:	d03b      	beq.n	800b4be <rmw_uxrce_clean_expired_static_input_buffer+0xb6>
 800b446:	ed8d 8b04 	vstr	d8, [sp, #16]
 800b44a:	ed8d ab06 	vstr	d10, [sp, #24]
 800b44e:	ed8d 8b08 	vstr	d8, [sp, #32]
 800b452:	ed8d 8b0a 	vstr	d8, [sp, #40]	@ 0x28
 800b456:	ab08      	add	r3, sp, #32
 800b458:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800b45a:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 800b45e:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800b462:	f007 fb9d 	bl	8012ba0 <rmw_time_equal>
 800b466:	b118      	cbz	r0, 800b470 <rmw_uxrce_clean_expired_static_input_buffer+0x68>
 800b468:	ed8d 9b04 	vstr	d9, [sp, #16]
 800b46c:	ed8d 8b06 	vstr	d8, [sp, #24]
 800b470:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800b474:	f8d5 6818 	ldr.w	r6, [r5, #2072]	@ 0x818
 800b478:	f8d5 781c 	ldr.w	r7, [r5, #2076]	@ 0x81c
 800b47c:	f8d8 b004 	ldr.w	fp, [r8, #4]
 800b480:	f007 fbe2 	bl	8012c48 <rmw_time_total_nsec>
 800b484:	1830      	adds	r0, r6, r0
 800b486:	eb47 0101 	adc.w	r1, r7, r1
 800b48a:	4548      	cmp	r0, r9
 800b48c:	eb71 030a 	sbcs.w	r3, r1, sl
 800b490:	f505 6502 	add.w	r5, r5, #2080	@ 0x820
 800b494:	db05      	blt.n	800b4a2 <rmw_uxrce_clean_expired_static_input_buffer+0x9a>
 800b496:	e955 2302 	ldrd	r2, r3, [r5, #-8]
 800b49a:	4591      	cmp	r9, r2
 800b49c:	eb7a 0303 	sbcs.w	r3, sl, r3
 800b4a0:	da03      	bge.n	800b4aa <rmw_uxrce_clean_expired_static_input_buffer+0xa2>
 800b4a2:	4817      	ldr	r0, [pc, #92]	@ (800b500 <rmw_uxrce_clean_expired_static_input_buffer+0xf8>)
 800b4a4:	4641      	mov	r1, r8
 800b4a6:	f007 fe3f 	bl	8013128 <put_memory>
 800b4aa:	f1bb 0f00 	cmp.w	fp, #0
 800b4ae:	d014      	beq.n	800b4da <rmw_uxrce_clean_expired_static_input_buffer+0xd2>
 800b4b0:	46d8      	mov	r8, fp
 800b4b2:	f8d8 5008 	ldr.w	r5, [r8, #8]
 800b4b6:	f895 3820 	ldrb.w	r3, [r5, #2080]	@ 0x820
 800b4ba:	2b04      	cmp	r3, #4
 800b4bc:	d1bf      	bne.n	800b43e <rmw_uxrce_clean_expired_static_input_buffer+0x36>
 800b4be:	f8d5 3814 	ldr.w	r3, [r5, #2068]	@ 0x814
 800b4c2:	3340      	adds	r3, #64	@ 0x40
 800b4c4:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800b4c6:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800b4ca:	e7c0      	b.n	800b44e <rmw_uxrce_clean_expired_static_input_buffer+0x46>
 800b4cc:	f8d5 3814 	ldr.w	r3, [r5, #2068]	@ 0x814
 800b4d0:	3348      	adds	r3, #72	@ 0x48
 800b4d2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800b4d4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800b4d8:	e7b9      	b.n	800b44e <rmw_uxrce_clean_expired_static_input_buffer+0x46>
 800b4da:	b00d      	add	sp, #52	@ 0x34
 800b4dc:	ecbd 8b06 	vpop	{d8-d10}
 800b4e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b4e4:	f3af 8000 	nop.w
	...
 800b4f0:	00000001 	.word	0x00000001
 800b4f4:	00000000 	.word	0x00000000
 800b4f8:	0000001e 	.word	0x0000001e
 800b4fc:	00000000 	.word	0x00000000
 800b500:	2000dab4 	.word	0x2000dab4

0800b504 <run_xrce_session>:
 800b504:	b510      	push	{r4, lr}
 800b506:	788c      	ldrb	r4, [r1, #2]
 800b508:	b086      	sub	sp, #24
 800b50a:	2c01      	cmp	r4, #1
 800b50c:	f8ad 200e 	strh.w	r2, [sp, #14]
 800b510:	d00c      	beq.n	800b52c <run_xrce_session+0x28>
 800b512:	4619      	mov	r1, r3
 800b514:	2301      	movs	r3, #1
 800b516:	9300      	str	r3, [sp, #0]
 800b518:	f10d 020e 	add.w	r2, sp, #14
 800b51c:	f10d 0317 	add.w	r3, sp, #23
 800b520:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800b524:	f002 f9ae 	bl	800d884 <uxr_run_session_until_all_status>
 800b528:	b006      	add	sp, #24
 800b52a:	bd10      	pop	{r4, pc}
 800b52c:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800b530:	f001 fdc2 	bl	800d0b8 <uxr_flash_output_streams>
 800b534:	4620      	mov	r0, r4
 800b536:	b006      	add	sp, #24
 800b538:	bd10      	pop	{r4, pc}
 800b53a:	bf00      	nop

0800b53c <convert_qos_profile>:
 800b53c:	7a4a      	ldrb	r2, [r1, #9]
 800b53e:	f891 c008 	ldrb.w	ip, [r1, #8]
 800b542:	2a02      	cmp	r2, #2
 800b544:	bf18      	it	ne
 800b546:	2200      	movne	r2, #0
 800b548:	7002      	strb	r2, [r0, #0]
 800b54a:	780a      	ldrb	r2, [r1, #0]
 800b54c:	8889      	ldrh	r1, [r1, #4]
 800b54e:	8081      	strh	r1, [r0, #4]
 800b550:	f1ac 0c02 	sub.w	ip, ip, #2
 800b554:	f1a2 0202 	sub.w	r2, r2, #2
 800b558:	fabc fc8c 	clz	ip, ip
 800b55c:	fab2 f282 	clz	r2, r2
 800b560:	ea4f 1c5c 	mov.w	ip, ip, lsr #5
 800b564:	0952      	lsrs	r2, r2, #5
 800b566:	f880 c001 	strb.w	ip, [r0, #1]
 800b56a:	7082      	strb	r2, [r0, #2]
 800b56c:	4770      	bx	lr
 800b56e:	bf00      	nop

0800b570 <generate_type_name>:
 800b570:	b530      	push	{r4, r5, lr}
 800b572:	2300      	movs	r3, #0
 800b574:	700b      	strb	r3, [r1, #0]
 800b576:	6803      	ldr	r3, [r0, #0]
 800b578:	b087      	sub	sp, #28
 800b57a:	4614      	mov	r4, r2
 800b57c:	b1d3      	cbz	r3, 800b5b4 <generate_type_name+0x44>
 800b57e:	4a0f      	ldr	r2, [pc, #60]	@ (800b5bc <generate_type_name+0x4c>)
 800b580:	4615      	mov	r5, r2
 800b582:	9203      	str	r2, [sp, #12]
 800b584:	9500      	str	r5, [sp, #0]
 800b586:	6842      	ldr	r2, [r0, #4]
 800b588:	480d      	ldr	r0, [pc, #52]	@ (800b5c0 <generate_type_name+0x50>)
 800b58a:	9001      	str	r0, [sp, #4]
 800b58c:	4608      	mov	r0, r1
 800b58e:	490d      	ldr	r1, [pc, #52]	@ (800b5c4 <generate_type_name+0x54>)
 800b590:	9204      	str	r2, [sp, #16]
 800b592:	9105      	str	r1, [sp, #20]
 800b594:	9102      	str	r1, [sp, #8]
 800b596:	4a0c      	ldr	r2, [pc, #48]	@ (800b5c8 <generate_type_name+0x58>)
 800b598:	4621      	mov	r1, r4
 800b59a:	f00a f867 	bl	801566c <sniprintf>
 800b59e:	2800      	cmp	r0, #0
 800b5a0:	db05      	blt.n	800b5ae <generate_type_name+0x3e>
 800b5a2:	4284      	cmp	r4, r0
 800b5a4:	bfd4      	ite	le
 800b5a6:	2000      	movle	r0, #0
 800b5a8:	2001      	movgt	r0, #1
 800b5aa:	b007      	add	sp, #28
 800b5ac:	bd30      	pop	{r4, r5, pc}
 800b5ae:	2000      	movs	r0, #0
 800b5b0:	b007      	add	sp, #28
 800b5b2:	bd30      	pop	{r4, r5, pc}
 800b5b4:	4b05      	ldr	r3, [pc, #20]	@ (800b5cc <generate_type_name+0x5c>)
 800b5b6:	4a01      	ldr	r2, [pc, #4]	@ (800b5bc <generate_type_name+0x4c>)
 800b5b8:	461d      	mov	r5, r3
 800b5ba:	e7e2      	b.n	800b582 <generate_type_name+0x12>
 800b5bc:	080169c8 	.word	0x080169c8
 800b5c0:	080169e0 	.word	0x080169e0
 800b5c4:	080169dc 	.word	0x080169dc
 800b5c8:	080169cc 	.word	0x080169cc
 800b5cc:	080170c4 	.word	0x080170c4

0800b5d0 <generate_topic_name>:
 800b5d0:	b510      	push	{r4, lr}
 800b5d2:	b082      	sub	sp, #8
 800b5d4:	4614      	mov	r4, r2
 800b5d6:	9000      	str	r0, [sp, #0]
 800b5d8:	4b08      	ldr	r3, [pc, #32]	@ (800b5fc <generate_topic_name+0x2c>)
 800b5da:	4a09      	ldr	r2, [pc, #36]	@ (800b600 <generate_topic_name+0x30>)
 800b5dc:	4608      	mov	r0, r1
 800b5de:	4621      	mov	r1, r4
 800b5e0:	f00a f844 	bl	801566c <sniprintf>
 800b5e4:	2800      	cmp	r0, #0
 800b5e6:	db05      	blt.n	800b5f4 <generate_topic_name+0x24>
 800b5e8:	4284      	cmp	r4, r0
 800b5ea:	bfd4      	ite	le
 800b5ec:	2000      	movle	r0, #0
 800b5ee:	2001      	movgt	r0, #1
 800b5f0:	b002      	add	sp, #8
 800b5f2:	bd10      	pop	{r4, pc}
 800b5f4:	2000      	movs	r0, #0
 800b5f6:	b002      	add	sp, #8
 800b5f8:	bd10      	pop	{r4, pc}
 800b5fa:	bf00      	nop
 800b5fc:	080169ec 	.word	0x080169ec
 800b600:	080169e4 	.word	0x080169e4

0800b604 <is_uxrce_rmw_identifier_valid>:
 800b604:	b510      	push	{r4, lr}
 800b606:	4604      	mov	r4, r0
 800b608:	b140      	cbz	r0, 800b61c <is_uxrce_rmw_identifier_valid+0x18>
 800b60a:	f007 fde5 	bl	80131d8 <rmw_get_implementation_identifier>
 800b60e:	4601      	mov	r1, r0
 800b610:	4620      	mov	r0, r4
 800b612:	f7f4 fde5 	bl	80001e0 <strcmp>
 800b616:	fab0 f080 	clz	r0, r0
 800b61a:	0940      	lsrs	r0, r0, #5
 800b61c:	bd10      	pop	{r4, pc}
 800b61e:	bf00      	nop

0800b620 <get_message_typesupport_handle>:
 800b620:	6883      	ldr	r3, [r0, #8]
 800b622:	4718      	bx	r3

0800b624 <get_message_typesupport_handle_function>:
 800b624:	b510      	push	{r4, lr}
 800b626:	4604      	mov	r4, r0
 800b628:	6800      	ldr	r0, [r0, #0]
 800b62a:	f7f4 fdd9 	bl	80001e0 <strcmp>
 800b62e:	2800      	cmp	r0, #0
 800b630:	bf0c      	ite	eq
 800b632:	4620      	moveq	r0, r4
 800b634:	2000      	movne	r0, #0
 800b636:	bd10      	pop	{r4, pc}

0800b638 <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Int32>:
 800b638:	4b04      	ldr	r3, [pc, #16]	@ (800b64c <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Int32+0x14>)
 800b63a:	681a      	ldr	r2, [r3, #0]
 800b63c:	b10a      	cbz	r2, 800b642 <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Int32+0xa>
 800b63e:	4803      	ldr	r0, [pc, #12]	@ (800b64c <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Int32+0x14>)
 800b640:	4770      	bx	lr
 800b642:	4a03      	ldr	r2, [pc, #12]	@ (800b650 <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Int32+0x18>)
 800b644:	4801      	ldr	r0, [pc, #4]	@ (800b64c <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Int32+0x14>)
 800b646:	6812      	ldr	r2, [r2, #0]
 800b648:	601a      	str	r2, [r3, #0]
 800b64a:	4770      	bx	lr
 800b64c:	20000030 	.word	0x20000030
 800b650:	200000ac 	.word	0x200000ac

0800b654 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Int32>:
 800b654:	4a02      	ldr	r2, [pc, #8]	@ (800b660 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Int32+0xc>)
 800b656:	4b03      	ldr	r3, [pc, #12]	@ (800b664 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Int32+0x10>)
 800b658:	6812      	ldr	r2, [r2, #0]
 800b65a:	601a      	str	r2, [r3, #0]
 800b65c:	4770      	bx	lr
 800b65e:	bf00      	nop
 800b660:	200000ac 	.word	0x200000ac
 800b664:	20000030 	.word	0x20000030

0800b668 <std_msgs__msg__Int32__rosidl_typesupport_introspection_c__Int32_init_function>:
 800b668:	f008 b9a6 	b.w	80139b8 <std_msgs__msg__Int32__init>

0800b66c <std_msgs__msg__Int32__rosidl_typesupport_introspection_c__Int32_fini_function>:
 800b66c:	f008 b9a8 	b.w	80139c0 <std_msgs__msg__Int32__fini>

0800b670 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Int32>:
 800b670:	4b04      	ldr	r3, [pc, #16]	@ (800b684 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Int32+0x14>)
 800b672:	681a      	ldr	r2, [r3, #0]
 800b674:	b10a      	cbz	r2, 800b67a <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Int32+0xa>
 800b676:	4803      	ldr	r0, [pc, #12]	@ (800b684 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Int32+0x14>)
 800b678:	4770      	bx	lr
 800b67a:	4a03      	ldr	r2, [pc, #12]	@ (800b688 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Int32+0x18>)
 800b67c:	4801      	ldr	r0, [pc, #4]	@ (800b684 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Int32+0x14>)
 800b67e:	6812      	ldr	r2, [r2, #0]
 800b680:	601a      	str	r2, [r3, #0]
 800b682:	4770      	bx	lr
 800b684:	20000078 	.word	0x20000078
 800b688:	200000b0 	.word	0x200000b0

0800b68c <_Int32__max_serialized_size>:
 800b68c:	b508      	push	{r3, lr}
 800b68e:	2104      	movs	r1, #4
 800b690:	2000      	movs	r0, #0
 800b692:	f001 f807 	bl	800c6a4 <ucdr_alignment>
 800b696:	3004      	adds	r0, #4
 800b698:	bd08      	pop	{r3, pc}
 800b69a:	bf00      	nop

0800b69c <_Int32__cdr_deserialize>:
 800b69c:	b109      	cbz	r1, 800b6a2 <_Int32__cdr_deserialize+0x6>
 800b69e:	f000 bf19 	b.w	800c4d4 <ucdr_deserialize_int32_t>
 800b6a2:	4608      	mov	r0, r1
 800b6a4:	4770      	bx	lr
 800b6a6:	bf00      	nop

0800b6a8 <get_serialized_size_std_msgs__msg__Int32>:
 800b6a8:	b138      	cbz	r0, 800b6ba <get_serialized_size_std_msgs__msg__Int32+0x12>
 800b6aa:	b508      	push	{r3, lr}
 800b6ac:	460b      	mov	r3, r1
 800b6ae:	4618      	mov	r0, r3
 800b6b0:	2104      	movs	r1, #4
 800b6b2:	f000 fff7 	bl	800c6a4 <ucdr_alignment>
 800b6b6:	3004      	adds	r0, #4
 800b6b8:	bd08      	pop	{r3, pc}
 800b6ba:	4770      	bx	lr

0800b6bc <_Int32__cdr_serialize>:
 800b6bc:	460a      	mov	r2, r1
 800b6be:	b118      	cbz	r0, 800b6c8 <_Int32__cdr_serialize+0xc>
 800b6c0:	6801      	ldr	r1, [r0, #0]
 800b6c2:	4610      	mov	r0, r2
 800b6c4:	f000 be6e 	b.w	800c3a4 <ucdr_serialize_int32_t>
 800b6c8:	4770      	bx	lr
 800b6ca:	bf00      	nop

0800b6cc <_Int32__get_serialized_size>:
 800b6cc:	b130      	cbz	r0, 800b6dc <_Int32__get_serialized_size+0x10>
 800b6ce:	b508      	push	{r3, lr}
 800b6d0:	2104      	movs	r1, #4
 800b6d2:	2000      	movs	r0, #0
 800b6d4:	f000 ffe6 	bl	800c6a4 <ucdr_alignment>
 800b6d8:	3004      	adds	r0, #4
 800b6da:	bd08      	pop	{r3, pc}
 800b6dc:	4770      	bx	lr
 800b6de:	bf00      	nop

0800b6e0 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__Int32>:
 800b6e0:	4800      	ldr	r0, [pc, #0]	@ (800b6e4 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__Int32+0x4>)
 800b6e2:	4770      	bx	lr
 800b6e4:	20000084 	.word	0x20000084

0800b6e8 <ucdr_serialize_bool>:
 800b6e8:	b538      	push	{r3, r4, r5, lr}
 800b6ea:	460d      	mov	r5, r1
 800b6ec:	2101      	movs	r1, #1
 800b6ee:	4604      	mov	r4, r0
 800b6f0:	f000 ff8c 	bl	800c60c <ucdr_check_final_buffer_behavior>
 800b6f4:	b148      	cbz	r0, 800b70a <ucdr_serialize_bool+0x22>
 800b6f6:	68a3      	ldr	r3, [r4, #8]
 800b6f8:	701d      	strb	r5, [r3, #0]
 800b6fa:	68a2      	ldr	r2, [r4, #8]
 800b6fc:	6923      	ldr	r3, [r4, #16]
 800b6fe:	2101      	movs	r1, #1
 800b700:	440a      	add	r2, r1
 800b702:	440b      	add	r3, r1
 800b704:	60a2      	str	r2, [r4, #8]
 800b706:	6123      	str	r3, [r4, #16]
 800b708:	7561      	strb	r1, [r4, #21]
 800b70a:	7da0      	ldrb	r0, [r4, #22]
 800b70c:	f080 0001 	eor.w	r0, r0, #1
 800b710:	bd38      	pop	{r3, r4, r5, pc}
 800b712:	bf00      	nop

0800b714 <ucdr_deserialize_bool>:
 800b714:	b538      	push	{r3, r4, r5, lr}
 800b716:	460d      	mov	r5, r1
 800b718:	2101      	movs	r1, #1
 800b71a:	4604      	mov	r4, r0
 800b71c:	f000 ff76 	bl	800c60c <ucdr_check_final_buffer_behavior>
 800b720:	b160      	cbz	r0, 800b73c <ucdr_deserialize_bool+0x28>
 800b722:	68a2      	ldr	r2, [r4, #8]
 800b724:	6923      	ldr	r3, [r4, #16]
 800b726:	f812 1b01 	ldrb.w	r1, [r2], #1
 800b72a:	3900      	subs	r1, #0
 800b72c:	bf18      	it	ne
 800b72e:	2101      	movne	r1, #1
 800b730:	7029      	strb	r1, [r5, #0]
 800b732:	3301      	adds	r3, #1
 800b734:	2101      	movs	r1, #1
 800b736:	60a2      	str	r2, [r4, #8]
 800b738:	6123      	str	r3, [r4, #16]
 800b73a:	7561      	strb	r1, [r4, #21]
 800b73c:	7da0      	ldrb	r0, [r4, #22]
 800b73e:	f080 0001 	eor.w	r0, r0, #1
 800b742:	bd38      	pop	{r3, r4, r5, pc}

0800b744 <ucdr_serialize_uint8_t>:
 800b744:	b538      	push	{r3, r4, r5, lr}
 800b746:	460d      	mov	r5, r1
 800b748:	2101      	movs	r1, #1
 800b74a:	4604      	mov	r4, r0
 800b74c:	f000 ff5e 	bl	800c60c <ucdr_check_final_buffer_behavior>
 800b750:	b148      	cbz	r0, 800b766 <ucdr_serialize_uint8_t+0x22>
 800b752:	68a3      	ldr	r3, [r4, #8]
 800b754:	701d      	strb	r5, [r3, #0]
 800b756:	68a2      	ldr	r2, [r4, #8]
 800b758:	6923      	ldr	r3, [r4, #16]
 800b75a:	2101      	movs	r1, #1
 800b75c:	440a      	add	r2, r1
 800b75e:	440b      	add	r3, r1
 800b760:	60a2      	str	r2, [r4, #8]
 800b762:	6123      	str	r3, [r4, #16]
 800b764:	7561      	strb	r1, [r4, #21]
 800b766:	7da0      	ldrb	r0, [r4, #22]
 800b768:	f080 0001 	eor.w	r0, r0, #1
 800b76c:	bd38      	pop	{r3, r4, r5, pc}
 800b76e:	bf00      	nop

0800b770 <ucdr_deserialize_uint8_t>:
 800b770:	b538      	push	{r3, r4, r5, lr}
 800b772:	460d      	mov	r5, r1
 800b774:	2101      	movs	r1, #1
 800b776:	4604      	mov	r4, r0
 800b778:	f000 ff48 	bl	800c60c <ucdr_check_final_buffer_behavior>
 800b77c:	b150      	cbz	r0, 800b794 <ucdr_deserialize_uint8_t+0x24>
 800b77e:	68a3      	ldr	r3, [r4, #8]
 800b780:	781b      	ldrb	r3, [r3, #0]
 800b782:	702b      	strb	r3, [r5, #0]
 800b784:	68a2      	ldr	r2, [r4, #8]
 800b786:	6923      	ldr	r3, [r4, #16]
 800b788:	2101      	movs	r1, #1
 800b78a:	440a      	add	r2, r1
 800b78c:	440b      	add	r3, r1
 800b78e:	60a2      	str	r2, [r4, #8]
 800b790:	6123      	str	r3, [r4, #16]
 800b792:	7561      	strb	r1, [r4, #21]
 800b794:	7da0      	ldrb	r0, [r4, #22]
 800b796:	f080 0001 	eor.w	r0, r0, #1
 800b79a:	bd38      	pop	{r3, r4, r5, pc}

0800b79c <ucdr_serialize_uint16_t>:
 800b79c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b7a0:	b082      	sub	sp, #8
 800b7a2:	460b      	mov	r3, r1
 800b7a4:	2102      	movs	r1, #2
 800b7a6:	4604      	mov	r4, r0
 800b7a8:	f8ad 3006 	strh.w	r3, [sp, #6]
 800b7ac:	f000 ff82 	bl	800c6b4 <ucdr_buffer_alignment>
 800b7b0:	4601      	mov	r1, r0
 800b7b2:	4620      	mov	r0, r4
 800b7b4:	7d67      	ldrb	r7, [r4, #21]
 800b7b6:	f000 ffc1 	bl	800c73c <ucdr_advance_buffer>
 800b7ba:	2102      	movs	r1, #2
 800b7bc:	4620      	mov	r0, r4
 800b7be:	f000 ff19 	bl	800c5f4 <ucdr_check_buffer_available_for>
 800b7c2:	bb78      	cbnz	r0, 800b824 <ucdr_serialize_uint16_t+0x88>
 800b7c4:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 800b7c8:	42ab      	cmp	r3, r5
 800b7ca:	d926      	bls.n	800b81a <ucdr_serialize_uint16_t+0x7e>
 800b7cc:	1b5e      	subs	r6, r3, r5
 800b7ce:	60a3      	str	r3, [r4, #8]
 800b7d0:	6923      	ldr	r3, [r4, #16]
 800b7d2:	f1c6 0802 	rsb	r8, r6, #2
 800b7d6:	4433      	add	r3, r6
 800b7d8:	6123      	str	r3, [r4, #16]
 800b7da:	4641      	mov	r1, r8
 800b7dc:	4620      	mov	r0, r4
 800b7de:	f000 ff15 	bl	800c60c <ucdr_check_final_buffer_behavior>
 800b7e2:	2800      	cmp	r0, #0
 800b7e4:	d03b      	beq.n	800b85e <ucdr_serialize_uint16_t+0xc2>
 800b7e6:	7d23      	ldrb	r3, [r4, #20]
 800b7e8:	2b01      	cmp	r3, #1
 800b7ea:	d04a      	beq.n	800b882 <ucdr_serialize_uint16_t+0xe6>
 800b7ec:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800b7f0:	702b      	strb	r3, [r5, #0]
 800b7f2:	2e00      	cmp	r6, #0
 800b7f4:	d040      	beq.n	800b878 <ucdr_serialize_uint16_t+0xdc>
 800b7f6:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800b7fa:	706b      	strb	r3, [r5, #1]
 800b7fc:	6923      	ldr	r3, [r4, #16]
 800b7fe:	68a2      	ldr	r2, [r4, #8]
 800b800:	7da0      	ldrb	r0, [r4, #22]
 800b802:	3302      	adds	r3, #2
 800b804:	1b9e      	subs	r6, r3, r6
 800b806:	4442      	add	r2, r8
 800b808:	2302      	movs	r3, #2
 800b80a:	f080 0001 	eor.w	r0, r0, #1
 800b80e:	60a2      	str	r2, [r4, #8]
 800b810:	6126      	str	r6, [r4, #16]
 800b812:	7563      	strb	r3, [r4, #21]
 800b814:	b002      	add	sp, #8
 800b816:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b81a:	2102      	movs	r1, #2
 800b81c:	4620      	mov	r0, r4
 800b81e:	f000 fef5 	bl	800c60c <ucdr_check_final_buffer_behavior>
 800b822:	b190      	cbz	r0, 800b84a <ucdr_serialize_uint16_t+0xae>
 800b824:	7d23      	ldrb	r3, [r4, #20]
 800b826:	2b01      	cmp	r3, #1
 800b828:	68a3      	ldr	r3, [r4, #8]
 800b82a:	d014      	beq.n	800b856 <ucdr_serialize_uint16_t+0xba>
 800b82c:	f89d 2007 	ldrb.w	r2, [sp, #7]
 800b830:	701a      	strb	r2, [r3, #0]
 800b832:	68a3      	ldr	r3, [r4, #8]
 800b834:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800b838:	705a      	strb	r2, [r3, #1]
 800b83a:	68a2      	ldr	r2, [r4, #8]
 800b83c:	6923      	ldr	r3, [r4, #16]
 800b83e:	3202      	adds	r2, #2
 800b840:	3302      	adds	r3, #2
 800b842:	2102      	movs	r1, #2
 800b844:	60a2      	str	r2, [r4, #8]
 800b846:	6123      	str	r3, [r4, #16]
 800b848:	7561      	strb	r1, [r4, #21]
 800b84a:	7da0      	ldrb	r0, [r4, #22]
 800b84c:	f080 0001 	eor.w	r0, r0, #1
 800b850:	b002      	add	sp, #8
 800b852:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b856:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 800b85a:	801a      	strh	r2, [r3, #0]
 800b85c:	e7ed      	b.n	800b83a <ucdr_serialize_uint16_t+0x9e>
 800b85e:	68a2      	ldr	r2, [r4, #8]
 800b860:	6923      	ldr	r3, [r4, #16]
 800b862:	7da0      	ldrb	r0, [r4, #22]
 800b864:	7567      	strb	r7, [r4, #21]
 800b866:	1b92      	subs	r2, r2, r6
 800b868:	1b9b      	subs	r3, r3, r6
 800b86a:	f080 0001 	eor.w	r0, r0, #1
 800b86e:	60a2      	str	r2, [r4, #8]
 800b870:	6123      	str	r3, [r4, #16]
 800b872:	b002      	add	sp, #8
 800b874:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b878:	68a3      	ldr	r3, [r4, #8]
 800b87a:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800b87e:	701a      	strb	r2, [r3, #0]
 800b880:	e7bc      	b.n	800b7fc <ucdr_serialize_uint16_t+0x60>
 800b882:	4628      	mov	r0, r5
 800b884:	f10d 0506 	add.w	r5, sp, #6
 800b888:	4629      	mov	r1, r5
 800b88a:	4632      	mov	r2, r6
 800b88c:	f00a f891 	bl	80159b2 <memcpy>
 800b890:	68a0      	ldr	r0, [r4, #8]
 800b892:	4642      	mov	r2, r8
 800b894:	19a9      	adds	r1, r5, r6
 800b896:	f00a f88c 	bl	80159b2 <memcpy>
 800b89a:	e7af      	b.n	800b7fc <ucdr_serialize_uint16_t+0x60>

0800b89c <ucdr_serialize_endian_uint16_t>:
 800b89c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800b8a0:	b083      	sub	sp, #12
 800b8a2:	460d      	mov	r5, r1
 800b8a4:	2102      	movs	r1, #2
 800b8a6:	4604      	mov	r4, r0
 800b8a8:	f8ad 2006 	strh.w	r2, [sp, #6]
 800b8ac:	f000 ff02 	bl	800c6b4 <ucdr_buffer_alignment>
 800b8b0:	4601      	mov	r1, r0
 800b8b2:	4620      	mov	r0, r4
 800b8b4:	f894 8015 	ldrb.w	r8, [r4, #21]
 800b8b8:	f000 ff40 	bl	800c73c <ucdr_advance_buffer>
 800b8bc:	2102      	movs	r1, #2
 800b8be:	4620      	mov	r0, r4
 800b8c0:	f000 fe98 	bl	800c5f4 <ucdr_check_buffer_available_for>
 800b8c4:	bb70      	cbnz	r0, 800b924 <ucdr_serialize_endian_uint16_t+0x88>
 800b8c6:	e9d4 6701 	ldrd	r6, r7, [r4, #4]
 800b8ca:	42be      	cmp	r6, r7
 800b8cc:	d925      	bls.n	800b91a <ucdr_serialize_endian_uint16_t+0x7e>
 800b8ce:	6923      	ldr	r3, [r4, #16]
 800b8d0:	60a6      	str	r6, [r4, #8]
 800b8d2:	1bf6      	subs	r6, r6, r7
 800b8d4:	4433      	add	r3, r6
 800b8d6:	f1c6 0902 	rsb	r9, r6, #2
 800b8da:	6123      	str	r3, [r4, #16]
 800b8dc:	4649      	mov	r1, r9
 800b8de:	4620      	mov	r0, r4
 800b8e0:	f000 fe94 	bl	800c60c <ucdr_check_final_buffer_behavior>
 800b8e4:	2800      	cmp	r0, #0
 800b8e6:	d039      	beq.n	800b95c <ucdr_serialize_endian_uint16_t+0xc0>
 800b8e8:	2d01      	cmp	r5, #1
 800b8ea:	d04a      	beq.n	800b982 <ucdr_serialize_endian_uint16_t+0xe6>
 800b8ec:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800b8f0:	703b      	strb	r3, [r7, #0]
 800b8f2:	2e00      	cmp	r6, #0
 800b8f4:	d040      	beq.n	800b978 <ucdr_serialize_endian_uint16_t+0xdc>
 800b8f6:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800b8fa:	707b      	strb	r3, [r7, #1]
 800b8fc:	6923      	ldr	r3, [r4, #16]
 800b8fe:	68a2      	ldr	r2, [r4, #8]
 800b900:	7da0      	ldrb	r0, [r4, #22]
 800b902:	3302      	adds	r3, #2
 800b904:	444a      	add	r2, r9
 800b906:	1b9b      	subs	r3, r3, r6
 800b908:	2102      	movs	r1, #2
 800b90a:	f080 0001 	eor.w	r0, r0, #1
 800b90e:	60a2      	str	r2, [r4, #8]
 800b910:	6123      	str	r3, [r4, #16]
 800b912:	7561      	strb	r1, [r4, #21]
 800b914:	b003      	add	sp, #12
 800b916:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b91a:	2102      	movs	r1, #2
 800b91c:	4620      	mov	r0, r4
 800b91e:	f000 fe75 	bl	800c60c <ucdr_check_final_buffer_behavior>
 800b922:	b188      	cbz	r0, 800b948 <ucdr_serialize_endian_uint16_t+0xac>
 800b924:	2d01      	cmp	r5, #1
 800b926:	68a3      	ldr	r3, [r4, #8]
 800b928:	d014      	beq.n	800b954 <ucdr_serialize_endian_uint16_t+0xb8>
 800b92a:	f89d 2007 	ldrb.w	r2, [sp, #7]
 800b92e:	701a      	strb	r2, [r3, #0]
 800b930:	68a3      	ldr	r3, [r4, #8]
 800b932:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800b936:	705a      	strb	r2, [r3, #1]
 800b938:	68a2      	ldr	r2, [r4, #8]
 800b93a:	6923      	ldr	r3, [r4, #16]
 800b93c:	3202      	adds	r2, #2
 800b93e:	3302      	adds	r3, #2
 800b940:	2102      	movs	r1, #2
 800b942:	60a2      	str	r2, [r4, #8]
 800b944:	6123      	str	r3, [r4, #16]
 800b946:	7561      	strb	r1, [r4, #21]
 800b948:	7da0      	ldrb	r0, [r4, #22]
 800b94a:	f080 0001 	eor.w	r0, r0, #1
 800b94e:	b003      	add	sp, #12
 800b950:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b954:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 800b958:	801a      	strh	r2, [r3, #0]
 800b95a:	e7ed      	b.n	800b938 <ucdr_serialize_endian_uint16_t+0x9c>
 800b95c:	68a2      	ldr	r2, [r4, #8]
 800b95e:	6923      	ldr	r3, [r4, #16]
 800b960:	7da0      	ldrb	r0, [r4, #22]
 800b962:	f884 8015 	strb.w	r8, [r4, #21]
 800b966:	1b92      	subs	r2, r2, r6
 800b968:	1b9b      	subs	r3, r3, r6
 800b96a:	f080 0001 	eor.w	r0, r0, #1
 800b96e:	60a2      	str	r2, [r4, #8]
 800b970:	6123      	str	r3, [r4, #16]
 800b972:	b003      	add	sp, #12
 800b974:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b978:	68a3      	ldr	r3, [r4, #8]
 800b97a:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800b97e:	701a      	strb	r2, [r3, #0]
 800b980:	e7bc      	b.n	800b8fc <ucdr_serialize_endian_uint16_t+0x60>
 800b982:	f10d 0506 	add.w	r5, sp, #6
 800b986:	4629      	mov	r1, r5
 800b988:	4632      	mov	r2, r6
 800b98a:	4638      	mov	r0, r7
 800b98c:	f00a f811 	bl	80159b2 <memcpy>
 800b990:	68a0      	ldr	r0, [r4, #8]
 800b992:	464a      	mov	r2, r9
 800b994:	19a9      	adds	r1, r5, r6
 800b996:	f00a f80c 	bl	80159b2 <memcpy>
 800b99a:	e7af      	b.n	800b8fc <ucdr_serialize_endian_uint16_t+0x60>

0800b99c <ucdr_deserialize_uint16_t>:
 800b99c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b9a0:	460d      	mov	r5, r1
 800b9a2:	2102      	movs	r1, #2
 800b9a4:	4604      	mov	r4, r0
 800b9a6:	f000 fe85 	bl	800c6b4 <ucdr_buffer_alignment>
 800b9aa:	4601      	mov	r1, r0
 800b9ac:	4620      	mov	r0, r4
 800b9ae:	f894 8015 	ldrb.w	r8, [r4, #21]
 800b9b2:	f000 fec3 	bl	800c73c <ucdr_advance_buffer>
 800b9b6:	2102      	movs	r1, #2
 800b9b8:	4620      	mov	r0, r4
 800b9ba:	f000 fe1b 	bl	800c5f4 <ucdr_check_buffer_available_for>
 800b9be:	bb60      	cbnz	r0, 800ba1a <ucdr_deserialize_uint16_t+0x7e>
 800b9c0:	e9d4 6701 	ldrd	r6, r7, [r4, #4]
 800b9c4:	42be      	cmp	r6, r7
 800b9c6:	d923      	bls.n	800ba10 <ucdr_deserialize_uint16_t+0x74>
 800b9c8:	6923      	ldr	r3, [r4, #16]
 800b9ca:	60a6      	str	r6, [r4, #8]
 800b9cc:	1bf6      	subs	r6, r6, r7
 800b9ce:	4433      	add	r3, r6
 800b9d0:	f1c6 0902 	rsb	r9, r6, #2
 800b9d4:	6123      	str	r3, [r4, #16]
 800b9d6:	4649      	mov	r1, r9
 800b9d8:	4620      	mov	r0, r4
 800b9da:	f000 fe17 	bl	800c60c <ucdr_check_final_buffer_behavior>
 800b9de:	2800      	cmp	r0, #0
 800b9e0:	d034      	beq.n	800ba4c <ucdr_deserialize_uint16_t+0xb0>
 800b9e2:	7d23      	ldrb	r3, [r4, #20]
 800b9e4:	2b01      	cmp	r3, #1
 800b9e6:	d042      	beq.n	800ba6e <ucdr_deserialize_uint16_t+0xd2>
 800b9e8:	787b      	ldrb	r3, [r7, #1]
 800b9ea:	702b      	strb	r3, [r5, #0]
 800b9ec:	2e00      	cmp	r6, #0
 800b9ee:	d03a      	beq.n	800ba66 <ucdr_deserialize_uint16_t+0xca>
 800b9f0:	783b      	ldrb	r3, [r7, #0]
 800b9f2:	706b      	strb	r3, [r5, #1]
 800b9f4:	6923      	ldr	r3, [r4, #16]
 800b9f6:	68a2      	ldr	r2, [r4, #8]
 800b9f8:	7da0      	ldrb	r0, [r4, #22]
 800b9fa:	2102      	movs	r1, #2
 800b9fc:	3302      	adds	r3, #2
 800b9fe:	444a      	add	r2, r9
 800ba00:	1b9b      	subs	r3, r3, r6
 800ba02:	7561      	strb	r1, [r4, #21]
 800ba04:	60a2      	str	r2, [r4, #8]
 800ba06:	6123      	str	r3, [r4, #16]
 800ba08:	f080 0001 	eor.w	r0, r0, #1
 800ba0c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ba10:	2102      	movs	r1, #2
 800ba12:	4620      	mov	r0, r4
 800ba14:	f000 fdfa 	bl	800c60c <ucdr_check_final_buffer_behavior>
 800ba18:	b180      	cbz	r0, 800ba3c <ucdr_deserialize_uint16_t+0xa0>
 800ba1a:	7d23      	ldrb	r3, [r4, #20]
 800ba1c:	2b01      	cmp	r3, #1
 800ba1e:	68a3      	ldr	r3, [r4, #8]
 800ba20:	d011      	beq.n	800ba46 <ucdr_deserialize_uint16_t+0xaa>
 800ba22:	785b      	ldrb	r3, [r3, #1]
 800ba24:	702b      	strb	r3, [r5, #0]
 800ba26:	68a3      	ldr	r3, [r4, #8]
 800ba28:	781b      	ldrb	r3, [r3, #0]
 800ba2a:	706b      	strb	r3, [r5, #1]
 800ba2c:	68a2      	ldr	r2, [r4, #8]
 800ba2e:	6923      	ldr	r3, [r4, #16]
 800ba30:	3202      	adds	r2, #2
 800ba32:	3302      	adds	r3, #2
 800ba34:	2102      	movs	r1, #2
 800ba36:	60a2      	str	r2, [r4, #8]
 800ba38:	6123      	str	r3, [r4, #16]
 800ba3a:	7561      	strb	r1, [r4, #21]
 800ba3c:	7da0      	ldrb	r0, [r4, #22]
 800ba3e:	f080 0001 	eor.w	r0, r0, #1
 800ba42:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ba46:	881b      	ldrh	r3, [r3, #0]
 800ba48:	802b      	strh	r3, [r5, #0]
 800ba4a:	e7ef      	b.n	800ba2c <ucdr_deserialize_uint16_t+0x90>
 800ba4c:	68a2      	ldr	r2, [r4, #8]
 800ba4e:	6923      	ldr	r3, [r4, #16]
 800ba50:	7da0      	ldrb	r0, [r4, #22]
 800ba52:	f884 8015 	strb.w	r8, [r4, #21]
 800ba56:	1b92      	subs	r2, r2, r6
 800ba58:	1b9b      	subs	r3, r3, r6
 800ba5a:	60a2      	str	r2, [r4, #8]
 800ba5c:	6123      	str	r3, [r4, #16]
 800ba5e:	f080 0001 	eor.w	r0, r0, #1
 800ba62:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ba66:	68a3      	ldr	r3, [r4, #8]
 800ba68:	781b      	ldrb	r3, [r3, #0]
 800ba6a:	706b      	strb	r3, [r5, #1]
 800ba6c:	e7c2      	b.n	800b9f4 <ucdr_deserialize_uint16_t+0x58>
 800ba6e:	4639      	mov	r1, r7
 800ba70:	4632      	mov	r2, r6
 800ba72:	4628      	mov	r0, r5
 800ba74:	f009 ff9d 	bl	80159b2 <memcpy>
 800ba78:	68a1      	ldr	r1, [r4, #8]
 800ba7a:	464a      	mov	r2, r9
 800ba7c:	19a8      	adds	r0, r5, r6
 800ba7e:	f009 ff98 	bl	80159b2 <memcpy>
 800ba82:	e7b7      	b.n	800b9f4 <ucdr_deserialize_uint16_t+0x58>

0800ba84 <ucdr_deserialize_endian_uint16_t>:
 800ba84:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ba88:	460e      	mov	r6, r1
 800ba8a:	2102      	movs	r1, #2
 800ba8c:	4604      	mov	r4, r0
 800ba8e:	4615      	mov	r5, r2
 800ba90:	f000 fe10 	bl	800c6b4 <ucdr_buffer_alignment>
 800ba94:	4601      	mov	r1, r0
 800ba96:	4620      	mov	r0, r4
 800ba98:	f894 9015 	ldrb.w	r9, [r4, #21]
 800ba9c:	f000 fe4e 	bl	800c73c <ucdr_advance_buffer>
 800baa0:	2102      	movs	r1, #2
 800baa2:	4620      	mov	r0, r4
 800baa4:	f000 fda6 	bl	800c5f4 <ucdr_check_buffer_available_for>
 800baa8:	bb70      	cbnz	r0, 800bb08 <ucdr_deserialize_endian_uint16_t+0x84>
 800baaa:	e9d4 7801 	ldrd	r7, r8, [r4, #4]
 800baae:	4547      	cmp	r7, r8
 800bab0:	d925      	bls.n	800bafe <ucdr_deserialize_endian_uint16_t+0x7a>
 800bab2:	6923      	ldr	r3, [r4, #16]
 800bab4:	60a7      	str	r7, [r4, #8]
 800bab6:	eba7 0708 	sub.w	r7, r7, r8
 800baba:	443b      	add	r3, r7
 800babc:	f1c7 0a02 	rsb	sl, r7, #2
 800bac0:	6123      	str	r3, [r4, #16]
 800bac2:	4651      	mov	r1, sl
 800bac4:	4620      	mov	r0, r4
 800bac6:	f000 fda1 	bl	800c60c <ucdr_check_final_buffer_behavior>
 800baca:	2800      	cmp	r0, #0
 800bacc:	d034      	beq.n	800bb38 <ucdr_deserialize_endian_uint16_t+0xb4>
 800bace:	2e01      	cmp	r6, #1
 800bad0:	d043      	beq.n	800bb5a <ucdr_deserialize_endian_uint16_t+0xd6>
 800bad2:	f898 3001 	ldrb.w	r3, [r8, #1]
 800bad6:	702b      	strb	r3, [r5, #0]
 800bad8:	2f00      	cmp	r7, #0
 800bada:	d03a      	beq.n	800bb52 <ucdr_deserialize_endian_uint16_t+0xce>
 800badc:	f898 3000 	ldrb.w	r3, [r8]
 800bae0:	706b      	strb	r3, [r5, #1]
 800bae2:	6923      	ldr	r3, [r4, #16]
 800bae4:	68a2      	ldr	r2, [r4, #8]
 800bae6:	7da0      	ldrb	r0, [r4, #22]
 800bae8:	2102      	movs	r1, #2
 800baea:	3302      	adds	r3, #2
 800baec:	4452      	add	r2, sl
 800baee:	1bdb      	subs	r3, r3, r7
 800baf0:	7561      	strb	r1, [r4, #21]
 800baf2:	60a2      	str	r2, [r4, #8]
 800baf4:	6123      	str	r3, [r4, #16]
 800baf6:	f080 0001 	eor.w	r0, r0, #1
 800bafa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bafe:	2102      	movs	r1, #2
 800bb00:	4620      	mov	r0, r4
 800bb02:	f000 fd83 	bl	800c60c <ucdr_check_final_buffer_behavior>
 800bb06:	b178      	cbz	r0, 800bb28 <ucdr_deserialize_endian_uint16_t+0xa4>
 800bb08:	2e01      	cmp	r6, #1
 800bb0a:	68a3      	ldr	r3, [r4, #8]
 800bb0c:	d011      	beq.n	800bb32 <ucdr_deserialize_endian_uint16_t+0xae>
 800bb0e:	785b      	ldrb	r3, [r3, #1]
 800bb10:	702b      	strb	r3, [r5, #0]
 800bb12:	68a3      	ldr	r3, [r4, #8]
 800bb14:	781b      	ldrb	r3, [r3, #0]
 800bb16:	706b      	strb	r3, [r5, #1]
 800bb18:	68a2      	ldr	r2, [r4, #8]
 800bb1a:	6923      	ldr	r3, [r4, #16]
 800bb1c:	3202      	adds	r2, #2
 800bb1e:	3302      	adds	r3, #2
 800bb20:	2102      	movs	r1, #2
 800bb22:	60a2      	str	r2, [r4, #8]
 800bb24:	6123      	str	r3, [r4, #16]
 800bb26:	7561      	strb	r1, [r4, #21]
 800bb28:	7da0      	ldrb	r0, [r4, #22]
 800bb2a:	f080 0001 	eor.w	r0, r0, #1
 800bb2e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bb32:	881b      	ldrh	r3, [r3, #0]
 800bb34:	802b      	strh	r3, [r5, #0]
 800bb36:	e7ef      	b.n	800bb18 <ucdr_deserialize_endian_uint16_t+0x94>
 800bb38:	68a2      	ldr	r2, [r4, #8]
 800bb3a:	6923      	ldr	r3, [r4, #16]
 800bb3c:	7da0      	ldrb	r0, [r4, #22]
 800bb3e:	f884 9015 	strb.w	r9, [r4, #21]
 800bb42:	1bd2      	subs	r2, r2, r7
 800bb44:	1bdb      	subs	r3, r3, r7
 800bb46:	60a2      	str	r2, [r4, #8]
 800bb48:	6123      	str	r3, [r4, #16]
 800bb4a:	f080 0001 	eor.w	r0, r0, #1
 800bb4e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bb52:	68a3      	ldr	r3, [r4, #8]
 800bb54:	781b      	ldrb	r3, [r3, #0]
 800bb56:	706b      	strb	r3, [r5, #1]
 800bb58:	e7c3      	b.n	800bae2 <ucdr_deserialize_endian_uint16_t+0x5e>
 800bb5a:	4641      	mov	r1, r8
 800bb5c:	463a      	mov	r2, r7
 800bb5e:	4628      	mov	r0, r5
 800bb60:	f009 ff27 	bl	80159b2 <memcpy>
 800bb64:	68a1      	ldr	r1, [r4, #8]
 800bb66:	4652      	mov	r2, sl
 800bb68:	19e8      	adds	r0, r5, r7
 800bb6a:	f009 ff22 	bl	80159b2 <memcpy>
 800bb6e:	e7b8      	b.n	800bae2 <ucdr_deserialize_endian_uint16_t+0x5e>

0800bb70 <ucdr_serialize_uint32_t>:
 800bb70:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bb74:	b082      	sub	sp, #8
 800bb76:	4604      	mov	r4, r0
 800bb78:	9101      	str	r1, [sp, #4]
 800bb7a:	2104      	movs	r1, #4
 800bb7c:	f000 fd9a 	bl	800c6b4 <ucdr_buffer_alignment>
 800bb80:	4601      	mov	r1, r0
 800bb82:	4620      	mov	r0, r4
 800bb84:	7d67      	ldrb	r7, [r4, #21]
 800bb86:	f000 fdd9 	bl	800c73c <ucdr_advance_buffer>
 800bb8a:	2104      	movs	r1, #4
 800bb8c:	4620      	mov	r0, r4
 800bb8e:	f000 fd31 	bl	800c5f4 <ucdr_check_buffer_available_for>
 800bb92:	2800      	cmp	r0, #0
 800bb94:	d139      	bne.n	800bc0a <ucdr_serialize_uint32_t+0x9a>
 800bb96:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 800bb9a:	42ab      	cmp	r3, r5
 800bb9c:	d930      	bls.n	800bc00 <ucdr_serialize_uint32_t+0x90>
 800bb9e:	1b5e      	subs	r6, r3, r5
 800bba0:	60a3      	str	r3, [r4, #8]
 800bba2:	6923      	ldr	r3, [r4, #16]
 800bba4:	f1c6 0804 	rsb	r8, r6, #4
 800bba8:	4433      	add	r3, r6
 800bbaa:	6123      	str	r3, [r4, #16]
 800bbac:	4641      	mov	r1, r8
 800bbae:	4620      	mov	r0, r4
 800bbb0:	f000 fd2c 	bl	800c60c <ucdr_check_final_buffer_behavior>
 800bbb4:	2800      	cmp	r0, #0
 800bbb6:	d04c      	beq.n	800bc52 <ucdr_serialize_uint32_t+0xe2>
 800bbb8:	7d23      	ldrb	r3, [r4, #20]
 800bbba:	2b01      	cmp	r3, #1
 800bbbc:	d063      	beq.n	800bc86 <ucdr_serialize_uint32_t+0x116>
 800bbbe:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800bbc2:	702b      	strb	r3, [r5, #0]
 800bbc4:	2e00      	cmp	r6, #0
 800bbc6:	d051      	beq.n	800bc6c <ucdr_serialize_uint32_t+0xfc>
 800bbc8:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800bbcc:	706b      	strb	r3, [r5, #1]
 800bbce:	2e01      	cmp	r6, #1
 800bbd0:	d050      	beq.n	800bc74 <ucdr_serialize_uint32_t+0x104>
 800bbd2:	f89d 3005 	ldrb.w	r3, [sp, #5]
 800bbd6:	70ab      	strb	r3, [r5, #2]
 800bbd8:	2e02      	cmp	r6, #2
 800bbda:	d04f      	beq.n	800bc7c <ucdr_serialize_uint32_t+0x10c>
 800bbdc:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800bbe0:	70eb      	strb	r3, [r5, #3]
 800bbe2:	6923      	ldr	r3, [r4, #16]
 800bbe4:	68a2      	ldr	r2, [r4, #8]
 800bbe6:	7da0      	ldrb	r0, [r4, #22]
 800bbe8:	3304      	adds	r3, #4
 800bbea:	1b9e      	subs	r6, r3, r6
 800bbec:	4442      	add	r2, r8
 800bbee:	2304      	movs	r3, #4
 800bbf0:	f080 0001 	eor.w	r0, r0, #1
 800bbf4:	60a2      	str	r2, [r4, #8]
 800bbf6:	6126      	str	r6, [r4, #16]
 800bbf8:	7563      	strb	r3, [r4, #21]
 800bbfa:	b002      	add	sp, #8
 800bbfc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bc00:	2104      	movs	r1, #4
 800bc02:	4620      	mov	r0, r4
 800bc04:	f000 fd02 	bl	800c60c <ucdr_check_final_buffer_behavior>
 800bc08:	b1d0      	cbz	r0, 800bc40 <ucdr_serialize_uint32_t+0xd0>
 800bc0a:	7d23      	ldrb	r3, [r4, #20]
 800bc0c:	2b01      	cmp	r3, #1
 800bc0e:	68a3      	ldr	r3, [r4, #8]
 800bc10:	d01c      	beq.n	800bc4c <ucdr_serialize_uint32_t+0xdc>
 800bc12:	f89d 2007 	ldrb.w	r2, [sp, #7]
 800bc16:	701a      	strb	r2, [r3, #0]
 800bc18:	68a3      	ldr	r3, [r4, #8]
 800bc1a:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800bc1e:	705a      	strb	r2, [r3, #1]
 800bc20:	68a3      	ldr	r3, [r4, #8]
 800bc22:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800bc26:	709a      	strb	r2, [r3, #2]
 800bc28:	68a3      	ldr	r3, [r4, #8]
 800bc2a:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800bc2e:	70da      	strb	r2, [r3, #3]
 800bc30:	68a2      	ldr	r2, [r4, #8]
 800bc32:	6923      	ldr	r3, [r4, #16]
 800bc34:	3204      	adds	r2, #4
 800bc36:	3304      	adds	r3, #4
 800bc38:	2104      	movs	r1, #4
 800bc3a:	60a2      	str	r2, [r4, #8]
 800bc3c:	6123      	str	r3, [r4, #16]
 800bc3e:	7561      	strb	r1, [r4, #21]
 800bc40:	7da0      	ldrb	r0, [r4, #22]
 800bc42:	f080 0001 	eor.w	r0, r0, #1
 800bc46:	b002      	add	sp, #8
 800bc48:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bc4c:	9a01      	ldr	r2, [sp, #4]
 800bc4e:	601a      	str	r2, [r3, #0]
 800bc50:	e7ee      	b.n	800bc30 <ucdr_serialize_uint32_t+0xc0>
 800bc52:	68a2      	ldr	r2, [r4, #8]
 800bc54:	6923      	ldr	r3, [r4, #16]
 800bc56:	7da0      	ldrb	r0, [r4, #22]
 800bc58:	7567      	strb	r7, [r4, #21]
 800bc5a:	1b92      	subs	r2, r2, r6
 800bc5c:	1b9b      	subs	r3, r3, r6
 800bc5e:	f080 0001 	eor.w	r0, r0, #1
 800bc62:	60a2      	str	r2, [r4, #8]
 800bc64:	6123      	str	r3, [r4, #16]
 800bc66:	b002      	add	sp, #8
 800bc68:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bc6c:	68a3      	ldr	r3, [r4, #8]
 800bc6e:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800bc72:	701a      	strb	r2, [r3, #0]
 800bc74:	68a3      	ldr	r3, [r4, #8]
 800bc76:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800bc7a:	701a      	strb	r2, [r3, #0]
 800bc7c:	68a3      	ldr	r3, [r4, #8]
 800bc7e:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800bc82:	701a      	strb	r2, [r3, #0]
 800bc84:	e7ad      	b.n	800bbe2 <ucdr_serialize_uint32_t+0x72>
 800bc86:	4628      	mov	r0, r5
 800bc88:	ad01      	add	r5, sp, #4
 800bc8a:	4629      	mov	r1, r5
 800bc8c:	4632      	mov	r2, r6
 800bc8e:	f009 fe90 	bl	80159b2 <memcpy>
 800bc92:	68a0      	ldr	r0, [r4, #8]
 800bc94:	4642      	mov	r2, r8
 800bc96:	19a9      	adds	r1, r5, r6
 800bc98:	f009 fe8b 	bl	80159b2 <memcpy>
 800bc9c:	e7a1      	b.n	800bbe2 <ucdr_serialize_uint32_t+0x72>
 800bc9e:	bf00      	nop

0800bca0 <ucdr_serialize_endian_uint32_t>:
 800bca0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800bca4:	b083      	sub	sp, #12
 800bca6:	460d      	mov	r5, r1
 800bca8:	2104      	movs	r1, #4
 800bcaa:	4604      	mov	r4, r0
 800bcac:	9201      	str	r2, [sp, #4]
 800bcae:	f000 fd01 	bl	800c6b4 <ucdr_buffer_alignment>
 800bcb2:	4601      	mov	r1, r0
 800bcb4:	4620      	mov	r0, r4
 800bcb6:	f894 8015 	ldrb.w	r8, [r4, #21]
 800bcba:	f000 fd3f 	bl	800c73c <ucdr_advance_buffer>
 800bcbe:	2104      	movs	r1, #4
 800bcc0:	4620      	mov	r0, r4
 800bcc2:	f000 fc97 	bl	800c5f4 <ucdr_check_buffer_available_for>
 800bcc6:	2800      	cmp	r0, #0
 800bcc8:	d138      	bne.n	800bd3c <ucdr_serialize_endian_uint32_t+0x9c>
 800bcca:	e9d4 7601 	ldrd	r7, r6, [r4, #4]
 800bcce:	42b7      	cmp	r7, r6
 800bcd0:	d92f      	bls.n	800bd32 <ucdr_serialize_endian_uint32_t+0x92>
 800bcd2:	6923      	ldr	r3, [r4, #16]
 800bcd4:	60a7      	str	r7, [r4, #8]
 800bcd6:	1bbf      	subs	r7, r7, r6
 800bcd8:	443b      	add	r3, r7
 800bcda:	f1c7 0904 	rsb	r9, r7, #4
 800bcde:	6123      	str	r3, [r4, #16]
 800bce0:	4649      	mov	r1, r9
 800bce2:	4620      	mov	r0, r4
 800bce4:	f000 fc92 	bl	800c60c <ucdr_check_final_buffer_behavior>
 800bce8:	2800      	cmp	r0, #0
 800bcea:	d04a      	beq.n	800bd82 <ucdr_serialize_endian_uint32_t+0xe2>
 800bcec:	2d01      	cmp	r5, #1
 800bcee:	d063      	beq.n	800bdb8 <ucdr_serialize_endian_uint32_t+0x118>
 800bcf0:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800bcf4:	7033      	strb	r3, [r6, #0]
 800bcf6:	2f00      	cmp	r7, #0
 800bcf8:	d051      	beq.n	800bd9e <ucdr_serialize_endian_uint32_t+0xfe>
 800bcfa:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800bcfe:	7073      	strb	r3, [r6, #1]
 800bd00:	2f01      	cmp	r7, #1
 800bd02:	d050      	beq.n	800bda6 <ucdr_serialize_endian_uint32_t+0x106>
 800bd04:	f89d 3005 	ldrb.w	r3, [sp, #5]
 800bd08:	70b3      	strb	r3, [r6, #2]
 800bd0a:	2f02      	cmp	r7, #2
 800bd0c:	d04f      	beq.n	800bdae <ucdr_serialize_endian_uint32_t+0x10e>
 800bd0e:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800bd12:	70f3      	strb	r3, [r6, #3]
 800bd14:	6923      	ldr	r3, [r4, #16]
 800bd16:	68a2      	ldr	r2, [r4, #8]
 800bd18:	7da0      	ldrb	r0, [r4, #22]
 800bd1a:	3304      	adds	r3, #4
 800bd1c:	444a      	add	r2, r9
 800bd1e:	1bdb      	subs	r3, r3, r7
 800bd20:	2104      	movs	r1, #4
 800bd22:	f080 0001 	eor.w	r0, r0, #1
 800bd26:	60a2      	str	r2, [r4, #8]
 800bd28:	6123      	str	r3, [r4, #16]
 800bd2a:	7561      	strb	r1, [r4, #21]
 800bd2c:	b003      	add	sp, #12
 800bd2e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800bd32:	2104      	movs	r1, #4
 800bd34:	4620      	mov	r0, r4
 800bd36:	f000 fc69 	bl	800c60c <ucdr_check_final_buffer_behavior>
 800bd3a:	b1c8      	cbz	r0, 800bd70 <ucdr_serialize_endian_uint32_t+0xd0>
 800bd3c:	2d01      	cmp	r5, #1
 800bd3e:	68a3      	ldr	r3, [r4, #8]
 800bd40:	d01c      	beq.n	800bd7c <ucdr_serialize_endian_uint32_t+0xdc>
 800bd42:	f89d 2007 	ldrb.w	r2, [sp, #7]
 800bd46:	701a      	strb	r2, [r3, #0]
 800bd48:	68a3      	ldr	r3, [r4, #8]
 800bd4a:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800bd4e:	705a      	strb	r2, [r3, #1]
 800bd50:	68a3      	ldr	r3, [r4, #8]
 800bd52:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800bd56:	709a      	strb	r2, [r3, #2]
 800bd58:	68a3      	ldr	r3, [r4, #8]
 800bd5a:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800bd5e:	70da      	strb	r2, [r3, #3]
 800bd60:	68a2      	ldr	r2, [r4, #8]
 800bd62:	6923      	ldr	r3, [r4, #16]
 800bd64:	3204      	adds	r2, #4
 800bd66:	3304      	adds	r3, #4
 800bd68:	2104      	movs	r1, #4
 800bd6a:	60a2      	str	r2, [r4, #8]
 800bd6c:	6123      	str	r3, [r4, #16]
 800bd6e:	7561      	strb	r1, [r4, #21]
 800bd70:	7da0      	ldrb	r0, [r4, #22]
 800bd72:	f080 0001 	eor.w	r0, r0, #1
 800bd76:	b003      	add	sp, #12
 800bd78:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800bd7c:	9a01      	ldr	r2, [sp, #4]
 800bd7e:	601a      	str	r2, [r3, #0]
 800bd80:	e7ee      	b.n	800bd60 <ucdr_serialize_endian_uint32_t+0xc0>
 800bd82:	68a2      	ldr	r2, [r4, #8]
 800bd84:	6923      	ldr	r3, [r4, #16]
 800bd86:	7da0      	ldrb	r0, [r4, #22]
 800bd88:	f884 8015 	strb.w	r8, [r4, #21]
 800bd8c:	1bd2      	subs	r2, r2, r7
 800bd8e:	1bdb      	subs	r3, r3, r7
 800bd90:	f080 0001 	eor.w	r0, r0, #1
 800bd94:	60a2      	str	r2, [r4, #8]
 800bd96:	6123      	str	r3, [r4, #16]
 800bd98:	b003      	add	sp, #12
 800bd9a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800bd9e:	68a3      	ldr	r3, [r4, #8]
 800bda0:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800bda4:	701a      	strb	r2, [r3, #0]
 800bda6:	68a3      	ldr	r3, [r4, #8]
 800bda8:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800bdac:	701a      	strb	r2, [r3, #0]
 800bdae:	68a3      	ldr	r3, [r4, #8]
 800bdb0:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800bdb4:	701a      	strb	r2, [r3, #0]
 800bdb6:	e7ad      	b.n	800bd14 <ucdr_serialize_endian_uint32_t+0x74>
 800bdb8:	ad01      	add	r5, sp, #4
 800bdba:	4629      	mov	r1, r5
 800bdbc:	463a      	mov	r2, r7
 800bdbe:	4630      	mov	r0, r6
 800bdc0:	f009 fdf7 	bl	80159b2 <memcpy>
 800bdc4:	68a0      	ldr	r0, [r4, #8]
 800bdc6:	464a      	mov	r2, r9
 800bdc8:	19e9      	adds	r1, r5, r7
 800bdca:	f009 fdf2 	bl	80159b2 <memcpy>
 800bdce:	e7a1      	b.n	800bd14 <ucdr_serialize_endian_uint32_t+0x74>

0800bdd0 <ucdr_deserialize_uint32_t>:
 800bdd0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800bdd4:	460d      	mov	r5, r1
 800bdd6:	2104      	movs	r1, #4
 800bdd8:	4604      	mov	r4, r0
 800bdda:	f000 fc6b 	bl	800c6b4 <ucdr_buffer_alignment>
 800bdde:	4601      	mov	r1, r0
 800bde0:	4620      	mov	r0, r4
 800bde2:	f894 8015 	ldrb.w	r8, [r4, #21]
 800bde6:	f000 fca9 	bl	800c73c <ucdr_advance_buffer>
 800bdea:	2104      	movs	r1, #4
 800bdec:	4620      	mov	r0, r4
 800bdee:	f000 fc01 	bl	800c5f4 <ucdr_check_buffer_available_for>
 800bdf2:	2800      	cmp	r0, #0
 800bdf4:	d138      	bne.n	800be68 <ucdr_deserialize_uint32_t+0x98>
 800bdf6:	e9d4 7601 	ldrd	r7, r6, [r4, #4]
 800bdfa:	42b7      	cmp	r7, r6
 800bdfc:	d92f      	bls.n	800be5e <ucdr_deserialize_uint32_t+0x8e>
 800bdfe:	6923      	ldr	r3, [r4, #16]
 800be00:	60a7      	str	r7, [r4, #8]
 800be02:	1bbf      	subs	r7, r7, r6
 800be04:	443b      	add	r3, r7
 800be06:	f1c7 0904 	rsb	r9, r7, #4
 800be0a:	6123      	str	r3, [r4, #16]
 800be0c:	4649      	mov	r1, r9
 800be0e:	4620      	mov	r0, r4
 800be10:	f000 fbfc 	bl	800c60c <ucdr_check_final_buffer_behavior>
 800be14:	2800      	cmp	r0, #0
 800be16:	d046      	beq.n	800bea6 <ucdr_deserialize_uint32_t+0xd6>
 800be18:	7d23      	ldrb	r3, [r4, #20]
 800be1a:	2b01      	cmp	r3, #1
 800be1c:	d05c      	beq.n	800bed8 <ucdr_deserialize_uint32_t+0x108>
 800be1e:	78f3      	ldrb	r3, [r6, #3]
 800be20:	702b      	strb	r3, [r5, #0]
 800be22:	2f00      	cmp	r7, #0
 800be24:	d04c      	beq.n	800bec0 <ucdr_deserialize_uint32_t+0xf0>
 800be26:	78b3      	ldrb	r3, [r6, #2]
 800be28:	706b      	strb	r3, [r5, #1]
 800be2a:	2f01      	cmp	r7, #1
 800be2c:	f105 0302 	add.w	r3, r5, #2
 800be30:	d04a      	beq.n	800bec8 <ucdr_deserialize_uint32_t+0xf8>
 800be32:	7873      	ldrb	r3, [r6, #1]
 800be34:	70ab      	strb	r3, [r5, #2]
 800be36:	2f02      	cmp	r7, #2
 800be38:	f105 0303 	add.w	r3, r5, #3
 800be3c:	d048      	beq.n	800bed0 <ucdr_deserialize_uint32_t+0x100>
 800be3e:	7833      	ldrb	r3, [r6, #0]
 800be40:	70eb      	strb	r3, [r5, #3]
 800be42:	6923      	ldr	r3, [r4, #16]
 800be44:	68a2      	ldr	r2, [r4, #8]
 800be46:	7da0      	ldrb	r0, [r4, #22]
 800be48:	2104      	movs	r1, #4
 800be4a:	3304      	adds	r3, #4
 800be4c:	444a      	add	r2, r9
 800be4e:	1bdb      	subs	r3, r3, r7
 800be50:	7561      	strb	r1, [r4, #21]
 800be52:	60a2      	str	r2, [r4, #8]
 800be54:	6123      	str	r3, [r4, #16]
 800be56:	f080 0001 	eor.w	r0, r0, #1
 800be5a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800be5e:	2104      	movs	r1, #4
 800be60:	4620      	mov	r0, r4
 800be62:	f000 fbd3 	bl	800c60c <ucdr_check_final_buffer_behavior>
 800be66:	b1b0      	cbz	r0, 800be96 <ucdr_deserialize_uint32_t+0xc6>
 800be68:	7d23      	ldrb	r3, [r4, #20]
 800be6a:	2b01      	cmp	r3, #1
 800be6c:	68a3      	ldr	r3, [r4, #8]
 800be6e:	d017      	beq.n	800bea0 <ucdr_deserialize_uint32_t+0xd0>
 800be70:	78db      	ldrb	r3, [r3, #3]
 800be72:	702b      	strb	r3, [r5, #0]
 800be74:	68a3      	ldr	r3, [r4, #8]
 800be76:	789b      	ldrb	r3, [r3, #2]
 800be78:	706b      	strb	r3, [r5, #1]
 800be7a:	68a3      	ldr	r3, [r4, #8]
 800be7c:	785b      	ldrb	r3, [r3, #1]
 800be7e:	70ab      	strb	r3, [r5, #2]
 800be80:	68a3      	ldr	r3, [r4, #8]
 800be82:	781b      	ldrb	r3, [r3, #0]
 800be84:	70eb      	strb	r3, [r5, #3]
 800be86:	68a2      	ldr	r2, [r4, #8]
 800be88:	6923      	ldr	r3, [r4, #16]
 800be8a:	3204      	adds	r2, #4
 800be8c:	3304      	adds	r3, #4
 800be8e:	2104      	movs	r1, #4
 800be90:	60a2      	str	r2, [r4, #8]
 800be92:	6123      	str	r3, [r4, #16]
 800be94:	7561      	strb	r1, [r4, #21]
 800be96:	7da0      	ldrb	r0, [r4, #22]
 800be98:	f080 0001 	eor.w	r0, r0, #1
 800be9c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800bea0:	681b      	ldr	r3, [r3, #0]
 800bea2:	602b      	str	r3, [r5, #0]
 800bea4:	e7ef      	b.n	800be86 <ucdr_deserialize_uint32_t+0xb6>
 800bea6:	68a2      	ldr	r2, [r4, #8]
 800bea8:	6923      	ldr	r3, [r4, #16]
 800beaa:	7da0      	ldrb	r0, [r4, #22]
 800beac:	f884 8015 	strb.w	r8, [r4, #21]
 800beb0:	1bd2      	subs	r2, r2, r7
 800beb2:	1bdb      	subs	r3, r3, r7
 800beb4:	60a2      	str	r2, [r4, #8]
 800beb6:	6123      	str	r3, [r4, #16]
 800beb8:	f080 0001 	eor.w	r0, r0, #1
 800bebc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800bec0:	68a3      	ldr	r3, [r4, #8]
 800bec2:	789b      	ldrb	r3, [r3, #2]
 800bec4:	706b      	strb	r3, [r5, #1]
 800bec6:	1cab      	adds	r3, r5, #2
 800bec8:	68a2      	ldr	r2, [r4, #8]
 800beca:	7852      	ldrb	r2, [r2, #1]
 800becc:	f803 2b01 	strb.w	r2, [r3], #1
 800bed0:	68a2      	ldr	r2, [r4, #8]
 800bed2:	7812      	ldrb	r2, [r2, #0]
 800bed4:	701a      	strb	r2, [r3, #0]
 800bed6:	e7b4      	b.n	800be42 <ucdr_deserialize_uint32_t+0x72>
 800bed8:	4631      	mov	r1, r6
 800beda:	463a      	mov	r2, r7
 800bedc:	4628      	mov	r0, r5
 800bede:	f009 fd68 	bl	80159b2 <memcpy>
 800bee2:	68a1      	ldr	r1, [r4, #8]
 800bee4:	464a      	mov	r2, r9
 800bee6:	19e8      	adds	r0, r5, r7
 800bee8:	f009 fd63 	bl	80159b2 <memcpy>
 800beec:	e7a9      	b.n	800be42 <ucdr_deserialize_uint32_t+0x72>
 800beee:	bf00      	nop

0800bef0 <ucdr_deserialize_endian_uint32_t>:
 800bef0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800bef4:	460e      	mov	r6, r1
 800bef6:	2104      	movs	r1, #4
 800bef8:	4604      	mov	r4, r0
 800befa:	4615      	mov	r5, r2
 800befc:	f000 fbda 	bl	800c6b4 <ucdr_buffer_alignment>
 800bf00:	4601      	mov	r1, r0
 800bf02:	4620      	mov	r0, r4
 800bf04:	f894 9015 	ldrb.w	r9, [r4, #21]
 800bf08:	f000 fc18 	bl	800c73c <ucdr_advance_buffer>
 800bf0c:	2104      	movs	r1, #4
 800bf0e:	4620      	mov	r0, r4
 800bf10:	f000 fb70 	bl	800c5f4 <ucdr_check_buffer_available_for>
 800bf14:	2800      	cmp	r0, #0
 800bf16:	d13c      	bne.n	800bf92 <ucdr_deserialize_endian_uint32_t+0xa2>
 800bf18:	e9d4 3701 	ldrd	r3, r7, [r4, #4]
 800bf1c:	42bb      	cmp	r3, r7
 800bf1e:	d933      	bls.n	800bf88 <ucdr_deserialize_endian_uint32_t+0x98>
 800bf20:	eba3 0807 	sub.w	r8, r3, r7
 800bf24:	60a3      	str	r3, [r4, #8]
 800bf26:	6923      	ldr	r3, [r4, #16]
 800bf28:	f1c8 0a04 	rsb	sl, r8, #4
 800bf2c:	4443      	add	r3, r8
 800bf2e:	6123      	str	r3, [r4, #16]
 800bf30:	4651      	mov	r1, sl
 800bf32:	4620      	mov	r0, r4
 800bf34:	f000 fb6a 	bl	800c60c <ucdr_check_final_buffer_behavior>
 800bf38:	2800      	cmp	r0, #0
 800bf3a:	d048      	beq.n	800bfce <ucdr_deserialize_endian_uint32_t+0xde>
 800bf3c:	2e01      	cmp	r6, #1
 800bf3e:	d061      	beq.n	800c004 <ucdr_deserialize_endian_uint32_t+0x114>
 800bf40:	78fb      	ldrb	r3, [r7, #3]
 800bf42:	702b      	strb	r3, [r5, #0]
 800bf44:	f1b8 0f00 	cmp.w	r8, #0
 800bf48:	d050      	beq.n	800bfec <ucdr_deserialize_endian_uint32_t+0xfc>
 800bf4a:	78bb      	ldrb	r3, [r7, #2]
 800bf4c:	706b      	strb	r3, [r5, #1]
 800bf4e:	f1b8 0f01 	cmp.w	r8, #1
 800bf52:	f105 0302 	add.w	r3, r5, #2
 800bf56:	d04d      	beq.n	800bff4 <ucdr_deserialize_endian_uint32_t+0x104>
 800bf58:	787b      	ldrb	r3, [r7, #1]
 800bf5a:	70ab      	strb	r3, [r5, #2]
 800bf5c:	f1b8 0f02 	cmp.w	r8, #2
 800bf60:	f105 0303 	add.w	r3, r5, #3
 800bf64:	d04a      	beq.n	800bffc <ucdr_deserialize_endian_uint32_t+0x10c>
 800bf66:	783b      	ldrb	r3, [r7, #0]
 800bf68:	70eb      	strb	r3, [r5, #3]
 800bf6a:	6923      	ldr	r3, [r4, #16]
 800bf6c:	68a2      	ldr	r2, [r4, #8]
 800bf6e:	7da0      	ldrb	r0, [r4, #22]
 800bf70:	2104      	movs	r1, #4
 800bf72:	3304      	adds	r3, #4
 800bf74:	4452      	add	r2, sl
 800bf76:	eba3 0308 	sub.w	r3, r3, r8
 800bf7a:	7561      	strb	r1, [r4, #21]
 800bf7c:	60a2      	str	r2, [r4, #8]
 800bf7e:	6123      	str	r3, [r4, #16]
 800bf80:	f080 0001 	eor.w	r0, r0, #1
 800bf84:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bf88:	2104      	movs	r1, #4
 800bf8a:	4620      	mov	r0, r4
 800bf8c:	f000 fb3e 	bl	800c60c <ucdr_check_final_buffer_behavior>
 800bf90:	b1a8      	cbz	r0, 800bfbe <ucdr_deserialize_endian_uint32_t+0xce>
 800bf92:	2e01      	cmp	r6, #1
 800bf94:	68a3      	ldr	r3, [r4, #8]
 800bf96:	d017      	beq.n	800bfc8 <ucdr_deserialize_endian_uint32_t+0xd8>
 800bf98:	78db      	ldrb	r3, [r3, #3]
 800bf9a:	702b      	strb	r3, [r5, #0]
 800bf9c:	68a3      	ldr	r3, [r4, #8]
 800bf9e:	789b      	ldrb	r3, [r3, #2]
 800bfa0:	706b      	strb	r3, [r5, #1]
 800bfa2:	68a3      	ldr	r3, [r4, #8]
 800bfa4:	785b      	ldrb	r3, [r3, #1]
 800bfa6:	70ab      	strb	r3, [r5, #2]
 800bfa8:	68a3      	ldr	r3, [r4, #8]
 800bfaa:	781b      	ldrb	r3, [r3, #0]
 800bfac:	70eb      	strb	r3, [r5, #3]
 800bfae:	68a2      	ldr	r2, [r4, #8]
 800bfb0:	6923      	ldr	r3, [r4, #16]
 800bfb2:	3204      	adds	r2, #4
 800bfb4:	3304      	adds	r3, #4
 800bfb6:	2104      	movs	r1, #4
 800bfb8:	60a2      	str	r2, [r4, #8]
 800bfba:	6123      	str	r3, [r4, #16]
 800bfbc:	7561      	strb	r1, [r4, #21]
 800bfbe:	7da0      	ldrb	r0, [r4, #22]
 800bfc0:	f080 0001 	eor.w	r0, r0, #1
 800bfc4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bfc8:	681b      	ldr	r3, [r3, #0]
 800bfca:	602b      	str	r3, [r5, #0]
 800bfcc:	e7ef      	b.n	800bfae <ucdr_deserialize_endian_uint32_t+0xbe>
 800bfce:	68a2      	ldr	r2, [r4, #8]
 800bfd0:	6923      	ldr	r3, [r4, #16]
 800bfd2:	7da0      	ldrb	r0, [r4, #22]
 800bfd4:	f884 9015 	strb.w	r9, [r4, #21]
 800bfd8:	eba2 0208 	sub.w	r2, r2, r8
 800bfdc:	eba3 0308 	sub.w	r3, r3, r8
 800bfe0:	60a2      	str	r2, [r4, #8]
 800bfe2:	6123      	str	r3, [r4, #16]
 800bfe4:	f080 0001 	eor.w	r0, r0, #1
 800bfe8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bfec:	68a3      	ldr	r3, [r4, #8]
 800bfee:	789b      	ldrb	r3, [r3, #2]
 800bff0:	706b      	strb	r3, [r5, #1]
 800bff2:	1cab      	adds	r3, r5, #2
 800bff4:	68a2      	ldr	r2, [r4, #8]
 800bff6:	7852      	ldrb	r2, [r2, #1]
 800bff8:	f803 2b01 	strb.w	r2, [r3], #1
 800bffc:	68a2      	ldr	r2, [r4, #8]
 800bffe:	7812      	ldrb	r2, [r2, #0]
 800c000:	701a      	strb	r2, [r3, #0]
 800c002:	e7b2      	b.n	800bf6a <ucdr_deserialize_endian_uint32_t+0x7a>
 800c004:	4639      	mov	r1, r7
 800c006:	4642      	mov	r2, r8
 800c008:	4628      	mov	r0, r5
 800c00a:	f009 fcd2 	bl	80159b2 <memcpy>
 800c00e:	68a1      	ldr	r1, [r4, #8]
 800c010:	4652      	mov	r2, sl
 800c012:	eb05 0008 	add.w	r0, r5, r8
 800c016:	f009 fccc 	bl	80159b2 <memcpy>
 800c01a:	e7a6      	b.n	800bf6a <ucdr_deserialize_endian_uint32_t+0x7a>

0800c01c <ucdr_serialize_uint64_t>:
 800c01c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c020:	2108      	movs	r1, #8
 800c022:	b082      	sub	sp, #8
 800c024:	4604      	mov	r4, r0
 800c026:	e9cd 2300 	strd	r2, r3, [sp]
 800c02a:	f000 fb43 	bl	800c6b4 <ucdr_buffer_alignment>
 800c02e:	4601      	mov	r1, r0
 800c030:	4620      	mov	r0, r4
 800c032:	7d67      	ldrb	r7, [r4, #21]
 800c034:	f000 fb82 	bl	800c73c <ucdr_advance_buffer>
 800c038:	2108      	movs	r1, #8
 800c03a:	4620      	mov	r0, r4
 800c03c:	f000 fada 	bl	800c5f4 <ucdr_check_buffer_available_for>
 800c040:	2800      	cmp	r0, #0
 800c042:	d14e      	bne.n	800c0e2 <ucdr_serialize_uint64_t+0xc6>
 800c044:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 800c048:	42ab      	cmp	r3, r5
 800c04a:	d945      	bls.n	800c0d8 <ucdr_serialize_uint64_t+0xbc>
 800c04c:	1b5e      	subs	r6, r3, r5
 800c04e:	60a3      	str	r3, [r4, #8]
 800c050:	6923      	ldr	r3, [r4, #16]
 800c052:	f1c6 0808 	rsb	r8, r6, #8
 800c056:	4433      	add	r3, r6
 800c058:	6123      	str	r3, [r4, #16]
 800c05a:	4641      	mov	r1, r8
 800c05c:	4620      	mov	r0, r4
 800c05e:	f000 fad5 	bl	800c60c <ucdr_check_final_buffer_behavior>
 800c062:	2800      	cmp	r0, #0
 800c064:	d074      	beq.n	800c150 <ucdr_serialize_uint64_t+0x134>
 800c066:	7d23      	ldrb	r3, [r4, #20]
 800c068:	2b01      	cmp	r3, #1
 800c06a:	f000 809b 	beq.w	800c1a4 <ucdr_serialize_uint64_t+0x188>
 800c06e:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800c072:	702b      	strb	r3, [r5, #0]
 800c074:	2e00      	cmp	r6, #0
 800c076:	d078      	beq.n	800c16a <ucdr_serialize_uint64_t+0x14e>
 800c078:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800c07c:	706b      	strb	r3, [r5, #1]
 800c07e:	2e01      	cmp	r6, #1
 800c080:	d077      	beq.n	800c172 <ucdr_serialize_uint64_t+0x156>
 800c082:	f89d 3005 	ldrb.w	r3, [sp, #5]
 800c086:	70ab      	strb	r3, [r5, #2]
 800c088:	2e02      	cmp	r6, #2
 800c08a:	d076      	beq.n	800c17a <ucdr_serialize_uint64_t+0x15e>
 800c08c:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800c090:	70eb      	strb	r3, [r5, #3]
 800c092:	2e03      	cmp	r6, #3
 800c094:	d075      	beq.n	800c182 <ucdr_serialize_uint64_t+0x166>
 800c096:	f89d 3003 	ldrb.w	r3, [sp, #3]
 800c09a:	712b      	strb	r3, [r5, #4]
 800c09c:	2e04      	cmp	r6, #4
 800c09e:	d074      	beq.n	800c18a <ucdr_serialize_uint64_t+0x16e>
 800c0a0:	f89d 3002 	ldrb.w	r3, [sp, #2]
 800c0a4:	716b      	strb	r3, [r5, #5]
 800c0a6:	2e05      	cmp	r6, #5
 800c0a8:	d073      	beq.n	800c192 <ucdr_serialize_uint64_t+0x176>
 800c0aa:	f89d 3001 	ldrb.w	r3, [sp, #1]
 800c0ae:	71ab      	strb	r3, [r5, #6]
 800c0b0:	2e06      	cmp	r6, #6
 800c0b2:	d072      	beq.n	800c19a <ucdr_serialize_uint64_t+0x17e>
 800c0b4:	f89d 3000 	ldrb.w	r3, [sp]
 800c0b8:	71eb      	strb	r3, [r5, #7]
 800c0ba:	6923      	ldr	r3, [r4, #16]
 800c0bc:	68a2      	ldr	r2, [r4, #8]
 800c0be:	7da0      	ldrb	r0, [r4, #22]
 800c0c0:	3308      	adds	r3, #8
 800c0c2:	1b9e      	subs	r6, r3, r6
 800c0c4:	4442      	add	r2, r8
 800c0c6:	2308      	movs	r3, #8
 800c0c8:	f080 0001 	eor.w	r0, r0, #1
 800c0cc:	60a2      	str	r2, [r4, #8]
 800c0ce:	6126      	str	r6, [r4, #16]
 800c0d0:	7563      	strb	r3, [r4, #21]
 800c0d2:	b002      	add	sp, #8
 800c0d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c0d8:	2108      	movs	r1, #8
 800c0da:	4620      	mov	r0, r4
 800c0dc:	f000 fa96 	bl	800c60c <ucdr_check_final_buffer_behavior>
 800c0e0:	b350      	cbz	r0, 800c138 <ucdr_serialize_uint64_t+0x11c>
 800c0e2:	7d23      	ldrb	r3, [r4, #20]
 800c0e4:	2b01      	cmp	r3, #1
 800c0e6:	d02d      	beq.n	800c144 <ucdr_serialize_uint64_t+0x128>
 800c0e8:	68a3      	ldr	r3, [r4, #8]
 800c0ea:	f89d 2007 	ldrb.w	r2, [sp, #7]
 800c0ee:	701a      	strb	r2, [r3, #0]
 800c0f0:	68a3      	ldr	r3, [r4, #8]
 800c0f2:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800c0f6:	705a      	strb	r2, [r3, #1]
 800c0f8:	68a3      	ldr	r3, [r4, #8]
 800c0fa:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800c0fe:	709a      	strb	r2, [r3, #2]
 800c100:	68a3      	ldr	r3, [r4, #8]
 800c102:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800c106:	70da      	strb	r2, [r3, #3]
 800c108:	68a3      	ldr	r3, [r4, #8]
 800c10a:	f89d 2003 	ldrb.w	r2, [sp, #3]
 800c10e:	711a      	strb	r2, [r3, #4]
 800c110:	68a3      	ldr	r3, [r4, #8]
 800c112:	f89d 2002 	ldrb.w	r2, [sp, #2]
 800c116:	715a      	strb	r2, [r3, #5]
 800c118:	68a3      	ldr	r3, [r4, #8]
 800c11a:	f89d 2001 	ldrb.w	r2, [sp, #1]
 800c11e:	719a      	strb	r2, [r3, #6]
 800c120:	68a3      	ldr	r3, [r4, #8]
 800c122:	f89d 2000 	ldrb.w	r2, [sp]
 800c126:	71da      	strb	r2, [r3, #7]
 800c128:	68a2      	ldr	r2, [r4, #8]
 800c12a:	6923      	ldr	r3, [r4, #16]
 800c12c:	3208      	adds	r2, #8
 800c12e:	3308      	adds	r3, #8
 800c130:	2108      	movs	r1, #8
 800c132:	60a2      	str	r2, [r4, #8]
 800c134:	6123      	str	r3, [r4, #16]
 800c136:	7561      	strb	r1, [r4, #21]
 800c138:	7da0      	ldrb	r0, [r4, #22]
 800c13a:	f080 0001 	eor.w	r0, r0, #1
 800c13e:	b002      	add	sp, #8
 800c140:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c144:	466b      	mov	r3, sp
 800c146:	cb03      	ldmia	r3!, {r0, r1}
 800c148:	68a3      	ldr	r3, [r4, #8]
 800c14a:	6018      	str	r0, [r3, #0]
 800c14c:	6059      	str	r1, [r3, #4]
 800c14e:	e7eb      	b.n	800c128 <ucdr_serialize_uint64_t+0x10c>
 800c150:	68a2      	ldr	r2, [r4, #8]
 800c152:	6923      	ldr	r3, [r4, #16]
 800c154:	7da0      	ldrb	r0, [r4, #22]
 800c156:	7567      	strb	r7, [r4, #21]
 800c158:	1b92      	subs	r2, r2, r6
 800c15a:	1b9b      	subs	r3, r3, r6
 800c15c:	f080 0001 	eor.w	r0, r0, #1
 800c160:	60a2      	str	r2, [r4, #8]
 800c162:	6123      	str	r3, [r4, #16]
 800c164:	b002      	add	sp, #8
 800c166:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c16a:	68a3      	ldr	r3, [r4, #8]
 800c16c:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800c170:	701a      	strb	r2, [r3, #0]
 800c172:	68a3      	ldr	r3, [r4, #8]
 800c174:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800c178:	701a      	strb	r2, [r3, #0]
 800c17a:	68a3      	ldr	r3, [r4, #8]
 800c17c:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800c180:	701a      	strb	r2, [r3, #0]
 800c182:	68a3      	ldr	r3, [r4, #8]
 800c184:	f89d 2003 	ldrb.w	r2, [sp, #3]
 800c188:	701a      	strb	r2, [r3, #0]
 800c18a:	68a3      	ldr	r3, [r4, #8]
 800c18c:	f89d 2002 	ldrb.w	r2, [sp, #2]
 800c190:	701a      	strb	r2, [r3, #0]
 800c192:	68a3      	ldr	r3, [r4, #8]
 800c194:	f89d 2001 	ldrb.w	r2, [sp, #1]
 800c198:	701a      	strb	r2, [r3, #0]
 800c19a:	68a3      	ldr	r3, [r4, #8]
 800c19c:	f89d 2000 	ldrb.w	r2, [sp]
 800c1a0:	701a      	strb	r2, [r3, #0]
 800c1a2:	e78a      	b.n	800c0ba <ucdr_serialize_uint64_t+0x9e>
 800c1a4:	4628      	mov	r0, r5
 800c1a6:	466d      	mov	r5, sp
 800c1a8:	4629      	mov	r1, r5
 800c1aa:	4632      	mov	r2, r6
 800c1ac:	f009 fc01 	bl	80159b2 <memcpy>
 800c1b0:	68a0      	ldr	r0, [r4, #8]
 800c1b2:	4642      	mov	r2, r8
 800c1b4:	19a9      	adds	r1, r5, r6
 800c1b6:	f009 fbfc 	bl	80159b2 <memcpy>
 800c1ba:	e77e      	b.n	800c0ba <ucdr_serialize_uint64_t+0x9e>

0800c1bc <ucdr_serialize_int16_t>:
 800c1bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c1c0:	b082      	sub	sp, #8
 800c1c2:	460b      	mov	r3, r1
 800c1c4:	2102      	movs	r1, #2
 800c1c6:	4604      	mov	r4, r0
 800c1c8:	f8ad 3006 	strh.w	r3, [sp, #6]
 800c1cc:	f000 fa72 	bl	800c6b4 <ucdr_buffer_alignment>
 800c1d0:	4601      	mov	r1, r0
 800c1d2:	4620      	mov	r0, r4
 800c1d4:	7d67      	ldrb	r7, [r4, #21]
 800c1d6:	f000 fab1 	bl	800c73c <ucdr_advance_buffer>
 800c1da:	2102      	movs	r1, #2
 800c1dc:	4620      	mov	r0, r4
 800c1de:	f000 fa09 	bl	800c5f4 <ucdr_check_buffer_available_for>
 800c1e2:	bb78      	cbnz	r0, 800c244 <ucdr_serialize_int16_t+0x88>
 800c1e4:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 800c1e8:	42ab      	cmp	r3, r5
 800c1ea:	d926      	bls.n	800c23a <ucdr_serialize_int16_t+0x7e>
 800c1ec:	1b5e      	subs	r6, r3, r5
 800c1ee:	60a3      	str	r3, [r4, #8]
 800c1f0:	6923      	ldr	r3, [r4, #16]
 800c1f2:	f1c6 0802 	rsb	r8, r6, #2
 800c1f6:	4433      	add	r3, r6
 800c1f8:	6123      	str	r3, [r4, #16]
 800c1fa:	4641      	mov	r1, r8
 800c1fc:	4620      	mov	r0, r4
 800c1fe:	f000 fa05 	bl	800c60c <ucdr_check_final_buffer_behavior>
 800c202:	2800      	cmp	r0, #0
 800c204:	d03b      	beq.n	800c27e <ucdr_serialize_int16_t+0xc2>
 800c206:	7d23      	ldrb	r3, [r4, #20]
 800c208:	2b01      	cmp	r3, #1
 800c20a:	d04a      	beq.n	800c2a2 <ucdr_serialize_int16_t+0xe6>
 800c20c:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800c210:	702b      	strb	r3, [r5, #0]
 800c212:	2e00      	cmp	r6, #0
 800c214:	d040      	beq.n	800c298 <ucdr_serialize_int16_t+0xdc>
 800c216:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800c21a:	706b      	strb	r3, [r5, #1]
 800c21c:	6923      	ldr	r3, [r4, #16]
 800c21e:	68a2      	ldr	r2, [r4, #8]
 800c220:	7da0      	ldrb	r0, [r4, #22]
 800c222:	3302      	adds	r3, #2
 800c224:	1b9e      	subs	r6, r3, r6
 800c226:	4442      	add	r2, r8
 800c228:	2302      	movs	r3, #2
 800c22a:	f080 0001 	eor.w	r0, r0, #1
 800c22e:	60a2      	str	r2, [r4, #8]
 800c230:	6126      	str	r6, [r4, #16]
 800c232:	7563      	strb	r3, [r4, #21]
 800c234:	b002      	add	sp, #8
 800c236:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c23a:	2102      	movs	r1, #2
 800c23c:	4620      	mov	r0, r4
 800c23e:	f000 f9e5 	bl	800c60c <ucdr_check_final_buffer_behavior>
 800c242:	b190      	cbz	r0, 800c26a <ucdr_serialize_int16_t+0xae>
 800c244:	7d23      	ldrb	r3, [r4, #20]
 800c246:	2b01      	cmp	r3, #1
 800c248:	68a3      	ldr	r3, [r4, #8]
 800c24a:	d014      	beq.n	800c276 <ucdr_serialize_int16_t+0xba>
 800c24c:	f89d 2007 	ldrb.w	r2, [sp, #7]
 800c250:	701a      	strb	r2, [r3, #0]
 800c252:	68a3      	ldr	r3, [r4, #8]
 800c254:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800c258:	705a      	strb	r2, [r3, #1]
 800c25a:	68a2      	ldr	r2, [r4, #8]
 800c25c:	6923      	ldr	r3, [r4, #16]
 800c25e:	3202      	adds	r2, #2
 800c260:	3302      	adds	r3, #2
 800c262:	2102      	movs	r1, #2
 800c264:	60a2      	str	r2, [r4, #8]
 800c266:	6123      	str	r3, [r4, #16]
 800c268:	7561      	strb	r1, [r4, #21]
 800c26a:	7da0      	ldrb	r0, [r4, #22]
 800c26c:	f080 0001 	eor.w	r0, r0, #1
 800c270:	b002      	add	sp, #8
 800c272:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c276:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 800c27a:	801a      	strh	r2, [r3, #0]
 800c27c:	e7ed      	b.n	800c25a <ucdr_serialize_int16_t+0x9e>
 800c27e:	68a2      	ldr	r2, [r4, #8]
 800c280:	6923      	ldr	r3, [r4, #16]
 800c282:	7da0      	ldrb	r0, [r4, #22]
 800c284:	7567      	strb	r7, [r4, #21]
 800c286:	1b92      	subs	r2, r2, r6
 800c288:	1b9b      	subs	r3, r3, r6
 800c28a:	f080 0001 	eor.w	r0, r0, #1
 800c28e:	60a2      	str	r2, [r4, #8]
 800c290:	6123      	str	r3, [r4, #16]
 800c292:	b002      	add	sp, #8
 800c294:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c298:	68a3      	ldr	r3, [r4, #8]
 800c29a:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800c29e:	701a      	strb	r2, [r3, #0]
 800c2a0:	e7bc      	b.n	800c21c <ucdr_serialize_int16_t+0x60>
 800c2a2:	4628      	mov	r0, r5
 800c2a4:	f10d 0506 	add.w	r5, sp, #6
 800c2a8:	4629      	mov	r1, r5
 800c2aa:	4632      	mov	r2, r6
 800c2ac:	f009 fb81 	bl	80159b2 <memcpy>
 800c2b0:	68a0      	ldr	r0, [r4, #8]
 800c2b2:	4642      	mov	r2, r8
 800c2b4:	19a9      	adds	r1, r5, r6
 800c2b6:	f009 fb7c 	bl	80159b2 <memcpy>
 800c2ba:	e7af      	b.n	800c21c <ucdr_serialize_int16_t+0x60>

0800c2bc <ucdr_deserialize_int16_t>:
 800c2bc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c2c0:	460d      	mov	r5, r1
 800c2c2:	2102      	movs	r1, #2
 800c2c4:	4604      	mov	r4, r0
 800c2c6:	f000 f9f5 	bl	800c6b4 <ucdr_buffer_alignment>
 800c2ca:	4601      	mov	r1, r0
 800c2cc:	4620      	mov	r0, r4
 800c2ce:	f894 8015 	ldrb.w	r8, [r4, #21]
 800c2d2:	f000 fa33 	bl	800c73c <ucdr_advance_buffer>
 800c2d6:	2102      	movs	r1, #2
 800c2d8:	4620      	mov	r0, r4
 800c2da:	f000 f98b 	bl	800c5f4 <ucdr_check_buffer_available_for>
 800c2de:	bb60      	cbnz	r0, 800c33a <ucdr_deserialize_int16_t+0x7e>
 800c2e0:	e9d4 6701 	ldrd	r6, r7, [r4, #4]
 800c2e4:	42be      	cmp	r6, r7
 800c2e6:	d923      	bls.n	800c330 <ucdr_deserialize_int16_t+0x74>
 800c2e8:	6923      	ldr	r3, [r4, #16]
 800c2ea:	60a6      	str	r6, [r4, #8]
 800c2ec:	1bf6      	subs	r6, r6, r7
 800c2ee:	4433      	add	r3, r6
 800c2f0:	f1c6 0902 	rsb	r9, r6, #2
 800c2f4:	6123      	str	r3, [r4, #16]
 800c2f6:	4649      	mov	r1, r9
 800c2f8:	4620      	mov	r0, r4
 800c2fa:	f000 f987 	bl	800c60c <ucdr_check_final_buffer_behavior>
 800c2fe:	2800      	cmp	r0, #0
 800c300:	d034      	beq.n	800c36c <ucdr_deserialize_int16_t+0xb0>
 800c302:	7d23      	ldrb	r3, [r4, #20]
 800c304:	2b01      	cmp	r3, #1
 800c306:	d042      	beq.n	800c38e <ucdr_deserialize_int16_t+0xd2>
 800c308:	787b      	ldrb	r3, [r7, #1]
 800c30a:	702b      	strb	r3, [r5, #0]
 800c30c:	2e00      	cmp	r6, #0
 800c30e:	d03a      	beq.n	800c386 <ucdr_deserialize_int16_t+0xca>
 800c310:	783b      	ldrb	r3, [r7, #0]
 800c312:	706b      	strb	r3, [r5, #1]
 800c314:	6923      	ldr	r3, [r4, #16]
 800c316:	68a2      	ldr	r2, [r4, #8]
 800c318:	7da0      	ldrb	r0, [r4, #22]
 800c31a:	2102      	movs	r1, #2
 800c31c:	3302      	adds	r3, #2
 800c31e:	444a      	add	r2, r9
 800c320:	1b9b      	subs	r3, r3, r6
 800c322:	7561      	strb	r1, [r4, #21]
 800c324:	60a2      	str	r2, [r4, #8]
 800c326:	6123      	str	r3, [r4, #16]
 800c328:	f080 0001 	eor.w	r0, r0, #1
 800c32c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c330:	2102      	movs	r1, #2
 800c332:	4620      	mov	r0, r4
 800c334:	f000 f96a 	bl	800c60c <ucdr_check_final_buffer_behavior>
 800c338:	b180      	cbz	r0, 800c35c <ucdr_deserialize_int16_t+0xa0>
 800c33a:	7d23      	ldrb	r3, [r4, #20]
 800c33c:	2b01      	cmp	r3, #1
 800c33e:	68a3      	ldr	r3, [r4, #8]
 800c340:	d011      	beq.n	800c366 <ucdr_deserialize_int16_t+0xaa>
 800c342:	785b      	ldrb	r3, [r3, #1]
 800c344:	702b      	strb	r3, [r5, #0]
 800c346:	68a3      	ldr	r3, [r4, #8]
 800c348:	781b      	ldrb	r3, [r3, #0]
 800c34a:	706b      	strb	r3, [r5, #1]
 800c34c:	68a2      	ldr	r2, [r4, #8]
 800c34e:	6923      	ldr	r3, [r4, #16]
 800c350:	3202      	adds	r2, #2
 800c352:	3302      	adds	r3, #2
 800c354:	2102      	movs	r1, #2
 800c356:	60a2      	str	r2, [r4, #8]
 800c358:	6123      	str	r3, [r4, #16]
 800c35a:	7561      	strb	r1, [r4, #21]
 800c35c:	7da0      	ldrb	r0, [r4, #22]
 800c35e:	f080 0001 	eor.w	r0, r0, #1
 800c362:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c366:	881b      	ldrh	r3, [r3, #0]
 800c368:	802b      	strh	r3, [r5, #0]
 800c36a:	e7ef      	b.n	800c34c <ucdr_deserialize_int16_t+0x90>
 800c36c:	68a2      	ldr	r2, [r4, #8]
 800c36e:	6923      	ldr	r3, [r4, #16]
 800c370:	7da0      	ldrb	r0, [r4, #22]
 800c372:	f884 8015 	strb.w	r8, [r4, #21]
 800c376:	1b92      	subs	r2, r2, r6
 800c378:	1b9b      	subs	r3, r3, r6
 800c37a:	60a2      	str	r2, [r4, #8]
 800c37c:	6123      	str	r3, [r4, #16]
 800c37e:	f080 0001 	eor.w	r0, r0, #1
 800c382:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c386:	68a3      	ldr	r3, [r4, #8]
 800c388:	781b      	ldrb	r3, [r3, #0]
 800c38a:	706b      	strb	r3, [r5, #1]
 800c38c:	e7c2      	b.n	800c314 <ucdr_deserialize_int16_t+0x58>
 800c38e:	4639      	mov	r1, r7
 800c390:	4632      	mov	r2, r6
 800c392:	4628      	mov	r0, r5
 800c394:	f009 fb0d 	bl	80159b2 <memcpy>
 800c398:	68a1      	ldr	r1, [r4, #8]
 800c39a:	464a      	mov	r2, r9
 800c39c:	19a8      	adds	r0, r5, r6
 800c39e:	f009 fb08 	bl	80159b2 <memcpy>
 800c3a2:	e7b7      	b.n	800c314 <ucdr_deserialize_int16_t+0x58>

0800c3a4 <ucdr_serialize_int32_t>:
 800c3a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c3a8:	b082      	sub	sp, #8
 800c3aa:	4604      	mov	r4, r0
 800c3ac:	9101      	str	r1, [sp, #4]
 800c3ae:	2104      	movs	r1, #4
 800c3b0:	f000 f980 	bl	800c6b4 <ucdr_buffer_alignment>
 800c3b4:	4601      	mov	r1, r0
 800c3b6:	4620      	mov	r0, r4
 800c3b8:	7d67      	ldrb	r7, [r4, #21]
 800c3ba:	f000 f9bf 	bl	800c73c <ucdr_advance_buffer>
 800c3be:	2104      	movs	r1, #4
 800c3c0:	4620      	mov	r0, r4
 800c3c2:	f000 f917 	bl	800c5f4 <ucdr_check_buffer_available_for>
 800c3c6:	2800      	cmp	r0, #0
 800c3c8:	d139      	bne.n	800c43e <ucdr_serialize_int32_t+0x9a>
 800c3ca:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 800c3ce:	42ab      	cmp	r3, r5
 800c3d0:	d930      	bls.n	800c434 <ucdr_serialize_int32_t+0x90>
 800c3d2:	1b5e      	subs	r6, r3, r5
 800c3d4:	60a3      	str	r3, [r4, #8]
 800c3d6:	6923      	ldr	r3, [r4, #16]
 800c3d8:	f1c6 0804 	rsb	r8, r6, #4
 800c3dc:	4433      	add	r3, r6
 800c3de:	6123      	str	r3, [r4, #16]
 800c3e0:	4641      	mov	r1, r8
 800c3e2:	4620      	mov	r0, r4
 800c3e4:	f000 f912 	bl	800c60c <ucdr_check_final_buffer_behavior>
 800c3e8:	2800      	cmp	r0, #0
 800c3ea:	d04c      	beq.n	800c486 <ucdr_serialize_int32_t+0xe2>
 800c3ec:	7d23      	ldrb	r3, [r4, #20]
 800c3ee:	2b01      	cmp	r3, #1
 800c3f0:	d063      	beq.n	800c4ba <ucdr_serialize_int32_t+0x116>
 800c3f2:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800c3f6:	702b      	strb	r3, [r5, #0]
 800c3f8:	2e00      	cmp	r6, #0
 800c3fa:	d051      	beq.n	800c4a0 <ucdr_serialize_int32_t+0xfc>
 800c3fc:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800c400:	706b      	strb	r3, [r5, #1]
 800c402:	2e01      	cmp	r6, #1
 800c404:	d050      	beq.n	800c4a8 <ucdr_serialize_int32_t+0x104>
 800c406:	f89d 3005 	ldrb.w	r3, [sp, #5]
 800c40a:	70ab      	strb	r3, [r5, #2]
 800c40c:	2e02      	cmp	r6, #2
 800c40e:	d04f      	beq.n	800c4b0 <ucdr_serialize_int32_t+0x10c>
 800c410:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800c414:	70eb      	strb	r3, [r5, #3]
 800c416:	6923      	ldr	r3, [r4, #16]
 800c418:	68a2      	ldr	r2, [r4, #8]
 800c41a:	7da0      	ldrb	r0, [r4, #22]
 800c41c:	3304      	adds	r3, #4
 800c41e:	1b9e      	subs	r6, r3, r6
 800c420:	4442      	add	r2, r8
 800c422:	2304      	movs	r3, #4
 800c424:	f080 0001 	eor.w	r0, r0, #1
 800c428:	60a2      	str	r2, [r4, #8]
 800c42a:	6126      	str	r6, [r4, #16]
 800c42c:	7563      	strb	r3, [r4, #21]
 800c42e:	b002      	add	sp, #8
 800c430:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c434:	2104      	movs	r1, #4
 800c436:	4620      	mov	r0, r4
 800c438:	f000 f8e8 	bl	800c60c <ucdr_check_final_buffer_behavior>
 800c43c:	b1d0      	cbz	r0, 800c474 <ucdr_serialize_int32_t+0xd0>
 800c43e:	7d23      	ldrb	r3, [r4, #20]
 800c440:	2b01      	cmp	r3, #1
 800c442:	68a3      	ldr	r3, [r4, #8]
 800c444:	d01c      	beq.n	800c480 <ucdr_serialize_int32_t+0xdc>
 800c446:	f89d 2007 	ldrb.w	r2, [sp, #7]
 800c44a:	701a      	strb	r2, [r3, #0]
 800c44c:	68a3      	ldr	r3, [r4, #8]
 800c44e:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800c452:	705a      	strb	r2, [r3, #1]
 800c454:	68a3      	ldr	r3, [r4, #8]
 800c456:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800c45a:	709a      	strb	r2, [r3, #2]
 800c45c:	68a3      	ldr	r3, [r4, #8]
 800c45e:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800c462:	70da      	strb	r2, [r3, #3]
 800c464:	68a2      	ldr	r2, [r4, #8]
 800c466:	6923      	ldr	r3, [r4, #16]
 800c468:	3204      	adds	r2, #4
 800c46a:	3304      	adds	r3, #4
 800c46c:	2104      	movs	r1, #4
 800c46e:	60a2      	str	r2, [r4, #8]
 800c470:	6123      	str	r3, [r4, #16]
 800c472:	7561      	strb	r1, [r4, #21]
 800c474:	7da0      	ldrb	r0, [r4, #22]
 800c476:	f080 0001 	eor.w	r0, r0, #1
 800c47a:	b002      	add	sp, #8
 800c47c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c480:	9a01      	ldr	r2, [sp, #4]
 800c482:	601a      	str	r2, [r3, #0]
 800c484:	e7ee      	b.n	800c464 <ucdr_serialize_int32_t+0xc0>
 800c486:	68a2      	ldr	r2, [r4, #8]
 800c488:	6923      	ldr	r3, [r4, #16]
 800c48a:	7da0      	ldrb	r0, [r4, #22]
 800c48c:	7567      	strb	r7, [r4, #21]
 800c48e:	1b92      	subs	r2, r2, r6
 800c490:	1b9b      	subs	r3, r3, r6
 800c492:	f080 0001 	eor.w	r0, r0, #1
 800c496:	60a2      	str	r2, [r4, #8]
 800c498:	6123      	str	r3, [r4, #16]
 800c49a:	b002      	add	sp, #8
 800c49c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c4a0:	68a3      	ldr	r3, [r4, #8]
 800c4a2:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800c4a6:	701a      	strb	r2, [r3, #0]
 800c4a8:	68a3      	ldr	r3, [r4, #8]
 800c4aa:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800c4ae:	701a      	strb	r2, [r3, #0]
 800c4b0:	68a3      	ldr	r3, [r4, #8]
 800c4b2:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800c4b6:	701a      	strb	r2, [r3, #0]
 800c4b8:	e7ad      	b.n	800c416 <ucdr_serialize_int32_t+0x72>
 800c4ba:	4628      	mov	r0, r5
 800c4bc:	ad01      	add	r5, sp, #4
 800c4be:	4629      	mov	r1, r5
 800c4c0:	4632      	mov	r2, r6
 800c4c2:	f009 fa76 	bl	80159b2 <memcpy>
 800c4c6:	68a0      	ldr	r0, [r4, #8]
 800c4c8:	4642      	mov	r2, r8
 800c4ca:	19a9      	adds	r1, r5, r6
 800c4cc:	f009 fa71 	bl	80159b2 <memcpy>
 800c4d0:	e7a1      	b.n	800c416 <ucdr_serialize_int32_t+0x72>
 800c4d2:	bf00      	nop

0800c4d4 <ucdr_deserialize_int32_t>:
 800c4d4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c4d8:	460d      	mov	r5, r1
 800c4da:	2104      	movs	r1, #4
 800c4dc:	4604      	mov	r4, r0
 800c4de:	f000 f8e9 	bl	800c6b4 <ucdr_buffer_alignment>
 800c4e2:	4601      	mov	r1, r0
 800c4e4:	4620      	mov	r0, r4
 800c4e6:	f894 8015 	ldrb.w	r8, [r4, #21]
 800c4ea:	f000 f927 	bl	800c73c <ucdr_advance_buffer>
 800c4ee:	2104      	movs	r1, #4
 800c4f0:	4620      	mov	r0, r4
 800c4f2:	f000 f87f 	bl	800c5f4 <ucdr_check_buffer_available_for>
 800c4f6:	2800      	cmp	r0, #0
 800c4f8:	d138      	bne.n	800c56c <ucdr_deserialize_int32_t+0x98>
 800c4fa:	e9d4 7601 	ldrd	r7, r6, [r4, #4]
 800c4fe:	42b7      	cmp	r7, r6
 800c500:	d92f      	bls.n	800c562 <ucdr_deserialize_int32_t+0x8e>
 800c502:	6923      	ldr	r3, [r4, #16]
 800c504:	60a7      	str	r7, [r4, #8]
 800c506:	1bbf      	subs	r7, r7, r6
 800c508:	443b      	add	r3, r7
 800c50a:	f1c7 0904 	rsb	r9, r7, #4
 800c50e:	6123      	str	r3, [r4, #16]
 800c510:	4649      	mov	r1, r9
 800c512:	4620      	mov	r0, r4
 800c514:	f000 f87a 	bl	800c60c <ucdr_check_final_buffer_behavior>
 800c518:	2800      	cmp	r0, #0
 800c51a:	d046      	beq.n	800c5aa <ucdr_deserialize_int32_t+0xd6>
 800c51c:	7d23      	ldrb	r3, [r4, #20]
 800c51e:	2b01      	cmp	r3, #1
 800c520:	d05c      	beq.n	800c5dc <ucdr_deserialize_int32_t+0x108>
 800c522:	78f3      	ldrb	r3, [r6, #3]
 800c524:	702b      	strb	r3, [r5, #0]
 800c526:	2f00      	cmp	r7, #0
 800c528:	d04c      	beq.n	800c5c4 <ucdr_deserialize_int32_t+0xf0>
 800c52a:	78b3      	ldrb	r3, [r6, #2]
 800c52c:	706b      	strb	r3, [r5, #1]
 800c52e:	2f01      	cmp	r7, #1
 800c530:	f105 0302 	add.w	r3, r5, #2
 800c534:	d04a      	beq.n	800c5cc <ucdr_deserialize_int32_t+0xf8>
 800c536:	7873      	ldrb	r3, [r6, #1]
 800c538:	70ab      	strb	r3, [r5, #2]
 800c53a:	2f02      	cmp	r7, #2
 800c53c:	f105 0303 	add.w	r3, r5, #3
 800c540:	d048      	beq.n	800c5d4 <ucdr_deserialize_int32_t+0x100>
 800c542:	7833      	ldrb	r3, [r6, #0]
 800c544:	70eb      	strb	r3, [r5, #3]
 800c546:	6923      	ldr	r3, [r4, #16]
 800c548:	68a2      	ldr	r2, [r4, #8]
 800c54a:	7da0      	ldrb	r0, [r4, #22]
 800c54c:	2104      	movs	r1, #4
 800c54e:	3304      	adds	r3, #4
 800c550:	444a      	add	r2, r9
 800c552:	1bdb      	subs	r3, r3, r7
 800c554:	7561      	strb	r1, [r4, #21]
 800c556:	60a2      	str	r2, [r4, #8]
 800c558:	6123      	str	r3, [r4, #16]
 800c55a:	f080 0001 	eor.w	r0, r0, #1
 800c55e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c562:	2104      	movs	r1, #4
 800c564:	4620      	mov	r0, r4
 800c566:	f000 f851 	bl	800c60c <ucdr_check_final_buffer_behavior>
 800c56a:	b1b0      	cbz	r0, 800c59a <ucdr_deserialize_int32_t+0xc6>
 800c56c:	7d23      	ldrb	r3, [r4, #20]
 800c56e:	2b01      	cmp	r3, #1
 800c570:	68a3      	ldr	r3, [r4, #8]
 800c572:	d017      	beq.n	800c5a4 <ucdr_deserialize_int32_t+0xd0>
 800c574:	78db      	ldrb	r3, [r3, #3]
 800c576:	702b      	strb	r3, [r5, #0]
 800c578:	68a3      	ldr	r3, [r4, #8]
 800c57a:	789b      	ldrb	r3, [r3, #2]
 800c57c:	706b      	strb	r3, [r5, #1]
 800c57e:	68a3      	ldr	r3, [r4, #8]
 800c580:	785b      	ldrb	r3, [r3, #1]
 800c582:	70ab      	strb	r3, [r5, #2]
 800c584:	68a3      	ldr	r3, [r4, #8]
 800c586:	781b      	ldrb	r3, [r3, #0]
 800c588:	70eb      	strb	r3, [r5, #3]
 800c58a:	68a2      	ldr	r2, [r4, #8]
 800c58c:	6923      	ldr	r3, [r4, #16]
 800c58e:	3204      	adds	r2, #4
 800c590:	3304      	adds	r3, #4
 800c592:	2104      	movs	r1, #4
 800c594:	60a2      	str	r2, [r4, #8]
 800c596:	6123      	str	r3, [r4, #16]
 800c598:	7561      	strb	r1, [r4, #21]
 800c59a:	7da0      	ldrb	r0, [r4, #22]
 800c59c:	f080 0001 	eor.w	r0, r0, #1
 800c5a0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c5a4:	681b      	ldr	r3, [r3, #0]
 800c5a6:	602b      	str	r3, [r5, #0]
 800c5a8:	e7ef      	b.n	800c58a <ucdr_deserialize_int32_t+0xb6>
 800c5aa:	68a2      	ldr	r2, [r4, #8]
 800c5ac:	6923      	ldr	r3, [r4, #16]
 800c5ae:	7da0      	ldrb	r0, [r4, #22]
 800c5b0:	f884 8015 	strb.w	r8, [r4, #21]
 800c5b4:	1bd2      	subs	r2, r2, r7
 800c5b6:	1bdb      	subs	r3, r3, r7
 800c5b8:	60a2      	str	r2, [r4, #8]
 800c5ba:	6123      	str	r3, [r4, #16]
 800c5bc:	f080 0001 	eor.w	r0, r0, #1
 800c5c0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c5c4:	68a3      	ldr	r3, [r4, #8]
 800c5c6:	789b      	ldrb	r3, [r3, #2]
 800c5c8:	706b      	strb	r3, [r5, #1]
 800c5ca:	1cab      	adds	r3, r5, #2
 800c5cc:	68a2      	ldr	r2, [r4, #8]
 800c5ce:	7852      	ldrb	r2, [r2, #1]
 800c5d0:	f803 2b01 	strb.w	r2, [r3], #1
 800c5d4:	68a2      	ldr	r2, [r4, #8]
 800c5d6:	7812      	ldrb	r2, [r2, #0]
 800c5d8:	701a      	strb	r2, [r3, #0]
 800c5da:	e7b4      	b.n	800c546 <ucdr_deserialize_int32_t+0x72>
 800c5dc:	4631      	mov	r1, r6
 800c5de:	463a      	mov	r2, r7
 800c5e0:	4628      	mov	r0, r5
 800c5e2:	f009 f9e6 	bl	80159b2 <memcpy>
 800c5e6:	68a1      	ldr	r1, [r4, #8]
 800c5e8:	464a      	mov	r2, r9
 800c5ea:	19e8      	adds	r0, r5, r7
 800c5ec:	f009 f9e1 	bl	80159b2 <memcpy>
 800c5f0:	e7a9      	b.n	800c546 <ucdr_deserialize_int32_t+0x72>
 800c5f2:	bf00      	nop

0800c5f4 <ucdr_check_buffer_available_for>:
 800c5f4:	7d83      	ldrb	r3, [r0, #22]
 800c5f6:	b93b      	cbnz	r3, 800c608 <ucdr_check_buffer_available_for+0x14>
 800c5f8:	e9d0 0301 	ldrd	r0, r3, [r0, #4]
 800c5fc:	4419      	add	r1, r3
 800c5fe:	4288      	cmp	r0, r1
 800c600:	bf34      	ite	cc
 800c602:	2000      	movcc	r0, #0
 800c604:	2001      	movcs	r0, #1
 800c606:	4770      	bx	lr
 800c608:	2000      	movs	r0, #0
 800c60a:	4770      	bx	lr

0800c60c <ucdr_check_final_buffer_behavior>:
 800c60c:	7d83      	ldrb	r3, [r0, #22]
 800c60e:	b943      	cbnz	r3, 800c622 <ucdr_check_final_buffer_behavior+0x16>
 800c610:	e9d0 2101 	ldrd	r2, r1, [r0, #4]
 800c614:	4291      	cmp	r1, r2
 800c616:	b510      	push	{r4, lr}
 800c618:	4604      	mov	r4, r0
 800c61a:	d205      	bcs.n	800c628 <ucdr_check_final_buffer_behavior+0x1c>
 800c61c:	2301      	movs	r3, #1
 800c61e:	4618      	mov	r0, r3
 800c620:	bd10      	pop	{r4, pc}
 800c622:	2300      	movs	r3, #0
 800c624:	4618      	mov	r0, r3
 800c626:	4770      	bx	lr
 800c628:	6982      	ldr	r2, [r0, #24]
 800c62a:	b13a      	cbz	r2, 800c63c <ucdr_check_final_buffer_behavior+0x30>
 800c62c:	69c1      	ldr	r1, [r0, #28]
 800c62e:	4790      	blx	r2
 800c630:	f080 0301 	eor.w	r3, r0, #1
 800c634:	b2db      	uxtb	r3, r3
 800c636:	75a0      	strb	r0, [r4, #22]
 800c638:	4618      	mov	r0, r3
 800c63a:	bd10      	pop	{r4, pc}
 800c63c:	2001      	movs	r0, #1
 800c63e:	75a0      	strb	r0, [r4, #22]
 800c640:	e7fa      	b.n	800c638 <ucdr_check_final_buffer_behavior+0x2c>
 800c642:	bf00      	nop

0800c644 <ucdr_set_on_full_buffer_callback>:
 800c644:	e9c0 1206 	strd	r1, r2, [r0, #24]
 800c648:	4770      	bx	lr
 800c64a:	bf00      	nop

0800c64c <ucdr_init_buffer_origin_offset_endian>:
 800c64c:	b410      	push	{r4}
 800c64e:	9c01      	ldr	r4, [sp, #4]
 800c650:	6001      	str	r1, [r0, #0]
 800c652:	440a      	add	r2, r1
 800c654:	6042      	str	r2, [r0, #4]
 800c656:	190a      	adds	r2, r1, r4
 800c658:	441c      	add	r4, r3
 800c65a:	e9c0 3403 	strd	r3, r4, [r0, #12]
 800c65e:	6082      	str	r2, [r0, #8]
 800c660:	f89d 3008 	ldrb.w	r3, [sp, #8]
 800c664:	7503      	strb	r3, [r0, #20]
 800c666:	2200      	movs	r2, #0
 800c668:	e9c0 2206 	strd	r2, r2, [r0, #24]
 800c66c:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c670:	7542      	strb	r2, [r0, #21]
 800c672:	7582      	strb	r2, [r0, #22]
 800c674:	4770      	bx	lr
 800c676:	bf00      	nop

0800c678 <ucdr_init_buffer_origin_offset>:
 800c678:	b510      	push	{r4, lr}
 800c67a:	b082      	sub	sp, #8
 800c67c:	9c04      	ldr	r4, [sp, #16]
 800c67e:	9400      	str	r4, [sp, #0]
 800c680:	2401      	movs	r4, #1
 800c682:	9401      	str	r4, [sp, #4]
 800c684:	f7ff ffe2 	bl	800c64c <ucdr_init_buffer_origin_offset_endian>
 800c688:	b002      	add	sp, #8
 800c68a:	bd10      	pop	{r4, pc}

0800c68c <ucdr_init_buffer_origin>:
 800c68c:	b510      	push	{r4, lr}
 800c68e:	b082      	sub	sp, #8
 800c690:	2400      	movs	r4, #0
 800c692:	9400      	str	r4, [sp, #0]
 800c694:	f7ff fff0 	bl	800c678 <ucdr_init_buffer_origin_offset>
 800c698:	b002      	add	sp, #8
 800c69a:	bd10      	pop	{r4, pc}

0800c69c <ucdr_init_buffer>:
 800c69c:	2300      	movs	r3, #0
 800c69e:	f7ff bff5 	b.w	800c68c <ucdr_init_buffer_origin>
 800c6a2:	bf00      	nop

0800c6a4 <ucdr_alignment>:
 800c6a4:	fbb0 f3f1 	udiv	r3, r0, r1
 800c6a8:	fb03 0011 	mls	r0, r3, r1, r0
 800c6ac:	1a08      	subs	r0, r1, r0
 800c6ae:	3901      	subs	r1, #1
 800c6b0:	4008      	ands	r0, r1
 800c6b2:	4770      	bx	lr

0800c6b4 <ucdr_buffer_alignment>:
 800c6b4:	7d43      	ldrb	r3, [r0, #21]
 800c6b6:	428b      	cmp	r3, r1
 800c6b8:	d208      	bcs.n	800c6cc <ucdr_buffer_alignment+0x18>
 800c6ba:	6900      	ldr	r0, [r0, #16]
 800c6bc:	fbb0 f3f1 	udiv	r3, r0, r1
 800c6c0:	fb01 0013 	mls	r0, r1, r3, r0
 800c6c4:	1a08      	subs	r0, r1, r0
 800c6c6:	3901      	subs	r1, #1
 800c6c8:	4008      	ands	r0, r1
 800c6ca:	4770      	bx	lr
 800c6cc:	2000      	movs	r0, #0
 800c6ce:	4770      	bx	lr

0800c6d0 <ucdr_align_to>:
 800c6d0:	b538      	push	{r3, r4, r5, lr}
 800c6d2:	4604      	mov	r4, r0
 800c6d4:	460d      	mov	r5, r1
 800c6d6:	f7ff ffed 	bl	800c6b4 <ucdr_buffer_alignment>
 800c6da:	68a3      	ldr	r3, [r4, #8]
 800c6dc:	6921      	ldr	r1, [r4, #16]
 800c6de:	7565      	strb	r5, [r4, #21]
 800c6e0:	181a      	adds	r2, r3, r0
 800c6e2:	6863      	ldr	r3, [r4, #4]
 800c6e4:	4293      	cmp	r3, r2
 800c6e6:	4408      	add	r0, r1
 800c6e8:	bf28      	it	cs
 800c6ea:	4613      	movcs	r3, r2
 800c6ec:	6120      	str	r0, [r4, #16]
 800c6ee:	60a3      	str	r3, [r4, #8]
 800c6f0:	bd38      	pop	{r3, r4, r5, pc}
 800c6f2:	bf00      	nop

0800c6f4 <ucdr_buffer_length>:
 800c6f4:	6882      	ldr	r2, [r0, #8]
 800c6f6:	6800      	ldr	r0, [r0, #0]
 800c6f8:	1a10      	subs	r0, r2, r0
 800c6fa:	4770      	bx	lr

0800c6fc <ucdr_buffer_remaining>:
 800c6fc:	e9d0 2001 	ldrd	r2, r0, [r0, #4]
 800c700:	1a10      	subs	r0, r2, r0
 800c702:	4770      	bx	lr

0800c704 <ucdr_check_final_buffer_behavior_array>:
 800c704:	b538      	push	{r3, r4, r5, lr}
 800c706:	7d83      	ldrb	r3, [r0, #22]
 800c708:	b963      	cbnz	r3, 800c724 <ucdr_check_final_buffer_behavior_array+0x20>
 800c70a:	e9d0 3201 	ldrd	r3, r2, [r0, #4]
 800c70e:	429a      	cmp	r2, r3
 800c710:	4604      	mov	r4, r0
 800c712:	460d      	mov	r5, r1
 800c714:	d308      	bcc.n	800c728 <ucdr_check_final_buffer_behavior_array+0x24>
 800c716:	b139      	cbz	r1, 800c728 <ucdr_check_final_buffer_behavior_array+0x24>
 800c718:	6983      	ldr	r3, [r0, #24]
 800c71a:	b163      	cbz	r3, 800c736 <ucdr_check_final_buffer_behavior_array+0x32>
 800c71c:	69c1      	ldr	r1, [r0, #28]
 800c71e:	4798      	blx	r3
 800c720:	75a0      	strb	r0, [r4, #22]
 800c722:	b108      	cbz	r0, 800c728 <ucdr_check_final_buffer_behavior_array+0x24>
 800c724:	2000      	movs	r0, #0
 800c726:	bd38      	pop	{r3, r4, r5, pc}
 800c728:	4620      	mov	r0, r4
 800c72a:	f7ff ffe7 	bl	800c6fc <ucdr_buffer_remaining>
 800c72e:	42a8      	cmp	r0, r5
 800c730:	bf28      	it	cs
 800c732:	4628      	movcs	r0, r5
 800c734:	bd38      	pop	{r3, r4, r5, pc}
 800c736:	2301      	movs	r3, #1
 800c738:	7583      	strb	r3, [r0, #22]
 800c73a:	e7f3      	b.n	800c724 <ucdr_check_final_buffer_behavior_array+0x20>

0800c73c <ucdr_advance_buffer>:
 800c73c:	b538      	push	{r3, r4, r5, lr}
 800c73e:	4604      	mov	r4, r0
 800c740:	460d      	mov	r5, r1
 800c742:	f7ff ff57 	bl	800c5f4 <ucdr_check_buffer_available_for>
 800c746:	b178      	cbz	r0, 800c768 <ucdr_advance_buffer+0x2c>
 800c748:	6923      	ldr	r3, [r4, #16]
 800c74a:	68a2      	ldr	r2, [r4, #8]
 800c74c:	442b      	add	r3, r5
 800c74e:	6123      	str	r3, [r4, #16]
 800c750:	2301      	movs	r3, #1
 800c752:	442a      	add	r2, r5
 800c754:	7563      	strb	r3, [r4, #21]
 800c756:	60a2      	str	r2, [r4, #8]
 800c758:	bd38      	pop	{r3, r4, r5, pc}
 800c75a:	68a2      	ldr	r2, [r4, #8]
 800c75c:	6923      	ldr	r3, [r4, #16]
 800c75e:	4402      	add	r2, r0
 800c760:	4403      	add	r3, r0
 800c762:	1a2d      	subs	r5, r5, r0
 800c764:	60a2      	str	r2, [r4, #8]
 800c766:	6123      	str	r3, [r4, #16]
 800c768:	4629      	mov	r1, r5
 800c76a:	2201      	movs	r2, #1
 800c76c:	4620      	mov	r0, r4
 800c76e:	f7ff ffc9 	bl	800c704 <ucdr_check_final_buffer_behavior_array>
 800c772:	2800      	cmp	r0, #0
 800c774:	d1f1      	bne.n	800c75a <ucdr_advance_buffer+0x1e>
 800c776:	2301      	movs	r3, #1
 800c778:	7563      	strb	r3, [r4, #21]
 800c77a:	bd38      	pop	{r3, r4, r5, pc}

0800c77c <uxr_buffer_delete_entity>:
 800c77c:	b510      	push	{r4, lr}
 800c77e:	2300      	movs	r3, #0
 800c780:	b08e      	sub	sp, #56	@ 0x38
 800c782:	e9cd 3201 	strd	r3, r2, [sp, #4]
 800c786:	2303      	movs	r3, #3
 800c788:	9300      	str	r3, [sp, #0]
 800c78a:	2204      	movs	r2, #4
 800c78c:	ab06      	add	r3, sp, #24
 800c78e:	4604      	mov	r4, r0
 800c790:	9103      	str	r1, [sp, #12]
 800c792:	f001 fa9f 	bl	800dcd4 <uxr_prepare_stream_to_write_submessage>
 800c796:	b918      	cbnz	r0, 800c7a0 <uxr_buffer_delete_entity+0x24>
 800c798:	4604      	mov	r4, r0
 800c79a:	4620      	mov	r0, r4
 800c79c:	b00e      	add	sp, #56	@ 0x38
 800c79e:	bd10      	pop	{r4, pc}
 800c7a0:	9902      	ldr	r1, [sp, #8]
 800c7a2:	aa05      	add	r2, sp, #20
 800c7a4:	4620      	mov	r0, r4
 800c7a6:	f001 fbcb 	bl	800df40 <uxr_init_base_object_request>
 800c7aa:	a905      	add	r1, sp, #20
 800c7ac:	4604      	mov	r4, r0
 800c7ae:	a806      	add	r0, sp, #24
 800c7b0:	f003 f84e 	bl	800f850 <uxr_serialize_DELETE_Payload>
 800c7b4:	4620      	mov	r0, r4
 800c7b6:	b00e      	add	sp, #56	@ 0x38
 800c7b8:	bd10      	pop	{r4, pc}
 800c7ba:	bf00      	nop

0800c7bc <uxr_common_create_entity>:
 800c7bc:	b510      	push	{r4, lr}
 800c7be:	f3c2 4c07 	ubfx	ip, r2, #16, #8
 800c7c2:	b08c      	sub	sp, #48	@ 0x30
 800c7c4:	e9cd 2102 	strd	r2, r1, [sp, #8]
 800c7c8:	f1bc 0f01 	cmp.w	ip, #1
 800c7cc:	bf0c      	ite	eq
 800c7ce:	f003 0201 	andeq.w	r2, r3, #1
 800c7d2:	2200      	movne	r2, #0
 800c7d4:	330e      	adds	r3, #14
 800c7d6:	f89d 1038 	ldrb.w	r1, [sp, #56]	@ 0x38
 800c7da:	9101      	str	r1, [sp, #4]
 800c7dc:	441a      	add	r2, r3
 800c7de:	2301      	movs	r3, #1
 800c7e0:	9300      	str	r3, [sp, #0]
 800c7e2:	9903      	ldr	r1, [sp, #12]
 800c7e4:	ab04      	add	r3, sp, #16
 800c7e6:	b292      	uxth	r2, r2
 800c7e8:	4604      	mov	r4, r0
 800c7ea:	f001 fa73 	bl	800dcd4 <uxr_prepare_stream_to_write_submessage>
 800c7ee:	b918      	cbnz	r0, 800c7f8 <uxr_common_create_entity+0x3c>
 800c7f0:	4604      	mov	r4, r0
 800c7f2:	4620      	mov	r0, r4
 800c7f4:	b00c      	add	sp, #48	@ 0x30
 800c7f6:	bd10      	pop	{r4, pc}
 800c7f8:	9902      	ldr	r1, [sp, #8]
 800c7fa:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800c7fc:	4620      	mov	r0, r4
 800c7fe:	f001 fb9f 	bl	800df40 <uxr_init_base_object_request>
 800c802:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800c804:	4604      	mov	r4, r0
 800c806:	a804      	add	r0, sp, #16
 800c808:	f002 ff7e 	bl	800f708 <uxr_serialize_CREATE_Payload>
 800c80c:	4620      	mov	r0, r4
 800c80e:	b00c      	add	sp, #48	@ 0x30
 800c810:	bd10      	pop	{r4, pc}
 800c812:	bf00      	nop

0800c814 <uxr_buffer_create_participant_bin>:
 800c814:	b570      	push	{r4, r5, r6, lr}
 800c816:	f5ad 7d16 	sub.w	sp, sp, #600	@ 0x258
 800c81a:	ac11      	add	r4, sp, #68	@ 0x44
 800c81c:	f8ad 3254 	strh.w	r3, [sp, #596]	@ 0x254
 800c820:	2303      	movs	r3, #3
 800c822:	e9cd 2102 	strd	r2, r1, [sp, #8]
 800c826:	7223      	strb	r3, [r4, #8]
 800c828:	9b9a      	ldr	r3, [sp, #616]	@ 0x268
 800c82a:	f89d 626c 	ldrb.w	r6, [sp, #620]	@ 0x26c
 800c82e:	2201      	movs	r2, #1
 800c830:	2100      	movs	r1, #0
 800c832:	4605      	mov	r5, r0
 800c834:	7122      	strb	r2, [r4, #4]
 800c836:	f88d 1014 	strb.w	r1, [sp, #20]
 800c83a:	b1cb      	cbz	r3, 800c870 <uxr_buffer_create_participant_bin+0x5c>
 800c83c:	f88d 201c 	strb.w	r2, [sp, #28]
 800c840:	9308      	str	r3, [sp, #32]
 800c842:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800c846:	a915      	add	r1, sp, #84	@ 0x54
 800c848:	a809      	add	r0, sp, #36	@ 0x24
 800c84a:	f7ff ff27 	bl	800c69c <ucdr_init_buffer>
 800c84e:	a905      	add	r1, sp, #20
 800c850:	a809      	add	r0, sp, #36	@ 0x24
 800c852:	f002 fc17 	bl	800f084 <uxr_serialize_OBJK_DomainParticipant_Binary>
 800c856:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800c858:	9600      	str	r6, [sp, #0]
 800c85a:	9401      	str	r4, [sp, #4]
 800c85c:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 800c860:	60e3      	str	r3, [r4, #12]
 800c862:	4628      	mov	r0, r5
 800c864:	b29b      	uxth	r3, r3
 800c866:	f7ff ffa9 	bl	800c7bc <uxr_common_create_entity>
 800c86a:	f50d 7d16 	add.w	sp, sp, #600	@ 0x258
 800c86e:	bd70      	pop	{r4, r5, r6, pc}
 800c870:	f88d 301c 	strb.w	r3, [sp, #28]
 800c874:	e7e5      	b.n	800c842 <uxr_buffer_create_participant_bin+0x2e>
 800c876:	bf00      	nop

0800c878 <uxr_buffer_create_topic_bin>:
 800c878:	b570      	push	{r4, r5, r6, lr}
 800c87a:	f5ad 7d18 	sub.w	sp, sp, #608	@ 0x260
 800c87e:	e9cd 3203 	strd	r3, r2, [sp, #12]
 800c882:	9105      	str	r1, [sp, #20]
 800c884:	4605      	mov	r5, r0
 800c886:	a997      	add	r1, sp, #604	@ 0x25c
 800c888:	4618      	mov	r0, r3
 800c88a:	2302      	movs	r3, #2
 800c88c:	f89d 6278 	ldrb.w	r6, [sp, #632]	@ 0x278
 800c890:	f88d 3050 	strb.w	r3, [sp, #80]	@ 0x50
 800c894:	f000 f9b2 	bl	800cbfc <uxr_object_id_to_raw>
 800c898:	9b9c      	ldr	r3, [sp, #624]	@ 0x270
 800c89a:	9306      	str	r3, [sp, #24]
 800c89c:	9b9d      	ldr	r3, [sp, #628]	@ 0x274
 800c89e:	930a      	str	r3, [sp, #40]	@ 0x28
 800c8a0:	2303      	movs	r3, #3
 800c8a2:	f88d 3054 	strb.w	r3, [sp, #84]	@ 0x54
 800c8a6:	2301      	movs	r3, #1
 800c8a8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800c8ac:	f88d 3024 	strb.w	r3, [sp, #36]	@ 0x24
 800c8b0:	a917      	add	r1, sp, #92	@ 0x5c
 800c8b2:	2300      	movs	r3, #0
 800c8b4:	a80b      	add	r0, sp, #44	@ 0x2c
 800c8b6:	f88d 301c 	strb.w	r3, [sp, #28]
 800c8ba:	f7ff feef 	bl	800c69c <ucdr_init_buffer>
 800c8be:	a906      	add	r1, sp, #24
 800c8c0:	a80b      	add	r0, sp, #44	@ 0x2c
 800c8c2:	f002 fc01 	bl	800f0c8 <uxr_serialize_OBJK_Topic_Binary>
 800c8c6:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800c8c8:	9316      	str	r3, [sp, #88]	@ 0x58
 800c8ca:	ac13      	add	r4, sp, #76	@ 0x4c
 800c8cc:	e9dd 2104 	ldrd	r2, r1, [sp, #16]
 800c8d0:	9600      	str	r6, [sp, #0]
 800c8d2:	9401      	str	r4, [sp, #4]
 800c8d4:	b29b      	uxth	r3, r3
 800c8d6:	4628      	mov	r0, r5
 800c8d8:	f7ff ff70 	bl	800c7bc <uxr_common_create_entity>
 800c8dc:	f50d 7d18 	add.w	sp, sp, #608	@ 0x260
 800c8e0:	bd70      	pop	{r4, r5, r6, pc}
 800c8e2:	bf00      	nop

0800c8e4 <uxr_buffer_create_subscriber_bin>:
 800c8e4:	b570      	push	{r4, r5, r6, lr}
 800c8e6:	f5ad 6d91 	sub.w	sp, sp, #1160	@ 0x488
 800c8ea:	e9cd 3203 	strd	r3, r2, [sp, #12]
 800c8ee:	9105      	str	r1, [sp, #20]
 800c8f0:	4605      	mov	r5, r0
 800c8f2:	a992      	add	r1, sp, #584	@ 0x248
 800c8f4:	4618      	mov	r0, r3
 800c8f6:	2304      	movs	r3, #4
 800c8f8:	f89d 6498 	ldrb.w	r6, [sp, #1176]	@ 0x498
 800c8fc:	f88d 303c 	strb.w	r3, [sp, #60]	@ 0x3c
 800c900:	f000 f97c 	bl	800cbfc <uxr_object_id_to_raw>
 800c904:	2300      	movs	r3, #0
 800c906:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800c90a:	f88d 324c 	strb.w	r3, [sp, #588]	@ 0x24c
 800c90e:	f88d 3254 	strb.w	r3, [sp, #596]	@ 0x254
 800c912:	a912      	add	r1, sp, #72	@ 0x48
 800c914:	2303      	movs	r3, #3
 800c916:	a806      	add	r0, sp, #24
 800c918:	f88d 3040 	strb.w	r3, [sp, #64]	@ 0x40
 800c91c:	f7ff febe 	bl	800c69c <ucdr_init_buffer>
 800c920:	a993      	add	r1, sp, #588	@ 0x24c
 800c922:	a806      	add	r0, sp, #24
 800c924:	f002 fc84 	bl	800f230 <uxr_serialize_OBJK_Subscriber_Binary>
 800c928:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800c92a:	9311      	str	r3, [sp, #68]	@ 0x44
 800c92c:	ac0e      	add	r4, sp, #56	@ 0x38
 800c92e:	e9dd 2104 	ldrd	r2, r1, [sp, #16]
 800c932:	9600      	str	r6, [sp, #0]
 800c934:	9401      	str	r4, [sp, #4]
 800c936:	b29b      	uxth	r3, r3
 800c938:	4628      	mov	r0, r5
 800c93a:	f7ff ff3f 	bl	800c7bc <uxr_common_create_entity>
 800c93e:	f50d 6d91 	add.w	sp, sp, #1160	@ 0x488
 800c942:	bd70      	pop	{r4, r5, r6, pc}

0800c944 <uxr_buffer_create_datareader_bin>:
 800c944:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c948:	f5ad 7d24 	sub.w	sp, sp, #656	@ 0x290
 800c94c:	ac1f      	add	r4, sp, #124	@ 0x7c
 800c94e:	e9cd 3203 	strd	r3, r2, [sp, #12]
 800c952:	f8bd 52b0 	ldrh.w	r5, [sp, #688]	@ 0x2b0
 800c956:	9105      	str	r1, [sp, #20]
 800c958:	4606      	mov	r6, r0
 800c95a:	a9a3      	add	r1, sp, #652	@ 0x28c
 800c95c:	4618      	mov	r0, r3
 800c95e:	2306      	movs	r3, #6
 800c960:	7123      	strb	r3, [r4, #4]
 800c962:	f89d 82b4 	ldrb.w	r8, [sp, #692]	@ 0x2b4
 800c966:	2703      	movs	r7, #3
 800c968:	f000 f948 	bl	800cbfc <uxr_object_id_to_raw>
 800c96c:	98aa      	ldr	r0, [sp, #680]	@ 0x2a8
 800c96e:	7227      	strb	r7, [r4, #8]
 800c970:	a90e      	add	r1, sp, #56	@ 0x38
 800c972:	f000 f943 	bl	800cbfc <uxr_object_id_to_raw>
 800c976:	2300      	movs	r3, #0
 800c978:	f8ad 5044 	strh.w	r5, [sp, #68]	@ 0x44
 800c97c:	f89d 22ad 	ldrb.w	r2, [sp, #685]	@ 0x2ad
 800c980:	f88d 3070 	strb.w	r3, [sp, #112]	@ 0x70
 800c984:	3d00      	subs	r5, #0
 800c986:	bf18      	it	ne
 800c988:	2501      	movne	r5, #1
 800c98a:	f88d 3064 	strb.w	r3, [sp, #100]	@ 0x64
 800c98e:	f88d 3046 	strb.w	r3, [sp, #70]	@ 0x46
 800c992:	f88d 304c 	strb.w	r3, [sp, #76]	@ 0x4c
 800c996:	f88d 3054 	strb.w	r3, [sp, #84]	@ 0x54
 800c99a:	f8ad 3040 	strh.w	r3, [sp, #64]	@ 0x40
 800c99e:	2301      	movs	r3, #1
 800c9a0:	f88d 5042 	strb.w	r5, [sp, #66]	@ 0x42
 800c9a4:	f88d 303a 	strb.w	r3, [sp, #58]	@ 0x3a
 800c9a8:	bb8a      	cbnz	r2, 800ca0e <uxr_buffer_create_datareader_bin+0xca>
 800c9aa:	f8ad 3040 	strh.w	r3, [sp, #64]	@ 0x40
 800c9ae:	f04f 0e23 	mov.w	lr, #35	@ 0x23
 800c9b2:	f04f 0c13 	mov.w	ip, #19
 800c9b6:	250b      	movs	r5, #11
 800c9b8:	2221      	movs	r2, #33	@ 0x21
 800c9ba:	2111      	movs	r1, #17
 800c9bc:	2009      	movs	r0, #9
 800c9be:	f89d 32ae 	ldrb.w	r3, [sp, #686]	@ 0x2ae
 800c9c2:	b923      	cbnz	r3, 800c9ce <uxr_buffer_create_datareader_bin+0x8a>
 800c9c4:	f8ad 7040 	strh.w	r7, [sp, #64]	@ 0x40
 800c9c8:	4672      	mov	r2, lr
 800c9ca:	4661      	mov	r1, ip
 800c9cc:	4628      	mov	r0, r5
 800c9ce:	f89d 32ac 	ldrb.w	r3, [sp, #684]	@ 0x2ac
 800c9d2:	2b01      	cmp	r3, #1
 800c9d4:	d025      	beq.n	800ca22 <uxr_buffer_create_datareader_bin+0xde>
 800c9d6:	2b03      	cmp	r3, #3
 800c9d8:	d029      	beq.n	800ca2e <uxr_buffer_create_datareader_bin+0xea>
 800c9da:	b32b      	cbz	r3, 800ca28 <uxr_buffer_create_datareader_bin+0xe4>
 800c9dc:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800c9e0:	a923      	add	r1, sp, #140	@ 0x8c
 800c9e2:	a806      	add	r0, sp, #24
 800c9e4:	f7ff fe5a 	bl	800c69c <ucdr_init_buffer>
 800c9e8:	a90e      	add	r1, sp, #56	@ 0x38
 800c9ea:	a806      	add	r0, sp, #24
 800c9ec:	f002 fc96 	bl	800f31c <uxr_serialize_OBJK_DataReader_Binary>
 800c9f0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800c9f2:	f8cd 8000 	str.w	r8, [sp]
 800c9f6:	9401      	str	r4, [sp, #4]
 800c9f8:	e9dd 2104 	ldrd	r2, r1, [sp, #16]
 800c9fc:	60e3      	str	r3, [r4, #12]
 800c9fe:	4630      	mov	r0, r6
 800ca00:	b29b      	uxth	r3, r3
 800ca02:	f7ff fedb 	bl	800c7bc <uxr_common_create_entity>
 800ca06:	f50d 7d24 	add.w	sp, sp, #656	@ 0x290
 800ca0a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ca0e:	f04f 0e22 	mov.w	lr, #34	@ 0x22
 800ca12:	f04f 0c12 	mov.w	ip, #18
 800ca16:	250a      	movs	r5, #10
 800ca18:	2220      	movs	r2, #32
 800ca1a:	2110      	movs	r1, #16
 800ca1c:	2008      	movs	r0, #8
 800ca1e:	2702      	movs	r7, #2
 800ca20:	e7cd      	b.n	800c9be <uxr_buffer_create_datareader_bin+0x7a>
 800ca22:	f8ad 1040 	strh.w	r1, [sp, #64]	@ 0x40
 800ca26:	e7d9      	b.n	800c9dc <uxr_buffer_create_datareader_bin+0x98>
 800ca28:	f8ad 0040 	strh.w	r0, [sp, #64]	@ 0x40
 800ca2c:	e7d6      	b.n	800c9dc <uxr_buffer_create_datareader_bin+0x98>
 800ca2e:	f8ad 2040 	strh.w	r2, [sp, #64]	@ 0x40
 800ca32:	e7d3      	b.n	800c9dc <uxr_buffer_create_datareader_bin+0x98>

0800ca34 <get_custom_error>:
 800ca34:	4b01      	ldr	r3, [pc, #4]	@ (800ca3c <get_custom_error+0x8>)
 800ca36:	7818      	ldrb	r0, [r3, #0]
 800ca38:	4770      	bx	lr
 800ca3a:	bf00      	nop
 800ca3c:	2000daf4 	.word	0x2000daf4

0800ca40 <recv_custom_msg>:
 800ca40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ca44:	4693      	mov	fp, r2
 800ca46:	b089      	sub	sp, #36	@ 0x24
 800ca48:	f890 2200 	ldrb.w	r2, [r0, #512]	@ 0x200
 800ca4c:	9305      	str	r3, [sp, #20]
 800ca4e:	468a      	mov	sl, r1
 800ca50:	2100      	movs	r1, #0
 800ca52:	4604      	mov	r4, r0
 800ca54:	f88d 101e 	strb.w	r1, [sp, #30]
 800ca58:	b322      	cbz	r2, 800caa4 <recv_custom_msg+0x64>
 800ca5a:	f200 2902 	addw	r9, r0, #514	@ 0x202
 800ca5e:	f10d 081f 	add.w	r8, sp, #31
 800ca62:	af05      	add	r7, sp, #20
 800ca64:	f10d 061e 	add.w	r6, sp, #30
 800ca68:	f44f 7500 	mov.w	r5, #512	@ 0x200
 800ca6c:	e002      	b.n	800ca74 <recv_custom_msg+0x34>
 800ca6e:	9b05      	ldr	r3, [sp, #20]
 800ca70:	2b00      	cmp	r3, #0
 800ca72:	dd0f      	ble.n	800ca94 <recv_custom_msg+0x54>
 800ca74:	f8d4 1274 	ldr.w	r1, [r4, #628]	@ 0x274
 800ca78:	4623      	mov	r3, r4
 800ca7a:	e9cd 7802 	strd	r7, r8, [sp, #8]
 800ca7e:	e9cd 5600 	strd	r5, r6, [sp]
 800ca82:	4622      	mov	r2, r4
 800ca84:	4648      	mov	r0, r9
 800ca86:	f001 fc89 	bl	800e39c <uxr_read_framed_msg>
 800ca8a:	2800      	cmp	r0, #0
 800ca8c:	d0ef      	beq.n	800ca6e <recv_custom_msg+0x2e>
 800ca8e:	f89d 301e 	ldrb.w	r3, [sp, #30]
 800ca92:	b1b3      	cbz	r3, 800cac2 <recv_custom_msg+0x82>
 800ca94:	4b0f      	ldr	r3, [pc, #60]	@ (800cad4 <recv_custom_msg+0x94>)
 800ca96:	f89d 201f 	ldrb.w	r2, [sp, #31]
 800ca9a:	701a      	strb	r2, [r3, #0]
 800ca9c:	2000      	movs	r0, #0
 800ca9e:	b009      	add	sp, #36	@ 0x24
 800caa0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800caa4:	f10d 021f 	add.w	r2, sp, #31
 800caa8:	9200      	str	r2, [sp, #0]
 800caaa:	f8d0 5274 	ldr.w	r5, [r0, #628]	@ 0x274
 800caae:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800cab2:	4601      	mov	r1, r0
 800cab4:	47a8      	blx	r5
 800cab6:	2800      	cmp	r0, #0
 800cab8:	d0ec      	beq.n	800ca94 <recv_custom_msg+0x54>
 800caba:	f89d 301e 	ldrb.w	r3, [sp, #30]
 800cabe:	2b00      	cmp	r3, #0
 800cac0:	d1e8      	bne.n	800ca94 <recv_custom_msg+0x54>
 800cac2:	f8cb 0000 	str.w	r0, [fp]
 800cac6:	2001      	movs	r0, #1
 800cac8:	f8ca 4000 	str.w	r4, [sl]
 800cacc:	b009      	add	sp, #36	@ 0x24
 800cace:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cad2:	bf00      	nop
 800cad4:	2000daf4 	.word	0x2000daf4

0800cad8 <send_custom_msg>:
 800cad8:	b530      	push	{r4, r5, lr}
 800cada:	f890 4200 	ldrb.w	r4, [r0, #512]	@ 0x200
 800cade:	b087      	sub	sp, #28
 800cae0:	4615      	mov	r5, r2
 800cae2:	b974      	cbnz	r4, 800cb02 <send_custom_msg+0x2a>
 800cae4:	f8d0 4270 	ldr.w	r4, [r0, #624]	@ 0x270
 800cae8:	f10d 0317 	add.w	r3, sp, #23
 800caec:	47a0      	blx	r4
 800caee:	b108      	cbz	r0, 800caf4 <send_custom_msg+0x1c>
 800caf0:	42a8      	cmp	r0, r5
 800caf2:	d015      	beq.n	800cb20 <send_custom_msg+0x48>
 800caf4:	4b0c      	ldr	r3, [pc, #48]	@ (800cb28 <send_custom_msg+0x50>)
 800caf6:	f89d 2017 	ldrb.w	r2, [sp, #23]
 800cafa:	701a      	strb	r2, [r3, #0]
 800cafc:	2000      	movs	r0, #0
 800cafe:	b007      	add	sp, #28
 800cb00:	bd30      	pop	{r4, r5, pc}
 800cb02:	460b      	mov	r3, r1
 800cb04:	2200      	movs	r2, #0
 800cb06:	f10d 0117 	add.w	r1, sp, #23
 800cb0a:	e9cd 2101 	strd	r2, r1, [sp, #4]
 800cb0e:	4602      	mov	r2, r0
 800cb10:	f8d0 1270 	ldr.w	r1, [r0, #624]	@ 0x270
 800cb14:	9500      	str	r5, [sp, #0]
 800cb16:	f200 2002 	addw	r0, r0, #514	@ 0x202
 800cb1a:	f001 fa47 	bl	800dfac <uxr_write_framed_msg>
 800cb1e:	e7e6      	b.n	800caee <send_custom_msg+0x16>
 800cb20:	2001      	movs	r0, #1
 800cb22:	b007      	add	sp, #28
 800cb24:	bd30      	pop	{r4, r5, pc}
 800cb26:	bf00      	nop
 800cb28:	2000daf4 	.word	0x2000daf4

0800cb2c <uxr_set_custom_transport_callbacks>:
 800cb2c:	b410      	push	{r4}
 800cb2e:	9c01      	ldr	r4, [sp, #4]
 800cb30:	f8c0 4270 	str.w	r4, [r0, #624]	@ 0x270
 800cb34:	e9c0 239a 	strd	r2, r3, [r0, #616]	@ 0x268
 800cb38:	9b02      	ldr	r3, [sp, #8]
 800cb3a:	f880 1200 	strb.w	r1, [r0, #512]	@ 0x200
 800cb3e:	f85d 4b04 	ldr.w	r4, [sp], #4
 800cb42:	f8c0 3274 	str.w	r3, [r0, #628]	@ 0x274
 800cb46:	4770      	bx	lr

0800cb48 <uxr_init_custom_transport>:
 800cb48:	b538      	push	{r3, r4, r5, lr}
 800cb4a:	f8d0 3268 	ldr.w	r3, [r0, #616]	@ 0x268
 800cb4e:	b303      	cbz	r3, 800cb92 <uxr_init_custom_transport+0x4a>
 800cb50:	f8d0 226c 	ldr.w	r2, [r0, #620]	@ 0x26c
 800cb54:	4604      	mov	r4, r0
 800cb56:	b1e2      	cbz	r2, 800cb92 <uxr_init_custom_transport+0x4a>
 800cb58:	f8d0 2270 	ldr.w	r2, [r0, #624]	@ 0x270
 800cb5c:	b1ca      	cbz	r2, 800cb92 <uxr_init_custom_transport+0x4a>
 800cb5e:	f8d0 2274 	ldr.w	r2, [r0, #628]	@ 0x274
 800cb62:	b1b2      	cbz	r2, 800cb92 <uxr_init_custom_transport+0x4a>
 800cb64:	f8c0 128c 	str.w	r1, [r0, #652]	@ 0x28c
 800cb68:	4798      	blx	r3
 800cb6a:	4605      	mov	r5, r0
 800cb6c:	b188      	cbz	r0, 800cb92 <uxr_init_custom_transport+0x4a>
 800cb6e:	f894 3200 	ldrb.w	r3, [r4, #512]	@ 0x200
 800cb72:	b98b      	cbnz	r3, 800cb98 <uxr_init_custom_transport+0x50>
 800cb74:	490b      	ldr	r1, [pc, #44]	@ (800cba4 <uxr_init_custom_transport+0x5c>)
 800cb76:	4b0c      	ldr	r3, [pc, #48]	@ (800cba8 <uxr_init_custom_transport+0x60>)
 800cb78:	4a0c      	ldr	r2, [pc, #48]	@ (800cbac <uxr_init_custom_transport+0x64>)
 800cb7a:	f8c4 3280 	str.w	r3, [r4, #640]	@ 0x280
 800cb7e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800cb82:	e9c4 419e 	strd	r4, r1, [r4, #632]	@ 0x278
 800cb86:	f8c4 2284 	str.w	r2, [r4, #644]	@ 0x284
 800cb8a:	f8a4 3288 	strh.w	r3, [r4, #648]	@ 0x288
 800cb8e:	4628      	mov	r0, r5
 800cb90:	bd38      	pop	{r3, r4, r5, pc}
 800cb92:	2500      	movs	r5, #0
 800cb94:	4628      	mov	r0, r5
 800cb96:	bd38      	pop	{r3, r4, r5, pc}
 800cb98:	2100      	movs	r1, #0
 800cb9a:	f204 2002 	addw	r0, r4, #514	@ 0x202
 800cb9e:	f001 f9ff 	bl	800dfa0 <uxr_init_framing_io>
 800cba2:	e7e7      	b.n	800cb74 <uxr_init_custom_transport+0x2c>
 800cba4:	0800cad9 	.word	0x0800cad9
 800cba8:	0800ca41 	.word	0x0800ca41
 800cbac:	0800ca35 	.word	0x0800ca35

0800cbb0 <uxr_close_custom_transport>:
 800cbb0:	f8d0 326c 	ldr.w	r3, [r0, #620]	@ 0x26c
 800cbb4:	4718      	bx	r3
 800cbb6:	bf00      	nop

0800cbb8 <uxr_object_id>:
 800cbb8:	b082      	sub	sp, #8
 800cbba:	2300      	movs	r3, #0
 800cbbc:	f88d 1006 	strb.w	r1, [sp, #6]
 800cbc0:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 800cbc4:	f360 030f 	bfi	r3, r0, #0, #16
 800cbc8:	f362 431f 	bfi	r3, r2, #16, #16
 800cbcc:	4618      	mov	r0, r3
 800cbce:	b002      	add	sp, #8
 800cbd0:	4770      	bx	lr
 800cbd2:	bf00      	nop

0800cbd4 <uxr_object_id_from_raw>:
 800cbd4:	7843      	ldrb	r3, [r0, #1]
 800cbd6:	7801      	ldrb	r1, [r0, #0]
 800cbd8:	b082      	sub	sp, #8
 800cbda:	f003 020f 	and.w	r2, r3, #15
 800cbde:	f88d 2006 	strb.w	r2, [sp, #6]
 800cbe2:	091b      	lsrs	r3, r3, #4
 800cbe4:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 800cbe8:	eb03 1301 	add.w	r3, r3, r1, lsl #4
 800cbec:	2000      	movs	r0, #0
 800cbee:	f363 000f 	bfi	r0, r3, #0, #16
 800cbf2:	f362 401f 	bfi	r0, r2, #16, #16
 800cbf6:	b002      	add	sp, #8
 800cbf8:	4770      	bx	lr
 800cbfa:	bf00      	nop

0800cbfc <uxr_object_id_to_raw>:
 800cbfc:	4602      	mov	r2, r0
 800cbfe:	f3c0 4303 	ubfx	r3, r0, #16, #4
 800cc02:	b082      	sub	sp, #8
 800cc04:	f3c2 1c0b 	ubfx	ip, r2, #4, #12
 800cc08:	eb03 1002 	add.w	r0, r3, r2, lsl #4
 800cc0c:	f881 c000 	strb.w	ip, [r1]
 800cc10:	7048      	strb	r0, [r1, #1]
 800cc12:	b002      	add	sp, #8
 800cc14:	4770      	bx	lr
 800cc16:	bf00      	nop

0800cc18 <uxr_buffer_request_data>:
 800cc18:	b530      	push	{r4, r5, lr}
 800cc1a:	b095      	sub	sp, #84	@ 0x54
 800cc1c:	e9cd 2104 	strd	r2, r1, [sp, #16]
 800cc20:	9d18      	ldr	r5, [sp, #96]	@ 0x60
 800cc22:	9303      	str	r3, [sp, #12]
 800cc24:	2200      	movs	r2, #0
 800cc26:	2d00      	cmp	r5, #0
 800cc28:	bf14      	ite	ne
 800cc2a:	2101      	movne	r1, #1
 800cc2c:	4611      	moveq	r1, r2
 800cc2e:	4604      	mov	r4, r0
 800cc30:	f88d 301c 	strb.w	r3, [sp, #28]
 800cc34:	f88d 201d 	strb.w	r2, [sp, #29]
 800cc38:	f88d 201e 	strb.w	r2, [sp, #30]
 800cc3c:	f88d 1024 	strb.w	r1, [sp, #36]	@ 0x24
 800cc40:	d021      	beq.n	800cc86 <uxr_buffer_request_data+0x6e>
 800cc42:	682a      	ldr	r2, [r5, #0]
 800cc44:	686b      	ldr	r3, [r5, #4]
 800cc46:	f8cd 2026 	str.w	r2, [sp, #38]	@ 0x26
 800cc4a:	f8cd 302a 	str.w	r3, [sp, #42]	@ 0x2a
 800cc4e:	2210      	movs	r2, #16
 800cc50:	2308      	movs	r3, #8
 800cc52:	2100      	movs	r1, #0
 800cc54:	e9cd 3100 	strd	r3, r1, [sp]
 800cc58:	4620      	mov	r0, r4
 800cc5a:	9905      	ldr	r1, [sp, #20]
 800cc5c:	ab0c      	add	r3, sp, #48	@ 0x30
 800cc5e:	f001 f839 	bl	800dcd4 <uxr_prepare_stream_to_write_submessage>
 800cc62:	b918      	cbnz	r0, 800cc6c <uxr_buffer_request_data+0x54>
 800cc64:	4604      	mov	r4, r0
 800cc66:	4620      	mov	r0, r4
 800cc68:	b015      	add	sp, #84	@ 0x54
 800cc6a:	bd30      	pop	{r4, r5, pc}
 800cc6c:	9904      	ldr	r1, [sp, #16]
 800cc6e:	aa06      	add	r2, sp, #24
 800cc70:	4620      	mov	r0, r4
 800cc72:	f001 f965 	bl	800df40 <uxr_init_base_object_request>
 800cc76:	a906      	add	r1, sp, #24
 800cc78:	4604      	mov	r4, r0
 800cc7a:	a80c      	add	r0, sp, #48	@ 0x30
 800cc7c:	f002 fe92 	bl	800f9a4 <uxr_serialize_READ_DATA_Payload>
 800cc80:	4620      	mov	r0, r4
 800cc82:	b015      	add	sp, #84	@ 0x54
 800cc84:	bd30      	pop	{r4, r5, pc}
 800cc86:	2208      	movs	r2, #8
 800cc88:	e7e2      	b.n	800cc50 <uxr_buffer_request_data+0x38>
 800cc8a:	bf00      	nop

0800cc8c <uxr_buffer_cancel_data>:
 800cc8c:	b510      	push	{r4, lr}
 800cc8e:	b094      	sub	sp, #80	@ 0x50
 800cc90:	2300      	movs	r3, #0
 800cc92:	9202      	str	r2, [sp, #8]
 800cc94:	9205      	str	r2, [sp, #20]
 800cc96:	9301      	str	r3, [sp, #4]
 800cc98:	2201      	movs	r2, #1
 800cc9a:	f8ad 301c 	strh.w	r3, [sp, #28]
 800cc9e:	f88d 301e 	strb.w	r3, [sp, #30]
 800cca2:	f8cd 3026 	str.w	r3, [sp, #38]	@ 0x26
 800cca6:	f8cd 302a 	str.w	r3, [sp, #42]	@ 0x2a
 800ccaa:	2308      	movs	r3, #8
 800ccac:	f88d 2024 	strb.w	r2, [sp, #36]	@ 0x24
 800ccb0:	9300      	str	r3, [sp, #0]
 800ccb2:	2210      	movs	r2, #16
 800ccb4:	ab0c      	add	r3, sp, #48	@ 0x30
 800ccb6:	4604      	mov	r4, r0
 800ccb8:	9103      	str	r1, [sp, #12]
 800ccba:	f001 f80b 	bl	800dcd4 <uxr_prepare_stream_to_write_submessage>
 800ccbe:	b918      	cbnz	r0, 800ccc8 <uxr_buffer_cancel_data+0x3c>
 800ccc0:	4604      	mov	r4, r0
 800ccc2:	4620      	mov	r0, r4
 800ccc4:	b014      	add	sp, #80	@ 0x50
 800ccc6:	bd10      	pop	{r4, pc}
 800ccc8:	9905      	ldr	r1, [sp, #20]
 800ccca:	aa06      	add	r2, sp, #24
 800cccc:	4620      	mov	r0, r4
 800ccce:	f001 f937 	bl	800df40 <uxr_init_base_object_request>
 800ccd2:	a906      	add	r1, sp, #24
 800ccd4:	4604      	mov	r4, r0
 800ccd6:	a80c      	add	r0, sp, #48	@ 0x30
 800ccd8:	f002 fe64 	bl	800f9a4 <uxr_serialize_READ_DATA_Payload>
 800ccdc:	4620      	mov	r0, r4
 800ccde:	b014      	add	sp, #80	@ 0x50
 800cce0:	bd10      	pop	{r4, pc}
 800cce2:	bf00      	nop

0800cce4 <read_submessage_format>:
 800cce4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800cce8:	b095      	sub	sp, #84	@ 0x54
 800ccea:	f8bd 6078 	ldrh.w	r6, [sp, #120]	@ 0x78
 800ccee:	b113      	cbz	r3, 800ccf6 <read_submessage_format+0x12>
 800ccf0:	b015      	add	sp, #84	@ 0x54
 800ccf2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800ccf6:	460c      	mov	r4, r1
 800ccf8:	4615      	mov	r5, r2
 800ccfa:	e9d1 2101 	ldrd	r2, r1, [r1, #4]
 800ccfe:	4607      	mov	r7, r0
 800cd00:	981c      	ldr	r0, [sp, #112]	@ 0x70
 800cd02:	9004      	str	r0, [sp, #16]
 800cd04:	981d      	ldr	r0, [sp, #116]	@ 0x74
 800cd06:	9005      	str	r0, [sp, #20]
 800cd08:	1a52      	subs	r2, r2, r1
 800cd0a:	a80c      	add	r0, sp, #48	@ 0x30
 800cd0c:	4699      	mov	r9, r3
 800cd0e:	f89d 8076 	ldrb.w	r8, [sp, #118]	@ 0x76
 800cd12:	f7ff fcc3 	bl	800c69c <ucdr_init_buffer>
 800cd16:	e9d4 1206 	ldrd	r1, r2, [r4, #24]
 800cd1a:	a80c      	add	r0, sp, #48	@ 0x30
 800cd1c:	f7ff fc92 	bl	800c644 <ucdr_set_on_full_buffer_callback>
 800cd20:	69e2      	ldr	r2, [r4, #28]
 800cd22:	b19a      	cbz	r2, 800cd4c <read_submessage_format+0x68>
 800cd24:	f1b8 0f07 	cmp.w	r8, #7
 800cd28:	f882 9014 	strb.w	r9, [r2, #20]
 800cd2c:	d040      	beq.n	800cdb0 <read_submessage_format+0xcc>
 800cd2e:	f1b8 0f08 	cmp.w	r8, #8
 800cd32:	d02e      	beq.n	800cd92 <read_submessage_format+0xae>
 800cd34:	f1b8 0f06 	cmp.w	r8, #6
 800cd38:	d011      	beq.n	800cd5e <read_submessage_format+0x7a>
 800cd3a:	2301      	movs	r3, #1
 800cd3c:	7513      	strb	r3, [r2, #20]
 800cd3e:	4629      	mov	r1, r5
 800cd40:	4620      	mov	r0, r4
 800cd42:	f7ff fcfb 	bl	800c73c <ucdr_advance_buffer>
 800cd46:	b015      	add	sp, #84	@ 0x54
 800cd48:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800cd4c:	f1b8 0f07 	cmp.w	r8, #7
 800cd50:	d02e      	beq.n	800cdb0 <read_submessage_format+0xcc>
 800cd52:	f1b8 0f08 	cmp.w	r8, #8
 800cd56:	d01c      	beq.n	800cd92 <read_submessage_format+0xae>
 800cd58:	f1b8 0f06 	cmp.w	r8, #6
 800cd5c:	d1ef      	bne.n	800cd3e <read_submessage_format+0x5a>
 800cd5e:	f8d7 8088 	ldr.w	r8, [r7, #136]	@ 0x88
 800cd62:	f1b8 0f00 	cmp.w	r8, #0
 800cd66:	d011      	beq.n	800cd8c <read_submessage_format+0xa8>
 800cd68:	ab0c      	add	r3, sp, #48	@ 0x30
 800cd6a:	e9cd 3500 	strd	r3, r5, [sp]
 800cd6e:	2306      	movs	r3, #6
 800cd70:	f88d 3016 	strb.w	r3, [sp, #22]
 800cd74:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800cd78:	9302      	str	r3, [sp, #8]
 800cd7a:	4632      	mov	r2, r6
 800cd7c:	e9dd 3104 	ldrd	r3, r1, [sp, #16]
 800cd80:	4638      	mov	r0, r7
 800cd82:	47c0      	blx	r8
 800cd84:	2301      	movs	r3, #1
 800cd86:	69e2      	ldr	r2, [r4, #28]
 800cd88:	f887 30b4 	strb.w	r3, [r7, #180]	@ 0xb4
 800cd8c:	2a00      	cmp	r2, #0
 800cd8e:	d1d4      	bne.n	800cd3a <read_submessage_format+0x56>
 800cd90:	e7d5      	b.n	800cd3e <read_submessage_format+0x5a>
 800cd92:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800cd96:	2b00      	cmp	r3, #0
 800cd98:	d0f8      	beq.n	800cd8c <read_submessage_format+0xa8>
 800cd9a:	a906      	add	r1, sp, #24
 800cd9c:	a80c      	add	r0, sp, #48	@ 0x30
 800cd9e:	f8dd 8040 	ldr.w	r8, [sp, #64]	@ 0x40
 800cda2:	f002 fec5 	bl	800fb30 <uxr_deserialize_SampleIdentity>
 800cda6:	b9a0      	cbnz	r0, 800cdd2 <read_submessage_format+0xee>
 800cda8:	69e2      	ldr	r2, [r4, #28]
 800cdaa:	2a00      	cmp	r2, #0
 800cdac:	d1c5      	bne.n	800cd3a <read_submessage_format+0x56>
 800cdae:	e7c6      	b.n	800cd3e <read_submessage_format+0x5a>
 800cdb0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800cdb4:	b13b      	cbz	r3, 800cdc6 <read_submessage_format+0xe2>
 800cdb6:	a906      	add	r1, sp, #24
 800cdb8:	a80c      	add	r0, sp, #48	@ 0x30
 800cdba:	f8dd 8040 	ldr.w	r8, [sp, #64]	@ 0x40
 800cdbe:	f002 fb8b 	bl	800f4d8 <uxr_deserialize_BaseObjectRequest>
 800cdc2:	bb60      	cbnz	r0, 800ce1e <read_submessage_format+0x13a>
 800cdc4:	69e2      	ldr	r2, [r4, #28]
 800cdc6:	68a3      	ldr	r3, [r4, #8]
 800cdc8:	442b      	add	r3, r5
 800cdca:	60a3      	str	r3, [r4, #8]
 800cdcc:	2a00      	cmp	r2, #0
 800cdce:	d1b4      	bne.n	800cd3a <read_submessage_format+0x56>
 800cdd0:	e7b5      	b.n	800cd3e <read_submessage_format+0x5a>
 800cdd2:	e9dd 210d 	ldrd	r2, r1, [sp, #52]	@ 0x34
 800cdd6:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800cdd8:	1a52      	subs	r2, r2, r1
 800cdda:	eba8 0803 	sub.w	r8, r8, r3
 800cdde:	a80c      	add	r0, sp, #48	@ 0x30
 800cde0:	f7ff fc5c 	bl	800c69c <ucdr_init_buffer>
 800cde4:	44a8      	add	r8, r5
 800cde6:	e9d4 1206 	ldrd	r1, r2, [r4, #24]
 800cdea:	a80c      	add	r0, sp, #48	@ 0x30
 800cdec:	f7ff fc2a 	bl	800c644 <ucdr_set_on_full_buffer_callback>
 800cdf0:	fa1f f888 	uxth.w	r8, r8
 800cdf4:	ab0c      	add	r3, sp, #48	@ 0x30
 800cdf6:	9300      	str	r3, [sp, #0]
 800cdf8:	f8cd 8004 	str.w	r8, [sp, #4]
 800cdfc:	2108      	movs	r1, #8
 800cdfe:	f88d 1016 	strb.w	r1, [sp, #22]
 800ce02:	f8d7 10a8 	ldr.w	r1, [r7, #168]	@ 0xa8
 800ce06:	9102      	str	r1, [sp, #8]
 800ce08:	ab06      	add	r3, sp, #24
 800ce0a:	4632      	mov	r2, r6
 800ce0c:	9905      	ldr	r1, [sp, #20]
 800ce0e:	f8d7 60a4 	ldr.w	r6, [r7, #164]	@ 0xa4
 800ce12:	4638      	mov	r0, r7
 800ce14:	47b0      	blx	r6
 800ce16:	2301      	movs	r3, #1
 800ce18:	f887 30b4 	strb.w	r3, [r7, #180]	@ 0xb4
 800ce1c:	e7c4      	b.n	800cda8 <read_submessage_format+0xc4>
 800ce1e:	e9dd 210d 	ldrd	r2, r1, [sp, #52]	@ 0x34
 800ce22:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800ce24:	1a52      	subs	r2, r2, r1
 800ce26:	a80c      	add	r0, sp, #48	@ 0x30
 800ce28:	eba8 0803 	sub.w	r8, r8, r3
 800ce2c:	f7ff fc36 	bl	800c69c <ucdr_init_buffer>
 800ce30:	e9d4 1206 	ldrd	r1, r2, [r4, #24]
 800ce34:	a80c      	add	r0, sp, #48	@ 0x30
 800ce36:	f7ff fc05 	bl	800c644 <ucdr_set_on_full_buffer_callback>
 800ce3a:	ab0c      	add	r3, sp, #48	@ 0x30
 800ce3c:	9300      	str	r3, [sp, #0]
 800ce3e:	f89d 1018 	ldrb.w	r1, [sp, #24]
 800ce42:	f89d 3019 	ldrb.w	r3, [sp, #25]
 800ce46:	44a8      	add	r8, r5
 800ce48:	fa1f f888 	uxth.w	r8, r8
 800ce4c:	f8cd 8004 	str.w	r8, [sp, #4]
 800ce50:	eb03 2301 	add.w	r3, r3, r1, lsl #8
 800ce54:	2107      	movs	r1, #7
 800ce56:	f88d 1016 	strb.w	r1, [sp, #22]
 800ce5a:	f8d7 10b0 	ldr.w	r1, [r7, #176]	@ 0xb0
 800ce5e:	9102      	str	r1, [sp, #8]
 800ce60:	4632      	mov	r2, r6
 800ce62:	b29b      	uxth	r3, r3
 800ce64:	f8d7 60ac 	ldr.w	r6, [r7, #172]	@ 0xac
 800ce68:	9905      	ldr	r1, [sp, #20]
 800ce6a:	4638      	mov	r0, r7
 800ce6c:	47b0      	blx	r6
 800ce6e:	2301      	movs	r3, #1
 800ce70:	f887 30b4 	strb.w	r3, [r7, #180]	@ 0xb4
 800ce74:	e7a6      	b.n	800cdc4 <read_submessage_format+0xe0>
 800ce76:	bf00      	nop

0800ce78 <on_get_fragmentation_info>:
 800ce78:	b500      	push	{lr}
 800ce7a:	b08b      	sub	sp, #44	@ 0x2c
 800ce7c:	4601      	mov	r1, r0
 800ce7e:	2204      	movs	r2, #4
 800ce80:	a802      	add	r0, sp, #8
 800ce82:	f7ff fc0b 	bl	800c69c <ucdr_init_buffer>
 800ce86:	f10d 0305 	add.w	r3, sp, #5
 800ce8a:	f10d 0206 	add.w	r2, sp, #6
 800ce8e:	a901      	add	r1, sp, #4
 800ce90:	a802      	add	r0, sp, #8
 800ce92:	f001 fe69 	bl	800eb68 <uxr_read_submessage_header>
 800ce96:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800ce9a:	2b0d      	cmp	r3, #13
 800ce9c:	d003      	beq.n	800cea6 <on_get_fragmentation_info+0x2e>
 800ce9e:	2000      	movs	r0, #0
 800cea0:	b00b      	add	sp, #44	@ 0x2c
 800cea2:	f85d fb04 	ldr.w	pc, [sp], #4
 800cea6:	f89d 3005 	ldrb.w	r3, [sp, #5]
 800ceaa:	f013 0f02 	tst.w	r3, #2
 800ceae:	bf14      	ite	ne
 800ceb0:	2002      	movne	r0, #2
 800ceb2:	2001      	moveq	r0, #1
 800ceb4:	b00b      	add	sp, #44	@ 0x2c
 800ceb6:	f85d fb04 	ldr.w	pc, [sp], #4
 800ceba:	bf00      	nop

0800cebc <read_submessage_get_info>:
 800cebc:	b570      	push	{r4, r5, r6, lr}
 800cebe:	2500      	movs	r5, #0
 800cec0:	f5ad 7d34 	sub.w	sp, sp, #720	@ 0x2d0
 800cec4:	4604      	mov	r4, r0
 800cec6:	f44f 7224 	mov.w	r2, #656	@ 0x290
 800ceca:	460e      	mov	r6, r1
 800cecc:	a810      	add	r0, sp, #64	@ 0x40
 800cece:	4629      	mov	r1, r5
 800ced0:	e9cd 5503 	strd	r5, r5, [sp, #12]
 800ced4:	f008 fca4 	bl	8015820 <memset>
 800ced8:	a903      	add	r1, sp, #12
 800ceda:	4630      	mov	r0, r6
 800cedc:	f002 fca4 	bl	800f828 <uxr_deserialize_GET_INFO_Payload>
 800cee0:	f8bd 300c 	ldrh.w	r3, [sp, #12]
 800cee4:	f8ad 3040 	strh.w	r3, [sp, #64]	@ 0x40
 800cee8:	4620      	mov	r0, r4
 800ceea:	f001 f821 	bl	800df30 <uxr_session_header_offset>
 800ceee:	462b      	mov	r3, r5
 800cef0:	9000      	str	r0, [sp, #0]
 800cef2:	220c      	movs	r2, #12
 800cef4:	a905      	add	r1, sp, #20
 800cef6:	a808      	add	r0, sp, #32
 800cef8:	f7ff fbbe 	bl	800c678 <ucdr_init_buffer_origin_offset>
 800cefc:	a910      	add	r1, sp, #64	@ 0x40
 800cefe:	a808      	add	r0, sp, #32
 800cf00:	f002 fd04 	bl	800f90c <uxr_serialize_INFO_Payload>
 800cf04:	9b08      	ldr	r3, [sp, #32]
 800cf06:	462a      	mov	r2, r5
 800cf08:	4629      	mov	r1, r5
 800cf0a:	4620      	mov	r0, r4
 800cf0c:	f000 ffba 	bl	800de84 <uxr_stamp_session_header>
 800cf10:	a808      	add	r0, sp, #32
 800cf12:	f7ff fbef 	bl	800c6f4 <ucdr_buffer_length>
 800cf16:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 800cf18:	4602      	mov	r2, r0
 800cf1a:	a905      	add	r1, sp, #20
 800cf1c:	e9d3 0400 	ldrd	r0, r4, [r3]
 800cf20:	47a0      	blx	r4
 800cf22:	f50d 7d34 	add.w	sp, sp, #720	@ 0x2d0
 800cf26:	bd70      	pop	{r4, r5, r6, pc}

0800cf28 <write_submessage_acknack.isra.0>:
 800cf28:	b570      	push	{r4, r5, r6, lr}
 800cf2a:	b092      	sub	sp, #72	@ 0x48
 800cf2c:	4605      	mov	r5, r0
 800cf2e:	460e      	mov	r6, r1
 800cf30:	4614      	mov	r4, r2
 800cf32:	f000 fffd 	bl	800df30 <uxr_session_header_offset>
 800cf36:	a905      	add	r1, sp, #20
 800cf38:	9000      	str	r0, [sp, #0]
 800cf3a:	2300      	movs	r3, #0
 800cf3c:	a80a      	add	r0, sp, #40	@ 0x28
 800cf3e:	2211      	movs	r2, #17
 800cf40:	f7ff fb9a 	bl	800c678 <ucdr_init_buffer_origin_offset>
 800cf44:	2218      	movs	r2, #24
 800cf46:	fb02 5404 	mla	r4, r2, r4, r5
 800cf4a:	2300      	movs	r3, #0
 800cf4c:	2205      	movs	r2, #5
 800cf4e:	3450      	adds	r4, #80	@ 0x50
 800cf50:	210a      	movs	r1, #10
 800cf52:	a80a      	add	r0, sp, #40	@ 0x28
 800cf54:	f001 fdee 	bl	800eb34 <uxr_buffer_submessage_header>
 800cf58:	a903      	add	r1, sp, #12
 800cf5a:	4620      	mov	r0, r4
 800cf5c:	f007 f870 	bl	8014040 <uxr_compute_acknack>
 800cf60:	ba40      	rev16	r0, r0
 800cf62:	f8ad 000e 	strh.w	r0, [sp, #14]
 800cf66:	a903      	add	r1, sp, #12
 800cf68:	a80a      	add	r0, sp, #40	@ 0x28
 800cf6a:	f88d 6010 	strb.w	r6, [sp, #16]
 800cf6e:	f002 fd3d 	bl	800f9ec <uxr_serialize_ACKNACK_Payload>
 800cf72:	2200      	movs	r2, #0
 800cf74:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800cf76:	4611      	mov	r1, r2
 800cf78:	4628      	mov	r0, r5
 800cf7a:	f000 ff83 	bl	800de84 <uxr_stamp_session_header>
 800cf7e:	a80a      	add	r0, sp, #40	@ 0x28
 800cf80:	f7ff fbb8 	bl	800c6f4 <ucdr_buffer_length>
 800cf84:	6f2b      	ldr	r3, [r5, #112]	@ 0x70
 800cf86:	4602      	mov	r2, r0
 800cf88:	a905      	add	r1, sp, #20
 800cf8a:	e9d3 0400 	ldrd	r0, r4, [r3]
 800cf8e:	47a0      	blx	r4
 800cf90:	b012      	add	sp, #72	@ 0x48
 800cf92:	bd70      	pop	{r4, r5, r6, pc}
 800cf94:	0000      	movs	r0, r0
	...

0800cf98 <uxr_init_session>:
 800cf98:	b510      	push	{r4, lr}
 800cf9a:	ed9f 7b0d 	vldr	d7, [pc, #52]	@ 800cfd0 <uxr_init_session+0x38>
 800cf9e:	2300      	movs	r3, #0
 800cfa0:	e9c0 131c 	strd	r1, r3, [r0, #112]	@ 0x70
 800cfa4:	4604      	mov	r4, r0
 800cfa6:	e9c0 331e 	strd	r3, r3, [r0, #120]	@ 0x78
 800cfaa:	e9c0 3320 	strd	r3, r3, [r0, #128]	@ 0x80
 800cfae:	e9c0 3322 	strd	r3, r3, [r0, #136]	@ 0x88
 800cfb2:	e9c0 3324 	strd	r3, r3, [r0, #144]	@ 0x90
 800cfb6:	ed80 7b26 	vstr	d7, [r0, #152]	@ 0x98
 800cfba:	f880 30a0 	strb.w	r3, [r0, #160]	@ 0xa0
 800cfbe:	2181      	movs	r1, #129	@ 0x81
 800cfc0:	f000 fecc 	bl	800dd5c <uxr_init_session_info>
 800cfc4:	f104 0008 	add.w	r0, r4, #8
 800cfc8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800cfcc:	f001 bcce 	b.w	800e96c <uxr_init_stream_storage>
	...

0800cfd8 <uxr_set_status_callback>:
 800cfd8:	e9c0 1220 	strd	r1, r2, [r0, #128]	@ 0x80
 800cfdc:	4770      	bx	lr
 800cfde:	bf00      	nop

0800cfe0 <uxr_set_topic_callback>:
 800cfe0:	e9c0 1222 	strd	r1, r2, [r0, #136]	@ 0x88
 800cfe4:	4770      	bx	lr
 800cfe6:	bf00      	nop

0800cfe8 <uxr_set_request_callback>:
 800cfe8:	e9c0 1229 	strd	r1, r2, [r0, #164]	@ 0xa4
 800cfec:	4770      	bx	lr
 800cfee:	bf00      	nop

0800cff0 <uxr_set_reply_callback>:
 800cff0:	e9c0 122b 	strd	r1, r2, [r0, #172]	@ 0xac
 800cff4:	4770      	bx	lr
 800cff6:	bf00      	nop

0800cff8 <uxr_create_output_best_effort_stream>:
 800cff8:	b510      	push	{r4, lr}
 800cffa:	b084      	sub	sp, #16
 800cffc:	e9cd 2100 	strd	r2, r1, [sp]
 800d000:	4604      	mov	r4, r0
 800d002:	f000 ff95 	bl	800df30 <uxr_session_header_offset>
 800d006:	e9dd 2100 	ldrd	r2, r1, [sp]
 800d00a:	4603      	mov	r3, r0
 800d00c:	f104 0008 	add.w	r0, r4, #8
 800d010:	b004      	add	sp, #16
 800d012:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d016:	f001 bcf3 	b.w	800ea00 <uxr_add_output_best_effort_buffer>
 800d01a:	bf00      	nop

0800d01c <uxr_create_output_reliable_stream>:
 800d01c:	b510      	push	{r4, lr}
 800d01e:	b088      	sub	sp, #32
 800d020:	e9cd 2104 	strd	r2, r1, [sp, #16]
 800d024:	4604      	mov	r4, r0
 800d026:	9303      	str	r3, [sp, #12]
 800d028:	f000 ff82 	bl	800df30 <uxr_session_header_offset>
 800d02c:	e9dd 3203 	ldrd	r3, r2, [sp, #12]
 800d030:	9000      	str	r0, [sp, #0]
 800d032:	9905      	ldr	r1, [sp, #20]
 800d034:	f104 0008 	add.w	r0, r4, #8
 800d038:	f001 fcf6 	bl	800ea28 <uxr_add_output_reliable_buffer>
 800d03c:	2200      	movs	r2, #0
 800d03e:	b2c3      	uxtb	r3, r0
 800d040:	f363 0207 	bfi	r2, r3, #0, #8
 800d044:	f3c0 2307 	ubfx	r3, r0, #8, #8
 800d048:	f363 220f 	bfi	r2, r3, #8, #8
 800d04c:	f3c0 4307 	ubfx	r3, r0, #16, #8
 800d050:	f363 4217 	bfi	r2, r3, #16, #8
 800d054:	0e03      	lsrs	r3, r0, #24
 800d056:	f363 621f 	bfi	r2, r3, #24, #8
 800d05a:	4610      	mov	r0, r2
 800d05c:	b008      	add	sp, #32
 800d05e:	bd10      	pop	{r4, pc}

0800d060 <uxr_create_input_best_effort_stream>:
 800d060:	b082      	sub	sp, #8
 800d062:	3008      	adds	r0, #8
 800d064:	b002      	add	sp, #8
 800d066:	f001 bcf9 	b.w	800ea5c <uxr_add_input_best_effort_buffer>
 800d06a:	bf00      	nop

0800d06c <uxr_create_input_reliable_stream>:
 800d06c:	b510      	push	{r4, lr}
 800d06e:	b084      	sub	sp, #16
 800d070:	4c0b      	ldr	r4, [pc, #44]	@ (800d0a0 <uxr_create_input_reliable_stream+0x34>)
 800d072:	9400      	str	r4, [sp, #0]
 800d074:	3008      	adds	r0, #8
 800d076:	f001 fd07 	bl	800ea88 <uxr_add_input_reliable_buffer>
 800d07a:	2200      	movs	r2, #0
 800d07c:	b2c3      	uxtb	r3, r0
 800d07e:	f363 0207 	bfi	r2, r3, #0, #8
 800d082:	f3c0 2307 	ubfx	r3, r0, #8, #8
 800d086:	f363 220f 	bfi	r2, r3, #8, #8
 800d08a:	f3c0 4307 	ubfx	r3, r0, #16, #8
 800d08e:	f363 4217 	bfi	r2, r3, #16, #8
 800d092:	0e03      	lsrs	r3, r0, #24
 800d094:	f363 621f 	bfi	r2, r3, #24, #8
 800d098:	4610      	mov	r0, r2
 800d09a:	b004      	add	sp, #16
 800d09c:	bd10      	pop	{r4, pc}
 800d09e:	bf00      	nop
 800d0a0:	0800ce79 	.word	0x0800ce79

0800d0a4 <uxr_epoch_nanos>:
 800d0a4:	b510      	push	{r4, lr}
 800d0a6:	4604      	mov	r4, r0
 800d0a8:	f001 fda4 	bl	800ebf4 <uxr_nanos>
 800d0ac:	e9d4 3226 	ldrd	r3, r2, [r4, #152]	@ 0x98
 800d0b0:	1ac0      	subs	r0, r0, r3
 800d0b2:	eb61 0102 	sbc.w	r1, r1, r2
 800d0b6:	bd10      	pop	{r4, pc}

0800d0b8 <uxr_flash_output_streams>:
 800d0b8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d0bc:	7e03      	ldrb	r3, [r0, #24]
 800d0be:	b084      	sub	sp, #16
 800d0c0:	4604      	mov	r4, r0
 800d0c2:	2b00      	cmp	r3, #0
 800d0c4:	d035      	beq.n	800d132 <uxr_flash_output_streams+0x7a>
 800d0c6:	f04f 0900 	mov.w	r9, #0
 800d0ca:	4648      	mov	r0, r9
 800d0cc:	f10d 0802 	add.w	r8, sp, #2
 800d0d0:	af03      	add	r7, sp, #12
 800d0d2:	ae02      	add	r6, sp, #8
 800d0d4:	e006      	b.n	800d0e4 <uxr_flash_output_streams+0x2c>
 800d0d6:	7e23      	ldrb	r3, [r4, #24]
 800d0d8:	f109 0901 	add.w	r9, r9, #1
 800d0dc:	fa5f f089 	uxtb.w	r0, r9
 800d0e0:	4283      	cmp	r3, r0
 800d0e2:	d926      	bls.n	800d132 <uxr_flash_output_streams+0x7a>
 800d0e4:	2201      	movs	r2, #1
 800d0e6:	4611      	mov	r1, r2
 800d0e8:	eb04 1500 	add.w	r5, r4, r0, lsl #4
 800d0ec:	f001 fbea 	bl	800e8c4 <uxr_stream_id>
 800d0f0:	3508      	adds	r5, #8
 800d0f2:	4684      	mov	ip, r0
 800d0f4:	4643      	mov	r3, r8
 800d0f6:	463a      	mov	r2, r7
 800d0f8:	4631      	mov	r1, r6
 800d0fa:	4628      	mov	r0, r5
 800d0fc:	f8cd c004 	str.w	ip, [sp, #4]
 800d100:	f007 f824 	bl	801414c <uxr_prepare_best_effort_buffer_to_send>
 800d104:	2800      	cmp	r0, #0
 800d106:	d0e6      	beq.n	800d0d6 <uxr_flash_output_streams+0x1e>
 800d108:	9b02      	ldr	r3, [sp, #8]
 800d10a:	f8bd 2002 	ldrh.w	r2, [sp, #2]
 800d10e:	f89d 1004 	ldrb.w	r1, [sp, #4]
 800d112:	4620      	mov	r0, r4
 800d114:	f000 feb6 	bl	800de84 <uxr_stamp_session_header>
 800d118:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 800d11a:	9a03      	ldr	r2, [sp, #12]
 800d11c:	685d      	ldr	r5, [r3, #4]
 800d11e:	6818      	ldr	r0, [r3, #0]
 800d120:	9902      	ldr	r1, [sp, #8]
 800d122:	47a8      	blx	r5
 800d124:	f109 0901 	add.w	r9, r9, #1
 800d128:	7e23      	ldrb	r3, [r4, #24]
 800d12a:	fa5f f089 	uxtb.w	r0, r9
 800d12e:	4283      	cmp	r3, r0
 800d130:	d8d8      	bhi.n	800d0e4 <uxr_flash_output_streams+0x2c>
 800d132:	f894 3048 	ldrb.w	r3, [r4, #72]	@ 0x48
 800d136:	b38b      	cbz	r3, 800d19c <uxr_flash_output_streams+0xe4>
 800d138:	f04f 0900 	mov.w	r9, #0
 800d13c:	f10d 0802 	add.w	r8, sp, #2
 800d140:	af03      	add	r7, sp, #12
 800d142:	ae02      	add	r6, sp, #8
 800d144:	4648      	mov	r0, r9
 800d146:	2201      	movs	r2, #1
 800d148:	2102      	movs	r1, #2
 800d14a:	eb00 0580 	add.w	r5, r0, r0, lsl #2
 800d14e:	f001 fbb9 	bl	800e8c4 <uxr_stream_id>
 800d152:	eb04 05c5 	add.w	r5, r4, r5, lsl #3
 800d156:	3520      	adds	r5, #32
 800d158:	9001      	str	r0, [sp, #4]
 800d15a:	e00d      	b.n	800d178 <uxr_flash_output_streams+0xc0>
 800d15c:	f8bd 2002 	ldrh.w	r2, [sp, #2]
 800d160:	f89d 1004 	ldrb.w	r1, [sp, #4]
 800d164:	9b02      	ldr	r3, [sp, #8]
 800d166:	f000 fe8d 	bl	800de84 <uxr_stamp_session_header>
 800d16a:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 800d16c:	9a03      	ldr	r2, [sp, #12]
 800d16e:	f8d3 a004 	ldr.w	sl, [r3, #4]
 800d172:	9902      	ldr	r1, [sp, #8]
 800d174:	6818      	ldr	r0, [r3, #0]
 800d176:	47d0      	blx	sl
 800d178:	4643      	mov	r3, r8
 800d17a:	463a      	mov	r2, r7
 800d17c:	4631      	mov	r1, r6
 800d17e:	4628      	mov	r0, r5
 800d180:	f007 fa02 	bl	8014588 <uxr_prepare_next_reliable_buffer_to_send>
 800d184:	4603      	mov	r3, r0
 800d186:	4620      	mov	r0, r4
 800d188:	2b00      	cmp	r3, #0
 800d18a:	d1e7      	bne.n	800d15c <uxr_flash_output_streams+0xa4>
 800d18c:	f894 3048 	ldrb.w	r3, [r4, #72]	@ 0x48
 800d190:	f109 0901 	add.w	r9, r9, #1
 800d194:	fa5f f089 	uxtb.w	r0, r9
 800d198:	4283      	cmp	r3, r0
 800d19a:	d8d4      	bhi.n	800d146 <uxr_flash_output_streams+0x8e>
 800d19c:	b004      	add	sp, #16
 800d19e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d1a2:	bf00      	nop

0800d1a4 <read_submessage_info>:
 800d1a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d1a8:	460d      	mov	r5, r1
 800d1aa:	f5ad 7d24 	sub.w	sp, sp, #656	@ 0x290
 800d1ae:	4669      	mov	r1, sp
 800d1b0:	4607      	mov	r7, r0
 800d1b2:	4628      	mov	r0, r5
 800d1b4:	f002 fa46 	bl	800f644 <uxr_deserialize_BaseObjectReply>
 800d1b8:	a902      	add	r1, sp, #8
 800d1ba:	4604      	mov	r4, r0
 800d1bc:	4628      	mov	r0, r5
 800d1be:	f89d 8005 	ldrb.w	r8, [sp, #5]
 800d1c2:	f7fe faa7 	bl	800b714 <ucdr_deserialize_bool>
 800d1c6:	f89d 3008 	ldrb.w	r3, [sp, #8]
 800d1ca:	4004      	ands	r4, r0
 800d1cc:	b2e4      	uxtb	r4, r4
 800d1ce:	b95b      	cbnz	r3, 800d1e8 <read_submessage_info+0x44>
 800d1d0:	a987      	add	r1, sp, #540	@ 0x21c
 800d1d2:	4628      	mov	r0, r5
 800d1d4:	f7fe fa9e 	bl	800b714 <ucdr_deserialize_bool>
 800d1d8:	f89d 321c 	ldrb.w	r3, [sp, #540]	@ 0x21c
 800d1dc:	4606      	mov	r6, r0
 800d1de:	b94b      	cbnz	r3, 800d1f4 <read_submessage_info+0x50>
 800d1e0:	f50d 7d24 	add.w	sp, sp, #656	@ 0x290
 800d1e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d1e8:	a903      	add	r1, sp, #12
 800d1ea:	4628      	mov	r0, r5
 800d1ec:	f002 f8d2 	bl	800f394 <uxr_deserialize_ObjectVariant>
 800d1f0:	4004      	ands	r4, r0
 800d1f2:	e7ed      	b.n	800d1d0 <read_submessage_info+0x2c>
 800d1f4:	a988      	add	r1, sp, #544	@ 0x220
 800d1f6:	4628      	mov	r0, r5
 800d1f8:	f7fe faba 	bl	800b770 <ucdr_deserialize_uint8_t>
 800d1fc:	4234      	tst	r4, r6
 800d1fe:	d0ef      	beq.n	800d1e0 <read_submessage_info+0x3c>
 800d200:	2800      	cmp	r0, #0
 800d202:	d0ed      	beq.n	800d1e0 <read_submessage_info+0x3c>
 800d204:	f89d 3220 	ldrb.w	r3, [sp, #544]	@ 0x220
 800d208:	2b0d      	cmp	r3, #13
 800d20a:	d1e9      	bne.n	800d1e0 <read_submessage_info+0x3c>
 800d20c:	a98a      	add	r1, sp, #552	@ 0x228
 800d20e:	4628      	mov	r0, r5
 800d210:	f7ff f854 	bl	800c2bc <ucdr_deserialize_int16_t>
 800d214:	b140      	cbz	r0, 800d228 <read_submessage_info+0x84>
 800d216:	f9bd 3228 	ldrsh.w	r3, [sp, #552]	@ 0x228
 800d21a:	2b00      	cmp	r3, #0
 800d21c:	dd07      	ble.n	800d22e <read_submessage_info+0x8a>
 800d21e:	f1b8 0f00 	cmp.w	r8, #0
 800d222:	bf14      	ite	ne
 800d224:	2001      	movne	r0, #1
 800d226:	2002      	moveq	r0, #2
 800d228:	f887 00b5 	strb.w	r0, [r7, #181]	@ 0xb5
 800d22c:	e7d8      	b.n	800d1e0 <read_submessage_info+0x3c>
 800d22e:	2000      	movs	r0, #0
 800d230:	e7fa      	b.n	800d228 <read_submessage_info+0x84>
 800d232:	bf00      	nop

0800d234 <read_submessage_list>:
 800d234:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d238:	b097      	sub	sp, #92	@ 0x5c
 800d23a:	4ec1      	ldr	r6, [pc, #772]	@ (800d540 <read_submessage_list+0x30c>)
 800d23c:	9209      	str	r2, [sp, #36]	@ 0x24
 800d23e:	4604      	mov	r4, r0
 800d240:	460d      	mov	r5, r1
 800d242:	f04f 0801 	mov.w	r8, #1
 800d246:	f10d 032f 	add.w	r3, sp, #47	@ 0x2f
 800d24a:	aa0c      	add	r2, sp, #48	@ 0x30
 800d24c:	f10d 012e 	add.w	r1, sp, #46	@ 0x2e
 800d250:	4628      	mov	r0, r5
 800d252:	f001 fc89 	bl	800eb68 <uxr_read_submessage_header>
 800d256:	2800      	cmp	r0, #0
 800d258:	f000 813e 	beq.w	800d4d8 <read_submessage_list+0x2a4>
 800d25c:	f89d 302e 	ldrb.w	r3, [sp, #46]	@ 0x2e
 800d260:	f89d 2026 	ldrb.w	r2, [sp, #38]	@ 0x26
 800d264:	3b02      	subs	r3, #2
 800d266:	2b0d      	cmp	r3, #13
 800d268:	d8ed      	bhi.n	800d246 <read_submessage_list+0x12>
 800d26a:	a101      	add	r1, pc, #4	@ (adr r1, 800d270 <read_submessage_list+0x3c>)
 800d26c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800d270:	0800d4cf 	.word	0x0800d4cf
 800d274:	0800d247 	.word	0x0800d247
 800d278:	0800d4bf 	.word	0x0800d4bf
 800d27c:	0800d45d 	.word	0x0800d45d
 800d280:	0800d453 	.word	0x0800d453
 800d284:	0800d247 	.word	0x0800d247
 800d288:	0800d247 	.word	0x0800d247
 800d28c:	0800d3b3 	.word	0x0800d3b3
 800d290:	0800d343 	.word	0x0800d343
 800d294:	0800d303 	.word	0x0800d303
 800d298:	0800d247 	.word	0x0800d247
 800d29c:	0800d247 	.word	0x0800d247
 800d2a0:	0800d247 	.word	0x0800d247
 800d2a4:	0800d2a9 	.word	0x0800d2a9
 800d2a8:	a910      	add	r1, sp, #64	@ 0x40
 800d2aa:	4628      	mov	r0, r5
 800d2ac:	f002 fbee 	bl	800fa8c <uxr_deserialize_TIMESTAMP_REPLY_Payload>
 800d2b0:	f8d4 9090 	ldr.w	r9, [r4, #144]	@ 0x90
 800d2b4:	f1b9 0f00 	cmp.w	r9, #0
 800d2b8:	f000 8116 	beq.w	800d4e8 <read_submessage_list+0x2b4>
 800d2bc:	f001 fc9a 	bl	800ebf4 <uxr_nanos>
 800d2c0:	9f15      	ldr	r7, [sp, #84]	@ 0x54
 800d2c2:	4602      	mov	r2, r0
 800d2c4:	460b      	mov	r3, r1
 800d2c6:	9814      	ldr	r0, [sp, #80]	@ 0x50
 800d2c8:	2100      	movs	r1, #0
 800d2ca:	468c      	mov	ip, r1
 800d2cc:	fbc0 7c06 	smlal	r7, ip, r0, r6
 800d2d0:	e9cd 7c04 	strd	r7, ip, [sp, #16]
 800d2d4:	9810      	ldr	r0, [sp, #64]	@ 0x40
 800d2d6:	9f11      	ldr	r7, [sp, #68]	@ 0x44
 800d2d8:	468c      	mov	ip, r1
 800d2da:	fbc0 7c06 	smlal	r7, ip, r0, r6
 800d2de:	46e2      	mov	sl, ip
 800d2e0:	46bc      	mov	ip, r7
 800d2e2:	e9dd 0712 	ldrd	r0, r7, [sp, #72]	@ 0x48
 800d2e6:	fbc0 7106 	smlal	r7, r1, r0, r6
 800d2ea:	e9cd ca02 	strd	ip, sl, [sp, #8]
 800d2ee:	e9cd 7100 	strd	r7, r1, [sp]
 800d2f2:	f8d4 1094 	ldr.w	r1, [r4, #148]	@ 0x94
 800d2f6:	9106      	str	r1, [sp, #24]
 800d2f8:	4620      	mov	r0, r4
 800d2fa:	47c8      	blx	r9
 800d2fc:	f884 80a0 	strb.w	r8, [r4, #160]	@ 0xa0
 800d300:	e7a1      	b.n	800d246 <read_submessage_list+0x12>
 800d302:	a910      	add	r1, sp, #64	@ 0x40
 800d304:	4628      	mov	r0, r5
 800d306:	f002 fbaf 	bl	800fa68 <uxr_deserialize_HEARTBEAT_Payload>
 800d30a:	2100      	movs	r1, #0
 800d30c:	f89d 0044 	ldrb.w	r0, [sp, #68]	@ 0x44
 800d310:	f001 fb02 	bl	800e918 <uxr_stream_id_from_raw>
 800d314:	f3c0 2707 	ubfx	r7, r0, #8, #8
 800d318:	900f      	str	r0, [sp, #60]	@ 0x3c
 800d31a:	4639      	mov	r1, r7
 800d31c:	f104 0008 	add.w	r0, r4, #8
 800d320:	f001 fbe8 	bl	800eaf4 <uxr_get_input_reliable_stream>
 800d324:	2800      	cmp	r0, #0
 800d326:	d08e      	beq.n	800d246 <read_submessage_list+0x12>
 800d328:	f8bd 1040 	ldrh.w	r1, [sp, #64]	@ 0x40
 800d32c:	f8bd 2042 	ldrh.w	r2, [sp, #66]	@ 0x42
 800d330:	f006 fe7a 	bl	8014028 <uxr_process_heartbeat>
 800d334:	f89d 103c 	ldrb.w	r1, [sp, #60]	@ 0x3c
 800d338:	463a      	mov	r2, r7
 800d33a:	4620      	mov	r0, r4
 800d33c:	f7ff fdf4 	bl	800cf28 <write_submessage_acknack.isra.0>
 800d340:	e781      	b.n	800d246 <read_submessage_list+0x12>
 800d342:	a910      	add	r1, sp, #64	@ 0x40
 800d344:	4628      	mov	r0, r5
 800d346:	f002 fb67 	bl	800fa18 <uxr_deserialize_ACKNACK_Payload>
 800d34a:	2100      	movs	r1, #0
 800d34c:	f89d 0044 	ldrb.w	r0, [sp, #68]	@ 0x44
 800d350:	f001 fae2 	bl	800e918 <uxr_stream_id_from_raw>
 800d354:	900d      	str	r0, [sp, #52]	@ 0x34
 800d356:	f3c0 2107 	ubfx	r1, r0, #8, #8
 800d35a:	f104 0008 	add.w	r0, r4, #8
 800d35e:	f001 fbb5 	bl	800eacc <uxr_get_output_reliable_stream>
 800d362:	4607      	mov	r7, r0
 800d364:	2800      	cmp	r0, #0
 800d366:	f43f af6e 	beq.w	800d246 <read_submessage_list+0x12>
 800d36a:	f89d 3042 	ldrb.w	r3, [sp, #66]	@ 0x42
 800d36e:	f89d 1043 	ldrb.w	r1, [sp, #67]	@ 0x43
 800d372:	f8bd 2040 	ldrh.w	r2, [sp, #64]	@ 0x40
 800d376:	eb01 2103 	add.w	r1, r1, r3, lsl #8
 800d37a:	b289      	uxth	r1, r1
 800d37c:	f007 f9ae 	bl	80146dc <uxr_process_acknack>
 800d380:	4638      	mov	r0, r7
 800d382:	f007 f96b 	bl	801465c <uxr_begin_output_nack_buffer_it>
 800d386:	f10d 0a38 	add.w	sl, sp, #56	@ 0x38
 800d38a:	f8ad 0032 	strh.w	r0, [sp, #50]	@ 0x32
 800d38e:	e006      	b.n	800d39e <read_submessage_list+0x16a>
 800d390:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 800d392:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800d394:	f8d3 9004 	ldr.w	r9, [r3, #4]
 800d398:	990e      	ldr	r1, [sp, #56]	@ 0x38
 800d39a:	6818      	ldr	r0, [r3, #0]
 800d39c:	47c8      	blx	r9
 800d39e:	f10d 0332 	add.w	r3, sp, #50	@ 0x32
 800d3a2:	aa0f      	add	r2, sp, #60	@ 0x3c
 800d3a4:	4651      	mov	r1, sl
 800d3a6:	4638      	mov	r0, r7
 800d3a8:	f007 f95a 	bl	8014660 <uxr_next_reliable_nack_buffer_to_send>
 800d3ac:	2800      	cmp	r0, #0
 800d3ae:	d1ef      	bne.n	800d390 <read_submessage_list+0x15c>
 800d3b0:	e749      	b.n	800d246 <read_submessage_list+0x12>
 800d3b2:	f89d 3025 	ldrb.w	r3, [sp, #37]	@ 0x25
 800d3b6:	f88d 3035 	strb.w	r3, [sp, #53]	@ 0x35
 800d3ba:	f10d 0a38 	add.w	sl, sp, #56	@ 0x38
 800d3be:	f89d 3027 	ldrb.w	r3, [sp, #39]	@ 0x27
 800d3c2:	f88d 3037 	strb.w	r3, [sp, #55]	@ 0x37
 800d3c6:	4651      	mov	r1, sl
 800d3c8:	f89d 3024 	ldrb.w	r3, [sp, #36]	@ 0x24
 800d3cc:	f8bd 7030 	ldrh.w	r7, [sp, #48]	@ 0x30
 800d3d0:	f89d 902f 	ldrb.w	r9, [sp, #47]	@ 0x2f
 800d3d4:	f88d 2036 	strb.w	r2, [sp, #54]	@ 0x36
 800d3d8:	4628      	mov	r0, r5
 800d3da:	f88d 3034 	strb.w	r3, [sp, #52]	@ 0x34
 800d3de:	f002 f87b 	bl	800f4d8 <uxr_deserialize_BaseObjectRequest>
 800d3e2:	4650      	mov	r0, sl
 800d3e4:	a90f      	add	r1, sp, #60	@ 0x3c
 800d3e6:	f10d 0232 	add.w	r2, sp, #50	@ 0x32
 800d3ea:	f000 fdc7 	bl	800df7c <uxr_parse_base_object_request>
 800d3ee:	f8d4 b080 	ldr.w	fp, [r4, #128]	@ 0x80
 800d3f2:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800d3f4:	f8bd a032 	ldrh.w	sl, [sp, #50]	@ 0x32
 800d3f8:	9110      	str	r1, [sp, #64]	@ 0x40
 800d3fa:	3f04      	subs	r7, #4
 800d3fc:	f009 090e 	and.w	r9, r9, #14
 800d400:	b2bf      	uxth	r7, r7
 800d402:	f1bb 0f00 	cmp.w	fp, #0
 800d406:	d006      	beq.n	800d416 <read_submessage_list+0x1e2>
 800d408:	f8d4 3084 	ldr.w	r3, [r4, #132]	@ 0x84
 800d40c:	9300      	str	r3, [sp, #0]
 800d40e:	4652      	mov	r2, sl
 800d410:	2300      	movs	r3, #0
 800d412:	4620      	mov	r0, r4
 800d414:	47d8      	blx	fp
 800d416:	6fe2      	ldr	r2, [r4, #124]	@ 0x7c
 800d418:	b16a      	cbz	r2, 800d436 <read_submessage_list+0x202>
 800d41a:	6f60      	ldr	r0, [r4, #116]	@ 0x74
 800d41c:	2100      	movs	r1, #0
 800d41e:	3802      	subs	r0, #2
 800d420:	e002      	b.n	800d428 <read_submessage_list+0x1f4>
 800d422:	3101      	adds	r1, #1
 800d424:	4291      	cmp	r1, r2
 800d426:	d006      	beq.n	800d436 <read_submessage_list+0x202>
 800d428:	f830 3f02 	ldrh.w	r3, [r0, #2]!
 800d42c:	4553      	cmp	r3, sl
 800d42e:	d1f8      	bne.n	800d422 <read_submessage_list+0x1ee>
 800d430:	6fa3      	ldr	r3, [r4, #120]	@ 0x78
 800d432:	2200      	movs	r2, #0
 800d434:	545a      	strb	r2, [r3, r1]
 800d436:	f8bd 1032 	ldrh.w	r1, [sp, #50]	@ 0x32
 800d43a:	9102      	str	r1, [sp, #8]
 800d43c:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800d43e:	9101      	str	r1, [sp, #4]
 800d440:	990d      	ldr	r1, [sp, #52]	@ 0x34
 800d442:	9100      	str	r1, [sp, #0]
 800d444:	464b      	mov	r3, r9
 800d446:	463a      	mov	r2, r7
 800d448:	4629      	mov	r1, r5
 800d44a:	4620      	mov	r0, r4
 800d44c:	f7ff fc4a 	bl	800cce4 <read_submessage_format>
 800d450:	e6f9      	b.n	800d246 <read_submessage_list+0x12>
 800d452:	4629      	mov	r1, r5
 800d454:	4620      	mov	r0, r4
 800d456:	f7ff fea5 	bl	800d1a4 <read_submessage_info>
 800d45a:	e6f4      	b.n	800d246 <read_submessage_list+0x12>
 800d45c:	2a00      	cmp	r2, #0
 800d45e:	d03e      	beq.n	800d4de <read_submessage_list+0x2aa>
 800d460:	a910      	add	r1, sp, #64	@ 0x40
 800d462:	4628      	mov	r0, r5
 800d464:	f002 fa34 	bl	800f8d0 <uxr_deserialize_STATUS_Payload>
 800d468:	a90e      	add	r1, sp, #56	@ 0x38
 800d46a:	aa0d      	add	r2, sp, #52	@ 0x34
 800d46c:	a810      	add	r0, sp, #64	@ 0x40
 800d46e:	f000 fd85 	bl	800df7c <uxr_parse_base_object_request>
 800d472:	f8d4 a080 	ldr.w	sl, [r4, #128]	@ 0x80
 800d476:	990e      	ldr	r1, [sp, #56]	@ 0x38
 800d478:	f89d 9044 	ldrb.w	r9, [sp, #68]	@ 0x44
 800d47c:	f8bd 7034 	ldrh.w	r7, [sp, #52]	@ 0x34
 800d480:	910f      	str	r1, [sp, #60]	@ 0x3c
 800d482:	f1ba 0f00 	cmp.w	sl, #0
 800d486:	d006      	beq.n	800d496 <read_submessage_list+0x262>
 800d488:	f8d4 3084 	ldr.w	r3, [r4, #132]	@ 0x84
 800d48c:	9300      	str	r3, [sp, #0]
 800d48e:	463a      	mov	r2, r7
 800d490:	464b      	mov	r3, r9
 800d492:	4620      	mov	r0, r4
 800d494:	47d0      	blx	sl
 800d496:	6fe2      	ldr	r2, [r4, #124]	@ 0x7c
 800d498:	2a00      	cmp	r2, #0
 800d49a:	f43f aed4 	beq.w	800d246 <read_submessage_list+0x12>
 800d49e:	6f60      	ldr	r0, [r4, #116]	@ 0x74
 800d4a0:	2100      	movs	r1, #0
 800d4a2:	3802      	subs	r0, #2
 800d4a4:	e003      	b.n	800d4ae <read_submessage_list+0x27a>
 800d4a6:	3101      	adds	r1, #1
 800d4a8:	4291      	cmp	r1, r2
 800d4aa:	f43f aecc 	beq.w	800d246 <read_submessage_list+0x12>
 800d4ae:	f830 3f02 	ldrh.w	r3, [r0, #2]!
 800d4b2:	42bb      	cmp	r3, r7
 800d4b4:	d1f7      	bne.n	800d4a6 <read_submessage_list+0x272>
 800d4b6:	6fa3      	ldr	r3, [r4, #120]	@ 0x78
 800d4b8:	f803 9001 	strb.w	r9, [r3, r1]
 800d4bc:	e6c3      	b.n	800d246 <read_submessage_list+0x12>
 800d4be:	2a00      	cmp	r2, #0
 800d4c0:	f47f aec1 	bne.w	800d246 <read_submessage_list+0x12>
 800d4c4:	4629      	mov	r1, r5
 800d4c6:	4620      	mov	r0, r4
 800d4c8:	f000 fc9e 	bl	800de08 <uxr_read_create_session_status>
 800d4cc:	e6bb      	b.n	800d246 <read_submessage_list+0x12>
 800d4ce:	4629      	mov	r1, r5
 800d4d0:	4620      	mov	r0, r4
 800d4d2:	f7ff fcf3 	bl	800cebc <read_submessage_get_info>
 800d4d6:	e6b6      	b.n	800d246 <read_submessage_list+0x12>
 800d4d8:	b017      	add	sp, #92	@ 0x5c
 800d4da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d4de:	4629      	mov	r1, r5
 800d4e0:	4620      	mov	r0, r4
 800d4e2:	f000 fc9d 	bl	800de20 <uxr_read_delete_session_status>
 800d4e6:	e6ae      	b.n	800d246 <read_submessage_list+0x12>
 800d4e8:	f001 fb84 	bl	800ebf4 <uxr_nanos>
 800d4ec:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800d4ee:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 800d4f0:	464f      	mov	r7, r9
 800d4f2:	fbc3 2706 	smlal	r2, r7, r3, r6
 800d4f6:	1812      	adds	r2, r2, r0
 800d4f8:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800d4fa:	9813      	ldr	r0, [sp, #76]	@ 0x4c
 800d4fc:	eb47 0101 	adc.w	r1, r7, r1
 800d500:	464f      	mov	r7, r9
 800d502:	fbc3 0706 	smlal	r0, r7, r3, r6
 800d506:	463b      	mov	r3, r7
 800d508:	4684      	mov	ip, r0
 800d50a:	e9dd 7010 	ldrd	r7, r0, [sp, #64]	@ 0x40
 800d50e:	fbc7 0906 	smlal	r0, r9, r7, r6
 800d512:	eb1c 0c00 	adds.w	ip, ip, r0
 800d516:	464f      	mov	r7, r9
 800d518:	eb43 0307 	adc.w	r3, r3, r7
 800d51c:	ebb2 0c0c 	subs.w	ip, r2, ip
 800d520:	eb61 0303 	sbc.w	r3, r1, r3
 800d524:	0fda      	lsrs	r2, r3, #31
 800d526:	eb12 020c 	adds.w	r2, r2, ip
 800d52a:	f143 0300 	adc.w	r3, r3, #0
 800d52e:	0852      	lsrs	r2, r2, #1
 800d530:	ea42 72c3 	orr.w	r2, r2, r3, lsl #31
 800d534:	105b      	asrs	r3, r3, #1
 800d536:	f8c4 2098 	str.w	r2, [r4, #152]	@ 0x98
 800d53a:	f8c4 309c 	str.w	r3, [r4, #156]	@ 0x9c
 800d53e:	e6dd      	b.n	800d2fc <read_submessage_list+0xc8>
 800d540:	3b9aca00 	.word	0x3b9aca00

0800d544 <listen_message_reliably>:
 800d544:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d548:	1e0b      	subs	r3, r1, #0
 800d54a:	b09d      	sub	sp, #116	@ 0x74
 800d54c:	bfb8      	it	lt
 800d54e:	f06f 4300 	mvnlt.w	r3, #2147483648	@ 0x80000000
 800d552:	4680      	mov	r8, r0
 800d554:	9305      	str	r3, [sp, #20]
 800d556:	f001 fb33 	bl	800ebc0 <uxr_millis>
 800d55a:	f898 2048 	ldrb.w	r2, [r8, #72]	@ 0x48
 800d55e:	4681      	mov	r9, r0
 800d560:	2a00      	cmp	r2, #0
 800d562:	f000 80a1 	beq.w	800d6a8 <listen_message_reliably+0x164>
 800d566:	2600      	movs	r6, #0
 800d568:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 800d56c:	f04f 3bff 	mov.w	fp, #4294967295	@ 0xffffffff
 800d570:	9303      	str	r3, [sp, #12]
 800d572:	4630      	mov	r0, r6
 800d574:	460f      	mov	r7, r1
 800d576:	e00f      	b.n	800d598 <listen_message_reliably+0x54>
 800d578:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 800d57c:	9903      	ldr	r1, [sp, #12]
 800d57e:	455a      	cmp	r2, fp
 800d580:	f106 0601 	add.w	r6, r6, #1
 800d584:	eb73 0101 	sbcs.w	r1, r3, r1
 800d588:	b2f0      	uxtb	r0, r6
 800d58a:	da01      	bge.n	800d590 <listen_message_reliably+0x4c>
 800d58c:	4693      	mov	fp, r2
 800d58e:	9303      	str	r3, [sp, #12]
 800d590:	f898 3048 	ldrb.w	r3, [r8, #72]	@ 0x48
 800d594:	4283      	cmp	r3, r0
 800d596:	d960      	bls.n	800d65a <listen_message_reliably+0x116>
 800d598:	eb00 0480 	add.w	r4, r0, r0, lsl #2
 800d59c:	2102      	movs	r1, #2
 800d59e:	2201      	movs	r2, #1
 800d5a0:	f001 f990 	bl	800e8c4 <uxr_stream_id>
 800d5a4:	00e4      	lsls	r4, r4, #3
 800d5a6:	f104 0520 	add.w	r5, r4, #32
 800d5aa:	4445      	add	r5, r8
 800d5ac:	4601      	mov	r1, r0
 800d5ae:	463b      	mov	r3, r7
 800d5b0:	464a      	mov	r2, r9
 800d5b2:	4628      	mov	r0, r5
 800d5b4:	9109      	str	r1, [sp, #36]	@ 0x24
 800d5b6:	f007 f827 	bl	8014608 <uxr_update_output_stream_heartbeat_timestamp>
 800d5ba:	eb08 0304 	add.w	r3, r8, r4
 800d5be:	2800      	cmp	r0, #0
 800d5c0:	d0da      	beq.n	800d578 <listen_message_reliably+0x34>
 800d5c2:	f89d 3024 	ldrb.w	r3, [sp, #36]	@ 0x24
 800d5c6:	f89d 5025 	ldrb.w	r5, [sp, #37]	@ 0x25
 800d5ca:	9304      	str	r3, [sp, #16]
 800d5cc:	4640      	mov	r0, r8
 800d5ce:	f000 fcaf 	bl	800df30 <uxr_session_header_offset>
 800d5d2:	3501      	adds	r5, #1
 800d5d4:	f10d 0a50 	add.w	sl, sp, #80	@ 0x50
 800d5d8:	eb05 0585 	add.w	r5, r5, r5, lsl #2
 800d5dc:	eb08 05c5 	add.w	r5, r8, r5, lsl #3
 800d5e0:	2300      	movs	r3, #0
 800d5e2:	2211      	movs	r2, #17
 800d5e4:	9000      	str	r0, [sp, #0]
 800d5e6:	a90c      	add	r1, sp, #48	@ 0x30
 800d5e8:	4650      	mov	r0, sl
 800d5ea:	f7ff f845 	bl	800c678 <ucdr_init_buffer_origin_offset>
 800d5ee:	2300      	movs	r3, #0
 800d5f0:	2205      	movs	r2, #5
 800d5f2:	210b      	movs	r1, #11
 800d5f4:	4650      	mov	r0, sl
 800d5f6:	f001 fa9d 	bl	800eb34 <uxr_buffer_submessage_header>
 800d5fa:	8968      	ldrh	r0, [r5, #10]
 800d5fc:	2101      	movs	r1, #1
 800d5fe:	f007 f8a5 	bl	801474c <uxr_seq_num_add>
 800d602:	892b      	ldrh	r3, [r5, #8]
 800d604:	f8ad 302a 	strh.w	r3, [sp, #42]	@ 0x2a
 800d608:	4602      	mov	r2, r0
 800d60a:	9b04      	ldr	r3, [sp, #16]
 800d60c:	f8ad 2028 	strh.w	r2, [sp, #40]	@ 0x28
 800d610:	a90a      	add	r1, sp, #40	@ 0x28
 800d612:	4650      	mov	r0, sl
 800d614:	f88d 302c 	strb.w	r3, [sp, #44]	@ 0x2c
 800d618:	f002 fa12 	bl	800fa40 <uxr_serialize_HEARTBEAT_Payload>
 800d61c:	2200      	movs	r2, #0
 800d61e:	4611      	mov	r1, r2
 800d620:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800d622:	4640      	mov	r0, r8
 800d624:	f000 fc2e 	bl	800de84 <uxr_stamp_session_header>
 800d628:	4650      	mov	r0, sl
 800d62a:	f7ff f863 	bl	800c6f4 <ucdr_buffer_length>
 800d62e:	f8d8 3070 	ldr.w	r3, [r8, #112]	@ 0x70
 800d632:	4602      	mov	r2, r0
 800d634:	a90c      	add	r1, sp, #48	@ 0x30
 800d636:	e9d3 0500 	ldrd	r0, r5, [r3]
 800d63a:	4444      	add	r4, r8
 800d63c:	47a8      	blx	r5
 800d63e:	e9d4 230e 	ldrd	r2, r3, [r4, #56]	@ 0x38
 800d642:	9903      	ldr	r1, [sp, #12]
 800d644:	455a      	cmp	r2, fp
 800d646:	f106 0601 	add.w	r6, r6, #1
 800d64a:	eb73 0101 	sbcs.w	r1, r3, r1
 800d64e:	b2f0      	uxtb	r0, r6
 800d650:	db9c      	blt.n	800d58c <listen_message_reliably+0x48>
 800d652:	f898 3048 	ldrb.w	r3, [r8, #72]	@ 0x48
 800d656:	4283      	cmp	r3, r0
 800d658:	d89e      	bhi.n	800d598 <listen_message_reliably+0x54>
 800d65a:	9a03      	ldr	r2, [sp, #12]
 800d65c:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 800d660:	429a      	cmp	r2, r3
 800d662:	bf08      	it	eq
 800d664:	f1bb 3fff 	cmpeq.w	fp, #4294967295	@ 0xffffffff
 800d668:	d01e      	beq.n	800d6a8 <listen_message_reliably+0x164>
 800d66a:	ebab 0309 	sub.w	r3, fp, r9
 800d66e:	9905      	ldr	r1, [sp, #20]
 800d670:	f8d8 2070 	ldr.w	r2, [r8, #112]	@ 0x70
 800d674:	2b00      	cmp	r3, #0
 800d676:	bf08      	it	eq
 800d678:	2301      	moveq	r3, #1
 800d67a:	4299      	cmp	r1, r3
 800d67c:	bfa8      	it	ge
 800d67e:	4619      	movge	r1, r3
 800d680:	6894      	ldr	r4, [r2, #8]
 800d682:	6810      	ldr	r0, [r2, #0]
 800d684:	4689      	mov	r9, r1
 800d686:	460b      	mov	r3, r1
 800d688:	aa08      	add	r2, sp, #32
 800d68a:	a907      	add	r1, sp, #28
 800d68c:	47a0      	blx	r4
 800d68e:	b968      	cbnz	r0, 800d6ac <listen_message_reliably+0x168>
 800d690:	9b05      	ldr	r3, [sp, #20]
 800d692:	eba3 0309 	sub.w	r3, r3, r9
 800d696:	2b00      	cmp	r3, #0
 800d698:	9305      	str	r3, [sp, #20]
 800d69a:	f73f af5c 	bgt.w	800d556 <listen_message_reliably+0x12>
 800d69e:	4604      	mov	r4, r0
 800d6a0:	4620      	mov	r0, r4
 800d6a2:	b01d      	add	sp, #116	@ 0x74
 800d6a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d6a8:	9b05      	ldr	r3, [sp, #20]
 800d6aa:	e7e0      	b.n	800d66e <listen_message_reliably+0x12a>
 800d6ac:	e9dd 1207 	ldrd	r1, r2, [sp, #28]
 800d6b0:	4604      	mov	r4, r0
 800d6b2:	a80c      	add	r0, sp, #48	@ 0x30
 800d6b4:	f7fe fff2 	bl	800c69c <ucdr_init_buffer>
 800d6b8:	2500      	movs	r5, #0
 800d6ba:	f10d 031a 	add.w	r3, sp, #26
 800d6be:	aa06      	add	r2, sp, #24
 800d6c0:	a90c      	add	r1, sp, #48	@ 0x30
 800d6c2:	4640      	mov	r0, r8
 800d6c4:	f88d 5018 	strb.w	r5, [sp, #24]
 800d6c8:	f000 fbf0 	bl	800deac <uxr_read_session_header>
 800d6cc:	b918      	cbnz	r0, 800d6d6 <listen_message_reliably+0x192>
 800d6ce:	4620      	mov	r0, r4
 800d6d0:	b01d      	add	sp, #116	@ 0x74
 800d6d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d6d6:	4629      	mov	r1, r5
 800d6d8:	f89d 0018 	ldrb.w	r0, [sp, #24]
 800d6dc:	f001 f91c 	bl	800e918 <uxr_stream_id_from_raw>
 800d6e0:	f3c0 4507 	ubfx	r5, r0, #16, #8
 800d6e4:	2d01      	cmp	r5, #1
 800d6e6:	e9cd 0009 	strd	r0, r0, [sp, #36]	@ 0x24
 800d6ea:	f8bd a01a 	ldrh.w	sl, [sp, #26]
 800d6ee:	f3c0 2607 	ubfx	r6, r0, #8, #8
 800d6f2:	d04b      	beq.n	800d78c <listen_message_reliably+0x248>
 800d6f4:	2d02      	cmp	r5, #2
 800d6f6:	d00f      	beq.n	800d718 <listen_message_reliably+0x1d4>
 800d6f8:	2d00      	cmp	r5, #0
 800d6fa:	d1e8      	bne.n	800d6ce <listen_message_reliably+0x18a>
 800d6fc:	4629      	mov	r1, r5
 800d6fe:	4628      	mov	r0, r5
 800d700:	f001 f90a 	bl	800e918 <uxr_stream_id_from_raw>
 800d704:	a90c      	add	r1, sp, #48	@ 0x30
 800d706:	4602      	mov	r2, r0
 800d708:	4640      	mov	r0, r8
 800d70a:	920a      	str	r2, [sp, #40]	@ 0x28
 800d70c:	f7ff fd92 	bl	800d234 <read_submessage_list>
 800d710:	4620      	mov	r0, r4
 800d712:	b01d      	add	sp, #116	@ 0x74
 800d714:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d718:	4631      	mov	r1, r6
 800d71a:	f108 0008 	add.w	r0, r8, #8
 800d71e:	f89d 9024 	ldrb.w	r9, [sp, #36]	@ 0x24
 800d722:	f001 f9e7 	bl	800eaf4 <uxr_get_input_reliable_stream>
 800d726:	4607      	mov	r7, r0
 800d728:	b338      	cbz	r0, 800d77a <listen_message_reliably+0x236>
 800d72a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800d72c:	9203      	str	r2, [sp, #12]
 800d72e:	a80c      	add	r0, sp, #48	@ 0x30
 800d730:	f7fe ffe4 	bl	800c6fc <ucdr_buffer_remaining>
 800d734:	4603      	mov	r3, r0
 800d736:	f10d 0019 	add.w	r0, sp, #25
 800d73a:	9000      	str	r0, [sp, #0]
 800d73c:	9a03      	ldr	r2, [sp, #12]
 800d73e:	4651      	mov	r1, sl
 800d740:	4638      	mov	r0, r7
 800d742:	f006 fb77 	bl	8013e34 <uxr_receive_reliable_message>
 800d746:	b1c0      	cbz	r0, 800d77a <listen_message_reliably+0x236>
 800d748:	f89d 3019 	ldrb.w	r3, [sp, #25]
 800d74c:	b393      	cbz	r3, 800d7b4 <listen_message_reliably+0x270>
 800d74e:	ad14      	add	r5, sp, #80	@ 0x50
 800d750:	f04f 0a02 	mov.w	sl, #2
 800d754:	e00a      	b.n	800d76c <listen_message_reliably+0x228>
 800d756:	f88d 9028 	strb.w	r9, [sp, #40]	@ 0x28
 800d75a:	f88d 6029 	strb.w	r6, [sp, #41]	@ 0x29
 800d75e:	f88d a02a 	strb.w	sl, [sp, #42]	@ 0x2a
 800d762:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800d764:	4629      	mov	r1, r5
 800d766:	4640      	mov	r0, r8
 800d768:	f7ff fd64 	bl	800d234 <read_submessage_list>
 800d76c:	2204      	movs	r2, #4
 800d76e:	4629      	mov	r1, r5
 800d770:	4638      	mov	r0, r7
 800d772:	f006 fbdf 	bl	8013f34 <uxr_next_input_reliable_buffer_available>
 800d776:	2800      	cmp	r0, #0
 800d778:	d1ed      	bne.n	800d756 <listen_message_reliably+0x212>
 800d77a:	4640      	mov	r0, r8
 800d77c:	4632      	mov	r2, r6
 800d77e:	4649      	mov	r1, r9
 800d780:	f7ff fbd2 	bl	800cf28 <write_submessage_acknack.isra.0>
 800d784:	4620      	mov	r0, r4
 800d786:	b01d      	add	sp, #116	@ 0x74
 800d788:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d78c:	4631      	mov	r1, r6
 800d78e:	f108 0008 	add.w	r0, r8, #8
 800d792:	f001 f9a5 	bl	800eae0 <uxr_get_input_best_effort_stream>
 800d796:	2800      	cmp	r0, #0
 800d798:	d099      	beq.n	800d6ce <listen_message_reliably+0x18a>
 800d79a:	4651      	mov	r1, sl
 800d79c:	f006 fab6 	bl	8013d0c <uxr_receive_best_effort_message>
 800d7a0:	2800      	cmp	r0, #0
 800d7a2:	d094      	beq.n	800d6ce <listen_message_reliably+0x18a>
 800d7a4:	f88d 502a 	strb.w	r5, [sp, #42]	@ 0x2a
 800d7a8:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800d7aa:	a90c      	add	r1, sp, #48	@ 0x30
 800d7ac:	4640      	mov	r0, r8
 800d7ae:	f7ff fd41 	bl	800d234 <read_submessage_list>
 800d7b2:	e78c      	b.n	800d6ce <listen_message_reliably+0x18a>
 800d7b4:	f88d 502a 	strb.w	r5, [sp, #42]	@ 0x2a
 800d7b8:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800d7ba:	a90c      	add	r1, sp, #48	@ 0x30
 800d7bc:	4640      	mov	r0, r8
 800d7be:	f7ff fd39 	bl	800d234 <read_submessage_list>
 800d7c2:	e7c4      	b.n	800d74e <listen_message_reliably+0x20a>

0800d7c4 <uxr_run_session_timeout>:
 800d7c4:	b570      	push	{r4, r5, r6, lr}
 800d7c6:	4604      	mov	r4, r0
 800d7c8:	460d      	mov	r5, r1
 800d7ca:	f001 f9f9 	bl	800ebc0 <uxr_millis>
 800d7ce:	4606      	mov	r6, r0
 800d7d0:	4620      	mov	r0, r4
 800d7d2:	f7ff fc71 	bl	800d0b8 <uxr_flash_output_streams>
 800d7d6:	4629      	mov	r1, r5
 800d7d8:	4620      	mov	r0, r4
 800d7da:	f7ff feb3 	bl	800d544 <listen_message_reliably>
 800d7de:	f001 f9ef 	bl	800ebc0 <uxr_millis>
 800d7e2:	1b83      	subs	r3, r0, r6
 800d7e4:	1ae9      	subs	r1, r5, r3
 800d7e6:	2900      	cmp	r1, #0
 800d7e8:	dcf6      	bgt.n	800d7d8 <uxr_run_session_timeout+0x14>
 800d7ea:	f104 0008 	add.w	r0, r4, #8
 800d7ee:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800d7f2:	f001 b989 	b.w	800eb08 <uxr_output_streams_confirmed>
 800d7f6:	bf00      	nop

0800d7f8 <uxr_run_session_until_data>:
 800d7f8:	b570      	push	{r4, r5, r6, lr}
 800d7fa:	4604      	mov	r4, r0
 800d7fc:	460d      	mov	r5, r1
 800d7fe:	f001 f9df 	bl	800ebc0 <uxr_millis>
 800d802:	4606      	mov	r6, r0
 800d804:	4620      	mov	r0, r4
 800d806:	f7ff fc57 	bl	800d0b8 <uxr_flash_output_streams>
 800d80a:	2300      	movs	r3, #0
 800d80c:	f884 30b4 	strb.w	r3, [r4, #180]	@ 0xb4
 800d810:	4629      	mov	r1, r5
 800d812:	e005      	b.n	800d820 <uxr_run_session_until_data+0x28>
 800d814:	f001 f9d4 	bl	800ebc0 <uxr_millis>
 800d818:	1b83      	subs	r3, r0, r6
 800d81a:	1ae9      	subs	r1, r5, r3
 800d81c:	2900      	cmp	r1, #0
 800d81e:	dd07      	ble.n	800d830 <uxr_run_session_until_data+0x38>
 800d820:	4620      	mov	r0, r4
 800d822:	f7ff fe8f 	bl	800d544 <listen_message_reliably>
 800d826:	f894 00b4 	ldrb.w	r0, [r4, #180]	@ 0xb4
 800d82a:	2800      	cmp	r0, #0
 800d82c:	d0f2      	beq.n	800d814 <uxr_run_session_until_data+0x1c>
 800d82e:	bd70      	pop	{r4, r5, r6, pc}
 800d830:	f894 00b4 	ldrb.w	r0, [r4, #180]	@ 0xb4
 800d834:	bd70      	pop	{r4, r5, r6, pc}
 800d836:	bf00      	nop

0800d838 <uxr_run_session_until_confirm_delivery>:
 800d838:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d83c:	4606      	mov	r6, r0
 800d83e:	460d      	mov	r5, r1
 800d840:	f001 f9be 	bl	800ebc0 <uxr_millis>
 800d844:	4607      	mov	r7, r0
 800d846:	4630      	mov	r0, r6
 800d848:	f7ff fc36 	bl	800d0b8 <uxr_flash_output_streams>
 800d84c:	2d00      	cmp	r5, #0
 800d84e:	f106 0808 	add.w	r8, r6, #8
 800d852:	bfa8      	it	ge
 800d854:	462c      	movge	r4, r5
 800d856:	da07      	bge.n	800d868 <uxr_run_session_until_confirm_delivery+0x30>
 800d858:	e00e      	b.n	800d878 <uxr_run_session_until_confirm_delivery+0x40>
 800d85a:	f7ff fe73 	bl	800d544 <listen_message_reliably>
 800d85e:	f001 f9af 	bl	800ebc0 <uxr_millis>
 800d862:	1bc3      	subs	r3, r0, r7
 800d864:	1aec      	subs	r4, r5, r3
 800d866:	d407      	bmi.n	800d878 <uxr_run_session_until_confirm_delivery+0x40>
 800d868:	4640      	mov	r0, r8
 800d86a:	f001 f94d 	bl	800eb08 <uxr_output_streams_confirmed>
 800d86e:	4603      	mov	r3, r0
 800d870:	4621      	mov	r1, r4
 800d872:	4630      	mov	r0, r6
 800d874:	2b00      	cmp	r3, #0
 800d876:	d0f0      	beq.n	800d85a <uxr_run_session_until_confirm_delivery+0x22>
 800d878:	4640      	mov	r0, r8
 800d87a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800d87e:	f001 b943 	b.w	800eb08 <uxr_output_streams_confirmed>
 800d882:	bf00      	nop

0800d884 <uxr_run_session_until_all_status>:
 800d884:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d888:	9c08      	ldr	r4, [sp, #32]
 800d88a:	4606      	mov	r6, r0
 800d88c:	460f      	mov	r7, r1
 800d88e:	4691      	mov	r9, r2
 800d890:	461d      	mov	r5, r3
 800d892:	f7ff fc11 	bl	800d0b8 <uxr_flash_output_streams>
 800d896:	b124      	cbz	r4, 800d8a2 <uxr_run_session_until_all_status+0x1e>
 800d898:	4622      	mov	r2, r4
 800d89a:	21ff      	movs	r1, #255	@ 0xff
 800d89c:	4628      	mov	r0, r5
 800d89e:	f007 ffbf 	bl	8015820 <memset>
 800d8a2:	e9c6 951d 	strd	r9, r5, [r6, #116]	@ 0x74
 800d8a6:	67f4      	str	r4, [r6, #124]	@ 0x7c
 800d8a8:	f001 f98a 	bl	800ebc0 <uxr_millis>
 800d8ac:	3d01      	subs	r5, #1
 800d8ae:	f1a9 0902 	sub.w	r9, r9, #2
 800d8b2:	4680      	mov	r8, r0
 800d8b4:	4639      	mov	r1, r7
 800d8b6:	4630      	mov	r0, r6
 800d8b8:	f7ff fe44 	bl	800d544 <listen_message_reliably>
 800d8bc:	f001 f980 	bl	800ebc0 <uxr_millis>
 800d8c0:	eba0 0008 	sub.w	r0, r0, r8
 800d8c4:	1a39      	subs	r1, r7, r0
 800d8c6:	b344      	cbz	r4, 800d91a <uxr_run_session_until_all_status+0x96>
 800d8c8:	4628      	mov	r0, r5
 800d8ca:	46ac      	mov	ip, r5
 800d8cc:	2301      	movs	r3, #1
 800d8ce:	e002      	b.n	800d8d6 <uxr_run_session_until_all_status+0x52>
 800d8d0:	42a3      	cmp	r3, r4
 800d8d2:	d20d      	bcs.n	800d8f0 <uxr_run_session_until_all_status+0x6c>
 800d8d4:	3301      	adds	r3, #1
 800d8d6:	f81c ef01 	ldrb.w	lr, [ip, #1]!
 800d8da:	f1be 0fff 	cmp.w	lr, #255	@ 0xff
 800d8de:	d1f7      	bne.n	800d8d0 <uxr_run_session_until_all_status+0x4c>
 800d8e0:	42a3      	cmp	r3, r4
 800d8e2:	f839 2013 	ldrh.w	r2, [r9, r3, lsl #1]
 800d8e6:	d213      	bcs.n	800d910 <uxr_run_session_until_all_status+0x8c>
 800d8e8:	2a00      	cmp	r2, #0
 800d8ea:	d0f3      	beq.n	800d8d4 <uxr_run_session_until_all_status+0x50>
 800d8ec:	2900      	cmp	r1, #0
 800d8ee:	dce2      	bgt.n	800d8b6 <uxr_run_session_until_all_status+0x32>
 800d8f0:	2300      	movs	r3, #0
 800d8f2:	67f3      	str	r3, [r6, #124]	@ 0x7c
 800d8f4:	442c      	add	r4, r5
 800d8f6:	e001      	b.n	800d8fc <uxr_run_session_until_all_status+0x78>
 800d8f8:	2b01      	cmp	r3, #1
 800d8fa:	d812      	bhi.n	800d922 <uxr_run_session_until_all_status+0x9e>
 800d8fc:	f810 3f01 	ldrb.w	r3, [r0, #1]!
 800d900:	4284      	cmp	r4, r0
 800d902:	d1f9      	bne.n	800d8f8 <uxr_run_session_until_all_status+0x74>
 800d904:	2b01      	cmp	r3, #1
 800d906:	bf8c      	ite	hi
 800d908:	2000      	movhi	r0, #0
 800d90a:	2001      	movls	r0, #1
 800d90c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d910:	2900      	cmp	r1, #0
 800d912:	dded      	ble.n	800d8f0 <uxr_run_session_until_all_status+0x6c>
 800d914:	2a00      	cmp	r2, #0
 800d916:	d1ce      	bne.n	800d8b6 <uxr_run_session_until_all_status+0x32>
 800d918:	e7ea      	b.n	800d8f0 <uxr_run_session_until_all_status+0x6c>
 800d91a:	67f4      	str	r4, [r6, #124]	@ 0x7c
 800d91c:	2001      	movs	r0, #1
 800d91e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d922:	2000      	movs	r0, #0
 800d924:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

0800d928 <wait_session_status>:
 800d928:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d92c:	4604      	mov	r4, r0
 800d92e:	b09d      	sub	sp, #116	@ 0x74
 800d930:	20ff      	movs	r0, #255	@ 0xff
 800d932:	7160      	strb	r0, [r4, #5]
 800d934:	9303      	str	r3, [sp, #12]
 800d936:	2b00      	cmp	r3, #0
 800d938:	f000 80b6 	beq.w	800daa8 <wait_session_status+0x180>
 800d93c:	468a      	mov	sl, r1
 800d93e:	4691      	mov	r9, r2
 800d940:	f04f 0b00 	mov.w	fp, #0
 800d944:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 800d946:	464a      	mov	r2, r9
 800d948:	e9d3 0500 	ldrd	r0, r5, [r3]
 800d94c:	4651      	mov	r1, sl
 800d94e:	47a8      	blx	r5
 800d950:	f001 f936 	bl	800ebc0 <uxr_millis>
 800d954:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800d958:	4605      	mov	r5, r0
 800d95a:	e009      	b.n	800d970 <wait_session_status+0x48>
 800d95c:	f001 f930 	bl	800ebc0 <uxr_millis>
 800d960:	1b40      	subs	r0, r0, r5
 800d962:	f5c0 737a 	rsb	r3, r0, #1000	@ 0x3e8
 800d966:	2b00      	cmp	r3, #0
 800d968:	dd40      	ble.n	800d9ec <wait_session_status+0xc4>
 800d96a:	7960      	ldrb	r0, [r4, #5]
 800d96c:	28ff      	cmp	r0, #255	@ 0xff
 800d96e:	d145      	bne.n	800d9fc <wait_session_status+0xd4>
 800d970:	6f22      	ldr	r2, [r4, #112]	@ 0x70
 800d972:	a908      	add	r1, sp, #32
 800d974:	6896      	ldr	r6, [r2, #8]
 800d976:	6810      	ldr	r0, [r2, #0]
 800d978:	aa09      	add	r2, sp, #36	@ 0x24
 800d97a:	47b0      	blx	r6
 800d97c:	2800      	cmp	r0, #0
 800d97e:	d0ed      	beq.n	800d95c <wait_session_status+0x34>
 800d980:	e9dd 1208 	ldrd	r1, r2, [sp, #32]
 800d984:	a80c      	add	r0, sp, #48	@ 0x30
 800d986:	f7fe fe89 	bl	800c69c <ucdr_init_buffer>
 800d98a:	2600      	movs	r6, #0
 800d98c:	f10d 031e 	add.w	r3, sp, #30
 800d990:	aa07      	add	r2, sp, #28
 800d992:	a90c      	add	r1, sp, #48	@ 0x30
 800d994:	4620      	mov	r0, r4
 800d996:	f88d 601c 	strb.w	r6, [sp, #28]
 800d99a:	f000 fa87 	bl	800deac <uxr_read_session_header>
 800d99e:	2800      	cmp	r0, #0
 800d9a0:	d0dc      	beq.n	800d95c <wait_session_status+0x34>
 800d9a2:	4631      	mov	r1, r6
 800d9a4:	f89d 001c 	ldrb.w	r0, [sp, #28]
 800d9a8:	f000 ffb6 	bl	800e918 <uxr_stream_id_from_raw>
 800d9ac:	f3c0 4707 	ubfx	r7, r0, #16, #8
 800d9b0:	f8bd 301e 	ldrh.w	r3, [sp, #30]
 800d9b4:	9302      	str	r3, [sp, #8]
 800d9b6:	2f01      	cmp	r7, #1
 800d9b8:	e9cd 000a 	strd	r0, r0, [sp, #40]	@ 0x28
 800d9bc:	f3c0 2607 	ubfx	r6, r0, #8, #8
 800d9c0:	d05c      	beq.n	800da7c <wait_session_status+0x154>
 800d9c2:	2f02      	cmp	r7, #2
 800d9c4:	d020      	beq.n	800da08 <wait_session_status+0xe0>
 800d9c6:	2f00      	cmp	r7, #0
 800d9c8:	d1c8      	bne.n	800d95c <wait_session_status+0x34>
 800d9ca:	4639      	mov	r1, r7
 800d9cc:	4638      	mov	r0, r7
 800d9ce:	f000 ffa3 	bl	800e918 <uxr_stream_id_from_raw>
 800d9d2:	a90c      	add	r1, sp, #48	@ 0x30
 800d9d4:	4602      	mov	r2, r0
 800d9d6:	900b      	str	r0, [sp, #44]	@ 0x2c
 800d9d8:	4620      	mov	r0, r4
 800d9da:	f7ff fc2b 	bl	800d234 <read_submessage_list>
 800d9de:	f001 f8ef 	bl	800ebc0 <uxr_millis>
 800d9e2:	1b40      	subs	r0, r0, r5
 800d9e4:	f5c0 737a 	rsb	r3, r0, #1000	@ 0x3e8
 800d9e8:	2b00      	cmp	r3, #0
 800d9ea:	dcbe      	bgt.n	800d96a <wait_session_status+0x42>
 800d9ec:	9b03      	ldr	r3, [sp, #12]
 800d9ee:	7960      	ldrb	r0, [r4, #5]
 800d9f0:	f10b 0b01 	add.w	fp, fp, #1
 800d9f4:	455b      	cmp	r3, fp
 800d9f6:	d001      	beq.n	800d9fc <wait_session_status+0xd4>
 800d9f8:	28ff      	cmp	r0, #255	@ 0xff
 800d9fa:	d0a3      	beq.n	800d944 <wait_session_status+0x1c>
 800d9fc:	38ff      	subs	r0, #255	@ 0xff
 800d9fe:	bf18      	it	ne
 800da00:	2001      	movne	r0, #1
 800da02:	b01d      	add	sp, #116	@ 0x74
 800da04:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800da08:	f89d 3028 	ldrb.w	r3, [sp, #40]	@ 0x28
 800da0c:	9304      	str	r3, [sp, #16]
 800da0e:	4631      	mov	r1, r6
 800da10:	f104 0008 	add.w	r0, r4, #8
 800da14:	f001 f86e 	bl	800eaf4 <uxr_get_input_reliable_stream>
 800da18:	4680      	mov	r8, r0
 800da1a:	b348      	cbz	r0, 800da70 <wait_session_status+0x148>
 800da1c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800da1e:	9205      	str	r2, [sp, #20]
 800da20:	a80c      	add	r0, sp, #48	@ 0x30
 800da22:	f7fe fe6b 	bl	800c6fc <ucdr_buffer_remaining>
 800da26:	4603      	mov	r3, r0
 800da28:	f10d 001d 	add.w	r0, sp, #29
 800da2c:	9000      	str	r0, [sp, #0]
 800da2e:	9a05      	ldr	r2, [sp, #20]
 800da30:	9902      	ldr	r1, [sp, #8]
 800da32:	4640      	mov	r0, r8
 800da34:	f006 f9fe 	bl	8013e34 <uxr_receive_reliable_message>
 800da38:	b1d0      	cbz	r0, 800da70 <wait_session_status+0x148>
 800da3a:	f89d 301d 	ldrb.w	r3, [sp, #29]
 800da3e:	2b00      	cmp	r3, #0
 800da40:	d03a      	beq.n	800dab8 <wait_session_status+0x190>
 800da42:	9f04      	ldr	r7, [sp, #16]
 800da44:	e00a      	b.n	800da5c <wait_session_status+0x134>
 800da46:	f04f 0302 	mov.w	r3, #2
 800da4a:	f88d 702c 	strb.w	r7, [sp, #44]	@ 0x2c
 800da4e:	f88d 602d 	strb.w	r6, [sp, #45]	@ 0x2d
 800da52:	f88d 302e 	strb.w	r3, [sp, #46]	@ 0x2e
 800da56:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800da58:	f7ff fbec 	bl	800d234 <read_submessage_list>
 800da5c:	a914      	add	r1, sp, #80	@ 0x50
 800da5e:	2204      	movs	r2, #4
 800da60:	4640      	mov	r0, r8
 800da62:	f006 fa67 	bl	8013f34 <uxr_next_input_reliable_buffer_available>
 800da66:	4603      	mov	r3, r0
 800da68:	a914      	add	r1, sp, #80	@ 0x50
 800da6a:	4620      	mov	r0, r4
 800da6c:	2b00      	cmp	r3, #0
 800da6e:	d1ea      	bne.n	800da46 <wait_session_status+0x11e>
 800da70:	9904      	ldr	r1, [sp, #16]
 800da72:	4632      	mov	r2, r6
 800da74:	4620      	mov	r0, r4
 800da76:	f7ff fa57 	bl	800cf28 <write_submessage_acknack.isra.0>
 800da7a:	e76f      	b.n	800d95c <wait_session_status+0x34>
 800da7c:	4631      	mov	r1, r6
 800da7e:	f104 0008 	add.w	r0, r4, #8
 800da82:	f001 f82d 	bl	800eae0 <uxr_get_input_best_effort_stream>
 800da86:	2800      	cmp	r0, #0
 800da88:	f43f af68 	beq.w	800d95c <wait_session_status+0x34>
 800da8c:	9902      	ldr	r1, [sp, #8]
 800da8e:	f006 f93d 	bl	8013d0c <uxr_receive_best_effort_message>
 800da92:	2800      	cmp	r0, #0
 800da94:	f43f af62 	beq.w	800d95c <wait_session_status+0x34>
 800da98:	f88d 702e 	strb.w	r7, [sp, #46]	@ 0x2e
 800da9c:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800da9e:	a90c      	add	r1, sp, #48	@ 0x30
 800daa0:	4620      	mov	r0, r4
 800daa2:	f7ff fbc7 	bl	800d234 <read_submessage_list>
 800daa6:	e759      	b.n	800d95c <wait_session_status+0x34>
 800daa8:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 800daaa:	e9d3 0400 	ldrd	r0, r4, [r3]
 800daae:	47a0      	blx	r4
 800dab0:	2001      	movs	r0, #1
 800dab2:	b01d      	add	sp, #116	@ 0x74
 800dab4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dab8:	f88d 702e 	strb.w	r7, [sp, #46]	@ 0x2e
 800dabc:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800dabe:	a90c      	add	r1, sp, #48	@ 0x30
 800dac0:	4620      	mov	r0, r4
 800dac2:	f7ff fbb7 	bl	800d234 <read_submessage_list>
 800dac6:	e7bc      	b.n	800da42 <wait_session_status+0x11a>

0800dac8 <uxr_delete_session_retries>:
 800dac8:	b530      	push	{r4, r5, lr}
 800daca:	b08f      	sub	sp, #60	@ 0x3c
 800dacc:	4604      	mov	r4, r0
 800dace:	460d      	mov	r5, r1
 800dad0:	f000 fa2e 	bl	800df30 <uxr_session_header_offset>
 800dad4:	2300      	movs	r3, #0
 800dad6:	2210      	movs	r2, #16
 800dad8:	9000      	str	r0, [sp, #0]
 800dada:	a902      	add	r1, sp, #8
 800dadc:	a806      	add	r0, sp, #24
 800dade:	f7fe fdcb 	bl	800c678 <ucdr_init_buffer_origin_offset>
 800dae2:	a906      	add	r1, sp, #24
 800dae4:	4620      	mov	r0, r4
 800dae6:	f000 f973 	bl	800ddd0 <uxr_buffer_delete_session>
 800daea:	2200      	movs	r2, #0
 800daec:	4611      	mov	r1, r2
 800daee:	9b06      	ldr	r3, [sp, #24]
 800daf0:	4620      	mov	r0, r4
 800daf2:	f000 f9c7 	bl	800de84 <uxr_stamp_session_header>
 800daf6:	a806      	add	r0, sp, #24
 800daf8:	f7fe fdfc 	bl	800c6f4 <ucdr_buffer_length>
 800dafc:	462b      	mov	r3, r5
 800dafe:	4602      	mov	r2, r0
 800db00:	a902      	add	r1, sp, #8
 800db02:	4620      	mov	r0, r4
 800db04:	f7ff ff10 	bl	800d928 <wait_session_status>
 800db08:	b118      	cbz	r0, 800db12 <uxr_delete_session_retries+0x4a>
 800db0a:	7960      	ldrb	r0, [r4, #5]
 800db0c:	fab0 f080 	clz	r0, r0
 800db10:	0940      	lsrs	r0, r0, #5
 800db12:	b00f      	add	sp, #60	@ 0x3c
 800db14:	bd30      	pop	{r4, r5, pc}
 800db16:	bf00      	nop

0800db18 <uxr_create_session>:
 800db18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800db1c:	f100 0b08 	add.w	fp, r0, #8
 800db20:	b0ab      	sub	sp, #172	@ 0xac
 800db22:	4604      	mov	r4, r0
 800db24:	4658      	mov	r0, fp
 800db26:	f000 ff2b 	bl	800e980 <uxr_reset_stream_storage>
 800db2a:	4620      	mov	r0, r4
 800db2c:	f000 fa00 	bl	800df30 <uxr_session_header_offset>
 800db30:	2300      	movs	r3, #0
 800db32:	9000      	str	r0, [sp, #0]
 800db34:	221c      	movs	r2, #28
 800db36:	a90b      	add	r1, sp, #44	@ 0x2c
 800db38:	a812      	add	r0, sp, #72	@ 0x48
 800db3a:	f7fe fd9d 	bl	800c678 <ucdr_init_buffer_origin_offset>
 800db3e:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 800db40:	8a1a      	ldrh	r2, [r3, #16]
 800db42:	3a04      	subs	r2, #4
 800db44:	b292      	uxth	r2, r2
 800db46:	a912      	add	r1, sp, #72	@ 0x48
 800db48:	4620      	mov	r0, r4
 800db4a:	f000 f917 	bl	800dd7c <uxr_buffer_create_session>
 800db4e:	9912      	ldr	r1, [sp, #72]	@ 0x48
 800db50:	4620      	mov	r0, r4
 800db52:	f000 f983 	bl	800de5c <uxr_stamp_create_session_header>
 800db56:	a812      	add	r0, sp, #72	@ 0x48
 800db58:	f7fe fdcc 	bl	800c6f4 <ucdr_buffer_length>
 800db5c:	23ff      	movs	r3, #255	@ 0xff
 800db5e:	7163      	strb	r3, [r4, #5]
 800db60:	230a      	movs	r3, #10
 800db62:	46da      	mov	sl, fp
 800db64:	9303      	str	r3, [sp, #12]
 800db66:	4683      	mov	fp, r0
 800db68:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 800db6a:	465a      	mov	r2, fp
 800db6c:	e9d3 0500 	ldrd	r0, r5, [r3]
 800db70:	a90b      	add	r1, sp, #44	@ 0x2c
 800db72:	47a8      	blx	r5
 800db74:	f001 f824 	bl	800ebc0 <uxr_millis>
 800db78:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800db7c:	4605      	mov	r5, r0
 800db7e:	e009      	b.n	800db94 <uxr_create_session+0x7c>
 800db80:	f001 f81e 	bl	800ebc0 <uxr_millis>
 800db84:	1b40      	subs	r0, r0, r5
 800db86:	f5c0 737a 	rsb	r3, r0, #1000	@ 0x3e8
 800db8a:	2b00      	cmp	r3, #0
 800db8c:	7962      	ldrb	r2, [r4, #5]
 800db8e:	dd38      	ble.n	800dc02 <uxr_create_session+0xea>
 800db90:	2aff      	cmp	r2, #255	@ 0xff
 800db92:	d13c      	bne.n	800dc0e <uxr_create_session+0xf6>
 800db94:	6f22      	ldr	r2, [r4, #112]	@ 0x70
 800db96:	a907      	add	r1, sp, #28
 800db98:	6896      	ldr	r6, [r2, #8]
 800db9a:	6810      	ldr	r0, [r2, #0]
 800db9c:	aa08      	add	r2, sp, #32
 800db9e:	47b0      	blx	r6
 800dba0:	2800      	cmp	r0, #0
 800dba2:	d0ed      	beq.n	800db80 <uxr_create_session+0x68>
 800dba4:	e9dd 1207 	ldrd	r1, r2, [sp, #28]
 800dba8:	a81a      	add	r0, sp, #104	@ 0x68
 800dbaa:	f7fe fd77 	bl	800c69c <ucdr_init_buffer>
 800dbae:	2600      	movs	r6, #0
 800dbb0:	f10d 031a 	add.w	r3, sp, #26
 800dbb4:	aa06      	add	r2, sp, #24
 800dbb6:	a91a      	add	r1, sp, #104	@ 0x68
 800dbb8:	4620      	mov	r0, r4
 800dbba:	f88d 6018 	strb.w	r6, [sp, #24]
 800dbbe:	f000 f975 	bl	800deac <uxr_read_session_header>
 800dbc2:	2800      	cmp	r0, #0
 800dbc4:	d0dc      	beq.n	800db80 <uxr_create_session+0x68>
 800dbc6:	4631      	mov	r1, r6
 800dbc8:	f89d 0018 	ldrb.w	r0, [sp, #24]
 800dbcc:	f000 fea4 	bl	800e918 <uxr_stream_id_from_raw>
 800dbd0:	f3c0 4607 	ubfx	r6, r0, #16, #8
 800dbd4:	2e01      	cmp	r6, #1
 800dbd6:	e9cd 0009 	strd	r0, r0, [sp, #36]	@ 0x24
 800dbda:	f8bd 901a 	ldrh.w	r9, [sp, #26]
 800dbde:	f3c0 2707 	ubfx	r7, r0, #8, #8
 800dbe2:	d053      	beq.n	800dc8c <uxr_create_session+0x174>
 800dbe4:	2e02      	cmp	r6, #2
 800dbe6:	d018      	beq.n	800dc1a <uxr_create_session+0x102>
 800dbe8:	2e00      	cmp	r6, #0
 800dbea:	d1c9      	bne.n	800db80 <uxr_create_session+0x68>
 800dbec:	4631      	mov	r1, r6
 800dbee:	4630      	mov	r0, r6
 800dbf0:	f000 fe92 	bl	800e918 <uxr_stream_id_from_raw>
 800dbf4:	a91a      	add	r1, sp, #104	@ 0x68
 800dbf6:	4602      	mov	r2, r0
 800dbf8:	900a      	str	r0, [sp, #40]	@ 0x28
 800dbfa:	4620      	mov	r0, r4
 800dbfc:	f7ff fb1a 	bl	800d234 <read_submessage_list>
 800dc00:	e7be      	b.n	800db80 <uxr_create_session+0x68>
 800dc02:	9b03      	ldr	r3, [sp, #12]
 800dc04:	3b01      	subs	r3, #1
 800dc06:	9303      	str	r3, [sp, #12]
 800dc08:	d001      	beq.n	800dc0e <uxr_create_session+0xf6>
 800dc0a:	2aff      	cmp	r2, #255	@ 0xff
 800dc0c:	d0ac      	beq.n	800db68 <uxr_create_session+0x50>
 800dc0e:	2a00      	cmp	r2, #0
 800dc10:	d051      	beq.n	800dcb6 <uxr_create_session+0x19e>
 800dc12:	2000      	movs	r0, #0
 800dc14:	b02b      	add	sp, #172	@ 0xac
 800dc16:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dc1a:	f89d 3024 	ldrb.w	r3, [sp, #36]	@ 0x24
 800dc1e:	9304      	str	r3, [sp, #16]
 800dc20:	4639      	mov	r1, r7
 800dc22:	4650      	mov	r0, sl
 800dc24:	f000 ff66 	bl	800eaf4 <uxr_get_input_reliable_stream>
 800dc28:	4680      	mov	r8, r0
 800dc2a:	b348      	cbz	r0, 800dc80 <uxr_create_session+0x168>
 800dc2c:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 800dc2e:	9205      	str	r2, [sp, #20]
 800dc30:	a81a      	add	r0, sp, #104	@ 0x68
 800dc32:	f7fe fd63 	bl	800c6fc <ucdr_buffer_remaining>
 800dc36:	4603      	mov	r3, r0
 800dc38:	f10d 0019 	add.w	r0, sp, #25
 800dc3c:	9000      	str	r0, [sp, #0]
 800dc3e:	9a05      	ldr	r2, [sp, #20]
 800dc40:	4649      	mov	r1, r9
 800dc42:	4640      	mov	r0, r8
 800dc44:	f006 f8f6 	bl	8013e34 <uxr_receive_reliable_message>
 800dc48:	b1d0      	cbz	r0, 800dc80 <uxr_create_session+0x168>
 800dc4a:	f89d 3019 	ldrb.w	r3, [sp, #25]
 800dc4e:	2b00      	cmp	r3, #0
 800dc50:	d038      	beq.n	800dcc4 <uxr_create_session+0x1ac>
 800dc52:	9e04      	ldr	r6, [sp, #16]
 800dc54:	e00a      	b.n	800dc6c <uxr_create_session+0x154>
 800dc56:	f04f 0302 	mov.w	r3, #2
 800dc5a:	f88d 6028 	strb.w	r6, [sp, #40]	@ 0x28
 800dc5e:	f88d 7029 	strb.w	r7, [sp, #41]	@ 0x29
 800dc62:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800dc66:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800dc68:	f7ff fae4 	bl	800d234 <read_submessage_list>
 800dc6c:	a922      	add	r1, sp, #136	@ 0x88
 800dc6e:	2204      	movs	r2, #4
 800dc70:	4640      	mov	r0, r8
 800dc72:	f006 f95f 	bl	8013f34 <uxr_next_input_reliable_buffer_available>
 800dc76:	4603      	mov	r3, r0
 800dc78:	a922      	add	r1, sp, #136	@ 0x88
 800dc7a:	4620      	mov	r0, r4
 800dc7c:	2b00      	cmp	r3, #0
 800dc7e:	d1ea      	bne.n	800dc56 <uxr_create_session+0x13e>
 800dc80:	9904      	ldr	r1, [sp, #16]
 800dc82:	463a      	mov	r2, r7
 800dc84:	4620      	mov	r0, r4
 800dc86:	f7ff f94f 	bl	800cf28 <write_submessage_acknack.isra.0>
 800dc8a:	e779      	b.n	800db80 <uxr_create_session+0x68>
 800dc8c:	4639      	mov	r1, r7
 800dc8e:	4650      	mov	r0, sl
 800dc90:	f000 ff26 	bl	800eae0 <uxr_get_input_best_effort_stream>
 800dc94:	2800      	cmp	r0, #0
 800dc96:	f43f af73 	beq.w	800db80 <uxr_create_session+0x68>
 800dc9a:	4649      	mov	r1, r9
 800dc9c:	f006 f836 	bl	8013d0c <uxr_receive_best_effort_message>
 800dca0:	2800      	cmp	r0, #0
 800dca2:	f43f af6d 	beq.w	800db80 <uxr_create_session+0x68>
 800dca6:	f88d 602a 	strb.w	r6, [sp, #42]	@ 0x2a
 800dcaa:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800dcac:	a91a      	add	r1, sp, #104	@ 0x68
 800dcae:	4620      	mov	r0, r4
 800dcb0:	f7ff fac0 	bl	800d234 <read_submessage_list>
 800dcb4:	e764      	b.n	800db80 <uxr_create_session+0x68>
 800dcb6:	4650      	mov	r0, sl
 800dcb8:	f000 fe62 	bl	800e980 <uxr_reset_stream_storage>
 800dcbc:	2001      	movs	r0, #1
 800dcbe:	b02b      	add	sp, #172	@ 0xac
 800dcc0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dcc4:	f88d 602a 	strb.w	r6, [sp, #42]	@ 0x2a
 800dcc8:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800dcca:	a91a      	add	r1, sp, #104	@ 0x68
 800dccc:	4620      	mov	r0, r4
 800dcce:	f7ff fab1 	bl	800d234 <read_submessage_list>
 800dcd2:	e7be      	b.n	800dc52 <uxr_create_session+0x13a>

0800dcd4 <uxr_prepare_stream_to_write_submessage>:
 800dcd4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800dcd8:	b082      	sub	sp, #8
 800dcda:	4682      	mov	sl, r0
 800dcdc:	4610      	mov	r0, r2
 800dcde:	4615      	mov	r5, r2
 800dce0:	461e      	mov	r6, r3
 800dce2:	f89d 7028 	ldrb.w	r7, [sp, #40]	@ 0x28
 800dce6:	f89d 802c 	ldrb.w	r8, [sp, #44]	@ 0x2c
 800dcea:	9101      	str	r1, [sp, #4]
 800dcec:	f3c1 2407 	ubfx	r4, r1, #8, #8
 800dcf0:	f000 ff60 	bl	800ebb4 <uxr_submessage_padding>
 800dcf4:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800dcf8:	f105 0904 	add.w	r9, r5, #4
 800dcfc:	2b01      	cmp	r3, #1
 800dcfe:	4481      	add	r9, r0
 800dd00:	d01d      	beq.n	800dd3e <uxr_prepare_stream_to_write_submessage+0x6a>
 800dd02:	2b02      	cmp	r3, #2
 800dd04:	d116      	bne.n	800dd34 <uxr_prepare_stream_to_write_submessage+0x60>
 800dd06:	4621      	mov	r1, r4
 800dd08:	f10a 0008 	add.w	r0, sl, #8
 800dd0c:	f000 fede 	bl	800eacc <uxr_get_output_reliable_stream>
 800dd10:	4604      	mov	r4, r0
 800dd12:	b158      	cbz	r0, 800dd2c <uxr_prepare_stream_to_write_submessage+0x58>
 800dd14:	4649      	mov	r1, r9
 800dd16:	4632      	mov	r2, r6
 800dd18:	f006 fac8 	bl	80142ac <uxr_prepare_reliable_buffer_to_write>
 800dd1c:	4604      	mov	r4, r0
 800dd1e:	b12c      	cbz	r4, 800dd2c <uxr_prepare_stream_to_write_submessage+0x58>
 800dd20:	4643      	mov	r3, r8
 800dd22:	b2aa      	uxth	r2, r5
 800dd24:	4639      	mov	r1, r7
 800dd26:	4630      	mov	r0, r6
 800dd28:	f000 ff04 	bl	800eb34 <uxr_buffer_submessage_header>
 800dd2c:	4620      	mov	r0, r4
 800dd2e:	b002      	add	sp, #8
 800dd30:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800dd34:	2400      	movs	r4, #0
 800dd36:	4620      	mov	r0, r4
 800dd38:	b002      	add	sp, #8
 800dd3a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800dd3e:	4621      	mov	r1, r4
 800dd40:	f10a 0008 	add.w	r0, sl, #8
 800dd44:	f000 feba 	bl	800eabc <uxr_get_output_best_effort_stream>
 800dd48:	4604      	mov	r4, r0
 800dd4a:	2800      	cmp	r0, #0
 800dd4c:	d0ee      	beq.n	800dd2c <uxr_prepare_stream_to_write_submessage+0x58>
 800dd4e:	4649      	mov	r1, r9
 800dd50:	4632      	mov	r2, r6
 800dd52:	f006 f9db 	bl	801410c <uxr_prepare_best_effort_buffer_to_write>
 800dd56:	4604      	mov	r4, r0
 800dd58:	e7e1      	b.n	800dd1e <uxr_prepare_stream_to_write_submessage+0x4a>
 800dd5a:	bf00      	nop

0800dd5c <uxr_init_session_info>:
 800dd5c:	0e13      	lsrs	r3, r2, #24
 800dd5e:	7043      	strb	r3, [r0, #1]
 800dd60:	f3c2 2307 	ubfx	r3, r2, #8, #8
 800dd64:	f3c2 4c07 	ubfx	ip, r2, #16, #8
 800dd68:	7001      	strb	r1, [r0, #0]
 800dd6a:	70c3      	strb	r3, [r0, #3]
 800dd6c:	2109      	movs	r1, #9
 800dd6e:	23ff      	movs	r3, #255	@ 0xff
 800dd70:	f880 c002 	strb.w	ip, [r0, #2]
 800dd74:	7102      	strb	r2, [r0, #4]
 800dd76:	80c1      	strh	r1, [r0, #6]
 800dd78:	7143      	strb	r3, [r0, #5]
 800dd7a:	4770      	bx	lr

0800dd7c <uxr_buffer_create_session>:
 800dd7c:	b530      	push	{r4, r5, lr}
 800dd7e:	b089      	sub	sp, #36	@ 0x24
 800dd80:	2300      	movs	r3, #0
 800dd82:	4d12      	ldr	r5, [pc, #72]	@ (800ddcc <uxr_buffer_create_session+0x50>)
 800dd84:	9307      	str	r3, [sp, #28]
 800dd86:	f8ad 201c 	strh.w	r2, [sp, #28]
 800dd8a:	2201      	movs	r2, #1
 800dd8c:	9301      	str	r3, [sp, #4]
 800dd8e:	80c2      	strh	r2, [r0, #6]
 800dd90:	f88d 2004 	strb.w	r2, [sp, #4]
 800dd94:	682a      	ldr	r2, [r5, #0]
 800dd96:	9200      	str	r2, [sp, #0]
 800dd98:	88aa      	ldrh	r2, [r5, #4]
 800dd9a:	f8ad 2006 	strh.w	r2, [sp, #6]
 800dd9e:	f8d0 2001 	ldr.w	r2, [r0, #1]
 800dda2:	9202      	str	r2, [sp, #8]
 800dda4:	460c      	mov	r4, r1
 800dda6:	7802      	ldrb	r2, [r0, #0]
 800dda8:	9303      	str	r3, [sp, #12]
 800ddaa:	4619      	mov	r1, r3
 800ddac:	f88d 200c 	strb.w	r2, [sp, #12]
 800ddb0:	4620      	mov	r0, r4
 800ddb2:	2210      	movs	r2, #16
 800ddb4:	e9cd 3304 	strd	r3, r3, [sp, #16]
 800ddb8:	9306      	str	r3, [sp, #24]
 800ddba:	f000 febb 	bl	800eb34 <uxr_buffer_submessage_header>
 800ddbe:	4669      	mov	r1, sp
 800ddc0:	4620      	mov	r0, r4
 800ddc2:	f001 fc9f 	bl	800f704 <uxr_serialize_CREATE_CLIENT_Payload>
 800ddc6:	b009      	add	sp, #36	@ 0x24
 800ddc8:	bd30      	pop	{r4, r5, pc}
 800ddca:	bf00      	nop
 800ddcc:	08016840 	.word	0x08016840

0800ddd0 <uxr_buffer_delete_session>:
 800ddd0:	b510      	push	{r4, lr}
 800ddd2:	4b0c      	ldr	r3, [pc, #48]	@ (800de04 <uxr_buffer_delete_session+0x34>)
 800ddd4:	b082      	sub	sp, #8
 800ddd6:	f8b3 c008 	ldrh.w	ip, [r3, #8]
 800ddda:	f8ad c006 	strh.w	ip, [sp, #6]
 800ddde:	460c      	mov	r4, r1
 800dde0:	2202      	movs	r2, #2
 800dde2:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800dde6:	80c2      	strh	r2, [r0, #6]
 800dde8:	f8ad 3004 	strh.w	r3, [sp, #4]
 800ddec:	2204      	movs	r2, #4
 800ddee:	2300      	movs	r3, #0
 800ddf0:	2103      	movs	r1, #3
 800ddf2:	4620      	mov	r0, r4
 800ddf4:	f000 fe9e 	bl	800eb34 <uxr_buffer_submessage_header>
 800ddf8:	a901      	add	r1, sp, #4
 800ddfa:	4620      	mov	r0, r4
 800ddfc:	f001 fd28 	bl	800f850 <uxr_serialize_DELETE_Payload>
 800de00:	b002      	add	sp, #8
 800de02:	bd10      	pop	{r4, pc}
 800de04:	08016840 	.word	0x08016840

0800de08 <uxr_read_create_session_status>:
 800de08:	b510      	push	{r4, lr}
 800de0a:	b088      	sub	sp, #32
 800de0c:	4604      	mov	r4, r0
 800de0e:	4608      	mov	r0, r1
 800de10:	a901      	add	r1, sp, #4
 800de12:	f001 fd2d 	bl	800f870 <uxr_deserialize_STATUS_AGENT_Payload>
 800de16:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800de1a:	7163      	strb	r3, [r4, #5]
 800de1c:	b008      	add	sp, #32
 800de1e:	bd10      	pop	{r4, pc}

0800de20 <uxr_read_delete_session_status>:
 800de20:	b510      	push	{r4, lr}
 800de22:	4604      	mov	r4, r0
 800de24:	b084      	sub	sp, #16
 800de26:	4608      	mov	r0, r1
 800de28:	a902      	add	r1, sp, #8
 800de2a:	f001 fd51 	bl	800f8d0 <uxr_deserialize_STATUS_Payload>
 800de2e:	88e3      	ldrh	r3, [r4, #6]
 800de30:	2b02      	cmp	r3, #2
 800de32:	d001      	beq.n	800de38 <uxr_read_delete_session_status+0x18>
 800de34:	b004      	add	sp, #16
 800de36:	bd10      	pop	{r4, pc}
 800de38:	f10d 000a 	add.w	r0, sp, #10
 800de3c:	f7fe feca 	bl	800cbd4 <uxr_object_id_from_raw>
 800de40:	f89d 2008 	ldrb.w	r2, [sp, #8]
 800de44:	f89d 3009 	ldrb.w	r3, [sp, #9]
 800de48:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 800de4c:	b29b      	uxth	r3, r3
 800de4e:	2b02      	cmp	r3, #2
 800de50:	bf04      	itt	eq
 800de52:	f89d 300c 	ldrbeq.w	r3, [sp, #12]
 800de56:	7163      	strbeq	r3, [r4, #5]
 800de58:	b004      	add	sp, #16
 800de5a:	bd10      	pop	{r4, pc}

0800de5c <uxr_stamp_create_session_header>:
 800de5c:	b510      	push	{r4, lr}
 800de5e:	2208      	movs	r2, #8
 800de60:	b08a      	sub	sp, #40	@ 0x28
 800de62:	4604      	mov	r4, r0
 800de64:	eb0d 0002 	add.w	r0, sp, r2
 800de68:	f7fe fc18 	bl	800c69c <ucdr_init_buffer>
 800de6c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800de70:	9400      	str	r4, [sp, #0]
 800de72:	2300      	movs	r3, #0
 800de74:	461a      	mov	r2, r3
 800de76:	f001 0180 	and.w	r1, r1, #128	@ 0x80
 800de7a:	a802      	add	r0, sp, #8
 800de7c:	f000 fed0 	bl	800ec20 <uxr_serialize_message_header>
 800de80:	b00a      	add	sp, #40	@ 0x28
 800de82:	bd10      	pop	{r4, pc}

0800de84 <uxr_stamp_session_header>:
 800de84:	b530      	push	{r4, r5, lr}
 800de86:	b08d      	sub	sp, #52	@ 0x34
 800de88:	4604      	mov	r4, r0
 800de8a:	460d      	mov	r5, r1
 800de8c:	9203      	str	r2, [sp, #12]
 800de8e:	4619      	mov	r1, r3
 800de90:	a804      	add	r0, sp, #16
 800de92:	2208      	movs	r2, #8
 800de94:	f7fe fc02 	bl	800c69c <ucdr_init_buffer>
 800de98:	f814 1b01 	ldrb.w	r1, [r4], #1
 800de9c:	9b03      	ldr	r3, [sp, #12]
 800de9e:	9400      	str	r4, [sp, #0]
 800dea0:	462a      	mov	r2, r5
 800dea2:	a804      	add	r0, sp, #16
 800dea4:	f000 febc 	bl	800ec20 <uxr_serialize_message_header>
 800dea8:	b00d      	add	sp, #52	@ 0x34
 800deaa:	bd30      	pop	{r4, r5, pc}

0800deac <uxr_read_session_header>:
 800deac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800deb0:	4607      	mov	r7, r0
 800deb2:	b084      	sub	sp, #16
 800deb4:	4608      	mov	r0, r1
 800deb6:	460c      	mov	r4, r1
 800deb8:	4615      	mov	r5, r2
 800deba:	461e      	mov	r6, r3
 800debc:	f7fe fc1e 	bl	800c6fc <ucdr_buffer_remaining>
 800dec0:	2808      	cmp	r0, #8
 800dec2:	d803      	bhi.n	800decc <uxr_read_session_header+0x20>
 800dec4:	2000      	movs	r0, #0
 800dec6:	b004      	add	sp, #16
 800dec8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800decc:	f10d 080c 	add.w	r8, sp, #12
 800ded0:	4633      	mov	r3, r6
 800ded2:	462a      	mov	r2, r5
 800ded4:	f8cd 8000 	str.w	r8, [sp]
 800ded8:	4620      	mov	r0, r4
 800deda:	f10d 010b 	add.w	r1, sp, #11
 800dede:	f000 febd 	bl	800ec5c <uxr_deserialize_message_header>
 800dee2:	783a      	ldrb	r2, [r7, #0]
 800dee4:	f89d 300b 	ldrb.w	r3, [sp, #11]
 800dee8:	4293      	cmp	r3, r2
 800deea:	d1eb      	bne.n	800dec4 <uxr_read_session_header+0x18>
 800deec:	061b      	lsls	r3, r3, #24
 800deee:	d41c      	bmi.n	800df2a <uxr_read_session_header+0x7e>
 800def0:	f89d 200c 	ldrb.w	r2, [sp, #12]
 800def4:	787b      	ldrb	r3, [r7, #1]
 800def6:	429a      	cmp	r2, r3
 800def8:	d003      	beq.n	800df02 <uxr_read_session_header+0x56>
 800defa:	2001      	movs	r0, #1
 800defc:	f080 0001 	eor.w	r0, r0, #1
 800df00:	e7e1      	b.n	800dec6 <uxr_read_session_header+0x1a>
 800df02:	f89d 200d 	ldrb.w	r2, [sp, #13]
 800df06:	78bb      	ldrb	r3, [r7, #2]
 800df08:	429a      	cmp	r2, r3
 800df0a:	f107 0102 	add.w	r1, r7, #2
 800df0e:	d1f4      	bne.n	800defa <uxr_read_session_header+0x4e>
 800df10:	f89d 200e 	ldrb.w	r2, [sp, #14]
 800df14:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800df18:	429a      	cmp	r2, r3
 800df1a:	d1ee      	bne.n	800defa <uxr_read_session_header+0x4e>
 800df1c:	f89d 200f 	ldrb.w	r2, [sp, #15]
 800df20:	784b      	ldrb	r3, [r1, #1]
 800df22:	429a      	cmp	r2, r3
 800df24:	d1e9      	bne.n	800defa <uxr_read_session_header+0x4e>
 800df26:	2000      	movs	r0, #0
 800df28:	e7e8      	b.n	800defc <uxr_read_session_header+0x50>
 800df2a:	2001      	movs	r0, #1
 800df2c:	e7cb      	b.n	800dec6 <uxr_read_session_header+0x1a>
 800df2e:	bf00      	nop

0800df30 <uxr_session_header_offset>:
 800df30:	f990 3000 	ldrsb.w	r3, [r0]
 800df34:	2b00      	cmp	r3, #0
 800df36:	bfac      	ite	ge
 800df38:	2008      	movge	r0, #8
 800df3a:	2004      	movlt	r0, #4
 800df3c:	4770      	bx	lr
 800df3e:	bf00      	nop

0800df40 <uxr_init_base_object_request>:
 800df40:	b510      	push	{r4, lr}
 800df42:	88c3      	ldrh	r3, [r0, #6]
 800df44:	b082      	sub	sp, #8
 800df46:	f64f 74f4 	movw	r4, #65524	@ 0xfff4
 800df4a:	9101      	str	r1, [sp, #4]
 800df4c:	f1a3 010a 	sub.w	r1, r3, #10
 800df50:	b289      	uxth	r1, r1
 800df52:	42a1      	cmp	r1, r4
 800df54:	d80e      	bhi.n	800df74 <uxr_init_base_object_request+0x34>
 800df56:	3301      	adds	r3, #1
 800df58:	b29c      	uxth	r4, r3
 800df5a:	f3c3 2107 	ubfx	r1, r3, #8, #8
 800df5e:	b2db      	uxtb	r3, r3
 800df60:	80c4      	strh	r4, [r0, #6]
 800df62:	9801      	ldr	r0, [sp, #4]
 800df64:	7011      	strb	r1, [r2, #0]
 800df66:	7053      	strb	r3, [r2, #1]
 800df68:	1c91      	adds	r1, r2, #2
 800df6a:	f7fe fe47 	bl	800cbfc <uxr_object_id_to_raw>
 800df6e:	4620      	mov	r0, r4
 800df70:	b002      	add	sp, #8
 800df72:	bd10      	pop	{r4, pc}
 800df74:	230a      	movs	r3, #10
 800df76:	2100      	movs	r1, #0
 800df78:	461c      	mov	r4, r3
 800df7a:	e7f1      	b.n	800df60 <uxr_init_base_object_request+0x20>

0800df7c <uxr_parse_base_object_request>:
 800df7c:	b570      	push	{r4, r5, r6, lr}
 800df7e:	4604      	mov	r4, r0
 800df80:	3002      	adds	r0, #2
 800df82:	460d      	mov	r5, r1
 800df84:	4616      	mov	r6, r2
 800df86:	f7fe fe25 	bl	800cbd4 <uxr_object_id_from_raw>
 800df8a:	f3c0 430f 	ubfx	r3, r0, #16, #16
 800df8e:	8028      	strh	r0, [r5, #0]
 800df90:	806b      	strh	r3, [r5, #2]
 800df92:	7822      	ldrb	r2, [r4, #0]
 800df94:	7863      	ldrb	r3, [r4, #1]
 800df96:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 800df9a:	8033      	strh	r3, [r6, #0]
 800df9c:	bd70      	pop	{r4, r5, r6, pc}
 800df9e:	bf00      	nop

0800dfa0 <uxr_init_framing_io>:
 800dfa0:	2300      	movs	r3, #0
 800dfa2:	7041      	strb	r1, [r0, #1]
 800dfa4:	7003      	strb	r3, [r0, #0]
 800dfa6:	8583      	strh	r3, [r0, #44]	@ 0x2c
 800dfa8:	4770      	bx	lr
 800dfaa:	bf00      	nop

0800dfac <uxr_write_framed_msg>:
 800dfac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dfb0:	4617      	mov	r7, r2
 800dfb2:	7842      	ldrb	r2, [r0, #1]
 800dfb4:	b083      	sub	sp, #12
 800dfb6:	460e      	mov	r6, r1
 800dfb8:	f1a2 017d 	sub.w	r1, r2, #125	@ 0x7d
 800dfbc:	469a      	mov	sl, r3
 800dfbe:	2901      	cmp	r1, #1
 800dfc0:	f04f 037e 	mov.w	r3, #126	@ 0x7e
 800dfc4:	4604      	mov	r4, r0
 800dfc6:	f880 3038 	strb.w	r3, [r0, #56]	@ 0x38
 800dfca:	f8dd b038 	ldr.w	fp, [sp, #56]	@ 0x38
 800dfce:	f89d 0034 	ldrb.w	r0, [sp, #52]	@ 0x34
 800dfd2:	f240 8137 	bls.w	800e244 <uxr_write_framed_msg+0x298>
 800dfd6:	f1a0 017d 	sub.w	r1, r0, #125	@ 0x7d
 800dfda:	f884 2039 	strb.w	r2, [r4, #57]	@ 0x39
 800dfde:	2901      	cmp	r1, #1
 800dfe0:	f04f 0202 	mov.w	r2, #2
 800dfe4:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 800dfe8:	f240 808f 	bls.w	800e10a <uxr_write_framed_msg+0x15e>
 800dfec:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800dfee:	f884 003a 	strb.w	r0, [r4, #58]	@ 0x3a
 800dff2:	b2dd      	uxtb	r5, r3
 800dff4:	f1a5 017d 	sub.w	r1, r5, #125	@ 0x7d
 800dff8:	2203      	movs	r2, #3
 800dffa:	2901      	cmp	r1, #1
 800dffc:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 800e000:	f240 809a 	bls.w	800e138 <uxr_write_framed_msg+0x18c>
 800e004:	18a1      	adds	r1, r4, r2
 800e006:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800e008:	f881 5038 	strb.w	r5, [r1, #56]	@ 0x38
 800e00c:	f3c3 2107 	ubfx	r1, r3, #8, #8
 800e010:	f1a1 007d 	sub.w	r0, r1, #125	@ 0x7d
 800e014:	3201      	adds	r2, #1
 800e016:	2801      	cmp	r0, #1
 800e018:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 800e01c:	f240 80a0 	bls.w	800e160 <uxr_write_framed_msg+0x1b4>
 800e020:	18a0      	adds	r0, r4, r2
 800e022:	3201      	adds	r2, #1
 800e024:	b2d2      	uxtb	r2, r2
 800e026:	f880 1038 	strb.w	r1, [r0, #56]	@ 0x38
 800e02a:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 800e02e:	2b00      	cmp	r3, #0
 800e030:	f000 80a9 	beq.w	800e186 <uxr_write_framed_msg+0x1da>
 800e034:	f04f 0900 	mov.w	r9, #0
 800e038:	46c8      	mov	r8, r9
 800e03a:	f81a 3008 	ldrb.w	r3, [sl, r8]
 800e03e:	f1a3 017d 	sub.w	r1, r3, #125	@ 0x7d
 800e042:	2901      	cmp	r1, #1
 800e044:	f240 80c3 	bls.w	800e1ce <uxr_write_framed_msg+0x222>
 800e048:	2a29      	cmp	r2, #41	@ 0x29
 800e04a:	f200 809f 	bhi.w	800e18c <uxr_write_framed_msg+0x1e0>
 800e04e:	18a1      	adds	r1, r4, r2
 800e050:	3201      	adds	r2, #1
 800e052:	b2d2      	uxtb	r2, r2
 800e054:	f881 3038 	strb.w	r3, [r1, #56]	@ 0x38
 800e058:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 800e05c:	ea89 0303 	eor.w	r3, r9, r3
 800e060:	498c      	ldr	r1, [pc, #560]	@ (800e294 <uxr_write_framed_msg+0x2e8>)
 800e062:	b2db      	uxtb	r3, r3
 800e064:	f108 0801 	add.w	r8, r8, #1
 800e068:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 800e06c:	ea83 2919 	eor.w	r9, r3, r9, lsr #8
 800e070:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800e072:	4543      	cmp	r3, r8
 800e074:	d8e1      	bhi.n	800e03a <uxr_write_framed_msg+0x8e>
 800e076:	ea4f 2319 	mov.w	r3, r9, lsr #8
 800e07a:	fa5f f889 	uxtb.w	r8, r9
 800e07e:	9301      	str	r3, [sp, #4]
 800e080:	f04f 0900 	mov.w	r9, #0
 800e084:	f1a8 0a7d 	sub.w	sl, r8, #125	@ 0x7d
 800e088:	fa5f f18a 	uxtb.w	r1, sl
 800e08c:	2901      	cmp	r1, #1
 800e08e:	d921      	bls.n	800e0d4 <uxr_write_framed_msg+0x128>
 800e090:	2a29      	cmp	r2, #41	@ 0x29
 800e092:	f240 80af 	bls.w	800e1f4 <uxr_write_framed_msg+0x248>
 800e096:	2500      	movs	r5, #0
 800e098:	e000      	b.n	800e09c <uxr_write_framed_msg+0xf0>
 800e09a:	b160      	cbz	r0, 800e0b6 <uxr_write_framed_msg+0x10a>
 800e09c:	f105 0138 	add.w	r1, r5, #56	@ 0x38
 800e0a0:	1b52      	subs	r2, r2, r5
 800e0a2:	465b      	mov	r3, fp
 800e0a4:	4421      	add	r1, r4
 800e0a6:	4638      	mov	r0, r7
 800e0a8:	47b0      	blx	r6
 800e0aa:	f894 2062 	ldrb.w	r2, [r4, #98]	@ 0x62
 800e0ae:	4405      	add	r5, r0
 800e0b0:	4295      	cmp	r5, r2
 800e0b2:	d3f2      	bcc.n	800e09a <uxr_write_framed_msg+0xee>
 800e0b4:	d003      	beq.n	800e0be <uxr_write_framed_msg+0x112>
 800e0b6:	2000      	movs	r0, #0
 800e0b8:	b003      	add	sp, #12
 800e0ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e0be:	fa5f f18a 	uxtb.w	r1, sl
 800e0c2:	f04f 0300 	mov.w	r3, #0
 800e0c6:	2901      	cmp	r1, #1
 800e0c8:	f884 3062 	strb.w	r3, [r4, #98]	@ 0x62
 800e0cc:	f04f 0200 	mov.w	r2, #0
 800e0d0:	f200 8090 	bhi.w	800e1f4 <uxr_write_framed_msg+0x248>
 800e0d4:	1c51      	adds	r1, r2, #1
 800e0d6:	b2c9      	uxtb	r1, r1
 800e0d8:	2929      	cmp	r1, #41	@ 0x29
 800e0da:	d8dc      	bhi.n	800e096 <uxr_write_framed_msg+0xea>
 800e0dc:	18a5      	adds	r5, r4, r2
 800e0de:	4421      	add	r1, r4
 800e0e0:	3202      	adds	r2, #2
 800e0e2:	f088 0820 	eor.w	r8, r8, #32
 800e0e6:	4648      	mov	r0, r9
 800e0e8:	f04f 037d 	mov.w	r3, #125	@ 0x7d
 800e0ec:	b2d2      	uxtb	r2, r2
 800e0ee:	f885 3038 	strb.w	r3, [r5, #56]	@ 0x38
 800e0f2:	f04f 0901 	mov.w	r9, #1
 800e0f6:	f881 8038 	strb.w	r8, [r1, #56]	@ 0x38
 800e0fa:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 800e0fe:	2800      	cmp	r0, #0
 800e100:	f040 8085 	bne.w	800e20e <uxr_write_framed_msg+0x262>
 800e104:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800e108:	e7bc      	b.n	800e084 <uxr_write_framed_msg+0xd8>
 800e10a:	4611      	mov	r1, r2
 800e10c:	f04f 0c03 	mov.w	ip, #3
 800e110:	2204      	movs	r2, #4
 800e112:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800e114:	4421      	add	r1, r4
 800e116:	b2dd      	uxtb	r5, r3
 800e118:	f04f 0e7d 	mov.w	lr, #125	@ 0x7d
 800e11c:	f881 e038 	strb.w	lr, [r1, #56]	@ 0x38
 800e120:	44a4      	add	ip, r4
 800e122:	f1a5 017d 	sub.w	r1, r5, #125	@ 0x7d
 800e126:	f080 0020 	eor.w	r0, r0, #32
 800e12a:	2901      	cmp	r1, #1
 800e12c:	f88c 0038 	strb.w	r0, [ip, #56]	@ 0x38
 800e130:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 800e134:	f63f af66 	bhi.w	800e004 <uxr_write_framed_msg+0x58>
 800e138:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800e13a:	18a0      	adds	r0, r4, r2
 800e13c:	f085 0520 	eor.w	r5, r5, #32
 800e140:	f04f 0c7d 	mov.w	ip, #125	@ 0x7d
 800e144:	f3c3 2107 	ubfx	r1, r3, #8, #8
 800e148:	f880 c038 	strb.w	ip, [r0, #56]	@ 0x38
 800e14c:	f880 5039 	strb.w	r5, [r0, #57]	@ 0x39
 800e150:	f1a1 007d 	sub.w	r0, r1, #125	@ 0x7d
 800e154:	3202      	adds	r2, #2
 800e156:	2801      	cmp	r0, #1
 800e158:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 800e15c:	f63f af60 	bhi.w	800e020 <uxr_write_framed_msg+0x74>
 800e160:	1c50      	adds	r0, r2, #1
 800e162:	18a5      	adds	r5, r4, r2
 800e164:	fa54 f080 	uxtab	r0, r4, r0
 800e168:	3202      	adds	r2, #2
 800e16a:	f081 0120 	eor.w	r1, r1, #32
 800e16e:	b2d2      	uxtb	r2, r2
 800e170:	f04f 0c7d 	mov.w	ip, #125	@ 0x7d
 800e174:	f885 c038 	strb.w	ip, [r5, #56]	@ 0x38
 800e178:	f880 1038 	strb.w	r1, [r0, #56]	@ 0x38
 800e17c:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 800e180:	2b00      	cmp	r3, #0
 800e182:	f47f af57 	bne.w	800e034 <uxr_write_framed_msg+0x88>
 800e186:	9301      	str	r3, [sp, #4]
 800e188:	4698      	mov	r8, r3
 800e18a:	e779      	b.n	800e080 <uxr_write_framed_msg+0xd4>
 800e18c:	2500      	movs	r5, #0
 800e18e:	e001      	b.n	800e194 <uxr_write_framed_msg+0x1e8>
 800e190:	2800      	cmp	r0, #0
 800e192:	d090      	beq.n	800e0b6 <uxr_write_framed_msg+0x10a>
 800e194:	f105 0138 	add.w	r1, r5, #56	@ 0x38
 800e198:	1b52      	subs	r2, r2, r5
 800e19a:	465b      	mov	r3, fp
 800e19c:	4421      	add	r1, r4
 800e19e:	4638      	mov	r0, r7
 800e1a0:	47b0      	blx	r6
 800e1a2:	f894 2062 	ldrb.w	r2, [r4, #98]	@ 0x62
 800e1a6:	4405      	add	r5, r0
 800e1a8:	4295      	cmp	r5, r2
 800e1aa:	d3f1      	bcc.n	800e190 <uxr_write_framed_msg+0x1e4>
 800e1ac:	d183      	bne.n	800e0b6 <uxr_write_framed_msg+0x10a>
 800e1ae:	f04f 0300 	mov.w	r3, #0
 800e1b2:	f884 3062 	strb.w	r3, [r4, #98]	@ 0x62
 800e1b6:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800e1b8:	4543      	cmp	r3, r8
 800e1ba:	d964      	bls.n	800e286 <uxr_write_framed_msg+0x2da>
 800e1bc:	f81a 3008 	ldrb.w	r3, [sl, r8]
 800e1c0:	f1a3 017d 	sub.w	r1, r3, #125	@ 0x7d
 800e1c4:	2901      	cmp	r1, #1
 800e1c6:	f04f 0200 	mov.w	r2, #0
 800e1ca:	f63f af3d 	bhi.w	800e048 <uxr_write_framed_msg+0x9c>
 800e1ce:	1c51      	adds	r1, r2, #1
 800e1d0:	b2c9      	uxtb	r1, r1
 800e1d2:	2929      	cmp	r1, #41	@ 0x29
 800e1d4:	d8da      	bhi.n	800e18c <uxr_write_framed_msg+0x1e0>
 800e1d6:	18a0      	adds	r0, r4, r2
 800e1d8:	4421      	add	r1, r4
 800e1da:	f04f 057d 	mov.w	r5, #125	@ 0x7d
 800e1de:	3202      	adds	r2, #2
 800e1e0:	f880 5038 	strb.w	r5, [r0, #56]	@ 0x38
 800e1e4:	b2d2      	uxtb	r2, r2
 800e1e6:	f083 0020 	eor.w	r0, r3, #32
 800e1ea:	f881 0038 	strb.w	r0, [r1, #56]	@ 0x38
 800e1ee:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 800e1f2:	e733      	b.n	800e05c <uxr_write_framed_msg+0xb0>
 800e1f4:	18a1      	adds	r1, r4, r2
 800e1f6:	3201      	adds	r2, #1
 800e1f8:	4648      	mov	r0, r9
 800e1fa:	b2d2      	uxtb	r2, r2
 800e1fc:	f881 8038 	strb.w	r8, [r1, #56]	@ 0x38
 800e200:	f04f 0901 	mov.w	r9, #1
 800e204:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 800e208:	2800      	cmp	r0, #0
 800e20a:	f43f af7b 	beq.w	800e104 <uxr_write_framed_msg+0x158>
 800e20e:	2500      	movs	r5, #0
 800e210:	e002      	b.n	800e218 <uxr_write_framed_msg+0x26c>
 800e212:	2800      	cmp	r0, #0
 800e214:	f43f af4f 	beq.w	800e0b6 <uxr_write_framed_msg+0x10a>
 800e218:	f105 0138 	add.w	r1, r5, #56	@ 0x38
 800e21c:	1b52      	subs	r2, r2, r5
 800e21e:	465b      	mov	r3, fp
 800e220:	4421      	add	r1, r4
 800e222:	4638      	mov	r0, r7
 800e224:	47b0      	blx	r6
 800e226:	f894 2062 	ldrb.w	r2, [r4, #98]	@ 0x62
 800e22a:	4405      	add	r5, r0
 800e22c:	4295      	cmp	r5, r2
 800e22e:	d3f0      	bcc.n	800e212 <uxr_write_framed_msg+0x266>
 800e230:	f47f af41 	bne.w	800e0b6 <uxr_write_framed_msg+0x10a>
 800e234:	2300      	movs	r3, #0
 800e236:	f884 3062 	strb.w	r3, [r4, #98]	@ 0x62
 800e23a:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800e23c:	b298      	uxth	r0, r3
 800e23e:	b003      	add	sp, #12
 800e240:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e244:	217d      	movs	r1, #125	@ 0x7d
 800e246:	f082 0220 	eor.w	r2, r2, #32
 800e24a:	f884 1039 	strb.w	r1, [r4, #57]	@ 0x39
 800e24e:	f1a0 017d 	sub.w	r1, r0, #125	@ 0x7d
 800e252:	f884 203a 	strb.w	r2, [r4, #58]	@ 0x3a
 800e256:	2901      	cmp	r1, #1
 800e258:	f04f 0203 	mov.w	r2, #3
 800e25c:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 800e260:	d804      	bhi.n	800e26c <uxr_write_framed_msg+0x2c0>
 800e262:	4611      	mov	r1, r2
 800e264:	f04f 0c04 	mov.w	ip, #4
 800e268:	2205      	movs	r2, #5
 800e26a:	e752      	b.n	800e112 <uxr_write_framed_msg+0x166>
 800e26c:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800e26e:	f884 003b 	strb.w	r0, [r4, #59]	@ 0x3b
 800e272:	b2dd      	uxtb	r5, r3
 800e274:	f1a5 017d 	sub.w	r1, r5, #125	@ 0x7d
 800e278:	2204      	movs	r2, #4
 800e27a:	2901      	cmp	r1, #1
 800e27c:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 800e280:	f63f aec0 	bhi.w	800e004 <uxr_write_framed_msg+0x58>
 800e284:	e758      	b.n	800e138 <uxr_write_framed_msg+0x18c>
 800e286:	ea4f 2319 	mov.w	r3, r9, lsr #8
 800e28a:	fa5f f889 	uxtb.w	r8, r9
 800e28e:	9301      	str	r3, [sp, #4]
 800e290:	2200      	movs	r2, #0
 800e292:	e6f5      	b.n	800e080 <uxr_write_framed_msg+0xd4>
 800e294:	08016b40 	.word	0x08016b40

0800e298 <uxr_framing_read_transport>:
 800e298:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e29c:	4604      	mov	r4, r0
 800e29e:	b083      	sub	sp, #12
 800e2a0:	461f      	mov	r7, r3
 800e2a2:	f8dd b034 	ldr.w	fp, [sp, #52]	@ 0x34
 800e2a6:	4689      	mov	r9, r1
 800e2a8:	4692      	mov	sl, r2
 800e2aa:	f000 fc89 	bl	800ebc0 <uxr_millis>
 800e2ae:	f894 302c 	ldrb.w	r3, [r4, #44]	@ 0x2c
 800e2b2:	f894 602d 	ldrb.w	r6, [r4, #45]	@ 0x2d
 800e2b6:	42b3      	cmp	r3, r6
 800e2b8:	4680      	mov	r8, r0
 800e2ba:	d061      	beq.n	800e380 <uxr_framing_read_transport+0xe8>
 800e2bc:	d81c      	bhi.n	800e2f8 <uxr_framing_read_transport+0x60>
 800e2be:	1e75      	subs	r5, r6, #1
 800e2c0:	1aed      	subs	r5, r5, r3
 800e2c2:	b2ed      	uxtb	r5, r5
 800e2c4:	2600      	movs	r6, #0
 800e2c6:	455d      	cmp	r5, fp
 800e2c8:	d81f      	bhi.n	800e30a <uxr_framing_read_transport+0x72>
 800e2ca:	19ab      	adds	r3, r5, r6
 800e2cc:	455b      	cmp	r3, fp
 800e2ce:	bf84      	itt	hi
 800e2d0:	ebab 0605 	subhi.w	r6, fp, r5
 800e2d4:	b2f6      	uxtbhi	r6, r6
 800e2d6:	b9ed      	cbnz	r5, 800e314 <uxr_framing_read_transport+0x7c>
 800e2d8:	f04f 0b00 	mov.w	fp, #0
 800e2dc:	f000 fc70 	bl	800ebc0 <uxr_millis>
 800e2e0:	683b      	ldr	r3, [r7, #0]
 800e2e2:	eba0 0808 	sub.w	r8, r0, r8
 800e2e6:	eba3 0308 	sub.w	r3, r3, r8
 800e2ea:	4658      	mov	r0, fp
 800e2ec:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800e2f0:	603b      	str	r3, [r7, #0]
 800e2f2:	b003      	add	sp, #12
 800e2f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e2f8:	2e00      	cmp	r6, #0
 800e2fa:	d049      	beq.n	800e390 <uxr_framing_read_transport+0xf8>
 800e2fc:	f1c3 052a 	rsb	r5, r3, #42	@ 0x2a
 800e300:	b2ed      	uxtb	r5, r5
 800e302:	3e01      	subs	r6, #1
 800e304:	455d      	cmp	r5, fp
 800e306:	b2f6      	uxtb	r6, r6
 800e308:	d9df      	bls.n	800e2ca <uxr_framing_read_transport+0x32>
 800e30a:	fa5f f58b 	uxtb.w	r5, fp
 800e30e:	2600      	movs	r6, #0
 800e310:	2d00      	cmp	r5, #0
 800e312:	d0e1      	beq.n	800e2d8 <uxr_framing_read_transport+0x40>
 800e314:	f894 102c 	ldrb.w	r1, [r4, #44]	@ 0x2c
 800e318:	3102      	adds	r1, #2
 800e31a:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800e31c:	9300      	str	r3, [sp, #0]
 800e31e:	683b      	ldr	r3, [r7, #0]
 800e320:	4421      	add	r1, r4
 800e322:	462a      	mov	r2, r5
 800e324:	4650      	mov	r0, sl
 800e326:	47c8      	blx	r9
 800e328:	f894 302c 	ldrb.w	r3, [r4, #44]	@ 0x2c
 800e32c:	4a1a      	ldr	r2, [pc, #104]	@ (800e398 <uxr_framing_read_transport+0x100>)
 800e32e:	4403      	add	r3, r0
 800e330:	0859      	lsrs	r1, r3, #1
 800e332:	fba2 2101 	umull	r2, r1, r2, r1
 800e336:	0889      	lsrs	r1, r1, #2
 800e338:	222a      	movs	r2, #42	@ 0x2a
 800e33a:	fb02 3111 	mls	r1, r2, r1, r3
 800e33e:	4683      	mov	fp, r0
 800e340:	f884 102c 	strb.w	r1, [r4, #44]	@ 0x2c
 800e344:	2800      	cmp	r0, #0
 800e346:	d0c7      	beq.n	800e2d8 <uxr_framing_read_transport+0x40>
 800e348:	42a8      	cmp	r0, r5
 800e34a:	d1c7      	bne.n	800e2dc <uxr_framing_read_transport+0x44>
 800e34c:	2e00      	cmp	r6, #0
 800e34e:	d0c5      	beq.n	800e2dc <uxr_framing_read_transport+0x44>
 800e350:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800e352:	9300      	str	r3, [sp, #0]
 800e354:	3102      	adds	r1, #2
 800e356:	4632      	mov	r2, r6
 800e358:	4421      	add	r1, r4
 800e35a:	2300      	movs	r3, #0
 800e35c:	4650      	mov	r0, sl
 800e35e:	47c8      	blx	r9
 800e360:	f894 102c 	ldrb.w	r1, [r4, #44]	@ 0x2c
 800e364:	4a0c      	ldr	r2, [pc, #48]	@ (800e398 <uxr_framing_read_transport+0x100>)
 800e366:	180b      	adds	r3, r1, r0
 800e368:	0859      	lsrs	r1, r3, #1
 800e36a:	fba2 1201 	umull	r1, r2, r2, r1
 800e36e:	0892      	lsrs	r2, r2, #2
 800e370:	212a      	movs	r1, #42	@ 0x2a
 800e372:	fb01 3312 	mls	r3, r1, r2, r3
 800e376:	eb00 0b05 	add.w	fp, r0, r5
 800e37a:	f884 302c 	strb.w	r3, [r4, #44]	@ 0x2c
 800e37e:	e7ad      	b.n	800e2dc <uxr_framing_read_transport+0x44>
 800e380:	2600      	movs	r6, #0
 800e382:	f1bb 0f28 	cmp.w	fp, #40	@ 0x28
 800e386:	85a6      	strh	r6, [r4, #44]	@ 0x2c
 800e388:	d9bf      	bls.n	800e30a <uxr_framing_read_transport+0x72>
 800e38a:	2102      	movs	r1, #2
 800e38c:	2529      	movs	r5, #41	@ 0x29
 800e38e:	e7c4      	b.n	800e31a <uxr_framing_read_transport+0x82>
 800e390:	f1c3 0529 	rsb	r5, r3, #41	@ 0x29
 800e394:	b2ed      	uxtb	r5, r5
 800e396:	e796      	b.n	800e2c6 <uxr_framing_read_transport+0x2e>
 800e398:	30c30c31 	.word	0x30c30c31

0800e39c <uxr_read_framed_msg>:
 800e39c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e3a0:	461e      	mov	r6, r3
 800e3a2:	f890 502c 	ldrb.w	r5, [r0, #44]	@ 0x2c
 800e3a6:	f890 302d 	ldrb.w	r3, [r0, #45]	@ 0x2d
 800e3aa:	429d      	cmp	r5, r3
 800e3ac:	b083      	sub	sp, #12
 800e3ae:	4604      	mov	r4, r0
 800e3b0:	4688      	mov	r8, r1
 800e3b2:	4691      	mov	r9, r2
 800e3b4:	f000 8188 	beq.w	800e6c8 <uxr_read_framed_msg+0x32c>
 800e3b8:	7823      	ldrb	r3, [r4, #0]
 800e3ba:	4dc1      	ldr	r5, [pc, #772]	@ (800e6c0 <uxr_read_framed_msg+0x324>)
 800e3bc:	4fc1      	ldr	r7, [pc, #772]	@ (800e6c4 <uxr_read_framed_msg+0x328>)
 800e3be:	2b07      	cmp	r3, #7
 800e3c0:	d8fd      	bhi.n	800e3be <uxr_read_framed_msg+0x22>
 800e3c2:	e8df f013 	tbh	[pc, r3, lsl #1]
 800e3c6:	0115      	.short	0x0115
 800e3c8:	00d600f6 	.word	0x00d600f6
 800e3cc:	009000b9 	.word	0x009000b9
 800e3d0:	0030004d 	.word	0x0030004d
 800e3d4:	0008      	.short	0x0008
 800e3d6:	f894 102c 	ldrb.w	r1, [r4, #44]	@ 0x2c
 800e3da:	f894 302d 	ldrb.w	r3, [r4, #45]	@ 0x2d
 800e3de:	4299      	cmp	r1, r3
 800e3e0:	f000 814a 	beq.w	800e678 <uxr_read_framed_msg+0x2dc>
 800e3e4:	18e2      	adds	r2, r4, r3
 800e3e6:	7892      	ldrb	r2, [r2, #2]
 800e3e8:	2a7d      	cmp	r2, #125	@ 0x7d
 800e3ea:	f000 8199 	beq.w	800e720 <uxr_read_framed_msg+0x384>
 800e3ee:	3301      	adds	r3, #1
 800e3f0:	0858      	lsrs	r0, r3, #1
 800e3f2:	fba5 1000 	umull	r1, r0, r5, r0
 800e3f6:	0880      	lsrs	r0, r0, #2
 800e3f8:	212a      	movs	r1, #42	@ 0x2a
 800e3fa:	fb01 3310 	mls	r3, r1, r0, r3
 800e3fe:	2a7e      	cmp	r2, #126	@ 0x7e
 800e400:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 800e404:	f000 8252 	beq.w	800e8ac <uxr_read_framed_msg+0x510>
 800e408:	8ea3      	ldrh	r3, [r4, #52]	@ 0x34
 800e40a:	8ee1      	ldrh	r1, [r4, #54]	@ 0x36
 800e40c:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 800e410:	b29b      	uxth	r3, r3
 800e412:	2200      	movs	r2, #0
 800e414:	4299      	cmp	r1, r3
 800e416:	86a3      	strh	r3, [r4, #52]	@ 0x34
 800e418:	7022      	strb	r2, [r4, #0]
 800e41a:	f000 8179 	beq.w	800e710 <uxr_read_framed_msg+0x374>
 800e41e:	2000      	movs	r0, #0
 800e420:	b003      	add	sp, #12
 800e422:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e426:	f894 102c 	ldrb.w	r1, [r4, #44]	@ 0x2c
 800e42a:	f894 302d 	ldrb.w	r3, [r4, #45]	@ 0x2d
 800e42e:	4299      	cmp	r1, r3
 800e430:	f000 8131 	beq.w	800e696 <uxr_read_framed_msg+0x2fa>
 800e434:	18e2      	adds	r2, r4, r3
 800e436:	7890      	ldrb	r0, [r2, #2]
 800e438:	287d      	cmp	r0, #125	@ 0x7d
 800e43a:	f000 8190 	beq.w	800e75e <uxr_read_framed_msg+0x3c2>
 800e43e:	3301      	adds	r3, #1
 800e440:	085a      	lsrs	r2, r3, #1
 800e442:	fba5 1202 	umull	r1, r2, r5, r2
 800e446:	0892      	lsrs	r2, r2, #2
 800e448:	212a      	movs	r1, #42	@ 0x2a
 800e44a:	fb01 3312 	mls	r3, r1, r2, r3
 800e44e:	287e      	cmp	r0, #126	@ 0x7e
 800e450:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 800e454:	f000 821a 	beq.w	800e88c <uxr_read_framed_msg+0x4f0>
 800e458:	2307      	movs	r3, #7
 800e45a:	86a0      	strh	r0, [r4, #52]	@ 0x34
 800e45c:	7023      	strb	r3, [r4, #0]
 800e45e:	e7ae      	b.n	800e3be <uxr_read_framed_msg+0x22>
 800e460:	8e63      	ldrh	r3, [r4, #50]	@ 0x32
 800e462:	f8b4 e030 	ldrh.w	lr, [r4, #48]	@ 0x30
 800e466:	459e      	cmp	lr, r3
 800e468:	d938      	bls.n	800e4dc <uxr_read_framed_msg+0x140>
 800e46a:	ee07 8a90 	vmov	s15, r8
 800e46e:	212a      	movs	r1, #42	@ 0x2a
 800e470:	e020      	b.n	800e4b4 <uxr_read_framed_msg+0x118>
 800e472:	f89b c002 	ldrb.w	ip, [fp, #2]
 800e476:	f1bc 0f7d 	cmp.w	ip, #125	@ 0x7d
 800e47a:	f000 80d4 	beq.w	800e626 <uxr_read_framed_msg+0x28a>
 800e47e:	f1bc 0f7e 	cmp.w	ip, #126	@ 0x7e
 800e482:	f884 202d 	strb.w	r2, [r4, #45]	@ 0x2d
 800e486:	f000 8219 	beq.w	800e8bc <uxr_read_framed_msg+0x520>
 800e48a:	f806 c003 	strb.w	ip, [r6, r3]
 800e48e:	f8b4 a036 	ldrh.w	sl, [r4, #54]	@ 0x36
 800e492:	8e63      	ldrh	r3, [r4, #50]	@ 0x32
 800e494:	f8b4 e030 	ldrh.w	lr, [r4, #48]	@ 0x30
 800e498:	ea8a 000c 	eor.w	r0, sl, ip
 800e49c:	b2c0      	uxtb	r0, r0
 800e49e:	3301      	adds	r3, #1
 800e4a0:	f837 2010 	ldrh.w	r2, [r7, r0, lsl #1]
 800e4a4:	b29b      	uxth	r3, r3
 800e4a6:	ea82 221a 	eor.w	r2, r2, sl, lsr #8
 800e4aa:	4573      	cmp	r3, lr
 800e4ac:	8663      	strh	r3, [r4, #50]	@ 0x32
 800e4ae:	86e2      	strh	r2, [r4, #54]	@ 0x36
 800e4b0:	f080 8120 	bcs.w	800e6f4 <uxr_read_framed_msg+0x358>
 800e4b4:	f894 002d 	ldrb.w	r0, [r4, #45]	@ 0x2d
 800e4b8:	f894 a02c 	ldrb.w	sl, [r4, #44]	@ 0x2c
 800e4bc:	f100 0c01 	add.w	ip, r0, #1
 800e4c0:	ea4f 025c 	mov.w	r2, ip, lsr #1
 800e4c4:	fba5 8202 	umull	r8, r2, r5, r2
 800e4c8:	0892      	lsrs	r2, r2, #2
 800e4ca:	4582      	cmp	sl, r0
 800e4cc:	eb04 0b00 	add.w	fp, r4, r0
 800e4d0:	fb01 c212 	mls	r2, r1, r2, ip
 800e4d4:	d1cd      	bne.n	800e472 <uxr_read_framed_msg+0xd6>
 800e4d6:	ee17 8a90 	vmov	r8, s15
 800e4da:	459e      	cmp	lr, r3
 800e4dc:	f040 8111 	bne.w	800e702 <uxr_read_framed_msg+0x366>
 800e4e0:	2306      	movs	r3, #6
 800e4e2:	7023      	strb	r3, [r4, #0]
 800e4e4:	e76b      	b.n	800e3be <uxr_read_framed_msg+0x22>
 800e4e6:	f894 002c 	ldrb.w	r0, [r4, #44]	@ 0x2c
 800e4ea:	f894 302d 	ldrb.w	r3, [r4, #45]	@ 0x2d
 800e4ee:	4298      	cmp	r0, r3
 800e4f0:	f000 80c2 	beq.w	800e678 <uxr_read_framed_msg+0x2dc>
 800e4f4:	18e2      	adds	r2, r4, r3
 800e4f6:	7891      	ldrb	r1, [r2, #2]
 800e4f8:	297d      	cmp	r1, #125	@ 0x7d
 800e4fa:	f000 814c 	beq.w	800e796 <uxr_read_framed_msg+0x3fa>
 800e4fe:	3301      	adds	r3, #1
 800e500:	085a      	lsrs	r2, r3, #1
 800e502:	fba5 0202 	umull	r0, r2, r5, r2
 800e506:	0892      	lsrs	r2, r2, #2
 800e508:	202a      	movs	r0, #42	@ 0x2a
 800e50a:	fb00 3312 	mls	r3, r0, r2, r3
 800e50e:	297e      	cmp	r1, #126	@ 0x7e
 800e510:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 800e514:	f000 81ca 	beq.w	800e8ac <uxr_read_framed_msg+0x510>
 800e518:	8e23      	ldrh	r3, [r4, #48]	@ 0x30
 800e51a:	eb03 2301 	add.w	r3, r3, r1, lsl #8
 800e51e:	990c      	ldr	r1, [sp, #48]	@ 0x30
 800e520:	b29b      	uxth	r3, r3
 800e522:	2000      	movs	r0, #0
 800e524:	428b      	cmp	r3, r1
 800e526:	8623      	strh	r3, [r4, #48]	@ 0x30
 800e528:	8660      	strh	r0, [r4, #50]	@ 0x32
 800e52a:	86e0      	strh	r0, [r4, #54]	@ 0x36
 800e52c:	f240 80df 	bls.w	800e6ee <uxr_read_framed_msg+0x352>
 800e530:	7020      	strb	r0, [r4, #0]
 800e532:	b003      	add	sp, #12
 800e534:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e538:	f894 102c 	ldrb.w	r1, [r4, #44]	@ 0x2c
 800e53c:	f894 302d 	ldrb.w	r3, [r4, #45]	@ 0x2d
 800e540:	4299      	cmp	r1, r3
 800e542:	f000 80a8 	beq.w	800e696 <uxr_read_framed_msg+0x2fa>
 800e546:	18e2      	adds	r2, r4, r3
 800e548:	7890      	ldrb	r0, [r2, #2]
 800e54a:	287d      	cmp	r0, #125	@ 0x7d
 800e54c:	f000 8164 	beq.w	800e818 <uxr_read_framed_msg+0x47c>
 800e550:	3301      	adds	r3, #1
 800e552:	085a      	lsrs	r2, r3, #1
 800e554:	fba5 1202 	umull	r1, r2, r5, r2
 800e558:	0892      	lsrs	r2, r2, #2
 800e55a:	212a      	movs	r1, #42	@ 0x2a
 800e55c:	fb01 3312 	mls	r3, r1, r2, r3
 800e560:	287e      	cmp	r0, #126	@ 0x7e
 800e562:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 800e566:	f000 8191 	beq.w	800e88c <uxr_read_framed_msg+0x4f0>
 800e56a:	2304      	movs	r3, #4
 800e56c:	8620      	strh	r0, [r4, #48]	@ 0x30
 800e56e:	7023      	strb	r3, [r4, #0]
 800e570:	e725      	b.n	800e3be <uxr_read_framed_msg+0x22>
 800e572:	f894 002c 	ldrb.w	r0, [r4, #44]	@ 0x2c
 800e576:	f894 202d 	ldrb.w	r2, [r4, #45]	@ 0x2d
 800e57a:	4290      	cmp	r0, r2
 800e57c:	f000 80b3 	beq.w	800e6e6 <uxr_read_framed_msg+0x34a>
 800e580:	18a3      	adds	r3, r4, r2
 800e582:	7899      	ldrb	r1, [r3, #2]
 800e584:	297d      	cmp	r1, #125	@ 0x7d
 800e586:	f000 8164 	beq.w	800e852 <uxr_read_framed_msg+0x4b6>
 800e58a:	3201      	adds	r2, #1
 800e58c:	0850      	lsrs	r0, r2, #1
 800e58e:	fba5 3000 	umull	r3, r0, r5, r0
 800e592:	0880      	lsrs	r0, r0, #2
 800e594:	232a      	movs	r3, #42	@ 0x2a
 800e596:	fb03 2210 	mls	r2, r3, r0, r2
 800e59a:	297e      	cmp	r1, #126	@ 0x7e
 800e59c:	f884 202d 	strb.w	r2, [r4, #45]	@ 0x2d
 800e5a0:	f000 8188 	beq.w	800e8b4 <uxr_read_framed_msg+0x518>
 800e5a4:	7863      	ldrb	r3, [r4, #1]
 800e5a6:	428b      	cmp	r3, r1
 800e5a8:	bf0c      	ite	eq
 800e5aa:	2303      	moveq	r3, #3
 800e5ac:	2300      	movne	r3, #0
 800e5ae:	7023      	strb	r3, [r4, #0]
 800e5b0:	e705      	b.n	800e3be <uxr_read_framed_msg+0x22>
 800e5b2:	f894 102c 	ldrb.w	r1, [r4, #44]	@ 0x2c
 800e5b6:	f894 302d 	ldrb.w	r3, [r4, #45]	@ 0x2d
 800e5ba:	2200      	movs	r2, #0
 800e5bc:	4299      	cmp	r1, r3
 800e5be:	f884 202e 	strb.w	r2, [r4, #46]	@ 0x2e
 800e5c2:	d06c      	beq.n	800e69e <uxr_read_framed_msg+0x302>
 800e5c4:	18e2      	adds	r2, r4, r3
 800e5c6:	7890      	ldrb	r0, [r2, #2]
 800e5c8:	287d      	cmp	r0, #125	@ 0x7d
 800e5ca:	f000 8101 	beq.w	800e7d0 <uxr_read_framed_msg+0x434>
 800e5ce:	3301      	adds	r3, #1
 800e5d0:	085a      	lsrs	r2, r3, #1
 800e5d2:	fba5 1202 	umull	r1, r2, r5, r2
 800e5d6:	0892      	lsrs	r2, r2, #2
 800e5d8:	212a      	movs	r1, #42	@ 0x2a
 800e5da:	fb01 3312 	mls	r3, r1, r2, r3
 800e5de:	287e      	cmp	r0, #126	@ 0x7e
 800e5e0:	f884 002e 	strb.w	r0, [r4, #46]	@ 0x2e
 800e5e4:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 800e5e8:	d059      	beq.n	800e69e <uxr_read_framed_msg+0x302>
 800e5ea:	2302      	movs	r3, #2
 800e5ec:	7023      	strb	r3, [r4, #0]
 800e5ee:	e6e6      	b.n	800e3be <uxr_read_framed_msg+0x22>
 800e5f0:	f894 a02c 	ldrb.w	sl, [r4, #44]	@ 0x2c
 800e5f4:	f894 202d 	ldrb.w	r2, [r4, #45]	@ 0x2d
 800e5f8:	f04f 0e2a 	mov.w	lr, #42	@ 0x2a
 800e5fc:	1c51      	adds	r1, r2, #1
 800e5fe:	084b      	lsrs	r3, r1, #1
 800e600:	fba5 c303 	umull	ip, r3, r5, r3
 800e604:	089b      	lsrs	r3, r3, #2
 800e606:	fb0e 1313 	mls	r3, lr, r3, r1
 800e60a:	4592      	cmp	sl, r2
 800e60c:	eb04 0002 	add.w	r0, r4, r2
 800e610:	b2da      	uxtb	r2, r3
 800e612:	f43f af04 	beq.w	800e41e <uxr_read_framed_msg+0x82>
 800e616:	7883      	ldrb	r3, [r0, #2]
 800e618:	f884 202d 	strb.w	r2, [r4, #45]	@ 0x2d
 800e61c:	2b7e      	cmp	r3, #126	@ 0x7e
 800e61e:	d1ed      	bne.n	800e5fc <uxr_read_framed_msg+0x260>
 800e620:	2301      	movs	r3, #1
 800e622:	7023      	strb	r3, [r4, #0]
 800e624:	e6cb      	b.n	800e3be <uxr_read_framed_msg+0x22>
 800e626:	f100 0c01 	add.w	ip, r0, #1
 800e62a:	ea4f 025c 	mov.w	r2, ip, lsr #1
 800e62e:	fba5 8202 	umull	r8, r2, r5, r2
 800e632:	0892      	lsrs	r2, r2, #2
 800e634:	fb01 c212 	mls	r2, r1, r2, ip
 800e638:	eb04 0c02 	add.w	ip, r4, r2
 800e63c:	b2d2      	uxtb	r2, r2
 800e63e:	4592      	cmp	sl, r2
 800e640:	f100 0002 	add.w	r0, r0, #2
 800e644:	f43f af47 	beq.w	800e4d6 <uxr_read_framed_msg+0x13a>
 800e648:	0842      	lsrs	r2, r0, #1
 800e64a:	f89c a002 	ldrb.w	sl, [ip, #2]
 800e64e:	fba5 8202 	umull	r8, r2, r5, r2
 800e652:	0892      	lsrs	r2, r2, #2
 800e654:	fb01 0012 	mls	r0, r1, r2, r0
 800e658:	f1ba 0f7e 	cmp.w	sl, #126	@ 0x7e
 800e65c:	f08a 0c20 	eor.w	ip, sl, #32
 800e660:	f884 002d 	strb.w	r0, [r4, #45]	@ 0x2d
 800e664:	f47f af11 	bne.w	800e48a <uxr_read_framed_msg+0xee>
 800e668:	459e      	cmp	lr, r3
 800e66a:	ee17 8a90 	vmov	r8, s15
 800e66e:	f43f af37 	beq.w	800e4e0 <uxr_read_framed_msg+0x144>
 800e672:	2301      	movs	r3, #1
 800e674:	7023      	strb	r3, [r4, #0]
 800e676:	e6a2      	b.n	800e3be <uxr_read_framed_msg+0x22>
 800e678:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800e67a:	9300      	str	r3, [sp, #0]
 800e67c:	2301      	movs	r3, #1
 800e67e:	9301      	str	r3, [sp, #4]
 800e680:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800e682:	464a      	mov	r2, r9
 800e684:	4641      	mov	r1, r8
 800e686:	4620      	mov	r0, r4
 800e688:	f7ff fe06 	bl	800e298 <uxr_framing_read_transport>
 800e68c:	2800      	cmp	r0, #0
 800e68e:	f43f aec6 	beq.w	800e41e <uxr_read_framed_msg+0x82>
 800e692:	7823      	ldrb	r3, [r4, #0]
 800e694:	e693      	b.n	800e3be <uxr_read_framed_msg+0x22>
 800e696:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800e698:	9300      	str	r3, [sp, #0]
 800e69a:	2302      	movs	r3, #2
 800e69c:	e7ef      	b.n	800e67e <uxr_read_framed_msg+0x2e2>
 800e69e:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800e6a0:	9300      	str	r3, [sp, #0]
 800e6a2:	2304      	movs	r3, #4
 800e6a4:	9301      	str	r3, [sp, #4]
 800e6a6:	464a      	mov	r2, r9
 800e6a8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800e6aa:	4641      	mov	r1, r8
 800e6ac:	4620      	mov	r0, r4
 800e6ae:	f7ff fdf3 	bl	800e298 <uxr_framing_read_transport>
 800e6b2:	2800      	cmp	r0, #0
 800e6b4:	d1ed      	bne.n	800e692 <uxr_read_framed_msg+0x2f6>
 800e6b6:	f894 302e 	ldrb.w	r3, [r4, #46]	@ 0x2e
 800e6ba:	2b7e      	cmp	r3, #126	@ 0x7e
 800e6bc:	d0e9      	beq.n	800e692 <uxr_read_framed_msg+0x2f6>
 800e6be:	e6ae      	b.n	800e41e <uxr_read_framed_msg+0x82>
 800e6c0:	30c30c31 	.word	0x30c30c31
 800e6c4:	08016b40 	.word	0x08016b40
 800e6c8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800e6ca:	9300      	str	r3, [sp, #0]
 800e6cc:	2305      	movs	r3, #5
 800e6ce:	9301      	str	r3, [sp, #4]
 800e6d0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800e6d2:	f7ff fde1 	bl	800e298 <uxr_framing_read_transport>
 800e6d6:	f894 202d 	ldrb.w	r2, [r4, #45]	@ 0x2d
 800e6da:	f894 302c 	ldrb.w	r3, [r4, #44]	@ 0x2c
 800e6de:	429a      	cmp	r2, r3
 800e6e0:	f43f ae9d 	beq.w	800e41e <uxr_read_framed_msg+0x82>
 800e6e4:	e668      	b.n	800e3b8 <uxr_read_framed_msg+0x1c>
 800e6e6:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800e6e8:	9300      	str	r3, [sp, #0]
 800e6ea:	2303      	movs	r3, #3
 800e6ec:	e7c7      	b.n	800e67e <uxr_read_framed_msg+0x2e2>
 800e6ee:	2305      	movs	r3, #5
 800e6f0:	7023      	strb	r3, [r4, #0]
 800e6f2:	e664      	b.n	800e3be <uxr_read_framed_msg+0x22>
 800e6f4:	ee17 8a90 	vmov	r8, s15
 800e6f8:	f43f aef2 	beq.w	800e4e0 <uxr_read_framed_msg+0x144>
 800e6fc:	f1bc 0f7e 	cmp.w	ip, #126	@ 0x7e
 800e700:	d08e      	beq.n	800e620 <uxr_read_framed_msg+0x284>
 800e702:	ebae 0303 	sub.w	r3, lr, r3
 800e706:	3302      	adds	r3, #2
 800e708:	9301      	str	r3, [sp, #4]
 800e70a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800e70c:	9300      	str	r3, [sp, #0]
 800e70e:	e7b7      	b.n	800e680 <uxr_read_framed_msg+0x2e4>
 800e710:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800e712:	f894 302e 	ldrb.w	r3, [r4, #46]	@ 0x2e
 800e716:	7013      	strb	r3, [r2, #0]
 800e718:	8e20      	ldrh	r0, [r4, #48]	@ 0x30
 800e71a:	b003      	add	sp, #12
 800e71c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e720:	f103 0c01 	add.w	ip, r3, #1
 800e724:	ea4f 025c 	mov.w	r2, ip, lsr #1
 800e728:	fba5 0202 	umull	r0, r2, r5, r2
 800e72c:	0892      	lsrs	r2, r2, #2
 800e72e:	202a      	movs	r0, #42	@ 0x2a
 800e730:	fb00 c212 	mls	r2, r0, r2, ip
 800e734:	fa5f fc82 	uxtb.w	ip, r2
 800e738:	4561      	cmp	r1, ip
 800e73a:	d09d      	beq.n	800e678 <uxr_read_framed_msg+0x2dc>
 800e73c:	3302      	adds	r3, #2
 800e73e:	4422      	add	r2, r4
 800e740:	0859      	lsrs	r1, r3, #1
 800e742:	7892      	ldrb	r2, [r2, #2]
 800e744:	fba5 c101 	umull	ip, r1, r5, r1
 800e748:	0889      	lsrs	r1, r1, #2
 800e74a:	fb00 3311 	mls	r3, r0, r1, r3
 800e74e:	2a7e      	cmp	r2, #126	@ 0x7e
 800e750:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 800e754:	f000 80aa 	beq.w	800e8ac <uxr_read_framed_msg+0x510>
 800e758:	f082 0220 	eor.w	r2, r2, #32
 800e75c:	e654      	b.n	800e408 <uxr_read_framed_msg+0x6c>
 800e75e:	1c58      	adds	r0, r3, #1
 800e760:	0842      	lsrs	r2, r0, #1
 800e762:	fba5 c202 	umull	ip, r2, r5, r2
 800e766:	0892      	lsrs	r2, r2, #2
 800e768:	f04f 0c2a 	mov.w	ip, #42	@ 0x2a
 800e76c:	fb0c 0212 	mls	r2, ip, r2, r0
 800e770:	b2d0      	uxtb	r0, r2
 800e772:	4281      	cmp	r1, r0
 800e774:	d08f      	beq.n	800e696 <uxr_read_framed_msg+0x2fa>
 800e776:	4422      	add	r2, r4
 800e778:	3302      	adds	r3, #2
 800e77a:	7890      	ldrb	r0, [r2, #2]
 800e77c:	085a      	lsrs	r2, r3, #1
 800e77e:	fba5 1202 	umull	r1, r2, r5, r2
 800e782:	0892      	lsrs	r2, r2, #2
 800e784:	fb0c 3312 	mls	r3, ip, r2, r3
 800e788:	287e      	cmp	r0, #126	@ 0x7e
 800e78a:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 800e78e:	d07d      	beq.n	800e88c <uxr_read_framed_msg+0x4f0>
 800e790:	f080 0020 	eor.w	r0, r0, #32
 800e794:	e660      	b.n	800e458 <uxr_read_framed_msg+0xbc>
 800e796:	1c59      	adds	r1, r3, #1
 800e798:	084a      	lsrs	r2, r1, #1
 800e79a:	fba5 c202 	umull	ip, r2, r5, r2
 800e79e:	0892      	lsrs	r2, r2, #2
 800e7a0:	f04f 0c2a 	mov.w	ip, #42	@ 0x2a
 800e7a4:	fb0c 1212 	mls	r2, ip, r2, r1
 800e7a8:	b2d1      	uxtb	r1, r2
 800e7aa:	4288      	cmp	r0, r1
 800e7ac:	f43f af64 	beq.w	800e678 <uxr_read_framed_msg+0x2dc>
 800e7b0:	4422      	add	r2, r4
 800e7b2:	3302      	adds	r3, #2
 800e7b4:	7891      	ldrb	r1, [r2, #2]
 800e7b6:	085a      	lsrs	r2, r3, #1
 800e7b8:	fba5 0202 	umull	r0, r2, r5, r2
 800e7bc:	0892      	lsrs	r2, r2, #2
 800e7be:	fb0c 3312 	mls	r3, ip, r2, r3
 800e7c2:	297e      	cmp	r1, #126	@ 0x7e
 800e7c4:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 800e7c8:	d070      	beq.n	800e8ac <uxr_read_framed_msg+0x510>
 800e7ca:	f081 0120 	eor.w	r1, r1, #32
 800e7ce:	e6a3      	b.n	800e518 <uxr_read_framed_msg+0x17c>
 800e7d0:	f103 0c01 	add.w	ip, r3, #1
 800e7d4:	ea4f 025c 	mov.w	r2, ip, lsr #1
 800e7d8:	fba5 0202 	umull	r0, r2, r5, r2
 800e7dc:	0892      	lsrs	r2, r2, #2
 800e7de:	202a      	movs	r0, #42	@ 0x2a
 800e7e0:	fb00 c212 	mls	r2, r0, r2, ip
 800e7e4:	fa5f fc82 	uxtb.w	ip, r2
 800e7e8:	4561      	cmp	r1, ip
 800e7ea:	f43f af58 	beq.w	800e69e <uxr_read_framed_msg+0x302>
 800e7ee:	4422      	add	r2, r4
 800e7f0:	3302      	adds	r3, #2
 800e7f2:	7891      	ldrb	r1, [r2, #2]
 800e7f4:	f884 102e 	strb.w	r1, [r4, #46]	@ 0x2e
 800e7f8:	085a      	lsrs	r2, r3, #1
 800e7fa:	fba5 c202 	umull	ip, r2, r5, r2
 800e7fe:	0892      	lsrs	r2, r2, #2
 800e800:	fb00 3312 	mls	r3, r0, r2, r3
 800e804:	297e      	cmp	r1, #126	@ 0x7e
 800e806:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 800e80a:	f43f af48 	beq.w	800e69e <uxr_read_framed_msg+0x302>
 800e80e:	f081 0120 	eor.w	r1, r1, #32
 800e812:	f884 102e 	strb.w	r1, [r4, #46]	@ 0x2e
 800e816:	e6e8      	b.n	800e5ea <uxr_read_framed_msg+0x24e>
 800e818:	1c58      	adds	r0, r3, #1
 800e81a:	0842      	lsrs	r2, r0, #1
 800e81c:	fba5 c202 	umull	ip, r2, r5, r2
 800e820:	0892      	lsrs	r2, r2, #2
 800e822:	f04f 0c2a 	mov.w	ip, #42	@ 0x2a
 800e826:	fb0c 0212 	mls	r2, ip, r2, r0
 800e82a:	b2d0      	uxtb	r0, r2
 800e82c:	4281      	cmp	r1, r0
 800e82e:	f43f af32 	beq.w	800e696 <uxr_read_framed_msg+0x2fa>
 800e832:	4422      	add	r2, r4
 800e834:	3302      	adds	r3, #2
 800e836:	7890      	ldrb	r0, [r2, #2]
 800e838:	085a      	lsrs	r2, r3, #1
 800e83a:	fba5 1202 	umull	r1, r2, r5, r2
 800e83e:	0892      	lsrs	r2, r2, #2
 800e840:	fb0c 3312 	mls	r3, ip, r2, r3
 800e844:	287e      	cmp	r0, #126	@ 0x7e
 800e846:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 800e84a:	d01f      	beq.n	800e88c <uxr_read_framed_msg+0x4f0>
 800e84c:	f080 0020 	eor.w	r0, r0, #32
 800e850:	e68b      	b.n	800e56a <uxr_read_framed_msg+0x1ce>
 800e852:	1c51      	adds	r1, r2, #1
 800e854:	084b      	lsrs	r3, r1, #1
 800e856:	fba5 c303 	umull	ip, r3, r5, r3
 800e85a:	089b      	lsrs	r3, r3, #2
 800e85c:	f04f 0c2a 	mov.w	ip, #42	@ 0x2a
 800e860:	fb0c 1313 	mls	r3, ip, r3, r1
 800e864:	b2d9      	uxtb	r1, r3
 800e866:	4288      	cmp	r0, r1
 800e868:	f43f af3d 	beq.w	800e6e6 <uxr_read_framed_msg+0x34a>
 800e86c:	3202      	adds	r2, #2
 800e86e:	4423      	add	r3, r4
 800e870:	0850      	lsrs	r0, r2, #1
 800e872:	789b      	ldrb	r3, [r3, #2]
 800e874:	fba5 1000 	umull	r1, r0, r5, r0
 800e878:	0880      	lsrs	r0, r0, #2
 800e87a:	fb0c 2210 	mls	r2, ip, r0, r2
 800e87e:	2b7e      	cmp	r3, #126	@ 0x7e
 800e880:	f884 202d 	strb.w	r2, [r4, #45]	@ 0x2d
 800e884:	d016      	beq.n	800e8b4 <uxr_read_framed_msg+0x518>
 800e886:	f083 0120 	eor.w	r1, r3, #32
 800e88a:	e68b      	b.n	800e5a4 <uxr_read_framed_msg+0x208>
 800e88c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800e88e:	9300      	str	r3, [sp, #0]
 800e890:	2302      	movs	r3, #2
 800e892:	9301      	str	r3, [sp, #4]
 800e894:	464a      	mov	r2, r9
 800e896:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800e898:	4641      	mov	r1, r8
 800e89a:	4620      	mov	r0, r4
 800e89c:	f7ff fcfc 	bl	800e298 <uxr_framing_read_transport>
 800e8a0:	2800      	cmp	r0, #0
 800e8a2:	f47f aef6 	bne.w	800e692 <uxr_read_framed_msg+0x2f6>
 800e8a6:	2301      	movs	r3, #1
 800e8a8:	7023      	strb	r3, [r4, #0]
 800e8aa:	e588      	b.n	800e3be <uxr_read_framed_msg+0x22>
 800e8ac:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800e8ae:	9300      	str	r3, [sp, #0]
 800e8b0:	2301      	movs	r3, #1
 800e8b2:	e7ee      	b.n	800e892 <uxr_read_framed_msg+0x4f6>
 800e8b4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800e8b6:	9300      	str	r3, [sp, #0]
 800e8b8:	2303      	movs	r3, #3
 800e8ba:	e7ea      	b.n	800e892 <uxr_read_framed_msg+0x4f6>
 800e8bc:	ee17 8a90 	vmov	r8, s15
 800e8c0:	e6ae      	b.n	800e620 <uxr_read_framed_msg+0x284>
 800e8c2:	bf00      	nop

0800e8c4 <uxr_stream_id>:
 800e8c4:	2901      	cmp	r1, #1
 800e8c6:	b082      	sub	sp, #8
 800e8c8:	d01d      	beq.n	800e906 <uxr_stream_id+0x42>
 800e8ca:	2902      	cmp	r1, #2
 800e8cc:	f04f 0c00 	mov.w	ip, #0
 800e8d0:	d01e      	beq.n	800e910 <uxr_stream_id+0x4c>
 800e8d2:	2300      	movs	r3, #0
 800e8d4:	f36c 0307 	bfi	r3, ip, #0, #8
 800e8d8:	f360 230f 	bfi	r3, r0, #8, #8
 800e8dc:	f361 4317 	bfi	r3, r1, #16, #8
 800e8e0:	f362 631f 	bfi	r3, r2, #24, #8
 800e8e4:	b2da      	uxtb	r2, r3
 800e8e6:	2000      	movs	r0, #0
 800e8e8:	f362 0007 	bfi	r0, r2, #0, #8
 800e8ec:	f3c3 2207 	ubfx	r2, r3, #8, #8
 800e8f0:	f362 200f 	bfi	r0, r2, #8, #8
 800e8f4:	f3c3 4207 	ubfx	r2, r3, #16, #8
 800e8f8:	f362 4017 	bfi	r0, r2, #16, #8
 800e8fc:	0e1b      	lsrs	r3, r3, #24
 800e8fe:	f363 601f 	bfi	r0, r3, #24, #8
 800e902:	b002      	add	sp, #8
 800e904:	4770      	bx	lr
 800e906:	f100 0c01 	add.w	ip, r0, #1
 800e90a:	fa5f fc8c 	uxtb.w	ip, ip
 800e90e:	e7e0      	b.n	800e8d2 <uxr_stream_id+0xe>
 800e910:	f080 0c80 	eor.w	ip, r0, #128	@ 0x80
 800e914:	e7dd      	b.n	800e8d2 <uxr_stream_id+0xe>
 800e916:	bf00      	nop

0800e918 <uxr_stream_id_from_raw>:
 800e918:	b082      	sub	sp, #8
 800e91a:	b130      	cbz	r0, 800e92a <uxr_stream_id_from_raw+0x12>
 800e91c:	0603      	lsls	r3, r0, #24
 800e91e:	d420      	bmi.n	800e962 <uxr_stream_id_from_raw+0x4a>
 800e920:	1e42      	subs	r2, r0, #1
 800e922:	b2d2      	uxtb	r2, r2
 800e924:	f04f 0c01 	mov.w	ip, #1
 800e928:	e001      	b.n	800e92e <uxr_stream_id_from_raw+0x16>
 800e92a:	4684      	mov	ip, r0
 800e92c:	4602      	mov	r2, r0
 800e92e:	2300      	movs	r3, #0
 800e930:	f360 0307 	bfi	r3, r0, #0, #8
 800e934:	f362 230f 	bfi	r3, r2, #8, #8
 800e938:	f36c 4317 	bfi	r3, ip, #16, #8
 800e93c:	f361 631f 	bfi	r3, r1, #24, #8
 800e940:	b2da      	uxtb	r2, r3
 800e942:	2000      	movs	r0, #0
 800e944:	f362 0007 	bfi	r0, r2, #0, #8
 800e948:	f3c3 2207 	ubfx	r2, r3, #8, #8
 800e94c:	f362 200f 	bfi	r0, r2, #8, #8
 800e950:	f3c3 4207 	ubfx	r2, r3, #16, #8
 800e954:	f362 4017 	bfi	r0, r2, #16, #8
 800e958:	0e1b      	lsrs	r3, r3, #24
 800e95a:	f363 601f 	bfi	r0, r3, #24, #8
 800e95e:	b002      	add	sp, #8
 800e960:	4770      	bx	lr
 800e962:	f080 0280 	eor.w	r2, r0, #128	@ 0x80
 800e966:	f04f 0c02 	mov.w	ip, #2
 800e96a:	e7e0      	b.n	800e92e <uxr_stream_id_from_raw+0x16>

0800e96c <uxr_init_stream_storage>:
 800e96c:	2300      	movs	r3, #0
 800e96e:	7403      	strb	r3, [r0, #16]
 800e970:	f880 3040 	strb.w	r3, [r0, #64]	@ 0x40
 800e974:	f880 3044 	strb.w	r3, [r0, #68]	@ 0x44
 800e978:	f880 3060 	strb.w	r3, [r0, #96]	@ 0x60
 800e97c:	4770      	bx	lr
 800e97e:	bf00      	nop

0800e980 <uxr_reset_stream_storage>:
 800e980:	b570      	push	{r4, r5, r6, lr}
 800e982:	7c03      	ldrb	r3, [r0, #16]
 800e984:	4604      	mov	r4, r0
 800e986:	b153      	cbz	r3, 800e99e <uxr_reset_stream_storage+0x1e>
 800e988:	4606      	mov	r6, r0
 800e98a:	2500      	movs	r5, #0
 800e98c:	4630      	mov	r0, r6
 800e98e:	f005 fbb7 	bl	8014100 <uxr_reset_output_best_effort_stream>
 800e992:	7c23      	ldrb	r3, [r4, #16]
 800e994:	3501      	adds	r5, #1
 800e996:	42ab      	cmp	r3, r5
 800e998:	f106 0610 	add.w	r6, r6, #16
 800e99c:	d8f6      	bhi.n	800e98c <uxr_reset_stream_storage+0xc>
 800e99e:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 800e9a2:	b163      	cbz	r3, 800e9be <uxr_reset_stream_storage+0x3e>
 800e9a4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800e9a8:	2500      	movs	r5, #0
 800e9aa:	4630      	mov	r0, r6
 800e9ac:	f005 f9aa 	bl	8013d04 <uxr_reset_input_best_effort_stream>
 800e9b0:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 800e9b4:	3501      	adds	r5, #1
 800e9b6:	42ab      	cmp	r3, r5
 800e9b8:	f106 0602 	add.w	r6, r6, #2
 800e9bc:	d8f5      	bhi.n	800e9aa <uxr_reset_stream_storage+0x2a>
 800e9be:	f894 3040 	ldrb.w	r3, [r4, #64]	@ 0x40
 800e9c2:	b163      	cbz	r3, 800e9de <uxr_reset_stream_storage+0x5e>
 800e9c4:	f104 0618 	add.w	r6, r4, #24
 800e9c8:	2500      	movs	r5, #0
 800e9ca:	4630      	mov	r0, r6
 800e9cc:	f005 fc44 	bl	8014258 <uxr_reset_output_reliable_stream>
 800e9d0:	f894 3040 	ldrb.w	r3, [r4, #64]	@ 0x40
 800e9d4:	3501      	adds	r5, #1
 800e9d6:	42ab      	cmp	r3, r5
 800e9d8:	f106 0628 	add.w	r6, r6, #40	@ 0x28
 800e9dc:	d8f5      	bhi.n	800e9ca <uxr_reset_stream_storage+0x4a>
 800e9de:	f894 3060 	ldrb.w	r3, [r4, #96]	@ 0x60
 800e9e2:	b163      	cbz	r3, 800e9fe <uxr_reset_stream_storage+0x7e>
 800e9e4:	f104 0648 	add.w	r6, r4, #72	@ 0x48
 800e9e8:	2500      	movs	r5, #0
 800e9ea:	4630      	mov	r0, r6
 800e9ec:	f005 f9fe 	bl	8013dec <uxr_reset_input_reliable_stream>
 800e9f0:	f894 3060 	ldrb.w	r3, [r4, #96]	@ 0x60
 800e9f4:	3501      	adds	r5, #1
 800e9f6:	42ab      	cmp	r3, r5
 800e9f8:	f106 0618 	add.w	r6, r6, #24
 800e9fc:	d8f5      	bhi.n	800e9ea <uxr_reset_stream_storage+0x6a>
 800e9fe:	bd70      	pop	{r4, r5, r6, pc}

0800ea00 <uxr_add_output_best_effort_buffer>:
 800ea00:	b510      	push	{r4, lr}
 800ea02:	7c04      	ldrb	r4, [r0, #16]
 800ea04:	f104 0c01 	add.w	ip, r4, #1
 800ea08:	b082      	sub	sp, #8
 800ea0a:	f880 c010 	strb.w	ip, [r0, #16]
 800ea0e:	eb00 1004 	add.w	r0, r0, r4, lsl #4
 800ea12:	f005 fb6b 	bl	80140ec <uxr_init_output_best_effort_stream>
 800ea16:	2201      	movs	r2, #1
 800ea18:	4611      	mov	r1, r2
 800ea1a:	4620      	mov	r0, r4
 800ea1c:	b002      	add	sp, #8
 800ea1e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ea22:	f7ff bf4f 	b.w	800e8c4 <uxr_stream_id>
 800ea26:	bf00      	nop

0800ea28 <uxr_add_output_reliable_buffer>:
 800ea28:	b510      	push	{r4, lr}
 800ea2a:	b084      	sub	sp, #16
 800ea2c:	4684      	mov	ip, r0
 800ea2e:	f89d 0018 	ldrb.w	r0, [sp, #24]
 800ea32:	9000      	str	r0, [sp, #0]
 800ea34:	f89c 4040 	ldrb.w	r4, [ip, #64]	@ 0x40
 800ea38:	2028      	movs	r0, #40	@ 0x28
 800ea3a:	fb00 c004 	mla	r0, r0, r4, ip
 800ea3e:	f104 0e01 	add.w	lr, r4, #1
 800ea42:	3018      	adds	r0, #24
 800ea44:	f88c e040 	strb.w	lr, [ip, #64]	@ 0x40
 800ea48:	f005 fbce 	bl	80141e8 <uxr_init_output_reliable_stream>
 800ea4c:	2201      	movs	r2, #1
 800ea4e:	2102      	movs	r1, #2
 800ea50:	4620      	mov	r0, r4
 800ea52:	b004      	add	sp, #16
 800ea54:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ea58:	f7ff bf34 	b.w	800e8c4 <uxr_stream_id>

0800ea5c <uxr_add_input_best_effort_buffer>:
 800ea5c:	b510      	push	{r4, lr}
 800ea5e:	f890 4044 	ldrb.w	r4, [r0, #68]	@ 0x44
 800ea62:	4603      	mov	r3, r0
 800ea64:	1c62      	adds	r2, r4, #1
 800ea66:	f104 0021 	add.w	r0, r4, #33	@ 0x21
 800ea6a:	b082      	sub	sp, #8
 800ea6c:	eb03 0040 	add.w	r0, r3, r0, lsl #1
 800ea70:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800ea74:	f005 f942 	bl	8013cfc <uxr_init_input_best_effort_stream>
 800ea78:	2200      	movs	r2, #0
 800ea7a:	2101      	movs	r1, #1
 800ea7c:	4620      	mov	r0, r4
 800ea7e:	b002      	add	sp, #8
 800ea80:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ea84:	f7ff bf1e 	b.w	800e8c4 <uxr_stream_id>

0800ea88 <uxr_add_input_reliable_buffer>:
 800ea88:	b510      	push	{r4, lr}
 800ea8a:	b084      	sub	sp, #16
 800ea8c:	4684      	mov	ip, r0
 800ea8e:	9806      	ldr	r0, [sp, #24]
 800ea90:	9000      	str	r0, [sp, #0]
 800ea92:	f89c 4060 	ldrb.w	r4, [ip, #96]	@ 0x60
 800ea96:	2018      	movs	r0, #24
 800ea98:	fb00 c004 	mla	r0, r0, r4, ip
 800ea9c:	f104 0e01 	add.w	lr, r4, #1
 800eaa0:	3048      	adds	r0, #72	@ 0x48
 800eaa2:	f88c e060 	strb.w	lr, [ip, #96]	@ 0x60
 800eaa6:	f005 f975 	bl	8013d94 <uxr_init_input_reliable_stream>
 800eaaa:	2200      	movs	r2, #0
 800eaac:	2102      	movs	r1, #2
 800eaae:	4620      	mov	r0, r4
 800eab0:	b004      	add	sp, #16
 800eab2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800eab6:	f7ff bf05 	b.w	800e8c4 <uxr_stream_id>
 800eaba:	bf00      	nop

0800eabc <uxr_get_output_best_effort_stream>:
 800eabc:	7c03      	ldrb	r3, [r0, #16]
 800eabe:	428b      	cmp	r3, r1
 800eac0:	bf8c      	ite	hi
 800eac2:	eb00 1001 	addhi.w	r0, r0, r1, lsl #4
 800eac6:	2000      	movls	r0, #0
 800eac8:	4770      	bx	lr
 800eaca:	bf00      	nop

0800eacc <uxr_get_output_reliable_stream>:
 800eacc:	f890 3040 	ldrb.w	r3, [r0, #64]	@ 0x40
 800ead0:	428b      	cmp	r3, r1
 800ead2:	bf83      	ittte	hi
 800ead4:	2328      	movhi	r3, #40	@ 0x28
 800ead6:	fb03 0001 	mlahi	r0, r3, r1, r0
 800eada:	3018      	addhi	r0, #24
 800eadc:	2000      	movls	r0, #0
 800eade:	4770      	bx	lr

0800eae0 <uxr_get_input_best_effort_stream>:
 800eae0:	f890 3044 	ldrb.w	r3, [r0, #68]	@ 0x44
 800eae4:	428b      	cmp	r3, r1
 800eae6:	bf86      	itte	hi
 800eae8:	3121      	addhi	r1, #33	@ 0x21
 800eaea:	eb00 0041 	addhi.w	r0, r0, r1, lsl #1
 800eaee:	2000      	movls	r0, #0
 800eaf0:	4770      	bx	lr
 800eaf2:	bf00      	nop

0800eaf4 <uxr_get_input_reliable_stream>:
 800eaf4:	f890 3060 	ldrb.w	r3, [r0, #96]	@ 0x60
 800eaf8:	428b      	cmp	r3, r1
 800eafa:	bf83      	ittte	hi
 800eafc:	2318      	movhi	r3, #24
 800eafe:	fb03 0001 	mlahi	r0, r3, r1, r0
 800eb02:	3048      	addhi	r0, #72	@ 0x48
 800eb04:	2000      	movls	r0, #0
 800eb06:	4770      	bx	lr

0800eb08 <uxr_output_streams_confirmed>:
 800eb08:	f890 3040 	ldrb.w	r3, [r0, #64]	@ 0x40
 800eb0c:	b183      	cbz	r3, 800eb30 <uxr_output_streams_confirmed+0x28>
 800eb0e:	b570      	push	{r4, r5, r6, lr}
 800eb10:	4606      	mov	r6, r0
 800eb12:	f100 0518 	add.w	r5, r0, #24
 800eb16:	2400      	movs	r4, #0
 800eb18:	e001      	b.n	800eb1e <uxr_output_streams_confirmed+0x16>
 800eb1a:	3528      	adds	r5, #40	@ 0x28
 800eb1c:	b138      	cbz	r0, 800eb2e <uxr_output_streams_confirmed+0x26>
 800eb1e:	4628      	mov	r0, r5
 800eb20:	f005 fe0a 	bl	8014738 <uxr_is_output_up_to_date>
 800eb24:	f896 3040 	ldrb.w	r3, [r6, #64]	@ 0x40
 800eb28:	3401      	adds	r4, #1
 800eb2a:	42a3      	cmp	r3, r4
 800eb2c:	d8f5      	bhi.n	800eb1a <uxr_output_streams_confirmed+0x12>
 800eb2e:	bd70      	pop	{r4, r5, r6, pc}
 800eb30:	2001      	movs	r0, #1
 800eb32:	4770      	bx	lr

0800eb34 <uxr_buffer_submessage_header>:
 800eb34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800eb36:	4604      	mov	r4, r0
 800eb38:	460e      	mov	r6, r1
 800eb3a:	2104      	movs	r1, #4
 800eb3c:	4615      	mov	r5, r2
 800eb3e:	461f      	mov	r7, r3
 800eb40:	f7fd fdc6 	bl	800c6d0 <ucdr_align_to>
 800eb44:	2301      	movs	r3, #1
 800eb46:	ea47 0203 	orr.w	r2, r7, r3
 800eb4a:	4631      	mov	r1, r6
 800eb4c:	7523      	strb	r3, [r4, #20]
 800eb4e:	4620      	mov	r0, r4
 800eb50:	462b      	mov	r3, r5
 800eb52:	f000 f8a3 	bl	800ec9c <uxr_serialize_submessage_header>
 800eb56:	4620      	mov	r0, r4
 800eb58:	f7fd fdd0 	bl	800c6fc <ucdr_buffer_remaining>
 800eb5c:	42a8      	cmp	r0, r5
 800eb5e:	bf34      	ite	cc
 800eb60:	2000      	movcc	r0, #0
 800eb62:	2001      	movcs	r0, #1
 800eb64:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800eb66:	bf00      	nop

0800eb68 <uxr_read_submessage_header>:
 800eb68:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800eb6c:	4604      	mov	r4, r0
 800eb6e:	460d      	mov	r5, r1
 800eb70:	2104      	movs	r1, #4
 800eb72:	4616      	mov	r6, r2
 800eb74:	4698      	mov	r8, r3
 800eb76:	f7fd fdab 	bl	800c6d0 <ucdr_align_to>
 800eb7a:	4620      	mov	r0, r4
 800eb7c:	f7fd fdbe 	bl	800c6fc <ucdr_buffer_remaining>
 800eb80:	2803      	cmp	r0, #3
 800eb82:	bf8c      	ite	hi
 800eb84:	2701      	movhi	r7, #1
 800eb86:	2700      	movls	r7, #0
 800eb88:	d802      	bhi.n	800eb90 <uxr_read_submessage_header+0x28>
 800eb8a:	4638      	mov	r0, r7
 800eb8c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800eb90:	4633      	mov	r3, r6
 800eb92:	4642      	mov	r2, r8
 800eb94:	4620      	mov	r0, r4
 800eb96:	4629      	mov	r1, r5
 800eb98:	f000 f894 	bl	800ecc4 <uxr_deserialize_submessage_header>
 800eb9c:	f898 3000 	ldrb.w	r3, [r8]
 800eba0:	f003 0201 	and.w	r2, r3, #1
 800eba4:	f003 03fe 	and.w	r3, r3, #254	@ 0xfe
 800eba8:	f888 3000 	strb.w	r3, [r8]
 800ebac:	7522      	strb	r2, [r4, #20]
 800ebae:	4638      	mov	r0, r7
 800ebb0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800ebb4 <uxr_submessage_padding>:
 800ebb4:	f010 0003 	ands.w	r0, r0, #3
 800ebb8:	bf18      	it	ne
 800ebba:	f1c0 0004 	rsbne	r0, r0, #4
 800ebbe:	4770      	bx	lr

0800ebc0 <uxr_millis>:
 800ebc0:	b510      	push	{r4, lr}
 800ebc2:	b084      	sub	sp, #16
 800ebc4:	4669      	mov	r1, sp
 800ebc6:	2001      	movs	r0, #1
 800ebc8:	f7f3 fb16 	bl	80021f8 <clock_gettime>
 800ebcc:	e89d 0015 	ldmia.w	sp, {r0, r2, r4}
 800ebd0:	4906      	ldr	r1, [pc, #24]	@ (800ebec <uxr_millis+0x2c>)
 800ebd2:	fba0 0301 	umull	r0, r3, r0, r1
 800ebd6:	1900      	adds	r0, r0, r4
 800ebd8:	fb01 3102 	mla	r1, r1, r2, r3
 800ebdc:	eb41 71e4 	adc.w	r1, r1, r4, asr #31
 800ebe0:	4a03      	ldr	r2, [pc, #12]	@ (800ebf0 <uxr_millis+0x30>)
 800ebe2:	2300      	movs	r3, #0
 800ebe4:	f7f1 ffa2 	bl	8000b2c <__aeabi_ldivmod>
 800ebe8:	b004      	add	sp, #16
 800ebea:	bd10      	pop	{r4, pc}
 800ebec:	3b9aca00 	.word	0x3b9aca00
 800ebf0:	000f4240 	.word	0x000f4240

0800ebf4 <uxr_nanos>:
 800ebf4:	b510      	push	{r4, lr}
 800ebf6:	b084      	sub	sp, #16
 800ebf8:	4669      	mov	r1, sp
 800ebfa:	2001      	movs	r0, #1
 800ebfc:	f7f3 fafc 	bl	80021f8 <clock_gettime>
 800ec00:	4a06      	ldr	r2, [pc, #24]	@ (800ec1c <uxr_nanos+0x28>)
 800ec02:	9800      	ldr	r0, [sp, #0]
 800ec04:	9902      	ldr	r1, [sp, #8]
 800ec06:	9c01      	ldr	r4, [sp, #4]
 800ec08:	fba0 0302 	umull	r0, r3, r0, r2
 800ec0c:	1840      	adds	r0, r0, r1
 800ec0e:	fb02 3304 	mla	r3, r2, r4, r3
 800ec12:	eb43 71e1 	adc.w	r1, r3, r1, asr #31
 800ec16:	b004      	add	sp, #16
 800ec18:	bd10      	pop	{r4, pc}
 800ec1a:	bf00      	nop
 800ec1c:	3b9aca00 	.word	0x3b9aca00

0800ec20 <uxr_serialize_message_header>:
 800ec20:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ec22:	b083      	sub	sp, #12
 800ec24:	4616      	mov	r6, r2
 800ec26:	4604      	mov	r4, r0
 800ec28:	9301      	str	r3, [sp, #4]
 800ec2a:	460d      	mov	r5, r1
 800ec2c:	9f08      	ldr	r7, [sp, #32]
 800ec2e:	f7fc fd89 	bl	800b744 <ucdr_serialize_uint8_t>
 800ec32:	4631      	mov	r1, r6
 800ec34:	4620      	mov	r0, r4
 800ec36:	f7fc fd85 	bl	800b744 <ucdr_serialize_uint8_t>
 800ec3a:	9a01      	ldr	r2, [sp, #4]
 800ec3c:	2101      	movs	r1, #1
 800ec3e:	4620      	mov	r0, r4
 800ec40:	f7fc fe2c 	bl	800b89c <ucdr_serialize_endian_uint16_t>
 800ec44:	062b      	lsls	r3, r5, #24
 800ec46:	d501      	bpl.n	800ec4c <uxr_serialize_message_header+0x2c>
 800ec48:	b003      	add	sp, #12
 800ec4a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ec4c:	2204      	movs	r2, #4
 800ec4e:	4639      	mov	r1, r7
 800ec50:	4620      	mov	r0, r4
 800ec52:	b003      	add	sp, #12
 800ec54:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 800ec58:	f004 bf18 	b.w	8013a8c <ucdr_serialize_array_uint8_t>

0800ec5c <uxr_deserialize_message_header>:
 800ec5c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ec5e:	b083      	sub	sp, #12
 800ec60:	4616      	mov	r6, r2
 800ec62:	4604      	mov	r4, r0
 800ec64:	9301      	str	r3, [sp, #4]
 800ec66:	460d      	mov	r5, r1
 800ec68:	9f08      	ldr	r7, [sp, #32]
 800ec6a:	f7fc fd81 	bl	800b770 <ucdr_deserialize_uint8_t>
 800ec6e:	4631      	mov	r1, r6
 800ec70:	4620      	mov	r0, r4
 800ec72:	f7fc fd7d 	bl	800b770 <ucdr_deserialize_uint8_t>
 800ec76:	9a01      	ldr	r2, [sp, #4]
 800ec78:	2101      	movs	r1, #1
 800ec7a:	4620      	mov	r0, r4
 800ec7c:	f7fc ff02 	bl	800ba84 <ucdr_deserialize_endian_uint16_t>
 800ec80:	f995 3000 	ldrsb.w	r3, [r5]
 800ec84:	2b00      	cmp	r3, #0
 800ec86:	da01      	bge.n	800ec8c <uxr_deserialize_message_header+0x30>
 800ec88:	b003      	add	sp, #12
 800ec8a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ec8c:	2204      	movs	r2, #4
 800ec8e:	4639      	mov	r1, r7
 800ec90:	4620      	mov	r0, r4
 800ec92:	b003      	add	sp, #12
 800ec94:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 800ec98:	f004 bf5c 	b.w	8013b54 <ucdr_deserialize_array_uint8_t>

0800ec9c <uxr_serialize_submessage_header>:
 800ec9c:	b530      	push	{r4, r5, lr}
 800ec9e:	b083      	sub	sp, #12
 800eca0:	4615      	mov	r5, r2
 800eca2:	4604      	mov	r4, r0
 800eca4:	9301      	str	r3, [sp, #4]
 800eca6:	f7fc fd4d 	bl	800b744 <ucdr_serialize_uint8_t>
 800ecaa:	4629      	mov	r1, r5
 800ecac:	4620      	mov	r0, r4
 800ecae:	f7fc fd49 	bl	800b744 <ucdr_serialize_uint8_t>
 800ecb2:	9a01      	ldr	r2, [sp, #4]
 800ecb4:	2101      	movs	r1, #1
 800ecb6:	4620      	mov	r0, r4
 800ecb8:	b003      	add	sp, #12
 800ecba:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800ecbe:	f7fc bded 	b.w	800b89c <ucdr_serialize_endian_uint16_t>
 800ecc2:	bf00      	nop

0800ecc4 <uxr_deserialize_submessage_header>:
 800ecc4:	b530      	push	{r4, r5, lr}
 800ecc6:	b083      	sub	sp, #12
 800ecc8:	4615      	mov	r5, r2
 800ecca:	4604      	mov	r4, r0
 800eccc:	9301      	str	r3, [sp, #4]
 800ecce:	f7fc fd4f 	bl	800b770 <ucdr_deserialize_uint8_t>
 800ecd2:	4629      	mov	r1, r5
 800ecd4:	4620      	mov	r0, r4
 800ecd6:	f7fc fd4b 	bl	800b770 <ucdr_deserialize_uint8_t>
 800ecda:	9a01      	ldr	r2, [sp, #4]
 800ecdc:	2101      	movs	r1, #1
 800ecde:	4620      	mov	r0, r4
 800ece0:	b003      	add	sp, #12
 800ece2:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800ece6:	f7fc becd 	b.w	800ba84 <ucdr_deserialize_endian_uint16_t>
 800ecea:	bf00      	nop

0800ecec <uxr_serialize_CLIENT_Representation>:
 800ecec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ecf0:	2204      	movs	r2, #4
 800ecf2:	460e      	mov	r6, r1
 800ecf4:	4605      	mov	r5, r0
 800ecf6:	f004 fec9 	bl	8013a8c <ucdr_serialize_array_uint8_t>
 800ecfa:	2202      	movs	r2, #2
 800ecfc:	4607      	mov	r7, r0
 800ecfe:	1d31      	adds	r1, r6, #4
 800ed00:	4628      	mov	r0, r5
 800ed02:	f004 fec3 	bl	8013a8c <ucdr_serialize_array_uint8_t>
 800ed06:	4038      	ands	r0, r7
 800ed08:	2202      	movs	r2, #2
 800ed0a:	1db1      	adds	r1, r6, #6
 800ed0c:	b2c7      	uxtb	r7, r0
 800ed0e:	4628      	mov	r0, r5
 800ed10:	f004 febc 	bl	8013a8c <ucdr_serialize_array_uint8_t>
 800ed14:	2204      	movs	r2, #4
 800ed16:	4007      	ands	r7, r0
 800ed18:	f106 0108 	add.w	r1, r6, #8
 800ed1c:	4628      	mov	r0, r5
 800ed1e:	f004 feb5 	bl	8013a8c <ucdr_serialize_array_uint8_t>
 800ed22:	7b31      	ldrb	r1, [r6, #12]
 800ed24:	4007      	ands	r7, r0
 800ed26:	4628      	mov	r0, r5
 800ed28:	f7fc fd0c 	bl	800b744 <ucdr_serialize_uint8_t>
 800ed2c:	7b71      	ldrb	r1, [r6, #13]
 800ed2e:	4007      	ands	r7, r0
 800ed30:	4628      	mov	r0, r5
 800ed32:	f7fc fcd9 	bl	800b6e8 <ucdr_serialize_bool>
 800ed36:	7b73      	ldrb	r3, [r6, #13]
 800ed38:	ea07 0800 	and.w	r8, r7, r0
 800ed3c:	b93b      	cbnz	r3, 800ed4e <uxr_serialize_CLIENT_Representation+0x62>
 800ed3e:	8bb1      	ldrh	r1, [r6, #28]
 800ed40:	4628      	mov	r0, r5
 800ed42:	f7fc fd2b 	bl	800b79c <ucdr_serialize_uint16_t>
 800ed46:	ea08 0000 	and.w	r0, r8, r0
 800ed4a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ed4e:	6931      	ldr	r1, [r6, #16]
 800ed50:	4628      	mov	r0, r5
 800ed52:	f7fc ff0d 	bl	800bb70 <ucdr_serialize_uint32_t>
 800ed56:	6933      	ldr	r3, [r6, #16]
 800ed58:	b1e3      	cbz	r3, 800ed94 <uxr_serialize_CLIENT_Representation+0xa8>
 800ed5a:	b1c0      	cbz	r0, 800ed8e <uxr_serialize_CLIENT_Representation+0xa2>
 800ed5c:	4637      	mov	r7, r6
 800ed5e:	f04f 0900 	mov.w	r9, #0
 800ed62:	e001      	b.n	800ed68 <uxr_serialize_CLIENT_Representation+0x7c>
 800ed64:	3708      	adds	r7, #8
 800ed66:	b194      	cbz	r4, 800ed8e <uxr_serialize_CLIENT_Representation+0xa2>
 800ed68:	6979      	ldr	r1, [r7, #20]
 800ed6a:	4628      	mov	r0, r5
 800ed6c:	f004 ffae 	bl	8013ccc <ucdr_serialize_string>
 800ed70:	69b9      	ldr	r1, [r7, #24]
 800ed72:	4604      	mov	r4, r0
 800ed74:	4628      	mov	r0, r5
 800ed76:	f004 ffa9 	bl	8013ccc <ucdr_serialize_string>
 800ed7a:	6933      	ldr	r3, [r6, #16]
 800ed7c:	f109 0901 	add.w	r9, r9, #1
 800ed80:	4004      	ands	r4, r0
 800ed82:	4599      	cmp	r9, r3
 800ed84:	b2e4      	uxtb	r4, r4
 800ed86:	d3ed      	bcc.n	800ed64 <uxr_serialize_CLIENT_Representation+0x78>
 800ed88:	ea08 0804 	and.w	r8, r8, r4
 800ed8c:	e7d7      	b.n	800ed3e <uxr_serialize_CLIENT_Representation+0x52>
 800ed8e:	f04f 0800 	mov.w	r8, #0
 800ed92:	e7d4      	b.n	800ed3e <uxr_serialize_CLIENT_Representation+0x52>
 800ed94:	ea08 0800 	and.w	r8, r8, r0
 800ed98:	e7d1      	b.n	800ed3e <uxr_serialize_CLIENT_Representation+0x52>
 800ed9a:	bf00      	nop

0800ed9c <uxr_deserialize_CLIENT_Representation>:
 800ed9c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800eda0:	2204      	movs	r2, #4
 800eda2:	460c      	mov	r4, r1
 800eda4:	4605      	mov	r5, r0
 800eda6:	f004 fed5 	bl	8013b54 <ucdr_deserialize_array_uint8_t>
 800edaa:	2202      	movs	r2, #2
 800edac:	4607      	mov	r7, r0
 800edae:	1d21      	adds	r1, r4, #4
 800edb0:	4628      	mov	r0, r5
 800edb2:	f004 fecf 	bl	8013b54 <ucdr_deserialize_array_uint8_t>
 800edb6:	4038      	ands	r0, r7
 800edb8:	2202      	movs	r2, #2
 800edba:	1da1      	adds	r1, r4, #6
 800edbc:	b2c6      	uxtb	r6, r0
 800edbe:	4628      	mov	r0, r5
 800edc0:	f004 fec8 	bl	8013b54 <ucdr_deserialize_array_uint8_t>
 800edc4:	2204      	movs	r2, #4
 800edc6:	4006      	ands	r6, r0
 800edc8:	f104 0108 	add.w	r1, r4, #8
 800edcc:	4628      	mov	r0, r5
 800edce:	f004 fec1 	bl	8013b54 <ucdr_deserialize_array_uint8_t>
 800edd2:	f104 010c 	add.w	r1, r4, #12
 800edd6:	4006      	ands	r6, r0
 800edd8:	4628      	mov	r0, r5
 800edda:	f7fc fcc9 	bl	800b770 <ucdr_deserialize_uint8_t>
 800edde:	f104 010d 	add.w	r1, r4, #13
 800ede2:	ea06 0700 	and.w	r7, r6, r0
 800ede6:	4628      	mov	r0, r5
 800ede8:	f7fc fc94 	bl	800b714 <ucdr_deserialize_bool>
 800edec:	7b63      	ldrb	r3, [r4, #13]
 800edee:	4007      	ands	r7, r0
 800edf0:	b93b      	cbnz	r3, 800ee02 <uxr_deserialize_CLIENT_Representation+0x66>
 800edf2:	f104 011c 	add.w	r1, r4, #28
 800edf6:	4628      	mov	r0, r5
 800edf8:	f7fc fdd0 	bl	800b99c <ucdr_deserialize_uint16_t>
 800edfc:	4038      	ands	r0, r7
 800edfe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ee02:	f104 0110 	add.w	r1, r4, #16
 800ee06:	4628      	mov	r0, r5
 800ee08:	f7fc ffe2 	bl	800bdd0 <ucdr_deserialize_uint32_t>
 800ee0c:	6923      	ldr	r3, [r4, #16]
 800ee0e:	2b01      	cmp	r3, #1
 800ee10:	d903      	bls.n	800ee1a <uxr_deserialize_CLIENT_Representation+0x7e>
 800ee12:	2301      	movs	r3, #1
 800ee14:	75ab      	strb	r3, [r5, #22]
 800ee16:	2700      	movs	r7, #0
 800ee18:	e7eb      	b.n	800edf2 <uxr_deserialize_CLIENT_Representation+0x56>
 800ee1a:	b30b      	cbz	r3, 800ee60 <uxr_deserialize_CLIENT_Representation+0xc4>
 800ee1c:	2800      	cmp	r0, #0
 800ee1e:	d0fa      	beq.n	800ee16 <uxr_deserialize_CLIENT_Representation+0x7a>
 800ee20:	46a0      	mov	r8, r4
 800ee22:	f04f 0900 	mov.w	r9, #0
 800ee26:	e001      	b.n	800ee2c <uxr_deserialize_CLIENT_Representation+0x90>
 800ee28:	2e00      	cmp	r6, #0
 800ee2a:	d0f4      	beq.n	800ee16 <uxr_deserialize_CLIENT_Representation+0x7a>
 800ee2c:	f8d8 1014 	ldr.w	r1, [r8, #20]
 800ee30:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800ee34:	4628      	mov	r0, r5
 800ee36:	f004 ff59 	bl	8013cec <ucdr_deserialize_string>
 800ee3a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800ee3e:	4606      	mov	r6, r0
 800ee40:	f8d8 1018 	ldr.w	r1, [r8, #24]
 800ee44:	4628      	mov	r0, r5
 800ee46:	f004 ff51 	bl	8013cec <ucdr_deserialize_string>
 800ee4a:	6923      	ldr	r3, [r4, #16]
 800ee4c:	f109 0901 	add.w	r9, r9, #1
 800ee50:	4006      	ands	r6, r0
 800ee52:	4599      	cmp	r9, r3
 800ee54:	f108 0808 	add.w	r8, r8, #8
 800ee58:	b2f6      	uxtb	r6, r6
 800ee5a:	d3e5      	bcc.n	800ee28 <uxr_deserialize_CLIENT_Representation+0x8c>
 800ee5c:	4037      	ands	r7, r6
 800ee5e:	e7c8      	b.n	800edf2 <uxr_deserialize_CLIENT_Representation+0x56>
 800ee60:	4007      	ands	r7, r0
 800ee62:	e7c6      	b.n	800edf2 <uxr_deserialize_CLIENT_Representation+0x56>

0800ee64 <uxr_serialize_AGENT_Representation>:
 800ee64:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ee68:	2204      	movs	r2, #4
 800ee6a:	460f      	mov	r7, r1
 800ee6c:	4605      	mov	r5, r0
 800ee6e:	f004 fe0d 	bl	8013a8c <ucdr_serialize_array_uint8_t>
 800ee72:	2202      	movs	r2, #2
 800ee74:	4604      	mov	r4, r0
 800ee76:	1d39      	adds	r1, r7, #4
 800ee78:	4628      	mov	r0, r5
 800ee7a:	f004 fe07 	bl	8013a8c <ucdr_serialize_array_uint8_t>
 800ee7e:	4020      	ands	r0, r4
 800ee80:	2202      	movs	r2, #2
 800ee82:	1db9      	adds	r1, r7, #6
 800ee84:	b2c4      	uxtb	r4, r0
 800ee86:	4628      	mov	r0, r5
 800ee88:	f004 fe00 	bl	8013a8c <ucdr_serialize_array_uint8_t>
 800ee8c:	7a39      	ldrb	r1, [r7, #8]
 800ee8e:	4004      	ands	r4, r0
 800ee90:	4628      	mov	r0, r5
 800ee92:	f7fc fc29 	bl	800b6e8 <ucdr_serialize_bool>
 800ee96:	7a3b      	ldrb	r3, [r7, #8]
 800ee98:	ea00 0804 	and.w	r8, r0, r4
 800ee9c:	b913      	cbnz	r3, 800eea4 <uxr_serialize_AGENT_Representation+0x40>
 800ee9e:	4640      	mov	r0, r8
 800eea0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800eea4:	68f9      	ldr	r1, [r7, #12]
 800eea6:	4628      	mov	r0, r5
 800eea8:	f7fc fe62 	bl	800bb70 <ucdr_serialize_uint32_t>
 800eeac:	68fb      	ldr	r3, [r7, #12]
 800eeae:	b303      	cbz	r3, 800eef2 <uxr_serialize_AGENT_Representation+0x8e>
 800eeb0:	b1d0      	cbz	r0, 800eee8 <uxr_serialize_AGENT_Representation+0x84>
 800eeb2:	463e      	mov	r6, r7
 800eeb4:	f04f 0900 	mov.w	r9, #0
 800eeb8:	e001      	b.n	800eebe <uxr_serialize_AGENT_Representation+0x5a>
 800eeba:	3608      	adds	r6, #8
 800eebc:	b1a4      	cbz	r4, 800eee8 <uxr_serialize_AGENT_Representation+0x84>
 800eebe:	6931      	ldr	r1, [r6, #16]
 800eec0:	4628      	mov	r0, r5
 800eec2:	f004 ff03 	bl	8013ccc <ucdr_serialize_string>
 800eec6:	6971      	ldr	r1, [r6, #20]
 800eec8:	4604      	mov	r4, r0
 800eeca:	4628      	mov	r0, r5
 800eecc:	f004 fefe 	bl	8013ccc <ucdr_serialize_string>
 800eed0:	68fb      	ldr	r3, [r7, #12]
 800eed2:	f109 0901 	add.w	r9, r9, #1
 800eed6:	4004      	ands	r4, r0
 800eed8:	4599      	cmp	r9, r3
 800eeda:	b2e4      	uxtb	r4, r4
 800eedc:	d3ed      	bcc.n	800eeba <uxr_serialize_AGENT_Representation+0x56>
 800eede:	ea08 0804 	and.w	r8, r8, r4
 800eee2:	4640      	mov	r0, r8
 800eee4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800eee8:	f04f 0800 	mov.w	r8, #0
 800eeec:	4640      	mov	r0, r8
 800eeee:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800eef2:	ea08 0800 	and.w	r8, r8, r0
 800eef6:	e7d2      	b.n	800ee9e <uxr_serialize_AGENT_Representation+0x3a>

0800eef8 <uxr_serialize_DATAWRITER_Representation>:
 800eef8:	b570      	push	{r4, r5, r6, lr}
 800eefa:	460d      	mov	r5, r1
 800eefc:	7809      	ldrb	r1, [r1, #0]
 800eefe:	4606      	mov	r6, r0
 800ef00:	f7fc fc20 	bl	800b744 <ucdr_serialize_uint8_t>
 800ef04:	4604      	mov	r4, r0
 800ef06:	b130      	cbz	r0, 800ef16 <uxr_serialize_DATAWRITER_Representation+0x1e>
 800ef08:	782b      	ldrb	r3, [r5, #0]
 800ef0a:	2b02      	cmp	r3, #2
 800ef0c:	d00c      	beq.n	800ef28 <uxr_serialize_DATAWRITER_Representation+0x30>
 800ef0e:	2b03      	cmp	r3, #3
 800ef10:	d010      	beq.n	800ef34 <uxr_serialize_DATAWRITER_Representation+0x3c>
 800ef12:	2b01      	cmp	r3, #1
 800ef14:	d008      	beq.n	800ef28 <uxr_serialize_DATAWRITER_Representation+0x30>
 800ef16:	2202      	movs	r2, #2
 800ef18:	f505 7102 	add.w	r1, r5, #520	@ 0x208
 800ef1c:	4630      	mov	r0, r6
 800ef1e:	f004 fdb5 	bl	8013a8c <ucdr_serialize_array_uint8_t>
 800ef22:	4020      	ands	r0, r4
 800ef24:	b2c0      	uxtb	r0, r0
 800ef26:	bd70      	pop	{r4, r5, r6, pc}
 800ef28:	6869      	ldr	r1, [r5, #4]
 800ef2a:	4630      	mov	r0, r6
 800ef2c:	f004 fece 	bl	8013ccc <ucdr_serialize_string>
 800ef30:	4604      	mov	r4, r0
 800ef32:	e7f0      	b.n	800ef16 <uxr_serialize_DATAWRITER_Representation+0x1e>
 800ef34:	4629      	mov	r1, r5
 800ef36:	4630      	mov	r0, r6
 800ef38:	f851 2f04 	ldr.w	r2, [r1, #4]!
 800ef3c:	3104      	adds	r1, #4
 800ef3e:	f004 fe99 	bl	8013c74 <ucdr_serialize_sequence_uint8_t>
 800ef42:	4604      	mov	r4, r0
 800ef44:	e7e7      	b.n	800ef16 <uxr_serialize_DATAWRITER_Representation+0x1e>
 800ef46:	bf00      	nop

0800ef48 <uxr_serialize_ObjectVariant.part.0>:
 800ef48:	b570      	push	{r4, r5, r6, lr}
 800ef4a:	780b      	ldrb	r3, [r1, #0]
 800ef4c:	3b01      	subs	r3, #1
 800ef4e:	460c      	mov	r4, r1
 800ef50:	4605      	mov	r5, r0
 800ef52:	2b0d      	cmp	r3, #13
 800ef54:	d854      	bhi.n	800f000 <uxr_serialize_ObjectVariant.part.0+0xb8>
 800ef56:	e8df f003 	tbb	[pc, r3]
 800ef5a:	0730      	.short	0x0730
 800ef5c:	07071b1b 	.word	0x07071b1b
 800ef60:	0c530707 	.word	0x0c530707
 800ef64:	494e0c0c 	.word	0x494e0c0c
 800ef68:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800ef6c:	3104      	adds	r1, #4
 800ef6e:	f7ff bfc3 	b.w	800eef8 <uxr_serialize_DATAWRITER_Representation>
 800ef72:	7909      	ldrb	r1, [r1, #4]
 800ef74:	f7fc fbe6 	bl	800b744 <ucdr_serialize_uint8_t>
 800ef78:	b1e8      	cbz	r0, 800efb6 <uxr_serialize_ObjectVariant.part.0+0x6e>
 800ef7a:	7923      	ldrb	r3, [r4, #4]
 800ef7c:	2b01      	cmp	r3, #1
 800ef7e:	d001      	beq.n	800ef84 <uxr_serialize_ObjectVariant.part.0+0x3c>
 800ef80:	2b02      	cmp	r3, #2
 800ef82:	d13d      	bne.n	800f000 <uxr_serialize_ObjectVariant.part.0+0xb8>
 800ef84:	68a1      	ldr	r1, [r4, #8]
 800ef86:	4628      	mov	r0, r5
 800ef88:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800ef8c:	f004 be9e 	b.w	8013ccc <ucdr_serialize_string>
 800ef90:	7909      	ldrb	r1, [r1, #4]
 800ef92:	f7fc fbd7 	bl	800b744 <ucdr_serialize_uint8_t>
 800ef96:	4606      	mov	r6, r0
 800ef98:	b120      	cbz	r0, 800efa4 <uxr_serialize_ObjectVariant.part.0+0x5c>
 800ef9a:	7923      	ldrb	r3, [r4, #4]
 800ef9c:	2b02      	cmp	r3, #2
 800ef9e:	d039      	beq.n	800f014 <uxr_serialize_ObjectVariant.part.0+0xcc>
 800efa0:	2b03      	cmp	r3, #3
 800efa2:	d02f      	beq.n	800f004 <uxr_serialize_ObjectVariant.part.0+0xbc>
 800efa4:	2202      	movs	r2, #2
 800efa6:	f504 7103 	add.w	r1, r4, #524	@ 0x20c
 800efaa:	4628      	mov	r0, r5
 800efac:	f004 fd6e 	bl	8013a8c <ucdr_serialize_array_uint8_t>
 800efb0:	4030      	ands	r0, r6
 800efb2:	b2c0      	uxtb	r0, r0
 800efb4:	bd70      	pop	{r4, r5, r6, pc}
 800efb6:	2000      	movs	r0, #0
 800efb8:	bd70      	pop	{r4, r5, r6, pc}
 800efba:	7909      	ldrb	r1, [r1, #4]
 800efbc:	f7fc fbc2 	bl	800b744 <ucdr_serialize_uint8_t>
 800efc0:	4606      	mov	r6, r0
 800efc2:	b158      	cbz	r0, 800efdc <uxr_serialize_ObjectVariant.part.0+0x94>
 800efc4:	7923      	ldrb	r3, [r4, #4]
 800efc6:	2b02      	cmp	r3, #2
 800efc8:	d003      	beq.n	800efd2 <uxr_serialize_ObjectVariant.part.0+0x8a>
 800efca:	2b03      	cmp	r3, #3
 800efcc:	d028      	beq.n	800f020 <uxr_serialize_ObjectVariant.part.0+0xd8>
 800efce:	2b01      	cmp	r3, #1
 800efd0:	d104      	bne.n	800efdc <uxr_serialize_ObjectVariant.part.0+0x94>
 800efd2:	68a1      	ldr	r1, [r4, #8]
 800efd4:	4628      	mov	r0, r5
 800efd6:	f004 fe79 	bl	8013ccc <ucdr_serialize_string>
 800efda:	4606      	mov	r6, r0
 800efdc:	f9b4 120c 	ldrsh.w	r1, [r4, #524]	@ 0x20c
 800efe0:	4628      	mov	r0, r5
 800efe2:	f7fd f8eb 	bl	800c1bc <ucdr_serialize_int16_t>
 800efe6:	4030      	ands	r0, r6
 800efe8:	b2c0      	uxtb	r0, r0
 800efea:	bd70      	pop	{r4, r5, r6, pc}
 800efec:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800eff0:	3104      	adds	r1, #4
 800eff2:	f7ff be7b 	b.w	800ecec <uxr_serialize_CLIENT_Representation>
 800eff6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800effa:	3104      	adds	r1, #4
 800effc:	f7ff bf32 	b.w	800ee64 <uxr_serialize_AGENT_Representation>
 800f000:	2001      	movs	r0, #1
 800f002:	bd70      	pop	{r4, r5, r6, pc}
 800f004:	68a2      	ldr	r2, [r4, #8]
 800f006:	f104 010c 	add.w	r1, r4, #12
 800f00a:	4628      	mov	r0, r5
 800f00c:	f004 fe32 	bl	8013c74 <ucdr_serialize_sequence_uint8_t>
 800f010:	4606      	mov	r6, r0
 800f012:	e7c7      	b.n	800efa4 <uxr_serialize_ObjectVariant.part.0+0x5c>
 800f014:	68a1      	ldr	r1, [r4, #8]
 800f016:	4628      	mov	r0, r5
 800f018:	f004 fe58 	bl	8013ccc <ucdr_serialize_string>
 800f01c:	4606      	mov	r6, r0
 800f01e:	e7c1      	b.n	800efa4 <uxr_serialize_ObjectVariant.part.0+0x5c>
 800f020:	68a2      	ldr	r2, [r4, #8]
 800f022:	f104 010c 	add.w	r1, r4, #12
 800f026:	4628      	mov	r0, r5
 800f028:	f004 fe24 	bl	8013c74 <ucdr_serialize_sequence_uint8_t>
 800f02c:	4606      	mov	r6, r0
 800f02e:	e7d5      	b.n	800efdc <uxr_serialize_ObjectVariant.part.0+0x94>

0800f030 <uxr_deserialize_DATAWRITER_Representation>:
 800f030:	b570      	push	{r4, r5, r6, lr}
 800f032:	4606      	mov	r6, r0
 800f034:	460d      	mov	r5, r1
 800f036:	f7fc fb9b 	bl	800b770 <ucdr_deserialize_uint8_t>
 800f03a:	4604      	mov	r4, r0
 800f03c:	b130      	cbz	r0, 800f04c <uxr_deserialize_DATAWRITER_Representation+0x1c>
 800f03e:	782b      	ldrb	r3, [r5, #0]
 800f040:	2b02      	cmp	r3, #2
 800f042:	d00c      	beq.n	800f05e <uxr_deserialize_DATAWRITER_Representation+0x2e>
 800f044:	2b03      	cmp	r3, #3
 800f046:	d012      	beq.n	800f06e <uxr_deserialize_DATAWRITER_Representation+0x3e>
 800f048:	2b01      	cmp	r3, #1
 800f04a:	d008      	beq.n	800f05e <uxr_deserialize_DATAWRITER_Representation+0x2e>
 800f04c:	2202      	movs	r2, #2
 800f04e:	f505 7102 	add.w	r1, r5, #520	@ 0x208
 800f052:	4630      	mov	r0, r6
 800f054:	f004 fd7e 	bl	8013b54 <ucdr_deserialize_array_uint8_t>
 800f058:	4020      	ands	r0, r4
 800f05a:	b2c0      	uxtb	r0, r0
 800f05c:	bd70      	pop	{r4, r5, r6, pc}
 800f05e:	6869      	ldr	r1, [r5, #4]
 800f060:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800f064:	4630      	mov	r0, r6
 800f066:	f004 fe41 	bl	8013cec <ucdr_deserialize_string>
 800f06a:	4604      	mov	r4, r0
 800f06c:	e7ee      	b.n	800f04c <uxr_deserialize_DATAWRITER_Representation+0x1c>
 800f06e:	1d2b      	adds	r3, r5, #4
 800f070:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800f074:	f105 0108 	add.w	r1, r5, #8
 800f078:	4630      	mov	r0, r6
 800f07a:	f004 fe0d 	bl	8013c98 <ucdr_deserialize_sequence_uint8_t>
 800f07e:	4604      	mov	r4, r0
 800f080:	e7e4      	b.n	800f04c <uxr_deserialize_DATAWRITER_Representation+0x1c>
 800f082:	bf00      	nop

0800f084 <uxr_serialize_OBJK_DomainParticipant_Binary>:
 800f084:	b570      	push	{r4, r5, r6, lr}
 800f086:	460d      	mov	r5, r1
 800f088:	7809      	ldrb	r1, [r1, #0]
 800f08a:	4606      	mov	r6, r0
 800f08c:	f7fc fb2c 	bl	800b6e8 <ucdr_serialize_bool>
 800f090:	782b      	ldrb	r3, [r5, #0]
 800f092:	4604      	mov	r4, r0
 800f094:	b94b      	cbnz	r3, 800f0aa <uxr_serialize_OBJK_DomainParticipant_Binary+0x26>
 800f096:	7a29      	ldrb	r1, [r5, #8]
 800f098:	4630      	mov	r0, r6
 800f09a:	f7fc fb25 	bl	800b6e8 <ucdr_serialize_bool>
 800f09e:	7a2b      	ldrb	r3, [r5, #8]
 800f0a0:	4004      	ands	r4, r0
 800f0a2:	b2e4      	uxtb	r4, r4
 800f0a4:	b943      	cbnz	r3, 800f0b8 <uxr_serialize_OBJK_DomainParticipant_Binary+0x34>
 800f0a6:	4620      	mov	r0, r4
 800f0a8:	bd70      	pop	{r4, r5, r6, pc}
 800f0aa:	6869      	ldr	r1, [r5, #4]
 800f0ac:	4630      	mov	r0, r6
 800f0ae:	f004 fe0d 	bl	8013ccc <ucdr_serialize_string>
 800f0b2:	4004      	ands	r4, r0
 800f0b4:	b2e4      	uxtb	r4, r4
 800f0b6:	e7ee      	b.n	800f096 <uxr_serialize_OBJK_DomainParticipant_Binary+0x12>
 800f0b8:	68e9      	ldr	r1, [r5, #12]
 800f0ba:	4630      	mov	r0, r6
 800f0bc:	f004 fe06 	bl	8013ccc <ucdr_serialize_string>
 800f0c0:	4004      	ands	r4, r0
 800f0c2:	4620      	mov	r0, r4
 800f0c4:	bd70      	pop	{r4, r5, r6, pc}
 800f0c6:	bf00      	nop

0800f0c8 <uxr_serialize_OBJK_Topic_Binary>:
 800f0c8:	b570      	push	{r4, r5, r6, lr}
 800f0ca:	460d      	mov	r5, r1
 800f0cc:	6809      	ldr	r1, [r1, #0]
 800f0ce:	4606      	mov	r6, r0
 800f0d0:	f004 fdfc 	bl	8013ccc <ucdr_serialize_string>
 800f0d4:	7929      	ldrb	r1, [r5, #4]
 800f0d6:	4604      	mov	r4, r0
 800f0d8:	4630      	mov	r0, r6
 800f0da:	f7fc fb05 	bl	800b6e8 <ucdr_serialize_bool>
 800f0de:	792b      	ldrb	r3, [r5, #4]
 800f0e0:	4004      	ands	r4, r0
 800f0e2:	b2e4      	uxtb	r4, r4
 800f0e4:	b943      	cbnz	r3, 800f0f8 <uxr_serialize_OBJK_Topic_Binary+0x30>
 800f0e6:	7b29      	ldrb	r1, [r5, #12]
 800f0e8:	4630      	mov	r0, r6
 800f0ea:	f7fc fafd 	bl	800b6e8 <ucdr_serialize_bool>
 800f0ee:	7b2b      	ldrb	r3, [r5, #12]
 800f0f0:	4004      	ands	r4, r0
 800f0f2:	b93b      	cbnz	r3, 800f104 <uxr_serialize_OBJK_Topic_Binary+0x3c>
 800f0f4:	4620      	mov	r0, r4
 800f0f6:	bd70      	pop	{r4, r5, r6, pc}
 800f0f8:	68a9      	ldr	r1, [r5, #8]
 800f0fa:	4630      	mov	r0, r6
 800f0fc:	f004 fde6 	bl	8013ccc <ucdr_serialize_string>
 800f100:	4004      	ands	r4, r0
 800f102:	e7f0      	b.n	800f0e6 <uxr_serialize_OBJK_Topic_Binary+0x1e>
 800f104:	6929      	ldr	r1, [r5, #16]
 800f106:	4630      	mov	r0, r6
 800f108:	f004 fde0 	bl	8013ccc <ucdr_serialize_string>
 800f10c:	4004      	ands	r4, r0
 800f10e:	b2e4      	uxtb	r4, r4
 800f110:	4620      	mov	r0, r4
 800f112:	bd70      	pop	{r4, r5, r6, pc}

0800f114 <uxr_serialize_OBJK_Subscriber_Binary_Qos>:
 800f114:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f118:	460c      	mov	r4, r1
 800f11a:	7809      	ldrb	r1, [r1, #0]
 800f11c:	4606      	mov	r6, r0
 800f11e:	f7fc fae3 	bl	800b6e8 <ucdr_serialize_bool>
 800f122:	7823      	ldrb	r3, [r4, #0]
 800f124:	4605      	mov	r5, r0
 800f126:	b96b      	cbnz	r3, 800f144 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x30>
 800f128:	f894 1028 	ldrb.w	r1, [r4, #40]	@ 0x28
 800f12c:	4630      	mov	r0, r6
 800f12e:	f7fc fadb 	bl	800b6e8 <ucdr_serialize_bool>
 800f132:	f894 3028 	ldrb.w	r3, [r4, #40]	@ 0x28
 800f136:	4005      	ands	r5, r0
 800f138:	b2ed      	uxtb	r5, r5
 800f13a:	2b00      	cmp	r3, #0
 800f13c:	d169      	bne.n	800f212 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xfe>
 800f13e:	4628      	mov	r0, r5
 800f140:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f144:	6861      	ldr	r1, [r4, #4]
 800f146:	4630      	mov	r0, r6
 800f148:	f7fc fd12 	bl	800bb70 <ucdr_serialize_uint32_t>
 800f14c:	6863      	ldr	r3, [r4, #4]
 800f14e:	2b00      	cmp	r3, #0
 800f150:	d06b      	beq.n	800f22a <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x116>
 800f152:	2800      	cmp	r0, #0
 800f154:	d067      	beq.n	800f226 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 800f156:	68a1      	ldr	r1, [r4, #8]
 800f158:	4630      	mov	r0, r6
 800f15a:	f004 fdb7 	bl	8013ccc <ucdr_serialize_string>
 800f15e:	6863      	ldr	r3, [r4, #4]
 800f160:	2b01      	cmp	r3, #1
 800f162:	d953      	bls.n	800f20c <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 800f164:	2800      	cmp	r0, #0
 800f166:	d05e      	beq.n	800f226 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 800f168:	68e1      	ldr	r1, [r4, #12]
 800f16a:	4630      	mov	r0, r6
 800f16c:	f004 fdae 	bl	8013ccc <ucdr_serialize_string>
 800f170:	6863      	ldr	r3, [r4, #4]
 800f172:	2b02      	cmp	r3, #2
 800f174:	d94a      	bls.n	800f20c <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 800f176:	2800      	cmp	r0, #0
 800f178:	d055      	beq.n	800f226 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 800f17a:	6921      	ldr	r1, [r4, #16]
 800f17c:	4630      	mov	r0, r6
 800f17e:	f004 fda5 	bl	8013ccc <ucdr_serialize_string>
 800f182:	6863      	ldr	r3, [r4, #4]
 800f184:	2b03      	cmp	r3, #3
 800f186:	d941      	bls.n	800f20c <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 800f188:	2800      	cmp	r0, #0
 800f18a:	d04c      	beq.n	800f226 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 800f18c:	6961      	ldr	r1, [r4, #20]
 800f18e:	4630      	mov	r0, r6
 800f190:	f004 fd9c 	bl	8013ccc <ucdr_serialize_string>
 800f194:	6863      	ldr	r3, [r4, #4]
 800f196:	2b04      	cmp	r3, #4
 800f198:	d938      	bls.n	800f20c <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 800f19a:	2800      	cmp	r0, #0
 800f19c:	d043      	beq.n	800f226 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 800f19e:	69a1      	ldr	r1, [r4, #24]
 800f1a0:	4630      	mov	r0, r6
 800f1a2:	f004 fd93 	bl	8013ccc <ucdr_serialize_string>
 800f1a6:	6863      	ldr	r3, [r4, #4]
 800f1a8:	2b05      	cmp	r3, #5
 800f1aa:	d92f      	bls.n	800f20c <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 800f1ac:	2800      	cmp	r0, #0
 800f1ae:	d03a      	beq.n	800f226 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 800f1b0:	69e1      	ldr	r1, [r4, #28]
 800f1b2:	4630      	mov	r0, r6
 800f1b4:	f004 fd8a 	bl	8013ccc <ucdr_serialize_string>
 800f1b8:	6863      	ldr	r3, [r4, #4]
 800f1ba:	2b06      	cmp	r3, #6
 800f1bc:	d926      	bls.n	800f20c <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 800f1be:	b390      	cbz	r0, 800f226 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 800f1c0:	6a21      	ldr	r1, [r4, #32]
 800f1c2:	4630      	mov	r0, r6
 800f1c4:	f004 fd82 	bl	8013ccc <ucdr_serialize_string>
 800f1c8:	6863      	ldr	r3, [r4, #4]
 800f1ca:	2b07      	cmp	r3, #7
 800f1cc:	d91e      	bls.n	800f20c <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 800f1ce:	b350      	cbz	r0, 800f226 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 800f1d0:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 800f1d2:	4630      	mov	r0, r6
 800f1d4:	f004 fd7a 	bl	8013ccc <ucdr_serialize_string>
 800f1d8:	6863      	ldr	r3, [r4, #4]
 800f1da:	2b08      	cmp	r3, #8
 800f1dc:	d916      	bls.n	800f20c <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 800f1de:	b310      	cbz	r0, 800f226 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 800f1e0:	6aa1      	ldr	r1, [r4, #40]	@ 0x28
 800f1e2:	4630      	mov	r0, r6
 800f1e4:	f004 fd72 	bl	8013ccc <ucdr_serialize_string>
 800f1e8:	6863      	ldr	r3, [r4, #4]
 800f1ea:	2b09      	cmp	r3, #9
 800f1ec:	d90e      	bls.n	800f20c <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 800f1ee:	b1d0      	cbz	r0, 800f226 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 800f1f0:	f104 082c 	add.w	r8, r4, #44	@ 0x2c
 800f1f4:	2709      	movs	r7, #9
 800f1f6:	e000      	b.n	800f1fa <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xe6>
 800f1f8:	b1a8      	cbz	r0, 800f226 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 800f1fa:	f858 1b04 	ldr.w	r1, [r8], #4
 800f1fe:	4630      	mov	r0, r6
 800f200:	f004 fd64 	bl	8013ccc <ucdr_serialize_string>
 800f204:	6862      	ldr	r2, [r4, #4]
 800f206:	3701      	adds	r7, #1
 800f208:	4297      	cmp	r7, r2
 800f20a:	d3f5      	bcc.n	800f1f8 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xe4>
 800f20c:	4005      	ands	r5, r0
 800f20e:	b2ed      	uxtb	r5, r5
 800f210:	e78a      	b.n	800f128 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x14>
 800f212:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 800f214:	f104 0130 	add.w	r1, r4, #48	@ 0x30
 800f218:	4630      	mov	r0, r6
 800f21a:	f004 fd2b 	bl	8013c74 <ucdr_serialize_sequence_uint8_t>
 800f21e:	4005      	ands	r5, r0
 800f220:	4628      	mov	r0, r5
 800f222:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f226:	2500      	movs	r5, #0
 800f228:	e77e      	b.n	800f128 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x14>
 800f22a:	4028      	ands	r0, r5
 800f22c:	b2c5      	uxtb	r5, r0
 800f22e:	e77b      	b.n	800f128 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x14>

0800f230 <uxr_serialize_OBJK_Subscriber_Binary>:
 800f230:	b570      	push	{r4, r5, r6, lr}
 800f232:	460d      	mov	r5, r1
 800f234:	7809      	ldrb	r1, [r1, #0]
 800f236:	4606      	mov	r6, r0
 800f238:	f7fc fa56 	bl	800b6e8 <ucdr_serialize_bool>
 800f23c:	782b      	ldrb	r3, [r5, #0]
 800f23e:	4604      	mov	r4, r0
 800f240:	b94b      	cbnz	r3, 800f256 <uxr_serialize_OBJK_Subscriber_Binary+0x26>
 800f242:	7a29      	ldrb	r1, [r5, #8]
 800f244:	4630      	mov	r0, r6
 800f246:	f7fc fa4f 	bl	800b6e8 <ucdr_serialize_bool>
 800f24a:	7a2b      	ldrb	r3, [r5, #8]
 800f24c:	4004      	ands	r4, r0
 800f24e:	b2e4      	uxtb	r4, r4
 800f250:	b943      	cbnz	r3, 800f264 <uxr_serialize_OBJK_Subscriber_Binary+0x34>
 800f252:	4620      	mov	r0, r4
 800f254:	bd70      	pop	{r4, r5, r6, pc}
 800f256:	6869      	ldr	r1, [r5, #4]
 800f258:	4630      	mov	r0, r6
 800f25a:	f004 fd37 	bl	8013ccc <ucdr_serialize_string>
 800f25e:	4004      	ands	r4, r0
 800f260:	b2e4      	uxtb	r4, r4
 800f262:	e7ee      	b.n	800f242 <uxr_serialize_OBJK_Subscriber_Binary+0x12>
 800f264:	f105 010c 	add.w	r1, r5, #12
 800f268:	4630      	mov	r0, r6
 800f26a:	f7ff ff53 	bl	800f114 <uxr_serialize_OBJK_Subscriber_Binary_Qos>
 800f26e:	4004      	ands	r4, r0
 800f270:	4620      	mov	r0, r4
 800f272:	bd70      	pop	{r4, r5, r6, pc}

0800f274 <uxr_serialize_OBJK_Endpoint_QosBinary>:
 800f274:	e92d 4368 	stmdb	sp!, {r3, r5, r6, r8, r9, lr}
 800f278:	4688      	mov	r8, r1
 800f27a:	8809      	ldrh	r1, [r1, #0]
 800f27c:	4681      	mov	r9, r0
 800f27e:	f7fc fa8d 	bl	800b79c <ucdr_serialize_uint16_t>
 800f282:	f898 1002 	ldrb.w	r1, [r8, #2]
 800f286:	4606      	mov	r6, r0
 800f288:	4648      	mov	r0, r9
 800f28a:	f7fc fa2d 	bl	800b6e8 <ucdr_serialize_bool>
 800f28e:	f898 3002 	ldrb.w	r3, [r8, #2]
 800f292:	4006      	ands	r6, r0
 800f294:	b2f5      	uxtb	r5, r6
 800f296:	b9eb      	cbnz	r3, 800f2d4 <uxr_serialize_OBJK_Endpoint_QosBinary+0x60>
 800f298:	f898 1006 	ldrb.w	r1, [r8, #6]
 800f29c:	4648      	mov	r0, r9
 800f29e:	f7fc fa23 	bl	800b6e8 <ucdr_serialize_bool>
 800f2a2:	f898 3006 	ldrb.w	r3, [r8, #6]
 800f2a6:	4005      	ands	r5, r0
 800f2a8:	bb7b      	cbnz	r3, 800f30a <uxr_serialize_OBJK_Endpoint_QosBinary+0x96>
 800f2aa:	f898 100c 	ldrb.w	r1, [r8, #12]
 800f2ae:	4648      	mov	r0, r9
 800f2b0:	f7fc fa1a 	bl	800b6e8 <ucdr_serialize_bool>
 800f2b4:	f898 300c 	ldrb.w	r3, [r8, #12]
 800f2b8:	4005      	ands	r5, r0
 800f2ba:	b9f3      	cbnz	r3, 800f2fa <uxr_serialize_OBJK_Endpoint_QosBinary+0x86>
 800f2bc:	f898 1014 	ldrb.w	r1, [r8, #20]
 800f2c0:	4648      	mov	r0, r9
 800f2c2:	f7fc fa11 	bl	800b6e8 <ucdr_serialize_bool>
 800f2c6:	f898 3014 	ldrb.w	r3, [r8, #20]
 800f2ca:	4005      	ands	r5, r0
 800f2cc:	b94b      	cbnz	r3, 800f2e2 <uxr_serialize_OBJK_Endpoint_QosBinary+0x6e>
 800f2ce:	4628      	mov	r0, r5
 800f2d0:	e8bd 8368 	ldmia.w	sp!, {r3, r5, r6, r8, r9, pc}
 800f2d4:	f8b8 1004 	ldrh.w	r1, [r8, #4]
 800f2d8:	4648      	mov	r0, r9
 800f2da:	f7fc fa5f 	bl	800b79c <ucdr_serialize_uint16_t>
 800f2de:	4005      	ands	r5, r0
 800f2e0:	e7da      	b.n	800f298 <uxr_serialize_OBJK_Endpoint_QosBinary+0x24>
 800f2e2:	f8d8 2018 	ldr.w	r2, [r8, #24]
 800f2e6:	f108 011c 	add.w	r1, r8, #28
 800f2ea:	4648      	mov	r0, r9
 800f2ec:	f004 fcc2 	bl	8013c74 <ucdr_serialize_sequence_uint8_t>
 800f2f0:	4028      	ands	r0, r5
 800f2f2:	b2c5      	uxtb	r5, r0
 800f2f4:	4628      	mov	r0, r5
 800f2f6:	e8bd 8368 	ldmia.w	sp!, {r3, r5, r6, r8, r9, pc}
 800f2fa:	f8d8 1010 	ldr.w	r1, [r8, #16]
 800f2fe:	4648      	mov	r0, r9
 800f300:	f7fc fc36 	bl	800bb70 <ucdr_serialize_uint32_t>
 800f304:	4028      	ands	r0, r5
 800f306:	b2c5      	uxtb	r5, r0
 800f308:	e7d8      	b.n	800f2bc <uxr_serialize_OBJK_Endpoint_QosBinary+0x48>
 800f30a:	f8d8 1008 	ldr.w	r1, [r8, #8]
 800f30e:	4648      	mov	r0, r9
 800f310:	f7fc fc2e 	bl	800bb70 <ucdr_serialize_uint32_t>
 800f314:	4028      	ands	r0, r5
 800f316:	b2c5      	uxtb	r5, r0
 800f318:	e7c7      	b.n	800f2aa <uxr_serialize_OBJK_Endpoint_QosBinary+0x36>
 800f31a:	bf00      	nop

0800f31c <uxr_serialize_OBJK_DataReader_Binary>:
 800f31c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f31e:	2202      	movs	r2, #2
 800f320:	460c      	mov	r4, r1
 800f322:	4606      	mov	r6, r0
 800f324:	f004 fbb2 	bl	8013a8c <ucdr_serialize_array_uint8_t>
 800f328:	78a1      	ldrb	r1, [r4, #2]
 800f32a:	4605      	mov	r5, r0
 800f32c:	4630      	mov	r0, r6
 800f32e:	f7fc f9db 	bl	800b6e8 <ucdr_serialize_bool>
 800f332:	78a3      	ldrb	r3, [r4, #2]
 800f334:	4005      	ands	r5, r0
 800f336:	b2ed      	uxtb	r5, r5
 800f338:	b90b      	cbnz	r3, 800f33e <uxr_serialize_OBJK_DataReader_Binary+0x22>
 800f33a:	4628      	mov	r0, r5
 800f33c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f33e:	f104 0108 	add.w	r1, r4, #8
 800f342:	4630      	mov	r0, r6
 800f344:	f7ff ff96 	bl	800f274 <uxr_serialize_OBJK_Endpoint_QosBinary>
 800f348:	f894 102c 	ldrb.w	r1, [r4, #44]	@ 0x2c
 800f34c:	4607      	mov	r7, r0
 800f34e:	4630      	mov	r0, r6
 800f350:	f7fc f9ca 	bl	800b6e8 <ucdr_serialize_bool>
 800f354:	f894 302c 	ldrb.w	r3, [r4, #44]	@ 0x2c
 800f358:	4038      	ands	r0, r7
 800f35a:	b2c7      	uxtb	r7, r0
 800f35c:	b95b      	cbnz	r3, 800f376 <uxr_serialize_OBJK_DataReader_Binary+0x5a>
 800f35e:	f894 1038 	ldrb.w	r1, [r4, #56]	@ 0x38
 800f362:	4630      	mov	r0, r6
 800f364:	f7fc f9c0 	bl	800b6e8 <ucdr_serialize_bool>
 800f368:	f894 3038 	ldrb.w	r3, [r4, #56]	@ 0x38
 800f36c:	4007      	ands	r7, r0
 800f36e:	b94b      	cbnz	r3, 800f384 <uxr_serialize_OBJK_DataReader_Binary+0x68>
 800f370:	403d      	ands	r5, r7
 800f372:	4628      	mov	r0, r5
 800f374:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f376:	e9d4 230c 	ldrd	r2, r3, [r4, #48]	@ 0x30
 800f37a:	4630      	mov	r0, r6
 800f37c:	f7fc fe4e 	bl	800c01c <ucdr_serialize_uint64_t>
 800f380:	4007      	ands	r7, r0
 800f382:	e7ec      	b.n	800f35e <uxr_serialize_OBJK_DataReader_Binary+0x42>
 800f384:	6be1      	ldr	r1, [r4, #60]	@ 0x3c
 800f386:	4630      	mov	r0, r6
 800f388:	f004 fca0 	bl	8013ccc <ucdr_serialize_string>
 800f38c:	4007      	ands	r7, r0
 800f38e:	b2ff      	uxtb	r7, r7
 800f390:	e7ee      	b.n	800f370 <uxr_serialize_OBJK_DataReader_Binary+0x54>
 800f392:	bf00      	nop

0800f394 <uxr_deserialize_ObjectVariant>:
 800f394:	b570      	push	{r4, r5, r6, lr}
 800f396:	4605      	mov	r5, r0
 800f398:	460e      	mov	r6, r1
 800f39a:	f7fc f9e9 	bl	800b770 <ucdr_deserialize_uint8_t>
 800f39e:	b168      	cbz	r0, 800f3bc <uxr_deserialize_ObjectVariant+0x28>
 800f3a0:	7833      	ldrb	r3, [r6, #0]
 800f3a2:	3b01      	subs	r3, #1
 800f3a4:	4604      	mov	r4, r0
 800f3a6:	2b0d      	cmp	r3, #13
 800f3a8:	d809      	bhi.n	800f3be <uxr_deserialize_ObjectVariant+0x2a>
 800f3aa:	e8df f003 	tbb	[pc, r3]
 800f3ae:	0a41      	.short	0x0a41
 800f3b0:	0a0a2323 	.word	0x0a0a2323
 800f3b4:	10080a0a 	.word	0x10080a0a
 800f3b8:	565c1010 	.word	0x565c1010
 800f3bc:	2400      	movs	r4, #0
 800f3be:	4620      	mov	r0, r4
 800f3c0:	bd70      	pop	{r4, r5, r6, pc}
 800f3c2:	1d31      	adds	r1, r6, #4
 800f3c4:	4628      	mov	r0, r5
 800f3c6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800f3ca:	f7ff be31 	b.w	800f030 <uxr_deserialize_DATAWRITER_Representation>
 800f3ce:	1d31      	adds	r1, r6, #4
 800f3d0:	4628      	mov	r0, r5
 800f3d2:	f7fc f9cd 	bl	800b770 <ucdr_deserialize_uint8_t>
 800f3d6:	2800      	cmp	r0, #0
 800f3d8:	d0f0      	beq.n	800f3bc <uxr_deserialize_ObjectVariant+0x28>
 800f3da:	7933      	ldrb	r3, [r6, #4]
 800f3dc:	2b01      	cmp	r3, #1
 800f3de:	d001      	beq.n	800f3e4 <uxr_deserialize_ObjectVariant+0x50>
 800f3e0:	2b02      	cmp	r3, #2
 800f3e2:	d1ec      	bne.n	800f3be <uxr_deserialize_ObjectVariant+0x2a>
 800f3e4:	68b1      	ldr	r1, [r6, #8]
 800f3e6:	4628      	mov	r0, r5
 800f3e8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800f3ec:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800f3f0:	f004 bc7c 	b.w	8013cec <ucdr_deserialize_string>
 800f3f4:	1d31      	adds	r1, r6, #4
 800f3f6:	4628      	mov	r0, r5
 800f3f8:	f7fc f9ba 	bl	800b770 <ucdr_deserialize_uint8_t>
 800f3fc:	4604      	mov	r4, r0
 800f3fe:	b170      	cbz	r0, 800f41e <uxr_deserialize_ObjectVariant+0x8a>
 800f400:	7933      	ldrb	r3, [r6, #4]
 800f402:	2b02      	cmp	r3, #2
 800f404:	d04c      	beq.n	800f4a0 <uxr_deserialize_ObjectVariant+0x10c>
 800f406:	2b03      	cmp	r3, #3
 800f408:	d109      	bne.n	800f41e <uxr_deserialize_ObjectVariant+0x8a>
 800f40a:	f106 0308 	add.w	r3, r6, #8
 800f40e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800f412:	f106 010c 	add.w	r1, r6, #12
 800f416:	4628      	mov	r0, r5
 800f418:	f004 fc3e 	bl	8013c98 <ucdr_deserialize_sequence_uint8_t>
 800f41c:	4604      	mov	r4, r0
 800f41e:	2202      	movs	r2, #2
 800f420:	f506 7103 	add.w	r1, r6, #524	@ 0x20c
 800f424:	4628      	mov	r0, r5
 800f426:	f004 fb95 	bl	8013b54 <ucdr_deserialize_array_uint8_t>
 800f42a:	4020      	ands	r0, r4
 800f42c:	b2c4      	uxtb	r4, r0
 800f42e:	e7c6      	b.n	800f3be <uxr_deserialize_ObjectVariant+0x2a>
 800f430:	1d31      	adds	r1, r6, #4
 800f432:	4628      	mov	r0, r5
 800f434:	f7fc f99c 	bl	800b770 <ucdr_deserialize_uint8_t>
 800f438:	4604      	mov	r4, r0
 800f43a:	b130      	cbz	r0, 800f44a <uxr_deserialize_ObjectVariant+0xb6>
 800f43c:	7933      	ldrb	r3, [r6, #4]
 800f43e:	2b02      	cmp	r3, #2
 800f440:	d036      	beq.n	800f4b0 <uxr_deserialize_ObjectVariant+0x11c>
 800f442:	2b03      	cmp	r3, #3
 800f444:	d03c      	beq.n	800f4c0 <uxr_deserialize_ObjectVariant+0x12c>
 800f446:	2b01      	cmp	r3, #1
 800f448:	d032      	beq.n	800f4b0 <uxr_deserialize_ObjectVariant+0x11c>
 800f44a:	f506 7103 	add.w	r1, r6, #524	@ 0x20c
 800f44e:	4628      	mov	r0, r5
 800f450:	f7fc ff34 	bl	800c2bc <ucdr_deserialize_int16_t>
 800f454:	4020      	ands	r0, r4
 800f456:	b2c4      	uxtb	r4, r0
 800f458:	e7b1      	b.n	800f3be <uxr_deserialize_ObjectVariant+0x2a>
 800f45a:	1d31      	adds	r1, r6, #4
 800f45c:	4628      	mov	r0, r5
 800f45e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800f462:	f7ff bc9b 	b.w	800ed9c <uxr_deserialize_CLIENT_Representation>
 800f466:	2204      	movs	r2, #4
 800f468:	18b1      	adds	r1, r6, r2
 800f46a:	4628      	mov	r0, r5
 800f46c:	f004 fb72 	bl	8013b54 <ucdr_deserialize_array_uint8_t>
 800f470:	2202      	movs	r2, #2
 800f472:	f106 0108 	add.w	r1, r6, #8
 800f476:	4604      	mov	r4, r0
 800f478:	4628      	mov	r0, r5
 800f47a:	f004 fb6b 	bl	8013b54 <ucdr_deserialize_array_uint8_t>
 800f47e:	2202      	movs	r2, #2
 800f480:	4004      	ands	r4, r0
 800f482:	f106 010a 	add.w	r1, r6, #10
 800f486:	4628      	mov	r0, r5
 800f488:	f004 fb64 	bl	8013b54 <ucdr_deserialize_array_uint8_t>
 800f48c:	b2e4      	uxtb	r4, r4
 800f48e:	4603      	mov	r3, r0
 800f490:	f106 010c 	add.w	r1, r6, #12
 800f494:	4628      	mov	r0, r5
 800f496:	401c      	ands	r4, r3
 800f498:	f7fc f93c 	bl	800b714 <ucdr_deserialize_bool>
 800f49c:	4004      	ands	r4, r0
 800f49e:	e78e      	b.n	800f3be <uxr_deserialize_ObjectVariant+0x2a>
 800f4a0:	68b1      	ldr	r1, [r6, #8]
 800f4a2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800f4a6:	4628      	mov	r0, r5
 800f4a8:	f004 fc20 	bl	8013cec <ucdr_deserialize_string>
 800f4ac:	4604      	mov	r4, r0
 800f4ae:	e7b6      	b.n	800f41e <uxr_deserialize_ObjectVariant+0x8a>
 800f4b0:	68b1      	ldr	r1, [r6, #8]
 800f4b2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800f4b6:	4628      	mov	r0, r5
 800f4b8:	f004 fc18 	bl	8013cec <ucdr_deserialize_string>
 800f4bc:	4604      	mov	r4, r0
 800f4be:	e7c4      	b.n	800f44a <uxr_deserialize_ObjectVariant+0xb6>
 800f4c0:	f106 0308 	add.w	r3, r6, #8
 800f4c4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800f4c8:	f106 010c 	add.w	r1, r6, #12
 800f4cc:	4628      	mov	r0, r5
 800f4ce:	f004 fbe3 	bl	8013c98 <ucdr_deserialize_sequence_uint8_t>
 800f4d2:	4604      	mov	r4, r0
 800f4d4:	e7b9      	b.n	800f44a <uxr_deserialize_ObjectVariant+0xb6>
 800f4d6:	bf00      	nop

0800f4d8 <uxr_deserialize_BaseObjectRequest>:
 800f4d8:	b570      	push	{r4, r5, r6, lr}
 800f4da:	2202      	movs	r2, #2
 800f4dc:	4605      	mov	r5, r0
 800f4de:	460e      	mov	r6, r1
 800f4e0:	f004 fb38 	bl	8013b54 <ucdr_deserialize_array_uint8_t>
 800f4e4:	2202      	movs	r2, #2
 800f4e6:	4604      	mov	r4, r0
 800f4e8:	18b1      	adds	r1, r6, r2
 800f4ea:	4628      	mov	r0, r5
 800f4ec:	f004 fb32 	bl	8013b54 <ucdr_deserialize_array_uint8_t>
 800f4f0:	4020      	ands	r0, r4
 800f4f2:	b2c0      	uxtb	r0, r0
 800f4f4:	bd70      	pop	{r4, r5, r6, pc}
 800f4f6:	bf00      	nop

0800f4f8 <uxr_serialize_ActivityInfoVariant>:
 800f4f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f4fc:	460d      	mov	r5, r1
 800f4fe:	7809      	ldrb	r1, [r1, #0]
 800f500:	4607      	mov	r7, r0
 800f502:	f7fc f91f 	bl	800b744 <ucdr_serialize_uint8_t>
 800f506:	4681      	mov	r9, r0
 800f508:	b138      	cbz	r0, 800f51a <uxr_serialize_ActivityInfoVariant+0x22>
 800f50a:	782b      	ldrb	r3, [r5, #0]
 800f50c:	2b06      	cmp	r3, #6
 800f50e:	f000 8082 	beq.w	800f616 <uxr_serialize_ActivityInfoVariant+0x11e>
 800f512:	2b0d      	cmp	r3, #13
 800f514:	d016      	beq.n	800f544 <uxr_serialize_ActivityInfoVariant+0x4c>
 800f516:	2b05      	cmp	r3, #5
 800f518:	d002      	beq.n	800f520 <uxr_serialize_ActivityInfoVariant+0x28>
 800f51a:	4648      	mov	r0, r9
 800f51c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f520:	f9b5 1008 	ldrsh.w	r1, [r5, #8]
 800f524:	4638      	mov	r0, r7
 800f526:	f7fc fe49 	bl	800c1bc <ucdr_serialize_int16_t>
 800f52a:	e9d5 2304 	ldrd	r2, r3, [r5, #16]
 800f52e:	4681      	mov	r9, r0
 800f530:	4638      	mov	r0, r7
 800f532:	f7fc fd73 	bl	800c01c <ucdr_serialize_uint64_t>
 800f536:	ea09 0000 	and.w	r0, r9, r0
 800f53a:	fa5f f980 	uxtb.w	r9, r0
 800f53e:	4648      	mov	r0, r9
 800f540:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f544:	f9b5 1008 	ldrsh.w	r1, [r5, #8]
 800f548:	4638      	mov	r0, r7
 800f54a:	f7fc fe37 	bl	800c1bc <ucdr_serialize_int16_t>
 800f54e:	68e9      	ldr	r1, [r5, #12]
 800f550:	4681      	mov	r9, r0
 800f552:	4638      	mov	r0, r7
 800f554:	f7fc fb0c 	bl	800bb70 <ucdr_serialize_uint32_t>
 800f558:	68eb      	ldr	r3, [r5, #12]
 800f55a:	2b00      	cmp	r3, #0
 800f55c:	d0eb      	beq.n	800f536 <uxr_serialize_ActivityInfoVariant+0x3e>
 800f55e:	b320      	cbz	r0, 800f5aa <uxr_serialize_ActivityInfoVariant+0xb2>
 800f560:	f105 080c 	add.w	r8, r5, #12
 800f564:	2600      	movs	r6, #0
 800f566:	eb06 0a46 	add.w	sl, r6, r6, lsl #1
 800f56a:	eb05 0aca 	add.w	sl, r5, sl, lsl #3
 800f56e:	f89a 1010 	ldrb.w	r1, [sl, #16]
 800f572:	4638      	mov	r0, r7
 800f574:	f7fc f8e6 	bl	800b744 <ucdr_serialize_uint8_t>
 800f578:	2800      	cmp	r0, #0
 800f57a:	d053      	beq.n	800f624 <uxr_serialize_ActivityInfoVariant+0x12c>
 800f57c:	f89a 3010 	ldrb.w	r3, [sl, #16]
 800f580:	eb06 0146 	add.w	r1, r6, r6, lsl #1
 800f584:	0074      	lsls	r4, r6, #1
 800f586:	00c9      	lsls	r1, r1, #3
 800f588:	2b03      	cmp	r3, #3
 800f58a:	d854      	bhi.n	800f636 <uxr_serialize_ActivityInfoVariant+0x13e>
 800f58c:	e8df f003 	tbb	[pc, r3]
 800f590:	02102132 	.word	0x02102132
 800f594:	4441      	add	r1, r8
 800f596:	4638      	mov	r0, r7
 800f598:	6889      	ldr	r1, [r1, #8]
 800f59a:	f004 fb97 	bl	8013ccc <ucdr_serialize_string>
 800f59e:	68ea      	ldr	r2, [r5, #12]
 800f5a0:	3601      	adds	r6, #1
 800f5a2:	4296      	cmp	r6, r2
 800f5a4:	d242      	bcs.n	800f62c <uxr_serialize_ActivityInfoVariant+0x134>
 800f5a6:	2800      	cmp	r0, #0
 800f5a8:	d1dd      	bne.n	800f566 <uxr_serialize_ActivityInfoVariant+0x6e>
 800f5aa:	f04f 0900 	mov.w	r9, #0
 800f5ae:	e7b4      	b.n	800f51a <uxr_serialize_ActivityInfoVariant+0x22>
 800f5b0:	3108      	adds	r1, #8
 800f5b2:	4441      	add	r1, r8
 800f5b4:	2210      	movs	r2, #16
 800f5b6:	4638      	mov	r0, r7
 800f5b8:	f004 fa68 	bl	8013a8c <ucdr_serialize_array_uint8_t>
 800f5bc:	4434      	add	r4, r6
 800f5be:	eb05 03c4 	add.w	r3, r5, r4, lsl #3
 800f5c2:	4604      	mov	r4, r0
 800f5c4:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 800f5c6:	4638      	mov	r0, r7
 800f5c8:	f7fc fad2 	bl	800bb70 <ucdr_serialize_uint32_t>
 800f5cc:	4020      	ands	r0, r4
 800f5ce:	b2c0      	uxtb	r0, r0
 800f5d0:	e7e5      	b.n	800f59e <uxr_serialize_ActivityInfoVariant+0xa6>
 800f5d2:	3108      	adds	r1, #8
 800f5d4:	4441      	add	r1, r8
 800f5d6:	2204      	movs	r2, #4
 800f5d8:	4638      	mov	r0, r7
 800f5da:	f004 fa57 	bl	8013a8c <ucdr_serialize_array_uint8_t>
 800f5de:	4434      	add	r4, r6
 800f5e0:	eb05 03c4 	add.w	r3, r5, r4, lsl #3
 800f5e4:	4604      	mov	r4, r0
 800f5e6:	8b19      	ldrh	r1, [r3, #24]
 800f5e8:	4638      	mov	r0, r7
 800f5ea:	f7fc f8d7 	bl	800b79c <ucdr_serialize_uint16_t>
 800f5ee:	4020      	ands	r0, r4
 800f5f0:	b2c0      	uxtb	r0, r0
 800f5f2:	e7d4      	b.n	800f59e <uxr_serialize_ActivityInfoVariant+0xa6>
 800f5f4:	3108      	adds	r1, #8
 800f5f6:	4441      	add	r1, r8
 800f5f8:	2202      	movs	r2, #2
 800f5fa:	4638      	mov	r0, r7
 800f5fc:	f004 fa46 	bl	8013a8c <ucdr_serialize_array_uint8_t>
 800f600:	4434      	add	r4, r6
 800f602:	eb05 03c4 	add.w	r3, r5, r4, lsl #3
 800f606:	4604      	mov	r4, r0
 800f608:	7d99      	ldrb	r1, [r3, #22]
 800f60a:	4638      	mov	r0, r7
 800f60c:	f7fc f89a 	bl	800b744 <ucdr_serialize_uint8_t>
 800f610:	4020      	ands	r0, r4
 800f612:	b2c0      	uxtb	r0, r0
 800f614:	e7c3      	b.n	800f59e <uxr_serialize_ActivityInfoVariant+0xa6>
 800f616:	f9b5 1008 	ldrsh.w	r1, [r5, #8]
 800f61a:	4638      	mov	r0, r7
 800f61c:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f620:	f7fc bdcc 	b.w	800c1bc <ucdr_serialize_int16_t>
 800f624:	68ea      	ldr	r2, [r5, #12]
 800f626:	3601      	adds	r6, #1
 800f628:	42b2      	cmp	r2, r6
 800f62a:	d8be      	bhi.n	800f5aa <uxr_serialize_ActivityInfoVariant+0xb2>
 800f62c:	ea09 0900 	and.w	r9, r9, r0
 800f630:	fa5f f989 	uxtb.w	r9, r9
 800f634:	e771      	b.n	800f51a <uxr_serialize_ActivityInfoVariant+0x22>
 800f636:	68eb      	ldr	r3, [r5, #12]
 800f638:	3601      	adds	r6, #1
 800f63a:	429e      	cmp	r6, r3
 800f63c:	f10a 0a18 	add.w	sl, sl, #24
 800f640:	d395      	bcc.n	800f56e <uxr_serialize_ActivityInfoVariant+0x76>
 800f642:	e76a      	b.n	800f51a <uxr_serialize_ActivityInfoVariant+0x22>

0800f644 <uxr_deserialize_BaseObjectReply>:
 800f644:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f648:	2202      	movs	r2, #2
 800f64a:	4606      	mov	r6, r0
 800f64c:	460f      	mov	r7, r1
 800f64e:	f004 fa81 	bl	8013b54 <ucdr_deserialize_array_uint8_t>
 800f652:	2202      	movs	r2, #2
 800f654:	18b9      	adds	r1, r7, r2
 800f656:	4605      	mov	r5, r0
 800f658:	4630      	mov	r0, r6
 800f65a:	f004 fa7b 	bl	8013b54 <ucdr_deserialize_array_uint8_t>
 800f65e:	1d39      	adds	r1, r7, #4
 800f660:	4680      	mov	r8, r0
 800f662:	4630      	mov	r0, r6
 800f664:	f7fc f884 	bl	800b770 <ucdr_deserialize_uint8_t>
 800f668:	1d79      	adds	r1, r7, #5
 800f66a:	4604      	mov	r4, r0
 800f66c:	4630      	mov	r0, r6
 800f66e:	f7fc f87f 	bl	800b770 <ucdr_deserialize_uint8_t>
 800f672:	ea05 0508 	and.w	r5, r5, r8
 800f676:	402c      	ands	r4, r5
 800f678:	4020      	ands	r0, r4
 800f67a:	b2c0      	uxtb	r0, r0
 800f67c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800f680 <uxr_serialize_ReadSpecification>:
 800f680:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f684:	460e      	mov	r6, r1
 800f686:	7809      	ldrb	r1, [r1, #0]
 800f688:	4607      	mov	r7, r0
 800f68a:	f7fc f85b 	bl	800b744 <ucdr_serialize_uint8_t>
 800f68e:	7871      	ldrb	r1, [r6, #1]
 800f690:	4604      	mov	r4, r0
 800f692:	4638      	mov	r0, r7
 800f694:	f7fc f856 	bl	800b744 <ucdr_serialize_uint8_t>
 800f698:	78b1      	ldrb	r1, [r6, #2]
 800f69a:	4004      	ands	r4, r0
 800f69c:	4638      	mov	r0, r7
 800f69e:	f7fc f823 	bl	800b6e8 <ucdr_serialize_bool>
 800f6a2:	78b3      	ldrb	r3, [r6, #2]
 800f6a4:	b2e4      	uxtb	r4, r4
 800f6a6:	4004      	ands	r4, r0
 800f6a8:	b94b      	cbnz	r3, 800f6be <uxr_serialize_ReadSpecification+0x3e>
 800f6aa:	7a31      	ldrb	r1, [r6, #8]
 800f6ac:	4638      	mov	r0, r7
 800f6ae:	f7fc f81b 	bl	800b6e8 <ucdr_serialize_bool>
 800f6b2:	7a33      	ldrb	r3, [r6, #8]
 800f6b4:	4004      	ands	r4, r0
 800f6b6:	b943      	cbnz	r3, 800f6ca <uxr_serialize_ReadSpecification+0x4a>
 800f6b8:	4620      	mov	r0, r4
 800f6ba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f6be:	6871      	ldr	r1, [r6, #4]
 800f6c0:	4638      	mov	r0, r7
 800f6c2:	f004 fb03 	bl	8013ccc <ucdr_serialize_string>
 800f6c6:	4004      	ands	r4, r0
 800f6c8:	e7ef      	b.n	800f6aa <uxr_serialize_ReadSpecification+0x2a>
 800f6ca:	8971      	ldrh	r1, [r6, #10]
 800f6cc:	4638      	mov	r0, r7
 800f6ce:	f7fc f865 	bl	800b79c <ucdr_serialize_uint16_t>
 800f6d2:	89b1      	ldrh	r1, [r6, #12]
 800f6d4:	4605      	mov	r5, r0
 800f6d6:	4638      	mov	r0, r7
 800f6d8:	f7fc f860 	bl	800b79c <ucdr_serialize_uint16_t>
 800f6dc:	89f1      	ldrh	r1, [r6, #14]
 800f6de:	4005      	ands	r5, r0
 800f6e0:	4638      	mov	r0, r7
 800f6e2:	f7fc f85b 	bl	800b79c <ucdr_serialize_uint16_t>
 800f6e6:	8a31      	ldrh	r1, [r6, #16]
 800f6e8:	4680      	mov	r8, r0
 800f6ea:	4638      	mov	r0, r7
 800f6ec:	f7fc f856 	bl	800b79c <ucdr_serialize_uint16_t>
 800f6f0:	b2ed      	uxtb	r5, r5
 800f6f2:	4025      	ands	r5, r4
 800f6f4:	ea08 0505 	and.w	r5, r8, r5
 800f6f8:	ea00 0405 	and.w	r4, r0, r5
 800f6fc:	4620      	mov	r0, r4
 800f6fe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f702:	bf00      	nop

0800f704 <uxr_serialize_CREATE_CLIENT_Payload>:
 800f704:	f7ff baf2 	b.w	800ecec <uxr_serialize_CLIENT_Representation>

0800f708 <uxr_serialize_CREATE_Payload>:
 800f708:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f70a:	2202      	movs	r2, #2
 800f70c:	4607      	mov	r7, r0
 800f70e:	460e      	mov	r6, r1
 800f710:	f004 f9bc 	bl	8013a8c <ucdr_serialize_array_uint8_t>
 800f714:	2202      	movs	r2, #2
 800f716:	18b1      	adds	r1, r6, r2
 800f718:	4605      	mov	r5, r0
 800f71a:	4638      	mov	r0, r7
 800f71c:	f004 f9b6 	bl	8013a8c <ucdr_serialize_array_uint8_t>
 800f720:	7931      	ldrb	r1, [r6, #4]
 800f722:	4604      	mov	r4, r0
 800f724:	4638      	mov	r0, r7
 800f726:	f7fc f80d 	bl	800b744 <ucdr_serialize_uint8_t>
 800f72a:	b170      	cbz	r0, 800f74a <uxr_serialize_CREATE_Payload+0x42>
 800f72c:	7933      	ldrb	r3, [r6, #4]
 800f72e:	402c      	ands	r4, r5
 800f730:	3b01      	subs	r3, #1
 800f732:	b2e4      	uxtb	r4, r4
 800f734:	2b0d      	cmp	r3, #13
 800f736:	d809      	bhi.n	800f74c <uxr_serialize_CREATE_Payload+0x44>
 800f738:	e8df f003 	tbb	[pc, r3]
 800f73c:	23230a4c 	.word	0x23230a4c
 800f740:	0a0a0a0a 	.word	0x0a0a0a0a
 800f744:	12121208 	.word	0x12121208
 800f748:	3e45      	.short	0x3e45
 800f74a:	2400      	movs	r4, #0
 800f74c:	4620      	mov	r0, r4
 800f74e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f750:	f106 0108 	add.w	r1, r6, #8
 800f754:	4638      	mov	r0, r7
 800f756:	f7ff fbcf 	bl	800eef8 <uxr_serialize_DATAWRITER_Representation>
 800f75a:	4004      	ands	r4, r0
 800f75c:	4620      	mov	r0, r4
 800f75e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f760:	7a31      	ldrb	r1, [r6, #8]
 800f762:	4638      	mov	r0, r7
 800f764:	f7fb ffee 	bl	800b744 <ucdr_serialize_uint8_t>
 800f768:	2800      	cmp	r0, #0
 800f76a:	d0ee      	beq.n	800f74a <uxr_serialize_CREATE_Payload+0x42>
 800f76c:	7a33      	ldrb	r3, [r6, #8]
 800f76e:	2b01      	cmp	r3, #1
 800f770:	d001      	beq.n	800f776 <uxr_serialize_CREATE_Payload+0x6e>
 800f772:	2b02      	cmp	r3, #2
 800f774:	d1ea      	bne.n	800f74c <uxr_serialize_CREATE_Payload+0x44>
 800f776:	68f1      	ldr	r1, [r6, #12]
 800f778:	4638      	mov	r0, r7
 800f77a:	f004 faa7 	bl	8013ccc <ucdr_serialize_string>
 800f77e:	4004      	ands	r4, r0
 800f780:	e7e4      	b.n	800f74c <uxr_serialize_CREATE_Payload+0x44>
 800f782:	7a31      	ldrb	r1, [r6, #8]
 800f784:	4638      	mov	r0, r7
 800f786:	f7fb ffdd 	bl	800b744 <ucdr_serialize_uint8_t>
 800f78a:	4605      	mov	r5, r0
 800f78c:	b158      	cbz	r0, 800f7a6 <uxr_serialize_CREATE_Payload+0x9e>
 800f78e:	7a33      	ldrb	r3, [r6, #8]
 800f790:	2b02      	cmp	r3, #2
 800f792:	d034      	beq.n	800f7fe <uxr_serialize_CREATE_Payload+0xf6>
 800f794:	2b03      	cmp	r3, #3
 800f796:	d106      	bne.n	800f7a6 <uxr_serialize_CREATE_Payload+0x9e>
 800f798:	68f2      	ldr	r2, [r6, #12]
 800f79a:	f106 0110 	add.w	r1, r6, #16
 800f79e:	4638      	mov	r0, r7
 800f7a0:	f004 fa68 	bl	8013c74 <ucdr_serialize_sequence_uint8_t>
 800f7a4:	4605      	mov	r5, r0
 800f7a6:	2202      	movs	r2, #2
 800f7a8:	f506 7104 	add.w	r1, r6, #528	@ 0x210
 800f7ac:	4638      	mov	r0, r7
 800f7ae:	f004 f96d 	bl	8013a8c <ucdr_serialize_array_uint8_t>
 800f7b2:	4028      	ands	r0, r5
 800f7b4:	4004      	ands	r4, r0
 800f7b6:	e7c9      	b.n	800f74c <uxr_serialize_CREATE_Payload+0x44>
 800f7b8:	f106 0108 	add.w	r1, r6, #8
 800f7bc:	4638      	mov	r0, r7
 800f7be:	f7ff fa95 	bl	800ecec <uxr_serialize_CLIENT_Representation>
 800f7c2:	4004      	ands	r4, r0
 800f7c4:	e7c2      	b.n	800f74c <uxr_serialize_CREATE_Payload+0x44>
 800f7c6:	f106 0108 	add.w	r1, r6, #8
 800f7ca:	4638      	mov	r0, r7
 800f7cc:	f7ff fb4a 	bl	800ee64 <uxr_serialize_AGENT_Representation>
 800f7d0:	4004      	ands	r4, r0
 800f7d2:	e7bb      	b.n	800f74c <uxr_serialize_CREATE_Payload+0x44>
 800f7d4:	7a31      	ldrb	r1, [r6, #8]
 800f7d6:	4638      	mov	r0, r7
 800f7d8:	f7fb ffb4 	bl	800b744 <ucdr_serialize_uint8_t>
 800f7dc:	4605      	mov	r5, r0
 800f7de:	b130      	cbz	r0, 800f7ee <uxr_serialize_CREATE_Payload+0xe6>
 800f7e0:	7a33      	ldrb	r3, [r6, #8]
 800f7e2:	2b02      	cmp	r3, #2
 800f7e4:	d011      	beq.n	800f80a <uxr_serialize_CREATE_Payload+0x102>
 800f7e6:	2b03      	cmp	r3, #3
 800f7e8:	d015      	beq.n	800f816 <uxr_serialize_CREATE_Payload+0x10e>
 800f7ea:	2b01      	cmp	r3, #1
 800f7ec:	d00d      	beq.n	800f80a <uxr_serialize_CREATE_Payload+0x102>
 800f7ee:	f9b6 1210 	ldrsh.w	r1, [r6, #528]	@ 0x210
 800f7f2:	4638      	mov	r0, r7
 800f7f4:	f7fc fce2 	bl	800c1bc <ucdr_serialize_int16_t>
 800f7f8:	4028      	ands	r0, r5
 800f7fa:	4004      	ands	r4, r0
 800f7fc:	e7a6      	b.n	800f74c <uxr_serialize_CREATE_Payload+0x44>
 800f7fe:	68f1      	ldr	r1, [r6, #12]
 800f800:	4638      	mov	r0, r7
 800f802:	f004 fa63 	bl	8013ccc <ucdr_serialize_string>
 800f806:	4605      	mov	r5, r0
 800f808:	e7cd      	b.n	800f7a6 <uxr_serialize_CREATE_Payload+0x9e>
 800f80a:	68f1      	ldr	r1, [r6, #12]
 800f80c:	4638      	mov	r0, r7
 800f80e:	f004 fa5d 	bl	8013ccc <ucdr_serialize_string>
 800f812:	4605      	mov	r5, r0
 800f814:	e7eb      	b.n	800f7ee <uxr_serialize_CREATE_Payload+0xe6>
 800f816:	68f2      	ldr	r2, [r6, #12]
 800f818:	f106 0110 	add.w	r1, r6, #16
 800f81c:	4638      	mov	r0, r7
 800f81e:	f004 fa29 	bl	8013c74 <ucdr_serialize_sequence_uint8_t>
 800f822:	4605      	mov	r5, r0
 800f824:	e7e3      	b.n	800f7ee <uxr_serialize_CREATE_Payload+0xe6>
 800f826:	bf00      	nop

0800f828 <uxr_deserialize_GET_INFO_Payload>:
 800f828:	b570      	push	{r4, r5, r6, lr}
 800f82a:	2202      	movs	r2, #2
 800f82c:	4605      	mov	r5, r0
 800f82e:	460e      	mov	r6, r1
 800f830:	f004 f990 	bl	8013b54 <ucdr_deserialize_array_uint8_t>
 800f834:	2202      	movs	r2, #2
 800f836:	18b1      	adds	r1, r6, r2
 800f838:	4604      	mov	r4, r0
 800f83a:	4628      	mov	r0, r5
 800f83c:	f004 f98a 	bl	8013b54 <ucdr_deserialize_array_uint8_t>
 800f840:	1d31      	adds	r1, r6, #4
 800f842:	4004      	ands	r4, r0
 800f844:	4628      	mov	r0, r5
 800f846:	f7fc fac3 	bl	800bdd0 <ucdr_deserialize_uint32_t>
 800f84a:	b2e4      	uxtb	r4, r4
 800f84c:	4020      	ands	r0, r4
 800f84e:	bd70      	pop	{r4, r5, r6, pc}

0800f850 <uxr_serialize_DELETE_Payload>:
 800f850:	b570      	push	{r4, r5, r6, lr}
 800f852:	2202      	movs	r2, #2
 800f854:	4605      	mov	r5, r0
 800f856:	460e      	mov	r6, r1
 800f858:	f004 f918 	bl	8013a8c <ucdr_serialize_array_uint8_t>
 800f85c:	2202      	movs	r2, #2
 800f85e:	4604      	mov	r4, r0
 800f860:	18b1      	adds	r1, r6, r2
 800f862:	4628      	mov	r0, r5
 800f864:	f004 f912 	bl	8013a8c <ucdr_serialize_array_uint8_t>
 800f868:	4020      	ands	r0, r4
 800f86a:	b2c0      	uxtb	r0, r0
 800f86c:	bd70      	pop	{r4, r5, r6, pc}
 800f86e:	bf00      	nop

0800f870 <uxr_deserialize_STATUS_AGENT_Payload>:
 800f870:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f874:	4605      	mov	r5, r0
 800f876:	460e      	mov	r6, r1
 800f878:	f7fb ff7a 	bl	800b770 <ucdr_deserialize_uint8_t>
 800f87c:	1c71      	adds	r1, r6, #1
 800f87e:	4604      	mov	r4, r0
 800f880:	4628      	mov	r0, r5
 800f882:	f7fb ff75 	bl	800b770 <ucdr_deserialize_uint8_t>
 800f886:	2204      	movs	r2, #4
 800f888:	18b1      	adds	r1, r6, r2
 800f88a:	4680      	mov	r8, r0
 800f88c:	4628      	mov	r0, r5
 800f88e:	f004 f961 	bl	8013b54 <ucdr_deserialize_array_uint8_t>
 800f892:	f106 0108 	add.w	r1, r6, #8
 800f896:	4607      	mov	r7, r0
 800f898:	2202      	movs	r2, #2
 800f89a:	4628      	mov	r0, r5
 800f89c:	f004 f95a 	bl	8013b54 <ucdr_deserialize_array_uint8_t>
 800f8a0:	ea04 0308 	and.w	r3, r4, r8
 800f8a4:	b2db      	uxtb	r3, r3
 800f8a6:	ea03 0407 	and.w	r4, r3, r7
 800f8aa:	2202      	movs	r2, #2
 800f8ac:	4607      	mov	r7, r0
 800f8ae:	f106 010a 	add.w	r1, r6, #10
 800f8b2:	4628      	mov	r0, r5
 800f8b4:	f004 f94e 	bl	8013b54 <ucdr_deserialize_array_uint8_t>
 800f8b8:	f106 010c 	add.w	r1, r6, #12
 800f8bc:	4603      	mov	r3, r0
 800f8be:	4628      	mov	r0, r5
 800f8c0:	461d      	mov	r5, r3
 800f8c2:	f7fb ff27 	bl	800b714 <ucdr_deserialize_bool>
 800f8c6:	403c      	ands	r4, r7
 800f8c8:	4025      	ands	r5, r4
 800f8ca:	4028      	ands	r0, r5
 800f8cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800f8d0 <uxr_deserialize_STATUS_Payload>:
 800f8d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f8d4:	2202      	movs	r2, #2
 800f8d6:	4606      	mov	r6, r0
 800f8d8:	460f      	mov	r7, r1
 800f8da:	f004 f93b 	bl	8013b54 <ucdr_deserialize_array_uint8_t>
 800f8de:	2202      	movs	r2, #2
 800f8e0:	18b9      	adds	r1, r7, r2
 800f8e2:	4605      	mov	r5, r0
 800f8e4:	4630      	mov	r0, r6
 800f8e6:	f004 f935 	bl	8013b54 <ucdr_deserialize_array_uint8_t>
 800f8ea:	1d39      	adds	r1, r7, #4
 800f8ec:	4680      	mov	r8, r0
 800f8ee:	4630      	mov	r0, r6
 800f8f0:	f7fb ff3e 	bl	800b770 <ucdr_deserialize_uint8_t>
 800f8f4:	1d79      	adds	r1, r7, #5
 800f8f6:	4604      	mov	r4, r0
 800f8f8:	4630      	mov	r0, r6
 800f8fa:	f7fb ff39 	bl	800b770 <ucdr_deserialize_uint8_t>
 800f8fe:	ea05 0508 	and.w	r5, r5, r8
 800f902:	402c      	ands	r4, r5
 800f904:	4020      	ands	r0, r4
 800f906:	b2c0      	uxtb	r0, r0
 800f908:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800f90c <uxr_serialize_INFO_Payload>:
 800f90c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f910:	2202      	movs	r2, #2
 800f912:	460c      	mov	r4, r1
 800f914:	4605      	mov	r5, r0
 800f916:	f004 f8b9 	bl	8013a8c <ucdr_serialize_array_uint8_t>
 800f91a:	2202      	movs	r2, #2
 800f91c:	18a1      	adds	r1, r4, r2
 800f91e:	4680      	mov	r8, r0
 800f920:	4628      	mov	r0, r5
 800f922:	f004 f8b3 	bl	8013a8c <ucdr_serialize_array_uint8_t>
 800f926:	7921      	ldrb	r1, [r4, #4]
 800f928:	4607      	mov	r7, r0
 800f92a:	4628      	mov	r0, r5
 800f92c:	f7fb ff0a 	bl	800b744 <ucdr_serialize_uint8_t>
 800f930:	7961      	ldrb	r1, [r4, #5]
 800f932:	4606      	mov	r6, r0
 800f934:	4628      	mov	r0, r5
 800f936:	f7fb ff05 	bl	800b744 <ucdr_serialize_uint8_t>
 800f93a:	ea08 0807 	and.w	r8, r8, r7
 800f93e:	ea06 0608 	and.w	r6, r6, r8
 800f942:	4006      	ands	r6, r0
 800f944:	7a21      	ldrb	r1, [r4, #8]
 800f946:	4628      	mov	r0, r5
 800f948:	f7fb fece 	bl	800b6e8 <ucdr_serialize_bool>
 800f94c:	7a23      	ldrb	r3, [r4, #8]
 800f94e:	b2f7      	uxtb	r7, r6
 800f950:	4606      	mov	r6, r0
 800f952:	b96b      	cbnz	r3, 800f970 <uxr_serialize_INFO_Payload+0x64>
 800f954:	f894 121c 	ldrb.w	r1, [r4, #540]	@ 0x21c
 800f958:	4628      	mov	r0, r5
 800f95a:	f7fb fec5 	bl	800b6e8 <ucdr_serialize_bool>
 800f95e:	f894 321c 	ldrb.w	r3, [r4, #540]	@ 0x21c
 800f962:	4030      	ands	r0, r6
 800f964:	b2c6      	uxtb	r6, r0
 800f966:	b983      	cbnz	r3, 800f98a <uxr_serialize_INFO_Payload+0x7e>
 800f968:	ea06 0007 	and.w	r0, r6, r7
 800f96c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f970:	7b21      	ldrb	r1, [r4, #12]
 800f972:	4628      	mov	r0, r5
 800f974:	f7fb fee6 	bl	800b744 <ucdr_serialize_uint8_t>
 800f978:	b188      	cbz	r0, 800f99e <uxr_serialize_INFO_Payload+0x92>
 800f97a:	f104 010c 	add.w	r1, r4, #12
 800f97e:	4628      	mov	r0, r5
 800f980:	f7ff fae2 	bl	800ef48 <uxr_serialize_ObjectVariant.part.0>
 800f984:	4030      	ands	r0, r6
 800f986:	b2c6      	uxtb	r6, r0
 800f988:	e7e4      	b.n	800f954 <uxr_serialize_INFO_Payload+0x48>
 800f98a:	f504 7108 	add.w	r1, r4, #544	@ 0x220
 800f98e:	4628      	mov	r0, r5
 800f990:	f7ff fdb2 	bl	800f4f8 <uxr_serialize_ActivityInfoVariant>
 800f994:	4006      	ands	r6, r0
 800f996:	ea06 0007 	and.w	r0, r6, r7
 800f99a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f99e:	4606      	mov	r6, r0
 800f9a0:	e7d8      	b.n	800f954 <uxr_serialize_INFO_Payload+0x48>
 800f9a2:	bf00      	nop

0800f9a4 <uxr_serialize_READ_DATA_Payload>:
 800f9a4:	b570      	push	{r4, r5, r6, lr}
 800f9a6:	2202      	movs	r2, #2
 800f9a8:	4605      	mov	r5, r0
 800f9aa:	460e      	mov	r6, r1
 800f9ac:	f004 f86e 	bl	8013a8c <ucdr_serialize_array_uint8_t>
 800f9b0:	2202      	movs	r2, #2
 800f9b2:	18b1      	adds	r1, r6, r2
 800f9b4:	4604      	mov	r4, r0
 800f9b6:	4628      	mov	r0, r5
 800f9b8:	f004 f868 	bl	8013a8c <ucdr_serialize_array_uint8_t>
 800f9bc:	1d31      	adds	r1, r6, #4
 800f9be:	4004      	ands	r4, r0
 800f9c0:	4628      	mov	r0, r5
 800f9c2:	f7ff fe5d 	bl	800f680 <uxr_serialize_ReadSpecification>
 800f9c6:	b2e4      	uxtb	r4, r4
 800f9c8:	4020      	ands	r0, r4
 800f9ca:	bd70      	pop	{r4, r5, r6, pc}

0800f9cc <uxr_serialize_WRITE_DATA_Payload_Data>:
 800f9cc:	b570      	push	{r4, r5, r6, lr}
 800f9ce:	2202      	movs	r2, #2
 800f9d0:	4605      	mov	r5, r0
 800f9d2:	460e      	mov	r6, r1
 800f9d4:	f004 f85a 	bl	8013a8c <ucdr_serialize_array_uint8_t>
 800f9d8:	2202      	movs	r2, #2
 800f9da:	4604      	mov	r4, r0
 800f9dc:	18b1      	adds	r1, r6, r2
 800f9de:	4628      	mov	r0, r5
 800f9e0:	f004 f854 	bl	8013a8c <ucdr_serialize_array_uint8_t>
 800f9e4:	4020      	ands	r0, r4
 800f9e6:	b2c0      	uxtb	r0, r0
 800f9e8:	bd70      	pop	{r4, r5, r6, pc}
 800f9ea:	bf00      	nop

0800f9ec <uxr_serialize_ACKNACK_Payload>:
 800f9ec:	b570      	push	{r4, r5, r6, lr}
 800f9ee:	460c      	mov	r4, r1
 800f9f0:	460e      	mov	r6, r1
 800f9f2:	f834 1b02 	ldrh.w	r1, [r4], #2
 800f9f6:	4605      	mov	r5, r0
 800f9f8:	f7fb fed0 	bl	800b79c <ucdr_serialize_uint16_t>
 800f9fc:	2202      	movs	r2, #2
 800f9fe:	4621      	mov	r1, r4
 800fa00:	4604      	mov	r4, r0
 800fa02:	4628      	mov	r0, r5
 800fa04:	f004 f842 	bl	8013a8c <ucdr_serialize_array_uint8_t>
 800fa08:	7931      	ldrb	r1, [r6, #4]
 800fa0a:	4004      	ands	r4, r0
 800fa0c:	4628      	mov	r0, r5
 800fa0e:	f7fb fe99 	bl	800b744 <ucdr_serialize_uint8_t>
 800fa12:	b2e4      	uxtb	r4, r4
 800fa14:	4020      	ands	r0, r4
 800fa16:	bd70      	pop	{r4, r5, r6, pc}

0800fa18 <uxr_deserialize_ACKNACK_Payload>:
 800fa18:	b570      	push	{r4, r5, r6, lr}
 800fa1a:	4605      	mov	r5, r0
 800fa1c:	460e      	mov	r6, r1
 800fa1e:	f7fb ffbd 	bl	800b99c <ucdr_deserialize_uint16_t>
 800fa22:	2202      	movs	r2, #2
 800fa24:	18b1      	adds	r1, r6, r2
 800fa26:	4604      	mov	r4, r0
 800fa28:	4628      	mov	r0, r5
 800fa2a:	f004 f893 	bl	8013b54 <ucdr_deserialize_array_uint8_t>
 800fa2e:	1d31      	adds	r1, r6, #4
 800fa30:	4004      	ands	r4, r0
 800fa32:	4628      	mov	r0, r5
 800fa34:	f7fb fe9c 	bl	800b770 <ucdr_deserialize_uint8_t>
 800fa38:	b2e4      	uxtb	r4, r4
 800fa3a:	4020      	ands	r0, r4
 800fa3c:	bd70      	pop	{r4, r5, r6, pc}
 800fa3e:	bf00      	nop

0800fa40 <uxr_serialize_HEARTBEAT_Payload>:
 800fa40:	b570      	push	{r4, r5, r6, lr}
 800fa42:	460d      	mov	r5, r1
 800fa44:	8809      	ldrh	r1, [r1, #0]
 800fa46:	4606      	mov	r6, r0
 800fa48:	f7fb fea8 	bl	800b79c <ucdr_serialize_uint16_t>
 800fa4c:	8869      	ldrh	r1, [r5, #2]
 800fa4e:	4604      	mov	r4, r0
 800fa50:	4630      	mov	r0, r6
 800fa52:	f7fb fea3 	bl	800b79c <ucdr_serialize_uint16_t>
 800fa56:	7929      	ldrb	r1, [r5, #4]
 800fa58:	4004      	ands	r4, r0
 800fa5a:	4630      	mov	r0, r6
 800fa5c:	f7fb fe72 	bl	800b744 <ucdr_serialize_uint8_t>
 800fa60:	b2e4      	uxtb	r4, r4
 800fa62:	4020      	ands	r0, r4
 800fa64:	bd70      	pop	{r4, r5, r6, pc}
 800fa66:	bf00      	nop

0800fa68 <uxr_deserialize_HEARTBEAT_Payload>:
 800fa68:	b570      	push	{r4, r5, r6, lr}
 800fa6a:	4605      	mov	r5, r0
 800fa6c:	460e      	mov	r6, r1
 800fa6e:	f7fb ff95 	bl	800b99c <ucdr_deserialize_uint16_t>
 800fa72:	1cb1      	adds	r1, r6, #2
 800fa74:	4604      	mov	r4, r0
 800fa76:	4628      	mov	r0, r5
 800fa78:	f7fb ff90 	bl	800b99c <ucdr_deserialize_uint16_t>
 800fa7c:	1d31      	adds	r1, r6, #4
 800fa7e:	4004      	ands	r4, r0
 800fa80:	4628      	mov	r0, r5
 800fa82:	f7fb fe75 	bl	800b770 <ucdr_deserialize_uint8_t>
 800fa86:	b2e4      	uxtb	r4, r4
 800fa88:	4020      	ands	r0, r4
 800fa8a:	bd70      	pop	{r4, r5, r6, pc}

0800fa8c <uxr_deserialize_TIMESTAMP_REPLY_Payload>:
 800fa8c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fa90:	4605      	mov	r5, r0
 800fa92:	460e      	mov	r6, r1
 800fa94:	f7fc fd1e 	bl	800c4d4 <ucdr_deserialize_int32_t>
 800fa98:	1d31      	adds	r1, r6, #4
 800fa9a:	4607      	mov	r7, r0
 800fa9c:	4628      	mov	r0, r5
 800fa9e:	f7fc f997 	bl	800bdd0 <ucdr_deserialize_uint32_t>
 800faa2:	f106 0108 	add.w	r1, r6, #8
 800faa6:	4680      	mov	r8, r0
 800faa8:	4628      	mov	r0, r5
 800faaa:	f7fc fd13 	bl	800c4d4 <ucdr_deserialize_int32_t>
 800faae:	f106 010c 	add.w	r1, r6, #12
 800fab2:	4604      	mov	r4, r0
 800fab4:	4628      	mov	r0, r5
 800fab6:	f7fc f98b 	bl	800bdd0 <ucdr_deserialize_uint32_t>
 800faba:	ea07 0708 	and.w	r7, r7, r8
 800fabe:	403c      	ands	r4, r7
 800fac0:	f106 0110 	add.w	r1, r6, #16
 800fac4:	4004      	ands	r4, r0
 800fac6:	4628      	mov	r0, r5
 800fac8:	f7fc fd04 	bl	800c4d4 <ucdr_deserialize_int32_t>
 800facc:	f106 0114 	add.w	r1, r6, #20
 800fad0:	4607      	mov	r7, r0
 800fad2:	4628      	mov	r0, r5
 800fad4:	f7fc f97c 	bl	800bdd0 <ucdr_deserialize_uint32_t>
 800fad8:	b2e4      	uxtb	r4, r4
 800fada:	403c      	ands	r4, r7
 800fadc:	4020      	ands	r0, r4
 800fade:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800fae2:	bf00      	nop

0800fae4 <uxr_serialize_SampleIdentity>:
 800fae4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fae8:	220c      	movs	r2, #12
 800faea:	4604      	mov	r4, r0
 800faec:	460d      	mov	r5, r1
 800faee:	f003 ffcd 	bl	8013a8c <ucdr_serialize_array_uint8_t>
 800faf2:	2203      	movs	r2, #3
 800faf4:	f105 010c 	add.w	r1, r5, #12
 800faf8:	4607      	mov	r7, r0
 800fafa:	4620      	mov	r0, r4
 800fafc:	f003 ffc6 	bl	8013a8c <ucdr_serialize_array_uint8_t>
 800fb00:	7be9      	ldrb	r1, [r5, #15]
 800fb02:	4680      	mov	r8, r0
 800fb04:	4620      	mov	r0, r4
 800fb06:	f7fb fe1d 	bl	800b744 <ucdr_serialize_uint8_t>
 800fb0a:	6929      	ldr	r1, [r5, #16]
 800fb0c:	4606      	mov	r6, r0
 800fb0e:	4620      	mov	r0, r4
 800fb10:	f7fc fc48 	bl	800c3a4 <ucdr_serialize_int32_t>
 800fb14:	6969      	ldr	r1, [r5, #20]
 800fb16:	4603      	mov	r3, r0
 800fb18:	4620      	mov	r0, r4
 800fb1a:	ea07 0708 	and.w	r7, r7, r8
 800fb1e:	461c      	mov	r4, r3
 800fb20:	f7fc f826 	bl	800bb70 <ucdr_serialize_uint32_t>
 800fb24:	403e      	ands	r6, r7
 800fb26:	4034      	ands	r4, r6
 800fb28:	4020      	ands	r0, r4
 800fb2a:	b2c0      	uxtb	r0, r0
 800fb2c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800fb30 <uxr_deserialize_SampleIdentity>:
 800fb30:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fb34:	220c      	movs	r2, #12
 800fb36:	4604      	mov	r4, r0
 800fb38:	460d      	mov	r5, r1
 800fb3a:	f004 f80b 	bl	8013b54 <ucdr_deserialize_array_uint8_t>
 800fb3e:	2203      	movs	r2, #3
 800fb40:	f105 010c 	add.w	r1, r5, #12
 800fb44:	4607      	mov	r7, r0
 800fb46:	4620      	mov	r0, r4
 800fb48:	f004 f804 	bl	8013b54 <ucdr_deserialize_array_uint8_t>
 800fb4c:	f105 010f 	add.w	r1, r5, #15
 800fb50:	4680      	mov	r8, r0
 800fb52:	4620      	mov	r0, r4
 800fb54:	f7fb fe0c 	bl	800b770 <ucdr_deserialize_uint8_t>
 800fb58:	f105 0110 	add.w	r1, r5, #16
 800fb5c:	4606      	mov	r6, r0
 800fb5e:	4620      	mov	r0, r4
 800fb60:	f7fc fcb8 	bl	800c4d4 <ucdr_deserialize_int32_t>
 800fb64:	f105 0114 	add.w	r1, r5, #20
 800fb68:	4603      	mov	r3, r0
 800fb6a:	4620      	mov	r0, r4
 800fb6c:	ea07 0708 	and.w	r7, r7, r8
 800fb70:	461c      	mov	r4, r3
 800fb72:	f7fc f92d 	bl	800bdd0 <ucdr_deserialize_uint32_t>
 800fb76:	403e      	ands	r6, r7
 800fb78:	4034      	ands	r4, r6
 800fb7a:	4020      	ands	r0, r4
 800fb7c:	b2c0      	uxtb	r0, r0
 800fb7e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800fb82:	bf00      	nop

0800fb84 <rcl_client_get_rmw_handle>:
 800fb84:	b118      	cbz	r0, 800fb8e <rcl_client_get_rmw_handle+0xa>
 800fb86:	6800      	ldr	r0, [r0, #0]
 800fb88:	b108      	cbz	r0, 800fb8e <rcl_client_get_rmw_handle+0xa>
 800fb8a:	f8d0 0108 	ldr.w	r0, [r0, #264]	@ 0x108
 800fb8e:	4770      	bx	lr

0800fb90 <rcl_send_request>:
 800fb90:	b570      	push	{r4, r5, r6, lr}
 800fb92:	b082      	sub	sp, #8
 800fb94:	b1e8      	cbz	r0, 800fbd2 <rcl_send_request+0x42>
 800fb96:	4604      	mov	r4, r0
 800fb98:	6800      	ldr	r0, [r0, #0]
 800fb9a:	b1d0      	cbz	r0, 800fbd2 <rcl_send_request+0x42>
 800fb9c:	f8d0 3108 	ldr.w	r3, [r0, #264]	@ 0x108
 800fba0:	b1bb      	cbz	r3, 800fbd2 <rcl_send_request+0x42>
 800fba2:	460e      	mov	r6, r1
 800fba4:	b1d1      	cbz	r1, 800fbdc <rcl_send_request+0x4c>
 800fba6:	4615      	mov	r5, r2
 800fba8:	b1c2      	cbz	r2, 800fbdc <rcl_send_request+0x4c>
 800fbaa:	2105      	movs	r1, #5
 800fbac:	f500 7088 	add.w	r0, r0, #272	@ 0x110
 800fbb0:	f002 fc76 	bl	80124a0 <__atomic_load_8>
 800fbb4:	6823      	ldr	r3, [r4, #0]
 800fbb6:	e9c5 0100 	strd	r0, r1, [r5]
 800fbba:	462a      	mov	r2, r5
 800fbbc:	4631      	mov	r1, r6
 800fbbe:	f8d3 0108 	ldr.w	r0, [r3, #264]	@ 0x108
 800fbc2:	f003 fb81 	bl	80132c8 <rmw_send_request>
 800fbc6:	4606      	mov	r6, r0
 800fbc8:	b160      	cbz	r0, 800fbe4 <rcl_send_request+0x54>
 800fbca:	2601      	movs	r6, #1
 800fbcc:	4630      	mov	r0, r6
 800fbce:	b002      	add	sp, #8
 800fbd0:	bd70      	pop	{r4, r5, r6, pc}
 800fbd2:	f44f 76fa 	mov.w	r6, #500	@ 0x1f4
 800fbd6:	4630      	mov	r0, r6
 800fbd8:	b002      	add	sp, #8
 800fbda:	bd70      	pop	{r4, r5, r6, pc}
 800fbdc:	260b      	movs	r6, #11
 800fbde:	4630      	mov	r0, r6
 800fbe0:	b002      	add	sp, #8
 800fbe2:	bd70      	pop	{r4, r5, r6, pc}
 800fbe4:	6820      	ldr	r0, [r4, #0]
 800fbe6:	2105      	movs	r1, #5
 800fbe8:	e9d5 2300 	ldrd	r2, r3, [r5]
 800fbec:	f500 7088 	add.w	r0, r0, #272	@ 0x110
 800fbf0:	9100      	str	r1, [sp, #0]
 800fbf2:	f002 fcc1 	bl	8012578 <__atomic_exchange_8>
 800fbf6:	4630      	mov	r0, r6
 800fbf8:	b002      	add	sp, #8
 800fbfa:	bd70      	pop	{r4, r5, r6, pc}
 800fbfc:	0000      	movs	r0, r0
	...

0800fc00 <rcl_take_response>:
 800fc00:	b570      	push	{r4, r5, r6, lr}
 800fc02:	468e      	mov	lr, r1
 800fc04:	460c      	mov	r4, r1
 800fc06:	4616      	mov	r6, r2
 800fc08:	4605      	mov	r5, r0
 800fc0a:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800fc0e:	b08c      	sub	sp, #48	@ 0x30
 800fc10:	f10d 0c18 	add.w	ip, sp, #24
 800fc14:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800fc18:	e89e 0003 	ldmia.w	lr, {r0, r1}
 800fc1c:	e88c 0003 	stmia.w	ip, {r0, r1}
 800fc20:	b35d      	cbz	r5, 800fc7a <rcl_take_response+0x7a>
 800fc22:	682b      	ldr	r3, [r5, #0]
 800fc24:	b34b      	cbz	r3, 800fc7a <rcl_take_response+0x7a>
 800fc26:	f8d3 0108 	ldr.w	r0, [r3, #264]	@ 0x108
 800fc2a:	b330      	cbz	r0, 800fc7a <rcl_take_response+0x7a>
 800fc2c:	b346      	cbz	r6, 800fc80 <rcl_take_response+0x80>
 800fc2e:	ed9f 7b16 	vldr	d7, [pc, #88]	@ 800fc88 <rcl_take_response+0x88>
 800fc32:	2300      	movs	r3, #0
 800fc34:	f88d 3007 	strb.w	r3, [sp, #7]
 800fc38:	4632      	mov	r2, r6
 800fc3a:	f10d 0307 	add.w	r3, sp, #7
 800fc3e:	a902      	add	r1, sp, #8
 800fc40:	ed8d 7b02 	vstr	d7, [sp, #8]
 800fc44:	ed8d 7b04 	vstr	d7, [sp, #16]
 800fc48:	f003 fc46 	bl	80134d8 <rmw_take_response>
 800fc4c:	4605      	mov	r5, r0
 800fc4e:	b9c8      	cbnz	r0, 800fc84 <rcl_take_response+0x84>
 800fc50:	f89d 2007 	ldrb.w	r2, [sp, #7]
 800fc54:	f240 13f5 	movw	r3, #501	@ 0x1f5
 800fc58:	2a00      	cmp	r2, #0
 800fc5a:	bf08      	it	eq
 800fc5c:	461d      	moveq	r5, r3
 800fc5e:	f10d 0e18 	add.w	lr, sp, #24
 800fc62:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800fc66:	46a4      	mov	ip, r4
 800fc68:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800fc6c:	e89e 0003 	ldmia.w	lr, {r0, r1}
 800fc70:	e88c 0003 	stmia.w	ip, {r0, r1}
 800fc74:	4628      	mov	r0, r5
 800fc76:	b00c      	add	sp, #48	@ 0x30
 800fc78:	bd70      	pop	{r4, r5, r6, pc}
 800fc7a:	f44f 75fa 	mov.w	r5, #500	@ 0x1f4
 800fc7e:	e7ee      	b.n	800fc5e <rcl_take_response+0x5e>
 800fc80:	250b      	movs	r5, #11
 800fc82:	e7ec      	b.n	800fc5e <rcl_take_response+0x5e>
 800fc84:	2501      	movs	r5, #1
 800fc86:	e7ea      	b.n	800fc5e <rcl_take_response+0x5e>
	...

0800fc90 <rcl_client_is_valid>:
 800fc90:	b130      	cbz	r0, 800fca0 <rcl_client_is_valid+0x10>
 800fc92:	6800      	ldr	r0, [r0, #0]
 800fc94:	b120      	cbz	r0, 800fca0 <rcl_client_is_valid+0x10>
 800fc96:	f8d0 0108 	ldr.w	r0, [r0, #264]	@ 0x108
 800fc9a:	3800      	subs	r0, #0
 800fc9c:	bf18      	it	ne
 800fc9e:	2001      	movne	r0, #1
 800fca0:	4770      	bx	lr
 800fca2:	bf00      	nop

0800fca4 <rcl_convert_rmw_ret_to_rcl_ret>:
 800fca4:	280b      	cmp	r0, #11
 800fca6:	dc0d      	bgt.n	800fcc4 <rcl_convert_rmw_ret_to_rcl_ret+0x20>
 800fca8:	2800      	cmp	r0, #0
 800fcaa:	db09      	blt.n	800fcc0 <rcl_convert_rmw_ret_to_rcl_ret+0x1c>
 800fcac:	280b      	cmp	r0, #11
 800fcae:	d807      	bhi.n	800fcc0 <rcl_convert_rmw_ret_to_rcl_ret+0x1c>
 800fcb0:	e8df f000 	tbb	[pc, r0]
 800fcb4:	07060607 	.word	0x07060607
 800fcb8:	06060606 	.word	0x06060606
 800fcbc:	07070606 	.word	0x07070606
 800fcc0:	2001      	movs	r0, #1
 800fcc2:	4770      	bx	lr
 800fcc4:	28cb      	cmp	r0, #203	@ 0xcb
 800fcc6:	bf18      	it	ne
 800fcc8:	2001      	movne	r0, #1
 800fcca:	4770      	bx	lr

0800fccc <rcl_get_zero_initialized_context>:
 800fccc:	4a03      	ldr	r2, [pc, #12]	@ (800fcdc <rcl_get_zero_initialized_context+0x10>)
 800fcce:	4603      	mov	r3, r0
 800fcd0:	e892 0003 	ldmia.w	r2, {r0, r1}
 800fcd4:	e883 0003 	stmia.w	r3, {r0, r1}
 800fcd8:	4618      	mov	r0, r3
 800fcda:	4770      	bx	lr
 800fcdc:	08016d40 	.word	0x08016d40

0800fce0 <rcl_context_is_valid>:
 800fce0:	b118      	cbz	r0, 800fcea <rcl_context_is_valid+0xa>
 800fce2:	6840      	ldr	r0, [r0, #4]
 800fce4:	3800      	subs	r0, #0
 800fce6:	bf18      	it	ne
 800fce8:	2001      	movne	r0, #1
 800fcea:	4770      	bx	lr

0800fcec <__cleanup_context>:
 800fcec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800fcf0:	4606      	mov	r6, r0
 800fcf2:	6800      	ldr	r0, [r0, #0]
 800fcf4:	2300      	movs	r3, #0
 800fcf6:	6073      	str	r3, [r6, #4]
 800fcf8:	2800      	cmp	r0, #0
 800fcfa:	d049      	beq.n	800fd90 <__cleanup_context+0xa4>
 800fcfc:	6947      	ldr	r7, [r0, #20]
 800fcfe:	f8d0 8004 	ldr.w	r8, [r0, #4]
 800fd02:	f8d0 9010 	ldr.w	r9, [r0, #16]
 800fd06:	b137      	cbz	r7, 800fd16 <__cleanup_context+0x2a>
 800fd08:	3014      	adds	r0, #20
 800fd0a:	f7f9 fb5d 	bl	80093c8 <rcl_init_options_fini>
 800fd0e:	4607      	mov	r7, r0
 800fd10:	2800      	cmp	r0, #0
 800fd12:	d144      	bne.n	800fd9e <__cleanup_context+0xb2>
 800fd14:	6830      	ldr	r0, [r6, #0]
 800fd16:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 800fd18:	b143      	cbz	r3, 800fd2c <__cleanup_context+0x40>
 800fd1a:	3028      	adds	r0, #40	@ 0x28
 800fd1c:	f7fa fdd4 	bl	800a8c8 <rmw_context_fini>
 800fd20:	b118      	cbz	r0, 800fd2a <__cleanup_context+0x3e>
 800fd22:	2f00      	cmp	r7, #0
 800fd24:	d03e      	beq.n	800fda4 <__cleanup_context+0xb8>
 800fd26:	f7fa fb0b 	bl	800a340 <rcutils_reset_error>
 800fd2a:	6830      	ldr	r0, [r6, #0]
 800fd2c:	6a03      	ldr	r3, [r0, #32]
 800fd2e:	b1db      	cbz	r3, 800fd68 <__cleanup_context+0x7c>
 800fd30:	e9d0 2c06 	ldrd	r2, ip, [r0, #24]
 800fd34:	2a01      	cmp	r2, #1
 800fd36:	f17c 0100 	sbcs.w	r1, ip, #0
 800fd3a:	db11      	blt.n	800fd60 <__cleanup_context+0x74>
 800fd3c:	2400      	movs	r4, #0
 800fd3e:	4625      	mov	r5, r4
 800fd40:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 800fd44:	4649      	mov	r1, r9
 800fd46:	b1b8      	cbz	r0, 800fd78 <__cleanup_context+0x8c>
 800fd48:	47c0      	blx	r8
 800fd4a:	6833      	ldr	r3, [r6, #0]
 800fd4c:	e9d3 2c06 	ldrd	r2, ip, [r3, #24]
 800fd50:	3401      	adds	r4, #1
 800fd52:	f145 0500 	adc.w	r5, r5, #0
 800fd56:	4294      	cmp	r4, r2
 800fd58:	eb75 010c 	sbcs.w	r1, r5, ip
 800fd5c:	6a1b      	ldr	r3, [r3, #32]
 800fd5e:	dbef      	blt.n	800fd40 <__cleanup_context+0x54>
 800fd60:	4618      	mov	r0, r3
 800fd62:	4649      	mov	r1, r9
 800fd64:	47c0      	blx	r8
 800fd66:	6830      	ldr	r0, [r6, #0]
 800fd68:	4649      	mov	r1, r9
 800fd6a:	47c0      	blx	r8
 800fd6c:	2300      	movs	r3, #0
 800fd6e:	e9c6 3300 	strd	r3, r3, [r6]
 800fd72:	4638      	mov	r0, r7
 800fd74:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800fd78:	3401      	adds	r4, #1
 800fd7a:	f145 0500 	adc.w	r5, r5, #0
 800fd7e:	4294      	cmp	r4, r2
 800fd80:	eb75 010c 	sbcs.w	r1, r5, ip
 800fd84:	dbdc      	blt.n	800fd40 <__cleanup_context+0x54>
 800fd86:	4618      	mov	r0, r3
 800fd88:	4649      	mov	r1, r9
 800fd8a:	47c0      	blx	r8
 800fd8c:	6830      	ldr	r0, [r6, #0]
 800fd8e:	e7eb      	b.n	800fd68 <__cleanup_context+0x7c>
 800fd90:	4607      	mov	r7, r0
 800fd92:	2300      	movs	r3, #0
 800fd94:	e9c6 3300 	strd	r3, r3, [r6]
 800fd98:	4638      	mov	r0, r7
 800fd9a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800fd9e:	f7fa facf 	bl	800a340 <rcutils_reset_error>
 800fda2:	e7b7      	b.n	800fd14 <__cleanup_context+0x28>
 800fda4:	f7ff ff7e 	bl	800fca4 <rcl_convert_rmw_ret_to_rcl_ret>
 800fda8:	4607      	mov	r7, r0
 800fdaa:	e7bc      	b.n	800fd26 <__cleanup_context+0x3a>

0800fdac <rcl_init>:
 800fdac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800fdb0:	1e05      	subs	r5, r0, #0
 800fdb2:	b09e      	sub	sp, #120	@ 0x78
 800fdb4:	460e      	mov	r6, r1
 800fdb6:	4690      	mov	r8, r2
 800fdb8:	461f      	mov	r7, r3
 800fdba:	f340 809c 	ble.w	800fef6 <rcl_init+0x14a>
 800fdbe:	2900      	cmp	r1, #0
 800fdc0:	f000 809c 	beq.w	800fefc <rcl_init+0x150>
 800fdc4:	f1a1 0e04 	sub.w	lr, r1, #4
 800fdc8:	f04f 0c00 	mov.w	ip, #0
 800fdcc:	f85e 4f04 	ldr.w	r4, [lr, #4]!
 800fdd0:	f10c 0c01 	add.w	ip, ip, #1
 800fdd4:	2c00      	cmp	r4, #0
 800fdd6:	f000 8091 	beq.w	800fefc <rcl_init+0x150>
 800fdda:	4565      	cmp	r5, ip
 800fddc:	d1f6      	bne.n	800fdcc <rcl_init+0x20>
 800fdde:	f1b8 0f00 	cmp.w	r8, #0
 800fde2:	f000 808b 	beq.w	800fefc <rcl_init+0x150>
 800fde6:	f8d8 4000 	ldr.w	r4, [r8]
 800fdea:	2c00      	cmp	r4, #0
 800fdec:	f000 8086 	beq.w	800fefc <rcl_init+0x150>
 800fdf0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800fdf2:	f10d 0c64 	add.w	ip, sp, #100	@ 0x64
 800fdf6:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800fdfa:	6823      	ldr	r3, [r4, #0]
 800fdfc:	f8cc 3000 	str.w	r3, [ip]
 800fe00:	a819      	add	r0, sp, #100	@ 0x64
 800fe02:	f7fa fa77 	bl	800a2f4 <rcutils_allocator_is_valid>
 800fe06:	2800      	cmp	r0, #0
 800fe08:	d078      	beq.n	800fefc <rcl_init+0x150>
 800fe0a:	2f00      	cmp	r7, #0
 800fe0c:	d076      	beq.n	800fefc <rcl_init+0x150>
 800fe0e:	683b      	ldr	r3, [r7, #0]
 800fe10:	2b00      	cmp	r3, #0
 800fe12:	d178      	bne.n	800ff06 <rcl_init+0x15a>
 800fe14:	e9dd 321c 	ldrd	r3, r2, [sp, #112]	@ 0x70
 800fe18:	2178      	movs	r1, #120	@ 0x78
 800fe1a:	2001      	movs	r0, #1
 800fe1c:	4798      	blx	r3
 800fe1e:	4604      	mov	r4, r0
 800fe20:	6038      	str	r0, [r7, #0]
 800fe22:	2800      	cmp	r0, #0
 800fe24:	f000 80b6 	beq.w	800ff94 <rcl_init+0x1e8>
 800fe28:	a802      	add	r0, sp, #8
 800fe2a:	f002 fe89 	bl	8012b40 <rmw_get_zero_initialized_context>
 800fe2e:	a902      	add	r1, sp, #8
 800fe30:	f104 0028 	add.w	r0, r4, #40	@ 0x28
 800fe34:	2250      	movs	r2, #80	@ 0x50
 800fe36:	ac19      	add	r4, sp, #100	@ 0x64
 800fe38:	f005 fdbb 	bl	80159b2 <memcpy>
 800fe3c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800fe3e:	f8d7 e000 	ldr.w	lr, [r7]
 800fe42:	46f4      	mov	ip, lr
 800fe44:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800fe48:	6823      	ldr	r3, [r4, #0]
 800fe4a:	f8cc 3000 	str.w	r3, [ip]
 800fe4e:	f10e 0114 	add.w	r1, lr, #20
 800fe52:	4640      	mov	r0, r8
 800fe54:	f7f9 fae2 	bl	800941c <rcl_init_options_copy>
 800fe58:	4604      	mov	r4, r0
 800fe5a:	2800      	cmp	r0, #0
 800fe5c:	d144      	bne.n	800fee8 <rcl_init+0x13c>
 800fe5e:	f8d7 9000 	ldr.w	r9, [r7]
 800fe62:	ea4f 78e5 	mov.w	r8, r5, asr #31
 800fe66:	f8c9 0020 	str.w	r0, [r9, #32]
 800fe6a:	f8c9 5018 	str.w	r5, [r9, #24]
 800fe6e:	f8c9 801c 	str.w	r8, [r9, #28]
 800fe72:	2d00      	cmp	r5, #0
 800fe74:	d04e      	beq.n	800ff14 <rcl_init+0x168>
 800fe76:	2e00      	cmp	r6, #0
 800fe78:	d04c      	beq.n	800ff14 <rcl_init+0x168>
 800fe7a:	e9dd 321c 	ldrd	r3, r2, [sp, #112]	@ 0x70
 800fe7e:	2104      	movs	r1, #4
 800fe80:	4628      	mov	r0, r5
 800fe82:	4798      	blx	r3
 800fe84:	f8c9 0020 	str.w	r0, [r9, #32]
 800fe88:	f8d7 9000 	ldr.w	r9, [r7]
 800fe8c:	f8d9 3020 	ldr.w	r3, [r9, #32]
 800fe90:	46ca      	mov	sl, r9
 800fe92:	b343      	cbz	r3, 800fee6 <rcl_init+0x13a>
 800fe94:	2d01      	cmp	r5, #1
 800fe96:	f178 0300 	sbcs.w	r3, r8, #0
 800fe9a:	db3b      	blt.n	800ff14 <rcl_init+0x168>
 800fe9c:	2400      	movs	r4, #0
 800fe9e:	3e04      	subs	r6, #4
 800fea0:	46a1      	mov	r9, r4
 800fea2:	e00b      	b.n	800febc <rcl_init+0x110>
 800fea4:	6831      	ldr	r1, [r6, #0]
 800fea6:	f005 fd84 	bl	80159b2 <memcpy>
 800feaa:	3401      	adds	r4, #1
 800feac:	f149 0900 	adc.w	r9, r9, #0
 800feb0:	45c8      	cmp	r8, r9
 800feb2:	bf08      	it	eq
 800feb4:	42a5      	cmpeq	r5, r4
 800feb6:	d02b      	beq.n	800ff10 <rcl_init+0x164>
 800feb8:	f8d7 a000 	ldr.w	sl, [r7]
 800febc:	f856 0f04 	ldr.w	r0, [r6, #4]!
 800fec0:	f7f0 f998 	bl	80001f4 <strlen>
 800fec4:	1c42      	adds	r2, r0, #1
 800fec6:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800fec8:	991d      	ldr	r1, [sp, #116]	@ 0x74
 800feca:	f8da a020 	ldr.w	sl, [sl, #32]
 800fece:	9201      	str	r2, [sp, #4]
 800fed0:	4610      	mov	r0, r2
 800fed2:	4798      	blx	r3
 800fed4:	683b      	ldr	r3, [r7, #0]
 800fed6:	f84a 0024 	str.w	r0, [sl, r4, lsl #2]
 800feda:	6a1b      	ldr	r3, [r3, #32]
 800fedc:	9a01      	ldr	r2, [sp, #4]
 800fede:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 800fee2:	2800      	cmp	r0, #0
 800fee4:	d1de      	bne.n	800fea4 <rcl_init+0xf8>
 800fee6:	240a      	movs	r4, #10
 800fee8:	4638      	mov	r0, r7
 800feea:	f7ff feff 	bl	800fcec <__cleanup_context>
 800feee:	4620      	mov	r0, r4
 800fef0:	b01e      	add	sp, #120	@ 0x78
 800fef2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800fef6:	2900      	cmp	r1, #0
 800fef8:	f43f af71 	beq.w	800fdde <rcl_init+0x32>
 800fefc:	240b      	movs	r4, #11
 800fefe:	4620      	mov	r0, r4
 800ff00:	b01e      	add	sp, #120	@ 0x78
 800ff02:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ff06:	2464      	movs	r4, #100	@ 0x64
 800ff08:	4620      	mov	r0, r4
 800ff0a:	b01e      	add	sp, #120	@ 0x78
 800ff0c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ff10:	f8d7 9000 	ldr.w	r9, [r7]
 800ff14:	4926      	ldr	r1, [pc, #152]	@ (800ffb0 <rcl_init+0x204>)
 800ff16:	680b      	ldr	r3, [r1, #0]
 800ff18:	3301      	adds	r3, #1
 800ff1a:	d036      	beq.n	800ff8a <rcl_init+0x1de>
 800ff1c:	600b      	str	r3, [r1, #0]
 800ff1e:	461a      	mov	r2, r3
 800ff20:	2400      	movs	r4, #0
 800ff22:	f8d9 0014 	ldr.w	r0, [r9, #20]
 800ff26:	607b      	str	r3, [r7, #4]
 800ff28:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 800ff2a:	3301      	adds	r3, #1
 800ff2c:	e9c0 2406 	strd	r2, r4, [r0, #24]
 800ff30:	d034      	beq.n	800ff9c <rcl_init+0x1f0>
 800ff32:	f890 3030 	ldrb.w	r3, [r0, #48]	@ 0x30
 800ff36:	b93b      	cbnz	r3, 800ff48 <rcl_init+0x19c>
 800ff38:	3030      	adds	r0, #48	@ 0x30
 800ff3a:	f000 f83b 	bl	800ffb4 <rcl_get_localhost_only>
 800ff3e:	4604      	mov	r4, r0
 800ff40:	2800      	cmp	r0, #0
 800ff42:	d1d1      	bne.n	800fee8 <rcl_init+0x13c>
 800ff44:	683b      	ldr	r3, [r7, #0]
 800ff46:	6958      	ldr	r0, [r3, #20]
 800ff48:	6b40      	ldr	r0, [r0, #52]	@ 0x34
 800ff4a:	aa18      	add	r2, sp, #96	@ 0x60
 800ff4c:	a917      	add	r1, sp, #92	@ 0x5c
 800ff4e:	f000 ff43 	bl	8010dd8 <rcl_validate_enclave_name>
 800ff52:	4604      	mov	r4, r0
 800ff54:	2800      	cmp	r0, #0
 800ff56:	d1c7      	bne.n	800fee8 <rcl_init+0x13c>
 800ff58:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800ff5a:	b9eb      	cbnz	r3, 800ff98 <rcl_init+0x1ec>
 800ff5c:	6839      	ldr	r1, [r7, #0]
 800ff5e:	694b      	ldr	r3, [r1, #20]
 800ff60:	6b58      	ldr	r0, [r3, #52]	@ 0x34
 800ff62:	f103 0228 	add.w	r2, r3, #40	@ 0x28
 800ff66:	f000 fb3f 	bl	80105e8 <rcl_get_security_options_from_environment>
 800ff6a:	4604      	mov	r4, r0
 800ff6c:	2800      	cmp	r0, #0
 800ff6e:	d1bb      	bne.n	800fee8 <rcl_init+0x13c>
 800ff70:	6839      	ldr	r1, [r7, #0]
 800ff72:	6948      	ldr	r0, [r1, #20]
 800ff74:	3128      	adds	r1, #40	@ 0x28
 800ff76:	3018      	adds	r0, #24
 800ff78:	f7fa fb70 	bl	800a65c <rmw_init>
 800ff7c:	4604      	mov	r4, r0
 800ff7e:	2800      	cmp	r0, #0
 800ff80:	d0bd      	beq.n	800fefe <rcl_init+0x152>
 800ff82:	f7ff fe8f 	bl	800fca4 <rcl_convert_rmw_ret_to_rcl_ret>
 800ff86:	4604      	mov	r4, r0
 800ff88:	e7ae      	b.n	800fee8 <rcl_init+0x13c>
 800ff8a:	2201      	movs	r2, #1
 800ff8c:	461c      	mov	r4, r3
 800ff8e:	600a      	str	r2, [r1, #0]
 800ff90:	4613      	mov	r3, r2
 800ff92:	e7c6      	b.n	800ff22 <rcl_init+0x176>
 800ff94:	240a      	movs	r4, #10
 800ff96:	e7b2      	b.n	800fefe <rcl_init+0x152>
 800ff98:	2401      	movs	r4, #1
 800ff9a:	e7a5      	b.n	800fee8 <rcl_init+0x13c>
 800ff9c:	3024      	adds	r0, #36	@ 0x24
 800ff9e:	f004 fc25 	bl	80147ec <rcl_get_default_domain_id>
 800ffa2:	4604      	mov	r4, r0
 800ffa4:	2800      	cmp	r0, #0
 800ffa6:	d19f      	bne.n	800fee8 <rcl_init+0x13c>
 800ffa8:	683b      	ldr	r3, [r7, #0]
 800ffaa:	6958      	ldr	r0, [r3, #20]
 800ffac:	e7c1      	b.n	800ff32 <rcl_init+0x186>
 800ffae:	bf00      	nop
 800ffb0:	2000daf8 	.word	0x2000daf8

0800ffb4 <rcl_get_localhost_only>:
 800ffb4:	b510      	push	{r4, lr}
 800ffb6:	b082      	sub	sp, #8
 800ffb8:	2300      	movs	r3, #0
 800ffba:	9301      	str	r3, [sp, #4]
 800ffbc:	b1b8      	cbz	r0, 800ffee <rcl_get_localhost_only+0x3a>
 800ffbe:	4604      	mov	r4, r0
 800ffc0:	a901      	add	r1, sp, #4
 800ffc2:	480c      	ldr	r0, [pc, #48]	@ (800fff4 <rcl_get_localhost_only+0x40>)
 800ffc4:	f002 fb10 	bl	80125e8 <rcutils_get_env>
 800ffc8:	b110      	cbz	r0, 800ffd0 <rcl_get_localhost_only+0x1c>
 800ffca:	2001      	movs	r0, #1
 800ffcc:	b002      	add	sp, #8
 800ffce:	bd10      	pop	{r4, pc}
 800ffd0:	9b01      	ldr	r3, [sp, #4]
 800ffd2:	b113      	cbz	r3, 800ffda <rcl_get_localhost_only+0x26>
 800ffd4:	781a      	ldrb	r2, [r3, #0]
 800ffd6:	2a31      	cmp	r2, #49	@ 0x31
 800ffd8:	d004      	beq.n	800ffe4 <rcl_get_localhost_only+0x30>
 800ffda:	2302      	movs	r3, #2
 800ffdc:	2000      	movs	r0, #0
 800ffde:	7023      	strb	r3, [r4, #0]
 800ffe0:	b002      	add	sp, #8
 800ffe2:	bd10      	pop	{r4, pc}
 800ffe4:	785b      	ldrb	r3, [r3, #1]
 800ffe6:	2b00      	cmp	r3, #0
 800ffe8:	d1f7      	bne.n	800ffda <rcl_get_localhost_only+0x26>
 800ffea:	2301      	movs	r3, #1
 800ffec:	e7f6      	b.n	800ffdc <rcl_get_localhost_only+0x28>
 800ffee:	200b      	movs	r0, #11
 800fff0:	b002      	add	sp, #8
 800fff2:	bd10      	pop	{r4, pc}
 800fff4:	08016d48 	.word	0x08016d48

0800fff8 <rcl_get_zero_initialized_node>:
 800fff8:	4a03      	ldr	r2, [pc, #12]	@ (8010008 <rcl_get_zero_initialized_node+0x10>)
 800fffa:	4603      	mov	r3, r0
 800fffc:	e892 0003 	ldmia.w	r2, {r0, r1}
 8010000:	e883 0003 	stmia.w	r3, {r0, r1}
 8010004:	4618      	mov	r0, r3
 8010006:	4770      	bx	lr
 8010008:	08016d64 	.word	0x08016d64

0801000c <rcl_node_init>:
 801000c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010010:	b0a9      	sub	sp, #164	@ 0xa4
 8010012:	4604      	mov	r4, r0
 8010014:	f8dd 80c8 	ldr.w	r8, [sp, #200]	@ 0xc8
 8010018:	a823      	add	r0, sp, #140	@ 0x8c
 801001a:	460e      	mov	r6, r1
 801001c:	4615      	mov	r5, r2
 801001e:	461f      	mov	r7, r3
 8010020:	f004 fe0c 	bl	8014c3c <rcl_guard_condition_get_default_options>
 8010024:	f1b8 0f00 	cmp.w	r8, #0
 8010028:	f000 80e6 	beq.w	80101f8 <rcl_node_init+0x1ec>
 801002c:	4640      	mov	r0, r8
 801002e:	f7fa f961 	bl	800a2f4 <rcutils_allocator_is_valid>
 8010032:	2800      	cmp	r0, #0
 8010034:	f000 80e0 	beq.w	80101f8 <rcl_node_init+0x1ec>
 8010038:	2e00      	cmp	r6, #0
 801003a:	f000 80dd 	beq.w	80101f8 <rcl_node_init+0x1ec>
 801003e:	2d00      	cmp	r5, #0
 8010040:	f000 80da 	beq.w	80101f8 <rcl_node_init+0x1ec>
 8010044:	2c00      	cmp	r4, #0
 8010046:	f000 80d7 	beq.w	80101f8 <rcl_node_init+0x1ec>
 801004a:	f8d4 9004 	ldr.w	r9, [r4, #4]
 801004e:	f1b9 0f00 	cmp.w	r9, #0
 8010052:	f040 80fd 	bne.w	8010250 <rcl_node_init+0x244>
 8010056:	2f00      	cmp	r7, #0
 8010058:	f000 80ce 	beq.w	80101f8 <rcl_node_init+0x1ec>
 801005c:	4638      	mov	r0, r7
 801005e:	f7ff fe3f 	bl	800fce0 <rcl_context_is_valid>
 8010062:	4682      	mov	sl, r0
 8010064:	2800      	cmp	r0, #0
 8010066:	f000 80cd 	beq.w	8010204 <rcl_node_init+0x1f8>
 801006a:	464a      	mov	r2, r9
 801006c:	a922      	add	r1, sp, #136	@ 0x88
 801006e:	4630      	mov	r0, r6
 8010070:	f8cd 9088 	str.w	r9, [sp, #136]	@ 0x88
 8010074:	f002 ff02 	bl	8012e7c <rmw_validate_node_name>
 8010078:	4681      	mov	r9, r0
 801007a:	2800      	cmp	r0, #0
 801007c:	f040 80be 	bne.w	80101fc <rcl_node_init+0x1f0>
 8010080:	9822      	ldr	r0, [sp, #136]	@ 0x88
 8010082:	2800      	cmp	r0, #0
 8010084:	f040 80f0 	bne.w	8010268 <rcl_node_init+0x25c>
 8010088:	4628      	mov	r0, r5
 801008a:	f7f0 f8b3 	bl	80001f4 <strlen>
 801008e:	2800      	cmp	r0, #0
 8010090:	f040 80bb 	bne.w	801020a <rcl_node_init+0x1fe>
 8010094:	4d7c      	ldr	r5, [pc, #496]	@ (8010288 <rcl_node_init+0x27c>)
 8010096:	a922      	add	r1, sp, #136	@ 0x88
 8010098:	2200      	movs	r2, #0
 801009a:	4628      	mov	r0, r5
 801009c:	f002 fed0 	bl	8012e40 <rmw_validate_namespace>
 80100a0:	4681      	mov	r9, r0
 80100a2:	2800      	cmp	r0, #0
 80100a4:	f040 80aa 	bne.w	80101fc <rcl_node_init+0x1f0>
 80100a8:	4682      	mov	sl, r0
 80100aa:	9822      	ldr	r0, [sp, #136]	@ 0x88
 80100ac:	2800      	cmp	r0, #0
 80100ae:	f040 80e0 	bne.w	8010272 <rcl_node_init+0x266>
 80100b2:	f8d8 3000 	ldr.w	r3, [r8]
 80100b6:	f8d8 1010 	ldr.w	r1, [r8, #16]
 80100ba:	2078      	movs	r0, #120	@ 0x78
 80100bc:	4798      	blx	r3
 80100be:	4681      	mov	r9, r0
 80100c0:	6060      	str	r0, [r4, #4]
 80100c2:	2800      	cmp	r0, #0
 80100c4:	f000 80ca 	beq.w	801025c <rcl_node_init+0x250>
 80100c8:	2200      	movs	r2, #0
 80100ca:	2300      	movs	r3, #0
 80100cc:	e9c9 231a 	strd	r2, r3, [r9, #104]	@ 0x68
 80100d0:	e9c9 231c 	strd	r2, r3, [r9, #112]	@ 0x70
 80100d4:	a808      	add	r0, sp, #32
 80100d6:	f000 f907 	bl	80102e8 <rcl_node_get_default_options>
 80100da:	a908      	add	r1, sp, #32
 80100dc:	4648      	mov	r0, r9
 80100de:	2268      	movs	r2, #104	@ 0x68
 80100e0:	f005 fc67 	bl	80159b2 <memcpy>
 80100e4:	6861      	ldr	r1, [r4, #4]
 80100e6:	6027      	str	r7, [r4, #0]
 80100e8:	4640      	mov	r0, r8
 80100ea:	f000 f90b 	bl	8010304 <rcl_node_options_copy>
 80100ee:	2800      	cmp	r0, #0
 80100f0:	d158      	bne.n	80101a4 <rcl_node_init+0x198>
 80100f2:	4628      	mov	r0, r5
 80100f4:	f7f0 f87e 	bl	80001f4 <strlen>
 80100f8:	4428      	add	r0, r5
 80100fa:	f810 3c01 	ldrb.w	r3, [r0, #-1]
 80100fe:	e9cd 5603 	strd	r5, r6, [sp, #12]
 8010102:	2b2f      	cmp	r3, #47	@ 0x2f
 8010104:	f8d8 3010 	ldr.w	r3, [r8, #16]
 8010108:	9300      	str	r3, [sp, #0]
 801010a:	bf0c      	ite	eq
 801010c:	4b5f      	ldreq	r3, [pc, #380]	@ (801028c <rcl_node_init+0x280>)
 801010e:	4b60      	ldrne	r3, [pc, #384]	@ (8010290 <rcl_node_init+0x284>)
 8010110:	9302      	str	r3, [sp, #8]
 8010112:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8010116:	9301      	str	r3, [sp, #4]
 8010118:	e898 000f 	ldmia.w	r8, {r0, r1, r2, r3}
 801011c:	f8d4 9004 	ldr.w	r9, [r4, #4]
 8010120:	f002 fa8a 	bl	8012638 <rcutils_format_string_limit>
 8010124:	6823      	ldr	r3, [r4, #0]
 8010126:	f8c9 0074 	str.w	r0, [r9, #116]	@ 0x74
 801012a:	6818      	ldr	r0, [r3, #0]
 801012c:	4631      	mov	r1, r6
 801012e:	3028      	adds	r0, #40	@ 0x28
 8010130:	462a      	mov	r2, r5
 8010132:	6866      	ldr	r6, [r4, #4]
 8010134:	f7fa fc74 	bl	800aa20 <rmw_create_node>
 8010138:	6863      	ldr	r3, [r4, #4]
 801013a:	66b0      	str	r0, [r6, #104]	@ 0x68
 801013c:	6e98      	ldr	r0, [r3, #104]	@ 0x68
 801013e:	2800      	cmp	r0, #0
 8010140:	d032      	beq.n	80101a8 <rcl_node_init+0x19c>
 8010142:	f7fa fd01 	bl	800ab48 <rmw_node_get_graph_guard_condition>
 8010146:	4681      	mov	r9, r0
 8010148:	b360      	cbz	r0, 80101a4 <rcl_node_init+0x198>
 801014a:	f8d8 3000 	ldr.w	r3, [r8]
 801014e:	f8d8 1010 	ldr.w	r1, [r8, #16]
 8010152:	6866      	ldr	r6, [r4, #4]
 8010154:	2008      	movs	r0, #8
 8010156:	4798      	blx	r3
 8010158:	6863      	ldr	r3, [r4, #4]
 801015a:	66f0      	str	r0, [r6, #108]	@ 0x6c
 801015c:	f8d3 b06c 	ldr.w	fp, [r3, #108]	@ 0x6c
 8010160:	f1bb 0f00 	cmp.w	fp, #0
 8010164:	d020      	beq.n	80101a8 <rcl_node_init+0x19c>
 8010166:	a806      	add	r0, sp, #24
 8010168:	f004 fcd8 	bl	8014b1c <rcl_get_zero_initialized_guard_condition>
 801016c:	a806      	add	r0, sp, #24
 801016e:	c803      	ldmia	r0, {r0, r1}
 8010170:	6863      	ldr	r3, [r4, #4]
 8010172:	46c4      	mov	ip, r8
 8010174:	f8d3 e06c 	ldr.w	lr, [r3, #108]	@ 0x6c
 8010178:	e88b 0003 	stmia.w	fp, {r0, r1}
 801017c:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8010180:	ae23      	add	r6, sp, #140	@ 0x8c
 8010182:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8010184:	f8dc 3000 	ldr.w	r3, [ip]
 8010188:	6033      	str	r3, [r6, #0]
 801018a:	ab28      	add	r3, sp, #160	@ 0xa0
 801018c:	e913 000f 	ldmdb	r3, {r0, r1, r2, r3}
 8010190:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 8010194:	4649      	mov	r1, r9
 8010196:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8010198:	463a      	mov	r2, r7
 801019a:	4670      	mov	r0, lr
 801019c:	f004 fcc8 	bl	8014b30 <rcl_guard_condition_init_from_rmw>
 80101a0:	4681      	mov	r9, r0
 80101a2:	b328      	cbz	r0, 80101f0 <rcl_node_init+0x1e4>
 80101a4:	6863      	ldr	r3, [r4, #4]
 80101a6:	b1f3      	cbz	r3, 80101e6 <rcl_node_init+0x1da>
 80101a8:	6f58      	ldr	r0, [r3, #116]	@ 0x74
 80101aa:	b128      	cbz	r0, 80101b8 <rcl_node_init+0x1ac>
 80101ac:	f8d8 3004 	ldr.w	r3, [r8, #4]
 80101b0:	f8d8 1010 	ldr.w	r1, [r8, #16]
 80101b4:	4798      	blx	r3
 80101b6:	6863      	ldr	r3, [r4, #4]
 80101b8:	6e98      	ldr	r0, [r3, #104]	@ 0x68
 80101ba:	b110      	cbz	r0, 80101c2 <rcl_node_init+0x1b6>
 80101bc:	f7fa fc48 	bl	800aa50 <rmw_destroy_node>
 80101c0:	6863      	ldr	r3, [r4, #4]
 80101c2:	6ed8      	ldr	r0, [r3, #108]	@ 0x6c
 80101c4:	b148      	cbz	r0, 80101da <rcl_node_init+0x1ce>
 80101c6:	f004 fd13 	bl	8014bf0 <rcl_guard_condition_fini>
 80101ca:	6863      	ldr	r3, [r4, #4]
 80101cc:	f8d8 1010 	ldr.w	r1, [r8, #16]
 80101d0:	6ed8      	ldr	r0, [r3, #108]	@ 0x6c
 80101d2:	f8d8 3004 	ldr.w	r3, [r8, #4]
 80101d6:	4798      	blx	r3
 80101d8:	6863      	ldr	r3, [r4, #4]
 80101da:	f8d8 1010 	ldr.w	r1, [r8, #16]
 80101de:	4618      	mov	r0, r3
 80101e0:	f8d8 3004 	ldr.w	r3, [r8, #4]
 80101e4:	4798      	blx	r3
 80101e6:	2300      	movs	r3, #0
 80101e8:	e9c4 3300 	strd	r3, r3, [r4]
 80101ec:	f04f 0901 	mov.w	r9, #1
 80101f0:	f1ba 0f00 	cmp.w	sl, #0
 80101f4:	d125      	bne.n	8010242 <rcl_node_init+0x236>
 80101f6:	e001      	b.n	80101fc <rcl_node_init+0x1f0>
 80101f8:	f04f 090b 	mov.w	r9, #11
 80101fc:	4648      	mov	r0, r9
 80101fe:	b029      	add	sp, #164	@ 0xa4
 8010200:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010204:	f04f 0965 	mov.w	r9, #101	@ 0x65
 8010208:	e7f8      	b.n	80101fc <rcl_node_init+0x1f0>
 801020a:	782b      	ldrb	r3, [r5, #0]
 801020c:	2b2f      	cmp	r3, #47	@ 0x2f
 801020e:	f43f af42 	beq.w	8010096 <rcl_node_init+0x8a>
 8010212:	9503      	str	r5, [sp, #12]
 8010214:	f8d8 3010 	ldr.w	r3, [r8, #16]
 8010218:	9300      	str	r3, [sp, #0]
 801021a:	4b1e      	ldr	r3, [pc, #120]	@ (8010294 <rcl_node_init+0x288>)
 801021c:	9302      	str	r3, [sp, #8]
 801021e:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8010222:	9301      	str	r3, [sp, #4]
 8010224:	e898 000f 	ldmia.w	r8, {r0, r1, r2, r3}
 8010228:	f002 fa06 	bl	8012638 <rcutils_format_string_limit>
 801022c:	4605      	mov	r5, r0
 801022e:	b340      	cbz	r0, 8010282 <rcl_node_init+0x276>
 8010230:	2200      	movs	r2, #0
 8010232:	a922      	add	r1, sp, #136	@ 0x88
 8010234:	9222      	str	r2, [sp, #136]	@ 0x88
 8010236:	f002 fe03 	bl	8012e40 <rmw_validate_namespace>
 801023a:	4681      	mov	r9, r0
 801023c:	2800      	cmp	r0, #0
 801023e:	f43f af34 	beq.w	80100aa <rcl_node_init+0x9e>
 8010242:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8010246:	f8d8 1010 	ldr.w	r1, [r8, #16]
 801024a:	4628      	mov	r0, r5
 801024c:	4798      	blx	r3
 801024e:	e7d5      	b.n	80101fc <rcl_node_init+0x1f0>
 8010250:	f04f 0964 	mov.w	r9, #100	@ 0x64
 8010254:	4648      	mov	r0, r9
 8010256:	b029      	add	sp, #164	@ 0xa4
 8010258:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801025c:	f04f 090a 	mov.w	r9, #10
 8010260:	f1ba 0f00 	cmp.w	sl, #0
 8010264:	d1ed      	bne.n	8010242 <rcl_node_init+0x236>
 8010266:	e7c9      	b.n	80101fc <rcl_node_init+0x1f0>
 8010268:	f002 fe5a 	bl	8012f20 <rmw_node_name_validation_result_string>
 801026c:	f04f 09c9 	mov.w	r9, #201	@ 0xc9
 8010270:	e7c4      	b.n	80101fc <rcl_node_init+0x1f0>
 8010272:	f002 fdf7 	bl	8012e64 <rmw_namespace_validation_result_string>
 8010276:	f04f 09ca 	mov.w	r9, #202	@ 0xca
 801027a:	f1ba 0f00 	cmp.w	sl, #0
 801027e:	d1e0      	bne.n	8010242 <rcl_node_init+0x236>
 8010280:	e7bc      	b.n	80101fc <rcl_node_init+0x1f0>
 8010282:	f04f 090a 	mov.w	r9, #10
 8010286:	e7b9      	b.n	80101fc <rcl_node_init+0x1f0>
 8010288:	08016998 	.word	0x08016998
 801028c:	080169e4 	.word	0x080169e4
 8010290:	0801699c 	.word	0x0801699c
 8010294:	08016d60 	.word	0x08016d60

08010298 <rcl_node_is_valid>:
 8010298:	b130      	cbz	r0, 80102a8 <rcl_node_is_valid+0x10>
 801029a:	6843      	ldr	r3, [r0, #4]
 801029c:	b123      	cbz	r3, 80102a8 <rcl_node_is_valid+0x10>
 801029e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80102a0:	b113      	cbz	r3, 80102a8 <rcl_node_is_valid+0x10>
 80102a2:	6800      	ldr	r0, [r0, #0]
 80102a4:	f7ff bd1c 	b.w	800fce0 <rcl_context_is_valid>
 80102a8:	2000      	movs	r0, #0
 80102aa:	4770      	bx	lr

080102ac <rcl_node_get_name>:
 80102ac:	b120      	cbz	r0, 80102b8 <rcl_node_get_name+0xc>
 80102ae:	6840      	ldr	r0, [r0, #4]
 80102b0:	b110      	cbz	r0, 80102b8 <rcl_node_get_name+0xc>
 80102b2:	6e80      	ldr	r0, [r0, #104]	@ 0x68
 80102b4:	b100      	cbz	r0, 80102b8 <rcl_node_get_name+0xc>
 80102b6:	6880      	ldr	r0, [r0, #8]
 80102b8:	4770      	bx	lr
 80102ba:	bf00      	nop

080102bc <rcl_node_get_namespace>:
 80102bc:	b120      	cbz	r0, 80102c8 <rcl_node_get_namespace+0xc>
 80102be:	6840      	ldr	r0, [r0, #4]
 80102c0:	b110      	cbz	r0, 80102c8 <rcl_node_get_namespace+0xc>
 80102c2:	6e80      	ldr	r0, [r0, #104]	@ 0x68
 80102c4:	b100      	cbz	r0, 80102c8 <rcl_node_get_namespace+0xc>
 80102c6:	68c0      	ldr	r0, [r0, #12]
 80102c8:	4770      	bx	lr
 80102ca:	bf00      	nop

080102cc <rcl_node_get_options>:
 80102cc:	b128      	cbz	r0, 80102da <rcl_node_get_options+0xe>
 80102ce:	6840      	ldr	r0, [r0, #4]
 80102d0:	b118      	cbz	r0, 80102da <rcl_node_get_options+0xe>
 80102d2:	6e83      	ldr	r3, [r0, #104]	@ 0x68
 80102d4:	2b00      	cmp	r3, #0
 80102d6:	bf08      	it	eq
 80102d8:	2000      	moveq	r0, #0
 80102da:	4770      	bx	lr

080102dc <rcl_node_get_rmw_handle>:
 80102dc:	b110      	cbz	r0, 80102e4 <rcl_node_get_rmw_handle+0x8>
 80102de:	6840      	ldr	r0, [r0, #4]
 80102e0:	b100      	cbz	r0, 80102e4 <rcl_node_get_rmw_handle+0x8>
 80102e2:	6e80      	ldr	r0, [r0, #104]	@ 0x68
 80102e4:	4770      	bx	lr
 80102e6:	bf00      	nop

080102e8 <rcl_node_get_default_options>:
 80102e8:	b510      	push	{r4, lr}
 80102ea:	2268      	movs	r2, #104	@ 0x68
 80102ec:	4604      	mov	r4, r0
 80102ee:	2100      	movs	r1, #0
 80102f0:	f005 fa96 	bl	8015820 <memset>
 80102f4:	4620      	mov	r0, r4
 80102f6:	f7f9 ffef 	bl	800a2d8 <rcutils_get_default_allocator>
 80102fa:	2301      	movs	r3, #1
 80102fc:	7523      	strb	r3, [r4, #20]
 80102fe:	4620      	mov	r0, r4
 8010300:	bd10      	pop	{r4, pc}
 8010302:	bf00      	nop

08010304 <rcl_node_options_copy>:
 8010304:	b1d0      	cbz	r0, 801033c <rcl_node_options_copy+0x38>
 8010306:	b570      	push	{r4, r5, r6, lr}
 8010308:	460c      	mov	r4, r1
 801030a:	b1a9      	cbz	r1, 8010338 <rcl_node_options_copy+0x34>
 801030c:	4288      	cmp	r0, r1
 801030e:	4684      	mov	ip, r0
 8010310:	d012      	beq.n	8010338 <rcl_node_options_copy+0x34>
 8010312:	4605      	mov	r5, r0
 8010314:	8a86      	ldrh	r6, [r0, #20]
 8010316:	468e      	mov	lr, r1
 8010318:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801031a:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 801031e:	682b      	ldr	r3, [r5, #0]
 8010320:	f8ce 3000 	str.w	r3, [lr]
 8010324:	f10c 0118 	add.w	r1, ip, #24
 8010328:	2250      	movs	r2, #80	@ 0x50
 801032a:	82a6      	strh	r6, [r4, #20]
 801032c:	f104 0018 	add.w	r0, r4, #24
 8010330:	f005 fb3f 	bl	80159b2 <memcpy>
 8010334:	2000      	movs	r0, #0
 8010336:	bd70      	pop	{r4, r5, r6, pc}
 8010338:	200b      	movs	r0, #11
 801033a:	bd70      	pop	{r4, r5, r6, pc}
 801033c:	200b      	movs	r0, #11
 801033e:	4770      	bx	lr

08010340 <rcl_node_resolve_name>:
 8010340:	b082      	sub	sp, #8
 8010342:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010346:	b091      	sub	sp, #68	@ 0x44
 8010348:	ac1a      	add	r4, sp, #104	@ 0x68
 801034a:	e884 000c 	stmia.w	r4, {r2, r3}
 801034e:	f89d 807c 	ldrb.w	r8, [sp, #124]	@ 0x7c
 8010352:	2800      	cmp	r0, #0
 8010354:	d03b      	beq.n	80103ce <rcl_node_resolve_name+0x8e>
 8010356:	460c      	mov	r4, r1
 8010358:	4605      	mov	r5, r0
 801035a:	f7ff ffb7 	bl	80102cc <rcl_node_get_options>
 801035e:	2800      	cmp	r0, #0
 8010360:	d037      	beq.n	80103d2 <rcl_node_resolve_name+0x92>
 8010362:	4628      	mov	r0, r5
 8010364:	f7ff ffa2 	bl	80102ac <rcl_node_get_name>
 8010368:	4606      	mov	r6, r0
 801036a:	4628      	mov	r0, r5
 801036c:	f7ff ffa6 	bl	80102bc <rcl_node_get_namespace>
 8010370:	f10d 0e68 	add.w	lr, sp, #104	@ 0x68
 8010374:	4681      	mov	r9, r0
 8010376:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 801037a:	ad0b      	add	r5, sp, #44	@ 0x2c
 801037c:	46ac      	mov	ip, r5
 801037e:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8010382:	f8de 3000 	ldr.w	r3, [lr]
 8010386:	f8cc 3000 	str.w	r3, [ip]
 801038a:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 801038c:	b1fb      	cbz	r3, 80103ce <rcl_node_resolve_name+0x8e>
 801038e:	468a      	mov	sl, r1
 8010390:	f8dd b078 	ldr.w	fp, [sp, #120]	@ 0x78
 8010394:	f002 faa8 	bl	80128e8 <rcutils_get_zero_initialized_string_map>
 8010398:	ab10      	add	r3, sp, #64	@ 0x40
 801039a:	9008      	str	r0, [sp, #32]
 801039c:	e913 0007 	ldmdb	r3, {r0, r1, r2}
 80103a0:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 80103a4:	2100      	movs	r1, #0
 80103a6:	e895 000c 	ldmia.w	r5, {r2, r3}
 80103aa:	a808      	add	r0, sp, #32
 80103ac:	f002 fb14 	bl	80129d8 <rcutils_string_map_init>
 80103b0:	4607      	mov	r7, r0
 80103b2:	b180      	cbz	r0, 80103d6 <rcl_node_resolve_name+0x96>
 80103b4:	f7f9 ffac 	bl	800a310 <rcutils_get_error_string>
 80103b8:	f7f9 ffc2 	bl	800a340 <rcutils_reset_error>
 80103bc:	2f0a      	cmp	r7, #10
 80103be:	bf18      	it	ne
 80103c0:	2701      	movne	r7, #1
 80103c2:	4638      	mov	r0, r7
 80103c4:	b011      	add	sp, #68	@ 0x44
 80103c6:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80103ca:	b002      	add	sp, #8
 80103cc:	4770      	bx	lr
 80103ce:	270b      	movs	r7, #11
 80103d0:	e7f7      	b.n	80103c2 <rcl_node_resolve_name+0x82>
 80103d2:	2701      	movs	r7, #1
 80103d4:	e7f5      	b.n	80103c2 <rcl_node_resolve_name+0x82>
 80103d6:	9009      	str	r0, [sp, #36]	@ 0x24
 80103d8:	9007      	str	r0, [sp, #28]
 80103da:	a808      	add	r0, sp, #32
 80103dc:	f004 fb98 	bl	8014b10 <rcl_get_default_topic_name_substitutions>
 80103e0:	4607      	mov	r7, r0
 80103e2:	b1a8      	cbz	r0, 8010410 <rcl_node_resolve_name+0xd0>
 80103e4:	280a      	cmp	r0, #10
 80103e6:	9c07      	ldr	r4, [sp, #28]
 80103e8:	d000      	beq.n	80103ec <rcl_node_resolve_name+0xac>
 80103ea:	2701      	movs	r7, #1
 80103ec:	a808      	add	r0, sp, #32
 80103ee:	f002 fb33 	bl	8012a58 <rcutils_string_map_fini>
 80103f2:	2800      	cmp	r0, #0
 80103f4:	d13d      	bne.n	8010472 <rcl_node_resolve_name+0x132>
 80103f6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80103f8:	4659      	mov	r1, fp
 80103fa:	47d0      	blx	sl
 80103fc:	4659      	mov	r1, fp
 80103fe:	4620      	mov	r0, r4
 8010400:	47d0      	blx	sl
 8010402:	f1b8 0f00 	cmp.w	r8, #0
 8010406:	d0dc      	beq.n	80103c2 <rcl_node_resolve_name+0x82>
 8010408:	2f67      	cmp	r7, #103	@ 0x67
 801040a:	bf08      	it	eq
 801040c:	2768      	moveq	r7, #104	@ 0x68
 801040e:	e7d8      	b.n	80103c2 <rcl_node_resolve_name+0x82>
 8010410:	ab09      	add	r3, sp, #36	@ 0x24
 8010412:	9305      	str	r3, [sp, #20]
 8010414:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8010416:	46ec      	mov	ip, sp
 8010418:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801041c:	682b      	ldr	r3, [r5, #0]
 801041e:	f8cc 3000 	str.w	r3, [ip]
 8010422:	464a      	mov	r2, r9
 8010424:	4631      	mov	r1, r6
 8010426:	4620      	mov	r0, r4
 8010428:	ab08      	add	r3, sp, #32
 801042a:	f004 fa13 	bl	8014854 <rcl_expand_topic_name>
 801042e:	4607      	mov	r7, r0
 8010430:	b9b8      	cbnz	r0, 8010462 <rcl_node_resolve_name+0x122>
 8010432:	9c09      	ldr	r4, [sp, #36]	@ 0x24
 8010434:	9009      	str	r0, [sp, #36]	@ 0x24
 8010436:	4602      	mov	r2, r0
 8010438:	a90a      	add	r1, sp, #40	@ 0x28
 801043a:	4620      	mov	r0, r4
 801043c:	f002 fc3c 	bl	8012cb8 <rmw_validate_full_topic_name>
 8010440:	b988      	cbnz	r0, 8010466 <rcl_node_resolve_name+0x126>
 8010442:	9d0a      	ldr	r5, [sp, #40]	@ 0x28
 8010444:	b9d5      	cbnz	r5, 801047c <rcl_node_resolve_name+0x13c>
 8010446:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8010448:	a808      	add	r0, sp, #32
 801044a:	601c      	str	r4, [r3, #0]
 801044c:	f002 fb04 	bl	8012a58 <rcutils_string_map_fini>
 8010450:	4607      	mov	r7, r0
 8010452:	b1a8      	cbz	r0, 8010480 <rcl_node_resolve_name+0x140>
 8010454:	f7f9 ff5c 	bl	800a310 <rcutils_get_error_string>
 8010458:	462c      	mov	r4, r5
 801045a:	f7f9 ff71 	bl	800a340 <rcutils_reset_error>
 801045e:	2701      	movs	r7, #1
 8010460:	e7c9      	b.n	80103f6 <rcl_node_resolve_name+0xb6>
 8010462:	9c07      	ldr	r4, [sp, #28]
 8010464:	e7c2      	b.n	80103ec <rcl_node_resolve_name+0xac>
 8010466:	f7f9 ff53 	bl	800a310 <rcutils_get_error_string>
 801046a:	2701      	movs	r7, #1
 801046c:	f7f9 ff68 	bl	800a340 <rcutils_reset_error>
 8010470:	e7bc      	b.n	80103ec <rcl_node_resolve_name+0xac>
 8010472:	f7f9 ff4d 	bl	800a310 <rcutils_get_error_string>
 8010476:	f7f9 ff63 	bl	800a340 <rcutils_reset_error>
 801047a:	e7bc      	b.n	80103f6 <rcl_node_resolve_name+0xb6>
 801047c:	2767      	movs	r7, #103	@ 0x67
 801047e:	e7b5      	b.n	80103ec <rcl_node_resolve_name+0xac>
 8010480:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8010482:	4659      	mov	r1, fp
 8010484:	47d0      	blx	sl
 8010486:	4659      	mov	r1, fp
 8010488:	4638      	mov	r0, r7
 801048a:	47d0      	blx	sl
 801048c:	e799      	b.n	80103c2 <rcl_node_resolve_name+0x82>
 801048e:	bf00      	nop

08010490 <exact_match_lookup>:
 8010490:	b5f0      	push	{r4, r5, r6, r7, lr}
 8010492:	f102 0708 	add.w	r7, r2, #8
 8010496:	460b      	mov	r3, r1
 8010498:	4614      	mov	r4, r2
 801049a:	4606      	mov	r6, r0
 801049c:	e897 0007 	ldmia.w	r7, {r0, r1, r2}
 80104a0:	b085      	sub	sp, #20
 80104a2:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 80104a6:	4618      	mov	r0, r3
 80104a8:	4919      	ldr	r1, [pc, #100]	@ (8010510 <exact_match_lookup+0x80>)
 80104aa:	e894 000c 	ldmia.w	r4, {r2, r3}
 80104ae:	f002 f8b5 	bl	801261c <rcutils_join_path>
 80104b2:	7833      	ldrb	r3, [r6, #0]
 80104b4:	2b2f      	cmp	r3, #47	@ 0x2f
 80104b6:	4605      	mov	r5, r0
 80104b8:	d023      	beq.n	8010502 <exact_match_lookup+0x72>
 80104ba:	f104 030c 	add.w	r3, r4, #12
 80104be:	e893 0003 	ldmia.w	r3, {r0, r1}
 80104c2:	e88d 0003 	stmia.w	sp, {r0, r1}
 80104c6:	1c70      	adds	r0, r6, #1
 80104c8:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 80104cc:	f002 f8ac 	bl	8012628 <rcutils_to_native_path>
 80104d0:	4606      	mov	r6, r0
 80104d2:	e897 0007 	ldmia.w	r7, {r0, r1, r2}
 80104d6:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 80104da:	4631      	mov	r1, r6
 80104dc:	e894 000c 	ldmia.w	r4, {r2, r3}
 80104e0:	4628      	mov	r0, r5
 80104e2:	f002 f89b 	bl	801261c <rcutils_join_path>
 80104e6:	6862      	ldr	r2, [r4, #4]
 80104e8:	6921      	ldr	r1, [r4, #16]
 80104ea:	4603      	mov	r3, r0
 80104ec:	4630      	mov	r0, r6
 80104ee:	461e      	mov	r6, r3
 80104f0:	4790      	blx	r2
 80104f2:	4628      	mov	r0, r5
 80104f4:	6863      	ldr	r3, [r4, #4]
 80104f6:	6921      	ldr	r1, [r4, #16]
 80104f8:	4798      	blx	r3
 80104fa:	4635      	mov	r5, r6
 80104fc:	4628      	mov	r0, r5
 80104fe:	b005      	add	sp, #20
 8010500:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010502:	7873      	ldrb	r3, [r6, #1]
 8010504:	2b00      	cmp	r3, #0
 8010506:	d1d8      	bne.n	80104ba <exact_match_lookup+0x2a>
 8010508:	4628      	mov	r0, r5
 801050a:	b005      	add	sp, #20
 801050c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801050e:	bf00      	nop
 8010510:	08016da8 	.word	0x08016da8

08010514 <rcl_get_secure_root>:
 8010514:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8010518:	b085      	sub	sp, #20
 801051a:	b168      	cbz	r0, 8010538 <rcl_get_secure_root+0x24>
 801051c:	4607      	mov	r7, r0
 801051e:	4608      	mov	r0, r1
 8010520:	460c      	mov	r4, r1
 8010522:	f7f9 fee7 	bl	800a2f4 <rcutils_allocator_is_valid>
 8010526:	b138      	cbz	r0, 8010538 <rcl_get_secure_root+0x24>
 8010528:	2300      	movs	r3, #0
 801052a:	482d      	ldr	r0, [pc, #180]	@ (80105e0 <rcl_get_secure_root+0xcc>)
 801052c:	9303      	str	r3, [sp, #12]
 801052e:	a903      	add	r1, sp, #12
 8010530:	f002 f85a 	bl	80125e8 <rcutils_get_env>
 8010534:	4605      	mov	r5, r0
 8010536:	b120      	cbz	r0, 8010542 <rcl_get_secure_root+0x2e>
 8010538:	2500      	movs	r5, #0
 801053a:	4628      	mov	r0, r5
 801053c:	b005      	add	sp, #20
 801053e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8010542:	9b03      	ldr	r3, [sp, #12]
 8010544:	781a      	ldrb	r2, [r3, #0]
 8010546:	2a00      	cmp	r2, #0
 8010548:	d0f6      	beq.n	8010538 <rcl_get_secure_root+0x24>
 801054a:	f104 090c 	add.w	r9, r4, #12
 801054e:	e899 0003 	ldmia.w	r9, {r0, r1}
 8010552:	e88d 0003 	stmia.w	sp, {r0, r1}
 8010556:	4618      	mov	r0, r3
 8010558:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 801055c:	f002 f986 	bl	801286c <rcutils_strdup>
 8010560:	4680      	mov	r8, r0
 8010562:	2800      	cmp	r0, #0
 8010564:	d0e8      	beq.n	8010538 <rcl_get_secure_root+0x24>
 8010566:	481f      	ldr	r0, [pc, #124]	@ (80105e4 <rcl_get_secure_root+0xd0>)
 8010568:	9503      	str	r5, [sp, #12]
 801056a:	a903      	add	r1, sp, #12
 801056c:	f002 f83c 	bl	80125e8 <rcutils_get_env>
 8010570:	b160      	cbz	r0, 801058c <rcl_get_secure_root+0x78>
 8010572:	2600      	movs	r6, #0
 8010574:	6863      	ldr	r3, [r4, #4]
 8010576:	6921      	ldr	r1, [r4, #16]
 8010578:	4630      	mov	r0, r6
 801057a:	4798      	blx	r3
 801057c:	4640      	mov	r0, r8
 801057e:	6863      	ldr	r3, [r4, #4]
 8010580:	6921      	ldr	r1, [r4, #16]
 8010582:	4798      	blx	r3
 8010584:	4628      	mov	r0, r5
 8010586:	b005      	add	sp, #20
 8010588:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801058c:	9b03      	ldr	r3, [sp, #12]
 801058e:	781e      	ldrb	r6, [r3, #0]
 8010590:	b1f6      	cbz	r6, 80105d0 <rcl_get_secure_root+0xbc>
 8010592:	e899 0003 	ldmia.w	r9, {r0, r1}
 8010596:	e88d 0003 	stmia.w	sp, {r0, r1}
 801059a:	4618      	mov	r0, r3
 801059c:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 80105a0:	f002 f964 	bl	801286c <rcutils_strdup>
 80105a4:	4606      	mov	r6, r0
 80105a6:	2800      	cmp	r0, #0
 80105a8:	d0e3      	beq.n	8010572 <rcl_get_secure_root+0x5e>
 80105aa:	4622      	mov	r2, r4
 80105ac:	4641      	mov	r1, r8
 80105ae:	f7ff ff6f 	bl	8010490 <exact_match_lookup>
 80105b2:	4605      	mov	r5, r0
 80105b4:	2d00      	cmp	r5, #0
 80105b6:	d0dd      	beq.n	8010574 <rcl_get_secure_root+0x60>
 80105b8:	4628      	mov	r0, r5
 80105ba:	f002 f82d 	bl	8012618 <rcutils_is_directory>
 80105be:	4603      	mov	r3, r0
 80105c0:	2800      	cmp	r0, #0
 80105c2:	d1d7      	bne.n	8010574 <rcl_get_secure_root+0x60>
 80105c4:	4628      	mov	r0, r5
 80105c6:	6921      	ldr	r1, [r4, #16]
 80105c8:	461d      	mov	r5, r3
 80105ca:	6863      	ldr	r3, [r4, #4]
 80105cc:	4798      	blx	r3
 80105ce:	e7d1      	b.n	8010574 <rcl_get_secure_root+0x60>
 80105d0:	4622      	mov	r2, r4
 80105d2:	4638      	mov	r0, r7
 80105d4:	4641      	mov	r1, r8
 80105d6:	f7ff ff5b 	bl	8010490 <exact_match_lookup>
 80105da:	4605      	mov	r5, r0
 80105dc:	e7ea      	b.n	80105b4 <rcl_get_secure_root+0xa0>
 80105de:	bf00      	nop
 80105e0:	08016db4 	.word	0x08016db4
 80105e4:	08016dcc 	.word	0x08016dcc

080105e8 <rcl_get_security_options_from_environment>:
 80105e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80105ec:	b082      	sub	sp, #8
 80105ee:	2300      	movs	r3, #0
 80105f0:	4606      	mov	r6, r0
 80105f2:	460f      	mov	r7, r1
 80105f4:	4820      	ldr	r0, [pc, #128]	@ (8010678 <rcl_get_security_options_from_environment+0x90>)
 80105f6:	9301      	str	r3, [sp, #4]
 80105f8:	a901      	add	r1, sp, #4
 80105fa:	4690      	mov	r8, r2
 80105fc:	f001 fff4 	bl	80125e8 <rcutils_get_env>
 8010600:	b120      	cbz	r0, 801060c <rcl_get_security_options_from_environment+0x24>
 8010602:	2501      	movs	r5, #1
 8010604:	4628      	mov	r0, r5
 8010606:	b002      	add	sp, #8
 8010608:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801060c:	491b      	ldr	r1, [pc, #108]	@ (801067c <rcl_get_security_options_from_environment+0x94>)
 801060e:	4604      	mov	r4, r0
 8010610:	9801      	ldr	r0, [sp, #4]
 8010612:	f7ef fde5 	bl	80001e0 <strcmp>
 8010616:	4605      	mov	r5, r0
 8010618:	b9e8      	cbnz	r0, 8010656 <rcl_get_security_options_from_environment+0x6e>
 801061a:	9001      	str	r0, [sp, #4]
 801061c:	f1b8 0f00 	cmp.w	r8, #0
 8010620:	d020      	beq.n	8010664 <rcl_get_security_options_from_environment+0x7c>
 8010622:	4817      	ldr	r0, [pc, #92]	@ (8010680 <rcl_get_security_options_from_environment+0x98>)
 8010624:	a901      	add	r1, sp, #4
 8010626:	f001 ffdf 	bl	80125e8 <rcutils_get_env>
 801062a:	2800      	cmp	r0, #0
 801062c:	d1e9      	bne.n	8010602 <rcl_get_security_options_from_environment+0x1a>
 801062e:	4915      	ldr	r1, [pc, #84]	@ (8010684 <rcl_get_security_options_from_environment+0x9c>)
 8010630:	9801      	ldr	r0, [sp, #4]
 8010632:	f7ef fdd5 	bl	80001e0 <strcmp>
 8010636:	fab0 f080 	clz	r0, r0
 801063a:	0940      	lsrs	r0, r0, #5
 801063c:	f888 0000 	strb.w	r0, [r8]
 8010640:	4639      	mov	r1, r7
 8010642:	4630      	mov	r0, r6
 8010644:	f7ff ff66 	bl	8010514 <rcl_get_secure_root>
 8010648:	b170      	cbz	r0, 8010668 <rcl_get_security_options_from_environment+0x80>
 801064a:	f8c8 0004 	str.w	r0, [r8, #4]
 801064e:	4628      	mov	r0, r5
 8010650:	b002      	add	sp, #8
 8010652:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010656:	4625      	mov	r5, r4
 8010658:	4628      	mov	r0, r5
 801065a:	f888 4000 	strb.w	r4, [r8]
 801065e:	b002      	add	sp, #8
 8010660:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010664:	250b      	movs	r5, #11
 8010666:	e7cd      	b.n	8010604 <rcl_get_security_options_from_environment+0x1c>
 8010668:	f898 5000 	ldrb.w	r5, [r8]
 801066c:	f1a5 0501 	sub.w	r5, r5, #1
 8010670:	fab5 f585 	clz	r5, r5
 8010674:	096d      	lsrs	r5, r5, #5
 8010676:	e7c5      	b.n	8010604 <rcl_get_security_options_from_environment+0x1c>
 8010678:	08016d6c 	.word	0x08016d6c
 801067c:	08016d80 	.word	0x08016d80
 8010680:	08016d88 	.word	0x08016d88
 8010684:	08016da0 	.word	0x08016da0

08010688 <rcl_service_get_rmw_handle>:
 8010688:	b118      	cbz	r0, 8010692 <rcl_service_get_rmw_handle+0xa>
 801068a:	6800      	ldr	r0, [r0, #0]
 801068c:	b108      	cbz	r0, 8010692 <rcl_service_get_rmw_handle+0xa>
 801068e:	f8d0 0108 	ldr.w	r0, [r0, #264]	@ 0x108
 8010692:	4770      	bx	lr

08010694 <rcl_take_request>:
 8010694:	b570      	push	{r4, r5, r6, lr}
 8010696:	468e      	mov	lr, r1
 8010698:	460c      	mov	r4, r1
 801069a:	4616      	mov	r6, r2
 801069c:	4605      	mov	r5, r0
 801069e:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 80106a2:	b08c      	sub	sp, #48	@ 0x30
 80106a4:	f10d 0c18 	add.w	ip, sp, #24
 80106a8:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80106ac:	e89e 0003 	ldmia.w	lr, {r0, r1}
 80106b0:	e88c 0003 	stmia.w	ip, {r0, r1}
 80106b4:	b30d      	cbz	r5, 80106fa <rcl_take_request+0x66>
 80106b6:	682b      	ldr	r3, [r5, #0]
 80106b8:	b1fb      	cbz	r3, 80106fa <rcl_take_request+0x66>
 80106ba:	f8d3 0108 	ldr.w	r0, [r3, #264]	@ 0x108
 80106be:	b1e0      	cbz	r0, 80106fa <rcl_take_request+0x66>
 80106c0:	b336      	cbz	r6, 8010710 <rcl_take_request+0x7c>
 80106c2:	2300      	movs	r3, #0
 80106c4:	f88d 3007 	strb.w	r3, [sp, #7]
 80106c8:	4632      	mov	r2, r6
 80106ca:	f10d 0307 	add.w	r3, sp, #7
 80106ce:	a902      	add	r1, sp, #8
 80106d0:	f002 fe48 	bl	8013364 <rmw_take_request>
 80106d4:	4605      	mov	r5, r0
 80106d6:	b198      	cbz	r0, 8010700 <rcl_take_request+0x6c>
 80106d8:	280a      	cmp	r0, #10
 80106da:	bf18      	it	ne
 80106dc:	2501      	movne	r5, #1
 80106de:	f10d 0e18 	add.w	lr, sp, #24
 80106e2:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 80106e6:	46a4      	mov	ip, r4
 80106e8:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80106ec:	e89e 0003 	ldmia.w	lr, {r0, r1}
 80106f0:	e88c 0003 	stmia.w	ip, {r0, r1}
 80106f4:	4628      	mov	r0, r5
 80106f6:	b00c      	add	sp, #48	@ 0x30
 80106f8:	bd70      	pop	{r4, r5, r6, pc}
 80106fa:	f44f 7516 	mov.w	r5, #600	@ 0x258
 80106fe:	e7ee      	b.n	80106de <rcl_take_request+0x4a>
 8010700:	f89d 2007 	ldrb.w	r2, [sp, #7]
 8010704:	f240 2359 	movw	r3, #601	@ 0x259
 8010708:	2a00      	cmp	r2, #0
 801070a:	bf08      	it	eq
 801070c:	461d      	moveq	r5, r3
 801070e:	e7e6      	b.n	80106de <rcl_take_request+0x4a>
 8010710:	250b      	movs	r5, #11
 8010712:	e7e4      	b.n	80106de <rcl_take_request+0x4a>

08010714 <rcl_send_response>:
 8010714:	b170      	cbz	r0, 8010734 <rcl_send_response+0x20>
 8010716:	6800      	ldr	r0, [r0, #0]
 8010718:	b160      	cbz	r0, 8010734 <rcl_send_response+0x20>
 801071a:	f8d0 0108 	ldr.w	r0, [r0, #264]	@ 0x108
 801071e:	b148      	cbz	r0, 8010734 <rcl_send_response+0x20>
 8010720:	b159      	cbz	r1, 801073a <rcl_send_response+0x26>
 8010722:	b510      	push	{r4, lr}
 8010724:	b15a      	cbz	r2, 801073e <rcl_send_response+0x2a>
 8010726:	f002 fe7b 	bl	8013420 <rmw_send_response>
 801072a:	b110      	cbz	r0, 8010732 <rcl_send_response+0x1e>
 801072c:	2802      	cmp	r0, #2
 801072e:	bf18      	it	ne
 8010730:	2001      	movne	r0, #1
 8010732:	bd10      	pop	{r4, pc}
 8010734:	f44f 7016 	mov.w	r0, #600	@ 0x258
 8010738:	4770      	bx	lr
 801073a:	200b      	movs	r0, #11
 801073c:	4770      	bx	lr
 801073e:	200b      	movs	r0, #11
 8010740:	bd10      	pop	{r4, pc}
 8010742:	bf00      	nop

08010744 <rcl_service_is_valid>:
 8010744:	b130      	cbz	r0, 8010754 <rcl_service_is_valid+0x10>
 8010746:	6800      	ldr	r0, [r0, #0]
 8010748:	b120      	cbz	r0, 8010754 <rcl_service_is_valid+0x10>
 801074a:	f8d0 0108 	ldr.w	r0, [r0, #264]	@ 0x108
 801074e:	3800      	subs	r0, #0
 8010750:	bf18      	it	ne
 8010752:	2001      	movne	r0, #1
 8010754:	4770      	bx	lr
 8010756:	bf00      	nop

08010758 <rcl_get_zero_initialized_subscription>:
 8010758:	4b01      	ldr	r3, [pc, #4]	@ (8010760 <rcl_get_zero_initialized_subscription+0x8>)
 801075a:	6818      	ldr	r0, [r3, #0]
 801075c:	4770      	bx	lr
 801075e:	bf00      	nop
 8010760:	08016dec 	.word	0x08016dec

08010764 <rcl_subscription_init>:
 8010764:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8010768:	b089      	sub	sp, #36	@ 0x24
 801076a:	9e10      	ldr	r6, [sp, #64]	@ 0x40
 801076c:	b1d6      	cbz	r6, 80107a4 <rcl_subscription_init+0x40>
 801076e:	f106 0950 	add.w	r9, r6, #80	@ 0x50
 8010772:	4604      	mov	r4, r0
 8010774:	4648      	mov	r0, r9
 8010776:	460d      	mov	r5, r1
 8010778:	4690      	mov	r8, r2
 801077a:	461f      	mov	r7, r3
 801077c:	f7f9 fdba 	bl	800a2f4 <rcutils_allocator_is_valid>
 8010780:	b180      	cbz	r0, 80107a4 <rcl_subscription_init+0x40>
 8010782:	b17c      	cbz	r4, 80107a4 <rcl_subscription_init+0x40>
 8010784:	4628      	mov	r0, r5
 8010786:	f7ff fd87 	bl	8010298 <rcl_node_is_valid>
 801078a:	2800      	cmp	r0, #0
 801078c:	d054      	beq.n	8010838 <rcl_subscription_init+0xd4>
 801078e:	f1b8 0f00 	cmp.w	r8, #0
 8010792:	d007      	beq.n	80107a4 <rcl_subscription_init+0x40>
 8010794:	b137      	cbz	r7, 80107a4 <rcl_subscription_init+0x40>
 8010796:	6823      	ldr	r3, [r4, #0]
 8010798:	b14b      	cbz	r3, 80107ae <rcl_subscription_init+0x4a>
 801079a:	2764      	movs	r7, #100	@ 0x64
 801079c:	4638      	mov	r0, r7
 801079e:	b009      	add	sp, #36	@ 0x24
 80107a0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80107a4:	270b      	movs	r7, #11
 80107a6:	4638      	mov	r0, r7
 80107a8:	b009      	add	sp, #36	@ 0x24
 80107aa:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80107ae:	e9cd 3303 	strd	r3, r3, [sp, #12]
 80107b2:	aa07      	add	r2, sp, #28
 80107b4:	9205      	str	r2, [sp, #20]
 80107b6:	9307      	str	r3, [sp, #28]
 80107b8:	f106 0358 	add.w	r3, r6, #88	@ 0x58
 80107bc:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80107c0:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 80107c4:	4639      	mov	r1, r7
 80107c6:	e899 000c 	ldmia.w	r9, {r2, r3}
 80107ca:	4628      	mov	r0, r5
 80107cc:	f7ff fdb8 	bl	8010340 <rcl_node_resolve_name>
 80107d0:	4607      	mov	r7, r0
 80107d2:	2800      	cmp	r0, #0
 80107d4:	d15f      	bne.n	8010896 <rcl_subscription_init+0x132>
 80107d6:	e9d6 3217 	ldrd	r3, r2, [r6, #92]	@ 0x5c
 80107da:	21c8      	movs	r1, #200	@ 0xc8
 80107dc:	2001      	movs	r0, #1
 80107de:	4798      	blx	r3
 80107e0:	6020      	str	r0, [r4, #0]
 80107e2:	2800      	cmp	r0, #0
 80107e4:	d05d      	beq.n	80108a2 <rcl_subscription_init+0x13e>
 80107e6:	4628      	mov	r0, r5
 80107e8:	f7ff fd78 	bl	80102dc <rcl_node_get_rmw_handle>
 80107ec:	f106 0364 	add.w	r3, r6, #100	@ 0x64
 80107f0:	9300      	str	r3, [sp, #0]
 80107f2:	9a07      	ldr	r2, [sp, #28]
 80107f4:	6827      	ldr	r7, [r4, #0]
 80107f6:	4641      	mov	r1, r8
 80107f8:	4633      	mov	r3, r6
 80107fa:	f7fa fa41 	bl	800ac80 <rmw_create_subscription>
 80107fe:	f8c7 00c0 	str.w	r0, [r7, #192]	@ 0xc0
 8010802:	6827      	ldr	r7, [r4, #0]
 8010804:	f8d7 00c0 	ldr.w	r0, [r7, #192]	@ 0xc0
 8010808:	b348      	cbz	r0, 801085e <rcl_subscription_init+0xfa>
 801080a:	f107 0170 	add.w	r1, r7, #112	@ 0x70
 801080e:	f7fa fb19 	bl	800ae44 <rmw_subscription_get_actual_qos>
 8010812:	4607      	mov	r7, r0
 8010814:	b9a8      	cbnz	r0, 8010842 <rcl_subscription_init+0xde>
 8010816:	6820      	ldr	r0, [r4, #0]
 8010818:	f896 3048 	ldrb.w	r3, [r6, #72]	@ 0x48
 801081c:	f880 30b8 	strb.w	r3, [r0, #184]	@ 0xb8
 8010820:	2270      	movs	r2, #112	@ 0x70
 8010822:	4631      	mov	r1, r6
 8010824:	f005 f8c5 	bl	80159b2 <memcpy>
 8010828:	9807      	ldr	r0, [sp, #28]
 801082a:	6d73      	ldr	r3, [r6, #84]	@ 0x54
 801082c:	6e31      	ldr	r1, [r6, #96]	@ 0x60
 801082e:	4798      	blx	r3
 8010830:	4638      	mov	r0, r7
 8010832:	b009      	add	sp, #36	@ 0x24
 8010834:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8010838:	27c8      	movs	r7, #200	@ 0xc8
 801083a:	4638      	mov	r0, r7
 801083c:	b009      	add	sp, #36	@ 0x24
 801083e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8010842:	6827      	ldr	r7, [r4, #0]
 8010844:	b32f      	cbz	r7, 8010892 <rcl_subscription_init+0x12e>
 8010846:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 801084a:	b14b      	cbz	r3, 8010860 <rcl_subscription_init+0xfc>
 801084c:	4628      	mov	r0, r5
 801084e:	f7ff fd45 	bl	80102dc <rcl_node_get_rmw_handle>
 8010852:	6823      	ldr	r3, [r4, #0]
 8010854:	f8d3 10c0 	ldr.w	r1, [r3, #192]	@ 0xc0
 8010858:	f7fa fb04 	bl	800ae64 <rmw_destroy_subscription>
 801085c:	6827      	ldr	r7, [r4, #0]
 801085e:	b197      	cbz	r7, 8010886 <rcl_subscription_init+0x122>
 8010860:	f107 0550 	add.w	r5, r7, #80	@ 0x50
 8010864:	4628      	mov	r0, r5
 8010866:	f7f9 fd45 	bl	800a2f4 <rcutils_allocator_is_valid>
 801086a:	b158      	cbz	r0, 8010884 <rcl_subscription_init+0x120>
 801086c:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 801086e:	b148      	cbz	r0, 8010884 <rcl_subscription_init+0x120>
 8010870:	4629      	mov	r1, r5
 8010872:	f002 f975 	bl	8012b60 <rmw_subscription_content_filter_options_fini>
 8010876:	4605      	mov	r5, r0
 8010878:	b9b8      	cbnz	r0, 80108aa <rcl_subscription_init+0x146>
 801087a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801087c:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 801087e:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8010880:	4798      	blx	r3
 8010882:	66fd      	str	r5, [r7, #108]	@ 0x6c
 8010884:	6827      	ldr	r7, [r4, #0]
 8010886:	6d73      	ldr	r3, [r6, #84]	@ 0x54
 8010888:	6e31      	ldr	r1, [r6, #96]	@ 0x60
 801088a:	4638      	mov	r0, r7
 801088c:	4798      	blx	r3
 801088e:	2300      	movs	r3, #0
 8010890:	6023      	str	r3, [r4, #0]
 8010892:	2701      	movs	r7, #1
 8010894:	e7c8      	b.n	8010828 <rcl_subscription_init+0xc4>
 8010896:	2867      	cmp	r0, #103	@ 0x67
 8010898:	d0c6      	beq.n	8010828 <rcl_subscription_init+0xc4>
 801089a:	2869      	cmp	r0, #105	@ 0x69
 801089c:	d003      	beq.n	80108a6 <rcl_subscription_init+0x142>
 801089e:	280a      	cmp	r0, #10
 80108a0:	d1f7      	bne.n	8010892 <rcl_subscription_init+0x12e>
 80108a2:	270a      	movs	r7, #10
 80108a4:	e7c0      	b.n	8010828 <rcl_subscription_init+0xc4>
 80108a6:	2767      	movs	r7, #103	@ 0x67
 80108a8:	e7be      	b.n	8010828 <rcl_subscription_init+0xc4>
 80108aa:	f7ff f9fb 	bl	800fca4 <rcl_convert_rmw_ret_to_rcl_ret>
 80108ae:	6827      	ldr	r7, [r4, #0]
 80108b0:	e7e9      	b.n	8010886 <rcl_subscription_init+0x122>
 80108b2:	bf00      	nop

080108b4 <rcl_subscription_get_default_options>:
 80108b4:	b570      	push	{r4, r5, r6, lr}
 80108b6:	4d14      	ldr	r5, [pc, #80]	@ (8010908 <rcl_subscription_get_default_options+0x54>)
 80108b8:	4914      	ldr	r1, [pc, #80]	@ (801090c <rcl_subscription_get_default_options+0x58>)
 80108ba:	b08a      	sub	sp, #40	@ 0x28
 80108bc:	4604      	mov	r4, r0
 80108be:	2250      	movs	r2, #80	@ 0x50
 80108c0:	4628      	mov	r0, r5
 80108c2:	f005 f876 	bl	80159b2 <memcpy>
 80108c6:	a804      	add	r0, sp, #16
 80108c8:	f7f9 fd06 	bl	800a2d8 <rcutils_get_default_allocator>
 80108cc:	f10d 0c10 	add.w	ip, sp, #16
 80108d0:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 80108d4:	f105 0e50 	add.w	lr, r5, #80	@ 0x50
 80108d8:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 80108dc:	466e      	mov	r6, sp
 80108de:	f8dc 3000 	ldr.w	r3, [ip]
 80108e2:	f8ce 3000 	str.w	r3, [lr]
 80108e6:	4630      	mov	r0, r6
 80108e8:	f002 f954 	bl	8012b94 <rmw_get_default_subscription_options>
 80108ec:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
 80108f0:	f105 0364 	add.w	r3, r5, #100	@ 0x64
 80108f4:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 80108f8:	2270      	movs	r2, #112	@ 0x70
 80108fa:	4629      	mov	r1, r5
 80108fc:	4620      	mov	r0, r4
 80108fe:	f005 f858 	bl	80159b2 <memcpy>
 8010902:	4620      	mov	r0, r4
 8010904:	b00a      	add	sp, #40	@ 0x28
 8010906:	bd70      	pop	{r4, r5, r6, pc}
 8010908:	2000db00 	.word	0x2000db00
 801090c:	08016df0 	.word	0x08016df0

08010910 <rcl_take>:
 8010910:	2800      	cmp	r0, #0
 8010912:	d04a      	beq.n	80109aa <rcl_take+0x9a>
 8010914:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010918:	4604      	mov	r4, r0
 801091a:	6800      	ldr	r0, [r0, #0]
 801091c:	b0a4      	sub	sp, #144	@ 0x90
 801091e:	2800      	cmp	r0, #0
 8010920:	d03b      	beq.n	801099a <rcl_take+0x8a>
 8010922:	461f      	mov	r7, r3
 8010924:	f8d0 30c0 	ldr.w	r3, [r0, #192]	@ 0xc0
 8010928:	2b00      	cmp	r3, #0
 801092a:	d036      	beq.n	801099a <rcl_take+0x8a>
 801092c:	460e      	mov	r6, r1
 801092e:	2900      	cmp	r1, #0
 8010930:	d039      	beq.n	80109a6 <rcl_take+0x96>
 8010932:	4615      	mov	r5, r2
 8010934:	2a00      	cmp	r2, #0
 8010936:	d03c      	beq.n	80109b2 <rcl_take+0xa2>
 8010938:	a802      	add	r0, sp, #8
 801093a:	f002 f9b5 	bl	8012ca8 <rmw_get_zero_initialized_message_info>
 801093e:	f10d 0c08 	add.w	ip, sp, #8
 8010942:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8010946:	46ae      	mov	lr, r5
 8010948:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 801094c:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8010950:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8010954:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8010958:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 801095c:	e89c 000f 	ldmia.w	ip, {r0, r1, r2, r3}
 8010960:	f04f 0800 	mov.w	r8, #0
 8010964:	e88e 000f 	stmia.w	lr, {r0, r1, r2, r3}
 8010968:	f88d 804f 	strb.w	r8, [sp, #79]	@ 0x4f
 801096c:	6822      	ldr	r2, [r4, #0]
 801096e:	462b      	mov	r3, r5
 8010970:	f8d2 00c0 	ldr.w	r0, [r2, #192]	@ 0xc0
 8010974:	9700      	str	r7, [sp, #0]
 8010976:	f10d 024f 	add.w	r2, sp, #79	@ 0x4f
 801097a:	4631      	mov	r1, r6
 801097c:	f002 fdf6 	bl	801356c <rmw_take_with_info>
 8010980:	4603      	mov	r3, r0
 8010982:	b9c0      	cbnz	r0, 80109b6 <rcl_take+0xa6>
 8010984:	f89d 104f 	ldrb.w	r1, [sp, #79]	@ 0x4f
 8010988:	f240 1291 	movw	r2, #401	@ 0x191
 801098c:	2900      	cmp	r1, #0
 801098e:	bf08      	it	eq
 8010990:	4613      	moveq	r3, r2
 8010992:	4618      	mov	r0, r3
 8010994:	b024      	add	sp, #144	@ 0x90
 8010996:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801099a:	f44f 73c8 	mov.w	r3, #400	@ 0x190
 801099e:	4618      	mov	r0, r3
 80109a0:	b024      	add	sp, #144	@ 0x90
 80109a2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80109a6:	230b      	movs	r3, #11
 80109a8:	e7f3      	b.n	8010992 <rcl_take+0x82>
 80109aa:	f44f 73c8 	mov.w	r3, #400	@ 0x190
 80109ae:	4618      	mov	r0, r3
 80109b0:	4770      	bx	lr
 80109b2:	ad14      	add	r5, sp, #80	@ 0x50
 80109b4:	e7c0      	b.n	8010938 <rcl_take+0x28>
 80109b6:	f7ff f975 	bl	800fca4 <rcl_convert_rmw_ret_to_rcl_ret>
 80109ba:	4603      	mov	r3, r0
 80109bc:	e7e9      	b.n	8010992 <rcl_take+0x82>
 80109be:	bf00      	nop

080109c0 <rcl_subscription_get_rmw_handle>:
 80109c0:	b118      	cbz	r0, 80109ca <rcl_subscription_get_rmw_handle+0xa>
 80109c2:	6800      	ldr	r0, [r0, #0]
 80109c4:	b108      	cbz	r0, 80109ca <rcl_subscription_get_rmw_handle+0xa>
 80109c6:	f8d0 00c0 	ldr.w	r0, [r0, #192]	@ 0xc0
 80109ca:	4770      	bx	lr

080109cc <rcl_subscription_is_valid>:
 80109cc:	b130      	cbz	r0, 80109dc <rcl_subscription_is_valid+0x10>
 80109ce:	6800      	ldr	r0, [r0, #0]
 80109d0:	b120      	cbz	r0, 80109dc <rcl_subscription_is_valid+0x10>
 80109d2:	f8d0 00c0 	ldr.w	r0, [r0, #192]	@ 0xc0
 80109d6:	3800      	subs	r0, #0
 80109d8:	bf18      	it	ne
 80109da:	2001      	movne	r0, #1
 80109dc:	4770      	bx	lr
 80109de:	bf00      	nop

080109e0 <rcl_get_system_time>:
 80109e0:	4608      	mov	r0, r1
 80109e2:	f7f9 bcc9 	b.w	800a378 <rcutils_system_time_now>
 80109e6:	bf00      	nop

080109e8 <rcl_get_steady_time>:
 80109e8:	4608      	mov	r0, r1
 80109ea:	f7f9 bced 	b.w	800a3c8 <rcutils_steady_time_now>
 80109ee:	bf00      	nop

080109f0 <rcl_get_ros_time>:
 80109f0:	7a03      	ldrb	r3, [r0, #8]
 80109f2:	b510      	push	{r4, lr}
 80109f4:	460c      	mov	r4, r1
 80109f6:	b133      	cbz	r3, 8010a06 <rcl_get_ros_time+0x16>
 80109f8:	2105      	movs	r1, #5
 80109fa:	f001 fd51 	bl	80124a0 <__atomic_load_8>
 80109fe:	e9c4 0100 	strd	r0, r1, [r4]
 8010a02:	2000      	movs	r0, #0
 8010a04:	bd10      	pop	{r4, pc}
 8010a06:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8010a0a:	4608      	mov	r0, r1
 8010a0c:	f7f9 bcb4 	b.w	800a378 <rcutils_system_time_now>

08010a10 <rcl_clock_init>:
 8010a10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010a12:	4605      	mov	r5, r0
 8010a14:	4610      	mov	r0, r2
 8010a16:	4614      	mov	r4, r2
 8010a18:	460e      	mov	r6, r1
 8010a1a:	f7f9 fc6b 	bl	800a2f4 <rcutils_allocator_is_valid>
 8010a1e:	b128      	cbz	r0, 8010a2c <rcl_clock_init+0x1c>
 8010a20:	2d03      	cmp	r5, #3
 8010a22:	d803      	bhi.n	8010a2c <rcl_clock_init+0x1c>
 8010a24:	e8df f005 	tbb	[pc, r5]
 8010a28:	06532e1d 	.word	0x06532e1d
 8010a2c:	f04f 0c0b 	mov.w	ip, #11
 8010a30:	4660      	mov	r0, ip
 8010a32:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010a34:	2e00      	cmp	r6, #0
 8010a36:	d0f9      	beq.n	8010a2c <rcl_clock_init+0x1c>
 8010a38:	2c00      	cmp	r4, #0
 8010a3a:	d0f7      	beq.n	8010a2c <rcl_clock_init+0x1c>
 8010a3c:	2300      	movs	r3, #0
 8010a3e:	e9c6 3301 	strd	r3, r3, [r6, #4]
 8010a42:	f8df e0b4 	ldr.w	lr, [pc, #180]	@ 8010af8 <rcl_clock_init+0xe8>
 8010a46:	6133      	str	r3, [r6, #16]
 8010a48:	f106 0514 	add.w	r5, r6, #20
 8010a4c:	469c      	mov	ip, r3
 8010a4e:	2703      	movs	r7, #3
 8010a50:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8010a52:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8010a54:	6823      	ldr	r3, [r4, #0]
 8010a56:	602b      	str	r3, [r5, #0]
 8010a58:	7037      	strb	r7, [r6, #0]
 8010a5a:	f8c6 e00c 	str.w	lr, [r6, #12]
 8010a5e:	4660      	mov	r0, ip
 8010a60:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010a62:	2e00      	cmp	r6, #0
 8010a64:	d0e2      	beq.n	8010a2c <rcl_clock_init+0x1c>
 8010a66:	2300      	movs	r3, #0
 8010a68:	7033      	strb	r3, [r6, #0]
 8010a6a:	e9c6 3301 	strd	r3, r3, [r6, #4]
 8010a6e:	e9c6 3303 	strd	r3, r3, [r6, #12]
 8010a72:	469c      	mov	ip, r3
 8010a74:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8010a76:	f106 0514 	add.w	r5, r6, #20
 8010a7a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8010a7c:	6823      	ldr	r3, [r4, #0]
 8010a7e:	602b      	str	r3, [r5, #0]
 8010a80:	4660      	mov	r0, ip
 8010a82:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010a84:	2e00      	cmp	r6, #0
 8010a86:	d0d1      	beq.n	8010a2c <rcl_clock_init+0x1c>
 8010a88:	2c00      	cmp	r4, #0
 8010a8a:	d0cf      	beq.n	8010a2c <rcl_clock_init+0x1c>
 8010a8c:	2700      	movs	r7, #0
 8010a8e:	7037      	strb	r7, [r6, #0]
 8010a90:	46a4      	mov	ip, r4
 8010a92:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8010a96:	f106 0514 	add.w	r5, r6, #20
 8010a9a:	e9c6 7701 	strd	r7, r7, [r6, #4]
 8010a9e:	e9c6 7703 	strd	r7, r7, [r6, #12]
 8010aa2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8010aa4:	f8dc 3000 	ldr.w	r3, [ip]
 8010aa8:	602b      	str	r3, [r5, #0]
 8010aaa:	6921      	ldr	r1, [r4, #16]
 8010aac:	6823      	ldr	r3, [r4, #0]
 8010aae:	2010      	movs	r0, #16
 8010ab0:	4798      	blx	r3
 8010ab2:	6130      	str	r0, [r6, #16]
 8010ab4:	b1d0      	cbz	r0, 8010aec <rcl_clock_init+0xdc>
 8010ab6:	2200      	movs	r2, #0
 8010ab8:	2300      	movs	r3, #0
 8010aba:	e9c0 2300 	strd	r2, r3, [r0]
 8010abe:	2301      	movs	r3, #1
 8010ac0:	7207      	strb	r7, [r0, #8]
 8010ac2:	4a0c      	ldr	r2, [pc, #48]	@ (8010af4 <rcl_clock_init+0xe4>)
 8010ac4:	7033      	strb	r3, [r6, #0]
 8010ac6:	46bc      	mov	ip, r7
 8010ac8:	60f2      	str	r2, [r6, #12]
 8010aca:	4660      	mov	r0, ip
 8010acc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010ace:	2e00      	cmp	r6, #0
 8010ad0:	d0ac      	beq.n	8010a2c <rcl_clock_init+0x1c>
 8010ad2:	2c00      	cmp	r4, #0
 8010ad4:	d0aa      	beq.n	8010a2c <rcl_clock_init+0x1c>
 8010ad6:	2300      	movs	r3, #0
 8010ad8:	e9c6 3301 	strd	r3, r3, [r6, #4]
 8010adc:	f8df e01c 	ldr.w	lr, [pc, #28]	@ 8010afc <rcl_clock_init+0xec>
 8010ae0:	6133      	str	r3, [r6, #16]
 8010ae2:	f106 0514 	add.w	r5, r6, #20
 8010ae6:	469c      	mov	ip, r3
 8010ae8:	2702      	movs	r7, #2
 8010aea:	e7b1      	b.n	8010a50 <rcl_clock_init+0x40>
 8010aec:	f04f 0c0a 	mov.w	ip, #10
 8010af0:	e79e      	b.n	8010a30 <rcl_clock_init+0x20>
 8010af2:	bf00      	nop
 8010af4:	080109f1 	.word	0x080109f1
 8010af8:	080109e9 	.word	0x080109e9
 8010afc:	080109e1 	.word	0x080109e1

08010b00 <rcl_clock_get_now>:
 8010b00:	b140      	cbz	r0, 8010b14 <rcl_clock_get_now+0x14>
 8010b02:	b139      	cbz	r1, 8010b14 <rcl_clock_get_now+0x14>
 8010b04:	7803      	ldrb	r3, [r0, #0]
 8010b06:	b11b      	cbz	r3, 8010b10 <rcl_clock_get_now+0x10>
 8010b08:	68c3      	ldr	r3, [r0, #12]
 8010b0a:	b10b      	cbz	r3, 8010b10 <rcl_clock_get_now+0x10>
 8010b0c:	6900      	ldr	r0, [r0, #16]
 8010b0e:	4718      	bx	r3
 8010b10:	2001      	movs	r0, #1
 8010b12:	4770      	bx	lr
 8010b14:	200b      	movs	r0, #11
 8010b16:	4770      	bx	lr

08010b18 <rcl_timer_call>:
 8010b18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010b1c:	b087      	sub	sp, #28
 8010b1e:	2800      	cmp	r0, #0
 8010b20:	d06d      	beq.n	8010bfe <rcl_timer_call+0xe6>
 8010b22:	6803      	ldr	r3, [r0, #0]
 8010b24:	4604      	mov	r4, r0
 8010b26:	2b00      	cmp	r3, #0
 8010b28:	d063      	beq.n	8010bf2 <rcl_timer_call+0xda>
 8010b2a:	f3bf 8f5b 	dmb	ish
 8010b2e:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8010b32:	f3bf 8f5b 	dmb	ish
 8010b36:	2b00      	cmp	r3, #0
 8010b38:	d150      	bne.n	8010bdc <rcl_timer_call+0xc4>
 8010b3a:	6803      	ldr	r3, [r0, #0]
 8010b3c:	a904      	add	r1, sp, #16
 8010b3e:	6818      	ldr	r0, [r3, #0]
 8010b40:	f7ff ffde 	bl	8010b00 <rcl_clock_get_now>
 8010b44:	4605      	mov	r5, r0
 8010b46:	2800      	cmp	r0, #0
 8010b48:	d14a      	bne.n	8010be0 <rcl_timer_call+0xc8>
 8010b4a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8010b4e:	2b00      	cmp	r3, #0
 8010b50:	db4a      	blt.n	8010be8 <rcl_timer_call+0xd0>
 8010b52:	6820      	ldr	r0, [r4, #0]
 8010b54:	f04f 0a05 	mov.w	sl, #5
 8010b58:	f8cd a000 	str.w	sl, [sp]
 8010b5c:	3020      	adds	r0, #32
 8010b5e:	f001 fd0b 	bl	8012578 <__atomic_exchange_8>
 8010b62:	6823      	ldr	r3, [r4, #0]
 8010b64:	f3bf 8f5b 	dmb	ish
 8010b68:	4680      	mov	r8, r0
 8010b6a:	f8d3 b010 	ldr.w	fp, [r3, #16]
 8010b6e:	f3bf 8f5b 	dmb	ish
 8010b72:	6820      	ldr	r0, [r4, #0]
 8010b74:	4689      	mov	r9, r1
 8010b76:	3028      	adds	r0, #40	@ 0x28
 8010b78:	4651      	mov	r1, sl
 8010b7a:	f001 fc91 	bl	80124a0 <__atomic_load_8>
 8010b7e:	4606      	mov	r6, r0
 8010b80:	6820      	ldr	r0, [r4, #0]
 8010b82:	460f      	mov	r7, r1
 8010b84:	3018      	adds	r0, #24
 8010b86:	4651      	mov	r1, sl
 8010b88:	f001 fc8a 	bl	80124a0 <__atomic_load_8>
 8010b8c:	1836      	adds	r6, r6, r0
 8010b8e:	4602      	mov	r2, r0
 8010b90:	4682      	mov	sl, r0
 8010b92:	e9dd 0c04 	ldrd	r0, ip, [sp, #16]
 8010b96:	eb47 0701 	adc.w	r7, r7, r1
 8010b9a:	4286      	cmp	r6, r0
 8010b9c:	460b      	mov	r3, r1
 8010b9e:	eb77 010c 	sbcs.w	r1, r7, ip
 8010ba2:	da04      	bge.n	8010bae <rcl_timer_call+0x96>
 8010ba4:	ea53 0102 	orrs.w	r1, r3, r2
 8010ba8:	d12e      	bne.n	8010c08 <rcl_timer_call+0xf0>
 8010baa:	4606      	mov	r6, r0
 8010bac:	4667      	mov	r7, ip
 8010bae:	6820      	ldr	r0, [r4, #0]
 8010bb0:	2105      	movs	r1, #5
 8010bb2:	4632      	mov	r2, r6
 8010bb4:	463b      	mov	r3, r7
 8010bb6:	3028      	adds	r0, #40	@ 0x28
 8010bb8:	9100      	str	r1, [sp, #0]
 8010bba:	f001 fca7 	bl	801250c <__atomic_store_8>
 8010bbe:	f1bb 0f00 	cmp.w	fp, #0
 8010bc2:	d00d      	beq.n	8010be0 <rcl_timer_call+0xc8>
 8010bc4:	9a04      	ldr	r2, [sp, #16]
 8010bc6:	9b05      	ldr	r3, [sp, #20]
 8010bc8:	ebb2 0208 	subs.w	r2, r2, r8
 8010bcc:	4620      	mov	r0, r4
 8010bce:	eb63 0309 	sbc.w	r3, r3, r9
 8010bd2:	47d8      	blx	fp
 8010bd4:	4628      	mov	r0, r5
 8010bd6:	b007      	add	sp, #28
 8010bd8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010bdc:	f240 3521 	movw	r5, #801	@ 0x321
 8010be0:	4628      	mov	r0, r5
 8010be2:	b007      	add	sp, #28
 8010be4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010be8:	2501      	movs	r5, #1
 8010bea:	4628      	mov	r0, r5
 8010bec:	b007      	add	sp, #28
 8010bee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010bf2:	f44f 7548 	mov.w	r5, #800	@ 0x320
 8010bf6:	4628      	mov	r0, r5
 8010bf8:	b007      	add	sp, #28
 8010bfa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010bfe:	250b      	movs	r5, #11
 8010c00:	4628      	mov	r0, r5
 8010c02:	b007      	add	sp, #28
 8010c04:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010c08:	1b80      	subs	r0, r0, r6
 8010c0a:	eb6c 0107 	sbc.w	r1, ip, r7
 8010c0e:	3801      	subs	r0, #1
 8010c10:	f161 0100 	sbc.w	r1, r1, #0
 8010c14:	e9cd 3202 	strd	r3, r2, [sp, #8]
 8010c18:	f7ef ff88 	bl	8000b2c <__aeabi_ldivmod>
 8010c1c:	9b02      	ldr	r3, [sp, #8]
 8010c1e:	3001      	adds	r0, #1
 8010c20:	f141 0100 	adc.w	r1, r1, #0
 8010c24:	fb00 f303 	mul.w	r3, r0, r3
 8010c28:	fb01 330a 	mla	r3, r1, sl, r3
 8010c2c:	fba0 0a0a 	umull	r0, sl, r0, sl
 8010c30:	1986      	adds	r6, r0, r6
 8010c32:	4453      	add	r3, sl
 8010c34:	eb43 0707 	adc.w	r7, r3, r7
 8010c38:	e7b9      	b.n	8010bae <rcl_timer_call+0x96>
 8010c3a:	bf00      	nop

08010c3c <rcl_timer_is_ready>:
 8010c3c:	b570      	push	{r4, r5, r6, lr}
 8010c3e:	b082      	sub	sp, #8
 8010c40:	b378      	cbz	r0, 8010ca2 <rcl_timer_is_ready+0x66>
 8010c42:	6803      	ldr	r3, [r0, #0]
 8010c44:	4604      	mov	r4, r0
 8010c46:	b383      	cbz	r3, 8010caa <rcl_timer_is_ready+0x6e>
 8010c48:	460d      	mov	r5, r1
 8010c4a:	b351      	cbz	r1, 8010ca2 <rcl_timer_is_ready+0x66>
 8010c4c:	f3bf 8f5b 	dmb	ish
 8010c50:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8010c54:	f3bf 8f5b 	dmb	ish
 8010c58:	b953      	cbnz	r3, 8010c70 <rcl_timer_is_ready+0x34>
 8010c5a:	6803      	ldr	r3, [r0, #0]
 8010c5c:	4669      	mov	r1, sp
 8010c5e:	6818      	ldr	r0, [r3, #0]
 8010c60:	f7ff ff4e 	bl	8010b00 <rcl_clock_get_now>
 8010c64:	4606      	mov	r6, r0
 8010c66:	b140      	cbz	r0, 8010c7a <rcl_timer_is_ready+0x3e>
 8010c68:	f240 3321 	movw	r3, #801	@ 0x321
 8010c6c:	4298      	cmp	r0, r3
 8010c6e:	d101      	bne.n	8010c74 <rcl_timer_is_ready+0x38>
 8010c70:	2600      	movs	r6, #0
 8010c72:	702e      	strb	r6, [r5, #0]
 8010c74:	4630      	mov	r0, r6
 8010c76:	b002      	add	sp, #8
 8010c78:	bd70      	pop	{r4, r5, r6, pc}
 8010c7a:	6820      	ldr	r0, [r4, #0]
 8010c7c:	2105      	movs	r1, #5
 8010c7e:	3028      	adds	r0, #40	@ 0x28
 8010c80:	f001 fc0e 	bl	80124a0 <__atomic_load_8>
 8010c84:	9b00      	ldr	r3, [sp, #0]
 8010c86:	1ac0      	subs	r0, r0, r3
 8010c88:	9b01      	ldr	r3, [sp, #4]
 8010c8a:	eb61 0103 	sbc.w	r1, r1, r3
 8010c8e:	2801      	cmp	r0, #1
 8010c90:	f171 0300 	sbcs.w	r3, r1, #0
 8010c94:	bfb4      	ite	lt
 8010c96:	2301      	movlt	r3, #1
 8010c98:	2300      	movge	r3, #0
 8010c9a:	4630      	mov	r0, r6
 8010c9c:	702b      	strb	r3, [r5, #0]
 8010c9e:	b002      	add	sp, #8
 8010ca0:	bd70      	pop	{r4, r5, r6, pc}
 8010ca2:	260b      	movs	r6, #11
 8010ca4:	4630      	mov	r0, r6
 8010ca6:	b002      	add	sp, #8
 8010ca8:	bd70      	pop	{r4, r5, r6, pc}
 8010caa:	f44f 7648 	mov.w	r6, #800	@ 0x320
 8010cae:	e7e1      	b.n	8010c74 <rcl_timer_is_ready+0x38>

08010cb0 <rcl_timer_get_time_until_next_call>:
 8010cb0:	b570      	push	{r4, r5, r6, lr}
 8010cb2:	b082      	sub	sp, #8
 8010cb4:	b330      	cbz	r0, 8010d04 <rcl_timer_get_time_until_next_call+0x54>
 8010cb6:	6803      	ldr	r3, [r0, #0]
 8010cb8:	4604      	mov	r4, r0
 8010cba:	b33b      	cbz	r3, 8010d0c <rcl_timer_get_time_until_next_call+0x5c>
 8010cbc:	460d      	mov	r5, r1
 8010cbe:	b309      	cbz	r1, 8010d04 <rcl_timer_get_time_until_next_call+0x54>
 8010cc0:	f3bf 8f5b 	dmb	ish
 8010cc4:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8010cc8:	f3bf 8f5b 	dmb	ish
 8010ccc:	b9ab      	cbnz	r3, 8010cfa <rcl_timer_get_time_until_next_call+0x4a>
 8010cce:	6803      	ldr	r3, [r0, #0]
 8010cd0:	4669      	mov	r1, sp
 8010cd2:	6818      	ldr	r0, [r3, #0]
 8010cd4:	f7ff ff14 	bl	8010b00 <rcl_clock_get_now>
 8010cd8:	4606      	mov	r6, r0
 8010cda:	b958      	cbnz	r0, 8010cf4 <rcl_timer_get_time_until_next_call+0x44>
 8010cdc:	6820      	ldr	r0, [r4, #0]
 8010cde:	2105      	movs	r1, #5
 8010ce0:	3028      	adds	r0, #40	@ 0x28
 8010ce2:	f001 fbdd 	bl	80124a0 <__atomic_load_8>
 8010ce6:	9b00      	ldr	r3, [sp, #0]
 8010ce8:	1ac0      	subs	r0, r0, r3
 8010cea:	9b01      	ldr	r3, [sp, #4]
 8010cec:	6028      	str	r0, [r5, #0]
 8010cee:	eb61 0103 	sbc.w	r1, r1, r3
 8010cf2:	6069      	str	r1, [r5, #4]
 8010cf4:	4630      	mov	r0, r6
 8010cf6:	b002      	add	sp, #8
 8010cf8:	bd70      	pop	{r4, r5, r6, pc}
 8010cfa:	f240 3621 	movw	r6, #801	@ 0x321
 8010cfe:	4630      	mov	r0, r6
 8010d00:	b002      	add	sp, #8
 8010d02:	bd70      	pop	{r4, r5, r6, pc}
 8010d04:	260b      	movs	r6, #11
 8010d06:	4630      	mov	r0, r6
 8010d08:	b002      	add	sp, #8
 8010d0a:	bd70      	pop	{r4, r5, r6, pc}
 8010d0c:	f44f 7648 	mov.w	r6, #800	@ 0x320
 8010d10:	e7f0      	b.n	8010cf4 <rcl_timer_get_time_until_next_call+0x44>
 8010d12:	bf00      	nop

08010d14 <rcl_timer_get_guard_condition>:
 8010d14:	b130      	cbz	r0, 8010d24 <rcl_timer_get_guard_condition+0x10>
 8010d16:	6800      	ldr	r0, [r0, #0]
 8010d18:	b120      	cbz	r0, 8010d24 <rcl_timer_get_guard_condition+0x10>
 8010d1a:	68c3      	ldr	r3, [r0, #12]
 8010d1c:	b10b      	cbz	r3, 8010d22 <rcl_timer_get_guard_condition+0xe>
 8010d1e:	3008      	adds	r0, #8
 8010d20:	4770      	bx	lr
 8010d22:	4618      	mov	r0, r3
 8010d24:	4770      	bx	lr
 8010d26:	bf00      	nop

08010d28 <rcl_validate_enclave_name_with_size>:
 8010d28:	b378      	cbz	r0, 8010d8a <rcl_validate_enclave_name_with_size+0x62>
 8010d2a:	b570      	push	{r4, r5, r6, lr}
 8010d2c:	4615      	mov	r5, r2
 8010d2e:	b0c2      	sub	sp, #264	@ 0x108
 8010d30:	b302      	cbz	r2, 8010d74 <rcl_validate_enclave_name_with_size+0x4c>
 8010d32:	461e      	mov	r6, r3
 8010d34:	466a      	mov	r2, sp
 8010d36:	ab01      	add	r3, sp, #4
 8010d38:	460c      	mov	r4, r1
 8010d3a:	f002 f833 	bl	8012da4 <rmw_validate_namespace_with_size>
 8010d3e:	4684      	mov	ip, r0
 8010d40:	b9e8      	cbnz	r0, 8010d7e <rcl_validate_enclave_name_with_size+0x56>
 8010d42:	9b00      	ldr	r3, [sp, #0]
 8010d44:	b923      	cbnz	r3, 8010d50 <rcl_validate_enclave_name_with_size+0x28>
 8010d46:	2300      	movs	r3, #0
 8010d48:	602b      	str	r3, [r5, #0]
 8010d4a:	4660      	mov	r0, ip
 8010d4c:	b042      	add	sp, #264	@ 0x108
 8010d4e:	bd70      	pop	{r4, r5, r6, pc}
 8010d50:	2b07      	cmp	r3, #7
 8010d52:	d007      	beq.n	8010d64 <rcl_validate_enclave_name_with_size+0x3c>
 8010d54:	1e5a      	subs	r2, r3, #1
 8010d56:	2a05      	cmp	r2, #5
 8010d58:	d833      	bhi.n	8010dc2 <rcl_validate_enclave_name_with_size+0x9a>
 8010d5a:	e8df f002 	tbb	[pc, r2]
 8010d5e:	2c2f      	.short	0x2c2f
 8010d60:	1a232629 	.word	0x1a232629
 8010d64:	2cff      	cmp	r4, #255	@ 0xff
 8010d66:	d9ee      	bls.n	8010d46 <rcl_validate_enclave_name_with_size+0x1e>
 8010d68:	602b      	str	r3, [r5, #0]
 8010d6a:	2e00      	cmp	r6, #0
 8010d6c:	d0ed      	beq.n	8010d4a <rcl_validate_enclave_name_with_size+0x22>
 8010d6e:	23fe      	movs	r3, #254	@ 0xfe
 8010d70:	6033      	str	r3, [r6, #0]
 8010d72:	e7ea      	b.n	8010d4a <rcl_validate_enclave_name_with_size+0x22>
 8010d74:	f04f 0c0b 	mov.w	ip, #11
 8010d78:	4660      	mov	r0, ip
 8010d7a:	b042      	add	sp, #264	@ 0x108
 8010d7c:	bd70      	pop	{r4, r5, r6, pc}
 8010d7e:	f7fe ff91 	bl	800fca4 <rcl_convert_rmw_ret_to_rcl_ret>
 8010d82:	4684      	mov	ip, r0
 8010d84:	4660      	mov	r0, ip
 8010d86:	b042      	add	sp, #264	@ 0x108
 8010d88:	bd70      	pop	{r4, r5, r6, pc}
 8010d8a:	f04f 0c0b 	mov.w	ip, #11
 8010d8e:	4660      	mov	r0, ip
 8010d90:	4770      	bx	lr
 8010d92:	2306      	movs	r3, #6
 8010d94:	602b      	str	r3, [r5, #0]
 8010d96:	2e00      	cmp	r6, #0
 8010d98:	d0d7      	beq.n	8010d4a <rcl_validate_enclave_name_with_size+0x22>
 8010d9a:	9b01      	ldr	r3, [sp, #4]
 8010d9c:	6033      	str	r3, [r6, #0]
 8010d9e:	4660      	mov	r0, ip
 8010da0:	b042      	add	sp, #264	@ 0x108
 8010da2:	bd70      	pop	{r4, r5, r6, pc}
 8010da4:	2305      	movs	r3, #5
 8010da6:	602b      	str	r3, [r5, #0]
 8010da8:	e7f5      	b.n	8010d96 <rcl_validate_enclave_name_with_size+0x6e>
 8010daa:	2304      	movs	r3, #4
 8010dac:	602b      	str	r3, [r5, #0]
 8010dae:	e7f2      	b.n	8010d96 <rcl_validate_enclave_name_with_size+0x6e>
 8010db0:	2303      	movs	r3, #3
 8010db2:	602b      	str	r3, [r5, #0]
 8010db4:	e7ef      	b.n	8010d96 <rcl_validate_enclave_name_with_size+0x6e>
 8010db6:	2302      	movs	r3, #2
 8010db8:	602b      	str	r3, [r5, #0]
 8010dba:	e7ec      	b.n	8010d96 <rcl_validate_enclave_name_with_size+0x6e>
 8010dbc:	2301      	movs	r3, #1
 8010dbe:	602b      	str	r3, [r5, #0]
 8010dc0:	e7e9      	b.n	8010d96 <rcl_validate_enclave_name_with_size+0x6e>
 8010dc2:	4a04      	ldr	r2, [pc, #16]	@ (8010dd4 <rcl_validate_enclave_name_with_size+0xac>)
 8010dc4:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8010dc8:	a802      	add	r0, sp, #8
 8010dca:	f001 fd23 	bl	8012814 <rcutils_snprintf>
 8010dce:	f04f 0c01 	mov.w	ip, #1
 8010dd2:	e7ba      	b.n	8010d4a <rcl_validate_enclave_name_with_size+0x22>
 8010dd4:	08016e40 	.word	0x08016e40

08010dd8 <rcl_validate_enclave_name>:
 8010dd8:	b168      	cbz	r0, 8010df6 <rcl_validate_enclave_name+0x1e>
 8010dda:	b570      	push	{r4, r5, r6, lr}
 8010ddc:	460d      	mov	r5, r1
 8010dde:	4616      	mov	r6, r2
 8010de0:	4604      	mov	r4, r0
 8010de2:	f7ef fa07 	bl	80001f4 <strlen>
 8010de6:	4633      	mov	r3, r6
 8010de8:	4601      	mov	r1, r0
 8010dea:	462a      	mov	r2, r5
 8010dec:	4620      	mov	r0, r4
 8010dee:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8010df2:	f7ff bf99 	b.w	8010d28 <rcl_validate_enclave_name_with_size>
 8010df6:	200b      	movs	r0, #11
 8010df8:	4770      	bx	lr
 8010dfa:	bf00      	nop

08010dfc <rcl_get_zero_initialized_wait_set>:
 8010dfc:	b510      	push	{r4, lr}
 8010dfe:	4c08      	ldr	r4, [pc, #32]	@ (8010e20 <rcl_get_zero_initialized_wait_set+0x24>)
 8010e00:	4686      	mov	lr, r0
 8010e02:	4684      	mov	ip, r0
 8010e04:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8010e06:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8010e0a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8010e0c:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8010e10:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8010e12:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8010e16:	6823      	ldr	r3, [r4, #0]
 8010e18:	f8cc 3000 	str.w	r3, [ip]
 8010e1c:	4670      	mov	r0, lr
 8010e1e:	bd10      	pop	{r4, pc}
 8010e20:	08016ea0 	.word	0x08016ea0

08010e24 <rcl_wait_set_is_valid>:
 8010e24:	b118      	cbz	r0, 8010e2e <rcl_wait_set_is_valid+0xa>
 8010e26:	6b00      	ldr	r0, [r0, #48]	@ 0x30
 8010e28:	3800      	subs	r0, #0
 8010e2a:	bf18      	it	ne
 8010e2c:	2001      	movne	r0, #1
 8010e2e:	4770      	bx	lr

08010e30 <rcl_wait_set_fini>:
 8010e30:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010e34:	b082      	sub	sp, #8
 8010e36:	2800      	cmp	r0, #0
 8010e38:	f000 8095 	beq.w	8010f66 <rcl_wait_set_fini+0x136>
 8010e3c:	6b06      	ldr	r6, [r0, #48]	@ 0x30
 8010e3e:	4604      	mov	r4, r0
 8010e40:	2e00      	cmp	r6, #0
 8010e42:	f000 808c 	beq.w	8010f5e <rcl_wait_set_fini+0x12e>
 8010e46:	6bf0      	ldr	r0, [r6, #60]	@ 0x3c
 8010e48:	f002 fd66 	bl	8013918 <rmw_destroy_wait_set>
 8010e4c:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 8010e4e:	1e06      	subs	r6, r0, #0
 8010e50:	bf18      	it	ne
 8010e52:	f44f 7661 	movne.w	r6, #900	@ 0x384
 8010e56:	2d00      	cmp	r5, #0
 8010e58:	f000 8081 	beq.w	8010f5e <rcl_wait_set_fini+0x12e>
 8010e5c:	6820      	ldr	r0, [r4, #0]
 8010e5e:	f8d5 804c 	ldr.w	r8, [r5, #76]	@ 0x4c
 8010e62:	6da9      	ldr	r1, [r5, #88]	@ 0x58
 8010e64:	2700      	movs	r7, #0
 8010e66:	6067      	str	r7, [r4, #4]
 8010e68:	602f      	str	r7, [r5, #0]
 8010e6a:	b120      	cbz	r0, 8010e76 <rcl_wait_set_fini+0x46>
 8010e6c:	9101      	str	r1, [sp, #4]
 8010e6e:	47c0      	blx	r8
 8010e70:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 8010e72:	9901      	ldr	r1, [sp, #4]
 8010e74:	6027      	str	r7, [r4, #0]
 8010e76:	68a8      	ldr	r0, [r5, #8]
 8010e78:	b120      	cbz	r0, 8010e84 <rcl_wait_set_fini+0x54>
 8010e7a:	47c0      	blx	r8
 8010e7c:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 8010e7e:	2300      	movs	r3, #0
 8010e80:	e9c5 3301 	strd	r3, r3, [r5, #4]
 8010e84:	68a0      	ldr	r0, [r4, #8]
 8010e86:	6cef      	ldr	r7, [r5, #76]	@ 0x4c
 8010e88:	6da9      	ldr	r1, [r5, #88]	@ 0x58
 8010e8a:	f04f 0800 	mov.w	r8, #0
 8010e8e:	f8c4 800c 	str.w	r8, [r4, #12]
 8010e92:	f8c5 800c 	str.w	r8, [r5, #12]
 8010e96:	b128      	cbz	r0, 8010ea4 <rcl_wait_set_fini+0x74>
 8010e98:	47b8      	blx	r7
 8010e9a:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 8010e9c:	f8c4 8008 	str.w	r8, [r4, #8]
 8010ea0:	6cef      	ldr	r7, [r5, #76]	@ 0x4c
 8010ea2:	6da9      	ldr	r1, [r5, #88]	@ 0x58
 8010ea4:	6968      	ldr	r0, [r5, #20]
 8010ea6:	f04f 0800 	mov.w	r8, #0
 8010eaa:	f8c5 8010 	str.w	r8, [r5, #16]
 8010eae:	b128      	cbz	r0, 8010ebc <rcl_wait_set_fini+0x8c>
 8010eb0:	47b8      	blx	r7
 8010eb2:	f8c5 8014 	str.w	r8, [r5, #20]
 8010eb6:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 8010eb8:	6cef      	ldr	r7, [r5, #76]	@ 0x4c
 8010eba:	6da9      	ldr	r1, [r5, #88]	@ 0x58
 8010ebc:	6920      	ldr	r0, [r4, #16]
 8010ebe:	f04f 0800 	mov.w	r8, #0
 8010ec2:	f8c4 8014 	str.w	r8, [r4, #20]
 8010ec6:	f8c5 8040 	str.w	r8, [r5, #64]	@ 0x40
 8010eca:	b128      	cbz	r0, 8010ed8 <rcl_wait_set_fini+0xa8>
 8010ecc:	47b8      	blx	r7
 8010ece:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 8010ed0:	f8c4 8010 	str.w	r8, [r4, #16]
 8010ed4:	6cef      	ldr	r7, [r5, #76]	@ 0x4c
 8010ed6:	6da9      	ldr	r1, [r5, #88]	@ 0x58
 8010ed8:	69a0      	ldr	r0, [r4, #24]
 8010eda:	f04f 0800 	mov.w	r8, #0
 8010ede:	f8c4 801c 	str.w	r8, [r4, #28]
 8010ee2:	f8c5 8018 	str.w	r8, [r5, #24]
 8010ee6:	b128      	cbz	r0, 8010ef4 <rcl_wait_set_fini+0xc4>
 8010ee8:	9101      	str	r1, [sp, #4]
 8010eea:	47b8      	blx	r7
 8010eec:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 8010eee:	9901      	ldr	r1, [sp, #4]
 8010ef0:	f8c4 8018 	str.w	r8, [r4, #24]
 8010ef4:	6a28      	ldr	r0, [r5, #32]
 8010ef6:	b120      	cbz	r0, 8010f02 <rcl_wait_set_fini+0xd2>
 8010ef8:	47b8      	blx	r7
 8010efa:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 8010efc:	2300      	movs	r3, #0
 8010efe:	e9c5 3307 	strd	r3, r3, [r5, #28]
 8010f02:	6a20      	ldr	r0, [r4, #32]
 8010f04:	f8d5 804c 	ldr.w	r8, [r5, #76]	@ 0x4c
 8010f08:	6da9      	ldr	r1, [r5, #88]	@ 0x58
 8010f0a:	2700      	movs	r7, #0
 8010f0c:	6267      	str	r7, [r4, #36]	@ 0x24
 8010f0e:	626f      	str	r7, [r5, #36]	@ 0x24
 8010f10:	b120      	cbz	r0, 8010f1c <rcl_wait_set_fini+0xec>
 8010f12:	9101      	str	r1, [sp, #4]
 8010f14:	47c0      	blx	r8
 8010f16:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 8010f18:	9901      	ldr	r1, [sp, #4]
 8010f1a:	6227      	str	r7, [r4, #32]
 8010f1c:	6ae8      	ldr	r0, [r5, #44]	@ 0x2c
 8010f1e:	b120      	cbz	r0, 8010f2a <rcl_wait_set_fini+0xfa>
 8010f20:	47c0      	blx	r8
 8010f22:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 8010f24:	2300      	movs	r3, #0
 8010f26:	e9c5 330a 	strd	r3, r3, [r5, #40]	@ 0x28
 8010f2a:	6aa0      	ldr	r0, [r4, #40]	@ 0x28
 8010f2c:	f8d5 804c 	ldr.w	r8, [r5, #76]	@ 0x4c
 8010f30:	6da9      	ldr	r1, [r5, #88]	@ 0x58
 8010f32:	2700      	movs	r7, #0
 8010f34:	62e7      	str	r7, [r4, #44]	@ 0x2c
 8010f36:	632f      	str	r7, [r5, #48]	@ 0x30
 8010f38:	b120      	cbz	r0, 8010f44 <rcl_wait_set_fini+0x114>
 8010f3a:	9101      	str	r1, [sp, #4]
 8010f3c:	47c0      	blx	r8
 8010f3e:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 8010f40:	9901      	ldr	r1, [sp, #4]
 8010f42:	62a7      	str	r7, [r4, #40]	@ 0x28
 8010f44:	6ba8      	ldr	r0, [r5, #56]	@ 0x38
 8010f46:	b120      	cbz	r0, 8010f52 <rcl_wait_set_fini+0x122>
 8010f48:	47c0      	blx	r8
 8010f4a:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 8010f4c:	2300      	movs	r3, #0
 8010f4e:	e9c5 330d 	strd	r3, r3, [r5, #52]	@ 0x34
 8010f52:	6ceb      	ldr	r3, [r5, #76]	@ 0x4c
 8010f54:	6da9      	ldr	r1, [r5, #88]	@ 0x58
 8010f56:	4628      	mov	r0, r5
 8010f58:	4798      	blx	r3
 8010f5a:	2300      	movs	r3, #0
 8010f5c:	6323      	str	r3, [r4, #48]	@ 0x30
 8010f5e:	4630      	mov	r0, r6
 8010f60:	b002      	add	sp, #8
 8010f62:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010f66:	260b      	movs	r6, #11
 8010f68:	4630      	mov	r0, r6
 8010f6a:	b002      	add	sp, #8
 8010f6c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08010f70 <rcl_wait_set_add_subscription>:
 8010f70:	b318      	cbz	r0, 8010fba <rcl_wait_set_add_subscription+0x4a>
 8010f72:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 8010f74:	b570      	push	{r4, r5, r6, lr}
 8010f76:	4604      	mov	r4, r0
 8010f78:	b30b      	cbz	r3, 8010fbe <rcl_wait_set_add_subscription+0x4e>
 8010f7a:	b319      	cbz	r1, 8010fc4 <rcl_wait_set_add_subscription+0x54>
 8010f7c:	681d      	ldr	r5, [r3, #0]
 8010f7e:	6840      	ldr	r0, [r0, #4]
 8010f80:	4285      	cmp	r5, r0
 8010f82:	d217      	bcs.n	8010fb4 <rcl_wait_set_add_subscription+0x44>
 8010f84:	6820      	ldr	r0, [r4, #0]
 8010f86:	1c6e      	adds	r6, r5, #1
 8010f88:	601e      	str	r6, [r3, #0]
 8010f8a:	f840 1025 	str.w	r1, [r0, r5, lsl #2]
 8010f8e:	b102      	cbz	r2, 8010f92 <rcl_wait_set_add_subscription+0x22>
 8010f90:	6015      	str	r5, [r2, #0]
 8010f92:	4608      	mov	r0, r1
 8010f94:	f7ff fd14 	bl	80109c0 <rcl_subscription_get_rmw_handle>
 8010f98:	b150      	cbz	r0, 8010fb0 <rcl_wait_set_add_subscription+0x40>
 8010f9a:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8010f9c:	6842      	ldr	r2, [r0, #4]
 8010f9e:	689b      	ldr	r3, [r3, #8]
 8010fa0:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8010fa4:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 8010fa6:	6853      	ldr	r3, [r2, #4]
 8010fa8:	3301      	adds	r3, #1
 8010faa:	2000      	movs	r0, #0
 8010fac:	6053      	str	r3, [r2, #4]
 8010fae:	bd70      	pop	{r4, r5, r6, pc}
 8010fb0:	2001      	movs	r0, #1
 8010fb2:	bd70      	pop	{r4, r5, r6, pc}
 8010fb4:	f240 3086 	movw	r0, #902	@ 0x386
 8010fb8:	bd70      	pop	{r4, r5, r6, pc}
 8010fba:	200b      	movs	r0, #11
 8010fbc:	4770      	bx	lr
 8010fbe:	f44f 7061 	mov.w	r0, #900	@ 0x384
 8010fc2:	bd70      	pop	{r4, r5, r6, pc}
 8010fc4:	200b      	movs	r0, #11
 8010fc6:	bd70      	pop	{r4, r5, r6, pc}

08010fc8 <rcl_wait_set_clear>:
 8010fc8:	2800      	cmp	r0, #0
 8010fca:	d073      	beq.n	80110b4 <rcl_wait_set_clear+0xec>
 8010fcc:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 8010fce:	b510      	push	{r4, lr}
 8010fd0:	4604      	mov	r4, r0
 8010fd2:	2b00      	cmp	r3, #0
 8010fd4:	d070      	beq.n	80110b8 <rcl_wait_set_clear+0xf0>
 8010fd6:	6800      	ldr	r0, [r0, #0]
 8010fd8:	b138      	cbz	r0, 8010fea <rcl_wait_set_clear+0x22>
 8010fda:	6862      	ldr	r2, [r4, #4]
 8010fdc:	2100      	movs	r1, #0
 8010fde:	0092      	lsls	r2, r2, #2
 8010fe0:	f004 fc1e 	bl	8015820 <memset>
 8010fe4:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8010fe6:	2200      	movs	r2, #0
 8010fe8:	601a      	str	r2, [r3, #0]
 8010fea:	68a0      	ldr	r0, [r4, #8]
 8010fec:	b138      	cbz	r0, 8010ffe <rcl_wait_set_clear+0x36>
 8010fee:	68e2      	ldr	r2, [r4, #12]
 8010ff0:	2100      	movs	r1, #0
 8010ff2:	0092      	lsls	r2, r2, #2
 8010ff4:	f004 fc14 	bl	8015820 <memset>
 8010ff8:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8010ffa:	2200      	movs	r2, #0
 8010ffc:	60da      	str	r2, [r3, #12]
 8010ffe:	69a0      	ldr	r0, [r4, #24]
 8011000:	b138      	cbz	r0, 8011012 <rcl_wait_set_clear+0x4a>
 8011002:	69e2      	ldr	r2, [r4, #28]
 8011004:	2100      	movs	r1, #0
 8011006:	0092      	lsls	r2, r2, #2
 8011008:	f004 fc0a 	bl	8015820 <memset>
 801100c:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 801100e:	2200      	movs	r2, #0
 8011010:	619a      	str	r2, [r3, #24]
 8011012:	6a20      	ldr	r0, [r4, #32]
 8011014:	b138      	cbz	r0, 8011026 <rcl_wait_set_clear+0x5e>
 8011016:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 8011018:	2100      	movs	r1, #0
 801101a:	0092      	lsls	r2, r2, #2
 801101c:	f004 fc00 	bl	8015820 <memset>
 8011020:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8011022:	2200      	movs	r2, #0
 8011024:	625a      	str	r2, [r3, #36]	@ 0x24
 8011026:	6aa0      	ldr	r0, [r4, #40]	@ 0x28
 8011028:	b138      	cbz	r0, 801103a <rcl_wait_set_clear+0x72>
 801102a:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 801102c:	2100      	movs	r1, #0
 801102e:	0092      	lsls	r2, r2, #2
 8011030:	f004 fbf6 	bl	8015820 <memset>
 8011034:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8011036:	2200      	movs	r2, #0
 8011038:	631a      	str	r2, [r3, #48]	@ 0x30
 801103a:	6920      	ldr	r0, [r4, #16]
 801103c:	b138      	cbz	r0, 801104e <rcl_wait_set_clear+0x86>
 801103e:	6962      	ldr	r2, [r4, #20]
 8011040:	2100      	movs	r1, #0
 8011042:	0092      	lsls	r2, r2, #2
 8011044:	f004 fbec 	bl	8015820 <memset>
 8011048:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 801104a:	2200      	movs	r2, #0
 801104c:	641a      	str	r2, [r3, #64]	@ 0x40
 801104e:	6898      	ldr	r0, [r3, #8]
 8011050:	b138      	cbz	r0, 8011062 <rcl_wait_set_clear+0x9a>
 8011052:	685a      	ldr	r2, [r3, #4]
 8011054:	2100      	movs	r1, #0
 8011056:	0092      	lsls	r2, r2, #2
 8011058:	f004 fbe2 	bl	8015820 <memset>
 801105c:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 801105e:	2200      	movs	r2, #0
 8011060:	605a      	str	r2, [r3, #4]
 8011062:	6958      	ldr	r0, [r3, #20]
 8011064:	b138      	cbz	r0, 8011076 <rcl_wait_set_clear+0xae>
 8011066:	691a      	ldr	r2, [r3, #16]
 8011068:	2100      	movs	r1, #0
 801106a:	0092      	lsls	r2, r2, #2
 801106c:	f004 fbd8 	bl	8015820 <memset>
 8011070:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8011072:	2200      	movs	r2, #0
 8011074:	611a      	str	r2, [r3, #16]
 8011076:	6a18      	ldr	r0, [r3, #32]
 8011078:	b138      	cbz	r0, 801108a <rcl_wait_set_clear+0xc2>
 801107a:	69da      	ldr	r2, [r3, #28]
 801107c:	2100      	movs	r1, #0
 801107e:	0092      	lsls	r2, r2, #2
 8011080:	f004 fbce 	bl	8015820 <memset>
 8011084:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8011086:	2200      	movs	r2, #0
 8011088:	61da      	str	r2, [r3, #28]
 801108a:	6ad8      	ldr	r0, [r3, #44]	@ 0x2c
 801108c:	b138      	cbz	r0, 801109e <rcl_wait_set_clear+0xd6>
 801108e:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8011090:	2100      	movs	r1, #0
 8011092:	0092      	lsls	r2, r2, #2
 8011094:	f004 fbc4 	bl	8015820 <memset>
 8011098:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 801109a:	2200      	movs	r2, #0
 801109c:	629a      	str	r2, [r3, #40]	@ 0x28
 801109e:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 80110a0:	b138      	cbz	r0, 80110b2 <rcl_wait_set_clear+0xea>
 80110a2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80110a4:	2100      	movs	r1, #0
 80110a6:	0092      	lsls	r2, r2, #2
 80110a8:	f004 fbba 	bl	8015820 <memset>
 80110ac:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 80110ae:	2000      	movs	r0, #0
 80110b0:	6358      	str	r0, [r3, #52]	@ 0x34
 80110b2:	bd10      	pop	{r4, pc}
 80110b4:	200b      	movs	r0, #11
 80110b6:	4770      	bx	lr
 80110b8:	f44f 7061 	mov.w	r0, #900	@ 0x384
 80110bc:	bd10      	pop	{r4, pc}
 80110be:	bf00      	nop

080110c0 <rcl_wait_set_resize>:
 80110c0:	2800      	cmp	r0, #0
 80110c2:	f000 8185 	beq.w	80113d0 <rcl_wait_set_resize+0x310>
 80110c6:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80110ca:	6b04      	ldr	r4, [r0, #48]	@ 0x30
 80110cc:	b083      	sub	sp, #12
 80110ce:	4605      	mov	r5, r0
 80110d0:	2c00      	cmp	r4, #0
 80110d2:	f000 817f 	beq.w	80113d4 <rcl_wait_set_resize+0x314>
 80110d6:	f04f 0900 	mov.w	r9, #0
 80110da:	f8d4 a058 	ldr.w	sl, [r4, #88]	@ 0x58
 80110de:	461f      	mov	r7, r3
 80110e0:	4688      	mov	r8, r1
 80110e2:	e9d4 b313 	ldrd	fp, r3, [r4, #76]	@ 0x4c
 80110e6:	4616      	mov	r6, r2
 80110e8:	f8c0 9004 	str.w	r9, [r0, #4]
 80110ec:	f8c4 9000 	str.w	r9, [r4]
 80110f0:	2900      	cmp	r1, #0
 80110f2:	f000 80bd 	beq.w	8011270 <rcl_wait_set_resize+0x1b0>
 80110f6:	008c      	lsls	r4, r1, #2
 80110f8:	6800      	ldr	r0, [r0, #0]
 80110fa:	9301      	str	r3, [sp, #4]
 80110fc:	4652      	mov	r2, sl
 80110fe:	4621      	mov	r1, r4
 8011100:	4798      	blx	r3
 8011102:	9b01      	ldr	r3, [sp, #4]
 8011104:	6028      	str	r0, [r5, #0]
 8011106:	2800      	cmp	r0, #0
 8011108:	f000 80cb 	beq.w	80112a2 <rcl_wait_set_resize+0x1e2>
 801110c:	4622      	mov	r2, r4
 801110e:	4649      	mov	r1, r9
 8011110:	9301      	str	r3, [sp, #4]
 8011112:	f004 fb85 	bl	8015820 <memset>
 8011116:	f8c5 8004 	str.w	r8, [r5, #4]
 801111a:	f8d5 8030 	ldr.w	r8, [r5, #48]	@ 0x30
 801111e:	9b01      	ldr	r3, [sp, #4]
 8011120:	f8d8 0008 	ldr.w	r0, [r8, #8]
 8011124:	f8c8 9004 	str.w	r9, [r8, #4]
 8011128:	4652      	mov	r2, sl
 801112a:	4621      	mov	r1, r4
 801112c:	4798      	blx	r3
 801112e:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 8011130:	f8c8 0008 	str.w	r0, [r8, #8]
 8011134:	689b      	ldr	r3, [r3, #8]
 8011136:	2b00      	cmp	r3, #0
 8011138:	f000 80ac 	beq.w	8011294 <rcl_wait_set_resize+0x1d4>
 801113c:	4622      	mov	r2, r4
 801113e:	4649      	mov	r1, r9
 8011140:	4618      	mov	r0, r3
 8011142:	f004 fb6d 	bl	8015820 <memset>
 8011146:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 8011148:	f8d4 9058 	ldr.w	r9, [r4, #88]	@ 0x58
 801114c:	f04f 0800 	mov.w	r8, #0
 8011150:	e9d4 2313 	ldrd	r2, r3, [r4, #76]	@ 0x4c
 8011154:	f8c5 800c 	str.w	r8, [r5, #12]
 8011158:	f8c4 800c 	str.w	r8, [r4, #12]
 801115c:	2e00      	cmp	r6, #0
 801115e:	f040 80a4 	bne.w	80112aa <rcl_wait_set_resize+0x1ea>
 8011162:	68a8      	ldr	r0, [r5, #8]
 8011164:	b128      	cbz	r0, 8011172 <rcl_wait_set_resize+0xb2>
 8011166:	4649      	mov	r1, r9
 8011168:	4790      	blx	r2
 801116a:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 801116c:	60ae      	str	r6, [r5, #8]
 801116e:	f8d4 9058 	ldr.w	r9, [r4, #88]	@ 0x58
 8011172:	f04f 0800 	mov.w	r8, #0
 8011176:	19f6      	adds	r6, r6, r7
 8011178:	f8c4 8010 	str.w	r8, [r4, #16]
 801117c:	f040 80ac 	bne.w	80112d8 <rcl_wait_set_resize+0x218>
 8011180:	6960      	ldr	r0, [r4, #20]
 8011182:	b130      	cbz	r0, 8011192 <rcl_wait_set_resize+0xd2>
 8011184:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
 8011186:	4649      	mov	r1, r9
 8011188:	4798      	blx	r3
 801118a:	6166      	str	r6, [r4, #20]
 801118c:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 801118e:	f8d4 9058 	ldr.w	r9, [r4, #88]	@ 0x58
 8011192:	2600      	movs	r6, #0
 8011194:	e9d4 a813 	ldrd	sl, r8, [r4, #76]	@ 0x4c
 8011198:	616e      	str	r6, [r5, #20]
 801119a:	6426      	str	r6, [r4, #64]	@ 0x40
 801119c:	2f00      	cmp	r7, #0
 801119e:	f040 80ad 	bne.w	80112fc <rcl_wait_set_resize+0x23c>
 80111a2:	6928      	ldr	r0, [r5, #16]
 80111a4:	b138      	cbz	r0, 80111b6 <rcl_wait_set_resize+0xf6>
 80111a6:	4649      	mov	r1, r9
 80111a8:	47d0      	blx	sl
 80111aa:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 80111ac:	612f      	str	r7, [r5, #16]
 80111ae:	e9d4 a813 	ldrd	sl, r8, [r4, #76]	@ 0x4c
 80111b2:	f8d4 9058 	ldr.w	r9, [r4, #88]	@ 0x58
 80111b6:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80111b8:	2600      	movs	r6, #0
 80111ba:	61ee      	str	r6, [r5, #28]
 80111bc:	61a6      	str	r6, [r4, #24]
 80111be:	2b00      	cmp	r3, #0
 80111c0:	f040 80af 	bne.w	8011322 <rcl_wait_set_resize+0x262>
 80111c4:	69a8      	ldr	r0, [r5, #24]
 80111c6:	b120      	cbz	r0, 80111d2 <rcl_wait_set_resize+0x112>
 80111c8:	4649      	mov	r1, r9
 80111ca:	47d0      	blx	sl
 80111cc:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80111ce:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 80111d0:	61ab      	str	r3, [r5, #24]
 80111d2:	6a20      	ldr	r0, [r4, #32]
 80111d4:	b128      	cbz	r0, 80111e2 <rcl_wait_set_resize+0x122>
 80111d6:	4649      	mov	r1, r9
 80111d8:	47d0      	blx	sl
 80111da:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 80111dc:	2300      	movs	r3, #0
 80111de:	e9c4 3307 	strd	r3, r3, [r4, #28]
 80111e2:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80111e4:	6da7      	ldr	r7, [r4, #88]	@ 0x58
 80111e6:	2600      	movs	r6, #0
 80111e8:	e9d4 8913 	ldrd	r8, r9, [r4, #76]	@ 0x4c
 80111ec:	626e      	str	r6, [r5, #36]	@ 0x24
 80111ee:	6266      	str	r6, [r4, #36]	@ 0x24
 80111f0:	2b00      	cmp	r3, #0
 80111f2:	f000 80b6 	beq.w	8011362 <rcl_wait_set_resize+0x2a2>
 80111f6:	ea4f 0a83 	mov.w	sl, r3, lsl #2
 80111fa:	6a28      	ldr	r0, [r5, #32]
 80111fc:	463a      	mov	r2, r7
 80111fe:	4651      	mov	r1, sl
 8011200:	47c8      	blx	r9
 8011202:	6228      	str	r0, [r5, #32]
 8011204:	2800      	cmp	r0, #0
 8011206:	d04c      	beq.n	80112a2 <rcl_wait_set_resize+0x1e2>
 8011208:	4652      	mov	r2, sl
 801120a:	4631      	mov	r1, r6
 801120c:	f004 fb08 	bl	8015820 <memset>
 8011210:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 8011212:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8011214:	626b      	str	r3, [r5, #36]	@ 0x24
 8011216:	6ae0      	ldr	r0, [r4, #44]	@ 0x2c
 8011218:	62a6      	str	r6, [r4, #40]	@ 0x28
 801121a:	463a      	mov	r2, r7
 801121c:	4651      	mov	r1, sl
 801121e:	47c8      	blx	r9
 8011220:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 8011222:	62e0      	str	r0, [r4, #44]	@ 0x2c
 8011224:	6adc      	ldr	r4, [r3, #44]	@ 0x2c
 8011226:	2c00      	cmp	r4, #0
 8011228:	f000 80f0 	beq.w	801140c <rcl_wait_set_resize+0x34c>
 801122c:	4620      	mov	r0, r4
 801122e:	4652      	mov	r2, sl
 8011230:	4631      	mov	r1, r6
 8011232:	f004 faf5 	bl	8015820 <memset>
 8011236:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 8011238:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801123a:	6da7      	ldr	r7, [r4, #88]	@ 0x58
 801123c:	2600      	movs	r6, #0
 801123e:	e9d4 8913 	ldrd	r8, r9, [r4, #76]	@ 0x4c
 8011242:	62ee      	str	r6, [r5, #44]	@ 0x2c
 8011244:	6326      	str	r6, [r4, #48]	@ 0x30
 8011246:	2b00      	cmp	r3, #0
 8011248:	f040 809d 	bne.w	8011386 <rcl_wait_set_resize+0x2c6>
 801124c:	6aa8      	ldr	r0, [r5, #40]	@ 0x28
 801124e:	b120      	cbz	r0, 801125a <rcl_wait_set_resize+0x19a>
 8011250:	4639      	mov	r1, r7
 8011252:	47c0      	blx	r8
 8011254:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8011256:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 8011258:	62ab      	str	r3, [r5, #40]	@ 0x28
 801125a:	6ba0      	ldr	r0, [r4, #56]	@ 0x38
 801125c:	b310      	cbz	r0, 80112a4 <rcl_wait_set_resize+0x1e4>
 801125e:	4639      	mov	r1, r7
 8011260:	47c0      	blx	r8
 8011262:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 8011264:	2000      	movs	r0, #0
 8011266:	e9c3 000d 	strd	r0, r0, [r3, #52]	@ 0x34
 801126a:	b003      	add	sp, #12
 801126c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011270:	6800      	ldr	r0, [r0, #0]
 8011272:	b120      	cbz	r0, 801127e <rcl_wait_set_resize+0x1be>
 8011274:	4651      	mov	r1, sl
 8011276:	47d8      	blx	fp
 8011278:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 801127a:	f8c5 8000 	str.w	r8, [r5]
 801127e:	68a0      	ldr	r0, [r4, #8]
 8011280:	2800      	cmp	r0, #0
 8011282:	f43f af61 	beq.w	8011148 <rcl_wait_set_resize+0x88>
 8011286:	4651      	mov	r1, sl
 8011288:	47d8      	blx	fp
 801128a:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 801128c:	2300      	movs	r3, #0
 801128e:	e9c4 3301 	strd	r3, r3, [r4, #4]
 8011292:	e759      	b.n	8011148 <rcl_wait_set_resize+0x88>
 8011294:	6828      	ldr	r0, [r5, #0]
 8011296:	9301      	str	r3, [sp, #4]
 8011298:	4651      	mov	r1, sl
 801129a:	47d8      	blx	fp
 801129c:	9b01      	ldr	r3, [sp, #4]
 801129e:	e9c5 3300 	strd	r3, r3, [r5]
 80112a2:	200a      	movs	r0, #10
 80112a4:	b003      	add	sp, #12
 80112a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80112aa:	00b4      	lsls	r4, r6, #2
 80112ac:	68a8      	ldr	r0, [r5, #8]
 80112ae:	464a      	mov	r2, r9
 80112b0:	4621      	mov	r1, r4
 80112b2:	4798      	blx	r3
 80112b4:	60a8      	str	r0, [r5, #8]
 80112b6:	2800      	cmp	r0, #0
 80112b8:	d0f3      	beq.n	80112a2 <rcl_wait_set_resize+0x1e2>
 80112ba:	4622      	mov	r2, r4
 80112bc:	4641      	mov	r1, r8
 80112be:	f004 faaf 	bl	8015820 <memset>
 80112c2:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 80112c4:	60ee      	str	r6, [r5, #12]
 80112c6:	f04f 0800 	mov.w	r8, #0
 80112ca:	19f6      	adds	r6, r6, r7
 80112cc:	f8d4 9058 	ldr.w	r9, [r4, #88]	@ 0x58
 80112d0:	f8c4 8010 	str.w	r8, [r4, #16]
 80112d4:	f43f af54 	beq.w	8011180 <rcl_wait_set_resize+0xc0>
 80112d8:	00b6      	lsls	r6, r6, #2
 80112da:	464a      	mov	r2, r9
 80112dc:	6d23      	ldr	r3, [r4, #80]	@ 0x50
 80112de:	6960      	ldr	r0, [r4, #20]
 80112e0:	4631      	mov	r1, r6
 80112e2:	4798      	blx	r3
 80112e4:	4681      	mov	r9, r0
 80112e6:	6160      	str	r0, [r4, #20]
 80112e8:	2800      	cmp	r0, #0
 80112ea:	d076      	beq.n	80113da <rcl_wait_set_resize+0x31a>
 80112ec:	4632      	mov	r2, r6
 80112ee:	4641      	mov	r1, r8
 80112f0:	f004 fa96 	bl	8015820 <memset>
 80112f4:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 80112f6:	f8d4 9058 	ldr.w	r9, [r4, #88]	@ 0x58
 80112fa:	e74a      	b.n	8011192 <rcl_wait_set_resize+0xd2>
 80112fc:	00bc      	lsls	r4, r7, #2
 80112fe:	6928      	ldr	r0, [r5, #16]
 8011300:	464a      	mov	r2, r9
 8011302:	4621      	mov	r1, r4
 8011304:	47c0      	blx	r8
 8011306:	6128      	str	r0, [r5, #16]
 8011308:	2800      	cmp	r0, #0
 801130a:	d0ca      	beq.n	80112a2 <rcl_wait_set_resize+0x1e2>
 801130c:	4622      	mov	r2, r4
 801130e:	4631      	mov	r1, r6
 8011310:	f004 fa86 	bl	8015820 <memset>
 8011314:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 8011316:	616f      	str	r7, [r5, #20]
 8011318:	e9d4 a813 	ldrd	sl, r8, [r4, #76]	@ 0x4c
 801131c:	f8d4 9058 	ldr.w	r9, [r4, #88]	@ 0x58
 8011320:	e749      	b.n	80111b6 <rcl_wait_set_resize+0xf6>
 8011322:	009c      	lsls	r4, r3, #2
 8011324:	69a8      	ldr	r0, [r5, #24]
 8011326:	464a      	mov	r2, r9
 8011328:	4621      	mov	r1, r4
 801132a:	47c0      	blx	r8
 801132c:	61a8      	str	r0, [r5, #24]
 801132e:	2800      	cmp	r0, #0
 8011330:	d0b7      	beq.n	80112a2 <rcl_wait_set_resize+0x1e2>
 8011332:	4622      	mov	r2, r4
 8011334:	4631      	mov	r1, r6
 8011336:	f004 fa73 	bl	8015820 <memset>
 801133a:	6b2f      	ldr	r7, [r5, #48]	@ 0x30
 801133c:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801133e:	61eb      	str	r3, [r5, #28]
 8011340:	6a38      	ldr	r0, [r7, #32]
 8011342:	61fe      	str	r6, [r7, #28]
 8011344:	464a      	mov	r2, r9
 8011346:	4621      	mov	r1, r4
 8011348:	47c0      	blx	r8
 801134a:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 801134c:	6238      	str	r0, [r7, #32]
 801134e:	6a1f      	ldr	r7, [r3, #32]
 8011350:	2f00      	cmp	r7, #0
 8011352:	d054      	beq.n	80113fe <rcl_wait_set_resize+0x33e>
 8011354:	4622      	mov	r2, r4
 8011356:	4631      	mov	r1, r6
 8011358:	4638      	mov	r0, r7
 801135a:	f004 fa61 	bl	8015820 <memset>
 801135e:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 8011360:	e73f      	b.n	80111e2 <rcl_wait_set_resize+0x122>
 8011362:	6a28      	ldr	r0, [r5, #32]
 8011364:	b120      	cbz	r0, 8011370 <rcl_wait_set_resize+0x2b0>
 8011366:	4639      	mov	r1, r7
 8011368:	47c0      	blx	r8
 801136a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801136c:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 801136e:	622b      	str	r3, [r5, #32]
 8011370:	6ae0      	ldr	r0, [r4, #44]	@ 0x2c
 8011372:	2800      	cmp	r0, #0
 8011374:	f43f af60 	beq.w	8011238 <rcl_wait_set_resize+0x178>
 8011378:	4639      	mov	r1, r7
 801137a:	47c0      	blx	r8
 801137c:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 801137e:	2300      	movs	r3, #0
 8011380:	e9c4 330a 	strd	r3, r3, [r4, #40]	@ 0x28
 8011384:	e758      	b.n	8011238 <rcl_wait_set_resize+0x178>
 8011386:	009c      	lsls	r4, r3, #2
 8011388:	6aa8      	ldr	r0, [r5, #40]	@ 0x28
 801138a:	463a      	mov	r2, r7
 801138c:	4621      	mov	r1, r4
 801138e:	47c8      	blx	r9
 8011390:	62a8      	str	r0, [r5, #40]	@ 0x28
 8011392:	2800      	cmp	r0, #0
 8011394:	d085      	beq.n	80112a2 <rcl_wait_set_resize+0x1e2>
 8011396:	4622      	mov	r2, r4
 8011398:	4631      	mov	r1, r6
 801139a:	f004 fa41 	bl	8015820 <memset>
 801139e:	f8d5 a030 	ldr.w	sl, [r5, #48]	@ 0x30
 80113a2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80113a4:	62eb      	str	r3, [r5, #44]	@ 0x2c
 80113a6:	f8da 0038 	ldr.w	r0, [sl, #56]	@ 0x38
 80113aa:	f8ca 6034 	str.w	r6, [sl, #52]	@ 0x34
 80113ae:	463a      	mov	r2, r7
 80113b0:	4621      	mov	r1, r4
 80113b2:	47c8      	blx	r9
 80113b4:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 80113b6:	f8ca 0038 	str.w	r0, [sl, #56]	@ 0x38
 80113ba:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80113bc:	b36b      	cbz	r3, 801141a <rcl_wait_set_resize+0x35a>
 80113be:	4622      	mov	r2, r4
 80113c0:	4631      	mov	r1, r6
 80113c2:	4618      	mov	r0, r3
 80113c4:	f004 fa2c 	bl	8015820 <memset>
 80113c8:	4630      	mov	r0, r6
 80113ca:	b003      	add	sp, #12
 80113cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80113d0:	200b      	movs	r0, #11
 80113d2:	4770      	bx	lr
 80113d4:	f44f 7061 	mov.w	r0, #900	@ 0x384
 80113d8:	e764      	b.n	80112a4 <rcl_wait_set_resize+0x1e4>
 80113da:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 80113dc:	68a8      	ldr	r0, [r5, #8]
 80113de:	6d99      	ldr	r1, [r3, #88]	@ 0x58
 80113e0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80113e2:	4798      	blx	r3
 80113e4:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 80113e6:	6928      	ldr	r0, [r5, #16]
 80113e8:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80113ea:	6d99      	ldr	r1, [r3, #88]	@ 0x58
 80113ec:	f8c5 900c 	str.w	r9, [r5, #12]
 80113f0:	f8c5 9008 	str.w	r9, [r5, #8]
 80113f4:	4790      	blx	r2
 80113f6:	e9c5 9904 	strd	r9, r9, [r5, #16]
 80113fa:	200a      	movs	r0, #10
 80113fc:	e752      	b.n	80112a4 <rcl_wait_set_resize+0x1e4>
 80113fe:	69a8      	ldr	r0, [r5, #24]
 8011400:	4649      	mov	r1, r9
 8011402:	47d0      	blx	sl
 8011404:	e9c5 7706 	strd	r7, r7, [r5, #24]
 8011408:	200a      	movs	r0, #10
 801140a:	e74b      	b.n	80112a4 <rcl_wait_set_resize+0x1e4>
 801140c:	6a28      	ldr	r0, [r5, #32]
 801140e:	4639      	mov	r1, r7
 8011410:	47c0      	blx	r8
 8011412:	e9c5 4408 	strd	r4, r4, [r5, #32]
 8011416:	200a      	movs	r0, #10
 8011418:	e744      	b.n	80112a4 <rcl_wait_set_resize+0x1e4>
 801141a:	6aa8      	ldr	r0, [r5, #40]	@ 0x28
 801141c:	9301      	str	r3, [sp, #4]
 801141e:	4639      	mov	r1, r7
 8011420:	47c0      	blx	r8
 8011422:	9b01      	ldr	r3, [sp, #4]
 8011424:	200a      	movs	r0, #10
 8011426:	e9c5 330a 	strd	r3, r3, [r5, #40]	@ 0x28
 801142a:	e73b      	b.n	80112a4 <rcl_wait_set_resize+0x1e4>

0801142c <rcl_wait_set_init>:
 801142c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011430:	b084      	sub	sp, #16
 8011432:	4604      	mov	r4, r0
 8011434:	a810      	add	r0, sp, #64	@ 0x40
 8011436:	f8dd a03c 	ldr.w	sl, [sp, #60]	@ 0x3c
 801143a:	460f      	mov	r7, r1
 801143c:	4690      	mov	r8, r2
 801143e:	4699      	mov	r9, r3
 8011440:	f7f8 ff58 	bl	800a2f4 <rcutils_allocator_is_valid>
 8011444:	2800      	cmp	r0, #0
 8011446:	d06b      	beq.n	8011520 <rcl_wait_set_init+0xf4>
 8011448:	2c00      	cmp	r4, #0
 801144a:	d069      	beq.n	8011520 <rcl_wait_set_init+0xf4>
 801144c:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 801144e:	b125      	cbz	r5, 801145a <rcl_wait_set_init+0x2e>
 8011450:	2564      	movs	r5, #100	@ 0x64
 8011452:	4628      	mov	r0, r5
 8011454:	b004      	add	sp, #16
 8011456:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801145a:	f1ba 0f00 	cmp.w	sl, #0
 801145e:	d05f      	beq.n	8011520 <rcl_wait_set_init+0xf4>
 8011460:	4650      	mov	r0, sl
 8011462:	f7fe fc3d 	bl	800fce0 <rcl_context_is_valid>
 8011466:	2800      	cmp	r0, #0
 8011468:	d067      	beq.n	801153a <rcl_wait_set_init+0x10e>
 801146a:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801146c:	9914      	ldr	r1, [sp, #80]	@ 0x50
 801146e:	205c      	movs	r0, #92	@ 0x5c
 8011470:	4798      	blx	r3
 8011472:	6320      	str	r0, [r4, #48]	@ 0x30
 8011474:	2800      	cmp	r0, #0
 8011476:	d062      	beq.n	801153e <rcl_wait_set_init+0x112>
 8011478:	4629      	mov	r1, r5
 801147a:	225c      	movs	r2, #92	@ 0x5c
 801147c:	f004 f9d0 	bl	8015820 <memset>
 8011480:	e9dd 320d 	ldrd	r3, r2, [sp, #52]	@ 0x34
 8011484:	eb03 0e02 	add.w	lr, r3, r2
 8011488:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801148a:	6b26      	ldr	r6, [r4, #48]	@ 0x30
 801148c:	f10d 0c40 	add.w	ip, sp, #64	@ 0x40
 8011490:	449e      	add	lr, r3
 8011492:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8011496:	e9c6 5501 	strd	r5, r5, [r6, #4]
 801149a:	e9c6 5504 	strd	r5, r5, [r6, #16]
 801149e:	e9c6 5507 	strd	r5, r5, [r6, #28]
 80114a2:	e9c6 550a 	strd	r5, r5, [r6, #40]	@ 0x28
 80114a6:	e9c6 550d 	strd	r5, r5, [r6, #52]	@ 0x34
 80114aa:	f106 0548 	add.w	r5, r6, #72	@ 0x48
 80114ae:	f8c6 a044 	str.w	sl, [r6, #68]	@ 0x44
 80114b2:	f8da a000 	ldr.w	sl, [sl]
 80114b6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80114b8:	44c6      	add	lr, r8
 80114ba:	f8dc 3000 	ldr.w	r3, [ip]
 80114be:	602b      	str	r3, [r5, #0]
 80114c0:	eb0e 0147 	add.w	r1, lr, r7, lsl #1
 80114c4:	f10a 0028 	add.w	r0, sl, #40	@ 0x28
 80114c8:	f002 fa1c 	bl	8013904 <rmw_create_wait_set>
 80114cc:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 80114ce:	63f0      	str	r0, [r6, #60]	@ 0x3c
 80114d0:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 80114d2:	b350      	cbz	r0, 801152a <rcl_wait_set_init+0xfe>
 80114d4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80114d6:	9302      	str	r3, [sp, #8]
 80114d8:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80114da:	9301      	str	r3, [sp, #4]
 80114dc:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80114de:	9300      	str	r3, [sp, #0]
 80114e0:	4642      	mov	r2, r8
 80114e2:	464b      	mov	r3, r9
 80114e4:	4639      	mov	r1, r7
 80114e6:	4620      	mov	r0, r4
 80114e8:	f7ff fdea 	bl	80110c0 <rcl_wait_set_resize>
 80114ec:	4605      	mov	r5, r0
 80114ee:	2800      	cmp	r0, #0
 80114f0:	d0af      	beq.n	8011452 <rcl_wait_set_init+0x26>
 80114f2:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 80114f4:	bb2b      	cbnz	r3, 8011542 <rcl_wait_set_init+0x116>
 80114f6:	2600      	movs	r6, #0
 80114f8:	e9cd 6601 	strd	r6, r6, [sp, #4]
 80114fc:	9600      	str	r6, [sp, #0]
 80114fe:	4633      	mov	r3, r6
 8011500:	4632      	mov	r2, r6
 8011502:	4631      	mov	r1, r6
 8011504:	4620      	mov	r0, r4
 8011506:	f7ff fddb 	bl	80110c0 <rcl_wait_set_resize>
 801150a:	6b20      	ldr	r0, [r4, #48]	@ 0x30
 801150c:	2800      	cmp	r0, #0
 801150e:	d0a0      	beq.n	8011452 <rcl_wait_set_init+0x26>
 8011510:	6cc3      	ldr	r3, [r0, #76]	@ 0x4c
 8011512:	6d81      	ldr	r1, [r0, #88]	@ 0x58
 8011514:	4798      	blx	r3
 8011516:	4628      	mov	r0, r5
 8011518:	6326      	str	r6, [r4, #48]	@ 0x30
 801151a:	b004      	add	sp, #16
 801151c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011520:	250b      	movs	r5, #11
 8011522:	4628      	mov	r0, r5
 8011524:	b004      	add	sp, #16
 8011526:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801152a:	2501      	movs	r5, #1
 801152c:	f002 f9f4 	bl	8013918 <rmw_destroy_wait_set>
 8011530:	2800      	cmp	r0, #0
 8011532:	bf18      	it	ne
 8011534:	f44f 7561 	movne.w	r5, #900	@ 0x384
 8011538:	e7dd      	b.n	80114f6 <rcl_wait_set_init+0xca>
 801153a:	2565      	movs	r5, #101	@ 0x65
 801153c:	e789      	b.n	8011452 <rcl_wait_set_init+0x26>
 801153e:	250a      	movs	r5, #10
 8011540:	e787      	b.n	8011452 <rcl_wait_set_init+0x26>
 8011542:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 8011544:	e7f2      	b.n	801152c <rcl_wait_set_init+0x100>
 8011546:	bf00      	nop

08011548 <rcl_wait_set_add_guard_condition>:
 8011548:	b318      	cbz	r0, 8011592 <rcl_wait_set_add_guard_condition+0x4a>
 801154a:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 801154c:	b570      	push	{r4, r5, r6, lr}
 801154e:	4604      	mov	r4, r0
 8011550:	b30b      	cbz	r3, 8011596 <rcl_wait_set_add_guard_condition+0x4e>
 8011552:	b319      	cbz	r1, 801159c <rcl_wait_set_add_guard_condition+0x54>
 8011554:	68dd      	ldr	r5, [r3, #12]
 8011556:	68c0      	ldr	r0, [r0, #12]
 8011558:	4285      	cmp	r5, r0
 801155a:	d217      	bcs.n	801158c <rcl_wait_set_add_guard_condition+0x44>
 801155c:	68a0      	ldr	r0, [r4, #8]
 801155e:	1c6e      	adds	r6, r5, #1
 8011560:	60de      	str	r6, [r3, #12]
 8011562:	f840 1025 	str.w	r1, [r0, r5, lsl #2]
 8011566:	b102      	cbz	r2, 801156a <rcl_wait_set_add_guard_condition+0x22>
 8011568:	6015      	str	r5, [r2, #0]
 801156a:	4608      	mov	r0, r1
 801156c:	f003 fb82 	bl	8014c74 <rcl_guard_condition_get_rmw_handle>
 8011570:	b150      	cbz	r0, 8011588 <rcl_wait_set_add_guard_condition+0x40>
 8011572:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8011574:	6842      	ldr	r2, [r0, #4]
 8011576:	695b      	ldr	r3, [r3, #20]
 8011578:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 801157c:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 801157e:	6913      	ldr	r3, [r2, #16]
 8011580:	3301      	adds	r3, #1
 8011582:	2000      	movs	r0, #0
 8011584:	6113      	str	r3, [r2, #16]
 8011586:	bd70      	pop	{r4, r5, r6, pc}
 8011588:	2001      	movs	r0, #1
 801158a:	bd70      	pop	{r4, r5, r6, pc}
 801158c:	f240 3086 	movw	r0, #902	@ 0x386
 8011590:	bd70      	pop	{r4, r5, r6, pc}
 8011592:	200b      	movs	r0, #11
 8011594:	4770      	bx	lr
 8011596:	f44f 7061 	mov.w	r0, #900	@ 0x384
 801159a:	bd70      	pop	{r4, r5, r6, pc}
 801159c:	200b      	movs	r0, #11
 801159e:	bd70      	pop	{r4, r5, r6, pc}

080115a0 <rcl_wait_set_add_timer>:
 80115a0:	b328      	cbz	r0, 80115ee <rcl_wait_set_add_timer+0x4e>
 80115a2:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 80115a4:	b570      	push	{r4, r5, r6, lr}
 80115a6:	4604      	mov	r4, r0
 80115a8:	b31b      	cbz	r3, 80115f2 <rcl_wait_set_add_timer+0x52>
 80115aa:	b329      	cbz	r1, 80115f8 <rcl_wait_set_add_timer+0x58>
 80115ac:	6c18      	ldr	r0, [r3, #64]	@ 0x40
 80115ae:	6965      	ldr	r5, [r4, #20]
 80115b0:	42a8      	cmp	r0, r5
 80115b2:	d219      	bcs.n	80115e8 <rcl_wait_set_add_timer+0x48>
 80115b4:	6925      	ldr	r5, [r4, #16]
 80115b6:	1c46      	adds	r6, r0, #1
 80115b8:	641e      	str	r6, [r3, #64]	@ 0x40
 80115ba:	f845 1020 	str.w	r1, [r5, r0, lsl #2]
 80115be:	b102      	cbz	r2, 80115c2 <rcl_wait_set_add_timer+0x22>
 80115c0:	6010      	str	r0, [r2, #0]
 80115c2:	4608      	mov	r0, r1
 80115c4:	f7ff fba6 	bl	8010d14 <rcl_timer_get_guard_condition>
 80115c8:	b168      	cbz	r0, 80115e6 <rcl_wait_set_add_timer+0x46>
 80115ca:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 80115cc:	68e3      	ldr	r3, [r4, #12]
 80115ce:	6c15      	ldr	r5, [r2, #64]	@ 0x40
 80115d0:	3b01      	subs	r3, #1
 80115d2:	441d      	add	r5, r3
 80115d4:	f003 fb4e 	bl	8014c74 <rcl_guard_condition_get_rmw_handle>
 80115d8:	b180      	cbz	r0, 80115fc <rcl_wait_set_add_timer+0x5c>
 80115da:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 80115dc:	6842      	ldr	r2, [r0, #4]
 80115de:	695b      	ldr	r3, [r3, #20]
 80115e0:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80115e4:	2000      	movs	r0, #0
 80115e6:	bd70      	pop	{r4, r5, r6, pc}
 80115e8:	f240 3086 	movw	r0, #902	@ 0x386
 80115ec:	bd70      	pop	{r4, r5, r6, pc}
 80115ee:	200b      	movs	r0, #11
 80115f0:	4770      	bx	lr
 80115f2:	f44f 7061 	mov.w	r0, #900	@ 0x384
 80115f6:	bd70      	pop	{r4, r5, r6, pc}
 80115f8:	200b      	movs	r0, #11
 80115fa:	bd70      	pop	{r4, r5, r6, pc}
 80115fc:	2001      	movs	r0, #1
 80115fe:	bd70      	pop	{r4, r5, r6, pc}

08011600 <rcl_wait_set_add_client>:
 8011600:	b318      	cbz	r0, 801164a <rcl_wait_set_add_client+0x4a>
 8011602:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 8011604:	b570      	push	{r4, r5, r6, lr}
 8011606:	4604      	mov	r4, r0
 8011608:	b30b      	cbz	r3, 801164e <rcl_wait_set_add_client+0x4e>
 801160a:	b319      	cbz	r1, 8011654 <rcl_wait_set_add_client+0x54>
 801160c:	699d      	ldr	r5, [r3, #24]
 801160e:	69c0      	ldr	r0, [r0, #28]
 8011610:	4285      	cmp	r5, r0
 8011612:	d217      	bcs.n	8011644 <rcl_wait_set_add_client+0x44>
 8011614:	69a0      	ldr	r0, [r4, #24]
 8011616:	1c6e      	adds	r6, r5, #1
 8011618:	619e      	str	r6, [r3, #24]
 801161a:	f840 1025 	str.w	r1, [r0, r5, lsl #2]
 801161e:	b102      	cbz	r2, 8011622 <rcl_wait_set_add_client+0x22>
 8011620:	6015      	str	r5, [r2, #0]
 8011622:	4608      	mov	r0, r1
 8011624:	f7fe faae 	bl	800fb84 <rcl_client_get_rmw_handle>
 8011628:	b150      	cbz	r0, 8011640 <rcl_wait_set_add_client+0x40>
 801162a:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 801162c:	6842      	ldr	r2, [r0, #4]
 801162e:	6a1b      	ldr	r3, [r3, #32]
 8011630:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8011634:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 8011636:	69d3      	ldr	r3, [r2, #28]
 8011638:	3301      	adds	r3, #1
 801163a:	2000      	movs	r0, #0
 801163c:	61d3      	str	r3, [r2, #28]
 801163e:	bd70      	pop	{r4, r5, r6, pc}
 8011640:	2001      	movs	r0, #1
 8011642:	bd70      	pop	{r4, r5, r6, pc}
 8011644:	f240 3086 	movw	r0, #902	@ 0x386
 8011648:	bd70      	pop	{r4, r5, r6, pc}
 801164a:	200b      	movs	r0, #11
 801164c:	4770      	bx	lr
 801164e:	f44f 7061 	mov.w	r0, #900	@ 0x384
 8011652:	bd70      	pop	{r4, r5, r6, pc}
 8011654:	200b      	movs	r0, #11
 8011656:	bd70      	pop	{r4, r5, r6, pc}

08011658 <rcl_wait_set_add_service>:
 8011658:	b318      	cbz	r0, 80116a2 <rcl_wait_set_add_service+0x4a>
 801165a:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 801165c:	b570      	push	{r4, r5, r6, lr}
 801165e:	4604      	mov	r4, r0
 8011660:	b30b      	cbz	r3, 80116a6 <rcl_wait_set_add_service+0x4e>
 8011662:	b319      	cbz	r1, 80116ac <rcl_wait_set_add_service+0x54>
 8011664:	6a5d      	ldr	r5, [r3, #36]	@ 0x24
 8011666:	6a40      	ldr	r0, [r0, #36]	@ 0x24
 8011668:	4285      	cmp	r5, r0
 801166a:	d217      	bcs.n	801169c <rcl_wait_set_add_service+0x44>
 801166c:	6a20      	ldr	r0, [r4, #32]
 801166e:	1c6e      	adds	r6, r5, #1
 8011670:	625e      	str	r6, [r3, #36]	@ 0x24
 8011672:	f840 1025 	str.w	r1, [r0, r5, lsl #2]
 8011676:	b102      	cbz	r2, 801167a <rcl_wait_set_add_service+0x22>
 8011678:	6015      	str	r5, [r2, #0]
 801167a:	4608      	mov	r0, r1
 801167c:	f7ff f804 	bl	8010688 <rcl_service_get_rmw_handle>
 8011680:	b150      	cbz	r0, 8011698 <rcl_wait_set_add_service+0x40>
 8011682:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8011684:	6842      	ldr	r2, [r0, #4]
 8011686:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8011688:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 801168c:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 801168e:	6a93      	ldr	r3, [r2, #40]	@ 0x28
 8011690:	3301      	adds	r3, #1
 8011692:	2000      	movs	r0, #0
 8011694:	6293      	str	r3, [r2, #40]	@ 0x28
 8011696:	bd70      	pop	{r4, r5, r6, pc}
 8011698:	2001      	movs	r0, #1
 801169a:	bd70      	pop	{r4, r5, r6, pc}
 801169c:	f240 3086 	movw	r0, #902	@ 0x386
 80116a0:	bd70      	pop	{r4, r5, r6, pc}
 80116a2:	200b      	movs	r0, #11
 80116a4:	4770      	bx	lr
 80116a6:	f44f 7061 	mov.w	r0, #900	@ 0x384
 80116aa:	bd70      	pop	{r4, r5, r6, pc}
 80116ac:	200b      	movs	r0, #11
 80116ae:	bd70      	pop	{r4, r5, r6, pc}

080116b0 <rcl_wait>:
 80116b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80116b4:	ed2d 8b02 	vpush	{d8}
 80116b8:	b08d      	sub	sp, #52	@ 0x34
 80116ba:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80116be:	2800      	cmp	r0, #0
 80116c0:	f000 8143 	beq.w	801194a <rcl_wait+0x29a>
 80116c4:	6b06      	ldr	r6, [r0, #48]	@ 0x30
 80116c6:	4605      	mov	r5, r0
 80116c8:	2e00      	cmp	r6, #0
 80116ca:	f000 8112 	beq.w	80118f2 <rcl_wait+0x242>
 80116ce:	6843      	ldr	r3, [r0, #4]
 80116d0:	b983      	cbnz	r3, 80116f4 <rcl_wait+0x44>
 80116d2:	68eb      	ldr	r3, [r5, #12]
 80116d4:	b973      	cbnz	r3, 80116f4 <rcl_wait+0x44>
 80116d6:	696b      	ldr	r3, [r5, #20]
 80116d8:	b963      	cbnz	r3, 80116f4 <rcl_wait+0x44>
 80116da:	69eb      	ldr	r3, [r5, #28]
 80116dc:	b953      	cbnz	r3, 80116f4 <rcl_wait+0x44>
 80116de:	6a6b      	ldr	r3, [r5, #36]	@ 0x24
 80116e0:	b943      	cbnz	r3, 80116f4 <rcl_wait+0x44>
 80116e2:	6aeb      	ldr	r3, [r5, #44]	@ 0x2c
 80116e4:	b933      	cbnz	r3, 80116f4 <rcl_wait+0x44>
 80116e6:	f240 3085 	movw	r0, #901	@ 0x385
 80116ea:	b00d      	add	sp, #52	@ 0x34
 80116ec:	ecbd 8b02 	vpop	{d8}
 80116f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80116f4:	9b04      	ldr	r3, [sp, #16]
 80116f6:	6c32      	ldr	r2, [r6, #64]	@ 0x40
 80116f8:	2b01      	cmp	r3, #1
 80116fa:	9b05      	ldr	r3, [sp, #20]
 80116fc:	f173 0300 	sbcs.w	r3, r3, #0
 8011700:	f2c0 80f0 	blt.w	80118e4 <rcl_wait+0x234>
 8011704:	e9dd 8704 	ldrd	r8, r7, [sp, #16]
 8011708:	4643      	mov	r3, r8
 801170a:	2a00      	cmp	r2, #0
 801170c:	f000 8133 	beq.w	8011976 <rcl_wait+0x2c6>
 8011710:	2400      	movs	r4, #0
 8011712:	4613      	mov	r3, r2
 8011714:	ed9f 8b9c 	vldr	d8, [pc, #624]	@ 8011988 <rcl_wait+0x2d8>
 8011718:	46a2      	mov	sl, r4
 801171a:	46a3      	mov	fp, r4
 801171c:	f240 3921 	movw	r9, #801	@ 0x321
 8011720:	4632      	mov	r2, r6
 8011722:	e014      	b.n	801174e <rcl_wait+0x9e>
 8011724:	2800      	cmp	r0, #0
 8011726:	d1e0      	bne.n	80116ea <rcl_wait+0x3a>
 8011728:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 801172c:	4542      	cmp	r2, r8
 801172e:	eb73 0107 	sbcs.w	r1, r3, r7
 8011732:	da03      	bge.n	801173c <rcl_wait+0x8c>
 8011734:	4690      	mov	r8, r2
 8011736:	461f      	mov	r7, r3
 8011738:	f04f 0b01 	mov.w	fp, #1
 801173c:	6b2a      	ldr	r2, [r5, #48]	@ 0x30
 801173e:	6c13      	ldr	r3, [r2, #64]	@ 0x40
 8011740:	3401      	adds	r4, #1
 8011742:	f14a 0a00 	adc.w	sl, sl, #0
 8011746:	429c      	cmp	r4, r3
 8011748:	f17a 0100 	sbcs.w	r1, sl, #0
 801174c:	d228      	bcs.n	80117a0 <rcl_wait+0xf0>
 801174e:	6928      	ldr	r0, [r5, #16]
 8011750:	f850 0024 	ldr.w	r0, [r0, r4, lsl #2]
 8011754:	a908      	add	r1, sp, #32
 8011756:	00a6      	lsls	r6, r4, #2
 8011758:	2800      	cmp	r0, #0
 801175a:	d0f1      	beq.n	8011740 <rcl_wait+0x90>
 801175c:	68eb      	ldr	r3, [r5, #12]
 801175e:	f8d2 c014 	ldr.w	ip, [r2, #20]
 8011762:	4423      	add	r3, r4
 8011764:	f85c e023 	ldr.w	lr, [ip, r3, lsl #2]
 8011768:	f1be 0f00 	cmp.w	lr, #0
 801176c:	d006      	beq.n	801177c <rcl_wait+0xcc>
 801176e:	6913      	ldr	r3, [r2, #16]
 8011770:	f84c e023 	str.w	lr, [ip, r3, lsl #2]
 8011774:	3301      	adds	r3, #1
 8011776:	6113      	str	r3, [r2, #16]
 8011778:	692b      	ldr	r3, [r5, #16]
 801177a:	5998      	ldr	r0, [r3, r6]
 801177c:	ed8d 8b08 	vstr	d8, [sp, #32]
 8011780:	f7ff fa96 	bl	8010cb0 <rcl_timer_get_time_until_next_call>
 8011784:	4548      	cmp	r0, r9
 8011786:	d1cd      	bne.n	8011724 <rcl_wait+0x74>
 8011788:	692b      	ldr	r3, [r5, #16]
 801178a:	6b2a      	ldr	r2, [r5, #48]	@ 0x30
 801178c:	2100      	movs	r1, #0
 801178e:	5199      	str	r1, [r3, r6]
 8011790:	6c13      	ldr	r3, [r2, #64]	@ 0x40
 8011792:	3401      	adds	r4, #1
 8011794:	f14a 0a00 	adc.w	sl, sl, #0
 8011798:	429c      	cmp	r4, r3
 801179a:	f17a 0100 	sbcs.w	r1, sl, #0
 801179e:	d3d6      	bcc.n	801174e <rcl_wait+0x9e>
 80117a0:	4616      	mov	r6, r2
 80117a2:	e9dd 3204 	ldrd	r3, r2, [sp, #16]
 80117a6:	4313      	orrs	r3, r2
 80117a8:	46d9      	mov	r9, fp
 80117aa:	f040 80a9 	bne.w	8011900 <rcl_wait+0x250>
 80117ae:	2300      	movs	r3, #0
 80117b0:	2200      	movs	r2, #0
 80117b2:	e9cd 2308 	strd	r2, r3, [sp, #32]
 80117b6:	e9cd 230a 	strd	r2, r3, [sp, #40]	@ 0x28
 80117ba:	ab08      	add	r3, sp, #32
 80117bc:	9302      	str	r3, [sp, #8]
 80117be:	6bf2      	ldr	r2, [r6, #60]	@ 0x3c
 80117c0:	f106 0334 	add.w	r3, r6, #52	@ 0x34
 80117c4:	e9cd 3200 	strd	r3, r2, [sp]
 80117c8:	f106 0110 	add.w	r1, r6, #16
 80117cc:	f106 031c 	add.w	r3, r6, #28
 80117d0:	f106 0228 	add.w	r2, r6, #40	@ 0x28
 80117d4:	1d30      	adds	r0, r6, #4
 80117d6:	f001 ff1d 	bl	8013614 <rmw_wait>
 80117da:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 80117dc:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80117de:	4680      	mov	r8, r0
 80117e0:	b1ca      	cbz	r2, 8011816 <rcl_wait+0x166>
 80117e2:	2400      	movs	r4, #0
 80117e4:	4627      	mov	r7, r4
 80117e6:	692a      	ldr	r2, [r5, #16]
 80117e8:	f852 0024 	ldr.w	r0, [r2, r4, lsl #2]
 80117ec:	f10d 011f 	add.w	r1, sp, #31
 80117f0:	00a6      	lsls	r6, r4, #2
 80117f2:	b160      	cbz	r0, 801180e <rcl_wait+0x15e>
 80117f4:	f88d 701f 	strb.w	r7, [sp, #31]
 80117f8:	f7ff fa20 	bl	8010c3c <rcl_timer_is_ready>
 80117fc:	2800      	cmp	r0, #0
 80117fe:	f47f af74 	bne.w	80116ea <rcl_wait+0x3a>
 8011802:	f89d 301f 	ldrb.w	r3, [sp, #31]
 8011806:	b90b      	cbnz	r3, 801180c <rcl_wait+0x15c>
 8011808:	692a      	ldr	r2, [r5, #16]
 801180a:	5193      	str	r3, [r2, r6]
 801180c:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 801180e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8011810:	3401      	adds	r4, #1
 8011812:	42a2      	cmp	r2, r4
 8011814:	d8e7      	bhi.n	80117e6 <rcl_wait+0x136>
 8011816:	f038 0002 	bics.w	r0, r8, #2
 801181a:	f040 8090 	bne.w	801193e <rcl_wait+0x28e>
 801181e:	686e      	ldr	r6, [r5, #4]
 8011820:	4602      	mov	r2, r0
 8011822:	b91e      	cbnz	r6, 801182c <rcl_wait+0x17c>
 8011824:	e00d      	b.n	8011842 <rcl_wait+0x192>
 8011826:	3201      	adds	r2, #1
 8011828:	42b2      	cmp	r2, r6
 801182a:	d00a      	beq.n	8011842 <rcl_wait+0x192>
 801182c:	6899      	ldr	r1, [r3, #8]
 801182e:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 8011832:	2900      	cmp	r1, #0
 8011834:	d1f7      	bne.n	8011826 <rcl_wait+0x176>
 8011836:	682c      	ldr	r4, [r5, #0]
 8011838:	f844 1022 	str.w	r1, [r4, r2, lsl #2]
 801183c:	3201      	adds	r2, #1
 801183e:	42b2      	cmp	r2, r6
 8011840:	d1f4      	bne.n	801182c <rcl_wait+0x17c>
 8011842:	68ee      	ldr	r6, [r5, #12]
 8011844:	2200      	movs	r2, #0
 8011846:	b91e      	cbnz	r6, 8011850 <rcl_wait+0x1a0>
 8011848:	e00d      	b.n	8011866 <rcl_wait+0x1b6>
 801184a:	3201      	adds	r2, #1
 801184c:	42b2      	cmp	r2, r6
 801184e:	d00a      	beq.n	8011866 <rcl_wait+0x1b6>
 8011850:	6959      	ldr	r1, [r3, #20]
 8011852:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 8011856:	2900      	cmp	r1, #0
 8011858:	d1f7      	bne.n	801184a <rcl_wait+0x19a>
 801185a:	68ac      	ldr	r4, [r5, #8]
 801185c:	f844 1022 	str.w	r1, [r4, r2, lsl #2]
 8011860:	3201      	adds	r2, #1
 8011862:	42b2      	cmp	r2, r6
 8011864:	d1f4      	bne.n	8011850 <rcl_wait+0x1a0>
 8011866:	69ee      	ldr	r6, [r5, #28]
 8011868:	2200      	movs	r2, #0
 801186a:	b91e      	cbnz	r6, 8011874 <rcl_wait+0x1c4>
 801186c:	e00d      	b.n	801188a <rcl_wait+0x1da>
 801186e:	3201      	adds	r2, #1
 8011870:	42b2      	cmp	r2, r6
 8011872:	d00a      	beq.n	801188a <rcl_wait+0x1da>
 8011874:	6a19      	ldr	r1, [r3, #32]
 8011876:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 801187a:	2900      	cmp	r1, #0
 801187c:	d1f7      	bne.n	801186e <rcl_wait+0x1be>
 801187e:	69ac      	ldr	r4, [r5, #24]
 8011880:	f844 1022 	str.w	r1, [r4, r2, lsl #2]
 8011884:	3201      	adds	r2, #1
 8011886:	42b2      	cmp	r2, r6
 8011888:	d1f4      	bne.n	8011874 <rcl_wait+0x1c4>
 801188a:	6a6e      	ldr	r6, [r5, #36]	@ 0x24
 801188c:	2200      	movs	r2, #0
 801188e:	b91e      	cbnz	r6, 8011898 <rcl_wait+0x1e8>
 8011890:	e00d      	b.n	80118ae <rcl_wait+0x1fe>
 8011892:	3201      	adds	r2, #1
 8011894:	4296      	cmp	r6, r2
 8011896:	d00a      	beq.n	80118ae <rcl_wait+0x1fe>
 8011898:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 801189a:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 801189e:	2900      	cmp	r1, #0
 80118a0:	d1f7      	bne.n	8011892 <rcl_wait+0x1e2>
 80118a2:	6a2c      	ldr	r4, [r5, #32]
 80118a4:	f844 1022 	str.w	r1, [r4, r2, lsl #2]
 80118a8:	3201      	adds	r2, #1
 80118aa:	4296      	cmp	r6, r2
 80118ac:	d1f4      	bne.n	8011898 <rcl_wait+0x1e8>
 80118ae:	6aee      	ldr	r6, [r5, #44]	@ 0x2c
 80118b0:	2200      	movs	r2, #0
 80118b2:	b91e      	cbnz	r6, 80118bc <rcl_wait+0x20c>
 80118b4:	e00d      	b.n	80118d2 <rcl_wait+0x222>
 80118b6:	3201      	adds	r2, #1
 80118b8:	42b2      	cmp	r2, r6
 80118ba:	d00a      	beq.n	80118d2 <rcl_wait+0x222>
 80118bc:	6b99      	ldr	r1, [r3, #56]	@ 0x38
 80118be:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 80118c2:	2900      	cmp	r1, #0
 80118c4:	d1f7      	bne.n	80118b6 <rcl_wait+0x206>
 80118c6:	6aac      	ldr	r4, [r5, #40]	@ 0x28
 80118c8:	f844 1022 	str.w	r1, [r4, r2, lsl #2]
 80118cc:	3201      	adds	r2, #1
 80118ce:	42b2      	cmp	r2, r6
 80118d0:	d1f4      	bne.n	80118bc <rcl_wait+0x20c>
 80118d2:	f1b8 0f02 	cmp.w	r8, #2
 80118d6:	f47f af08 	bne.w	80116ea <rcl_wait+0x3a>
 80118da:	464b      	mov	r3, r9
 80118dc:	2b00      	cmp	r3, #0
 80118de:	bf08      	it	eq
 80118e0:	2002      	moveq	r0, #2
 80118e2:	e702      	b.n	80116ea <rcl_wait+0x3a>
 80118e4:	2a00      	cmp	r2, #0
 80118e6:	d03a      	beq.n	801195e <rcl_wait+0x2ae>
 80118e8:	f04f 38ff 	mov.w	r8, #4294967295	@ 0xffffffff
 80118ec:	f06f 4700 	mvn.w	r7, #2147483648	@ 0x80000000
 80118f0:	e70e      	b.n	8011710 <rcl_wait+0x60>
 80118f2:	f44f 7061 	mov.w	r0, #900	@ 0x384
 80118f6:	b00d      	add	sp, #52	@ 0x34
 80118f8:	ecbd 8b02 	vpop	{d8}
 80118fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011900:	9b04      	ldr	r3, [sp, #16]
 8011902:	2b01      	cmp	r3, #1
 8011904:	9b05      	ldr	r3, [sp, #20]
 8011906:	f173 0300 	sbcs.w	r3, r3, #0
 801190a:	db24      	blt.n	8011956 <rcl_wait+0x2a6>
 801190c:	2f00      	cmp	r7, #0
 801190e:	bfbc      	itt	lt
 8011910:	f04f 0800 	movlt.w	r8, #0
 8011914:	4647      	movlt	r7, r8
 8011916:	a31e      	add	r3, pc, #120	@ (adr r3, 8011990 <rcl_wait+0x2e0>)
 8011918:	e9d3 2300 	ldrd	r2, r3, [r3]
 801191c:	4640      	mov	r0, r8
 801191e:	4639      	mov	r1, r7
 8011920:	f7ef f904 	bl	8000b2c <__aeabi_ldivmod>
 8011924:	a31a      	add	r3, pc, #104	@ (adr r3, 8011990 <rcl_wait+0x2e0>)
 8011926:	e9d3 2300 	ldrd	r2, r3, [r3]
 801192a:	e9cd 0108 	strd	r0, r1, [sp, #32]
 801192e:	4640      	mov	r0, r8
 8011930:	4639      	mov	r1, r7
 8011932:	f7ef f8fb 	bl	8000b2c <__aeabi_ldivmod>
 8011936:	e9cd 230a 	strd	r2, r3, [sp, #40]	@ 0x28
 801193a:	ab08      	add	r3, sp, #32
 801193c:	e73e      	b.n	80117bc <rcl_wait+0x10c>
 801193e:	2001      	movs	r0, #1
 8011940:	b00d      	add	sp, #52	@ 0x34
 8011942:	ecbd 8b02 	vpop	{d8}
 8011946:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801194a:	200b      	movs	r0, #11
 801194c:	b00d      	add	sp, #52	@ 0x34
 801194e:	ecbd 8b02 	vpop	{d8}
 8011952:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011956:	465b      	mov	r3, fp
 8011958:	2b00      	cmp	r3, #0
 801195a:	d1d7      	bne.n	801190c <rcl_wait+0x25c>
 801195c:	e72e      	b.n	80117bc <rcl_wait+0x10c>
 801195e:	e9dd 3104 	ldrd	r3, r1, [sp, #16]
 8011962:	430b      	orrs	r3, r1
 8011964:	bf08      	it	eq
 8011966:	4691      	moveq	r9, r2
 8011968:	f43f af21 	beq.w	80117ae <rcl_wait+0xfe>
 801196c:	9b04      	ldr	r3, [sp, #16]
 801196e:	f04f 38ff 	mov.w	r8, #4294967295	@ 0xffffffff
 8011972:	f06f 4700 	mvn.w	r7, #2147483648	@ 0x80000000
 8011976:	2b01      	cmp	r3, #1
 8011978:	9b05      	ldr	r3, [sp, #20]
 801197a:	f173 0300 	sbcs.w	r3, r3, #0
 801197e:	f04f 0300 	mov.w	r3, #0
 8011982:	4699      	mov	r9, r3
 8011984:	dac2      	bge.n	801190c <rcl_wait+0x25c>
 8011986:	e719      	b.n	80117bc <rcl_wait+0x10c>
 8011988:	ffffffff 	.word	0xffffffff
 801198c:	7fffffff 	.word	0x7fffffff
 8011990:	3b9aca00 	.word	0x3b9aca00
 8011994:	00000000 	.word	0x00000000

08011998 <rcl_action_take_goal_response>:
 8011998:	2800      	cmp	r0, #0
 801199a:	d039      	beq.n	8011a10 <rcl_action_take_goal_response+0x78>
 801199c:	b570      	push	{r4, r5, r6, lr}
 801199e:	4604      	mov	r4, r0
 80119a0:	6800      	ldr	r0, [r0, #0]
 80119a2:	b380      	cbz	r0, 8011a06 <rcl_action_take_goal_response+0x6e>
 80119a4:	460d      	mov	r5, r1
 80119a6:	4616      	mov	r6, r2
 80119a8:	f7fe f972 	bl	800fc90 <rcl_client_is_valid>
 80119ac:	b330      	cbz	r0, 80119fc <rcl_action_take_goal_response+0x64>
 80119ae:	6820      	ldr	r0, [r4, #0]
 80119b0:	3004      	adds	r0, #4
 80119b2:	f7fe f96d 	bl	800fc90 <rcl_client_is_valid>
 80119b6:	b308      	cbz	r0, 80119fc <rcl_action_take_goal_response+0x64>
 80119b8:	6820      	ldr	r0, [r4, #0]
 80119ba:	3008      	adds	r0, #8
 80119bc:	f7fe f968 	bl	800fc90 <rcl_client_is_valid>
 80119c0:	b1e0      	cbz	r0, 80119fc <rcl_action_take_goal_response+0x64>
 80119c2:	6820      	ldr	r0, [r4, #0]
 80119c4:	300c      	adds	r0, #12
 80119c6:	f7ff f801 	bl	80109cc <rcl_subscription_is_valid>
 80119ca:	b1b8      	cbz	r0, 80119fc <rcl_action_take_goal_response+0x64>
 80119cc:	6820      	ldr	r0, [r4, #0]
 80119ce:	3010      	adds	r0, #16
 80119d0:	f7fe fffc 	bl	80109cc <rcl_subscription_is_valid>
 80119d4:	b190      	cbz	r0, 80119fc <rcl_action_take_goal_response+0x64>
 80119d6:	b1cd      	cbz	r5, 8011a0c <rcl_action_take_goal_response+0x74>
 80119d8:	b1c6      	cbz	r6, 8011a0c <rcl_action_take_goal_response+0x74>
 80119da:	6820      	ldr	r0, [r4, #0]
 80119dc:	4632      	mov	r2, r6
 80119de:	4629      	mov	r1, r5
 80119e0:	f7fe f90e 	bl	800fc00 <rcl_take_response>
 80119e4:	b148      	cbz	r0, 80119fa <rcl_action_take_goal_response+0x62>
 80119e6:	280a      	cmp	r0, #10
 80119e8:	d007      	beq.n	80119fa <rcl_action_take_goal_response+0x62>
 80119ea:	f240 12f5 	movw	r2, #501	@ 0x1f5
 80119ee:	f640 0337 	movw	r3, #2103	@ 0x837
 80119f2:	4290      	cmp	r0, r2
 80119f4:	bf0c      	ite	eq
 80119f6:	4618      	moveq	r0, r3
 80119f8:	2001      	movne	r0, #1
 80119fa:	bd70      	pop	{r4, r5, r6, pc}
 80119fc:	f7f8 fca0 	bl	800a340 <rcutils_reset_error>
 8011a00:	f640 0036 	movw	r0, #2102	@ 0x836
 8011a04:	bd70      	pop	{r4, r5, r6, pc}
 8011a06:	f640 0036 	movw	r0, #2102	@ 0x836
 8011a0a:	bd70      	pop	{r4, r5, r6, pc}
 8011a0c:	200b      	movs	r0, #11
 8011a0e:	bd70      	pop	{r4, r5, r6, pc}
 8011a10:	f640 0036 	movw	r0, #2102	@ 0x836
 8011a14:	4770      	bx	lr
 8011a16:	bf00      	nop

08011a18 <rcl_action_send_result_request>:
 8011a18:	b390      	cbz	r0, 8011a80 <rcl_action_send_result_request+0x68>
 8011a1a:	b570      	push	{r4, r5, r6, lr}
 8011a1c:	4604      	mov	r4, r0
 8011a1e:	6800      	ldr	r0, [r0, #0]
 8011a20:	b348      	cbz	r0, 8011a76 <rcl_action_send_result_request+0x5e>
 8011a22:	460d      	mov	r5, r1
 8011a24:	4616      	mov	r6, r2
 8011a26:	f7fe f933 	bl	800fc90 <rcl_client_is_valid>
 8011a2a:	b1f8      	cbz	r0, 8011a6c <rcl_action_send_result_request+0x54>
 8011a2c:	6820      	ldr	r0, [r4, #0]
 8011a2e:	3004      	adds	r0, #4
 8011a30:	f7fe f92e 	bl	800fc90 <rcl_client_is_valid>
 8011a34:	b1d0      	cbz	r0, 8011a6c <rcl_action_send_result_request+0x54>
 8011a36:	6820      	ldr	r0, [r4, #0]
 8011a38:	3008      	adds	r0, #8
 8011a3a:	f7fe f929 	bl	800fc90 <rcl_client_is_valid>
 8011a3e:	b1a8      	cbz	r0, 8011a6c <rcl_action_send_result_request+0x54>
 8011a40:	6820      	ldr	r0, [r4, #0]
 8011a42:	300c      	adds	r0, #12
 8011a44:	f7fe ffc2 	bl	80109cc <rcl_subscription_is_valid>
 8011a48:	b180      	cbz	r0, 8011a6c <rcl_action_send_result_request+0x54>
 8011a4a:	6820      	ldr	r0, [r4, #0]
 8011a4c:	3010      	adds	r0, #16
 8011a4e:	f7fe ffbd 	bl	80109cc <rcl_subscription_is_valid>
 8011a52:	b158      	cbz	r0, 8011a6c <rcl_action_send_result_request+0x54>
 8011a54:	b195      	cbz	r5, 8011a7c <rcl_action_send_result_request+0x64>
 8011a56:	b18e      	cbz	r6, 8011a7c <rcl_action_send_result_request+0x64>
 8011a58:	6820      	ldr	r0, [r4, #0]
 8011a5a:	4632      	mov	r2, r6
 8011a5c:	4629      	mov	r1, r5
 8011a5e:	3008      	adds	r0, #8
 8011a60:	f7fe f896 	bl	800fb90 <rcl_send_request>
 8011a64:	3800      	subs	r0, #0
 8011a66:	bf18      	it	ne
 8011a68:	2001      	movne	r0, #1
 8011a6a:	bd70      	pop	{r4, r5, r6, pc}
 8011a6c:	f7f8 fc68 	bl	800a340 <rcutils_reset_error>
 8011a70:	f640 0036 	movw	r0, #2102	@ 0x836
 8011a74:	bd70      	pop	{r4, r5, r6, pc}
 8011a76:	f640 0036 	movw	r0, #2102	@ 0x836
 8011a7a:	bd70      	pop	{r4, r5, r6, pc}
 8011a7c:	200b      	movs	r0, #11
 8011a7e:	bd70      	pop	{r4, r5, r6, pc}
 8011a80:	f640 0036 	movw	r0, #2102	@ 0x836
 8011a84:	4770      	bx	lr
 8011a86:	bf00      	nop

08011a88 <rcl_action_take_result_response>:
 8011a88:	2800      	cmp	r0, #0
 8011a8a:	d03a      	beq.n	8011b02 <rcl_action_take_result_response+0x7a>
 8011a8c:	b570      	push	{r4, r5, r6, lr}
 8011a8e:	4604      	mov	r4, r0
 8011a90:	6800      	ldr	r0, [r0, #0]
 8011a92:	b388      	cbz	r0, 8011af8 <rcl_action_take_result_response+0x70>
 8011a94:	460d      	mov	r5, r1
 8011a96:	4616      	mov	r6, r2
 8011a98:	f7fe f8fa 	bl	800fc90 <rcl_client_is_valid>
 8011a9c:	b338      	cbz	r0, 8011aee <rcl_action_take_result_response+0x66>
 8011a9e:	6820      	ldr	r0, [r4, #0]
 8011aa0:	3004      	adds	r0, #4
 8011aa2:	f7fe f8f5 	bl	800fc90 <rcl_client_is_valid>
 8011aa6:	b310      	cbz	r0, 8011aee <rcl_action_take_result_response+0x66>
 8011aa8:	6820      	ldr	r0, [r4, #0]
 8011aaa:	3008      	adds	r0, #8
 8011aac:	f7fe f8f0 	bl	800fc90 <rcl_client_is_valid>
 8011ab0:	b1e8      	cbz	r0, 8011aee <rcl_action_take_result_response+0x66>
 8011ab2:	6820      	ldr	r0, [r4, #0]
 8011ab4:	300c      	adds	r0, #12
 8011ab6:	f7fe ff89 	bl	80109cc <rcl_subscription_is_valid>
 8011aba:	b1c0      	cbz	r0, 8011aee <rcl_action_take_result_response+0x66>
 8011abc:	6820      	ldr	r0, [r4, #0]
 8011abe:	3010      	adds	r0, #16
 8011ac0:	f7fe ff84 	bl	80109cc <rcl_subscription_is_valid>
 8011ac4:	b198      	cbz	r0, 8011aee <rcl_action_take_result_response+0x66>
 8011ac6:	b1d5      	cbz	r5, 8011afe <rcl_action_take_result_response+0x76>
 8011ac8:	b1ce      	cbz	r6, 8011afe <rcl_action_take_result_response+0x76>
 8011aca:	6820      	ldr	r0, [r4, #0]
 8011acc:	4632      	mov	r2, r6
 8011ace:	4629      	mov	r1, r5
 8011ad0:	3008      	adds	r0, #8
 8011ad2:	f7fe f895 	bl	800fc00 <rcl_take_response>
 8011ad6:	b148      	cbz	r0, 8011aec <rcl_action_take_result_response+0x64>
 8011ad8:	280a      	cmp	r0, #10
 8011ada:	d007      	beq.n	8011aec <rcl_action_take_result_response+0x64>
 8011adc:	f240 12f5 	movw	r2, #501	@ 0x1f5
 8011ae0:	f640 0337 	movw	r3, #2103	@ 0x837
 8011ae4:	4290      	cmp	r0, r2
 8011ae6:	bf0c      	ite	eq
 8011ae8:	4618      	moveq	r0, r3
 8011aea:	2001      	movne	r0, #1
 8011aec:	bd70      	pop	{r4, r5, r6, pc}
 8011aee:	f7f8 fc27 	bl	800a340 <rcutils_reset_error>
 8011af2:	f640 0036 	movw	r0, #2102	@ 0x836
 8011af6:	bd70      	pop	{r4, r5, r6, pc}
 8011af8:	f640 0036 	movw	r0, #2102	@ 0x836
 8011afc:	bd70      	pop	{r4, r5, r6, pc}
 8011afe:	200b      	movs	r0, #11
 8011b00:	bd70      	pop	{r4, r5, r6, pc}
 8011b02:	f640 0036 	movw	r0, #2102	@ 0x836
 8011b06:	4770      	bx	lr

08011b08 <rcl_action_take_cancel_response>:
 8011b08:	2800      	cmp	r0, #0
 8011b0a:	d03a      	beq.n	8011b82 <rcl_action_take_cancel_response+0x7a>
 8011b0c:	b570      	push	{r4, r5, r6, lr}
 8011b0e:	4604      	mov	r4, r0
 8011b10:	6800      	ldr	r0, [r0, #0]
 8011b12:	b388      	cbz	r0, 8011b78 <rcl_action_take_cancel_response+0x70>
 8011b14:	460d      	mov	r5, r1
 8011b16:	4616      	mov	r6, r2
 8011b18:	f7fe f8ba 	bl	800fc90 <rcl_client_is_valid>
 8011b1c:	b338      	cbz	r0, 8011b6e <rcl_action_take_cancel_response+0x66>
 8011b1e:	6820      	ldr	r0, [r4, #0]
 8011b20:	3004      	adds	r0, #4
 8011b22:	f7fe f8b5 	bl	800fc90 <rcl_client_is_valid>
 8011b26:	b310      	cbz	r0, 8011b6e <rcl_action_take_cancel_response+0x66>
 8011b28:	6820      	ldr	r0, [r4, #0]
 8011b2a:	3008      	adds	r0, #8
 8011b2c:	f7fe f8b0 	bl	800fc90 <rcl_client_is_valid>
 8011b30:	b1e8      	cbz	r0, 8011b6e <rcl_action_take_cancel_response+0x66>
 8011b32:	6820      	ldr	r0, [r4, #0]
 8011b34:	300c      	adds	r0, #12
 8011b36:	f7fe ff49 	bl	80109cc <rcl_subscription_is_valid>
 8011b3a:	b1c0      	cbz	r0, 8011b6e <rcl_action_take_cancel_response+0x66>
 8011b3c:	6820      	ldr	r0, [r4, #0]
 8011b3e:	3010      	adds	r0, #16
 8011b40:	f7fe ff44 	bl	80109cc <rcl_subscription_is_valid>
 8011b44:	b198      	cbz	r0, 8011b6e <rcl_action_take_cancel_response+0x66>
 8011b46:	b1d5      	cbz	r5, 8011b7e <rcl_action_take_cancel_response+0x76>
 8011b48:	b1ce      	cbz	r6, 8011b7e <rcl_action_take_cancel_response+0x76>
 8011b4a:	6820      	ldr	r0, [r4, #0]
 8011b4c:	4632      	mov	r2, r6
 8011b4e:	4629      	mov	r1, r5
 8011b50:	3004      	adds	r0, #4
 8011b52:	f7fe f855 	bl	800fc00 <rcl_take_response>
 8011b56:	b148      	cbz	r0, 8011b6c <rcl_action_take_cancel_response+0x64>
 8011b58:	280a      	cmp	r0, #10
 8011b5a:	d007      	beq.n	8011b6c <rcl_action_take_cancel_response+0x64>
 8011b5c:	f240 12f5 	movw	r2, #501	@ 0x1f5
 8011b60:	f640 0337 	movw	r3, #2103	@ 0x837
 8011b64:	4290      	cmp	r0, r2
 8011b66:	bf0c      	ite	eq
 8011b68:	4618      	moveq	r0, r3
 8011b6a:	2001      	movne	r0, #1
 8011b6c:	bd70      	pop	{r4, r5, r6, pc}
 8011b6e:	f7f8 fbe7 	bl	800a340 <rcutils_reset_error>
 8011b72:	f640 0036 	movw	r0, #2102	@ 0x836
 8011b76:	bd70      	pop	{r4, r5, r6, pc}
 8011b78:	f640 0036 	movw	r0, #2102	@ 0x836
 8011b7c:	bd70      	pop	{r4, r5, r6, pc}
 8011b7e:	200b      	movs	r0, #11
 8011b80:	bd70      	pop	{r4, r5, r6, pc}
 8011b82:	f640 0036 	movw	r0, #2102	@ 0x836
 8011b86:	4770      	bx	lr

08011b88 <rcl_action_take_feedback>:
 8011b88:	2800      	cmp	r0, #0
 8011b8a:	d038      	beq.n	8011bfe <rcl_action_take_feedback+0x76>
 8011b8c:	b530      	push	{r4, r5, lr}
 8011b8e:	4604      	mov	r4, r0
 8011b90:	6800      	ldr	r0, [r0, #0]
 8011b92:	b091      	sub	sp, #68	@ 0x44
 8011b94:	b378      	cbz	r0, 8011bf6 <rcl_action_take_feedback+0x6e>
 8011b96:	460d      	mov	r5, r1
 8011b98:	f7fe f87a 	bl	800fc90 <rcl_client_is_valid>
 8011b9c:	b328      	cbz	r0, 8011bea <rcl_action_take_feedback+0x62>
 8011b9e:	6820      	ldr	r0, [r4, #0]
 8011ba0:	3004      	adds	r0, #4
 8011ba2:	f7fe f875 	bl	800fc90 <rcl_client_is_valid>
 8011ba6:	b300      	cbz	r0, 8011bea <rcl_action_take_feedback+0x62>
 8011ba8:	6820      	ldr	r0, [r4, #0]
 8011baa:	3008      	adds	r0, #8
 8011bac:	f7fe f870 	bl	800fc90 <rcl_client_is_valid>
 8011bb0:	b1d8      	cbz	r0, 8011bea <rcl_action_take_feedback+0x62>
 8011bb2:	6820      	ldr	r0, [r4, #0]
 8011bb4:	300c      	adds	r0, #12
 8011bb6:	f7fe ff09 	bl	80109cc <rcl_subscription_is_valid>
 8011bba:	b1b0      	cbz	r0, 8011bea <rcl_action_take_feedback+0x62>
 8011bbc:	6820      	ldr	r0, [r4, #0]
 8011bbe:	3010      	adds	r0, #16
 8011bc0:	f7fe ff04 	bl	80109cc <rcl_subscription_is_valid>
 8011bc4:	b188      	cbz	r0, 8011bea <rcl_action_take_feedback+0x62>
 8011bc6:	b1ed      	cbz	r5, 8011c04 <rcl_action_take_feedback+0x7c>
 8011bc8:	6820      	ldr	r0, [r4, #0]
 8011bca:	2300      	movs	r3, #0
 8011bcc:	466a      	mov	r2, sp
 8011bce:	4629      	mov	r1, r5
 8011bd0:	300c      	adds	r0, #12
 8011bd2:	f7fe fe9d 	bl	8010910 <rcl_take>
 8011bd6:	b160      	cbz	r0, 8011bf2 <rcl_action_take_feedback+0x6a>
 8011bd8:	f240 1391 	movw	r3, #401	@ 0x191
 8011bdc:	4298      	cmp	r0, r3
 8011bde:	d014      	beq.n	8011c0a <rcl_action_take_feedback+0x82>
 8011be0:	280a      	cmp	r0, #10
 8011be2:	bf18      	it	ne
 8011be4:	2001      	movne	r0, #1
 8011be6:	b011      	add	sp, #68	@ 0x44
 8011be8:	bd30      	pop	{r4, r5, pc}
 8011bea:	f7f8 fba9 	bl	800a340 <rcutils_reset_error>
 8011bee:	f640 0036 	movw	r0, #2102	@ 0x836
 8011bf2:	b011      	add	sp, #68	@ 0x44
 8011bf4:	bd30      	pop	{r4, r5, pc}
 8011bf6:	f640 0036 	movw	r0, #2102	@ 0x836
 8011bfa:	b011      	add	sp, #68	@ 0x44
 8011bfc:	bd30      	pop	{r4, r5, pc}
 8011bfe:	f640 0036 	movw	r0, #2102	@ 0x836
 8011c02:	4770      	bx	lr
 8011c04:	200b      	movs	r0, #11
 8011c06:	b011      	add	sp, #68	@ 0x44
 8011c08:	bd30      	pop	{r4, r5, pc}
 8011c0a:	f640 0037 	movw	r0, #2103	@ 0x837
 8011c0e:	e7f0      	b.n	8011bf2 <rcl_action_take_feedback+0x6a>

08011c10 <rcl_action_wait_set_add_action_client>:
 8011c10:	2800      	cmp	r0, #0
 8011c12:	d048      	beq.n	8011ca6 <rcl_action_wait_set_add_action_client+0x96>
 8011c14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011c16:	460c      	mov	r4, r1
 8011c18:	2900      	cmp	r1, #0
 8011c1a:	d03c      	beq.n	8011c96 <rcl_action_wait_set_add_action_client+0x86>
 8011c1c:	4605      	mov	r5, r0
 8011c1e:	6808      	ldr	r0, [r1, #0]
 8011c20:	2800      	cmp	r0, #0
 8011c22:	d038      	beq.n	8011c96 <rcl_action_wait_set_add_action_client+0x86>
 8011c24:	4617      	mov	r7, r2
 8011c26:	461e      	mov	r6, r3
 8011c28:	f7fe f832 	bl	800fc90 <rcl_client_is_valid>
 8011c2c:	b3b0      	cbz	r0, 8011c9c <rcl_action_wait_set_add_action_client+0x8c>
 8011c2e:	6820      	ldr	r0, [r4, #0]
 8011c30:	3004      	adds	r0, #4
 8011c32:	f7fe f82d 	bl	800fc90 <rcl_client_is_valid>
 8011c36:	b388      	cbz	r0, 8011c9c <rcl_action_wait_set_add_action_client+0x8c>
 8011c38:	6820      	ldr	r0, [r4, #0]
 8011c3a:	3008      	adds	r0, #8
 8011c3c:	f7fe f828 	bl	800fc90 <rcl_client_is_valid>
 8011c40:	b360      	cbz	r0, 8011c9c <rcl_action_wait_set_add_action_client+0x8c>
 8011c42:	6820      	ldr	r0, [r4, #0]
 8011c44:	300c      	adds	r0, #12
 8011c46:	f7fe fec1 	bl	80109cc <rcl_subscription_is_valid>
 8011c4a:	b338      	cbz	r0, 8011c9c <rcl_action_wait_set_add_action_client+0x8c>
 8011c4c:	6820      	ldr	r0, [r4, #0]
 8011c4e:	3010      	adds	r0, #16
 8011c50:	f7fe febc 	bl	80109cc <rcl_subscription_is_valid>
 8011c54:	b310      	cbz	r0, 8011c9c <rcl_action_wait_set_add_action_client+0x8c>
 8011c56:	6821      	ldr	r1, [r4, #0]
 8011c58:	4628      	mov	r0, r5
 8011c5a:	f501 72e2 	add.w	r2, r1, #452	@ 0x1c4
 8011c5e:	f7ff fccf 	bl	8011600 <rcl_wait_set_add_client>
 8011c62:	b9b8      	cbnz	r0, 8011c94 <rcl_action_wait_set_add_action_client+0x84>
 8011c64:	6821      	ldr	r1, [r4, #0]
 8011c66:	4628      	mov	r0, r5
 8011c68:	f501 72e4 	add.w	r2, r1, #456	@ 0x1c8
 8011c6c:	3104      	adds	r1, #4
 8011c6e:	f7ff fcc7 	bl	8011600 <rcl_wait_set_add_client>
 8011c72:	b978      	cbnz	r0, 8011c94 <rcl_action_wait_set_add_action_client+0x84>
 8011c74:	6821      	ldr	r1, [r4, #0]
 8011c76:	4628      	mov	r0, r5
 8011c78:	f501 72e6 	add.w	r2, r1, #460	@ 0x1cc
 8011c7c:	3108      	adds	r1, #8
 8011c7e:	f7ff fcbf 	bl	8011600 <rcl_wait_set_add_client>
 8011c82:	b938      	cbnz	r0, 8011c94 <rcl_action_wait_set_add_action_client+0x84>
 8011c84:	6821      	ldr	r1, [r4, #0]
 8011c86:	4628      	mov	r0, r5
 8011c88:	f501 72e8 	add.w	r2, r1, #464	@ 0x1d0
 8011c8c:	310c      	adds	r1, #12
 8011c8e:	f7ff f96f 	bl	8010f70 <rcl_wait_set_add_subscription>
 8011c92:	b158      	cbz	r0, 8011cac <rcl_action_wait_set_add_action_client+0x9c>
 8011c94:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8011c96:	f640 0036 	movw	r0, #2102	@ 0x836
 8011c9a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8011c9c:	f7f8 fb50 	bl	800a340 <rcutils_reset_error>
 8011ca0:	f640 0036 	movw	r0, #2102	@ 0x836
 8011ca4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8011ca6:	f44f 7061 	mov.w	r0, #900	@ 0x384
 8011caa:	4770      	bx	lr
 8011cac:	6821      	ldr	r1, [r4, #0]
 8011cae:	4628      	mov	r0, r5
 8011cb0:	f501 72ea 	add.w	r2, r1, #468	@ 0x1d4
 8011cb4:	3110      	adds	r1, #16
 8011cb6:	f7ff f95b 	bl	8010f70 <rcl_wait_set_add_subscription>
 8011cba:	2800      	cmp	r0, #0
 8011cbc:	d1ea      	bne.n	8011c94 <rcl_action_wait_set_add_action_client+0x84>
 8011cbe:	b11f      	cbz	r7, 8011cc8 <rcl_action_wait_set_add_action_client+0xb8>
 8011cc0:	6823      	ldr	r3, [r4, #0]
 8011cc2:	f8d3 31c4 	ldr.w	r3, [r3, #452]	@ 0x1c4
 8011cc6:	603b      	str	r3, [r7, #0]
 8011cc8:	2e00      	cmp	r6, #0
 8011cca:	d0e3      	beq.n	8011c94 <rcl_action_wait_set_add_action_client+0x84>
 8011ccc:	6823      	ldr	r3, [r4, #0]
 8011cce:	f8d3 31d0 	ldr.w	r3, [r3, #464]	@ 0x1d0
 8011cd2:	6033      	str	r3, [r6, #0]
 8011cd4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8011cd6:	bf00      	nop

08011cd8 <rcl_action_client_wait_set_get_entities_ready>:
 8011cd8:	2800      	cmp	r0, #0
 8011cda:	f000 808d 	beq.w	8011df8 <rcl_action_client_wait_set_get_entities_ready+0x120>
 8011cde:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011ce2:	460c      	mov	r4, r1
 8011ce4:	2900      	cmp	r1, #0
 8011ce6:	d077      	beq.n	8011dd8 <rcl_action_client_wait_set_get_entities_ready+0x100>
 8011ce8:	4605      	mov	r5, r0
 8011cea:	6808      	ldr	r0, [r1, #0]
 8011cec:	2800      	cmp	r0, #0
 8011cee:	d073      	beq.n	8011dd8 <rcl_action_client_wait_set_get_entities_ready+0x100>
 8011cf0:	4616      	mov	r6, r2
 8011cf2:	461f      	mov	r7, r3
 8011cf4:	f7fd ffcc 	bl	800fc90 <rcl_client_is_valid>
 8011cf8:	2800      	cmp	r0, #0
 8011cfa:	d071      	beq.n	8011de0 <rcl_action_client_wait_set_get_entities_ready+0x108>
 8011cfc:	6820      	ldr	r0, [r4, #0]
 8011cfe:	3004      	adds	r0, #4
 8011d00:	f7fd ffc6 	bl	800fc90 <rcl_client_is_valid>
 8011d04:	2800      	cmp	r0, #0
 8011d06:	d06b      	beq.n	8011de0 <rcl_action_client_wait_set_get_entities_ready+0x108>
 8011d08:	6820      	ldr	r0, [r4, #0]
 8011d0a:	3008      	adds	r0, #8
 8011d0c:	f7fd ffc0 	bl	800fc90 <rcl_client_is_valid>
 8011d10:	2800      	cmp	r0, #0
 8011d12:	d065      	beq.n	8011de0 <rcl_action_client_wait_set_get_entities_ready+0x108>
 8011d14:	6820      	ldr	r0, [r4, #0]
 8011d16:	300c      	adds	r0, #12
 8011d18:	f7fe fe58 	bl	80109cc <rcl_subscription_is_valid>
 8011d1c:	2800      	cmp	r0, #0
 8011d1e:	d05f      	beq.n	8011de0 <rcl_action_client_wait_set_get_entities_ready+0x108>
 8011d20:	6820      	ldr	r0, [r4, #0]
 8011d22:	3010      	adds	r0, #16
 8011d24:	f7fe fe52 	bl	80109cc <rcl_subscription_is_valid>
 8011d28:	2800      	cmp	r0, #0
 8011d2a:	d059      	beq.n	8011de0 <rcl_action_client_wait_set_get_entities_ready+0x108>
 8011d2c:	2e00      	cmp	r6, #0
 8011d2e:	d060      	beq.n	8011df2 <rcl_action_client_wait_set_get_entities_ready+0x11a>
 8011d30:	2f00      	cmp	r7, #0
 8011d32:	d05e      	beq.n	8011df2 <rcl_action_client_wait_set_get_entities_ready+0x11a>
 8011d34:	9b06      	ldr	r3, [sp, #24]
 8011d36:	2b00      	cmp	r3, #0
 8011d38:	d05b      	beq.n	8011df2 <rcl_action_client_wait_set_get_entities_ready+0x11a>
 8011d3a:	9b07      	ldr	r3, [sp, #28]
 8011d3c:	2b00      	cmp	r3, #0
 8011d3e:	d058      	beq.n	8011df2 <rcl_action_client_wait_set_get_entities_ready+0x11a>
 8011d40:	9b08      	ldr	r3, [sp, #32]
 8011d42:	2b00      	cmp	r3, #0
 8011d44:	d055      	beq.n	8011df2 <rcl_action_client_wait_set_get_entities_ready+0x11a>
 8011d46:	6823      	ldr	r3, [r4, #0]
 8011d48:	686a      	ldr	r2, [r5, #4]
 8011d4a:	f8d3 11d0 	ldr.w	r1, [r3, #464]	@ 0x1d0
 8011d4e:	428a      	cmp	r2, r1
 8011d50:	d94c      	bls.n	8011dec <rcl_action_client_wait_set_get_entities_ready+0x114>
 8011d52:	f8d3 01d4 	ldr.w	r0, [r3, #468]	@ 0x1d4
 8011d56:	4282      	cmp	r2, r0
 8011d58:	d948      	bls.n	8011dec <rcl_action_client_wait_set_get_entities_ready+0x114>
 8011d5a:	f8d3 41c4 	ldr.w	r4, [r3, #452]	@ 0x1c4
 8011d5e:	69ea      	ldr	r2, [r5, #28]
 8011d60:	42a2      	cmp	r2, r4
 8011d62:	d943      	bls.n	8011dec <rcl_action_client_wait_set_get_entities_ready+0x114>
 8011d64:	f8d3 c1c8 	ldr.w	ip, [r3, #456]	@ 0x1c8
 8011d68:	4562      	cmp	r2, ip
 8011d6a:	d93f      	bls.n	8011dec <rcl_action_client_wait_set_get_entities_ready+0x114>
 8011d6c:	f8d3 e1cc 	ldr.w	lr, [r3, #460]	@ 0x1cc
 8011d70:	4572      	cmp	r2, lr
 8011d72:	d93b      	bls.n	8011dec <rcl_action_client_wait_set_get_entities_ready+0x114>
 8011d74:	69aa      	ldr	r2, [r5, #24]
 8011d76:	682d      	ldr	r5, [r5, #0]
 8011d78:	f852 8024 	ldr.w	r8, [r2, r4, lsl #2]
 8011d7c:	f855 4020 	ldr.w	r4, [r5, r0, lsl #2]
 8011d80:	f855 5021 	ldr.w	r5, [r5, r1, lsl #2]
 8011d84:	f852 102c 	ldr.w	r1, [r2, ip, lsl #2]
 8011d88:	f852 202e 	ldr.w	r2, [r2, lr, lsl #2]
 8011d8c:	f103 0c0c 	add.w	ip, r3, #12
 8011d90:	eba5 050c 	sub.w	r5, r5, ip
 8011d94:	fab5 f585 	clz	r5, r5
 8011d98:	096d      	lsrs	r5, r5, #5
 8011d9a:	7035      	strb	r5, [r6, #0]
 8011d9c:	f103 0510 	add.w	r5, r3, #16
 8011da0:	1b64      	subs	r4, r4, r5
 8011da2:	fab4 f484 	clz	r4, r4
 8011da6:	0964      	lsrs	r4, r4, #5
 8011da8:	703c      	strb	r4, [r7, #0]
 8011daa:	eba3 0008 	sub.w	r0, r3, r8
 8011dae:	1d1c      	adds	r4, r3, #4
 8011db0:	3308      	adds	r3, #8
 8011db2:	1ad3      	subs	r3, r2, r3
 8011db4:	fab0 f080 	clz	r0, r0
 8011db8:	9a06      	ldr	r2, [sp, #24]
 8011dba:	0940      	lsrs	r0, r0, #5
 8011dbc:	1b09      	subs	r1, r1, r4
 8011dbe:	7010      	strb	r0, [r2, #0]
 8011dc0:	fab1 f181 	clz	r1, r1
 8011dc4:	9a07      	ldr	r2, [sp, #28]
 8011dc6:	0949      	lsrs	r1, r1, #5
 8011dc8:	7011      	strb	r1, [r2, #0]
 8011dca:	fab3 f383 	clz	r3, r3
 8011dce:	9a08      	ldr	r2, [sp, #32]
 8011dd0:	095b      	lsrs	r3, r3, #5
 8011dd2:	2000      	movs	r0, #0
 8011dd4:	7013      	strb	r3, [r2, #0]
 8011dd6:	e001      	b.n	8011ddc <rcl_action_client_wait_set_get_entities_ready+0x104>
 8011dd8:	f640 0036 	movw	r0, #2102	@ 0x836
 8011ddc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011de0:	f7f8 faae 	bl	800a340 <rcutils_reset_error>
 8011de4:	f640 0036 	movw	r0, #2102	@ 0x836
 8011de8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011dec:	2001      	movs	r0, #1
 8011dee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011df2:	200b      	movs	r0, #11
 8011df4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011df8:	f44f 7061 	mov.w	r0, #900	@ 0x384
 8011dfc:	4770      	bx	lr
 8011dfe:	bf00      	nop

08011e00 <rcl_action_take_goal_request>:
 8011e00:	2800      	cmp	r0, #0
 8011e02:	d039      	beq.n	8011e78 <rcl_action_take_goal_request+0x78>
 8011e04:	b570      	push	{r4, r5, r6, lr}
 8011e06:	4604      	mov	r4, r0
 8011e08:	6800      	ldr	r0, [r0, #0]
 8011e0a:	b380      	cbz	r0, 8011e6e <rcl_action_take_goal_request+0x6e>
 8011e0c:	460d      	mov	r5, r1
 8011e0e:	4616      	mov	r6, r2
 8011e10:	f7fe fc98 	bl	8010744 <rcl_service_is_valid>
 8011e14:	b330      	cbz	r0, 8011e64 <rcl_action_take_goal_request+0x64>
 8011e16:	6820      	ldr	r0, [r4, #0]
 8011e18:	3004      	adds	r0, #4
 8011e1a:	f7fe fc93 	bl	8010744 <rcl_service_is_valid>
 8011e1e:	b308      	cbz	r0, 8011e64 <rcl_action_take_goal_request+0x64>
 8011e20:	6820      	ldr	r0, [r4, #0]
 8011e22:	3008      	adds	r0, #8
 8011e24:	f7fe fc8e 	bl	8010744 <rcl_service_is_valid>
 8011e28:	b1e0      	cbz	r0, 8011e64 <rcl_action_take_goal_request+0x64>
 8011e2a:	6820      	ldr	r0, [r4, #0]
 8011e2c:	300c      	adds	r0, #12
 8011e2e:	f002 ff27 	bl	8014c80 <rcl_publisher_is_valid>
 8011e32:	b1b8      	cbz	r0, 8011e64 <rcl_action_take_goal_request+0x64>
 8011e34:	6820      	ldr	r0, [r4, #0]
 8011e36:	3010      	adds	r0, #16
 8011e38:	f002 ff22 	bl	8014c80 <rcl_publisher_is_valid>
 8011e3c:	b190      	cbz	r0, 8011e64 <rcl_action_take_goal_request+0x64>
 8011e3e:	b1cd      	cbz	r5, 8011e74 <rcl_action_take_goal_request+0x74>
 8011e40:	b1c6      	cbz	r6, 8011e74 <rcl_action_take_goal_request+0x74>
 8011e42:	6820      	ldr	r0, [r4, #0]
 8011e44:	4632      	mov	r2, r6
 8011e46:	4629      	mov	r1, r5
 8011e48:	f7fe fc24 	bl	8010694 <rcl_take_request>
 8011e4c:	b148      	cbz	r0, 8011e62 <rcl_action_take_goal_request+0x62>
 8011e4e:	280a      	cmp	r0, #10
 8011e50:	d007      	beq.n	8011e62 <rcl_action_take_goal_request+0x62>
 8011e52:	f240 2259 	movw	r2, #601	@ 0x259
 8011e56:	f640 0399 	movw	r3, #2201	@ 0x899
 8011e5a:	4290      	cmp	r0, r2
 8011e5c:	bf0c      	ite	eq
 8011e5e:	4618      	moveq	r0, r3
 8011e60:	2001      	movne	r0, #1
 8011e62:	bd70      	pop	{r4, r5, r6, pc}
 8011e64:	f7f8 fa6c 	bl	800a340 <rcutils_reset_error>
 8011e68:	f640 0098 	movw	r0, #2200	@ 0x898
 8011e6c:	bd70      	pop	{r4, r5, r6, pc}
 8011e6e:	f640 0098 	movw	r0, #2200	@ 0x898
 8011e72:	bd70      	pop	{r4, r5, r6, pc}
 8011e74:	200b      	movs	r0, #11
 8011e76:	bd70      	pop	{r4, r5, r6, pc}
 8011e78:	f640 0098 	movw	r0, #2200	@ 0x898
 8011e7c:	4770      	bx	lr
 8011e7e:	bf00      	nop

08011e80 <rcl_action_send_goal_response>:
 8011e80:	b390      	cbz	r0, 8011ee8 <rcl_action_send_goal_response+0x68>
 8011e82:	b570      	push	{r4, r5, r6, lr}
 8011e84:	4604      	mov	r4, r0
 8011e86:	6800      	ldr	r0, [r0, #0]
 8011e88:	b348      	cbz	r0, 8011ede <rcl_action_send_goal_response+0x5e>
 8011e8a:	460d      	mov	r5, r1
 8011e8c:	4616      	mov	r6, r2
 8011e8e:	f7fe fc59 	bl	8010744 <rcl_service_is_valid>
 8011e92:	b1f8      	cbz	r0, 8011ed4 <rcl_action_send_goal_response+0x54>
 8011e94:	6820      	ldr	r0, [r4, #0]
 8011e96:	3004      	adds	r0, #4
 8011e98:	f7fe fc54 	bl	8010744 <rcl_service_is_valid>
 8011e9c:	b1d0      	cbz	r0, 8011ed4 <rcl_action_send_goal_response+0x54>
 8011e9e:	6820      	ldr	r0, [r4, #0]
 8011ea0:	3008      	adds	r0, #8
 8011ea2:	f7fe fc4f 	bl	8010744 <rcl_service_is_valid>
 8011ea6:	b1a8      	cbz	r0, 8011ed4 <rcl_action_send_goal_response+0x54>
 8011ea8:	6820      	ldr	r0, [r4, #0]
 8011eaa:	300c      	adds	r0, #12
 8011eac:	f002 fee8 	bl	8014c80 <rcl_publisher_is_valid>
 8011eb0:	b180      	cbz	r0, 8011ed4 <rcl_action_send_goal_response+0x54>
 8011eb2:	6820      	ldr	r0, [r4, #0]
 8011eb4:	3010      	adds	r0, #16
 8011eb6:	f002 fee3 	bl	8014c80 <rcl_publisher_is_valid>
 8011eba:	b158      	cbz	r0, 8011ed4 <rcl_action_send_goal_response+0x54>
 8011ebc:	b195      	cbz	r5, 8011ee4 <rcl_action_send_goal_response+0x64>
 8011ebe:	b18e      	cbz	r6, 8011ee4 <rcl_action_send_goal_response+0x64>
 8011ec0:	6820      	ldr	r0, [r4, #0]
 8011ec2:	4632      	mov	r2, r6
 8011ec4:	4629      	mov	r1, r5
 8011ec6:	f7fe fc25 	bl	8010714 <rcl_send_response>
 8011eca:	b110      	cbz	r0, 8011ed2 <rcl_action_send_goal_response+0x52>
 8011ecc:	2802      	cmp	r0, #2
 8011ece:	bf18      	it	ne
 8011ed0:	2001      	movne	r0, #1
 8011ed2:	bd70      	pop	{r4, r5, r6, pc}
 8011ed4:	f7f8 fa34 	bl	800a340 <rcutils_reset_error>
 8011ed8:	f640 0098 	movw	r0, #2200	@ 0x898
 8011edc:	bd70      	pop	{r4, r5, r6, pc}
 8011ede:	f640 0098 	movw	r0, #2200	@ 0x898
 8011ee2:	bd70      	pop	{r4, r5, r6, pc}
 8011ee4:	200b      	movs	r0, #11
 8011ee6:	bd70      	pop	{r4, r5, r6, pc}
 8011ee8:	f640 0098 	movw	r0, #2200	@ 0x898
 8011eec:	4770      	bx	lr
 8011eee:	bf00      	nop

08011ef0 <rcl_action_take_result_request>:
 8011ef0:	2800      	cmp	r0, #0
 8011ef2:	d03a      	beq.n	8011f6a <rcl_action_take_result_request+0x7a>
 8011ef4:	b570      	push	{r4, r5, r6, lr}
 8011ef6:	4604      	mov	r4, r0
 8011ef8:	6800      	ldr	r0, [r0, #0]
 8011efa:	b388      	cbz	r0, 8011f60 <rcl_action_take_result_request+0x70>
 8011efc:	460d      	mov	r5, r1
 8011efe:	4616      	mov	r6, r2
 8011f00:	f7fe fc20 	bl	8010744 <rcl_service_is_valid>
 8011f04:	b338      	cbz	r0, 8011f56 <rcl_action_take_result_request+0x66>
 8011f06:	6820      	ldr	r0, [r4, #0]
 8011f08:	3004      	adds	r0, #4
 8011f0a:	f7fe fc1b 	bl	8010744 <rcl_service_is_valid>
 8011f0e:	b310      	cbz	r0, 8011f56 <rcl_action_take_result_request+0x66>
 8011f10:	6820      	ldr	r0, [r4, #0]
 8011f12:	3008      	adds	r0, #8
 8011f14:	f7fe fc16 	bl	8010744 <rcl_service_is_valid>
 8011f18:	b1e8      	cbz	r0, 8011f56 <rcl_action_take_result_request+0x66>
 8011f1a:	6820      	ldr	r0, [r4, #0]
 8011f1c:	300c      	adds	r0, #12
 8011f1e:	f002 feaf 	bl	8014c80 <rcl_publisher_is_valid>
 8011f22:	b1c0      	cbz	r0, 8011f56 <rcl_action_take_result_request+0x66>
 8011f24:	6820      	ldr	r0, [r4, #0]
 8011f26:	3010      	adds	r0, #16
 8011f28:	f002 feaa 	bl	8014c80 <rcl_publisher_is_valid>
 8011f2c:	b198      	cbz	r0, 8011f56 <rcl_action_take_result_request+0x66>
 8011f2e:	b1d5      	cbz	r5, 8011f66 <rcl_action_take_result_request+0x76>
 8011f30:	b1ce      	cbz	r6, 8011f66 <rcl_action_take_result_request+0x76>
 8011f32:	6820      	ldr	r0, [r4, #0]
 8011f34:	4632      	mov	r2, r6
 8011f36:	4629      	mov	r1, r5
 8011f38:	3008      	adds	r0, #8
 8011f3a:	f7fe fbab 	bl	8010694 <rcl_take_request>
 8011f3e:	b148      	cbz	r0, 8011f54 <rcl_action_take_result_request+0x64>
 8011f40:	280a      	cmp	r0, #10
 8011f42:	d007      	beq.n	8011f54 <rcl_action_take_result_request+0x64>
 8011f44:	f240 2259 	movw	r2, #601	@ 0x259
 8011f48:	f640 0399 	movw	r3, #2201	@ 0x899
 8011f4c:	4290      	cmp	r0, r2
 8011f4e:	bf0c      	ite	eq
 8011f50:	4618      	moveq	r0, r3
 8011f52:	2001      	movne	r0, #1
 8011f54:	bd70      	pop	{r4, r5, r6, pc}
 8011f56:	f7f8 f9f3 	bl	800a340 <rcutils_reset_error>
 8011f5a:	f640 0098 	movw	r0, #2200	@ 0x898
 8011f5e:	bd70      	pop	{r4, r5, r6, pc}
 8011f60:	f640 0098 	movw	r0, #2200	@ 0x898
 8011f64:	bd70      	pop	{r4, r5, r6, pc}
 8011f66:	200b      	movs	r0, #11
 8011f68:	bd70      	pop	{r4, r5, r6, pc}
 8011f6a:	f640 0098 	movw	r0, #2200	@ 0x898
 8011f6e:	4770      	bx	lr

08011f70 <rcl_action_take_cancel_request>:
 8011f70:	2800      	cmp	r0, #0
 8011f72:	d03a      	beq.n	8011fea <rcl_action_take_cancel_request+0x7a>
 8011f74:	b570      	push	{r4, r5, r6, lr}
 8011f76:	4604      	mov	r4, r0
 8011f78:	6800      	ldr	r0, [r0, #0]
 8011f7a:	b388      	cbz	r0, 8011fe0 <rcl_action_take_cancel_request+0x70>
 8011f7c:	460d      	mov	r5, r1
 8011f7e:	4616      	mov	r6, r2
 8011f80:	f7fe fbe0 	bl	8010744 <rcl_service_is_valid>
 8011f84:	b338      	cbz	r0, 8011fd6 <rcl_action_take_cancel_request+0x66>
 8011f86:	6820      	ldr	r0, [r4, #0]
 8011f88:	3004      	adds	r0, #4
 8011f8a:	f7fe fbdb 	bl	8010744 <rcl_service_is_valid>
 8011f8e:	b310      	cbz	r0, 8011fd6 <rcl_action_take_cancel_request+0x66>
 8011f90:	6820      	ldr	r0, [r4, #0]
 8011f92:	3008      	adds	r0, #8
 8011f94:	f7fe fbd6 	bl	8010744 <rcl_service_is_valid>
 8011f98:	b1e8      	cbz	r0, 8011fd6 <rcl_action_take_cancel_request+0x66>
 8011f9a:	6820      	ldr	r0, [r4, #0]
 8011f9c:	300c      	adds	r0, #12
 8011f9e:	f002 fe6f 	bl	8014c80 <rcl_publisher_is_valid>
 8011fa2:	b1c0      	cbz	r0, 8011fd6 <rcl_action_take_cancel_request+0x66>
 8011fa4:	6820      	ldr	r0, [r4, #0]
 8011fa6:	3010      	adds	r0, #16
 8011fa8:	f002 fe6a 	bl	8014c80 <rcl_publisher_is_valid>
 8011fac:	b198      	cbz	r0, 8011fd6 <rcl_action_take_cancel_request+0x66>
 8011fae:	b1d5      	cbz	r5, 8011fe6 <rcl_action_take_cancel_request+0x76>
 8011fb0:	b1ce      	cbz	r6, 8011fe6 <rcl_action_take_cancel_request+0x76>
 8011fb2:	6820      	ldr	r0, [r4, #0]
 8011fb4:	4632      	mov	r2, r6
 8011fb6:	4629      	mov	r1, r5
 8011fb8:	3004      	adds	r0, #4
 8011fba:	f7fe fb6b 	bl	8010694 <rcl_take_request>
 8011fbe:	b148      	cbz	r0, 8011fd4 <rcl_action_take_cancel_request+0x64>
 8011fc0:	280a      	cmp	r0, #10
 8011fc2:	d007      	beq.n	8011fd4 <rcl_action_take_cancel_request+0x64>
 8011fc4:	f240 2259 	movw	r2, #601	@ 0x259
 8011fc8:	f640 0399 	movw	r3, #2201	@ 0x899
 8011fcc:	4290      	cmp	r0, r2
 8011fce:	bf0c      	ite	eq
 8011fd0:	4618      	moveq	r0, r3
 8011fd2:	2001      	movne	r0, #1
 8011fd4:	bd70      	pop	{r4, r5, r6, pc}
 8011fd6:	f7f8 f9b3 	bl	800a340 <rcutils_reset_error>
 8011fda:	f640 0098 	movw	r0, #2200	@ 0x898
 8011fde:	bd70      	pop	{r4, r5, r6, pc}
 8011fe0:	f640 0098 	movw	r0, #2200	@ 0x898
 8011fe4:	bd70      	pop	{r4, r5, r6, pc}
 8011fe6:	200b      	movs	r0, #11
 8011fe8:	bd70      	pop	{r4, r5, r6, pc}
 8011fea:	f640 0098 	movw	r0, #2200	@ 0x898
 8011fee:	4770      	bx	lr

08011ff0 <rcl_action_send_cancel_response>:
 8011ff0:	b398      	cbz	r0, 801205a <rcl_action_send_cancel_response+0x6a>
 8011ff2:	b570      	push	{r4, r5, r6, lr}
 8011ff4:	4604      	mov	r4, r0
 8011ff6:	6800      	ldr	r0, [r0, #0]
 8011ff8:	b350      	cbz	r0, 8012050 <rcl_action_send_cancel_response+0x60>
 8011ffa:	460d      	mov	r5, r1
 8011ffc:	4616      	mov	r6, r2
 8011ffe:	f7fe fba1 	bl	8010744 <rcl_service_is_valid>
 8012002:	b300      	cbz	r0, 8012046 <rcl_action_send_cancel_response+0x56>
 8012004:	6820      	ldr	r0, [r4, #0]
 8012006:	3004      	adds	r0, #4
 8012008:	f7fe fb9c 	bl	8010744 <rcl_service_is_valid>
 801200c:	b1d8      	cbz	r0, 8012046 <rcl_action_send_cancel_response+0x56>
 801200e:	6820      	ldr	r0, [r4, #0]
 8012010:	3008      	adds	r0, #8
 8012012:	f7fe fb97 	bl	8010744 <rcl_service_is_valid>
 8012016:	b1b0      	cbz	r0, 8012046 <rcl_action_send_cancel_response+0x56>
 8012018:	6820      	ldr	r0, [r4, #0]
 801201a:	300c      	adds	r0, #12
 801201c:	f002 fe30 	bl	8014c80 <rcl_publisher_is_valid>
 8012020:	b188      	cbz	r0, 8012046 <rcl_action_send_cancel_response+0x56>
 8012022:	6820      	ldr	r0, [r4, #0]
 8012024:	3010      	adds	r0, #16
 8012026:	f002 fe2b 	bl	8014c80 <rcl_publisher_is_valid>
 801202a:	b160      	cbz	r0, 8012046 <rcl_action_send_cancel_response+0x56>
 801202c:	b19d      	cbz	r5, 8012056 <rcl_action_send_cancel_response+0x66>
 801202e:	b196      	cbz	r6, 8012056 <rcl_action_send_cancel_response+0x66>
 8012030:	6820      	ldr	r0, [r4, #0]
 8012032:	4632      	mov	r2, r6
 8012034:	4629      	mov	r1, r5
 8012036:	3004      	adds	r0, #4
 8012038:	f7fe fb6c 	bl	8010714 <rcl_send_response>
 801203c:	b110      	cbz	r0, 8012044 <rcl_action_send_cancel_response+0x54>
 801203e:	2802      	cmp	r0, #2
 8012040:	bf18      	it	ne
 8012042:	2001      	movne	r0, #1
 8012044:	bd70      	pop	{r4, r5, r6, pc}
 8012046:	f7f8 f97b 	bl	800a340 <rcutils_reset_error>
 801204a:	f640 0098 	movw	r0, #2200	@ 0x898
 801204e:	bd70      	pop	{r4, r5, r6, pc}
 8012050:	f640 0098 	movw	r0, #2200	@ 0x898
 8012054:	bd70      	pop	{r4, r5, r6, pc}
 8012056:	200b      	movs	r0, #11
 8012058:	bd70      	pop	{r4, r5, r6, pc}
 801205a:	f640 0098 	movw	r0, #2200	@ 0x898
 801205e:	4770      	bx	lr

08012060 <rcl_action_wait_set_add_action_server>:
 8012060:	2800      	cmp	r0, #0
 8012062:	d04d      	beq.n	8012100 <rcl_action_wait_set_add_action_server+0xa0>
 8012064:	b570      	push	{r4, r5, r6, lr}
 8012066:	460c      	mov	r4, r1
 8012068:	b159      	cbz	r1, 8012082 <rcl_action_wait_set_add_action_server+0x22>
 801206a:	4605      	mov	r5, r0
 801206c:	6808      	ldr	r0, [r1, #0]
 801206e:	b140      	cbz	r0, 8012082 <rcl_action_wait_set_add_action_server+0x22>
 8012070:	4616      	mov	r6, r2
 8012072:	f7fe fb67 	bl	8010744 <rcl_service_is_valid>
 8012076:	b120      	cbz	r0, 8012082 <rcl_action_wait_set_add_action_server+0x22>
 8012078:	6820      	ldr	r0, [r4, #0]
 801207a:	3004      	adds	r0, #4
 801207c:	f7fe fb62 	bl	8010744 <rcl_service_is_valid>
 8012080:	b910      	cbnz	r0, 8012088 <rcl_action_wait_set_add_action_server+0x28>
 8012082:	f640 0098 	movw	r0, #2200	@ 0x898
 8012086:	bd70      	pop	{r4, r5, r6, pc}
 8012088:	6820      	ldr	r0, [r4, #0]
 801208a:	3008      	adds	r0, #8
 801208c:	f7fe fb5a 	bl	8010744 <rcl_service_is_valid>
 8012090:	2800      	cmp	r0, #0
 8012092:	d0f6      	beq.n	8012082 <rcl_action_wait_set_add_action_server+0x22>
 8012094:	6820      	ldr	r0, [r4, #0]
 8012096:	300c      	adds	r0, #12
 8012098:	f002 fe0a 	bl	8014cb0 <rcl_publisher_is_valid_except_context>
 801209c:	2800      	cmp	r0, #0
 801209e:	d0f0      	beq.n	8012082 <rcl_action_wait_set_add_action_server+0x22>
 80120a0:	6820      	ldr	r0, [r4, #0]
 80120a2:	3010      	adds	r0, #16
 80120a4:	f002 fe04 	bl	8014cb0 <rcl_publisher_is_valid_except_context>
 80120a8:	2800      	cmp	r0, #0
 80120aa:	d0ea      	beq.n	8012082 <rcl_action_wait_set_add_action_server+0x22>
 80120ac:	6821      	ldr	r1, [r4, #0]
 80120ae:	4628      	mov	r0, r5
 80120b0:	f501 72ee 	add.w	r2, r1, #476	@ 0x1dc
 80120b4:	f7ff fad0 	bl	8011658 <rcl_wait_set_add_service>
 80120b8:	2800      	cmp	r0, #0
 80120ba:	d1e4      	bne.n	8012086 <rcl_action_wait_set_add_action_server+0x26>
 80120bc:	6821      	ldr	r1, [r4, #0]
 80120be:	4628      	mov	r0, r5
 80120c0:	f501 72f0 	add.w	r2, r1, #480	@ 0x1e0
 80120c4:	3104      	adds	r1, #4
 80120c6:	f7ff fac7 	bl	8011658 <rcl_wait_set_add_service>
 80120ca:	2800      	cmp	r0, #0
 80120cc:	d1db      	bne.n	8012086 <rcl_action_wait_set_add_action_server+0x26>
 80120ce:	6821      	ldr	r1, [r4, #0]
 80120d0:	4628      	mov	r0, r5
 80120d2:	f501 72f2 	add.w	r2, r1, #484	@ 0x1e4
 80120d6:	3108      	adds	r1, #8
 80120d8:	f7ff fabe 	bl	8011658 <rcl_wait_set_add_service>
 80120dc:	2800      	cmp	r0, #0
 80120de:	d1d2      	bne.n	8012086 <rcl_action_wait_set_add_action_server+0x26>
 80120e0:	6821      	ldr	r1, [r4, #0]
 80120e2:	4628      	mov	r0, r5
 80120e4:	f501 72f4 	add.w	r2, r1, #488	@ 0x1e8
 80120e8:	3114      	adds	r1, #20
 80120ea:	f7ff fa59 	bl	80115a0 <rcl_wait_set_add_timer>
 80120ee:	2800      	cmp	r0, #0
 80120f0:	d1c9      	bne.n	8012086 <rcl_action_wait_set_add_action_server+0x26>
 80120f2:	2e00      	cmp	r6, #0
 80120f4:	d0c7      	beq.n	8012086 <rcl_action_wait_set_add_action_server+0x26>
 80120f6:	6823      	ldr	r3, [r4, #0]
 80120f8:	f8d3 31dc 	ldr.w	r3, [r3, #476]	@ 0x1dc
 80120fc:	6033      	str	r3, [r6, #0]
 80120fe:	bd70      	pop	{r4, r5, r6, pc}
 8012100:	f44f 7061 	mov.w	r0, #900	@ 0x384
 8012104:	4770      	bx	lr
 8012106:	bf00      	nop

08012108 <rcl_action_server_wait_set_get_entities_ready>:
 8012108:	2800      	cmp	r0, #0
 801210a:	d05a      	beq.n	80121c2 <rcl_action_server_wait_set_get_entities_ready+0xba>
 801210c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801210e:	460c      	mov	r4, r1
 8012110:	b161      	cbz	r1, 801212c <rcl_action_server_wait_set_get_entities_ready+0x24>
 8012112:	4605      	mov	r5, r0
 8012114:	6808      	ldr	r0, [r1, #0]
 8012116:	b148      	cbz	r0, 801212c <rcl_action_server_wait_set_get_entities_ready+0x24>
 8012118:	4616      	mov	r6, r2
 801211a:	461f      	mov	r7, r3
 801211c:	f7fe fb12 	bl	8010744 <rcl_service_is_valid>
 8012120:	b120      	cbz	r0, 801212c <rcl_action_server_wait_set_get_entities_ready+0x24>
 8012122:	6820      	ldr	r0, [r4, #0]
 8012124:	3004      	adds	r0, #4
 8012126:	f7fe fb0d 	bl	8010744 <rcl_service_is_valid>
 801212a:	b910      	cbnz	r0, 8012132 <rcl_action_server_wait_set_get_entities_ready+0x2a>
 801212c:	f640 0098 	movw	r0, #2200	@ 0x898
 8012130:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8012132:	6820      	ldr	r0, [r4, #0]
 8012134:	3008      	adds	r0, #8
 8012136:	f7fe fb05 	bl	8010744 <rcl_service_is_valid>
 801213a:	2800      	cmp	r0, #0
 801213c:	d0f6      	beq.n	801212c <rcl_action_server_wait_set_get_entities_ready+0x24>
 801213e:	6820      	ldr	r0, [r4, #0]
 8012140:	300c      	adds	r0, #12
 8012142:	f002 fdb5 	bl	8014cb0 <rcl_publisher_is_valid_except_context>
 8012146:	2800      	cmp	r0, #0
 8012148:	d0f0      	beq.n	801212c <rcl_action_server_wait_set_get_entities_ready+0x24>
 801214a:	6820      	ldr	r0, [r4, #0]
 801214c:	3010      	adds	r0, #16
 801214e:	f002 fdaf 	bl	8014cb0 <rcl_publisher_is_valid_except_context>
 8012152:	2800      	cmp	r0, #0
 8012154:	d0ea      	beq.n	801212c <rcl_action_server_wait_set_get_entities_ready+0x24>
 8012156:	b3be      	cbz	r6, 80121c8 <rcl_action_server_wait_set_get_entities_ready+0xc0>
 8012158:	b3b7      	cbz	r7, 80121c8 <rcl_action_server_wait_set_get_entities_ready+0xc0>
 801215a:	9b06      	ldr	r3, [sp, #24]
 801215c:	b3a3      	cbz	r3, 80121c8 <rcl_action_server_wait_set_get_entities_ready+0xc0>
 801215e:	9b07      	ldr	r3, [sp, #28]
 8012160:	b393      	cbz	r3, 80121c8 <rcl_action_server_wait_set_get_entities_ready+0xc0>
 8012162:	6821      	ldr	r1, [r4, #0]
 8012164:	692a      	ldr	r2, [r5, #16]
 8012166:	6a2c      	ldr	r4, [r5, #32]
 8012168:	f8d1 51e8 	ldr.w	r5, [r1, #488]	@ 0x1e8
 801216c:	f8d1 31e0 	ldr.w	r3, [r1, #480]	@ 0x1e0
 8012170:	f852 2025 	ldr.w	r2, [r2, r5, lsl #2]
 8012174:	f8d1 01e4 	ldr.w	r0, [r1, #484]	@ 0x1e4
 8012178:	f8d1 51dc 	ldr.w	r5, [r1, #476]	@ 0x1dc
 801217c:	f854 0020 	ldr.w	r0, [r4, r0, lsl #2]
 8012180:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 8012184:	f854 4025 	ldr.w	r4, [r4, r5, lsl #2]
 8012188:	1a64      	subs	r4, r4, r1
 801218a:	fab4 f484 	clz	r4, r4
 801218e:	0964      	lsrs	r4, r4, #5
 8012190:	7034      	strb	r4, [r6, #0]
 8012192:	1d0c      	adds	r4, r1, #4
 8012194:	1b1b      	subs	r3, r3, r4
 8012196:	fab3 f383 	clz	r3, r3
 801219a:	095b      	lsrs	r3, r3, #5
 801219c:	f101 0408 	add.w	r4, r1, #8
 80121a0:	703b      	strb	r3, [r7, #0]
 80121a2:	f101 0314 	add.w	r3, r1, #20
 80121a6:	1b01      	subs	r1, r0, r4
 80121a8:	1ad3      	subs	r3, r2, r3
 80121aa:	fab1 f181 	clz	r1, r1
 80121ae:	9a06      	ldr	r2, [sp, #24]
 80121b0:	0949      	lsrs	r1, r1, #5
 80121b2:	7011      	strb	r1, [r2, #0]
 80121b4:	fab3 f383 	clz	r3, r3
 80121b8:	9a07      	ldr	r2, [sp, #28]
 80121ba:	095b      	lsrs	r3, r3, #5
 80121bc:	2000      	movs	r0, #0
 80121be:	7013      	strb	r3, [r2, #0]
 80121c0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80121c2:	f44f 7061 	mov.w	r0, #900	@ 0x384
 80121c6:	4770      	bx	lr
 80121c8:	200b      	movs	r0, #11
 80121ca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080121cc <_execute_event_handler>:
 80121cc:	2002      	movs	r0, #2
 80121ce:	4770      	bx	lr

080121d0 <_cancel_goal_event_handler>:
 80121d0:	2003      	movs	r0, #3
 80121d2:	4770      	bx	lr

080121d4 <_succeed_event_handler>:
 80121d4:	2004      	movs	r0, #4
 80121d6:	4770      	bx	lr

080121d8 <_abort_event_handler>:
 80121d8:	2006      	movs	r0, #6
 80121da:	4770      	bx	lr

080121dc <_canceled_event_handler>:
 80121dc:	2005      	movs	r0, #5
 80121de:	4770      	bx	lr

080121e0 <rcl_action_transition_goal_state>:
 80121e0:	b2c2      	uxtb	r2, r0
 80121e2:	2a06      	cmp	r2, #6
 80121e4:	d80c      	bhi.n	8012200 <rcl_action_transition_goal_state+0x20>
 80121e6:	2904      	cmp	r1, #4
 80121e8:	d80a      	bhi.n	8012200 <rcl_action_transition_goal_state+0x20>
 80121ea:	eb00 0280 	add.w	r2, r0, r0, lsl #2
 80121ee:	b410      	push	{r4}
 80121f0:	1853      	adds	r3, r2, r1
 80121f2:	4c06      	ldr	r4, [pc, #24]	@ (801220c <rcl_action_transition_goal_state+0x2c>)
 80121f4:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 80121f8:	b123      	cbz	r3, 8012204 <rcl_action_transition_goal_state+0x24>
 80121fa:	f85d 4b04 	ldr.w	r4, [sp], #4
 80121fe:	4718      	bx	r3
 8012200:	2000      	movs	r0, #0
 8012202:	4770      	bx	lr
 8012204:	2000      	movs	r0, #0
 8012206:	f85d 4b04 	ldr.w	r4, [sp], #4
 801220a:	4770      	bx	lr
 801220c:	08016ed4 	.word	0x08016ed4

08012210 <rcl_action_get_zero_initialized_cancel_response>:
 8012210:	b510      	push	{r4, lr}
 8012212:	4c07      	ldr	r4, [pc, #28]	@ (8012230 <rcl_action_get_zero_initialized_cancel_response+0x20>)
 8012214:	4686      	mov	lr, r0
 8012216:	4684      	mov	ip, r0
 8012218:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801221a:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801221e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8012220:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8012224:	6823      	ldr	r3, [r4, #0]
 8012226:	f8cc 3000 	str.w	r3, [ip]
 801222a:	4670      	mov	r0, lr
 801222c:	bd10      	pop	{r4, pc}
 801222e:	bf00      	nop
 8012230:	08016f60 	.word	0x08016f60

08012234 <rclc_action_send_result_request>:
 8012234:	b1d0      	cbz	r0, 801226c <rclc_action_send_result_request+0x38>
 8012236:	b500      	push	{lr}
 8012238:	4684      	mov	ip, r0
 801223a:	b087      	sub	sp, #28
 801223c:	f8d0 0009 	ldr.w	r0, [r0, #9]
 8012240:	f8dc 100d 	ldr.w	r1, [ip, #13]
 8012244:	f8dc 2011 	ldr.w	r2, [ip, #17]
 8012248:	f8dc 3015 	ldr.w	r3, [ip, #21]
 801224c:	f10d 0e08 	add.w	lr, sp, #8
 8012250:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8012254:	f8dc 0004 	ldr.w	r0, [ip, #4]
 8012258:	f10c 0240 	add.w	r2, ip, #64	@ 0x40
 801225c:	a902      	add	r1, sp, #8
 801225e:	3010      	adds	r0, #16
 8012260:	f7ff fbda 	bl	8011a18 <rcl_action_send_result_request>
 8012264:	b920      	cbnz	r0, 8012270 <rclc_action_send_result_request+0x3c>
 8012266:	b007      	add	sp, #28
 8012268:	f85d fb04 	ldr.w	pc, [sp], #4
 801226c:	200b      	movs	r0, #11
 801226e:	4770      	bx	lr
 8012270:	9001      	str	r0, [sp, #4]
 8012272:	f7f8 f865 	bl	800a340 <rcutils_reset_error>
 8012276:	9801      	ldr	r0, [sp, #4]
 8012278:	b007      	add	sp, #28
 801227a:	f85d fb04 	ldr.w	pc, [sp], #4
 801227e:	bf00      	nop

08012280 <rclc_action_take_goal_handle>:
 8012280:	b160      	cbz	r0, 801229c <rclc_action_take_goal_handle+0x1c>
 8012282:	6883      	ldr	r3, [r0, #8]
 8012284:	b143      	cbz	r3, 8012298 <rclc_action_take_goal_handle+0x18>
 8012286:	6819      	ldr	r1, [r3, #0]
 8012288:	6081      	str	r1, [r0, #8]
 801228a:	2200      	movs	r2, #0
 801228c:	721a      	strb	r2, [r3, #8]
 801228e:	68c1      	ldr	r1, [r0, #12]
 8012290:	6019      	str	r1, [r3, #0]
 8012292:	621a      	str	r2, [r3, #32]
 8012294:	849a      	strh	r2, [r3, #36]	@ 0x24
 8012296:	60c3      	str	r3, [r0, #12]
 8012298:	4618      	mov	r0, r3
 801229a:	4770      	bx	lr
 801229c:	4603      	mov	r3, r0
 801229e:	e7fb      	b.n	8012298 <rclc_action_take_goal_handle+0x18>

080122a0 <rclc_action_remove_used_goal_handle>:
 80122a0:	b180      	cbz	r0, 80122c4 <rclc_action_remove_used_goal_handle+0x24>
 80122a2:	b179      	cbz	r1, 80122c4 <rclc_action_remove_used_goal_handle+0x24>
 80122a4:	68c3      	ldr	r3, [r0, #12]
 80122a6:	4299      	cmp	r1, r3
 80122a8:	d00d      	beq.n	80122c6 <rclc_action_remove_used_goal_handle+0x26>
 80122aa:	b12b      	cbz	r3, 80122b8 <rclc_action_remove_used_goal_handle+0x18>
 80122ac:	681a      	ldr	r2, [r3, #0]
 80122ae:	4291      	cmp	r1, r2
 80122b0:	d003      	beq.n	80122ba <rclc_action_remove_used_goal_handle+0x1a>
 80122b2:	4613      	mov	r3, r2
 80122b4:	2b00      	cmp	r3, #0
 80122b6:	d1f9      	bne.n	80122ac <rclc_action_remove_used_goal_handle+0xc>
 80122b8:	4770      	bx	lr
 80122ba:	680a      	ldr	r2, [r1, #0]
 80122bc:	601a      	str	r2, [r3, #0]
 80122be:	6883      	ldr	r3, [r0, #8]
 80122c0:	600b      	str	r3, [r1, #0]
 80122c2:	6081      	str	r1, [r0, #8]
 80122c4:	4770      	bx	lr
 80122c6:	680b      	ldr	r3, [r1, #0]
 80122c8:	60c3      	str	r3, [r0, #12]
 80122ca:	e7f8      	b.n	80122be <rclc_action_remove_used_goal_handle+0x1e>

080122cc <rclc_action_find_goal_handle_by_uuid>:
 80122cc:	b538      	push	{r3, r4, r5, lr}
 80122ce:	b180      	cbz	r0, 80122f2 <rclc_action_find_goal_handle_by_uuid+0x26>
 80122d0:	460d      	mov	r5, r1
 80122d2:	b181      	cbz	r1, 80122f6 <rclc_action_find_goal_handle_by_uuid+0x2a>
 80122d4:	68c4      	ldr	r4, [r0, #12]
 80122d6:	b914      	cbnz	r4, 80122de <rclc_action_find_goal_handle_by_uuid+0x12>
 80122d8:	e009      	b.n	80122ee <rclc_action_find_goal_handle_by_uuid+0x22>
 80122da:	6824      	ldr	r4, [r4, #0]
 80122dc:	b13c      	cbz	r4, 80122ee <rclc_action_find_goal_handle_by_uuid+0x22>
 80122de:	f104 0009 	add.w	r0, r4, #9
 80122e2:	2210      	movs	r2, #16
 80122e4:	4629      	mov	r1, r5
 80122e6:	f003 fa71 	bl	80157cc <memcmp>
 80122ea:	2800      	cmp	r0, #0
 80122ec:	d1f5      	bne.n	80122da <rclc_action_find_goal_handle_by_uuid+0xe>
 80122ee:	4620      	mov	r0, r4
 80122f0:	bd38      	pop	{r3, r4, r5, pc}
 80122f2:	4604      	mov	r4, r0
 80122f4:	e7fb      	b.n	80122ee <rclc_action_find_goal_handle_by_uuid+0x22>
 80122f6:	460c      	mov	r4, r1
 80122f8:	e7f9      	b.n	80122ee <rclc_action_find_goal_handle_by_uuid+0x22>
 80122fa:	bf00      	nop

080122fc <rclc_action_find_first_handle_by_status>:
 80122fc:	b140      	cbz	r0, 8012310 <rclc_action_find_first_handle_by_status+0x14>
 80122fe:	68c0      	ldr	r0, [r0, #12]
 8012300:	b910      	cbnz	r0, 8012308 <rclc_action_find_first_handle_by_status+0xc>
 8012302:	e005      	b.n	8012310 <rclc_action_find_first_handle_by_status+0x14>
 8012304:	6800      	ldr	r0, [r0, #0]
 8012306:	b118      	cbz	r0, 8012310 <rclc_action_find_first_handle_by_status+0x14>
 8012308:	f990 3008 	ldrsb.w	r3, [r0, #8]
 801230c:	428b      	cmp	r3, r1
 801230e:	d1f9      	bne.n	8012304 <rclc_action_find_first_handle_by_status+0x8>
 8012310:	4770      	bx	lr
 8012312:	bf00      	nop

08012314 <rclc_action_find_first_terminated_handle>:
 8012314:	b140      	cbz	r0, 8012328 <rclc_action_find_first_terminated_handle+0x14>
 8012316:	68c0      	ldr	r0, [r0, #12]
 8012318:	b910      	cbnz	r0, 8012320 <rclc_action_find_first_terminated_handle+0xc>
 801231a:	e005      	b.n	8012328 <rclc_action_find_first_terminated_handle+0x14>
 801231c:	6800      	ldr	r0, [r0, #0]
 801231e:	b118      	cbz	r0, 8012328 <rclc_action_find_first_terminated_handle+0x14>
 8012320:	f990 3008 	ldrsb.w	r3, [r0, #8]
 8012324:	2b03      	cmp	r3, #3
 8012326:	ddf9      	ble.n	801231c <rclc_action_find_first_terminated_handle+0x8>
 8012328:	4770      	bx	lr
 801232a:	bf00      	nop

0801232c <rclc_action_find_handle_by_goal_request_sequence_number>:
 801232c:	b170      	cbz	r0, 801234c <rclc_action_find_handle_by_goal_request_sequence_number+0x20>
 801232e:	68c0      	ldr	r0, [r0, #12]
 8012330:	b160      	cbz	r0, 801234c <rclc_action_find_handle_by_goal_request_sequence_number+0x20>
 8012332:	b410      	push	{r4}
 8012334:	e001      	b.n	801233a <rclc_action_find_handle_by_goal_request_sequence_number+0xe>
 8012336:	6800      	ldr	r0, [r0, #0]
 8012338:	b128      	cbz	r0, 8012346 <rclc_action_find_handle_by_goal_request_sequence_number+0x1a>
 801233a:	e9d0 410a 	ldrd	r4, r1, [r0, #40]	@ 0x28
 801233e:	4299      	cmp	r1, r3
 8012340:	bf08      	it	eq
 8012342:	4294      	cmpeq	r4, r2
 8012344:	d1f7      	bne.n	8012336 <rclc_action_find_handle_by_goal_request_sequence_number+0xa>
 8012346:	f85d 4b04 	ldr.w	r4, [sp], #4
 801234a:	4770      	bx	lr
 801234c:	4770      	bx	lr
 801234e:	bf00      	nop

08012350 <rclc_action_find_handle_by_result_request_sequence_number>:
 8012350:	b170      	cbz	r0, 8012370 <rclc_action_find_handle_by_result_request_sequence_number+0x20>
 8012352:	68c0      	ldr	r0, [r0, #12]
 8012354:	b160      	cbz	r0, 8012370 <rclc_action_find_handle_by_result_request_sequence_number+0x20>
 8012356:	b410      	push	{r4}
 8012358:	e001      	b.n	801235e <rclc_action_find_handle_by_result_request_sequence_number+0xe>
 801235a:	6800      	ldr	r0, [r0, #0]
 801235c:	b128      	cbz	r0, 801236a <rclc_action_find_handle_by_result_request_sequence_number+0x1a>
 801235e:	e9d0 4110 	ldrd	r4, r1, [r0, #64]	@ 0x40
 8012362:	4299      	cmp	r1, r3
 8012364:	bf08      	it	eq
 8012366:	4294      	cmpeq	r4, r2
 8012368:	d1f7      	bne.n	801235a <rclc_action_find_handle_by_result_request_sequence_number+0xa>
 801236a:	f85d 4b04 	ldr.w	r4, [sp], #4
 801236e:	4770      	bx	lr
 8012370:	4770      	bx	lr
 8012372:	bf00      	nop

08012374 <rclc_action_find_handle_by_cancel_request_sequence_number>:
 8012374:	b170      	cbz	r0, 8012394 <rclc_action_find_handle_by_cancel_request_sequence_number+0x20>
 8012376:	68c0      	ldr	r0, [r0, #12]
 8012378:	b160      	cbz	r0, 8012394 <rclc_action_find_handle_by_cancel_request_sequence_number+0x20>
 801237a:	b410      	push	{r4}
 801237c:	e001      	b.n	8012382 <rclc_action_find_handle_by_cancel_request_sequence_number+0xe>
 801237e:	6800      	ldr	r0, [r0, #0]
 8012380:	b128      	cbz	r0, 801238e <rclc_action_find_handle_by_cancel_request_sequence_number+0x1a>
 8012382:	e9d0 4116 	ldrd	r4, r1, [r0, #88]	@ 0x58
 8012386:	4299      	cmp	r1, r3
 8012388:	bf08      	it	eq
 801238a:	4294      	cmpeq	r4, r2
 801238c:	d1f7      	bne.n	801237e <rclc_action_find_handle_by_cancel_request_sequence_number+0xa>
 801238e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8012392:	4770      	bx	lr
 8012394:	4770      	bx	lr
 8012396:	bf00      	nop

08012398 <rclc_action_find_first_handle_with_goal_response>:
 8012398:	b140      	cbz	r0, 80123ac <rclc_action_find_first_handle_with_goal_response+0x14>
 801239a:	68c0      	ldr	r0, [r0, #12]
 801239c:	b910      	cbnz	r0, 80123a4 <rclc_action_find_first_handle_with_goal_response+0xc>
 801239e:	e005      	b.n	80123ac <rclc_action_find_first_handle_with_goal_response+0x14>
 80123a0:	6800      	ldr	r0, [r0, #0]
 80123a2:	b118      	cbz	r0, 80123ac <rclc_action_find_first_handle_with_goal_response+0x14>
 80123a4:	f890 3020 	ldrb.w	r3, [r0, #32]
 80123a8:	2b00      	cmp	r3, #0
 80123aa:	d0f9      	beq.n	80123a0 <rclc_action_find_first_handle_with_goal_response+0x8>
 80123ac:	4770      	bx	lr
 80123ae:	bf00      	nop

080123b0 <rclc_action_find_first_handle_with_result_response>:
 80123b0:	b140      	cbz	r0, 80123c4 <rclc_action_find_first_handle_with_result_response+0x14>
 80123b2:	68c0      	ldr	r0, [r0, #12]
 80123b4:	b910      	cbnz	r0, 80123bc <rclc_action_find_first_handle_with_result_response+0xc>
 80123b6:	e005      	b.n	80123c4 <rclc_action_find_first_handle_with_result_response+0x14>
 80123b8:	6800      	ldr	r0, [r0, #0]
 80123ba:	b118      	cbz	r0, 80123c4 <rclc_action_find_first_handle_with_result_response+0x14>
 80123bc:	f890 3023 	ldrb.w	r3, [r0, #35]	@ 0x23
 80123c0:	2b00      	cmp	r3, #0
 80123c2:	d0f9      	beq.n	80123b8 <rclc_action_find_first_handle_with_result_response+0x8>
 80123c4:	4770      	bx	lr
 80123c6:	bf00      	nop

080123c8 <rclc_action_server_response_goal_request>:
 80123c8:	b198      	cbz	r0, 80123f2 <rclc_action_server_response_goal_request+0x2a>
 80123ca:	b510      	push	{r4, lr}
 80123cc:	6844      	ldr	r4, [r0, #4]
 80123ce:	b086      	sub	sp, #24
 80123d0:	2200      	movs	r2, #0
 80123d2:	e9cd 2203 	strd	r2, r2, [sp, #12]
 80123d6:	460b      	mov	r3, r1
 80123d8:	9205      	str	r2, [sp, #20]
 80123da:	f100 0128 	add.w	r1, r0, #40	@ 0x28
 80123de:	aa03      	add	r2, sp, #12
 80123e0:	f104 0010 	add.w	r0, r4, #16
 80123e4:	f88d 300c 	strb.w	r3, [sp, #12]
 80123e8:	f7ff fd4a 	bl	8011e80 <rcl_action_send_goal_response>
 80123ec:	b918      	cbnz	r0, 80123f6 <rclc_action_server_response_goal_request+0x2e>
 80123ee:	b006      	add	sp, #24
 80123f0:	bd10      	pop	{r4, pc}
 80123f2:	200b      	movs	r0, #11
 80123f4:	4770      	bx	lr
 80123f6:	9001      	str	r0, [sp, #4]
 80123f8:	f7f7 ffa2 	bl	800a340 <rcutils_reset_error>
 80123fc:	9801      	ldr	r0, [sp, #4]
 80123fe:	b006      	add	sp, #24
 8012400:	bd10      	pop	{r4, pc}
 8012402:	bf00      	nop
 8012404:	0000      	movs	r0, r0
	...

08012408 <rclc_action_server_goal_cancel_accept>:
 8012408:	b310      	cbz	r0, 8012450 <rclc_action_server_goal_cancel_accept+0x48>
 801240a:	b510      	push	{r4, lr}
 801240c:	b090      	sub	sp, #64	@ 0x40
 801240e:	4604      	mov	r4, r0
 8012410:	a806      	add	r0, sp, #24
 8012412:	f7ff fefd 	bl	8012210 <rcl_action_get_zero_initialized_cancel_response>
 8012416:	2300      	movs	r3, #0
 8012418:	f8d4 0009 	ldr.w	r0, [r4, #9]
 801241c:	f8d4 100d 	ldr.w	r1, [r4, #13]
 8012420:	f8d4 2011 	ldr.w	r2, [r4, #17]
 8012424:	f88d 3018 	strb.w	r3, [sp, #24]
 8012428:	f8d4 3015 	ldr.w	r3, [r4, #21]
 801242c:	f8cd d01c 	str.w	sp, [sp, #28]
 8012430:	46ec      	mov	ip, sp
 8012432:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8012436:	ed9f 7b08 	vldr	d7, [pc, #32]	@ 8012458 <rclc_action_server_goal_cancel_accept+0x50>
 801243a:	6860      	ldr	r0, [r4, #4]
 801243c:	aa06      	add	r2, sp, #24
 801243e:	f104 0158 	add.w	r1, r4, #88	@ 0x58
 8012442:	3010      	adds	r0, #16
 8012444:	ed8d 7b08 	vstr	d7, [sp, #32]
 8012448:	f7ff fdd2 	bl	8011ff0 <rcl_action_send_cancel_response>
 801244c:	b010      	add	sp, #64	@ 0x40
 801244e:	bd10      	pop	{r4, pc}
 8012450:	200b      	movs	r0, #11
 8012452:	4770      	bx	lr
 8012454:	f3af 8000 	nop.w
 8012458:	00000001 	.word	0x00000001
 801245c:	00000001 	.word	0x00000001

08012460 <rclc_action_server_goal_cancel_reject>:
 8012460:	b082      	sub	sp, #8
 8012462:	b530      	push	{r4, r5, lr}
 8012464:	b08b      	sub	sp, #44	@ 0x2c
 8012466:	ac0e      	add	r4, sp, #56	@ 0x38
 8012468:	e884 000c 	stmia.w	r4, {r2, r3}
 801246c:	b188      	cbz	r0, 8012492 <rclc_action_server_goal_cancel_reject+0x32>
 801246e:	4604      	mov	r4, r0
 8012470:	a801      	add	r0, sp, #4
 8012472:	460d      	mov	r5, r1
 8012474:	f7ff fecc 	bl	8012210 <rcl_action_get_zero_initialized_cancel_response>
 8012478:	aa01      	add	r2, sp, #4
 801247a:	a90e      	add	r1, sp, #56	@ 0x38
 801247c:	f104 0010 	add.w	r0, r4, #16
 8012480:	f88d 5004 	strb.w	r5, [sp, #4]
 8012484:	f7ff fdb4 	bl	8011ff0 <rcl_action_send_cancel_response>
 8012488:	b00b      	add	sp, #44	@ 0x2c
 801248a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801248e:	b002      	add	sp, #8
 8012490:	4770      	bx	lr
 8012492:	200b      	movs	r0, #11
 8012494:	b00b      	add	sp, #44	@ 0x2c
 8012496:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801249a:	b002      	add	sp, #8
 801249c:	4770      	bx	lr
 801249e:	bf00      	nop

080124a0 <__atomic_load_8>:
 80124a0:	ea80 4110 	eor.w	r1, r0, r0, lsr #16
 80124a4:	f081 013d 	eor.w	r1, r1, #61	@ 0x3d
 80124a8:	4a15      	ldr	r2, [pc, #84]	@ (8012500 <__atomic_load_8+0x60>)
 80124aa:	4b16      	ldr	r3, [pc, #88]	@ (8012504 <__atomic_load_8+0x64>)
 80124ac:	eb01 01c1 	add.w	r1, r1, r1, lsl #3
 80124b0:	ea81 1111 	eor.w	r1, r1, r1, lsr #4
 80124b4:	fb02 f101 	mul.w	r1, r2, r1
 80124b8:	ea81 31d1 	eor.w	r1, r1, r1, lsr #15
 80124bc:	fba3 2301 	umull	r2, r3, r3, r1
 80124c0:	091b      	lsrs	r3, r3, #4
 80124c2:	eb03 0243 	add.w	r2, r3, r3, lsl #1
 80124c6:	ebc3 03c2 	rsb	r3, r3, r2, lsl #3
 80124ca:	b4d0      	push	{r4, r6, r7}
 80124cc:	4c0e      	ldr	r4, [pc, #56]	@ (8012508 <__atomic_load_8+0x68>)
 80124ce:	1ac9      	subs	r1, r1, r3
 80124d0:	1862      	adds	r2, r4, r1
 80124d2:	f04f 0c01 	mov.w	ip, #1
 80124d6:	e8d2 3f4f 	ldrexb	r3, [r2]
 80124da:	e8c2 cf46 	strexb	r6, ip, [r2]
 80124de:	2e00      	cmp	r6, #0
 80124e0:	d1f9      	bne.n	80124d6 <__atomic_load_8+0x36>
 80124e2:	f3bf 8f5b 	dmb	ish
 80124e6:	b2db      	uxtb	r3, r3
 80124e8:	2b00      	cmp	r3, #0
 80124ea:	d1f4      	bne.n	80124d6 <__atomic_load_8+0x36>
 80124ec:	e9d0 6700 	ldrd	r6, r7, [r0]
 80124f0:	f3bf 8f5b 	dmb	ish
 80124f4:	5463      	strb	r3, [r4, r1]
 80124f6:	4630      	mov	r0, r6
 80124f8:	4639      	mov	r1, r7
 80124fa:	bcd0      	pop	{r4, r6, r7}
 80124fc:	4770      	bx	lr
 80124fe:	bf00      	nop
 8012500:	27d4eb2d 	.word	0x27d4eb2d
 8012504:	b21642c9 	.word	0xb21642c9
 8012508:	2000db70 	.word	0x2000db70

0801250c <__atomic_store_8>:
 801250c:	ea80 4110 	eor.w	r1, r0, r0, lsr #16
 8012510:	f081 013d 	eor.w	r1, r1, #61	@ 0x3d
 8012514:	b570      	push	{r4, r5, r6, lr}
 8012516:	eb01 01c1 	add.w	r1, r1, r1, lsl #3
 801251a:	4c14      	ldr	r4, [pc, #80]	@ (801256c <__atomic_store_8+0x60>)
 801251c:	4d14      	ldr	r5, [pc, #80]	@ (8012570 <__atomic_store_8+0x64>)
 801251e:	ea81 1111 	eor.w	r1, r1, r1, lsr #4
 8012522:	fb04 f101 	mul.w	r1, r4, r1
 8012526:	4c13      	ldr	r4, [pc, #76]	@ (8012574 <__atomic_store_8+0x68>)
 8012528:	ea81 31d1 	eor.w	r1, r1, r1, lsr #15
 801252c:	fba4 4e01 	umull	r4, lr, r4, r1
 8012530:	ea4f 1e1e 	mov.w	lr, lr, lsr #4
 8012534:	eb0e 044e 	add.w	r4, lr, lr, lsl #1
 8012538:	ebce 0ec4 	rsb	lr, lr, r4, lsl #3
 801253c:	eba1 0e0e 	sub.w	lr, r1, lr
 8012540:	eb05 0c0e 	add.w	ip, r5, lr
 8012544:	f04f 0401 	mov.w	r4, #1
 8012548:	e8dc 1f4f 	ldrexb	r1, [ip]
 801254c:	e8cc 4f46 	strexb	r6, r4, [ip]
 8012550:	2e00      	cmp	r6, #0
 8012552:	d1f9      	bne.n	8012548 <__atomic_store_8+0x3c>
 8012554:	f3bf 8f5b 	dmb	ish
 8012558:	b2c9      	uxtb	r1, r1
 801255a:	2900      	cmp	r1, #0
 801255c:	d1f4      	bne.n	8012548 <__atomic_store_8+0x3c>
 801255e:	e9c0 2300 	strd	r2, r3, [r0]
 8012562:	f3bf 8f5b 	dmb	ish
 8012566:	f805 100e 	strb.w	r1, [r5, lr]
 801256a:	bd70      	pop	{r4, r5, r6, pc}
 801256c:	27d4eb2d 	.word	0x27d4eb2d
 8012570:	2000db70 	.word	0x2000db70
 8012574:	b21642c9 	.word	0xb21642c9

08012578 <__atomic_exchange_8>:
 8012578:	ea80 4c10 	eor.w	ip, r0, r0, lsr #16
 801257c:	f08c 0c3d 	eor.w	ip, ip, #61	@ 0x3d
 8012580:	4916      	ldr	r1, [pc, #88]	@ (80125dc <__atomic_exchange_8+0x64>)
 8012582:	eb0c 0ccc 	add.w	ip, ip, ip, lsl #3
 8012586:	ea8c 1c1c 	eor.w	ip, ip, ip, lsr #4
 801258a:	fb01 fc0c 	mul.w	ip, r1, ip
 801258e:	4914      	ldr	r1, [pc, #80]	@ (80125e0 <__atomic_exchange_8+0x68>)
 8012590:	ea8c 3cdc 	eor.w	ip, ip, ip, lsr #15
 8012594:	b570      	push	{r4, r5, r6, lr}
 8012596:	4605      	mov	r5, r0
 8012598:	fba1 010c 	umull	r0, r1, r1, ip
 801259c:	0909      	lsrs	r1, r1, #4
 801259e:	eb01 0041 	add.w	r0, r1, r1, lsl #1
 80125a2:	ebc1 01c0 	rsb	r1, r1, r0, lsl #3
 80125a6:	4e0f      	ldr	r6, [pc, #60]	@ (80125e4 <__atomic_exchange_8+0x6c>)
 80125a8:	ebac 0c01 	sub.w	ip, ip, r1
 80125ac:	eb06 010c 	add.w	r1, r6, ip
 80125b0:	f04f 0e01 	mov.w	lr, #1
 80125b4:	e8d1 4f4f 	ldrexb	r4, [r1]
 80125b8:	e8c1 ef40 	strexb	r0, lr, [r1]
 80125bc:	2800      	cmp	r0, #0
 80125be:	d1f9      	bne.n	80125b4 <__atomic_exchange_8+0x3c>
 80125c0:	f3bf 8f5b 	dmb	ish
 80125c4:	b2e4      	uxtb	r4, r4
 80125c6:	2c00      	cmp	r4, #0
 80125c8:	d1f4      	bne.n	80125b4 <__atomic_exchange_8+0x3c>
 80125ca:	e9d5 0100 	ldrd	r0, r1, [r5]
 80125ce:	e9c5 2300 	strd	r2, r3, [r5]
 80125d2:	f3bf 8f5b 	dmb	ish
 80125d6:	f806 400c 	strb.w	r4, [r6, ip]
 80125da:	bd70      	pop	{r4, r5, r6, pc}
 80125dc:	27d4eb2d 	.word	0x27d4eb2d
 80125e0:	b21642c9 	.word	0xb21642c9
 80125e4:	2000db70 	.word	0x2000db70

080125e8 <rcutils_get_env>:
 80125e8:	b168      	cbz	r0, 8012606 <rcutils_get_env+0x1e>
 80125ea:	b510      	push	{r4, lr}
 80125ec:	460c      	mov	r4, r1
 80125ee:	b129      	cbz	r1, 80125fc <rcutils_get_env+0x14>
 80125f0:	f002 fca6 	bl	8014f40 <getenv>
 80125f4:	b120      	cbz	r0, 8012600 <rcutils_get_env+0x18>
 80125f6:	6020      	str	r0, [r4, #0]
 80125f8:	2000      	movs	r0, #0
 80125fa:	bd10      	pop	{r4, pc}
 80125fc:	4803      	ldr	r0, [pc, #12]	@ (801260c <rcutils_get_env+0x24>)
 80125fe:	bd10      	pop	{r4, pc}
 8012600:	4b03      	ldr	r3, [pc, #12]	@ (8012610 <rcutils_get_env+0x28>)
 8012602:	6023      	str	r3, [r4, #0]
 8012604:	bd10      	pop	{r4, pc}
 8012606:	4803      	ldr	r0, [pc, #12]	@ (8012614 <rcutils_get_env+0x2c>)
 8012608:	4770      	bx	lr
 801260a:	bf00      	nop
 801260c:	08016fa0 	.word	0x08016fa0
 8012610:	080170c4 	.word	0x080170c4
 8012614:	08016f84 	.word	0x08016f84

08012618 <rcutils_is_directory>:
 8012618:	2000      	movs	r0, #0
 801261a:	4770      	bx	lr

0801261c <rcutils_join_path>:
 801261c:	b082      	sub	sp, #8
 801261e:	e88d 000c 	stmia.w	sp, {r2, r3}
 8012622:	2000      	movs	r0, #0
 8012624:	b002      	add	sp, #8
 8012626:	4770      	bx	lr

08012628 <rcutils_to_native_path>:
 8012628:	b084      	sub	sp, #16
 801262a:	a801      	add	r0, sp, #4
 801262c:	e880 000e 	stmia.w	r0, {r1, r2, r3}
 8012630:	b004      	add	sp, #16
 8012632:	2000      	movs	r0, #0
 8012634:	4770      	bx	lr
 8012636:	bf00      	nop

08012638 <rcutils_format_string_limit>:
 8012638:	b40f      	push	{r0, r1, r2, r3}
 801263a:	b5f0      	push	{r4, r5, r6, r7, lr}
 801263c:	b083      	sub	sp, #12
 801263e:	ac08      	add	r4, sp, #32
 8012640:	9e0e      	ldr	r6, [sp, #56]	@ 0x38
 8012642:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8012646:	b34e      	cbz	r6, 801269c <rcutils_format_string_limit+0x64>
 8012648:	a808      	add	r0, sp, #32
 801264a:	f7f7 fe53 	bl	800a2f4 <rcutils_allocator_is_valid>
 801264e:	b328      	cbz	r0, 801269c <rcutils_format_string_limit+0x64>
 8012650:	2100      	movs	r1, #0
 8012652:	ab0f      	add	r3, sp, #60	@ 0x3c
 8012654:	4632      	mov	r2, r6
 8012656:	4608      	mov	r0, r1
 8012658:	e9cd 3300 	strd	r3, r3, [sp]
 801265c:	f000 f8f4 	bl	8012848 <rcutils_vsnprintf>
 8012660:	1c43      	adds	r3, r0, #1
 8012662:	4605      	mov	r5, r0
 8012664:	d01a      	beq.n	801269c <rcutils_format_string_limit+0x64>
 8012666:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8012668:	990c      	ldr	r1, [sp, #48]	@ 0x30
 801266a:	1c47      	adds	r7, r0, #1
 801266c:	429f      	cmp	r7, r3
 801266e:	bf84      	itt	hi
 8012670:	461f      	movhi	r7, r3
 8012672:	f103 35ff 	addhi.w	r5, r3, #4294967295	@ 0xffffffff
 8012676:	4638      	mov	r0, r7
 8012678:	9b08      	ldr	r3, [sp, #32]
 801267a:	4798      	blx	r3
 801267c:	4604      	mov	r4, r0
 801267e:	b168      	cbz	r0, 801269c <rcutils_format_string_limit+0x64>
 8012680:	9b01      	ldr	r3, [sp, #4]
 8012682:	4632      	mov	r2, r6
 8012684:	4639      	mov	r1, r7
 8012686:	f000 f8df 	bl	8012848 <rcutils_vsnprintf>
 801268a:	2800      	cmp	r0, #0
 801268c:	db02      	blt.n	8012694 <rcutils_format_string_limit+0x5c>
 801268e:	2300      	movs	r3, #0
 8012690:	5563      	strb	r3, [r4, r5]
 8012692:	e004      	b.n	801269e <rcutils_format_string_limit+0x66>
 8012694:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8012696:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8012698:	4620      	mov	r0, r4
 801269a:	4798      	blx	r3
 801269c:	2400      	movs	r4, #0
 801269e:	4620      	mov	r0, r4
 80126a0:	b003      	add	sp, #12
 80126a2:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 80126a6:	b004      	add	sp, #16
 80126a8:	4770      	bx	lr
 80126aa:	bf00      	nop

080126ac <rcutils_repl_str>:
 80126ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80126b0:	ed2d 8b02 	vpush	{d8}
 80126b4:	b087      	sub	sp, #28
 80126b6:	4680      	mov	r8, r0
 80126b8:	4608      	mov	r0, r1
 80126ba:	f8cd 8004 	str.w	r8, [sp, #4]
 80126be:	ee08 2a10 	vmov	s16, r2
 80126c2:	468a      	mov	sl, r1
 80126c4:	4699      	mov	r9, r3
 80126c6:	f7ed fd95 	bl	80001f4 <strlen>
 80126ca:	2600      	movs	r6, #0
 80126cc:	4647      	mov	r7, r8
 80126ce:	9002      	str	r0, [sp, #8]
 80126d0:	46b3      	mov	fp, r6
 80126d2:	2510      	movs	r5, #16
 80126d4:	46b0      	mov	r8, r6
 80126d6:	e01d      	b.n	8012714 <rcutils_repl_str+0x68>
 80126d8:	f10b 0b01 	add.w	fp, fp, #1
 80126dc:	455e      	cmp	r6, fp
 80126de:	d211      	bcs.n	8012704 <rcutils_repl_str+0x58>
 80126e0:	442e      	add	r6, r5
 80126e2:	f8d9 3008 	ldr.w	r3, [r9, #8]
 80126e6:	f8d9 2010 	ldr.w	r2, [r9, #16]
 80126ea:	00b1      	lsls	r1, r6, #2
 80126ec:	4798      	blx	r3
 80126ee:	2800      	cmp	r0, #0
 80126f0:	f000 8088 	beq.w	8012804 <rcutils_repl_str+0x158>
 80126f4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80126f8:	f5b5 1f80 	cmp.w	r5, #1048576	@ 0x100000
 80126fc:	4680      	mov	r8, r0
 80126fe:	bf28      	it	cs
 8012700:	f44f 1580 	movcs.w	r5, #1048576	@ 0x100000
 8012704:	9a01      	ldr	r2, [sp, #4]
 8012706:	eb08 038b 	add.w	r3, r8, fp, lsl #2
 801270a:	1aa2      	subs	r2, r4, r2
 801270c:	f843 2c04 	str.w	r2, [r3, #-4]
 8012710:	9b02      	ldr	r3, [sp, #8]
 8012712:	18e7      	adds	r7, r4, r3
 8012714:	4651      	mov	r1, sl
 8012716:	4638      	mov	r0, r7
 8012718:	f003 f8a9 	bl	801586e <strstr>
 801271c:	4604      	mov	r4, r0
 801271e:	4640      	mov	r0, r8
 8012720:	2c00      	cmp	r4, #0
 8012722:	d1d9      	bne.n	80126d8 <rcutils_repl_str+0x2c>
 8012724:	46b8      	mov	r8, r7
 8012726:	4607      	mov	r7, r0
 8012728:	4640      	mov	r0, r8
 801272a:	f7ed fd63 	bl	80001f4 <strlen>
 801272e:	9b01      	ldr	r3, [sp, #4]
 8012730:	eba8 0303 	sub.w	r3, r8, r3
 8012734:	181c      	adds	r4, r3, r0
 8012736:	9404      	str	r4, [sp, #16]
 8012738:	f1bb 0f00 	cmp.w	fp, #0
 801273c:	d04a      	beq.n	80127d4 <rcutils_repl_str+0x128>
 801273e:	ee18 0a10 	vmov	r0, s16
 8012742:	f7ed fd57 	bl	80001f4 <strlen>
 8012746:	9b02      	ldr	r3, [sp, #8]
 8012748:	f8d9 1010 	ldr.w	r1, [r9, #16]
 801274c:	1ac3      	subs	r3, r0, r3
 801274e:	fb0b 4303 	mla	r3, fp, r3, r4
 8012752:	461a      	mov	r2, r3
 8012754:	9305      	str	r3, [sp, #20]
 8012756:	4606      	mov	r6, r0
 8012758:	f8d9 3000 	ldr.w	r3, [r9]
 801275c:	1c50      	adds	r0, r2, #1
 801275e:	4798      	blx	r3
 8012760:	9003      	str	r0, [sp, #12]
 8012762:	2800      	cmp	r0, #0
 8012764:	d04f      	beq.n	8012806 <rcutils_repl_str+0x15a>
 8012766:	f8dd 8004 	ldr.w	r8, [sp, #4]
 801276a:	683a      	ldr	r2, [r7, #0]
 801276c:	4641      	mov	r1, r8
 801276e:	f003 f920 	bl	80159b2 <memcpy>
 8012772:	683d      	ldr	r5, [r7, #0]
 8012774:	9b03      	ldr	r3, [sp, #12]
 8012776:	9701      	str	r7, [sp, #4]
 8012778:	46ba      	mov	sl, r7
 801277a:	441d      	add	r5, r3
 801277c:	9f02      	ldr	r7, [sp, #8]
 801277e:	f8cd 9008 	str.w	r9, [sp, #8]
 8012782:	2401      	movs	r4, #1
 8012784:	46d1      	mov	r9, sl
 8012786:	ee18 aa10 	vmov	sl, s16
 801278a:	e00a      	b.n	80127a2 <rcutils_repl_str+0xf6>
 801278c:	f8d9 5000 	ldr.w	r5, [r9]
 8012790:	1aaa      	subs	r2, r5, r2
 8012792:	1885      	adds	r5, r0, r2
 8012794:	f003 f90d 	bl	80159b2 <memcpy>
 8012798:	45a3      	cmp	fp, r4
 801279a:	f104 0201 	add.w	r2, r4, #1
 801279e:	d935      	bls.n	801280c <rcutils_repl_str+0x160>
 80127a0:	4614      	mov	r4, r2
 80127a2:	4632      	mov	r2, r6
 80127a4:	4651      	mov	r1, sl
 80127a6:	4628      	mov	r0, r5
 80127a8:	f003 f903 	bl	80159b2 <memcpy>
 80127ac:	f859 2b04 	ldr.w	r2, [r9], #4
 80127b0:	45a3      	cmp	fp, r4
 80127b2:	443a      	add	r2, r7
 80127b4:	eb05 0006 	add.w	r0, r5, r6
 80127b8:	eb08 0102 	add.w	r1, r8, r2
 80127bc:	d1e6      	bne.n	801278c <rcutils_repl_str+0xe0>
 80127be:	9b04      	ldr	r3, [sp, #16]
 80127c0:	1a9a      	subs	r2, r3, r2
 80127c2:	e9dd 7901 	ldrd	r7, r9, [sp, #4]
 80127c6:	f003 f8f4 	bl	80159b2 <memcpy>
 80127ca:	9a03      	ldr	r2, [sp, #12]
 80127cc:	9905      	ldr	r1, [sp, #20]
 80127ce:	2300      	movs	r3, #0
 80127d0:	5453      	strb	r3, [r2, r1]
 80127d2:	e00b      	b.n	80127ec <rcutils_repl_str+0x140>
 80127d4:	4620      	mov	r0, r4
 80127d6:	f8d9 3000 	ldr.w	r3, [r9]
 80127da:	f8d9 1010 	ldr.w	r1, [r9, #16]
 80127de:	3001      	adds	r0, #1
 80127e0:	4798      	blx	r3
 80127e2:	9003      	str	r0, [sp, #12]
 80127e4:	b110      	cbz	r0, 80127ec <rcutils_repl_str+0x140>
 80127e6:	9901      	ldr	r1, [sp, #4]
 80127e8:	f003 f8db 	bl	80159a2 <strcpy>
 80127ec:	4638      	mov	r0, r7
 80127ee:	f8d9 3004 	ldr.w	r3, [r9, #4]
 80127f2:	f8d9 1010 	ldr.w	r1, [r9, #16]
 80127f6:	4798      	blx	r3
 80127f8:	9803      	ldr	r0, [sp, #12]
 80127fa:	b007      	add	sp, #28
 80127fc:	ecbd 8b02 	vpop	{d8}
 8012800:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012804:	4647      	mov	r7, r8
 8012806:	2300      	movs	r3, #0
 8012808:	9303      	str	r3, [sp, #12]
 801280a:	e7ef      	b.n	80127ec <rcutils_repl_str+0x140>
 801280c:	e9dd 7901 	ldrd	r7, r9, [sp, #4]
 8012810:	e7db      	b.n	80127ca <rcutils_repl_str+0x11e>
 8012812:	bf00      	nop

08012814 <rcutils_snprintf>:
 8012814:	b40c      	push	{r2, r3}
 8012816:	b530      	push	{r4, r5, lr}
 8012818:	b083      	sub	sp, #12
 801281a:	ab06      	add	r3, sp, #24
 801281c:	f853 2b04 	ldr.w	r2, [r3], #4
 8012820:	9301      	str	r3, [sp, #4]
 8012822:	b152      	cbz	r2, 801283a <rcutils_snprintf+0x26>
 8012824:	b138      	cbz	r0, 8012836 <rcutils_snprintf+0x22>
 8012826:	b141      	cbz	r1, 801283a <rcutils_snprintf+0x26>
 8012828:	f002 ffc2 	bl	80157b0 <vsniprintf>
 801282c:	b003      	add	sp, #12
 801282e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8012832:	b002      	add	sp, #8
 8012834:	4770      	bx	lr
 8012836:	2900      	cmp	r1, #0
 8012838:	d0f6      	beq.n	8012828 <rcutils_snprintf+0x14>
 801283a:	f003 f885 	bl	8015948 <__errno>
 801283e:	2316      	movs	r3, #22
 8012840:	6003      	str	r3, [r0, #0]
 8012842:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8012846:	e7f1      	b.n	801282c <rcutils_snprintf+0x18>

08012848 <rcutils_vsnprintf>:
 8012848:	b570      	push	{r4, r5, r6, lr}
 801284a:	b13a      	cbz	r2, 801285c <rcutils_vsnprintf+0x14>
 801284c:	b120      	cbz	r0, 8012858 <rcutils_vsnprintf+0x10>
 801284e:	b129      	cbz	r1, 801285c <rcutils_vsnprintf+0x14>
 8012850:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8012854:	f002 bfac 	b.w	80157b0 <vsniprintf>
 8012858:	2900      	cmp	r1, #0
 801285a:	d0f9      	beq.n	8012850 <rcutils_vsnprintf+0x8>
 801285c:	f003 f874 	bl	8015948 <__errno>
 8012860:	2316      	movs	r3, #22
 8012862:	6003      	str	r3, [r0, #0]
 8012864:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8012868:	bd70      	pop	{r4, r5, r6, pc}
 801286a:	bf00      	nop

0801286c <rcutils_strdup>:
 801286c:	b084      	sub	sp, #16
 801286e:	b570      	push	{r4, r5, r6, lr}
 8012870:	b082      	sub	sp, #8
 8012872:	ac07      	add	r4, sp, #28
 8012874:	e884 000e 	stmia.w	r4, {r1, r2, r3}
 8012878:	4605      	mov	r5, r0
 801287a:	b1b0      	cbz	r0, 80128aa <rcutils_strdup+0x3e>
 801287c:	f7ed fcba 	bl	80001f4 <strlen>
 8012880:	1c42      	adds	r2, r0, #1
 8012882:	9b07      	ldr	r3, [sp, #28]
 8012884:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8012886:	9201      	str	r2, [sp, #4]
 8012888:	4606      	mov	r6, r0
 801288a:	4610      	mov	r0, r2
 801288c:	4798      	blx	r3
 801288e:	4604      	mov	r4, r0
 8012890:	b128      	cbz	r0, 801289e <rcutils_strdup+0x32>
 8012892:	9a01      	ldr	r2, [sp, #4]
 8012894:	4629      	mov	r1, r5
 8012896:	f003 f88c 	bl	80159b2 <memcpy>
 801289a:	2300      	movs	r3, #0
 801289c:	55a3      	strb	r3, [r4, r6]
 801289e:	4620      	mov	r0, r4
 80128a0:	b002      	add	sp, #8
 80128a2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80128a6:	b004      	add	sp, #16
 80128a8:	4770      	bx	lr
 80128aa:	4604      	mov	r4, r0
 80128ac:	e7f7      	b.n	801289e <rcutils_strdup+0x32>
 80128ae:	bf00      	nop

080128b0 <rcutils_strndup>:
 80128b0:	b082      	sub	sp, #8
 80128b2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80128b4:	ac06      	add	r4, sp, #24
 80128b6:	e884 000c 	stmia.w	r4, {r2, r3}
 80128ba:	4605      	mov	r5, r0
 80128bc:	b188      	cbz	r0, 80128e2 <rcutils_strndup+0x32>
 80128be:	1c4f      	adds	r7, r1, #1
 80128c0:	460e      	mov	r6, r1
 80128c2:	4638      	mov	r0, r7
 80128c4:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80128c6:	4790      	blx	r2
 80128c8:	4604      	mov	r4, r0
 80128ca:	b128      	cbz	r0, 80128d8 <rcutils_strndup+0x28>
 80128cc:	463a      	mov	r2, r7
 80128ce:	4629      	mov	r1, r5
 80128d0:	f003 f86f 	bl	80159b2 <memcpy>
 80128d4:	2300      	movs	r3, #0
 80128d6:	55a3      	strb	r3, [r4, r6]
 80128d8:	4620      	mov	r0, r4
 80128da:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80128de:	b002      	add	sp, #8
 80128e0:	4770      	bx	lr
 80128e2:	4604      	mov	r4, r0
 80128e4:	e7f8      	b.n	80128d8 <rcutils_strndup+0x28>
 80128e6:	bf00      	nop

080128e8 <rcutils_get_zero_initialized_string_map>:
 80128e8:	4b01      	ldr	r3, [pc, #4]	@ (80128f0 <rcutils_get_zero_initialized_string_map+0x8>)
 80128ea:	2000      	movs	r0, #0
 80128ec:	6018      	str	r0, [r3, #0]
 80128ee:	4770      	bx	lr
 80128f0:	2000db88 	.word	0x2000db88

080128f4 <rcutils_string_map_reserve>:
 80128f4:	2800      	cmp	r0, #0
 80128f6:	d05f      	beq.n	80129b8 <rcutils_string_map_reserve+0xc4>
 80128f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80128fc:	460c      	mov	r4, r1
 80128fe:	6801      	ldr	r1, [r0, #0]
 8012900:	b082      	sub	sp, #8
 8012902:	4605      	mov	r5, r0
 8012904:	b129      	cbz	r1, 8012912 <rcutils_string_map_reserve+0x1e>
 8012906:	68cb      	ldr	r3, [r1, #12]
 8012908:	42a3      	cmp	r3, r4
 801290a:	d906      	bls.n	801291a <rcutils_string_map_reserve+0x26>
 801290c:	461c      	mov	r4, r3
 801290e:	2900      	cmp	r1, #0
 8012910:	d1f9      	bne.n	8012906 <rcutils_string_map_reserve+0x12>
 8012912:	201f      	movs	r0, #31
 8012914:	b002      	add	sp, #8
 8012916:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801291a:	688b      	ldr	r3, [r1, #8]
 801291c:	42a3      	cmp	r3, r4
 801291e:	d047      	beq.n	80129b0 <rcutils_string_map_reserve+0xbc>
 8012920:	6a0e      	ldr	r6, [r1, #32]
 8012922:	2c00      	cmp	r4, #0
 8012924:	d034      	beq.n	8012990 <rcutils_string_map_reserve+0x9c>
 8012926:	f1b4 4f80 	cmp.w	r4, #1073741824	@ 0x40000000
 801292a:	d243      	bcs.n	80129b4 <rcutils_string_map_reserve+0xc0>
 801292c:	00a7      	lsls	r7, r4, #2
 801292e:	f8d1 8018 	ldr.w	r8, [r1, #24]
 8012932:	6808      	ldr	r0, [r1, #0]
 8012934:	4632      	mov	r2, r6
 8012936:	4639      	mov	r1, r7
 8012938:	47c0      	blx	r8
 801293a:	2800      	cmp	r0, #0
 801293c:	d03a      	beq.n	80129b4 <rcutils_string_map_reserve+0xc0>
 801293e:	682b      	ldr	r3, [r5, #0]
 8012940:	4632      	mov	r2, r6
 8012942:	6018      	str	r0, [r3, #0]
 8012944:	4639      	mov	r1, r7
 8012946:	6858      	ldr	r0, [r3, #4]
 8012948:	47c0      	blx	r8
 801294a:	2800      	cmp	r0, #0
 801294c:	d032      	beq.n	80129b4 <rcutils_string_map_reserve+0xc0>
 801294e:	682d      	ldr	r5, [r5, #0]
 8012950:	68ab      	ldr	r3, [r5, #8]
 8012952:	6068      	str	r0, [r5, #4]
 8012954:	42a3      	cmp	r3, r4
 8012956:	d226      	bcs.n	80129a6 <rcutils_string_map_reserve+0xb2>
 8012958:	682a      	ldr	r2, [r5, #0]
 801295a:	eb00 0c07 	add.w	ip, r0, r7
 801295e:	eb02 0e83 	add.w	lr, r2, r3, lsl #2
 8012962:	45e6      	cmp	lr, ip
 8012964:	ea4f 0183 	mov.w	r1, r3, lsl #2
 8012968:	eb00 0683 	add.w	r6, r0, r3, lsl #2
 801296c:	d203      	bcs.n	8012976 <rcutils_string_map_reserve+0x82>
 801296e:	eb02 0c07 	add.w	ip, r2, r7
 8012972:	4566      	cmp	r6, ip
 8012974:	d322      	bcc.n	80129bc <rcutils_string_map_reserve+0xc8>
 8012976:	1ae3      	subs	r3, r4, r3
 8012978:	009a      	lsls	r2, r3, #2
 801297a:	4670      	mov	r0, lr
 801297c:	2100      	movs	r1, #0
 801297e:	9201      	str	r2, [sp, #4]
 8012980:	f002 ff4e 	bl	8015820 <memset>
 8012984:	9a01      	ldr	r2, [sp, #4]
 8012986:	2100      	movs	r1, #0
 8012988:	4630      	mov	r0, r6
 801298a:	f002 ff49 	bl	8015820 <memset>
 801298e:	e00a      	b.n	80129a6 <rcutils_string_map_reserve+0xb2>
 8012990:	694f      	ldr	r7, [r1, #20]
 8012992:	6808      	ldr	r0, [r1, #0]
 8012994:	4631      	mov	r1, r6
 8012996:	47b8      	blx	r7
 8012998:	682b      	ldr	r3, [r5, #0]
 801299a:	4631      	mov	r1, r6
 801299c:	6858      	ldr	r0, [r3, #4]
 801299e:	601c      	str	r4, [r3, #0]
 80129a0:	47b8      	blx	r7
 80129a2:	682d      	ldr	r5, [r5, #0]
 80129a4:	606c      	str	r4, [r5, #4]
 80129a6:	2000      	movs	r0, #0
 80129a8:	60ac      	str	r4, [r5, #8]
 80129aa:	b002      	add	sp, #8
 80129ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80129b0:	2000      	movs	r0, #0
 80129b2:	e7af      	b.n	8012914 <rcutils_string_map_reserve+0x20>
 80129b4:	200a      	movs	r0, #10
 80129b6:	e7ad      	b.n	8012914 <rcutils_string_map_reserve+0x20>
 80129b8:	200b      	movs	r0, #11
 80129ba:	4770      	bx	lr
 80129bc:	1f0b      	subs	r3, r1, #4
 80129be:	4418      	add	r0, r3
 80129c0:	4413      	add	r3, r2
 80129c2:	3a04      	subs	r2, #4
 80129c4:	4417      	add	r7, r2
 80129c6:	2200      	movs	r2, #0
 80129c8:	f843 2f04 	str.w	r2, [r3, #4]!
 80129cc:	42bb      	cmp	r3, r7
 80129ce:	f840 2f04 	str.w	r2, [r0, #4]!
 80129d2:	d1f9      	bne.n	80129c8 <rcutils_string_map_reserve+0xd4>
 80129d4:	e7e7      	b.n	80129a6 <rcutils_string_map_reserve+0xb2>
 80129d6:	bf00      	nop

080129d8 <rcutils_string_map_init>:
 80129d8:	b082      	sub	sp, #8
 80129da:	b570      	push	{r4, r5, r6, lr}
 80129dc:	ac04      	add	r4, sp, #16
 80129de:	e884 000c 	stmia.w	r4, {r2, r3}
 80129e2:	b380      	cbz	r0, 8012a46 <rcutils_string_map_init+0x6e>
 80129e4:	6806      	ldr	r6, [r0, #0]
 80129e6:	4604      	mov	r4, r0
 80129e8:	b12e      	cbz	r6, 80129f6 <rcutils_string_map_init+0x1e>
 80129ea:	251e      	movs	r5, #30
 80129ec:	4628      	mov	r0, r5
 80129ee:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80129f2:	b002      	add	sp, #8
 80129f4:	4770      	bx	lr
 80129f6:	a804      	add	r0, sp, #16
 80129f8:	460d      	mov	r5, r1
 80129fa:	f7f7 fc7b 	bl	800a2f4 <rcutils_allocator_is_valid>
 80129fe:	b310      	cbz	r0, 8012a46 <rcutils_string_map_init+0x6e>
 8012a00:	9b04      	ldr	r3, [sp, #16]
 8012a02:	9908      	ldr	r1, [sp, #32]
 8012a04:	2024      	movs	r0, #36	@ 0x24
 8012a06:	4798      	blx	r3
 8012a08:	6020      	str	r0, [r4, #0]
 8012a0a:	b310      	cbz	r0, 8012a52 <rcutils_string_map_init+0x7a>
 8012a0c:	f10d 0e10 	add.w	lr, sp, #16
 8012a10:	e9c0 6600 	strd	r6, r6, [r0]
 8012a14:	e9c0 6602 	strd	r6, r6, [r0, #8]
 8012a18:	f100 0c10 	add.w	ip, r0, #16
 8012a1c:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8012a20:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8012a24:	f8de 3000 	ldr.w	r3, [lr]
 8012a28:	f8cc 3000 	str.w	r3, [ip]
 8012a2c:	4629      	mov	r1, r5
 8012a2e:	4620      	mov	r0, r4
 8012a30:	f7ff ff60 	bl	80128f4 <rcutils_string_map_reserve>
 8012a34:	4605      	mov	r5, r0
 8012a36:	2800      	cmp	r0, #0
 8012a38:	d0d8      	beq.n	80129ec <rcutils_string_map_init+0x14>
 8012a3a:	9b05      	ldr	r3, [sp, #20]
 8012a3c:	9908      	ldr	r1, [sp, #32]
 8012a3e:	6820      	ldr	r0, [r4, #0]
 8012a40:	4798      	blx	r3
 8012a42:	6026      	str	r6, [r4, #0]
 8012a44:	e7d2      	b.n	80129ec <rcutils_string_map_init+0x14>
 8012a46:	250b      	movs	r5, #11
 8012a48:	4628      	mov	r0, r5
 8012a4a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8012a4e:	b002      	add	sp, #8
 8012a50:	4770      	bx	lr
 8012a52:	250a      	movs	r5, #10
 8012a54:	e7ca      	b.n	80129ec <rcutils_string_map_init+0x14>
 8012a56:	bf00      	nop

08012a58 <rcutils_string_map_fini>:
 8012a58:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012a5c:	b082      	sub	sp, #8
 8012a5e:	2800      	cmp	r0, #0
 8012a60:	d03a      	beq.n	8012ad8 <rcutils_string_map_fini+0x80>
 8012a62:	6804      	ldr	r4, [r0, #0]
 8012a64:	4606      	mov	r6, r0
 8012a66:	2c00      	cmp	r4, #0
 8012a68:	d032      	beq.n	8012ad0 <rcutils_string_map_fini+0x78>
 8012a6a:	68a3      	ldr	r3, [r4, #8]
 8012a6c:	b32b      	cbz	r3, 8012aba <rcutils_string_map_fini+0x62>
 8012a6e:	2500      	movs	r5, #0
 8012a70:	6822      	ldr	r2, [r4, #0]
 8012a72:	462f      	mov	r7, r5
 8012a74:	f852 0025 	ldr.w	r0, [r2, r5, lsl #2]
 8012a78:	b1e0      	cbz	r0, 8012ab4 <rcutils_string_map_fini+0x5c>
 8012a7a:	6a21      	ldr	r1, [r4, #32]
 8012a7c:	f8d4 8014 	ldr.w	r8, [r4, #20]
 8012a80:	9101      	str	r1, [sp, #4]
 8012a82:	47c0      	blx	r8
 8012a84:	e9d4 2300 	ldrd	r2, r3, [r4]
 8012a88:	f842 7025 	str.w	r7, [r2, r5, lsl #2]
 8012a8c:	9901      	ldr	r1, [sp, #4]
 8012a8e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8012a92:	47c0      	blx	r8
 8012a94:	68e3      	ldr	r3, [r4, #12]
 8012a96:	6862      	ldr	r2, [r4, #4]
 8012a98:	3b01      	subs	r3, #1
 8012a9a:	f842 7025 	str.w	r7, [r2, r5, lsl #2]
 8012a9e:	60e3      	str	r3, [r4, #12]
 8012aa0:	6834      	ldr	r4, [r6, #0]
 8012aa2:	68a3      	ldr	r3, [r4, #8]
 8012aa4:	3501      	adds	r5, #1
 8012aa6:	429d      	cmp	r5, r3
 8012aa8:	d207      	bcs.n	8012aba <rcutils_string_map_fini+0x62>
 8012aaa:	6822      	ldr	r2, [r4, #0]
 8012aac:	f852 0025 	ldr.w	r0, [r2, r5, lsl #2]
 8012ab0:	2800      	cmp	r0, #0
 8012ab2:	d1e2      	bne.n	8012a7a <rcutils_string_map_fini+0x22>
 8012ab4:	3501      	adds	r5, #1
 8012ab6:	429d      	cmp	r5, r3
 8012ab8:	d3dc      	bcc.n	8012a74 <rcutils_string_map_fini+0x1c>
 8012aba:	2100      	movs	r1, #0
 8012abc:	4630      	mov	r0, r6
 8012abe:	f7ff ff19 	bl	80128f4 <rcutils_string_map_reserve>
 8012ac2:	4604      	mov	r4, r0
 8012ac4:	b920      	cbnz	r0, 8012ad0 <rcutils_string_map_fini+0x78>
 8012ac6:	6830      	ldr	r0, [r6, #0]
 8012ac8:	6943      	ldr	r3, [r0, #20]
 8012aca:	6a01      	ldr	r1, [r0, #32]
 8012acc:	4798      	blx	r3
 8012ace:	6034      	str	r4, [r6, #0]
 8012ad0:	4620      	mov	r0, r4
 8012ad2:	b002      	add	sp, #8
 8012ad4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012ad8:	240b      	movs	r4, #11
 8012ada:	4620      	mov	r0, r4
 8012adc:	b002      	add	sp, #8
 8012ade:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012ae2:	bf00      	nop

08012ae4 <rcutils_string_map_getn>:
 8012ae4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012ae8:	b300      	cbz	r0, 8012b2c <rcutils_string_map_getn+0x48>
 8012aea:	6807      	ldr	r7, [r0, #0]
 8012aec:	b1ff      	cbz	r7, 8012b2e <rcutils_string_map_getn+0x4a>
 8012aee:	4688      	mov	r8, r1
 8012af0:	b1e1      	cbz	r1, 8012b2c <rcutils_string_map_getn+0x48>
 8012af2:	f8d7 a008 	ldr.w	sl, [r7, #8]
 8012af6:	683e      	ldr	r6, [r7, #0]
 8012af8:	f1ba 0f00 	cmp.w	sl, #0
 8012afc:	d016      	beq.n	8012b2c <rcutils_string_map_getn+0x48>
 8012afe:	4691      	mov	r9, r2
 8012b00:	3e04      	subs	r6, #4
 8012b02:	2400      	movs	r4, #0
 8012b04:	f856 5f04 	ldr.w	r5, [r6, #4]!
 8012b08:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8012b0c:	4628      	mov	r0, r5
 8012b0e:	3401      	adds	r4, #1
 8012b10:	b155      	cbz	r5, 8012b28 <rcutils_string_map_getn+0x44>
 8012b12:	f7ed fb6f 	bl	80001f4 <strlen>
 8012b16:	4548      	cmp	r0, r9
 8012b18:	4602      	mov	r2, r0
 8012b1a:	4629      	mov	r1, r5
 8012b1c:	bf38      	it	cc
 8012b1e:	464a      	movcc	r2, r9
 8012b20:	4640      	mov	r0, r8
 8012b22:	f002 fe92 	bl	801584a <strncmp>
 8012b26:	b128      	cbz	r0, 8012b34 <rcutils_string_map_getn+0x50>
 8012b28:	45a2      	cmp	sl, r4
 8012b2a:	d1eb      	bne.n	8012b04 <rcutils_string_map_getn+0x20>
 8012b2c:	2700      	movs	r7, #0
 8012b2e:	4638      	mov	r0, r7
 8012b30:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012b34:	687b      	ldr	r3, [r7, #4]
 8012b36:	f853 700b 	ldr.w	r7, [r3, fp]
 8012b3a:	4638      	mov	r0, r7
 8012b3c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}

08012b40 <rmw_get_zero_initialized_context>:
 8012b40:	b510      	push	{r4, lr}
 8012b42:	4604      	mov	r4, r0
 8012b44:	3010      	adds	r0, #16
 8012b46:	f7f7 fc67 	bl	800a418 <rmw_get_zero_initialized_init_options>
 8012b4a:	2300      	movs	r3, #0
 8012b4c:	2000      	movs	r0, #0
 8012b4e:	2100      	movs	r1, #0
 8012b50:	e9c4 0100 	strd	r0, r1, [r4]
 8012b54:	e9c4 3312 	strd	r3, r3, [r4, #72]	@ 0x48
 8012b58:	60a3      	str	r3, [r4, #8]
 8012b5a:	4620      	mov	r0, r4
 8012b5c:	bd10      	pop	{r4, pc}
 8012b5e:	bf00      	nop

08012b60 <rmw_subscription_content_filter_options_fini>:
 8012b60:	b1b0      	cbz	r0, 8012b90 <rmw_subscription_content_filter_options_fini+0x30>
 8012b62:	b538      	push	{r3, r4, r5, lr}
 8012b64:	4604      	mov	r4, r0
 8012b66:	4608      	mov	r0, r1
 8012b68:	460d      	mov	r5, r1
 8012b6a:	f7f7 fbc3 	bl	800a2f4 <rcutils_allocator_is_valid>
 8012b6e:	b168      	cbz	r0, 8012b8c <rmw_subscription_content_filter_options_fini+0x2c>
 8012b70:	6820      	ldr	r0, [r4, #0]
 8012b72:	b120      	cbz	r0, 8012b7e <rmw_subscription_content_filter_options_fini+0x1e>
 8012b74:	686b      	ldr	r3, [r5, #4]
 8012b76:	6929      	ldr	r1, [r5, #16]
 8012b78:	4798      	blx	r3
 8012b7a:	2300      	movs	r3, #0
 8012b7c:	6023      	str	r3, [r4, #0]
 8012b7e:	1d20      	adds	r0, r4, #4
 8012b80:	f002 f972 	bl	8014e68 <rcutils_string_array_fini>
 8012b84:	3800      	subs	r0, #0
 8012b86:	bf18      	it	ne
 8012b88:	2001      	movne	r0, #1
 8012b8a:	bd38      	pop	{r3, r4, r5, pc}
 8012b8c:	200b      	movs	r0, #11
 8012b8e:	bd38      	pop	{r3, r4, r5, pc}
 8012b90:	200b      	movs	r0, #11
 8012b92:	4770      	bx	lr

08012b94 <rmw_get_default_subscription_options>:
 8012b94:	2200      	movs	r2, #0
 8012b96:	e9c0 2200 	strd	r2, r2, [r0]
 8012b9a:	6082      	str	r2, [r0, #8]
 8012b9c:	4770      	bx	lr
 8012b9e:	bf00      	nop

08012ba0 <rmw_time_equal>:
 8012ba0:	b4f0      	push	{r4, r5, r6, r7}
 8012ba2:	b084      	sub	sp, #16
 8012ba4:	ac04      	add	r4, sp, #16
 8012ba6:	e904 000f 	stmdb	r4, {r0, r1, r2, r3}
 8012baa:	4603      	mov	r3, r0
 8012bac:	4924      	ldr	r1, [pc, #144]	@ (8012c40 <rmw_time_equal+0xa0>)
 8012bae:	9e03      	ldr	r6, [sp, #12]
 8012bb0:	e9dd 5001 	ldrd	r5, r0, [sp, #4]
 8012bb4:	2202      	movs	r2, #2
 8012bb6:	4299      	cmp	r1, r3
 8012bb8:	41aa      	sbcs	r2, r5
 8012bba:	d330      	bcc.n	8012c1e <rmw_time_equal+0x7e>
 8012bbc:	4c21      	ldr	r4, [pc, #132]	@ (8012c44 <rmw_time_equal+0xa4>)
 8012bbe:	fba3 3204 	umull	r3, r2, r3, r4
 8012bc2:	fb04 2205 	mla	r2, r4, r5, r2
 8012bc6:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8012bca:	43dd      	mvns	r5, r3
 8012bcc:	1a8c      	subs	r4, r1, r2
 8012bce:	4285      	cmp	r5, r0
 8012bd0:	41b4      	sbcs	r4, r6
 8012bd2:	d332      	bcc.n	8012c3a <rmw_time_equal+0x9a>
 8012bd4:	eb10 0c03 	adds.w	ip, r0, r3
 8012bd8:	eb42 0106 	adc.w	r1, r2, r6
 8012bdc:	e9dd 3608 	ldrd	r3, r6, [sp, #32]
 8012be0:	4817      	ldr	r0, [pc, #92]	@ (8012c40 <rmw_time_equal+0xa0>)
 8012be2:	9d0a      	ldr	r5, [sp, #40]	@ 0x28
 8012be4:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 8012be6:	2202      	movs	r2, #2
 8012be8:	4298      	cmp	r0, r3
 8012bea:	41b2      	sbcs	r2, r6
 8012bec:	d31c      	bcc.n	8012c28 <rmw_time_equal+0x88>
 8012bee:	4c15      	ldr	r4, [pc, #84]	@ (8012c44 <rmw_time_equal+0xa4>)
 8012bf0:	fba3 3204 	umull	r3, r2, r3, r4
 8012bf4:	fb04 2206 	mla	r2, r4, r6, r2
 8012bf8:	f06f 4000 	mvn.w	r0, #2147483648	@ 0x80000000
 8012bfc:	43de      	mvns	r6, r3
 8012bfe:	1a84      	subs	r4, r0, r2
 8012c00:	42ae      	cmp	r6, r5
 8012c02:	41bc      	sbcs	r4, r7
 8012c04:	d315      	bcc.n	8012c32 <rmw_time_equal+0x92>
 8012c06:	195b      	adds	r3, r3, r5
 8012c08:	eb42 0207 	adc.w	r2, r2, r7
 8012c0c:	428a      	cmp	r2, r1
 8012c0e:	bf08      	it	eq
 8012c10:	4563      	cmpeq	r3, ip
 8012c12:	bf0c      	ite	eq
 8012c14:	2001      	moveq	r0, #1
 8012c16:	2000      	movne	r0, #0
 8012c18:	b004      	add	sp, #16
 8012c1a:	bcf0      	pop	{r4, r5, r6, r7}
 8012c1c:	4770      	bx	lr
 8012c1e:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
 8012c22:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8012c26:	e7d9      	b.n	8012bdc <rmw_time_equal+0x3c>
 8012c28:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8012c2c:	f06f 4200 	mvn.w	r2, #2147483648	@ 0x80000000
 8012c30:	e7ec      	b.n	8012c0c <rmw_time_equal+0x6c>
 8012c32:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8012c36:	4602      	mov	r2, r0
 8012c38:	e7e8      	b.n	8012c0c <rmw_time_equal+0x6c>
 8012c3a:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
 8012c3e:	e7cd      	b.n	8012bdc <rmw_time_equal+0x3c>
 8012c40:	25c17d04 	.word	0x25c17d04
 8012c44:	3b9aca00 	.word	0x3b9aca00

08012c48 <rmw_time_total_nsec>:
 8012c48:	b470      	push	{r4, r5, r6}
 8012c4a:	b085      	sub	sp, #20
 8012c4c:	ac04      	add	r4, sp, #16
 8012c4e:	e904 000f 	stmdb	r4, {r0, r1, r2, r3}
 8012c52:	4603      	mov	r3, r0
 8012c54:	4912      	ldr	r1, [pc, #72]	@ (8012ca0 <rmw_time_total_nsec+0x58>)
 8012c56:	9e03      	ldr	r6, [sp, #12]
 8012c58:	e9dd 5001 	ldrd	r5, r0, [sp, #4]
 8012c5c:	2202      	movs	r2, #2
 8012c5e:	4299      	cmp	r1, r3
 8012c60:	41aa      	sbcs	r2, r5
 8012c62:	d311      	bcc.n	8012c88 <rmw_time_total_nsec+0x40>
 8012c64:	4c0f      	ldr	r4, [pc, #60]	@ (8012ca4 <rmw_time_total_nsec+0x5c>)
 8012c66:	fba3 3204 	umull	r3, r2, r3, r4
 8012c6a:	fb04 2205 	mla	r2, r4, r5, r2
 8012c6e:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8012c72:	43dd      	mvns	r5, r3
 8012c74:	1a8c      	subs	r4, r1, r2
 8012c76:	4285      	cmp	r5, r0
 8012c78:	41b4      	sbcs	r4, r6
 8012c7a:	d30c      	bcc.n	8012c96 <rmw_time_total_nsec+0x4e>
 8012c7c:	1818      	adds	r0, r3, r0
 8012c7e:	eb42 0106 	adc.w	r1, r2, r6
 8012c82:	b005      	add	sp, #20
 8012c84:	bc70      	pop	{r4, r5, r6}
 8012c86:	4770      	bx	lr
 8012c88:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8012c8c:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8012c90:	b005      	add	sp, #20
 8012c92:	bc70      	pop	{r4, r5, r6}
 8012c94:	4770      	bx	lr
 8012c96:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8012c9a:	b005      	add	sp, #20
 8012c9c:	bc70      	pop	{r4, r5, r6}
 8012c9e:	4770      	bx	lr
 8012ca0:	25c17d04 	.word	0x25c17d04
 8012ca4:	3b9aca00 	.word	0x3b9aca00

08012ca8 <rmw_get_zero_initialized_message_info>:
 8012ca8:	b510      	push	{r4, lr}
 8012caa:	2240      	movs	r2, #64	@ 0x40
 8012cac:	4604      	mov	r4, r0
 8012cae:	2100      	movs	r1, #0
 8012cb0:	f002 fdb6 	bl	8015820 <memset>
 8012cb4:	4620      	mov	r0, r4
 8012cb6:	bd10      	pop	{r4, pc}

08012cb8 <rmw_validate_full_topic_name>:
 8012cb8:	2800      	cmp	r0, #0
 8012cba:	d057      	beq.n	8012d6c <rmw_validate_full_topic_name+0xb4>
 8012cbc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012cc0:	460d      	mov	r5, r1
 8012cc2:	2900      	cmp	r1, #0
 8012cc4:	d054      	beq.n	8012d70 <rmw_validate_full_topic_name+0xb8>
 8012cc6:	4616      	mov	r6, r2
 8012cc8:	4604      	mov	r4, r0
 8012cca:	f7ed fa93 	bl	80001f4 <strlen>
 8012cce:	b148      	cbz	r0, 8012ce4 <rmw_validate_full_topic_name+0x2c>
 8012cd0:	7823      	ldrb	r3, [r4, #0]
 8012cd2:	2b2f      	cmp	r3, #47	@ 0x2f
 8012cd4:	d00d      	beq.n	8012cf2 <rmw_validate_full_topic_name+0x3a>
 8012cd6:	2302      	movs	r3, #2
 8012cd8:	602b      	str	r3, [r5, #0]
 8012cda:	b13e      	cbz	r6, 8012cec <rmw_validate_full_topic_name+0x34>
 8012cdc:	2000      	movs	r0, #0
 8012cde:	6030      	str	r0, [r6, #0]
 8012ce0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012ce4:	2301      	movs	r3, #1
 8012ce6:	602b      	str	r3, [r5, #0]
 8012ce8:	2e00      	cmp	r6, #0
 8012cea:	d1f7      	bne.n	8012cdc <rmw_validate_full_topic_name+0x24>
 8012cec:	2000      	movs	r0, #0
 8012cee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012cf2:	1e43      	subs	r3, r0, #1
 8012cf4:	5ce2      	ldrb	r2, [r4, r3]
 8012cf6:	2a2f      	cmp	r2, #47	@ 0x2f
 8012cf8:	d03c      	beq.n	8012d74 <rmw_validate_full_topic_name+0xbc>
 8012cfa:	1e63      	subs	r3, r4, #1
 8012cfc:	eb03 0800 	add.w	r8, r3, r0
 8012d00:	f1c4 0e01 	rsb	lr, r4, #1
 8012d04:	eb0e 0703 	add.w	r7, lr, r3
 8012d08:	f813 1f01 	ldrb.w	r1, [r3, #1]!
 8012d0c:	f021 0220 	bic.w	r2, r1, #32
 8012d10:	3a41      	subs	r2, #65	@ 0x41
 8012d12:	2a19      	cmp	r2, #25
 8012d14:	f1a1 0c2f 	sub.w	ip, r1, #47	@ 0x2f
 8012d18:	d90b      	bls.n	8012d32 <rmw_validate_full_topic_name+0x7a>
 8012d1a:	295f      	cmp	r1, #95	@ 0x5f
 8012d1c:	d009      	beq.n	8012d32 <rmw_validate_full_topic_name+0x7a>
 8012d1e:	f1bc 0f0a 	cmp.w	ip, #10
 8012d22:	d906      	bls.n	8012d32 <rmw_validate_full_topic_name+0x7a>
 8012d24:	2304      	movs	r3, #4
 8012d26:	602b      	str	r3, [r5, #0]
 8012d28:	2e00      	cmp	r6, #0
 8012d2a:	d0df      	beq.n	8012cec <rmw_validate_full_topic_name+0x34>
 8012d2c:	6037      	str	r7, [r6, #0]
 8012d2e:	2000      	movs	r0, #0
 8012d30:	e7d6      	b.n	8012ce0 <rmw_validate_full_topic_name+0x28>
 8012d32:	4543      	cmp	r3, r8
 8012d34:	d1e6      	bne.n	8012d04 <rmw_validate_full_topic_name+0x4c>
 8012d36:	4f1a      	ldr	r7, [pc, #104]	@ (8012da0 <rmw_validate_full_topic_name+0xe8>)
 8012d38:	2301      	movs	r3, #1
 8012d3a:	e004      	b.n	8012d46 <rmw_validate_full_topic_name+0x8e>
 8012d3c:	4298      	cmp	r0, r3
 8012d3e:	f104 0401 	add.w	r4, r4, #1
 8012d42:	d91c      	bls.n	8012d7e <rmw_validate_full_topic_name+0xc6>
 8012d44:	4613      	mov	r3, r2
 8012d46:	4298      	cmp	r0, r3
 8012d48:	f103 0201 	add.w	r2, r3, #1
 8012d4c:	d0f6      	beq.n	8012d3c <rmw_validate_full_topic_name+0x84>
 8012d4e:	7821      	ldrb	r1, [r4, #0]
 8012d50:	292f      	cmp	r1, #47	@ 0x2f
 8012d52:	d1f3      	bne.n	8012d3c <rmw_validate_full_topic_name+0x84>
 8012d54:	7861      	ldrb	r1, [r4, #1]
 8012d56:	292f      	cmp	r1, #47	@ 0x2f
 8012d58:	d01c      	beq.n	8012d94 <rmw_validate_full_topic_name+0xdc>
 8012d5a:	5dc9      	ldrb	r1, [r1, r7]
 8012d5c:	0749      	lsls	r1, r1, #29
 8012d5e:	d5ed      	bpl.n	8012d3c <rmw_validate_full_topic_name+0x84>
 8012d60:	2206      	movs	r2, #6
 8012d62:	602a      	str	r2, [r5, #0]
 8012d64:	2e00      	cmp	r6, #0
 8012d66:	d0c1      	beq.n	8012cec <rmw_validate_full_topic_name+0x34>
 8012d68:	6033      	str	r3, [r6, #0]
 8012d6a:	e7bf      	b.n	8012cec <rmw_validate_full_topic_name+0x34>
 8012d6c:	200b      	movs	r0, #11
 8012d6e:	4770      	bx	lr
 8012d70:	200b      	movs	r0, #11
 8012d72:	e7b5      	b.n	8012ce0 <rmw_validate_full_topic_name+0x28>
 8012d74:	2203      	movs	r2, #3
 8012d76:	602a      	str	r2, [r5, #0]
 8012d78:	2e00      	cmp	r6, #0
 8012d7a:	d1f5      	bne.n	8012d68 <rmw_validate_full_topic_name+0xb0>
 8012d7c:	e7b6      	b.n	8012cec <rmw_validate_full_topic_name+0x34>
 8012d7e:	28f7      	cmp	r0, #247	@ 0xf7
 8012d80:	d802      	bhi.n	8012d88 <rmw_validate_full_topic_name+0xd0>
 8012d82:	2000      	movs	r0, #0
 8012d84:	6028      	str	r0, [r5, #0]
 8012d86:	e7ab      	b.n	8012ce0 <rmw_validate_full_topic_name+0x28>
 8012d88:	2307      	movs	r3, #7
 8012d8a:	602b      	str	r3, [r5, #0]
 8012d8c:	2e00      	cmp	r6, #0
 8012d8e:	d0ad      	beq.n	8012cec <rmw_validate_full_topic_name+0x34>
 8012d90:	23f6      	movs	r3, #246	@ 0xf6
 8012d92:	e7e9      	b.n	8012d68 <rmw_validate_full_topic_name+0xb0>
 8012d94:	2205      	movs	r2, #5
 8012d96:	602a      	str	r2, [r5, #0]
 8012d98:	2e00      	cmp	r6, #0
 8012d9a:	d1e5      	bne.n	8012d68 <rmw_validate_full_topic_name+0xb0>
 8012d9c:	e7a6      	b.n	8012cec <rmw_validate_full_topic_name+0x34>
 8012d9e:	bf00      	nop
 8012da0:	080173b4 	.word	0x080173b4

08012da4 <rmw_validate_namespace_with_size>:
 8012da4:	b340      	cbz	r0, 8012df8 <rmw_validate_namespace_with_size+0x54>
 8012da6:	b570      	push	{r4, r5, r6, lr}
 8012da8:	4614      	mov	r4, r2
 8012daa:	b0c2      	sub	sp, #264	@ 0x108
 8012dac:	b332      	cbz	r2, 8012dfc <rmw_validate_namespace_with_size+0x58>
 8012dae:	2901      	cmp	r1, #1
 8012db0:	460d      	mov	r5, r1
 8012db2:	461e      	mov	r6, r3
 8012db4:	d102      	bne.n	8012dbc <rmw_validate_namespace_with_size+0x18>
 8012db6:	7803      	ldrb	r3, [r0, #0]
 8012db8:	2b2f      	cmp	r3, #47	@ 0x2f
 8012dba:	d012      	beq.n	8012de2 <rmw_validate_namespace_with_size+0x3e>
 8012dbc:	aa01      	add	r2, sp, #4
 8012dbe:	4669      	mov	r1, sp
 8012dc0:	f7ff ff7a 	bl	8012cb8 <rmw_validate_full_topic_name>
 8012dc4:	b978      	cbnz	r0, 8012de6 <rmw_validate_namespace_with_size+0x42>
 8012dc6:	9b00      	ldr	r3, [sp, #0]
 8012dc8:	b14b      	cbz	r3, 8012dde <rmw_validate_namespace_with_size+0x3a>
 8012dca:	2b07      	cmp	r3, #7
 8012dcc:	d007      	beq.n	8012dde <rmw_validate_namespace_with_size+0x3a>
 8012dce:	1e5a      	subs	r2, r3, #1
 8012dd0:	2a05      	cmp	r2, #5
 8012dd2:	d82b      	bhi.n	8012e2c <rmw_validate_namespace_with_size+0x88>
 8012dd4:	e8df f002 	tbb	[pc, r2]
 8012dd8:	1e212427 	.word	0x1e212427
 8012ddc:	141b      	.short	0x141b
 8012dde:	2df5      	cmp	r5, #245	@ 0xf5
 8012de0:	d803      	bhi.n	8012dea <rmw_validate_namespace_with_size+0x46>
 8012de2:	2000      	movs	r0, #0
 8012de4:	6020      	str	r0, [r4, #0]
 8012de6:	b042      	add	sp, #264	@ 0x108
 8012de8:	bd70      	pop	{r4, r5, r6, pc}
 8012dea:	2307      	movs	r3, #7
 8012dec:	6023      	str	r3, [r4, #0]
 8012dee:	2e00      	cmp	r6, #0
 8012df0:	d0f9      	beq.n	8012de6 <rmw_validate_namespace_with_size+0x42>
 8012df2:	23f4      	movs	r3, #244	@ 0xf4
 8012df4:	6033      	str	r3, [r6, #0]
 8012df6:	e7f6      	b.n	8012de6 <rmw_validate_namespace_with_size+0x42>
 8012df8:	200b      	movs	r0, #11
 8012dfa:	4770      	bx	lr
 8012dfc:	200b      	movs	r0, #11
 8012dfe:	e7f2      	b.n	8012de6 <rmw_validate_namespace_with_size+0x42>
 8012e00:	2306      	movs	r3, #6
 8012e02:	6023      	str	r3, [r4, #0]
 8012e04:	2e00      	cmp	r6, #0
 8012e06:	d0ee      	beq.n	8012de6 <rmw_validate_namespace_with_size+0x42>
 8012e08:	9b01      	ldr	r3, [sp, #4]
 8012e0a:	6033      	str	r3, [r6, #0]
 8012e0c:	e7eb      	b.n	8012de6 <rmw_validate_namespace_with_size+0x42>
 8012e0e:	2305      	movs	r3, #5
 8012e10:	6023      	str	r3, [r4, #0]
 8012e12:	e7f7      	b.n	8012e04 <rmw_validate_namespace_with_size+0x60>
 8012e14:	2304      	movs	r3, #4
 8012e16:	6023      	str	r3, [r4, #0]
 8012e18:	e7f4      	b.n	8012e04 <rmw_validate_namespace_with_size+0x60>
 8012e1a:	2303      	movs	r3, #3
 8012e1c:	6023      	str	r3, [r4, #0]
 8012e1e:	e7f1      	b.n	8012e04 <rmw_validate_namespace_with_size+0x60>
 8012e20:	2302      	movs	r3, #2
 8012e22:	6023      	str	r3, [r4, #0]
 8012e24:	e7ee      	b.n	8012e04 <rmw_validate_namespace_with_size+0x60>
 8012e26:	2301      	movs	r3, #1
 8012e28:	6023      	str	r3, [r4, #0]
 8012e2a:	e7eb      	b.n	8012e04 <rmw_validate_namespace_with_size+0x60>
 8012e2c:	4a03      	ldr	r2, [pc, #12]	@ (8012e3c <rmw_validate_namespace_with_size+0x98>)
 8012e2e:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8012e32:	a802      	add	r0, sp, #8
 8012e34:	f7ff fcee 	bl	8012814 <rcutils_snprintf>
 8012e38:	2001      	movs	r0, #1
 8012e3a:	e7d4      	b.n	8012de6 <rmw_validate_namespace_with_size+0x42>
 8012e3c:	08016fbc 	.word	0x08016fbc

08012e40 <rmw_validate_namespace>:
 8012e40:	b168      	cbz	r0, 8012e5e <rmw_validate_namespace+0x1e>
 8012e42:	b570      	push	{r4, r5, r6, lr}
 8012e44:	460d      	mov	r5, r1
 8012e46:	4616      	mov	r6, r2
 8012e48:	4604      	mov	r4, r0
 8012e4a:	f7ed f9d3 	bl	80001f4 <strlen>
 8012e4e:	4633      	mov	r3, r6
 8012e50:	4601      	mov	r1, r0
 8012e52:	462a      	mov	r2, r5
 8012e54:	4620      	mov	r0, r4
 8012e56:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8012e5a:	f7ff bfa3 	b.w	8012da4 <rmw_validate_namespace_with_size>
 8012e5e:	200b      	movs	r0, #11
 8012e60:	4770      	bx	lr
 8012e62:	bf00      	nop

08012e64 <rmw_namespace_validation_result_string>:
 8012e64:	2807      	cmp	r0, #7
 8012e66:	bf9a      	itte	ls
 8012e68:	4b02      	ldrls	r3, [pc, #8]	@ (8012e74 <rmw_namespace_validation_result_string+0x10>)
 8012e6a:	f853 0020 	ldrls.w	r0, [r3, r0, lsl #2]
 8012e6e:	4802      	ldrhi	r0, [pc, #8]	@ (8012e78 <rmw_namespace_validation_result_string+0x14>)
 8012e70:	4770      	bx	lr
 8012e72:	bf00      	nop
 8012e74:	080171b4 	.word	0x080171b4
 8012e78:	0801700c 	.word	0x0801700c

08012e7c <rmw_validate_node_name>:
 8012e7c:	2800      	cmp	r0, #0
 8012e7e:	d03b      	beq.n	8012ef8 <rmw_validate_node_name+0x7c>
 8012e80:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012e84:	460d      	mov	r5, r1
 8012e86:	2900      	cmp	r1, #0
 8012e88:	d038      	beq.n	8012efc <rmw_validate_node_name+0x80>
 8012e8a:	4616      	mov	r6, r2
 8012e8c:	4604      	mov	r4, r0
 8012e8e:	f7ed f9b1 	bl	80001f4 <strlen>
 8012e92:	b1e0      	cbz	r0, 8012ece <rmw_validate_node_name+0x52>
 8012e94:	1e63      	subs	r3, r4, #1
 8012e96:	eb03 0800 	add.w	r8, r3, r0
 8012e9a:	f1c4 0101 	rsb	r1, r4, #1
 8012e9e:	18cf      	adds	r7, r1, r3
 8012ea0:	f813 ef01 	ldrb.w	lr, [r3, #1]!
 8012ea4:	f1ae 0230 	sub.w	r2, lr, #48	@ 0x30
 8012ea8:	f02e 0c20 	bic.w	ip, lr, #32
 8012eac:	2a09      	cmp	r2, #9
 8012eae:	f1ac 0c41 	sub.w	ip, ip, #65	@ 0x41
 8012eb2:	d914      	bls.n	8012ede <rmw_validate_node_name+0x62>
 8012eb4:	f1bc 0f19 	cmp.w	ip, #25
 8012eb8:	d911      	bls.n	8012ede <rmw_validate_node_name+0x62>
 8012eba:	f1be 0f5f 	cmp.w	lr, #95	@ 0x5f
 8012ebe:	d00e      	beq.n	8012ede <rmw_validate_node_name+0x62>
 8012ec0:	2302      	movs	r3, #2
 8012ec2:	602b      	str	r3, [r5, #0]
 8012ec4:	b106      	cbz	r6, 8012ec8 <rmw_validate_node_name+0x4c>
 8012ec6:	6037      	str	r7, [r6, #0]
 8012ec8:	2000      	movs	r0, #0
 8012eca:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012ece:	2301      	movs	r3, #1
 8012ed0:	602b      	str	r3, [r5, #0]
 8012ed2:	2e00      	cmp	r6, #0
 8012ed4:	d0f8      	beq.n	8012ec8 <rmw_validate_node_name+0x4c>
 8012ed6:	2000      	movs	r0, #0
 8012ed8:	6030      	str	r0, [r6, #0]
 8012eda:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012ede:	4543      	cmp	r3, r8
 8012ee0:	d1dd      	bne.n	8012e9e <rmw_validate_node_name+0x22>
 8012ee2:	7822      	ldrb	r2, [r4, #0]
 8012ee4:	4b0d      	ldr	r3, [pc, #52]	@ (8012f1c <rmw_validate_node_name+0xa0>)
 8012ee6:	5cd3      	ldrb	r3, [r2, r3]
 8012ee8:	f013 0304 	ands.w	r3, r3, #4
 8012eec:	d110      	bne.n	8012f10 <rmw_validate_node_name+0x94>
 8012eee:	28ff      	cmp	r0, #255	@ 0xff
 8012ef0:	d806      	bhi.n	8012f00 <rmw_validate_node_name+0x84>
 8012ef2:	602b      	str	r3, [r5, #0]
 8012ef4:	4618      	mov	r0, r3
 8012ef6:	e7e8      	b.n	8012eca <rmw_validate_node_name+0x4e>
 8012ef8:	200b      	movs	r0, #11
 8012efa:	4770      	bx	lr
 8012efc:	200b      	movs	r0, #11
 8012efe:	e7e4      	b.n	8012eca <rmw_validate_node_name+0x4e>
 8012f00:	2204      	movs	r2, #4
 8012f02:	602a      	str	r2, [r5, #0]
 8012f04:	2e00      	cmp	r6, #0
 8012f06:	d0df      	beq.n	8012ec8 <rmw_validate_node_name+0x4c>
 8012f08:	22fe      	movs	r2, #254	@ 0xfe
 8012f0a:	6032      	str	r2, [r6, #0]
 8012f0c:	4618      	mov	r0, r3
 8012f0e:	e7dc      	b.n	8012eca <rmw_validate_node_name+0x4e>
 8012f10:	2303      	movs	r3, #3
 8012f12:	602b      	str	r3, [r5, #0]
 8012f14:	2e00      	cmp	r6, #0
 8012f16:	d1de      	bne.n	8012ed6 <rmw_validate_node_name+0x5a>
 8012f18:	e7d6      	b.n	8012ec8 <rmw_validate_node_name+0x4c>
 8012f1a:	bf00      	nop
 8012f1c:	080173b4 	.word	0x080173b4

08012f20 <rmw_node_name_validation_result_string>:
 8012f20:	2804      	cmp	r0, #4
 8012f22:	bf9a      	itte	ls
 8012f24:	4b02      	ldrls	r3, [pc, #8]	@ (8012f30 <rmw_node_name_validation_result_string+0x10>)
 8012f26:	f853 0020 	ldrls.w	r0, [r3, r0, lsl #2]
 8012f2a:	4802      	ldrhi	r0, [pc, #8]	@ (8012f34 <rmw_node_name_validation_result_string+0x14>)
 8012f2c:	4770      	bx	lr
 8012f2e:	bf00      	nop
 8012f30:	080172c0 	.word	0x080172c0
 8012f34:	080171d4 	.word	0x080171d4

08012f38 <on_status>:
 8012f38:	b082      	sub	sp, #8
 8012f3a:	b002      	add	sp, #8
 8012f3c:	4770      	bx	lr
 8012f3e:	bf00      	nop

08012f40 <on_topic>:
 8012f40:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012f44:	4a22      	ldr	r2, [pc, #136]	@ (8012fd0 <on_topic+0x90>)
 8012f46:	b094      	sub	sp, #80	@ 0x50
 8012f48:	6812      	ldr	r2, [r2, #0]
 8012f4a:	9d1a      	ldr	r5, [sp, #104]	@ 0x68
 8012f4c:	f8bd 606c 	ldrh.w	r6, [sp, #108]	@ 0x6c
 8012f50:	e9cd 3112 	strd	r3, r1, [sp, #72]	@ 0x48
 8012f54:	b3c2      	cbz	r2, 8012fc8 <on_topic+0x88>
 8012f56:	f8bd 104c 	ldrh.w	r1, [sp, #76]	@ 0x4c
 8012f5a:	f89d 004e 	ldrb.w	r0, [sp, #78]	@ 0x4e
 8012f5e:	e001      	b.n	8012f64 <on_topic+0x24>
 8012f60:	6852      	ldr	r2, [r2, #4]
 8012f62:	b38a      	cbz	r2, 8012fc8 <on_topic+0x88>
 8012f64:	6894      	ldr	r4, [r2, #8]
 8012f66:	8aa3      	ldrh	r3, [r4, #20]
 8012f68:	428b      	cmp	r3, r1
 8012f6a:	d1f9      	bne.n	8012f60 <on_topic+0x20>
 8012f6c:	7da3      	ldrb	r3, [r4, #22]
 8012f6e:	4283      	cmp	r3, r0
 8012f70:	d1f6      	bne.n	8012f60 <on_topic+0x20>
 8012f72:	2248      	movs	r2, #72	@ 0x48
 8012f74:	f104 0130 	add.w	r1, r4, #48	@ 0x30
 8012f78:	4668      	mov	r0, sp
 8012f7a:	f002 fd1a 	bl	80159b2 <memcpy>
 8012f7e:	f104 0328 	add.w	r3, r4, #40	@ 0x28
 8012f82:	cb0c      	ldmia	r3, {r2, r3}
 8012f84:	4620      	mov	r0, r4
 8012f86:	f7f8 f9c7 	bl	800b318 <rmw_uxrce_get_static_input_buffer_for_entity>
 8012f8a:	4607      	mov	r7, r0
 8012f8c:	b1e0      	cbz	r0, 8012fc8 <on_topic+0x88>
 8012f8e:	f8d0 8008 	ldr.w	r8, [r0, #8]
 8012f92:	4632      	mov	r2, r6
 8012f94:	4628      	mov	r0, r5
 8012f96:	f108 0110 	add.w	r1, r8, #16
 8012f9a:	f000 fddb 	bl	8013b54 <ucdr_deserialize_array_uint8_t>
 8012f9e:	b930      	cbnz	r0, 8012fae <on_topic+0x6e>
 8012fa0:	480c      	ldr	r0, [pc, #48]	@ (8012fd4 <on_topic+0x94>)
 8012fa2:	4639      	mov	r1, r7
 8012fa4:	b014      	add	sp, #80	@ 0x50
 8012fa6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8012faa:	f000 b8bd 	b.w	8013128 <put_memory>
 8012fae:	f8c8 4814 	str.w	r4, [r8, #2068]	@ 0x814
 8012fb2:	f8c8 6810 	str.w	r6, [r8, #2064]	@ 0x810
 8012fb6:	f000 fcc3 	bl	8013940 <rmw_uros_epoch_nanos>
 8012fba:	f508 6202 	add.w	r2, r8, #2080	@ 0x820
 8012fbe:	2305      	movs	r3, #5
 8012fc0:	e942 0102 	strd	r0, r1, [r2, #-8]
 8012fc4:	f888 3820 	strb.w	r3, [r8, #2080]	@ 0x820
 8012fc8:	b014      	add	sp, #80	@ 0x50
 8012fca:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012fce:	bf00      	nop
 8012fd0:	2000dac4 	.word	0x2000dac4
 8012fd4:	2000dab4 	.word	0x2000dab4

08012fd8 <on_request>:
 8012fd8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012fdc:	4823      	ldr	r0, [pc, #140]	@ (801306c <on_request+0x94>)
 8012fde:	b094      	sub	sp, #80	@ 0x50
 8012fe0:	6800      	ldr	r0, [r0, #0]
 8012fe2:	9f1a      	ldr	r7, [sp, #104]	@ 0x68
 8012fe4:	f8bd 606c 	ldrh.w	r6, [sp, #108]	@ 0x6c
 8012fe8:	9113      	str	r1, [sp, #76]	@ 0x4c
 8012fea:	2800      	cmp	r0, #0
 8012fec:	d03b      	beq.n	8013066 <on_request+0x8e>
 8012fee:	461d      	mov	r5, r3
 8012ff0:	e001      	b.n	8012ff6 <on_request+0x1e>
 8012ff2:	6840      	ldr	r0, [r0, #4]
 8012ff4:	b3b8      	cbz	r0, 8013066 <on_request+0x8e>
 8012ff6:	6884      	ldr	r4, [r0, #8]
 8012ff8:	8b21      	ldrh	r1, [r4, #24]
 8012ffa:	4291      	cmp	r1, r2
 8012ffc:	d1f9      	bne.n	8012ff2 <on_request+0x1a>
 8012ffe:	2248      	movs	r2, #72	@ 0x48
 8013000:	f104 0128 	add.w	r1, r4, #40	@ 0x28
 8013004:	4668      	mov	r0, sp
 8013006:	f002 fcd4 	bl	80159b2 <memcpy>
 801300a:	f104 0320 	add.w	r3, r4, #32
 801300e:	cb0c      	ldmia	r3, {r2, r3}
 8013010:	4620      	mov	r0, r4
 8013012:	f7f8 f981 	bl	800b318 <rmw_uxrce_get_static_input_buffer_for_entity>
 8013016:	4680      	mov	r8, r0
 8013018:	b328      	cbz	r0, 8013066 <on_request+0x8e>
 801301a:	4638      	mov	r0, r7
 801301c:	f8d8 7008 	ldr.w	r7, [r8, #8]
 8013020:	4632      	mov	r2, r6
 8013022:	f107 0110 	add.w	r1, r7, #16
 8013026:	f000 fd95 	bl	8013b54 <ucdr_deserialize_array_uint8_t>
 801302a:	b930      	cbnz	r0, 801303a <on_request+0x62>
 801302c:	4810      	ldr	r0, [pc, #64]	@ (8013070 <on_request+0x98>)
 801302e:	4641      	mov	r1, r8
 8013030:	b014      	add	sp, #80	@ 0x50
 8013032:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8013036:	f000 b877 	b.w	8013128 <put_memory>
 801303a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801303c:	f607 0c28 	addw	ip, r7, #2088	@ 0x828
 8013040:	f8c7 4814 	str.w	r4, [r7, #2068]	@ 0x814
 8013044:	f8c7 6810 	str.w	r6, [r7, #2064]	@ 0x810
 8013048:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801304c:	e895 0003 	ldmia.w	r5, {r0, r1}
 8013050:	e88c 0003 	stmia.w	ip, {r0, r1}
 8013054:	f000 fc74 	bl	8013940 <rmw_uros_epoch_nanos>
 8013058:	f507 6202 	add.w	r2, r7, #2080	@ 0x820
 801305c:	2303      	movs	r3, #3
 801305e:	e942 0102 	strd	r0, r1, [r2, #-8]
 8013062:	f887 3820 	strb.w	r3, [r7, #2080]	@ 0x820
 8013066:	b014      	add	sp, #80	@ 0x50
 8013068:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801306c:	2000da94 	.word	0x2000da94
 8013070:	2000dab4 	.word	0x2000dab4

08013074 <on_reply>:
 8013074:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013078:	4821      	ldr	r0, [pc, #132]	@ (8013100 <on_reply+0x8c>)
 801307a:	b094      	sub	sp, #80	@ 0x50
 801307c:	6800      	ldr	r0, [r0, #0]
 801307e:	9f1a      	ldr	r7, [sp, #104]	@ 0x68
 8013080:	f8bd 606c 	ldrh.w	r6, [sp, #108]	@ 0x6c
 8013084:	9113      	str	r1, [sp, #76]	@ 0x4c
 8013086:	b3b8      	cbz	r0, 80130f8 <on_reply+0x84>
 8013088:	461d      	mov	r5, r3
 801308a:	e001      	b.n	8013090 <on_reply+0x1c>
 801308c:	6840      	ldr	r0, [r0, #4]
 801308e:	b398      	cbz	r0, 80130f8 <on_reply+0x84>
 8013090:	6884      	ldr	r4, [r0, #8]
 8013092:	8b21      	ldrh	r1, [r4, #24]
 8013094:	4291      	cmp	r1, r2
 8013096:	d1f9      	bne.n	801308c <on_reply+0x18>
 8013098:	2248      	movs	r2, #72	@ 0x48
 801309a:	f104 0128 	add.w	r1, r4, #40	@ 0x28
 801309e:	4668      	mov	r0, sp
 80130a0:	f002 fc87 	bl	80159b2 <memcpy>
 80130a4:	f104 0320 	add.w	r3, r4, #32
 80130a8:	cb0c      	ldmia	r3, {r2, r3}
 80130aa:	4620      	mov	r0, r4
 80130ac:	f7f8 f934 	bl	800b318 <rmw_uxrce_get_static_input_buffer_for_entity>
 80130b0:	4680      	mov	r8, r0
 80130b2:	b308      	cbz	r0, 80130f8 <on_reply+0x84>
 80130b4:	4638      	mov	r0, r7
 80130b6:	f8d8 7008 	ldr.w	r7, [r8, #8]
 80130ba:	4632      	mov	r2, r6
 80130bc:	f107 0110 	add.w	r1, r7, #16
 80130c0:	f000 fd48 	bl	8013b54 <ucdr_deserialize_array_uint8_t>
 80130c4:	b930      	cbnz	r0, 80130d4 <on_reply+0x60>
 80130c6:	480f      	ldr	r0, [pc, #60]	@ (8013104 <on_reply+0x90>)
 80130c8:	4641      	mov	r1, r8
 80130ca:	b014      	add	sp, #80	@ 0x50
 80130cc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80130d0:	f000 b82a 	b.w	8013128 <put_memory>
 80130d4:	2200      	movs	r2, #0
 80130d6:	f8c7 282c 	str.w	r2, [r7, #2092]	@ 0x82c
 80130da:	f8c7 4814 	str.w	r4, [r7, #2068]	@ 0x814
 80130de:	f8c7 6810 	str.w	r6, [r7, #2064]	@ 0x810
 80130e2:	f8c7 5828 	str.w	r5, [r7, #2088]	@ 0x828
 80130e6:	f000 fc2b 	bl	8013940 <rmw_uros_epoch_nanos>
 80130ea:	f507 6202 	add.w	r2, r7, #2080	@ 0x820
 80130ee:	2304      	movs	r3, #4
 80130f0:	e942 0102 	strd	r0, r1, [r2, #-8]
 80130f4:	f887 3820 	strb.w	r3, [r7, #2080]	@ 0x820
 80130f8:	b014      	add	sp, #80	@ 0x50
 80130fa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80130fe:	bf00      	nop
 8013100:	200091a4 	.word	0x200091a4
 8013104:	2000dab4 	.word	0x2000dab4

08013108 <get_memory>:
 8013108:	4603      	mov	r3, r0
 801310a:	6840      	ldr	r0, [r0, #4]
 801310c:	b158      	cbz	r0, 8013126 <get_memory+0x1e>
 801310e:	6842      	ldr	r2, [r0, #4]
 8013110:	605a      	str	r2, [r3, #4]
 8013112:	b10a      	cbz	r2, 8013118 <get_memory+0x10>
 8013114:	2100      	movs	r1, #0
 8013116:	6011      	str	r1, [r2, #0]
 8013118:	681a      	ldr	r2, [r3, #0]
 801311a:	6042      	str	r2, [r0, #4]
 801311c:	b102      	cbz	r2, 8013120 <get_memory+0x18>
 801311e:	6010      	str	r0, [r2, #0]
 8013120:	2200      	movs	r2, #0
 8013122:	6002      	str	r2, [r0, #0]
 8013124:	6018      	str	r0, [r3, #0]
 8013126:	4770      	bx	lr

08013128 <put_memory>:
 8013128:	680b      	ldr	r3, [r1, #0]
 801312a:	b10b      	cbz	r3, 8013130 <put_memory+0x8>
 801312c:	684a      	ldr	r2, [r1, #4]
 801312e:	605a      	str	r2, [r3, #4]
 8013130:	684a      	ldr	r2, [r1, #4]
 8013132:	b102      	cbz	r2, 8013136 <put_memory+0xe>
 8013134:	6013      	str	r3, [r2, #0]
 8013136:	6803      	ldr	r3, [r0, #0]
 8013138:	428b      	cmp	r3, r1
 801313a:	6843      	ldr	r3, [r0, #4]
 801313c:	bf08      	it	eq
 801313e:	6002      	streq	r2, [r0, #0]
 8013140:	604b      	str	r3, [r1, #4]
 8013142:	b103      	cbz	r3, 8013146 <put_memory+0x1e>
 8013144:	6019      	str	r1, [r3, #0]
 8013146:	2300      	movs	r3, #0
 8013148:	600b      	str	r3, [r1, #0]
 801314a:	6041      	str	r1, [r0, #4]
 801314c:	4770      	bx	lr
 801314e:	bf00      	nop

08013150 <rmw_destroy_client>:
 8013150:	b570      	push	{r4, r5, r6, lr}
 8013152:	b128      	cbz	r0, 8013160 <rmw_destroy_client+0x10>
 8013154:	4604      	mov	r4, r0
 8013156:	6800      	ldr	r0, [r0, #0]
 8013158:	460d      	mov	r5, r1
 801315a:	f7f8 fa53 	bl	800b604 <is_uxrce_rmw_identifier_valid>
 801315e:	b910      	cbnz	r0, 8013166 <rmw_destroy_client+0x16>
 8013160:	2401      	movs	r4, #1
 8013162:	4620      	mov	r0, r4
 8013164:	bd70      	pop	{r4, r5, r6, pc}
 8013166:	6863      	ldr	r3, [r4, #4]
 8013168:	2b00      	cmp	r3, #0
 801316a:	d0f9      	beq.n	8013160 <rmw_destroy_client+0x10>
 801316c:	2d00      	cmp	r5, #0
 801316e:	d0f7      	beq.n	8013160 <rmw_destroy_client+0x10>
 8013170:	6828      	ldr	r0, [r5, #0]
 8013172:	f7f8 fa47 	bl	800b604 <is_uxrce_rmw_identifier_valid>
 8013176:	2800      	cmp	r0, #0
 8013178:	d0f2      	beq.n	8013160 <rmw_destroy_client+0x10>
 801317a:	686e      	ldr	r6, [r5, #4]
 801317c:	2e00      	cmp	r6, #0
 801317e:	d0ef      	beq.n	8013160 <rmw_destroy_client+0x10>
 8013180:	6864      	ldr	r4, [r4, #4]
 8013182:	6932      	ldr	r2, [r6, #16]
 8013184:	6920      	ldr	r0, [r4, #16]
 8013186:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 801318a:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 801318e:	6819      	ldr	r1, [r3, #0]
 8013190:	f7f9 fd7c 	bl	800cc8c <uxr_buffer_cancel_data>
 8013194:	4602      	mov	r2, r0
 8013196:	6920      	ldr	r0, [r4, #16]
 8013198:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 801319c:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 80131a0:	f7f8 f9b0 	bl	800b504 <run_xrce_session>
 80131a4:	6920      	ldr	r0, [r4, #16]
 80131a6:	6932      	ldr	r2, [r6, #16]
 80131a8:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 80131ac:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 80131b0:	6819      	ldr	r1, [r3, #0]
 80131b2:	f7f9 fae3 	bl	800c77c <uxr_buffer_delete_entity>
 80131b6:	4602      	mov	r2, r0
 80131b8:	6920      	ldr	r0, [r4, #16]
 80131ba:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 80131be:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 80131c2:	f7f8 f99f 	bl	800b504 <run_xrce_session>
 80131c6:	2800      	cmp	r0, #0
 80131c8:	4628      	mov	r0, r5
 80131ca:	bf14      	ite	ne
 80131cc:	2400      	movne	r4, #0
 80131ce:	2402      	moveq	r4, #2
 80131d0:	f7f8 f880 	bl	800b2d4 <rmw_uxrce_fini_client_memory>
 80131d4:	e7c5      	b.n	8013162 <rmw_destroy_client+0x12>
 80131d6:	bf00      	nop

080131d8 <rmw_get_implementation_identifier>:
 80131d8:	4b01      	ldr	r3, [pc, #4]	@ (80131e0 <rmw_get_implementation_identifier+0x8>)
 80131da:	6818      	ldr	r0, [r3, #0]
 80131dc:	4770      	bx	lr
 80131de:	bf00      	nop
 80131e0:	080172ec 	.word	0x080172ec

080131e4 <create_topic>:
 80131e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80131e8:	4605      	mov	r5, r0
 80131ea:	b084      	sub	sp, #16
 80131ec:	4822      	ldr	r0, [pc, #136]	@ (8013278 <create_topic+0x94>)
 80131ee:	460f      	mov	r7, r1
 80131f0:	4616      	mov	r6, r2
 80131f2:	f7ff ff89 	bl	8013108 <get_memory>
 80131f6:	4604      	mov	r4, r0
 80131f8:	2800      	cmp	r0, #0
 80131fa:	d039      	beq.n	8013270 <create_topic+0x8c>
 80131fc:	692b      	ldr	r3, [r5, #16]
 80131fe:	6884      	ldr	r4, [r0, #8]
 8013200:	f8df 807c 	ldr.w	r8, [pc, #124]	@ 8013280 <create_topic+0x9c>
 8013204:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8013208:	e9c4 6505 	strd	r6, r5, [r4, #20]
 801320c:	f8b3 0596 	ldrh.w	r0, [r3, #1430]	@ 0x596
 8013210:	1c42      	adds	r2, r0, #1
 8013212:	2102      	movs	r1, #2
 8013214:	f8a3 2596 	strh.w	r2, [r3, #1430]	@ 0x596
 8013218:	f7f9 fcce 	bl	800cbb8 <uxr_object_id>
 801321c:	223c      	movs	r2, #60	@ 0x3c
 801321e:	6120      	str	r0, [r4, #16]
 8013220:	4641      	mov	r1, r8
 8013222:	4638      	mov	r0, r7
 8013224:	f7f8 f9d4 	bl	800b5d0 <generate_topic_name>
 8013228:	b1f0      	cbz	r0, 8013268 <create_topic+0x84>
 801322a:	4f14      	ldr	r7, [pc, #80]	@ (801327c <create_topic+0x98>)
 801322c:	4630      	mov	r0, r6
 801322e:	2264      	movs	r2, #100	@ 0x64
 8013230:	4639      	mov	r1, r7
 8013232:	f7f8 f99d 	bl	800b570 <generate_type_name>
 8013236:	b1b8      	cbz	r0, 8013268 <create_topic+0x84>
 8013238:	6928      	ldr	r0, [r5, #16]
 801323a:	2306      	movs	r3, #6
 801323c:	f8d0 2384 	ldr.w	r2, [r0, #900]	@ 0x384
 8013240:	f8cd 8000 	str.w	r8, [sp]
 8013244:	e9cd 7301 	strd	r7, r3, [sp, #4]
 8013248:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 801324c:	6811      	ldr	r1, [r2, #0]
 801324e:	696b      	ldr	r3, [r5, #20]
 8013250:	6922      	ldr	r2, [r4, #16]
 8013252:	f7f9 fb11 	bl	800c878 <uxr_buffer_create_topic_bin>
 8013256:	4602      	mov	r2, r0
 8013258:	6928      	ldr	r0, [r5, #16]
 801325a:	f8d0 338c 	ldr.w	r3, [r0, #908]	@ 0x38c
 801325e:	f8d0 1384 	ldr.w	r1, [r0, #900]	@ 0x384
 8013262:	f7f8 f94f 	bl	800b504 <run_xrce_session>
 8013266:	b918      	cbnz	r0, 8013270 <create_topic+0x8c>
 8013268:	4620      	mov	r0, r4
 801326a:	f7f8 f849 	bl	800b300 <rmw_uxrce_fini_topic_memory>
 801326e:	2400      	movs	r4, #0
 8013270:	4620      	mov	r0, r4
 8013272:	b004      	add	sp, #16
 8013274:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013278:	2000dad4 	.word	0x2000dad4
 801327c:	2000dbc8 	.word	0x2000dbc8
 8013280:	2000db8c 	.word	0x2000db8c

08013284 <destroy_topic>:
 8013284:	b538      	push	{r3, r4, r5, lr}
 8013286:	6985      	ldr	r5, [r0, #24]
 8013288:	b1d5      	cbz	r5, 80132c0 <destroy_topic+0x3c>
 801328a:	4604      	mov	r4, r0
 801328c:	6928      	ldr	r0, [r5, #16]
 801328e:	6922      	ldr	r2, [r4, #16]
 8013290:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 8013294:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8013298:	6819      	ldr	r1, [r3, #0]
 801329a:	f7f9 fa6f 	bl	800c77c <uxr_buffer_delete_entity>
 801329e:	4602      	mov	r2, r0
 80132a0:	6928      	ldr	r0, [r5, #16]
 80132a2:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 80132a6:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 80132aa:	f7f8 f92b 	bl	800b504 <run_xrce_session>
 80132ae:	2800      	cmp	r0, #0
 80132b0:	4620      	mov	r0, r4
 80132b2:	bf14      	ite	ne
 80132b4:	2400      	movne	r4, #0
 80132b6:	2402      	moveq	r4, #2
 80132b8:	f7f8 f822 	bl	800b300 <rmw_uxrce_fini_topic_memory>
 80132bc:	4620      	mov	r0, r4
 80132be:	bd38      	pop	{r3, r4, r5, pc}
 80132c0:	2401      	movs	r4, #1
 80132c2:	4620      	mov	r0, r4
 80132c4:	bd38      	pop	{r3, r4, r5, pc}
 80132c6:	bf00      	nop

080132c8 <rmw_send_request>:
 80132c8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80132cc:	4604      	mov	r4, r0
 80132ce:	6800      	ldr	r0, [r0, #0]
 80132d0:	b08b      	sub	sp, #44	@ 0x2c
 80132d2:	460e      	mov	r6, r1
 80132d4:	4615      	mov	r5, r2
 80132d6:	b128      	cbz	r0, 80132e4 <rmw_send_request+0x1c>
 80132d8:	4b21      	ldr	r3, [pc, #132]	@ (8013360 <rmw_send_request+0x98>)
 80132da:	6819      	ldr	r1, [r3, #0]
 80132dc:	f7ec ff80 	bl	80001e0 <strcmp>
 80132e0:	2800      	cmp	r0, #0
 80132e2:	d139      	bne.n	8013358 <rmw_send_request+0x90>
 80132e4:	6864      	ldr	r4, [r4, #4]
 80132e6:	6963      	ldr	r3, [r4, #20]
 80132e8:	f8d4 8078 	ldr.w	r8, [r4, #120]	@ 0x78
 80132ec:	689b      	ldr	r3, [r3, #8]
 80132ee:	4798      	blx	r3
 80132f0:	f8d0 9004 	ldr.w	r9, [r0, #4]
 80132f4:	4630      	mov	r0, r6
 80132f6:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80132fa:	4798      	blx	r3
 80132fc:	f8d8 3010 	ldr.w	r3, [r8, #16]
 8013300:	9000      	str	r0, [sp, #0]
 8013302:	6922      	ldr	r2, [r4, #16]
 8013304:	6f21      	ldr	r1, [r4, #112]	@ 0x70
 8013306:	f503 7028 	add.w	r0, r3, #672	@ 0x2a0
 801330a:	ab02      	add	r3, sp, #8
 801330c:	f001 fa3e 	bl	801478c <uxr_prepare_output_stream>
 8013310:	2700      	movs	r7, #0
 8013312:	6028      	str	r0, [r5, #0]
 8013314:	606f      	str	r7, [r5, #4]
 8013316:	b198      	cbz	r0, 8013340 <rmw_send_request+0x78>
 8013318:	f8d9 3008 	ldr.w	r3, [r9, #8]
 801331c:	a902      	add	r1, sp, #8
 801331e:	4630      	mov	r0, r6
 8013320:	4798      	blx	r3
 8013322:	f894 3072 	ldrb.w	r3, [r4, #114]	@ 0x72
 8013326:	f8d8 0010 	ldr.w	r0, [r8, #16]
 801332a:	2b01      	cmp	r3, #1
 801332c:	d00c      	beq.n	8013348 <rmw_send_request+0x80>
 801332e:	6f61      	ldr	r1, [r4, #116]	@ 0x74
 8013330:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8013334:	f7fa fa80 	bl	800d838 <uxr_run_session_until_confirm_delivery>
 8013338:	4638      	mov	r0, r7
 801333a:	b00b      	add	sp, #44	@ 0x2c
 801333c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8013340:	2001      	movs	r0, #1
 8013342:	b00b      	add	sp, #44	@ 0x2c
 8013344:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8013348:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 801334c:	f7f9 feb4 	bl	800d0b8 <uxr_flash_output_streams>
 8013350:	4638      	mov	r0, r7
 8013352:	b00b      	add	sp, #44	@ 0x2c
 8013354:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8013358:	200c      	movs	r0, #12
 801335a:	b00b      	add	sp, #44	@ 0x2c
 801335c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8013360:	080172ec 	.word	0x080172ec

08013364 <rmw_take_request>:
 8013364:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8013368:	4605      	mov	r5, r0
 801336a:	6800      	ldr	r0, [r0, #0]
 801336c:	b089      	sub	sp, #36	@ 0x24
 801336e:	460c      	mov	r4, r1
 8013370:	4690      	mov	r8, r2
 8013372:	461e      	mov	r6, r3
 8013374:	b128      	cbz	r0, 8013382 <rmw_take_request+0x1e>
 8013376:	4b28      	ldr	r3, [pc, #160]	@ (8013418 <rmw_take_request+0xb4>)
 8013378:	6819      	ldr	r1, [r3, #0]
 801337a:	f7ec ff31 	bl	80001e0 <strcmp>
 801337e:	2800      	cmp	r0, #0
 8013380:	d146      	bne.n	8013410 <rmw_take_request+0xac>
 8013382:	b10e      	cbz	r6, 8013388 <rmw_take_request+0x24>
 8013384:	2300      	movs	r3, #0
 8013386:	7033      	strb	r3, [r6, #0]
 8013388:	f8d5 9004 	ldr.w	r9, [r5, #4]
 801338c:	f7f8 f83c 	bl	800b408 <rmw_uxrce_clean_expired_static_input_buffer>
 8013390:	4648      	mov	r0, r9
 8013392:	f7f8 f811 	bl	800b3b8 <rmw_uxrce_find_static_input_buffer_by_owner>
 8013396:	4607      	mov	r7, r0
 8013398:	b3b0      	cbz	r0, 8013408 <rmw_take_request+0xa4>
 801339a:	6885      	ldr	r5, [r0, #8]
 801339c:	f8d5 3838 	ldr.w	r3, [r5, #2104]	@ 0x838
 80133a0:	f8d5 283c 	ldr.w	r2, [r5, #2108]	@ 0x83c
 80133a4:	e9c4 2308 	strd	r2, r3, [r4, #32]
 80133a8:	f895 3837 	ldrb.w	r3, [r5, #2103]	@ 0x837
 80133ac:	7423      	strb	r3, [r4, #16]
 80133ae:	f8b5 3834 	ldrh.w	r3, [r5, #2100]	@ 0x834
 80133b2:	f895 2836 	ldrb.w	r2, [r5, #2102]	@ 0x836
 80133b6:	74e2      	strb	r2, [r4, #19]
 80133b8:	f8a4 3011 	strh.w	r3, [r4, #17]
 80133bc:	f8d5 2828 	ldr.w	r2, [r5, #2088]	@ 0x828
 80133c0:	f8d5 382c 	ldr.w	r3, [r5, #2092]	@ 0x82c
 80133c4:	f8d5 1830 	ldr.w	r1, [r5, #2096]	@ 0x830
 80133c8:	61e1      	str	r1, [r4, #28]
 80133ca:	6162      	str	r2, [r4, #20]
 80133cc:	61a3      	str	r3, [r4, #24]
 80133ce:	f8d9 3014 	ldr.w	r3, [r9, #20]
 80133d2:	689b      	ldr	r3, [r3, #8]
 80133d4:	4798      	blx	r3
 80133d6:	6844      	ldr	r4, [r0, #4]
 80133d8:	f8d5 2810 	ldr.w	r2, [r5, #2064]	@ 0x810
 80133dc:	f105 0110 	add.w	r1, r5, #16
 80133e0:	4668      	mov	r0, sp
 80133e2:	f7f9 f95b 	bl	800c69c <ucdr_init_buffer>
 80133e6:	68e3      	ldr	r3, [r4, #12]
 80133e8:	4641      	mov	r1, r8
 80133ea:	4668      	mov	r0, sp
 80133ec:	4798      	blx	r3
 80133ee:	4639      	mov	r1, r7
 80133f0:	4604      	mov	r4, r0
 80133f2:	480a      	ldr	r0, [pc, #40]	@ (801341c <rmw_take_request+0xb8>)
 80133f4:	f7ff fe98 	bl	8013128 <put_memory>
 80133f8:	b106      	cbz	r6, 80133fc <rmw_take_request+0x98>
 80133fa:	7034      	strb	r4, [r6, #0]
 80133fc:	f084 0001 	eor.w	r0, r4, #1
 8013400:	b2c0      	uxtb	r0, r0
 8013402:	b009      	add	sp, #36	@ 0x24
 8013404:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8013408:	2001      	movs	r0, #1
 801340a:	b009      	add	sp, #36	@ 0x24
 801340c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8013410:	200c      	movs	r0, #12
 8013412:	b009      	add	sp, #36	@ 0x24
 8013414:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8013418:	080172ec 	.word	0x080172ec
 801341c:	2000dab4 	.word	0x2000dab4

08013420 <rmw_send_response>:
 8013420:	b5f0      	push	{r4, r5, r6, r7, lr}
 8013422:	4605      	mov	r5, r0
 8013424:	6800      	ldr	r0, [r0, #0]
 8013426:	b091      	sub	sp, #68	@ 0x44
 8013428:	460c      	mov	r4, r1
 801342a:	4616      	mov	r6, r2
 801342c:	b128      	cbz	r0, 801343a <rmw_send_response+0x1a>
 801342e:	4b29      	ldr	r3, [pc, #164]	@ (80134d4 <rmw_send_response+0xb4>)
 8013430:	6819      	ldr	r1, [r3, #0]
 8013432:	f7ec fed5 	bl	80001e0 <strcmp>
 8013436:	2800      	cmp	r0, #0
 8013438:	d141      	bne.n	80134be <rmw_send_response+0x9e>
 801343a:	e9d4 2304 	ldrd	r2, r3, [r4, #16]
 801343e:	9306      	str	r3, [sp, #24]
 8013440:	4623      	mov	r3, r4
 8013442:	9207      	str	r2, [sp, #28]
 8013444:	f813 2b01 	ldrb.w	r2, [r3], #1
 8013448:	686d      	ldr	r5, [r5, #4]
 801344a:	789b      	ldrb	r3, [r3, #2]
 801344c:	68a1      	ldr	r1, [r4, #8]
 801344e:	f88d 2017 	strb.w	r2, [sp, #23]
 8013452:	f88d 3016 	strb.w	r3, [sp, #22]
 8013456:	68e2      	ldr	r2, [r4, #12]
 8013458:	f8b4 3001 	ldrh.w	r3, [r4, #1]
 801345c:	6860      	ldr	r0, [r4, #4]
 801345e:	f8ad 3014 	strh.w	r3, [sp, #20]
 8013462:	ab02      	add	r3, sp, #8
 8013464:	c307      	stmia	r3!, {r0, r1, r2}
 8013466:	696b      	ldr	r3, [r5, #20]
 8013468:	6faf      	ldr	r7, [r5, #120]	@ 0x78
 801346a:	68db      	ldr	r3, [r3, #12]
 801346c:	4798      	blx	r3
 801346e:	6844      	ldr	r4, [r0, #4]
 8013470:	4630      	mov	r0, r6
 8013472:	6923      	ldr	r3, [r4, #16]
 8013474:	4798      	blx	r3
 8013476:	f100 0318 	add.w	r3, r0, #24
 801347a:	6938      	ldr	r0, [r7, #16]
 801347c:	9300      	str	r3, [sp, #0]
 801347e:	692a      	ldr	r2, [r5, #16]
 8013480:	6f29      	ldr	r1, [r5, #112]	@ 0x70
 8013482:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8013486:	ab08      	add	r3, sp, #32
 8013488:	f001 f980 	bl	801478c <uxr_prepare_output_stream>
 801348c:	b910      	cbnz	r0, 8013494 <rmw_send_response+0x74>
 801348e:	2001      	movs	r0, #1
 8013490:	b011      	add	sp, #68	@ 0x44
 8013492:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8013494:	a902      	add	r1, sp, #8
 8013496:	a808      	add	r0, sp, #32
 8013498:	f7fc fb24 	bl	800fae4 <uxr_serialize_SampleIdentity>
 801349c:	68a3      	ldr	r3, [r4, #8]
 801349e:	a908      	add	r1, sp, #32
 80134a0:	4630      	mov	r0, r6
 80134a2:	4798      	blx	r3
 80134a4:	f895 3072 	ldrb.w	r3, [r5, #114]	@ 0x72
 80134a8:	6938      	ldr	r0, [r7, #16]
 80134aa:	2b01      	cmp	r3, #1
 80134ac:	d00a      	beq.n	80134c4 <rmw_send_response+0xa4>
 80134ae:	6f69      	ldr	r1, [r5, #116]	@ 0x74
 80134b0:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 80134b4:	f7fa f9c0 	bl	800d838 <uxr_run_session_until_confirm_delivery>
 80134b8:	2000      	movs	r0, #0
 80134ba:	b011      	add	sp, #68	@ 0x44
 80134bc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80134be:	200c      	movs	r0, #12
 80134c0:	b011      	add	sp, #68	@ 0x44
 80134c2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80134c4:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 80134c8:	f7f9 fdf6 	bl	800d0b8 <uxr_flash_output_streams>
 80134cc:	2000      	movs	r0, #0
 80134ce:	b011      	add	sp, #68	@ 0x44
 80134d0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80134d2:	bf00      	nop
 80134d4:	080172ec 	.word	0x080172ec

080134d8 <rmw_take_response>:
 80134d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80134dc:	4604      	mov	r4, r0
 80134de:	6800      	ldr	r0, [r0, #0]
 80134e0:	b088      	sub	sp, #32
 80134e2:	4688      	mov	r8, r1
 80134e4:	4617      	mov	r7, r2
 80134e6:	461d      	mov	r5, r3
 80134e8:	b120      	cbz	r0, 80134f4 <rmw_take_response+0x1c>
 80134ea:	4b1e      	ldr	r3, [pc, #120]	@ (8013564 <rmw_take_response+0x8c>)
 80134ec:	6819      	ldr	r1, [r3, #0]
 80134ee:	f7ec fe77 	bl	80001e0 <strcmp>
 80134f2:	bb78      	cbnz	r0, 8013554 <rmw_take_response+0x7c>
 80134f4:	b10d      	cbz	r5, 80134fa <rmw_take_response+0x22>
 80134f6:	2300      	movs	r3, #0
 80134f8:	702b      	strb	r3, [r5, #0]
 80134fa:	6864      	ldr	r4, [r4, #4]
 80134fc:	f7f7 ff84 	bl	800b408 <rmw_uxrce_clean_expired_static_input_buffer>
 8013500:	4620      	mov	r0, r4
 8013502:	f7f7 ff59 	bl	800b3b8 <rmw_uxrce_find_static_input_buffer_by_owner>
 8013506:	4606      	mov	r6, r0
 8013508:	b340      	cbz	r0, 801355c <rmw_take_response+0x84>
 801350a:	6963      	ldr	r3, [r4, #20]
 801350c:	6884      	ldr	r4, [r0, #8]
 801350e:	68db      	ldr	r3, [r3, #12]
 8013510:	f504 6203 	add.w	r2, r4, #2096	@ 0x830
 8013514:	e952 0102 	ldrd	r0, r1, [r2, #-8]
 8013518:	e9c8 0108 	strd	r0, r1, [r8, #32]
 801351c:	4798      	blx	r3
 801351e:	f8d0 8004 	ldr.w	r8, [r0, #4]
 8013522:	f8d4 2810 	ldr.w	r2, [r4, #2064]	@ 0x810
 8013526:	f104 0110 	add.w	r1, r4, #16
 801352a:	4668      	mov	r0, sp
 801352c:	f7f9 f8b6 	bl	800c69c <ucdr_init_buffer>
 8013530:	4639      	mov	r1, r7
 8013532:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8013536:	4668      	mov	r0, sp
 8013538:	4798      	blx	r3
 801353a:	4631      	mov	r1, r6
 801353c:	4604      	mov	r4, r0
 801353e:	480a      	ldr	r0, [pc, #40]	@ (8013568 <rmw_take_response+0x90>)
 8013540:	f7ff fdf2 	bl	8013128 <put_memory>
 8013544:	b105      	cbz	r5, 8013548 <rmw_take_response+0x70>
 8013546:	702c      	strb	r4, [r5, #0]
 8013548:	f084 0001 	eor.w	r0, r4, #1
 801354c:	b2c0      	uxtb	r0, r0
 801354e:	b008      	add	sp, #32
 8013550:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013554:	200c      	movs	r0, #12
 8013556:	b008      	add	sp, #32
 8013558:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801355c:	2001      	movs	r0, #1
 801355e:	b008      	add	sp, #32
 8013560:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013564:	080172ec 	.word	0x080172ec
 8013568:	2000dab4 	.word	0x2000dab4

0801356c <rmw_take_with_info>:
 801356c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801356e:	4604      	mov	r4, r0
 8013570:	6800      	ldr	r0, [r0, #0]
 8013572:	b089      	sub	sp, #36	@ 0x24
 8013574:	460f      	mov	r7, r1
 8013576:	4615      	mov	r5, r2
 8013578:	b128      	cbz	r0, 8013586 <rmw_take_with_info+0x1a>
 801357a:	4b24      	ldr	r3, [pc, #144]	@ (801360c <rmw_take_with_info+0xa0>)
 801357c:	6819      	ldr	r1, [r3, #0]
 801357e:	f7ec fe2f 	bl	80001e0 <strcmp>
 8013582:	2800      	cmp	r0, #0
 8013584:	d13e      	bne.n	8013604 <rmw_take_with_info+0x98>
 8013586:	b305      	cbz	r5, 80135ca <rmw_take_with_info+0x5e>
 8013588:	6864      	ldr	r4, [r4, #4]
 801358a:	2300      	movs	r3, #0
 801358c:	702b      	strb	r3, [r5, #0]
 801358e:	f7f7 ff3b 	bl	800b408 <rmw_uxrce_clean_expired_static_input_buffer>
 8013592:	4620      	mov	r0, r4
 8013594:	f7f7 ff10 	bl	800b3b8 <rmw_uxrce_find_static_input_buffer_by_owner>
 8013598:	4606      	mov	r6, r0
 801359a:	b1f0      	cbz	r0, 80135da <rmw_take_with_info+0x6e>
 801359c:	6881      	ldr	r1, [r0, #8]
 801359e:	4668      	mov	r0, sp
 80135a0:	f8d1 2810 	ldr.w	r2, [r1, #2064]	@ 0x810
 80135a4:	3110      	adds	r1, #16
 80135a6:	f7f9 f879 	bl	800c69c <ucdr_init_buffer>
 80135aa:	69a3      	ldr	r3, [r4, #24]
 80135ac:	4639      	mov	r1, r7
 80135ae:	68db      	ldr	r3, [r3, #12]
 80135b0:	4668      	mov	r0, sp
 80135b2:	4798      	blx	r3
 80135b4:	4631      	mov	r1, r6
 80135b6:	4604      	mov	r4, r0
 80135b8:	4815      	ldr	r0, [pc, #84]	@ (8013610 <rmw_take_with_info+0xa4>)
 80135ba:	f7ff fdb5 	bl	8013128 <put_memory>
 80135be:	702c      	strb	r4, [r5, #0]
 80135c0:	f084 0001 	eor.w	r0, r4, #1
 80135c4:	b2c0      	uxtb	r0, r0
 80135c6:	b009      	add	sp, #36	@ 0x24
 80135c8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80135ca:	6864      	ldr	r4, [r4, #4]
 80135cc:	f7f7 ff1c 	bl	800b408 <rmw_uxrce_clean_expired_static_input_buffer>
 80135d0:	4620      	mov	r0, r4
 80135d2:	f7f7 fef1 	bl	800b3b8 <rmw_uxrce_find_static_input_buffer_by_owner>
 80135d6:	4605      	mov	r5, r0
 80135d8:	b910      	cbnz	r0, 80135e0 <rmw_take_with_info+0x74>
 80135da:	2001      	movs	r0, #1
 80135dc:	b009      	add	sp, #36	@ 0x24
 80135de:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80135e0:	68a9      	ldr	r1, [r5, #8]
 80135e2:	4668      	mov	r0, sp
 80135e4:	f8d1 2810 	ldr.w	r2, [r1, #2064]	@ 0x810
 80135e8:	3110      	adds	r1, #16
 80135ea:	f7f9 f857 	bl	800c69c <ucdr_init_buffer>
 80135ee:	69a3      	ldr	r3, [r4, #24]
 80135f0:	4639      	mov	r1, r7
 80135f2:	68db      	ldr	r3, [r3, #12]
 80135f4:	4668      	mov	r0, sp
 80135f6:	4798      	blx	r3
 80135f8:	4629      	mov	r1, r5
 80135fa:	4604      	mov	r4, r0
 80135fc:	4804      	ldr	r0, [pc, #16]	@ (8013610 <rmw_take_with_info+0xa4>)
 80135fe:	f7ff fd93 	bl	8013128 <put_memory>
 8013602:	e7dd      	b.n	80135c0 <rmw_take_with_info+0x54>
 8013604:	200c      	movs	r0, #12
 8013606:	b009      	add	sp, #36	@ 0x24
 8013608:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801360a:	bf00      	nop
 801360c:	080172ec 	.word	0x080172ec
 8013610:	2000dab4 	.word	0x2000dab4

08013614 <rmw_wait>:
 8013614:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8013618:	b089      	sub	sp, #36	@ 0x24
 801361a:	4605      	mov	r5, r0
 801361c:	9c12      	ldr	r4, [sp, #72]	@ 0x48
 801361e:	460e      	mov	r6, r1
 8013620:	4698      	mov	r8, r3
 8013622:	4691      	mov	r9, r2
 8013624:	2a00      	cmp	r2, #0
 8013626:	f000 810a 	beq.w	801383e <rmw_wait+0x22a>
 801362a:	b16c      	cbz	r4, 8013648 <rmw_wait+0x34>
 801362c:	4bae      	ldr	r3, [pc, #696]	@ (80138e8 <rmw_wait+0x2d4>)
 801362e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8013630:	af04      	add	r7, sp, #16
 8013632:	e887 000f 	stmia.w	r7, {r0, r1, r2, r3}
 8013636:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 801363a:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 801363e:	f7ff faaf 	bl	8012ba0 <rmw_time_equal>
 8013642:	2800      	cmp	r0, #0
 8013644:	f000 8127 	beq.w	8013896 <rmw_wait+0x282>
 8013648:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 801364c:	f7f7 fedc 	bl	800b408 <rmw_uxrce_clean_expired_static_input_buffer>
 8013650:	4ba6      	ldr	r3, [pc, #664]	@ (80138ec <rmw_wait+0x2d8>)
 8013652:	681c      	ldr	r4, [r3, #0]
 8013654:	b14c      	cbz	r4, 801366a <rmw_wait+0x56>
 8013656:	4623      	mov	r3, r4
 8013658:	2100      	movs	r1, #0
 801365a:	e9d3 3201 	ldrd	r3, r2, [r3, #4]
 801365e:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8013662:	f882 15a4 	strb.w	r1, [r2, #1444]	@ 0x5a4
 8013666:	2b00      	cmp	r3, #0
 8013668:	d1f7      	bne.n	801365a <rmw_wait+0x46>
 801366a:	f1b9 0f00 	cmp.w	r9, #0
 801366e:	d011      	beq.n	8013694 <rmw_wait+0x80>
 8013670:	f8d9 1000 	ldr.w	r1, [r9]
 8013674:	b171      	cbz	r1, 8013694 <rmw_wait+0x80>
 8013676:	f8d9 c004 	ldr.w	ip, [r9, #4]
 801367a:	2300      	movs	r3, #0
 801367c:	2001      	movs	r0, #1
 801367e:	f85c 2023 	ldr.w	r2, [ip, r3, lsl #2]
 8013682:	6f92      	ldr	r2, [r2, #120]	@ 0x78
 8013684:	6912      	ldr	r2, [r2, #16]
 8013686:	3301      	adds	r3, #1
 8013688:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 801368c:	4299      	cmp	r1, r3
 801368e:	f882 05a4 	strb.w	r0, [r2, #1444]	@ 0x5a4
 8013692:	d1f4      	bne.n	801367e <rmw_wait+0x6a>
 8013694:	f1b8 0f00 	cmp.w	r8, #0
 8013698:	d011      	beq.n	80136be <rmw_wait+0xaa>
 801369a:	f8d8 1000 	ldr.w	r1, [r8]
 801369e:	b171      	cbz	r1, 80136be <rmw_wait+0xaa>
 80136a0:	f8d8 c004 	ldr.w	ip, [r8, #4]
 80136a4:	2300      	movs	r3, #0
 80136a6:	2001      	movs	r0, #1
 80136a8:	f85c 2023 	ldr.w	r2, [ip, r3, lsl #2]
 80136ac:	6f92      	ldr	r2, [r2, #120]	@ 0x78
 80136ae:	6912      	ldr	r2, [r2, #16]
 80136b0:	3301      	adds	r3, #1
 80136b2:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80136b6:	4299      	cmp	r1, r3
 80136b8:	f882 05a4 	strb.w	r0, [r2, #1444]	@ 0x5a4
 80136bc:	d1f4      	bne.n	80136a8 <rmw_wait+0x94>
 80136be:	b185      	cbz	r5, 80136e2 <rmw_wait+0xce>
 80136c0:	6829      	ldr	r1, [r5, #0]
 80136c2:	b171      	cbz	r1, 80136e2 <rmw_wait+0xce>
 80136c4:	f8d5 c004 	ldr.w	ip, [r5, #4]
 80136c8:	2300      	movs	r3, #0
 80136ca:	2001      	movs	r0, #1
 80136cc:	f85c 2023 	ldr.w	r2, [ip, r3, lsl #2]
 80136d0:	6a12      	ldr	r2, [r2, #32]
 80136d2:	6912      	ldr	r2, [r2, #16]
 80136d4:	3301      	adds	r3, #1
 80136d6:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80136da:	4299      	cmp	r1, r3
 80136dc:	f882 05a4 	strb.w	r0, [r2, #1444]	@ 0x5a4
 80136e0:	d1f4      	bne.n	80136cc <rmw_wait+0xb8>
 80136e2:	b34c      	cbz	r4, 8013738 <rmw_wait+0x124>
 80136e4:	4622      	mov	r2, r4
 80136e6:	2300      	movs	r3, #0
 80136e8:	e9d2 2101 	ldrd	r2, r1, [r2, #4]
 80136ec:	f501 5180 	add.w	r1, r1, #4096	@ 0x1000
 80136f0:	f891 15a4 	ldrb.w	r1, [r1, #1444]	@ 0x5a4
 80136f4:	440b      	add	r3, r1
 80136f6:	b2db      	uxtb	r3, r3
 80136f8:	2a00      	cmp	r2, #0
 80136fa:	d1f5      	bne.n	80136e8 <rmw_wait+0xd4>
 80136fc:	2b00      	cmp	r3, #0
 80136fe:	f000 8084 	beq.w	801380a <rmw_wait+0x1f6>
 8013702:	1c7a      	adds	r2, r7, #1
 8013704:	d00d      	beq.n	8013722 <rmw_wait+0x10e>
 8013706:	ee07 7a90 	vmov	s15, r7
 801370a:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 801370e:	ee07 3a90 	vmov	s15, r3
 8013712:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8013716:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 801371a:	eefd 7ac7 	vcvt.s32.f32	s15, s14
 801371e:	ee17 7a90 	vmov	r7, s15
 8013722:	68a0      	ldr	r0, [r4, #8]
 8013724:	f500 5380 	add.w	r3, r0, #4096	@ 0x1000
 8013728:	f893 35a4 	ldrb.w	r3, [r3, #1444]	@ 0x5a4
 801372c:	2b00      	cmp	r3, #0
 801372e:	f040 8090 	bne.w	8013852 <rmw_wait+0x23e>
 8013732:	6864      	ldr	r4, [r4, #4]
 8013734:	2c00      	cmp	r4, #0
 8013736:	d1f4      	bne.n	8013722 <rmw_wait+0x10e>
 8013738:	f1b9 0f00 	cmp.w	r9, #0
 801373c:	f000 80bc 	beq.w	80138b8 <rmw_wait+0x2a4>
 8013740:	f8d9 7000 	ldr.w	r7, [r9]
 8013744:	2f00      	cmp	r7, #0
 8013746:	f000 808e 	beq.w	8013866 <rmw_wait+0x252>
 801374a:	2400      	movs	r4, #0
 801374c:	4627      	mov	r7, r4
 801374e:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8013752:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8013756:	f7f7 fe2f 	bl	800b3b8 <rmw_uxrce_find_static_input_buffer_by_owner>
 801375a:	2800      	cmp	r0, #0
 801375c:	d05f      	beq.n	801381e <rmw_wait+0x20a>
 801375e:	f8d9 3000 	ldr.w	r3, [r9]
 8013762:	3401      	adds	r4, #1
 8013764:	42a3      	cmp	r3, r4
 8013766:	f04f 0701 	mov.w	r7, #1
 801376a:	d8f0      	bhi.n	801374e <rmw_wait+0x13a>
 801376c:	f1b8 0f00 	cmp.w	r8, #0
 8013770:	d012      	beq.n	8013798 <rmw_wait+0x184>
 8013772:	f8d8 3000 	ldr.w	r3, [r8]
 8013776:	b17b      	cbz	r3, 8013798 <rmw_wait+0x184>
 8013778:	2400      	movs	r4, #0
 801377a:	f8d8 3004 	ldr.w	r3, [r8, #4]
 801377e:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8013782:	f7f7 fe19 	bl	800b3b8 <rmw_uxrce_find_static_input_buffer_by_owner>
 8013786:	2800      	cmp	r0, #0
 8013788:	d051      	beq.n	801382e <rmw_wait+0x21a>
 801378a:	f8d8 3000 	ldr.w	r3, [r8]
 801378e:	3401      	adds	r4, #1
 8013790:	42a3      	cmp	r3, r4
 8013792:	f04f 0701 	mov.w	r7, #1
 8013796:	d8f0      	bhi.n	801377a <rmw_wait+0x166>
 8013798:	b1dd      	cbz	r5, 80137d2 <rmw_wait+0x1be>
 801379a:	682b      	ldr	r3, [r5, #0]
 801379c:	b1cb      	cbz	r3, 80137d2 <rmw_wait+0x1be>
 801379e:	2400      	movs	r4, #0
 80137a0:	686b      	ldr	r3, [r5, #4]
 80137a2:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 80137a6:	f7f7 fe07 	bl	800b3b8 <rmw_uxrce_find_static_input_buffer_by_owner>
 80137aa:	b158      	cbz	r0, 80137c4 <rmw_wait+0x1b0>
 80137ac:	682b      	ldr	r3, [r5, #0]
 80137ae:	3401      	adds	r4, #1
 80137b0:	42a3      	cmp	r3, r4
 80137b2:	d969      	bls.n	8013888 <rmw_wait+0x274>
 80137b4:	686b      	ldr	r3, [r5, #4]
 80137b6:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 80137ba:	2701      	movs	r7, #1
 80137bc:	f7f7 fdfc 	bl	800b3b8 <rmw_uxrce_find_static_input_buffer_by_owner>
 80137c0:	2800      	cmp	r0, #0
 80137c2:	d1f3      	bne.n	80137ac <rmw_wait+0x198>
 80137c4:	e9d5 3200 	ldrd	r3, r2, [r5]
 80137c8:	f842 0024 	str.w	r0, [r2, r4, lsl #2]
 80137cc:	3401      	adds	r4, #1
 80137ce:	42a3      	cmp	r3, r4
 80137d0:	d8e6      	bhi.n	80137a0 <rmw_wait+0x18c>
 80137d2:	b1a6      	cbz	r6, 80137fe <rmw_wait+0x1ea>
 80137d4:	6834      	ldr	r4, [r6, #0]
 80137d6:	b194      	cbz	r4, 80137fe <rmw_wait+0x1ea>
 80137d8:	2300      	movs	r3, #0
 80137da:	461d      	mov	r5, r3
 80137dc:	e004      	b.n	80137e8 <rmw_wait+0x1d4>
 80137de:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
 80137e2:	3301      	adds	r3, #1
 80137e4:	42a3      	cmp	r3, r4
 80137e6:	d00a      	beq.n	80137fe <rmw_wait+0x1ea>
 80137e8:	6870      	ldr	r0, [r6, #4]
 80137ea:	f850 1023 	ldr.w	r1, [r0, r3, lsl #2]
 80137ee:	7c0a      	ldrb	r2, [r1, #16]
 80137f0:	2a00      	cmp	r2, #0
 80137f2:	d0f4      	beq.n	80137de <rmw_wait+0x1ca>
 80137f4:	3301      	adds	r3, #1
 80137f6:	42a3      	cmp	r3, r4
 80137f8:	740d      	strb	r5, [r1, #16]
 80137fa:	4617      	mov	r7, r2
 80137fc:	d1f4      	bne.n	80137e8 <rmw_wait+0x1d4>
 80137fe:	2f00      	cmp	r7, #0
 8013800:	d03e      	beq.n	8013880 <rmw_wait+0x26c>
 8013802:	2000      	movs	r0, #0
 8013804:	b009      	add	sp, #36	@ 0x24
 8013806:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801380a:	68a0      	ldr	r0, [r4, #8]
 801380c:	2100      	movs	r1, #0
 801380e:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8013812:	f7f9 ffd7 	bl	800d7c4 <uxr_run_session_timeout>
 8013816:	6864      	ldr	r4, [r4, #4]
 8013818:	2c00      	cmp	r4, #0
 801381a:	d1f6      	bne.n	801380a <rmw_wait+0x1f6>
 801381c:	e78c      	b.n	8013738 <rmw_wait+0x124>
 801381e:	e9d9 3200 	ldrd	r3, r2, [r9]
 8013822:	f842 0024 	str.w	r0, [r2, r4, lsl #2]
 8013826:	3401      	adds	r4, #1
 8013828:	42a3      	cmp	r3, r4
 801382a:	d890      	bhi.n	801374e <rmw_wait+0x13a>
 801382c:	e79e      	b.n	801376c <rmw_wait+0x158>
 801382e:	e9d8 3200 	ldrd	r3, r2, [r8]
 8013832:	f842 0024 	str.w	r0, [r2, r4, lsl #2]
 8013836:	3401      	adds	r4, #1
 8013838:	429c      	cmp	r4, r3
 801383a:	d39e      	bcc.n	801377a <rmw_wait+0x166>
 801383c:	e7ac      	b.n	8013798 <rmw_wait+0x184>
 801383e:	2b00      	cmp	r3, #0
 8013840:	f47f aef3 	bne.w	801362a <rmw_wait+0x16>
 8013844:	2800      	cmp	r0, #0
 8013846:	f47f aef0 	bne.w	801362a <rmw_wait+0x16>
 801384a:	2900      	cmp	r1, #0
 801384c:	f47f aeed 	bne.w	801362a <rmw_wait+0x16>
 8013850:	e7d7      	b.n	8013802 <rmw_wait+0x1ee>
 8013852:	4639      	mov	r1, r7
 8013854:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8013858:	f7f9 ffce 	bl	800d7f8 <uxr_run_session_until_data>
 801385c:	6864      	ldr	r4, [r4, #4]
 801385e:	2c00      	cmp	r4, #0
 8013860:	f47f af5f 	bne.w	8013722 <rmw_wait+0x10e>
 8013864:	e768      	b.n	8013738 <rmw_wait+0x124>
 8013866:	f1b8 0f00 	cmp.w	r8, #0
 801386a:	d032      	beq.n	80138d2 <rmw_wait+0x2be>
 801386c:	f8d8 3000 	ldr.w	r3, [r8]
 8013870:	2b00      	cmp	r3, #0
 8013872:	d181      	bne.n	8013778 <rmw_wait+0x164>
 8013874:	461f      	mov	r7, r3
 8013876:	2d00      	cmp	r5, #0
 8013878:	d18f      	bne.n	801379a <rmw_wait+0x186>
 801387a:	462f      	mov	r7, r5
 801387c:	2e00      	cmp	r6, #0
 801387e:	d1a9      	bne.n	80137d4 <rmw_wait+0x1c0>
 8013880:	2002      	movs	r0, #2
 8013882:	b009      	add	sp, #36	@ 0x24
 8013884:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8013888:	2e00      	cmp	r6, #0
 801388a:	d0ba      	beq.n	8013802 <rmw_wait+0x1ee>
 801388c:	6834      	ldr	r4, [r6, #0]
 801388e:	2701      	movs	r7, #1
 8013890:	2c00      	cmp	r4, #0
 8013892:	d1a1      	bne.n	80137d8 <rmw_wait+0x1c4>
 8013894:	e7b5      	b.n	8013802 <rmw_wait+0x1ee>
 8013896:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 801389a:	f7ff f9d5 	bl	8012c48 <rmw_time_total_nsec>
 801389e:	2300      	movs	r3, #0
 80138a0:	4a13      	ldr	r2, [pc, #76]	@ (80138f0 <rmw_wait+0x2dc>)
 80138a2:	f7ed f993 	bl	8000bcc <__aeabi_uldivmod>
 80138a6:	f1b0 4f00 	cmp.w	r0, #2147483648	@ 0x80000000
 80138aa:	f171 0300 	sbcs.w	r3, r1, #0
 80138ae:	4607      	mov	r7, r0
 80138b0:	bfa8      	it	ge
 80138b2:	f06f 4700 	mvnge.w	r7, #2147483648	@ 0x80000000
 80138b6:	e6c9      	b.n	801364c <rmw_wait+0x38>
 80138b8:	f1b8 0f00 	cmp.w	r8, #0
 80138bc:	d009      	beq.n	80138d2 <rmw_wait+0x2be>
 80138be:	f8d8 3000 	ldr.w	r3, [r8]
 80138c2:	464f      	mov	r7, r9
 80138c4:	2b00      	cmp	r3, #0
 80138c6:	f47f af57 	bne.w	8013778 <rmw_wait+0x164>
 80138ca:	2d00      	cmp	r5, #0
 80138cc:	f47f af65 	bne.w	801379a <rmw_wait+0x186>
 80138d0:	e7d3      	b.n	801387a <rmw_wait+0x266>
 80138d2:	b17d      	cbz	r5, 80138f4 <rmw_wait+0x2e0>
 80138d4:	682b      	ldr	r3, [r5, #0]
 80138d6:	4647      	mov	r7, r8
 80138d8:	2b00      	cmp	r3, #0
 80138da:	f47f af60 	bne.w	801379e <rmw_wait+0x18a>
 80138de:	2e00      	cmp	r6, #0
 80138e0:	f47f af78 	bne.w	80137d4 <rmw_wait+0x1c0>
 80138e4:	e7cc      	b.n	8013880 <rmw_wait+0x26c>
 80138e6:	bf00      	nop
 80138e8:	08016850 	.word	0x08016850
 80138ec:	2000daa4 	.word	0x2000daa4
 80138f0:	000f4240 	.word	0x000f4240
 80138f4:	2e00      	cmp	r6, #0
 80138f6:	d0c3      	beq.n	8013880 <rmw_wait+0x26c>
 80138f8:	6834      	ldr	r4, [r6, #0]
 80138fa:	462f      	mov	r7, r5
 80138fc:	2c00      	cmp	r4, #0
 80138fe:	f47f af6b 	bne.w	80137d8 <rmw_wait+0x1c4>
 8013902:	e7bd      	b.n	8013880 <rmw_wait+0x26c>

08013904 <rmw_create_wait_set>:
 8013904:	b508      	push	{r3, lr}
 8013906:	4803      	ldr	r0, [pc, #12]	@ (8013914 <rmw_create_wait_set+0x10>)
 8013908:	f7ff fbfe 	bl	8013108 <get_memory>
 801390c:	b108      	cbz	r0, 8013912 <rmw_create_wait_set+0xe>
 801390e:	6880      	ldr	r0, [r0, #8]
 8013910:	3010      	adds	r0, #16
 8013912:	bd08      	pop	{r3, pc}
 8013914:	2000dae4 	.word	0x2000dae4

08013918 <rmw_destroy_wait_set>:
 8013918:	b508      	push	{r3, lr}
 801391a:	4b08      	ldr	r3, [pc, #32]	@ (801393c <rmw_destroy_wait_set+0x24>)
 801391c:	6819      	ldr	r1, [r3, #0]
 801391e:	b911      	cbnz	r1, 8013926 <rmw_destroy_wait_set+0xe>
 8013920:	e00a      	b.n	8013938 <rmw_destroy_wait_set+0x20>
 8013922:	6849      	ldr	r1, [r1, #4]
 8013924:	b141      	cbz	r1, 8013938 <rmw_destroy_wait_set+0x20>
 8013926:	688b      	ldr	r3, [r1, #8]
 8013928:	3310      	adds	r3, #16
 801392a:	4298      	cmp	r0, r3
 801392c:	d1f9      	bne.n	8013922 <rmw_destroy_wait_set+0xa>
 801392e:	4803      	ldr	r0, [pc, #12]	@ (801393c <rmw_destroy_wait_set+0x24>)
 8013930:	f7ff fbfa 	bl	8013128 <put_memory>
 8013934:	2000      	movs	r0, #0
 8013936:	bd08      	pop	{r3, pc}
 8013938:	2001      	movs	r0, #1
 801393a:	bd08      	pop	{r3, pc}
 801393c:	2000dae4 	.word	0x2000dae4

08013940 <rmw_uros_epoch_nanos>:
 8013940:	4b05      	ldr	r3, [pc, #20]	@ (8013958 <rmw_uros_epoch_nanos+0x18>)
 8013942:	681b      	ldr	r3, [r3, #0]
 8013944:	b123      	cbz	r3, 8013950 <rmw_uros_epoch_nanos+0x10>
 8013946:	6898      	ldr	r0, [r3, #8]
 8013948:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 801394c:	f7f9 bbaa 	b.w	800d0a4 <uxr_epoch_nanos>
 8013950:	2000      	movs	r0, #0
 8013952:	2100      	movs	r1, #0
 8013954:	4770      	bx	lr
 8013956:	bf00      	nop
 8013958:	2000daa4 	.word	0x2000daa4

0801395c <rosidl_typesupport_c__get_message_typesupport_handle_function>:
 801395c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013960:	6805      	ldr	r5, [r0, #0]
 8013962:	4604      	mov	r4, r0
 8013964:	4628      	mov	r0, r5
 8013966:	460e      	mov	r6, r1
 8013968:	f7ec fc3a 	bl	80001e0 <strcmp>
 801396c:	b1c8      	cbz	r0, 80139a2 <rosidl_typesupport_c__get_message_typesupport_handle_function+0x46>
 801396e:	4b11      	ldr	r3, [pc, #68]	@ (80139b4 <rosidl_typesupport_c__get_message_typesupport_handle_function+0x58>)
 8013970:	681b      	ldr	r3, [r3, #0]
 8013972:	429d      	cmp	r5, r3
 8013974:	d112      	bne.n	801399c <rosidl_typesupport_c__get_message_typesupport_handle_function+0x40>
 8013976:	f8d4 8004 	ldr.w	r8, [r4, #4]
 801397a:	f8d8 4000 	ldr.w	r4, [r8]
 801397e:	b16c      	cbz	r4, 801399c <rosidl_typesupport_c__get_message_typesupport_handle_function+0x40>
 8013980:	f8d8 5008 	ldr.w	r5, [r8, #8]
 8013984:	2700      	movs	r7, #0
 8013986:	3d04      	subs	r5, #4
 8013988:	f855 0f04 	ldr.w	r0, [r5, #4]!
 801398c:	4631      	mov	r1, r6
 801398e:	f7ec fc27 	bl	80001e0 <strcmp>
 8013992:	00bb      	lsls	r3, r7, #2
 8013994:	b140      	cbz	r0, 80139a8 <rosidl_typesupport_c__get_message_typesupport_handle_function+0x4c>
 8013996:	3701      	adds	r7, #1
 8013998:	42bc      	cmp	r4, r7
 801399a:	d1f5      	bne.n	8013988 <rosidl_typesupport_c__get_message_typesupport_handle_function+0x2c>
 801399c:	2000      	movs	r0, #0
 801399e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80139a2:	4620      	mov	r0, r4
 80139a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80139a8:	f8d8 2010 	ldr.w	r2, [r8, #16]
 80139ac:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80139b0:	58d3      	ldr	r3, [r2, r3]
 80139b2:	4718      	bx	r3
 80139b4:	200000ac 	.word	0x200000ac

080139b8 <std_msgs__msg__Int32__init>:
 80139b8:	3800      	subs	r0, #0
 80139ba:	bf18      	it	ne
 80139bc:	2001      	movne	r0, #1
 80139be:	4770      	bx	lr

080139c0 <std_msgs__msg__Int32__fini>:
 80139c0:	4770      	bx	lr
 80139c2:	bf00      	nop

080139c4 <ucdr_serialize_endian_array_char>:
 80139c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80139c8:	4619      	mov	r1, r3
 80139ca:	461f      	mov	r7, r3
 80139cc:	4605      	mov	r5, r0
 80139ce:	4690      	mov	r8, r2
 80139d0:	f7f8 fe10 	bl	800c5f4 <ucdr_check_buffer_available_for>
 80139d4:	b9e0      	cbnz	r0, 8013a10 <ucdr_serialize_endian_array_char+0x4c>
 80139d6:	463e      	mov	r6, r7
 80139d8:	e009      	b.n	80139ee <ucdr_serialize_endian_array_char+0x2a>
 80139da:	68a8      	ldr	r0, [r5, #8]
 80139dc:	f001 ffe9 	bl	80159b2 <memcpy>
 80139e0:	68ab      	ldr	r3, [r5, #8]
 80139e2:	6928      	ldr	r0, [r5, #16]
 80139e4:	4423      	add	r3, r4
 80139e6:	4420      	add	r0, r4
 80139e8:	1b36      	subs	r6, r6, r4
 80139ea:	60ab      	str	r3, [r5, #8]
 80139ec:	6128      	str	r0, [r5, #16]
 80139ee:	4631      	mov	r1, r6
 80139f0:	2201      	movs	r2, #1
 80139f2:	4628      	mov	r0, r5
 80139f4:	f7f8 fe86 	bl	800c704 <ucdr_check_final_buffer_behavior_array>
 80139f8:	1bb9      	subs	r1, r7, r6
 80139fa:	4441      	add	r1, r8
 80139fc:	4604      	mov	r4, r0
 80139fe:	4602      	mov	r2, r0
 8013a00:	2800      	cmp	r0, #0
 8013a02:	d1ea      	bne.n	80139da <ucdr_serialize_endian_array_char+0x16>
 8013a04:	2301      	movs	r3, #1
 8013a06:	7da8      	ldrb	r0, [r5, #22]
 8013a08:	756b      	strb	r3, [r5, #21]
 8013a0a:	4058      	eors	r0, r3
 8013a0c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013a10:	463a      	mov	r2, r7
 8013a12:	68a8      	ldr	r0, [r5, #8]
 8013a14:	4641      	mov	r1, r8
 8013a16:	f001 ffcc 	bl	80159b2 <memcpy>
 8013a1a:	68aa      	ldr	r2, [r5, #8]
 8013a1c:	692b      	ldr	r3, [r5, #16]
 8013a1e:	443a      	add	r2, r7
 8013a20:	443b      	add	r3, r7
 8013a22:	60aa      	str	r2, [r5, #8]
 8013a24:	612b      	str	r3, [r5, #16]
 8013a26:	e7ed      	b.n	8013a04 <ucdr_serialize_endian_array_char+0x40>

08013a28 <ucdr_deserialize_endian_array_char>:
 8013a28:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013a2c:	4619      	mov	r1, r3
 8013a2e:	461f      	mov	r7, r3
 8013a30:	4605      	mov	r5, r0
 8013a32:	4690      	mov	r8, r2
 8013a34:	f7f8 fdde 	bl	800c5f4 <ucdr_check_buffer_available_for>
 8013a38:	b9e0      	cbnz	r0, 8013a74 <ucdr_deserialize_endian_array_char+0x4c>
 8013a3a:	463e      	mov	r6, r7
 8013a3c:	e009      	b.n	8013a52 <ucdr_deserialize_endian_array_char+0x2a>
 8013a3e:	68a9      	ldr	r1, [r5, #8]
 8013a40:	f001 ffb7 	bl	80159b2 <memcpy>
 8013a44:	68ab      	ldr	r3, [r5, #8]
 8013a46:	6928      	ldr	r0, [r5, #16]
 8013a48:	4423      	add	r3, r4
 8013a4a:	4420      	add	r0, r4
 8013a4c:	1b36      	subs	r6, r6, r4
 8013a4e:	60ab      	str	r3, [r5, #8]
 8013a50:	6128      	str	r0, [r5, #16]
 8013a52:	2201      	movs	r2, #1
 8013a54:	4631      	mov	r1, r6
 8013a56:	4628      	mov	r0, r5
 8013a58:	f7f8 fe54 	bl	800c704 <ucdr_check_final_buffer_behavior_array>
 8013a5c:	4604      	mov	r4, r0
 8013a5e:	1bb8      	subs	r0, r7, r6
 8013a60:	4440      	add	r0, r8
 8013a62:	4622      	mov	r2, r4
 8013a64:	2c00      	cmp	r4, #0
 8013a66:	d1ea      	bne.n	8013a3e <ucdr_deserialize_endian_array_char+0x16>
 8013a68:	2301      	movs	r3, #1
 8013a6a:	7da8      	ldrb	r0, [r5, #22]
 8013a6c:	756b      	strb	r3, [r5, #21]
 8013a6e:	4058      	eors	r0, r3
 8013a70:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013a74:	463a      	mov	r2, r7
 8013a76:	68a9      	ldr	r1, [r5, #8]
 8013a78:	4640      	mov	r0, r8
 8013a7a:	f001 ff9a 	bl	80159b2 <memcpy>
 8013a7e:	68aa      	ldr	r2, [r5, #8]
 8013a80:	692b      	ldr	r3, [r5, #16]
 8013a82:	443a      	add	r2, r7
 8013a84:	443b      	add	r3, r7
 8013a86:	60aa      	str	r2, [r5, #8]
 8013a88:	612b      	str	r3, [r5, #16]
 8013a8a:	e7ed      	b.n	8013a68 <ucdr_deserialize_endian_array_char+0x40>

08013a8c <ucdr_serialize_array_uint8_t>:
 8013a8c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013a90:	4688      	mov	r8, r1
 8013a92:	4611      	mov	r1, r2
 8013a94:	4617      	mov	r7, r2
 8013a96:	4605      	mov	r5, r0
 8013a98:	f7f8 fdac 	bl	800c5f4 <ucdr_check_buffer_available_for>
 8013a9c:	b9e0      	cbnz	r0, 8013ad8 <ucdr_serialize_array_uint8_t+0x4c>
 8013a9e:	463e      	mov	r6, r7
 8013aa0:	e009      	b.n	8013ab6 <ucdr_serialize_array_uint8_t+0x2a>
 8013aa2:	68a8      	ldr	r0, [r5, #8]
 8013aa4:	f001 ff85 	bl	80159b2 <memcpy>
 8013aa8:	68aa      	ldr	r2, [r5, #8]
 8013aaa:	692b      	ldr	r3, [r5, #16]
 8013aac:	4422      	add	r2, r4
 8013aae:	4423      	add	r3, r4
 8013ab0:	1b36      	subs	r6, r6, r4
 8013ab2:	60aa      	str	r2, [r5, #8]
 8013ab4:	612b      	str	r3, [r5, #16]
 8013ab6:	4631      	mov	r1, r6
 8013ab8:	2201      	movs	r2, #1
 8013aba:	4628      	mov	r0, r5
 8013abc:	f7f8 fe22 	bl	800c704 <ucdr_check_final_buffer_behavior_array>
 8013ac0:	1bb9      	subs	r1, r7, r6
 8013ac2:	4441      	add	r1, r8
 8013ac4:	4604      	mov	r4, r0
 8013ac6:	4602      	mov	r2, r0
 8013ac8:	2800      	cmp	r0, #0
 8013aca:	d1ea      	bne.n	8013aa2 <ucdr_serialize_array_uint8_t+0x16>
 8013acc:	2301      	movs	r3, #1
 8013ace:	7da8      	ldrb	r0, [r5, #22]
 8013ad0:	756b      	strb	r3, [r5, #21]
 8013ad2:	4058      	eors	r0, r3
 8013ad4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013ad8:	463a      	mov	r2, r7
 8013ada:	68a8      	ldr	r0, [r5, #8]
 8013adc:	4641      	mov	r1, r8
 8013ade:	f001 ff68 	bl	80159b2 <memcpy>
 8013ae2:	68aa      	ldr	r2, [r5, #8]
 8013ae4:	692b      	ldr	r3, [r5, #16]
 8013ae6:	443a      	add	r2, r7
 8013ae8:	443b      	add	r3, r7
 8013aea:	60aa      	str	r2, [r5, #8]
 8013aec:	612b      	str	r3, [r5, #16]
 8013aee:	e7ed      	b.n	8013acc <ucdr_serialize_array_uint8_t+0x40>

08013af0 <ucdr_serialize_endian_array_uint8_t>:
 8013af0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013af4:	4619      	mov	r1, r3
 8013af6:	461f      	mov	r7, r3
 8013af8:	4605      	mov	r5, r0
 8013afa:	4690      	mov	r8, r2
 8013afc:	f7f8 fd7a 	bl	800c5f4 <ucdr_check_buffer_available_for>
 8013b00:	b9e0      	cbnz	r0, 8013b3c <ucdr_serialize_endian_array_uint8_t+0x4c>
 8013b02:	463e      	mov	r6, r7
 8013b04:	e009      	b.n	8013b1a <ucdr_serialize_endian_array_uint8_t+0x2a>
 8013b06:	68a8      	ldr	r0, [r5, #8]
 8013b08:	f001 ff53 	bl	80159b2 <memcpy>
 8013b0c:	68ab      	ldr	r3, [r5, #8]
 8013b0e:	6928      	ldr	r0, [r5, #16]
 8013b10:	4423      	add	r3, r4
 8013b12:	4420      	add	r0, r4
 8013b14:	1b36      	subs	r6, r6, r4
 8013b16:	60ab      	str	r3, [r5, #8]
 8013b18:	6128      	str	r0, [r5, #16]
 8013b1a:	4631      	mov	r1, r6
 8013b1c:	2201      	movs	r2, #1
 8013b1e:	4628      	mov	r0, r5
 8013b20:	f7f8 fdf0 	bl	800c704 <ucdr_check_final_buffer_behavior_array>
 8013b24:	1bb9      	subs	r1, r7, r6
 8013b26:	4441      	add	r1, r8
 8013b28:	4604      	mov	r4, r0
 8013b2a:	4602      	mov	r2, r0
 8013b2c:	2800      	cmp	r0, #0
 8013b2e:	d1ea      	bne.n	8013b06 <ucdr_serialize_endian_array_uint8_t+0x16>
 8013b30:	2301      	movs	r3, #1
 8013b32:	7da8      	ldrb	r0, [r5, #22]
 8013b34:	756b      	strb	r3, [r5, #21]
 8013b36:	4058      	eors	r0, r3
 8013b38:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013b3c:	463a      	mov	r2, r7
 8013b3e:	68a8      	ldr	r0, [r5, #8]
 8013b40:	4641      	mov	r1, r8
 8013b42:	f001 ff36 	bl	80159b2 <memcpy>
 8013b46:	68aa      	ldr	r2, [r5, #8]
 8013b48:	692b      	ldr	r3, [r5, #16]
 8013b4a:	443a      	add	r2, r7
 8013b4c:	443b      	add	r3, r7
 8013b4e:	60aa      	str	r2, [r5, #8]
 8013b50:	612b      	str	r3, [r5, #16]
 8013b52:	e7ed      	b.n	8013b30 <ucdr_serialize_endian_array_uint8_t+0x40>

08013b54 <ucdr_deserialize_array_uint8_t>:
 8013b54:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013b58:	4688      	mov	r8, r1
 8013b5a:	4611      	mov	r1, r2
 8013b5c:	4617      	mov	r7, r2
 8013b5e:	4605      	mov	r5, r0
 8013b60:	f7f8 fd48 	bl	800c5f4 <ucdr_check_buffer_available_for>
 8013b64:	b9e0      	cbnz	r0, 8013ba0 <ucdr_deserialize_array_uint8_t+0x4c>
 8013b66:	463e      	mov	r6, r7
 8013b68:	e009      	b.n	8013b7e <ucdr_deserialize_array_uint8_t+0x2a>
 8013b6a:	68a9      	ldr	r1, [r5, #8]
 8013b6c:	f001 ff21 	bl	80159b2 <memcpy>
 8013b70:	68aa      	ldr	r2, [r5, #8]
 8013b72:	692b      	ldr	r3, [r5, #16]
 8013b74:	4422      	add	r2, r4
 8013b76:	4423      	add	r3, r4
 8013b78:	1b36      	subs	r6, r6, r4
 8013b7a:	60aa      	str	r2, [r5, #8]
 8013b7c:	612b      	str	r3, [r5, #16]
 8013b7e:	2201      	movs	r2, #1
 8013b80:	4631      	mov	r1, r6
 8013b82:	4628      	mov	r0, r5
 8013b84:	f7f8 fdbe 	bl	800c704 <ucdr_check_final_buffer_behavior_array>
 8013b88:	4604      	mov	r4, r0
 8013b8a:	1bb8      	subs	r0, r7, r6
 8013b8c:	4440      	add	r0, r8
 8013b8e:	4622      	mov	r2, r4
 8013b90:	2c00      	cmp	r4, #0
 8013b92:	d1ea      	bne.n	8013b6a <ucdr_deserialize_array_uint8_t+0x16>
 8013b94:	2301      	movs	r3, #1
 8013b96:	7da8      	ldrb	r0, [r5, #22]
 8013b98:	756b      	strb	r3, [r5, #21]
 8013b9a:	4058      	eors	r0, r3
 8013b9c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013ba0:	463a      	mov	r2, r7
 8013ba2:	68a9      	ldr	r1, [r5, #8]
 8013ba4:	4640      	mov	r0, r8
 8013ba6:	f001 ff04 	bl	80159b2 <memcpy>
 8013baa:	68aa      	ldr	r2, [r5, #8]
 8013bac:	692b      	ldr	r3, [r5, #16]
 8013bae:	443a      	add	r2, r7
 8013bb0:	443b      	add	r3, r7
 8013bb2:	60aa      	str	r2, [r5, #8]
 8013bb4:	612b      	str	r3, [r5, #16]
 8013bb6:	e7ed      	b.n	8013b94 <ucdr_deserialize_array_uint8_t+0x40>

08013bb8 <ucdr_deserialize_endian_array_uint8_t>:
 8013bb8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013bbc:	4619      	mov	r1, r3
 8013bbe:	461f      	mov	r7, r3
 8013bc0:	4605      	mov	r5, r0
 8013bc2:	4690      	mov	r8, r2
 8013bc4:	f7f8 fd16 	bl	800c5f4 <ucdr_check_buffer_available_for>
 8013bc8:	b9e0      	cbnz	r0, 8013c04 <ucdr_deserialize_endian_array_uint8_t+0x4c>
 8013bca:	463e      	mov	r6, r7
 8013bcc:	e009      	b.n	8013be2 <ucdr_deserialize_endian_array_uint8_t+0x2a>
 8013bce:	68a9      	ldr	r1, [r5, #8]
 8013bd0:	f001 feef 	bl	80159b2 <memcpy>
 8013bd4:	68ab      	ldr	r3, [r5, #8]
 8013bd6:	6928      	ldr	r0, [r5, #16]
 8013bd8:	4423      	add	r3, r4
 8013bda:	4420      	add	r0, r4
 8013bdc:	1b36      	subs	r6, r6, r4
 8013bde:	60ab      	str	r3, [r5, #8]
 8013be0:	6128      	str	r0, [r5, #16]
 8013be2:	2201      	movs	r2, #1
 8013be4:	4631      	mov	r1, r6
 8013be6:	4628      	mov	r0, r5
 8013be8:	f7f8 fd8c 	bl	800c704 <ucdr_check_final_buffer_behavior_array>
 8013bec:	4604      	mov	r4, r0
 8013bee:	1bb8      	subs	r0, r7, r6
 8013bf0:	4440      	add	r0, r8
 8013bf2:	4622      	mov	r2, r4
 8013bf4:	2c00      	cmp	r4, #0
 8013bf6:	d1ea      	bne.n	8013bce <ucdr_deserialize_endian_array_uint8_t+0x16>
 8013bf8:	2301      	movs	r3, #1
 8013bfa:	7da8      	ldrb	r0, [r5, #22]
 8013bfc:	756b      	strb	r3, [r5, #21]
 8013bfe:	4058      	eors	r0, r3
 8013c00:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013c04:	463a      	mov	r2, r7
 8013c06:	68a9      	ldr	r1, [r5, #8]
 8013c08:	4640      	mov	r0, r8
 8013c0a:	f001 fed2 	bl	80159b2 <memcpy>
 8013c0e:	68aa      	ldr	r2, [r5, #8]
 8013c10:	692b      	ldr	r3, [r5, #16]
 8013c12:	443a      	add	r2, r7
 8013c14:	443b      	add	r3, r7
 8013c16:	60aa      	str	r2, [r5, #8]
 8013c18:	612b      	str	r3, [r5, #16]
 8013c1a:	e7ed      	b.n	8013bf8 <ucdr_deserialize_endian_array_uint8_t+0x40>

08013c1c <ucdr_serialize_sequence_char>:
 8013c1c:	b570      	push	{r4, r5, r6, lr}
 8013c1e:	4615      	mov	r5, r2
 8013c20:	460e      	mov	r6, r1
 8013c22:	7d01      	ldrb	r1, [r0, #20]
 8013c24:	4604      	mov	r4, r0
 8013c26:	f7f8 f83b 	bl	800bca0 <ucdr_serialize_endian_uint32_t>
 8013c2a:	b90d      	cbnz	r5, 8013c30 <ucdr_serialize_sequence_char+0x14>
 8013c2c:	2001      	movs	r0, #1
 8013c2e:	bd70      	pop	{r4, r5, r6, pc}
 8013c30:	7d21      	ldrb	r1, [r4, #20]
 8013c32:	462b      	mov	r3, r5
 8013c34:	4632      	mov	r2, r6
 8013c36:	4620      	mov	r0, r4
 8013c38:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8013c3c:	f7ff bec2 	b.w	80139c4 <ucdr_serialize_endian_array_char>

08013c40 <ucdr_deserialize_sequence_char>:
 8013c40:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013c44:	461d      	mov	r5, r3
 8013c46:	4616      	mov	r6, r2
 8013c48:	460f      	mov	r7, r1
 8013c4a:	461a      	mov	r2, r3
 8013c4c:	7d01      	ldrb	r1, [r0, #20]
 8013c4e:	4604      	mov	r4, r0
 8013c50:	f7f8 f94e 	bl	800bef0 <ucdr_deserialize_endian_uint32_t>
 8013c54:	682b      	ldr	r3, [r5, #0]
 8013c56:	429e      	cmp	r6, r3
 8013c58:	bf3c      	itt	cc
 8013c5a:	2201      	movcc	r2, #1
 8013c5c:	75a2      	strbcc	r2, [r4, #22]
 8013c5e:	b913      	cbnz	r3, 8013c66 <ucdr_deserialize_sequence_char+0x26>
 8013c60:	2001      	movs	r0, #1
 8013c62:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013c66:	7d21      	ldrb	r1, [r4, #20]
 8013c68:	463a      	mov	r2, r7
 8013c6a:	4620      	mov	r0, r4
 8013c6c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8013c70:	f7ff beda 	b.w	8013a28 <ucdr_deserialize_endian_array_char>

08013c74 <ucdr_serialize_sequence_uint8_t>:
 8013c74:	b570      	push	{r4, r5, r6, lr}
 8013c76:	4615      	mov	r5, r2
 8013c78:	460e      	mov	r6, r1
 8013c7a:	7d01      	ldrb	r1, [r0, #20]
 8013c7c:	4604      	mov	r4, r0
 8013c7e:	f7f8 f80f 	bl	800bca0 <ucdr_serialize_endian_uint32_t>
 8013c82:	b90d      	cbnz	r5, 8013c88 <ucdr_serialize_sequence_uint8_t+0x14>
 8013c84:	2001      	movs	r0, #1
 8013c86:	bd70      	pop	{r4, r5, r6, pc}
 8013c88:	7d21      	ldrb	r1, [r4, #20]
 8013c8a:	462b      	mov	r3, r5
 8013c8c:	4632      	mov	r2, r6
 8013c8e:	4620      	mov	r0, r4
 8013c90:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8013c94:	f7ff bf2c 	b.w	8013af0 <ucdr_serialize_endian_array_uint8_t>

08013c98 <ucdr_deserialize_sequence_uint8_t>:
 8013c98:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013c9c:	461d      	mov	r5, r3
 8013c9e:	4616      	mov	r6, r2
 8013ca0:	460f      	mov	r7, r1
 8013ca2:	461a      	mov	r2, r3
 8013ca4:	7d01      	ldrb	r1, [r0, #20]
 8013ca6:	4604      	mov	r4, r0
 8013ca8:	f7f8 f922 	bl	800bef0 <ucdr_deserialize_endian_uint32_t>
 8013cac:	682b      	ldr	r3, [r5, #0]
 8013cae:	429e      	cmp	r6, r3
 8013cb0:	bf3c      	itt	cc
 8013cb2:	2201      	movcc	r2, #1
 8013cb4:	75a2      	strbcc	r2, [r4, #22]
 8013cb6:	b913      	cbnz	r3, 8013cbe <ucdr_deserialize_sequence_uint8_t+0x26>
 8013cb8:	2001      	movs	r0, #1
 8013cba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013cbe:	7d21      	ldrb	r1, [r4, #20]
 8013cc0:	463a      	mov	r2, r7
 8013cc2:	4620      	mov	r0, r4
 8013cc4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8013cc8:	f7ff bf76 	b.w	8013bb8 <ucdr_deserialize_endian_array_uint8_t>

08013ccc <ucdr_serialize_string>:
 8013ccc:	b510      	push	{r4, lr}
 8013cce:	b082      	sub	sp, #8
 8013cd0:	4604      	mov	r4, r0
 8013cd2:	4608      	mov	r0, r1
 8013cd4:	9101      	str	r1, [sp, #4]
 8013cd6:	f7ec fa8d 	bl	80001f4 <strlen>
 8013cda:	9901      	ldr	r1, [sp, #4]
 8013cdc:	1c42      	adds	r2, r0, #1
 8013cde:	4620      	mov	r0, r4
 8013ce0:	b002      	add	sp, #8
 8013ce2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8013ce6:	f7ff bf99 	b.w	8013c1c <ucdr_serialize_sequence_char>
 8013cea:	bf00      	nop

08013cec <ucdr_deserialize_string>:
 8013cec:	b500      	push	{lr}
 8013cee:	b083      	sub	sp, #12
 8013cf0:	ab01      	add	r3, sp, #4
 8013cf2:	f7ff ffa5 	bl	8013c40 <ucdr_deserialize_sequence_char>
 8013cf6:	b003      	add	sp, #12
 8013cf8:	f85d fb04 	ldr.w	pc, [sp], #4

08013cfc <uxr_init_input_best_effort_stream>:
 8013cfc:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8013d00:	8003      	strh	r3, [r0, #0]
 8013d02:	4770      	bx	lr

08013d04 <uxr_reset_input_best_effort_stream>:
 8013d04:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8013d08:	8003      	strh	r3, [r0, #0]
 8013d0a:	4770      	bx	lr

08013d0c <uxr_receive_best_effort_message>:
 8013d0c:	b538      	push	{r3, r4, r5, lr}
 8013d0e:	4604      	mov	r4, r0
 8013d10:	8800      	ldrh	r0, [r0, #0]
 8013d12:	460d      	mov	r5, r1
 8013d14:	f000 fd22 	bl	801475c <uxr_seq_num_cmp>
 8013d18:	4603      	mov	r3, r0
 8013d1a:	2b00      	cmp	r3, #0
 8013d1c:	ea4f 70d0 	mov.w	r0, r0, lsr #31
 8013d20:	bfb8      	it	lt
 8013d22:	8025      	strhlt	r5, [r4, #0]
 8013d24:	bd38      	pop	{r3, r4, r5, pc}
 8013d26:	bf00      	nop

08013d28 <on_full_input_buffer>:
 8013d28:	b570      	push	{r4, r5, r6, lr}
 8013d2a:	4605      	mov	r5, r0
 8013d2c:	460c      	mov	r4, r1
 8013d2e:	682b      	ldr	r3, [r5, #0]
 8013d30:	6809      	ldr	r1, [r1, #0]
 8013d32:	8920      	ldrh	r0, [r4, #8]
 8013d34:	6862      	ldr	r2, [r4, #4]
 8013d36:	fbb2 f2f0 	udiv	r2, r2, r0
 8013d3a:	eba3 0c01 	sub.w	ip, r3, r1
 8013d3e:	fbbc fcf2 	udiv	ip, ip, r2
 8013d42:	f10c 0c01 	add.w	ip, ip, #1
 8013d46:	fa1f f38c 	uxth.w	r3, ip
 8013d4a:	fbb3 f6f0 	udiv	r6, r3, r0
 8013d4e:	fb00 3316 	mls	r3, r0, r6, r3
 8013d52:	b29b      	uxth	r3, r3
 8013d54:	fb02 f303 	mul.w	r3, r2, r3
 8013d58:	1d18      	adds	r0, r3, #4
 8013d5a:	4408      	add	r0, r1
 8013d5c:	7d26      	ldrb	r6, [r4, #20]
 8013d5e:	f850 2c04 	ldr.w	r2, [r0, #-4]
 8013d62:	b116      	cbz	r6, 8013d6a <on_full_input_buffer+0x42>
 8013d64:	2600      	movs	r6, #0
 8013d66:	f840 6c04 	str.w	r6, [r0, #-4]
 8013d6a:	2a03      	cmp	r2, #3
 8013d6c:	d801      	bhi.n	8013d72 <on_full_input_buffer+0x4a>
 8013d6e:	2001      	movs	r0, #1
 8013d70:	bd70      	pop	{r4, r5, r6, pc}
 8013d72:	3308      	adds	r3, #8
 8013d74:	4419      	add	r1, r3
 8013d76:	4628      	mov	r0, r5
 8013d78:	692b      	ldr	r3, [r5, #16]
 8013d7a:	3a04      	subs	r2, #4
 8013d7c:	f7f8 fc86 	bl	800c68c <ucdr_init_buffer_origin>
 8013d80:	4628      	mov	r0, r5
 8013d82:	4903      	ldr	r1, [pc, #12]	@ (8013d90 <on_full_input_buffer+0x68>)
 8013d84:	4622      	mov	r2, r4
 8013d86:	f7f8 fc5d 	bl	800c644 <ucdr_set_on_full_buffer_callback>
 8013d8a:	2000      	movs	r0, #0
 8013d8c:	bd70      	pop	{r4, r5, r6, pc}
 8013d8e:	bf00      	nop
 8013d90:	08013d29 	.word	0x08013d29

08013d94 <uxr_init_input_reliable_stream>:
 8013d94:	b500      	push	{lr}
 8013d96:	e9c0 1200 	strd	r1, r2, [r0]
 8013d9a:	f04f 0e00 	mov.w	lr, #0
 8013d9e:	9a01      	ldr	r2, [sp, #4]
 8013da0:	8103      	strh	r3, [r0, #8]
 8013da2:	6102      	str	r2, [r0, #16]
 8013da4:	f880 e014 	strb.w	lr, [r0, #20]
 8013da8:	b1d3      	cbz	r3, 8013de0 <uxr_init_input_reliable_stream+0x4c>
 8013daa:	f8c1 e000 	str.w	lr, [r1]
 8013dae:	f8b0 c008 	ldrh.w	ip, [r0, #8]
 8013db2:	f1bc 0f01 	cmp.w	ip, #1
 8013db6:	d913      	bls.n	8013de0 <uxr_init_input_reliable_stream+0x4c>
 8013db8:	2301      	movs	r3, #1
 8013dba:	fbb3 f1fc 	udiv	r1, r3, ip
 8013dbe:	fb0c 3111 	mls	r1, ip, r1, r3
 8013dc2:	b289      	uxth	r1, r1
 8013dc4:	6842      	ldr	r2, [r0, #4]
 8013dc6:	fbb2 f2fc 	udiv	r2, r2, ip
 8013dca:	fb01 f202 	mul.w	r2, r1, r2
 8013dce:	6801      	ldr	r1, [r0, #0]
 8013dd0:	f841 e002 	str.w	lr, [r1, r2]
 8013dd4:	3301      	adds	r3, #1
 8013dd6:	f8b0 c008 	ldrh.w	ip, [r0, #8]
 8013dda:	b29b      	uxth	r3, r3
 8013ddc:	459c      	cmp	ip, r3
 8013dde:	d8ec      	bhi.n	8013dba <uxr_init_input_reliable_stream+0x26>
 8013de0:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8013de4:	60c3      	str	r3, [r0, #12]
 8013de6:	f85d fb04 	ldr.w	pc, [sp], #4
 8013dea:	bf00      	nop

08013dec <uxr_reset_input_reliable_stream>:
 8013dec:	8901      	ldrh	r1, [r0, #8]
 8013dee:	b1e9      	cbz	r1, 8013e2c <uxr_reset_input_reliable_stream+0x40>
 8013df0:	f04f 0c00 	mov.w	ip, #0
 8013df4:	b500      	push	{lr}
 8013df6:	4663      	mov	r3, ip
 8013df8:	46e6      	mov	lr, ip
 8013dfa:	fbb3 f2f1 	udiv	r2, r3, r1
 8013dfe:	fb01 3312 	mls	r3, r1, r2, r3
 8013e02:	b29b      	uxth	r3, r3
 8013e04:	6842      	ldr	r2, [r0, #4]
 8013e06:	fbb2 f2f1 	udiv	r2, r2, r1
 8013e0a:	fb02 f303 	mul.w	r3, r2, r3
 8013e0e:	6802      	ldr	r2, [r0, #0]
 8013e10:	f842 e003 	str.w	lr, [r2, r3]
 8013e14:	f10c 0c01 	add.w	ip, ip, #1
 8013e18:	8901      	ldrh	r1, [r0, #8]
 8013e1a:	fa1f f38c 	uxth.w	r3, ip
 8013e1e:	4299      	cmp	r1, r3
 8013e20:	d8eb      	bhi.n	8013dfa <uxr_reset_input_reliable_stream+0xe>
 8013e22:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8013e26:	60c3      	str	r3, [r0, #12]
 8013e28:	f85d fb04 	ldr.w	pc, [sp], #4
 8013e2c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8013e30:	60c3      	str	r3, [r0, #12]
 8013e32:	4770      	bx	lr

08013e34 <uxr_receive_reliable_message>:
 8013e34:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8013e38:	4604      	mov	r4, r0
 8013e3a:	460d      	mov	r5, r1
 8013e3c:	8901      	ldrh	r1, [r0, #8]
 8013e3e:	8980      	ldrh	r0, [r0, #12]
 8013e40:	4690      	mov	r8, r2
 8013e42:	461f      	mov	r7, r3
 8013e44:	f000 fc82 	bl	801474c <uxr_seq_num_add>
 8013e48:	4629      	mov	r1, r5
 8013e4a:	4606      	mov	r6, r0
 8013e4c:	89a0      	ldrh	r0, [r4, #12]
 8013e4e:	f000 fc85 	bl	801475c <uxr_seq_num_cmp>
 8013e52:	2800      	cmp	r0, #0
 8013e54:	db0a      	blt.n	8013e6c <uxr_receive_reliable_message+0x38>
 8013e56:	2600      	movs	r6, #0
 8013e58:	89e0      	ldrh	r0, [r4, #14]
 8013e5a:	4629      	mov	r1, r5
 8013e5c:	f000 fc7e 	bl	801475c <uxr_seq_num_cmp>
 8013e60:	2800      	cmp	r0, #0
 8013e62:	da00      	bge.n	8013e66 <uxr_receive_reliable_message+0x32>
 8013e64:	81e5      	strh	r5, [r4, #14]
 8013e66:	4630      	mov	r0, r6
 8013e68:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8013e6c:	4630      	mov	r0, r6
 8013e6e:	4629      	mov	r1, r5
 8013e70:	f000 fc74 	bl	801475c <uxr_seq_num_cmp>
 8013e74:	2800      	cmp	r0, #0
 8013e76:	dbee      	blt.n	8013e56 <uxr_receive_reliable_message+0x22>
 8013e78:	6923      	ldr	r3, [r4, #16]
 8013e7a:	4640      	mov	r0, r8
 8013e7c:	4798      	blx	r3
 8013e7e:	2101      	movs	r1, #1
 8013e80:	4681      	mov	r9, r0
 8013e82:	89a0      	ldrh	r0, [r4, #12]
 8013e84:	f000 fc62 	bl	801474c <uxr_seq_num_add>
 8013e88:	f1b9 0f00 	cmp.w	r9, #0
 8013e8c:	d101      	bne.n	8013e92 <uxr_receive_reliable_message+0x5e>
 8013e8e:	4285      	cmp	r5, r0
 8013e90:	d047      	beq.n	8013f22 <uxr_receive_reliable_message+0xee>
 8013e92:	8922      	ldrh	r2, [r4, #8]
 8013e94:	fbb5 f0f2 	udiv	r0, r5, r2
 8013e98:	fb02 5010 	mls	r0, r2, r0, r5
 8013e9c:	b280      	uxth	r0, r0
 8013e9e:	6863      	ldr	r3, [r4, #4]
 8013ea0:	fbb3 f3f2 	udiv	r3, r3, r2
 8013ea4:	fb00 f303 	mul.w	r3, r0, r3
 8013ea8:	6820      	ldr	r0, [r4, #0]
 8013eaa:	3304      	adds	r3, #4
 8013eac:	4418      	add	r0, r3
 8013eae:	f850 3c04 	ldr.w	r3, [r0, #-4]
 8013eb2:	2b00      	cmp	r3, #0
 8013eb4:	d1cf      	bne.n	8013e56 <uxr_receive_reliable_message+0x22>
 8013eb6:	4641      	mov	r1, r8
 8013eb8:	463a      	mov	r2, r7
 8013eba:	f001 fd7a 	bl	80159b2 <memcpy>
 8013ebe:	8921      	ldrh	r1, [r4, #8]
 8013ec0:	fbb5 f2f1 	udiv	r2, r5, r1
 8013ec4:	fb01 5212 	mls	r2, r1, r2, r5
 8013ec8:	b292      	uxth	r2, r2
 8013eca:	6863      	ldr	r3, [r4, #4]
 8013ecc:	fbb3 f3f1 	udiv	r3, r3, r1
 8013ed0:	fb02 f303 	mul.w	r3, r2, r3
 8013ed4:	6822      	ldr	r2, [r4, #0]
 8013ed6:	50d7      	str	r7, [r2, r3]
 8013ed8:	9a08      	ldr	r2, [sp, #32]
 8013eda:	2301      	movs	r3, #1
 8013edc:	7013      	strb	r3, [r2, #0]
 8013ede:	f1b9 0f00 	cmp.w	r9, #0
 8013ee2:	d0b8      	beq.n	8013e56 <uxr_receive_reliable_message+0x22>
 8013ee4:	89a6      	ldrh	r6, [r4, #12]
 8013ee6:	4630      	mov	r0, r6
 8013ee8:	2101      	movs	r1, #1
 8013eea:	f000 fc2f 	bl	801474c <uxr_seq_num_add>
 8013eee:	8922      	ldrh	r2, [r4, #8]
 8013ef0:	6863      	ldr	r3, [r4, #4]
 8013ef2:	fbb3 f3f2 	udiv	r3, r3, r2
 8013ef6:	4606      	mov	r6, r0
 8013ef8:	fbb0 f0f2 	udiv	r0, r0, r2
 8013efc:	fb02 6010 	mls	r0, r2, r0, r6
 8013f00:	b280      	uxth	r0, r0
 8013f02:	fb00 f303 	mul.w	r3, r0, r3
 8013f06:	6820      	ldr	r0, [r4, #0]
 8013f08:	3304      	adds	r3, #4
 8013f0a:	4418      	add	r0, r3
 8013f0c:	f850 3c04 	ldr.w	r3, [r0, #-4]
 8013f10:	2b00      	cmp	r3, #0
 8013f12:	d0a0      	beq.n	8013e56 <uxr_receive_reliable_message+0x22>
 8013f14:	6923      	ldr	r3, [r4, #16]
 8013f16:	4798      	blx	r3
 8013f18:	2802      	cmp	r0, #2
 8013f1a:	d008      	beq.n	8013f2e <uxr_receive_reliable_message+0xfa>
 8013f1c:	2801      	cmp	r0, #1
 8013f1e:	d0e2      	beq.n	8013ee6 <uxr_receive_reliable_message+0xb2>
 8013f20:	e799      	b.n	8013e56 <uxr_receive_reliable_message+0x22>
 8013f22:	9b08      	ldr	r3, [sp, #32]
 8013f24:	81a5      	strh	r5, [r4, #12]
 8013f26:	2601      	movs	r6, #1
 8013f28:	f883 9000 	strb.w	r9, [r3]
 8013f2c:	e794      	b.n	8013e58 <uxr_receive_reliable_message+0x24>
 8013f2e:	2601      	movs	r6, #1
 8013f30:	e792      	b.n	8013e58 <uxr_receive_reliable_message+0x24>
 8013f32:	bf00      	nop

08013f34 <uxr_next_input_reliable_buffer_available>:
 8013f34:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8013f38:	4604      	mov	r4, r0
 8013f3a:	460f      	mov	r7, r1
 8013f3c:	8980      	ldrh	r0, [r0, #12]
 8013f3e:	2101      	movs	r1, #1
 8013f40:	4690      	mov	r8, r2
 8013f42:	f000 fc03 	bl	801474c <uxr_seq_num_add>
 8013f46:	8922      	ldrh	r2, [r4, #8]
 8013f48:	fbb0 f6f2 	udiv	r6, r0, r2
 8013f4c:	fb02 0616 	mls	r6, r2, r6, r0
 8013f50:	b2b6      	uxth	r6, r6
 8013f52:	6863      	ldr	r3, [r4, #4]
 8013f54:	fbb3 f3f2 	udiv	r3, r3, r2
 8013f58:	fb06 f303 	mul.w	r3, r6, r3
 8013f5c:	6826      	ldr	r6, [r4, #0]
 8013f5e:	3304      	adds	r3, #4
 8013f60:	441e      	add	r6, r3
 8013f62:	f856 9c04 	ldr.w	r9, [r6, #-4]
 8013f66:	f1b9 0f00 	cmp.w	r9, #0
 8013f6a:	d023      	beq.n	8013fb4 <uxr_next_input_reliable_buffer_available+0x80>
 8013f6c:	6923      	ldr	r3, [r4, #16]
 8013f6e:	4605      	mov	r5, r0
 8013f70:	4630      	mov	r0, r6
 8013f72:	4798      	blx	r3
 8013f74:	4682      	mov	sl, r0
 8013f76:	b300      	cbz	r0, 8013fba <uxr_next_input_reliable_buffer_available+0x86>
 8013f78:	f8b4 a00c 	ldrh.w	sl, [r4, #12]
 8013f7c:	2101      	movs	r1, #1
 8013f7e:	4650      	mov	r0, sl
 8013f80:	f000 fbe4 	bl	801474c <uxr_seq_num_add>
 8013f84:	8921      	ldrh	r1, [r4, #8]
 8013f86:	fbb0 f2f1 	udiv	r2, r0, r1
 8013f8a:	4682      	mov	sl, r0
 8013f8c:	fb01 0212 	mls	r2, r1, r2, r0
 8013f90:	e9d4 0300 	ldrd	r0, r3, [r4]
 8013f94:	b292      	uxth	r2, r2
 8013f96:	fbb3 f3f1 	udiv	r3, r3, r1
 8013f9a:	fb02 f303 	mul.w	r3, r2, r3
 8013f9e:	3304      	adds	r3, #4
 8013fa0:	4418      	add	r0, r3
 8013fa2:	f850 3c04 	ldr.w	r3, [r0, #-4]
 8013fa6:	b12b      	cbz	r3, 8013fb4 <uxr_next_input_reliable_buffer_available+0x80>
 8013fa8:	6923      	ldr	r3, [r4, #16]
 8013faa:	4798      	blx	r3
 8013fac:	2802      	cmp	r0, #2
 8013fae:	d01b      	beq.n	8013fe8 <uxr_next_input_reliable_buffer_available+0xb4>
 8013fb0:	2801      	cmp	r0, #1
 8013fb2:	d0e3      	beq.n	8013f7c <uxr_next_input_reliable_buffer_available+0x48>
 8013fb4:	2000      	movs	r0, #0
 8013fb6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013fba:	464a      	mov	r2, r9
 8013fbc:	4631      	mov	r1, r6
 8013fbe:	4638      	mov	r0, r7
 8013fc0:	f7f8 fb6c 	bl	800c69c <ucdr_init_buffer>
 8013fc4:	8921      	ldrh	r1, [r4, #8]
 8013fc6:	fbb5 f2f1 	udiv	r2, r5, r1
 8013fca:	fb01 5212 	mls	r2, r1, r2, r5
 8013fce:	b292      	uxth	r2, r2
 8013fd0:	6863      	ldr	r3, [r4, #4]
 8013fd2:	fbb3 f3f1 	udiv	r3, r3, r1
 8013fd6:	fb02 f303 	mul.w	r3, r2, r3
 8013fda:	6822      	ldr	r2, [r4, #0]
 8013fdc:	f842 a003 	str.w	sl, [r2, r3]
 8013fe0:	2001      	movs	r0, #1
 8013fe2:	81a5      	strh	r5, [r4, #12]
 8013fe4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013fe8:	8920      	ldrh	r0, [r4, #8]
 8013fea:	fbb5 f3f0 	udiv	r3, r5, r0
 8013fee:	fb00 5513 	mls	r5, r0, r3, r5
 8013ff2:	b2ad      	uxth	r5, r5
 8013ff4:	6863      	ldr	r3, [r4, #4]
 8013ff6:	fbb3 f3f0 	udiv	r3, r3, r0
 8013ffa:	fb03 f505 	mul.w	r5, r3, r5
 8013ffe:	6823      	ldr	r3, [r4, #0]
 8014000:	2000      	movs	r0, #0
 8014002:	5158      	str	r0, [r3, r5]
 8014004:	eb06 0108 	add.w	r1, r6, r8
 8014008:	eba9 0208 	sub.w	r2, r9, r8
 801400c:	4638      	mov	r0, r7
 801400e:	f7f8 fb45 	bl	800c69c <ucdr_init_buffer>
 8014012:	4638      	mov	r0, r7
 8014014:	4903      	ldr	r1, [pc, #12]	@ (8014024 <uxr_next_input_reliable_buffer_available+0xf0>)
 8014016:	4622      	mov	r2, r4
 8014018:	f7f8 fb14 	bl	800c644 <ucdr_set_on_full_buffer_callback>
 801401c:	f8a4 a00c 	strh.w	sl, [r4, #12]
 8014020:	2001      	movs	r0, #1
 8014022:	e7c8      	b.n	8013fb6 <uxr_next_input_reliable_buffer_available+0x82>
 8014024:	08013d29 	.word	0x08013d29

08014028 <uxr_process_heartbeat>:
 8014028:	b538      	push	{r3, r4, r5, lr}
 801402a:	4611      	mov	r1, r2
 801402c:	4604      	mov	r4, r0
 801402e:	89c0      	ldrh	r0, [r0, #14]
 8014030:	4615      	mov	r5, r2
 8014032:	f000 fb93 	bl	801475c <uxr_seq_num_cmp>
 8014036:	2800      	cmp	r0, #0
 8014038:	bfb8      	it	lt
 801403a:	81e5      	strhlt	r5, [r4, #14]
 801403c:	bd38      	pop	{r3, r4, r5, pc}
 801403e:	bf00      	nop

08014040 <uxr_compute_acknack>:
 8014040:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8014044:	8903      	ldrh	r3, [r0, #8]
 8014046:	8985      	ldrh	r5, [r0, #12]
 8014048:	4604      	mov	r4, r0
 801404a:	460e      	mov	r6, r1
 801404c:	b1d3      	cbz	r3, 8014084 <uxr_compute_acknack+0x44>
 801404e:	4628      	mov	r0, r5
 8014050:	2701      	movs	r7, #1
 8014052:	e003      	b.n	801405c <uxr_compute_acknack+0x1c>
 8014054:	4567      	cmp	r7, ip
 8014056:	d215      	bcs.n	8014084 <uxr_compute_acknack+0x44>
 8014058:	89a0      	ldrh	r0, [r4, #12]
 801405a:	3701      	adds	r7, #1
 801405c:	b2b9      	uxth	r1, r7
 801405e:	f000 fb75 	bl	801474c <uxr_seq_num_add>
 8014062:	f8b4 c008 	ldrh.w	ip, [r4, #8]
 8014066:	fbb0 f3fc 	udiv	r3, r0, ip
 801406a:	fb0c 0313 	mls	r3, ip, r3, r0
 801406e:	b29a      	uxth	r2, r3
 8014070:	e9d4 1300 	ldrd	r1, r3, [r4]
 8014074:	fbb3 f3fc 	udiv	r3, r3, ip
 8014078:	fb02 f303 	mul.w	r3, r2, r3
 801407c:	58cb      	ldr	r3, [r1, r3]
 801407e:	2b00      	cmp	r3, #0
 8014080:	d1e8      	bne.n	8014054 <uxr_compute_acknack+0x14>
 8014082:	4605      	mov	r5, r0
 8014084:	8035      	strh	r5, [r6, #0]
 8014086:	2101      	movs	r1, #1
 8014088:	4628      	mov	r0, r5
 801408a:	89e7      	ldrh	r7, [r4, #14]
 801408c:	f000 fb62 	bl	8014754 <uxr_seq_num_sub>
 8014090:	4601      	mov	r1, r0
 8014092:	4638      	mov	r0, r7
 8014094:	f000 fb5e 	bl	8014754 <uxr_seq_num_sub>
 8014098:	4605      	mov	r5, r0
 801409a:	b318      	cbz	r0, 80140e4 <uxr_compute_acknack+0xa4>
 801409c:	f04f 0900 	mov.w	r9, #0
 80140a0:	464f      	mov	r7, r9
 80140a2:	f04f 0801 	mov.w	r8, #1
 80140a6:	fa1f f189 	uxth.w	r1, r9
 80140aa:	8830      	ldrh	r0, [r6, #0]
 80140ac:	f000 fb4e 	bl	801474c <uxr_seq_num_add>
 80140b0:	f8b4 c008 	ldrh.w	ip, [r4, #8]
 80140b4:	fbb0 f3fc 	udiv	r3, r0, ip
 80140b8:	e9d4 1200 	ldrd	r1, r2, [r4]
 80140bc:	fb03 001c 	mls	r0, r3, ip, r0
 80140c0:	b283      	uxth	r3, r0
 80140c2:	fbb2 f2fc 	udiv	r2, r2, ip
 80140c6:	fb02 f303 	mul.w	r3, r2, r3
 80140ca:	fa08 f209 	lsl.w	r2, r8, r9
 80140ce:	58cb      	ldr	r3, [r1, r3]
 80140d0:	f109 0901 	add.w	r9, r9, #1
 80140d4:	b90b      	cbnz	r3, 80140da <uxr_compute_acknack+0x9a>
 80140d6:	4317      	orrs	r7, r2
 80140d8:	b2bf      	uxth	r7, r7
 80140da:	454d      	cmp	r5, r9
 80140dc:	d1e3      	bne.n	80140a6 <uxr_compute_acknack+0x66>
 80140de:	4638      	mov	r0, r7
 80140e0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80140e4:	4607      	mov	r7, r0
 80140e6:	4638      	mov	r0, r7
 80140e8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

080140ec <uxr_init_output_best_effort_stream>:
 80140ec:	f64f 7cff 	movw	ip, #65535	@ 0xffff
 80140f0:	e9c0 3201 	strd	r3, r2, [r0, #4]
 80140f4:	6001      	str	r1, [r0, #0]
 80140f6:	7303      	strb	r3, [r0, #12]
 80140f8:	f8a0 c00e 	strh.w	ip, [r0, #14]
 80140fc:	4770      	bx	lr
 80140fe:	bf00      	nop

08014100 <uxr_reset_output_best_effort_stream>:
 8014100:	7b02      	ldrb	r2, [r0, #12]
 8014102:	6042      	str	r2, [r0, #4]
 8014104:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8014108:	81c3      	strh	r3, [r0, #14]
 801410a:	4770      	bx	lr

0801410c <uxr_prepare_best_effort_buffer_to_write>:
 801410c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801410e:	4604      	mov	r4, r0
 8014110:	b083      	sub	sp, #12
 8014112:	6840      	ldr	r0, [r0, #4]
 8014114:	460d      	mov	r5, r1
 8014116:	4616      	mov	r6, r2
 8014118:	f7fa fd4c 	bl	800ebb4 <uxr_submessage_padding>
 801411c:	6863      	ldr	r3, [r4, #4]
 801411e:	4418      	add	r0, r3
 8014120:	68a3      	ldr	r3, [r4, #8]
 8014122:	1942      	adds	r2, r0, r5
 8014124:	4293      	cmp	r3, r2
 8014126:	bf2c      	ite	cs
 8014128:	2701      	movcs	r7, #1
 801412a:	2700      	movcc	r7, #0
 801412c:	d202      	bcs.n	8014134 <uxr_prepare_best_effort_buffer_to_write+0x28>
 801412e:	4638      	mov	r0, r7
 8014130:	b003      	add	sp, #12
 8014132:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8014134:	9000      	str	r0, [sp, #0]
 8014136:	6821      	ldr	r1, [r4, #0]
 8014138:	4630      	mov	r0, r6
 801413a:	2300      	movs	r3, #0
 801413c:	f7f8 fa9c 	bl	800c678 <ucdr_init_buffer_origin_offset>
 8014140:	6861      	ldr	r1, [r4, #4]
 8014142:	4638      	mov	r0, r7
 8014144:	4429      	add	r1, r5
 8014146:	6061      	str	r1, [r4, #4]
 8014148:	b003      	add	sp, #12
 801414a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0801414c <uxr_prepare_best_effort_buffer_to_send>:
 801414c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014150:	4604      	mov	r4, r0
 8014152:	461d      	mov	r5, r3
 8014154:	6840      	ldr	r0, [r0, #4]
 8014156:	7b23      	ldrb	r3, [r4, #12]
 8014158:	4298      	cmp	r0, r3
 801415a:	bf8c      	ite	hi
 801415c:	2601      	movhi	r6, #1
 801415e:	2600      	movls	r6, #0
 8014160:	d802      	bhi.n	8014168 <uxr_prepare_best_effort_buffer_to_send+0x1c>
 8014162:	4630      	mov	r0, r6
 8014164:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014168:	4688      	mov	r8, r1
 801416a:	89e0      	ldrh	r0, [r4, #14]
 801416c:	2101      	movs	r1, #1
 801416e:	4617      	mov	r7, r2
 8014170:	f000 faec 	bl	801474c <uxr_seq_num_add>
 8014174:	6823      	ldr	r3, [r4, #0]
 8014176:	81e0      	strh	r0, [r4, #14]
 8014178:	8028      	strh	r0, [r5, #0]
 801417a:	f8c8 3000 	str.w	r3, [r8]
 801417e:	6863      	ldr	r3, [r4, #4]
 8014180:	603b      	str	r3, [r7, #0]
 8014182:	7b23      	ldrb	r3, [r4, #12]
 8014184:	6063      	str	r3, [r4, #4]
 8014186:	4630      	mov	r0, r6
 8014188:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0801418c <on_full_output_buffer>:
 801418c:	b538      	push	{r3, r4, r5, lr}
 801418e:	6802      	ldr	r2, [r0, #0]
 8014190:	460c      	mov	r4, r1
 8014192:	6809      	ldr	r1, [r1, #0]
 8014194:	8923      	ldrh	r3, [r4, #8]
 8014196:	eba2 0c01 	sub.w	ip, r2, r1
 801419a:	6862      	ldr	r2, [r4, #4]
 801419c:	fbb2 f2f3 	udiv	r2, r2, r3
 80141a0:	fbbc fcf2 	udiv	ip, ip, r2
 80141a4:	f10c 0c01 	add.w	ip, ip, #1
 80141a8:	fa1f fc8c 	uxth.w	ip, ip
 80141ac:	fbbc fef3 	udiv	lr, ip, r3
 80141b0:	fb03 c31e 	mls	r3, r3, lr, ip
 80141b4:	b29b      	uxth	r3, r3
 80141b6:	fb02 f303 	mul.w	r3, r2, r3
 80141ba:	f894 c00c 	ldrb.w	ip, [r4, #12]
 80141be:	58ca      	ldr	r2, [r1, r3]
 80141c0:	4463      	add	r3, ip
 80141c2:	eba2 020c 	sub.w	r2, r2, ip
 80141c6:	3308      	adds	r3, #8
 80141c8:	4605      	mov	r5, r0
 80141ca:	4419      	add	r1, r3
 80141cc:	3a04      	subs	r2, #4
 80141ce:	6903      	ldr	r3, [r0, #16]
 80141d0:	f7f8 fa5c 	bl	800c68c <ucdr_init_buffer_origin>
 80141d4:	4628      	mov	r0, r5
 80141d6:	4903      	ldr	r1, [pc, #12]	@ (80141e4 <on_full_output_buffer+0x58>)
 80141d8:	4622      	mov	r2, r4
 80141da:	f7f8 fa33 	bl	800c644 <ucdr_set_on_full_buffer_callback>
 80141de:	2000      	movs	r0, #0
 80141e0:	bd38      	pop	{r3, r4, r5, pc}
 80141e2:	bf00      	nop
 80141e4:	0801418d 	.word	0x0801418d

080141e8 <uxr_init_output_reliable_stream>:
 80141e8:	b410      	push	{r4}
 80141ea:	f89d c004 	ldrb.w	ip, [sp, #4]
 80141ee:	8103      	strh	r3, [r0, #8]
 80141f0:	e9c0 1200 	strd	r1, r2, [r0]
 80141f4:	f880 c00c 	strb.w	ip, [r0, #12]
 80141f8:	b1d3      	cbz	r3, 8014230 <uxr_init_output_reliable_stream+0x48>
 80141fa:	f8c1 c000 	str.w	ip, [r1]
 80141fe:	f8b0 c008 	ldrh.w	ip, [r0, #8]
 8014202:	f1bc 0f01 	cmp.w	ip, #1
 8014206:	d913      	bls.n	8014230 <uxr_init_output_reliable_stream+0x48>
 8014208:	2301      	movs	r3, #1
 801420a:	fbb3 f1fc 	udiv	r1, r3, ip
 801420e:	fb0c 3111 	mls	r1, ip, r1, r3
 8014212:	b289      	uxth	r1, r1
 8014214:	6842      	ldr	r2, [r0, #4]
 8014216:	6804      	ldr	r4, [r0, #0]
 8014218:	fbb2 f2fc 	udiv	r2, r2, ip
 801421c:	fb01 f202 	mul.w	r2, r1, r2
 8014220:	7b01      	ldrb	r1, [r0, #12]
 8014222:	50a1      	str	r1, [r4, r2]
 8014224:	3301      	adds	r3, #1
 8014226:	f8b0 c008 	ldrh.w	ip, [r0, #8]
 801422a:	b29b      	uxth	r3, r3
 801422c:	459c      	cmp	ip, r3
 801422e:	d8ec      	bhi.n	801420a <uxr_init_output_reliable_stream+0x22>
 8014230:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8014234:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 8014238:	e9c0 2306 	strd	r2, r3, [r0, #24]
 801423c:	4905      	ldr	r1, [pc, #20]	@ (8014254 <uxr_init_output_reliable_stream+0x6c>)
 801423e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8014242:	f8c0 100e 	str.w	r1, [r0, #14]
 8014246:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 801424a:	2300      	movs	r3, #0
 801424c:	8242      	strh	r2, [r0, #18]
 801424e:	8403      	strh	r3, [r0, #32]
 8014250:	4770      	bx	lr
 8014252:	bf00      	nop
 8014254:	ffff0000 	.word	0xffff0000

08014258 <uxr_reset_output_reliable_stream>:
 8014258:	8901      	ldrh	r1, [r0, #8]
 801425a:	b1b1      	cbz	r1, 801428a <uxr_reset_output_reliable_stream+0x32>
 801425c:	f04f 0c00 	mov.w	ip, #0
 8014260:	4663      	mov	r3, ip
 8014262:	fbb3 f2f1 	udiv	r2, r3, r1
 8014266:	fb01 3312 	mls	r3, r1, r2, r3
 801426a:	b29b      	uxth	r3, r3
 801426c:	6842      	ldr	r2, [r0, #4]
 801426e:	fbb2 f2f1 	udiv	r2, r2, r1
 8014272:	6801      	ldr	r1, [r0, #0]
 8014274:	fb02 f303 	mul.w	r3, r2, r3
 8014278:	7b02      	ldrb	r2, [r0, #12]
 801427a:	50ca      	str	r2, [r1, r3]
 801427c:	f10c 0c01 	add.w	ip, ip, #1
 8014280:	8901      	ldrh	r1, [r0, #8]
 8014282:	fa1f f38c 	uxth.w	r3, ip
 8014286:	4299      	cmp	r1, r3
 8014288:	d8eb      	bhi.n	8014262 <uxr_reset_output_reliable_stream+0xa>
 801428a:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 801428e:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 8014292:	e9c0 2306 	strd	r2, r3, [r0, #24]
 8014296:	4904      	ldr	r1, [pc, #16]	@ (80142a8 <uxr_reset_output_reliable_stream+0x50>)
 8014298:	f8c0 100e 	str.w	r1, [r0, #14]
 801429c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80142a0:	2300      	movs	r3, #0
 80142a2:	8242      	strh	r2, [r0, #18]
 80142a4:	8403      	strh	r3, [r0, #32]
 80142a6:	4770      	bx	lr
 80142a8:	ffff0000 	.word	0xffff0000

080142ac <uxr_prepare_reliable_buffer_to_write>:
 80142ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80142b0:	4604      	mov	r4, r0
 80142b2:	b091      	sub	sp, #68	@ 0x44
 80142b4:	8900      	ldrh	r0, [r0, #8]
 80142b6:	89e6      	ldrh	r6, [r4, #14]
 80142b8:	6823      	ldr	r3, [r4, #0]
 80142ba:	9204      	str	r2, [sp, #16]
 80142bc:	fbb6 f2f0 	udiv	r2, r6, r0
 80142c0:	fb00 6212 	mls	r2, r0, r2, r6
 80142c4:	b292      	uxth	r2, r2
 80142c6:	6865      	ldr	r5, [r4, #4]
 80142c8:	fbb5 f5f0 	udiv	r5, r5, r0
 80142cc:	fb05 3202 	mla	r2, r5, r2, r3
 80142d0:	3204      	adds	r2, #4
 80142d2:	f852 8c04 	ldr.w	r8, [r2, #-4]
 80142d6:	f894 900c 	ldrb.w	r9, [r4, #12]
 80142da:	9203      	str	r2, [sp, #12]
 80142dc:	468b      	mov	fp, r1
 80142de:	1f2f      	subs	r7, r5, #4
 80142e0:	2800      	cmp	r0, #0
 80142e2:	f000 814c 	beq.w	801457e <uxr_prepare_reliable_buffer_to_write+0x2d2>
 80142e6:	f04f 0c00 	mov.w	ip, #0
 80142ea:	46e2      	mov	sl, ip
 80142ec:	4661      	mov	r1, ip
 80142ee:	fbb1 f2f0 	udiv	r2, r1, r0
 80142f2:	fb00 1212 	mls	r2, r0, r2, r1
 80142f6:	b292      	uxth	r2, r2
 80142f8:	fb05 f202 	mul.w	r2, r5, r2
 80142fc:	f10c 0c01 	add.w	ip, ip, #1
 8014300:	589a      	ldr	r2, [r3, r2]
 8014302:	454a      	cmp	r2, r9
 8014304:	bf08      	it	eq
 8014306:	f10a 0a01 	addeq.w	sl, sl, #1
 801430a:	fa1f f18c 	uxth.w	r1, ip
 801430e:	bf08      	it	eq
 8014310:	fa1f fa8a 	uxtheq.w	sl, sl
 8014314:	4281      	cmp	r1, r0
 8014316:	d3ea      	bcc.n	80142ee <uxr_prepare_reliable_buffer_to_write+0x42>
 8014318:	4640      	mov	r0, r8
 801431a:	2104      	movs	r1, #4
 801431c:	f8cd a014 	str.w	sl, [sp, #20]
 8014320:	f7f8 f9c0 	bl	800c6a4 <ucdr_alignment>
 8014324:	4480      	add	r8, r0
 8014326:	eb08 020b 	add.w	r2, r8, fp
 801432a:	42ba      	cmp	r2, r7
 801432c:	f240 80cd 	bls.w	80144ca <uxr_prepare_reliable_buffer_to_write+0x21e>
 8014330:	7b22      	ldrb	r2, [r4, #12]
 8014332:	445a      	add	r2, fp
 8014334:	42ba      	cmp	r2, r7
 8014336:	f240 80b5 	bls.w	80144a4 <uxr_prepare_reliable_buffer_to_write+0x1f8>
 801433a:	f5c9 437f 	rsb	r3, r9, #65280	@ 0xff00
 801433e:	33fc      	adds	r3, #252	@ 0xfc
 8014340:	b2ba      	uxth	r2, r7
 8014342:	4413      	add	r3, r2
 8014344:	b29b      	uxth	r3, r3
 8014346:	fb0a f903 	mul.w	r9, sl, r3
 801434a:	45d9      	cmp	r9, fp
 801434c:	9305      	str	r3, [sp, #20]
 801434e:	9306      	str	r3, [sp, #24]
 8014350:	f0c0 80b7 	bcc.w	80144c2 <uxr_prepare_reliable_buffer_to_write+0x216>
 8014354:	f108 0304 	add.w	r3, r8, #4
 8014358:	42bb      	cmp	r3, r7
 801435a:	f080 80db 	bcs.w	8014514 <uxr_prepare_reliable_buffer_to_write+0x268>
 801435e:	f1a2 0904 	sub.w	r9, r2, #4
 8014362:	eba9 0908 	sub.w	r9, r9, r8
 8014366:	9b05      	ldr	r3, [sp, #20]
 8014368:	fa1f f989 	uxth.w	r9, r9
 801436c:	ebab 0b09 	sub.w	fp, fp, r9
 8014370:	fbbb f2f3 	udiv	r2, fp, r3
 8014374:	fb03 b312 	mls	r3, r3, r2, fp
 8014378:	2b00      	cmp	r3, #0
 801437a:	f000 80c8 	beq.w	801450e <uxr_prepare_reliable_buffer_to_write+0x262>
 801437e:	3201      	adds	r2, #1
 8014380:	b292      	uxth	r2, r2
 8014382:	9306      	str	r3, [sp, #24]
 8014384:	4552      	cmp	r2, sl
 8014386:	f200 809c 	bhi.w	80144c2 <uxr_prepare_reliable_buffer_to_write+0x216>
 801438a:	f10d 0b20 	add.w	fp, sp, #32
 801438e:	2a00      	cmp	r2, #0
 8014390:	d042      	beq.n	8014418 <uxr_prepare_reliable_buffer_to_write+0x16c>
 8014392:	f8cd 801c 	str.w	r8, [sp, #28]
 8014396:	f04f 0a00 	mov.w	sl, #0
 801439a:	f8dd 8014 	ldr.w	r8, [sp, #20]
 801439e:	9505      	str	r5, [sp, #20]
 80143a0:	f10d 0b20 	add.w	fp, sp, #32
 80143a4:	4615      	mov	r5, r2
 80143a6:	e000      	b.n	80143aa <uxr_prepare_reliable_buffer_to_write+0xfe>
 80143a8:	46c1      	mov	r9, r8
 80143aa:	8920      	ldrh	r0, [r4, #8]
 80143ac:	fbb6 f2f0 	udiv	r2, r6, r0
 80143b0:	fb00 6112 	mls	r1, r0, r2, r6
 80143b4:	b28a      	uxth	r2, r1
 80143b6:	6863      	ldr	r3, [r4, #4]
 80143b8:	fbb3 f1f0 	udiv	r1, r3, r0
 80143bc:	6823      	ldr	r3, [r4, #0]
 80143be:	fb02 f101 	mul.w	r1, r2, r1
 80143c2:	3104      	adds	r1, #4
 80143c4:	4419      	add	r1, r3
 80143c6:	4658      	mov	r0, fp
 80143c8:	f851 2c04 	ldr.w	r2, [r1, #-4]
 80143cc:	9200      	str	r2, [sp, #0]
 80143ce:	2300      	movs	r3, #0
 80143d0:	463a      	mov	r2, r7
 80143d2:	f7f8 f951 	bl	800c678 <ucdr_init_buffer_origin_offset>
 80143d6:	464a      	mov	r2, r9
 80143d8:	2300      	movs	r3, #0
 80143da:	210d      	movs	r1, #13
 80143dc:	4658      	mov	r0, fp
 80143de:	f7fa fba9 	bl	800eb34 <uxr_buffer_submessage_header>
 80143e2:	8921      	ldrh	r1, [r4, #8]
 80143e4:	fbb6 f2f1 	udiv	r2, r6, r1
 80143e8:	fb01 6212 	mls	r2, r1, r2, r6
 80143ec:	b292      	uxth	r2, r2
 80143ee:	6863      	ldr	r3, [r4, #4]
 80143f0:	fbb3 f3f1 	udiv	r3, r3, r1
 80143f4:	fb02 f303 	mul.w	r3, r2, r3
 80143f8:	6822      	ldr	r2, [r4, #0]
 80143fa:	4630      	mov	r0, r6
 80143fc:	50d7      	str	r7, [r2, r3]
 80143fe:	2101      	movs	r1, #1
 8014400:	f000 f9a4 	bl	801474c <uxr_seq_num_add>
 8014404:	f10a 0a01 	add.w	sl, sl, #1
 8014408:	fa1f f38a 	uxth.w	r3, sl
 801440c:	429d      	cmp	r5, r3
 801440e:	4606      	mov	r6, r0
 8014410:	d8ca      	bhi.n	80143a8 <uxr_prepare_reliable_buffer_to_write+0xfc>
 8014412:	f8dd 801c 	ldr.w	r8, [sp, #28]
 8014416:	9d05      	ldr	r5, [sp, #20]
 8014418:	8920      	ldrh	r0, [r4, #8]
 801441a:	fbb6 f3f0 	udiv	r3, r6, r0
 801441e:	fb00 6313 	mls	r3, r0, r3, r6
 8014422:	b299      	uxth	r1, r3
 8014424:	6863      	ldr	r3, [r4, #4]
 8014426:	fbb3 f3f0 	udiv	r3, r3, r0
 801442a:	fb01 f303 	mul.w	r3, r1, r3
 801442e:	6821      	ldr	r1, [r4, #0]
 8014430:	3304      	adds	r3, #4
 8014432:	4419      	add	r1, r3
 8014434:	463a      	mov	r2, r7
 8014436:	f851 0c04 	ldr.w	r0, [r1, #-4]
 801443a:	9000      	str	r0, [sp, #0]
 801443c:	2300      	movs	r3, #0
 801443e:	4658      	mov	r0, fp
 8014440:	f7f8 f91a 	bl	800c678 <ucdr_init_buffer_origin_offset>
 8014444:	f8dd 9018 	ldr.w	r9, [sp, #24]
 8014448:	4658      	mov	r0, fp
 801444a:	fa1f f289 	uxth.w	r2, r9
 801444e:	2302      	movs	r3, #2
 8014450:	210d      	movs	r1, #13
 8014452:	f7fa fb6f 	bl	800eb34 <uxr_buffer_submessage_header>
 8014456:	9b03      	ldr	r3, [sp, #12]
 8014458:	8927      	ldrh	r7, [r4, #8]
 801445a:	7b20      	ldrb	r0, [r4, #12]
 801445c:	f108 0104 	add.w	r1, r8, #4
 8014460:	440b      	add	r3, r1
 8014462:	4619      	mov	r1, r3
 8014464:	fbb6 f3f7 	udiv	r3, r6, r7
 8014468:	fb07 6313 	mls	r3, r7, r3, r6
 801446c:	f1a5 0208 	sub.w	r2, r5, #8
 8014470:	b29d      	uxth	r5, r3
 8014472:	3004      	adds	r0, #4
 8014474:	6863      	ldr	r3, [r4, #4]
 8014476:	fbb3 f3f7 	udiv	r3, r3, r7
 801447a:	fb05 f303 	mul.w	r3, r5, r3
 801447e:	6825      	ldr	r5, [r4, #0]
 8014480:	4448      	add	r0, r9
 8014482:	50e8      	str	r0, [r5, r3]
 8014484:	9d04      	ldr	r5, [sp, #16]
 8014486:	eba2 0208 	sub.w	r2, r2, r8
 801448a:	4628      	mov	r0, r5
 801448c:	f7f8 f906 	bl	800c69c <ucdr_init_buffer>
 8014490:	4628      	mov	r0, r5
 8014492:	493c      	ldr	r1, [pc, #240]	@ (8014584 <uxr_prepare_reliable_buffer_to_write+0x2d8>)
 8014494:	4622      	mov	r2, r4
 8014496:	f7f8 f8d5 	bl	800c644 <ucdr_set_on_full_buffer_callback>
 801449a:	2001      	movs	r0, #1
 801449c:	81e6      	strh	r6, [r4, #14]
 801449e:	b011      	add	sp, #68	@ 0x44
 80144a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80144a4:	2101      	movs	r1, #1
 80144a6:	89e0      	ldrh	r0, [r4, #14]
 80144a8:	f000 f950 	bl	801474c <uxr_seq_num_add>
 80144ac:	8921      	ldrh	r1, [r4, #8]
 80144ae:	4605      	mov	r5, r0
 80144b0:	8a60      	ldrh	r0, [r4, #18]
 80144b2:	f000 f94b 	bl	801474c <uxr_seq_num_add>
 80144b6:	4601      	mov	r1, r0
 80144b8:	4628      	mov	r0, r5
 80144ba:	f000 f94f 	bl	801475c <uxr_seq_num_cmp>
 80144be:	2800      	cmp	r0, #0
 80144c0:	dd42      	ble.n	8014548 <uxr_prepare_reliable_buffer_to_write+0x29c>
 80144c2:	2000      	movs	r0, #0
 80144c4:	b011      	add	sp, #68	@ 0x44
 80144c6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80144ca:	8921      	ldrh	r1, [r4, #8]
 80144cc:	8a60      	ldrh	r0, [r4, #18]
 80144ce:	9205      	str	r2, [sp, #20]
 80144d0:	f000 f93c 	bl	801474c <uxr_seq_num_add>
 80144d4:	4601      	mov	r1, r0
 80144d6:	4630      	mov	r0, r6
 80144d8:	f000 f940 	bl	801475c <uxr_seq_num_cmp>
 80144dc:	2800      	cmp	r0, #0
 80144de:	9a05      	ldr	r2, [sp, #20]
 80144e0:	dcef      	bgt.n	80144c2 <uxr_prepare_reliable_buffer_to_write+0x216>
 80144e2:	8927      	ldrh	r7, [r4, #8]
 80144e4:	fbb6 f3f7 	udiv	r3, r6, r7
 80144e8:	fb07 6313 	mls	r3, r7, r3, r6
 80144ec:	b29d      	uxth	r5, r3
 80144ee:	6863      	ldr	r3, [r4, #4]
 80144f0:	6824      	ldr	r4, [r4, #0]
 80144f2:	fbb3 f3f7 	udiv	r3, r3, r7
 80144f6:	fb05 f303 	mul.w	r3, r5, r3
 80144fa:	e9dd 1003 	ldrd	r1, r0, [sp, #12]
 80144fe:	50e2      	str	r2, [r4, r3]
 8014500:	2300      	movs	r3, #0
 8014502:	f8cd 8000 	str.w	r8, [sp]
 8014506:	f7f8 f8b7 	bl	800c678 <ucdr_init_buffer_origin_offset>
 801450a:	2001      	movs	r0, #1
 801450c:	e7da      	b.n	80144c4 <uxr_prepare_reliable_buffer_to_write+0x218>
 801450e:	b293      	uxth	r3, r2
 8014510:	461a      	mov	r2, r3
 8014512:	e737      	b.n	8014384 <uxr_prepare_reliable_buffer_to_write+0xd8>
 8014514:	4630      	mov	r0, r6
 8014516:	2101      	movs	r1, #1
 8014518:	9207      	str	r2, [sp, #28]
 801451a:	f000 f917 	bl	801474c <uxr_seq_num_add>
 801451e:	f8b4 c008 	ldrh.w	ip, [r4, #8]
 8014522:	fbb0 f1fc 	udiv	r1, r0, ip
 8014526:	fb0c 0111 	mls	r1, ip, r1, r0
 801452a:	4606      	mov	r6, r0
 801452c:	b288      	uxth	r0, r1
 801452e:	6863      	ldr	r3, [r4, #4]
 8014530:	fbb3 f1fc 	udiv	r1, r3, ip
 8014534:	6823      	ldr	r3, [r4, #0]
 8014536:	9a07      	ldr	r2, [sp, #28]
 8014538:	fb00 f101 	mul.w	r1, r0, r1
 801453c:	3104      	adds	r1, #4
 801453e:	440b      	add	r3, r1
 8014540:	9303      	str	r3, [sp, #12]
 8014542:	f853 8c04 	ldr.w	r8, [r3, #-4]
 8014546:	e70a      	b.n	801435e <uxr_prepare_reliable_buffer_to_write+0xb2>
 8014548:	8921      	ldrh	r1, [r4, #8]
 801454a:	fbb5 f3f1 	udiv	r3, r5, r1
 801454e:	fb01 5313 	mls	r3, r1, r3, r5
 8014552:	b29a      	uxth	r2, r3
 8014554:	6863      	ldr	r3, [r4, #4]
 8014556:	fbb3 f3f1 	udiv	r3, r3, r1
 801455a:	6821      	ldr	r1, [r4, #0]
 801455c:	9804      	ldr	r0, [sp, #16]
 801455e:	fb02 f303 	mul.w	r3, r2, r3
 8014562:	3304      	adds	r3, #4
 8014564:	7b22      	ldrb	r2, [r4, #12]
 8014566:	4419      	add	r1, r3
 8014568:	445a      	add	r2, fp
 801456a:	f841 2c04 	str.w	r2, [r1, #-4]
 801456e:	7b23      	ldrb	r3, [r4, #12]
 8014570:	9300      	str	r3, [sp, #0]
 8014572:	2300      	movs	r3, #0
 8014574:	f7f8 f880 	bl	800c678 <ucdr_init_buffer_origin_offset>
 8014578:	81e5      	strh	r5, [r4, #14]
 801457a:	2001      	movs	r0, #1
 801457c:	e7a2      	b.n	80144c4 <uxr_prepare_reliable_buffer_to_write+0x218>
 801457e:	4682      	mov	sl, r0
 8014580:	e6ca      	b.n	8014318 <uxr_prepare_reliable_buffer_to_write+0x6c>
 8014582:	bf00      	nop
 8014584:	0801418d 	.word	0x0801418d

08014588 <uxr_prepare_next_reliable_buffer_to_send>:
 8014588:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801458a:	4604      	mov	r4, r0
 801458c:	460f      	mov	r7, r1
 801458e:	8a00      	ldrh	r0, [r0, #16]
 8014590:	2101      	movs	r1, #1
 8014592:	4616      	mov	r6, r2
 8014594:	461d      	mov	r5, r3
 8014596:	f000 f8d9 	bl	801474c <uxr_seq_num_add>
 801459a:	8028      	strh	r0, [r5, #0]
 801459c:	8922      	ldrh	r2, [r4, #8]
 801459e:	fbb0 f3f2 	udiv	r3, r0, r2
 80145a2:	fb02 0c13 	mls	ip, r2, r3, r0
 80145a6:	fa1f fc8c 	uxth.w	ip, ip
 80145aa:	6863      	ldr	r3, [r4, #4]
 80145ac:	fbb3 f3f2 	udiv	r3, r3, r2
 80145b0:	fb0c fc03 	mul.w	ip, ip, r3
 80145b4:	6823      	ldr	r3, [r4, #0]
 80145b6:	89e1      	ldrh	r1, [r4, #14]
 80145b8:	f10c 0c04 	add.w	ip, ip, #4
 80145bc:	4463      	add	r3, ip
 80145be:	603b      	str	r3, [r7, #0]
 80145c0:	6823      	ldr	r3, [r4, #0]
 80145c2:	449c      	add	ip, r3
 80145c4:	f85c 3c04 	ldr.w	r3, [ip, #-4]
 80145c8:	6033      	str	r3, [r6, #0]
 80145ca:	f000 f8c7 	bl	801475c <uxr_seq_num_cmp>
 80145ce:	2800      	cmp	r0, #0
 80145d0:	dd01      	ble.n	80145d6 <uxr_prepare_next_reliable_buffer_to_send+0x4e>
 80145d2:	2000      	movs	r0, #0
 80145d4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80145d6:	7b23      	ldrb	r3, [r4, #12]
 80145d8:	6832      	ldr	r2, [r6, #0]
 80145da:	429a      	cmp	r2, r3
 80145dc:	d9f9      	bls.n	80145d2 <uxr_prepare_next_reliable_buffer_to_send+0x4a>
 80145de:	8a61      	ldrh	r1, [r4, #18]
 80145e0:	8a20      	ldrh	r0, [r4, #16]
 80145e2:	f000 f8b7 	bl	8014754 <uxr_seq_num_sub>
 80145e6:	8923      	ldrh	r3, [r4, #8]
 80145e8:	4283      	cmp	r3, r0
 80145ea:	d0f2      	beq.n	80145d2 <uxr_prepare_next_reliable_buffer_to_send+0x4a>
 80145ec:	8828      	ldrh	r0, [r5, #0]
 80145ee:	89e3      	ldrh	r3, [r4, #14]
 80145f0:	8220      	strh	r0, [r4, #16]
 80145f2:	4298      	cmp	r0, r3
 80145f4:	d001      	beq.n	80145fa <uxr_prepare_next_reliable_buffer_to_send+0x72>
 80145f6:	2001      	movs	r0, #1
 80145f8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80145fa:	2101      	movs	r1, #1
 80145fc:	f000 f8a6 	bl	801474c <uxr_seq_num_add>
 8014600:	81e0      	strh	r0, [r4, #14]
 8014602:	2001      	movs	r0, #1
 8014604:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8014606:	bf00      	nop

08014608 <uxr_update_output_stream_heartbeat_timestamp>:
 8014608:	b570      	push	{r4, r5, r6, lr}
 801460a:	8a01      	ldrh	r1, [r0, #16]
 801460c:	4604      	mov	r4, r0
 801460e:	8a40      	ldrh	r0, [r0, #18]
 8014610:	4615      	mov	r5, r2
 8014612:	461e      	mov	r6, r3
 8014614:	f000 f8a2 	bl	801475c <uxr_seq_num_cmp>
 8014618:	2800      	cmp	r0, #0
 801461a:	db07      	blt.n	801462c <uxr_update_output_stream_heartbeat_timestamp+0x24>
 801461c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8014620:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 8014624:	e9c4 2306 	strd	r2, r3, [r4, #24]
 8014628:	2000      	movs	r0, #0
 801462a:	bd70      	pop	{r4, r5, r6, pc}
 801462c:	f894 0020 	ldrb.w	r0, [r4, #32]
 8014630:	b940      	cbnz	r0, 8014644 <uxr_update_output_stream_heartbeat_timestamp+0x3c>
 8014632:	2301      	movs	r3, #1
 8014634:	f884 3020 	strb.w	r3, [r4, #32]
 8014638:	3564      	adds	r5, #100	@ 0x64
 801463a:	f146 0600 	adc.w	r6, r6, #0
 801463e:	e9c4 5606 	strd	r5, r6, [r4, #24]
 8014642:	bd70      	pop	{r4, r5, r6, pc}
 8014644:	e9d4 2306 	ldrd	r2, r3, [r4, #24]
 8014648:	4295      	cmp	r5, r2
 801464a:	eb76 0303 	sbcs.w	r3, r6, r3
 801464e:	bfa5      	ittet	ge
 8014650:	3001      	addge	r0, #1
 8014652:	f884 0020 	strbge.w	r0, [r4, #32]
 8014656:	2000      	movlt	r0, #0
 8014658:	2001      	movge	r0, #1
 801465a:	e7ed      	b.n	8014638 <uxr_update_output_stream_heartbeat_timestamp+0x30>

0801465c <uxr_begin_output_nack_buffer_it>:
 801465c:	8a40      	ldrh	r0, [r0, #18]
 801465e:	4770      	bx	lr

08014660 <uxr_next_reliable_nack_buffer_to_send>:
 8014660:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014664:	f890 8021 	ldrb.w	r8, [r0, #33]	@ 0x21
 8014668:	b082      	sub	sp, #8
 801466a:	f1b8 0f00 	cmp.w	r8, #0
 801466e:	d011      	beq.n	8014694 <uxr_next_reliable_nack_buffer_to_send+0x34>
 8014670:	4604      	mov	r4, r0
 8014672:	8818      	ldrh	r0, [r3, #0]
 8014674:	460e      	mov	r6, r1
 8014676:	4617      	mov	r7, r2
 8014678:	461d      	mov	r5, r3
 801467a:	2101      	movs	r1, #1
 801467c:	f000 f866 	bl	801474c <uxr_seq_num_add>
 8014680:	8028      	strh	r0, [r5, #0]
 8014682:	8a21      	ldrh	r1, [r4, #16]
 8014684:	f000 f86a 	bl	801475c <uxr_seq_num_cmp>
 8014688:	2800      	cmp	r0, #0
 801468a:	dd07      	ble.n	801469c <uxr_next_reliable_nack_buffer_to_send+0x3c>
 801468c:	f04f 0800 	mov.w	r8, #0
 8014690:	f884 8021 	strb.w	r8, [r4, #33]	@ 0x21
 8014694:	4640      	mov	r0, r8
 8014696:	b002      	add	sp, #8
 8014698:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801469c:	8921      	ldrh	r1, [r4, #8]
 801469e:	8828      	ldrh	r0, [r5, #0]
 80146a0:	6823      	ldr	r3, [r4, #0]
 80146a2:	fbb0 f2f1 	udiv	r2, r0, r1
 80146a6:	fb01 0c12 	mls	ip, r1, r2, r0
 80146aa:	fa1f f28c 	uxth.w	r2, ip
 80146ae:	9301      	str	r3, [sp, #4]
 80146b0:	6863      	ldr	r3, [r4, #4]
 80146b2:	fbb3 fcf1 	udiv	ip, r3, r1
 80146b6:	9b01      	ldr	r3, [sp, #4]
 80146b8:	fb02 fc0c 	mul.w	ip, r2, ip
 80146bc:	f10c 0c04 	add.w	ip, ip, #4
 80146c0:	4463      	add	r3, ip
 80146c2:	6033      	str	r3, [r6, #0]
 80146c4:	6823      	ldr	r3, [r4, #0]
 80146c6:	4463      	add	r3, ip
 80146c8:	f853 3c04 	ldr.w	r3, [r3, #-4]
 80146cc:	603b      	str	r3, [r7, #0]
 80146ce:	7b22      	ldrb	r2, [r4, #12]
 80146d0:	429a      	cmp	r2, r3
 80146d2:	d0d2      	beq.n	801467a <uxr_next_reliable_nack_buffer_to_send+0x1a>
 80146d4:	4640      	mov	r0, r8
 80146d6:	b002      	add	sp, #8
 80146d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080146dc <uxr_process_acknack>:
 80146dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80146de:	4604      	mov	r4, r0
 80146e0:	460e      	mov	r6, r1
 80146e2:	4610      	mov	r0, r2
 80146e4:	2101      	movs	r1, #1
 80146e6:	f000 f835 	bl	8014754 <uxr_seq_num_sub>
 80146ea:	8a61      	ldrh	r1, [r4, #18]
 80146ec:	f000 f832 	bl	8014754 <uxr_seq_num_sub>
 80146f0:	b1c0      	cbz	r0, 8014724 <uxr_process_acknack+0x48>
 80146f2:	4605      	mov	r5, r0
 80146f4:	2700      	movs	r7, #0
 80146f6:	2101      	movs	r1, #1
 80146f8:	8a60      	ldrh	r0, [r4, #18]
 80146fa:	f000 f827 	bl	801474c <uxr_seq_num_add>
 80146fe:	f8b4 c008 	ldrh.w	ip, [r4, #8]
 8014702:	fbb0 f1fc 	udiv	r1, r0, ip
 8014706:	e9d4 2300 	ldrd	r2, r3, [r4]
 801470a:	fb0c 0111 	mls	r1, ip, r1, r0
 801470e:	b289      	uxth	r1, r1
 8014710:	3701      	adds	r7, #1
 8014712:	fbb3 f3fc 	udiv	r3, r3, ip
 8014716:	fb01 f303 	mul.w	r3, r1, r3
 801471a:	42bd      	cmp	r5, r7
 801471c:	7b21      	ldrb	r1, [r4, #12]
 801471e:	8260      	strh	r0, [r4, #18]
 8014720:	50d1      	str	r1, [r2, r3]
 8014722:	d1e8      	bne.n	80146f6 <uxr_process_acknack+0x1a>
 8014724:	3e00      	subs	r6, #0
 8014726:	f04f 0300 	mov.w	r3, #0
 801472a:	bf18      	it	ne
 801472c:	2601      	movne	r6, #1
 801472e:	f884 3020 	strb.w	r3, [r4, #32]
 8014732:	f884 6021 	strb.w	r6, [r4, #33]	@ 0x21
 8014736:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08014738 <uxr_is_output_up_to_date>:
 8014738:	8a01      	ldrh	r1, [r0, #16]
 801473a:	8a40      	ldrh	r0, [r0, #18]
 801473c:	b508      	push	{r3, lr}
 801473e:	f000 f80d 	bl	801475c <uxr_seq_num_cmp>
 8014742:	fab0 f080 	clz	r0, r0
 8014746:	0940      	lsrs	r0, r0, #5
 8014748:	bd08      	pop	{r3, pc}
 801474a:	bf00      	nop

0801474c <uxr_seq_num_add>:
 801474c:	4408      	add	r0, r1
 801474e:	b280      	uxth	r0, r0
 8014750:	4770      	bx	lr
 8014752:	bf00      	nop

08014754 <uxr_seq_num_sub>:
 8014754:	1a40      	subs	r0, r0, r1
 8014756:	b280      	uxth	r0, r0
 8014758:	4770      	bx	lr
 801475a:	bf00      	nop

0801475c <uxr_seq_num_cmp>:
 801475c:	4288      	cmp	r0, r1
 801475e:	d011      	beq.n	8014784 <uxr_seq_num_cmp+0x28>
 8014760:	d309      	bcc.n	8014776 <uxr_seq_num_cmp+0x1a>
 8014762:	4288      	cmp	r0, r1
 8014764:	d910      	bls.n	8014788 <uxr_seq_num_cmp+0x2c>
 8014766:	1a40      	subs	r0, r0, r1
 8014768:	f5b0 4f00 	cmp.w	r0, #32768	@ 0x8000
 801476c:	bfd4      	ite	le
 801476e:	2001      	movle	r0, #1
 8014770:	f04f 30ff 	movgt.w	r0, #4294967295	@ 0xffffffff
 8014774:	4770      	bx	lr
 8014776:	1a0b      	subs	r3, r1, r0
 8014778:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 801477c:	daf1      	bge.n	8014762 <uxr_seq_num_cmp+0x6>
 801477e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8014782:	4770      	bx	lr
 8014784:	2000      	movs	r0, #0
 8014786:	4770      	bx	lr
 8014788:	2001      	movs	r0, #1
 801478a:	4770      	bx	lr

0801478c <uxr_prepare_output_stream>:
 801478c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801478e:	b087      	sub	sp, #28
 8014790:	2707      	movs	r7, #7
 8014792:	9202      	str	r2, [sp, #8]
 8014794:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8014796:	9103      	str	r1, [sp, #12]
 8014798:	2500      	movs	r5, #0
 801479a:	3204      	adds	r2, #4
 801479c:	e9cd 7500 	strd	r7, r5, [sp]
 80147a0:	461c      	mov	r4, r3
 80147a2:	4606      	mov	r6, r0
 80147a4:	f7f9 fa96 	bl	800dcd4 <uxr_prepare_stream_to_write_submessage>
 80147a8:	f080 0201 	eor.w	r2, r0, #1
 80147ac:	b2d2      	uxtb	r2, r2
 80147ae:	75a2      	strb	r2, [r4, #22]
 80147b0:	b112      	cbz	r2, 80147b8 <uxr_prepare_output_stream+0x2c>
 80147b2:	4628      	mov	r0, r5
 80147b4:	b007      	add	sp, #28
 80147b6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80147b8:	aa05      	add	r2, sp, #20
 80147ba:	9902      	ldr	r1, [sp, #8]
 80147bc:	4630      	mov	r0, r6
 80147be:	f7f9 fbbf 	bl	800df40 <uxr_init_base_object_request>
 80147c2:	a905      	add	r1, sp, #20
 80147c4:	4605      	mov	r5, r0
 80147c6:	4620      	mov	r0, r4
 80147c8:	f7fb f900 	bl	800f9cc <uxr_serialize_WRITE_DATA_Payload_Data>
 80147cc:	e9d4 2101 	ldrd	r2, r1, [r4, #4]
 80147d0:	69a6      	ldr	r6, [r4, #24]
 80147d2:	69e7      	ldr	r7, [r4, #28]
 80147d4:	1a52      	subs	r2, r2, r1
 80147d6:	4620      	mov	r0, r4
 80147d8:	f7f7 ff60 	bl	800c69c <ucdr_init_buffer>
 80147dc:	4620      	mov	r0, r4
 80147de:	463a      	mov	r2, r7
 80147e0:	4631      	mov	r1, r6
 80147e2:	f7f7 ff2f 	bl	800c644 <ucdr_set_on_full_buffer_callback>
 80147e6:	4628      	mov	r0, r5
 80147e8:	b007      	add	sp, #28
 80147ea:	bdf0      	pop	{r4, r5, r6, r7, pc}

080147ec <rcl_get_default_domain_id>:
 80147ec:	b530      	push	{r4, r5, lr}
 80147ee:	b083      	sub	sp, #12
 80147f0:	2300      	movs	r3, #0
 80147f2:	9300      	str	r3, [sp, #0]
 80147f4:	b1d0      	cbz	r0, 801482c <rcl_get_default_domain_id+0x40>
 80147f6:	4604      	mov	r4, r0
 80147f8:	4669      	mov	r1, sp
 80147fa:	4815      	ldr	r0, [pc, #84]	@ (8014850 <rcl_get_default_domain_id+0x64>)
 80147fc:	f7fd fef4 	bl	80125e8 <rcutils_get_env>
 8014800:	4602      	mov	r2, r0
 8014802:	b110      	cbz	r0, 801480a <rcl_get_default_domain_id+0x1e>
 8014804:	2001      	movs	r0, #1
 8014806:	b003      	add	sp, #12
 8014808:	bd30      	pop	{r4, r5, pc}
 801480a:	9b00      	ldr	r3, [sp, #0]
 801480c:	b18b      	cbz	r3, 8014832 <rcl_get_default_domain_id+0x46>
 801480e:	7818      	ldrb	r0, [r3, #0]
 8014810:	2800      	cmp	r0, #0
 8014812:	d0f8      	beq.n	8014806 <rcl_get_default_domain_id+0x1a>
 8014814:	a901      	add	r1, sp, #4
 8014816:	4618      	mov	r0, r3
 8014818:	9201      	str	r2, [sp, #4]
 801481a:	f000 fda7 	bl	801536c <strtoul>
 801481e:	4605      	mov	r5, r0
 8014820:	b150      	cbz	r0, 8014838 <rcl_get_default_domain_id+0x4c>
 8014822:	1c43      	adds	r3, r0, #1
 8014824:	d00d      	beq.n	8014842 <rcl_get_default_domain_id+0x56>
 8014826:	6025      	str	r5, [r4, #0]
 8014828:	2000      	movs	r0, #0
 801482a:	e7ec      	b.n	8014806 <rcl_get_default_domain_id+0x1a>
 801482c:	200b      	movs	r0, #11
 801482e:	b003      	add	sp, #12
 8014830:	bd30      	pop	{r4, r5, pc}
 8014832:	4618      	mov	r0, r3
 8014834:	b003      	add	sp, #12
 8014836:	bd30      	pop	{r4, r5, pc}
 8014838:	9b01      	ldr	r3, [sp, #4]
 801483a:	781b      	ldrb	r3, [r3, #0]
 801483c:	2b00      	cmp	r3, #0
 801483e:	d0f2      	beq.n	8014826 <rcl_get_default_domain_id+0x3a>
 8014840:	e7e0      	b.n	8014804 <rcl_get_default_domain_id+0x18>
 8014842:	f001 f881 	bl	8015948 <__errno>
 8014846:	6803      	ldr	r3, [r0, #0]
 8014848:	2b22      	cmp	r3, #34	@ 0x22
 801484a:	d1ec      	bne.n	8014826 <rcl_get_default_domain_id+0x3a>
 801484c:	e7da      	b.n	8014804 <rcl_get_default_domain_id+0x18>
 801484e:	bf00      	nop
 8014850:	08017308 	.word	0x08017308

08014854 <rcl_expand_topic_name>:
 8014854:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014858:	b08b      	sub	sp, #44	@ 0x2c
 801485a:	9306      	str	r3, [sp, #24]
 801485c:	2800      	cmp	r0, #0
 801485e:	f000 80ad 	beq.w	80149bc <rcl_expand_topic_name+0x168>
 8014862:	460e      	mov	r6, r1
 8014864:	2900      	cmp	r1, #0
 8014866:	f000 80a9 	beq.w	80149bc <rcl_expand_topic_name+0x168>
 801486a:	4617      	mov	r7, r2
 801486c:	2a00      	cmp	r2, #0
 801486e:	f000 80a5 	beq.w	80149bc <rcl_expand_topic_name+0x168>
 8014872:	2b00      	cmp	r3, #0
 8014874:	f000 80a2 	beq.w	80149bc <rcl_expand_topic_name+0x168>
 8014878:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 801487a:	2b00      	cmp	r3, #0
 801487c:	f000 809e 	beq.w	80149bc <rcl_expand_topic_name+0x168>
 8014880:	2200      	movs	r2, #0
 8014882:	a909      	add	r1, sp, #36	@ 0x24
 8014884:	4680      	mov	r8, r0
 8014886:	f000 fa1d 	bl	8014cc4 <rcl_validate_topic_name>
 801488a:	4604      	mov	r4, r0
 801488c:	2800      	cmp	r0, #0
 801488e:	f040 8096 	bne.w	80149be <rcl_expand_topic_name+0x16a>
 8014892:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8014894:	2b00      	cmp	r3, #0
 8014896:	f040 809a 	bne.w	80149ce <rcl_expand_topic_name+0x17a>
 801489a:	4602      	mov	r2, r0
 801489c:	a909      	add	r1, sp, #36	@ 0x24
 801489e:	4630      	mov	r0, r6
 80148a0:	f7fe faec 	bl	8012e7c <rmw_validate_node_name>
 80148a4:	2800      	cmp	r0, #0
 80148a6:	f040 808e 	bne.w	80149c6 <rcl_expand_topic_name+0x172>
 80148aa:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80148ac:	2a00      	cmp	r2, #0
 80148ae:	f040 8093 	bne.w	80149d8 <rcl_expand_topic_name+0x184>
 80148b2:	a909      	add	r1, sp, #36	@ 0x24
 80148b4:	4638      	mov	r0, r7
 80148b6:	f7fe fac3 	bl	8012e40 <rmw_validate_namespace>
 80148ba:	2800      	cmp	r0, #0
 80148bc:	f040 8083 	bne.w	80149c6 <rcl_expand_topic_name+0x172>
 80148c0:	9c09      	ldr	r4, [sp, #36]	@ 0x24
 80148c2:	2c00      	cmp	r4, #0
 80148c4:	f040 80ed 	bne.w	8014aa2 <rcl_expand_topic_name+0x24e>
 80148c8:	217b      	movs	r1, #123	@ 0x7b
 80148ca:	4640      	mov	r0, r8
 80148cc:	f000 ffb0 	bl	8015830 <strchr>
 80148d0:	f898 3000 	ldrb.w	r3, [r8]
 80148d4:	2b2f      	cmp	r3, #47	@ 0x2f
 80148d6:	4605      	mov	r5, r0
 80148d8:	f000 809e 	beq.w	8014a18 <rcl_expand_topic_name+0x1c4>
 80148dc:	2b7e      	cmp	r3, #126	@ 0x7e
 80148de:	f040 80a2 	bne.w	8014a26 <rcl_expand_topic_name+0x1d2>
 80148e2:	4638      	mov	r0, r7
 80148e4:	f7eb fc86 	bl	80001f4 <strlen>
 80148e8:	4a82      	ldr	r2, [pc, #520]	@ (8014af4 <rcl_expand_topic_name+0x2a0>)
 80148ea:	4b83      	ldr	r3, [pc, #524]	@ (8014af8 <rcl_expand_topic_name+0x2a4>)
 80148ec:	2801      	cmp	r0, #1
 80148ee:	bf18      	it	ne
 80148f0:	4613      	movne	r3, r2
 80148f2:	9302      	str	r3, [sp, #8]
 80148f4:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 80148f6:	9300      	str	r3, [sp, #0]
 80148f8:	e9cd 7603 	strd	r7, r6, [sp, #12]
 80148fc:	f108 0301 	add.w	r3, r8, #1
 8014900:	9305      	str	r3, [sp, #20]
 8014902:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8014906:	9301      	str	r3, [sp, #4]
 8014908:	ab14      	add	r3, sp, #80	@ 0x50
 801490a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 801490c:	f7fd fe94 	bl	8012638 <rcutils_format_string_limit>
 8014910:	4682      	mov	sl, r0
 8014912:	2800      	cmp	r0, #0
 8014914:	f000 80c7 	beq.w	8014aa6 <rcl_expand_topic_name+0x252>
 8014918:	2d00      	cmp	r5, #0
 801491a:	f000 80a2 	beq.w	8014a62 <rcl_expand_topic_name+0x20e>
 801491e:	217b      	movs	r1, #123	@ 0x7b
 8014920:	f000 ff86 	bl	8015830 <strchr>
 8014924:	46d1      	mov	r9, sl
 8014926:	4605      	mov	r5, r0
 8014928:	9407      	str	r4, [sp, #28]
 801492a:	46d3      	mov	fp, sl
 801492c:	464c      	mov	r4, r9
 801492e:	2d00      	cmp	r5, #0
 8014930:	f000 80be 	beq.w	8014ab0 <rcl_expand_topic_name+0x25c>
 8014934:	217d      	movs	r1, #125	@ 0x7d
 8014936:	4620      	mov	r0, r4
 8014938:	f000 ff7a 	bl	8015830 <strchr>
 801493c:	eba0 0905 	sub.w	r9, r0, r5
 8014940:	f109 0a01 	add.w	sl, r9, #1
 8014944:	486d      	ldr	r0, [pc, #436]	@ (8014afc <rcl_expand_topic_name+0x2a8>)
 8014946:	4652      	mov	r2, sl
 8014948:	4629      	mov	r1, r5
 801494a:	f000 ff7e 	bl	801584a <strncmp>
 801494e:	2800      	cmp	r0, #0
 8014950:	d067      	beq.n	8014a22 <rcl_expand_topic_name+0x1ce>
 8014952:	486b      	ldr	r0, [pc, #428]	@ (8014b00 <rcl_expand_topic_name+0x2ac>)
 8014954:	4652      	mov	r2, sl
 8014956:	4629      	mov	r1, r5
 8014958:	f000 ff77 	bl	801584a <strncmp>
 801495c:	b130      	cbz	r0, 801496c <rcl_expand_topic_name+0x118>
 801495e:	4869      	ldr	r0, [pc, #420]	@ (8014b04 <rcl_expand_topic_name+0x2b0>)
 8014960:	4652      	mov	r2, sl
 8014962:	4629      	mov	r1, r5
 8014964:	f000 ff71 	bl	801584a <strncmp>
 8014968:	2800      	cmp	r0, #0
 801496a:	d137      	bne.n	80149dc <rcl_expand_topic_name+0x188>
 801496c:	46b9      	mov	r9, r7
 801496e:	ab16      	add	r3, sp, #88	@ 0x58
 8014970:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8014974:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 8014978:	ab14      	add	r3, sp, #80	@ 0x50
 801497a:	4628      	mov	r0, r5
 801497c:	cb0c      	ldmia	r3, {r2, r3}
 801497e:	4651      	mov	r1, sl
 8014980:	f7fd ff96 	bl	80128b0 <rcutils_strndup>
 8014984:	4605      	mov	r5, r0
 8014986:	2800      	cmp	r0, #0
 8014988:	f000 809c 	beq.w	8014ac4 <rcl_expand_topic_name+0x270>
 801498c:	464a      	mov	r2, r9
 801498e:	4620      	mov	r0, r4
 8014990:	ab14      	add	r3, sp, #80	@ 0x50
 8014992:	4629      	mov	r1, r5
 8014994:	f7fd fe8a 	bl	80126ac <rcutils_repl_str>
 8014998:	9918      	ldr	r1, [sp, #96]	@ 0x60
 801499a:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 801499c:	4604      	mov	r4, r0
 801499e:	4628      	mov	r0, r5
 80149a0:	4798      	blx	r3
 80149a2:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 80149a4:	9918      	ldr	r1, [sp, #96]	@ 0x60
 80149a6:	4658      	mov	r0, fp
 80149a8:	4798      	blx	r3
 80149aa:	2c00      	cmp	r4, #0
 80149ac:	d07b      	beq.n	8014aa6 <rcl_expand_topic_name+0x252>
 80149ae:	217b      	movs	r1, #123	@ 0x7b
 80149b0:	4620      	mov	r0, r4
 80149b2:	f000 ff3d 	bl	8015830 <strchr>
 80149b6:	46a3      	mov	fp, r4
 80149b8:	4605      	mov	r5, r0
 80149ba:	e7b8      	b.n	801492e <rcl_expand_topic_name+0xda>
 80149bc:	240b      	movs	r4, #11
 80149be:	4620      	mov	r0, r4
 80149c0:	b00b      	add	sp, #44	@ 0x2c
 80149c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80149c6:	f7fb f96d 	bl	800fca4 <rcl_convert_rmw_ret_to_rcl_ret>
 80149ca:	4604      	mov	r4, r0
 80149cc:	e7f7      	b.n	80149be <rcl_expand_topic_name+0x16a>
 80149ce:	2467      	movs	r4, #103	@ 0x67
 80149d0:	4620      	mov	r0, r4
 80149d2:	b00b      	add	sp, #44	@ 0x2c
 80149d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80149d8:	24c9      	movs	r4, #201	@ 0xc9
 80149da:	e7f0      	b.n	80149be <rcl_expand_topic_name+0x16a>
 80149dc:	f109 32ff 	add.w	r2, r9, #4294967295	@ 0xffffffff
 80149e0:	9806      	ldr	r0, [sp, #24]
 80149e2:	1c69      	adds	r1, r5, #1
 80149e4:	f7fe f87e 	bl	8012ae4 <rcutils_string_map_getn>
 80149e8:	4681      	mov	r9, r0
 80149ea:	2800      	cmp	r0, #0
 80149ec:	d1bf      	bne.n	801496e <rcl_expand_topic_name+0x11a>
 80149ee:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80149f0:	aa16      	add	r2, sp, #88	@ 0x58
 80149f2:	6018      	str	r0, [r3, #0]
 80149f4:	ca07      	ldmia	r2, {r0, r1, r2}
 80149f6:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 80149fa:	ab14      	add	r3, sp, #80	@ 0x50
 80149fc:	cb0c      	ldmia	r3, {r2, r3}
 80149fe:	4651      	mov	r1, sl
 8014a00:	4628      	mov	r0, r5
 8014a02:	f7fd ff55 	bl	80128b0 <rcutils_strndup>
 8014a06:	9918      	ldr	r1, [sp, #96]	@ 0x60
 8014a08:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8014a0a:	4798      	blx	r3
 8014a0c:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8014a0e:	9918      	ldr	r1, [sp, #96]	@ 0x60
 8014a10:	4658      	mov	r0, fp
 8014a12:	2469      	movs	r4, #105	@ 0x69
 8014a14:	4798      	blx	r3
 8014a16:	e7d2      	b.n	80149be <rcl_expand_topic_name+0x16a>
 8014a18:	2800      	cmp	r0, #0
 8014a1a:	d05b      	beq.n	8014ad4 <rcl_expand_topic_name+0x280>
 8014a1c:	46c1      	mov	r9, r8
 8014a1e:	46a2      	mov	sl, r4
 8014a20:	e782      	b.n	8014928 <rcl_expand_topic_name+0xd4>
 8014a22:	46b1      	mov	r9, r6
 8014a24:	e7a3      	b.n	801496e <rcl_expand_topic_name+0x11a>
 8014a26:	2800      	cmp	r0, #0
 8014a28:	d1f8      	bne.n	8014a1c <rcl_expand_topic_name+0x1c8>
 8014a2a:	4638      	mov	r0, r7
 8014a2c:	f7eb fbe2 	bl	80001f4 <strlen>
 8014a30:	4a35      	ldr	r2, [pc, #212]	@ (8014b08 <rcl_expand_topic_name+0x2b4>)
 8014a32:	4b36      	ldr	r3, [pc, #216]	@ (8014b0c <rcl_expand_topic_name+0x2b8>)
 8014a34:	f8cd 8010 	str.w	r8, [sp, #16]
 8014a38:	2801      	cmp	r0, #1
 8014a3a:	bf18      	it	ne
 8014a3c:	4613      	movne	r3, r2
 8014a3e:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8014a42:	e9cd 1301 	strd	r1, r3, [sp, #4]
 8014a46:	9a18      	ldr	r2, [sp, #96]	@ 0x60
 8014a48:	9703      	str	r7, [sp, #12]
 8014a4a:	9200      	str	r2, [sp, #0]
 8014a4c:	ab14      	add	r3, sp, #80	@ 0x50
 8014a4e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8014a50:	f7fd fdf2 	bl	8012638 <rcutils_format_string_limit>
 8014a54:	4682      	mov	sl, r0
 8014a56:	4653      	mov	r3, sl
 8014a58:	b32b      	cbz	r3, 8014aa6 <rcl_expand_topic_name+0x252>
 8014a5a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8014a5c:	f8c3 a000 	str.w	sl, [r3]
 8014a60:	e7ad      	b.n	80149be <rcl_expand_topic_name+0x16a>
 8014a62:	f89a 3000 	ldrb.w	r3, [sl]
 8014a66:	2b2f      	cmp	r3, #47	@ 0x2f
 8014a68:	d0f7      	beq.n	8014a5a <rcl_expand_topic_name+0x206>
 8014a6a:	4638      	mov	r0, r7
 8014a6c:	f7eb fbc2 	bl	80001f4 <strlen>
 8014a70:	4a25      	ldr	r2, [pc, #148]	@ (8014b08 <rcl_expand_topic_name+0x2b4>)
 8014a72:	4b26      	ldr	r3, [pc, #152]	@ (8014b0c <rcl_expand_topic_name+0x2b8>)
 8014a74:	f8cd a010 	str.w	sl, [sp, #16]
 8014a78:	2801      	cmp	r0, #1
 8014a7a:	bf18      	it	ne
 8014a7c:	4613      	movne	r3, r2
 8014a7e:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8014a82:	e9cd 1301 	strd	r1, r3, [sp, #4]
 8014a86:	9a18      	ldr	r2, [sp, #96]	@ 0x60
 8014a88:	9703      	str	r7, [sp, #12]
 8014a8a:	9200      	str	r2, [sp, #0]
 8014a8c:	ab14      	add	r3, sp, #80	@ 0x50
 8014a8e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8014a90:	f7fd fdd2 	bl	8012638 <rcutils_format_string_limit>
 8014a94:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8014a96:	9918      	ldr	r1, [sp, #96]	@ 0x60
 8014a98:	4605      	mov	r5, r0
 8014a9a:	4650      	mov	r0, sl
 8014a9c:	4798      	blx	r3
 8014a9e:	46aa      	mov	sl, r5
 8014aa0:	e7d9      	b.n	8014a56 <rcl_expand_topic_name+0x202>
 8014aa2:	24ca      	movs	r4, #202	@ 0xca
 8014aa4:	e78b      	b.n	80149be <rcl_expand_topic_name+0x16a>
 8014aa6:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8014aa8:	2300      	movs	r3, #0
 8014aaa:	6013      	str	r3, [r2, #0]
 8014aac:	240a      	movs	r4, #10
 8014aae:	e786      	b.n	80149be <rcl_expand_topic_name+0x16a>
 8014ab0:	465b      	mov	r3, fp
 8014ab2:	9c07      	ldr	r4, [sp, #28]
 8014ab4:	46da      	mov	sl, fp
 8014ab6:	2b00      	cmp	r3, #0
 8014ab8:	d1d3      	bne.n	8014a62 <rcl_expand_topic_name+0x20e>
 8014aba:	f898 3000 	ldrb.w	r3, [r8]
 8014abe:	2b2f      	cmp	r3, #47	@ 0x2f
 8014ac0:	d0cb      	beq.n	8014a5a <rcl_expand_topic_name+0x206>
 8014ac2:	e7b2      	b.n	8014a2a <rcl_expand_topic_name+0x1d6>
 8014ac4:	e9dd 1218 	ldrd	r1, r2, [sp, #96]	@ 0x60
 8014ac8:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8014aca:	6015      	str	r5, [r2, #0]
 8014acc:	4658      	mov	r0, fp
 8014ace:	4798      	blx	r3
 8014ad0:	240a      	movs	r4, #10
 8014ad2:	e774      	b.n	80149be <rcl_expand_topic_name+0x16a>
 8014ad4:	ab17      	add	r3, sp, #92	@ 0x5c
 8014ad6:	e893 0003 	ldmia.w	r3, {r0, r1}
 8014ada:	e88d 0003 	stmia.w	sp, {r0, r1}
 8014ade:	ab14      	add	r3, sp, #80	@ 0x50
 8014ae0:	cb0e      	ldmia	r3, {r1, r2, r3}
 8014ae2:	4640      	mov	r0, r8
 8014ae4:	f7fd fec2 	bl	801286c <rcutils_strdup>
 8014ae8:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8014aea:	2800      	cmp	r0, #0
 8014aec:	6018      	str	r0, [r3, #0]
 8014aee:	bf08      	it	eq
 8014af0:	240a      	moveq	r4, #10
 8014af2:	e764      	b.n	80149be <rcl_expand_topic_name+0x16a>
 8014af4:	08017318 	.word	0x08017318
 8014af8:	080169d4 	.word	0x080169d4
 8014afc:	08017320 	.word	0x08017320
 8014b00:	08017328 	.word	0x08017328
 8014b04:	08017330 	.word	0x08017330
 8014b08:	0801699c 	.word	0x0801699c
 8014b0c:	080169e4 	.word	0x080169e4

08014b10 <rcl_get_default_topic_name_substitutions>:
 8014b10:	2800      	cmp	r0, #0
 8014b12:	bf0c      	ite	eq
 8014b14:	200b      	moveq	r0, #11
 8014b16:	2000      	movne	r0, #0
 8014b18:	4770      	bx	lr
 8014b1a:	bf00      	nop

08014b1c <rcl_get_zero_initialized_guard_condition>:
 8014b1c:	4a03      	ldr	r2, [pc, #12]	@ (8014b2c <rcl_get_zero_initialized_guard_condition+0x10>)
 8014b1e:	4603      	mov	r3, r0
 8014b20:	e892 0003 	ldmia.w	r2, {r0, r1}
 8014b24:	e883 0003 	stmia.w	r3, {r0, r1}
 8014b28:	4618      	mov	r0, r3
 8014b2a:	4770      	bx	lr
 8014b2c:	0801733c 	.word	0x0801733c

08014b30 <rcl_guard_condition_init_from_rmw>:
 8014b30:	b082      	sub	sp, #8
 8014b32:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014b36:	b086      	sub	sp, #24
 8014b38:	f10d 0c30 	add.w	ip, sp, #48	@ 0x30
 8014b3c:	4604      	mov	r4, r0
 8014b3e:	f84c 3f04 	str.w	r3, [ip, #4]!
 8014b42:	460e      	mov	r6, r1
 8014b44:	4617      	mov	r7, r2
 8014b46:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8014b4a:	f10d 0e04 	add.w	lr, sp, #4
 8014b4e:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8014b52:	f8dc 3000 	ldr.w	r3, [ip]
 8014b56:	f8ce 3000 	str.w	r3, [lr]
 8014b5a:	a801      	add	r0, sp, #4
 8014b5c:	f7f5 fbca 	bl	800a2f4 <rcutils_allocator_is_valid>
 8014b60:	b350      	cbz	r0, 8014bb8 <rcl_guard_condition_init_from_rmw+0x88>
 8014b62:	b34c      	cbz	r4, 8014bb8 <rcl_guard_condition_init_from_rmw+0x88>
 8014b64:	f8d4 8004 	ldr.w	r8, [r4, #4]
 8014b68:	f1b8 0f00 	cmp.w	r8, #0
 8014b6c:	d11e      	bne.n	8014bac <rcl_guard_condition_init_from_rmw+0x7c>
 8014b6e:	b31f      	cbz	r7, 8014bb8 <rcl_guard_condition_init_from_rmw+0x88>
 8014b70:	4638      	mov	r0, r7
 8014b72:	f7fb f8b5 	bl	800fce0 <rcl_context_is_valid>
 8014b76:	b328      	cbz	r0, 8014bc4 <rcl_guard_condition_init_from_rmw+0x94>
 8014b78:	9b01      	ldr	r3, [sp, #4]
 8014b7a:	9905      	ldr	r1, [sp, #20]
 8014b7c:	201c      	movs	r0, #28
 8014b7e:	4798      	blx	r3
 8014b80:	4605      	mov	r5, r0
 8014b82:	6060      	str	r0, [r4, #4]
 8014b84:	b358      	cbz	r0, 8014bde <rcl_guard_condition_init_from_rmw+0xae>
 8014b86:	b1fe      	cbz	r6, 8014bc8 <rcl_guard_condition_init_from_rmw+0x98>
 8014b88:	6006      	str	r6, [r0, #0]
 8014b8a:	f880 8004 	strb.w	r8, [r0, #4]
 8014b8e:	ac01      	add	r4, sp, #4
 8014b90:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8014b92:	f105 0c08 	add.w	ip, r5, #8
 8014b96:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8014b9a:	6823      	ldr	r3, [r4, #0]
 8014b9c:	f8cc 3000 	str.w	r3, [ip]
 8014ba0:	2000      	movs	r0, #0
 8014ba2:	b006      	add	sp, #24
 8014ba4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8014ba8:	b002      	add	sp, #8
 8014baa:	4770      	bx	lr
 8014bac:	2064      	movs	r0, #100	@ 0x64
 8014bae:	b006      	add	sp, #24
 8014bb0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8014bb4:	b002      	add	sp, #8
 8014bb6:	4770      	bx	lr
 8014bb8:	200b      	movs	r0, #11
 8014bba:	b006      	add	sp, #24
 8014bbc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8014bc0:	b002      	add	sp, #8
 8014bc2:	4770      	bx	lr
 8014bc4:	2065      	movs	r0, #101	@ 0x65
 8014bc6:	e7f2      	b.n	8014bae <rcl_guard_condition_init_from_rmw+0x7e>
 8014bc8:	6838      	ldr	r0, [r7, #0]
 8014bca:	3028      	adds	r0, #40	@ 0x28
 8014bcc:	f000 f974 	bl	8014eb8 <rmw_create_guard_condition>
 8014bd0:	6028      	str	r0, [r5, #0]
 8014bd2:	6865      	ldr	r5, [r4, #4]
 8014bd4:	682e      	ldr	r6, [r5, #0]
 8014bd6:	b126      	cbz	r6, 8014be2 <rcl_guard_condition_init_from_rmw+0xb2>
 8014bd8:	2301      	movs	r3, #1
 8014bda:	712b      	strb	r3, [r5, #4]
 8014bdc:	e7d7      	b.n	8014b8e <rcl_guard_condition_init_from_rmw+0x5e>
 8014bde:	200a      	movs	r0, #10
 8014be0:	e7e5      	b.n	8014bae <rcl_guard_condition_init_from_rmw+0x7e>
 8014be2:	4628      	mov	r0, r5
 8014be4:	9b02      	ldr	r3, [sp, #8]
 8014be6:	9905      	ldr	r1, [sp, #20]
 8014be8:	4798      	blx	r3
 8014bea:	6066      	str	r6, [r4, #4]
 8014bec:	2001      	movs	r0, #1
 8014bee:	e7de      	b.n	8014bae <rcl_guard_condition_init_from_rmw+0x7e>

08014bf0 <rcl_guard_condition_fini>:
 8014bf0:	b570      	push	{r4, r5, r6, lr}
 8014bf2:	b082      	sub	sp, #8
 8014bf4:	b1f0      	cbz	r0, 8014c34 <rcl_guard_condition_fini+0x44>
 8014bf6:	6843      	ldr	r3, [r0, #4]
 8014bf8:	4604      	mov	r4, r0
 8014bfa:	b163      	cbz	r3, 8014c16 <rcl_guard_condition_fini+0x26>
 8014bfc:	6818      	ldr	r0, [r3, #0]
 8014bfe:	68de      	ldr	r6, [r3, #12]
 8014c00:	6999      	ldr	r1, [r3, #24]
 8014c02:	b160      	cbz	r0, 8014c1e <rcl_guard_condition_fini+0x2e>
 8014c04:	791d      	ldrb	r5, [r3, #4]
 8014c06:	b965      	cbnz	r5, 8014c22 <rcl_guard_condition_fini+0x32>
 8014c08:	4618      	mov	r0, r3
 8014c0a:	47b0      	blx	r6
 8014c0c:	2300      	movs	r3, #0
 8014c0e:	4628      	mov	r0, r5
 8014c10:	6063      	str	r3, [r4, #4]
 8014c12:	b002      	add	sp, #8
 8014c14:	bd70      	pop	{r4, r5, r6, pc}
 8014c16:	461d      	mov	r5, r3
 8014c18:	4628      	mov	r0, r5
 8014c1a:	b002      	add	sp, #8
 8014c1c:	bd70      	pop	{r4, r5, r6, pc}
 8014c1e:	4605      	mov	r5, r0
 8014c20:	e7f2      	b.n	8014c08 <rcl_guard_condition_fini+0x18>
 8014c22:	9101      	str	r1, [sp, #4]
 8014c24:	f000 f95c 	bl	8014ee0 <rmw_destroy_guard_condition>
 8014c28:	1e05      	subs	r5, r0, #0
 8014c2a:	6863      	ldr	r3, [r4, #4]
 8014c2c:	9901      	ldr	r1, [sp, #4]
 8014c2e:	bf18      	it	ne
 8014c30:	2501      	movne	r5, #1
 8014c32:	e7e9      	b.n	8014c08 <rcl_guard_condition_fini+0x18>
 8014c34:	250b      	movs	r5, #11
 8014c36:	4628      	mov	r0, r5
 8014c38:	b002      	add	sp, #8
 8014c3a:	bd70      	pop	{r4, r5, r6, pc}

08014c3c <rcl_guard_condition_get_default_options>:
 8014c3c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8014c3e:	b087      	sub	sp, #28
 8014c40:	4606      	mov	r6, r0
 8014c42:	4668      	mov	r0, sp
 8014c44:	f7f5 fb48 	bl	800a2d8 <rcutils_get_default_allocator>
 8014c48:	4b09      	ldr	r3, [pc, #36]	@ (8014c70 <rcl_guard_condition_get_default_options+0x34>)
 8014c4a:	46ee      	mov	lr, sp
 8014c4c:	469c      	mov	ip, r3
 8014c4e:	461d      	mov	r5, r3
 8014c50:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8014c54:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8014c58:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8014c5a:	4634      	mov	r4, r6
 8014c5c:	f8de 7000 	ldr.w	r7, [lr]
 8014c60:	f8cc 7000 	str.w	r7, [ip]
 8014c64:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8014c66:	4630      	mov	r0, r6
 8014c68:	6027      	str	r7, [r4, #0]
 8014c6a:	b007      	add	sp, #28
 8014c6c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8014c6e:	bf00      	nop
 8014c70:	2000dc2c 	.word	0x2000dc2c

08014c74 <rcl_guard_condition_get_rmw_handle>:
 8014c74:	b110      	cbz	r0, 8014c7c <rcl_guard_condition_get_rmw_handle+0x8>
 8014c76:	6840      	ldr	r0, [r0, #4]
 8014c78:	b100      	cbz	r0, 8014c7c <rcl_guard_condition_get_rmw_handle+0x8>
 8014c7a:	6800      	ldr	r0, [r0, #0]
 8014c7c:	4770      	bx	lr
 8014c7e:	bf00      	nop

08014c80 <rcl_publisher_is_valid>:
 8014c80:	b1a0      	cbz	r0, 8014cac <rcl_publisher_is_valid+0x2c>
 8014c82:	6803      	ldr	r3, [r0, #0]
 8014c84:	b510      	push	{r4, lr}
 8014c86:	4604      	mov	r4, r0
 8014c88:	b173      	cbz	r3, 8014ca8 <rcl_publisher_is_valid+0x28>
 8014c8a:	f8d3 20c4 	ldr.w	r2, [r3, #196]	@ 0xc4
 8014c8e:	b15a      	cbz	r2, 8014ca8 <rcl_publisher_is_valid+0x28>
 8014c90:	f8d3 00c0 	ldr.w	r0, [r3, #192]	@ 0xc0
 8014c94:	f7fb f824 	bl	800fce0 <rcl_context_is_valid>
 8014c98:	b130      	cbz	r0, 8014ca8 <rcl_publisher_is_valid+0x28>
 8014c9a:	6823      	ldr	r3, [r4, #0]
 8014c9c:	f8d3 00c4 	ldr.w	r0, [r3, #196]	@ 0xc4
 8014ca0:	3800      	subs	r0, #0
 8014ca2:	bf18      	it	ne
 8014ca4:	2001      	movne	r0, #1
 8014ca6:	bd10      	pop	{r4, pc}
 8014ca8:	2000      	movs	r0, #0
 8014caa:	bd10      	pop	{r4, pc}
 8014cac:	2000      	movs	r0, #0
 8014cae:	4770      	bx	lr

08014cb0 <rcl_publisher_is_valid_except_context>:
 8014cb0:	b130      	cbz	r0, 8014cc0 <rcl_publisher_is_valid_except_context+0x10>
 8014cb2:	6800      	ldr	r0, [r0, #0]
 8014cb4:	b120      	cbz	r0, 8014cc0 <rcl_publisher_is_valid_except_context+0x10>
 8014cb6:	f8d0 00c4 	ldr.w	r0, [r0, #196]	@ 0xc4
 8014cba:	3800      	subs	r0, #0
 8014cbc:	bf18      	it	ne
 8014cbe:	2001      	movne	r0, #1
 8014cc0:	4770      	bx	lr
 8014cc2:	bf00      	nop

08014cc4 <rcl_validate_topic_name>:
 8014cc4:	2800      	cmp	r0, #0
 8014cc6:	d07a      	beq.n	8014dbe <rcl_validate_topic_name+0xfa>
 8014cc8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8014ccc:	460e      	mov	r6, r1
 8014cce:	2900      	cmp	r1, #0
 8014cd0:	d07c      	beq.n	8014dcc <rcl_validate_topic_name+0x108>
 8014cd2:	4617      	mov	r7, r2
 8014cd4:	4605      	mov	r5, r0
 8014cd6:	f7eb fa8d 	bl	80001f4 <strlen>
 8014cda:	b1b0      	cbz	r0, 8014d0a <rcl_validate_topic_name+0x46>
 8014cdc:	f895 9000 	ldrb.w	r9, [r5]
 8014ce0:	f8df c180 	ldr.w	ip, [pc, #384]	@ 8014e64 <rcl_validate_topic_name+0x1a0>
 8014ce4:	f81c 3009 	ldrb.w	r3, [ip, r9]
 8014ce8:	f013 0304 	ands.w	r3, r3, #4
 8014cec:	d169      	bne.n	8014dc2 <rcl_validate_topic_name+0xfe>
 8014cee:	f100 38ff 	add.w	r8, r0, #4294967295	@ 0xffffffff
 8014cf2:	f815 2008 	ldrb.w	r2, [r5, r8]
 8014cf6:	2a2f      	cmp	r2, #47	@ 0x2f
 8014cf8:	d10e      	bne.n	8014d18 <rcl_validate_topic_name+0x54>
 8014cfa:	2202      	movs	r2, #2
 8014cfc:	6032      	str	r2, [r6, #0]
 8014cfe:	b36f      	cbz	r7, 8014d5c <rcl_validate_topic_name+0x98>
 8014d00:	f8c7 8000 	str.w	r8, [r7]
 8014d04:	4618      	mov	r0, r3
 8014d06:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8014d0a:	2301      	movs	r3, #1
 8014d0c:	6033      	str	r3, [r6, #0]
 8014d0e:	b32f      	cbz	r7, 8014d5c <rcl_validate_topic_name+0x98>
 8014d10:	2000      	movs	r0, #0
 8014d12:	6038      	str	r0, [r7, #0]
 8014d14:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8014d18:	f105 3aff 	add.w	sl, r5, #4294967295	@ 0xffffffff
 8014d1c:	461c      	mov	r4, r3
 8014d1e:	4619      	mov	r1, r3
 8014d20:	f81a 2f01 	ldrb.w	r2, [sl, #1]!
 8014d24:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 8014d28:	f1be 0f09 	cmp.w	lr, #9
 8014d2c:	d919      	bls.n	8014d62 <rcl_validate_topic_name+0x9e>
 8014d2e:	f022 0e20 	bic.w	lr, r2, #32
 8014d32:	f1ae 0e41 	sub.w	lr, lr, #65	@ 0x41
 8014d36:	f1be 0f19 	cmp.w	lr, #25
 8014d3a:	d912      	bls.n	8014d62 <rcl_validate_topic_name+0x9e>
 8014d3c:	2a5f      	cmp	r2, #95	@ 0x5f
 8014d3e:	d019      	beq.n	8014d74 <rcl_validate_topic_name+0xb0>
 8014d40:	2a2f      	cmp	r2, #47	@ 0x2f
 8014d42:	d051      	beq.n	8014de8 <rcl_validate_topic_name+0x124>
 8014d44:	2a7e      	cmp	r2, #126	@ 0x7e
 8014d46:	d048      	beq.n	8014dda <rcl_validate_topic_name+0x116>
 8014d48:	2a7b      	cmp	r2, #123	@ 0x7b
 8014d4a:	d054      	beq.n	8014df6 <rcl_validate_topic_name+0x132>
 8014d4c:	2a7d      	cmp	r2, #125	@ 0x7d
 8014d4e:	d161      	bne.n	8014e14 <rcl_validate_topic_name+0x150>
 8014d50:	2c00      	cmp	r4, #0
 8014d52:	d155      	bne.n	8014e00 <rcl_validate_topic_name+0x13c>
 8014d54:	2305      	movs	r3, #5
 8014d56:	6033      	str	r3, [r6, #0]
 8014d58:	b107      	cbz	r7, 8014d5c <rcl_validate_topic_name+0x98>
 8014d5a:	6039      	str	r1, [r7, #0]
 8014d5c:	2000      	movs	r0, #0
 8014d5e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8014d62:	f81c 2002 	ldrb.w	r2, [ip, r2]
 8014d66:	0752      	lsls	r2, r2, #29
 8014d68:	d504      	bpl.n	8014d74 <rcl_validate_topic_name+0xb0>
 8014d6a:	b11c      	cbz	r4, 8014d74 <rcl_validate_topic_name+0xb0>
 8014d6c:	b111      	cbz	r1, 8014d74 <rcl_validate_topic_name+0xb0>
 8014d6e:	1e4a      	subs	r2, r1, #1
 8014d70:	429a      	cmp	r2, r3
 8014d72:	d02d      	beq.n	8014dd0 <rcl_validate_topic_name+0x10c>
 8014d74:	3101      	adds	r1, #1
 8014d76:	4288      	cmp	r0, r1
 8014d78:	d1d2      	bne.n	8014d20 <rcl_validate_topic_name+0x5c>
 8014d7a:	2c00      	cmp	r4, #0
 8014d7c:	d145      	bne.n	8014e0a <rcl_validate_topic_name+0x146>
 8014d7e:	f1b9 0f7e 	cmp.w	r9, #126	@ 0x7e
 8014d82:	d04f      	beq.n	8014e24 <rcl_validate_topic_name+0x160>
 8014d84:	4620      	mov	r0, r4
 8014d86:	2301      	movs	r3, #1
 8014d88:	e006      	b.n	8014d98 <rcl_validate_topic_name+0xd4>
 8014d8a:	428b      	cmp	r3, r1
 8014d8c:	f105 0501 	add.w	r5, r5, #1
 8014d90:	f103 0201 	add.w	r2, r3, #1
 8014d94:	d236      	bcs.n	8014e04 <rcl_validate_topic_name+0x140>
 8014d96:	4613      	mov	r3, r2
 8014d98:	4580      	cmp	r8, r0
 8014d9a:	f100 0001 	add.w	r0, r0, #1
 8014d9e:	d0f4      	beq.n	8014d8a <rcl_validate_topic_name+0xc6>
 8014da0:	782a      	ldrb	r2, [r5, #0]
 8014da2:	2a2f      	cmp	r2, #47	@ 0x2f
 8014da4:	d1f1      	bne.n	8014d8a <rcl_validate_topic_name+0xc6>
 8014da6:	786a      	ldrb	r2, [r5, #1]
 8014da8:	f81c 2002 	ldrb.w	r2, [ip, r2]
 8014dac:	0754      	lsls	r4, r2, #29
 8014dae:	d5ec      	bpl.n	8014d8a <rcl_validate_topic_name+0xc6>
 8014db0:	2204      	movs	r2, #4
 8014db2:	6032      	str	r2, [r6, #0]
 8014db4:	2f00      	cmp	r7, #0
 8014db6:	d0d1      	beq.n	8014d5c <rcl_validate_topic_name+0x98>
 8014db8:	603b      	str	r3, [r7, #0]
 8014dba:	2000      	movs	r0, #0
 8014dbc:	e7aa      	b.n	8014d14 <rcl_validate_topic_name+0x50>
 8014dbe:	200b      	movs	r0, #11
 8014dc0:	4770      	bx	lr
 8014dc2:	2304      	movs	r3, #4
 8014dc4:	6033      	str	r3, [r6, #0]
 8014dc6:	2f00      	cmp	r7, #0
 8014dc8:	d1a2      	bne.n	8014d10 <rcl_validate_topic_name+0x4c>
 8014dca:	e7c7      	b.n	8014d5c <rcl_validate_topic_name+0x98>
 8014dcc:	200b      	movs	r0, #11
 8014dce:	e7a1      	b.n	8014d14 <rcl_validate_topic_name+0x50>
 8014dd0:	2309      	movs	r3, #9
 8014dd2:	6033      	str	r3, [r6, #0]
 8014dd4:	2f00      	cmp	r7, #0
 8014dd6:	d1c0      	bne.n	8014d5a <rcl_validate_topic_name+0x96>
 8014dd8:	e7c0      	b.n	8014d5c <rcl_validate_topic_name+0x98>
 8014dda:	2900      	cmp	r1, #0
 8014ddc:	d0ca      	beq.n	8014d74 <rcl_validate_topic_name+0xb0>
 8014dde:	2306      	movs	r3, #6
 8014de0:	6033      	str	r3, [r6, #0]
 8014de2:	2f00      	cmp	r7, #0
 8014de4:	d1b9      	bne.n	8014d5a <rcl_validate_topic_name+0x96>
 8014de6:	e7b9      	b.n	8014d5c <rcl_validate_topic_name+0x98>
 8014de8:	2c00      	cmp	r4, #0
 8014dea:	d0c3      	beq.n	8014d74 <rcl_validate_topic_name+0xb0>
 8014dec:	2308      	movs	r3, #8
 8014dee:	6033      	str	r3, [r6, #0]
 8014df0:	2f00      	cmp	r7, #0
 8014df2:	d1b2      	bne.n	8014d5a <rcl_validate_topic_name+0x96>
 8014df4:	e7b2      	b.n	8014d5c <rcl_validate_topic_name+0x98>
 8014df6:	2c00      	cmp	r4, #0
 8014df8:	d1f8      	bne.n	8014dec <rcl_validate_topic_name+0x128>
 8014dfa:	460b      	mov	r3, r1
 8014dfc:	2401      	movs	r4, #1
 8014dfe:	e7b9      	b.n	8014d74 <rcl_validate_topic_name+0xb0>
 8014e00:	2400      	movs	r4, #0
 8014e02:	e7b7      	b.n	8014d74 <rcl_validate_topic_name+0xb0>
 8014e04:	2000      	movs	r0, #0
 8014e06:	6030      	str	r0, [r6, #0]
 8014e08:	e784      	b.n	8014d14 <rcl_validate_topic_name+0x50>
 8014e0a:	2205      	movs	r2, #5
 8014e0c:	6032      	str	r2, [r6, #0]
 8014e0e:	2f00      	cmp	r7, #0
 8014e10:	d1d2      	bne.n	8014db8 <rcl_validate_topic_name+0xf4>
 8014e12:	e7a3      	b.n	8014d5c <rcl_validate_topic_name+0x98>
 8014e14:	2c00      	cmp	r4, #0
 8014e16:	bf14      	ite	ne
 8014e18:	2308      	movne	r3, #8
 8014e1a:	2303      	moveq	r3, #3
 8014e1c:	6033      	str	r3, [r6, #0]
 8014e1e:	2f00      	cmp	r7, #0
 8014e20:	d19b      	bne.n	8014d5a <rcl_validate_topic_name+0x96>
 8014e22:	e79b      	b.n	8014d5c <rcl_validate_topic_name+0x98>
 8014e24:	2301      	movs	r3, #1
 8014e26:	e00a      	b.n	8014e3e <rcl_validate_topic_name+0x17a>
 8014e28:	2c01      	cmp	r4, #1
 8014e2a:	d013      	beq.n	8014e54 <rcl_validate_topic_name+0x190>
 8014e2c:	4299      	cmp	r1, r3
 8014e2e:	f104 0401 	add.w	r4, r4, #1
 8014e32:	f105 0501 	add.w	r5, r5, #1
 8014e36:	f103 0201 	add.w	r2, r3, #1
 8014e3a:	d9e3      	bls.n	8014e04 <rcl_validate_topic_name+0x140>
 8014e3c:	4613      	mov	r3, r2
 8014e3e:	45a0      	cmp	r8, r4
 8014e40:	d0f4      	beq.n	8014e2c <rcl_validate_topic_name+0x168>
 8014e42:	782a      	ldrb	r2, [r5, #0]
 8014e44:	2a2f      	cmp	r2, #47	@ 0x2f
 8014e46:	d1ef      	bne.n	8014e28 <rcl_validate_topic_name+0x164>
 8014e48:	786a      	ldrb	r2, [r5, #1]
 8014e4a:	f81c 2002 	ldrb.w	r2, [ip, r2]
 8014e4e:	0752      	lsls	r2, r2, #29
 8014e50:	d5ec      	bpl.n	8014e2c <rcl_validate_topic_name+0x168>
 8014e52:	e7ad      	b.n	8014db0 <rcl_validate_topic_name+0xec>
 8014e54:	2307      	movs	r3, #7
 8014e56:	6033      	str	r3, [r6, #0]
 8014e58:	2f00      	cmp	r7, #0
 8014e5a:	f43f af7f 	beq.w	8014d5c <rcl_validate_topic_name+0x98>
 8014e5e:	603c      	str	r4, [r7, #0]
 8014e60:	2000      	movs	r0, #0
 8014e62:	e757      	b.n	8014d14 <rcl_validate_topic_name+0x50>
 8014e64:	080173b4 	.word	0x080173b4

08014e68 <rcutils_string_array_fini>:
 8014e68:	b320      	cbz	r0, 8014eb4 <rcutils_string_array_fini+0x4c>
 8014e6a:	b570      	push	{r4, r5, r6, lr}
 8014e6c:	4604      	mov	r4, r0
 8014e6e:	6840      	ldr	r0, [r0, #4]
 8014e70:	b1d8      	cbz	r0, 8014eaa <rcutils_string_array_fini+0x42>
 8014e72:	f104 0008 	add.w	r0, r4, #8
 8014e76:	f7f5 fa3d 	bl	800a2f4 <rcutils_allocator_is_valid>
 8014e7a:	b1b8      	cbz	r0, 8014eac <rcutils_string_array_fini+0x44>
 8014e7c:	6823      	ldr	r3, [r4, #0]
 8014e7e:	b1bb      	cbz	r3, 8014eb0 <rcutils_string_array_fini+0x48>
 8014e80:	2500      	movs	r5, #0
 8014e82:	6860      	ldr	r0, [r4, #4]
 8014e84:	462e      	mov	r6, r5
 8014e86:	f850 0025 	ldr.w	r0, [r0, r5, lsl #2]
 8014e8a:	68e3      	ldr	r3, [r4, #12]
 8014e8c:	69a1      	ldr	r1, [r4, #24]
 8014e8e:	4798      	blx	r3
 8014e90:	e9d4 3000 	ldrd	r3, r0, [r4]
 8014e94:	f840 6025 	str.w	r6, [r0, r5, lsl #2]
 8014e98:	3501      	adds	r5, #1
 8014e9a:	429d      	cmp	r5, r3
 8014e9c:	d3f3      	bcc.n	8014e86 <rcutils_string_array_fini+0x1e>
 8014e9e:	68e3      	ldr	r3, [r4, #12]
 8014ea0:	69a1      	ldr	r1, [r4, #24]
 8014ea2:	4798      	blx	r3
 8014ea4:	2000      	movs	r0, #0
 8014ea6:	e9c4 0000 	strd	r0, r0, [r4]
 8014eaa:	bd70      	pop	{r4, r5, r6, pc}
 8014eac:	200b      	movs	r0, #11
 8014eae:	bd70      	pop	{r4, r5, r6, pc}
 8014eb0:	6860      	ldr	r0, [r4, #4]
 8014eb2:	e7f4      	b.n	8014e9e <rcutils_string_array_fini+0x36>
 8014eb4:	200b      	movs	r0, #11
 8014eb6:	4770      	bx	lr

08014eb8 <rmw_create_guard_condition>:
 8014eb8:	b538      	push	{r3, r4, r5, lr}
 8014eba:	4605      	mov	r5, r0
 8014ebc:	4807      	ldr	r0, [pc, #28]	@ (8014edc <rmw_create_guard_condition+0x24>)
 8014ebe:	f7fe f923 	bl	8013108 <get_memory>
 8014ec2:	b148      	cbz	r0, 8014ed8 <rmw_create_guard_condition+0x20>
 8014ec4:	6884      	ldr	r4, [r0, #8]
 8014ec6:	2300      	movs	r3, #0
 8014ec8:	7423      	strb	r3, [r4, #16]
 8014eca:	61e5      	str	r5, [r4, #28]
 8014ecc:	f7fe f984 	bl	80131d8 <rmw_get_implementation_identifier>
 8014ed0:	e9c4 0405 	strd	r0, r4, [r4, #20]
 8014ed4:	f104 0014 	add.w	r0, r4, #20
 8014ed8:	bd38      	pop	{r3, r4, r5, pc}
 8014eda:	bf00      	nop
 8014edc:	2000da54 	.word	0x2000da54

08014ee0 <rmw_destroy_guard_condition>:
 8014ee0:	b508      	push	{r3, lr}
 8014ee2:	4b08      	ldr	r3, [pc, #32]	@ (8014f04 <rmw_destroy_guard_condition+0x24>)
 8014ee4:	6819      	ldr	r1, [r3, #0]
 8014ee6:	b911      	cbnz	r1, 8014eee <rmw_destroy_guard_condition+0xe>
 8014ee8:	e00a      	b.n	8014f00 <rmw_destroy_guard_condition+0x20>
 8014eea:	6849      	ldr	r1, [r1, #4]
 8014eec:	b141      	cbz	r1, 8014f00 <rmw_destroy_guard_condition+0x20>
 8014eee:	688b      	ldr	r3, [r1, #8]
 8014ef0:	3314      	adds	r3, #20
 8014ef2:	4298      	cmp	r0, r3
 8014ef4:	d1f9      	bne.n	8014eea <rmw_destroy_guard_condition+0xa>
 8014ef6:	4803      	ldr	r0, [pc, #12]	@ (8014f04 <rmw_destroy_guard_condition+0x24>)
 8014ef8:	f7fe f916 	bl	8013128 <put_memory>
 8014efc:	2000      	movs	r0, #0
 8014efe:	bd08      	pop	{r3, pc}
 8014f00:	2001      	movs	r0, #1
 8014f02:	bd08      	pop	{r3, pc}
 8014f04:	2000da54 	.word	0x2000da54

08014f08 <calloc>:
 8014f08:	4b02      	ldr	r3, [pc, #8]	@ (8014f14 <calloc+0xc>)
 8014f0a:	460a      	mov	r2, r1
 8014f0c:	4601      	mov	r1, r0
 8014f0e:	6818      	ldr	r0, [r3, #0]
 8014f10:	f000 b802 	b.w	8014f18 <_calloc_r>
 8014f14:	200000c0 	.word	0x200000c0

08014f18 <_calloc_r>:
 8014f18:	b570      	push	{r4, r5, r6, lr}
 8014f1a:	fba1 5402 	umull	r5, r4, r1, r2
 8014f1e:	b93c      	cbnz	r4, 8014f30 <_calloc_r+0x18>
 8014f20:	4629      	mov	r1, r5
 8014f22:	f000 f887 	bl	8015034 <_malloc_r>
 8014f26:	4606      	mov	r6, r0
 8014f28:	b928      	cbnz	r0, 8014f36 <_calloc_r+0x1e>
 8014f2a:	2600      	movs	r6, #0
 8014f2c:	4630      	mov	r0, r6
 8014f2e:	bd70      	pop	{r4, r5, r6, pc}
 8014f30:	220c      	movs	r2, #12
 8014f32:	6002      	str	r2, [r0, #0]
 8014f34:	e7f9      	b.n	8014f2a <_calloc_r+0x12>
 8014f36:	462a      	mov	r2, r5
 8014f38:	4621      	mov	r1, r4
 8014f3a:	f000 fc71 	bl	8015820 <memset>
 8014f3e:	e7f5      	b.n	8014f2c <_calloc_r+0x14>

08014f40 <getenv>:
 8014f40:	b507      	push	{r0, r1, r2, lr}
 8014f42:	4b04      	ldr	r3, [pc, #16]	@ (8014f54 <getenv+0x14>)
 8014f44:	4601      	mov	r1, r0
 8014f46:	aa01      	add	r2, sp, #4
 8014f48:	6818      	ldr	r0, [r3, #0]
 8014f4a:	f000 f805 	bl	8014f58 <_findenv_r>
 8014f4e:	b003      	add	sp, #12
 8014f50:	f85d fb04 	ldr.w	pc, [sp], #4
 8014f54:	200000c0 	.word	0x200000c0

08014f58 <_findenv_r>:
 8014f58:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014f5c:	f8df a06c 	ldr.w	sl, [pc, #108]	@ 8014fcc <_findenv_r+0x74>
 8014f60:	4606      	mov	r6, r0
 8014f62:	4689      	mov	r9, r1
 8014f64:	4617      	mov	r7, r2
 8014f66:	f000 fd51 	bl	8015a0c <__env_lock>
 8014f6a:	f8da 4000 	ldr.w	r4, [sl]
 8014f6e:	b134      	cbz	r4, 8014f7e <_findenv_r+0x26>
 8014f70:	464b      	mov	r3, r9
 8014f72:	4698      	mov	r8, r3
 8014f74:	f813 2b01 	ldrb.w	r2, [r3], #1
 8014f78:	b13a      	cbz	r2, 8014f8a <_findenv_r+0x32>
 8014f7a:	2a3d      	cmp	r2, #61	@ 0x3d
 8014f7c:	d1f9      	bne.n	8014f72 <_findenv_r+0x1a>
 8014f7e:	4630      	mov	r0, r6
 8014f80:	f000 fd4a 	bl	8015a18 <__env_unlock>
 8014f84:	2000      	movs	r0, #0
 8014f86:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014f8a:	eba8 0809 	sub.w	r8, r8, r9
 8014f8e:	46a3      	mov	fp, r4
 8014f90:	f854 0b04 	ldr.w	r0, [r4], #4
 8014f94:	2800      	cmp	r0, #0
 8014f96:	d0f2      	beq.n	8014f7e <_findenv_r+0x26>
 8014f98:	4642      	mov	r2, r8
 8014f9a:	4649      	mov	r1, r9
 8014f9c:	f000 fc55 	bl	801584a <strncmp>
 8014fa0:	2800      	cmp	r0, #0
 8014fa2:	d1f4      	bne.n	8014f8e <_findenv_r+0x36>
 8014fa4:	f854 3c04 	ldr.w	r3, [r4, #-4]
 8014fa8:	eb03 0508 	add.w	r5, r3, r8
 8014fac:	f813 3008 	ldrb.w	r3, [r3, r8]
 8014fb0:	2b3d      	cmp	r3, #61	@ 0x3d
 8014fb2:	d1ec      	bne.n	8014f8e <_findenv_r+0x36>
 8014fb4:	f8da 3000 	ldr.w	r3, [sl]
 8014fb8:	ebab 0303 	sub.w	r3, fp, r3
 8014fbc:	109b      	asrs	r3, r3, #2
 8014fbe:	4630      	mov	r0, r6
 8014fc0:	603b      	str	r3, [r7, #0]
 8014fc2:	f000 fd29 	bl	8015a18 <__env_unlock>
 8014fc6:	1c68      	adds	r0, r5, #1
 8014fc8:	e7dd      	b.n	8014f86 <_findenv_r+0x2e>
 8014fca:	bf00      	nop
 8014fcc:	20000000 	.word	0x20000000

08014fd0 <malloc>:
 8014fd0:	4b02      	ldr	r3, [pc, #8]	@ (8014fdc <malloc+0xc>)
 8014fd2:	4601      	mov	r1, r0
 8014fd4:	6818      	ldr	r0, [r3, #0]
 8014fd6:	f000 b82d 	b.w	8015034 <_malloc_r>
 8014fda:	bf00      	nop
 8014fdc:	200000c0 	.word	0x200000c0

08014fe0 <free>:
 8014fe0:	4b02      	ldr	r3, [pc, #8]	@ (8014fec <free+0xc>)
 8014fe2:	4601      	mov	r1, r0
 8014fe4:	6818      	ldr	r0, [r3, #0]
 8014fe6:	f000 bd1d 	b.w	8015a24 <_free_r>
 8014fea:	bf00      	nop
 8014fec:	200000c0 	.word	0x200000c0

08014ff0 <sbrk_aligned>:
 8014ff0:	b570      	push	{r4, r5, r6, lr}
 8014ff2:	4e0f      	ldr	r6, [pc, #60]	@ (8015030 <sbrk_aligned+0x40>)
 8014ff4:	460c      	mov	r4, r1
 8014ff6:	6831      	ldr	r1, [r6, #0]
 8014ff8:	4605      	mov	r5, r0
 8014ffa:	b911      	cbnz	r1, 8015002 <sbrk_aligned+0x12>
 8014ffc:	f000 fc82 	bl	8015904 <_sbrk_r>
 8015000:	6030      	str	r0, [r6, #0]
 8015002:	4621      	mov	r1, r4
 8015004:	4628      	mov	r0, r5
 8015006:	f000 fc7d 	bl	8015904 <_sbrk_r>
 801500a:	1c43      	adds	r3, r0, #1
 801500c:	d103      	bne.n	8015016 <sbrk_aligned+0x26>
 801500e:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 8015012:	4620      	mov	r0, r4
 8015014:	bd70      	pop	{r4, r5, r6, pc}
 8015016:	1cc4      	adds	r4, r0, #3
 8015018:	f024 0403 	bic.w	r4, r4, #3
 801501c:	42a0      	cmp	r0, r4
 801501e:	d0f8      	beq.n	8015012 <sbrk_aligned+0x22>
 8015020:	1a21      	subs	r1, r4, r0
 8015022:	4628      	mov	r0, r5
 8015024:	f000 fc6e 	bl	8015904 <_sbrk_r>
 8015028:	3001      	adds	r0, #1
 801502a:	d1f2      	bne.n	8015012 <sbrk_aligned+0x22>
 801502c:	e7ef      	b.n	801500e <sbrk_aligned+0x1e>
 801502e:	bf00      	nop
 8015030:	2000dc40 	.word	0x2000dc40

08015034 <_malloc_r>:
 8015034:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8015038:	1ccd      	adds	r5, r1, #3
 801503a:	f025 0503 	bic.w	r5, r5, #3
 801503e:	3508      	adds	r5, #8
 8015040:	2d0c      	cmp	r5, #12
 8015042:	bf38      	it	cc
 8015044:	250c      	movcc	r5, #12
 8015046:	2d00      	cmp	r5, #0
 8015048:	4606      	mov	r6, r0
 801504a:	db01      	blt.n	8015050 <_malloc_r+0x1c>
 801504c:	42a9      	cmp	r1, r5
 801504e:	d904      	bls.n	801505a <_malloc_r+0x26>
 8015050:	230c      	movs	r3, #12
 8015052:	6033      	str	r3, [r6, #0]
 8015054:	2000      	movs	r0, #0
 8015056:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801505a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8015130 <_malloc_r+0xfc>
 801505e:	f000 f869 	bl	8015134 <__malloc_lock>
 8015062:	f8d8 3000 	ldr.w	r3, [r8]
 8015066:	461c      	mov	r4, r3
 8015068:	bb44      	cbnz	r4, 80150bc <_malloc_r+0x88>
 801506a:	4629      	mov	r1, r5
 801506c:	4630      	mov	r0, r6
 801506e:	f7ff ffbf 	bl	8014ff0 <sbrk_aligned>
 8015072:	1c43      	adds	r3, r0, #1
 8015074:	4604      	mov	r4, r0
 8015076:	d158      	bne.n	801512a <_malloc_r+0xf6>
 8015078:	f8d8 4000 	ldr.w	r4, [r8]
 801507c:	4627      	mov	r7, r4
 801507e:	2f00      	cmp	r7, #0
 8015080:	d143      	bne.n	801510a <_malloc_r+0xd6>
 8015082:	2c00      	cmp	r4, #0
 8015084:	d04b      	beq.n	801511e <_malloc_r+0xea>
 8015086:	6823      	ldr	r3, [r4, #0]
 8015088:	4639      	mov	r1, r7
 801508a:	4630      	mov	r0, r6
 801508c:	eb04 0903 	add.w	r9, r4, r3
 8015090:	f000 fc38 	bl	8015904 <_sbrk_r>
 8015094:	4581      	cmp	r9, r0
 8015096:	d142      	bne.n	801511e <_malloc_r+0xea>
 8015098:	6821      	ldr	r1, [r4, #0]
 801509a:	1a6d      	subs	r5, r5, r1
 801509c:	4629      	mov	r1, r5
 801509e:	4630      	mov	r0, r6
 80150a0:	f7ff ffa6 	bl	8014ff0 <sbrk_aligned>
 80150a4:	3001      	adds	r0, #1
 80150a6:	d03a      	beq.n	801511e <_malloc_r+0xea>
 80150a8:	6823      	ldr	r3, [r4, #0]
 80150aa:	442b      	add	r3, r5
 80150ac:	6023      	str	r3, [r4, #0]
 80150ae:	f8d8 3000 	ldr.w	r3, [r8]
 80150b2:	685a      	ldr	r2, [r3, #4]
 80150b4:	bb62      	cbnz	r2, 8015110 <_malloc_r+0xdc>
 80150b6:	f8c8 7000 	str.w	r7, [r8]
 80150ba:	e00f      	b.n	80150dc <_malloc_r+0xa8>
 80150bc:	6822      	ldr	r2, [r4, #0]
 80150be:	1b52      	subs	r2, r2, r5
 80150c0:	d420      	bmi.n	8015104 <_malloc_r+0xd0>
 80150c2:	2a0b      	cmp	r2, #11
 80150c4:	d917      	bls.n	80150f6 <_malloc_r+0xc2>
 80150c6:	1961      	adds	r1, r4, r5
 80150c8:	42a3      	cmp	r3, r4
 80150ca:	6025      	str	r5, [r4, #0]
 80150cc:	bf18      	it	ne
 80150ce:	6059      	strne	r1, [r3, #4]
 80150d0:	6863      	ldr	r3, [r4, #4]
 80150d2:	bf08      	it	eq
 80150d4:	f8c8 1000 	streq.w	r1, [r8]
 80150d8:	5162      	str	r2, [r4, r5]
 80150da:	604b      	str	r3, [r1, #4]
 80150dc:	4630      	mov	r0, r6
 80150de:	f000 f82f 	bl	8015140 <__malloc_unlock>
 80150e2:	f104 000b 	add.w	r0, r4, #11
 80150e6:	1d23      	adds	r3, r4, #4
 80150e8:	f020 0007 	bic.w	r0, r0, #7
 80150ec:	1ac2      	subs	r2, r0, r3
 80150ee:	bf1c      	itt	ne
 80150f0:	1a1b      	subne	r3, r3, r0
 80150f2:	50a3      	strne	r3, [r4, r2]
 80150f4:	e7af      	b.n	8015056 <_malloc_r+0x22>
 80150f6:	6862      	ldr	r2, [r4, #4]
 80150f8:	42a3      	cmp	r3, r4
 80150fa:	bf0c      	ite	eq
 80150fc:	f8c8 2000 	streq.w	r2, [r8]
 8015100:	605a      	strne	r2, [r3, #4]
 8015102:	e7eb      	b.n	80150dc <_malloc_r+0xa8>
 8015104:	4623      	mov	r3, r4
 8015106:	6864      	ldr	r4, [r4, #4]
 8015108:	e7ae      	b.n	8015068 <_malloc_r+0x34>
 801510a:	463c      	mov	r4, r7
 801510c:	687f      	ldr	r7, [r7, #4]
 801510e:	e7b6      	b.n	801507e <_malloc_r+0x4a>
 8015110:	461a      	mov	r2, r3
 8015112:	685b      	ldr	r3, [r3, #4]
 8015114:	42a3      	cmp	r3, r4
 8015116:	d1fb      	bne.n	8015110 <_malloc_r+0xdc>
 8015118:	2300      	movs	r3, #0
 801511a:	6053      	str	r3, [r2, #4]
 801511c:	e7de      	b.n	80150dc <_malloc_r+0xa8>
 801511e:	230c      	movs	r3, #12
 8015120:	6033      	str	r3, [r6, #0]
 8015122:	4630      	mov	r0, r6
 8015124:	f000 f80c 	bl	8015140 <__malloc_unlock>
 8015128:	e794      	b.n	8015054 <_malloc_r+0x20>
 801512a:	6005      	str	r5, [r0, #0]
 801512c:	e7d6      	b.n	80150dc <_malloc_r+0xa8>
 801512e:	bf00      	nop
 8015130:	2000dc44 	.word	0x2000dc44

08015134 <__malloc_lock>:
 8015134:	4801      	ldr	r0, [pc, #4]	@ (801513c <__malloc_lock+0x8>)
 8015136:	f000 bc32 	b.w	801599e <__retarget_lock_acquire_recursive>
 801513a:	bf00      	nop
 801513c:	2000dd8d 	.word	0x2000dd8d

08015140 <__malloc_unlock>:
 8015140:	4801      	ldr	r0, [pc, #4]	@ (8015148 <__malloc_unlock+0x8>)
 8015142:	f000 bc2d 	b.w	80159a0 <__retarget_lock_release_recursive>
 8015146:	bf00      	nop
 8015148:	2000dd8d 	.word	0x2000dd8d

0801514c <srand>:
 801514c:	b538      	push	{r3, r4, r5, lr}
 801514e:	4b10      	ldr	r3, [pc, #64]	@ (8015190 <srand+0x44>)
 8015150:	681d      	ldr	r5, [r3, #0]
 8015152:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 8015154:	4604      	mov	r4, r0
 8015156:	b9b3      	cbnz	r3, 8015186 <srand+0x3a>
 8015158:	2018      	movs	r0, #24
 801515a:	f7ff ff39 	bl	8014fd0 <malloc>
 801515e:	4602      	mov	r2, r0
 8015160:	6328      	str	r0, [r5, #48]	@ 0x30
 8015162:	b920      	cbnz	r0, 801516e <srand+0x22>
 8015164:	4b0b      	ldr	r3, [pc, #44]	@ (8015194 <srand+0x48>)
 8015166:	480c      	ldr	r0, [pc, #48]	@ (8015198 <srand+0x4c>)
 8015168:	2146      	movs	r1, #70	@ 0x46
 801516a:	f000 fc31 	bl	80159d0 <__assert_func>
 801516e:	490b      	ldr	r1, [pc, #44]	@ (801519c <srand+0x50>)
 8015170:	4b0b      	ldr	r3, [pc, #44]	@ (80151a0 <srand+0x54>)
 8015172:	e9c0 1300 	strd	r1, r3, [r0]
 8015176:	4b0b      	ldr	r3, [pc, #44]	@ (80151a4 <srand+0x58>)
 8015178:	6083      	str	r3, [r0, #8]
 801517a:	230b      	movs	r3, #11
 801517c:	8183      	strh	r3, [r0, #12]
 801517e:	2100      	movs	r1, #0
 8015180:	2001      	movs	r0, #1
 8015182:	e9c2 0104 	strd	r0, r1, [r2, #16]
 8015186:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 8015188:	2200      	movs	r2, #0
 801518a:	611c      	str	r4, [r3, #16]
 801518c:	615a      	str	r2, [r3, #20]
 801518e:	bd38      	pop	{r3, r4, r5, pc}
 8015190:	200000c0 	.word	0x200000c0
 8015194:	08017344 	.word	0x08017344
 8015198:	0801735b 	.word	0x0801735b
 801519c:	abcd330e 	.word	0xabcd330e
 80151a0:	e66d1234 	.word	0xe66d1234
 80151a4:	0005deec 	.word	0x0005deec

080151a8 <rand>:
 80151a8:	4b16      	ldr	r3, [pc, #88]	@ (8015204 <rand+0x5c>)
 80151aa:	b510      	push	{r4, lr}
 80151ac:	681c      	ldr	r4, [r3, #0]
 80151ae:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 80151b0:	b9b3      	cbnz	r3, 80151e0 <rand+0x38>
 80151b2:	2018      	movs	r0, #24
 80151b4:	f7ff ff0c 	bl	8014fd0 <malloc>
 80151b8:	4602      	mov	r2, r0
 80151ba:	6320      	str	r0, [r4, #48]	@ 0x30
 80151bc:	b920      	cbnz	r0, 80151c8 <rand+0x20>
 80151be:	4b12      	ldr	r3, [pc, #72]	@ (8015208 <rand+0x60>)
 80151c0:	4812      	ldr	r0, [pc, #72]	@ (801520c <rand+0x64>)
 80151c2:	2152      	movs	r1, #82	@ 0x52
 80151c4:	f000 fc04 	bl	80159d0 <__assert_func>
 80151c8:	4911      	ldr	r1, [pc, #68]	@ (8015210 <rand+0x68>)
 80151ca:	4b12      	ldr	r3, [pc, #72]	@ (8015214 <rand+0x6c>)
 80151cc:	e9c0 1300 	strd	r1, r3, [r0]
 80151d0:	4b11      	ldr	r3, [pc, #68]	@ (8015218 <rand+0x70>)
 80151d2:	6083      	str	r3, [r0, #8]
 80151d4:	230b      	movs	r3, #11
 80151d6:	8183      	strh	r3, [r0, #12]
 80151d8:	2100      	movs	r1, #0
 80151da:	2001      	movs	r0, #1
 80151dc:	e9c2 0104 	strd	r0, r1, [r2, #16]
 80151e0:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 80151e2:	480e      	ldr	r0, [pc, #56]	@ (801521c <rand+0x74>)
 80151e4:	690b      	ldr	r3, [r1, #16]
 80151e6:	694c      	ldr	r4, [r1, #20]
 80151e8:	4a0d      	ldr	r2, [pc, #52]	@ (8015220 <rand+0x78>)
 80151ea:	4358      	muls	r0, r3
 80151ec:	fb02 0004 	mla	r0, r2, r4, r0
 80151f0:	fba3 3202 	umull	r3, r2, r3, r2
 80151f4:	3301      	adds	r3, #1
 80151f6:	eb40 0002 	adc.w	r0, r0, r2
 80151fa:	e9c1 3004 	strd	r3, r0, [r1, #16]
 80151fe:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 8015202:	bd10      	pop	{r4, pc}
 8015204:	200000c0 	.word	0x200000c0
 8015208:	08017344 	.word	0x08017344
 801520c:	0801735b 	.word	0x0801735b
 8015210:	abcd330e 	.word	0xabcd330e
 8015214:	e66d1234 	.word	0xe66d1234
 8015218:	0005deec 	.word	0x0005deec
 801521c:	5851f42d 	.word	0x5851f42d
 8015220:	4c957f2d 	.word	0x4c957f2d

08015224 <realloc>:
 8015224:	4b02      	ldr	r3, [pc, #8]	@ (8015230 <realloc+0xc>)
 8015226:	460a      	mov	r2, r1
 8015228:	4601      	mov	r1, r0
 801522a:	6818      	ldr	r0, [r3, #0]
 801522c:	f000 b802 	b.w	8015234 <_realloc_r>
 8015230:	200000c0 	.word	0x200000c0

08015234 <_realloc_r>:
 8015234:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015238:	4680      	mov	r8, r0
 801523a:	4615      	mov	r5, r2
 801523c:	460c      	mov	r4, r1
 801523e:	b921      	cbnz	r1, 801524a <_realloc_r+0x16>
 8015240:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8015244:	4611      	mov	r1, r2
 8015246:	f7ff bef5 	b.w	8015034 <_malloc_r>
 801524a:	b92a      	cbnz	r2, 8015258 <_realloc_r+0x24>
 801524c:	f000 fbea 	bl	8015a24 <_free_r>
 8015250:	2400      	movs	r4, #0
 8015252:	4620      	mov	r0, r4
 8015254:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015258:	f000 fc2e 	bl	8015ab8 <_malloc_usable_size_r>
 801525c:	4285      	cmp	r5, r0
 801525e:	4606      	mov	r6, r0
 8015260:	d802      	bhi.n	8015268 <_realloc_r+0x34>
 8015262:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8015266:	d8f4      	bhi.n	8015252 <_realloc_r+0x1e>
 8015268:	4629      	mov	r1, r5
 801526a:	4640      	mov	r0, r8
 801526c:	f7ff fee2 	bl	8015034 <_malloc_r>
 8015270:	4607      	mov	r7, r0
 8015272:	2800      	cmp	r0, #0
 8015274:	d0ec      	beq.n	8015250 <_realloc_r+0x1c>
 8015276:	42b5      	cmp	r5, r6
 8015278:	462a      	mov	r2, r5
 801527a:	4621      	mov	r1, r4
 801527c:	bf28      	it	cs
 801527e:	4632      	movcs	r2, r6
 8015280:	f000 fb97 	bl	80159b2 <memcpy>
 8015284:	4621      	mov	r1, r4
 8015286:	4640      	mov	r0, r8
 8015288:	f000 fbcc 	bl	8015a24 <_free_r>
 801528c:	463c      	mov	r4, r7
 801528e:	e7e0      	b.n	8015252 <_realloc_r+0x1e>

08015290 <_strtoul_l.constprop.0>:
 8015290:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8015294:	4e34      	ldr	r6, [pc, #208]	@ (8015368 <_strtoul_l.constprop.0+0xd8>)
 8015296:	4686      	mov	lr, r0
 8015298:	460d      	mov	r5, r1
 801529a:	4628      	mov	r0, r5
 801529c:	f815 4b01 	ldrb.w	r4, [r5], #1
 80152a0:	5d37      	ldrb	r7, [r6, r4]
 80152a2:	f017 0708 	ands.w	r7, r7, #8
 80152a6:	d1f8      	bne.n	801529a <_strtoul_l.constprop.0+0xa>
 80152a8:	2c2d      	cmp	r4, #45	@ 0x2d
 80152aa:	d12f      	bne.n	801530c <_strtoul_l.constprop.0+0x7c>
 80152ac:	782c      	ldrb	r4, [r5, #0]
 80152ae:	2701      	movs	r7, #1
 80152b0:	1c85      	adds	r5, r0, #2
 80152b2:	f033 0010 	bics.w	r0, r3, #16
 80152b6:	d109      	bne.n	80152cc <_strtoul_l.constprop.0+0x3c>
 80152b8:	2c30      	cmp	r4, #48	@ 0x30
 80152ba:	d12c      	bne.n	8015316 <_strtoul_l.constprop.0+0x86>
 80152bc:	7828      	ldrb	r0, [r5, #0]
 80152be:	f000 00df 	and.w	r0, r0, #223	@ 0xdf
 80152c2:	2858      	cmp	r0, #88	@ 0x58
 80152c4:	d127      	bne.n	8015316 <_strtoul_l.constprop.0+0x86>
 80152c6:	786c      	ldrb	r4, [r5, #1]
 80152c8:	2310      	movs	r3, #16
 80152ca:	3502      	adds	r5, #2
 80152cc:	f04f 38ff 	mov.w	r8, #4294967295	@ 0xffffffff
 80152d0:	2600      	movs	r6, #0
 80152d2:	fbb8 f8f3 	udiv	r8, r8, r3
 80152d6:	fb03 f908 	mul.w	r9, r3, r8
 80152da:	ea6f 0909 	mvn.w	r9, r9
 80152de:	4630      	mov	r0, r6
 80152e0:	f1a4 0c30 	sub.w	ip, r4, #48	@ 0x30
 80152e4:	f1bc 0f09 	cmp.w	ip, #9
 80152e8:	d81c      	bhi.n	8015324 <_strtoul_l.constprop.0+0x94>
 80152ea:	4664      	mov	r4, ip
 80152ec:	42a3      	cmp	r3, r4
 80152ee:	dd2a      	ble.n	8015346 <_strtoul_l.constprop.0+0xb6>
 80152f0:	f1b6 3fff 	cmp.w	r6, #4294967295	@ 0xffffffff
 80152f4:	d007      	beq.n	8015306 <_strtoul_l.constprop.0+0x76>
 80152f6:	4580      	cmp	r8, r0
 80152f8:	d322      	bcc.n	8015340 <_strtoul_l.constprop.0+0xb0>
 80152fa:	d101      	bne.n	8015300 <_strtoul_l.constprop.0+0x70>
 80152fc:	45a1      	cmp	r9, r4
 80152fe:	db1f      	blt.n	8015340 <_strtoul_l.constprop.0+0xb0>
 8015300:	fb00 4003 	mla	r0, r0, r3, r4
 8015304:	2601      	movs	r6, #1
 8015306:	f815 4b01 	ldrb.w	r4, [r5], #1
 801530a:	e7e9      	b.n	80152e0 <_strtoul_l.constprop.0+0x50>
 801530c:	2c2b      	cmp	r4, #43	@ 0x2b
 801530e:	bf04      	itt	eq
 8015310:	782c      	ldrbeq	r4, [r5, #0]
 8015312:	1c85      	addeq	r5, r0, #2
 8015314:	e7cd      	b.n	80152b2 <_strtoul_l.constprop.0+0x22>
 8015316:	2b00      	cmp	r3, #0
 8015318:	d1d8      	bne.n	80152cc <_strtoul_l.constprop.0+0x3c>
 801531a:	2c30      	cmp	r4, #48	@ 0x30
 801531c:	bf0c      	ite	eq
 801531e:	2308      	moveq	r3, #8
 8015320:	230a      	movne	r3, #10
 8015322:	e7d3      	b.n	80152cc <_strtoul_l.constprop.0+0x3c>
 8015324:	f1a4 0c41 	sub.w	ip, r4, #65	@ 0x41
 8015328:	f1bc 0f19 	cmp.w	ip, #25
 801532c:	d801      	bhi.n	8015332 <_strtoul_l.constprop.0+0xa2>
 801532e:	3c37      	subs	r4, #55	@ 0x37
 8015330:	e7dc      	b.n	80152ec <_strtoul_l.constprop.0+0x5c>
 8015332:	f1a4 0c61 	sub.w	ip, r4, #97	@ 0x61
 8015336:	f1bc 0f19 	cmp.w	ip, #25
 801533a:	d804      	bhi.n	8015346 <_strtoul_l.constprop.0+0xb6>
 801533c:	3c57      	subs	r4, #87	@ 0x57
 801533e:	e7d5      	b.n	80152ec <_strtoul_l.constprop.0+0x5c>
 8015340:	f04f 36ff 	mov.w	r6, #4294967295	@ 0xffffffff
 8015344:	e7df      	b.n	8015306 <_strtoul_l.constprop.0+0x76>
 8015346:	1c73      	adds	r3, r6, #1
 8015348:	d106      	bne.n	8015358 <_strtoul_l.constprop.0+0xc8>
 801534a:	2322      	movs	r3, #34	@ 0x22
 801534c:	f8ce 3000 	str.w	r3, [lr]
 8015350:	4630      	mov	r0, r6
 8015352:	b932      	cbnz	r2, 8015362 <_strtoul_l.constprop.0+0xd2>
 8015354:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8015358:	b107      	cbz	r7, 801535c <_strtoul_l.constprop.0+0xcc>
 801535a:	4240      	negs	r0, r0
 801535c:	2a00      	cmp	r2, #0
 801535e:	d0f9      	beq.n	8015354 <_strtoul_l.constprop.0+0xc4>
 8015360:	b106      	cbz	r6, 8015364 <_strtoul_l.constprop.0+0xd4>
 8015362:	1e69      	subs	r1, r5, #1
 8015364:	6011      	str	r1, [r2, #0]
 8015366:	e7f5      	b.n	8015354 <_strtoul_l.constprop.0+0xc4>
 8015368:	080173b4 	.word	0x080173b4

0801536c <strtoul>:
 801536c:	4613      	mov	r3, r2
 801536e:	460a      	mov	r2, r1
 8015370:	4601      	mov	r1, r0
 8015372:	4802      	ldr	r0, [pc, #8]	@ (801537c <strtoul+0x10>)
 8015374:	6800      	ldr	r0, [r0, #0]
 8015376:	f7ff bf8b 	b.w	8015290 <_strtoul_l.constprop.0>
 801537a:	bf00      	nop
 801537c:	200000c0 	.word	0x200000c0

08015380 <setenv>:
 8015380:	4613      	mov	r3, r2
 8015382:	460a      	mov	r2, r1
 8015384:	4601      	mov	r1, r0
 8015386:	4802      	ldr	r0, [pc, #8]	@ (8015390 <setenv+0x10>)
 8015388:	6800      	ldr	r0, [r0, #0]
 801538a:	f000 b803 	b.w	8015394 <_setenv_r>
 801538e:	bf00      	nop
 8015390:	200000c0 	.word	0x200000c0

08015394 <_setenv_r>:
 8015394:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015398:	460e      	mov	r6, r1
 801539a:	4605      	mov	r5, r0
 801539c:	213d      	movs	r1, #61	@ 0x3d
 801539e:	4630      	mov	r0, r6
 80153a0:	4617      	mov	r7, r2
 80153a2:	4698      	mov	r8, r3
 80153a4:	f000 fa44 	bl	8015830 <strchr>
 80153a8:	b130      	cbz	r0, 80153b8 <_setenv_r+0x24>
 80153aa:	f000 facd 	bl	8015948 <__errno>
 80153ae:	2316      	movs	r3, #22
 80153b0:	6003      	str	r3, [r0, #0]
 80153b2:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80153b6:	e014      	b.n	80153e2 <_setenv_r+0x4e>
 80153b8:	4628      	mov	r0, r5
 80153ba:	f000 fb27 	bl	8015a0c <__env_lock>
 80153be:	4638      	mov	r0, r7
 80153c0:	f7ea ff18 	bl	80001f4 <strlen>
 80153c4:	aa01      	add	r2, sp, #4
 80153c6:	4681      	mov	r9, r0
 80153c8:	4631      	mov	r1, r6
 80153ca:	4628      	mov	r0, r5
 80153cc:	f7ff fdc4 	bl	8014f58 <_findenv_r>
 80153d0:	4604      	mov	r4, r0
 80153d2:	b1a8      	cbz	r0, 8015400 <_setenv_r+0x6c>
 80153d4:	f1b8 0f00 	cmp.w	r8, #0
 80153d8:	d106      	bne.n	80153e8 <_setenv_r+0x54>
 80153da:	4628      	mov	r0, r5
 80153dc:	f000 fb1c 	bl	8015a18 <__env_unlock>
 80153e0:	2000      	movs	r0, #0
 80153e2:	b003      	add	sp, #12
 80153e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80153e8:	f7ea ff04 	bl	80001f4 <strlen>
 80153ec:	4581      	cmp	r9, r0
 80153ee:	d83a      	bhi.n	8015466 <_setenv_r+0xd2>
 80153f0:	3c01      	subs	r4, #1
 80153f2:	f817 3b01 	ldrb.w	r3, [r7], #1
 80153f6:	f804 3f01 	strb.w	r3, [r4, #1]!
 80153fa:	2b00      	cmp	r3, #0
 80153fc:	d1f9      	bne.n	80153f2 <_setenv_r+0x5e>
 80153fe:	e7ec      	b.n	80153da <_setenv_r+0x46>
 8015400:	f8df a0bc 	ldr.w	sl, [pc, #188]	@ 80154c0 <_setenv_r+0x12c>
 8015404:	f8da 1000 	ldr.w	r1, [sl]
 8015408:	f851 3024 	ldr.w	r3, [r1, r4, lsl #2]
 801540c:	b98b      	cbnz	r3, 8015432 <_setenv_r+0x9e>
 801540e:	4b2b      	ldr	r3, [pc, #172]	@ (80154bc <_setenv_r+0x128>)
 8015410:	681a      	ldr	r2, [r3, #0]
 8015412:	f104 0802 	add.w	r8, r4, #2
 8015416:	ea4f 0888 	mov.w	r8, r8, lsl #2
 801541a:	b162      	cbz	r2, 8015436 <_setenv_r+0xa2>
 801541c:	4642      	mov	r2, r8
 801541e:	4628      	mov	r0, r5
 8015420:	f7ff ff08 	bl	8015234 <_realloc_r>
 8015424:	f8ca 0000 	str.w	r0, [sl]
 8015428:	b9b0      	cbnz	r0, 8015458 <_setenv_r+0xc4>
 801542a:	4628      	mov	r0, r5
 801542c:	f000 faf4 	bl	8015a18 <__env_unlock>
 8015430:	e7bf      	b.n	80153b2 <_setenv_r+0x1e>
 8015432:	3401      	adds	r4, #1
 8015434:	e7e8      	b.n	8015408 <_setenv_r+0x74>
 8015436:	2201      	movs	r2, #1
 8015438:	4641      	mov	r1, r8
 801543a:	4628      	mov	r0, r5
 801543c:	601a      	str	r2, [r3, #0]
 801543e:	f7ff fdf9 	bl	8015034 <_malloc_r>
 8015442:	4683      	mov	fp, r0
 8015444:	2800      	cmp	r0, #0
 8015446:	d0f0      	beq.n	801542a <_setenv_r+0x96>
 8015448:	f8da 1000 	ldr.w	r1, [sl]
 801544c:	f1a8 0208 	sub.w	r2, r8, #8
 8015450:	f000 faaf 	bl	80159b2 <memcpy>
 8015454:	f8ca b000 	str.w	fp, [sl]
 8015458:	f8da 3000 	ldr.w	r3, [sl]
 801545c:	4443      	add	r3, r8
 801545e:	2200      	movs	r2, #0
 8015460:	f843 2c04 	str.w	r2, [r3, #-4]
 8015464:	9401      	str	r4, [sp, #4]
 8015466:	4633      	mov	r3, r6
 8015468:	4619      	mov	r1, r3
 801546a:	f813 2b01 	ldrb.w	r2, [r3], #1
 801546e:	b10a      	cbz	r2, 8015474 <_setenv_r+0xe0>
 8015470:	2a3d      	cmp	r2, #61	@ 0x3d
 8015472:	d1f9      	bne.n	8015468 <_setenv_r+0xd4>
 8015474:	1b89      	subs	r1, r1, r6
 8015476:	4c12      	ldr	r4, [pc, #72]	@ (80154c0 <_setenv_r+0x12c>)
 8015478:	f8dd a004 	ldr.w	sl, [sp, #4]
 801547c:	f8d4 8000 	ldr.w	r8, [r4]
 8015480:	4449      	add	r1, r9
 8015482:	3102      	adds	r1, #2
 8015484:	4628      	mov	r0, r5
 8015486:	f7ff fdd5 	bl	8015034 <_malloc_r>
 801548a:	f848 002a 	str.w	r0, [r8, sl, lsl #2]
 801548e:	2800      	cmp	r0, #0
 8015490:	d0cb      	beq.n	801542a <_setenv_r+0x96>
 8015492:	6823      	ldr	r3, [r4, #0]
 8015494:	9a01      	ldr	r2, [sp, #4]
 8015496:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 801549a:	f816 1b01 	ldrb.w	r1, [r6], #1
 801549e:	7011      	strb	r1, [r2, #0]
 80154a0:	4613      	mov	r3, r2
 80154a2:	3201      	adds	r2, #1
 80154a4:	b109      	cbz	r1, 80154aa <_setenv_r+0x116>
 80154a6:	293d      	cmp	r1, #61	@ 0x3d
 80154a8:	d1f7      	bne.n	801549a <_setenv_r+0x106>
 80154aa:	223d      	movs	r2, #61	@ 0x3d
 80154ac:	701a      	strb	r2, [r3, #0]
 80154ae:	f817 2b01 	ldrb.w	r2, [r7], #1
 80154b2:	f803 2f01 	strb.w	r2, [r3, #1]!
 80154b6:	2a00      	cmp	r2, #0
 80154b8:	d1f9      	bne.n	80154ae <_setenv_r+0x11a>
 80154ba:	e78e      	b.n	80153da <_setenv_r+0x46>
 80154bc:	2000dc48 	.word	0x2000dc48
 80154c0:	20000000 	.word	0x20000000

080154c4 <std>:
 80154c4:	2300      	movs	r3, #0
 80154c6:	b510      	push	{r4, lr}
 80154c8:	4604      	mov	r4, r0
 80154ca:	e9c0 3300 	strd	r3, r3, [r0]
 80154ce:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80154d2:	6083      	str	r3, [r0, #8]
 80154d4:	8181      	strh	r1, [r0, #12]
 80154d6:	6643      	str	r3, [r0, #100]	@ 0x64
 80154d8:	81c2      	strh	r2, [r0, #14]
 80154da:	6183      	str	r3, [r0, #24]
 80154dc:	4619      	mov	r1, r3
 80154de:	2208      	movs	r2, #8
 80154e0:	305c      	adds	r0, #92	@ 0x5c
 80154e2:	f000 f99d 	bl	8015820 <memset>
 80154e6:	4b0d      	ldr	r3, [pc, #52]	@ (801551c <std+0x58>)
 80154e8:	6263      	str	r3, [r4, #36]	@ 0x24
 80154ea:	4b0d      	ldr	r3, [pc, #52]	@ (8015520 <std+0x5c>)
 80154ec:	62a3      	str	r3, [r4, #40]	@ 0x28
 80154ee:	4b0d      	ldr	r3, [pc, #52]	@ (8015524 <std+0x60>)
 80154f0:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80154f2:	4b0d      	ldr	r3, [pc, #52]	@ (8015528 <std+0x64>)
 80154f4:	6323      	str	r3, [r4, #48]	@ 0x30
 80154f6:	4b0d      	ldr	r3, [pc, #52]	@ (801552c <std+0x68>)
 80154f8:	6224      	str	r4, [r4, #32]
 80154fa:	429c      	cmp	r4, r3
 80154fc:	d006      	beq.n	801550c <std+0x48>
 80154fe:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8015502:	4294      	cmp	r4, r2
 8015504:	d002      	beq.n	801550c <std+0x48>
 8015506:	33d0      	adds	r3, #208	@ 0xd0
 8015508:	429c      	cmp	r4, r3
 801550a:	d105      	bne.n	8015518 <std+0x54>
 801550c:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8015510:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8015514:	f000 ba42 	b.w	801599c <__retarget_lock_init_recursive>
 8015518:	bd10      	pop	{r4, pc}
 801551a:	bf00      	nop
 801551c:	080156d5 	.word	0x080156d5
 8015520:	080156f7 	.word	0x080156f7
 8015524:	0801572f 	.word	0x0801572f
 8015528:	08015753 	.word	0x08015753
 801552c:	2000dc4c 	.word	0x2000dc4c

08015530 <stdio_exit_handler>:
 8015530:	4a02      	ldr	r2, [pc, #8]	@ (801553c <stdio_exit_handler+0xc>)
 8015532:	4903      	ldr	r1, [pc, #12]	@ (8015540 <stdio_exit_handler+0x10>)
 8015534:	4803      	ldr	r0, [pc, #12]	@ (8015544 <stdio_exit_handler+0x14>)
 8015536:	f000 b869 	b.w	801560c <_fwalk_sglue>
 801553a:	bf00      	nop
 801553c:	200000b4 	.word	0x200000b4
 8015540:	08016421 	.word	0x08016421
 8015544:	200000c4 	.word	0x200000c4

08015548 <cleanup_stdio>:
 8015548:	6841      	ldr	r1, [r0, #4]
 801554a:	4b0c      	ldr	r3, [pc, #48]	@ (801557c <cleanup_stdio+0x34>)
 801554c:	4299      	cmp	r1, r3
 801554e:	b510      	push	{r4, lr}
 8015550:	4604      	mov	r4, r0
 8015552:	d001      	beq.n	8015558 <cleanup_stdio+0x10>
 8015554:	f000 ff64 	bl	8016420 <_fflush_r>
 8015558:	68a1      	ldr	r1, [r4, #8]
 801555a:	4b09      	ldr	r3, [pc, #36]	@ (8015580 <cleanup_stdio+0x38>)
 801555c:	4299      	cmp	r1, r3
 801555e:	d002      	beq.n	8015566 <cleanup_stdio+0x1e>
 8015560:	4620      	mov	r0, r4
 8015562:	f000 ff5d 	bl	8016420 <_fflush_r>
 8015566:	68e1      	ldr	r1, [r4, #12]
 8015568:	4b06      	ldr	r3, [pc, #24]	@ (8015584 <cleanup_stdio+0x3c>)
 801556a:	4299      	cmp	r1, r3
 801556c:	d004      	beq.n	8015578 <cleanup_stdio+0x30>
 801556e:	4620      	mov	r0, r4
 8015570:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8015574:	f000 bf54 	b.w	8016420 <_fflush_r>
 8015578:	bd10      	pop	{r4, pc}
 801557a:	bf00      	nop
 801557c:	2000dc4c 	.word	0x2000dc4c
 8015580:	2000dcb4 	.word	0x2000dcb4
 8015584:	2000dd1c 	.word	0x2000dd1c

08015588 <global_stdio_init.part.0>:
 8015588:	b510      	push	{r4, lr}
 801558a:	4b0b      	ldr	r3, [pc, #44]	@ (80155b8 <global_stdio_init.part.0+0x30>)
 801558c:	4c0b      	ldr	r4, [pc, #44]	@ (80155bc <global_stdio_init.part.0+0x34>)
 801558e:	4a0c      	ldr	r2, [pc, #48]	@ (80155c0 <global_stdio_init.part.0+0x38>)
 8015590:	601a      	str	r2, [r3, #0]
 8015592:	4620      	mov	r0, r4
 8015594:	2200      	movs	r2, #0
 8015596:	2104      	movs	r1, #4
 8015598:	f7ff ff94 	bl	80154c4 <std>
 801559c:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80155a0:	2201      	movs	r2, #1
 80155a2:	2109      	movs	r1, #9
 80155a4:	f7ff ff8e 	bl	80154c4 <std>
 80155a8:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80155ac:	2202      	movs	r2, #2
 80155ae:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80155b2:	2112      	movs	r1, #18
 80155b4:	f7ff bf86 	b.w	80154c4 <std>
 80155b8:	2000dd84 	.word	0x2000dd84
 80155bc:	2000dc4c 	.word	0x2000dc4c
 80155c0:	08015531 	.word	0x08015531

080155c4 <__sfp_lock_acquire>:
 80155c4:	4801      	ldr	r0, [pc, #4]	@ (80155cc <__sfp_lock_acquire+0x8>)
 80155c6:	f000 b9ea 	b.w	801599e <__retarget_lock_acquire_recursive>
 80155ca:	bf00      	nop
 80155cc:	2000dd8e 	.word	0x2000dd8e

080155d0 <__sfp_lock_release>:
 80155d0:	4801      	ldr	r0, [pc, #4]	@ (80155d8 <__sfp_lock_release+0x8>)
 80155d2:	f000 b9e5 	b.w	80159a0 <__retarget_lock_release_recursive>
 80155d6:	bf00      	nop
 80155d8:	2000dd8e 	.word	0x2000dd8e

080155dc <__sinit>:
 80155dc:	b510      	push	{r4, lr}
 80155de:	4604      	mov	r4, r0
 80155e0:	f7ff fff0 	bl	80155c4 <__sfp_lock_acquire>
 80155e4:	6a23      	ldr	r3, [r4, #32]
 80155e6:	b11b      	cbz	r3, 80155f0 <__sinit+0x14>
 80155e8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80155ec:	f7ff bff0 	b.w	80155d0 <__sfp_lock_release>
 80155f0:	4b04      	ldr	r3, [pc, #16]	@ (8015604 <__sinit+0x28>)
 80155f2:	6223      	str	r3, [r4, #32]
 80155f4:	4b04      	ldr	r3, [pc, #16]	@ (8015608 <__sinit+0x2c>)
 80155f6:	681b      	ldr	r3, [r3, #0]
 80155f8:	2b00      	cmp	r3, #0
 80155fa:	d1f5      	bne.n	80155e8 <__sinit+0xc>
 80155fc:	f7ff ffc4 	bl	8015588 <global_stdio_init.part.0>
 8015600:	e7f2      	b.n	80155e8 <__sinit+0xc>
 8015602:	bf00      	nop
 8015604:	08015549 	.word	0x08015549
 8015608:	2000dd84 	.word	0x2000dd84

0801560c <_fwalk_sglue>:
 801560c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8015610:	4607      	mov	r7, r0
 8015612:	4688      	mov	r8, r1
 8015614:	4614      	mov	r4, r2
 8015616:	2600      	movs	r6, #0
 8015618:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 801561c:	f1b9 0901 	subs.w	r9, r9, #1
 8015620:	d505      	bpl.n	801562e <_fwalk_sglue+0x22>
 8015622:	6824      	ldr	r4, [r4, #0]
 8015624:	2c00      	cmp	r4, #0
 8015626:	d1f7      	bne.n	8015618 <_fwalk_sglue+0xc>
 8015628:	4630      	mov	r0, r6
 801562a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801562e:	89ab      	ldrh	r3, [r5, #12]
 8015630:	2b01      	cmp	r3, #1
 8015632:	d907      	bls.n	8015644 <_fwalk_sglue+0x38>
 8015634:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8015638:	3301      	adds	r3, #1
 801563a:	d003      	beq.n	8015644 <_fwalk_sglue+0x38>
 801563c:	4629      	mov	r1, r5
 801563e:	4638      	mov	r0, r7
 8015640:	47c0      	blx	r8
 8015642:	4306      	orrs	r6, r0
 8015644:	3568      	adds	r5, #104	@ 0x68
 8015646:	e7e9      	b.n	801561c <_fwalk_sglue+0x10>

08015648 <iprintf>:
 8015648:	b40f      	push	{r0, r1, r2, r3}
 801564a:	b507      	push	{r0, r1, r2, lr}
 801564c:	4906      	ldr	r1, [pc, #24]	@ (8015668 <iprintf+0x20>)
 801564e:	ab04      	add	r3, sp, #16
 8015650:	6808      	ldr	r0, [r1, #0]
 8015652:	f853 2b04 	ldr.w	r2, [r3], #4
 8015656:	6881      	ldr	r1, [r0, #8]
 8015658:	9301      	str	r3, [sp, #4]
 801565a:	f000 fbb7 	bl	8015dcc <_vfiprintf_r>
 801565e:	b003      	add	sp, #12
 8015660:	f85d eb04 	ldr.w	lr, [sp], #4
 8015664:	b004      	add	sp, #16
 8015666:	4770      	bx	lr
 8015668:	200000c0 	.word	0x200000c0

0801566c <sniprintf>:
 801566c:	b40c      	push	{r2, r3}
 801566e:	b530      	push	{r4, r5, lr}
 8015670:	4b17      	ldr	r3, [pc, #92]	@ (80156d0 <sniprintf+0x64>)
 8015672:	1e0c      	subs	r4, r1, #0
 8015674:	681d      	ldr	r5, [r3, #0]
 8015676:	b09d      	sub	sp, #116	@ 0x74
 8015678:	da08      	bge.n	801568c <sniprintf+0x20>
 801567a:	238b      	movs	r3, #139	@ 0x8b
 801567c:	602b      	str	r3, [r5, #0]
 801567e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8015682:	b01d      	add	sp, #116	@ 0x74
 8015684:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8015688:	b002      	add	sp, #8
 801568a:	4770      	bx	lr
 801568c:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8015690:	f8ad 3014 	strh.w	r3, [sp, #20]
 8015694:	bf14      	ite	ne
 8015696:	f104 33ff 	addne.w	r3, r4, #4294967295	@ 0xffffffff
 801569a:	4623      	moveq	r3, r4
 801569c:	9304      	str	r3, [sp, #16]
 801569e:	9307      	str	r3, [sp, #28]
 80156a0:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80156a4:	9002      	str	r0, [sp, #8]
 80156a6:	9006      	str	r0, [sp, #24]
 80156a8:	f8ad 3016 	strh.w	r3, [sp, #22]
 80156ac:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 80156ae:	ab21      	add	r3, sp, #132	@ 0x84
 80156b0:	a902      	add	r1, sp, #8
 80156b2:	4628      	mov	r0, r5
 80156b4:	9301      	str	r3, [sp, #4]
 80156b6:	f000 fa63 	bl	8015b80 <_svfiprintf_r>
 80156ba:	1c43      	adds	r3, r0, #1
 80156bc:	bfbc      	itt	lt
 80156be:	238b      	movlt	r3, #139	@ 0x8b
 80156c0:	602b      	strlt	r3, [r5, #0]
 80156c2:	2c00      	cmp	r4, #0
 80156c4:	d0dd      	beq.n	8015682 <sniprintf+0x16>
 80156c6:	9b02      	ldr	r3, [sp, #8]
 80156c8:	2200      	movs	r2, #0
 80156ca:	701a      	strb	r2, [r3, #0]
 80156cc:	e7d9      	b.n	8015682 <sniprintf+0x16>
 80156ce:	bf00      	nop
 80156d0:	200000c0 	.word	0x200000c0

080156d4 <__sread>:
 80156d4:	b510      	push	{r4, lr}
 80156d6:	460c      	mov	r4, r1
 80156d8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80156dc:	f000 f900 	bl	80158e0 <_read_r>
 80156e0:	2800      	cmp	r0, #0
 80156e2:	bfab      	itete	ge
 80156e4:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80156e6:	89a3      	ldrhlt	r3, [r4, #12]
 80156e8:	181b      	addge	r3, r3, r0
 80156ea:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80156ee:	bfac      	ite	ge
 80156f0:	6563      	strge	r3, [r4, #84]	@ 0x54
 80156f2:	81a3      	strhlt	r3, [r4, #12]
 80156f4:	bd10      	pop	{r4, pc}

080156f6 <__swrite>:
 80156f6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80156fa:	461f      	mov	r7, r3
 80156fc:	898b      	ldrh	r3, [r1, #12]
 80156fe:	05db      	lsls	r3, r3, #23
 8015700:	4605      	mov	r5, r0
 8015702:	460c      	mov	r4, r1
 8015704:	4616      	mov	r6, r2
 8015706:	d505      	bpl.n	8015714 <__swrite+0x1e>
 8015708:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801570c:	2302      	movs	r3, #2
 801570e:	2200      	movs	r2, #0
 8015710:	f000 f8d4 	bl	80158bc <_lseek_r>
 8015714:	89a3      	ldrh	r3, [r4, #12]
 8015716:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801571a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 801571e:	81a3      	strh	r3, [r4, #12]
 8015720:	4632      	mov	r2, r6
 8015722:	463b      	mov	r3, r7
 8015724:	4628      	mov	r0, r5
 8015726:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801572a:	f000 b8fb 	b.w	8015924 <_write_r>

0801572e <__sseek>:
 801572e:	b510      	push	{r4, lr}
 8015730:	460c      	mov	r4, r1
 8015732:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8015736:	f000 f8c1 	bl	80158bc <_lseek_r>
 801573a:	1c43      	adds	r3, r0, #1
 801573c:	89a3      	ldrh	r3, [r4, #12]
 801573e:	bf15      	itete	ne
 8015740:	6560      	strne	r0, [r4, #84]	@ 0x54
 8015742:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8015746:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 801574a:	81a3      	strheq	r3, [r4, #12]
 801574c:	bf18      	it	ne
 801574e:	81a3      	strhne	r3, [r4, #12]
 8015750:	bd10      	pop	{r4, pc}

08015752 <__sclose>:
 8015752:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8015756:	f000 b8a1 	b.w	801589c <_close_r>

0801575a <_vsniprintf_r>:
 801575a:	b530      	push	{r4, r5, lr}
 801575c:	4614      	mov	r4, r2
 801575e:	2c00      	cmp	r4, #0
 8015760:	b09b      	sub	sp, #108	@ 0x6c
 8015762:	4605      	mov	r5, r0
 8015764:	461a      	mov	r2, r3
 8015766:	da05      	bge.n	8015774 <_vsniprintf_r+0x1a>
 8015768:	238b      	movs	r3, #139	@ 0x8b
 801576a:	6003      	str	r3, [r0, #0]
 801576c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8015770:	b01b      	add	sp, #108	@ 0x6c
 8015772:	bd30      	pop	{r4, r5, pc}
 8015774:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8015778:	f8ad 300c 	strh.w	r3, [sp, #12]
 801577c:	bf14      	ite	ne
 801577e:	f104 33ff 	addne.w	r3, r4, #4294967295	@ 0xffffffff
 8015782:	4623      	moveq	r3, r4
 8015784:	9302      	str	r3, [sp, #8]
 8015786:	9305      	str	r3, [sp, #20]
 8015788:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 801578c:	9100      	str	r1, [sp, #0]
 801578e:	9104      	str	r1, [sp, #16]
 8015790:	f8ad 300e 	strh.w	r3, [sp, #14]
 8015794:	4669      	mov	r1, sp
 8015796:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 8015798:	f000 f9f2 	bl	8015b80 <_svfiprintf_r>
 801579c:	1c43      	adds	r3, r0, #1
 801579e:	bfbc      	itt	lt
 80157a0:	238b      	movlt	r3, #139	@ 0x8b
 80157a2:	602b      	strlt	r3, [r5, #0]
 80157a4:	2c00      	cmp	r4, #0
 80157a6:	d0e3      	beq.n	8015770 <_vsniprintf_r+0x16>
 80157a8:	9b00      	ldr	r3, [sp, #0]
 80157aa:	2200      	movs	r2, #0
 80157ac:	701a      	strb	r2, [r3, #0]
 80157ae:	e7df      	b.n	8015770 <_vsniprintf_r+0x16>

080157b0 <vsniprintf>:
 80157b0:	b507      	push	{r0, r1, r2, lr}
 80157b2:	9300      	str	r3, [sp, #0]
 80157b4:	4613      	mov	r3, r2
 80157b6:	460a      	mov	r2, r1
 80157b8:	4601      	mov	r1, r0
 80157ba:	4803      	ldr	r0, [pc, #12]	@ (80157c8 <vsniprintf+0x18>)
 80157bc:	6800      	ldr	r0, [r0, #0]
 80157be:	f7ff ffcc 	bl	801575a <_vsniprintf_r>
 80157c2:	b003      	add	sp, #12
 80157c4:	f85d fb04 	ldr.w	pc, [sp], #4
 80157c8:	200000c0 	.word	0x200000c0

080157cc <memcmp>:
 80157cc:	b510      	push	{r4, lr}
 80157ce:	3901      	subs	r1, #1
 80157d0:	4402      	add	r2, r0
 80157d2:	4290      	cmp	r0, r2
 80157d4:	d101      	bne.n	80157da <memcmp+0xe>
 80157d6:	2000      	movs	r0, #0
 80157d8:	e005      	b.n	80157e6 <memcmp+0x1a>
 80157da:	7803      	ldrb	r3, [r0, #0]
 80157dc:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 80157e0:	42a3      	cmp	r3, r4
 80157e2:	d001      	beq.n	80157e8 <memcmp+0x1c>
 80157e4:	1b18      	subs	r0, r3, r4
 80157e6:	bd10      	pop	{r4, pc}
 80157e8:	3001      	adds	r0, #1
 80157ea:	e7f2      	b.n	80157d2 <memcmp+0x6>

080157ec <memmove>:
 80157ec:	4288      	cmp	r0, r1
 80157ee:	b510      	push	{r4, lr}
 80157f0:	eb01 0402 	add.w	r4, r1, r2
 80157f4:	d902      	bls.n	80157fc <memmove+0x10>
 80157f6:	4284      	cmp	r4, r0
 80157f8:	4623      	mov	r3, r4
 80157fa:	d807      	bhi.n	801580c <memmove+0x20>
 80157fc:	1e43      	subs	r3, r0, #1
 80157fe:	42a1      	cmp	r1, r4
 8015800:	d008      	beq.n	8015814 <memmove+0x28>
 8015802:	f811 2b01 	ldrb.w	r2, [r1], #1
 8015806:	f803 2f01 	strb.w	r2, [r3, #1]!
 801580a:	e7f8      	b.n	80157fe <memmove+0x12>
 801580c:	4402      	add	r2, r0
 801580e:	4601      	mov	r1, r0
 8015810:	428a      	cmp	r2, r1
 8015812:	d100      	bne.n	8015816 <memmove+0x2a>
 8015814:	bd10      	pop	{r4, pc}
 8015816:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 801581a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 801581e:	e7f7      	b.n	8015810 <memmove+0x24>

08015820 <memset>:
 8015820:	4402      	add	r2, r0
 8015822:	4603      	mov	r3, r0
 8015824:	4293      	cmp	r3, r2
 8015826:	d100      	bne.n	801582a <memset+0xa>
 8015828:	4770      	bx	lr
 801582a:	f803 1b01 	strb.w	r1, [r3], #1
 801582e:	e7f9      	b.n	8015824 <memset+0x4>

08015830 <strchr>:
 8015830:	b2c9      	uxtb	r1, r1
 8015832:	4603      	mov	r3, r0
 8015834:	4618      	mov	r0, r3
 8015836:	f813 2b01 	ldrb.w	r2, [r3], #1
 801583a:	b112      	cbz	r2, 8015842 <strchr+0x12>
 801583c:	428a      	cmp	r2, r1
 801583e:	d1f9      	bne.n	8015834 <strchr+0x4>
 8015840:	4770      	bx	lr
 8015842:	2900      	cmp	r1, #0
 8015844:	bf18      	it	ne
 8015846:	2000      	movne	r0, #0
 8015848:	4770      	bx	lr

0801584a <strncmp>:
 801584a:	b510      	push	{r4, lr}
 801584c:	b16a      	cbz	r2, 801586a <strncmp+0x20>
 801584e:	3901      	subs	r1, #1
 8015850:	1884      	adds	r4, r0, r2
 8015852:	f810 2b01 	ldrb.w	r2, [r0], #1
 8015856:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 801585a:	429a      	cmp	r2, r3
 801585c:	d103      	bne.n	8015866 <strncmp+0x1c>
 801585e:	42a0      	cmp	r0, r4
 8015860:	d001      	beq.n	8015866 <strncmp+0x1c>
 8015862:	2a00      	cmp	r2, #0
 8015864:	d1f5      	bne.n	8015852 <strncmp+0x8>
 8015866:	1ad0      	subs	r0, r2, r3
 8015868:	bd10      	pop	{r4, pc}
 801586a:	4610      	mov	r0, r2
 801586c:	e7fc      	b.n	8015868 <strncmp+0x1e>

0801586e <strstr>:
 801586e:	780a      	ldrb	r2, [r1, #0]
 8015870:	b570      	push	{r4, r5, r6, lr}
 8015872:	b96a      	cbnz	r2, 8015890 <strstr+0x22>
 8015874:	bd70      	pop	{r4, r5, r6, pc}
 8015876:	429a      	cmp	r2, r3
 8015878:	d109      	bne.n	801588e <strstr+0x20>
 801587a:	460c      	mov	r4, r1
 801587c:	4605      	mov	r5, r0
 801587e:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 8015882:	2b00      	cmp	r3, #0
 8015884:	d0f6      	beq.n	8015874 <strstr+0x6>
 8015886:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 801588a:	429e      	cmp	r6, r3
 801588c:	d0f7      	beq.n	801587e <strstr+0x10>
 801588e:	3001      	adds	r0, #1
 8015890:	7803      	ldrb	r3, [r0, #0]
 8015892:	2b00      	cmp	r3, #0
 8015894:	d1ef      	bne.n	8015876 <strstr+0x8>
 8015896:	4618      	mov	r0, r3
 8015898:	e7ec      	b.n	8015874 <strstr+0x6>
	...

0801589c <_close_r>:
 801589c:	b538      	push	{r3, r4, r5, lr}
 801589e:	4d06      	ldr	r5, [pc, #24]	@ (80158b8 <_close_r+0x1c>)
 80158a0:	2300      	movs	r3, #0
 80158a2:	4604      	mov	r4, r0
 80158a4:	4608      	mov	r0, r1
 80158a6:	602b      	str	r3, [r5, #0]
 80158a8:	f7ec ffe6 	bl	8002878 <_close>
 80158ac:	1c43      	adds	r3, r0, #1
 80158ae:	d102      	bne.n	80158b6 <_close_r+0x1a>
 80158b0:	682b      	ldr	r3, [r5, #0]
 80158b2:	b103      	cbz	r3, 80158b6 <_close_r+0x1a>
 80158b4:	6023      	str	r3, [r4, #0]
 80158b6:	bd38      	pop	{r3, r4, r5, pc}
 80158b8:	2000dd88 	.word	0x2000dd88

080158bc <_lseek_r>:
 80158bc:	b538      	push	{r3, r4, r5, lr}
 80158be:	4d07      	ldr	r5, [pc, #28]	@ (80158dc <_lseek_r+0x20>)
 80158c0:	4604      	mov	r4, r0
 80158c2:	4608      	mov	r0, r1
 80158c4:	4611      	mov	r1, r2
 80158c6:	2200      	movs	r2, #0
 80158c8:	602a      	str	r2, [r5, #0]
 80158ca:	461a      	mov	r2, r3
 80158cc:	f7ec fffb 	bl	80028c6 <_lseek>
 80158d0:	1c43      	adds	r3, r0, #1
 80158d2:	d102      	bne.n	80158da <_lseek_r+0x1e>
 80158d4:	682b      	ldr	r3, [r5, #0]
 80158d6:	b103      	cbz	r3, 80158da <_lseek_r+0x1e>
 80158d8:	6023      	str	r3, [r4, #0]
 80158da:	bd38      	pop	{r3, r4, r5, pc}
 80158dc:	2000dd88 	.word	0x2000dd88

080158e0 <_read_r>:
 80158e0:	b538      	push	{r3, r4, r5, lr}
 80158e2:	4d07      	ldr	r5, [pc, #28]	@ (8015900 <_read_r+0x20>)
 80158e4:	4604      	mov	r4, r0
 80158e6:	4608      	mov	r0, r1
 80158e8:	4611      	mov	r1, r2
 80158ea:	2200      	movs	r2, #0
 80158ec:	602a      	str	r2, [r5, #0]
 80158ee:	461a      	mov	r2, r3
 80158f0:	f7ec ff89 	bl	8002806 <_read>
 80158f4:	1c43      	adds	r3, r0, #1
 80158f6:	d102      	bne.n	80158fe <_read_r+0x1e>
 80158f8:	682b      	ldr	r3, [r5, #0]
 80158fa:	b103      	cbz	r3, 80158fe <_read_r+0x1e>
 80158fc:	6023      	str	r3, [r4, #0]
 80158fe:	bd38      	pop	{r3, r4, r5, pc}
 8015900:	2000dd88 	.word	0x2000dd88

08015904 <_sbrk_r>:
 8015904:	b538      	push	{r3, r4, r5, lr}
 8015906:	4d06      	ldr	r5, [pc, #24]	@ (8015920 <_sbrk_r+0x1c>)
 8015908:	2300      	movs	r3, #0
 801590a:	4604      	mov	r4, r0
 801590c:	4608      	mov	r0, r1
 801590e:	602b      	str	r3, [r5, #0]
 8015910:	f7ec ffe6 	bl	80028e0 <_sbrk>
 8015914:	1c43      	adds	r3, r0, #1
 8015916:	d102      	bne.n	801591e <_sbrk_r+0x1a>
 8015918:	682b      	ldr	r3, [r5, #0]
 801591a:	b103      	cbz	r3, 801591e <_sbrk_r+0x1a>
 801591c:	6023      	str	r3, [r4, #0]
 801591e:	bd38      	pop	{r3, r4, r5, pc}
 8015920:	2000dd88 	.word	0x2000dd88

08015924 <_write_r>:
 8015924:	b538      	push	{r3, r4, r5, lr}
 8015926:	4d07      	ldr	r5, [pc, #28]	@ (8015944 <_write_r+0x20>)
 8015928:	4604      	mov	r4, r0
 801592a:	4608      	mov	r0, r1
 801592c:	4611      	mov	r1, r2
 801592e:	2200      	movs	r2, #0
 8015930:	602a      	str	r2, [r5, #0]
 8015932:	461a      	mov	r2, r3
 8015934:	f7ec ff84 	bl	8002840 <_write>
 8015938:	1c43      	adds	r3, r0, #1
 801593a:	d102      	bne.n	8015942 <_write_r+0x1e>
 801593c:	682b      	ldr	r3, [r5, #0]
 801593e:	b103      	cbz	r3, 8015942 <_write_r+0x1e>
 8015940:	6023      	str	r3, [r4, #0]
 8015942:	bd38      	pop	{r3, r4, r5, pc}
 8015944:	2000dd88 	.word	0x2000dd88

08015948 <__errno>:
 8015948:	4b01      	ldr	r3, [pc, #4]	@ (8015950 <__errno+0x8>)
 801594a:	6818      	ldr	r0, [r3, #0]
 801594c:	4770      	bx	lr
 801594e:	bf00      	nop
 8015950:	200000c0 	.word	0x200000c0

08015954 <__libc_init_array>:
 8015954:	b570      	push	{r4, r5, r6, lr}
 8015956:	4d0d      	ldr	r5, [pc, #52]	@ (801598c <__libc_init_array+0x38>)
 8015958:	4c0d      	ldr	r4, [pc, #52]	@ (8015990 <__libc_init_array+0x3c>)
 801595a:	1b64      	subs	r4, r4, r5
 801595c:	10a4      	asrs	r4, r4, #2
 801595e:	2600      	movs	r6, #0
 8015960:	42a6      	cmp	r6, r4
 8015962:	d109      	bne.n	8015978 <__libc_init_array+0x24>
 8015964:	4d0b      	ldr	r5, [pc, #44]	@ (8015994 <__libc_init_array+0x40>)
 8015966:	4c0c      	ldr	r4, [pc, #48]	@ (8015998 <__libc_init_array+0x44>)
 8015968:	f000 fef8 	bl	801675c <_init>
 801596c:	1b64      	subs	r4, r4, r5
 801596e:	10a4      	asrs	r4, r4, #2
 8015970:	2600      	movs	r6, #0
 8015972:	42a6      	cmp	r6, r4
 8015974:	d105      	bne.n	8015982 <__libc_init_array+0x2e>
 8015976:	bd70      	pop	{r4, r5, r6, pc}
 8015978:	f855 3b04 	ldr.w	r3, [r5], #4
 801597c:	4798      	blx	r3
 801597e:	3601      	adds	r6, #1
 8015980:	e7ee      	b.n	8015960 <__libc_init_array+0xc>
 8015982:	f855 3b04 	ldr.w	r3, [r5], #4
 8015986:	4798      	blx	r3
 8015988:	3601      	adds	r6, #1
 801598a:	e7f2      	b.n	8015972 <__libc_init_array+0x1e>
 801598c:	0801752c 	.word	0x0801752c
 8015990:	0801752c 	.word	0x0801752c
 8015994:	0801752c 	.word	0x0801752c
 8015998:	08017534 	.word	0x08017534

0801599c <__retarget_lock_init_recursive>:
 801599c:	4770      	bx	lr

0801599e <__retarget_lock_acquire_recursive>:
 801599e:	4770      	bx	lr

080159a0 <__retarget_lock_release_recursive>:
 80159a0:	4770      	bx	lr

080159a2 <strcpy>:
 80159a2:	4603      	mov	r3, r0
 80159a4:	f811 2b01 	ldrb.w	r2, [r1], #1
 80159a8:	f803 2b01 	strb.w	r2, [r3], #1
 80159ac:	2a00      	cmp	r2, #0
 80159ae:	d1f9      	bne.n	80159a4 <strcpy+0x2>
 80159b0:	4770      	bx	lr

080159b2 <memcpy>:
 80159b2:	440a      	add	r2, r1
 80159b4:	4291      	cmp	r1, r2
 80159b6:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 80159ba:	d100      	bne.n	80159be <memcpy+0xc>
 80159bc:	4770      	bx	lr
 80159be:	b510      	push	{r4, lr}
 80159c0:	f811 4b01 	ldrb.w	r4, [r1], #1
 80159c4:	f803 4f01 	strb.w	r4, [r3, #1]!
 80159c8:	4291      	cmp	r1, r2
 80159ca:	d1f9      	bne.n	80159c0 <memcpy+0xe>
 80159cc:	bd10      	pop	{r4, pc}
	...

080159d0 <__assert_func>:
 80159d0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80159d2:	4614      	mov	r4, r2
 80159d4:	461a      	mov	r2, r3
 80159d6:	4b09      	ldr	r3, [pc, #36]	@ (80159fc <__assert_func+0x2c>)
 80159d8:	681b      	ldr	r3, [r3, #0]
 80159da:	4605      	mov	r5, r0
 80159dc:	68d8      	ldr	r0, [r3, #12]
 80159de:	b954      	cbnz	r4, 80159f6 <__assert_func+0x26>
 80159e0:	4b07      	ldr	r3, [pc, #28]	@ (8015a00 <__assert_func+0x30>)
 80159e2:	461c      	mov	r4, r3
 80159e4:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80159e8:	9100      	str	r1, [sp, #0]
 80159ea:	462b      	mov	r3, r5
 80159ec:	4905      	ldr	r1, [pc, #20]	@ (8015a04 <__assert_func+0x34>)
 80159ee:	f000 fd3f 	bl	8016470 <fiprintf>
 80159f2:	f000 fde3 	bl	80165bc <abort>
 80159f6:	4b04      	ldr	r3, [pc, #16]	@ (8015a08 <__assert_func+0x38>)
 80159f8:	e7f4      	b.n	80159e4 <__assert_func+0x14>
 80159fa:	bf00      	nop
 80159fc:	200000c0 	.word	0x200000c0
 8015a00:	080174ef 	.word	0x080174ef
 8015a04:	080174c1 	.word	0x080174c1
 8015a08:	080174b4 	.word	0x080174b4

08015a0c <__env_lock>:
 8015a0c:	4801      	ldr	r0, [pc, #4]	@ (8015a14 <__env_lock+0x8>)
 8015a0e:	f7ff bfc6 	b.w	801599e <__retarget_lock_acquire_recursive>
 8015a12:	bf00      	nop
 8015a14:	2000dd8c 	.word	0x2000dd8c

08015a18 <__env_unlock>:
 8015a18:	4801      	ldr	r0, [pc, #4]	@ (8015a20 <__env_unlock+0x8>)
 8015a1a:	f7ff bfc1 	b.w	80159a0 <__retarget_lock_release_recursive>
 8015a1e:	bf00      	nop
 8015a20:	2000dd8c 	.word	0x2000dd8c

08015a24 <_free_r>:
 8015a24:	b538      	push	{r3, r4, r5, lr}
 8015a26:	4605      	mov	r5, r0
 8015a28:	2900      	cmp	r1, #0
 8015a2a:	d041      	beq.n	8015ab0 <_free_r+0x8c>
 8015a2c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8015a30:	1f0c      	subs	r4, r1, #4
 8015a32:	2b00      	cmp	r3, #0
 8015a34:	bfb8      	it	lt
 8015a36:	18e4      	addlt	r4, r4, r3
 8015a38:	f7ff fb7c 	bl	8015134 <__malloc_lock>
 8015a3c:	4a1d      	ldr	r2, [pc, #116]	@ (8015ab4 <_free_r+0x90>)
 8015a3e:	6813      	ldr	r3, [r2, #0]
 8015a40:	b933      	cbnz	r3, 8015a50 <_free_r+0x2c>
 8015a42:	6063      	str	r3, [r4, #4]
 8015a44:	6014      	str	r4, [r2, #0]
 8015a46:	4628      	mov	r0, r5
 8015a48:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8015a4c:	f7ff bb78 	b.w	8015140 <__malloc_unlock>
 8015a50:	42a3      	cmp	r3, r4
 8015a52:	d908      	bls.n	8015a66 <_free_r+0x42>
 8015a54:	6820      	ldr	r0, [r4, #0]
 8015a56:	1821      	adds	r1, r4, r0
 8015a58:	428b      	cmp	r3, r1
 8015a5a:	bf01      	itttt	eq
 8015a5c:	6819      	ldreq	r1, [r3, #0]
 8015a5e:	685b      	ldreq	r3, [r3, #4]
 8015a60:	1809      	addeq	r1, r1, r0
 8015a62:	6021      	streq	r1, [r4, #0]
 8015a64:	e7ed      	b.n	8015a42 <_free_r+0x1e>
 8015a66:	461a      	mov	r2, r3
 8015a68:	685b      	ldr	r3, [r3, #4]
 8015a6a:	b10b      	cbz	r3, 8015a70 <_free_r+0x4c>
 8015a6c:	42a3      	cmp	r3, r4
 8015a6e:	d9fa      	bls.n	8015a66 <_free_r+0x42>
 8015a70:	6811      	ldr	r1, [r2, #0]
 8015a72:	1850      	adds	r0, r2, r1
 8015a74:	42a0      	cmp	r0, r4
 8015a76:	d10b      	bne.n	8015a90 <_free_r+0x6c>
 8015a78:	6820      	ldr	r0, [r4, #0]
 8015a7a:	4401      	add	r1, r0
 8015a7c:	1850      	adds	r0, r2, r1
 8015a7e:	4283      	cmp	r3, r0
 8015a80:	6011      	str	r1, [r2, #0]
 8015a82:	d1e0      	bne.n	8015a46 <_free_r+0x22>
 8015a84:	6818      	ldr	r0, [r3, #0]
 8015a86:	685b      	ldr	r3, [r3, #4]
 8015a88:	6053      	str	r3, [r2, #4]
 8015a8a:	4408      	add	r0, r1
 8015a8c:	6010      	str	r0, [r2, #0]
 8015a8e:	e7da      	b.n	8015a46 <_free_r+0x22>
 8015a90:	d902      	bls.n	8015a98 <_free_r+0x74>
 8015a92:	230c      	movs	r3, #12
 8015a94:	602b      	str	r3, [r5, #0]
 8015a96:	e7d6      	b.n	8015a46 <_free_r+0x22>
 8015a98:	6820      	ldr	r0, [r4, #0]
 8015a9a:	1821      	adds	r1, r4, r0
 8015a9c:	428b      	cmp	r3, r1
 8015a9e:	bf04      	itt	eq
 8015aa0:	6819      	ldreq	r1, [r3, #0]
 8015aa2:	685b      	ldreq	r3, [r3, #4]
 8015aa4:	6063      	str	r3, [r4, #4]
 8015aa6:	bf04      	itt	eq
 8015aa8:	1809      	addeq	r1, r1, r0
 8015aaa:	6021      	streq	r1, [r4, #0]
 8015aac:	6054      	str	r4, [r2, #4]
 8015aae:	e7ca      	b.n	8015a46 <_free_r+0x22>
 8015ab0:	bd38      	pop	{r3, r4, r5, pc}
 8015ab2:	bf00      	nop
 8015ab4:	2000dc44 	.word	0x2000dc44

08015ab8 <_malloc_usable_size_r>:
 8015ab8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8015abc:	1f18      	subs	r0, r3, #4
 8015abe:	2b00      	cmp	r3, #0
 8015ac0:	bfbc      	itt	lt
 8015ac2:	580b      	ldrlt	r3, [r1, r0]
 8015ac4:	18c0      	addlt	r0, r0, r3
 8015ac6:	4770      	bx	lr

08015ac8 <__ssputs_r>:
 8015ac8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8015acc:	688e      	ldr	r6, [r1, #8]
 8015ace:	461f      	mov	r7, r3
 8015ad0:	42be      	cmp	r6, r7
 8015ad2:	680b      	ldr	r3, [r1, #0]
 8015ad4:	4682      	mov	sl, r0
 8015ad6:	460c      	mov	r4, r1
 8015ad8:	4690      	mov	r8, r2
 8015ada:	d82d      	bhi.n	8015b38 <__ssputs_r+0x70>
 8015adc:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8015ae0:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8015ae4:	d026      	beq.n	8015b34 <__ssputs_r+0x6c>
 8015ae6:	6965      	ldr	r5, [r4, #20]
 8015ae8:	6909      	ldr	r1, [r1, #16]
 8015aea:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8015aee:	eba3 0901 	sub.w	r9, r3, r1
 8015af2:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8015af6:	1c7b      	adds	r3, r7, #1
 8015af8:	444b      	add	r3, r9
 8015afa:	106d      	asrs	r5, r5, #1
 8015afc:	429d      	cmp	r5, r3
 8015afe:	bf38      	it	cc
 8015b00:	461d      	movcc	r5, r3
 8015b02:	0553      	lsls	r3, r2, #21
 8015b04:	d527      	bpl.n	8015b56 <__ssputs_r+0x8e>
 8015b06:	4629      	mov	r1, r5
 8015b08:	f7ff fa94 	bl	8015034 <_malloc_r>
 8015b0c:	4606      	mov	r6, r0
 8015b0e:	b360      	cbz	r0, 8015b6a <__ssputs_r+0xa2>
 8015b10:	6921      	ldr	r1, [r4, #16]
 8015b12:	464a      	mov	r2, r9
 8015b14:	f7ff ff4d 	bl	80159b2 <memcpy>
 8015b18:	89a3      	ldrh	r3, [r4, #12]
 8015b1a:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8015b1e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8015b22:	81a3      	strh	r3, [r4, #12]
 8015b24:	6126      	str	r6, [r4, #16]
 8015b26:	6165      	str	r5, [r4, #20]
 8015b28:	444e      	add	r6, r9
 8015b2a:	eba5 0509 	sub.w	r5, r5, r9
 8015b2e:	6026      	str	r6, [r4, #0]
 8015b30:	60a5      	str	r5, [r4, #8]
 8015b32:	463e      	mov	r6, r7
 8015b34:	42be      	cmp	r6, r7
 8015b36:	d900      	bls.n	8015b3a <__ssputs_r+0x72>
 8015b38:	463e      	mov	r6, r7
 8015b3a:	6820      	ldr	r0, [r4, #0]
 8015b3c:	4632      	mov	r2, r6
 8015b3e:	4641      	mov	r1, r8
 8015b40:	f7ff fe54 	bl	80157ec <memmove>
 8015b44:	68a3      	ldr	r3, [r4, #8]
 8015b46:	1b9b      	subs	r3, r3, r6
 8015b48:	60a3      	str	r3, [r4, #8]
 8015b4a:	6823      	ldr	r3, [r4, #0]
 8015b4c:	4433      	add	r3, r6
 8015b4e:	6023      	str	r3, [r4, #0]
 8015b50:	2000      	movs	r0, #0
 8015b52:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8015b56:	462a      	mov	r2, r5
 8015b58:	f7ff fb6c 	bl	8015234 <_realloc_r>
 8015b5c:	4606      	mov	r6, r0
 8015b5e:	2800      	cmp	r0, #0
 8015b60:	d1e0      	bne.n	8015b24 <__ssputs_r+0x5c>
 8015b62:	6921      	ldr	r1, [r4, #16]
 8015b64:	4650      	mov	r0, sl
 8015b66:	f7ff ff5d 	bl	8015a24 <_free_r>
 8015b6a:	230c      	movs	r3, #12
 8015b6c:	f8ca 3000 	str.w	r3, [sl]
 8015b70:	89a3      	ldrh	r3, [r4, #12]
 8015b72:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8015b76:	81a3      	strh	r3, [r4, #12]
 8015b78:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8015b7c:	e7e9      	b.n	8015b52 <__ssputs_r+0x8a>
	...

08015b80 <_svfiprintf_r>:
 8015b80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015b84:	4698      	mov	r8, r3
 8015b86:	898b      	ldrh	r3, [r1, #12]
 8015b88:	061b      	lsls	r3, r3, #24
 8015b8a:	b09d      	sub	sp, #116	@ 0x74
 8015b8c:	4607      	mov	r7, r0
 8015b8e:	460d      	mov	r5, r1
 8015b90:	4614      	mov	r4, r2
 8015b92:	d510      	bpl.n	8015bb6 <_svfiprintf_r+0x36>
 8015b94:	690b      	ldr	r3, [r1, #16]
 8015b96:	b973      	cbnz	r3, 8015bb6 <_svfiprintf_r+0x36>
 8015b98:	2140      	movs	r1, #64	@ 0x40
 8015b9a:	f7ff fa4b 	bl	8015034 <_malloc_r>
 8015b9e:	6028      	str	r0, [r5, #0]
 8015ba0:	6128      	str	r0, [r5, #16]
 8015ba2:	b930      	cbnz	r0, 8015bb2 <_svfiprintf_r+0x32>
 8015ba4:	230c      	movs	r3, #12
 8015ba6:	603b      	str	r3, [r7, #0]
 8015ba8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8015bac:	b01d      	add	sp, #116	@ 0x74
 8015bae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015bb2:	2340      	movs	r3, #64	@ 0x40
 8015bb4:	616b      	str	r3, [r5, #20]
 8015bb6:	2300      	movs	r3, #0
 8015bb8:	9309      	str	r3, [sp, #36]	@ 0x24
 8015bba:	2320      	movs	r3, #32
 8015bbc:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8015bc0:	f8cd 800c 	str.w	r8, [sp, #12]
 8015bc4:	2330      	movs	r3, #48	@ 0x30
 8015bc6:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8015d64 <_svfiprintf_r+0x1e4>
 8015bca:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8015bce:	f04f 0901 	mov.w	r9, #1
 8015bd2:	4623      	mov	r3, r4
 8015bd4:	469a      	mov	sl, r3
 8015bd6:	f813 2b01 	ldrb.w	r2, [r3], #1
 8015bda:	b10a      	cbz	r2, 8015be0 <_svfiprintf_r+0x60>
 8015bdc:	2a25      	cmp	r2, #37	@ 0x25
 8015bde:	d1f9      	bne.n	8015bd4 <_svfiprintf_r+0x54>
 8015be0:	ebba 0b04 	subs.w	fp, sl, r4
 8015be4:	d00b      	beq.n	8015bfe <_svfiprintf_r+0x7e>
 8015be6:	465b      	mov	r3, fp
 8015be8:	4622      	mov	r2, r4
 8015bea:	4629      	mov	r1, r5
 8015bec:	4638      	mov	r0, r7
 8015bee:	f7ff ff6b 	bl	8015ac8 <__ssputs_r>
 8015bf2:	3001      	adds	r0, #1
 8015bf4:	f000 80a7 	beq.w	8015d46 <_svfiprintf_r+0x1c6>
 8015bf8:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8015bfa:	445a      	add	r2, fp
 8015bfc:	9209      	str	r2, [sp, #36]	@ 0x24
 8015bfe:	f89a 3000 	ldrb.w	r3, [sl]
 8015c02:	2b00      	cmp	r3, #0
 8015c04:	f000 809f 	beq.w	8015d46 <_svfiprintf_r+0x1c6>
 8015c08:	2300      	movs	r3, #0
 8015c0a:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8015c0e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8015c12:	f10a 0a01 	add.w	sl, sl, #1
 8015c16:	9304      	str	r3, [sp, #16]
 8015c18:	9307      	str	r3, [sp, #28]
 8015c1a:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8015c1e:	931a      	str	r3, [sp, #104]	@ 0x68
 8015c20:	4654      	mov	r4, sl
 8015c22:	2205      	movs	r2, #5
 8015c24:	f814 1b01 	ldrb.w	r1, [r4], #1
 8015c28:	484e      	ldr	r0, [pc, #312]	@ (8015d64 <_svfiprintf_r+0x1e4>)
 8015c2a:	f7ea faf1 	bl	8000210 <memchr>
 8015c2e:	9a04      	ldr	r2, [sp, #16]
 8015c30:	b9d8      	cbnz	r0, 8015c6a <_svfiprintf_r+0xea>
 8015c32:	06d0      	lsls	r0, r2, #27
 8015c34:	bf44      	itt	mi
 8015c36:	2320      	movmi	r3, #32
 8015c38:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8015c3c:	0711      	lsls	r1, r2, #28
 8015c3e:	bf44      	itt	mi
 8015c40:	232b      	movmi	r3, #43	@ 0x2b
 8015c42:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8015c46:	f89a 3000 	ldrb.w	r3, [sl]
 8015c4a:	2b2a      	cmp	r3, #42	@ 0x2a
 8015c4c:	d015      	beq.n	8015c7a <_svfiprintf_r+0xfa>
 8015c4e:	9a07      	ldr	r2, [sp, #28]
 8015c50:	4654      	mov	r4, sl
 8015c52:	2000      	movs	r0, #0
 8015c54:	f04f 0c0a 	mov.w	ip, #10
 8015c58:	4621      	mov	r1, r4
 8015c5a:	f811 3b01 	ldrb.w	r3, [r1], #1
 8015c5e:	3b30      	subs	r3, #48	@ 0x30
 8015c60:	2b09      	cmp	r3, #9
 8015c62:	d94b      	bls.n	8015cfc <_svfiprintf_r+0x17c>
 8015c64:	b1b0      	cbz	r0, 8015c94 <_svfiprintf_r+0x114>
 8015c66:	9207      	str	r2, [sp, #28]
 8015c68:	e014      	b.n	8015c94 <_svfiprintf_r+0x114>
 8015c6a:	eba0 0308 	sub.w	r3, r0, r8
 8015c6e:	fa09 f303 	lsl.w	r3, r9, r3
 8015c72:	4313      	orrs	r3, r2
 8015c74:	9304      	str	r3, [sp, #16]
 8015c76:	46a2      	mov	sl, r4
 8015c78:	e7d2      	b.n	8015c20 <_svfiprintf_r+0xa0>
 8015c7a:	9b03      	ldr	r3, [sp, #12]
 8015c7c:	1d19      	adds	r1, r3, #4
 8015c7e:	681b      	ldr	r3, [r3, #0]
 8015c80:	9103      	str	r1, [sp, #12]
 8015c82:	2b00      	cmp	r3, #0
 8015c84:	bfbb      	ittet	lt
 8015c86:	425b      	neglt	r3, r3
 8015c88:	f042 0202 	orrlt.w	r2, r2, #2
 8015c8c:	9307      	strge	r3, [sp, #28]
 8015c8e:	9307      	strlt	r3, [sp, #28]
 8015c90:	bfb8      	it	lt
 8015c92:	9204      	strlt	r2, [sp, #16]
 8015c94:	7823      	ldrb	r3, [r4, #0]
 8015c96:	2b2e      	cmp	r3, #46	@ 0x2e
 8015c98:	d10a      	bne.n	8015cb0 <_svfiprintf_r+0x130>
 8015c9a:	7863      	ldrb	r3, [r4, #1]
 8015c9c:	2b2a      	cmp	r3, #42	@ 0x2a
 8015c9e:	d132      	bne.n	8015d06 <_svfiprintf_r+0x186>
 8015ca0:	9b03      	ldr	r3, [sp, #12]
 8015ca2:	1d1a      	adds	r2, r3, #4
 8015ca4:	681b      	ldr	r3, [r3, #0]
 8015ca6:	9203      	str	r2, [sp, #12]
 8015ca8:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8015cac:	3402      	adds	r4, #2
 8015cae:	9305      	str	r3, [sp, #20]
 8015cb0:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8015d74 <_svfiprintf_r+0x1f4>
 8015cb4:	7821      	ldrb	r1, [r4, #0]
 8015cb6:	2203      	movs	r2, #3
 8015cb8:	4650      	mov	r0, sl
 8015cba:	f7ea faa9 	bl	8000210 <memchr>
 8015cbe:	b138      	cbz	r0, 8015cd0 <_svfiprintf_r+0x150>
 8015cc0:	9b04      	ldr	r3, [sp, #16]
 8015cc2:	eba0 000a 	sub.w	r0, r0, sl
 8015cc6:	2240      	movs	r2, #64	@ 0x40
 8015cc8:	4082      	lsls	r2, r0
 8015cca:	4313      	orrs	r3, r2
 8015ccc:	3401      	adds	r4, #1
 8015cce:	9304      	str	r3, [sp, #16]
 8015cd0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8015cd4:	4824      	ldr	r0, [pc, #144]	@ (8015d68 <_svfiprintf_r+0x1e8>)
 8015cd6:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8015cda:	2206      	movs	r2, #6
 8015cdc:	f7ea fa98 	bl	8000210 <memchr>
 8015ce0:	2800      	cmp	r0, #0
 8015ce2:	d036      	beq.n	8015d52 <_svfiprintf_r+0x1d2>
 8015ce4:	4b21      	ldr	r3, [pc, #132]	@ (8015d6c <_svfiprintf_r+0x1ec>)
 8015ce6:	bb1b      	cbnz	r3, 8015d30 <_svfiprintf_r+0x1b0>
 8015ce8:	9b03      	ldr	r3, [sp, #12]
 8015cea:	3307      	adds	r3, #7
 8015cec:	f023 0307 	bic.w	r3, r3, #7
 8015cf0:	3308      	adds	r3, #8
 8015cf2:	9303      	str	r3, [sp, #12]
 8015cf4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8015cf6:	4433      	add	r3, r6
 8015cf8:	9309      	str	r3, [sp, #36]	@ 0x24
 8015cfa:	e76a      	b.n	8015bd2 <_svfiprintf_r+0x52>
 8015cfc:	fb0c 3202 	mla	r2, ip, r2, r3
 8015d00:	460c      	mov	r4, r1
 8015d02:	2001      	movs	r0, #1
 8015d04:	e7a8      	b.n	8015c58 <_svfiprintf_r+0xd8>
 8015d06:	2300      	movs	r3, #0
 8015d08:	3401      	adds	r4, #1
 8015d0a:	9305      	str	r3, [sp, #20]
 8015d0c:	4619      	mov	r1, r3
 8015d0e:	f04f 0c0a 	mov.w	ip, #10
 8015d12:	4620      	mov	r0, r4
 8015d14:	f810 2b01 	ldrb.w	r2, [r0], #1
 8015d18:	3a30      	subs	r2, #48	@ 0x30
 8015d1a:	2a09      	cmp	r2, #9
 8015d1c:	d903      	bls.n	8015d26 <_svfiprintf_r+0x1a6>
 8015d1e:	2b00      	cmp	r3, #0
 8015d20:	d0c6      	beq.n	8015cb0 <_svfiprintf_r+0x130>
 8015d22:	9105      	str	r1, [sp, #20]
 8015d24:	e7c4      	b.n	8015cb0 <_svfiprintf_r+0x130>
 8015d26:	fb0c 2101 	mla	r1, ip, r1, r2
 8015d2a:	4604      	mov	r4, r0
 8015d2c:	2301      	movs	r3, #1
 8015d2e:	e7f0      	b.n	8015d12 <_svfiprintf_r+0x192>
 8015d30:	ab03      	add	r3, sp, #12
 8015d32:	9300      	str	r3, [sp, #0]
 8015d34:	462a      	mov	r2, r5
 8015d36:	4b0e      	ldr	r3, [pc, #56]	@ (8015d70 <_svfiprintf_r+0x1f0>)
 8015d38:	a904      	add	r1, sp, #16
 8015d3a:	4638      	mov	r0, r7
 8015d3c:	f3af 8000 	nop.w
 8015d40:	1c42      	adds	r2, r0, #1
 8015d42:	4606      	mov	r6, r0
 8015d44:	d1d6      	bne.n	8015cf4 <_svfiprintf_r+0x174>
 8015d46:	89ab      	ldrh	r3, [r5, #12]
 8015d48:	065b      	lsls	r3, r3, #25
 8015d4a:	f53f af2d 	bmi.w	8015ba8 <_svfiprintf_r+0x28>
 8015d4e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8015d50:	e72c      	b.n	8015bac <_svfiprintf_r+0x2c>
 8015d52:	ab03      	add	r3, sp, #12
 8015d54:	9300      	str	r3, [sp, #0]
 8015d56:	462a      	mov	r2, r5
 8015d58:	4b05      	ldr	r3, [pc, #20]	@ (8015d70 <_svfiprintf_r+0x1f0>)
 8015d5a:	a904      	add	r1, sp, #16
 8015d5c:	4638      	mov	r0, r7
 8015d5e:	f000 f9bb 	bl	80160d8 <_printf_i>
 8015d62:	e7ed      	b.n	8015d40 <_svfiprintf_r+0x1c0>
 8015d64:	080174f0 	.word	0x080174f0
 8015d68:	080174fa 	.word	0x080174fa
 8015d6c:	00000000 	.word	0x00000000
 8015d70:	08015ac9 	.word	0x08015ac9
 8015d74:	080174f6 	.word	0x080174f6

08015d78 <__sfputc_r>:
 8015d78:	6893      	ldr	r3, [r2, #8]
 8015d7a:	3b01      	subs	r3, #1
 8015d7c:	2b00      	cmp	r3, #0
 8015d7e:	b410      	push	{r4}
 8015d80:	6093      	str	r3, [r2, #8]
 8015d82:	da08      	bge.n	8015d96 <__sfputc_r+0x1e>
 8015d84:	6994      	ldr	r4, [r2, #24]
 8015d86:	42a3      	cmp	r3, r4
 8015d88:	db01      	blt.n	8015d8e <__sfputc_r+0x16>
 8015d8a:	290a      	cmp	r1, #10
 8015d8c:	d103      	bne.n	8015d96 <__sfputc_r+0x1e>
 8015d8e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8015d92:	f000 bb7f 	b.w	8016494 <__swbuf_r>
 8015d96:	6813      	ldr	r3, [r2, #0]
 8015d98:	1c58      	adds	r0, r3, #1
 8015d9a:	6010      	str	r0, [r2, #0]
 8015d9c:	7019      	strb	r1, [r3, #0]
 8015d9e:	4608      	mov	r0, r1
 8015da0:	f85d 4b04 	ldr.w	r4, [sp], #4
 8015da4:	4770      	bx	lr

08015da6 <__sfputs_r>:
 8015da6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015da8:	4606      	mov	r6, r0
 8015daa:	460f      	mov	r7, r1
 8015dac:	4614      	mov	r4, r2
 8015dae:	18d5      	adds	r5, r2, r3
 8015db0:	42ac      	cmp	r4, r5
 8015db2:	d101      	bne.n	8015db8 <__sfputs_r+0x12>
 8015db4:	2000      	movs	r0, #0
 8015db6:	e007      	b.n	8015dc8 <__sfputs_r+0x22>
 8015db8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8015dbc:	463a      	mov	r2, r7
 8015dbe:	4630      	mov	r0, r6
 8015dc0:	f7ff ffda 	bl	8015d78 <__sfputc_r>
 8015dc4:	1c43      	adds	r3, r0, #1
 8015dc6:	d1f3      	bne.n	8015db0 <__sfputs_r+0xa>
 8015dc8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08015dcc <_vfiprintf_r>:
 8015dcc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015dd0:	460d      	mov	r5, r1
 8015dd2:	b09d      	sub	sp, #116	@ 0x74
 8015dd4:	4614      	mov	r4, r2
 8015dd6:	4698      	mov	r8, r3
 8015dd8:	4606      	mov	r6, r0
 8015dda:	b118      	cbz	r0, 8015de4 <_vfiprintf_r+0x18>
 8015ddc:	6a03      	ldr	r3, [r0, #32]
 8015dde:	b90b      	cbnz	r3, 8015de4 <_vfiprintf_r+0x18>
 8015de0:	f7ff fbfc 	bl	80155dc <__sinit>
 8015de4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8015de6:	07d9      	lsls	r1, r3, #31
 8015de8:	d405      	bmi.n	8015df6 <_vfiprintf_r+0x2a>
 8015dea:	89ab      	ldrh	r3, [r5, #12]
 8015dec:	059a      	lsls	r2, r3, #22
 8015dee:	d402      	bmi.n	8015df6 <_vfiprintf_r+0x2a>
 8015df0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8015df2:	f7ff fdd4 	bl	801599e <__retarget_lock_acquire_recursive>
 8015df6:	89ab      	ldrh	r3, [r5, #12]
 8015df8:	071b      	lsls	r3, r3, #28
 8015dfa:	d501      	bpl.n	8015e00 <_vfiprintf_r+0x34>
 8015dfc:	692b      	ldr	r3, [r5, #16]
 8015dfe:	b99b      	cbnz	r3, 8015e28 <_vfiprintf_r+0x5c>
 8015e00:	4629      	mov	r1, r5
 8015e02:	4630      	mov	r0, r6
 8015e04:	f000 fb84 	bl	8016510 <__swsetup_r>
 8015e08:	b170      	cbz	r0, 8015e28 <_vfiprintf_r+0x5c>
 8015e0a:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8015e0c:	07dc      	lsls	r4, r3, #31
 8015e0e:	d504      	bpl.n	8015e1a <_vfiprintf_r+0x4e>
 8015e10:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8015e14:	b01d      	add	sp, #116	@ 0x74
 8015e16:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015e1a:	89ab      	ldrh	r3, [r5, #12]
 8015e1c:	0598      	lsls	r0, r3, #22
 8015e1e:	d4f7      	bmi.n	8015e10 <_vfiprintf_r+0x44>
 8015e20:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8015e22:	f7ff fdbd 	bl	80159a0 <__retarget_lock_release_recursive>
 8015e26:	e7f3      	b.n	8015e10 <_vfiprintf_r+0x44>
 8015e28:	2300      	movs	r3, #0
 8015e2a:	9309      	str	r3, [sp, #36]	@ 0x24
 8015e2c:	2320      	movs	r3, #32
 8015e2e:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8015e32:	f8cd 800c 	str.w	r8, [sp, #12]
 8015e36:	2330      	movs	r3, #48	@ 0x30
 8015e38:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8015fe8 <_vfiprintf_r+0x21c>
 8015e3c:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8015e40:	f04f 0901 	mov.w	r9, #1
 8015e44:	4623      	mov	r3, r4
 8015e46:	469a      	mov	sl, r3
 8015e48:	f813 2b01 	ldrb.w	r2, [r3], #1
 8015e4c:	b10a      	cbz	r2, 8015e52 <_vfiprintf_r+0x86>
 8015e4e:	2a25      	cmp	r2, #37	@ 0x25
 8015e50:	d1f9      	bne.n	8015e46 <_vfiprintf_r+0x7a>
 8015e52:	ebba 0b04 	subs.w	fp, sl, r4
 8015e56:	d00b      	beq.n	8015e70 <_vfiprintf_r+0xa4>
 8015e58:	465b      	mov	r3, fp
 8015e5a:	4622      	mov	r2, r4
 8015e5c:	4629      	mov	r1, r5
 8015e5e:	4630      	mov	r0, r6
 8015e60:	f7ff ffa1 	bl	8015da6 <__sfputs_r>
 8015e64:	3001      	adds	r0, #1
 8015e66:	f000 80a7 	beq.w	8015fb8 <_vfiprintf_r+0x1ec>
 8015e6a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8015e6c:	445a      	add	r2, fp
 8015e6e:	9209      	str	r2, [sp, #36]	@ 0x24
 8015e70:	f89a 3000 	ldrb.w	r3, [sl]
 8015e74:	2b00      	cmp	r3, #0
 8015e76:	f000 809f 	beq.w	8015fb8 <_vfiprintf_r+0x1ec>
 8015e7a:	2300      	movs	r3, #0
 8015e7c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8015e80:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8015e84:	f10a 0a01 	add.w	sl, sl, #1
 8015e88:	9304      	str	r3, [sp, #16]
 8015e8a:	9307      	str	r3, [sp, #28]
 8015e8c:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8015e90:	931a      	str	r3, [sp, #104]	@ 0x68
 8015e92:	4654      	mov	r4, sl
 8015e94:	2205      	movs	r2, #5
 8015e96:	f814 1b01 	ldrb.w	r1, [r4], #1
 8015e9a:	4853      	ldr	r0, [pc, #332]	@ (8015fe8 <_vfiprintf_r+0x21c>)
 8015e9c:	f7ea f9b8 	bl	8000210 <memchr>
 8015ea0:	9a04      	ldr	r2, [sp, #16]
 8015ea2:	b9d8      	cbnz	r0, 8015edc <_vfiprintf_r+0x110>
 8015ea4:	06d1      	lsls	r1, r2, #27
 8015ea6:	bf44      	itt	mi
 8015ea8:	2320      	movmi	r3, #32
 8015eaa:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8015eae:	0713      	lsls	r3, r2, #28
 8015eb0:	bf44      	itt	mi
 8015eb2:	232b      	movmi	r3, #43	@ 0x2b
 8015eb4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8015eb8:	f89a 3000 	ldrb.w	r3, [sl]
 8015ebc:	2b2a      	cmp	r3, #42	@ 0x2a
 8015ebe:	d015      	beq.n	8015eec <_vfiprintf_r+0x120>
 8015ec0:	9a07      	ldr	r2, [sp, #28]
 8015ec2:	4654      	mov	r4, sl
 8015ec4:	2000      	movs	r0, #0
 8015ec6:	f04f 0c0a 	mov.w	ip, #10
 8015eca:	4621      	mov	r1, r4
 8015ecc:	f811 3b01 	ldrb.w	r3, [r1], #1
 8015ed0:	3b30      	subs	r3, #48	@ 0x30
 8015ed2:	2b09      	cmp	r3, #9
 8015ed4:	d94b      	bls.n	8015f6e <_vfiprintf_r+0x1a2>
 8015ed6:	b1b0      	cbz	r0, 8015f06 <_vfiprintf_r+0x13a>
 8015ed8:	9207      	str	r2, [sp, #28]
 8015eda:	e014      	b.n	8015f06 <_vfiprintf_r+0x13a>
 8015edc:	eba0 0308 	sub.w	r3, r0, r8
 8015ee0:	fa09 f303 	lsl.w	r3, r9, r3
 8015ee4:	4313      	orrs	r3, r2
 8015ee6:	9304      	str	r3, [sp, #16]
 8015ee8:	46a2      	mov	sl, r4
 8015eea:	e7d2      	b.n	8015e92 <_vfiprintf_r+0xc6>
 8015eec:	9b03      	ldr	r3, [sp, #12]
 8015eee:	1d19      	adds	r1, r3, #4
 8015ef0:	681b      	ldr	r3, [r3, #0]
 8015ef2:	9103      	str	r1, [sp, #12]
 8015ef4:	2b00      	cmp	r3, #0
 8015ef6:	bfbb      	ittet	lt
 8015ef8:	425b      	neglt	r3, r3
 8015efa:	f042 0202 	orrlt.w	r2, r2, #2
 8015efe:	9307      	strge	r3, [sp, #28]
 8015f00:	9307      	strlt	r3, [sp, #28]
 8015f02:	bfb8      	it	lt
 8015f04:	9204      	strlt	r2, [sp, #16]
 8015f06:	7823      	ldrb	r3, [r4, #0]
 8015f08:	2b2e      	cmp	r3, #46	@ 0x2e
 8015f0a:	d10a      	bne.n	8015f22 <_vfiprintf_r+0x156>
 8015f0c:	7863      	ldrb	r3, [r4, #1]
 8015f0e:	2b2a      	cmp	r3, #42	@ 0x2a
 8015f10:	d132      	bne.n	8015f78 <_vfiprintf_r+0x1ac>
 8015f12:	9b03      	ldr	r3, [sp, #12]
 8015f14:	1d1a      	adds	r2, r3, #4
 8015f16:	681b      	ldr	r3, [r3, #0]
 8015f18:	9203      	str	r2, [sp, #12]
 8015f1a:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8015f1e:	3402      	adds	r4, #2
 8015f20:	9305      	str	r3, [sp, #20]
 8015f22:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8015ff8 <_vfiprintf_r+0x22c>
 8015f26:	7821      	ldrb	r1, [r4, #0]
 8015f28:	2203      	movs	r2, #3
 8015f2a:	4650      	mov	r0, sl
 8015f2c:	f7ea f970 	bl	8000210 <memchr>
 8015f30:	b138      	cbz	r0, 8015f42 <_vfiprintf_r+0x176>
 8015f32:	9b04      	ldr	r3, [sp, #16]
 8015f34:	eba0 000a 	sub.w	r0, r0, sl
 8015f38:	2240      	movs	r2, #64	@ 0x40
 8015f3a:	4082      	lsls	r2, r0
 8015f3c:	4313      	orrs	r3, r2
 8015f3e:	3401      	adds	r4, #1
 8015f40:	9304      	str	r3, [sp, #16]
 8015f42:	f814 1b01 	ldrb.w	r1, [r4], #1
 8015f46:	4829      	ldr	r0, [pc, #164]	@ (8015fec <_vfiprintf_r+0x220>)
 8015f48:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8015f4c:	2206      	movs	r2, #6
 8015f4e:	f7ea f95f 	bl	8000210 <memchr>
 8015f52:	2800      	cmp	r0, #0
 8015f54:	d03f      	beq.n	8015fd6 <_vfiprintf_r+0x20a>
 8015f56:	4b26      	ldr	r3, [pc, #152]	@ (8015ff0 <_vfiprintf_r+0x224>)
 8015f58:	bb1b      	cbnz	r3, 8015fa2 <_vfiprintf_r+0x1d6>
 8015f5a:	9b03      	ldr	r3, [sp, #12]
 8015f5c:	3307      	adds	r3, #7
 8015f5e:	f023 0307 	bic.w	r3, r3, #7
 8015f62:	3308      	adds	r3, #8
 8015f64:	9303      	str	r3, [sp, #12]
 8015f66:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8015f68:	443b      	add	r3, r7
 8015f6a:	9309      	str	r3, [sp, #36]	@ 0x24
 8015f6c:	e76a      	b.n	8015e44 <_vfiprintf_r+0x78>
 8015f6e:	fb0c 3202 	mla	r2, ip, r2, r3
 8015f72:	460c      	mov	r4, r1
 8015f74:	2001      	movs	r0, #1
 8015f76:	e7a8      	b.n	8015eca <_vfiprintf_r+0xfe>
 8015f78:	2300      	movs	r3, #0
 8015f7a:	3401      	adds	r4, #1
 8015f7c:	9305      	str	r3, [sp, #20]
 8015f7e:	4619      	mov	r1, r3
 8015f80:	f04f 0c0a 	mov.w	ip, #10
 8015f84:	4620      	mov	r0, r4
 8015f86:	f810 2b01 	ldrb.w	r2, [r0], #1
 8015f8a:	3a30      	subs	r2, #48	@ 0x30
 8015f8c:	2a09      	cmp	r2, #9
 8015f8e:	d903      	bls.n	8015f98 <_vfiprintf_r+0x1cc>
 8015f90:	2b00      	cmp	r3, #0
 8015f92:	d0c6      	beq.n	8015f22 <_vfiprintf_r+0x156>
 8015f94:	9105      	str	r1, [sp, #20]
 8015f96:	e7c4      	b.n	8015f22 <_vfiprintf_r+0x156>
 8015f98:	fb0c 2101 	mla	r1, ip, r1, r2
 8015f9c:	4604      	mov	r4, r0
 8015f9e:	2301      	movs	r3, #1
 8015fa0:	e7f0      	b.n	8015f84 <_vfiprintf_r+0x1b8>
 8015fa2:	ab03      	add	r3, sp, #12
 8015fa4:	9300      	str	r3, [sp, #0]
 8015fa6:	462a      	mov	r2, r5
 8015fa8:	4b12      	ldr	r3, [pc, #72]	@ (8015ff4 <_vfiprintf_r+0x228>)
 8015faa:	a904      	add	r1, sp, #16
 8015fac:	4630      	mov	r0, r6
 8015fae:	f3af 8000 	nop.w
 8015fb2:	4607      	mov	r7, r0
 8015fb4:	1c78      	adds	r0, r7, #1
 8015fb6:	d1d6      	bne.n	8015f66 <_vfiprintf_r+0x19a>
 8015fb8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8015fba:	07d9      	lsls	r1, r3, #31
 8015fbc:	d405      	bmi.n	8015fca <_vfiprintf_r+0x1fe>
 8015fbe:	89ab      	ldrh	r3, [r5, #12]
 8015fc0:	059a      	lsls	r2, r3, #22
 8015fc2:	d402      	bmi.n	8015fca <_vfiprintf_r+0x1fe>
 8015fc4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8015fc6:	f7ff fceb 	bl	80159a0 <__retarget_lock_release_recursive>
 8015fca:	89ab      	ldrh	r3, [r5, #12]
 8015fcc:	065b      	lsls	r3, r3, #25
 8015fce:	f53f af1f 	bmi.w	8015e10 <_vfiprintf_r+0x44>
 8015fd2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8015fd4:	e71e      	b.n	8015e14 <_vfiprintf_r+0x48>
 8015fd6:	ab03      	add	r3, sp, #12
 8015fd8:	9300      	str	r3, [sp, #0]
 8015fda:	462a      	mov	r2, r5
 8015fdc:	4b05      	ldr	r3, [pc, #20]	@ (8015ff4 <_vfiprintf_r+0x228>)
 8015fde:	a904      	add	r1, sp, #16
 8015fe0:	4630      	mov	r0, r6
 8015fe2:	f000 f879 	bl	80160d8 <_printf_i>
 8015fe6:	e7e4      	b.n	8015fb2 <_vfiprintf_r+0x1e6>
 8015fe8:	080174f0 	.word	0x080174f0
 8015fec:	080174fa 	.word	0x080174fa
 8015ff0:	00000000 	.word	0x00000000
 8015ff4:	08015da7 	.word	0x08015da7
 8015ff8:	080174f6 	.word	0x080174f6

08015ffc <_printf_common>:
 8015ffc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8016000:	4616      	mov	r6, r2
 8016002:	4698      	mov	r8, r3
 8016004:	688a      	ldr	r2, [r1, #8]
 8016006:	690b      	ldr	r3, [r1, #16]
 8016008:	f8dd 9020 	ldr.w	r9, [sp, #32]
 801600c:	4293      	cmp	r3, r2
 801600e:	bfb8      	it	lt
 8016010:	4613      	movlt	r3, r2
 8016012:	6033      	str	r3, [r6, #0]
 8016014:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8016018:	4607      	mov	r7, r0
 801601a:	460c      	mov	r4, r1
 801601c:	b10a      	cbz	r2, 8016022 <_printf_common+0x26>
 801601e:	3301      	adds	r3, #1
 8016020:	6033      	str	r3, [r6, #0]
 8016022:	6823      	ldr	r3, [r4, #0]
 8016024:	0699      	lsls	r1, r3, #26
 8016026:	bf42      	ittt	mi
 8016028:	6833      	ldrmi	r3, [r6, #0]
 801602a:	3302      	addmi	r3, #2
 801602c:	6033      	strmi	r3, [r6, #0]
 801602e:	6825      	ldr	r5, [r4, #0]
 8016030:	f015 0506 	ands.w	r5, r5, #6
 8016034:	d106      	bne.n	8016044 <_printf_common+0x48>
 8016036:	f104 0a19 	add.w	sl, r4, #25
 801603a:	68e3      	ldr	r3, [r4, #12]
 801603c:	6832      	ldr	r2, [r6, #0]
 801603e:	1a9b      	subs	r3, r3, r2
 8016040:	42ab      	cmp	r3, r5
 8016042:	dc26      	bgt.n	8016092 <_printf_common+0x96>
 8016044:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8016048:	6822      	ldr	r2, [r4, #0]
 801604a:	3b00      	subs	r3, #0
 801604c:	bf18      	it	ne
 801604e:	2301      	movne	r3, #1
 8016050:	0692      	lsls	r2, r2, #26
 8016052:	d42b      	bmi.n	80160ac <_printf_common+0xb0>
 8016054:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8016058:	4641      	mov	r1, r8
 801605a:	4638      	mov	r0, r7
 801605c:	47c8      	blx	r9
 801605e:	3001      	adds	r0, #1
 8016060:	d01e      	beq.n	80160a0 <_printf_common+0xa4>
 8016062:	6823      	ldr	r3, [r4, #0]
 8016064:	6922      	ldr	r2, [r4, #16]
 8016066:	f003 0306 	and.w	r3, r3, #6
 801606a:	2b04      	cmp	r3, #4
 801606c:	bf02      	ittt	eq
 801606e:	68e5      	ldreq	r5, [r4, #12]
 8016070:	6833      	ldreq	r3, [r6, #0]
 8016072:	1aed      	subeq	r5, r5, r3
 8016074:	68a3      	ldr	r3, [r4, #8]
 8016076:	bf0c      	ite	eq
 8016078:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 801607c:	2500      	movne	r5, #0
 801607e:	4293      	cmp	r3, r2
 8016080:	bfc4      	itt	gt
 8016082:	1a9b      	subgt	r3, r3, r2
 8016084:	18ed      	addgt	r5, r5, r3
 8016086:	2600      	movs	r6, #0
 8016088:	341a      	adds	r4, #26
 801608a:	42b5      	cmp	r5, r6
 801608c:	d11a      	bne.n	80160c4 <_printf_common+0xc8>
 801608e:	2000      	movs	r0, #0
 8016090:	e008      	b.n	80160a4 <_printf_common+0xa8>
 8016092:	2301      	movs	r3, #1
 8016094:	4652      	mov	r2, sl
 8016096:	4641      	mov	r1, r8
 8016098:	4638      	mov	r0, r7
 801609a:	47c8      	blx	r9
 801609c:	3001      	adds	r0, #1
 801609e:	d103      	bne.n	80160a8 <_printf_common+0xac>
 80160a0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80160a4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80160a8:	3501      	adds	r5, #1
 80160aa:	e7c6      	b.n	801603a <_printf_common+0x3e>
 80160ac:	18e1      	adds	r1, r4, r3
 80160ae:	1c5a      	adds	r2, r3, #1
 80160b0:	2030      	movs	r0, #48	@ 0x30
 80160b2:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80160b6:	4422      	add	r2, r4
 80160b8:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80160bc:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80160c0:	3302      	adds	r3, #2
 80160c2:	e7c7      	b.n	8016054 <_printf_common+0x58>
 80160c4:	2301      	movs	r3, #1
 80160c6:	4622      	mov	r2, r4
 80160c8:	4641      	mov	r1, r8
 80160ca:	4638      	mov	r0, r7
 80160cc:	47c8      	blx	r9
 80160ce:	3001      	adds	r0, #1
 80160d0:	d0e6      	beq.n	80160a0 <_printf_common+0xa4>
 80160d2:	3601      	adds	r6, #1
 80160d4:	e7d9      	b.n	801608a <_printf_common+0x8e>
	...

080160d8 <_printf_i>:
 80160d8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80160dc:	7e0f      	ldrb	r7, [r1, #24]
 80160de:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80160e0:	2f78      	cmp	r7, #120	@ 0x78
 80160e2:	4691      	mov	r9, r2
 80160e4:	4680      	mov	r8, r0
 80160e6:	460c      	mov	r4, r1
 80160e8:	469a      	mov	sl, r3
 80160ea:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80160ee:	d807      	bhi.n	8016100 <_printf_i+0x28>
 80160f0:	2f62      	cmp	r7, #98	@ 0x62
 80160f2:	d80a      	bhi.n	801610a <_printf_i+0x32>
 80160f4:	2f00      	cmp	r7, #0
 80160f6:	f000 80d2 	beq.w	801629e <_printf_i+0x1c6>
 80160fa:	2f58      	cmp	r7, #88	@ 0x58
 80160fc:	f000 80b9 	beq.w	8016272 <_printf_i+0x19a>
 8016100:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8016104:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8016108:	e03a      	b.n	8016180 <_printf_i+0xa8>
 801610a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 801610e:	2b15      	cmp	r3, #21
 8016110:	d8f6      	bhi.n	8016100 <_printf_i+0x28>
 8016112:	a101      	add	r1, pc, #4	@ (adr r1, 8016118 <_printf_i+0x40>)
 8016114:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8016118:	08016171 	.word	0x08016171
 801611c:	08016185 	.word	0x08016185
 8016120:	08016101 	.word	0x08016101
 8016124:	08016101 	.word	0x08016101
 8016128:	08016101 	.word	0x08016101
 801612c:	08016101 	.word	0x08016101
 8016130:	08016185 	.word	0x08016185
 8016134:	08016101 	.word	0x08016101
 8016138:	08016101 	.word	0x08016101
 801613c:	08016101 	.word	0x08016101
 8016140:	08016101 	.word	0x08016101
 8016144:	08016285 	.word	0x08016285
 8016148:	080161af 	.word	0x080161af
 801614c:	0801623f 	.word	0x0801623f
 8016150:	08016101 	.word	0x08016101
 8016154:	08016101 	.word	0x08016101
 8016158:	080162a7 	.word	0x080162a7
 801615c:	08016101 	.word	0x08016101
 8016160:	080161af 	.word	0x080161af
 8016164:	08016101 	.word	0x08016101
 8016168:	08016101 	.word	0x08016101
 801616c:	08016247 	.word	0x08016247
 8016170:	6833      	ldr	r3, [r6, #0]
 8016172:	1d1a      	adds	r2, r3, #4
 8016174:	681b      	ldr	r3, [r3, #0]
 8016176:	6032      	str	r2, [r6, #0]
 8016178:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 801617c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8016180:	2301      	movs	r3, #1
 8016182:	e09d      	b.n	80162c0 <_printf_i+0x1e8>
 8016184:	6833      	ldr	r3, [r6, #0]
 8016186:	6820      	ldr	r0, [r4, #0]
 8016188:	1d19      	adds	r1, r3, #4
 801618a:	6031      	str	r1, [r6, #0]
 801618c:	0606      	lsls	r6, r0, #24
 801618e:	d501      	bpl.n	8016194 <_printf_i+0xbc>
 8016190:	681d      	ldr	r5, [r3, #0]
 8016192:	e003      	b.n	801619c <_printf_i+0xc4>
 8016194:	0645      	lsls	r5, r0, #25
 8016196:	d5fb      	bpl.n	8016190 <_printf_i+0xb8>
 8016198:	f9b3 5000 	ldrsh.w	r5, [r3]
 801619c:	2d00      	cmp	r5, #0
 801619e:	da03      	bge.n	80161a8 <_printf_i+0xd0>
 80161a0:	232d      	movs	r3, #45	@ 0x2d
 80161a2:	426d      	negs	r5, r5
 80161a4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80161a8:	4859      	ldr	r0, [pc, #356]	@ (8016310 <_printf_i+0x238>)
 80161aa:	230a      	movs	r3, #10
 80161ac:	e011      	b.n	80161d2 <_printf_i+0xfa>
 80161ae:	6821      	ldr	r1, [r4, #0]
 80161b0:	6833      	ldr	r3, [r6, #0]
 80161b2:	0608      	lsls	r0, r1, #24
 80161b4:	f853 5b04 	ldr.w	r5, [r3], #4
 80161b8:	d402      	bmi.n	80161c0 <_printf_i+0xe8>
 80161ba:	0649      	lsls	r1, r1, #25
 80161bc:	bf48      	it	mi
 80161be:	b2ad      	uxthmi	r5, r5
 80161c0:	2f6f      	cmp	r7, #111	@ 0x6f
 80161c2:	4853      	ldr	r0, [pc, #332]	@ (8016310 <_printf_i+0x238>)
 80161c4:	6033      	str	r3, [r6, #0]
 80161c6:	bf14      	ite	ne
 80161c8:	230a      	movne	r3, #10
 80161ca:	2308      	moveq	r3, #8
 80161cc:	2100      	movs	r1, #0
 80161ce:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80161d2:	6866      	ldr	r6, [r4, #4]
 80161d4:	60a6      	str	r6, [r4, #8]
 80161d6:	2e00      	cmp	r6, #0
 80161d8:	bfa2      	ittt	ge
 80161da:	6821      	ldrge	r1, [r4, #0]
 80161dc:	f021 0104 	bicge.w	r1, r1, #4
 80161e0:	6021      	strge	r1, [r4, #0]
 80161e2:	b90d      	cbnz	r5, 80161e8 <_printf_i+0x110>
 80161e4:	2e00      	cmp	r6, #0
 80161e6:	d04b      	beq.n	8016280 <_printf_i+0x1a8>
 80161e8:	4616      	mov	r6, r2
 80161ea:	fbb5 f1f3 	udiv	r1, r5, r3
 80161ee:	fb03 5711 	mls	r7, r3, r1, r5
 80161f2:	5dc7      	ldrb	r7, [r0, r7]
 80161f4:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80161f8:	462f      	mov	r7, r5
 80161fa:	42bb      	cmp	r3, r7
 80161fc:	460d      	mov	r5, r1
 80161fe:	d9f4      	bls.n	80161ea <_printf_i+0x112>
 8016200:	2b08      	cmp	r3, #8
 8016202:	d10b      	bne.n	801621c <_printf_i+0x144>
 8016204:	6823      	ldr	r3, [r4, #0]
 8016206:	07df      	lsls	r7, r3, #31
 8016208:	d508      	bpl.n	801621c <_printf_i+0x144>
 801620a:	6923      	ldr	r3, [r4, #16]
 801620c:	6861      	ldr	r1, [r4, #4]
 801620e:	4299      	cmp	r1, r3
 8016210:	bfde      	ittt	le
 8016212:	2330      	movle	r3, #48	@ 0x30
 8016214:	f806 3c01 	strble.w	r3, [r6, #-1]
 8016218:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 801621c:	1b92      	subs	r2, r2, r6
 801621e:	6122      	str	r2, [r4, #16]
 8016220:	f8cd a000 	str.w	sl, [sp]
 8016224:	464b      	mov	r3, r9
 8016226:	aa03      	add	r2, sp, #12
 8016228:	4621      	mov	r1, r4
 801622a:	4640      	mov	r0, r8
 801622c:	f7ff fee6 	bl	8015ffc <_printf_common>
 8016230:	3001      	adds	r0, #1
 8016232:	d14a      	bne.n	80162ca <_printf_i+0x1f2>
 8016234:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8016238:	b004      	add	sp, #16
 801623a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801623e:	6823      	ldr	r3, [r4, #0]
 8016240:	f043 0320 	orr.w	r3, r3, #32
 8016244:	6023      	str	r3, [r4, #0]
 8016246:	4833      	ldr	r0, [pc, #204]	@ (8016314 <_printf_i+0x23c>)
 8016248:	2778      	movs	r7, #120	@ 0x78
 801624a:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 801624e:	6823      	ldr	r3, [r4, #0]
 8016250:	6831      	ldr	r1, [r6, #0]
 8016252:	061f      	lsls	r7, r3, #24
 8016254:	f851 5b04 	ldr.w	r5, [r1], #4
 8016258:	d402      	bmi.n	8016260 <_printf_i+0x188>
 801625a:	065f      	lsls	r7, r3, #25
 801625c:	bf48      	it	mi
 801625e:	b2ad      	uxthmi	r5, r5
 8016260:	6031      	str	r1, [r6, #0]
 8016262:	07d9      	lsls	r1, r3, #31
 8016264:	bf44      	itt	mi
 8016266:	f043 0320 	orrmi.w	r3, r3, #32
 801626a:	6023      	strmi	r3, [r4, #0]
 801626c:	b11d      	cbz	r5, 8016276 <_printf_i+0x19e>
 801626e:	2310      	movs	r3, #16
 8016270:	e7ac      	b.n	80161cc <_printf_i+0xf4>
 8016272:	4827      	ldr	r0, [pc, #156]	@ (8016310 <_printf_i+0x238>)
 8016274:	e7e9      	b.n	801624a <_printf_i+0x172>
 8016276:	6823      	ldr	r3, [r4, #0]
 8016278:	f023 0320 	bic.w	r3, r3, #32
 801627c:	6023      	str	r3, [r4, #0]
 801627e:	e7f6      	b.n	801626e <_printf_i+0x196>
 8016280:	4616      	mov	r6, r2
 8016282:	e7bd      	b.n	8016200 <_printf_i+0x128>
 8016284:	6833      	ldr	r3, [r6, #0]
 8016286:	6825      	ldr	r5, [r4, #0]
 8016288:	6961      	ldr	r1, [r4, #20]
 801628a:	1d18      	adds	r0, r3, #4
 801628c:	6030      	str	r0, [r6, #0]
 801628e:	062e      	lsls	r6, r5, #24
 8016290:	681b      	ldr	r3, [r3, #0]
 8016292:	d501      	bpl.n	8016298 <_printf_i+0x1c0>
 8016294:	6019      	str	r1, [r3, #0]
 8016296:	e002      	b.n	801629e <_printf_i+0x1c6>
 8016298:	0668      	lsls	r0, r5, #25
 801629a:	d5fb      	bpl.n	8016294 <_printf_i+0x1bc>
 801629c:	8019      	strh	r1, [r3, #0]
 801629e:	2300      	movs	r3, #0
 80162a0:	6123      	str	r3, [r4, #16]
 80162a2:	4616      	mov	r6, r2
 80162a4:	e7bc      	b.n	8016220 <_printf_i+0x148>
 80162a6:	6833      	ldr	r3, [r6, #0]
 80162a8:	1d1a      	adds	r2, r3, #4
 80162aa:	6032      	str	r2, [r6, #0]
 80162ac:	681e      	ldr	r6, [r3, #0]
 80162ae:	6862      	ldr	r2, [r4, #4]
 80162b0:	2100      	movs	r1, #0
 80162b2:	4630      	mov	r0, r6
 80162b4:	f7e9 ffac 	bl	8000210 <memchr>
 80162b8:	b108      	cbz	r0, 80162be <_printf_i+0x1e6>
 80162ba:	1b80      	subs	r0, r0, r6
 80162bc:	6060      	str	r0, [r4, #4]
 80162be:	6863      	ldr	r3, [r4, #4]
 80162c0:	6123      	str	r3, [r4, #16]
 80162c2:	2300      	movs	r3, #0
 80162c4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80162c8:	e7aa      	b.n	8016220 <_printf_i+0x148>
 80162ca:	6923      	ldr	r3, [r4, #16]
 80162cc:	4632      	mov	r2, r6
 80162ce:	4649      	mov	r1, r9
 80162d0:	4640      	mov	r0, r8
 80162d2:	47d0      	blx	sl
 80162d4:	3001      	adds	r0, #1
 80162d6:	d0ad      	beq.n	8016234 <_printf_i+0x15c>
 80162d8:	6823      	ldr	r3, [r4, #0]
 80162da:	079b      	lsls	r3, r3, #30
 80162dc:	d413      	bmi.n	8016306 <_printf_i+0x22e>
 80162de:	68e0      	ldr	r0, [r4, #12]
 80162e0:	9b03      	ldr	r3, [sp, #12]
 80162e2:	4298      	cmp	r0, r3
 80162e4:	bfb8      	it	lt
 80162e6:	4618      	movlt	r0, r3
 80162e8:	e7a6      	b.n	8016238 <_printf_i+0x160>
 80162ea:	2301      	movs	r3, #1
 80162ec:	4632      	mov	r2, r6
 80162ee:	4649      	mov	r1, r9
 80162f0:	4640      	mov	r0, r8
 80162f2:	47d0      	blx	sl
 80162f4:	3001      	adds	r0, #1
 80162f6:	d09d      	beq.n	8016234 <_printf_i+0x15c>
 80162f8:	3501      	adds	r5, #1
 80162fa:	68e3      	ldr	r3, [r4, #12]
 80162fc:	9903      	ldr	r1, [sp, #12]
 80162fe:	1a5b      	subs	r3, r3, r1
 8016300:	42ab      	cmp	r3, r5
 8016302:	dcf2      	bgt.n	80162ea <_printf_i+0x212>
 8016304:	e7eb      	b.n	80162de <_printf_i+0x206>
 8016306:	2500      	movs	r5, #0
 8016308:	f104 0619 	add.w	r6, r4, #25
 801630c:	e7f5      	b.n	80162fa <_printf_i+0x222>
 801630e:	bf00      	nop
 8016310:	08017501 	.word	0x08017501
 8016314:	08017512 	.word	0x08017512

08016318 <__sflush_r>:
 8016318:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 801631c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016320:	0716      	lsls	r6, r2, #28
 8016322:	4605      	mov	r5, r0
 8016324:	460c      	mov	r4, r1
 8016326:	d454      	bmi.n	80163d2 <__sflush_r+0xba>
 8016328:	684b      	ldr	r3, [r1, #4]
 801632a:	2b00      	cmp	r3, #0
 801632c:	dc02      	bgt.n	8016334 <__sflush_r+0x1c>
 801632e:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8016330:	2b00      	cmp	r3, #0
 8016332:	dd48      	ble.n	80163c6 <__sflush_r+0xae>
 8016334:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8016336:	2e00      	cmp	r6, #0
 8016338:	d045      	beq.n	80163c6 <__sflush_r+0xae>
 801633a:	2300      	movs	r3, #0
 801633c:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8016340:	682f      	ldr	r7, [r5, #0]
 8016342:	6a21      	ldr	r1, [r4, #32]
 8016344:	602b      	str	r3, [r5, #0]
 8016346:	d030      	beq.n	80163aa <__sflush_r+0x92>
 8016348:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 801634a:	89a3      	ldrh	r3, [r4, #12]
 801634c:	0759      	lsls	r1, r3, #29
 801634e:	d505      	bpl.n	801635c <__sflush_r+0x44>
 8016350:	6863      	ldr	r3, [r4, #4]
 8016352:	1ad2      	subs	r2, r2, r3
 8016354:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8016356:	b10b      	cbz	r3, 801635c <__sflush_r+0x44>
 8016358:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 801635a:	1ad2      	subs	r2, r2, r3
 801635c:	2300      	movs	r3, #0
 801635e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8016360:	6a21      	ldr	r1, [r4, #32]
 8016362:	4628      	mov	r0, r5
 8016364:	47b0      	blx	r6
 8016366:	1c43      	adds	r3, r0, #1
 8016368:	89a3      	ldrh	r3, [r4, #12]
 801636a:	d106      	bne.n	801637a <__sflush_r+0x62>
 801636c:	6829      	ldr	r1, [r5, #0]
 801636e:	291d      	cmp	r1, #29
 8016370:	d82b      	bhi.n	80163ca <__sflush_r+0xb2>
 8016372:	4a2a      	ldr	r2, [pc, #168]	@ (801641c <__sflush_r+0x104>)
 8016374:	410a      	asrs	r2, r1
 8016376:	07d6      	lsls	r6, r2, #31
 8016378:	d427      	bmi.n	80163ca <__sflush_r+0xb2>
 801637a:	2200      	movs	r2, #0
 801637c:	6062      	str	r2, [r4, #4]
 801637e:	04d9      	lsls	r1, r3, #19
 8016380:	6922      	ldr	r2, [r4, #16]
 8016382:	6022      	str	r2, [r4, #0]
 8016384:	d504      	bpl.n	8016390 <__sflush_r+0x78>
 8016386:	1c42      	adds	r2, r0, #1
 8016388:	d101      	bne.n	801638e <__sflush_r+0x76>
 801638a:	682b      	ldr	r3, [r5, #0]
 801638c:	b903      	cbnz	r3, 8016390 <__sflush_r+0x78>
 801638e:	6560      	str	r0, [r4, #84]	@ 0x54
 8016390:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8016392:	602f      	str	r7, [r5, #0]
 8016394:	b1b9      	cbz	r1, 80163c6 <__sflush_r+0xae>
 8016396:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 801639a:	4299      	cmp	r1, r3
 801639c:	d002      	beq.n	80163a4 <__sflush_r+0x8c>
 801639e:	4628      	mov	r0, r5
 80163a0:	f7ff fb40 	bl	8015a24 <_free_r>
 80163a4:	2300      	movs	r3, #0
 80163a6:	6363      	str	r3, [r4, #52]	@ 0x34
 80163a8:	e00d      	b.n	80163c6 <__sflush_r+0xae>
 80163aa:	2301      	movs	r3, #1
 80163ac:	4628      	mov	r0, r5
 80163ae:	47b0      	blx	r6
 80163b0:	4602      	mov	r2, r0
 80163b2:	1c50      	adds	r0, r2, #1
 80163b4:	d1c9      	bne.n	801634a <__sflush_r+0x32>
 80163b6:	682b      	ldr	r3, [r5, #0]
 80163b8:	2b00      	cmp	r3, #0
 80163ba:	d0c6      	beq.n	801634a <__sflush_r+0x32>
 80163bc:	2b1d      	cmp	r3, #29
 80163be:	d001      	beq.n	80163c4 <__sflush_r+0xac>
 80163c0:	2b16      	cmp	r3, #22
 80163c2:	d11e      	bne.n	8016402 <__sflush_r+0xea>
 80163c4:	602f      	str	r7, [r5, #0]
 80163c6:	2000      	movs	r0, #0
 80163c8:	e022      	b.n	8016410 <__sflush_r+0xf8>
 80163ca:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80163ce:	b21b      	sxth	r3, r3
 80163d0:	e01b      	b.n	801640a <__sflush_r+0xf2>
 80163d2:	690f      	ldr	r7, [r1, #16]
 80163d4:	2f00      	cmp	r7, #0
 80163d6:	d0f6      	beq.n	80163c6 <__sflush_r+0xae>
 80163d8:	0793      	lsls	r3, r2, #30
 80163da:	680e      	ldr	r6, [r1, #0]
 80163dc:	bf08      	it	eq
 80163de:	694b      	ldreq	r3, [r1, #20]
 80163e0:	600f      	str	r7, [r1, #0]
 80163e2:	bf18      	it	ne
 80163e4:	2300      	movne	r3, #0
 80163e6:	eba6 0807 	sub.w	r8, r6, r7
 80163ea:	608b      	str	r3, [r1, #8]
 80163ec:	f1b8 0f00 	cmp.w	r8, #0
 80163f0:	dde9      	ble.n	80163c6 <__sflush_r+0xae>
 80163f2:	6a21      	ldr	r1, [r4, #32]
 80163f4:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 80163f6:	4643      	mov	r3, r8
 80163f8:	463a      	mov	r2, r7
 80163fa:	4628      	mov	r0, r5
 80163fc:	47b0      	blx	r6
 80163fe:	2800      	cmp	r0, #0
 8016400:	dc08      	bgt.n	8016414 <__sflush_r+0xfc>
 8016402:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8016406:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801640a:	81a3      	strh	r3, [r4, #12]
 801640c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8016410:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016414:	4407      	add	r7, r0
 8016416:	eba8 0800 	sub.w	r8, r8, r0
 801641a:	e7e7      	b.n	80163ec <__sflush_r+0xd4>
 801641c:	dfbffffe 	.word	0xdfbffffe

08016420 <_fflush_r>:
 8016420:	b538      	push	{r3, r4, r5, lr}
 8016422:	690b      	ldr	r3, [r1, #16]
 8016424:	4605      	mov	r5, r0
 8016426:	460c      	mov	r4, r1
 8016428:	b913      	cbnz	r3, 8016430 <_fflush_r+0x10>
 801642a:	2500      	movs	r5, #0
 801642c:	4628      	mov	r0, r5
 801642e:	bd38      	pop	{r3, r4, r5, pc}
 8016430:	b118      	cbz	r0, 801643a <_fflush_r+0x1a>
 8016432:	6a03      	ldr	r3, [r0, #32]
 8016434:	b90b      	cbnz	r3, 801643a <_fflush_r+0x1a>
 8016436:	f7ff f8d1 	bl	80155dc <__sinit>
 801643a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801643e:	2b00      	cmp	r3, #0
 8016440:	d0f3      	beq.n	801642a <_fflush_r+0xa>
 8016442:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8016444:	07d0      	lsls	r0, r2, #31
 8016446:	d404      	bmi.n	8016452 <_fflush_r+0x32>
 8016448:	0599      	lsls	r1, r3, #22
 801644a:	d402      	bmi.n	8016452 <_fflush_r+0x32>
 801644c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801644e:	f7ff faa6 	bl	801599e <__retarget_lock_acquire_recursive>
 8016452:	4628      	mov	r0, r5
 8016454:	4621      	mov	r1, r4
 8016456:	f7ff ff5f 	bl	8016318 <__sflush_r>
 801645a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 801645c:	07da      	lsls	r2, r3, #31
 801645e:	4605      	mov	r5, r0
 8016460:	d4e4      	bmi.n	801642c <_fflush_r+0xc>
 8016462:	89a3      	ldrh	r3, [r4, #12]
 8016464:	059b      	lsls	r3, r3, #22
 8016466:	d4e1      	bmi.n	801642c <_fflush_r+0xc>
 8016468:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801646a:	f7ff fa99 	bl	80159a0 <__retarget_lock_release_recursive>
 801646e:	e7dd      	b.n	801642c <_fflush_r+0xc>

08016470 <fiprintf>:
 8016470:	b40e      	push	{r1, r2, r3}
 8016472:	b503      	push	{r0, r1, lr}
 8016474:	4601      	mov	r1, r0
 8016476:	ab03      	add	r3, sp, #12
 8016478:	4805      	ldr	r0, [pc, #20]	@ (8016490 <fiprintf+0x20>)
 801647a:	f853 2b04 	ldr.w	r2, [r3], #4
 801647e:	6800      	ldr	r0, [r0, #0]
 8016480:	9301      	str	r3, [sp, #4]
 8016482:	f7ff fca3 	bl	8015dcc <_vfiprintf_r>
 8016486:	b002      	add	sp, #8
 8016488:	f85d eb04 	ldr.w	lr, [sp], #4
 801648c:	b003      	add	sp, #12
 801648e:	4770      	bx	lr
 8016490:	200000c0 	.word	0x200000c0

08016494 <__swbuf_r>:
 8016494:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8016496:	460e      	mov	r6, r1
 8016498:	4614      	mov	r4, r2
 801649a:	4605      	mov	r5, r0
 801649c:	b118      	cbz	r0, 80164a6 <__swbuf_r+0x12>
 801649e:	6a03      	ldr	r3, [r0, #32]
 80164a0:	b90b      	cbnz	r3, 80164a6 <__swbuf_r+0x12>
 80164a2:	f7ff f89b 	bl	80155dc <__sinit>
 80164a6:	69a3      	ldr	r3, [r4, #24]
 80164a8:	60a3      	str	r3, [r4, #8]
 80164aa:	89a3      	ldrh	r3, [r4, #12]
 80164ac:	071a      	lsls	r2, r3, #28
 80164ae:	d501      	bpl.n	80164b4 <__swbuf_r+0x20>
 80164b0:	6923      	ldr	r3, [r4, #16]
 80164b2:	b943      	cbnz	r3, 80164c6 <__swbuf_r+0x32>
 80164b4:	4621      	mov	r1, r4
 80164b6:	4628      	mov	r0, r5
 80164b8:	f000 f82a 	bl	8016510 <__swsetup_r>
 80164bc:	b118      	cbz	r0, 80164c6 <__swbuf_r+0x32>
 80164be:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 80164c2:	4638      	mov	r0, r7
 80164c4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80164c6:	6823      	ldr	r3, [r4, #0]
 80164c8:	6922      	ldr	r2, [r4, #16]
 80164ca:	1a98      	subs	r0, r3, r2
 80164cc:	6963      	ldr	r3, [r4, #20]
 80164ce:	b2f6      	uxtb	r6, r6
 80164d0:	4283      	cmp	r3, r0
 80164d2:	4637      	mov	r7, r6
 80164d4:	dc05      	bgt.n	80164e2 <__swbuf_r+0x4e>
 80164d6:	4621      	mov	r1, r4
 80164d8:	4628      	mov	r0, r5
 80164da:	f7ff ffa1 	bl	8016420 <_fflush_r>
 80164de:	2800      	cmp	r0, #0
 80164e0:	d1ed      	bne.n	80164be <__swbuf_r+0x2a>
 80164e2:	68a3      	ldr	r3, [r4, #8]
 80164e4:	3b01      	subs	r3, #1
 80164e6:	60a3      	str	r3, [r4, #8]
 80164e8:	6823      	ldr	r3, [r4, #0]
 80164ea:	1c5a      	adds	r2, r3, #1
 80164ec:	6022      	str	r2, [r4, #0]
 80164ee:	701e      	strb	r6, [r3, #0]
 80164f0:	6962      	ldr	r2, [r4, #20]
 80164f2:	1c43      	adds	r3, r0, #1
 80164f4:	429a      	cmp	r2, r3
 80164f6:	d004      	beq.n	8016502 <__swbuf_r+0x6e>
 80164f8:	89a3      	ldrh	r3, [r4, #12]
 80164fa:	07db      	lsls	r3, r3, #31
 80164fc:	d5e1      	bpl.n	80164c2 <__swbuf_r+0x2e>
 80164fe:	2e0a      	cmp	r6, #10
 8016500:	d1df      	bne.n	80164c2 <__swbuf_r+0x2e>
 8016502:	4621      	mov	r1, r4
 8016504:	4628      	mov	r0, r5
 8016506:	f7ff ff8b 	bl	8016420 <_fflush_r>
 801650a:	2800      	cmp	r0, #0
 801650c:	d0d9      	beq.n	80164c2 <__swbuf_r+0x2e>
 801650e:	e7d6      	b.n	80164be <__swbuf_r+0x2a>

08016510 <__swsetup_r>:
 8016510:	b538      	push	{r3, r4, r5, lr}
 8016512:	4b29      	ldr	r3, [pc, #164]	@ (80165b8 <__swsetup_r+0xa8>)
 8016514:	4605      	mov	r5, r0
 8016516:	6818      	ldr	r0, [r3, #0]
 8016518:	460c      	mov	r4, r1
 801651a:	b118      	cbz	r0, 8016524 <__swsetup_r+0x14>
 801651c:	6a03      	ldr	r3, [r0, #32]
 801651e:	b90b      	cbnz	r3, 8016524 <__swsetup_r+0x14>
 8016520:	f7ff f85c 	bl	80155dc <__sinit>
 8016524:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8016528:	0719      	lsls	r1, r3, #28
 801652a:	d422      	bmi.n	8016572 <__swsetup_r+0x62>
 801652c:	06da      	lsls	r2, r3, #27
 801652e:	d407      	bmi.n	8016540 <__swsetup_r+0x30>
 8016530:	2209      	movs	r2, #9
 8016532:	602a      	str	r2, [r5, #0]
 8016534:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8016538:	81a3      	strh	r3, [r4, #12]
 801653a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801653e:	e033      	b.n	80165a8 <__swsetup_r+0x98>
 8016540:	0758      	lsls	r0, r3, #29
 8016542:	d512      	bpl.n	801656a <__swsetup_r+0x5a>
 8016544:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8016546:	b141      	cbz	r1, 801655a <__swsetup_r+0x4a>
 8016548:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 801654c:	4299      	cmp	r1, r3
 801654e:	d002      	beq.n	8016556 <__swsetup_r+0x46>
 8016550:	4628      	mov	r0, r5
 8016552:	f7ff fa67 	bl	8015a24 <_free_r>
 8016556:	2300      	movs	r3, #0
 8016558:	6363      	str	r3, [r4, #52]	@ 0x34
 801655a:	89a3      	ldrh	r3, [r4, #12]
 801655c:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8016560:	81a3      	strh	r3, [r4, #12]
 8016562:	2300      	movs	r3, #0
 8016564:	6063      	str	r3, [r4, #4]
 8016566:	6923      	ldr	r3, [r4, #16]
 8016568:	6023      	str	r3, [r4, #0]
 801656a:	89a3      	ldrh	r3, [r4, #12]
 801656c:	f043 0308 	orr.w	r3, r3, #8
 8016570:	81a3      	strh	r3, [r4, #12]
 8016572:	6923      	ldr	r3, [r4, #16]
 8016574:	b94b      	cbnz	r3, 801658a <__swsetup_r+0x7a>
 8016576:	89a3      	ldrh	r3, [r4, #12]
 8016578:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 801657c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8016580:	d003      	beq.n	801658a <__swsetup_r+0x7a>
 8016582:	4621      	mov	r1, r4
 8016584:	4628      	mov	r0, r5
 8016586:	f000 f846 	bl	8016616 <__smakebuf_r>
 801658a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801658e:	f013 0201 	ands.w	r2, r3, #1
 8016592:	d00a      	beq.n	80165aa <__swsetup_r+0x9a>
 8016594:	2200      	movs	r2, #0
 8016596:	60a2      	str	r2, [r4, #8]
 8016598:	6962      	ldr	r2, [r4, #20]
 801659a:	4252      	negs	r2, r2
 801659c:	61a2      	str	r2, [r4, #24]
 801659e:	6922      	ldr	r2, [r4, #16]
 80165a0:	b942      	cbnz	r2, 80165b4 <__swsetup_r+0xa4>
 80165a2:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 80165a6:	d1c5      	bne.n	8016534 <__swsetup_r+0x24>
 80165a8:	bd38      	pop	{r3, r4, r5, pc}
 80165aa:	0799      	lsls	r1, r3, #30
 80165ac:	bf58      	it	pl
 80165ae:	6962      	ldrpl	r2, [r4, #20]
 80165b0:	60a2      	str	r2, [r4, #8]
 80165b2:	e7f4      	b.n	801659e <__swsetup_r+0x8e>
 80165b4:	2000      	movs	r0, #0
 80165b6:	e7f7      	b.n	80165a8 <__swsetup_r+0x98>
 80165b8:	200000c0 	.word	0x200000c0

080165bc <abort>:
 80165bc:	b508      	push	{r3, lr}
 80165be:	2006      	movs	r0, #6
 80165c0:	f000 f88e 	bl	80166e0 <raise>
 80165c4:	2001      	movs	r0, #1
 80165c6:	f7ec f913 	bl	80027f0 <_exit>

080165ca <__swhatbuf_r>:
 80165ca:	b570      	push	{r4, r5, r6, lr}
 80165cc:	460c      	mov	r4, r1
 80165ce:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80165d2:	2900      	cmp	r1, #0
 80165d4:	b096      	sub	sp, #88	@ 0x58
 80165d6:	4615      	mov	r5, r2
 80165d8:	461e      	mov	r6, r3
 80165da:	da0d      	bge.n	80165f8 <__swhatbuf_r+0x2e>
 80165dc:	89a3      	ldrh	r3, [r4, #12]
 80165de:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80165e2:	f04f 0100 	mov.w	r1, #0
 80165e6:	bf14      	ite	ne
 80165e8:	2340      	movne	r3, #64	@ 0x40
 80165ea:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 80165ee:	2000      	movs	r0, #0
 80165f0:	6031      	str	r1, [r6, #0]
 80165f2:	602b      	str	r3, [r5, #0]
 80165f4:	b016      	add	sp, #88	@ 0x58
 80165f6:	bd70      	pop	{r4, r5, r6, pc}
 80165f8:	466a      	mov	r2, sp
 80165fa:	f000 f879 	bl	80166f0 <_fstat_r>
 80165fe:	2800      	cmp	r0, #0
 8016600:	dbec      	blt.n	80165dc <__swhatbuf_r+0x12>
 8016602:	9901      	ldr	r1, [sp, #4]
 8016604:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8016608:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 801660c:	4259      	negs	r1, r3
 801660e:	4159      	adcs	r1, r3
 8016610:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8016614:	e7eb      	b.n	80165ee <__swhatbuf_r+0x24>

08016616 <__smakebuf_r>:
 8016616:	898b      	ldrh	r3, [r1, #12]
 8016618:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801661a:	079d      	lsls	r5, r3, #30
 801661c:	4606      	mov	r6, r0
 801661e:	460c      	mov	r4, r1
 8016620:	d507      	bpl.n	8016632 <__smakebuf_r+0x1c>
 8016622:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8016626:	6023      	str	r3, [r4, #0]
 8016628:	6123      	str	r3, [r4, #16]
 801662a:	2301      	movs	r3, #1
 801662c:	6163      	str	r3, [r4, #20]
 801662e:	b003      	add	sp, #12
 8016630:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8016632:	ab01      	add	r3, sp, #4
 8016634:	466a      	mov	r2, sp
 8016636:	f7ff ffc8 	bl	80165ca <__swhatbuf_r>
 801663a:	9f00      	ldr	r7, [sp, #0]
 801663c:	4605      	mov	r5, r0
 801663e:	4639      	mov	r1, r7
 8016640:	4630      	mov	r0, r6
 8016642:	f7fe fcf7 	bl	8015034 <_malloc_r>
 8016646:	b948      	cbnz	r0, 801665c <__smakebuf_r+0x46>
 8016648:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801664c:	059a      	lsls	r2, r3, #22
 801664e:	d4ee      	bmi.n	801662e <__smakebuf_r+0x18>
 8016650:	f023 0303 	bic.w	r3, r3, #3
 8016654:	f043 0302 	orr.w	r3, r3, #2
 8016658:	81a3      	strh	r3, [r4, #12]
 801665a:	e7e2      	b.n	8016622 <__smakebuf_r+0xc>
 801665c:	89a3      	ldrh	r3, [r4, #12]
 801665e:	6020      	str	r0, [r4, #0]
 8016660:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8016664:	81a3      	strh	r3, [r4, #12]
 8016666:	9b01      	ldr	r3, [sp, #4]
 8016668:	e9c4 0704 	strd	r0, r7, [r4, #16]
 801666c:	b15b      	cbz	r3, 8016686 <__smakebuf_r+0x70>
 801666e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8016672:	4630      	mov	r0, r6
 8016674:	f000 f84e 	bl	8016714 <_isatty_r>
 8016678:	b128      	cbz	r0, 8016686 <__smakebuf_r+0x70>
 801667a:	89a3      	ldrh	r3, [r4, #12]
 801667c:	f023 0303 	bic.w	r3, r3, #3
 8016680:	f043 0301 	orr.w	r3, r3, #1
 8016684:	81a3      	strh	r3, [r4, #12]
 8016686:	89a3      	ldrh	r3, [r4, #12]
 8016688:	431d      	orrs	r5, r3
 801668a:	81a5      	strh	r5, [r4, #12]
 801668c:	e7cf      	b.n	801662e <__smakebuf_r+0x18>

0801668e <_raise_r>:
 801668e:	291f      	cmp	r1, #31
 8016690:	b538      	push	{r3, r4, r5, lr}
 8016692:	4605      	mov	r5, r0
 8016694:	460c      	mov	r4, r1
 8016696:	d904      	bls.n	80166a2 <_raise_r+0x14>
 8016698:	2316      	movs	r3, #22
 801669a:	6003      	str	r3, [r0, #0]
 801669c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80166a0:	bd38      	pop	{r3, r4, r5, pc}
 80166a2:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 80166a4:	b112      	cbz	r2, 80166ac <_raise_r+0x1e>
 80166a6:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80166aa:	b94b      	cbnz	r3, 80166c0 <_raise_r+0x32>
 80166ac:	4628      	mov	r0, r5
 80166ae:	f000 f853 	bl	8016758 <_getpid_r>
 80166b2:	4622      	mov	r2, r4
 80166b4:	4601      	mov	r1, r0
 80166b6:	4628      	mov	r0, r5
 80166b8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80166bc:	f000 b83a 	b.w	8016734 <_kill_r>
 80166c0:	2b01      	cmp	r3, #1
 80166c2:	d00a      	beq.n	80166da <_raise_r+0x4c>
 80166c4:	1c59      	adds	r1, r3, #1
 80166c6:	d103      	bne.n	80166d0 <_raise_r+0x42>
 80166c8:	2316      	movs	r3, #22
 80166ca:	6003      	str	r3, [r0, #0]
 80166cc:	2001      	movs	r0, #1
 80166ce:	e7e7      	b.n	80166a0 <_raise_r+0x12>
 80166d0:	2100      	movs	r1, #0
 80166d2:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 80166d6:	4620      	mov	r0, r4
 80166d8:	4798      	blx	r3
 80166da:	2000      	movs	r0, #0
 80166dc:	e7e0      	b.n	80166a0 <_raise_r+0x12>
	...

080166e0 <raise>:
 80166e0:	4b02      	ldr	r3, [pc, #8]	@ (80166ec <raise+0xc>)
 80166e2:	4601      	mov	r1, r0
 80166e4:	6818      	ldr	r0, [r3, #0]
 80166e6:	f7ff bfd2 	b.w	801668e <_raise_r>
 80166ea:	bf00      	nop
 80166ec:	200000c0 	.word	0x200000c0

080166f0 <_fstat_r>:
 80166f0:	b538      	push	{r3, r4, r5, lr}
 80166f2:	4d07      	ldr	r5, [pc, #28]	@ (8016710 <_fstat_r+0x20>)
 80166f4:	2300      	movs	r3, #0
 80166f6:	4604      	mov	r4, r0
 80166f8:	4608      	mov	r0, r1
 80166fa:	4611      	mov	r1, r2
 80166fc:	602b      	str	r3, [r5, #0]
 80166fe:	f7ec f8c7 	bl	8002890 <_fstat>
 8016702:	1c43      	adds	r3, r0, #1
 8016704:	d102      	bne.n	801670c <_fstat_r+0x1c>
 8016706:	682b      	ldr	r3, [r5, #0]
 8016708:	b103      	cbz	r3, 801670c <_fstat_r+0x1c>
 801670a:	6023      	str	r3, [r4, #0]
 801670c:	bd38      	pop	{r3, r4, r5, pc}
 801670e:	bf00      	nop
 8016710:	2000dd88 	.word	0x2000dd88

08016714 <_isatty_r>:
 8016714:	b538      	push	{r3, r4, r5, lr}
 8016716:	4d06      	ldr	r5, [pc, #24]	@ (8016730 <_isatty_r+0x1c>)
 8016718:	2300      	movs	r3, #0
 801671a:	4604      	mov	r4, r0
 801671c:	4608      	mov	r0, r1
 801671e:	602b      	str	r3, [r5, #0]
 8016720:	f7ec f8c6 	bl	80028b0 <_isatty>
 8016724:	1c43      	adds	r3, r0, #1
 8016726:	d102      	bne.n	801672e <_isatty_r+0x1a>
 8016728:	682b      	ldr	r3, [r5, #0]
 801672a:	b103      	cbz	r3, 801672e <_isatty_r+0x1a>
 801672c:	6023      	str	r3, [r4, #0]
 801672e:	bd38      	pop	{r3, r4, r5, pc}
 8016730:	2000dd88 	.word	0x2000dd88

08016734 <_kill_r>:
 8016734:	b538      	push	{r3, r4, r5, lr}
 8016736:	4d07      	ldr	r5, [pc, #28]	@ (8016754 <_kill_r+0x20>)
 8016738:	2300      	movs	r3, #0
 801673a:	4604      	mov	r4, r0
 801673c:	4608      	mov	r0, r1
 801673e:	4611      	mov	r1, r2
 8016740:	602b      	str	r3, [r5, #0]
 8016742:	f7ec f845 	bl	80027d0 <_kill>
 8016746:	1c43      	adds	r3, r0, #1
 8016748:	d102      	bne.n	8016750 <_kill_r+0x1c>
 801674a:	682b      	ldr	r3, [r5, #0]
 801674c:	b103      	cbz	r3, 8016750 <_kill_r+0x1c>
 801674e:	6023      	str	r3, [r4, #0]
 8016750:	bd38      	pop	{r3, r4, r5, pc}
 8016752:	bf00      	nop
 8016754:	2000dd88 	.word	0x2000dd88

08016758 <_getpid_r>:
 8016758:	f7ec b832 	b.w	80027c0 <_getpid>

0801675c <_init>:
 801675c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801675e:	bf00      	nop
 8016760:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8016762:	bc08      	pop	{r3}
 8016764:	469e      	mov	lr, r3
 8016766:	4770      	bx	lr

08016768 <_fini>:
 8016768:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801676a:	bf00      	nop
 801676c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801676e:	bc08      	pop	{r3}
 8016770:	469e      	mov	lr, r3
 8016772:	4770      	bx	lr
